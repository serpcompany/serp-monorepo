[
  {
    "owner": "finbuckle",
    "repo": "finbuckle.multitenant",
    "content": "TITLE: Basic Finbuckle.MultiTenant Configuration in ASP.NET Core\nDESCRIPTION: Shows the basic setup of Finbuckle.MultiTenant in an ASP.NET Core application, including service registration and middleware configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core Application\nDESCRIPTION: Basic setup for Finbuckle.MultiTenant in an ASP.NET Core application, configuring host strategy for tenant identification and configuration store for tenant details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy using WithStrategy<TStrategy> method. It shows two approaches: one using dependency injection and another using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Services in ASP.NET Core\nDESCRIPTION: Basic configuration setup for MultiTenant services including host strategy and configuration store implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\n// other app code...\n\napp.UseMultiTenant();\n\n// other app code...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Databases for Multi-Tenant Data Isolation in C#\nDESCRIPTION: This snippet demonstrates how to implement separate databases for each tenant using a custom ITenantInfo implementation and configuring the database context. It shows how to inject the tenant info and use the connection string in the OnConfiguring method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   // AppTenantInfo is the app's custom implementation of ITenantInfo which \n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       // get the current tenant info at the time of construction\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       // use the connection string to connect to the per-tenant database\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Entities with Fluent API in C#\nDESCRIPTION: This snippet demonstrates how to use the fluent API to configure multi-tenant entity types in the OnModelCreating method. It shows how to use the IsMultiTenant() extension method and how to handle existing query filters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // set a global query filter, e.g. to support soft delete\n    builder.Entity<MyEntityType>().HasQueryFilter(p => !p.IsDeleted);\n\n    // configure an entity type to be multi-tenant (will merge with existing call to HasQueryFilter)\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication with Basic Setup\nDESCRIPTION: Basic setup code for implementing per-tenant authentication with Finbuckle.MultiTenant, including adding authentication services, configuring multi-tenant services, and adding the middleware to the application pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom MultiTenant store using WithStore method. It shows both templated and non-templated approaches for registration, allowing for customization and dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. This store uses ASP.NET Core's distributed cache mechanism and supports Redis, SQL Server, NCache, or an in-memory implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Entities with Attributes in C#\nDESCRIPTION: This snippet shows how to use the [MultiTenant] attribute to designate entity types for per-tenant isolation in a shared database scenario. It demonstrates the attribute usage on a BlogPost class and configures a BloggingDbContext to respect the attribute.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// tenants will only see their own blog posts\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\n// roles will be the same for all tenants\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; } // this will be multi-tenant!\n    public DbSet<Roles> Roles { get; set; } // not multi-tenant!\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Tenant Info in ASP.NET Core\nDESCRIPTION: Demonstrates how to retrieve and check the current tenant information using HttpContext extension methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Authentication Options\nDESCRIPTION: Example of configuring JWT Bearer options on a per-tenant basis, allowing each tenant to have a different authority for token validation. Uses ConfigurePerTenant to modify the JwtBearerOptions for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: This code demonstrates various ways to configure per-tenant options using Finbuckle.MultiTenant's extension methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiTenantDbContext Interface\nDESCRIPTION: Implementation of IMultiTenantDbContext interface on a custom DbContext class, defining required properties for tenant information and handling modes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information\nDESCRIPTION: Example showing how to access current tenant information from HttpContext using the GetMultiTenantContext extension method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Authentication Cookies Per Tenant\nDESCRIPTION: Example of configuring cookie authentication options on a per-tenant basis to create separate cookies for each tenant. Allows simultaneous sign-ins to different tenants without replacing existing cookies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpContext MultiTenant Strategy in C#\nDESCRIPTION: Shows how to configure an HttpContext strategy using WithHttpContextStrategy method. This strategy uses a delegate that takes an HttpContext parameter to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpContextStrategy(async httpContext =>\n    {\n         var identifier = httpContext.Request.Query[\"tenant\"];\n         \n         // query value will be empty if the value didn't exist in the request\n         if(identifier == string.Empty)\n             return null;\n         \n         return identifier;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Entity Keys and Indexes\nDESCRIPTION: Shows how to configure entity type builders to adjust keys and indexes for multi-tenant entities. Demonstrates adding TenantId to existing keys and indexes during model creation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Info Manually in ASP.NET Core\nDESCRIPTION: Shows how to manually set tenant information using HttpContext extension methods, with optional service provider reset functionality.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API for Per-Tenant Options Configuration\nDESCRIPTION: This code shows how to use the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates configuring a base path strategy using WithBasePathStrategy method. This strategy uses the first path segment to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating for Multi-Tenant Entities\nDESCRIPTION: Override of OnModelCreating method to configure multi-tenant entity types using ModelBuilder extensions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // If necessary call the base class method.\n    // Recommended to be called first.\n    base.OnModelCreating(builder);\n\n    // Configure all entity types marked with the [MultiTenant] data attribute\n    builder.ConfigureMultiTenant();\n\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure the Host Strategy which uses the request's host value to determine the tenant. Supports template patterns for flexible tenant identifier extraction from domain segments.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for multiple tenants with different authentication settings including login paths, challenge schemes, and OpenID Connect configurations. Shows how to template paths with __tenant__ placeholders.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SaveChanges Methods for Multi-Tenant Support\nDESCRIPTION: Implementation of SaveChanges and SaveChangesAsync methods with multi-tenant enforcement.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override int SaveChanges(bool acceptAllChangesOnSuccess)\n{\n    this.EnforceMultiTenant();\n    return base.SaveChanges(acceptAllChangesOnSuccess);\n}\n\npublic override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess,\n    CancellationToken cancellationToken = default(CancellationToken))\n{\n    this.EnforceMultiTenant();\n    return await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to the URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Tenant BloggingDbContext\nDESCRIPTION: Example implementation of a multi-tenant database context with constructor overloads for dependency injection and direct instantiation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant Information in ASP.NET Core\nDESCRIPTION: Example of how to access the current tenant information from the HTTP context in an ASP.NET Core application.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates configuration of the Header Strategy which uses HTTP request headers to determine the tenant identifier. Supports both default '__tenant__' header key or custom header key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure the EFCore store in the application's service collection. It specifies the database context and tenant info types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in a Controller\nDESCRIPTION: This snippet demonstrates how to access per-tenant options in a controller, where the values are specific to the current tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Options Class in C#\nDESCRIPTION: This snippet shows how to define a basic options class with two properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates configuring a claim strategy using WithClaimStrategy method. This strategy uses a claim to determine the tenant identifier, with options for default or custom claim types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Multi-tenant Entities in C#\nDESCRIPTION: Demonstrates how to add, modify, and delete blog entities in a multi-tenant context. Shows error cases when attempting to modify entities across different tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };\nvar db = new BloggingDbContext(myTenantInfo);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n// Modify and attach the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Attach(myBlog);\nmyBlog.Title = \"My Changed Blog\";\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n\ndb.Blogs.Remove(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Route Strategy for tenant resolution using either default '__tenant__' parameter or custom route parameter. The route strategy uses URL path segments to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Factory Creation of Multi-Tenant DbContext\nDESCRIPTION: Example of creating database context instances using the MultiTenantDbContext.Create factory method for specific tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// create or otherwise obtain a tenant info instance\nusing var tenantInfo = new MyTenantInfo(...);\n\n// create a database context instance for the tenant\nusing var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo);\n\n// create a database context instance for the tenant with an instance of DbOptions<AppMultiTenantDbContext>\nvar tenantDbContextWithOptions = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo, \ndbOptions);\n\n// loop through a bunch of tenant instances\nforeach (var tenant in tenants)\n{\n    using var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenant);\n    // do something with the database context\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session MultiTenant Strategy in C#\nDESCRIPTION: Shows how to configure a session strategy using WithSessionStrategy method. This strategy uses the ASP.NET Core session to retrieve the tenant identifier, with options for default or custom session keys.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant Package\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy with PathBase Adjustment in C#\nDESCRIPTION: Shows how to configure the base path strategy to adjust ASP.NET Core Request.PathBase and Request.Path variables. This can be useful in scenarios where an application makes certain assumptions about paths.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection in a Controller\nDESCRIPTION: This snippet shows how to inject and use options in a controller constructor.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Configuration Store\nDESCRIPTION: Provides an example of the JSON structure used to configure tenants in a Configuration Store. It includes default values and individual tenant configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context in C#\nDESCRIPTION: Shows how to create a database context for use with the EFCore store. The context derives from EFCoreStoreDbContext and configures the database connection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates configuring a delegate strategy using WithDelegateStrategy method. It shows two examples: one using an async lambda and another using a typed lambda with HttpContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n\n// or register with a typed lambda, HttpContext in this case\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy<HttpContext, TenantInfo>(httpContext =>\n    {      \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, a simple read-only store that returns a new tenant instance based on the given identifier without any additional settings. It's useful for testing or environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Store in C#\nDESCRIPTION: Shows how to set up and configure an in-memory store for MultiTenant. It includes options for case-sensitive matching and adding initial tenants to the store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Demonstrates how to set up a configuration store for MultiTenant. It shows options for using default configuration paths or specifying custom ones.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuring Options in ASP.NET Core Startup\nDESCRIPTION: This code demonstrates how to configure options in the application startup using the Configure method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring Static MultiTenant Strategy in C#\nDESCRIPTION: Shows how to configure a static strategy that always uses the same identifier to resolve the tenant. This is useful for testing or resolving to a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant Package with .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle MultiTenant Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using dotnet CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: A structured changelog using markdown formatting to document version releases, breaking changes, features, and bug fixes for the Finbuckle.MultiTenant library.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/History.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Version History\n\n<!--_history-->\n## [9.1.3](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.1.2...v9.1.3) (2025-04-09)\n\n### Bug Fixes\n\n* update dependencies ([#966](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/966)) ([eb95530](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/eb95530156f2554cafdb1d29521d724a75787dad))\n```\n\n----------------------------------------\n\nTITLE: MultiTenant Project Version History Changelog\nDESCRIPTION: Structured changelog showing version history, bug fixes, feature additions and breaking changes tracked through Git commits.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/History.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* actually set the strategy and store types on OnTenantResolvedContext ([#509](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/509)) ([fd9029e](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/fd9029e112b1be7b2e029e56a65b88ab7ae618d6))\n* remove dependency on NewtonSoft.Json ([#505](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/505)) ([f83f0b1](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/f83f0b1bf0278e91f9f4455f080fd00a2e644167))\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands to clone the Finbuckle.MultiTenant repository from GitHub and build the project using .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Building from Source Commands\nDESCRIPTION: Commands for cloning and building the Finbuckle.MultiTenant project from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/docs/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run unit tests for the Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Version comparison links in Markdown\nDESCRIPTION: GitHub repository comparison links formatted in Markdown, showing version differences between releases.\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[3.2.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v3.1.0...v3.2.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[3.1.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v3.0.1...v3.1.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[3.0.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v3.0.0...v3.0.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[3.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v2.0.2...v3.0.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[2.0.2](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v2.0.1...v2.0.2)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[2.0.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v2.0.0...v2.0.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[2.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.2.0...v2.0.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.2.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.1.1...v1.2.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.1.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.1.0...v1.1.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.1.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.0.0...v1.1.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/tree/v1.0.0)\n```\n\n----------------------------------------\n\nTITLE: Git Commit References\nDESCRIPTION: Git commit hashes and associated issue references\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: git\nCODE:\n```\nfd9029e112b1be7b2e029e56a65b88ab7ae618d6\n```\n\n----------------------------------------\n\nTITLE: Version Compare Markdown Links\nDESCRIPTION: Markdown comparison links showing version differences in GitHub repository\nSOURCE: https://github.com/Finbuckle/Finbuckle.MultiTenant/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[6.5.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v6.5.0...v6.5.1)\n```"
  }
]