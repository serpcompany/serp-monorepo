[
  {
    "owner": "emqx",
    "repo": "emqx-docs",
    "content": "TITLE: Complete MQTT Go Client Implementation\nDESCRIPTION: Full example of MQTT client implementation in Go, demonstrating connection to EMQX broker, subscribing to topics, publishing messages, and handling callbacks. Includes connection setup, message handling, subscription management, and proper disconnection handling.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/go.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/eclipse/paho.mqtt.golang\"\n)\n\nvar f mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n\tfmt.Printf(\"TOPIC: %s\\n\", msg.Topic())\n\tfmt.Printf(\"MSG: %s\\n\", msg.Payload())\n}\n\nfunc main() {\n\tmqtt.DEBUG = log.New(os.Stdout, \"\", 0)\n\tmqtt.ERROR = log.New(os.Stdout, \"\", 0)\n\topts := mqtt.NewClientOptions().AddBroker(\"tcp://broker.emqx.io:1883\").SetClientID(\"emqx_test_client\")\n\t\n\topts.SetKeepAlive(60 * time.Second)\n\t// Set the message callback handler\n\topts.SetDefaultPublishHandler(f)\n\topts.SetPingTimeout(1 * time.Second)\n\n\tc := mqtt.NewClient(opts)\n\tif token := c.Connect(); token.Wait() && token.Error() != nil {\n\t\tpanic(token.Error())\n\t}\n\n\t// Subscribe to a topic\n\tif token := c.Subscribe(\"testtopic/#\", 0, nil); token.Wait() && token.Error() != nil {\n\t\tfmt.Println(token.Error())\n\t\tos.Exit(1)\n\t}\n\t\n\t// Publish a message\n\ttoken := c.Publish(\"testtopic/1\", 0, false, \"Hello World\")\n\ttoken.Wait()\n\n\ttime.Sleep(6 * time.Second)\n\n\t// Unscribe\n\tif token := c.Unsubscribe(\"testtopic/#\"); token.Wait() && token.Error() != nil {\n\t\tfmt.Println(token.Error())\n\t\tos.Exit(1)\n\t}\n  \n  // Disconnect\n\tc.Disconnect(250)\n\ttime.Sleep(1 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MQTT Settings in EMQX\nDESCRIPTION: Core MQTT configuration block that defines fundamental protocol behavior including packet size, client ID length, topic levels, QoS, topic alias, and message retention settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/mqtt.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt {\n  max_packet_size = 1MB\n  max_clientid_len = 65535\n  max_topic_levels = 128\n  max_qos_allowed = 2\n  max_topic_alias = 65535\n  retain_available = true\n}\n```\n\n----------------------------------------\n\nTITLE: Including MQTT.js via CDN in HTML\nDESCRIPTION: HTML snippet to include MQTT.js from a CDN and initialize a global mqtt variable.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/javascript.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/mqtt/dist/mqtt.min.js\"></script>\n<script>\n    // Initialize a mqtt variable globally\n    console.log(mqtt)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Message Acknowledged Event SQL Query\nDESCRIPTION: SQL query for extracting data from message acknowledged events, available for QoS 1 and QoS 2 messages only.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  from_clientid,\n  from_username,\n  topic,\n  qos,\n  node,\n  timestamp\nFROM\n  \"$events/message_acked\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Verifying Data in TimescaleDB\nDESCRIPTION: This SQL query selects all records from the 'sensor_data' table in TimescaleDB to verify the inserted data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from sensor_data;\n```\n\n----------------------------------------\n\nTITLE: MQTT Basic Reverse Proxy Configuration\nDESCRIPTION: HAProxy configuration for basic MQTT reverse proxy setup with backend server definitions and frontend binding.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  stick-table type string len 32 size 100k expire 30m\n  stick on req.payload(0,0), mqtt_field_value(connect, client_identifier)\n\n  # Adding send-proxy will pass the real IP to EMQX, and the corresponding backend listener needs to enable proxy_protocol\n  # server emqx1 emqx1-cluster.emqx.io:1883 check send-proxy-v2-ssl-cn\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n\nfrontend mqtt_servers\n  bind *:1883\n  mode tcp\n  # Wait for the buffer to fill up to parse the MQTT message\n  tcp-request inspect-delay 10s\n  # Reject non-MQTT connections\n  tcp-request content reject unless { req.payload(0,0), mqtt_is_valid }\n  default_backend mqtt_backend\n```\n\n----------------------------------------\n\nTITLE: API Authentication in Python using API Keys\nDESCRIPTION: Python example showing how to authenticate to EMQX REST API using API keys. Uses the urllib.request library to make the request and base64 encoding for authorization.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport urllib.request\nimport json\nimport base64\n\nusername = '4f33d24d7b8e448d'\npassword = 'gwtbmFJZrnzUu8mPK1BxUkBA66PygETiDEegkf1q8dD'\n\nurl = 'http://localhost:18083/api/v5/nodes'\n\nreq = urllib.request.Request(url)\nreq.add_header('Content-Type', 'application/json')\n\nauth_header = \"Basic \" + base64.b64encode((username + \":\" + password).encode()).decode()\nreq.add_header('Authorization', auth_header)\n\nwith urllib.request.urlopen(req) as response:\n    data = json.loads(response.read().decode())\n\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages with WHERE Clause in EMQX Rule SQL\nDESCRIPTION: Demonstrates how to use the WHERE clause to refine message filtering by specifying additional conditions that the messages must meet.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\" WHERE username = 'eric'\n```\n\n----------------------------------------\n\nTITLE: Querying All Data from MQTT Topic in EMQX Rule Engine\nDESCRIPTION: This SQL statement selects all fields from messages published to the 't/#' topic. It's the default statement used in the EMQX Rule Engine for data processing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/rules.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in Single Mode\nDESCRIPTION: Configuration example for connecting EMQX to a single MongoDB instance for authentication, specifying password hashing, collection name, and connection details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mongodb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = mongodb\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n  }\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading EMQX Repository for Debian\nDESCRIPTION: This command downloads and executes a script to set up the EMQX repository for Debian systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://assets.emqx.com/scripts/install-emqx-deb.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL/TLS Listener with One-Way Authentication\nDESCRIPTION: Configuration snippet for setting up SSL/TLS listener in EMQX with one-way authentication. Includes settings for certificate files, verification options, and other SSL parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.ssl.default {\n  bind = \"0.0.0.0:8883\"\n  ssl_options {\n    cacertfile = \"etc/certs/rootCAs.pem\"\n    certfile = \"etc/certs/server-cert.pem\"\n    keyfile = \"etc/certs/server-key.pem\"\n    verify = verify_none\n    fail_if_no_peer_cert = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Authorization Check Events\nDESCRIPTION: SQL query to extract authorization check information including client details, topic, action, and result when authorization check completes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  topic,\n  action,\n  result,\n  authz_source,\n  node\nFROM\n  \"$events/client_check_authz_complete\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"topic\": \"t/a\",\n  \"action\": \"publish\",\n  \"result\": \"allow\",\n  \"authz_source\": \"cache\",\n  \"node\": \"emqx@127.0.0.1\",\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Transforming MQTT Messages with SQL in EMQX Rule Engine\nDESCRIPTION: This SQL statement selects messages from topics starting with 't/', filters them based on the client ID 'foo', and extracts the 'data' field from the payload. It demonstrates basic filtering and transformation capabilities of the EMQX rule engine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rules.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    payload.data as d\nFROM\n    \"t/#\"\nWHERE\n    clientid = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: API Authentication in Go using API Keys\nDESCRIPTION: Go example demonstrating how to authenticate to EMQX REST API with API keys. Uses the standard net/http package to create an authenticated request.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"bytes\"\n    \"encoding/json\"\n)\n\nfunc main() {\n    username := \"4f33d24d7b8e448d\"\n    password := \"gwtbmFJZrnzUu8mPK1BxUkBA66PygETiDEegkf1q8dD\"\n\n    url := \"http://localhost:18083/api/v5/nodes\"\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        panic(err)\n    }\n    req.SetBasicAuth(username, password)\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    buf := new(bytes.Buffer)\n    _, err = buf.ReadFrom(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    var data interface{}\n    json.Unmarshal(buf.Bytes(), &data)\n    fmt.Println(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Message Processing Rule Configuration in EMQX\nDESCRIPTION: Example of configuring a rule to process MQTT messages with specific topic filtering and message transformation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.my_republish_rule {\n        sql = \"SELECT qos, payload.x as y FROM \\\"t/a\\\"\"\n        actions = [\n            {\n                function = republish\n                args = {\n                    topic = \"t/b\"\n                    qos = \"${qos}\"\n                    payload = \"y: ${y}\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Node Status\nDESCRIPTION: Command to verify if the EMQX broker is running and get its status information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl status\nNode 'emqx@127.0.0.1' 5.0.3 is started\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Logging in EMQX\nDESCRIPTION: Configuration block for enabling and customizing file-based logging in EMQX. Specifies settings like log format, level, file path, rotation policies, and timestamp formatting.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/logs.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlog {\n  file {\n    enable = true\n    formatter = text\n    level = warning\n    path = \"/var/log/emqx/emqx.log\"\n    rotation_count = 10\n    rotation_size = 50MB\n    time_offset = system\n    timestamp_format = auto\n  }\n```\n\n----------------------------------------\n\nTITLE: FOREACH Examples\nDESCRIPTION: Examples of FOREACH statements for processing array data and republishing messages with transformations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors\nFROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors\nDO\n    clientid,\n    item.name as name,\n    item.idx as idx\nINCASE\n    item.idx >= 1\nFROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as s\nDO\n    clientid,\n    s.name as name,\n    s.idx as idx\nINCASE\n    s.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Fields Selection SQL Example\nDESCRIPTION: SQL query demonstrating how to select specific fields from MQTT messages published to topics matching 't/#' pattern. Shows selection of payload message, client ID, username, full payload, topic and QoS level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload.msg as msg,\n  clientid,\n  username,\n  payload,\n  topic,\n  qos\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MQTT Sticky Sessions Load Balancing in HAProxy\nDESCRIPTION: This snippet demonstrates how to set up sticky sessions for MQTT in HAProxy, ensuring clients reconnect to the same server. It uses a stick table to store client identifiers and route connections accordingly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  # Create a sticky session table\n  stick-table type string len 32 size 100k expire 30m\n\n  # Use the client ID as the key\n  stick on req.payload(0，0)，mqtt_field_value(connect，client_identifier)\n \n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: Using Data Type Judgment Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using data type judgment functions in the EMQX rule engine to check the type of a given value. These functions return boolean results.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nis_array([1, 2]) = true\nis_array(json_decode('[{\"value\": 1}]')) = true\nis_array(json_decode('{\"value\": 1}')) = false\nis_array(0.5) = false\nis_array('[1, 2]') = false\n\nis_bool(true) = true\nis_bool(false) = false\nis_bool('true') = false\n\nis_float(123.4) = true\nis_float(123) = false\n\nis_int(123) = true\nis_int(123.4) = false\n\nis_map(json_decode('{\"value\": 1}')) = true\nis_map(json_decode('[{\"value\": 1}]')) = false\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields in JSON Payload in EMQX Rule SQL\nDESCRIPTION: Demonstrates how to use dot notation to access fields in a payload with a complex structure, assuming the payload is JSON formatted.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload.a.b.c.deep as my_field FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Expressions in FOREACH Clause for Nested Structures\nDESCRIPTION: SQL rule example showing how to use multiple expressions in the FOREACH clause to navigate through nested JSON structures. This approach allows for better readability when working with complex payloads by giving intermediate structures descriptive variable names.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.data as d\n    d.sensors as s\n...\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Database and Collection for EMQX Integration\nDESCRIPTION: Commands to create a new database named 'emqx_data' and a collection named 'emqx_messages' in MongoDB. This step prepares the MongoDB environment for storing MQTT data from EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create database emqx_data\nuse emqx_data\n\n# create collection emqx_messages\ndb.createCollection('emqx_messages')\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Bridge Events in EMQX\nDESCRIPTION: SQL statement to extract all information from the MQTT bridge named 'my_mqtt_bridge'. This query demonstrates how to access data bridge events using the '$bridges/mqtt:my_mqtt_bridge' topic format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$bridges/mqtt:my_mqtt_bridge\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"0005E27C1D24E44FF440000017520000\",\n  \"server\": \"broker.emqx.io:1883\",\n  \"payload\": \"hello\",\n  \"topic\": \"t/a\",\n  \"qos\": 1,\n  \"dup\": false,\n  \"retain\": false,\n  \"pub_props\": {\n    \"Message-Expiry-Interval\": 30,\n    \"Payload-Format-Indicator\": 0,\n    \"User-Property\": {\n      \"foo\": \"bar\"\n    },\n    \"User-Property-Pairs\": [\n      {\n        \"key\": \"foo\"\n      },\n      {\n        \"value\": \"bar\"\n      }\n    ]\n  },\n  \"message_received_at\": 1645002753259\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Connected EMQX Clients\nDESCRIPTION: Command to list all clients currently connected to EMQX. This example shows detailed information for two connected clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients list\nClient(emqx_c, username=undefined, peername=127.0.0.1:59441, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4530, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736435155, connected_at=1684736435155)\nClient(emqx_a, username=undefined, peername=127.0.0.1:59444, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4588, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736441613, connected_at=1684736441613)\n```\n\n----------------------------------------\n\nTITLE: Configuring New ACL Format in JSON for EMQX Authentication\nDESCRIPTION: This snippet demonstrates the new ACL format introduced in EMQX v5.5.0. It shows how to define multiple permissions with detailed control over publish, subscribe, and all actions, including QoS levels and retain message handling.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/acl.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1706844358,\n  \"username\": \"emqx_u\",\n  \"acl\": [\n    {\n      \"permission\": \"allow\",\n      \"action\": \"publish\",\n      \"topic\": \"t/${clientid}\"\n    },\n    {\n      \"permission\": \"allow\",\n      \"action\": \"subscribe\",\n      \"topic\": \"eq t/1/#\",\n      \"qos\": [1]\n    },\n    {\n      \"permission\": \"deny\",\n      \"action\": \"publish\",\n      \"topic\": \"t/2\",\n      \"retain\": true\n    },\n    {\n      \"permission\": \"deny\",\n      \"action\": \"all\",\n      \"topic\": \"t/3\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a CA Private Key with OpenSSL\nDESCRIPTION: Command to generate a 2048-bit RSA key pair protected with Triple-DES encryption. This key will be used as the Certificate Authority's private key and requires a password for protection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/tls-certificate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -des3 -out rootCA.key 2048\n```\n\n----------------------------------------\n\nTITLE: EMQX Cluster Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up a two-node EMQX cluster with network configuration and health checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nversion: '3'\n\nservices:\n  emqx1:\n    image: emqx/emqx:@CE_VERSION@\n    container_name: emqx1\n    environment:\n    - \"EMQX_NODE_NAME=emqx@node1.emqx.io\"\n    - \"EMQX_CLUSTER__DISCOVERY_STRATEGY=static\"\n    - \"EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]\"\n    healthcheck:\n      test: [\"CMD\", \"/opt/emqx/bin/emqx\", \"ctl\", \"status\"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node1.emqx.io\n    ports:\n      - 1883:1883\n      - 8083:8083\n      - 8084:8084\n      - 8883:8883\n      - 18083:18083 \n    # volumes:\n    #   - $PWD/emqx1_data:/opt/emqx/data\n\n  emqx2:\n    image: emqx/emqx:@CE_VERSION@\n    container_name: emqx2\n    environment:\n    - \"EMQX_NODE_NAME=emqx@node2.emqx.io\"\n    - \"EMQX_CLUSTER__DISCOVERY_STRATEGY=static\"\n    - \"EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]\"\n    healthcheck:\n      test: [\"CMD\", \"/opt/emqx/bin/emqx\", \"ctl\", \"status\"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node2.emqx.io\n    # volumes:\n    #   - $PWD/emqx2_data:/opt/emqx/data\n\nnetworks:\n  emqx-bridge:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Connecting to EMQX broker using MQTT.js in JavaScript\nDESCRIPTION: Complete example of using MQTT.js to connect to an EMQX broker, including connection options, event handling, and message reception.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/javascript.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// const mqtt = require('mqtt')\nimport mqtt from 'mqtt'\n\n// connection option\nconst options = {\n  \t\tclean: true, // retain session\n      connectTimeout: 4000, // Timeout period\n      // Authentication information\n      clientId: 'emqx_test',\n      username: 'emqx_test',\n      password: 'emqx_test',\n}\n\n// Connect string, and specify the connection method by the protocol\n// ws Unencrypted WebSocket connection\n// wss Encrypted WebSocket connection\n// mqtt Unencrypted TCP connection\n// mqtts Encrypted TCP connection\n// wxs WeChat applet connection\n// alis Alipay applet connection\nconst connectUrl = 'wss://broker.emqx.io:8084/mqtt'\nconst client = mqtt.connect(connectUrl, options)\n\nclient.on('reconnect', (error) => {\n    console.log('reconnecting:', error)\n})\n\nclient.on('error', (error) => {\n    console.log('Connection failed:', error)\n})\n\nclient.on('message', (topic, message) => {\n  console.log('receive message：', topic, message.toString())\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Node Configuration in HOCON Format\nDESCRIPTION: Example of configuring node properties using HOCON object notation in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nnode {\n  name = \"emqx@127.0.0.1\"\n  cookie = \"mysecret\"\n  cluster_call {\n    retry_interval  =  1m\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling EMQX Docker Image\nDESCRIPTION: Command to pull the latest version of EMQX Docker image from Docker Hub.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull emqx/emqx:@CE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table Schema for MQTT Authentication\nDESCRIPTION: SQL schema for creating a table to store MQTT user credentials including username, password hash, salt, and superuser status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/postgresql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mqtt_user (\n    id serial PRIMARY KEY,\n    username text NOT NULL UNIQUE,\n    password_hash  text NOT NULL,\n    salt text NOT NULL,\n    is_superuser boolean DEFAULT false,\n    created timestamp with time zone DEFAULT NOW()\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing MQTT Callback for Message Handling in Java\nDESCRIPTION: This Java class implements the MqttCallback interface to handle MQTT events such as connection loss, message arrival, and delivery completion. It provides methods for processing received messages and managing the MQTT connection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/java.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.emqx;\n\nimport org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;\nimport org.eclipse.paho.client.mqttv3.MqttCallback;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\n\npublic class OnMessageCallback implements MqttCallback {\n    public void connectionLost(Throwable cause) {\n        // After the connection is lost, it usually reconnects here\n        System.out.println(\"disconnect, you can reconnect\");\n    }\n\n    public void messageArrived(String topic, MqttMessage message) throws Exception {\n        // The messages obtained after subscribe will be executed here\n        System.out.println(\"Received message topic:\" + topic);\n        System.out.println(\"Received message QoS:\" + message.getQos());\n        System.out.println(\"Received message content:\" + new String(message.getPayload()));\n    }\n\n    public void deliveryComplete(IMqttDeliveryToken token) {\n        System.out.println(\"deliveryComplete---------\" + token.isComplete());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Insert Template for MQTT Messages\nDESCRIPTION: SQL template for inserting MQTT message data into PostgreSQL table t_mqtt_msg, including message ID, sender, topic, QoS, payload, and timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(msgid, sender, topic, qos, payload, arrived) VALUES(\n  ${id},\n  ${clientid},\n  ${topic},\n  ${qos},\n  ${payload},\n  TO_TIMESTAMP((${timestamp} :: bigint)/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX on Ubuntu using Apt\nDESCRIPTION: This command installs EMQX using the apt package manager. It requires sudo privileges to execute.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install emqx\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE Example with Aliasing and Filtering\nDESCRIPTION: This SQL query is similar to the previous example but uses the `as` keyword to create an alias `s` for each element in the `payload.sensors` array, making it easier to reference the element's properties within the `DO` and `INCASE` clauses. It filters array elements where `s.idx` is greater than or equal to 1 and republishes the selected elements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as s\nDO\n    clientid,\n    s.name as name,\n    s.idx as idx\nINCASE\n    s.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Server Certificate using OpenSSL\nDESCRIPTION: This command uses the CA certificate (`rootCA.crt`) and key (`rootCA.key`) to sign the server's CSR (`server.csr`), creating the server certificate (`server.crt`).  `-CAcreateserial` creates a serial number file for the CA, and `-days 365` sets the certificate's validity period to one year.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"openssl x509 -req -in server.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out server.crt -days 365\"\n```\n\n----------------------------------------\n\nTITLE: Using Expressions for Data Transformation in EMQX Rule SQL\nDESCRIPTION: Showcases the use of expressions to transform data in the SELECT clause, including string manipulation and arithmetic operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT (upper(clientid) + '_UPPERCASE_LETTERS') as cid FROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT (payload.integer_field + 2) * 2 as num FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Message Delivery Event SQL Query\nDESCRIPTION: SQL query for extracting data from message delivery events, selecting publisher details, topic, QoS, node information and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  from_clientid,\n  from_username,\n  topic,\n  qos,\n  node,\n  timestamp\nFROM\n  \"$events/message_delivered\"\n```\n\n----------------------------------------\n\nTITLE: Advanced SELECT Examples\nDESCRIPTION: More complex SELECT statements demonstrating field aliasing, nested payload access, and event handling.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload.x as x FROM \"tests/test_topic_1\" WHERE y = 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"#\" WHERE payload.x.y = 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT peername as ip_port FROM \"$events/client_connected\" WHERE clientid = 'c1'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid FROM \"$events/session_subscribed\" WHERE topic = 'my/topic' and qos = 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid FROM \"$events/session_subscribed\" WHERE topic =~ 't/#' and qos = 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pub_props.'User-Property'.foo as foo FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Advanced String Split with Options in EMQX\nDESCRIPTION: Examples of split operations with additional options for handling empty strings and specific delimiter positions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsplit('a;;b;;c', ';', 'notrim') = ['a', '', 'b', '', 'c']\nsplit('a;b;c', ';', 'leading') = ['a', 'b;c']\nsplit('a;b;c', ';', 'trailing') = ['a;b', 'c']\nsplit(';a;b;c', ';', 'leading_notrim') = ['', 'a;b;c']\nsplit('a;b;c;', ';', 'trailing_notrim') = ['a;b;c', '']\n```\n\n----------------------------------------\n\nTITLE: Querying System Alarm Activation Events in EMQX\nDESCRIPTION: SQL statement to extract alarm information from the '$events/sys/alarm_activated' event topic. This query retrieves the alarm name, details, message, activation time, and node when an EMQX system alarm is activated.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  name,\n  details,\n  message,\n  activated_at,\n  node\nFROM\n  \"$events/sys/alarm_activated\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"too_many_processes\",\n  \"details\": {\n    \"usage\": \"99%\",\n    \"high_watermark\": \"80%\"\n  },\n  \"message\": \"99% process usage\",\n  \"activated_at\": 1645003578536000,\n  \"node\": \"emqx@127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka to MQTT Data Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the data flow from Kafka through Source components and Rule Engine to MQTT clients\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridges.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A[Kafka] --> B[Kafka Connector]\n  subgraph Rule Engine\n    B --> C[Kafka Source]\n    C -->  |Trigger| D[Rule]\n    D -->  |Execute action| D1[Message Republishing]\n  end\n\nD1 -->|Publish message| E[Client]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Selecting MQTT Messages\nDESCRIPTION: SQL statement to select all fields from MQTT messages under the topic 't/#' for processing by the rule.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hashing Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using md5, sha, and sha256 functions for hashing operations in the EMQX rule engine. These functions compute hash values of fixed lengths for input strings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmd5('hello') = '5d41402abc4b2a76b9719d911017c592'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsha('hello') = 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsha256('hello') = '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Listener in EMQX\nDESCRIPTION: This code configures a WebSocket listener on port 8083 with a maximum of 1,024,000 concurrent connections. It sets the bind address, maximum connections, and the WebSocket MQTT path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/listener.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.ws.default {\n  bind = \"0.0.0.0:8083\"\n  max_connections = 1024000\n  websocket.mqtt_path = \"/mqtt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from MQTT Topic in SQL\nDESCRIPTION: This SQL query selects all data from the 't/#' topic, which is used in an EMQX rule to forward MQTT messages to a remote MQTT server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Cookie in EMQX\nDESCRIPTION: Configuration for setting a secret cookie in emqx.conf to secure node authentication. All nodes in the cluster must use the same secret cookie value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/security.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnode {\n  cookie = \"<a Secret cookie>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Linking via Configuration File in EMQX\nDESCRIPTION: Example configuration for setting up Cluster Linking between two EMQX clusters. This snippet defines a link from \"emqx-us-east\" to \"emqx-eu-west\" with server details, authentication credentials, topic subscriptions, and SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n  name = \"emqx-us-east\"\n  links = [\n    {\n      name = \"emqx-eu-west\"\n      server = \"emqx.us-east.myinfra.net:11883\"\n      username = \"clink-user:us-east\"\n      password = \"clink-password-no-one-knows\"\n      clientid = \"clink-us-east\"\n      topics = [\"global/#\", \"fwd/#\", \"cluster/+/status\", ...]\n      ssl {\n        enable = true\n        verify = verify_peer\n        certfile = \"etc/certs/client/emqx-us-east.pem\"\n        ...\n      }\n    }\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running EMQX with Data Persistence\nDESCRIPTION: Docker run command with volume mounts for persisting EMQX data and logs outside the container.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx \\\n  -p 1883:1883 -p 8083:8083 \\\n  -p 8084:8084 -p 8883:8883 \\\n  -p 18083:18083 \\\n  -v $PWD/data:/opt/emqx/data \\\n  -v $PWD/log:/opt/emqx/log \\\n  emqx/emqx:@CE_VERSION@\\\n```\n\n----------------------------------------\n\nTITLE: HAProxy Basic Global Configuration\nDESCRIPTION: Basic HAProxy configuration including global settings and default timeouts for MQTT connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nglobal  \n  log 127.0.0.1 local3 info \n  daemon  \n  maxconn 1024000\n\ndefaults  \n  log global \n  mode tcp \n  option tcplog \n  #option dontlognull  \n  timeout connect 10000 \n  # timeout > mqtt's keepalive * 1.2  \n  timeout client 240s  \n  timeout server 240s \n  maxconn 20000\n```\n\n----------------------------------------\n\nTITLE: Viewing EMQX Cluster Status\nDESCRIPTION: Commands to view the status of the EMQX cluster. The first example shows the standard output, while the second example demonstrates the JSON output format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster status\nCluster status: #{running_nodes => ['emqx@127.0.0.1'],stopped_nodes => []}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster status --json\n{\n  \"stopped_nodes\" : [\n\n  ],\n  \"running_nodes\" : [\n    \"emqx@127.0.0.1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT to Kafka Data Flow Diagram\nDESCRIPTION: Mermaid diagram showing the data flow from MQTT clients through the Rule Engine and Kafka Sink to Kafka storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridges.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A[Client] -->|Publish message| B[Rule]\n  A1[Client] --> |Publish message| B\n\n  subgraph Rule Engine\n    B -->  |Execute action| C[Kafka Sink] --> D[Kafka Connector]\n  end\n\nD -->|Message storage| E[Kafka]\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL for Message Processing\nDESCRIPTION: SQL rule to process messages from topic 't/#' for forwarding to Cassandra.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Authentication in EMQX\nDESCRIPTION: Configuration snippet for enabling TLS in the authentication group of the EMQX configuration file. It demonstrates how to set up HTTPS connections with proper certificate verification, including CA certificates, client certificates, and private keys.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthentication {\n  url = \"https://127.0.0.1:8080\"\n  backend = \"http\"\n\n  ...\n\n  ssl {\n    enable = true\n    # PEM format file containing the trusted CA (certificate authority) certificates that the HTTP client uses to verify the authenticity of the HTTP server.\n    cacertfile = \"etc/certs/cacert.pem\"\n    # PEM format file containing the SSL/TLS certificate chain for the HTTP client to send. If the certificate is not directly issued by a root CA, the intermediate CA certificates should be appended after the listener certificate to form a chain.\n    certfile = \"etc/certs/cert.pem\"\n    # PEM format file containing the private key corresponding to the certificate\n    keyfile = \"etc/certs/key.pem\"\n    ## Set 'verify_peer' to verify the authenticity of the server's certificate chain, otherwise 'verify_none'\n    verify = verify_peer\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Console Producer for Testing\nDESCRIPTION: This command starts a Kafka console producer to send messages to the 'testtopic-out' topic for testing the Kafka source integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-console-producer --bootstrap-server 127.0.0.1:9092 --topic testtopic-out\n```\n\n----------------------------------------\n\nTITLE: Configuring System-wide File Handles Limit in Linux\nDESCRIPTION: Sets the maximum number of file handles that can be opened system-wide to 2 million. This is crucial for handling large numbers of concurrent MQTT connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 2 millions system-wide\nsysctl -w fs.file-max=2097152\nsysctl -w fs.nr_open=2097152\necho 2097152 > /proc/sys/fs/nr_open\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX using Homebrew on macOS\nDESCRIPTION: Command to install EMQX using Homebrew package manager on macOS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install emqx\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocluster Using etcd in EMQX\nDESCRIPTION: This code snippet shows the configuration for EMQX auto-clustering using etcd. It sets the discovery strategy to etcd and specifies the etcd server address, key prefix, and node TTL.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n    discovery_strategy = etcd\n    etcd {\n        server = \"http://127.0.0.1:2379\"\n        prefix = emqxcl\n        node_ttl = 1m\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Statement Structure in EMQX Rule SQL\nDESCRIPTION: Demonstrates the basic format of a SELECT statement in the EMQX rule engine SQL. It shows how to select specific fields from an input message, rename fields, and filter messages based on conditions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT <fields_expressions> FROM <topic> [WHERE <conditions>]\n```\n\n----------------------------------------\n\nTITLE: Using jq Function in FOREACH Statement in EMQX Rule SQL\nDESCRIPTION: Illustrates how to use the jq function to wrap the payload in an array when the input message does not contain an array, enabling the use of FOREACH.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH jq('.', payload) \nDO item.field_1, item.field_2 \nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer in EMQX\nDESCRIPTION: The int function converts various data types to integers. It handles booleans (true→1, false→0), rounds down floats, and parses strings with numeric content. When parsing strings, it supports optional +/- prefixes and mathematical notation representation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nint(true) = 1\nint(3.14) = 3\nint(-3.14) = 4\nint('-100') = -100\nint('+200') = 200\nint('0010') = 10\nint('3.1415e2') = 314\nint(substr('Number 100', 7)) = 100\n\n# Wrong\nint('-100+200')\nint('Number 100')\n```\n\n----------------------------------------\n\nTITLE: Running EMQX Open Source Docker Container\nDESCRIPTION: Docker command to download and run the latest EMQX Open Source container, exposing standard MQTT ports.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:latest\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp with Unit to RFC3339 Format in EMQX SQL\nDESCRIPTION: Demonstrates the extended unix_ts_to_rfc3339() function that accepts a time unit parameter to specify the timestamp's unit (second, millisecond, microsecond, nanosecond).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nunix_ts_to_rfc3339(1708671600766, 'millisecond') = '2024-02-23T15:00:00.766+08:00'\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bit Sequence Operation Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using bitsize, byteszie, and subbits functions for bit sequence operations in the EMQX rule engine. These functions manipulate and extract information from binary and bitstring data types.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nbitsize('abc') = 24\nbitsize('你好') = 48\n```\n\nLANGUAGE: bash\nCODE:\n```\nbyteszie('abc') = 3\nbyteszie('你好') = 6\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 159 = 0x9F\nsubbits(hexstr2bin('9F4E58'), 8) = 159\n\n# 40782 = 0x9F4E\nsubbits(hexstr2bin('9F4E58'), 16) = 40782\n\n# bin2hexstr(base64_decode('n05Y')) = '9F4E58'\nsubbits(base64_decode('n05Y'), 8) = 159\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 159 = 0x9F\nsubbits(hexstr2bin('9F4E58'), 1, 8) = 159\n\n# 78 = 0x4E\nsubbits(hexstr2bin('9F4E58'), 9, 8) = 78\n\n# bin2hexstr(base64_decode('n05Y')) = '9F4E58'\nsubbits(base64_decode('n05Y'), 9, 4) = 4\n```\n\n----------------------------------------\n\nTITLE: Using Data Type Conversion Functions in EMQX Rule Engine\nDESCRIPTION: Demonstrates the usage of data type conversion functions in the EMQX rule engine. These functions convert values between different data types such as boolean, float, and string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Boolean conversion\nbool(true) = true\nbool(0) = false\nbool('false') = false\n\n# Float conversion\nfloat(20) = 20.0\n\nfloat('3.14') = 3.14\nfloat('3.14e4') = 31400\nfloat('3.14e+4') = 31400\nfloat('3.14e-4') = 0.000314\nfloat('3.14E-4') = 0.000314\n\n# Float conversion with decimal places\nfloat('3.1415926', 3) = 3.142\nfloat('0.000012345', 5) = 0.00001\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings in EMQX (2-parameter version)\nDESCRIPTION: The find function searches for a pattern in a string and returns everything from the pattern to the end of the string. If the pattern is not found, an empty string is returned. This is equivalent to find(String, SearchPattern, 'leading').\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfind('..., Value: 1.2', 'Value:') = 'Value: 1.2'\nfind('..., Value: 1.2', 'Data') = ''\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Regular Expressions in EMQX\nDESCRIPTION: The regex_match function tests whether a string matches a specified regular expression pattern, returning a boolean result. This allows for validating string formats and patterns.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nregex_match('123', '^\\d+$') = true\nregex_match('a23', '^\\d+$') = false\n```\n\n----------------------------------------\n\nTITLE: Current Time in RFC3339 Format in EMQX\nDESCRIPTION: Example of using now_rfc3339 to get the current system time as an RFC3339 formatted string in seconds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nnow_rfc3339() = '2024-02-23T10:26:20+08:00'\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Kafka Consumer Source in EMQX Rule\nDESCRIPTION: This SQL statement selects all fields from the Kafka Consumer source topic. It is used in the EMQX rule to process messages from Kafka.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$bridges/kafka_consumer:<sourceName>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling an MQTT Listener\nDESCRIPTION: Permanently enables a specific MQTT listener by updating the configuration. This change persists after EMQX restarts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners enable tcp:default true\nEnabled tcp:default listener successfully.\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS/SSL for Cluster RPC Connections\nDESCRIPTION: Configuration settings for enabling TLS/SSL encryption for cluster RPC connections, including certificate paths and verification options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/security.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrpc {\n  driver = ssl\n  # PEM format file containing the trusted CA (certificate authority) certificates that the listener uses to verify the authenticity of the cluster peers.\n  cacertfile = \"/path/to/cert/ca.pem\"\n  # PEM format file containing the SSL/TLS certificate chain for the listener. If the certificate is not directly issued by a root CA, the intermediate CA certificates should be appended after the listener certificate to form a chain.\n  certfile = \"/path/to/cert/domain.pem\"\n  # PEM format file containing the private key corresponding to the SSL/TLS certificate\n  keyfile = \"/path/to/cert/domain.key\"\n  # Set to 'verify_peer' to verify the authenticity of the clients' certificates, otherwise 'verify_none'.\n  verify = verify_peer\n  # If set to true, the handshake fails if the peer does not have a certificate to send, that is, sends an empty certificate. If set to false, it fails only if the peer sends an invalid certificate (an empty certificate is considered valid).\n  fail_if_no_peer_cert = true\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to EMQX and Publishing/Subscribing to Messages using Paho Java\nDESCRIPTION: This Java class demonstrates how to use the Paho Java client to connect to an MQTT broker (EMQX), subscribe to a topic, publish a message, and handle disconnection. It includes error handling and uses the MqttClient and MqttConnectOptions classes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/java.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.emqx;\n\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\n\n\npublic class App {\n    public static void main(String[] args) {\n        String subTopic = \"testtopic/#\";\n        String pubTopic = \"testtopic/1\";\n        String content = \"Hello World\";\n        int qos = 2;\n        String broker = \"tcp://broker.emqx.io:1883\";\n        String clientId = \"emqx_test\";\n        MemoryPersistence persistence = new MemoryPersistence();\n\n        try {\n            MqttClient client = new MqttClient(broker, clientId, persistence);\n\n            // MQTT connection option\n            MqttConnectOptions connOpts = new MqttConnectOptions();\n            connOpts.setUserName(\"emqx_test\");\n            connOpts.setPassword(\"emqx_test_password\".toCharArray());\n            // retain session\n            connOpts.setCleanSession(true);\n\n            // set callback\n            client.setCallback(new PushCallback());\n\n            // establish a connection\n            System.out.println(\"Connecting to broker: \" + broker);\n            client.connect(connOpts);\n\n            System.out.println(\"Connected\");\n            System.out.println(\"Publishing message: \" + content);\n\n            // Subscribe\n            client.subscribe(subTopic);\n\n            // Required parameters for message publishing\n            MqttMessage message = new MqttMessage(content.getBytes());\n            message.setQos(qos);\n            client.publish(pubTopic, message);\n            System.out.println(\"Message published\");\n\n            client.disconnect();\n            System.out.println(\"Disconnected\");\n            client.close();\n            System.exit(0);\n        } catch (MqttException me) {\n            System.out.println(\"reason \" + me.getReasonCode());\n            System.out.println(\"msg \" + me.getMessage());\n            System.out.println(\"loc \" + me.getLocalizedMessage());\n            System.out.println(\"cause \" + me.getCause());\n            System.out.println(\"excep \" + me);\n            me.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication with Local Password Comparison in EMQX\nDESCRIPTION: This configuration snippet demonstrates how to set up LDAP authentication using the Local Password Comparison method in EMQX. It specifies the LDAP backend, password-based mechanism, and various LDAP connection parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/ldap.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  backend = \"ldap\"\n  mechanism = \"password_based\"\n  method {\n    type = hash\n    password_attribute = \"userPassword\"\n    is_superuser_attribute = \"isSuperuser\"\n  }\n  server = \"127.0.0.1:389\"\n  query_timeout = \"5s\"\n  username = \"root\"\n  password = \"root password\"\n  pool_size = 8\n  base_dn = \"uid=${username},ou=testdevice,dc=emqx,dc=io\"\n  filter = \"(objectClass=mqttUser)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authentication in EMQX\nDESCRIPTION: This HCL snippet demonstrates how to configure password-based authentication using EMQX's built-in database. It specifies the backend, mechanism, password hashing algorithm (SHA256 with salt suffix), and sets the user ID type to username.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mnesia.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n   backend = \"built_in_database\"\n   mechanism = \"password_based\"\n   password_hash_algorithm {\n      name = \"sha256\",\n      salt_position = \"suffix\"\n   }\n   user_id_type = \"username\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X.509 Certificate Mapping in EMQX\nDESCRIPTION: This snippet demonstrates how to configure EMQX to use X.509 certificate information as client ID and username. It shows the MQTT configuration settings in the emqx.conf file for mapping certificate fields to client properties.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/x509.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt {\n# Use certificate information as a client ID\npeer_cert_as_clientid = \"disabled\" # \"disabled\" | \"cn\" | \"dn\" | \"crt\" | \"pem\" | \"md5\"\n# Use certificate information as a username\npeer_cert_as_username = \"cn\" # \"disabled\" | \"cn\" | \"dn\" | \"crt\" | \"pem\" | \"md5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Rate Limits in EMQX\nDESCRIPTION: Configuration example showing how to set rate limits for the default TCP listener in EMQX. Demonstrates setting maximum connection rate, message rate, and bytes rate limits using the emqx.conf file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/rate-limit/rate-limit.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.tcp.default {\n  bind = \"0.0.0.0:1883\"\n  max_conn_rate = \"1000/s\"\n  messages_rate = \"1000/s\"\n  bytes_rate = \"1MB/s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter in EMQX\nDESCRIPTION: This configuration snippet demonstrates how to enable and configure OpenTelemetry tracing in EMQX using the `cluster.hocon` file.  It sets up the exporter endpoint, enables end-to-end tracing, configures various tracing options such as client connect/disconnect, client messaging, and sets up client ID and topic whitelists. It also defines the cluster identifier and message trace level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nopentelemetry {\n  exporter { endpoint = \"http://localhost:4317\" }\n  traces {\n   enable = true\n   # 端到端追踪模式\n   trace_mode = e2e\n   # 端到端追踪选项\n   e2e_tracing_options {\n     ## 是否追踪客户端连接/断开事件\n     client_connect_disconnect = true\n     ## 是否追踪客户端消息事件\n     client_messaging = true\n     ## 是否追踪客户端订阅/取消订阅事件\n     client_subscribe_unsubscribe = true\n     ## 客户端ID 白名单最大长度\n     clientid_match_rules_max = 30\n     ## 主题过滤器白名单最大长度\n     topic_match_rules_max = 30\n     ## 集群标识符\n     cluster_identifier = emqxcl\n     ## 消息追踪等级（QoS）\n     msg_trace_level = 2\n     ## 采样率，即除白名单以外追踪事件的采样率\n     ## Note: 仅当追踪事件开启时才根据采样率进行采样\n     sample_ratio = \"100%\"\n     ## 跟随 traceparent\n     ## 端到端追踪是否跟随客户端传入的 traceparent\n     follow_traceparent\n    }\n  }\n  max_queue_size = 50000\n  scheduled_delay = 1000\n }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rule Engine SQL Example\nDESCRIPTION: Example SQL statement demonstrating the FOREACH-DO clause usage in rule engine, showcasing how variables are accessed between clauses.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH payload.date as date, payload.array as elem DO date, elem FROM \"t/#\"  -- {\"date\": \"2023-05-06\", \"array\": [\"a\"]}\n```\n\n----------------------------------------\n\nTITLE: Padding Strings with Spaces in EMQX (2-parameter version)\nDESCRIPTION: The pad function extends a string to a specified length by adding trailing spaces. If the string is already longer than the specified length, it remains unchanged.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npad('hello', 8) = 'hello   '\n```\n\n----------------------------------------\n\nTITLE: Downloading EMQX Repository for Yum Installation on CentOS/RHEL\nDESCRIPTION: This command downloads and executes a script to set up the EMQX repository for Yum installation on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://assets.emqx.com/scripts/install-emqx-rpm.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Reverse Proxy for MQTT SSL\nDESCRIPTION: This snippet demonstrates how to set up NGINX to reverse proxy MQTT connections with SSL/TLS encryption. It includes upstream server configuration, SSL settings, and proxy settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstream {\n  upstream mqtt_servers {\n    server emqx1-cluster.emqx.io:1883;\n    server emqx2-cluster.emqx.io:1883;\n  }\n\n  server {\n    listen 8883 ssl;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_certificate /usr/local/nginx/certs/emqx.pem;\n    ssl_certificate_key /usr/local/nginx/certs/emqx.key;\n    ssl_verify_depth 2;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    # To enable mutual authentication, add the CA certificate and client certificate verification\n    # ssl_client_certificate /usr/local/nginx/certs/ca.pem;\n    # ssl_verify_client on;\n    # ssl_verify_depth 1;\n\n    proxy_pass mqtt_servers;\n\n    # When enabling this option, the corresponding backend listener also needs to enable proxy_protocol\n    proxy_protocol on;\n    proxy_connect_timeout 10s;\n    # Default keep-alive time is 10 minutes\n    proxy_timeout 1800s;\n    proxy_buffer_size 3M;\n    tcp_nodelay on;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client Events Table in PostgreSQL\nDESCRIPTION: SQL statement to create a table for storing EMQX client events including client ID, event type, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emqx_client_events (\n  id SERIAL primary key,\n  clientid VARCHAR(255),\n  event VARCHAR(255),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Cluster with etcd\nDESCRIPTION: This code snippet configures the EMQX cluster to use etcd for automatic discovery. It sets the etcd server address, the prefix for EMQX nodes, and the TTL for node entries in etcd.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncluster {\n    discovery_strategy = etcd\n    etcd {\n        server = \"http://127.0.0.1:2379\"\n        prefix = emqxcl\n        node_ttl = 1m\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Info Authentication Using Configuration Items in EMQX\nDESCRIPTION: This configuration example demonstrates how to set up Client-Info authenticator with different match conditions and results. It includes allowing clients with usernames starting with 'super-' and denying clients with empty usernames and client IDs starting with 'v1-'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/cinfo.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthentication = [\n  {\n    mechanism = cinfo\n    checks = [\n      # Allow clients with a username starts with 'super-'\n      {\n        is_match = \"regex_match(username, '^super-.+$')\"\n        result = allow\n      },\n      # Deny clients with an empty username and client ID starts with 'v1-'\n      {\n        # when is_match is an array, it returns 'true' if all checks evaluate to 'true'\n        is_match = [\"str_eq(username, '')\", \"str_eq(nth(1,tokens(clientid,'-')), 'v1')\"]\n        result = deny\n      }\n      # If all checks are exhausted without an 'allow' or a 'deny' result, proceed to the next authenticator\n    ]\n  },\n  # ... more authenticators ...\n  # ...\n  # If all authenticators are exhausted without an 'allow' or a 'deny' result, the client is rejected\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Specific Topics in EMQX Rule SQL\nDESCRIPTION: Illustrates how to define a rule that applies to messages published to topics matching specific patterns. It selects the client ID from metadata and payload, renaming the payload client ID.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid, payload.clientid as myclientid FROM \"t/#\", \"my/other/topic\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Averages by Removing Outliers with jq in EMQX\nDESCRIPTION: Demonstrates how to use jq to process sensor data, remove outliers, and calculate averages. It combines the jq function with the FOREACH statement to divide output into multiple messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-jq.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nFOREACH   jq('def rem_first:\n                 if length > 2 then del(.[0]) else . end;\n              def rem_last:\n                 if length > 1 then del(.[-1]) else . end;\n              .date as $date |\n              .sensors[] |\n                (.data | sort | rem_first | rem_last | add / length) as $average |\n                {$average, $date}',\n             payload)\nFROM    \"jq_demo/complex_rule/jq/#\"\n```\n\n----------------------------------------\n\nTITLE: String Split Operations in EMQX\nDESCRIPTION: Examples of splitting strings using different separators and options including notrim, leading, and trailing variants.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nsplit('a;', ';') = ['a']\nsplit('a;b;c', ';') = ['a', 'b', 'c']\nsplit('a;;b;;c', ';') = ['a', 'b', 'c']\n\n# Note the space before Howell Wise\nsplit('Sienna Blake; Howell Wise', ';') = ['Sienna Blake', ' Howell Wise']\nsplit('Sienna Blake; Howell Wise', '; ') = ['Sienna Blake', 'Howell Wise']\n```\n\n----------------------------------------\n\nTITLE: Complex FOREACH Statement with Multiple Clauses in EMQX Rule SQL\nDESCRIPTION: Demonstrates a complex FOREACH statement that iterates over an array in the payload, transforms data, applies conditions, and selects specific fields for output.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as sensor  \nDO\n    timestamp,\n    clientid,\n    upper(sensor.name) as name,\n    sensor.idx as idx\nINCASE\n    sensor.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase in EMQX\nDESCRIPTION: The lower function transforms all uppercase letters in a string to lowercase, leaving non-alphabetic characters unchanged.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nlower('Hello') = 'hello'\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Publish Hook in Lua\nDESCRIPTION: Example Lua script showing how to implement a message publish hook that modifies the payload of all published messages to 'hello'. The script includes a callback function and hook registration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/lang-lua.md#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message_publish(clientid, username, topic, payload, qos, retain)\n    return topic, \"hello\", qos, retain\nend\n\nfunction register_hook()\n    return \"on_message_publish\"\nend\n```\n\n----------------------------------------\n\nTITLE: Splitting One Message into Separate Messages with jq in EMQX\nDESCRIPTION: Processes an input message containing multiple sensor measurements and splits it into separate messages for each sensor type using jq and FOREACH.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-jq.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nFOREACH\n    ## The data must be an array\n    jq('\n       [{\n         sensor_type: \"temperature\",\n         value: .temperature\n        },\n        {\n         sensor_type: \"humidity\",\n         value: .humidity\n        },\n        {\n         sensor_type: \"pressure\",\n         value: .pressure\n        },\n        {\n         sensor_type: \"light\",\n         value: .light\n        },\n        {\n         sensor_type: \"battery\",\n         value: .battery\n        },\n        {\n         sensor_type: \"speed\",\n         value: .speed\n        }]',\n        payload) as sensor  \nDO\n    payload.client_id,\n    payload.timestamp,\n    sensor.sensor_type,\n    sensor.value\nFROM \"car/measurements\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flapping Detect in EMQX Configuration File\nDESCRIPTION: This snippet shows how to enable and configure the Flapping Detect feature in the emqx.conf file. It sets the enable flag, maximum disconnection count, detection window time, and ban duration for flapping clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/flapping-detect.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflapping_detect {\n\n  enable = true\n\n  ## The maximum number of disconnections allowed for an MQTT client during the detection window time\n  max_count = 15\n\n  ## The duration for which the system monitors the client's flapping behavior\n  window_time = 1m\n\n  ## How long the clientid will be banned\n  ban_time = 5m\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MQTT Client with Paho Python\nDESCRIPTION: Complete example demonstrating MQTT client implementation including connection establishment, message publishing, topic subscription, and callback handling. The code connects to the public EMQX broker, subscribes to 'testtopic/#', and publishes a message to 'emqtt' topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/python.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport paho.mqtt.client as mqtt\n\n#Connection success callback\ndef on_connect(client, userdata, flags, rc):\n    print('Connected with result code '+str(rc))\n    client.subscribe('testtopic/#')\n\n# Message receiving callback\ndef on_message(client, userdata, msg):\n    print(msg.topic+\" \"+str(msg.payload))\n\nclient = mqtt.Client()\n\n# Specify callback function\nclient.on_connect = on_connect\nclient.on_message = on_message\n\n# Establish a connection\nclient.connect('broker.emqx.io', 1883, 60)\n# Publish a message\nclient.publish('emqtt',payload='Hello World',qos=0)\n\nclient.loop_forever()\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX from Ubuntu\nDESCRIPTION: This command removes EMQX and its configuration files from the system using apt. It requires sudo privileges to execute.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove --purge emqx\n```\n\n----------------------------------------\n\nTITLE: Configuring System Monitoring Alarms in EMQX\nDESCRIPTION: This snippet defines configuration options for monitoring system resources like CPU, memory, and disk space. It sets thresholds for raising and clearing alarms based on resource usage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n**sysmon.os.cpu_check_interval**\n\n  *Type*: `duration`\n\n  *Default*: `60s`\n\n  The time interval for the periodic CPU check. Disabled on Windows platform.\n\n\n**sysmon.os.cpu_high_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `80%`\n\n  The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is raised. Disabled on Windows platform\n\n\n**sysmon.os.cpu_low_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `60%`\n\n  The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is cleared. Disabled on Windows platform\n\n\n**sysmon.os.mem_check_interval**\n\n  *Type*: `disabled | duration`\n\n  *Default*: `disabled`\n\n  The time interval for the periodic memory check. Disabled on Windows platform.\n\n\n**sysmon.os.sysmem_high_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `70%`\n\n  The threshold, as percentage of system memory,\n for how much system memory can be allocated before the corresponding alarm is raised. Disabled on Windows platform\n\n\n**sysmon.os.procmem_high_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `5%`\n\n  The threshold, as percentage of system memory,\n for how much system memory can be allocated by one Erlang process before\n the corresponding alarm is raised. Disabled on Windows platform.\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Payload Template for RabbitMQ Sink in EMQX\nDESCRIPTION: This JSON template demonstrates how to structure the payload sent to RabbitMQ. It includes placeholders for the original MQTT payload and timestamp, which are replaced with actual values when the message is forwarded.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"payload\": \"${payload}\", \"timestamp\": ${timestamp}}\n```\n\n----------------------------------------\n\nTITLE: Cassandra Insert CQL Template\nDESCRIPTION: CQL template for inserting MQTT message data into Cassandra with dynamic field mapping.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ninsert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker Container\nDESCRIPTION: Docker commands to start a PostgreSQL container, access it, and create a new database for EMQX data storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To start the PostgreSQL docker image and set the password as public\ndocker run --name PostgreSQL -p 5432:5432 -e POSTGRES_PASSWORD=public -d postgres\n\n# Access the container\ndocker exec -it PostgreSQL bash\n\n# Locate the PostgreSQL server in the container and input the preset password\npsql -U postgres -W\n\n# Create and then select the database\n\nCREATE DATABASE emqx_data;\n\n\\c emqx_data;\n```\n\n----------------------------------------\n\nTITLE: Using FOREACH to Output Multiple Values in EMQX Rule SQL\nDESCRIPTION: Shows how to use the FOREACH statement to output two values, each containing one field called 'value', derived from different fields in the input message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH jq('[.field_1, .field_2]', payload) \nDO item as value\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: EMQX Authentication Configuration File\nDESCRIPTION: Example configuration file showing how to set up authentication chains for different MQTT listeners and gateways in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/authn.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n# emqx.conf\n\n# Specific global authentication chain for all MQTT listeners\nauthentication = [\n  ...\n]\n\nlisteners.tcp.default {\n  ...\n  # Specific authentication chain for the specified MQTT listener\n  authentication = [\n    ...\n  ]\n}\n\ngateway.stomp {\n  ...\n  # Specific global authenticator for all STOMP listeners\n  authentication = {\n    ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling Rule Configuration in EMQX\nDESCRIPTION: Shows how to configure a rule to handle EMQX system events like client connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.client_connected_debug {\n        sql = \"SELECT clientid, connected_at FROM \\\"$events/client_connected\\\" WHERE username = 'EMQX'\"\n        actions = [{function = console}]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Map Operations in EMQX Rule Engine\nDESCRIPTION: Examples of using mget, mput, and map_size functions for map operations in the EMQX rule engine. These functions allow retrieving values, inserting key-value pairs, and determining the size of maps.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmget('c', json_decode('{\"a\": {\"b\": 1}}')) = undefined\njson_decode(mget('a', json_decode('{\"a\": {\"b\": 1}}'))) = '{\"b\": 1}'\nmget(['a', 'b'], json_decode('{\"a\": {\"b\": 1}}')) = 1\n```\n\nLANGUAGE: bash\nCODE:\n```\nmget(['a', 'b'], mput(['a', 'b'], 2, json_decode('{\"a\": {\"b\": 1}}'))) = 2\nmget(['a', 'b'], mput(['a', 'b'], 2, json_decode('{\"c\": 1}'))) = 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nmap_size(json_decode('{}')) = 0\nmap_size(json_decode('{\"msg\": \"hello\"}')) = 1\n```\n\n----------------------------------------\n\nTITLE: Confluent Consumer Command\nDESCRIPTION: Command to consume messages from Confluent topic 'testtopic-in'\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic consume -b testtopic-in\n```\n\n----------------------------------------\n\nTITLE: EMQX MySQL Authentication Configuration with Configuration Items\nDESCRIPTION: Complete configuration example for setting up MySQL authentication in EMQX, including server connection parameters, password hashing algorithm, and SQL query with timeout settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mysql.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  backend = \"mysql\"\n  mechanism = \"password_based\"\n\n  server = \"127.0.0.1:3306\"\n  username = \"root\"\n  database = \"mqtt_user\"\n  password = \"\"\n  pool_size = 8\n\n  password_hash_algorithm {name = \"sha256\", salt_position = \"suffix\"}\n  query = \"SELECT password_hash, salt FROM mqtt_user where username = ${username} LIMIT 1\"\n  query_timeout = \"5s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Backup and Restore Commands in EMQX\nDESCRIPTION: This code snippet demonstrates how to use the command-line tools for backup and restore in EMQX 5.1. It shows the command to export data and configuration files from the built-in database as a compressed package, and how to restore from a backup file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/new-features.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl data export\n...\nData has been successfully exported to data/backup/emqx-export-2023-06-21-14-07-31.592.tar.gz.\n\n./bin/emqx ctl data import <File>\n```\n\n----------------------------------------\n\nTITLE: Inserting MQTT Messages into Oracle Database Table in EMQX\nDESCRIPTION: SQL template for inserting processed MQTT message data into the 't_mqtt_msgs' table in Oracle Database. It uses preprocessed SQL with placeholders for message fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msgs(msgid, sender, topic, qos, retain, payload, arrived) VALUES(\n  ${id},\n  ${clientid},\n  ${topic},\n  ${qos},\n  ${flags.retain},\n  ${payload},\n  TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') + NUMTODSINTERVAL(${timestamp}/1000, 'SECOND')\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocluster on Kubernetes for EMQX\nDESCRIPTION: This snippet illustrates the configuration for EMQX auto-clustering on Kubernetes. It sets the discovery strategy to k8s and specifies the Kubernetes API server, service name, address type, and namespace.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n    discovery_strategy = k8s\n    K8s {\n        apiserver = \"http://10.110.111.204:8080\"\n        service_name = emqx\n        address_type = ip\n        namespace = default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Name and Role in EMQX\nDESCRIPTION: Configuration snippet for setting up node name and role in emqx.conf. The node name consists of a name and host separated by '@', and the role determines the function of the node within the cluster (core or replicant).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/cluster.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode {\n  name = \"emqx@s1.emqx.io\"\n  role = core\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for LwM2M Gateway via Configuration File in EMQX\nDESCRIPTION: This configuration snippet demonstrates how to set up HTTP authentication for the LwM2M Gateway using the EMQX configuration file. It includes settings for the authentication method, URL, and request parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ngateway.lwm2m {\n  authentication {\n    backend = \"http\"\n    mechanism = \"password_based\"\n    method = \"post\"\n    connect_timeout = \"5s\"\n    enable_pipelining = 100\n    url = \"http://127.0.0.1:8080\"\n    headers {\n      \"content-type\" = \"application/json\"\n    }\n    body {\n      clientid = \"${clientid}\"\n    }\n    pool_size = 8\n    request_timeout = \"5s\"\n    ssl.enable = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Root CA Certificate using OpenSSL\nDESCRIPTION: This command uses the private key `rootCA.key` to create a self-signed CA certificate (`rootCA.crt`). The `-x509` option specifies that we're creating a self-signed certificate, `-new` indicates a new certificate request, and `-days 3650` sets the validity period to 10 years. The `-sha256` option specifies the SHA256 hash algorithm.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.crt\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Array Operations in EMQX Rule Engine\nDESCRIPTION: Examples of using contains, first, last, length, nth, and sublist functions for array operations in the EMQX rule engine. These functions allow checking for element existence, retrieving specific elements, and manipulating array subsets.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncontains(2, [1, 2, 3]) = true\ncontains(2.3, [1.8, 2.5, 2.0]) = false\ncontains('John', ['John', 'David']) = true\ncontains([1, 2], [a, b, [1, 2]]) = true\ncontains(json_decode('{\"a\": 1}'), [json_decode('{\"a\": 1}'), json_decode('{\"b\": 2}')]) = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nfirst(['John', 'David']) = 'John'\n\n# Wrong\nfirst([])\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nlast(['John', 'David']) = 'David'\n\n# Wrong\nlast([])\n```\n\nLANGUAGE: bash\nCODE:\n```\nlength([1,2,3,4]) = 4\nlength([]) = 0\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nnth(1, [1,2,3]) = 1\n\n# Wrong\nnth(0, [1,2,3])\nnth(4, [1,2,3])\n```\n\nLANGUAGE: bash\nCODE:\n```\nsublist(3, [1,2,3,4]) = [1,2,3]\nsublist(10, [1,2,3,4]) = [1,2,3,4]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsublist(2, 10, [1,2,3,4]) = [2,3,4]\n```\n\n----------------------------------------\n\nTITLE: Configuring Two-way SSL/TLS Authentication in EMQX\nDESCRIPTION: Configuration settings to enable two-way SSL/TLS authentication in EMQX. This configuration enforces peer verification and requires clients to provide certificates.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.ssl.default {\n  ...\n  ssl_options {\n    ...\n    # Peer verification enabled\n    verify = verify_peer\n    # Forced two-way authentication. If the client cannot provide a certificate, the SSL/TLS connection will be rejected.\n    fail_if_no_peer_cert = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Publish Command\nDESCRIPTION: Example command to start 10 connections publishing QoS 0 messages to topic 't'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench pub -t t -h emqx-server -s 16 -q 0 -c 10 -I 10\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX in Background\nDESCRIPTION: Command to start EMQX as a background process after package installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx start\n```\n\n----------------------------------------\n\nTITLE: Creating EMQX Rule for Processing MQTT Messages\nDESCRIPTION: SQL command for creating an EMQX rule to process messages from the MQTT topic 't/#'. This rule selects specific fields and formats the timestamp for insertion into Snowflake.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  unix_ts_to_rfc3339(publish_received_at, 'millisecond') as publish_received_at,\n  topic,\n  payload\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: String Replace Operations in EMQX\nDESCRIPTION: Examples of using the replace function with different options (all, leading, trailing) to substitute patterns in strings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nreplace('ab..cd..ef', '..', '**', 'all') = 'ab**cd**ef'\nreplace('ab..cd..ef', '..', '**', 'leading') = 'ab**cd..ef'\nreplace('ab..cd..ef', '..', '**', 'trailing') = 'ab..cd**ef'\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements into String in EMQX\nDESCRIPTION: The join_to_string function combines elements of an array into a single string, using the specified separator between each element.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njoin_to_string(', ', ['a', 'b', 'c']) = 'a, b, c'\n```\n\n----------------------------------------\n\nTITLE: Removing Leading Whitespace in EMQX\nDESCRIPTION: The ltrim function removes whitespace characters (spaces, tabs, newlines) from the beginning of a string while preserving whitespace at the end.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nltrim('\\t  hello  \\n') = 'hello  \\n'\nltrim('\\t  hello \\r\\n') = 'hello  \\r\\n'\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Cluster Settings\nDESCRIPTION: Configuration snippet for setting up an EMQX cluster in emqx.conf. Includes settings for cluster name, discovery strategy, core nodes, communication protocol, and SSL options for secure inter-node communication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/cluster.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n  name = emqxcl\n  discovery_strategy = manual\n  core_nodes = []\n  driver = tcp\n  ssl_options {\n    certfile = \"\"\n    keyfile = \"\"\n    cacertfile = \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Sparkplug B Messages Based on Metric Value\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload, checks if the value of a specific metric is greater than 0, and only forwards the message if the condition is met. It uses jq to filter messages based on the 'counter_group1/counter1_run' metric.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Save name of metric to filter on\n   \"counter_group1/counter1_run\" as $to_filter |\n   .metrics[] | select(.name == $to_filter) | .int_value as $value |\n   # Filter out messages where value of metric with name $to_filter is 0 or smaller\n   if $value > 0 then $payload else empty end\n   ',\n   sparkplug_decode(payload)) AS item\nDO sparkplug_encode(item) AS item \nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: EMQX Pushgateway Configuration\nDESCRIPTION: Configuration settings for enabling Prometheus Pushgateway integration in EMQX\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/prometheus.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprometheus {\n  push_gateway_server = \"http://127.0.0.1:9091\"\n  interval = 15s\n  headers {}\n  job_name = \"${name}/instance/${name}~${host}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Transformation in HOCON\nDESCRIPTION: This HOCON configuration snippet demonstrates how to set up a message transformation that decodes an Avro message, encodes it to JSON, and modifies the topic by prepending a tenant attribute. It includes settings for failure handling and specifies the topics to which the transformation applies.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/message-transformation.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nmessage_transformation {\n  transformations = [\n    {\n      name = mytransformation\n      topics = [\"t\"]\n      failure_action = drop\n      payload_decoder = {type = avro, schema = myschema}\n      payload_encoder = {type = json}\n      operations = [\n        {key = \"topic\", value = \"concat([client_attrs.tenant, '/', topic])\"}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Listener Status\nDESCRIPTION: Command output showing the status of enabled listeners in EMQX, including the MQTT over QUIC listener. This helps confirm that the QUIC listener is running correctly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n > emqx ctl listeners\n quic:default\n   listen_on       : :14567\n   acceptors       : 16\n   proxy_protocol  : undefined\n   running         : true\n ssl:default\n   listen_on       : 0.0.0.0:8883\n   acceptors       : 16\n   proxy_protocol  : false\n   running         : true\n   current_conn    : 0\n   max_conns       : 512000\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Flapping Detection in EMQX Configuration File\nDESCRIPTION: Configuration snippet for enabling connection flapping detection in EMQX via the emqx.conf file. It specifies parameters such as maximum disconnection count, detection window time, and ban duration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/flapping-detect.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflapping_detect {\n  enable = true\n  # 客户端最大离线次数\n  max_count = 15\n  # 检测的时间范围\n  window_time = \"1m\"\n  # 封禁的时长\n  ban_time = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating QoS 1 Message Flow in MQTT\nDESCRIPTION: Demonstrates the packet exchange for QoS 1 messages between sender and receiver, showing potential retransmission scenarios.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/design/retransmission.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n               PUBLISH\n#1 Sender  --------------->  Receiver       (*)\n               PUBACK\n#2 Sender  <---------------  Receiver\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Saving MQTT Messages to MongoDB\nDESCRIPTION: This SQL rule selects all fields from MQTT messages under the topic 't/#' for processing and saving to MongoDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions in EMQX SQL Rule Engine\nDESCRIPTION: This SQL example demonstrates how to use the 'nth' and 'tokens' built-in functions to extract the second part of a clientid (after splitting by '_') while filtering sensor data. It processes data from topic 't/#' and only includes records where the sensor index is at least 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as s\nDO\n    nth(2, tokens(clientid,'_')) as clientid,\n    s.name as name,\n    s.idx as idx\nINCASE\n    s.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Structure Configuration in EMQX\nDESCRIPTION: Demonstrates the basic structure for configuring a rule in EMQX configuration file. Shows how to define a rule ID, SQL statement, and actions array.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.my_rule_id {\n        sql = \"SELECT * FROM \\\"t/#\\\"\"\n        actions = []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing EMQX Plugin Hooks in Erlang\nDESCRIPTION: Erlang code snippet showing how to customize the load function of an EMQX plugin to add specific hooks for authentication and authorization.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nload(Env) ->\n  emqx_hooks:add('client.authenticate', {?MODULE, on_client_authenticate, [Env]}, ?HP_HIGHEST),\n  emqx_hooks:add('client.authorize', {?MODULE, on_client_authorize, [Env]}, ?HP_HIGHEST),\n  ok.\n```\n\n----------------------------------------\n\nTITLE: Run EMQX Docker Container\nDESCRIPTION: Command to start an EMQX container with necessary port mappings for MQTT (1883), WebSocket (8083/8084), MQTT over SSL (8883), and Dashboard (18083).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083  emqx/emqx-enterprise:@EE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Authorizer in EMQX\nDESCRIPTION: EMQX configuration snippet for setting up PostgreSQL authorizer. It includes database connection details and the SQL query for authorization checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/postgresql.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = postgresql\n\n  database = \"mqtt\"\n  username = \"postgres\"\n  password = \"public\"\n  server = \"127.0.0.1:5432\"\n  query = \"SELECT permission, action, topic FROM mqtt_acl WHERE username = ${username}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MQTT Message Processing Rule in SQL\nDESCRIPTION: This SQL query selects all fields from messages published to the 't/#' topic. It's used as the rule for processing incoming MQTT messages before sending them to Azure Blob Storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/azure-blob-storage.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: SQL CASE Expression Example\nDESCRIPTION: Demonstrates conditional operation using CASE statement to clamp payload.x value between 0 and 7.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  CASE WHEN payload.x < 0 THEN 0\n       WHEN payload.x > 7 THEN 7\n       ELSE payload.x\n  END as x\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topics with MQTTX CLI\nDESCRIPTION: Command for subscribing to a specific topic pattern using MQTTX CLI. This demonstrates how to connect to an MQTT broker and subscribe to topics with a specific QoS level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/publish-and-subscribe.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqttx sub -t 'testtopic/#' -q 1 -h 'localhost' -p 1883 'public' -v\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in EMQX's cluster.hocon\nDESCRIPTION: Configuration snippet to enable OpenTelemetry tracing in EMQX's cluster.hocon file. It specifies the collector endpoint and enables tracing functionality with optional trace_all setting.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  exporter { endpoint = \"http://localhost:4317\" }\n  traces {\n   enable = true\n   # Whether to trace all messages\n   # If a trace ID cannot be extracted from the message, a new trace ID will be generated.\n   # filter.trace_all = true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GB/T 32960 Authentication via REST API\nDESCRIPTION: Example of creating HTTP authentication for GB/T 32960 gateway using a REST API call. The request configures authentication parameters including URL, headers, body template, and connection settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/gbt32960.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/gbt32960/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"vin\": \"${clientid}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Message Dropped During Routing Event\nDESCRIPTION: Example JSON output from the '$events/message_dropped' event query, showing the topic, timestamp, reason, QoS, and node information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"timestamp\": 1645003103004,\n  \"reason\": \"no_subscribers\",\n  \"qos\": 1,\n  \"node\": \"emqx@127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Storage Table in MySQL\nDESCRIPTION: SQL statement to create a table for storing MQTT message data including client ID, topic, payload, and timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emqx_messages (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  clientid VARCHAR(255),\n  topic VARCHAR(255),\n  payload TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SCRAM Authentication Settings in HCL\nDESCRIPTION: HCL configuration block for setting up SCRAM authentication in EMQX. Defines the authentication mechanism, backend database, hash algorithm, and iteration count for SCRAM authentication process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/scram.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    mechanism = scram\n    backend = built_in_database\n    algorithm = sha512\n    iteration_count = 4096\n}\n```\n\n----------------------------------------\n\nTITLE: Array Range Operation\nDESCRIPTION: This SQL query demonstrates how to create an array with a range of numbers and then extract a sub-range from it. It creates an array 'a' with values from 1 to 5, and then extracts elements from index 2 to 4, assigning them to array 'b'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  [1..5] as a,\n  a[2..4] as b\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in Connection Mode\nDESCRIPTION: Example using libcoap to subscribe to a topic in Connection Mode. The request includes client ID and token along with the observe option to establish the subscription.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m get -s 60 -O 6,0x00 -o - -T \"obstoken\" \"coap://127.0.0.1/ps/coap/test?clientid=123&token=3404490787\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server for EMQX Webhook in Python\nDESCRIPTION: A Flask-based HTTP server implementation that listens for webhook POST requests from EMQX. The server prints received webhook data and returns a success response.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/webhook.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, json, request\n\napi = Flask(__name__)\n\n@api.route('/', methods=['POST'])\ndef print_messages():\n  reply= {\"result\": \"ok\", \"message\": \"success\"}\n  print(\"got post request: \", request.get_data())\n  return json.dumps(reply), 200\n\nif __name__ == '__main__':\n  api.run()\n```\n\n----------------------------------------\n\nTITLE: Running First EMQX Node with Manual Clustering\nDESCRIPTION: Docker command to start the first EMQX node with manual clustering configuration, including port mappings and network settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --name emqx1 \\\n    -e \"EMQX_NODE_NAME=emqx@node1.emqx.com\" \\\n    --network emqx-bridge \\\n    --network-alias node1.emqx.com \\\n    -p 1883:1883 \\\n    -p 8083:8083 \\\n    -p 8084:8084 \\\n    -p 8883:8883 \\\n    -p 18083:18083 \\\n    emqx/emqx:@CE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTTP Server with Flask in Python\nDESCRIPTION: This code sets up a basic HTTP server using Flask that listens for POST requests, prints the received data, and returns a JSON response. It's used to test the HTTP server data integration in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-webhook.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask, json, request\n\napi = Flask(__name__)\n\n@api.route('/', methods=['POST'])\ndef print_messages():\n  reply= {\"result\": \"ok\", \"message\": \"success\"}\n  print(\"got post request: \", request.get_data())\n  return json.dumps(reply), 200\n\nif __name__ == '__main__':\n  api.run()\n```\n\n----------------------------------------\n\nTITLE: Map Operations in EMQX\nDESCRIPTION: Examples of map manipulation functions including get, put, keys, and values operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmap_get('msg', json_decode('{\"msg\": \"hello\"}')) = 'hello'\nmap_get('data', json_decode('{\"msg\": \"hello\"}')) = undefined\nmap_keys(json_decode('{\"a\": 1, \"b\": 2}')) = ['a', 'b']\nmap_values(json_decode('{\"a\": 1, \"b\": 2}')) = [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Docker Container Deployment for EMQX Open Source Edition\nDESCRIPTION: Command to run EMQX Open Source Edition using Docker, exposing necessary ports for MQTT and dashboard access\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx\\/emqx:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Session Settings in EMQX\nDESCRIPTION: This code snippet demonstrates how to configure various session settings in EMQX, including subscription limits, QoS handling, inflight message management, and queue priorities. It also includes settings for forced shutdown and garbage collection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/mqtt.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsession {\n    max_subscriptions = infinity\n    upgrade_qos = false\n    max_inflight = 32\n    retry_interval = 30s\n    max_awaiting_rel = 100\n    await_rel_timeout = 300s\n    session_expiry_interval = 2h\n    max_mqueue_len = 1000\n    mqueue_priorities = disabled\n    mqueue_default_priority = lowest\n    mqueue_store_qos0 = true\n    \n    force_shutdown {\n      max_mailbox_size = 1000\n      max_heap_size = 32MB\n    }\n\n    force_gc {\n      count  =  16000\n      bytes  =  16MB\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: API Authentication in Java using API Keys\nDESCRIPTION: Java example using OkHttp library to authenticate to EMQX REST API with API keys. Demonstrates how to create an authenticated request with proper headers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport okhttp3.*;\n\nimport java.io.IOException;\n\npublic class EMQXNodesAPIExample {\n    public static void main(String[] args) {\n        try {\n            String username = \"4f33d24d7b8e448d\";\n            String password = \"gwtbmFJZrnzUu8mPK1BxUkBA66PygETiDEegkf1q8dD\";\n\n            OkHttpClient client = new OkHttpClient();\n\n            Request request = new Request.Builder()\n                    .url(\"http://localhost:18083/api/v5/nodes\")\n                    .header(\"Content-Type\", \"application/json\")\n                    .header(\"Authorization\", Credentials.basic(username, password))\n                    .build();\n\n            Response response = client.newCall(request).execute();\n            System.out.println(response.body().string());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table for MQTT Authorization\nDESCRIPTION: SQL script to create a table structure for storing MQTT authorization rules. The table includes fields for user identification, action type, permission type, topic patterns, and optional QoS and retain settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mysql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `mqtt_acl` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `ipaddress` VARCHAR(60) NOT NULL DEFAULT '',\n  `username` VARCHAR(255) NOT NULL DEFAULT '',\n  `clientid` VARCHAR(255) NOT NULL DEFAULT '',\n  `action` ENUM('publish', 'subscribe', 'all') NOT NULL,\n  `permission` ENUM('allow', 'deny') NOT NULL,\n  `topic` VARCHAR(255) NOT NULL DEFAULT '',\n  `qos` tinyint(1),\n  `retain` tinyint(1),\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: MQTT SQL Rule for Confluent Integration\nDESCRIPTION: SQL rule to process MQTT messages from topic t/# for forwarding to Confluent\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/confluent-sink.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Querying Client Connection Event in SQL\nDESCRIPTION: SQL statement to extract data from the '$events/client_connected' event topic, including client ID, username, keepalive interval, and bridge status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  keepalive,\n  is_bridge\nFROM\n  \"$events/client_connected\"\n```\n\n----------------------------------------\n\nTITLE: Single-Level Wildcard Examples\nDESCRIPTION: Valid and invalid examples of using the + wildcard character in MQTT topic filters. The + wildcard must occupy an entire level in the topic hierarchy.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"+\" is valid\n\"sensor/+\" is valid\n\"sensor/+/temperature\" is valid\n\"sensor+\" is invalid (does not occupy an entire level)\n```\n\n----------------------------------------\n\nTITLE: EMQX Cluster Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up a two-node EMQX cluster with networking and health checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nversion: '3'\n\nservices:\n  emqx1:\n    image: emqx/emqx-enterprise:@EE_VERSION@\n    container_name: emqx1\n    environment:\n    - \"EMQX_NODE_NAME=emqx@node1.emqx.com\"\n    - \"EMQX_CLUSTER__DISCOVERY_STRATEGY=static\"\n    - \"EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.com,emqx@node2.emqx.com]\"\n    healthcheck:\n      test: [\"CMD\", \"/opt/emqx/bin/emqx\", \"ctl\", \"status\"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node1.emqx.com\n    ports:\n      - 1883:1883\n      - 8083:8083\n      - 8084:8084\n      - 8883:8883\n      - 18083:18083\n    # volumes:\n    #   - $PWD/emqx1_data:/opt/emqx/data\n\n  emqx2:\n    image: emqx/emqx-enterprise:@EE_VERSION@\n    container_name: emqx2\n    environment:\n    - \"EMQX_NODE_NAME=emqx@node2.emqx.com\"\n    - \"EMQX_CLUSTER__DISCOVERY_STRATEGY=static\"\n    - \"EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.com,emqx@node2.emqx.com]\"\n    healthcheck:\n      test: [\"CMD\", \"/opt/emqx/bin/emqx\", \"ctl\", \"status\"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node2.emqx.com\n    # volumes:\n    #   - $PWD/emqx2_data:/opt/emqx/data\n\nnetworks:\n  emqx-bridge:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: JWT Payload with Client Attributes Example in JSON\nDESCRIPTION: An example of how to structure JWT payload with client attributes in EMQX v5.7.0+. The payload includes expiration time, username, and client attributes with role and serial number.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/jwt.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1654254601,\n  \"username\": \"emqx_u\",\n  \"client_attrs\": {\n      \"role\": \"admin\",\n      \"sn\": \"10c61f1a1f47\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running EMQX 5.x from Source\nDESCRIPTION: Steps to clone the EMQX repository, compile the source code, and run the latest version of EMQX 5.x. This assumes you're using the EMQX Builder Docker container.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-source.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# docker exec -it emqx-builder bash\ngit clone https://github.com/emqx/emqx.git\ncd emqx\nmake\n_build/emqx/rel/emqx/bin/emqx console\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX in Different Modes on macOS\nDESCRIPTION: Commands to start EMQX in daemon mode, foreground mode, or interactive mode on macOS. These commands assume EMQX is installed via Homebrew.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# start as daemon\nemqx start\n\n# start in foreground\nemqx foreground\n\n# start in interactive mode, with Erlang shell\nemqx console\n```\n\n----------------------------------------\n\nTITLE: Updating Sparkplug B Payload by Removing a Metric\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload, removes a specific metric, and re-encodes the payload. It uses jq to filter out the metric named 'counter_group1/counter1_run'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Save name of metric to delete\n   \"counter_group1/counter1_run\" as $to_delete |\n   # Filter out metric with name $to_delete\n   [ .metrics[] | select(.name != $to_delete) ] as $updated_metrics |\n   # Update payload with new metrics\n   $payload | .metrics = $updated_metrics\n   ',\n   sparkplug_decode(payload)) AS item\nDO sparkplug_encode(item) AS updated_payload\nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: TDEngine Insert Query Template\nDESCRIPTION: Example of TDEngine insert query template using supertable functionality with variable interpolation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_45\n\nLANGUAGE: sql\nCODE:\n```\ninsert into ${clientid} using msg TAGS (${clientid}) values (${ts},${msg})\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching - regex_match Function\nDESCRIPTION: Determines whether a string matches a given regular expression pattern. Useful for input validation and pattern recognition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nregex_match('123', '^\\d+$') = true\nregex_match('a23', '^\\d+$') = false\n```\n\n----------------------------------------\n\nTITLE: JSON Decoding SQL Rule Example\nDESCRIPTION: SQL rule demonstrating JSON payload decoding and field comparison in the rule engine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_decode(payload) AS p FROM \"t/#\" WHERE p.x = p.y\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring MySQL Docker Container\nDESCRIPTION: Commands for setting up MySQL server via Docker, accessing the container, and creating a new database for EMQX data\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To start the MySQL docker image and set the password as public\ndocker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=public -d mysql\n\n# Access the container\ndocker exec -it mysql bash\n\n# Locate the MySQL server in the container and input the preset password\nmysql -u root -p\n\n# Create and then select the database\nCREATE DATABASE emqx_data CHARACTER SET utf8mb4;\nuse emqx_data;\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from tar.gz Installation on CentOS/RHEL\nDESCRIPTION: This command starts EMQX in the foreground after installing from a tar.gz package on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: Starting ClickHouse Server with Docker\nDESCRIPTION: Bash command to start a ClickHouse server using Docker. It sets up environment variables, port mappings, and mounts an initialization SQL file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n--rm \\\n-e CLICKHOUSE_DB=mqtt_data \\\n-e CLICKHOUSE_USER=emqx \\\n-e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 \\\n-e CLICKHOUSE_PASSWORD=public \\\n-p 18123:8123 \\\n-p 19000:9000 \\\n--ulimit nofile=262144:262144 \\\n-v $pwd/init.sql:/docker-entrypoint-initdb.d/init.sql \\\nclickhouse/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Initializing File Transfer with JSON Payload in MQTT\nDESCRIPTION: This snippet shows the JSON structure for the 'init' command used to initialize a file transfer session. It includes metadata such as file name, size, checksum, expiration, and custom user data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/client.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"{name}\",\n  \"size\": {size},\n  \"checksum\": \"{checksum}\",\n  \"expire_at\": {expire_at},\n  \"segments_ttl\": {segments_ttl},\n  \"user_data\": {user_data}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sparkplug B Payload by Modifying a Metric Value\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload, updates the value of a specific metric to 0, and re-encodes the payload. It uses jq to modify the metric named 'counter_group1/counter1_run'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Save name of metric to update\n   \"counter_group1/counter1_run\" as $to_update |\n   # Update value of metric with name $to_update\n   [\n     .metrics[] |\n     if .name == $to_update\n        then .int_value = 0\n        else .\n     end\n   ] as $updated_metrics |\n   # Update payload with new metrics\n   $payload | .metrics = $updated_metrics\n   ',\n   sparkplug_decode(payload)) AS item\nDO sparkplug_encode(item) AS item\nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: External Schema Registry SQL Function Examples\nDESCRIPTION: Examples of using external schema registry functions in SQL rules for encoding and decoding data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  avro_encode('my_external_registry', json_decode(payload), 123) as encoded\nfrom 't'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  avro_decode('my_external_registry', payload, 123) as decoded\nfrom 't'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  schema_encode_and_tag(\n    'my_local_avro_schema',\n    'my_external_registry',\n    json_decode(payload),\n    'my_subject'\n  ) as encoded\nfrom 't'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  schema_decode_tagged(\n    'my_external_registry',\n    payload\n  ) as decoded\nfrom 't'\n```\n\n----------------------------------------\n\nTITLE: Schema Decode Tagged with External Registry in SQL\nDESCRIPTION: SQL example of using schema_decode_tagged function. It decodes a tagged payload using an external Schema Registry.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  schema_decode_tagged(\n    'my_external_registry',\n    payload\n  ) as decoded\nfrom 't'\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Index for Device Data\nDESCRIPTION: This cURL command creates the 'device_data' index in Elasticsearch for storing messages published by devices. It sets up mappings for timestamp, client ID, and payload fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u elastic:public -X PUT \"localhost:9200/device_data?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"mappings\": {\n    \"properties\": {\n      \"ts\": { \"type\": \"date\" },\n      \"clientid\": { \"type\": \"keyword\" },\n      \"payload\": {\n        \"type\": \"object\",\n        \"dynamic\": true\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Datalayers CLI for Data Verification\nDESCRIPTION: Docker command to enter the Datalayers container and access the Datalayers SQL interface for querying stored data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it datalayers bash\ndlsql -u admin -p public\n```\n\n----------------------------------------\n\nTITLE: Defining Function Declaration Format in EMQX Rule Engine\nDESCRIPTION: Demonstrates the standard format used for declaring functions in the EMQX rule engine documentation. It shows how argument types and return types are specified.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFuncName(Arg 1: Type 1 | ..., ...) -> Type 1 | ...\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Structure Example for EMQX Rule Engine\nDESCRIPTION: Sample JSON payload with a nested structure containing a date field and a data object with an array of sensors. Each sensor has a name and index value. This represents a more complex data structure that the rule engine needs to process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"date\": \"2020-04-24\",\n    \"data\": {\n        \"sensors\": [\n            {\"name\": \"a\", \"idx\":0},\n            {\"name\": \"b\", \"idx\":1},\n            {\"name\": \"c\", \"idx\":2}\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Handle Limit per Process\nDESCRIPTION: This snippet configures the maximum number of file handles a process can open. It is crucial to set this limit high enough for the EMQX process to handle a large number of concurrent connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nulimit -n 1048576\n```\n```\n\n----------------------------------------\n\nTITLE: HAProxy Frontend MQTT WebSocket SSL Configuration\nDESCRIPTION: This configuration sets up a HAProxy frontend for MQTT over WebSocket with SSL/TLS. It binds to port 8084 with SSL enabled, specifying the certificate file and uses the mqtt_ws_backend.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nfrontend mqtt_ws_tls_frontend\n  bind *:8084 ssl crt /etc/haproxy/certs/server.pem\n  mode tcp \n  default_backend mqtt_ws_backend\n```\n\n----------------------------------------\n\nTITLE: Resetting Dashboard Admin Password using EMQX CLI\nDESCRIPTION: Command to reset the password for a Dashboard admin user using the EMQX CLI admins command. Requires specifying the username and new password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl admins passwd <Username> <Password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Actions in EMQX Rules\nDESCRIPTION: Shows how to configure built-in actions like console and republish in EMQX rules, including action parameters and variable references.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.my_rule_id {\n        sql = \"SELECT * FROM \\\"t/#\\\"\"\n        actions = [\n            {\n                function = console\n            },\n            {\n                function = republish\n                args = {\n                    topic = \"a/1\"\n                    payload = \"${payload}\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID without Hyphens in EMQX SQL\nDESCRIPTION: Demonstrates the uuid_v4_no_hyphen() function which generates a random version 4 UUID without the hyphen separators, resulting in a 32-character hexadecimal string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nuuid_v4_no_hyphen() = 'd7a39aa4195a42068b962eb9a665503e'\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX in Foreground\nDESCRIPTION: Command to start EMQX in the foreground after package installation, useful for interactive testing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: HAProxy Configuration for EMQX Load Balancing\nDESCRIPTION: Example HAProxy configuration for load balancing an EMQX cluster with 3 nodes. It includes settings for MQTT listeners, REST API ports, and health checks for load rebalancing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndefaults\n  timeout connect 5s\n  timeout client 60m\n  timeout server 60m\n\nlisten mqtt\n  bind *:1883\n  mode tcp\n  maxconn 50000\n  timeout client 6000s\n  default_backend emqx_cluster\n\nbackend emqx_cluster\n  mode tcp\n  balance leastconn\n  option httpchk\n  http-check send meth GET uri /api/v5/load_rebalance/availability_check hdr Authorization \"Basic xxxxxx\"\n  server emqx1 127.0.0.1:3001 check port 5001 inter 1000 fall 2 rise 5 weight 1 maxconn 1000\n  server emqx2 127.0.0.1:3002 check port 5002 inter 1000 fall 2 rise 5 weight 1 maxconn 1000\n  server emqx3 127.0.0.1:3003 check port 5003 inter 1000 fall 2 rise 5 weight 1 maxconn 1000\n```\n\n----------------------------------------\n\nTITLE: 消息存储 SQL 模板\nDESCRIPTION: 用于将消息数据插入到 emqx_messages 表的 SQL 模板。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO emqx_messages(clientid, topic, payload, created_at) VALUES(\n  ${clientid},\n  ${topic},\n  ${payload},\n  FROM_UNIXTIME(${timestamp}/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: RFC3339 to Unix Timestamp Conversion in EMQX\nDESCRIPTION: Examples of using rfc3339_to_unix_ts to convert RFC3339-compliant datetime strings to Unix timestamps in seconds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nrfc3339_to_unix_ts('2024-02-23T15:56:30Z') = 1708703790\nrfc3339_to_unix_ts('2024-02-23T15:56:30+08:00') = 1708674990\n```\n\n----------------------------------------\n\nTITLE: Variform Function Call Example in JavaScript\nDESCRIPTION: Shows basic syntax for calling functions in Variform expressions with nested function calls.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfunction_call(clientid, another_function_call(username))\n```\n\n----------------------------------------\n\nTITLE: Querying Client Disconnection Event in SQL\nDESCRIPTION: SQL statement to extract data from the '$events/client_disconnected' event topic, including client ID, username, disconnect reason, disconnect time, and EMQX node.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  reason,\n  disconnected_at,\n  node\nFROM\n  \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication POST Request in EMQX\nDESCRIPTION: Configuration example for HTTP POST authentication in EMQX using HCL syntax. It specifies the password-based mechanism, HTTP endpoint, request body format with placeholders, and custom headers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/http.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    mechanism = password_based\n    backend = http\n\n    method = post\n    url = \"http://127.0.0.1:8080/auth?clientid=${clientid}\"\n    body {\n        username = \"${username}\"\n        password = \"${password}\"\n    }\n    headers {\n        \"Content-Type\" = \"application/json\"\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Data Interchange Format (LDIF) Example for MQTT Authorization\nDESCRIPTION: This SQL-like code provides an example of LDAP authorization data in LDIF format, defining organizations, units, and MQTT users with their allowed topics for publishing and subscribing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/ldap.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n## create organization: emqx.io\ndn:dc=emqx,dc=io\nobjectclass: top\nobjectclass: dcobject\nobjectclass: organization\ndc:emqx\no:emqx,Inc.\n\n## create organization unit: testdevice.emqx.io\ndn:ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectclass:organizationalUnit\nou:testdevice\n\ndn:uid=mqttuser0001,ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectClass: mqttUser\nuid: mqttuser0001\n## allows publishing to these 3 topics\nmqttPublishTopic: mqttuser0001/pub/1\nmqttPublishTopic: mqttuser0001/pub/+\nmqttPublishTopic: mqttuser0001/pub/#\n## allows subscribe to these 3 topics\nmqttSubscriptionTopic: mqttuser0001/sub/1\nmqttSubscriptionTopic: mqttuser0001/sub/+\nmqttSubscriptionTopic: mqttuser0001/sub/#\n## the underneath topics allow both publish or subscribe\nmqttPubSubTopic: mqttuser0001/pubsub/1\nmqttPubSubTopic: mqttuser0001/pubsub/+\nmqttPubSubTopic: mqttuser0001/pubsub/#\n\ndn:uid=mqttuser0002,ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectClass: mqttUser\nuid: mqttuser0002\nmqttPublishTopic: mqttuser0002/pub/#\nmqttSubscriptionTopic: mqttuser0002/sub/1\nmqttPubSubTopic: mqttuser0002/pubsub/#\n```\n\n----------------------------------------\n\nTITLE: Configuring JT/T 808 Gateway via Configuration File\nDESCRIPTION: Shows how to configure the JT/T 808 gateway using the EMQX configuration file (emqx.conf). Includes settings for frame parameters, TCP listener, authentication, and message routing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway {\n  jt808 {\n    enable_stats = true\n    frame {max_length = 8192}\n    idle_timeout = 30s\n    listeners {\n      tcp {\n        default {\n          acceptors = 16\n          bind = \"6207\"\n          max_conn_rate = 1000\n          max_connections = 1024000\n        }\n      }\n    }\n    max_retry_times = 3\n    message_queue_len = 10\n    mountpoint = \"jt808/${clientid}/\"\n    proto {\n      auth {allow_anonymous = true}\n      dn_topic = \"jt808/${clientid}/${phone}/dn\"\n      up_topic = \"jt808/${clientid}/${phone}/up\"\n    }\n    retry_interval = 8s\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Payload from MQTT Topic in EMQX Rule Engine\nDESCRIPTION: This SQL statement selects only the payload field from messages published to the 't/#' topic. It demonstrates how to extract specific data from MQTT messages in the EMQX Rule Engine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/rules.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload from \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: SSL/TLS Configuration for WebSocket Listeners\nDESCRIPTION: Advanced SSL/TLS settings for secure WebSocket connections including certificate, verification, and encryption options\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners.wss.$name.ssl_options:\n  certfile: \"${EMQX_ETC_DIR}/certs/cert.pem\"\n  keyfile: \"${EMQX_ETC_DIR}/certs/key.pem\"\n  verify: verify_none\n  versions: [\"tlsv1.3\", \"tlsv1.2\"]\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE Example\nDESCRIPTION: This SQL statement demonstrates the use of FOREACH, DO, and INCASE clauses for processing array data within a message payload.  It iterates over the 'payload.sensors' array, selects specific fields from each sensor object, and filters based on the 'idx' field. The `DO` clause is equivalent to `SELECT` and the `INCASE` clause is equivalent to `WHERE` within the context of each iteration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as e ## 选择出的字段必须为数组类型\nDO                       ## DO 相当于针对当前循环中对象的 SELECT 子句，决定最终的输出结果里的字段\n    clientid,\n    e.name as name,\n    e.idx as idx\nINCASE                  ## INCASE 相当于针对当前循环中对象的 WHERE 语句\n    e.idx >= 1          ## 对DO选择出来的某个字段施加条件过滤\nFROM \"t/#\"              ## 子句将规则挂载到某个主题上\n```\n\n----------------------------------------\n\nTITLE: Managing Admin Users\nDESCRIPTION: Commands for adding, updating password, and deleting administrative users in EMQX Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl admins add emqx_u EMQemq@1172\nok\n\n$ emqx ctl admins passwd emqx_u EMQemq@11721\nok\n\n$ emqx ctl admins del emqx_u\nok\n```\n\n----------------------------------------\n\nTITLE: Formatting Notification Payload in JSON for LwM2M Client to Server Communication\nDESCRIPTION: Specifies the JSON payload format for Notification messages from LwM2M Client to Server. It includes request ID, sequence number, response code, and the latest value of the observed resource.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": \"notify\",\n  \"seqNum\": {?ObserveSeqNum},\n  \"data\": {\n    \"code\": {?ResponseCode},\n    \"codeMsg\": {?ResponseMsg},\n    \"reqPath\": {?RequestPath},\n    \"content\": [\n      {\n        \"path\": {?ResourcePath},\n        \"value\": {?Value}\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based ACL in EMQX Configuration File\nDESCRIPTION: Example configuration for setting up file-based ACL authorization in EMQX's configuration file. It specifies the authorization behavior, file path, and enables the file-based authorizer.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/file.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nauthorization {\n  deny_action = ignore\n  no_match = allow\n  sources = [\n    {\n      type = file\n      enable = true\n      path = \"etc/acl.conf\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Client Attributes Configuration in JavaScript\nDESCRIPTION: Configuration example showing how to extract client ID prefix and set it as a group attribute using Variform expression.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmqtt {\n    client_attrs_init = [\n        {\n            # Extract the prefix of client ID before the first -\n            expression = \"nth(1, tokens(clientid, '-'))\"\n            # And set as client_attrs.group\n            set_as_attr = group\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Authentication with cURL using API Keys\nDESCRIPTION: Example of authenticating to EMQX REST API using API keys with cURL. The API key is used as the username and the secret key as the password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:18083/api/v5/nodes \\\n     -u 4f33d24d7b8e448d:gwtbmFJZrnzUu8mPK1BxUkBA66PygETiDEegkf1q8dD \\\n     -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Standalone Redis Authentication Configuration\nDESCRIPTION: Complete configuration for standalone Redis authentication setup\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/redis.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = redis\n\n  redis_type = single\n  server = \"127.0.0.1:6379\"\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = suffix\n  }\n\n  cmd = \"HMGET mqtt_user:${username} password_hash salt is_superuser\"\n  database = 1\n  password = \"public\"\n  auto_reconnect = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TimescaleDB Database\nDESCRIPTION: SQL commands to connect to TimescaleDB via Docker and create a new database\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it timescaledb psql -U postgres\n\n## create tsdb database\n> CREATE database tsdb;\n\n> \\c tsdb;\n```\n\n----------------------------------------\n\nTITLE: Configuring End-to-End Tracing via Configuration File in EMQX\nDESCRIPTION: Sample configuration for enabling OpenTelemetry-based end-to-end tracing in EMQX's cluster.hocon file. This configuration includes trace mode settings, client event tracing options, whitelist limitations, and sampling parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  exporter { endpoint = \"http://localhost:4317\" }\n  traces {\n   enable = true\n   # End-to-end tracing mode\n   trace_mode = e2e\n   # End-to-end tracing options\n   e2e_tracing_options {\n     ## Trace client connection/disconnection events\n     client_connect_disconnect = true\n     ## Trace client messaging events\n     client_messaging = true\n     ## Trace client subscription/unsubscription events\n     client_subscribe_unsubscribe = true\n     ## Maximum whitelist length for client IDs\n     clientid_match_rules_max = 30\n     ## Maximum whitelist length for topic filters\n     topic_match_rules_max = 30\n     ## Cluster identifier\n     cluster_identifier = emqxcl\n     ## Message trace level (QoS)\n     msg_trace_level = 2\n     ## Sampling rate for events not in the whitelist\n     ## Note: Sampling applies only when tracing is enabled\n     sample_ratio = \"100%\"\n     ## Follow traceparent\n     ## Whether end-to-end tracing follows the `traceparent` passed in by the client\n     follow_traceparent\n    }\n  }\n  max_queue_size = 50000\n  scheduled_delay = 1000\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running EMQX with QUIC Support in Docker\nDESCRIPTION: Docker command to run EMQX with the MQTT over QUIC listener enabled on port 14567. This configuration includes the necessary SSL certificate settings required for QUIC connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx \\\n  -p 1883:1883 -p 8083:8083 \\\n  -p 8084:8084 -p 8883:8883 \\\n  -p 18083:18083 \\\n  -p 14567:14567/udp \\\n  -e EMQX_LISTENERS__QUIC__DEFAULT__keyfile=\"etc/certs/key.pem\" \\\n  -e EMQX_LISTENERS__QUIC__DEFAULT__certfile=\"etc/certs/cert.pem\" \\\n  -e EMQX_LISTENERS__QUIC__DEFAULT__ENABLED=true \\\nemqx/emqx:@CE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Deploying TimescaleDB with Docker\nDESCRIPTION: Docker command to create and run a TimescaleDB container with password configuration\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name timescaledb \\\n    -p 5432:5432 \\\n    -e POSTGRES_PASSWORD=public \\\n    timescale/timescaledb:latest-pg13\n```\n\n----------------------------------------\n\nTITLE: Starting Node Evacuation via CLI in EMQX\nDESCRIPTION: CLI command to initiate node evacuation with configurable parameters including health check waiting time, connection eviction rate, migration targets, and session handling settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance start --evacuation \\\n    [--wait-health-check Secs] \\\n    [--redirect-to \"Host1:Port1 Host2:Port2 ...\"] \\\n    [--conn-evict-rate CountPerSec] \\\n    [--migrate-to \"node1@host1 node2@host2 ...\"] \\\n    [--wait-takeover Secs] \\\n    [--sess-evict-rate CountPerSec]\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Transformation in Configuration File\nDESCRIPTION: This code snippet demonstrates how to configure message transformation in the EMQX configuration file. It specifies a transformation named `mytransformation` that decodes an Avro-formatted message payload using a specified schema, encodes the payload into JSON format, and concatenates the `tenant` attribute from the client attributes with the original topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/message-transformation.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"message_transformation {\\n  transformations = [\\n    {\\n      name = mytransformation\\n      topics = [\\\"t\\\"]\\n      failure_action = drop\\n      payload_decoder = {type = avro, schema = myschema}\\n      payload_encoder = {type = json}\\n      operations = [\\n        {key = \\\"topic\\\", value = \\\"concat([client_attrs.tenant, '/', topic])\\\"}\\n      ]\\n    }\\n  ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocluster by DNS Records in EMQX\nDESCRIPTION: This snippet demonstrates how to configure EMQX for auto-clustering using DNS records. It sets the discovery strategy to DNS and specifies the DNS name and record type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n    discovery_strategy = dns\n    dns {\n        name = \"localhost\"\n        ## support DNS A record and DNS SRV record\n        record_type = a\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping an MQTT Listener\nDESCRIPTION: Stops a specific MQTT listener identified by its type and name. Note that stopping a listener will disconnect all connected clients. This change is temporary and will revert after EMQX restarts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners stop tcp:default\nStop tcp:default listener successfully.\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing\nDESCRIPTION: SQL statement to select all messages from MQTT topic t/# for forwarding to Kafka.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Managing Log Levels with EMQX CLI\nDESCRIPTION: The 'log' command allows setting log levels for the entire system or specific handlers. It also provides functionality to list, start, and stop log handlers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log set-level debug\ndebug\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log primary-level\ndebug\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log primary-level info\ninfo\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log handlers list\nLogHandler(id=ssl_handler, level=debug, destination=console, status=started)\nLogHandler(id=console, level=debug, destination=console, status=started)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log handlers start console\nlog handler console started\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log handlers stop console\nlog handler console stopped\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl log handlers set-level console debug\ndebug\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Sink Rule SQL with getenv\nDESCRIPTION: This SQL snippet shows how to read an environment variable `KAFKA_TOPIC` and assign its value to the `kafka_topic` field in the SQL processing result, along with the original payload. It's used to dynamically configure the Kafka topic in the Kafka Sink rule. The environment variable name must have a fixed prefix `EMQXVAR_`.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT\n  getenv('KAFKA_TOPIC') as kafka_topic,\n  payload\nFROM\n  \\\"t/#\\\"\"\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Decoding Protobuf Messages\nDESCRIPTION: SQL statement for a rule that decodes Protobuf messages using the 'protobuf_person' schema and filters for messages where the name is 'Shawn'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-protobuf.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  schema_decode('protobuf_person', payload, 'Person') as person, payload\nFROM\n  \"t/#\"\nWHERE\n  person.name = 'Shawn'\n```\n\n----------------------------------------\n\nTITLE: Reconnecting MQTT Client with Durable Session\nDESCRIPTION: This command reconnects to EMQX with the same client ID 'emqx_c' and uses the '--no-clean' option to set Clean Start to false. It's used to demonstrate the restoration of a durable session and delivery of queued messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/durability_introduction.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -i emqx_c --no-clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Algorithms in EMQX\nDESCRIPTION: Configuration examples for different password hashing algorithms including simple algorithms (sha256), bcrypt, and pbkdf2. Each algorithm can be configured with specific parameters like salt position, iterations, and key length.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/authn.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n# simple algorithms\npassword_hash_algorithm {\n  name = sha256             # plain, md5, sha, sha512\n  salt_position = suffix    # prefix, disable\n}\n\n# bcrypt\npassword_hash_algorithm {\n  name = bcrypt\n}\n\n# pbkdf2\npassword_hash_algorithm {\n  name = pbkdf2\n  mac_fun = sha256          # md4, md5, ripemd160, sha, sha224, sha384, sha512\n  iterations = 4096\n  dk_length = 32           # optional, Unit: Byte\n}\n```\n\n----------------------------------------\n\nTITLE: Example of File Transfer Initialization JSON in MQTT\nDESCRIPTION: This example demonstrates a complete JSON payload for initializing a file transfer, including a specific filename, size, checksum, expiration timestamp, and segment TTL.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/client.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ml-logs-data.log\",\n  \"size\": 12345,\n  \"checksum\": \"1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n  \"expire_at\": 1696659943,\n  \"segments_ttl\": 600\n}\n```\n\n----------------------------------------\n\nTITLE: Running DynamoDB Local Server with Docker\nDESCRIPTION: Command to run a local DynamoDB server using Docker, setting up access keys and region.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name dynamodb-local \\\n  -e AWS_ACCESS_KEY_ID=root \\\n  -e AWS_SECRET_ACCESS_KEY=public \\\n  -e AWS_DEFAULT_REGION=us-west-2 \\\n  amazon/dynamodb-local:2.4.0\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Service\nDESCRIPTION: This command starts the EMQX service using systemd on Debian systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Signing the Server CSR with the CA Certificate\nDESCRIPTION: Command to create a server certificate by signing the CSR with the CA's private key and certificate. The certificate is valid for 365 days and uses the serial number tracking feature of OpenSSL.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/tls-certificate.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -in server.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out server.crt -days 365\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message with temperature and humidity data to topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{\"temp\":24,\"humidity\":30}'\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Shared Subscription Topic with MQTTX CLI\nDESCRIPTION: This code shows how to publish multiple messages to a topic that is being subscribed to by shared subscription groups. The example publishes four messages with different payloads to demonstrate load balancing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/explore-mqtt.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '1' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '2' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '3' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '4' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Events Recording\nDESCRIPTION: SQL template for inserting client event data into the emqx_client_events table\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO emqx_client_events(clientid, event, created_at) VALUES (\n  ${clientid},\n  ${event},\n  FROM_UNIXTIME(${timestamp}/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Erlang VM Statistics with EMQX CLI\nDESCRIPTION: The 'vm' command displays various statistics from the Erlang virtual machine, including CPU load, memory usage, process counts, and I/O information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl vm\ncpu/load1               : 13.16\ncpu/load5               : 11.95\ncpu/load15              : 9.75\nmemory/total            : 127648904\nmemory/processes        : 30427456\nmemory/processes_used   : 30426744\nmemory/system           : 97221448\nmemory/atom             : 2277809\nmemory/atom_used        : 2259843\nmemory/binary           : 668072\nmemory/code             : 48748792\nmemory/ets              : 10725432\nprocess/limit           : 2097152\nprocess/count           : 626\nio/max_fds              : 8192\nio/active_fds           : 0\nports/count             : 27\nports/limit             : 1048576\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Kafka Server on macOS\nDESCRIPTION: Commands to download, extract, and start a Kafka server using KRaft mode. This includes setting up the cluster ID and formatting storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://archive.apache.org/dist/kafka/3.3.1/kafka_2.13-3.3.1.tgz\n\ntar -xzf  kafka_2.13-3.3.1.tgz\n\ncd kafka_2.13-3.3.1\n\n# Use KRaft start Kafka\nKAFKA_CLUSTER_ID=\"$(bin/kafka-storage.sh random-uuid)\"\n\nbin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c config/kraft/server.properties\n\nbin/kafka-server-start.sh config/kraft/server.properties\n```\n\n----------------------------------------\n\nTITLE: Configuring DTLS Listener Options in EMQX Gateway\nDESCRIPTION: This snippet defines configuration options for the DTLS listener in EMQX gateway. It includes settings for acceptors, UDP options, enabling/disabling the listener, binding address and port, connection limits, authentication, mountpoint, and access rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:dtls_listener.acceptors: 16\ngateway:dtls_listener.udp_options: gateway:udp_opts\ngateway:dtls_listener.enable: true\ngateway:dtls_listener.bind: emqx_gateway_schema:ip_port\ngateway:dtls_listener.max_connections: 1024\ngateway:dtls_listener.max_conn_rate: 1000\ngateway:dtls_listener.enable_authn: true\ngateway:dtls_listener.mountpoint: string\ngateway:dtls_listener.access_rules: []\ngateway:dtls_listener.dtls_options: gateway:dtls_opts\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Location Information Report (msg_id: 512)\nDESCRIPTION: This example demonstrates the complete JSON structure for a location information report (message ID 512) including header and body fields. The body contains location data, status information, and optional extended vehicle information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\": {\n    \"msg_id\": 1,\n    \"encrypt\": 0,\n    \"len\": VAL,\n    \"phone\": 13900000000,\n    \"msg_sn\": 0\n  },\n  \"body\": {\n    \"alarm\": VAL,\n    \"status\": VAL,\n    \"latitude\": VAL,\n    \"longitude\": VAL,\n    \"altitude\": VAL,\n    \"speed\": VAL,\n    \"direction\": VAL,\n    \"time\": VAL,\n    \"extra\": {\n      \"mileage\": VAL,\n      \"fuel_unit\": VAL,\n      \"speed\": VAL,\n      \"alarm_id\": VAL,\n      \"overspeed_alarm\": {\n        \"type\": VAL,\n        \"id\": VAL\n      },\n      \"in_out_alarm\": {\n        \"type\": VAL,\n        \"id\": VAL,\n        \"direction\": VAL\n      },\n      \"path_time_alarm\": {\n        \"id\": VAL,\n        \"time\": VAL,\n        \"result\": VAL\n      },\n      \"signal\": {\n        \"low_beam\": VAL,\n        \"high_beam\": VAL\n      },\n      \"right_turn\": VAL,\n      \"left_turn\": VAL,\n      \"brake\": VAL,\n      \"reverse\": VAL,\n      \"fog\": VAL,\n      \"side_marker\": VAL,\n      \"horn\": VAL,\n      \"air_conditioner\": VAL,\n      \"neutral\": VAL,\n      \"retarder\": VAL,\n      \"abs\": VAL,\n      \"heater\": VAL,\n      \"cluth\": VAL,\n      \"io_status\": {\n        \"deep_sleep\": VAL,\n        \"sleep\": VAL\n      },\n      \"analog\": {\n        \"ad0\": VAL,\n        \"ad1\": VAL\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Built-in Database Authentication for OCPP Gateway via HTTP API\nDESCRIPTION: This curl command creates a built-in database authentication for the OCPP gateway using the EMQX HTTP API. It configures a password-based authentication mechanism with SHA256 hashing and sets the user ID type to username.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/ocpp.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://127.0.0.1:18083/api/v5/gateways/ocpp/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"backend\": \"built_in_database\",\n  \"mechanism\": \"password_based\",\n  \"password_hash_algorithm\": {\n    \"name\": \"sha256\",\n    \"salt_position\": \"suffix\"\n  },\n  \"user_id_type\": \"username\"\n}'\n```\n\n----------------------------------------\n\nTITLE: EMQX Authorization Configuration Structure in HCL\nDESCRIPTION: HCL configuration structure for EMQX authorization settings, including source array configuration, no_match behavior, deny_action settings, and cache configuration parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/authz.md#2025-04-20_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nauthorization {\n  sources = [\n    { ...   },\n    { ...   }\n  ]\n  no_match = allow\n  deny_action = ignore\n  cache {\n    max_size = 32\n    excludes = [\"t/1\", \"t/2\"]\n    ttl = 1m\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MQTTX CLI on macOS using Homebrew\nDESCRIPTION: Command for installing MQTTX CLI via Homebrew package manager on macOS. MQTTX CLI is an open-source MQTT 5.0 command line tool for testing MQTT services.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/publish-and-subscribe.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Homebrew\nbrew install emqx/mqttx/mqttx-cli\n# Intel Chip\ncurl -LO https://www.emqx.com/zh/downloads/MQTTX/v1.9.0/mqttx-cli-macos-x64\nsudo install ./mqttx-cli-macos-x64 /usr/local/bin/mqttx\n# Apple Silicon\ncurl -LO https://www.emqx.com/zh/downloads/MQTTX/v1.9.0/mqttx-cli-macos-arm64\nsudo install ./mqttx-cli-macos-arm64 /usr/local/bin/mqttx\n```\n\n----------------------------------------\n\nTITLE: Decoding Sparkplug B Messages in SQL\nDESCRIPTION: SQL query that demonstrates how to decode Sparkplug B payload using the sparkplug_decode function in EMQX rule engine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  sparkplug_decode(payload) as decoded\nfrom t\n```\n\n----------------------------------------\n\nTITLE: Console Output Format for Rule Action in EMQX\nDESCRIPTION: Demonstrates the format of console output when a rule action is triggered in EMQX. It shows the rule ID, action data, and environment variables.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[rule action] rule_id1\n    Action Data: #{key1 => val1}\n    Envs: #{key1 => val1, key2 => val2}\n```\n\n----------------------------------------\n\nTITLE: Simplified FOREACH Expression for Direct Path Access\nDESCRIPTION: Equivalent SQL rule using a direct path to access the nested sensors array without intermediate variable assignment. This shorter version provides the same functionality as the previous example but with a more concise syntax.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.data.sensors as s\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed TCP Listener in EMQX\nDESCRIPTION: Shows a more detailed configuration for a TCP listener that includes both binding information and enabling the proxy protocol feature.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlisteners.tcp.demo {\n    bind = \"0.0.0.0:1883\"\n    proxy_protocol = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Listener with CRL Check in EMQX\nDESCRIPTION: HCL configuration for setting up an SSL listener with CRL check enabled. Configures the SSL port, certificate files, peer verification, and CRL check settings. Requires CA certificate, server certificate, and private key files.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/crl.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlisteners.ssl.default {\n  bind = \"0.0.0.0:8883\"\n  ssl_options {\n    # PEM format file containing the trusted CA (certificate authority) certificates that the listener uses to verify the authenticity of the clients.\n    cacertfile = \"/etc/emqx/certs/ca.pem\"\n    # PEM format file containing the SSL/TLS certificate chain for the listener. If the certificate is not directly issued by a root CA, the intermediate CA certificates should be appended after the listener certificate to form a chain.\n    certfile = \"/etc/emqx/certs/server.pem\"\n    # PEM format file containing the private key corresponding to the SSL/TLS certificate.\n    keyfile = \"/etc/emqx/certs/server.key\"\n    # Must verify peer certificats\n    verify = verify_peer\n    # Force the client to send a non-empty certificate, otherwise fail the TLS handshake.\n    fail_if_no_peer_cert = true\n    # Also verify client certificate's revocation status\n    enable_crl_check = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Log in EMQX Configuration File\nDESCRIPTION: This snippet shows how to enable and configure the audit log feature in the emqx.conf file. It sets various parameters such as log file path, rotation settings, and filtering options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/audit-log.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlog.audit {\n  path = \"./log/audit.log\"\n  rotation_count = 10\n  rotation_size = 50MB\n  time_offset = system\n  ignore_high_frequency_requst = true\n  max_filter_size = 5000\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Explicit SQL Types in EMQX\nDESCRIPTION: This SQL snippet demonstrates how to insert data into a 'msg' table with explicit type casting for topic, qos, and payload fields. It requires specifying the data types directly in the SQL statement.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridges.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO msg(topic, qos, payload) VALUES('${topic}', ${qos}, '${payload}');\n```\n\n----------------------------------------\n\nTITLE: Python Function for Publishing Protobuf Messages\nDESCRIPTION: Python function that creates a Person message, serializes it to binary, and publishes it to the 't/1' topic using MQTT.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-protobuf.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef publish_msg(client):\n    p = person_pb2.Person()\n    p.id = 1\n    p.name = \"Shawn\"\n    p.email = \"shawn@example.com\"\n    message = p.SerializeToString()\n    topic = \"t/1\"\n    print(\"publish to topic: t/1, payload:\", message)\n    client.publish(topic, payload=message, qos=0, retain=False)\n```\n\n----------------------------------------\n\nTITLE: Starting GreptimeDB Docker Container\nDESCRIPTION: This command starts a GreptimeDB Docker container with specific port mappings, volume mounting, and configuration options. It sets up the standalone server with HTTP, RPC, and MySQL interfaces, and configures a static user for authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4000-4004:4000-4004 \\\n-p 4242:4242 -v \"$(pwd)/greptimedb:/tmp/greptimedb\" \\\n--name greptime --rm \\\ngreptime/greptimedb standalone start \\\n--http-addr 0.0.0.0:4000 \\\n--rpc-addr 0.0.0.0:4001 \\\n--mysql-addr 0.0.0.0:4002 \\\n--user-provider=static_user_provider:cmd:greptime_user=greptime_pwd\n```\n\n----------------------------------------\n\nTITLE: Hash Functions in EMQX Rule Engine\nDESCRIPTION: Functions for generating hash values using MD5, SHA-1, and SHA-256 algorithms.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmd5('hello') = '5d41402abc4b2a76b9719d911017c592'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsha('hello') = 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsha256('hello') = '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing\nDESCRIPTION: SQL query to select all messages from MQTT topic t/# for processing in the Kinesis sink rule.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing\nDESCRIPTION: SQL query to select client ID, timestamp, and payload from MQTT messages on topic t/#\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  timestamp as ts,\n  payload\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Subscription Settings in EMQX\nDESCRIPTION: Configuration block for MQTT subscription features including wildcard, exclusive, and shared subscription settings with distribution strategy options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/mqtt.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt {\n\twildcard_subscription = true\n  exclusive_subscription = false\n  shared_subscription = true\n  shared_subscription_strategy  =  round_robin\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Durable Storage Information with EMQX CLI\nDESCRIPTION: This CLI command displays an overview of the durable storage state in EMQX, including site information, node statuses, and shard distribution.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/management.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx_ctl ds info\n\nTHIS SITE:\nD8894F95DC86DFDB\n\nSITES:\n5C6028D6CE9459C7    'emqx@n2.local'        up\nD8894F95DC86DFDB    'emqx@n1.local'        up\nF4E92DEA197C8EBC    'emqx@n3.local'    (x) down\n\nSHARDS:\nShard                             Replicas\nmessages/0                        5C6028D6CE9459C7\nmessages/1                        5C6028D6CE9459C7\nmessages/10                       5C6028D6CE9459C7\nmessages/11                       5C6028D6CE9459C7\nmessages/2                        5C6028D6CE9459C7\nmessages/3                        5C6028D6CE9459C7\nmessages/4                        5C6028D6CE9459C7\nmessages/5                        5C6028D6CE9459C7\nmessages/6                        5C6028D6CE9459C7\nmessages/7                        5C6028D6CE9459C7\nmessages/8                        5C6028D6CE9459C7\nmessages/9                        5C6028D6CE9459C7\n```\n\n----------------------------------------\n\nTITLE: Access Nested Array Element from JSON Payload\nDESCRIPTION: This SQL query demonstrates how to access a nested array element within a JSON payload. It selects the 'id' field from the first element (index 1) of the 'payload.data' array and assigns it to the variable 'id'. This shows how to navigate nested data structures in a JSON payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload.data[1].id as id\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Python Function for Publishing Avro-Encoded Messages\nDESCRIPTION: This Python function encodes a user message using Avro and publishes it to the 't/1' MQTT topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-avro.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef publish_msg(client):\n    datum_w = avro.io.DatumWriter(SCHEMA)\n    buf = io.BytesIO()\n    encoder = avro.io.BinaryEncoder(buf)\n    datum_w.write({\"name\": \"Shawn\", \"favorite_number\": 666, \"favorite_color\": \"red\"}, encoder)\n    message = buf.getvalue()\n    topic = \"t/1\"\n    print(\"publish to topic: t/1, payload:\", message)\n    client.publish(topic, payload=message, qos=0, retain=False)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using Prepared Statements in EMQX\nDESCRIPTION: This SQL snippet shows how to use prepared statements for inserting data into a 'msg' table. It allows automatic type inference and enhances security by preventing SQL injection. The values are passed as unquoted parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridges.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO msg(topic, qos, payload) VALUES(${topic}, ${qos}, ${payload});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TCP Listener in EMQX\nDESCRIPTION: Demonstrates how to add a new TCP listener in the emqx.conf configuration file. This is the simplest way to add a listener that binds to all interfaces on port 1883.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlisteners.tcp.demo.bind = \"0.0.0.0:1883\"\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Rule with Data Type Conversion for MongoDB\nDESCRIPTION: This SQL rule selects all fields, converts the timestamp to a MongoDB date, and encodes the payload as a JSON string for storage in MongoDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  mongo_date(timestamp) as timestamp,\n  json_encode(payload) as payload\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JT/T 808 Gateway via HTTP API\nDESCRIPTION: Demonstrates how to enable and configure the JT/T 808 gateway using EMQX's HTTP API. The configuration includes basic settings, frame parameters, authentication settings, and TCP listener configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateways/jt808' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"jt808\",\n  \"frame\": {\n    \"max_length\": 8192\n  },\n  \"proto\": {\n    \"auth\": {\n      \"allow_anonymous\": true\n    },\n    \"up_topic\":\"jt808/${clientid}/${phone}/up\",\n    \"dn_topic\":\"jt808/${clientid}/${phone}/dn\"\n  },\n  \"mountpoint\": \"jt808/${clientid}/\",\n  \"retry_interval\": \"8s\",\n  \"max_retry_times\": 3,\n  \"message_queue_len\": 10,\n  \"enable_stats\": true,\n  \"idle_timeout\": \"30s\",\n  \"listeners\": [\n    {\n      \"type\":\"tcp\",\n      \"name\":\"default\",\n      \"bind\":\"6207\",\n      \"acceptors\":16,\n      \"max_conn_rate\":1000,\n      \"max_connections\":1024000,\n      \"id\":\"jt808:tcp:default\"\n    }\n  ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table for MQTT ACL\nDESCRIPTION: SQL command to create a table structure for storing MQTT authorization credentials in PostgreSQL. The table includes fields for username, permission, action, topic, QoS, and retain flags.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/postgresql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mqtt_acl(\n  id serial PRIMARY KEY,\n  username text NOT NULL,\n  permission text NOT NULL,\n  action text NOT NULL,\n  topic text NOT NULL,\n  qos smallint,\n  retain smallint\n);\nCREATE INDEX mqtt_acl_username_idx ON mqtt_acl(username);\n```\n\n----------------------------------------\n\nTITLE: Client Connected Event JSON Payload in EMQX\nDESCRIPTION: JSON payload structure for client connected events published to $SYS/brokers/${node}/clients/${clientid}/connected. Contains client connection details including username, timestamp, port, protocol version, and other connection parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/mqtt-system-topics.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"username\": \"foo\",\n    \"ts\": 1625572213873,\n    \"sockport\": 1883,\n    \"proto_ver\": 4,\n    \"proto_name\": \"MQTT\",\n    \"keepalive\": 60,\n    \"ipaddress\": \"127.0.0.1\",\n    \"expiry_interval\": 0,\n    \"connected_at\": 1625572213873,\n    \"connack\": 0,\n    \"clientid\": \"emqtt-8348fe27a87976ad4db3\",\n    \"clean_start\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent HOCON Configuration for Environment Variables\nDESCRIPTION: HOCON configuration equivalent to the environment variables set in the previous example.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\nlisteners.ssl.default {\n    ...\n    bind = \"127.0.0.1:8883\"\n    ssl_options {\n      ciphers = [\"TLS_AES_256_GCM_SHA384\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing EMQX Webhook with MQTTX CLI\nDESCRIPTION: Command to publish a test message using MQTTX CLI to trigger webhook events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/webhook.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Webhook\" }'\n```\n\n----------------------------------------\n\nTITLE: Querying Message Dropped During Routing Event in SQL\nDESCRIPTION: SQL statement to extract data from the '$events/message_dropped' event topic, including drop reason, message topic, QoS, EMQX node, and event timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  reason,\n  topic,\n  qos,\n  node,\n  timestamp\nFROM\n  \"$events/message_dropped\"\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Storage\nDESCRIPTION: SQL statement to select MQTT messages from topic t/# and add a timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  now_timestamp('millisecond')  as ts\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Rules in Erlang Tuple Format\nDESCRIPTION: Example of ACL rules defined in an Erlang tuple format. It includes rules for allowing specific users and IP addresses to access certain topics, denying all users from subscribing to system topics, and allowing all other operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/file.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% Allow MQTT client using username \"dashboard\"  to subscribe to \"$SYS/#\" topics\n{allow, {user, \"dashboard\"}, subscribe, [\"$SYS/#\"]}.\n\n%% Allow users with IP address \"127.0.0.1\" to publish/subscribe to topics \"$SYS/#\", \"#\"\n{allow, {ipaddr, \"127.0.0.1\"}, all, [\"$SYS/#\", \"#\"]}.\n\n%% Deny \"All Users\" subscribe to `$SYS/#`, `#` and `+/#`\n{deny, all, subscribe, [\"$SYS/#\", {eq, \"#\"}, {eq, \"+/#\"}]}.\n\n%% Allow any other publish/subscribe operation\n%% NOTE: In production, change the last rule to `{deny, all}`, and set config: `authorization.no_match = deny`\n{allow, all}.\n```\n\n----------------------------------------\n\nTITLE: Adding Node to EMQX Cluster using CLI\nDESCRIPTION: Command to join a new node to an existing EMQX cluster by specifying the target node address. This demonstrates the simplicity of horizontal scaling in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/design/clustering.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster join emqx@node1.my.net\n```\n\n----------------------------------------\n\nTITLE: Testing Two-way SSL/TLS Authentication with MQTTX CLI\nDESCRIPTION: Command to test two-way SSL/TLS authentication with MQTTX CLI. The client provides a CA certificate to verify the server's identity as well as its own certificate and private key for server verification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h localhost -p 8883 \\\n  --protocol mqtts \\\n  --ca certs/rootCA.crt \\\n  --cert certs/client-0001.crt \\\n  --key certs/client-0001.key\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Unix Timestamp in EMQX Rule Engine\nDESCRIPTION: A function introduced to convert a formatted date string to an integer timestamp. It takes three parameters: the time unit, the format string, and the input date time string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_42\n\nLANGUAGE: erlang\nCODE:\n```\ndate_to_unix_ts(TimeUnit, FormatString, InputDateTimeString)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for SCRAM Authentication\nDESCRIPTION: Shows the expected JSON response format from the HTTP server for SCRAM authentication, containing the required stored_key, server_key, and salt fields encoded in hexadecimal, along with optional fields for superuser status, client attributes, expiration time, and access control list.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/scram_restapi.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stored_key\": \"008F5E0CC6316BB172F511E93E4756EEA876B5B5125F1CD2FD69A2C30F9A0D73\",\n    \"server_key\": \"81466E185EC642AFAE1EFA75953735D6C0934D099149AAAB601D59F8F8162580\",\n    \"salt\": \"6633653634383437393466356532333165656435346432393464366165393137\"\n    \"is_superuser\": true, // options: true | false, default value: false\n    \"client_attrs\": { // optional \n        \"role\": \"admin\",\n        \"sn\": \"10c61f1a1f47\"\n    }\n    \"expire_at\": 1654254601, // optional \n    \"acl\": // optional \n    [\n        {\n            \"permission\": \"allow\",\n            \"action\": \"subscribe\",\n            \"topic\": \"eq t/1/#\",\n            \"qos\": [1]\n        },\n        {\n            \"permission\": \"deny\",\n            \"action\": \"all\",\n            \"topic\": \"t/3\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Shared Topic with MQTTX CLI\nDESCRIPTION: This command subscribes a client to a shared MQTT topic using the MQTTX CLI. The `-t` option specifies the topic, including the `$share` prefix and group name, while `-h` and `-p` specify the host and port of the MQTT broker, respectively.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-shared-subscription.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t '$share/my_group2/t/1' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Broker Configuration\nDESCRIPTION: Configuration settings for RocketMQ broker including cluster settings, topic configurations, and disk management parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\n\nbrokerIP1=change me to your real IP address\n\ndefaultTopicQueueNums=4\nautoCreateTopicEnable=true\nautoCreateSubscriptionGroup=true\n\nlistenPort=10911\ndeleteWhen=04\n\nfileReservedTime=120\nmapedFileSizeCommitLog=1073741824\nmapedFileSizeConsumeQueue=300000\ndiskMaxUsedSpaceRatio=100\nmaxMessageSize=65536\n\nbrokerRole=ASYNC_MASTER\n\nflushDiskType=ASYNC_FLUSH\n```\n\n----------------------------------------\n\nTITLE: MQTT Rule SQL for MongoDB Integration\nDESCRIPTION: SQL statements for processing MQTT messages and preparing data for MongoDB storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  mongo_date(timestamp) as timestamp,\n  json_encode(payload) as payload\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ClickHouse Database and Table for MQTT Data\nDESCRIPTION: SQL commands to create a database and table for storing MQTT messages in ClickHouse. The table includes fields for message data and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE IF NOT EXISTS mqtt_data;\nCREATE TABLE IF NOT EXISTS mqtt_data.messages (\n   data String,\n   arrived TIMESTAMP\n) ENGINE = MergeTree()\nORDER BY arrived;\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC HookProvider Service for EMQX ExHook\nDESCRIPTION: This protobuf definition specifies the gRPC service interface for the HookProvider. It includes methods for provider lifecycle and various MQTT event hooks that can be implemented to extend EMQX functionality.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/exhook.md#2025-04-20_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage emqx.exhook.v2;\n\nservice HookProvider {\n\n  rpc OnProviderLoaded(ProviderLoadedRequest) returns (LoadedResponse) {};\n\n  rpc OnProviderUnloaded(ProviderUnloadedRequest) returns (EmptySuccess) {};\n\n  rpc OnClientConnect(ClientConnectRequest) returns (EmptySuccess) {};\n\n  rpc OnClientConnack(ClientConnackRequest) returns (EmptySuccess) {};\n\n  rpc OnClientConnected(ClientConnectedRequest) returns (EmptySuccess) {};\n\n  rpc OnClientDisconnected(ClientDisconnectedRequest) returns (EmptySuccess) {};\n\n  rpc OnClientAuthenticate(ClientAuthenticateRequest) returns (ValuedResponse) {};\n\n  rpc OnClientAuthorize(ClientAuthorizeRequest) returns (ValuedResponse) {};\n\n  rpc OnClientSubscribe(ClientSubscribeRequest) returns (EmptySuccess) {};\n\n  rpc OnClientUnsubscribe(ClientUnsubscribeRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionCreated(SessionCreatedRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionSubscribed(SessionSubscribedRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionUnsubscribed(SessionUnsubscribedRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionResumed(SessionResumedRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionDiscarded(SessionDiscardedRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionTakenover(SessionTakenoverRequest) returns (EmptySuccess) {};\n\n  rpc OnSessionTerminated(SessionTerminatedRequest) returns (EmptySuccess) {};\n\n  rpc OnMessagePublish(MessagePublishRequest) returns (ValuedResponse) {};\n\n  rpc OnMessageDelivered(MessageDeliveredRequest) returns (EmptySuccess) {};\n\n  rpc OnMessageDropped(MessageDroppedRequest) returns (EmptySuccess) {};\n\n  rpc OnMessageAcked(MessageAckedRequest) returns (EmptySuccess) {};\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Dependencies on Ubuntu\nDESCRIPTION: Commands to install required dependencies for building NGINX from source on Ubuntu\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install build-essential libpcre3-dev zlib1g-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorization in EMQX 5.1\nDESCRIPTION: This snippet shows the updated configuration for HTTP-based authorization in EMQX 5.1. It uses a more structured format with nested objects for body, headers, and SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_27\n\nLANGUAGE: hocon\nCODE:\n```\n{\n    type = http\n\n    method = post\n    url = \"http://127.0.0.1:80/mqtt/acl\"\n    body {\n        username = \"${username}\"\n        clientid = \"${clientid}\"\n        password = \"${password}\"\n    }\n    headers {\n        \"Content-Type\" = \"application/x-www-form-urlencoded\"\n    }\n    request_timeout = \"5s\"\n    connect_timeout = \"5s\"\n    pool_size = 32\n    \n    enable_pipelining = 100\n    \n    ssl {\n      enable = true\n      verify = verify_peer\n    \n      keyfile = path/to/your/keyfile\n      certfile = path/to/your/certfile\n      cacertfile = path/to/your/cafile.pem\n      \n      server_name_indication = myhttp\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection and Filter Configuration for EMQX\nDESCRIPTION: This snippet shows the basic configuration parameters needed for connecting EMQX to a MongoDB collection for authorization checks, specifying the collection name and filter criteria.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mongodb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncollection = \"mqtt_acl\"\nfilter { username = \"${username}\" }\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO Example with Republishing\nDESCRIPTION: This SQL query iterates over the 'payload.sensors' array and republishes each sensor's data to a new topic.  It selects the 'clientid', 'name', and 'idx' fields from each sensor object, and uses these fields to format the republished message and topic. The example showcases how to process array data and dynamically create new messages based on each array element.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as e\nDO\n    clientid,\n    e.name as name,\n    e.idx as idx\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Redis Authentication Configuration Parameters\nDESCRIPTION: Configuration parameters for Redis authentication including password hash algorithm and query command\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/redis.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npassword_hash_algorithm {\n    name = sha256\n    salt_position = prefix\n}\n\ncmd = \"HMGET mqtt:${username} password_hash salt is_superuser\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing\nDESCRIPTION: SQL rule to select all messages from MQTT topic t/# for forwarding to RocketMQ\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Example - EMQX 5.1\nDESCRIPTION: Complete MySQL configuration example for EMQX 5.1 with updated syntax and parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_5\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = mysql\n  enable = true\n\n  server = \"127.0.0.1:3306\"\n  username = \"dbuser\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n\n  query = \"select allow as permission, access as action, topic from mqtt_acl where username = ${username} and ipaddr = ${peerhost} and clientid = ${clientid}\"\n  query_timeout = \"5s\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymysql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Round Robin Load Balancing in HAProxy for EMQX\nDESCRIPTION: This configuration sets up weighted round robin load balancing, assigning different weights to EMQX nodes to influence request distribution. Servers with higher weights receive more requests.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:1883 check weight 5\n  server emqx2 emqx2-cluster.emqx.io:1883 check weight 2\n  server emqx3 emqx3-cluster.emqx.io:1883 check weight 3\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Load Balancing Strategies\nDESCRIPTION: This section demonstrates various load balancing strategies in NGINX, including Round Robin, Weighted Round Robin, IP Hash, and Least Connections. These configurations help distribute traffic efficiently across multiple backend servers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nupstream backend_servers {\n  server emqx1-cluster.emqx.io:1883;\n  server emqx2-cluster.emqx.io:1883;\n  server emqx3-cluster.emqx.io:1883;\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nupstream backend_servers {\n  server emqx1-cluster.emqx.io:1883 weight=3;\n  server emqx2-cluster.emqx.io:1883 weight=2;\n  server emqx3-cluster.emqx.io:1883 weight=1;\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nupstream backend_servers {\n  ip_hash;\n  server emqx1-cluster.emqx.io:1883;\n  server emqx2-cluster.emqx.io:1883;\n  server emqx3-cluster.emqx.io:1883;\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nupstream backend_servers {\n  least_conn;\n  server emqx1-cluster.emqx.io:1883;\n  server emqx2-cluster.emqx.io:1883;\n  server emqx3-cluster.emqx.io:1883;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Message Table in TDengine\nDESCRIPTION: SQL commands to create a table for storing MQTT messages with timestamp, message ID, topic, QoS, and payload fields\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_mqtt_msg (\n  ts timestamp,\n  msgid NCHAR(64),\n  mqtt_topic NCHAR(255),\n  qos TINYINT,\n  payload BINARY(1024),\n  arrived timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: MySQL Authentication Query with Placeholders\nDESCRIPTION: Example SQL query using EMQX placeholders for authentication. The query demonstrates how ${username} placeholder is used to fetch password hash and salt for a specific user.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/authn.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT password_hash, salt FROM mqtt_user where username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTTX for Testing\nDESCRIPTION: This command uses MQTTX to publish a test message to the topic 't/1', which triggers the rule and sends data to the HTTP server for verification of the integration setup.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-webhook.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello HTTP Server\" }'\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message to trigger the rules\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello TDengine\" }'\n```\n\n----------------------------------------\n\nTITLE: Delayed Publish Topic Format\nDESCRIPTION: Specifies the format for delayed publish topics in EMQX. The format consists of the $delayed prefix, followed by the delay interval in seconds, followed by the actual topic name to which the message will be published.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-delayed-publish.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$delayed/{DelayInterval}/{TopicName}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for EMQX Slow Subscriptions\nDESCRIPTION: Complete markdown documentation explaining the Slow Subscriptions feature implementation, including tip notes, functionality details, configuration steps, and monitoring information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/slow-subscribers-statistics.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slow Subscriptions\n\n::: tip Note\n\nThe Slow Subscriptions feature is only available in the EMQX Enterprise edition.\n\n:::\n\nTypically, EMQX will finish the message transmission within milliseconds, affected mainly by the network. However, there are cases where the latency of subscription messages is very high on the client side. To solve this problem, EMQX provides a Slow Subscriptions feature.\n\n## How It Works\n\nEMQX will start calculating the time (delay) it takes for the message to be processed and transmitted since messages **arrive at EMQX**. \n\nIf the delay exceeds the specified threshold, EMQX will insert the corresponding **subscriber and topic** into the **slow subscriptions list** or update the existing record. \n\nIn the slow subscriptions list:\n\n- The record data are presented in descending order by the time delay and can save up to 1000 records.\n- The list records the **subscriber-topic** data rather than the messages that exceed the threshold.\n- When a record is generated, it will be inserted into the list if it is a new record. If it is an existing record, the occurrence time will be updated. In both cases, the entire list will be re-ranked.\n- After the record is generated, it will be removed from the list if it is not triggered again within the effective period (default: 300 seconds).\n\nThe definition of message transfer complete varies with the message QoS level:\n\n- QoS 0: The message is sent successfully.\n- QoS 1: EMQX receives the PUBACK packet from the client.\n- QoS 2: EMQX receives the PUBCOMP packet from the client.\n\nFactors affecting message latency:\n\n- The network between the publisher and EMQX is slow (will be available in future releases).\n- The execution speed of the Hooks is slow, which blocks message publishing, such as ACL checks, ExHooks, rule engines, etc. \n- Too many messages accumulate in the queue, resulting in significant latency. For example, PUBLISH and SUBSCRIBE share the same connection, and many PUBLISH messages are accumulated in the queue. \n- The receiving speed of the subscribers is too slow. \n\n## Enable and Configure Slow Subscriptions\n\n<!-- TODO 补充配置文件配置方式，目前该方式有 BUG 暂时不在文档中提供。 -->\n\nOn EMQX Dashboard, click **Diagnose** -> **Slow Subscriptions** from the left navigation menu. On the **Slow Subscriptions** page, click the **Enable** button.\n\nFollow the instruction below for configuration:\n\n- **Stats Threshold**:  Latency threshold for statistics, only messages information with latency exceeding the value will be collected. Minimum value: 100ms\n  **Maximum Number of Statistics**: Maximum number of records in the slow subscription statistics record table. Maximum value: 1,000\n- **Eviction Time of Record**: Eviction time of the record; will start the counting since creation of the record, and the records that are not triggered again within the specified period will be removed from the list. Default: 300s\n- **Stats Type**: Calculation methods of the latency, which are\n  - **whole**: From the time the message arrives at EMQX until the message transmission completes\n  - **internal**: From when the message arrives at EMQX until when EMQX starts delivering the message\n  - **response** : From the time EMQX starts delivering the message until the message transmission completes\n\n## Check Slow Subscriptions List\n\nThe Slow Subscriptions list contains the following fields:\n\n- **Client ID**: Client with the slow subscriptions issue\n\n- **Topic**: Topic with the slow subscriptions issue\n- **Duration**: Message latency\n- **Node**: Node with the slow subscriptions issue\n- **Updated**: Creation/update time of the record\n\nYou can click on the Client ID to view the details and troubleshoot the issue.\n```\n\n----------------------------------------\n\nTITLE: Creating Built-in Database Authentication for STOMP Gateway via HTTP API\nDESCRIPTION: HTTP API request to create a built-in database authentication for STOMP gateway. The request configures password-based authentication using SHA256 hashing algorithm with suffix salt position. The authentication is based on username as the user ID type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/stomp.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://127.0.0.1:18083/api/v5/gateway/stomp/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"backend\": \"built_in_database\",\n  \"mechanism\": \"password_based\",\n  \"password_hash_algorithm\": {\n    \"name\": \"sha256\",\n    \"salt_position\": \"suffix\"\n  },\n  \"user_id_type\": \"username\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Redis Command Template for Drop Counter\nDESCRIPTION: Redis HINCRBY command template for counting dropped messages by topic\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHINCRBY emqx_message_dropped_count ${topic} 1\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings with Direction in EMQX (3-parameter version)\nDESCRIPTION: The find function with direction parameter searches for a pattern in a string and returns the relevant part based on the search direction ('leading' or 'trailing'). 'Leading' returns everything from the first occurrence of the pattern, while 'trailing' returns from the last occurrence.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfind('Front, Middle, End', ', ', 'leading') = ', Middle, End'\nfind('Front, Middle, End', ', ', 'trailing') = ', End'\n```\n\n----------------------------------------\n\nTITLE: Creating HStreamDB Streams with TLS\nDESCRIPTION: Commands for creating and managing streams in HStreamDB using TLS connection, including creation of mqtt_connect and mqtt_message streams.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container exec -it quickstart-tls-hserver-0 bash\n# Create Stream `mqtt_connect`\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream create mqtt_connect\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_connect | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n# Create Stream `mqtt_message`\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream create mqtt_message\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_message | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n# List all Streams\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream list\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_message | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n| mqtt_connect | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Authentication Check Events\nDESCRIPTION: SQL query to extract authentication check information including client details, reason code, and user status when authentication check completes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  reason_code,\n  is_superuser,\n  is_anonymous\nFROM\n  \"$events/client_check_authn_complete\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientid\": \"c_emqx\",\n  \"username\": \"u_emqx\",\n  \"reason_code\": \"success\",\n  \"is_superuser\": true,\n  \"is_anonymous\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Gateway via HTTP API in EMQX\nDESCRIPTION: This curl command demonstrates how to configure the LwM2M Gateway using the EMQX HTTP API. It sets various parameters including XML directory, lifetime settings, and listener configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateways/lwm2m' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"lwm2m\"\n  \"xml_dir\": \"etc/lwm2m_xml/\",\n  \"qmode_time_window\": \"22s\",\n  \"lifetime_min\": \"1s\",\n  \"lifetime_max\": \"86400s\",\n  \"auto_observe\": true,\n  \"enable_stats\": true,\n  \"update_msg_publish_condition\": \"contains_object_list\",\n  \"mountpoint\": \"lwm2m/${endpoint_name}/\",\n  \"translators\": {\n    \"command\": {\"topic\": \"dn/#\", \"qos\": 0},\n    \"response\": {\"topic\": \"up/resp\", \"qos\": 0},\n    \"notify\": {\"topic\": \"up/notify\", \"qos\": 0},\n    \"register\": {\"topic\": \"up/resp\", \"qos\": 0},\n    \"update\": {\"topic\": \"up/update\", \"qos\": 0}\n  },\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"name\": \"default\",\n      \"bind\": \"5783\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000,\n    }\n  ],\n}'\n```\n\n----------------------------------------\n\nTITLE: Run EMQX Container with Volume Mounts\nDESCRIPTION: Docker command to run EMQX with volume mounts for data persistence.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx-enterprise \\\n  -p 1883:1883 -p 8083:8083 \\\n  -p 8084:8084 -p 8883:8883 \\\n  -p 18083:18083 \\\n  -v $PWD/data:/opt/emqx/data \\\n  -v $PWD/log:/opt/emqx/log \\\n  emqx/emqx-enterprise:@EE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Selecting All Fields with a WHERE Clause\nDESCRIPTION: This SQL snippet shows how to select all available fields from messages originating from any topic ('#') where the 'username' field equals 'abc'. It demonstrates filtering messages based on a specific condition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"#\" WHERE username = 'abc'\n```\n\n----------------------------------------\n\nTITLE: Running Second EMQX Node with Manual Clustering\nDESCRIPTION: Docker command to start the second EMQX node and join it to the same network as the first node\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --name emqx2 \\\n    -e \"EMQX_NODE_NAME=emqx@node2.emqx.com\" \\\n    --network emqx-bridge \\\n    --network-alias node2.emqx.com \\\n    emqx/emqx:@CE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Date to Unix Timestamp with Offset in EMQX\nDESCRIPTION: Examples of using date_to_unix_ts with offset parameter to handle datetime strings without timezone information by manually specifying the offset.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ndate_to_unix_ts('second', '+08:00', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00') = 1708671600\ndate_to_unix_ts('second', 'Z', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 07:00:00') = 1708671600\ndate_to_unix_ts('second', 14400, '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00') = 1708686000\n```\n\n----------------------------------------\n\nTITLE: TDengine Dynamic Table Name Insert Syntax in SQL\nDESCRIPTION: Example of using placeholders within table names in TDengine insert statements. This syntax demonstrates how to dynamically specify the table name using the topic value while also using placeholders for field values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\ninsert into table_${topic} values (${ts}, '${id}', '${topic}')\n```\n\n----------------------------------------\n\nTITLE: EMQX License CLI Commands\nDESCRIPTION: Command line interface commands for managing EMQX Enterprise license, including viewing license info and updating license.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/license.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl \n\n    license info             # Show license info \n    license update <License> # Update license given as a string\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Resources Write Command Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Write command setting string values for multiple resources under /31024/11/, with request ID 3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 3,\n  \"msgType\": \"write\",\n  \"data\": {\n    \"basePath\": \"/31024/11/\",\n    \"content\": [\n      {\n        \"path\": \"1\",\n        \"type\": \"String\",\n        \"value\": \"write_the_1st_value\"\n      },\n      {\n        \"path\": \"2\",\n        \"type\": \"String\",\n        \"value\": \"write_the_2nd_value\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing New SQL Functions in EMQX\nDESCRIPTION: This snippet outlines the addition of several new SQL functions including `map_keys()`, `map_values()`, `map_to_entries()`, and others to facilitate more dynamic data operations within EMQX's SQL interface. These functions enhance data manipulation abilities and improve queries involving maps and strings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n-- New SQL functions added\nmap_keys(), map_values(), map_to_entries(), join_to_string(),\njoin_to_sql_values_string(), is_null_var(), is_not_null_var()\n```\n\n----------------------------------------\n\nTITLE: EMQX Lua Hook Management Commands\nDESCRIPTION: These bash commands demonstrate various operations for managing Lua scripts in EMQX, including loading, unloading, reloading, enabling, and disabling scripts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/lang-lua.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nluahook load <Script>\nluahook unload <Script>\nluahook reload <Script>\nluahook enable <Script>\nluahook disable <Script>\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Rules via API for a Specific Client\nDESCRIPTION: Example of using cURL to create authorization rules for a specific client using the built-in database. The request creates three rules for 'client1' with different permissions for publishing and subscribing to topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mnesia.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:18083/api/v5/authorization/sources/built_in_database/clientid' \\\n  -H 'accept: */*' \\\n  -H 'Content-Type: application/json' \\\n  -d '[\n  {\n    \"clientid\": \"client1\",\n    \"rules\": [\n      {\n        \"action\": \"publish\",\n        \"permission\": \"allow\",\n        \"topic\": \"test/toopic/1\"\n      },\n      {\n        \"action\": \"subscribe\",\n        \"permission\": \"allow\",\n        \"topic\": \"test/toopic/2\"\n      },\n      {\n        \"action\": \"all\",\n        \"permission\": \"deny\",\n        \"topic\": \"eq test/#\"\n      }\n    ]\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Enabling File Transfer in EMQX Configuration\nDESCRIPTION: This snippet shows how to enable the file transfer feature in EMQX's configuration file. It enables file transfer and sets default paths for segment storage and file export.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/broker.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n  enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Joining an EMQX Node to a Cluster\nDESCRIPTION: Shows the command to join an EMQX node to an existing cluster. This command should be run on the node that is joining the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl cluster join emqx@s1.emqx.io\n```\n\n----------------------------------------\n\nTITLE: Overriding Authentication Settings in EMQX Configuration\nDESCRIPTION: Illustrates how to override the 'enable' field of the first authentication element in an array configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nauthentication  = [\n  {\n    enable = true,\n    backend = \"built_in_database\",\n    mechanism = \"password_based\"\n  }\n]\n\n# The `enable` field of the first element can be overridden in the following way:\nauthentication.1.enable = false\n```\n\n----------------------------------------\n\nTITLE: Running EMQX in Docker with named volumes\nDESCRIPTION: Recommended Docker commands to run EMQX container using named volumes for data persistence, avoiding permission issues.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker volume create --name emqx-data\nsudo docker volume create --name emqx-log\nsudo docker run -d --name emqx -p 18083:18083 -p 1883:1883 -v emqx-data:/opt/emqx/data -v emqx-log:/opt/emqx/log emqx:latest\n```\n\n----------------------------------------\n\nTITLE: NGINX Reverse Proxy Configuration for MQTT\nDESCRIPTION: NGINX configuration for load balancing MQTT traffic across multiple EMQX nodes with various server options and timeout settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstream {\n  upstream mqtt_servers {\n    # down: indicates the current server temporarily does not participate in the load balancing\n    # max_fails: the number of allowed failed requests; defaults to 1\n    # fail_timeout: the timeout for failed requests, defaults to 10s when max_fails is reached\n    # backup: when all non-backup servers are down or busy, requests go to backup servers\n\n    server emqx1-cluster.emqx.io:1883 max_fails=2 fail_timeout=10s;\n    server emqx2-cluster.emqx.io:1883 down;\n    server emqx3-cluster.emqx.io:1883 backup;\n  }\n\n  server {\n    listen 1883;\n    proxy_pass mqtt_servers;\n\n    # When enabling this option, the corresponding backend listener also needs to enable proxy_protocol\n    proxy_protocol on;\n    proxy_connect_timeout 10s;\n    # Default keep-alive time is 10 minutes\n    proxy_timeout 1800s;\n    proxy_buffer_size 3M;\n    tcp_nodelay on;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ACL File Syntax Comparison Between 4.x and 5.x\nDESCRIPTION: Comparison of ACL file syntax between EMQX 4.x and 5.x, showing changes in field names and the use of regular expressions for matching usernames.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# 4.x\n{allow, {user, \"dashboard\"}, subscribe, [\"$SYS/#\"]}.\n{allow, {ipaddr, \"127.0.0.1\"}, pubsub, [\"$SYS/#\", \"#\"]}.\n\n# 5.x\n{allow, {username, {re, \"^dashboard$\"}}, subscribe, [\"$SYS/#\"]}.\n{allow, {ipaddr, \"127.0.0.1\"}, all, [\"$SYS/#\", \"#\"]}.\n```\n\n----------------------------------------\n\nTITLE: Tracing Clients and Topics with EMQX CLI\nDESCRIPTION: The 'trace' command enables tracing of specific clients, topics, or IP addresses. It provides functionality to start, stop, and list traces on a single node.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace list\nTrace(ip_address=127.0.0.1, level=debug, destination=\"trace.log\")\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace start client emqx_c trace.log debug\ntrace emqx_c CLI-emqx_c successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace stop client emqx_c\nstop tracing clientid emqx_c successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace start topic t/1 trace.log info\ntrace t/1 CLI-t/1 successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace stop topic t/1\nstop tracing topic t/1 successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace start ip_address 127.0.0.1 trace.log debug\ntrace 127.0.0.1 CLI-127.0.0.1 successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl trace stop ip_address 127.0.0.1\nstop tracing ip_address 127.0.0.1 successfully\n```\n\n----------------------------------------\n\nTITLE: EMQX Log Configuration Example\nDESCRIPTION: Sample configuration for EMQX logging in the emqx.conf file, showing how to configure both file and console logging with different formatters and levels.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlog {\n  file {\n    default {\n      enable = true\n      formatter = text\n      level = warning\n      path = \"/Users/emqx/Downloads/emqx-560/log/emqx.log\"\n      rotation_count = 10\n      rotation_size = 50MB\n      time_offset = system\n      timestamp_format = auto\n  }\n  console {\n    formatter = json\n    level = debug\n    time_offset = system\n    timestamp_format = auto\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Processing MQTT Messages in EMQX\nDESCRIPTION: This SQL rule selects temperature, humidity, and location data from MQTT messages with the topic 't/#' for processing in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload.temp as temp,\n  payload.humidity as humidity,\n  payload.location as location\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Checking Message Discard Statistics in Redis\nDESCRIPTION: Redis command to retrieve the count of discarded messages for all topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> HGETALL emqx_message_dropped_count\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Command Template for Message Discard Statistics\nDESCRIPTION: Redis HINCRBY command template to increment a counter for discarded messages under each topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHINCRBY emqx_message_dropped_count ${topic} 1\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Snowflake Table\nDESCRIPTION: SQL query to select all records from the emqx table in Snowflake to verify data transmission from EMQX. The query returns all fields including clientid, topic, payload, and publish_received_at.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM testdatabase.public.emqx;\n```\n\n----------------------------------------\n\nTITLE: MongoDB Payload Template for MQTT Message Storage\nDESCRIPTION: This JSON template defines the structure for storing MQTT message data in MongoDB, including clientid, topic, QoS, timestamp, and payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientid\": \"${clientid}\",\n  \"topic\": \"${topic}\",\n  \"qos\": ${qos},\n  \"timestamp\": ${timestamp},\n  \"payload\": ${payload}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Storage Table in TDengine\nDESCRIPTION: SQL statement to create a table 't_mqtt_msg' for storing MQTT message data including timestamp, message ID, topic, QoS, payload, and arrival time.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_mqtt_msg (\n    ts timestamp,\n    msgid NCHAR(64),\n    mqtt_topic NCHAR(255),\n    qos TINYINT,\n    payload BINARY(1024),\n    arrived timestamp\n  );\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message that triggers the RocketMQ sink rule\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello RocketMQ\" }'\n```\n\n----------------------------------------\n\nTITLE: Inserting Client Events into Oracle Database Table in EMQX\nDESCRIPTION: SQL template for inserting client connection event data into the 't_emqx_client_events' table in Oracle Database. It uses preprocessed SQL with placeholders for event fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_emqx_client_events(clientid, event, created_at) VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') + NUMTODSINTERVAL(${timestamp}/1000, 'SECOND')\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Rebalance Status in EMQX\nDESCRIPTION: CLI command to check the status of load rebalancing in EMQX. It provides information about the rebalance state, coordinator node, donor nodes, recipient nodes, and current connection counts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance node-status\n```\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance node-status\nNode 'emqx1@127.0.0.1': rebalance coordinator\nRebalance state: evicting_conns\nCoordinator node: 'emqx1@127.0.0.1'\nDonor nodes: ['emqx2@127.0.0.1','emqx3@127.0.0.1']\nRecipient nodes: ['emqx1@127.0.0.1']\nConnection eviction rate: 5 connections/second\nSession eviction rate: 5 sessions/second\nConnection goal: 0.0\nCurrent average donor node connection count: 300.0\n```\n\n----------------------------------------\n\nTITLE: Pull EMQX Enterprise Docker Image\nDESCRIPTION: Command to pull the latest EMQX Enterprise Docker image from Docker Hub.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull emqx/emqx-enterprise:@EE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Configuring First EMQX Cluster (US East)\nDESCRIPTION: Configuration snippet for setting up cluster-us-east with cluster linking settings. Defines cluster name, remote cluster connection details, and dedicated TCP listener on port 11883.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Cluster Linking configuration\ncluster {\n  # This cluster's name\n  name = \"cluster-us-east\"\n  links = [\n    {\n      # Name of the second cluster\n      name = \"cluster-eu-west\"\n      # Endpoint of the second cluster's MQTT listener\n      server = \"emqx.us-east.myinfra.net:11883\"\n      clientid = \"clink-us-east\"\n      topics = [\"#\"]\n    }\n  ]\n}\n\n# Dedicated listener for Cluster Linking connections\nlisteners {\n  tcp.clink {\n    bind = 11883\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting User Credentials into PostgreSQL\nDESCRIPTION: SQL query to insert a new user with SHA256 hashed password and salt\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/postgresql.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO mqtt_user(username, password_hash, salt, is_superuser) VALUES ('emqx_u', '44edc2d57cde8d79c98145003e105b90a14f1460b79186ea9cfe83942fc5abb5', 'slat_foo123', true);\n```\n\n----------------------------------------\n\nTITLE: Updating Sparkplug B Payload by Adding a New Metric\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload, adds a new metric with name 'counter_group1/counter1_new' and value 42, and re-encodes the payload. It uses jq to append the new metric to the existing metrics array.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Save old metrics\n   $payload | .metrics as $old_metrics |\n   # New value\n   {\n     \"name\": \"counter_group1/counter1_new\",\n     \"int_value\": 42,\n     \"datatype\": 5\n   } as $new_value |\n   # Create new metrics array \n   ($old_metrics + [ $new_value ]) as $updated_metrics |\n   # Update payload with new metrics\n   $payload | .metrics = $updated_metrics\n   ',\n   sparkplug_decode(payload)) AS item\nDO sparkplug_encode(item) AS item \nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage for File Transfer\nDESCRIPTION: Extended EMQX configuration for enabling file transfer with S3 bucket storage, including authentication and connection settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n   enable = true\n\n   storage.local.exporter.s3 {\n      host = \"s3.us-east-1.amazonaws.com\"\n      port = 443\n\n      access_key_id = \"AKIA27EZDDM9XLINWXFE\"\n      secret_access_key = \"******\"\n\n      bucket = \"my-bucket\"\n\n      transport_options {\n         ssl.enable = true\n         connect_timeout = 15s\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Topics for MQTT Integration\nDESCRIPTION: Commands to create two Kafka topics: 'testtopic-in' for the Sink and 'testtopic-out' for the Source, using the Kafka command-line tools.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-topics.sh --create --topic testtopic-in --bootstrap-server localhost:9092\n\nbin/kafka-topics.sh --create --topic testtopic-out --bootstrap-server localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Optimizing NGINX Performance through Basic Configuration\nDESCRIPTION: This configuration snippet shows basic NGINX performance optimizations. It sets the number of worker processes to match CPU cores and increases the maximum number of simultaneous connections per worker process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nworker_processes auto;\n\nevents {\n worker_connections 20480;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avro Schema in JSON\nDESCRIPTION: This JSON snippet defines an Avro schema for a user record with name, favorite number, and favorite color fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-avro.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\":\"record\",\n  \"name\": \"myrecord1\",\n  \"fields\":[\n      {\"name\":\"name\", \"type\":\"string\"},\n      {\"name\":\"favorite_number\", \"type\":[\"int\", \"null\"]},\n      {\"name\":\"favorite_color\", \"type\":[\"string\", \"null\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Service-Level File Handle Limits\nDESCRIPTION: Configuration for setting the default file handle limits in systemd system configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDefaultLimitNOFILE=2097152\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bit Operation Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using bitand, bitnot, bitsl, bitsr, bitor, and bitxor functions for bit operations in the EMQX rule engine. These functions perform various bitwise operations on integer inputs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nbitand(10, 8) = 8\nbitand(-10, -8) = -16\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitnot(10) = -11\nbitnot(-12) = 11\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitsl(8, 2) = 32\nbitsl(-8, 2) = -32\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitsr(8, 2) = 2\nbitsr(8, 4) = 0\nbitsr(-8, 2) = -2\nbitsr(-8, 6) = -1\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitor(10, 8) = 10\nbitor(-10, -8) = -2\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitxor(10, 8) = 2\nbitxor(-10, -8) = 14\n```\n\n----------------------------------------\n\nTITLE: SQL Query for RabbitMQ Source Metadata\nDESCRIPTION: SQL query example demonstrating how to access RabbitMQ source metadata including queue, exchange, and routing_key in rule engine processing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect *, \n     queue as payload.queue, exchange as payload.exchange, routing_key as payload.routing_key\nfrom \n     \"$bridges/rabbitmq:test\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topics on Different EMQX Nodes\nDESCRIPTION: MQTTX CLI commands to subscribe to topics on different EMQX nodes for demonstrating distributed tracing. These commands connect to different ports representing different nodes in the EMQX cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/trace/test -h localhost -p 1883\n```\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/trace/test -h localhost -p 1884\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Cluster Status\nDESCRIPTION: Command to check the current status of the EMQX cluster and view connected nodes\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it emqx1 emqx ctl cluster status\nCluster status: #{running_nodes =>\n                    ['emqx@node1.emqx.com','emqx@node2.emqx.com'],\n                stopped_nodes => []}\n```\n\n----------------------------------------\n\nTITLE: Unix Timestamp to Formatted Date Conversion in EMQX\nDESCRIPTION: Examples of using format_date to convert Unix timestamps to formatted datetime strings with various time units, offsets, and format specifications.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nformat_date('millisecond', '+08:00', '%Y-%m-%d %H:%M:%S.%6N%z', 1708933353472) = '2024-02-26 15:42:33.472000+0800'\nformat_date('millisecond', '+08:00', '%Y-%m-%d %H:%M:%S.%6N%:z', 1708933353472) = '2024-02-26 15:42:33.472000+08:00'\nformat_date('millisecond', '+08:20:30', '%Y-%m-%d %H:%M:%S.%3N%::z', 1708933353472) = '2024-02-26 16:03:03.472+08:20:30'\nformat_date('millisecond', 'Z', '%Y-%m-%d %H:%M:%S.%3N%:z', 1708933353472) = '2024-02-26 07:42:33.472+08:00'\nformat_date('millisecond', 28800, '%Y-%m-%d %H:%M:%S.%3N%:z', 1708933353472) = '2024-02-26 15:42:33.472+08:00'\n```\n\n----------------------------------------\n\nTITLE: Configuring Datalayers Sink using InfluxDB Line Protocol in EMQX\nDESCRIPTION: InfluxDB Line Protocol format for specifying how data should be written to Datalayers. It defines the measurement, tags, fields, and timestamp for the data points.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndevices,clientid=${clientid} temp=${payload.temp},hum=${payload.hum},precip=${payload.precip}i ${timestamp}\n```\n\n----------------------------------------\n\nTITLE: EMQX Lua Hook Management Commands\nDESCRIPTION: Set of commands for managing Lua scripts in EMQX, including loading, unloading, reloading, enabling, and disabling scripts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/lang-lua.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nluahook load <Script>\n```\n\nLANGUAGE: bash\nCODE:\n```\nluahook unload <Script>\n```\n\nLANGUAGE: bash\nCODE:\n```\nluahook reload <Script>\n```\n\nLANGUAGE: bash\nCODE:\n```\nluahook enable <Script>\n```\n\nLANGUAGE: bash\nCODE:\n```\nluahook disable <Script>\n```\n\n----------------------------------------\n\nTITLE: LwM2M Register Message Payload Format\nDESCRIPTION: This code shows the JSON format of the MQTT payload for a LwM2M Register message.  It includes fields for endpoint name, version, lifetime, binding, and object list.  This message is sent by the LwM2M client to register with the server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"register\",\n  \"data\": {\n    \"ep\": {?EndpointName},\n    \"lwm2m\": {?Version},\n    \"lt\": {?LifeTime},\n    \"b\": {?Binding},\n    \"objectList\": {?ObjectList}\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"register\",\n  \"data\": {\n    \"objectList\": [\"/1/0\", \"/2/0\", \"/3/0\", \"/4/0\", \"/5/0\", \"/6/0\", \"/7/0\"],\n    \"lwm2m\": \"1.0\",\n    \"lt\": 300,\n    \"ep\": \"testlwm2mclient\",\n    \"b\": \"U\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Authentication Query Statement\nDESCRIPTION: SQL query template for retrieving user authentication information from the database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/postgresql.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nquery = \"SELECT password_hash, salt, is_superuser FROM mqtt_user WHERE username = ${username} LIMIT 1\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Server Key Pair using OpenSSL\nDESCRIPTION: This command generates a 2048-bit RSA key pair for the server. The private key `server.key` is used to create the Certificate Signing Request (CSR).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"openssl genrsa -out server.key 2048\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authorizer in EMQX\nDESCRIPTION: Example configuration for setting up a MySQL authorizer in EMQX, specifying database connection details and the SQL query to retrieve permission rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/authz.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n\n    type = mysql\n    database = \"mqtt\"\n    username = \"root\"\n    password = \"public\"\n\n    query = \"SELECT permission, action, topic FROM mqtt_acl WHERE username = ${username}\"\n    server = \"10.12.43.12:3306\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX with Base HOCON File\nDESCRIPTION: This snippet describes the new configuration file 'etc/base.hocon' introduced to enhance configuration management. It outlines the updated configuration precedence order, from top to bottom, improving clarity and consistency in configuration handling.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_6\n\nLANGUAGE: HOCON\nCODE:\n```\n1. Environment variables\n2. etc/emqx.conf\n3. data/configs/cluster.hocon \n4. etc/base.hocon\n```\n\n----------------------------------------\n\nTITLE: Configuring CoAP Gateway via Configuration File\nDESCRIPTION: HOCON configuration for CoAP gateway with UDP listener, connection settings, and listener parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/coap.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway.coap {\n\n  mountpoint = \"coap/\"\n\n  connection_required = false\n\n  listeners.udp.default {\n    bind = \"5683\"\n    max_connections = 1024000\n    max_conn_rate = 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT-SN Gateway via HTTP API in EMQX\nDESCRIPTION: Example of using curl command to configure MQTT-SN gateway through EMQX's HTTP API. The request enables the gateway with a UDP listener on port 1884 and sets basic configuration parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/mqttsn.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateways/mqttsn' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"mqttsn\",\n  \"enable\": true,\n  \"gateway_id\": 1,\n  \"mountpoint\": \"mqttsn/\",\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"bind\": \"1884\",\n      \"name\": \"default\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Inserting MQTT Messages into Microsoft SQL Server Table in EMQX\nDESCRIPTION: SQL template for inserting MQTT message data into the 'dbo.t_mqtt_msg' table in Microsoft SQL Server. Includes fields for message ID, topic, QoS, and payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ninsert into dbo.t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )\n```\n\nLANGUAGE: sql\nCODE:\n```\ninsert into dbo.t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, CONVERT(NVARCHAR(100), ${payload}) )\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Zones in EMQX Configuration\nDESCRIPTION: Demonstrates how to create custom zones with specific MQTT and session configurations, and how to associate a listener with a custom zone.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nzones {\n  # Multiple zones can be defined\n  my_zone1 {\n    # Zones share the same configuration schema as the global configurations\n    mqtt {\n      # Allow a larger packet size for connections in this zone\n      max_packet_size = 10M\n    }\n    force_shutdown {\n      # Configuration specific to this zone\n      ...\n    }\n    durable_sessions {\n      # Enable durable storage for sessions in this zone\n      enable = true\n      ...\n    }\n  }\n  my_zone2 {\n    ...\n  }\n}\n\nlisteners.tcp.default {\n    bind = 1883\n    zone = my_zone1\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SQL SELECT Statement\nDESCRIPTION: This SQL statement demonstrates the fundamental structure for selecting data from a topic. It selects specific fields from a message source based on a specified condition, utilizing the FROM, SELECT, and WHERE clauses.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT <字段名> FROM <主题> [WHERE <条件>]\n```\n\n----------------------------------------\n\nTITLE: Schema Decoding Function Call in Erlang\nDESCRIPTION: Basic function signature for decoding binary data using a schema into Map format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nschema_decode(SchemaName, Bytes) -> Map\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Access Control in EMQX Plugin\nDESCRIPTION: Erlang code implementing custom access control logic for client authentication and authorization in an EMQX plugin.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% Only allow connections with client IDs that match any of the characters: A-Z, a-z, 0-9, and underscore.\non_client_authenticate(_ClientInfo = #{clientid := ClientId}, Result, _Env) ->\n  case re:run(ClientId, \"^[A-Za-z0-9_]+$\", [{capture, none}]) of\n    match -> {ok, Result};\n    nomatch -> {stop, {error, banned}}\n  end.\n%% Clients can only subscribe to topics formatted as /room/{clientid}, but can send messages to any topics.\non_client_authorize(_ClientInfo = #{clientid := ClientId}, subscribe, Topic, Result, _Env) ->\n  case emqx_topic:match(Topic, <<\"/room/\", ClientId/binary>>) of\n    true -> {ok, Result};\n    false -> stop\n  end;\non_client_authorize(_ClientInfo, _Pub, _Topic, Result, _Env) -> {ok, Result}.\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in Replica Set Mode\nDESCRIPTION: Configuration example for connecting EMQX to a MongoDB replica set for authentication, including multiple servers and replica set name.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mongodb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = mongodb\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n  }\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = rs\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n  replica_set_name = \"rs0\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: EMQX MySQL Authorizer Configuration Sample\nDESCRIPTION: Example configuration for setting up a MySQL-based authorizer in EMQX. This includes database connection details and the SQL query used to retrieve authorization rules based on the username.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mysql.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = mysql\n\n  database = \"mqtt\"\n  username = \"root\"\n  password = \"public\"\n  server = \"127.0.0.1:3306\"\n  query = \"SELECT permission, action, topic FROM mqtt_acl WHERE username = ${username}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for HStreamDB TCP Service\nDESCRIPTION: This YAML configuration sets up a single-node HStreamDB TCP service with ZooKeeper and HStore components. It defines network settings, volume mappings, and startup commands for each service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  hserver:\n    image: hstreamdb/hstream:v0.17.0\n    container_name: quickstart-tcp-hserver\n    depends_on:\n      - zookeeper\n      - hstore\n    ports:\n      - \"127.0.0.1:6570:6570\"\n    expose:\n      - 6570\n    networks:\n      - quickstart-tcp\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /tmp:/tmp\n      - data_store:/data/store\n    command:\n      - bash\n      - \"-c\"\n      - |\n        set -e\n        /usr/local/script/wait-for-storage.sh hstore 6440 zookeeper 2181 600 \\\n        /usr/local/bin/hstream-server \\\n        --bind-address 0.0.0.0 --port 6570 \\\n        --internal-port 6571 \\\n        --server-id 100 \\\n        --seed-nodes \"$$(hostname -I | awk '{print $$1}'):6571\" \\\n        --advertised-address $$(hostname -I | awk '{print $$1}') \\\n        --metastore-uri zk://zookeeper:2181 \\\n        --store-config /data/store/logdevice.conf \\\n        --store-admin-host hstore --store-admin-port 6440 \\\n        --store-log-level warning \\\n        --io-tasks-path /tmp/io/tasks \\\n        --io-tasks-network quickstart-tcp\n\n  hstore:\n    image: hstreamdb/hstream:v0.17.0\n    container_name: quickstart-tcp-hstore\n    networks:\n      - quickstart-tcp\n    volumes:\n      - data_store:/data/store\n    command:\n      - bash\n      - \"-c\"\n      - |\n        set -ex\n        # N.B. \"enable-dscp-reflection=false\" is required for linux kernel which\n        # doesn't support dscp reflection, e.g. centos7.\n        /usr/local/bin/ld-dev-cluster --root /data/store \\\n        --use-tcp --tcp-host $$(hostname -I | awk '{print $$1}') \\\n        --user-admin-port 6440 \\\n        --param enable-dscp-reflection=false \\\n        --no-interactive\n\n  zookeeper:\n    image: zookeeper:3.8.1\n    container_name: quickstart-tcp-zk\n    expose:\n      - 2181\n    networks:\n      - quickstart-tcp\n    volumes:\n      - data_zk_data:/data\n      - data_zk_datalog:/datalog\n\nnetworks:\n  quickstart-tcp:\n    name: quickstart-tcp\n\nvolumes:\n  data_store:\n    name: quickstart_tcp_data_store\n  data_zk_data:\n    name: quickstart_tcp_data_zk_data\n  data_zk_datalog:\n    name: quickstart_tcp_data_zk_datalog\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Permission Data for MQTT User Subscription\nDESCRIPTION: Demonstrates how to add permission data in Redis for a user to subscribe to a specific topic using HSET command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/1 subscribe\n```\n\n----------------------------------------\n\nTITLE: Running LocalStack Docker Image for Amazon Kinesis Emulation\nDESCRIPTION: Commands to start a LocalStack Docker container for emulating Amazon Kinesis Data Streams locally, and accessing the container's shell.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To start the LocalStack docker image locally\ndocker run --name localstack -p '4566:4566' -e 'KINESIS_LATENCY=0' -d localstack/localstack:2.1\n\n# Access the container\ndocker exec -it localstack bash\n```\n\n----------------------------------------\n\nTITLE: Rule Engine SQL with FOREACH Example\nDESCRIPTION: SQL example demonstrating the FOREACH functionality in EMQX rule engine. Shows how to iterate over elements in an array and access variables in the DO clause.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH payload.date as date, payload.array as elem\nDO date, elem\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Compression and Decompression Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using gunzip, gzip, unzip, zip, zip_compress, and zip_uncompress functions for compression and decompression operations in the EMQX rule engine. These functions handle various compression formats and algorithms.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ngunzip(hexstr2bin('1F8B0800000000000013CB48CDC9C9070086A6103605000000')) = 'hello'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(gzip('hello')) = '1F8B0800000000000013CB48CDC9C9070086A6103605000000'\n```\n\nLANGUAGE: bash\nCODE:\n```\nunzip(hexstr2bin('CB48CDC9C90700')) = 'hello'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip('hello')) = 'CB48CDC9C90700'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip_compress('hello')) = '789CCB48CDC9C90700062C0215'\n```\n\nLANGUAGE: bash\nCODE:\n```\nzip_uncompress(hexstr2bin('789CCB48CDC9C90700062C0215')) = 'hello'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Encoding Messages to Avro\nDESCRIPTION: This SQL rule encodes JSON messages to Avro format using the 'avro_user' schema for messages received on the 'avro_in' topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-avro.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  schema_encode('avro_user', json_decode(payload)) as avro_user\nFROM\n  \"avro_in\"\n```\n\n----------------------------------------\n\nTITLE: Creating Message Storage Table in PostgreSQL\nDESCRIPTION: SQL statement to create a table for storing MQTT message data including client ID, topic, payload, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_mqtt_msg (\n  id SERIAL primary key,\n  msgid character varying(64),\n  sender character varying(64),\n  topic character varying(255),\n  qos integer,\n  retain integer,\n  payload text,\n  arrived timestamp without time zone\n);\n```\n\n----------------------------------------\n\nTITLE: Date to Unix Timestamp Conversion in EMQX\nDESCRIPTION: Examples of using date_to_unix_ts to parse datetime strings in specified formats and convert them to Unix timestamps in various time units.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ndate_to_unix_ts('second', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00+08:00') = 1708671600\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Redis Authorizer for Single Redis Instance\nDESCRIPTION: Configuration example for connecting EMQX to a single Redis instance for authorization checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = redis\n\n    redis_type = single\n    server = \"127.0.0.1:6379\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    database = 1\n    password = public\n    server = \"127.0.0.1:6379\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Will Messages with MQTTX CLI\nDESCRIPTION: Commands for testing MQTT will message functionality using MQTTX CLI. Shows how to connect with a will message configuration and subscribe to receive the will message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/explore-mqtt.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mqttx conn -h 'localhost' -p 1883 --will-topic 't/1' --will-message 'A will message from MQTTX CLI'\nmqttx sub -t 't/1' -h 'localhost' -p 1883 -v\n```\n\n----------------------------------------\n\nTITLE: Replica Set MongoDB Authorizer Configuration for EMQX\nDESCRIPTION: Configuration example for connecting EMQX to a MongoDB replica set for authorization. Includes multiple server addresses, replica set name, collection details, and authentication credentials.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mongodb.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = mongodb\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = rs\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n  replica_set_name = \"rs0\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sensor Data Table in TimescaleDB\nDESCRIPTION: SQL commands to create a hypertable for storing sensor data with timestamp, location, temperature, and humidity fields\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sensor_data (\n    time        TIMESTAMPTZ       NOT NULL,\n    location    TEXT              NOT NULL,\n    temperature DOUBLE PRECISION  NULL,\n    humidity    DOUBLE PRECISION  NULL\n);\n\nSELECT create_hypertable('sensor_data', 'time');\n```\n\n----------------------------------------\n\nTITLE: MQTT SSL Reverse Proxy Configuration\nDESCRIPTION: HAProxy configuration for SSL-enabled MQTT reverse proxy with TLS termination.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n \n  # Adding send-proxy will pass the real IP to EMQX, and the corresponding backend listener needs to enable proxy_protocol\n  server emqx1 emqx1-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n  server emqx2 emqx2-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n  server emqx3 emqx3-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n\nfrontend mqtt_tls_frontend\n  bind *:8883 ssl crt /etc/haproxy/certs/server.pem \n  # Mutual authentication\n  # bind *:8883 ssl ca-file /etc/haproxy/certs/cacert.pem crt /etc/haproxy/certs/server.pem verify required\n  mode tcp\n  default_backend mqtt_backend\n```\n\n----------------------------------------\n\nTITLE: Running EMQX Docker Container with Persistent Storage and Fixed Host\nDESCRIPTION: Docker command for running an EMQX container with data persistence and a fixed host identity. This prevents data loss during container restarts by mounting a data volume and setting a fixed network alias.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 18083:18083 -p 1883:1883 -e EMQX_HOST=alias-for-emqx --network example --network-alias alias-for-emqx --mount type=bind,source=/tmp/emqx,target=/opt/emqx/data emqx:5.8.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Second EMQX Cluster (EU West)\nDESCRIPTION: Configuration snippet for setting up cluster-eu-west with symmetrical cluster linking settings. Mirrors the US East configuration with appropriate endpoint and client ID changes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Cluster Linking configuration\ncluster {\n  name = \"cluster-eu-west\"\n  links = [\n    {\n      name = \"cluster-us-east\"\n      server = \"emqx.eu-west.myinfra.net:11883\"\n      clientid = \"clink-eu-west\"\n      topics = [\"#\"]\n    }\n  ]\n}\n\n# Dedicated listener for Cluster Linking connections\nlisteners {\n  tcp.clink {\n    bind = 11883\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Permission Data with QoS Levels for MQTT User Subscription\nDESCRIPTION: Shows how to add permission data in Redis for a user to subscribe to a topic with specific QoS levels using HSET command and JSON string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/2 '{ \"action\": \"subscribe\", \"qos\": [1, 2] }'\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from MQTT Bridge Source in SQL\nDESCRIPTION: This SQL query selects all data from the MQTT bridge source named 'my_source'. It's used in an EMQX rule to process data received from an external MQTT service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$bridges/mqtt:my_source\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Over QUIC/UDP Listener in YAML\nDESCRIPTION: YAML configuration for setting up an MQTT over QUIC UDP listener. It includes settings for TLS ciphers, SSL options, listener enable/disable, binding, connection limits, authentication, and rate limiting.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners.quic.$name:\n  ciphers:\n    - \"TLS_AES_256_GCM_SHA384\"\n    - \"TLS_AES_128_GCM_SHA256\"\n    - \"TLS_CHACHA20_POLY1305_SHA256\"\n  ssl_options:\n    cacertfile: \"${EMQX_ETC_DIR}/certs/cacert.pem\"\n    certfile: \"${EMQX_ETC_DIR}/certs/cert.pem\"\n    keyfile: \"${EMQX_ETC_DIR}/certs/key.pem\"\n    verify: verify_none\n  enable: true\n  bind: 14567\n  acceptors: 16\n  max_connections: infinity\n  mountpoint: \"\"\n  enable_authn: true\n  max_conn_rate: \n  messages_rate: \n  bytes_rate: \n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Protocol for EMQX TCP Listener\nDESCRIPTION: This snippet shows how to enable Proxy Protocol for an EMQX TCP listener on port 1883. It sets the binding address, maximum connections, and enables the proxy protocol.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.tcp.default {\n  bind = \"0.0.0.0:1883\"\n  max_connections = 1024000\n\n  proxy_protocol = true\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding in EMQX\nDESCRIPTION: Examples of using base64_encode to convert strings or binary data to Base64 format for transmission or storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nbase64_encode('hello') = 'aGVsbG8='\nbase64_encode(hexstr2bin('CB48CD')) = 'y0jN'\n```\n\n----------------------------------------\n\nTITLE: Cassandra CQL Insert Template\nDESCRIPTION: CQL template for inserting MQTT message data into Cassandra table mqtt_msg, including message ID, topic, QoS, payload, and timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ninsert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, ${timestamp})\n```\n\n----------------------------------------\n\nTITLE: Cluster Link Status Response Format in EMQX API\nDESCRIPTION: Example JSON response from the EMQX REST API when retrieving cluster link status. The response shows details such as server address, subscribed topics, overall status, and node-specific status information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"server\": \"broker.emqx.io:1883\",\n  \"topics\": [\"t/#\"],\n  \"status\": \"running\",\n  \"node_status\": [\n    {\"node\": \"emqx@127.0.0.1\", \"status\": \"running\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend Round Robin Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend using the round robin load balancing strategy. Requests are distributed sequentially to each server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:1883 check\n  server emqx2 emqx2-cluster.emqx.io:1883 check\n  server emqx3 emqx3-cluster.emqx.io:1883 check\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Message Table in Microsoft SQL Server\nDESCRIPTION: This SQL command creates a table named 't_mqtt_msg' for storing MQTT messages. It includes columns for message ID, topic, QoS, payload, and arrival time.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE dbo.t_mqtt_msg (id int PRIMARY KEY IDENTITY(1000000001,1) NOT NULL,\n                               msgid   VARCHAR(64) NULL,\n                               topic   VARCHAR(100) NULL,\n                               qos     tinyint NOT NULL DEFAULT 0,\n                               payload VARCHAR(100) NULL,\n                               arrived DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Secrets in EMQX Bridge\nDESCRIPTION: This enhancement introduces the ability to securely store sensitive authentication fields, such as passwords, tokens, and keys, in files within the file system. These secrets can then be referenced in bridge configurations using the `file://` prefix, improving the security of sensitive data handling in bridge configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"file://\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization in EMQX Configuration File\nDESCRIPTION: General configuration structure for authorization in the EMQX configuration file, including sources, no_match behavior, deny_action, and cache settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/authz.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nauthorization {\n  sources = [\n    { ...   },\n    { ...   }\n  ]\n  no_match = allow\n  deny_action = ignore\n  cache {\n    max_size = 32\n    excludes = [\"t/1\", \"t/2\"]\n    ttl = 1m\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running EMQX from Source\nDESCRIPTION: This snippet shows the commands to clone the EMQX repository, compile the source code, and run EMQX. It assumes the user is inside the EMQX Builder Docker container.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-source.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# docker exec -it emqx-builder bash\ngit clone https://github.com/emqx/emqx.git\ncd emqx\nmake\n_build/emqx/rel/emqx/bin/emqx console\n```\n\n----------------------------------------\n\nTITLE: Extracting Text with Regular Expression Capture Groups in EMQX\nDESCRIPTION: The regex_extract function searches for regular expression patterns with capture groups and returns an array of captured values. It returns an empty array if no matches or captures are found. This function was introduced in EMQX v5.7.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nregex_extract('Number: 12345', '(\\d+)') -> ['12345']\nregex_extract('Hello, world!', '(\\w+).*\\s(\\w+)') -> ['Hello', 'world']\nregex_extract('No numbers here!', '(\\d+)') -> []\nregex_extract('Date: 2021-05-20', '(\\d{4})-(\\d{2})-(\\d{2})') -> ['2021', '05', '20']\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Subscription in EMQX Configuration File\nDESCRIPTION: Configuration snippet for enabling exclusive subscription feature in the EMQX broker through the etc/emqx.conf file. Setting mqtt.exclusive_subscription.enable to true activates this feature.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-exclusive-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt.exclusive_subscription {\n    enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python HTTP Server Dependencies\nDESCRIPTION: Shell commands for installing Flask dependency and starting the HTTP server for webhook integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/webhook.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install flask dependency\npip install flask\n\n# Start Service\npython3 http_server.py\n```\n\n----------------------------------------\n\nTITLE: SQL Rule with Environment Variable for Kafka Topic\nDESCRIPTION: SQL statement demonstrating how to use environment variables to dynamically set Kafka topics using the getenv function.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  getenv('KAFKA_TOPIC') as kafka_topic,\n  payload\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Authentication Document in MongoDB\nDESCRIPTION: Example MongoDB query to insert an authentication document for a user with username, password hash, salt, and superuser flag.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mongodb.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndb.mqtt_user.insertOne(\n  {\n      \"username\": \"emqx_u\",\n      \"salt\": \"slat_foo123\",\n      \"is_superuser\": true,\n      \"password_hash\": \"44edc2d57cde8d79c98145003e105b90a14f1460b79186ea9cfe83942fc5abb5\"\n  }\n);\n{\n  \"acknowledged\" : true,\n  \"insertedId\" : ObjectId(\"631989e20a33e26b05b15abe\")\n}\n```\n\n----------------------------------------\n\nTITLE: EMQX License Configuration File Settings\nDESCRIPTION: Configuration file settings for EMQX Enterprise license including license key and watermark limits for connection quota usage. The configuration can be reloaded using the emqx ctl license reload command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/license.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlicense {\n    ## License Key\n    key = \"MjIwMTExCjAKMTAKRXZhbHVhdGlvbgpjb250YWN0QGVtcXguaW8KZGVmYXVsdAoyMDIzMDEwOQoxODI1CjEwMAo=.MEUCIG62t8W15g05f1cKx3tA3YgJoR0dmyHOPCdbUxBGxgKKAiEAhHKh8dUwhU+OxNEaOn8mgRDtiT3R8RZooqy6dEsOmDI=\"\n    ## Low watermark limit below which license connection quota usage alarms are deactivated\n    connection_low_watermark = \"75%\"\n\n    ## High watermark limit above which license connection quota usage alarms are activated\n    connection_high_watermark = \"80%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Listener in EMQX\nDESCRIPTION: This snippet shows the configuration for an SSL listener on port 8883 with SSL options. It includes settings for certificate files, verification, and maximum connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/listener.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.ssl.default {\n  bind = \"0.0.0.0:8883\"\n  max_connections = 1024000\n  ssl_options {\n    cacertfile = \"etc/certs/cacert.pem\"\n    certfile = \"etc/certs/cert.pem\"\n    keyfile = \"etc/certs/key.pem\"\n    verify = verify_none\n    fail_if_no_peer_cert = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to EMQX and Publishing Messages with Paho C SDK\nDESCRIPTION: This code demonstrates how to create an MQTT client, connect to the EMQX broker, publish a message, and disconnect using the Eclipse Paho C SDK. It includes error handling and uses both synchronous and asynchronous APIs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/c.md#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n\n#include \"MQTTClient.h\"\n\n#define ADDRESS     \"tcp://broker.emqx.io:1883\"\n#define CLIENTID    \"emqx_test\"\n#define TOPIC       \"testtopic/1\"\n#define PAYLOAD     \"Hello World!\"\n#define QOS         1\n#define TIMEOUT     10000L\n\nint main(int argc, char* argv[])\n{\n    MQTTClient client;\n    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;\n    MQTTClient_message pubmsg = MQTTClient_message_initializer;\n    MQTTClient_deliveryToken token;\n    int rc;\n\n    MQTTClient_create(&client, ADDRESS, CLIENTID,\n        MQTTCLIENT_PERSISTENCE_NONE, NULL);\n  \n    // MQTT Connection parameters\n    conn_opts.keepAliveInterval = 20;\n    conn_opts.cleansession = 1;\n\n    if ((rc = MQTTClient_connect(client, &conn_opts)) != MQTTCLIENT_SUCCESS)\n    {\n        printf(\"Failed to connect, return code %d\\n\", rc);\n        exit(-1);\n    }\n  \n    // Publish message\n    pubmsg.payload = PAYLOAD;\n    pubmsg.payloadlen = strlen(PAYLOAD);\n    pubmsg.qos = QOS;\n    pubmsg.retained = 0;\n    MQTTClient_publishMessage(client, TOPIC, &pubmsg, &token);\n    printf(\"Waiting for up to %d seconds for publication of %s\\n\"\n            \"on topic %s for client with ClientID: %s\\n\",\n            (int)(TIMEOUT/1000), PAYLOAD, TOPIC, CLIENTID);\n    rc = MQTTClient_waitForCompletion(client, token, TIMEOUT);\n    printf(\"Message with delivery token %d delivered\\n\", token);\n  \n    // Disconnect\n    MQTTClient_disconnect(client, 10000);\n    MQTTClient_destroy(&client);\n    return rc;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Transfer Settings in EMQX\nDESCRIPTION: This configuration sets timeouts for different file transfer operations to optimize performance and prevent excessive client waiting. It includes timeouts for initialization, segment storage, and file assembly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/broker.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n    enable = true\n    init_timeout = \"10s\"\n    store_segment_timeout = \"10s\"\n    assemble_timeout = \"60s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Credentials in LDIF Format for EMQX Authentication\nDESCRIPTION: Sample LDAP credentials in LDIF format that create an organization, organizational unit, and three MQTT users with different password hashing algorithms (SHA, SSHA, MD5). The third user is designated as a superuser.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/ldap.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n## create organization: emqx.io\ndn:dc=emqx,dc=io\nobjectclass: top\nobjectclass: dcobject\nobjectclass: organization\ndc:emqx\no:emqx,Inc.\n\n## create organization unit: testdevice.emqx.io\ndn:ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectclass:organizationalUnit\nou:testdevice\n\n## create user=mqttuser0001,\n#         password=mqttuser0001,\n#         passhash={SHA}mlb3fat40MKBTXUVZwCKmL73R/0=\n#         base64passhash=e1NIQX1tbGIzZmF0NDBNS0JUWFVWWndDS21MNzNSLzA9\ndn:uid=mqttuser0001,ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectClass: mqttUser\nuid: mqttuser0001\nuserPassword:: e1NIQX1tbGIzZmF0NDBNS0JUWFVWWndDS21MNzNSLzA9\n\n## create user=mqttuser0002\n#         password=mqttuser0002,\n#         passhash={SSHA}n9XdtoG4Q/TQ3TQF4Y+khJbMBH4qXj4M\n#         base64passhash=e1NTSEF9bjlYZHRvRzRRL1RRM1RRRjRZK2toSmJNQkg0cVhqNE0=\ndn:uid=mqttuser0002,ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectClass: mqttUser\nuid: mqttuser0002\nuserPassword:: e1NTSEF9bjlYZHRvRzRRL1RRM1RRRjRZK2toSmJNQkg0cVhqNE0=\n\n## create a superuser mqttuser0003\n#         password=mqttuser0003,\n#         passhash={MD5}ybsPGoaK3nDyiQvveiCOIw==\n#         base64passhash=e01ENX15YnNQR29hSzNuRHlpUXZ2ZWlDT0l3PT0=\ndn:uid=mqttuser0003,ou=testdevice,dc=emqx,dc=io\nobjectClass: top\nobjectClass: mqttUser\nuid: mqttuser0003\nisSuperuser: TRUE\nuserPassword:: e01ENX15YnNQR29hSzNuRHlpUXZ2ZWlDT0l3PT0=\n```\n\n----------------------------------------\n\nTITLE: 启用 EMQX 会话持久化功能\nDESCRIPTION: 在 EMQX 配置文件中添加以下配置以启用会话持久化功能。需要重启 EMQX 以应用配置。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/durability/durability_introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndurable_sessions {\n  enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Delayed Messages with MQTTX CLI\nDESCRIPTION: Command to publish a message to topic 't/1' with a 5-second delay using MQTTX CLI. The message will be delivered to subscribers of 't/1' after the specified delay period.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-delayed-publish.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t \"\\$delayed/5/t/1\" -m \"Hello Delayed msg\"\n```\n\n----------------------------------------\n\nTITLE: Single Mode MongoDB Authorizer Configuration for EMQX\nDESCRIPTION: Configuration example for connecting EMQX to a single MongoDB server for authorization. Specifies collection name, filter criteria, server address, database name, and authentication credentials.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mongodb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = mongodb\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Listener via HTTP API\nDESCRIPTION: Example of deleting an EMQX listener named 'demo' using the HTTP API. This completely removes the listener configuration from the EMQX broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'DELETE' \\\n     'http://127.0.0.1:18083/api/v5/listeners/tcp%3Ademo' \\\n     -H 'accept: */*'\n```\n\n----------------------------------------\n\nTITLE: MQTT Bridge Configuration in EMQX\nDESCRIPTION: Shows how to configure an MQTT bridge with connection details, direction, and message handling parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nbridges.mqtt.my_egress_mqtt_bridge {\n    connector = {\n        server = \"broker.EMQX.io:1883\"\n        username = \"username1\"\n        password = \"\"\n        ssl.enable = false\n    }\n\n    direction = egress\n\n    remote_topic = \"from_emqx/${topic}\"\n    remote_qos = \"${qos}\"\n    payload = \"${payload}\"\n    retain = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TDengine Database in Cloud Console\nDESCRIPTION: SQL commands to create and select a new database named 'mqtt' in TDengine Cloud.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# Create and select database\n\nCREATE DATABASE mqtt;\n\nuse mqtt;\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Plus for MQTT Sticky Session Load Balancing\nDESCRIPTION: This NGINX Plus configuration implements sticky session load balancing for MQTT connections. It uses the client ID to consistently route clients to the same backend server, improving efficiency for frequently reconnecting clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmqtt_preread on;\n\nupstream backend_servers {\n    hash $mqtt_preread_clientid consistent;\n    server emqx1-cluster.emqx.io:1883;\n    server emqx2-cluster.emqx.io:1883;\n    server emqx3-cluster.emqx.io:1883;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Cluster Status in Different Formats\nDESCRIPTION: Check the status of the EMQX cluster, displaying running and stopped nodes in either plain text or JSON format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster status\nCluster status: #{running_nodes => ['emqx@127.0.0.1'],stopped_nodes => []}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster status --json\n{\n  \"stopped_nodes\" : [\n\n  ],\n  \"running_nodes\" : [\n    \"emqx@127.0.0.1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Source Rule SQL\nDESCRIPTION: This SQL snippet is used for the Kafka Source to forward message from kafka to EMQX and re-publish to MQTT topic. It selects all fields from the topic `$bridges/kafka_consumer:<sourceName>`, which represents messages ingested from a Kafka source. It forwards messages consumed from Kafka to EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT\n  *\nFROM\n  \\\"$bridges/kafka_consumer:<sourceName>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Datalayers Line Protocol Format\nDESCRIPTION: Example line protocol format for writing device data to Datalayers\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndevices,clientid=${clientid} temp=${payload.temp},hum=${payload.hum},precip=${payload.precip}i ${timestamp}\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Example Output\nDESCRIPTION: Example JSON output showing the structure and content of the selected MQTT message fields including username, topic, QoS level, payload, message content, and client ID.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"topic\": \"t/a\",\n  \"qos\": 1,\n  \"payload\": \"{\\\"msg\\\":\\\"hello\\\"}\",\n  \"msg\": \"hello\",\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Format for Bearer Token Authentication\nDESCRIPTION: JSON request body format for obtaining a bearer token from the EMQX login API endpoint. Requires EMQX Dashboard username and password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"admin\",\n  \"password\": \"yourpassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp with Custom Unit to MongoDB ISODate in EMQX Enterprise\nDESCRIPTION: Demonstrates how to use the mongo_date() function with a specified time unit to convert a Unix timestamp to MongoDB ISODate format. Supports second, millisecond, microsecond, and nanosecond units.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nmongo_date(now_timestamp('microsecond'), 'microsecond') = 'ISODate(2024-02-23T15:51:01.232Z)'\n```\n\n----------------------------------------\n\nTITLE: Monitoring EMQX Cluster Status After Node Loss\nDESCRIPTION: Command to check the progress of shard transitions and cluster status after a node loss in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds info\n<...>\n\nSITES:\n.------------------.-------------------.----------.\n: Site             : Node              : Status   :\n:------------------:-------------------:----------:\n: D8894F95DC86DFDB : 'emqx@n1.local'   : up       :\n: 5C6028D6CE9459C7 : 'emqx@n2.local'   : (!) LOST :\n: <...>\n\nSHARDS:\n.------------.----------------------.------------------------.\n: DB/Shard   : Replicas             : Transitions            :\n:------------:----------------------:------------------------:\n:-messages/0-:----------------------:------------------------:\n:            : 5C6028D6CE9459C7 (!) : - 5C6028D6CE9459C7 (!) :\n:            : <...>                : + D8894F95DC86DFDB     :\n: <...>\n```\n\n----------------------------------------\n\nTITLE: Configuring Listener-Level Authentication\nDESCRIPTION: This code snippet demonstrates how to configure listener-level authentication for a STOMP gateway using the EMQX configuration file. It shows configuring different authentication mechanisms (built-in database and HTTP server) for different listeners within the same gateway.  Listener-level authentication is only supported via configuration file and not through the HTTP API or Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/gateway.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ngateway.stomp {\n\n  listeners.tcp.default {\n    bind = 61613\n    ## 例如，为 61613 端口的监听器配置基于内置数据库的认证器\n    authentication {\n      mechanism = password_based\n      backend = built_in_database\n      user_id_type = username\n    }\n  }\n\n  listeners.tcp.default2 {\n    bind = 61614\n    ## 例如，为 61614 端口的监听器配置基于 HTTP Server 的认证器\n    authentication {\n      mechanism = password_based\n      backend = http\n      method = post\n      url = \"http://127.0.0.1:9000/stomp/auth\"\n      headers {\n        content-type = \"application/json\"\n      }\n      body {\n        username = \"${username}\"\n        password = \"${password}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering with WHERE Clause in EMQX Rule SQL\nDESCRIPTION: Shows how to use equality operators and logical operators to form complex boolean expressions in the WHERE clause for advanced filtering.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\" WHERE payload.x.y = 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\" WHERE payload.name = \"sensor_1\" and payload.temprature > 39\n```\n\n----------------------------------------\n\nTITLE: Encoding Sparkplug B Messages in SQL\nDESCRIPTION: SQL query showing how to encode data into Sparkplug B format using sparkplug_encode function with JSON decoding.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  sparkplug_encode(json_decode(payload)) as encoded\nfrom t\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name via Environment Variable in EMQX\nDESCRIPTION: This example shows how to override the node name using an environment variable, which can be used in Docker run commands or systemd service files.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEMQX_NODE__NAME='emqx@s1.emqx.io'\n```\n\n----------------------------------------\n\nTITLE: 使用 MQTTX CLI 连接 EMQX 并订阅主题\nDESCRIPTION: 使用 MQTTX CLI 连接到 EMQX，设置 Clean Start 为 false，指定客户端 ID 为 emqx_c，并订阅 t/1 主题。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/durability/durability_introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -i emqx_c --no-clean\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend MQTT Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend for MQTT traffic. It configures session stickiness based on the MQTT client identifier, and specifies the EMQX servers to load balance across.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  stick-table type string len 32 size 100k expire 30m\n  stick on req.payload(0,0), mqtt_field_value(connect, client_identifier)\n\n # 增加 send-proxy 会把真实带给 EMQX，对应后端监听器需要启用 proxy_protocol\n  # server emqx1 emqx1-cluster.emqx.io:1883 check send-proxy-v2-ssl-cn\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: JSON Decoding in EMQX\nDESCRIPTION: Example of using json_decode to parse JSON strings into EMQX data structures like maps or arrays for data manipulation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nmap_get('a', json_decode('{\"a\": 1}')) = 1\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Message Storage\nDESCRIPTION: SQL template for inserting MQTT message data into the emqx_messages table, including client ID, topic, payload, and timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO emqx_messages(clientid, topic, payload, created_at) VALUES(\n  ${clientid},\n  ${topic},\n  ${payload},\n  FROM_UNIXTIME(${timestamp}/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Rule for Cluster Linking in EMQX\nDESCRIPTION: Example ACL rule in Erlang syntax to authorize Cluster Linking MQTT clients to operate with \"$LINK/#\" topics. This rule specifically allows MQTT clients with ClientIDs matching the pattern \"^clink-us-east\" to have full access to the control topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% Allow Cluster Linking MQTT clients to operate with \"$LINK/#\" topics\n{allow, {clientid, {re, \"^clink-us-east\"}}, all, [\"$LINK/#\"]}.\n...\n```\n\n----------------------------------------\n\nTITLE: 使用 MQTTX CLI 发布消息到主题\nDESCRIPTION: 使用 MQTTX CLI 的 bench 命令，通过 1 个客户端重复向 t/1 主题发布消息。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/durability/durability_introduction.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx bench pub -t t/1 -c 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Snowflake Role for Resource Management\nDESCRIPTION: SQL commands to create a role and assign necessary permissions for managing Snowflake resources. This ensures the user has appropriate access to perform required operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE ROLE snowpipe;\n\nGRANT USAGE ON DATABASE testdatabase TO ROLE snowpipe;\nGRANT USAGE ON SCHEMA testdatabase.public TO ROLE snowpipe;\nGRANT INSERT, SELECT ON testdatabase.public.emqx TO ROLE snowpipe;\nGRANT READ, WRITE ON STAGE testdatabase.public.emqx TO ROLE snowpipe;\nGRANT OPERATE, MONITOR ON PIPE testdatabase.public.emqx TO ROLE snowpipe;\nGRANT ROLE snowpipe TO USER snowpipeuser;\nALTER USER snowpipeuser SET DEFAULT_ROLE = snowpipe;\n```\n\n----------------------------------------\n\nTITLE: OpenTSDB Query Result in JSON Format\nDESCRIPTION: Displays the formatted JSON output of the OpenTSDB query, showing the CPU metric data for 'serverA' with timestamp and value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"metric\": \"cpu\",\n    \"tags\": {\n      \"host\": \"serverA\"\n    },\n    \"aggregateTags\": [],\n    \"query\": {\n      \"aggregator\": \"last\",\n      \"metric\": \"cpu\",\n      \"tsuids\": null,\n      \"downsample\": null,\n      \"rate\": false,\n      \"filters\": [\n        {\n          \"tagk\": \"host\",\n          \"filter\": \"*\",\n          \"group_by\": true,\n          \"type\": \"wildcard\"\n        }\n      ],\n      \"percentiles\": null,\n      \"index\": 0,\n      \"rateOptions\": null,\n      \"filterTagKs\": [\n        \"AAAB\"\n      ],\n      \"explicitTags\": false,\n      \"useFuzzyFilter\": true,\n      \"preAggregate\": false,\n      \"rollupUsage\": null,\n      \"rollupTable\": \"raw\",\n      \"showHistogramBuckets\": false,\n      \"useMultiGets\": true,\n      \"tags\": {\n        \"host\": \"wildcard(*)\"\n      },\n      \"histogramQuery\": false\n    },\n    \"tsuids\": [\n      \"000001000001000001\"\n    ],\n    \"dps\": {\n      \"1683532519\": 12\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication with LDAP Bind Authentication in EMQX\nDESCRIPTION: This configuration snippet shows how to set up LDAP authentication using the LDAP Bind Authentication method in EMQX. It specifies the LDAP backend, password-based mechanism, and various LDAP connection parameters including the bind password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/ldap.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  backend = \"ldap\"\n  mechanism = \"password_based\"\n  method {\n    type = bind\n    bind_password = \"${password}\"\n  }\n  server = \"127.0.0.1:389\"\n  query_timeout = \"5s\"\n  username = \"root\"\n  password = \"root password\"\n  pool_size = 8\n  base_dn = \"uid=${username},ou=testdevice,dc=emqx,dc=io\"\n  filter = \"(objectClass=mqttUser)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Topic in EMQX\nDESCRIPTION: Command to publish a message to topic 't/1' on an EMQX node using MQTTX CLI. This action will generate trace data that can be viewed in the Jaeger UI to demonstrate end-to-end message flow.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t t/1 -h 172.19.0.2 -p 1883\n```\n\n----------------------------------------\n\nTITLE: Basic jq Function Syntax in EMQX Rule Engine SQL\nDESCRIPTION: Demonstrates the basic format of a jq statement in the EMQX rule engine SQL. It includes parameters for the jq program, JSON input, and an optional timeout value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-jq.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\njq('<JQ_program>', '<JSON_input>', <timeout_value>)\n```\n\n----------------------------------------\n\nTITLE: Converting RFC3339 to Unix Timestamp\nDESCRIPTION: Examples of converting RFC3339 formatted dates to Unix timestamps with different time units\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrfc3339_to_unix_ts('2024-02-23T15:56:30Z') = 1708703790\nrfc3339_to_unix_ts('2024-02-23T15:56:30+08:00') = 1708674990\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'second') = 1708703790\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'millisecond') = 1708703790870\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'microsecond') = 1708703790870000\nrfc3339_to_unix_ts('2024-02-23T15:56:30.535904509Z', 'nanosecond') = 1708703790535904509\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topic with Durable Session\nDESCRIPTION: This command uses MQTTX CLI to subscribe to the 't/1' topic with a durable session. It sets the client ID to 'emqx_c' and uses the '--no-clean' option to set Clean Start to false, ensuring session durability.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/durability_introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -i emqx_c --no-clean\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Cluster with Docker Compose\nDESCRIPTION: Command to start the EMQX cluster using Docker Compose in detached mode.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Dashboard with HTTP/HTTPS Listeners and SSO Options\nDESCRIPTION: This configuration sets up the EMQX Dashboard with both HTTP and HTTPS listeners, token expiration time, CORS settings, Swagger UI support, and Single Sign-On options for LDAP, OIDC, and SAML. It includes detailed settings for listener binding, SSL options, and authentication parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/dashboard.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndashboard {\n  listeners {\n    http {\n      # set 'bind = 0' will disable this listener\n      bind = \"0.0.0.0:18083\"\n      max_connections = 512\n    }\n    https {\n      # set 'bind = 0' will disable this listener\n      bind = \"0.0.0.0:18084\"\n      ssl_options {\n        certfile = \"${EMQX_ETC_DIR}/certs/cert.pem\"\n        keyfile = \"${EMQX_ETC_DIR}/certs/key.pem\"\n      }\n    }\n  }\n  token_expired_time = 60m\n  cors = false\n  swagger_support = true\n  default_password = jEdOgGS6vzQ\n  sso = {\n    ldap = {\n      enable = true\n      backend = \"ldap\"\n      query_timeout = \"5s\"\n      server = \"localhost:389\"\n      pool_size = 8\n      username = \"cn=admin,dc=example,dc=com\"\n      password = \"secret\"\n      base_dn = \"dc=example,dc=com\"\n      filter = \"(& (objectClass=person) (uid=${username}))\"\n      request_timeout = \"10s\"\n    }\n    oidc = {\n      enable = true\n      backend = oidc\n      issuer = \"https://issuer.example.com\"\n      clientid = \"your-client-id\"\n      secret = \"your-client-secret\"\n      scopes = [\n        \"openid\"\n      ]\n      name_var = \"${sub}\"\n      dashboard_addr = \"http://127.0.0.1:18083\"\n      session_expiry = \"30s\"\n      require_pkce = false\n      preferred_auth_methods = [\n        \"client_secret_post\",\n        \"client_secret_basic\",\n        \"none\"\n      ]\n      provider = generic\n      fallback_methods = [\n        \"RS256\"\n      ]\n    }\n    saml = {\n      enable = true\n      backend = \"saml\"\n      dashboard_addr = \"https://127.0.0.1:18083\"\n      idp_metadata_url = \"https://idp.example.com\"\n      sp_sign_request = false\n      sp_public_key = \"Pub Key\"\n      sp_private_key = \"SP Private Key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed EMQX Versions\nDESCRIPTION: This command lists the currently installed versions of EMQX, showing their status (permanent, current, or old).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx versions\n\nInstalled versions:\n* 5.0.0 permanent\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorizer with GET Request in EMQX\nDESCRIPTION: Example configuration for an HTTP authorizer using GET request in EMQX. It includes method, URL, body, and headers settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/http.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = http\n\n    method = get\n    url = \"http://127.0.0.1:32333/authz\"\n    body {\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n    headers {\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CoAP Gateway via HTTP API in EMQX\nDESCRIPTION: This curl command demonstrates how to enable and configure the CoAP gateway using the EMQX HTTP API. It sets up a UDP listener on port 5683 with specific connection parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateways/coap' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"coap\",\n  \"enable\": true,\n  \"mountpoint\": \"coap/\",\n  \"connection_required\": false,\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"name\": \"default\",\n      \"bind\": \"5683\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT over QUIC Listener in EMQX\nDESCRIPTION: Configuration needed in the emqx.conf file to enable the QUIC listener. This sets up the QUIC listener on port 14567 and specifies the required SSL certificate files.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# etc/emqx.conf\nlisteners.quic.default {\n  enabled = true\n  bind = \"0.0.0.0:14567\"\n  keyfile = \"etc/certs/key.pem\"\n  certfile = \"etc/certs/cert.pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Message Caching in EMQX\nDESCRIPTION: SQL statement to create a rule for caching MQTT messages under topic 't/#' in Redis.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Current Time in RFC3339 Format with Time Unit in EMQX\nDESCRIPTION: Example of using now_rfc3339 with a time unit parameter to get current system time with higher precision.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nnow_rfc3339('microsecond') = '2024-02-23T10:26:38.009706+08:00'\n```\n\n----------------------------------------\n\nTITLE: Inspecting EMQX Broker Status\nDESCRIPTION: Command to view broker running status, statistics and metrics including version and uptime information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl broker\nsysdescr  : EMQX Enterprise\nversion   : 5.0.3\ndatetime  : 2023-05-12T10:21:50.095047713+08:00\nuptime    : 52 seconds\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Listeners Using EMQX CLI\nDESCRIPTION: Commands to start and stop TCP listeners through the EMQX command line interface. Note that using these commands will not update the listener's status on the Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.1.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl listeners stop tcp:we\n./bin/emqx ctl listeners start tcp:we\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach for Splitting Messages with jq in EMQX\nDESCRIPTION: Illustrates an alternative method to split an input message containing multiple sensor measurements into separate messages for each sensor type using jq within the FOREACH clause.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-jq.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nFOREACH\n    jq('\n       # Save the input\n       . as $payload |\n       \n       # All sensor types\n       [ \n         \"temperature\",\n         \"humidity\",\n         \"pressure\",\n         \"light\",\n         \"battery\",\n         \"speed\" \n       ] as $sensor_types |\n       \n       # Output an object for each sensor type\n       $sensor_types[] |\n       {\n         client_id: $payload.client_id,\n         timestamp: $payload.timestamp,\n         sensor_type: .,\n         value: $payload[.] \n       }\n       ',\n       payload) as sensor  \nFROM \"car/measurements\"\n```\n\n----------------------------------------\n\nTITLE: Cluster-wide Tracing with EMQX CLI\nDESCRIPTION: The 'traces' command enables tracing across all nodes in the EMQX cluster. It provides functionality to start, stop, list, and delete traces for clients, topics, or IP addresses.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces list\nTrace(mytraces_ip: ip_address=127.0.0.1, waiting, LogSize:#{'emqx@127.0.0.1' => 0})\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces start mytraces client emqx_c 1200\ncluster_trace clientid emqx_c mytraces successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces start mytraces_ip topic t/1 1200\ncluster_trace topic t/1 mytraces_ip successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces start mytraces_ip ip_address 127.0.0.1 1200\ncluster_trace ip_address 127.0.0.1 mytraces_ip successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces stop mytraces_ip\nStop cluster_trace mytraces_ip successfully\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl traces delete mytraces_ip\nDel cluster_trace mytraces_ip successfully\n```\n\n----------------------------------------\n\nTITLE: Loading a Gateway with Configuration\nDESCRIPTION: Loads a gateway with specified JSON configuration parameters. This allows dynamically configuring gateway plugins.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl gateway load coap '{\"type\":\"coap\", ...}'\n```\n\n----------------------------------------\n\nTITLE: Starting Elasticsearch Container with Docker\nDESCRIPTION: This command starts an Elasticsearch container with X-Pack security authentication enabled, setting the default username 'elastic' with password 'public'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name elasticsearch \\\n    -p 9200:9200 \\\n    -p 9300:9300 \\\n    -e \"discovery.type=single-node\" \\\n    -e \"xpack.security.enabled=true\" \\\n    -e \"ELASTIC_PASSWORD=public\" \\\n    docker.elastic.co/elasticsearch/elasticsearch:7.10.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Connections Load Balancing in HAProxy for EMQX\nDESCRIPTION: This configuration implements least connections load balancing, directing requests to the server with the fewest current connections. It's suitable for scenarios with varying server performance.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance leastconn\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: Configuring Enhanced Authentication in EMQX 5.1\nDESCRIPTION: Example configuration for enhanced authentication using the built-in database in EMQX 5.1. It specifies the mechanism, backend, algorithm, and iteration count.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_2\n\nLANGUAGE: hocon\nCODE:\n```\n{\n    mechanism = scram\n    backend = built_in_database\n    enable = true\n\n    algorithm = sha512\n    iteration_count = 4096\n}\n```\n\n----------------------------------------\n\nTITLE: Using NanoMQ CLI Tool for MQTT over QUIC Testing\nDESCRIPTION: Example commands for using the nanomq_cli tool to test MQTT over QUIC connections. This includes help information and a subscription example to an MQTT broker via QUIC.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnanomq_cli quic --help\nUsage: quic conn <url>\n       quic sub  <url> \\<qos> \\<topic>\n       quic pub  <url> \\<qos> \\<topic> \\<data>\n\n## subscribe example\nnanomq_cli quic sub mqtt-quic://54.75.171.11:14567 2 msg\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX for Prometheus Pushgateway Integration\nDESCRIPTION: This configuration snippet shows how to enable and configure the Prometheus Pushgateway integration within EMQX using the `emqx.conf` file. It includes settings for the Pushgateway server URL, the data reporting interval, and the enabling/disabling of the push functionality.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"prometheus {\n\n  ## Prometheus的URL\n  ## @path prometheus.push_gateway_server\n  ## @type string()\n  ## @default \\\"http://127.0.0.1:9091\\\"\n  push_gateway_server: \\\"http://127.0.0.1:9091\\\"\n\n\n  ## 数据报告间隔。\n  ## @path prometheus.interval\n  ## @type emqx_schema:duration_ms()\n  ## @default 15s\n  interval: 15s\n\n\n  ## 打开 Prometheus 的数据推送，或者关闭\n  ## @path prometheus.enable\n  ## @type boolean()\n  ## @default false\n  enable: true\n}\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Packaging EMQX Plugin\nDESCRIPTION: Command to compile and package the EMQX plugin for testing the development environment.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make rel\n```\n\n----------------------------------------\n\nTITLE: Querying Message Dropped During Delivery Event in SQL\nDESCRIPTION: SQL statement to extract data from the '$events/delivery_dropped' event topic, including publisher ID, username, drop reason, message topic, and QoS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  from_clientid,\n  from_username,\n  reason,\n  topic,\n  qos\nFROM \"$events/delivery_dropped\"\n```\n\n----------------------------------------\n\nTITLE: Topic Rewrite Rule Configuration Syntax\nDESCRIPTION: Defines the structure of a topic rewrite rule with action, source topic, destination topic, and regular expression for matching and transformation\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-topic-rewrite.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrewrite = [\n  {\n    action:       \"all\"\n    source_topic: \"x/#\"\n    dest_topic:   \"x/y/z/$1\"\n    re:           \"^x/y/(.+)$\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Select All Fields from a Topic Filter\nDESCRIPTION: This SQL query selects all fields from messages published to any topic that matches the 't/#' topic filter. This shows how to use wildcards to retrieve data from a range of topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Functions in EMQX Rule Engine\nDESCRIPTION: Functions for encoding and decoding data in various formats, including Base64, JSON, and hexadecimal.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbase64_decode('aGVsbG8=') = 'hello'\nbin2hexstr(base64_decode('y0jN')) = 'CB48CD'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbase64_encode('hello') = 'aGVsbG8='\nbase64_encode(hexstr2bin('CB48CD')) = 'y0jN'\n```\n\nLANGUAGE: bash\nCODE:\n```\nmap_get('a', json_decode('{\"a\": 1}')) = 1\n```\n\nLANGUAGE: bash\nCODE:\n```\njson_encode([1,2,3]) = '[1,2,3]'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip('hello')) = 'CB48CDC9C90700'\n```\n\nLANGUAGE: bash\nCODE:\n```\nunzip(hexstr2bin('CB48CDC9C90700')) = 'hello'\n```\n\nLANGUAGE: bash\nCODE:\n```\nsqlserver_bin2hexstr('hello') = '0x68656C6C6F'\nsqlserver_bin2hexstr(str_utf16_le('hello')) = '0x680065006C006C006F00'\nsqlserver_bin2hexstr(str_utf16_le('你好')) = '0x604F7D59'\n```\n\n----------------------------------------\n\nTITLE: Getting Current Unix Timestamp\nDESCRIPTION: Examples of getting current Unix timestamp with different time units\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnow_timestamp() = 1708913853\nnow_timestamp('microsecond') = 1708913828814315\n```\n\n----------------------------------------\n\nTITLE: MQTTX Command for Publishing Test Message\nDESCRIPTION: This bash command uses MQTTX to publish a test message to the topic 't/1' for verifying the MongoDB Sink configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello MongoDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Listener in EMQX\nDESCRIPTION: This snippet demonstrates the configuration for a Secure WebSocket listener on port 8084 with SSL options. It includes settings for certificate files, maximum connections, and the WebSocket MQTT path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/listener.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.wss.default {\n  bind = \"0.0.0.0:8084\"\n  max_connections = 1024000\n  websocket.mqtt_path = \"/mqtt\"\n  ssl_options {\n    cacertfile = \"etc/certs/cacert.pem\"\n    certfile = \"etc/certs/cert.pem\"\n    keyfile = \"etc/certs/key.pem\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal String to Binary Conversion in EMQX\nDESCRIPTION: Example of using hexstr2bin to convert a hexadecimal string representation back to binary data for processing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nunzip(hexstr2bin('CB48CDC9C90700')) = 'hello'\n```\n\n----------------------------------------\n\nTITLE: 定义Erlang格式的ACL授权规则\nDESCRIPTION: 展示了基于Erlang元组格式的ACL规则示例，包括用户名匹配、IP地址匹配、主题订阅限制等授权规则。每条规则使用花括号包裹，并以点结尾。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/file.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% 允许用户名是 dashboard 的客户端订阅 \"$SYS/#\" 这个主题\n{allow, {user, \"dashboard\"}, subscribe, [\"$SYS/#\"]}.\n\n%% 允许来自127.0.0.1 的用户发布和订阅 \"$SYS/#\" 以及 \"#\"\n{allow, {ipaddr, \"127.0.0.1\"}, all, [\"$SYS/#\", \"#\"]}.\n\n%% 拒绝其他所有用户订阅 `$SYS/#`，`#` 和 `+/#` 主题\n{deny, all, subscribe, [\"$SYS/#\", {eq, \"#\"}, {eq, \"+/#\"}]}.\n\n%% 如果前面的规则都没有匹配到，则允许所有操作\n%% 注意：在生产环境中，最后一条规则应该设置为 `{deny, all}`，并且配置 `authorization.no_match = deny`\n{allow, all}.\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for EMQX Metrics\nDESCRIPTION: YAML configuration for OpenTelemetry Collector that sets up gRPC receivers and Prometheus exporters to collect and forward EMQX metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# otel-collector-config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nexporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n\nprocessors:\n  batch:\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [prometheus]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration Example - EMQX 4.4\nDESCRIPTION: Complete PostgreSQL configuration example for EMQX 4.4 with all settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nauth.pgsql.server = 127.0.0.1:5432\nauth.pgsql.pool = 8\nauth.pgsql.username = root\nauth.pgsql.password = dbpass\n\nauth.pgsql.database = mqtt\nauth.pgsql.encoding = utf8\n\nauth.pgsql.acl_query = select allow, ipaddr, username, clientid, access, topic from mqtt_acl where username = '%u'\n\nauth.pgsql.ssl = on\nauth.pgsql.ssl.cacertfile = path/to/your/cafile.pem\nauth.pgsql.ssl.certfile = path/to/your/certfile\nauth.pgsql.ssl.keyfile = path/to/your/keyfile\nauth.pgsql.ssl.verify = true\nauth.pgsql.ssl.server_name_indication = mypgsql\n```\n\n----------------------------------------\n\nTITLE: Adding a TCP Listener via HTTP API\nDESCRIPTION: Example of adding a new TCP listener named 'demo' using the EMQX HTTP API. The request includes detailed configuration parameters such as connection limits, TCP options, and bind address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n     'http://127.0.0.1:18083/api/v5/listeners' \\\n     -H 'accept: application/json' \\\n     -H 'Content-Type: application/json' \\\n     -d '{\n  \"acceptors\": 16,\n  \"access_rules\": [\n    \"allow all\"\n  ],\n  \"bind\": \"0.0.0.0:1884\",\n  \"current_connections\": 10240,\n  \"name\": \"demo\",\n  \"max_connections\": 204800,\n  \"mountpoint\": \"/\",\n  \"proxy_protocol\": false,\n  \"proxy_protocol_timeout\": \"3s\",\n  \"running\": true,\n  \"tcp_options\": {\n    \"active_n\": 100,\n    \"backlog\": 1024,\n    \"buffer\": \"4KB\",\n    \"high_watermark\": \"1MB\",\n    \"nodelay\": false,\n    \"reuseaddr\": true,\n    \"send_timeout\": \"15s\",\n    \"send_timeout_close\": true\n  },\n  \"type\": \"tcp\",\n  \"zone\": \"default\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Pulsar Topic\nDESCRIPTION: Docker command to consume messages from the Pulsar topic 'persistent://public/default/my-topic' for verifying rule execution.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it pulsar bin/pulsar-client consume -n 0 -s mysubscriptionid -p Earliest persistent://public/default/my-topic\n```\n\n----------------------------------------\n\nTITLE: Inserting Authorization Rule in PostgreSQL\nDESCRIPTION: Bash command demonstrating how to insert an authorization rule for a user in the PostgreSQL database. This example allows 'user123' to publish to topics matching 'data/user123/#'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/postgresql.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npostgres=# INSERT INTO mqtt_acl(username, permission, action, topic, ipaddress) VALUES ('user123', 'allow', 'publish', 'data/user123/#', '127.0.0.1');\nINSERT 0 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CoAP Gateway Authentication via Configuration File\nDESCRIPTION: HOCON configuration for setting up built-in database authentication with password-based mechanism for CoAP gateway\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/coap.md#2025-04-20_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ngateway.coap {\n\n  authentication {\n    backend = built_in_database\n    mechanism = password_based\n    password_hash_algorithm {\n      name = sha256\n      salt_position = suffix\n    }\n    user_id_type = username\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Properties to MQTT Message in SQL\nDESCRIPTION: This SQL query selects all data from the 't/#' topic and adds a user property to the pub_props field. The new property's key and value are taken from the incoming payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  map_put(concat('User-Property.', payload.extra_key), payload.extra_value, pub_props) as pub_props\nFROM\n  't/#'\n```\n\n----------------------------------------\n\nTITLE: Map Key Retrieval - map_get Function\nDESCRIPTION: Retrieves values from a map by key. Supports providing a default value if the key is not found.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmap_get('msg', json_decode('{\"msg\": \"hello\"}')) = 'hello'\nmap_get('data', json_decode('{\"msg\": \"hello\"}'), '') = ''\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Partition Autoheal in EMQX\nDESCRIPTION: This snippet shows how to enable the network partition autoheal feature in EMQX configuration. When enabled, EMQX will automatically recover from network partitions without manual intervention.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster.autoheal = true\n```\n\n----------------------------------------\n\nTITLE: Joining EMQX Cluster\nDESCRIPTION: Command to join an EMQX node to a cluster. This example shows a failed attempt to join a cluster due to the target node being down.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster join emqx2@127.0.0.1\nFailed to join the cluster: {node_down,'emqx2@127.0.0.1'}\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from tar.gz Installation on Ubuntu\nDESCRIPTION: This command starts EMQX in the foreground after installing from a tar.gz package. It assumes the current directory contains the extracted EMQX files.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu-ce.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: LwM2M Client Register Message Format in EMQX\nDESCRIPTION: This JSON structure represents the format of a Register message sent by an LwM2M client, converted to an MQTT message by the LwM2M Gateway. It includes client information such as endpoint name, version, lifetime, and supported objects.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"register\",\n  \"data\": {\n    \"objectList\": [\"/1/0\", \"/2/0\", \"/3/0\", \"/4/0\", \"/5/0\", \"/6/0\", \"/7/0\"],\n    \"lwm2m\": \"1.0\",\n    \"lt\": 300,\n    \"ep\": \"testlwm2mclient\",\n    \"b\": \"U\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topic Using MQTTX CLI\nDESCRIPTION: This command uses MQTTX CLI to subscribe to the 'pub/#' topic on the broker.emqx.io server with QoS 1 and verbose output.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t pub/# -q 1 -h broker.emqx.io -v\n```\n\n----------------------------------------\n\nTITLE: Unexpected Info Error Log Example\nDESCRIPTION: Example of an error log message format when handling unexpected info in EMQX channel\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\n2023-04-19T18:24:35.350233+00:00 [error] msg: unexpected_info, mfa: emqx_channel:handle_info/2, line: 1278, peername: 172.22.0.1:36384, clientid: caribdis_bench_sub_1137967633_4788, info: {#Ref<0.408802983.1941504010.189402>,{ok,200,[{<<\"cache-control\">>,<<\"max-age=0, ...\">>}}\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Examples\nDESCRIPTION: Collection of basic SELECT statements showing different ways to query topics and extract fields from messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/a\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/a\",\"t/b\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT qos, username, clientid FROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM \"#\" WHERE username='Steven'\n```\n\n----------------------------------------\n\nTITLE: Querying Session Unsubscription Events in EMQX\nDESCRIPTION: SQL statement to extract client information from the '$events/session_unsubscribed' event topic. This query retrieves the client ID, username, topic, and QoS level when a terminal subscription is cancelled.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  topic,\n  qos\nFROM\n  \"$events/session_unsubscribed\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"topic\": \"t/a\",\n  \"qos\": 1,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: 使用 cURL 导入认证数据到内置数据库\nDESCRIPTION: 这个示例展示了如何使用 cURL 命令将认证数据文件上传到 EMQX 的认证 API 中。该命令以 multipart/form-data 格式发送 POST 请求，从本地文件导入用户数据。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/user_management.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u admin:public -X 'POST' \\\n    -H 'Content-Type: multipart/form-data' \\\n    -F 'filename=@/tmp/myusers.csv' \\\n    'http://localhost:18083/api/v5/authentication/password_based%3Abuilt_in_database/import_users'\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Docker Compose Setup\nDESCRIPTION: Docker compose configuration for setting up RocketMQ server with namesrv and broker services. Includes volume mappings, port configurations, and environment variables.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n  mqnamesrv:\n    image: apache/rocketmq:4.9.4\n    container_name: rocketmq_namesrv\n    ports:\n      - 9876:9876\n    volumes:\n      - ./rocketmq/logs:/opt/logs\n      - ./rocketmq/store:/opt/store\n    command: ./mqnamesrv\n\n  mqbroker:\n    image: apache/rocketmq:4.9.4\n    container_name: rocketmq_broker\n    ports:\n      - 10909:10909\n      - 10911:10911\n    volumes:\n      - ./rocketmq/logs:/opt/logs\n      - ./rocketmq/store:/opt/store\n      - ./rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rocketmq_namesrv:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms1024m -Xmx1024m -Xmn1024m\"\n    command: ./mqbroker -c /etc/rocketmq/broker.conf\n    depends_on:\n      - mqnamesrv\n```\n\n----------------------------------------\n\nTITLE: Multiple Topic Rewrite Rules Example in EMQX Configuration\nDESCRIPTION: Example configuration with multiple topic rewrite rules for EMQX. Each rule defines different pattern matching and replacements that will be applied to topics in MQTT packets based on their patterns.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-topic-rewrite.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrewrite = [\n  {\n    action:       \"all\"\n    source_topic: \"y/+/z/#\"\n    dest_topic:   \"y/z/$2\"\n    re:           \"^y/(.+)/z/(.+)$\"\n  }\n  {\n    action:       \"all\"\n    source_topic: \"x/#\"\n    dest_topic:   \"z/y/x/$1\"\n    re:           \"^x/y/(.+)$\"\n  }\n  {\n    action:       \"all\"\n    source_topic: \"x/y/+\"\n    dest_topic:   \"z/y/$1\"\n    re:           \"^x/y/(\\d+)$\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topic Using MQTTX CLI\nDESCRIPTION: This command uses MQTTX CLI to subscribe to the MQTT topic 't/1', which is the destination for messages forwarded from RabbitMQ.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Docker Container and Creating Database\nDESCRIPTION: Commands to start a TDengine Docker container, access it, and create a new database named 'mqtt'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To start the TDengine docker image \ndocker run --name TDengine -p 6041:6041 tdengine/tdengine\n\n# Access the container\ndocker exec -it TDengine bash\n\n# Locate the TDengine server in the container\ntaos\n\n# Create and then select the database\nCREATE DATABASE mqtt;\n\nuse mqtt;\n```\n\n----------------------------------------\n\nTITLE: Configuring PSK Authentication in EMQX\nDESCRIPTION: Configuration snippet for enabling PSK authentication in the EMQX configuration file. This defines the PSK authentication group with enable flag and the path to the PSK file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/psk-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsk_authentication {\n  enable = true\n  init_file = \"data/psk_file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing One-way SSL/TLS Authentication with MQTTX CLI\nDESCRIPTION: Command to test one-way SSL/TLS authentication with MQTTX CLI. The client provides a CA certificate to verify the server's identity when connecting to a secure MQTT broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h localhost -p 8883 \\\n  --protocol mqtts \\\n  --ca certs/rootCA.crt\n```\n\n----------------------------------------\n\nTITLE: Using Null Value Check Functions in EMQX Rule Engine\nDESCRIPTION: Demonstrates the usage of functions for checking null or undefined values in the EMQX rule engine. These functions help in identifying unassigned variables or null values in JSON data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nis_null(this_is_an_unassigned_variable) = true\nis_null(map_get('b', json_decode('{\"a\": 1}'))) = true\nis_null(map_get('b', json_decode('{\"b\": null}'))) = false\n\nis_null_var(this_is_an_unassigned_variable) = true\nis_null_var(map_get('b', json_decode('{\"a\": 1}'))) = true\nis_null_var(map_get('b', json_decode('{\"b\": null}'))) = true\n```\n\n----------------------------------------\n\nTITLE: Replacing Text with Regular Expressions in EMQX\nDESCRIPTION: The regex_replace function substitutes portions of a string that match a regular expression pattern with a replacement string. If no matches are found, the original string is returned unchanged.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nregex_replace('hello 123', '\\d+', 'world') = 'hello world'\nregex_replace('a;b; c', ';\\s*', ',') = 'a,b,c'\n```\n\n----------------------------------------\n\nTITLE: EMQX License Configuration in emqx.conf\nDESCRIPTION: Configuration settings for license key and connection quota watermarks in the emqx.conf file. Includes base64 encoded license key and threshold settings for connection quota usage alarms.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/license.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlicense {\n  key  =  \"MjIwMTExCjAKMTAKRXZhbHVhdGlvbgpjb250YWN0QGVtcXguaW8KZGVmYXVsdAoyMDIzMDEwOQoxODI1CjEwMAo=.MEUCIG62t8W15g05f1cKx3tA3YgJoR0dmyHOPCdbUxBGxgKKAiEAhHKh8dUwhU+OxNEaOn8mgRDtiT3R8RZooqy6dEsOmDI=\"\n  connection_low_watermark  =  \"60%\"\n  connection_high_watermark  =  \"80%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracing Span Overload Protection in EMQX\nDESCRIPTION: Configuration to manage the maximum number of tracing spans that can be accumulated before exporting in EMQX. This helps prevent memory issues when handling a large number of traced messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  traces { max_queue_size = 2048 }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Server CSR using OpenSSL\nDESCRIPTION: This command uses the `server.key` to create a Certificate Signing Request (`server.csr`).  The CSR contains information about the server, including the Common Name (usually the server's domain name), which will be included in the signed certificate. The CSR is then signed by the CA to create the server certificate.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"openssl req -new -key server.key -out server.csr\"\n```\n\n----------------------------------------\n\nTITLE: Using Client Attributes in HTTP Authentication Request Body\nDESCRIPTION: Example JSON template for HTTP authentication request body that uses client attributes as dynamic parameters. This demonstrates how to include the client's serial number from attributes in the authentication request.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/client-attributes/client-attributes.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"sn\": \"${client_attrs.sn}\",\n \"password\": \"${password}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Level Wildcard Examples\nDESCRIPTION: Valid and invalid examples of using the # wildcard character in MQTT topic filters. The # wildcard must be the last character in the topic filter.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_3\n\nLANGUAGE: pgsql\nCODE:\n```\n\"#\" is valid, matches all topics\n\"sensor/#\" is valid\n\"sensor/bedroom#\" is invalid (+ or # are only used as a wildcard level)\n\"sensor/#/temperature\" is invalid (# must be the last level)\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTTX for Rule Testing\nDESCRIPTION: MQTTX command to publish a test message to topic 't/1' for triggering the created rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -u emqx_u -t t/1 -m '{ \"msg\": \"hello Redis\" }'\n```\n\n----------------------------------------\n\nTITLE: Using NanoSDK QUIC Client for MQTT Communication\nDESCRIPTION: Command example for using the compiled NanoSDK QUIC client to publish or subscribe to MQTT topics via QUIC transport. This connects to EMQX on port 14567.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquic_client sub/pub mqtt-quic://127.0.0.1:14567 topic msg\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Listener for PSK Authentication\nDESCRIPTION: Configuration for the SSL listener to support PSK cipher suites. This removes TLSv1.3 which suppresses PSK ciphers and specifies the supported PSK cipher suites.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/psk-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.ssl.default {\n  acceptors = 4\n  bind = 8883\n  ssl_options {\n    ciphers = [\"RSA-PSK-AES256-GCM-SHA384\",\"RSA-PSK-AES256-CBC-SHA384\",\"RSA-PSK-AES128-GCM-SHA256\",\"RSA-PSK-AES128-CBC-SHA256\",\"RSA-PSK-AES256-CBC-SHA\",\"RSA-PSK-AES128-CBC-SHA\"]\n    versions = [\"tlsv1.2\", \"tlsv1.1\", \"tlsv1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting and Routing Sparkplug B Messages Based on Content\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload, splits it into multiple messages, and routes each message to a different topic based on the metric name. It uses jq to create individual messages and determine the output topic for each.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Output one message for each metric\n   .metrics[] |\n        . as $metric |\n        # Let the current metric be the only one in the metrics array\n        $payload | .metrics = [ $metric ]\n   ',\n   sparkplug_decode(payload)) AS item\nDO\nsparkplug_encode(item) AS output_payload,\nfirst(jq('\"my_metrics/\" + .metrics[0].name', item)) AS output_topic\nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: Array Override Example in BASH\nDESCRIPTION: Demonstrates how integer-named Map fields are interpreted as Array indices for overriding array elements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmyarray.1 = 74\nmyarray.2 = 75\n```\n\n----------------------------------------\n\nTITLE: Configuring BEAM VM Event Collection in EMQX\nDESCRIPTION: This snippet defines settings for collecting BEAM VM events such as long garbage collection, traffic congestion, and process limits. It includes options for monitoring and logging various VM-related events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**sysmon.vm.process_check_interval**\n\n  *Type*: `duration`\n\n  *Default*: `30s`\n\n  The time interval for the periodic process limit check.\n\n\n**sysmon.vm.process_high_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `80%`\n\n  The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is raised.\n\n\n**sysmon.vm.process_low_watermark**\n\n  *Type*: `percent`\n\n  *Default*: `60%`\n\n  The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is cleared.\n\n\n**sysmon.vm.long_gc**\n\n  *Type*: `disabled | duration`\n\n  *Default*: `disabled`\n\n  When an Erlang process spends long time to perform garbage collection, a warning level <code>long_gc</code> log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_gc</code>.\n\n\n**sysmon.vm.long_schedule**\n\n  *Type*: `disabled | duration`\n\n  *Default*: `240ms`\n\n  When the Erlang VM detect a task scheduled for too long, a warning level 'long_schedule' log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_schedule</code>.\n\n\n**sysmon.vm.large_heap**\n\n  *Type*: `disabled | bytesize`\n\n  *Default*: `32MB`\n\n  When an Erlang process consumed a large amount of memory for its heap space,\nthe system will write a warning level <code>large_heap</code> log, and an MQTT message is published to\nthe system topic <code>$SYS/sysmon/large_heap</code>.\n\n\n**sysmon.vm.busy_dist_port**\n\n  *Type*: `boolean`\n\n  *Default*: `true`\n\n  When the RPC connection used to communicate with other nodes in the cluster is overloaded,\nthere will be a <code>busy_dist_port</code> warning log,\nand an MQTT message is published to system topic <code>$SYS/sysmon/busy_dist_port</code>.\n\n\n**sysmon.vm.busy_port**\n\n  *Type*: `boolean`\n\n  *Default*: `true`\n\n  When a port (e.g. TCP socket) is overloaded, there will be a <code>busy_port</code> warning log,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/busy_port</code>.\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Client Events Insert\nDESCRIPTION: SQL template for inserting client event data into TDengine table emqx_client_events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO emqx_client_events(ts, clientid, event) VALUES (\n      ${ts},\n      '${clientid}',\n      '${event}'\n    )\n```\n\n----------------------------------------\n\nTITLE: TDengine Multi-Table Insert Syntax Example in SQL\nDESCRIPTION: Example of inserting data into multiple tables within a single TDengine insert statement. This syntax allows inserting values into table_1 and table_2 using the same template with placeholders for timestamp, ID, and topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\ninsert into table_1 values (${ts}, '${id}', '${topic}')\ntable_2 values (${ts}, '${id}', '${topic}')\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX via Yum on CentOS/RHEL\nDESCRIPTION: This command installs EMQX using the Yum package manager on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install emqx -y\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snowflake Resources with SQL\nDESCRIPTION: SQL commands to create necessary database, table, stage, and pipe in Snowflake for EMQX integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUSE ROLE accountadmin;\n\nCREATE DATABASE IF NOT EXISTS testdatabase;\n\nCREATE OR REPLACE TABLE testdatabase.public.emqx (\n    clientid STRING,\n    topic STRING,\n    payload STRING,\n    publish_received_at TIMESTAMP_LTZ\n);\n\nCREATE STAGE IF NOT EXISTS testdatabase.public.emqx\nFILE_FORMAT = (TYPE = CSV PARSE_HEADER = TRUE FIELD_OPTIONALLY_ENCLOSED_BY = '\"')\nCOPY_OPTIONS = (ON_ERROR = CONTINUE PURGE = TRUE);\n\nCREATE PIPE IF NOT EXISTS testdatabase.public.emqx AS\nCOPY INTO testdatabase.public.emqx\nFROM @testdatabase.public.emqx\nMATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;\n```\n\n----------------------------------------\n\nTITLE: MQTT Source Bridge Configuration in EMQX\nDESCRIPTION: Shows how to configure an MQTT bridge as a data source with connection details and subscription parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nbridges.mqtt.my_mqtt_source {\n    connector = {\n        server = \"192.168.2.100:1883\"\n        username = \"username1\"\n        password = \"\"\n        ssl.enable = false\n    }\n    direction = ingress\n    remote_topic = \"aws/#\"\n    remote_qos = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Array Operations in EMQX Rule Engine\nDESCRIPTION: Functions for working with arrays, including checking for item presence, accessing elements, and getting array length.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncontains(2, [1, 2, 3]) = true\ncontains(2.3, [1.8, 2.5, 2.0]) = false\ncontains('John', ['John', 'David']) = true\ncontains([1, 2], [a, b, [1, 2]]) = true\ncontains(json_decode('{\"a\": 1}'), [json_decode('{\"a\": 1}'), json_decode('{\"b\": 2}')]) = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nfirst(['John', 'David']) = 'John'\n\n# Wrong\nfirst([])\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nlast(['John', 'David']) = 'David'\n\n# Wrong\nlast([])\n```\n\nLANGUAGE: bash\nCODE:\n```\nlength([1,2,3,4]) = 4\nlength([]) = 0\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nnth(1, [1,2,3]) = 1\n\n# Wrong\nnth(0, [1,2,3])\nnth(4, [1,2,3])\n```\n\nLANGUAGE: bash\nCODE:\n```\nsublist(3, [1,2,3,4]) = [1,2,3]\nsublist(10, [1,2,3,4]) = [1,2,3,4]\n```\n\nLANGUAGE: bash\nCODE:\n```\nsublist(2, 10, [1,2,3,4]) = [2,3,4]\n```\n\n----------------------------------------\n\nTITLE: Example of Starting Load Rebalancing in EMQX\nDESCRIPTION: Example command to start load rebalancing among three EMQX nodes. It specifies wait times, eviction rates, and thresholds for connections and sessions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance start \\\n\t--wait-health-check 10 \\\n\t--wait-takeover 60  \\\n\t--conn-evict-rate 5 \\\n\t--sess-evict-rate 5 \\\n\t--abs-conn-threshold 30 \\\n\t--abs-sess-threshold 30 \\\n\t--nodes \"emqx1@127.0.0.1 emqx2@127.0.0.1 emqx3@127.0.0.1\"\nRebalance started\n```\n\n----------------------------------------\n\nTITLE: Viewing Mnesia Database Status with EMQX CLI\nDESCRIPTION: The 'mnesia' command displays detailed information about the Mnesia database, including system info, directory usage, running nodes, table types, and transaction statistics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl mnesia\n===> System info in version \"4.20.4.1\", debug level = none <===\nopt_disc. Directory \"/Users/emqx/Downloads/emqx-503/data/mnesia/emqx@127.0.0.1\" is used.\nuse fallback at restart = false\nrunning db nodes   = ['emqx@127.0.0.1']\nstopped db nodes   = []\nmaster node tables = []\nbackend types      = null_copies    - mria_mnesia_null_storage\n                     rocksdb_copies - mnesia_rocksdb\nremote             = []\nram_copies         = [bpapi,emqx_channel_registry,\n                      emqx_ee_schema_registry_serde_tab,\n                      emqx_exclusive_subscription,\n                      emqx_gateway_coap_channel_registry,emqx_retainer_index,\n                      emqx_retainer_index_meta,emqx_retainer_message,\n                      emqx_route,emqx_routing_node,emqx_shared_subscription,\n                      emqx_trie,mria_schema]\ndisc_copies        = [cluster_rpc_commit,cluster_rpc_mfa,emqx_acl,\n                      emqx_activated_alarm,emqx_admin,emqx_admin_jwt,emqx_app,\n                      emqx_authn_mnesia,emqx_banned,emqx_dashboard_monitor,\n                      emqx_deactivated_alarm,emqx_delayed,\n                      emqx_enhanced_authn_scram_mnesia,emqx_psk,\n                      emqx_telemetry,emqx_trace,schema]\ndisc_only_copies   = []\n[{'emqx@127.0.0.1',disc_copies}] = [schema,emqx_psk,emqx_delayed,emqx_app,\n                                    emqx_admin_jwt,emqx_dashboard_monitor,\n                                    emqx_admin,cluster_rpc_mfa,\n                                    cluster_rpc_commit,emqx_acl,\n                                    emqx_enhanced_authn_scram_mnesia,\n                                    emqx_authn_mnesia,emqx_banned,\n                                    emqx_activated_alarm,\n                                    emqx_deactivated_alarm,emqx_telemetry,\n                                    emqx_trace]\n[{'emqx@127.0.0.1',ram_copies}] = [mria_schema,emqx_trie,\n                                   emqx_shared_subscription,emqx_routing_node,\n                                   emqx_route,emqx_exclusive_subscription,\n                                   bpapi,emqx_channel_registry,\n                                   emqx_retainer_index_meta,\n                                   emqx_retainer_message,emqx_retainer_index,\n                                   emqx_ee_schema_registry_serde_tab,\n                                   emqx_gateway_coap_channel_registry]\n414 transactions committed, 32 aborted, 6 restarted, 250 logged to disc\n0 held locks, 0 in queue; 0 local transactions, 0 remote\n0 transactions waits for other nodes: []\n```\n\n----------------------------------------\n\nTITLE: Creating Client Events Table in Oracle Database\nDESCRIPTION: SQL statement to create a table 't_emqx_client_events' for storing EMQX client events including client ID, event type, and creation time.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_emqx_client_events (\n  clientid VARCHAR2(255),\n  event VARCHAR2(255),\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String with Decimal Control in EMQX\nDESCRIPTION: The float2str function converts a floating-point number to a string with a specified number of decimal places. It handles trailing zero truncation and has a decimal range of [0, 253]. The function may return a decimal representation of the binary approximation when precision exceeds the actual float value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfloat2str(0.1, 5) = '0.1'\nfloat2str(0.1, 20) = '0.10000000000000000555'\nfloat2str(0.1, 25) = '0.1000000000000000055511151'\nfloat2str(0.00000000001, 20) = '0.00000000001'\n\n# trailing zeros will be truncated\nfloat2str(0.100001, 5) = '0.1'\n\n# Once the significant digits exceed 16, due to rounding errors, disparate inputs may yield identical outputs.\nfloat2str(123456789.01234565, 8) = '123456789.01234566'\nfloat2str(123456789.01234566, 8) = '123456789.01234566'\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX in Different Modes (Bash)\nDESCRIPTION: Commands to start EMQX in daemon, foreground, or interactive mode. Only one instance of EMQX can run at a time with default configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# start as daemon\n./bin/emqx start\n\n# start in foreground\n./bin/emqx foreground\n\n# start in interactive mode, with Erlang shell\n./bin/emqx console\n```\n\n----------------------------------------\n\nTITLE: EMQX LDAP Authorizer Configuration Example\nDESCRIPTION: This Bash code snippet demonstrates how to configure the EMQX LDAP authorizer using configuration items, including server details, attributes, and query settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/ldap.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = ldap\n\n  server = \"127.0.0.1:389\"\n  publish_attribute = \"mqttPublishTopic\"\n  subscribe_attribute = \"mqttSubscriptionTopic\"\n  all_attribute = \"mqttPubSubTopic\"\n  query_timeout = \"5s\"\n  username = \"root\"\n  password = \"root password\"\n  pool_size = 8\n  base_dn = \"uid=${username},ou=testdevice,dc=emqx,dc=io\"\n  filter = \"(objectClass=mqttUser)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Write-Attributes Request for LwM2M Notification Parameters\nDESCRIPTION: JSON structure for setting notification attributes on a resource, including minimum and maximum periods, threshold values for greater than, less than, and step triggers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": {?ResourcePath},\n  \"pmin\": {?PeriodMin},\n  \"pmax\": {?PeriodMax},\n  \"gt\": {?GreaterThan},\n  \"lt\": {?LessThan},\n  \"st\": {?Step}\n}\n```\n\n----------------------------------------\n\nTITLE: Showing EMQX Client Details\nDESCRIPTION: Command to show detailed information for a specific EMQX client. This example displays information for the client with ID 'emqx_c'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients show emqx_c\nClient(emqx_c, username=undefined, peername=127.0.0.1:59441, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4680, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736435155, connected_at=1684736435155)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Timescale Service via psql\nDESCRIPTION: Command to connect to a Timescale Service instance using the psql client with a service URL\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to service by service URL\npsql \"postgres://tsdbadmin@xxxxx.xxxxx.tsdb.cloud.timescale.com:32541/tsdb?sslmode=require\"\n# Use password in you saved in previous step\nPassword for user tsdbadmin:\n```\n\n----------------------------------------\n\nTITLE: Starting a Gateway\nDESCRIPTION: Starts a previously stopped gateway. The gateway must be loaded but not running for this command to succeed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl gateway start coap\nok\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Schema Validator for Temperature Data\nDESCRIPTION: Example JSON Schema that validates a temperature object containing an integer temp property with a minimum value of 101.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"temp\": {\n      \"type\": \"integer\",\n      \"minimum\": 101\n    }\n  },\n  \"required\": [\"temp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client Certificate File\nDESCRIPTION: Defines the trusted CA certificate file for verifying peer TLS certificates. Allows dynamic updates without restarting EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_19\n\nLANGUAGE: configuration\nCODE:\n```\nssl_client_opts.cacertfile = \"/path/to/cacerts.pem\"\n```\n\n----------------------------------------\n\nTITLE: Querying System Alarm Deactivation Events in EMQX\nDESCRIPTION: SQL statement to extract alarm information from the '$events/sys/alarm_deactivated' event topic. This query retrieves the alarm name, details, message, activation and deactivation times, and node when an EMQX system alarm is deactivated.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  name,\n  details,\n  message,\n  activated_at,\n  deactivated_at,\n  node\nFROM\n  \"$events/sys/alarm_deactivated\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"too_many_processes\",\n  \"details\": {\n    \"usage\": \"99%\",\n    \"high_watermark\": \"80%\"\n  },\n  \"message\": \"99% process usage\",\n  \"activated_at\": 1645003578536000,\n  \"deactivated_at\": 1645004000000000,\n  \"node\": \"emqx@127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Robin Load Balancing in HAProxy for EMQX\nDESCRIPTION: This snippet demonstrates how to set up round robin load balancing for EMQX servers using HAProxy. It evenly distributes requests across multiple backend servers in a circular manner.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:1883 check\n  server emqx2 emqx2-cluster.emqx.io:1883 check\n  server emqx3 emqx3-cluster.emqx.io:1883 check\n```\n\n----------------------------------------\n\nTITLE: Querying Stored MQTT Messages in Oracle Database\nDESCRIPTION: SQL query to check if the MQTT message data has been successfully written into the 't_mqtt_msgs' table in Oracle Database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM t_mqtt_msgs;\n```\n\n----------------------------------------\n\nTITLE: SCRAM Authentication CSV Bootstrap File Format\nDESCRIPTION: Example header format for CSV file used to bootstrap banned clients. The file uses comma delimiters and requires specific headers for client banning configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_17\n\nLANGUAGE: csv\nCODE:\n```\nas,who,by,reason,at,until\n```\n\n----------------------------------------\n\nTITLE: EMQX TCP Listener Configuration\nDESCRIPTION: Configures TCP listener parameters including acceptor pool size and maximum connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.tcp.$name.acceptors = 64\nlisteners.tcp.$name.max_connections = 1024000\n```\n\n----------------------------------------\n\nTITLE: Configuring Core + Replicant Mode in EMQX\nDESCRIPTION: Configuration example showing how to set up a node as a replicant and enable static cluster discovery strategy.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/mria-introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode {\n    ## To set a node as a replicant node:\n    role = replicant\n}\ncluster {\n    ## Enable static discovery strategy:\n    discovery_strategy = static\n    static.seeds = [emqx@host1.local, emqx@host2.local]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Two-way SSL/TLS Authentication with Insecure Option\nDESCRIPTION: Command to test two-way SSL/TLS authentication with MQTTX CLI using the --insecure option to bypass certificate CN validation when the server certificate CN doesn't match the server address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h localhost -p 8883 \\\n  --protocol mqtts \\\n  --ca certs/rootCA.crt \\\n  --cert certs/client-0001.crt \\\n  --key certs/client-0001.key \\\n  --insecure\n```\n\n----------------------------------------\n\nTITLE: Alarm Notification Message Format\nDESCRIPTION: JSON structure for alarm messages published to system topics. Contains fields for alarm name, details, message, activation/deactivation timestamps, and activation status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/alarms.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"details\": \"object\",\n  \"message\": \"string\",\n  \"activate_at\": \"integer\",\n  \"deactivate_at\": \"integer/string\",\n  \"activated\": \"boolean\"\n}\n```\n\n----------------------------------------\n\nTITLE: External Schema Registry Configuration in HCL\nDESCRIPTION: Configuration example for setting up an external Confluent Schema Registry connection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nschema_registry {\n  external {\n    my_external_registry {\n      type = confluent\n      url = \"https://confluent.registry.url:8081\"\n      auth {\n        username = \"myuser\"\n        password = \"secret\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying EMQX Integration Status in Datadog Agent\nDESCRIPTION: Command to check if the EMQX integration is successfully enabled in the Datadog Agent, displaying the instance ID and metrics collection status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/datadog.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-agent status | grep emqx -A 4\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for EMQX Tracing\nDESCRIPTION: Configuration file for the OpenTelemetry Collector that receives trace data from EMQX and forwards it to Jaeger. It sets up OTLP receivers with gRPC protocol and configures the trace data pipeline.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nexporters:\n  otlp:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\n\nprocessors:\n  batch:\n\nextensions:\n  health_check:\n\nservice:\n  extensions: [health_check]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Schema Message with MQTTX\nDESCRIPTION: Command to publish an invalid MQTT message that does not conform to the temperature schema requirements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-validation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t t/1 -m '{\"temp\": 100}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Authorization in EMQX 5.1\nDESCRIPTION: This snippet shows the updated configuration for Redis-based authorization in EMQX 5.1. It uses a more structured format with nested objects for SSL settings and includes new options like auto_reconnect.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_29\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = redis\n  enable = true\n\n  redis_type = single\n  server = \"127.0.0.1:6379\"\n\n  cmd = \"HMGET mqtt_user:${username}\"\n  database = 0\n  password = \"pass\"\n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = myredis\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting MQTT Messages from Topic in SQL\nDESCRIPTION: SQL statement to select all messages from the MQTT topic 't/#' for processing by the rule.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-couchbase.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Server Key Pair with OpenSSL\nDESCRIPTION: Command to create a 2048-bit RSA key pair for the server certificate without password protection. This key will be used for the server's identity in TLS connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/tls-certificate.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out server.key 2048\n```\n\n----------------------------------------\n\nTITLE: RFC3339 to Unix Timestamp with Time Unit in EMQX\nDESCRIPTION: Examples of using rfc3339_to_unix_ts with a time unit parameter to convert RFC3339 datetime strings to Unix timestamps with various precision levels.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'second') = 1708703790\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'millisecond') = 1708703790870\nrfc3339_to_unix_ts('2024-02-23T15:56:30.87Z', 'microsecond') = 1708703790870000\nrfc3339_to_unix_ts('2024-02-23T15:56:30.535904509Z', 'nanosecond') = 1708703790535904509\n```\n\n----------------------------------------\n\nTITLE: EMQX Port Mapping Formula\nDESCRIPTION: Formula for calculating listening ports for Erlang Distribution and Cluster RPC based on the base port and node name suffix.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/security.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nListeningPort = BasePort + Offset\n```\n\n----------------------------------------\n\nTITLE: Gateway TCP Listener Configuration\nDESCRIPTION: Configuration options for TCP listeners including acceptor pool size, TCP socket options, proxy protocol settings, connection limits and authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\ngateway:tcp_listener.acceptors = 16\ngateway:tcp_listener.enable = true\ngateway:tcp_listener.max_connections = 1024\ngateway:tcp_listener.max_conn_rate = 1000\ngateway:tcp_listener.enable_authn = true\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Client Events Rule\nDESCRIPTION: SQL rule statement to capture client connection and disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Authorization Rule for MySQL MQTT ACL\nDESCRIPTION: Example MySQL INSERT statement that adds an authorization rule for a specific user. This rule allows user123 to publish to topics matching the pattern 'data/user123/#' from IP address 127.0.0.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mysql.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql> INSERT INTO mqtt_acl(username, permission, action, topic, ipaddress) VALUES ('user123', 'allow', 'publish', 'data/user123/#', '127.0.0.1');\nQuery OK, 1 row affected (0,01 sec)\n```\n\n----------------------------------------\n\nTITLE: 事件记录 SQL 模板\nDESCRIPTION: 用于将设备上下线记录插入到 emqx_client_events 表的 SQL 模板。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO emqx_client_events(clientid, event, created_at) VALUES (\n  ${clientid},\n  ${event},\n  FROM_UNIXTIME(${timestamp}/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a CoAP Connection with Authentication\nDESCRIPTION: Example using libcoap to create a CoAP connection with client ID, username, and password. The gateway authenticates these credentials and returns a token for subsequent requests.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Initiate a connection request with clientid 123 and username and password admin/public.\n# Returned token is 3404490787\ncoap-client -m post -e \"\" \"coap://127.0.0.1/mqtt/connection?clientid=123&username=admin&password=public\"\n\n3404490787\n```\n\n----------------------------------------\n\nTITLE: Defining Location Information Report Structure in JSON\nDESCRIPTION: This snippet defines the JSON structure for a location information report message including essential fields like alarm, status, latitude, and longitude. It serves as a template for reporting vehicle location data with additional optional fields for extended information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\" : {\n    \"msg_id\" : 1,\n    \"encrypt\": 0,\n    \"len\": VAL,\n    \"phone\": 13900000000,\n    \"msg_sn\": 0\n  },\n  \"body\": {\n    \"alarm\": VAL,\n    \"status\": VAL,\n    \"latitude\": VAL,\n    \"longitude\": VAL,\n    \"altitude\": VAL,\n    \"speed\": VAL,\n    \"direction\": VAL,\n    \"time\": VAL,\n    \"extra\": {\n      \"mileage\": VAL,\n      \"fuel_unit\": VAL,\n      \"speed\": VAL,\n      \"alarm_id\": VAL,\n      \"overspeed_alarm\": {\n        \"type\": VAL,\n        \"id\": VAL\n      },\n      \"in_out_alarm\": {\n        \"type\": VAL,\n        \"id\": VAL,\n        \"direction\": VAL\n      },\n      \"path_time_alarm\": {\n        \"id\": VAL,\n        \"time\": VAL,\n        \"result\": VAL\n      },\n      \"signal\": {\n        \"low_beam\": VAL,\n        \"high_beam\": VAL\n      },\n      \"right_turn\": VAL,\n      \"left_turn\": VAL,\n      \"break\": VAL,\n      \"reverse\": VAL,\n      \"fog\": VAL,\n      \"side_marker\": VAL,\n      \"horn\": VAL,\n      \"air_conditioner\": VAL,\n      \"neutral\": VAL,\n      \"retarder\": VAL,\n      \"abs\": VAL,\n      \"heater\": VAL,\n      \"cluth\": VAL,\n      \"io_status\": {\n        \"deep_sleep\": VAL,\n        \"sleep\": VAL\n      },\n      \"analog\": {\n        \"ad0\": VAL,\n        \"ad1\": VAL\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Retained Messages with retainer Commands\nDESCRIPTION: View and manage retained messages, including displaying message counts, listing topics, and cleaning retained messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl retainer info\nNumber of retained messages: 3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl retainer topics\n$SYS/brokers\n$SYS/brokers/emqx@127.0.0.1/sysdescr\n$SYS/brokers/emqx@127.0.0.1/version\n```\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl retainer clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl retainer clean t/1\n```\n\n----------------------------------------\n\nTITLE: Adding EMQX Subscription\nDESCRIPTION: Command to manually add a subscription for a client in EMQX. This example adds a subscription to topic 't/1' with QoS 1 for client 'emqx_a'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl subscriptions add emqx_a t/1 1\nok\n```\n\n----------------------------------------\n\nTITLE: Resetting EMQX Dashboard Admin Password\nDESCRIPTION: Command to reset the EMQX Dashboard admin password when forgotten, allowing setting a new password without requiring the old one\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/faq.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl admin <Username> <New Password>\n```\n\n----------------------------------------\n\nTITLE: Splitting Sparkplug B Messages into Multiple Messages\nDESCRIPTION: This SQL-like rule decodes a Sparkplug B payload and splits it into multiple messages, with each metric in the original payload becoming a separate Sparkplug B encoded message. It uses jq to create individual messages for each metric.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n   # Save payload\n   . as $payload |\n   # Output one message for each metric\n   .metrics[] |\n        . as $metric |\n        # Let the current metric be the only one in the metrics array\n        $payload | .metrics = [ $metric ]\n   ',\n   sparkplug_decode(payload)) AS item\nDO sparkplug_encode(item) AS output_payload\nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Client Connection Events\nDESCRIPTION: SQL rule to capture client connection and disconnection events for forwarding to RocketMQ\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM \n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Private Key Passphrase from File\nDESCRIPTION: Shows how to configure EMQX to read the SSL private key passphrase from a secret file using the new file path syntax.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n...ssl.password = \"file://{path-to-secret-file}\"\n```\n\n----------------------------------------\n\nTITLE: Selecting MQTT Messages for Oracle Database Storage in EMQX\nDESCRIPTION: SQL rule for selecting all fields from MQTT messages under the topic 't/#' to be saved in Oracle Database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX\nDESCRIPTION: This command removes EMQX and its configuration files from the system using apt.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove --purge emqx\n```\n\n----------------------------------------\n\nTITLE: Area List JSON Format for Circular Area Settings in JT/T 808 Protocol\nDESCRIPTION: Example JSON format for representing circular geofence areas in the Setting Circular Area message (msg_id: 34304/0x8600). Each area definition includes ID, properties, center coordinates, radius, time constraints, and speed limits.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\": ID,\n   \"flag\": FLAG,\n   \"center_latitude\": CEN_LAT,\n   \"center_longitude\": CEN_LON,\n   \"radius\": RADIUS,\n   \"start_time\": START_TIME,\n   \"end_time\": END_TIME,\n   \"max_speed\": MAX_SPEED,\n   \"overspeed_duration\": OVERSPEED_DURATION\n   },\n  ...\n ]\n```\n\n----------------------------------------\n\nTITLE: System Topic Path Examples in EMQX\nDESCRIPTION: Examples of system topic paths in EMQX. These topics begin with $SYS/brokers/{node}/ where {node} is the name of the node generating the event or message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/mqtt-system-topics.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$SYS/brokers/emqx@127.0.0.1/version\n$SYS/brokers/emqx@127.0.0.1/uptime\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Logging in EMQX\nDESCRIPTION: Configuration block for console-based logging in EMQX, typically used in Docker containers. Defines settings for log formatting, level, time offset, and timestamp format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/logs.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlog {\n  console {\n    formatter = json\n    level = warning\n    time_offset = system\n    timestamp_format = auto\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Reverse Proxy for MQTT WebSocket SSL\nDESCRIPTION: This snippet demonstrates how to configure NGINX to reverse proxy MQTT WebSocket connections with SSL/TLS encryption. It includes SSL settings, WebSocket upgrade configuration, and proxy settings for HTTPS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhttp {\n  upstream mqtt_websocket_servers {\n    server emqx1-cluster.emqx.io:8083;\n    server emqx2-cluster.emqx.io:8083;\n  }\n\n  server {\n    listen 443 ssl;\n    server_name mqtt.example.com;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_certificate /usr/local/nginx/certs/emqx.pem;\n    ssl_certificate_key /usr/local/nginx/certs/emqx.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    # To enable mutual authentication, add the CA certificate and client certificate verification\n    # ssl_client_certificate /usr/local/nginx/certs/ca.pem;\n    # ssl_verify_client on;\n\n    location /mqtt {\n        proxy_pass http://mqtt_websocket_servers;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n\n        # Reverse proxy real IP\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # Disable caching\n        proxy_buffering off;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorizer with POST Request in EMQX\nDESCRIPTION: Example configuration for an HTTP authorizer using POST request in EMQX. It includes method, URL, body, and headers settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/http.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = http\n\n    method = post\n    url = \"http://127.0.0.1:32333/authz/${peercert}?clientid=${clientid}\"\n    body {\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n    headers {\n        \"Content-Type\" = \"application/json\"\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSK File with Identity and Secret Values\nDESCRIPTION: Example of a PSK file containing identity and secret key pairs. Each line contains one PSK identity and its corresponding shared secret separated by a colon.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/psk-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# One data per line, in the format of PSKIdentity:SharedSecret\nemqx_c:BA0DB2A3448345A3A13A91C2ADA44778\nemqx_a:A6FC9EDF62864125AAE7658BEAE6170C\n```\n\n----------------------------------------\n\nTITLE: Forcing an EMQX Node to Leave a Cluster\nDESCRIPTION: Shows how to force a specific node to leave the EMQX cluster. This command is executed from another node in the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl cluster force-leave emqx@s2.emqx.io\n```\n\n----------------------------------------\n\nTITLE: Enabling ExProto Gateway via REST API\nDESCRIPTION: This bash script uses `curl` to send a PUT request to the EMQX REST API to enable and configure the ExProto gateway. It sets parameters such as the gateway name, whether it is enabled, the mountpoint, the server bind address, and listener settings. The user needs to provide their application key and security key for authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/exproto' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"exproto\",\n  \"enable\": true,\n  \"mountpoint\": \"exproto/\",\n  \"server\": {\n    \"bind\": \"0.0.0.0:9100\"\n  },\n  \"handler\": {\n    \"address\": \"http://127.0.0.1:9001\",\n    \"ssl_options\": {\"enable\": false}\n  },\n  \"listeners\": [\n    {\n      \"type\": \"tcp\",\n      \"bind\": \"7993\",\n      \"name\": \"default\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting EMQX Configuration via Environment Variables\nDESCRIPTION: Example of using environment variables to override EMQX configuration settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport EMQX_LISTENERS__SSL__DEFAULT__BIND='\"127.0.0.1:8883\"'\nexport EMQX_LISTENERS__SSL__DEFAULT__SSL_OPTIONS__CIPHERS='[\"TLS_AES_256_GCM_SHA384\"]'\n```\n\n----------------------------------------\n\nTITLE: Current Unix Timestamp in EMQX\nDESCRIPTION: Example of using now_timestamp to get the current system time as a Unix timestamp in seconds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nnow_timestamp() = 1708913853\n```\n\n----------------------------------------\n\nTITLE: Node Evacuation Example Command in EMQX\nDESCRIPTION: Practical example of node evacuation command showing migration of clients from one node to two target nodes with specific rate and timing parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance start --evacuation \\\n\t--wait-health-check 60 \\\n\t--wait-takeover 200 \\\n\t--conn-evict-rate 30 \\\n\t--sess-evict-rate 30 \\\n\t--migrate-to \"emqx2@127.0.0.1 emqx3@127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: MQTT Multi-Level Wildcard Example\nDESCRIPTION: This example demonstrates the usage of the multi-level wildcard '#' in MQTT topic filters. The '#' wildcard matches any number of levels in the topic hierarchy, including zero. The code shows valid and invalid examples of its usage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"#\" 有效，匹配所有主题\n\"sensor/#\" 有效\n\"sensor/bedroom#\" 无效 (没有占据整个层级)\n\"sensor/#/temperature\" 无效 (不是主题最后一个字符)\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Message Storage in DynamoDB\nDESCRIPTION: SQL statement for selecting all fields from MQTT messages under the topic 't/#' to be saved in DynamoDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Using subbits for Binary Data Manipulation in EMQX\nDESCRIPTION: Examples of the subbits function that extracts and converts bits from binary data using different parameters for type, signedness, and endianness.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# 40782 = 0x9F4E\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'unsigned', 'big') = 40782\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'signed', 'big') = -24754\n\n# 20127 = 0x4E9F\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'unsigned', 'little') = 20127\n\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'float', 'unsigned', 'big') = -0.00713348388671875\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'float', 'signed', 'big') = -0.00713348388671875\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing in EMQX\nDESCRIPTION: SQL rule to select all messages from the t/# MQTT topic for processing and forwarding to GreptimeDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MQTTX Subscription Command for Testing Kafka Source Rule\nDESCRIPTION: This command uses MQTTX to subscribe to the topic 't/1' for testing the Kafka source rule in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -v\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table Structure for EMQX Authentication\nDESCRIPTION: SQL command to create a MySQL table for storing MQTT user credentials with fields for username, password hash, salt, and superuser status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mysql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `mqtt_user` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `username` varchar(100) DEFAULT NULL,\n  `password_hash` varchar(100) DEFAULT NULL,\n  `salt` varchar(35) DEFAULT NULL,\n  `is_superuser` tinyint(1) DEFAULT 0,\n  `created` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `mqtt_username` (`username`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings in EMQX\nDESCRIPTION: The replace function substitutes all occurrences of a search pattern with a replacement string. It can be used to modify strings by replacing specific substrings or removing them by using an empty replacement.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nreplace('ab..cd..ef', '..', '**') = 'ab**cd**ef'\nreplace('ab..cd..ef', '..', '') = 'abcdef'\n```\n\n----------------------------------------\n\nTITLE: Managing EMQX Cluster with cluster Commands\nDESCRIPTION: View and manage cluster status, including joining and leaving clusters, and forcing nodes to leave the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster join emqx2@127.0.0.1\nFailed to join the cluster: {node_down,'emqx2@127.0.0.1'}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster leave\nFailed to leave the cluster: node_not_in_cluster\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster force-leave emqx2@127.0.0.1\nFailed to remove the node from cluster: node_not_in_cluster\n```\n\n----------------------------------------\n\nTITLE: TCP FIN-WAIT-2 Timeout Configuration\nDESCRIPTION: Sets the timeout period for sockets in FIN-WAIT-2 state.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.tcp_fin_timeout=15\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Node Loss in EMQX Cluster\nDESCRIPTION: Command to notify the EMQX cluster that a node is no longer part of it, preparing for reallocation of shard replicas.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl cluster force-leave emqx@n2.local\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Shared Topics Using MQTTX CLI\nDESCRIPTION: Commands demonstrating how to subscribe to shared topics using MQTTX CLI tool. Shows subscription setup for multiple clients across different groups.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-shared-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Client A and B subscribe to topic `$share/my_group1/t/1`\nmqttx sub -t '$share/my_group1/t/1' -h 'localhost' -p 1883\n\n## Client C and D subscribe to topic  `$share/my_group2/t/1`\nmqttx sub -t '$share/my_group2/t/1' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for HStreamDB TLS Service\nDESCRIPTION: This YAML configuration sets up a dual-node HStreamDB TLS service with ZooKeeper, HStore, and certificate generation components. It defines network settings, volume mappings, and startup commands for each service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  step-ca:\n    image: smallstep/step-ca:0.23.0\n    container_name: quickstart-tls-step-ca\n    networks:\n      - quickstart-tls\n    volumes:\n      - ${step_ca}:/home/step\n    environment:\n      - DOCKER_STEPCA_INIT_NAME=HStream\n      - DOCKER_STEPCA_INIT_DNS_NAMES=step-ca\n\n  generate-hstream-cert:\n    image: smallstep/step-ca:0.23.0\n    container_name: quickstart-tls-generate-hstream-cert\n    depends_on:\n      step-ca:\n        condition: service_healthy\n    networks:\n      - quickstart-tls\n    volumes:\n      - ${step_ca}:/home/step\n    command:\n      - bash\n      - \"-c\"\n      - |\n        sleep 1\n        if [ -f hstream.crt ]; then exit 0; fi\n        step ca certificate \"hstream\" hstream.crt hstream.key \\\n        --provisioner-password-file secrets/password --ca-url https://step-ca:9000 \\\n        --root certs/root_ca.crt \\\n        --san localhost \\\n        --san 127.0.0.1 \\\n        --san 172.100.0.10 \\\n        --san 172.100.0.11 \\\n        --san quickstart-tls-hserver-0 \\\n        --san quickstart-tls-hserver-1\n\n  hserver0:\n    image: hstreamdb/hstream:v0.17.0\n    container_name: quickstart-tls-hserver-0\n    depends_on:\n      - generate-hstream-cert\n      - zookeeper\n      - hstore\n    ports:\n      - \"127.0.0.1:6570:6570\"\n    networks:\n      quickstart-tls:\n        ipv4_address: 172.100.0.10\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /tmp:/tmp\n      - data_store:/data/store\n      - ${step_ca}:/data/server\n    command:\n      - bash\n      - \"-c\"\n      - |\n        set -e\n        /usr/local/script/wait-for-storage.sh hstore 6440 zookeeper 2181 600; \\\n        timeout=60; \\\n        until ( \\\n           [ -f /data/server/hstream.crt ] && [ -f /data/server/hstream.key ] \\\n        ) >/dev/null 2>&1; do\n            >&2 echo 'Waiting for tls files ...'\n            sleep 1\n            timeout=$$((timeout - 1))\n            [ $$timeout -le 0 ] && echo 'Timeout!' && exit 1;\n        done; \\\n        /usr/local/bin/hstream-server \\\n        --bind-address 0.0.0.0 --port 26570 \\\n        --internal-port 6571 \\\n        --server-id 100 \\\n        --seed-nodes \"hserver0:6571,hserver1:6573\" \\\n        --advertised-address $$(hostname -I | awk '{print $$1}') \\\n        --metastore-uri zk://zookeeper:2181 \\\n        --store-config /data/store/logdevice.conf \\\n        --store-admin-host hstore --store-admin-port 6440 \\\n        --io-tasks-path /tmp/io/tasks \\\n        --io-tasks-network quickstart-tls \\\n        --tls-cert-path /data/server/hstream.crt \\\n        --tls-key-path /data/server/hstream.key \\\n        --advertised-listeners l1:hstream://172.100.0.10:6570 \\\n        --listeners-security-protocol-map l1:tls\n\n        # NOTE:\n        # advertised-listeners ip addr should same as container addr for tls listener\n\n  hserver1:\n    image: hstreamdb/hstream:v0.17.0\n```\n\n----------------------------------------\n\nTITLE: Publishing Message in Connection Mode\nDESCRIPTION: Example using libcoap to publish a message to a topic in Connection Mode, which requires client ID and authentication token.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m post -e \"Hi, this is libcoap\" \"coap://127.0.0.1/ps/coap/test?clientid=123&token=3404490787\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric for Cluster Sessions Count\nDESCRIPTION: A new gauge metric 'emqx_cluster_sessions_count' has been added to track the number of sessions within the cluster. This metric is integrated into Prometheus for easy monitoring.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_22\n\nLANGUAGE: prometheus\nCODE:\n```\n# TYPE emqx_cluster_sessions_count gauge\nemqx_cluster_sessions_count 1234\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Search Query\nDESCRIPTION: cURL command to search and retrieve documents from the device_data index\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"localhost:9200/device_data/_search?pretty\"\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Docker\nDESCRIPTION: Commands to install and start Redis using Docker, set a password, and verify the installation by testing basic Redis commands\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 启动一个 Redis 容器并设置密码为 public\ndocker run --name redis -p 6379:6379 -d redis --requirepass \"public\"\n\n# 进入容器\ndocker exec -it redis bash\n\n# 在容器中连接到 Redis 服务器，需要通过 AUTH 命令认证\nredis-cli\n127.0.0.1:6379> AUTH public\nOK\n\n# 验证安装结果\n127.0.0.1:6379> set emqx \"Hello World\"\nOK\n127.0.0.1:6379> get emqx\n\"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining Command Request Payload Structure for LwM2M Communication\nDESCRIPTION: JSON payload format for LwM2M command requests. Includes a request ID, message type (such as read, write, discover), and command-specific data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": {?MsgType},\n  \"data\": {?Data}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Client ID for MQTT Broker Connection in EMQX\nDESCRIPTION: Demonstrates the pattern used by EMQX to automatically generate unique client IDs for MQTT broker connections. The pattern includes a client ID prefix, connector name, random string, and connection sequence number.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[Client ID Prefix]:{Connector Name}{8-digit Random String}:{Connection Sequence Number in the Pool}\n```\n\n----------------------------------------\n\nTITLE: New Rule Engine Functions in EMQX\nDESCRIPTION: Introduced two new functions in the rule engine: 'is_empty' to check if a map or array is empty, and 'map_size' to return the size of a map.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  is_empty(payload) as payload_empty,\n  map_size(payload) as payload_size\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Starting Microsoft SQL Server Docker Container\nDESCRIPTION: This bash command starts a Docker container running Microsoft SQL Server 2022. It sets the SA password and accepts the EULA.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name sqlserver -p 1433:1433 -e ACCEPT_EULA=Y -e MSSQL_SA_PASSWORD=mqtt_public1 -d mcr.microsoft.com/mssql/server:2022-CU15-ubuntu-22.04\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Messages for Microsoft SQL Server Storage in EMQX\nDESCRIPTION: SQL rule for selecting all fields from MQTT messages under the topic 't/#' for storage in Microsoft SQL Server. Includes a tip for handling Unicode characters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  sqlserver_bin2hexstr(str_utf16_le(payload)) as payload\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Pagination Response Structure in EMQX API\nDESCRIPTION: Example JSON response structure showing pagination metadata in EMQX API responses. Includes count, limit, page number, and hasnext flag for determining if more pages exist.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":[],\n  \"meta\":{\n    \"count\":0,\n    \"limit\":20,\n    \"page\":1,\n    \"hasnext\":false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Paho MQTT Python Client\nDESCRIPTION: Installation command for the Eclipse Paho MQTT Python client library using pip package manager.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/python.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install paho-mqtt\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Inflight Window and Message Queue\nDESCRIPTION: Configuration options for EMQX's inflight window and message queue. These settings control the maximum inflight window size, message queue length, and whether to store QoS 0 messages in the queue for offline clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/design/inflight-window-and-message-queue.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 配置项                 | 类型 | 可选值          | 默认值 | 描述                                                   |\n| ---------------------- | ---- | --------------- | ------ | ------------------------------------------------------ |\n| mqtt.max_inflight      | 整数 | (0, 65536)      | 32     | Inflight 窗口长度限制，0 表示无限制                    |\n| mqtt.max_mqueue_len    | 整数 | [0, ∞)          | 1000   | 消息队列长度限制，0 表示无限制                         |\n| mqtt.mqueue_store_qos0 | 枚举 | `true`, `false` | true   | 当客户端离线时，EMQX 是否将 QoS 0 消息存储到消息队列中 |\n```\n\n----------------------------------------\n\nTITLE: Data Bridge Source Rule Configuration in EMQX\nDESCRIPTION: Demonstrates configuring a rule that uses a data bridge as a data source for processing messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.receive_msgs_from_remote_mqtt_broker {\n        sql = \"SELECT * FROM \\\"$bridges/mqtt:my_mqtt_source\\\" WHERE username = 'EMQX'\"\n        actions = [{function = console}]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to RabbitMQ Using rabbitmqadmin\nDESCRIPTION: This command publishes a message to RabbitMQ using the rabbitmqadmin tool. It sets the routing key to 'message-send' and includes a JSON payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqadmin --username=guest --password=guest \\\n     publish routing_key=message-send \\\n     payload=\"{ \\\"msg\\\": \\\"Hello EMQX\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Current Unix Timestamp with Time Unit in EMQX\nDESCRIPTION: Example of using now_timestamp with a time unit parameter to get current system time with higher precision.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nnow_timestamp('microsecond') = 1708913828814315\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Test\nDESCRIPTION: MQTTX command to publish a test message to topic t/1 for testing the InfluxDB integration\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello InfluxDB\" }'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Client Connection Events\nDESCRIPTION: SQL statement for a rule that captures client connection and disconnection events to be recorded in HStreamDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Launching OpenTelemetry Collector with Docker Compose\nDESCRIPTION: Command to start the OpenTelemetry Collector using Docker Compose with the provided configuration file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/logs.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose-otel-logs.yaml up\n```\n\n----------------------------------------\n\nTITLE: Enabling Durable Sessions in EMQX Configuration\nDESCRIPTION: This code snippet shows how to enable the Durable Sessions feature in EMQX by modifying the etc/emqx.conf file. It sets the 'enable' parameter to true within the 'durable_sessions' configuration block.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/durability_introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndurable_sessions {\n  enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for ACL IP Address List Support in EMQX 4.3.6\nDESCRIPTION: References a GitHub pull request that adds support for IP address lists in ACL in EMQX version 4.3.6.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5328](https://github.com/emqx/emqx/pull/5328)\n```\n\n----------------------------------------\n\nTITLE: ExProto Gateway Configuration using HTTP API\nDESCRIPTION: cURL command example demonstrating how to configure and enable the ExProto Gateway through the HTTP API, including basic settings and listener configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/exproto.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/exproto' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"exproto\",\n  \"enable\": true,\n  \"mountpoint\": \"exproto/\",\n  \"server\": {\n    \"bind\": \"0.0.0.0:9100\"\n  }\n  \"handler\": {\n    \"address\": \"http://127.0.0.1:9001\"\n    \"ssl_options\": {\"enable\": false}\n  }\n  \"listeners\": [\n    {\n      \"type\": \"tcp\",\n      \"bind\": \"7993\",\n      \"name\": \"default\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Converting Any Term to UTF-8 String in EMQX\nDESCRIPTION: The str_utf8 function behaves identically to the str function but ensures UTF-8 encoding. It handles all data types and follows the same rules for float conversion, truncating trailing zeros and preserving up to 10 decimal places.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nstr_utf8(100) = '100'\nstr_utf8(nth(1, json_decode('[false]'))) = 'false'\nstr_utf8(json_decode({\"msg\": \"hello\"})) = '{\"msg\":\"hello\"}'\nstr_utf8(json_decode('[{\"msg\": \"hello\"}]')) = '[{\"msg\":\"hello\"}]'\n\n# Trailing zeros are truncated\n# Up to 10 digits are preserved past the decimal point\nstr_utf8(0.30000000040) = '0.3000000004'\nstr_utf8(0.30000000004) = '0.3'\n\n# Rounded to 10 digits after the decimal\n# Rounded after the 10th digit\nstr_utf8(3.14159265359) = '3.1415926536'\nstr_utf8(0.000000314159265359) = '0.0000003142'\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Build Options\nDESCRIPTION: Configure command with necessary modules for MQTT load balancing including SSL and stream support\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./configure \\\n --with-threads \\\n --with-http_stub_status_module \\\n  --with-http_ssl_module \\\n  --with-http_realip_module \\\n  --with-stream \\\n  --with-stream_ssl_module\n```\n\n----------------------------------------\n\nTITLE: Structuring Single Resource Write Request for LwM2M Operations\nDESCRIPTION: JSON structure for writing a value to a single resource. Includes path, data type, and the value to be written.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path\": {?ResourcePath},\n    \"type\": {?ValueType},\n    \"value\": {?Value}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HStreamDB Streams for MQTT Data\nDESCRIPTION: Bash commands to create 'mqtt_connect' and 'mqtt_message' streams in HStreamDB using the HStream CLI with TLS configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec -it quickstart-tls-hserver-0 bash\n# Create Stream `mqtt_connect`\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream create mqtt_connect\n# Create Stream `mqtt_message`\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream create mqtt_message\n# List all Streams\nroot@75c9351cbb38:/# hstream --tls-ca /data/server/certs/root_ca.crt stream list\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Proper EMQX Node Naming\nDESCRIPTION: YAML configuration snippet for docker-compose.yml that ensures EMQX nodes have a consistent hostname using FQDN format. This avoids data loss and helps resolve container health check issues.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# xxx.yyy.zzz(docker.emqx.com) should be in FQDN format\nhostname: docker.emqx.com\n environment:\n      - EMQX_HOST=docker.emqx.com\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Client ID for MQTT Broker Connection\nDESCRIPTION: Shows an example of a client ID generated by EMQX for MQTT broker connections, using 'myprefix' as the client ID prefix and 'foo' as the connector name.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmyprefix:foo2bd61c44:1\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication in EMQX 5.1\nDESCRIPTION: This snippet demonstrates the updated configuration for HTTP-based authentication in EMQX 5.1. It uses a more structured format with nested objects for body, headers, and SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_22\n\nLANGUAGE: hocon\nCODE:\n```\n{\n    mechanism = password_based\n    backend = http\n    enable = true\n\n    method = post\n    url = \"http://127.0.0.1:80/mqtt/auth\"\n    body {\n        username = \"${username}\"\n        clientid = \"${clientid}\"\n        password = \"${password}\"\n    }\n    headers {\n        \"Content-Type\" = \"application/x-www-form-urlencoded\"\n    }\n    request_timeout = \"5s\"\n    connect_timeout = \"5s\"\n    pool_size = 32\n    \n    enable_pipelining = 100\n    \n    ssl {\n      enable = true\n      verify = verify_peer\n    \n      keyfile = path/to/your/keyfile\n      certfile = path/to/your/certfile\n      cacertfile = path/to/your/cafile.pem\n      \n      server_name_indication = myhttp\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization POST Configuration Example in HCL\nDESCRIPTION: Configuration example for HTTP authorization using POST method. It specifies the endpoint URL, request body with placeholders, and headers for the HTTP authorization request.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    type = http\n\n    method = post\n    url = \"http://127.0.0.1:8080/authz?clientid=${clientid}\"\n    body {\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n    headers {\n        \"Content-Type\" = \"application/json\"\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration for MySQL in EMQX\nDESCRIPTION: SQL configuration snippet showing password hash algorithm settings and the SQL query template for retrieving user credentials from MySQL database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mysql.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npassword_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n}\n\nquery = \"SELECT password_hash, salt, is_superuser FROM mqtt_user WHERE username = ${username} LIMIT 1\"\n```\n\n----------------------------------------\n\nTITLE: Select Field from JSON Payload with Aliasing and WHERE Clause\nDESCRIPTION: This SQL query selects the 'x' field from the JSON payload of messages originating from any topic ('#'), aliases it as 'x', and filters for messages where 'x' is equal to 1. This demonstrates how to extract and filter data within a JSON payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload.x as x FROM \"#\" WHERE x = 1\n```\n\n----------------------------------------\n\nTITLE: Logging Client TNS Attribute in EMQX\nDESCRIPTION: Enhanced logging to include the client attribute 'tns' if it exists in the client metadata, avoiding duplication if the client ID is already prefixed with the 'tns' value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n% Example of how the tns attribute might be logged\nlog_client_info(ClientId, Metadata) ->\n    case maps:get(tns, Metadata, undefined) of\n        undefined -> ok;\n        Tns -> logger:info(\"Client connected\", [{client_id, ClientId}, {tns, Tns}])\n    end.\n```\n\n----------------------------------------\n\nTITLE: TCP Socket Buffer Configuration\nDESCRIPTION: Optimizes TCP socket read/write buffer sizes for improved network performance.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.core.rmem_default=262144\nsysctl -w net.core.wmem_default=262144\nsysctl -w net.core.rmem_max=16777216\nsysctl -w net.core.wmem_max=16777216\nsysctl -w net.core.optmem_max=16777216\n\n#sysctl -w net.ipv4.tcp_mem='16777216 16777216 16777216'\nsysctl -w net.ipv4.tcp_rmem='1024 4096 16777216'\nsysctl -w net.ipv4.tcp_wmem='1024 4096 16777216'\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Schema for MQTT User Authentication in OpenLDAP\nDESCRIPTION: This schema defines an attribute named 'isSuperuser' to indicate whether a user is a superuser, and an object class named 'mqttUser' which represents the user with required 'uid' and 'userPassword' attributes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/ldap.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nattributetype ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.1.4 NAME 'isSuperuser'\n\tEQUALITY booleanMatch\n\tSYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\tSINGLE-VALUE\n\tUSAGE userApplications )\n\nobjectclass ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.4 NAME 'mqttUser'\n\tSUP top\n\tSTRUCTURAL\n\tMAY ( isSuperuser )\n    MUST ( uid $ userPassword ) )\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing\nDESCRIPTION: SQL query to select all messages from devices events topic for processing in GCP Pub/Sub Producer rule.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-gcp-pubsub.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"/devices/+/events\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Site to Durable Storage Replicas in EMQX CLI\nDESCRIPTION: This command adds a site to the list of replicas for the durable storage. It updates one site at a time, similar to the 'set_replicas' command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/management.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/emqx_ctl ds join messages B2A7DBB2413CD6EE\nok\n```\n\n----------------------------------------\n\nTITLE: Importing Users via CURL POST Request\nDESCRIPTION: Example of using curl to import user data via multipart form-data POST request to the EMQX authentication endpoint.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/user_management.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u admin:public -X 'POST' \\\n    -H 'Content-Type: multipart/form-data' \\\n    -F 'filename=@/tmp/myusers.csv' \\\n    'http://localhost:18083/api/v5/authentication/password_based%3Abuilt_in_database/import_users'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Command Template for Message Caching\nDESCRIPTION: Redis HSET command template to store messages with clientid as key and fields like username, payload, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHSET emqx_messages:${clientid} username ${username} payload ${payload} timestamp ${timestamp}\n```\n\n----------------------------------------\n\nTITLE: Redis Command Template for Message Caching\nDESCRIPTION: Redis HSET command template for storing message data with clientid as key\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHSET emqx_messages:${clientid} username ${username} payload ${payload} timestamp ${timestamp}\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Permission Data to Deny Retained Messages for MQTT User\nDESCRIPTION: Illustrates how to add permission data in Redis to deny a user from publishing retained messages to a specific topic using HSET command and JSON string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/3 '{ \"action\": \"publish\", \"retain\": false }'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener in EMQX\nDESCRIPTION: This snippet demonstrates how to configure a TCP listener on port 1883 with a maximum of 1,024,000 concurrent connections. It sets the bind address and maximum connections allowed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/listener.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.tcp.default {\n  bind = \"0.0.0.0:1883\"\n  max_connections = 1024000\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling EMQX Plugin\nDESCRIPTION: Command to enable automatic startup of a plugin in EMQX and specify its startup position. This example enables the 'emqx_auth_mnesia' plugin and sets its position to 'front'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins enable emqx_auth_mnesia-3.0.1 front\n```\n\n----------------------------------------\n\nTITLE: TCP Connection Tracking Configuration\nDESCRIPTION: Sets parameters for TCP connection tracking and timeout values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.nf_conntrack_max=1000000\nsysctl -w net.netfilter.nf_conntrack_max=1000000\nsysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=30\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Node Name in Configuration File\nDESCRIPTION: Sets the node name in the EMQX configuration file. This is essential for identifying nodes in a cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode.name = emqx@s1.emqx.io\n```\n\n----------------------------------------\n\nTITLE: Clearing a Retained Message with MQTTX CLI\nDESCRIPTION: Command to clear a retained message by publishing an empty message with the retain flag set to true. This removes the retained message from the broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-retained-message.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '' --retain true -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Publishing Message in Connectionless Mode\nDESCRIPTION: Example using libcoap to publish a message to a topic in Connectionless Mode, which doesn't require authentication token.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m post -e \"Hi, this is libcoap\" \"coap://127.0.0.1/ps/coap/test\"\n```\n\n----------------------------------------\n\nTITLE: EMQX 5.1 JWT Configuration\nDESCRIPTION: Updated JWT authentication configuration for EMQX 5.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  mechanism = jwt\n  from = password,\n  acl_claim_name = acl\n  use_jwks = true\n  algorithm = \"public-key\"\n  verify_claims = {\n    username = \"${username}\n  }\n  \n  ssl {\n    enable = true\n  }\n  \n  endpoint = \"https://127.0.0.1:8080/jwks\"\n}\n```\n\n----------------------------------------\n\nTITLE: IoTDB Data Query\nDESCRIPTION: SQL query to select all data from the root.sg27 path in IoTDB\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from root.sg27\n```\n\n----------------------------------------\n\nTITLE: Client Unsubscribed Event JSON Payload in EMQX\nDESCRIPTION: JSON payload structure for client unsubscription events published to $SYS/brokers/${node}/clients/${clientid}/unsubscribed. Contains information about the topic being unsubscribed from and client identification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/mqtt-system-topics.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"username\":\"foo\",\n    \"ts\":1625572213899,\n    \"topic\":\"/the/best/mqtt/broker/is/emqx\",\n    \"protocol\":\"mqtt\",\n    \"clientid\":\"emqtt-8348fe27a87976ad4db3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration File\nDESCRIPTION: Sample Prometheus configuration YAML for scraping EMQX metrics including stats, auth, and data integration endpoints\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/prometheus.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# prometheus.yaml\nglobal:\n  scrape_interval:     10s # The default scrape interval is every 10 seconds.\n  evaluation_interval: 10s # The default evaluation interval is every 10 seconds.\n  # On this machine, every time series will be exported by default.\n  external_labels:\n    monitor: 'emqx-monitor'\nscrape_configs:\n  - job_name: 'emqx_stats'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/stats'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n\n  - job_name: 'emqx_auth'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/auth'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n\n  - job_name: 'emqx_data_integration'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/data_integration'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n```\n\n----------------------------------------\n\nTITLE: Mnesia/ETS Table Structure Definition\nDESCRIPTION: Definition of database tables used in EMQX for storing connection, session, subscription, and routing information. Includes both ETS (Erlang Term Storage) and Mnesia tables with their purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/design/design.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Table                    | Type   | Description                     |\n| :----------------------- | :----- | :------------------------------ |\n| emqx_conn                | ets    | Connection Table                |\n| emqx_metrics             | ets    | Metrics Table                   |\n| emqx_session             | ets    | Session Table                   |\n| emqx_hooks               | ets    | Hooks Table                     |\n| emqx_subscriber          | ets    | Subscriber Table                |\n| emqx_subscription        | ets    | Subscription Table              |\n| emqx_admin               | mnesia | The Dashboard admin users Table |\n| emqx_retainer            | mnesia | Retained Message Table          |\n| emqx_shared_subscription | mnesia | Shared Subscription Table       |\n| emqx_session_registry    | mnesia | Global Session Registry Table   |\n| emqx_alarm_history       | mnesia | Alarms History                  |\n| emqx_alarm               | mnesia | Alarms                         |\n| emqx_banned              | mnesia | Built-In Banned Table           |\n| emqx_route               | mnesia | Global Route Table              |\n| emqx_trie                | mnesia | Trie Table                      |\n| emqx_trie_node           | mnesia | Trie Node Table                 |\n| mqtt_app                 | mnesia | App table                       |\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Cluster with Kubernetes\nDESCRIPTION: This code snippet configures the EMQX cluster to use Kubernetes for automatic discovery. It sets the Kubernetes API server address, the service name for EMQX, and the address type for connecting to nodes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncluster {\n    discovery_strategy = k8s\n    k8s {\n        apiserver = \"http://10.110.111.204:8080\"\n        service_name = emqx\n        address_type = ip\n        suffix = \"pod.local\" # 此为可选项\n        namespace = default\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE Example with Filtering and Republishing\nDESCRIPTION: This SQL query iterates over the `payload.sensors` array and republishes only the sensors where the `idx` value is greater than or equal to 1. The republished messages include the `clientid`, `name`, and `idx` values of the selected sensors. The query demonstrates how to filter array elements before republishing them.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors\nDO\n    clientid,\n    item.name as name,\n    item.idx as idx\nINCASE\n    item.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flapping Detection in EMQX\nDESCRIPTION: This snippet defines settings for detecting and managing flapping connections. It allows configuring thresholds for the number of connection attempts within a time window, and sets a ban time for clients exceeding these limits.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n**flapping_detect.enable**\n\n  *Type*: `boolean`\n\n  *Default*: `false`\n\n  Enable flapping connection detection feature.\n\n\n**flapping_detect.window_time**\n\n  *Type*: `duration`\n\n  *Default*: `1m`\n\n  The time window for flapping detection.\n\n\n**flapping_detect.max_count**\n\n  *Type*: `non_neg_integer`\n\n  *Default*: `15`\n\n  The maximum number of disconnects allowed for a MQTT Client in `window_time`\n\n\n**flapping_detect.ban_time**\n\n  *Type*: `duration`\n\n  *Default*: `5m`\n\n  How long the flapping clientid will be banned.\n```\n\n----------------------------------------\n\nTITLE: Setting Available Local Port Range\nDESCRIPTION: This snippet configures the available range of local ports for TCP connections. Increasing the port range allows more outgoing connections from the server, which is important for clients connecting to other services.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.ipv4.ip_local_port_range='1024 65535'\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic on a Different EMQX Node\nDESCRIPTION: Command to subscribe to the same topic 't/1' on another EMQX node at IP address 172.19.0.3. This helps demonstrate cross-node tracing of messages in a distributed setup.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -h 172.19.0.3 -p 1883\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Publish Hook in Lua for EMQX\nDESCRIPTION: This Lua script defines a hook for message publishing in EMQX. It modifies the payload of all published messages to 'hello' and registers the hook function.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/lang-lua.md#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction on_message_publish(clientid, username, topic, payload, qos, retain)\n    return topic, \"hello\", qos, retain\nend\n\nfunction register_hook()\n    return \"on_message_publish\"\nend\n```\n\n----------------------------------------\n\nTITLE: Data Bridge Reference as Action in EMQX Rules\nDESCRIPTION: Demonstrates how to reference a data bridge as an action in EMQX rules using bridge IDs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-configs.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrule_engine {\n    rules.my_rule_id {\n        sql = \"SELECT * FROM \\\"t/#\\\"\"\n        actions = [\"mqtt:my_egress_mqtt_bridge\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Plugin Release in rebar.config\nDESCRIPTION: Erlang code snippet for configuring the release and additional information for an EMQX plugin in the rebar.config file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n{relx, [ {release, {my_emqx_plugin, \"1.0.0\"}, %% This is the release version, different from app vsn in .app file\n            [ my_emqx_plugin\n            , map_sets\n            ]}\n       , {dev_mode, false}\n       , {include_erts, false}\n       ]}.\n\n  %% Additional info about the plugin\n  {emqx_plugrel,\n    [ {authors, [\"Your Name\"]}\n    , {builder,\n        [ {name, \"Your Name\"}\n        , {contact, \"your_email@example.cpm\"}\n        , {website, \"http://example.com\"}\n        ]}\n    , {repo, \"https://github.com/emqx/emqx-plugin-template\"}\n    , {functionality, [\"Demo\"]}\n    , {compatibility,\n        [ {emqx, \"~> 5.0\"}\n        ]}\n    , {description, \"Another amazing EMQX plugin\"}\n    ]\n}.\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Message Table in Oracle Database\nDESCRIPTION: SQL statement to create a table 't_mqtt_msgs' for storing MQTT message details including ID, client ID, topic, QoS, retain flag, payload, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_mqtt_msgs (\n  msgid VARCHAR2(64),\n  sender VARCHAR2(64),\n  topic VARCHAR2(255),\n  qos NUMBER(1),\n  retain NUMBER(1),\n  payload NCLOB,\n  arrived TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Gateway Using HTTP API\nDESCRIPTION: This code snippet demonstrates how to create and enable a STOMP gateway in EMQX using the HTTP API. It configures the gateway name, enables it, sets a mount point, and defines a TCP listener with specific binding, connection limits, and rate limits. The API request requires authentication using an admin username and password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/gateway.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateways' \\\n  -u admin:public \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"stomp\",\n  \"enable\": true,\n  \"mountpoint\": \"stomp/\",\n  \"listeners\": [\n    {\n      \"bind\": \"61613\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000,\n      \"name\": \"default\",\n      \"type\": \"tcp\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Transfer in EMQX\nDESCRIPTION: Basic configuration to enable file transfer feature in EMQX using local disk storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n   enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Test Commands\nDESCRIPTION: Commands for establishing 50,000 connections per network interface for stress testing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.100\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.101\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.102\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.103\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.104\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.105\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.106\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.107\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.108\n./emqtt_bench -h 192.168.0.99 -c 50000 --ifaddr 192.168.0.109\n```\n\n----------------------------------------\n\nTITLE: Message Delivery Event Output\nDESCRIPTION: Example JSON output showing the structure and content of message delivery event data including topic, timestamp, QoS, node, and publisher details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"timestamp\": 1645002753259,\n  \"qos\": 1,\n  \"node\": \"emqx@127.0.0.1\",\n  \"from_username\": \"u_emqx_1\",\n  \"from_clientid\": \"c_emqx_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL User Authentication Query\nDESCRIPTION: SQL query template for retrieving user authentication details including password hash, salt and superuser status\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/postgresql.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT password_hash, salt, is_superuser FROM mqtt_user WHERE username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Padding Strings with Directional Control in EMQX (3-parameter version)\nDESCRIPTION: The pad function with direction parameter extends a string to a specified length, adding spaces according to the direction specified ('leading', 'trailing', or 'both'). When using 'both', odd padding counts add the extra space at the end.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npad('hello', 8, 'leading') = '   hello'\npad('hello', 8, 'trailing') = 'hello   '\npad('hello', 8, 'both') = ' hello  '\n```\n\n----------------------------------------\n\nTITLE: Checking Session Balance in EMQX\nDESCRIPTION: Formula to determine if connections are balanced in EMQX. It compares the average number of connections on donor and recipient nodes against absolute and relative thresholds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navg(DonorConns) < avg(RecipientConns) + abs_conn_threshold\nOR\navg(DonorConns) < avg(RecipientConns) * rel_conn_threshold\n```\n\n----------------------------------------\n\nTITLE: Example of Complete Read Response Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Read response containing the value of resource path /3/0/1, with status code 2.05 (content).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 1,\n  \"msgType\": \"read\",\n  \"data\": {\n    \"reqPath\": \"/3/0/1\",\n    \"code\": \"2.05\",\n    \"codeMsg\": \"content\",\n    \"content\": [\n      {\n        \"value\": \"Lightweight M2M Client\",\n        \"path\": \"/3/0/1\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Confluent Cloud CLI\nDESCRIPTION: Command to update an existing installation of the Confluent Cloud CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconfluent update\n```\n\n----------------------------------------\n\nTITLE: Introducing Timestamp Format Configuration for Log Handlers\nDESCRIPTION: This entry describes the addition of a `timestamp_format` configuration option for log handlers, allowing various options such as `auto`, `epoch`, and `rfc3339` to format timestamps according to the log formatter being used.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Log handler timestamp format settings\nconst logConfig = {\n  timestamp_format: 'rfc3339'\n};\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Response Format in EMQX 5.x\nDESCRIPTION: Example of the JSON response format required for HTTP authentication in EMQX 5.x. Authentication result is determined through JSON fields in the response body rather than HTTP status codes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"allow\",\n  \"is_supseruser\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Shared Topics Using MQTTX CLI\nDESCRIPTION: Commands showing how to publish multiple messages to a shared topic using MQTTX CLI tool. Demonstrates publishing sequence of numbered messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-shared-subscription.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '1' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '2' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '3' -h 'localhost' -p 1883\nmqttx pub -t 't/1' -m '4' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Starting InfluxDB Docker Container\nDESCRIPTION: Command to start an InfluxDB v2.5.1 Docker container with port 8086 exposed for web interface access.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name influxdb -p 8086:8086 influxdb:2.5.1\n```\n\n----------------------------------------\n\nTITLE: Querying Message Dropped Events in SQL\nDESCRIPTION: SQL query to retrieve details about messages dropped due to no subscribers or other reasons\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  reason,\n  topic,\n  qos,\n  node,\n  timestamp\nFROM\n  \"$events/message_dropped\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Table Schema\nDESCRIPTION: Docker command to create a table 'mqtt_msg' for storing MQTT message data with fields for message ID, topic, QoS, payload, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e \\\n    CREATE TABLE mqtt.mqtt_msg( \\\n        msgid text, \\\n        topic text, \\\n        qos int,    \\\n        payload text, \\\n        arrived timestamp, \\\n        PRIMARY KEY(msgid, topic));\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Message Received from Kafka in EMQX\nDESCRIPTION: This JSON represents the structure of a message received from Kafka and republished by EMQX to the MQTT topic 't/1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\": \"{\\\"msg\\\": \\\"Hello EMQX\\\"}\",\n    \"ts_type\": \"create\",\n    \"ts\": 1679665968238,\n    \"topic\": \"testtopic-out\",\n    \"offset\": 2,\n    \"key\": \"key\",\n    \"headers\": {\n        \"header_key\": \"header_value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Attributes in EMQX Configuration File\nDESCRIPTION: Configuration example for initializing client attributes by extracting substrings from client connection metadata. This example shows how to extract the prefix of a client ID and truncate part of the username using predefined functions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/client-attributes/client-attributes.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt {\n    client_attrs_init = [\n        {\n            expression = \"nth(1, tokens(clientid, '.'))\" \n            set_as_attr = clientid_prefix\n        },\n        {\n            expression = \"substr(username, 0, 5)\" \n            set_as_attr = sub_username\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding in EMQX\nDESCRIPTION: Examples of using base64_decode to convert Base64 encoded strings back to their original form in both text and binary representations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nbase64_decode('aGVsbG8=') = 'hello'\nbin2hexstr(base64_decode('y0jN')) = 'CB48CD'\n```\n\n----------------------------------------\n\nTITLE: Creating Client Events Table in TDengine\nDESCRIPTION: SQL statement to create a table 'emqx_client_events' for recording MQTT client events including timestamp, client ID, and event type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emqx_client_events (\n    ts timestamp,\n    clientid VARCHAR(255),\n    event VARCHAR(255)\n  );\n```\n\n----------------------------------------\n\nTITLE: Downloading EMQX Plugin Template with Shell Commands\nDESCRIPTION: Shell commands to download and set up the emqx-plugin-template for creating custom EMQX plugins.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p ~/.config/rebar3/templates\n$ pushd ~/.config/rebar3/templates\n$ git clone https://github.com/emqx/emqx-plugin-template\n$ popd\n```\n\n----------------------------------------\n\nTITLE: Triple-quote string handling change in HOCON configuration\nDESCRIPTION: EMQX 5.6 changes how triple-quote strings in HOCON config files handle escape sequences. Triple-quoted strings no longer support escape sequences such as \\n, \\r, \\t, and \\\\. Users with hand-crafted configs should review and change affected strings to use regular quotes instead of triple-quotes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ee-5.6.md#2025-04-20_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\n\"\"\"string with \\n escape sequence\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cluster Aggregated Mode Parameter\nDESCRIPTION: URL parameter for getting aggregated metrics across all cluster nodes in pull mode\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/prometheus.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmode=all_nodes_aggregated\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Message Processing Rule\nDESCRIPTION: SQL rule statement to capture all MQTT messages under topic t/#\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Default AccIn Initialization in Erlang for EMQX Authentication Hook\nDESCRIPTION: Initializes the default AccIn value for the authentication hook in EMQX. This sets the initial superuser status to false before executing the hook chain.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% Default AccIn\n{ok, #{is_superuser => false}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Log Queue Size in EMQX\nDESCRIPTION: Configuration to manage log overload in EMQX by setting the maximum queue size for the OpenTelemetry log handler.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/logs.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  logs { max_queue_size = 2048 }\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend MQTT Sticky Session Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend with sticky sessions for MQTT.  It uses a stick table to track client IDs and route requests to the same backend server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  # 创建粘性会话表\n  stick-table type string len 32 size 100k expire 30m\n\n  # 使用客户端 ID 作为键\n  stick on req.payload(0，0)，mqtt_field_value(connect，client_identifier)\n \n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: Encoding Schema in Erlang\nDESCRIPTION: Example of encoding data using a schema in Erlang. It takes a schema name and a Map as input, returning encoded bytes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nschema_encode(SchemaName, Map) -> Bytes\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Example - EMQX 5.1\nDESCRIPTION: Complete Redis configuration example for EMQX 5.1 showing updated parameter names and structure\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_2\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = redis\n  enable = true\n\n  redis_type = single\n  server = \"127.0.0.1:6379\"\n\n  cmd = \"HMGET mqtt_user:${username}\"\n  database = 0\n  password = \"pass\"\n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = myredis\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client Events Table in MySQL\nDESCRIPTION: SQL statement to create a table for storing client events including client ID, event type, and timestamp\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emqx_client_events (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  clientid VARCHAR(255),\n  event VARCHAR(255),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics in EMQX 5.x\nDESCRIPTION: Command to inspect Prometheus metrics in EMQX 5.x using curl. The metrics endpoint is enabled by default without authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-5.1.0.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"http://127.0.0.1:18083/api/v5/prometheus/stats\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for MySQL Authorizer with Placeholders\nDESCRIPTION: Example SQL query statement used in an EMQX MySQL authorizer that demonstrates the use of the ${username} placeholder which gets replaced with the actual client username during authorization.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/authz.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT action, permission, topic FROM mqtt_acl where username = ${username}\n```\n\n----------------------------------------\n\nTITLE: Deleting EMQX Subscription\nDESCRIPTION: Command to manually remove a subscription for a client in EMQX. This example removes the subscription to topic 't/1' for client 'emqx_a'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl subscriptions del emqx_a t/1\nok\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for EMQX Metric Pulling\nDESCRIPTION: This YAML configuration file defines how Prometheus scrapes metrics from EMQX. It specifies the scrape interval, evaluation interval, and external labels. It also configures three jobs to scrape metrics from the `/api/v5/prometheus/stats`, `/api/v5/prometheus/auth`, and `/api/v5/prometheus/data_integration` endpoints of EMQX, including basic authentication details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# prometheus.yaml\nglobal:\n  scrape_interval:     10s # The default scrape interval is every 10 seconds.\n  evaluation_interval: 10s # The default evaluation interval is every 10 seconds.\n  # On this machine, every time series will be exported by default.\n  external_labels:\n    monitor: 'emqx-monitor'\nscrape_configs:\n  - job_name: 'emqx_stats'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/stats'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n\n  - job_name: 'emqx_auth'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/auth'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n\n  - job_name: 'emqx_data_integration'\n    static_configs:\n      - targets: ['127.0.0.1:18083']\n    metrics_path: '/api/v5/prometheus/data_integration'\n    scheme: 'http'\n    basic_auth:\n      username: ''\n      password: ''\n\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic with MQTTX CLI\nDESCRIPTION: Command to subscribe to topic 't/1' using MQTTX CLI with verbose output. New subscribers will receive any retained messages for the topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-retained-message.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mqttx sub -t 't/1' -h 'localhost' -p 1883 -v\ntopic:  t/1\npayload:  A retained message from MQTTX CLI\nretain: true\n```\n\n----------------------------------------\n\nTITLE: Installing Paho Java Client via Maven\nDESCRIPTION: This XML snippet shows how to include the Eclipse Paho Java Client library in a Maven project. It specifies the group ID, artifact ID, and version of the library.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/java.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.eclipse.paho</groupId>\n\t<artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n\t<version>1.2.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Python Function for Receiving and Decoding Protobuf Messages\nDESCRIPTION: Python function that handles incoming MQTT messages, parses the Protobuf payload, and prints the decoded message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-protobuf.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef on_message(client, userdata, msg):\n    print(\"msg payload\", msg.payload)\n    p = person_pb2.Person()\n    p.ParseFromString(msg.payload)\n    print(msg.topic+\" \"+str(p))\n```\n\n----------------------------------------\n\nTITLE: EMQX 4.4 JWT Configuration\nDESCRIPTION: JWT authentication configuration example for EMQX 4.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nauth.jwt.jwks = https://127.0.0.1:8080/jwks\nauth.jwt.jwks.refresh_interval = 5m\nauth.jwt.from = password\n\nauth.jwt.verify_claims = on\n\nauth.jwt.verify_claims.username = %u\n\nauth.jwt.acl_claim_name = acl\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Authentication in EMQX 4.4\nDESCRIPTION: Configuration for PostgreSQL authentication and authorization in EMQX 4.4, including server settings, connection pool, encoding, query parameters, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_33\n\nLANGUAGE: properties\nCODE:\n```\nauth.pgsql.server = 127.0.0.1:5432\nauth.pgsql.pool = 8\nauth.pgsql.username = root\nauth.pgsql.password = dbpass\n\nauth.pgsql.database = mqtt\nauth.pgsql.encoding = utf8\n\nauth.pgsql.acl_query = select allow, ipaddr, username, clientid, access, topic from mqtt_acl where username = '%u'\n\nauth.pgsql.ssl = on\nauth.pgsql.ssl.cacertfile = path/to/your/cafile.pem\nauth.pgsql.ssl.certfile = path/to/your/certfile\nauth.pgsql.ssl.keyfile = path/to/your/keyfile\nauth.pgsql.ssl.verify = true\nauth.pgsql.ssl.server_name_indication = mypgsql\n```\n\n----------------------------------------\n\nTITLE: Testing One-way SSL/TLS Authentication with Insecure Option\nDESCRIPTION: Command to test one-way SSL/TLS authentication with MQTTX CLI using the --insecure option to bypass certificate CN validation when the server certificate CN doesn't match the server address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h localhost -p 8883 \\\n  --protocol mqtts \\\n  --ca certs/rootCA.crt \\\n  --insecure\n```\n\n----------------------------------------\n\nTITLE: Generating Custom EMQX Plugin Project with rebar3\nDESCRIPTION: Command to generate a new EMQX plugin project using the rebar3 template.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ rebar3 new emqx-plugin my_emqx_plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authorization in EMQX Configuration File\nDESCRIPTION: Sample configuration to enable the built-in database (Mnesia) authorization checker in EMQX. The configuration sets the type to 'built_in_database' and enables the checker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mnesia.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = built_in_database\n    enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Cookie for EMQX Cluster Security\nDESCRIPTION: This snippet illustrates how to set a secret cookie in the emqx.conf file for enhanced security in an EMQX cluster. All nodes in the cluster should use the same secret cookie.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode {\n  cookie = \"<a Secret cookie>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Password Hash Algorithm Configuration in EMQX\nDESCRIPTION: Configuration examples for different password hash algorithms supported by EMQX, including simple algorithms like SHA256, bcrypt, and pbkdf2 with various options for salt position, iterations, and key length.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/authn.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# simple algorithms\npassword_hash_algorithm {\n  name = sha256             # plain, md5, sha, sha512\n  salt_position = suffix    # prefix, disable\n}\n\n# bcrypt\npassword_hash_algorithm {\n  name = bcrypt\n}\n\n# pbkdf2\npassword_hash_algorithm {\n  name = pbkdf2\n  mac_fun = sha256          # md4, md5, ripemd160, sha, sha224, sha384, sha512\n  iterations = 4096\n  dk_length = 32           # optional, Unit: Byte\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Observe and Cancel Observe Request Payload in JSON for LwM2M\nDESCRIPTION: Specifies the JSON payload format for Observe and Cancel Observe requests in LwM2M. It includes request ID, message type, and the resource path to be observed or cancel-observed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": {?MsgType},\n  \"data\":\n    {\n      \"path\": {?ResourcePath}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate Signing Request (CSR) for Server Certificate\nDESCRIPTION: Command to generate a Certificate Signing Request for the server using its private key. This CSR will contain the server's identity information and public key, and will be signed by the CA to create the server certificate.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/tls-certificate.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -key server.key -out server.csr\n```\n\n----------------------------------------\n\nTITLE: MQTT WebSocket SSL Reverse Proxy Configuration\nDESCRIPTION: HAProxy configuration for SSL-enabled MQTT WebSocket connections with TLS termination.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_ws_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:8083 check\n  server emqx2 emqx2-cluster.emqx.io:8083 check\n  server emqx3 emqx3-cluster.emqx.io:8083 check\n\nfrontend mqtt_ws_tls_frontend\n  bind *:8084 ssl crt /etc/haproxy/certs/server.pem\n  mode tcp \n  default_backend mqtt_ws_backend\n```\n\n----------------------------------------\n\nTITLE: Select Clientid from Session Subscribed Event using Topic Matching\nDESCRIPTION: This SQL query selects the 'clientid' from the '$events/session_subscribed' event stream, filtering for events where the 'topic' matches the 't/#' topic filter and the 'qos' is 1.  It demonstrates the use of the '=~' operator for topic matching in subscription events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid FROM \"$events/session_subscribed\" WHERE topic =~ 't/#' and qos = 1\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Messages with MQTTX CLI\nDESCRIPTION: Command for publishing a message to a specific MQTT topic using MQTTX CLI. This demonstrates how to connect to a broker and publish a message with a specified QoS level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/publish-and-subscribe.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 'testtopic/1' -q 1 -h 'localhost' -p 1883 -m 'from MQTTX CLI'\n```\n\n----------------------------------------\n\nTITLE: New Rule Engine SQL Functions\nDESCRIPTION: Addition of three random SQL functions to the EMQX rule engine: random(), uuid_v4(), and uuid_v4_no_hyphen(). These functions generate random numbers and UUIDs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nrandom()         -- Generates random number between 0 and 1\nuuid_v4()        -- Generates random UUID v4 with hyphens\nuuid_v4_no_hyphen() -- Generates random UUID v4 without hyphens\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL for Message Processing\nDESCRIPTION: SQL rule to process MQTT messages from topic t/# and prepare them for ClickHouse storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload as data,\n  now_timestamp() as timestamp\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Defining Command Response Topic Format for LwM2M Gateway\nDESCRIPTION: The topic format for receiving command responses from LwM2M clients through EMQX. Similar to the request topic, it combines mountpoint and response topic configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n{?mountpoint}{?translators.response.topic}\n```\n\n----------------------------------------\n\nTITLE: API Authentication in JavaScript using API Keys\nDESCRIPTION: JavaScript example using Axios to authenticate to EMQX REST API with API keys. Shows how to pass authentication credentials using the auth option.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios')\n\nconst username = '4f33d24d7b8e448d'\nconst password = 'gwtbmFJZrnzUu8mPK1BxUkBA66PygETiDEegkf1q8dD'\n\naxios\n  .get('http://localhost:18083/api/v5/nodes', {\n    auth: {\n      username: username,\n      password: password,\n    },\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  .then((response) => {\n    console.log(response.data)\n  })\n  .catch((error) => {\n    console.log(error)\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring DTLS Protocol Options in EMQX Gateway\nDESCRIPTION: This snippet defines DTLS protocol-specific options for the EMQX gateway. It includes settings for CA certificates, certificate files, verification, session reuse, cipher suites, renegotiation, logging, and various security parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:dtls_opts.cacertfile: \"${EMQX_ETC_DIR}/certs/cacert.pem\"\ngateway:dtls_opts.certfile: \"${EMQX_ETC_DIR}/certs/cert.pem\"\ngateway:dtls_opts.keyfile: \"${EMQX_ETC_DIR}/certs/key.pem\"\ngateway:dtls_opts.verify: verify_none\ngateway:dtls_opts.reuse_sessions: true\ngateway:dtls_opts.depth: 10\ngateway:dtls_opts.password: string\ngateway:dtls_opts.versions: [\"dtlsv1.2\"]\ngateway:dtls_opts.ciphers: []\ngateway:dtls_opts.secure_renegotiate: true\ngateway:dtls_opts.log_level: notice\ngateway:dtls_opts.hibernate_after: 5s\ngateway:dtls_opts.dhfile: string\ngateway:dtls_opts.fail_if_no_peer_cert: false\ngateway:dtls_opts.honor_cipher_order: true\ngateway:dtls_opts.client_renegotiation: true\ngateway:dtls_opts.handshake_timeout: 15s\ngateway:dtls_opts.gc_after_handshake: false\ngateway:dtls_opts.ocsp: broker:ocsp\ngateway:dtls_opts.enable_crl_check: false\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Query for EMQX Authorization\nDESCRIPTION: Bash snippet showing the configuration parameter for the PostgreSQL query used in EMQX authorization. This query retrieves permission details based on username and IP address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/postgresql.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nquery = \"SELECT permission, action, topic, ipaddress, qos, retain FROM mqtt_acl WHERE username = ${username} and ipaddress = ${peerhost}\"\n```\n\n----------------------------------------\n\nTITLE: Creating TimescaleDB Table Schema\nDESCRIPTION: SQL commands to create a sensor_data table and convert it to a hypertable for time-series data storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-timescale.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sensor_data (\n    time        TIMESTAMPTZ       NOT NULL,\n    location    TEXT              NOT NULL,\n    temperature DOUBLE PRECISION  NULL,\n    humidity    DOUBLE PRECISION  NULL\n);\n\nSELECT create_hypertable('sensor_data', 'time');\n```\n\n----------------------------------------\n\nTITLE: Map Operations in EMQX Rule Engine\nDESCRIPTION: Functions for manipulating map data structures, including inserting key-value pairs and getting the size of a map.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmget(['a', 'b'], mput(['a', 'b'], 2, json_decode('{\"a\": {\"b\": 1}}'))) = 2\nmget(['a', 'b'], mput(['a', 'b'], 2, json_decode('{\"c\": 1}'))) = 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nmap_size(json_decode('{}')) = 0\nmap_size(json_decode('{\"msg\": \"hello\"}')) = 1\n```\n\n----------------------------------------\n\nTITLE: Kerberos Authentication Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the authentication process between client and server using GSSAPI-KERBEROS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/kerberos.md#2025-04-20_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: CONNECT (Authentication Method=\"GSSAPI-KERBEROS\", Authentication Data=ClientInitialToken)\n    Server-->>Client: AUTH (rc=0x18, Authentication Method=\"GSSAPI-KERBEROS\", Authentication Data=ServerInitialToken)\n    loop SASL Challenge-Response\n        Client->>Server: AUTH (Authentication Method=\"GSSAPI-KERBEROS\")\n        Server-->>Client: AUTH (Authentication Method=\"GSSAPI-KERBEROS\")\n    end\n    Server-->>Client: CONNACK (rc=0, Authentication Method=\"GSSAPI-KERBEROS\")\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Topic using CoAP in Connection Mode\nDESCRIPTION: This example demonstrates how to use coap-client to unsubscribe from a topic named 'coap/test' in Connection Mode. The command uses the GET method with specific options and includes clientid and token parameters required for Connection Mode.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m get -O 6,0x01 \"coap://127.0.0.1/ps/coap/test?clientid=123&token=3404490787\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing\nDESCRIPTION: SQL rule to select all messages from the t/# topic for processing in EMQX\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/tablestore.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Keep Alive Multiplier in EMQX\nDESCRIPTION: Configuration for the keep-alive multiplier that determines the timeout threshold for client connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/mqtt.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkeepalive_multiplier = 1.5\n```\n\n----------------------------------------\n\nTITLE: Cluster Link Metrics Response Format in EMQX API\nDESCRIPTION: Example JSON response from the EMQX REST API when retrieving metrics for a cluster link. The response includes metrics like the number of active routes (routers) which helps in monitoring the link's performance.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics\": {\"routers\": 10240},\n  \"node_metrics\": [{}]\n}\n```\n\n----------------------------------------\n\nTITLE: Showing EMQX Topic Details\nDESCRIPTION: Command to show detailed information about a specific topic in EMQX. This example displays information for the topic 't/1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl topics show t/1\nt/1 -> emqx@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring OCSP Stapling in EMQX using HCL Configuration\nDESCRIPTION: Example configuration for enabling OCSP Stapling in EMQX's SSL listener. Includes settings for certificate paths, OCSP responder URL, refresh intervals, and timeout values. This configuration should be added to the emqx.conf file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/ocsp.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlisteners.ssl.default {\n  bind = \"0.0.0.0:8883\"\n  ssl_options {\n    keyfile = \"/etc/emqx/certs/server.key\"\n    certfile = \"/etc/emqx/certs/server.pem\"\n    cacertfile = \"/etc/emqx/certs/ca.pem\"\n    ocsp {\n      enable_ocsp_stapling = true\n      issuer_pem = \"/etc/emqx/certs/ocsp-issuer.pem\"\n      responder_url = \"http://ocsp.responder.com:9877\"\n      refresh_interval = 15m\n      refresh_http_timeout = 15s\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Subscriptions in EMQX\nDESCRIPTION: EMQX now supports exclusive subscriptions, allowing only one subscriber for a topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_6\n\nLANGUAGE: Erlang\nCODE:\n```\n% Example configuration for exclusive subscription\n{exclusive_subscription, [\n  {enable, true},\n  {topics, [\"exclusive/topic/#\"]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Joining EMQX Cluster Manually\nDESCRIPTION: Command to manually join the second node to the cluster with the first node\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it emqx2 \\\n    emqx ctl cluster join emqx@node1.emqx.com\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket File Export in EMQX\nDESCRIPTION: This configuration sets up file export to an S3 bucket, including host, port, credentials, and bucket details. It's used when you want to store complete files in an S3 bucket after merging segments.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/broker.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n  # Enable file transfer feature\n  enable = true\n\n  # Segment storage configuration\n  # ...\n\n  storage.local.exporter.s3 {\n\n    host = \"s3.us-east-1.amazonaws.com\"\n    port = 443\n\n    # Credentials for accessing S3\n    access_key_id = \"AKIA27EZDDM9XLINWXFE\"\n    secret_access_key = \"******\"\n\n    # Export file storage bucket\n    bucket = \"my-bucket\"\n\n    # Shared URL expiration time\n    # EMQX generates a temporary shared URL for clients to download files directly from S3. This parameter specifies the expiration time of the file download URL returned by the EMQX API. After expiration, the URL becomes unavailable, although the actual file remains in S3.\n    #url_expire_time = \"1h\"\n\n    # Settings for the underlying HTTP(S) connection with S3, allowing secure file upload and connection pool management.\n    transport_options {\n      ssl.enable = true\n      connect_timeout = 15s\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Log Output Example\nDESCRIPTION: Example log output showing a validation failure message with client details and action taken.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-validation.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n2024-05-16T06:24:10.733827+00:00 [warning] tag: SCHEMA_VALIDATION, clientid: mqttx_1db4547e, msg: validation_failed, peername: 127.0.0.1:40850, action: drop, validation: <<\"check-json\">>\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Document Template\nDESCRIPTION: JSON template defining the structure of documents to be stored in Elasticsearch, including client ID, timestamp, and payload fields\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientid\": \"${clientid}\",\n  \"ts\": ${ts},\n  \"payload\": ${payload}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Function Call in Erlang\nDESCRIPTION: Function signature for validating data against a JSON schema, returning a boolean result.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nschema_check(SchemaName, Map | Bytes) -> Boolean\n```\n\n----------------------------------------\n\nTITLE: EMQX Telemetry Data Example in JSON Format\nDESCRIPTION: Example of telemetry data transmitted from EMQX to the telemetry server, showing system information, usage metrics, and feature usage statistics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/telemetry/telemetry.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"emqx_version\": \"5.0.9\",\n  \"license\": {\n    \"edition\": \"opensource\"\n  },\n  \"os_name\": \"macOS\",\n  \"os_version\": \"12.5\",\n  \"otp_version\": \"24\",\n  \"up_time\": 181903,\n  \"uuid\": \"5EAAF3C2-6186-11ED-AD7C-D5AAB80CED2E\",\n  \"cluster_uuid\": \"5EAAF818-6186-11ED-AC1D-3DFDC18ED1BB\",\n  \"nodes_uuid\": [],\n  \"active_plugins\": [],\n  \"num_clients\": 0,\n  \"messages_received\": 0,\n  \"messages_sent\": 0,\n  \"build_info\": {\n    \"wordsize\": 64,\n    \"relform\": \"tgz\",\n    \"os\": \"macos11\",\n    \"erlang\": \"24.2.1-1\",\n    \"elixir\": \"none\",\n    \"arch\": \"x86_64-apple-darwin20.6.0\"\n  },\n  \"vm_specs\": {\n    \"num_cpus\": 8,\n    \"total_memory\": 8589934592\n  },\n  \"mqtt_runtime_insights\": {\n    \"num_topics\": 0,\n    \"messages_sent_rate\": 0,\n    \"messages_received_rate\": 0\n  },\n  \"advanced_mqtt_features\": {\n    \"topic_rewrite\": 0,\n    \"retained\": 3,\n    \"delayed\": 0,\n    \"auto_subscribe\": 0\n  },\n  \"authn_authz\": {\n    \"authz\": [\n      \"file\"\n    ],\n    \"authn_listener\": {},\n    \"authn\": []\n  },\n  \"gateway\": {},\n  \"rule_engine\": {\n    \"num_rules\": 1\n  },\n  \"bridge\": {\n    \"num_data_bridges\": 1,\n    \"data_bridge\": {\n      \"webhook\": {\n        \"num_linked_by_rules\": 1,\n        \"num\": 1\n      }\n    }\n  },\n  \"exhook\": {\n    \"servers\": [],\n    \"num_servers\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Paho MQTT Go Client\nDESCRIPTION: Command to install the Eclipse Paho MQTT Go client library using go get.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/go.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/eclipse/paho.mqtt.golang\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for External Resource Access in EMQX\nDESCRIPTION: This snippet demonstrates how to configure TLS settings within the `emqx.conf` file to enable encrypted communication with external resources, such as an HTTP server used for password authentication. It includes settings for enabling TLS, specifying CA certificates, client certificates, and keys, and configuring certificate verification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\nauthentication {\n  url = \"https://127.0.0.1:8080\"\n  backend = \"http\"\n\n  ...\n\n  ssl {\n    enable = true\n    # PEM 格式的文件，包含一个或多个用于验证 HTTP 服务器证书的根 CA 证书\n    cacertfile = \"etc/certs/cacert.pem\"\n    # PEM 格式的客户端证书，如果证书不是直接由根 CA 签发，那么中间 CA 的证书必须加在服务器证书的后面组成一个证书链\n    certfile = \"etc/certs/cert.pem\"\n    # PEM 格式的密钥文件\n    keyfile = \"etc/certs/key.pem\"\n    # 设置成 'verify_peer' 来验证 HTTP 服务器端证书是否为 cacertfile 中某个根证书签发\n    verify = verify_none\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Kafka on macOS\nDESCRIPTION: This code snippet shows how to download, extract, and start Kafka on macOS using KRaft mode. It involves downloading the Kafka archive, extracting it, formatting the storage, and starting the Kafka server. The commands are intended to set up a basic Kafka environment for testing and development purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"wget https://archive.apache.org/dist/kafka/3.3.1/kafka_2.13-3.3.1.tgz\n\ntar -xzf  kafka_2.13-3.3.1.tgz\n\ncd kafka_2.13-3.3.1\n\n# 使用 KRaft 启动 Kafka\nKAFKA_CLUSTER_ID=\\\"$(bin/kafka-storage.sh random-uuid)\\\"\n\nbin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c config/kraft/server.properties\n\nbin/kafka-server-start.sh config/kraft/server.properties\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Response Example\nDESCRIPTION: Example of HTTP authentication success response format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"allow\",\n  \"is_supseruser\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Read Request Data for LwM2M Operations\nDESCRIPTION: JSON structure for the data field in Read operations. Contains a path field specifying the requested resource path (object, instance, or resource).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": {?ResourcePath}\n}\n```\n\n----------------------------------------\n\nTITLE: 向 EMQX 集群添加新节点\nDESCRIPTION: 通过 CLI 命令将新节点加入到现有的 EMQX 集群中。命令中需指定集群中的一个已存在节点作为参数。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/design/clustering.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster join emqx@node1.my.net\n```\n\n----------------------------------------\n\nTITLE: MySQL Authorization Query Parameter Configuration\nDESCRIPTION: SQL query template for retrieving authorization rules from the MySQL database. This query uses placeholders for username and peer host which will be replaced with actual values during runtime.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mysql.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nquery = \"SELECT action, permission, topic, ipaddress, qos, retain FROM mqtt_acl where username = ${username} and ipaddress = ${peerhost}\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Definition Schema\nDESCRIPTION: JSON schema defining a DynamoDB table structure for MQTT messages with device_id as hash key and timestamp as range key\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TableName\": \"mqtt_msg\",\n    \"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"device_id\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"timestamp\",\n            \"AttributeType\": \"N\"\n        }\n    ],\n    \"KeySchema\": [\n        {\n            \"AttributeName\": \"device_id\",\n            \"KeyType\": \"HASH\"\n        },\n        {\n            \"AttributeName\": \"timestamp\",\n            \"KeyType\": \"RANGE\"\n        }\n    ],\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 5,\n        \"WriteCapacityUnits\": 5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation Permission Command in EMQX 5.8.6\nDESCRIPTION: CLI command to grant explicit permission for plugin installation via REST API or Dashboard. This security enhancement requires users to pre-authorize plugin installations using this command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ee-5.8.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins allow NAME-VSN\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Server to Terminal Communication in JT/T 808\nDESCRIPTION: Illustrates the JSON payload structure for messages sent from servers to terminals. Similar to the terminal-to-server structure but with slight differences in the header section.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\": {\n    \"msg_id\": 32769,\n    \"encrypt\": 0,\n    \"phone\": 13900000000,\n    \"msg_sn\": 0\n  },\n  \"body\": {\n    \"seq\": 1,\n    \"id\": 1,\n    \"result\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Lua Script into EMQX\nDESCRIPTION: Command to load a Lua script file into the emqx_lua_hook plugin.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/lang-lua.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl luahook load test.lua\n```\n\n----------------------------------------\n\nTITLE: Running Apache Pulsar in Docker\nDESCRIPTION: Docker command to run Apache Pulsar in standalone mode for testing and development purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 6650:6650 --name pulsar apachepulsar/pulsar:2.11.0 bin/pulsar standalone -nfw -nss\n```\n\n----------------------------------------\n\nTITLE: Using MQTTX CLI for Exclusive Subscription\nDESCRIPTION: Command for subscribing to a topic with exclusive subscription using MQTTX CLI. This demonstrates how to add the $exclusive/ prefix to make an exclusive subscription to topic t/1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-exclusive-subscription.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t \"$exclusive/t/1\"\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publication with MQTTX\nDESCRIPTION: Command to publish a test message to topic t/1 using MQTTX client to verify the InfluxDB rule operation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello InfluxDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Status Monitoring\nDESCRIPTION: Configuration for enabling NGINX status monitoring using http_stub_status_module. This setup allows monitoring of active connections and server statistics via HTTP endpoint.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhttp {\n  server {\n    listen 8888;\n\n    location /status {\n      stub_status on;\n      access_log off;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launch ClickHouse Docker Container\nDESCRIPTION: Docker command to start a ClickHouse server instance with configured environment variables and port mappings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n--rm \\\n-e CLICKHOUSE_DB=mqtt_data \\\n-e CLICKHOUSE_USER=emqx \\\n-e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 \\\n-e CLICKHOUSE_PASSWORD=public \\\n-p 18123:8123 \\\n-p 19000:9000 \\\n--ulimit nofile=262144:262144 \\\n-v $pwd/init.sql:/docker-entrypoint-initdb.d/init.sql \\\nclickhouse/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Defining Command Request Topic Format for LwM2M Gateway\nDESCRIPTION: The topic format for sending command requests to LwM2M clients through EMQX. The topic combines the mountpoint and command topic configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n{?mountpoint}{?translators.command.topic}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shared Subscription Groups with MQTTX CLI\nDESCRIPTION: This code demonstrates how to create two shared subscription groups with MQTTX CLI. Clients A and B subscribe to one group while clients C and D subscribe to another group, all targeting the same base topic 't/1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/explore-mqtt.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Client A and B subscribe to topic `$share/my_group1/t/1`\nmqttx sub -t '$share/my_group1/t/1' -h 'localhost' -p 1883\n\n## Client C and D subscribe to topic  `$share/my_group2/t/1`\nmqttx sub -t '$share/my_group2/t/1' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Client Connection Events in DynamoDB\nDESCRIPTION: SQL statement for recording client online/offline events, combining the event type and timestamp as an ID, and selecting all fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  str(event) + timestamp as id, *\nFROM \n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Message Table in Cassandra\nDESCRIPTION: Creates a table 'mqtt_msg' in the mqtt keyspace with columns for message ID, topic, QoS, payload, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e \\\n    CREATE TABLE mqtt.mqtt_msg( \\\n        msgid text, \\\n        topic text, \\\n        qos int,    \\\n        payload text, \\\n        arrived timestamp, \\\n        PRIMARY KEY(msgid, topic));\"\n```\n\n----------------------------------------\n\nTITLE: 创建 Erlang 节点并组建简单集群\nDESCRIPTION: 演示如何在 Erlang REPL 中创建多个节点并将它们连接成一个集群。包括启动节点、查看节点信息和建立连接等步骤。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nerl -name node1@127.0.0.1 -setcookie my_nodes\nerl -name node2@127.0.0.1 -setcookie my_nodes\nerl -name node3@127.0.0.1 -setcookie my_nodes\nerl -name node4@127.0.0.1 -setcookie my_nodes\n```\n\nLANGUAGE: erlang\nCODE:\n```\n(node1@127.0.0.1) 4> node().\n'node1@127.0.0.1'\n\n(node1@127.0.0.1) 4> nodes().\n[]\n```\n\nLANGUAGE: erlang\nCODE:\n```\n(node1@127.0.0.1) 1> net_kernel:connect_node('node2@127.0.0.1').\ntrue\n(node1@127.0.0.1) 2> net_kernel:connect_node('node3@127.0.0.1').\ntrue\n(node1@127.0.0.1) 3> net_kernel:connect_node('node4@127.0.0.1').\ntrue\n```\n\nLANGUAGE: erlang\nCODE:\n```\n(node1@127.0.0.1) 4> nodes().\n['node2@127.0.0.1','node3@127.0.0.1','node4@127.0.0.1']\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing in EMQX\nDESCRIPTION: SQL rule to select all messages from the t/# topic pattern for processing in EMQX before sending to InfluxDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry via Environment Variables in EMQX\nDESCRIPTION: Bash command to disable telemetry using environment variables when starting EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/telemetry/telemetry.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport EMQX_TELEMETRY__ENABLE=false && ./bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Client Events\nDESCRIPTION: SQL statement to capture client connection and disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n      *,\n      now_timestamp('millisecond')  as ts\n    FROM \n      \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Delivery Dropped Event JSON Output Example\nDESCRIPTION: Example JSON output demonstrating a delivery dropped event with its key attributes\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"reason\": \"queue_full\",\n  \"qos\": 1,\n  \"from_username\": \"u_emqx_1\",\n  \"from_clientid\": \"c_emqx_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: HStream Record Template for Connection Events\nDESCRIPTION: JSON template for formatting client connection events before storing them in HStreamDB. It includes client ID, event type, and timestamp.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"clientid\": \"${clientid}\", \"event_type\": \"${event}\", \"event_time\": ${timestamp}}\n```\n\n----------------------------------------\n\nTITLE: Downgrading EMQX to Previous Version\nDESCRIPTION: This command downgrades EMQX to a previously installed version, useful for rolling back problematic upgrades.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx downgrade 5.0.0\n\nRelease 5.0.1 is marked old, switching to it.\nInstalled Release: 5.0.0\nMade release permanent: \"5.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Message Transformation Configuration in HOCON\nDESCRIPTION: Configuration example for transforming messages using EMQX's Message Transformation feature. Shows how to decode Avro format, encode to JSON, and modify topics using client attributes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_16\n\nLANGUAGE: hocon\nCODE:\n```\nmessage_transformation {\n  transformations = [\n    {\n      name = mytransformation\n      failure_action = drop\n      payload_decoder = {type = avro, schema = myschema}\n      payload_encoder = {type = json}\n      operations = [\n        {key = \"topic\", value = \"concat([client_attrs.tenant, '/', topic])\"}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stomp Gateway in EMQX 4.x\nDESCRIPTION: Example configuration for Stomp gateway in EMQX 4.x using the etc/plugins/emqx_stomp.conf file format. Shows settings for listener port, acceptors, connections, and frame parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nstomp.listener = 61613\nstomp.listener.acceptors = 4\nstomp.listener.max_connections = 512\n#stomp.listener.ssl = off\nstomp.default_user.login = guest\nstomp.default_user.passcode = guest\nstomp.allow_anonymous = true\n\nstomp.frame.max_headers = 10\nstomp.frame.max_header_length = 1024\nstomp.frame.max_body_length = 8192\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization GET Configuration Example in HCL\nDESCRIPTION: Configuration example for HTTP authorization using GET method. It defines the endpoint URL, query parameters with placeholders, and headers for the HTTP authorization request.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    type = http\n\n    method = get\n    url = \"http://127.0.0.1:8080/authz\"\n    body {\n        clientid = \"${clientid}\"\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n    headers {\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with Trace Context\nDESCRIPTION: MQTTX CLI command to publish a message with a traceparent User-Property, which contains the trace context information used for distributed tracing across MQTT communications.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t t/trace/test -h localhost -p 1883 -up \"traceparent: 00-cce3a024ca134a7cb4b41e048e8d98de-cef47eaa4ebc3fae-01\"\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Storage\nDESCRIPTION: SQL rule to capture all messages from topic t/#\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n*\nFROM\n\"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Restarting an MQTT Listener\nDESCRIPTION: Restarts a specific MQTT listener identified by its type and name. This operation will disconnect all clients connected to this listener.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners restart tcp:default\nRestarted tcp:default listener successfully.\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Redis Authorizer for Redis Cluster\nDESCRIPTION: Configuration example for connecting EMQX to a Redis Cluster for authorization checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = redis\n\n    redis_type = cluster\n    servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    password = public\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Node Autoclean Interval in EMQX\nDESCRIPTION: This configuration snippet sets the interval for the cluster node autoclean feature in EMQX. It determines how long to wait before automatically removing disconnected nodes from the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncluster.autoclean = 24h\n```\n\n----------------------------------------\n\nTITLE: Clearing Monitor Data in EMQX Cluster\nDESCRIPTION: Added support for clearing monitor (statistics) data for the whole cluster using a DELETE request to the api/v5/monitor endpoint.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v5/monitor\n```\n\n----------------------------------------\n\nTITLE: Configuration Import Command for EMQX 5.x\nDESCRIPTION: Command to import migrated configuration files into the new EMQX 5.x cluster using the EMQX control interface.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-cluster.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl data import <File>\n```\n\n----------------------------------------\n\nTITLE: Configuring Old ACL Format in JSON for EMQX Authentication\nDESCRIPTION: This snippet shows the older ACL format in EMQX. It defines separate lists for publish, subscribe, and all permissions, using topic wildcards and placeholders like ${clientid} and ${username}.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/acl.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1654254601,\n  \"username\": \"emqx_u\",\n  \"acl\": {\n    \"pub\": [\n      \"testpub1/${username}\",\n      \"eq testpub2/${username}\"\n    ],\n    \"sub\": [\n      \"testsub1/${username}\",\n      \"testsub2/${clientid}\",\n      \"testsub2/#\"\n    ],\n    \"all\": [\n      \"testall1/${username}\",\n      \"testall2/${clientid}\",\n      \"testall3/#\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for User Import\nDESCRIPTION: JSON file format specification for importing user credentials as an array of user objects containing user_id, password_hash, salt, and superuser status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/user_management.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"user_id\":\"myuser1\",\n        \"password_hash\":\"c5e46903df45e5dc096dc74657610dbee8deaacae656df88a1788f1847390242\",\n        \"salt\": \"e378187547bf2d6f0545a3f441aa4d8a\",\n        \"is_superuser\": true\n    },\n    {\n        \"user_id\":\"myuser2\",\n        \"password_hash\":\"f4d17f300b11e522fd33f497c11b126ef1ea5149c74d2220f9a16dc876d4567b\",\n        \"salt\": \"6d3f9bd5b54d94b98adbcfe10b6d181f\",\n        \"is_superuser\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Schema Message with MQTTX\nDESCRIPTION: Command to publish a valid MQTT message that conforms to the temperature schema requirements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-validation.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t t/1 -m '{\"temp\": 102}'\n```\n\n----------------------------------------\n\nTITLE: Updating EMQX License via Command Line\nDESCRIPTION: Commands to update EMQX license using either a direct license key or a file path. The file-based approach automatically reloads the license every 2 minutes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/license.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl license update <license_key>\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure the license file is uploaded to all nodes in the cluster at the same file path.\nemqx ctl license update 'file://<license_file_path>'\n```\n\n----------------------------------------\n\nTITLE: Defining Location Information Query Structure in JSON\nDESCRIPTION: This snippet outlines the structure for a location information query message. It specifies expected fields for the response but does not include any specific parameters as it is represented as an empty JSON object.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Listing etcd Directory Contents\nDESCRIPTION: This command uses the etcdctl tool to list the contents of the specified directory in etcd recursively. It allows observing the nodes that have joined the EMQX cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n$ etcdctl ls /emqxcl/emqxcl --recursive\n\n/emqxcl/emqxcl/nodes\n/emqxcl/emqxcl/nodes/emqx@node1.emqx.com\n/emqxcl/emqxcl/nodes/emqx@node2.emqx.com\n```\n```\n\n----------------------------------------\n\nTITLE: Starting HStreamDB TCP Service\nDESCRIPTION: This command starts the HStreamDB TCP service using Docker Compose with the specified configuration file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose-tcp.yaml up --build\n```\n\n----------------------------------------\n\nTITLE: Checking crypto library dependencies on macOS\nDESCRIPTION: Commands to navigate to EMQX installation directory and check crypto library dependencies using otool command on macOS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd emqx\n# or\ncd /usr/local/Cellar/emqx/<version>/\n\notool -L lib/crypto-*/priv/lib/crypto.so\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing with MQTTX\nDESCRIPTION: Command to publish a test message to topic t/1 using MQTTX client to verify the GreptimeDB integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello GreptimeDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorization in EMQX 4.4\nDESCRIPTION: This snippet demonstrates the configuration for HTTP-based authorization in EMQX 4.4. It includes settings for the request URL, method, headers, parameters, timeouts, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_26\n\nLANGUAGE: hocon\nCODE:\n```\nauth.http.acl_req.url = http://127.0.0.1:80/mqtt/acl\nauth.http.acl_req.method = post\nauth.http.acl_req.headers.content_type = application/x-www-form-urlencoded\n\nauth.http.acl_req.params = clientid=%c,username=%u,password=%P\n\nauth.http.timeout = 5s\n\nauth.http.connect_timeout = 5s\nauth.http.pool_size = 32\n\nauth.http.enable_pipelining = 100\n\nauth.http.ssl = on\nauth.http.ssl.cacertfile = path/to/your/cafile.pem\nauth.http.ssl.certfile = path/to/your/certfile\nauth.http.ssl.keyfile = path/to/your/keyfile\nauth.http.ssl.verify = true\nauth.http.ssl.server_name_indication = myhttp\n```\n\n----------------------------------------\n\nTITLE: 创建 MySQL 数据表 emqx_messages\nDESCRIPTION: 创建一个名为 emqx_messages 的数据表，用于存储每条消息的发布者客户端 ID、主题、Payload 以及发布时间。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE emqx_messages (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  clientid VARCHAR(255),\n  topic VARCHAR(255),\n  payload TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in Sharding Mode\nDESCRIPTION: Configuration example for connecting EMQX to a sharded MongoDB cluster for authentication, listing multiple shard servers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mongodb.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = mongodb\n  enable = true\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n  }\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = sharded\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: User-Level File Handle Limits Configuration\nDESCRIPTION: Sets soft and hard limits for file handles in the system security limits configuration file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n*      soft   nofile      2097152\n*      hard   nofile      2097152\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Plus for Client ID Replacement in MQTT\nDESCRIPTION: This NGINX Plus configuration demonstrates the client ID replacement feature for MQTT connections. It replaces the original client ID with the SSL certificate serial number, enhancing security by avoiding the storage of sensitive device information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nstream {\n    mqtt on;\n\n    server {\n        listen 1883 ssl;\n        ssl_certificate /etc/NGINX/certs/emqx.pem;\n        ssl_certificate_key /etc/NGINX/certs/emqx.key;\n        ssl_client_certificate /etc/NGINX/certs/ca.crt;      \n        ssl_session_cache shared:SSL:10m;\n        ssl_verify_client on;\n        proxy_pass 10.0.0.113:1883;\n        proxy_connect_timeout 1s;  \n\n        mqtt_set_connect clientid $ssl_client_serial;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Durable Storage Replicas in EMQX CLI\nDESCRIPTION: This command sets the list of sites containing replicas of the durable storage in the cluster. It creates a plan for fair allocation of shards between sites and executes it in the background.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/management.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx_ctl ds set_replicas messages 5C6028D6CE9459C7 D8894F95DC86DFDB F4E92DEA197C8EBC\nok\n```\n\n----------------------------------------\n\nTITLE: Converting Any Term to UTF-16 Little-Endian Binary in EMQX\nDESCRIPTION: The str_utf16_le function converts any term to a UTF-16 little-endian encoded binary string. This encoding is typically used in systems like Microsoft SQL Server and may not display properly in JSON objects. For readability, the bin2hexstr function can be used to convert the binary to a hexadecimal string.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Unicode `h`:\n# |                          h(\\u68)                              |\n# | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | (big endian)\n# |              0x00             |              0x68             |\n# | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | (little endian)\n# |              0x68             |              0x00             |\nstr_utf16_le('h') = 'h\\u0000'\n\nbin2hexstr(str_utf16_le('hello')) = '680065006C006C006F00'\n```\n\n----------------------------------------\n\nTITLE: HTML Tables for EMQX Product Comparison\nDESCRIPTION: HTML tables displaying detailed comparison of EMQX products across different deployment options, including scalability metrics, performance characteristics, and clustering features.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/feature-comparison.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center;\">\n<table>\n<thead>\n  <tr>\n    <th rowspan=\"2\">Scalability/Performance</th>\n    <th colspan=\"2\">Self-Hosted</th>\n    <th colspan=\"2\">MQTT as a Service</th>\n    <th rowspan=\"2\">Notes and Links</th>\n  </tr>\n  <!-- Additional table content omitted for brevity -->\n</table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Redis via Docker\nDESCRIPTION: Commands to install Redis using Docker, set a password, access the container, and verify the installation using basic Redis commands.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start a Redis container and set the password to public\ndocker run --name redis -p 6379:6379 -d redis --requirepass \"public\"\n\n# Access the container\ndocker exec -it redis bash\n\n# Access the Redis server, use the AUTH command for authentication\nredis-cli\n127.0.0.1:6379> AUTH public\nOK\n\n# Verify the installation\n127.0.0.1:6379> set emqx \"Hello World\"\nOK\n127.0.0.1:6379> get emqx\n\"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message to topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello PostgreSQL\" }'\n```\n\n----------------------------------------\n\nTITLE: Multi-Level Wildcard Matching Topics\nDESCRIPTION: Example topics that match the sensor/# subscription pattern using multi-level wildcard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_4\n\nLANGUAGE: pgsql\nCODE:\n```\nsensor\nsensor/temperature\nsensor/1/temperature\n```\n\n----------------------------------------\n\nTITLE: MQTTX Command for Publishing Test Message\nDESCRIPTION: This bash command uses MQTTX to publish a test message to the topic 't/1' with temperature, humidity, and location data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{\"temp\":24,\"humidity\":30,\"location\":\"hangzhou\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for LwM2M Gateway via conf\nDESCRIPTION: This snippet demonstrates how to configure HTTP authentication for the LwM2M gateway using the `emqx.conf` file. It configures backend, mechanism, request details and ssl settings for the authentication request.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ngateway.lwm2m {\n  authentication {\n    backend = \"http\"\n    mechanism = \"password_based\"\n    method = \"post\"\n    connect_timeout = \"5s\"\n    enable_pipelining = 100\n    url = \"http://127.0.0.1:8080\"\n    headers {\n      \"content-type\" = \"application/json\"\n    }\n    body {\n      clientid = \"${clientid}\"\n    }\n    pool_size = 8\n    request_timeout = \"5s\"\n    ssl.enable = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX\nDESCRIPTION: Command to publish a test message to MQTT topic t/my_topic using MQTTX client\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/my_topic -m '{ \"msg\": \"hello Amazon Kinesis\" }'\n```\n\n----------------------------------------\n\nTITLE: Stopping a Gateway\nDESCRIPTION: Stops a running gateway without unloading it. The gateway remains loaded but inactive until started again.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl gateway stop coap\nok\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Delayed Publish Settings in EMQX\nDESCRIPTION: Configuration block for delayed message publishing functionality, including enable/disable toggle and maximum delayed message limit settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/mqtt.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndelay {\n  delayed_publish_enabled = true\n  max_delayed_messages = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the gRPC Server in Python\nDESCRIPTION: This Python command executes the `exproto_server.py` script, starting the gRPC server.  This server implements the `ConnectionUnaryHandler` service, which receives data from the ExProto gateway and echoes it back to the client. Ensure you have the required dependencies installed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython exproto_server.py\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE SQL Structure\nDESCRIPTION: This SQL snippet demonstrates the structure of FOREACH-DO-INCASE, used for iterating over array data and performing actions on each element. It defines the selection of fields from a topic with conditions applied during each iteration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH <字段名> [DO <条件>] [INCASE <条件>] FROM <主题> [WHERE <条件>]\n```\n\n----------------------------------------\n\nTITLE: Select Peername from Client Connected Event\nDESCRIPTION: This SQL query selects the 'peername' field (aliased as 'ip_port') from the '$events/client_connected' event stream, filtering for events where 'clientid' is equal to 'c1'. This demonstrates how to extract connection information from client connected events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT peername as ip_port FROM \"$events/client_connected\" WHERE clientid = 'c1'\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Configuration Example in EMQX\nDESCRIPTION: Enhanced JWT authentication with claims verification support using a list of objects. Expected values are treated as templates, allowing for arbitrary expressions such as ${username} and ${clientid}.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    name = \"claim_name\",\n    value = \"${username}\"\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Docker Container for S3-Compatible Storage\nDESCRIPTION: This command runs a MinIO Docker container, setting up an S3-compatible storage service with specified ports, credentials, and console address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/s3.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n   -p 9000:9000 \\\n   -p 9001:9001 \\\n   --name minio \\\n   -e \"MINIO_ROOT_USER=admin\" \\\n   -e \"MINIO_ROOT_PASSWORD=MyMinIOPassword\" \\\n   minio/minio:RELEASE.2024-02-17T01-15-57Z.fips \\\n   server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Connecting with MQTTX CLI for Auto Subscription Testing\nDESCRIPTION: Creates a new MQTT connection with client ID 'emqx_c' using MQTTX CLI. Once connected, the client will automatically subscribe to the configured topic based on the Auto Subscribe rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-auto-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqttx conn -i emqx_c\n```\n\n----------------------------------------\n\nTITLE: SQL Rule Example for Value Coalescing\nDESCRIPTION: Example showing how to handle null values in rule SQL expressions using the old CASE statement approach.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  CASE\n    WHEN is_null(payload.path.to.value) THEN\n      0\n    ELSE\n      payload.path.to.value\n  END AS my_value\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing in EMQX\nDESCRIPTION: This SQL statement defines a rule in EMQX to select all messages from topics matching the pattern 't/#'. It's used to filter and process MQTT messages before forwarding them to the HTTP server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-webhook.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: HAProxy Global Configuration\nDESCRIPTION: This is a HAProxy configuration snippet defining global settings. It sets the logging level, runs HAProxy as a daemon, and defines the maximum number of concurrent connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nglobal  \n  log 127.0.0.1 local3 info \n  daemon  \n  maxconn 1024000\n```\n\n----------------------------------------\n\nTITLE: String Split - split Function\nDESCRIPTION: Divides a string into substrings using a specified separator. Supports various trimming and processing options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsplit('a;b;c', ';') = ['a', 'b', 'c']\nsplit('a;;b;;c', ';') = ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for EMQX on CentOS/RHEL\nDESCRIPTION: These commands install the necessary dependencies (EPEL repository and OpenSSL 1.1) for EMQX on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install epel-release -y\nyum install -y openssl11 openssl11-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring Flapping Detection in EMQX\nDESCRIPTION: This code snippet demonstrates how to configure flapping detection in EMQX. It sets the maximum connection attempts, time window for counting attempts, and ban duration for detected flapping clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/flapping.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflapping_detect {\n  enable = true\n  max_count  =  15\n  window_time  =  1m\n  ban_time  =  5m\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GB/T 32960 Gateway via REST API in EMQX\nDESCRIPTION: HTTP PUT request to enable and configure the GB/T 32960 Gateway with basic settings including mountpoint, retry intervals, and TCP listener configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/gbt32960.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/gbt32960' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"gbt32960\",\n  \"enable\": true,\n  \"mountpoint\": \"gbt32960/${clientid}/\",\n  \"retry_interval\": \"8s\",\n  \"max_retry_times\": 3,\n  \"message_queue_len\": 10,\n  \"listeners\": [\n    {\n      \"type\": \"tcp\",\n      \"name\": \"default\",\n      \"bind\": \"7325\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Delayed Messages with MQTTX CLI\nDESCRIPTION: Command to subscribe to topic 't/1' using MQTTX CLI with verbose output. This will receive any delayed messages published to this topic once the delay interval has passed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-delayed-publish.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -v\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Memory Leaks\nDESCRIPTION: Command to force garbage collection and display top 100 processes with maximum binary data release.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl observer bin_leak\n{<0.2140.0>,-48,\n [{current_function,{logger_std_h,file_ctrl_loop,1}},\n  {initial_call,{erlang,apply,2}}]}\n{<0.2093.0>,-29,\n [{current_function,{application_master,main_loop,2}},\n  {initial_call,{proc_lib,init_p,5}}]}\n{<0.2116.0>,-23,\n [user_drv,\n  {current_function,{user_drv,server_loop,6}},\n  {initial_call,{user_drv,server,2}}]}\n...\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Authentication Configuration\nDESCRIPTION: Core MongoDB authentication mechanism and backend configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmechanism = password_based\nbackend = mongodb\n```\n\n----------------------------------------\n\nTITLE: Protocol Message Definitions - Data Structure Tables\nDESCRIPTION: Comprehensive tables defining message structures for multimedia events, data uploads, camera controls, and encryption keys. Each table specifies field names, JSON mappings, and value types for protocol implementation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### Multimedia Event Information Upload `\"msg_id\": 2048` 0x0800\n\n|           Field            | JSON Key name | Value Type | Value Type in JSON |\n| :------------------------: | :-----------: | :--------: | :----------------: |\n|     Multimedia Data ID     |      id       |   dword    |      integer       |\n|      Multimedia Type       |     type      |    byte    |      integer       |\n| Multimedia Encoding Format |    format     |    byte    |      integer       |\n|      Event Item Code       |     event     |    byte    |      integer       |\n|         Channel ID         |    channel    |    byte    |      integer       |\n```\n\n----------------------------------------\n\nTITLE: Loading Module via HTTP API\nDESCRIPTION: Example of using the EMQX HTTP API to load the emqx_mod_delayed module. The command uses basic authentication and performs a PUT request to the modules endpoint.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/advanced/internal-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i --basic -u admin:public -X PUT \"http://localhost:8081/api/v4/nodes/emqx@127.0.0.1/modules/emqx_mod_delayed/load\"\n\n{\"code\":0}\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT to MongoDB Integration\nDESCRIPTION: MQTT publish command to test the data flow from EMQX to MongoDB\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello MongoDB\" }'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Message Drop Events\nDESCRIPTION: SQL rule to capture message dropped and delivery dropped events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/message_dropped\", \"$events/delivery_dropped\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Topics\nDESCRIPTION: This code snippet demonstrates how to create two Kafka topics, `testtopic-in` and `testtopic-out`, using the `kafka-topics.sh` script. These topics are used for demonstrating the Kafka Sink (input) and Kafka Source (output) functionalities in EMQX's data integration with Kafka. The commands specify the topic names and the bootstrap server address.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"bin/kafka-topics.sh --create --topic testtopic-in --bootstrap-server localhost:9092\n\nbin/kafka-topics.sh --create --topic testtopic-out --bootstrap-server localhost:9092\"\n```\n\n----------------------------------------\n\nTITLE: Setting up EMQX File Transfer Client\nDESCRIPTION: Commands to set up the EMQX file transfer client environment using Python virtual environment.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqx-ft.git\ncd emqx-ft\npython3 -m venv .venv\nsource .venv/bin/activate\npip install .\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for GCP Pub/Sub Consumer\nDESCRIPTION: SQL query to select all messages from the GCP Pub/Sub Consumer bridge source.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-gcp-pubsub.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$bridges/gcppubsub:my-gcppubsub-source\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Gateway via HTTP API\nDESCRIPTION: This code snippet shows how to configure the LwM2M gateway using the EMQX HTTP API.  It sets parameters such as XML directory, auto-observe, listeners, and message translators.  It requires an application key and security key for authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/lwm2m' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"lwm2m\"\n  \"xml_dir\": \"etc/lwm2m_xml/\",\n  \"qmode_time_window\": \"22s\",\n  \"lifetime_min\": \"1s\",\n  \"lifetime_max\": \"86400s\",\n  \"auto_observe\": true,\n  \"enable_stats\": true,\n  \"update_msg_publish_condition\": \"contains_object_list\",\n  \"mountpoint\": \"lwm2m/${endpoint_name}/\",\n  \"translators\": {\n    \"command\": {\"topic\": \"dn/#\", \"qos\": 0},\n    \"response\": {\"topic\": \"up/resp\", \"qos\": 0},\n    \"notify\": {\"topic\": \"up/notify\", \"qos\": 0},\n    \"register\": {\"topic\": \"up/resp\", \"qos\": 0},\n    \"update\": {\"topic\": \"up/update\", \"qos\": 0}\n  },\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"name\": \"default\",\n      \"bind\": \"5783\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000,\n    }\n  ],\n}'\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into ClickHouse Messages Table\nDESCRIPTION: SQL template for inserting processed MQTT message data and timestamp into the 'messages' table in ClickHouse.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO messages(data, arrived) VALUES ('${data}', ${timestamp})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Will Message Topic with MQTTX CLI\nDESCRIPTION: Command to subscribe to topic 't/1' using MQTTX CLI. This client will receive the will message when the publisher disconnects unexpectedly. The -v flag enables verbose output.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-will-message.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h 'localhost' -p 1883 -v\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Depth in EMQX 4.2.2\nDESCRIPTION: Added SSL support to configure the depth of the CA certificate in EMQX 4.2.2. This allows more granular control over SSL certificate validation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_29\n\nLANGUAGE: erlang\nCODE:\n```\nAdded SSL support to configure the depth of the CA certificate\n```\n\n----------------------------------------\n\nTITLE: Select Clientid from Session Subscribed Event\nDESCRIPTION: This SQL query selects the 'clientid' from the '$events/session_subscribed' event stream, filtering for events where the 'topic' is 't/#' and the 'qos' is 1. This demonstrates how to identify clients subscribed to a specific topic with a specific QoS level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid FROM \"$events/session_subscribed\" WHERE topic = 't/#' and qos = 1\n```\n\n----------------------------------------\n\nTITLE: Querying Stored Client Events in Oracle Database\nDESCRIPTION: SQL query to check if the client connection event data has been successfully written into the 't_emqx_client_events' table in Oracle Database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM t_emqx_client_events;\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Connect Command\nDESCRIPTION: Example command to establish 1000 MQTT connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench conn -h emqx-server -c 1000\n```\n\n----------------------------------------\n\nTITLE: Viewing Shard Allocation in EMQX Enterprise\nDESCRIPTION: Use the 'emqx ctl' CLI with the 'ds' subcommand to view the current shard allocation in the EMQX cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds info\nSITES:\n...\nSHARDS:\n...\n```\n\n----------------------------------------\n\nTITLE: Running OCPP Client with Docker\nDESCRIPTION: Command to run an OCPP client using Docker, connecting to the OCPP Gateway. The client simulates a charge point connection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/ocpp.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -e CLIENT_ID=chargePointSim -e CENTRAL_SYSTEM_URL=ws://<host>:33033/ocpp -it --rm --name charge-point ldonini/ocpp1.6-charge-point:latest\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Client Connection Event\nDESCRIPTION: Example JSON output from the '$events/client_connected' event query, showing the username, keepalive interval, bridge status, and client ID information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"keepalive\": 60,\n  \"is_bridge\": false,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Index for Couchbase Collection\nDESCRIPTION: Command to create a primary index for the default collection in the Couchbase bucket. This is executed within the Docker container to set up the necessary database structure.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-couchbase.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -t db /opt/couchbase/bin/cbq -u admin -p password -engine=http://127.0.0.1:8091/ -script \"create primary index on default:emqx_data._default._default;\"\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publication\nDESCRIPTION: MQTTX command to publish a test message to topic 't/1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Cassandra\" }'\n```\n\n----------------------------------------\n\nTITLE: Select All Fields from Multiple Topics\nDESCRIPTION: This SQL query selects all fields from messages published to either the 't/a' or 't/b' topics. It demonstrates how to retrieve data from multiple sources in a single query using a comma-separated list of topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/a\",\"t/b\"\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publishing\nDESCRIPTION: Using MQTTX to publish a test message that triggers both message storage and connection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello TDengine\" }'\n```\n\n----------------------------------------\n\nTITLE: Loading Lua Hook Plugin in EMQX\nDESCRIPTION: This bash command loads the emqx_lua_hook plugin in EMQX, which is necessary for using Lua scripts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/lang-lua.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins load emqx_lua_hook\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Shared Subscription Message Loss Fix in EMQX 4.3.5\nDESCRIPTION: References a GitHub pull request that fixes an issue where messages may be lost after canceling the subscription when multiple shared subscriptions are established by the same client in EMQX version 4.3.5.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5098](https://github.com/emqx/emqx/pull/5098)\n```\n\n----------------------------------------\n\nTITLE: MQTTX CLI Subscribe Command\nDESCRIPTION: This command shows how to use MQTTX CLI to subscribe to a specific topic (`t/1`) on a given EMQX node.  The command specifies the host and port of the EMQX broker to connect to. This subscription is used in the end-to-end tracing example to demonstrate how messages are traced from publisher to subscriber.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nmqttx sub -t t/1 -h 172.19.0.2 -p 1883\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for RabbitMQ Source in EMQX\nDESCRIPTION: This SQL statement selects all fields from the RabbitMQ source bridge. It's used in the EMQX rule engine to process incoming data from RabbitMQ.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n*\nFROM\n\"$bridges/rabbitmq:my-rabbitmq-source\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in Connectionless Mode\nDESCRIPTION: Example using libcoap to subscribe to a topic in Connectionless Mode. The request uses the observe option to establish the subscription.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m get -s 60 -O 6,0x00 -o - -T \"obstoken\" \"coap://127.0.0.1/ps/coap/test\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Selection\nDESCRIPTION: SQL statement to select all messages from topic 't/#' for processing in the Azure Event Hubs sink rule.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-azure-event-hub.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Standardized Gateway Listener Configuration in EMQX 5.x\nDESCRIPTION: Example of the standardized listener configuration format in EMQX 5.x using the Exproto gateway. Shows TCP, SSL, UDP, and DTLS listener configurations with the same structured format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\n## etc/emqx.conf\ngateway.exproto {\n    listeners.tcp.default {\n        bind = \"0.0.0.0:7993\"\n    }\n    listeners.ssl.default {\n        bind = \"0.0.0.0:7994\"\n        cacertfile = ..\n        certfile = ..\n        keyfile = ..\n    }\n    listeners.udp.default { ... }\n    listeners.dtls.default { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Client Connection Events in EMQX\nDESCRIPTION: SQL rule for selecting all fields from client connection and disconnection events, including calculated timestamp fields for seconds and milliseconds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  floor(timestamp / 1000) as s_shift,\n  timestamp div 1000 as ms_shift\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Schema Encoding Function Call in Erlang\nDESCRIPTION: Basic function signature for encoding data using a schema, converting a Map to binary format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nschema_encode(SchemaName, Map) -> Bytes\n```\n\n----------------------------------------\n\nTITLE: Enabling OCPP Gateway via HTTP API\nDESCRIPTION: Example of how to enable and configure the OCPP Gateway using EMQX's HTTP API. The request configures basic gateway settings and a WebSocket listener on port 33033.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/ocpp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateways/ocpp' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"ocpp\",\n  \"enable\": true,\n  \"mountpoint\": \"ocpp/\",\n  \"listeners\": [\n    {\n      \"type\": \"ws\",\n      \"name\": \"default\",\n      \"bind\": \"33033\",\n      \"websocket\": {\n        \"path\": \"/ocpp\"\n      }\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp to MongoDB ISODate in EMQX Enterprise\nDESCRIPTION: Shows how to convert a Unix timestamp in milliseconds to MongoDB ISODate format using the mongo_date() function in EMQX Enterprise edition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nmongo_date(now_timestamp('millisecond')) = 'ISODate(2024-02-23T15:48:57.871Z)'\n```\n\n----------------------------------------\n\nTITLE: MySQL Authorization Checker Configuration in HCL\nDESCRIPTION: Configuration example for a MySQL authorization checker in EMQX, defining database connection details and the query to retrieve client permissions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/authz.md#2025-04-20_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n{\n\n    type = mysql\n    database = \"mqtt\"\n    username = \"root\"\n    password = \"public\"\n\n    query = \"SELECT permission, action, topic FROM mqtt_acl WHERE username = ${username}\"\n    server = \"127.0.0.1:3306\"\n}\n```\n\n----------------------------------------\n\nTITLE: ExProto ConnectionAdapter Service Configuration in EMQX 5.0\nDESCRIPTION: New configuration format for ExProto's ConnectionAdapter service in EMQX 5.0, showing the simplified structure with bind address and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_6\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.exproto {\n  server {\n    bind = \"0.0.0.0:9100\"\n    ssl_options {verify = \"verify_none\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TCP Backlog Configuration\nDESCRIPTION: Increases the TCP connection backlog limits for better handling of incoming connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.core.somaxconn=32768\nsysctl -w net.ipv4.tcp_max_syn_backlog=16384\nsysctl -w net.core.netdev_max_backlog=16384\n```\n\n----------------------------------------\n\nTITLE: Starting HStreamDB TLS Service\nDESCRIPTION: Command to start the HStreamDB TLS service using Docker Compose with environment variable for the CA path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv step_ca=$PWD/ca docker compose -f docker-compose-tls.yaml up --build\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message Using MQTTX CLI\nDESCRIPTION: This command uses MQTTX CLI to publish a message 'hello world' to the 't/1' topic with the retain flag set.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t t/1 -m \"hello world\" -r\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing\nDESCRIPTION: SQL rule to select all messages from MQTT topic t/#\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel Authorization Configuration\nDESCRIPTION: Configuration block for setting up Redis authorizer using Sentinel deployment mode with multiple server endpoints.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    type = redis\n\n    redis_type = sentinel\n    servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n    sentinel = \"mymaster\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    database = 1\n    password = public\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cached Message in Redis\nDESCRIPTION: Redis command to retrieve the cached message details for a specific client.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> HGETALL emqx_messages:emqx_c\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Rule Information\nDESCRIPTION: Shows detailed information about a specific rule identified by its ID, including SQL statement, actions, creation time, and more.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl rules show my-rule\nId:\n  my-rule\nName:\n\nDescription:\n  this is my rule\nEnabled:\n  true\nSQL:\n  SELECT\n    *\n  FROM\n    \"f/#\"\nCreated at:\n  2023-05-22T14:14:27.567+08:00\nUpdated at:\n  2023-05-22T14:14:27.567+08:00\nActions:\n  - Name:  republish\n    Type:  function\n    Args:  #{payload => <<>>,qos => 0,retain => false,topic => <<\"t/1\">>,\n             user_properties => <<\"${user_properties}\">>}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExProto Authentication via HTTP API in EMQX\nDESCRIPTION: This code demonstrates how to configure HTTP Server authentication for the ExProto gateway using the EMQX HTTP API. It sets up password-based authentication that forwards credentials to an external HTTP server for verification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/exproto.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/exproto/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"username\": \"${username}\",\n    \"password\": \"${password}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel Authentication Configuration\nDESCRIPTION: Configuration for Redis Sentinel authentication setup with multiple servers\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/redis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = redis\n\n  redis_type = sentinel\n  servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n  sentinel = \"mymaster\"\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = suffix\n  }\n\n  cmd = \"HMGET mqtt_user:${username} password_hash salt is_superuser\"\n  database = 1\n  password = \"public\"\n  auto_reconnect = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - Zone Retry Interval\nDESCRIPTION: Configuration parameter for specifying QoS1/QoS2 message retransmission interval in a specific zone.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\nzone.<zone-name>.retry_interval\n```\n\n----------------------------------------\n\nTITLE: Disconnecting EMQX Client\nDESCRIPTION: Command to forcefully disconnect a specific EMQX client. This example shows the disconnection of the client with ID 'emqx_c'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients kick emqx_c\nok\n```\n\n----------------------------------------\n\nTITLE: Managing Retained Messages\nDESCRIPTION: Commands for inspecting and managing retained messages, including viewing info, topics, cleaning messages, and reindexing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl retainer info\nNumber of retained messages: 3\n\n$ emqx ctl retainer topics\n$SYS/brokers\n$SYS/brokers/emqx@127.0.0.1/sysdescr\n$SYS/brokers/emqx@127.0.0.1/version\n\n$ emqx ctl retainer reindex status\nReindexing is not running\n\n$ emqx ctl retainer reindex start true\nStarting reindexing\nReindexed 0 messages\nReindexing finished\n```\n\n----------------------------------------\n\nTITLE: Inspecting Cluster Configuration Sync\nDESCRIPTION: Command to inspect configuration modification records within the cluster scope using transaction IDs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl conf cluster_sync inspect 2\n{atomic,#{created_at => {{2022,6,21},{21,57,50}},\n          initiator => 'emqx@127.0.0.1',\n          mfa =>\n              {emqx,update_config,\n                    [[listeners,ssl,default],\n                     {action,stop,#{\\\"enabled\\\" => false}},\n                     #{override_to => cluster,rawconf_with_defaults => true}]},\n          tnx_id => 2}}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Transfer Response JSON in MQTT\nDESCRIPTION: This JSON structure represents the response message format for asynchronous file transfer commands. It includes version, topic, packet ID, reason code, and description fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/client.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vsn\": \"0.1\",\n  \"topic\": \"$file-async/[COMMAND]\",\n  \"packet_id\": 1,\n  \"reason_code\": 0,\n  \"reason_description\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Maps-Editor Component Items in JSON\nDESCRIPTION: Example showing how to configure items for a maps-editor component, specifying field names, descriptions, and types for form elements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": {\n    \"optionName\": {\n      \"label\": \"$optionNameLabel\",\n      \"description\": \"$optionDesc\",\n      \"type\": \"string\"\n    },\n    \"optionValue\": {\n      \"label\": \"$optionValueLabel\",\n      \"description\": \"$optionValueDesc\",\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request with URL Placeholders Configuration in HCL\nDESCRIPTION: Configuration example showing how placeholders in the URL and body are populated for GET requests. The placeholders are replaced with actual client values at runtime.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    method = get\n    url = \"http://127.0.0.1:8080/authz/${clientid}\"\n    body {\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry Services with Docker Compose\nDESCRIPTION: Command to start the Jaeger and OpenTelemetry Collector services using Docker Compose. This launches the configured services defined in the docker-compose-otel-trace.yaml file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose-otel-trace.yaml up\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication via REST API\nDESCRIPTION: This bash script demonstrates how to configure authentication for the ExProto gateway using the EMQX REST API.  It sends a POST request to the specified API endpoint, providing details about the authentication method (HTTP POST in this case), the URL to which the authentication request should be sent, headers, the body of the request (containing username and password placeholders), and SSL settings. The user needs to replace `<your-application-key>` and `<your-security-key>` with the actual credentials.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/exproto/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"username\": \"${username}\",\n    \"password\": \"${password}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd Network Plugin\nDESCRIPTION: Configuration for collectd's Network plugin to transmit metrics to InfluxDB on Server 2. The {Host} placeholder must be replaced with the actual LAN IP of the InfluxDB server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\nLoadPlugin network\n<Plugin network>\n  Server \"{Host}\" \"25826\"\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Using JWT for Authorization in EMQX\nDESCRIPTION: EMQX now supports using JWT for authorization, allowing MQTT clients to authorize using specific claims that include a pub-sub whitelist.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_5\n\nLANGUAGE: Erlang\nCODE:\n```\n% Example JWT claim for authorization\n{\n  \"sub\": \"client_id\",\n  \"pub\": [\"topic1\", \"topic2\"],\n  \"sub\": [\"topic3\", \"topic4\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Node Loss Recovery in EMQX Cluster\nDESCRIPTION: Command to inform the EMQX cluster that a lost site will never return, completing the recovery process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds forget messages 5C6028D6CE9459C7\n```\n\n----------------------------------------\n\nTITLE: Selecting MQTT Messages with SQL in EMQX\nDESCRIPTION: This SQL statement selects the payload and current timestamp from MQTT messages matching the topic pattern 't/#'. It's used in the rule creation process to specify which messages to process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload,\n  now_timestamp() as timestamp\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Enabling STOMP Gateway via HTTP API in EMQX\nDESCRIPTION: This code snippet demonstrates how to enable and configure the STOMP Gateway using EMQX's HTTP API. It sets up a TCP listener on port 61613 and configures basic gateway settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/stomp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateways/stomp' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"stomp\",\n  \"enable\": true,\n  \"mountpoint\": \"stomp/\",\n  \"listeners\": [\n    {\n      \"type\": \"tcp\",\n      \"name\": \"default\",\n      \"bind\": \"61613\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTSDB Using Docker\nDESCRIPTION: Commands to pull and run OpenTSDB Docker container on x86 platforms. The container exposes port 4242 for OpenTSDB access.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull petergrace/opentsdb-docker\n\ndocker run -d --name opentsdb -p 4242:4242 petergrace/opentsdb-docker\n```\n\n----------------------------------------\n\nTITLE: TDengine Insert Syntax with Quoted String Values in SQL\nDESCRIPTION: Example of the correct way to quote string values in TDengine insert statements. This syntax shows how string type values must be explicitly quoted in the template, which is a breaking change from previous behavior.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\ninsert into table values (${ts}, '${a_string}')\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Client Events\nDESCRIPTION: SQL rule to capture client connection and disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings with Timezone Offset\nDESCRIPTION: Examples of converting date strings with explicit timezone offsets to Unix timestamps\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndate_to_unix_ts('second', '+08:00', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00') = 1708671600\ndate_to_unix_ts('second', 'Z', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 07:00:00') = 1708671600\ndate_to_unix_ts('second', 14400, '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00') = 1708686000\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for MQTT-SN Gateway via HTTP API\nDESCRIPTION: HTTP API configuration for setting up HTTP-based authentication for the MQTT-SN gateway with custom settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/mqttsn.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/mqttsn/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"clientid\": \"${clientid}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Connecting with MQTTX CLI and Setting Will Message\nDESCRIPTION: Command to connect to an MQTT broker using MQTTX CLI with a will message configured. The will message will be sent to subscribers of topic 't/1' if the client disconnects unexpectedly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-will-message.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mqttx conn -h 'localhost' -p 1883 --will-topic 't/1' --will-message 'A will message from MQTTX CLI'\n```\n\n----------------------------------------\n\nTITLE: Using Other Data Type Check Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using additional data type check functions in the EMQX rule engine, including checks for numeric types, strings, and empty collections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nis_num(123) = true\nis_num(123.4) = true\nis_num('123') = false\n\nis_str('123') = true\nis_str(123) = false\n\nis_empty(json_decode('{}')) = true\nis_empty('{}') = true\nis_empty('{\"key\" : 1}') = false\nis_empty(map_get('key', '{\"key\" : []}')) = true\nis_empty(map_get('key', '{\"key\" : [1}')) = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Retained Message Forwarding in EMQX Enterprise 4.2.10\nDESCRIPTION: Configuration option to control forwarding of retained messages with empty payloads, added to support users still using MQTT v3.1. The retainer.stop_publish_clear_msg option can be set to control this behavior.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_25\n\nLANGUAGE: Erlang\nCODE:\n```\nretainer.stop_publish_clear_msg = true\n```\n\n----------------------------------------\n\nTITLE: Updating License (Enterprise Edition)\nDESCRIPTION: Updates the license information for EMQX Enterprise edition by providing a new license string that contains updated entitlements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl license update <YOUR_LICENSE_STRING>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft ODBC Driver on Docker Image\nDESCRIPTION: Dockerfile for building a custom EMQX Enterprise image with Microsoft ODBC driver installed for SQL Server connectivity.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM emqx/emqx-enterprise:5.8.1\n\nUSER root\n\nRUN apt-get -qq update && apt-get install -yqq curl gpg && \\\n    . /etc/os-release && \\\n    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg && \\\n    curl -fsSL \"https://packages.microsoft.com/config/${ID}/${VERSION_ID}/prod.list\" > /etc/apt/sources.list.d/mssql-release.list && \\\n    apt-get -qq update && \\\n    ACCEPT_EULA=Y apt-get install -yqq msodbcsql18 unixodbc-dev && \\\n    sed -i 's/ODBC Driver 18 for SQL Server/ms-sql/g' /etc/odbcinst.ini && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nUSER emqx\n```\n\n----------------------------------------\n\nTITLE: Configuring CoAP Gateway via HTTP API\nDESCRIPTION: HTTP API configuration for enabling CoAP gateway with UDP listener and specific connection settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/coap.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/coap' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"coap\",\n  \"enable\": true,\n  \"mountpoint\": \"coap/\",\n  \"connection_required\": false,\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"name\": \"default\",\n      \"bind\": \"5683\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Gateway via Configuration File in EMQX\nDESCRIPTION: This configuration snippet shows how to set up the LwM2M Gateway using the EMQX configuration file. It includes settings for XML directory, lifetime, translators, and listener configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway.lwm2m {\n  xml_dir = \"etc/lwm2m_xml/\"\n  auto_observe = true\n  enable_stats = true\n  idle_timeout = \"30s\"\n  lifetime_max = \"86400s\"\n  lifetime_min = \"1s\"\n  mountpoint = \"lwm2m/${endpoint_namea}/\"\n  qmode_time_window = \"22s\"\n  update_msg_publish_condition = \"contains_object_list\"\n  translators {\n    command {qos = 0, topic = \"dn/#\"}\n    notify {qos = 0, topic = \"up/notify\"}\n    register {qos = 0, topic = \"up/resp\"}\n    response {qos = 0, topic = \"up/resp\"}\n    update {qos = 0, topic = \"up/update\"}\n  }\n  listeners {\n    udp {\n      default {\n        bind = \"5783\"\n        max_conn_rate = 1000\n        max_connections = 1024000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TCP TIME-WAIT Configuration\nDESCRIPTION: Configures TCP TIME-WAIT bucket pool size and related parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.tcp_max_tw_buckets=1048576\n\n# Enabling following option is not recommended. It could cause connection reset under NAT\n# sysctl -w net.ipv4.tcp_tw_recycle=1\n# sysctl -w net.ipv4.tcp_tw_reuse=1\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Decoding Avro Messages\nDESCRIPTION: This SQL rule decodes Avro messages using the 'avro_user' schema, filters for messages with name 'Shawn', and selects the decoded payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-avro.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  schema_decode('avro_user', payload) as avro_user, payload\nFROM\n  \"t/#\"\nWHERE\n  avro_user.name = 'Shawn'\n```\n\n----------------------------------------\n\nTITLE: Redis Query Command Configuration\nDESCRIPTION: Configuration snippet showing the command template used to retrieve authorization rules from Redis using username placeholder.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd = \"HGETALL mqtt_acl:${username}\"\n```\n\n----------------------------------------\n\nTITLE: Starting an MQTT Listener\nDESCRIPTION: Starts a previously stopped MQTT listener identified by its type and name. This change is temporary and will revert after EMQX restarts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners start tcp:default\nStarted tcp:default listener successfully.\n```\n\n----------------------------------------\n\nTITLE: Log Level Hierarchy in EMQX\nDESCRIPTION: Shows the 8 log levels in EMQX as defined by RFC 5424, ordered from lowest to highest severity.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndebug < info < notice < warning < error < critical < alert < emergency\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLDAP Server for EMQX Integration\nDESCRIPTION: Example slapd.conf configuration file that includes the EMQX schema, TLS certificates, and database configuration. This setup is necessary for the LDAP server to load the custom schema and credentials for EMQX authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/ldap.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ninclude         /usr/local/etc/openldap/schema/core.schema\ninclude         /usr/local/etc/openldap/schema/cosine.schema\ninclude         /usr/local/etc/openldap/schema/inetorgperson.schema\ninclude         /usr/local/etc/openldap/schema/emqx.schema\n\nTLSCACertificateFile  /usr/local/etc/openldap/cacert.pem\nTLSCertificateFile    /usr/local/etc/openldap/cert.pem\nTLSCertificateKeyFile /usr/local/etc/openldap/key.pem\n\ndatabase mdb\nsuffix \"dc=emqx,dc=io\"\nrootdn \"cn=root,dc=emqx,dc=io\"\nrootpw {SSHA}eoF7NhNrejVYYyGHqnt+MdKNBh4r1w3W\n\ndirectory       /usr/local/etc/openldap/data\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authorization in EMQX 5.1\nDESCRIPTION: This snippet shows the configuration for using the built-in database for authorization in EMQX 5.1. It's a simple configuration enabling the built-in database as an authorization source.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_25\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = built_in_database\n  enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for HTTP Pipelining Disable Support in EMQX 4.3.6\nDESCRIPTION: References a GitHub pull request that adds support to disable HTTP Pipelining in EMQX version 4.3.6.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5279](https://github.com/emqx/emqx/pull/5279)\n```\n\n----------------------------------------\n\nTITLE: Listing EMQX Exclusive Topics\nDESCRIPTION: Command to list all exclusive topics in the current EMQX system. This example shows one exclusive topic 't/1' associated with 'client1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl exclusive list\nt/1 -> client1\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Authentication Query Example\nDESCRIPTION: SQL query example for PostgreSQL authentication showing password hash, salt and superuser retrieval.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    password as password_hash,\n    salt,\n    is_superuser\n  FROM mqtt_user\n    where username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Making EMQX Upgrade Permanent\nDESCRIPTION: This command makes a previously installed but non-permanent upgrade permanent, ensuring it persists across restarts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx install 5.0.1\n\nRelease 5.0.1 is already installed and current, making permanent.\nMade release permanent: \"5.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON MQTT Message in Erlang\nDESCRIPTION: Example of encoding a JSON MQTT message using a schema in Erlang. It first decodes the JSON to a Map, then encodes it using the schema.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nschema_encode(SchemaName, json_decode(Map)) -> Bytes\n```\n\n----------------------------------------\n\nTITLE: Sharded MongoDB Authorizer Configuration for EMQX\nDESCRIPTION: Configuration example for connecting EMQX to a sharded MongoDB cluster for authorization. Specifies multiple mongos routers, enable flag, collection details, and authentication credentials.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mongodb.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  type = mongodb\n  enable = true\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = sharded\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Query Command for EMQX Authorization\nDESCRIPTION: Specifies the Redis query command to fetch authorization rules for a given username in EMQX configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd = \"HGETALL mqtt_acl:${username}\"\n```\n\n----------------------------------------\n\nTITLE: MQTT Multi-Level Wildcard Matching\nDESCRIPTION: This example illustrates how a subscription with a multi-level wildcard matches specific topics. The `sensor/#` subscription will match topics like `sensor`, `sensor/temperature`, and `sensor/1/temperature`.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_3\n\nLANGUAGE: pgsql\nCODE:\n```\nsensor\nsensor/temperature\nsensor/1/temperature\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Insert Template for Client Events\nDESCRIPTION: SQL template for inserting client connection events into PostgreSQL table emqx_client_events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pgsql.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO emqx_client_events(clientid, event, created_at) VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint)/1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for LwM2M Gateway via HTTP API in EMQX\nDESCRIPTION: This curl command shows how to set up HTTP authentication for the LwM2M Gateway using the EMQX HTTP API. It configures various parameters including the authentication method, URL, and SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/lwm2m/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"clientid\": \"${clientid}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: 创建 MySQL 数据表 emqx_client_events\nDESCRIPTION: 创建一个名为 emqx_client_events 的数据表，用于存储上下线的客户端 ID、事件类型以及事件发生时间。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE emqx_client_events (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  clientid VARCHAR(255),\n  event VARCHAR(255),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Allowing Plugin Installation via CLI Command in Bash\nDESCRIPTION: Command to grant permission for plugin installation through the Dashboard, required for security reasons before initiating the installation process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins allow $NAME-$VSN\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing with MQTTX\nDESCRIPTION: Command to publish a test message to topic t/1 using MQTTX client, containing sample data for Tablestore storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/tablestore.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"table\": \"timeseries_demo_with_data\", \"measurement\": \"foo\", \"microsecond_timestamp\": 1734924039271024, \"column_name\": \"cc\", \"value\": 1}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Republish Node Payload in EMQX Flow Designer\nDESCRIPTION: Bash-like string template used in the Republish node to format the alert message with processed data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/flow-designer/introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n${device_id} device reported a high temperature of ${temperature}°C at ${date}.\n```\n\n----------------------------------------\n\nTITLE: Running Apache Pulsar in Docker\nDESCRIPTION: Command to start a standalone Apache Pulsar instance in Docker for testing purposes\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 6650:6650 --name pulsar apachepulsar/pulsar:2.11.0 bin/pulsar standalone -nfw -nss\n```\n\n----------------------------------------\n\nTITLE: ACL Rule Example\nDESCRIPTION: Example of ACL rules using client attributes as conditions to control access permissions\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{allow, {client_attr, \"type\", \"internal\"}, all, [\"#\"]}.\n{deny, {client_attr, \"type\", {re, \"external-.*\"}}, publish, [\"#\"]}.\n```\n\n----------------------------------------\n\nTITLE: GCP Pub/Sub Message Template JSON Structure\nDESCRIPTION: Example JSON structure showing the default payload template format (${.}) for a GCP Pub/Sub message containing all optional fields. This demonstrates the available fields that can be accessed in the payload template.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-gcp-pubsub.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\"attribute_key\": \"attribute_value\"},\n  \"message_id\": \"1679665968238\",\n  \"ordering_key\": \"my-ordering-key\",\n  \"topic\": \"my-pubsub-topic\",\n  \"publishing_time\": \"2023-08-18T14:15:18.470Z\",\n  \"value\": \"my payload\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Dropped Events in SQL\nDESCRIPTION: SQL query to retrieve details about messages dropped during delivery process\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  from_clientid,\n  from_username,\n  reason,\n  topic,\n  qos\nFROM \"$events/delivery_dropped\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Discover Response Data for LwM2M Operations\nDESCRIPTION: JSON structure for the response data field in Discover operations. Contains the requested path, response code, message, and content with resource attributes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqPath\": {?ResourcePath},\n  \"code\": {?ResponseCode},\n  \"codeMsg\": {?ResponseMsg},\n  \"content\": {?DiscoverResponseData}\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL ON CONFLICT Example\nDESCRIPTION: SQL statement for PostgreSQL to handle duplicate key conflicts by ignoring duplicates\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ee-v4.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(msgid, topic, qos, payload, arrived) VALUES (${id}, ${topic}, ${qos}, ${payload}, to_timestamp(${timestamp}::double precision /1000)) ON CONFLICT DO NOTHING\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Schema Support to Schema Registry\nDESCRIPTION: This entry highlights the addition of JSON Schema support for the schema registry, including compliance with multiple drafts of the JSON Schema specification. This improvement supports better validation and structure of JSON data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"value\": { \"type\": \"number\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with Docker\nDESCRIPTION: Docker command to start a RabbitMQ server instance with management plugin enabled. Exposes ports 5672 for AMQP and 15672 for web management interface.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rabbitmq.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 127.0.0.1:5672:5672 -p 127.0.0.1:15672:15672 rabbitmq:3.11-management\n```\n\n----------------------------------------\n\nTITLE: Setting up Git Remote for Local Editing in EMQX Documentation\nDESCRIPTION: Command to add the upstream repository after cloning your forked repository of EMQX documentation. This establishes the connection to the original repository for syncing changes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/CONTRIBUTING-EN.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/emqx/emqx-docs.git\n```\n\n----------------------------------------\n\nTITLE: Visualizing ExProto Gateway Communication Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram demonstrating the complete flow of connection establishment, authentication, subscription, and message delivery between Telnet client, ExProto Gateway, and exproto-svr-python. The diagram shows three main phases: connection initialization with authentication, message sending, and message routing/delivery.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/exproto.md#2025-04-20_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Telnet ->> ExProto Gateway: Establish a TCP connection\nrect rgb(191, 223, 255)\n    ExProto Gateway ->> exproto-svr-python: Call OnSocketCreated\n  exproto-svr-python ->> ExProto Gateway: Call `Authenticate` to register client\n  ExProto Gateway -->> exproto-svr-python: Succeed\n  exproto-svr-python ->> ExProto Gateway: Call 'Subscribe' to subscribe 'test/echo'\n    ExProto Gateway -->> exproto-svr-python: Succeed\n  exproto-svr-python ->> ExProto Gateway: Call 'StartTimer' to start keepalive timer\n    ExProto Gateway -->> exproto-svr-python: Succeed\n    exproto-svr-python -->> ExProto Gateway: `OnSocketCreated` return\nend\n  Telnet ->> ExProto Gateway: Send 'Hi, this is...'\nrect rgb(100,150, 240)\n  ExProto Gateway ->> exproto-svr-python: Call `OnReceivedBytes`\n  exproto-svr-python --> exproto-svr-python: Use 'Hi, this is...' to create a message\n  exproto-svr-python ->> ExProto Gateway: Call `Publish` to publish message to 'test/echo'\n  ExProto Gateway -->> ExProto Gateway: Route the message\n  ExProto Gateway -->> exproto-svr-python: Succeed\n  exproto-svr-python -->> ExProto Gateway: `OnReceivedBytes` return\nend\nrect rgb(100, 150, 200)\n  ExProto Gateway ->> exproto-svr-python: Call `OnReceivedMessages`\n  exproto-svr-python -->> exproto-svr-python: Use message payload\n  exproto-svr-python ->> ExProto Gateway: Call `Send` to deliver bytes 'Hi, this is ...'\n  ExProto Gateway -->> exproto-svr-python: Succeed\n  ExProto Gateway ->> Telnet: Deliver 'Hi, this is...'\n  exproto-svr-python -->> ExProto Gateway: `OnReceivedMessages` return\nend\n```\n\n----------------------------------------\n\nTITLE: EMQX 5.1 PostgreSQL Configuration\nDESCRIPTION: Updated PostgreSQL authentication configuration for EMQX 5.1 with new parameter structure and naming.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nauthentication {\n  backend = postgresql\n  mechanism = password_based\n  \n  enable = true\n\n  server = \"127.0.0.1:5432\"\n  username = \"root\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = prefix\n  }\n\n  query = \"SELECT password_hash, salt, is_superuser FROM mqtt_user where username = ${username} LIMIT 1\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mypgsql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Filter Configuration - HCL\nDESCRIPTION: Basic configuration for MongoDB collection and filter settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/mongodb.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncollection = \"mqtt_acl\"\nfilter { username = \"${username}\" }\n\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Message Definition for Socket Creation\nDESCRIPTION: Defines the message structure for socket creation events in the ExProto Gateway protocol buffer file, including connection information parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/exproto.md#2025-04-20_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage SocketCreatedRequest {\n  string conn = 1;\n  ConnInfo conninfo = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Redis Authorizer for Redis Sentinel\nDESCRIPTION: Configuration example for connecting EMQX to Redis Sentinel for authorization checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/redis.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n    type = redis\n\n    redis_type = sentinel\n    servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n    sentinel = \"mymaster\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    database = 1\n    password = public\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Engine Array Expression Example\nDESCRIPTION: Demonstrates the enhanced rule engine SQL syntax that now allows expressions as array elements in array literals. Previously only constants and variable references were allowed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect\n[21 + 21, abs(-abs(-2)), [1 + 1], 4] as my_array\nfrom \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Listing EMQX Subscriptions\nDESCRIPTION: Command to list all subscriptions in the EMQX system. This example shows subscriptions for two clients, 'emqx_a' and 'emqx_c'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl subscriptions list\nemqx_a -> topic:t/1 qos:0 nl:0 rh:0 rap:0\nemqx_c -> topic:t/1 qos:0 nl:0 rh:0 rap:0\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog-EMQX Integration Package with Agent CLI\nDESCRIPTION: Command to install the EMQX integration package (version 1.1.0) to the Datadog Agent. This adds the necessary files for collecting EMQX metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/datadog.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-agent integration install -t datadog-emqx==1.1.0\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Webhook Action Path Field Fix in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that fixes an issue where the Path field in the Webhook action of the rule engine cannot be used in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5468](https://github.com/emqx/emqx/pull/5468)\n```\n\n----------------------------------------\n\nTITLE: Configuring Segment Storage in EMQX\nDESCRIPTION: This configuration sets up segment storage for file transfers, including the storage directory, cleaning interval, and maximum segment TTL. It's important for managing temporary file segments during transfers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/broker.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n  # Enable file transfer feature\n  enable = true\n\n  # Segment storage configuration\n  storage.local.segments = {\n    # Segment storage directory, preferably set on high I/O performance disks.\n    root = \"./data/file_transfer/segments\"\n\n    # Scheduled cleaning of expired segment files\n    gc {\n      # Cleaning interval\n      interval = \"1h\"\n\n      # Maximum valid period for segment storage, segments will be cleared after this period, even if they have not been merged.\n      # The validity period specified by the client must not exceed this value.\n      maximum_segments_ttl = \"24h\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading File Using EMQX-FT Client\nDESCRIPTION: Command to upload a file using the EMQX-FT command-line tool with specific parameters for file identification and segmentation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nemqx-ft --file test-file.txt \\\n   --file-id file-id-1 --segment-size 10 \\\n   --client-id client-1 \\\n   --file-name uploaded-test-file.txt\n```\n\n----------------------------------------\n\nTITLE: Example NGINX Status Output\nDESCRIPTION: Sample output from the NGINX status endpoint showing active connections and server statistics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nActive connections: 12\nserver accepts handled requests\n 25 25 60\nReading: 0 Writing: 1 Waiting: 1\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Subscribe Permission in Redis\nDESCRIPTION: Command to add a basic subscribe permission to Redis for user 'emqx_u' to topic 't/1' using the HSET command with a simple value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/1 subscribe\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API for Source Type Listing\nDESCRIPTION: This snippet describes the implementation of a REST API that allows retrieval of available source types, expanding the interoperability and usability of EMQX data integration capabilities.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// REST API for source types\napp.get('/api/source-types', (req, res) => {\n  res.json(sourceTypes);\n});\n```\n\n----------------------------------------\n\nTITLE: Redis ACL Data Format Examples in EMQX 5.x\nDESCRIPTION: Example of Redis ACL data format in EMQX 5.x using HSET commands to define permissions for different topics and actions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nHSET mqtt_acl:emqx_u t/# subscribe\nHSET mqtt_acl:emqx_u # all\nHSET mqtt_acl:emqx_u a/1 publish\n```\n\n----------------------------------------\n\nTITLE: Checking Node Evacuation Status in EMQX\nDESCRIPTION: Command to check the current status of node evacuation process including connection and session statistics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance node-status\n```\n\n----------------------------------------\n\nTITLE: Selecting MQTT Message Data and Timestamp in SQL\nDESCRIPTION: SQL statement to select payload as data and current timestamp from MQTT messages matching the topic pattern 't/#'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  payload as data,\n  now_timestamp() as timestamp\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Performing EMQX Hot Upgrade\nDESCRIPTION: This command initiates the hot upgrade process to the specified version, including unpacking, installing, and making the upgrade permanent.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx upgrade 5.0.1\n\nRelease 5.0.1 not found, attempting to unpack releases/emqx-5.0.1.tar.gz\nUnpacked successfully: \"5.0.1\"\nInstalled Release: 5.0.1\nMade release permanent: \"5.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating an MQTT over QUIC Client with NanoSDK\nDESCRIPTION: Code snippet showing how to create an MQTT client using QUIC transport with NanoSDK. This demonstrates the simplicity of initializing a QUIC-based MQTT connection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n## Create MQTT over Quic client with NanoSDK\nnng_mqtt_quic_client_open(&socket, url);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings - concat Function\nDESCRIPTION: Merges two strings into a single string. Useful for combining text or creating formatted output.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconcat('Name:', 'John') = 'Name:John'\n```\n\n----------------------------------------\n\nTITLE: Authentication Query Migration Example\nDESCRIPTION: Shows the migration of authentication query syntax from EMQX 4.x to 5.x, demonstrating the change from '%u' placeholder to '${username}' format in MySQL authentication configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-5.1.0.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# 4.x\n# etc/emqx_auth_mysql.conf\nauth.mysql.auth_query = select password from mqtt_user where username = '%u' limit 1\n\n# 5.x\n# emqx.conf\nauthentication = [\n  {\n    ...\n    mechanism = \"password_based\"\n    backend = \"mysql\"\n    query = \"SELECT password_hash, salt FROM mqtt_user where username = ${username} LIMIT 1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ODBC Driver for Microsoft SQL Server\nDESCRIPTION: This code snippet shows the configuration for the ODBC driver for FreeTDS, which is used to connect to Microsoft SQL Server. It specifies the driver description, file paths, and usage type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[ms-sql]\nDescription = ODBC for FreeTDS\nDriver      = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\nSetup       = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\nFileUsage   = 1\n```\n\n----------------------------------------\n\nTITLE: Creating Pulsar Topic\nDESCRIPTION: Command to create a partitioned topic 'my-topic' in Pulsar under the public tenant and default namespace with 1 partition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it pulsar bin/pulsar-admin topics create-partitioned-topic persistent://public/default/my-topic -p 1\n```\n\n----------------------------------------\n\nTITLE: Starting Couchbase Server with Docker\nDESCRIPTION: Command to start a Couchbase server using Docker. This sets up a Couchbase instance with specified port mappings for web UI and client access.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-couchbase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t --name db -p 8091-8096:8091-8096 -p 11210-11211:11210-11211 couchbase/server:enterprise-7.2.0\n```\n\n----------------------------------------\n\nTITLE: Adding a Site to EMQX Durable Storage\nDESCRIPTION: Command to add a new site to the EMQX durable storage, assigning it shard replica responsibilities.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds join messages <Site ID>\nok\n```\n\n----------------------------------------\n\nTITLE: Equivalent FOREACH and SELECT Statements in EMQX Rule SQL\nDESCRIPTION: Demonstrates the equivalence between FOREACH and SELECT statements, showing how FOREACH can be seen as a generalization of SELECT.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH jq('.', payload) as it\nDO it.field_1, it.field_2 \nFROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload.field_1, payload.field_2\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Throttling in Erlang\nDESCRIPTION: Example of configuring log throttling in EMQX using the log.throttling setting in the etc/logger.conf file. This feature limits the rate of repetitive logs to reduce system load.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nlog.throttling = 50,60s\n```\n\n----------------------------------------\n\nTITLE: TimescaleDB Insert SQL Template\nDESCRIPTION: SQL template for inserting processed MQTT data into TimescaleDB sensor_data table\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-timescale.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\nsensor_data (time, location, temperature, humidity)\nVALUES\n  (NOW(), ${location}, ${temp}, ${humidity})\n```\n\n----------------------------------------\n\nTITLE: Log Message Format Structure\nDESCRIPTION: Demonstrates the standardized format for EMQX log messages, showing the order and types of fields included in each log entry.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntimestamp level tag clientid msg peername username ...\n```\n\n----------------------------------------\n\nTITLE: MQTT Log Message Format Fix Example\nDESCRIPTION: Example showing the bug fix for MQTT packet log message formatting where a comma was missing between flags and fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n2023-01-29T13:40:36.567692+08:00 [debug] 127.0.0.1:50393 [MQTT] RECV CONNECT(Q0, R0, D0ClientId=test_client, ... Password=undefined)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Preparing NGINX Source\nDESCRIPTION: Commands to download and extract NGINX source code\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://nginx.org/download/nginx-1.24.0.tar.gz\ntar -zxvf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTTX\nDESCRIPTION: Command to publish a test message to the MQTT topic 't/1' using MQTTX client.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Pulsar\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Reverse Proxy for MQTT WebSocket\nDESCRIPTION: This configuration shows how to set up NGINX to reverse proxy MQTT WebSocket connections. It includes upstream server configuration, WebSocket upgrade settings, and proxy settings for HTTP.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhttp {\n  upstream mqtt_websocket_servers {\n    server emqx1-cluster.emqx.io:8083;\n    server emqx2-cluster.emqx.io:8083;\n  }\n\n  server {\n    listen 80;\n    server_name mqtt.example.com;\n\n    location /mqtt {\n      proxy_pass http://mqtt_websocket_servers;\n\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"Upgrade\";\n\n      # Disable caching\n      proxy_buffering off;\n\n      proxy_connect_timeout 10s;\n      # WebSocket connection timeout\n      # If there's no data exchange within this time, the WebSocket connection will automatically disconnect; default is 60s\n      proxy_send_timeout 3600s;\n      proxy_read_timeout 3600s;\n\n      # Reverse proxy real IP\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ACL Rule with Zone Placeholder\nDESCRIPTION: Example ACL rule using the ${zone} placeholder to dynamically apply permissions based on a client's assigned Zone.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/authn.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{allow, all, all, [\"${zone}/${username}/#\"]}\n```\n\n----------------------------------------\n\nTITLE: 配置EMQX授权检查器的HCL格式配置\nDESCRIPTION: 展示了如何通过配置文件设置基于文件的授权检查器。配置指定了未匹配规则的默认处理方式、拒绝动作的处理方式，以及ACL文件的路径。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/file.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nauthorization {\n  deny_action = ignore\n  no_match = allow\n  sources = [\n    {\n      type = file\n      path = \"etc/acl.conf\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ACL Configuration with Client Attributes\nDESCRIPTION: Example of using client attributes in ACL configuration for dynamic permission management. Shows how to reference namespace attributes in authorization rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n{allow, all, all, [\"${client_attrs.namespace}/#\"]}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Placeholder for MySQL Authentication in EMQX\nDESCRIPTION: Example SQL query that uses a placeholder to dynamically insert the username during authentication. When a client with username 'emqx_u' connects, the placeholder ${username} will be replaced with the actual username value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/authn.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT password_hash, salt FROM mqtt_user where username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Avro Decoding with External Registry in SQL\nDESCRIPTION: SQL example of using avro_decode function with an external Schema Registry. It decodes an Avro payload using a specified schema ID.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  avro_decode('my_external_registry', payload, 123) as decoded\nfrom 't'\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Status (Bash)\nDESCRIPTION: Command to check the status of EMQX after starting it.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl status\n```\n\n----------------------------------------\n\nTITLE: 消息存储规则 SQL\nDESCRIPTION: 用于处理来自源 MQTT 主题 't/#' 的消息的规则 SQL。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Error Logs for Proxy Protocol Before Improvement\nDESCRIPTION: Sample error logs generated by Proxy Protocol issues before the logging improvements. Shows the format of error logs for invalid proxy information and proxy protocol timeout.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n2023-04-20T14:56:51.671735+08:00 [error] supervisor: 'esockd_connection_sup - <0.2537.0>', errorContext: connection_shutdown, reason: {invalid_proxy_info,<<\"f\\n\">>}, offender: [{pid,<0.3192.0>},{name,connection},{mfargs,{...}}]\n\n2023-04-20T14:57:01.348275+08:00 [error] supervisor: 'esockd_connection_sup - <0.2537.0>', errorContext: connection_shutdown, reason: {proxy_proto_timeout,5000}, offender: [{pid,<0.3194.0>},{name,connection},{mfargs,{...}}]\n```\n\n----------------------------------------\n\nTITLE: Cursor Pagination Response Format\nDESCRIPTION: Example response showing the meta field containing pagination information and data payload for message queue entries.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"start\": \"1716187698009179275_0\",\n        \"position\": \"1716187698491337643_0\"\n    },\n    \"data\": [\n        {\n            \"inserted_at\": \"1716187698260190832\",\n            \"publish_at\": 1716187698260,\n            \"from_clientid\": \"mqttx_70e2eecf_10\",\n            \"from_username\": \"undefined\",\n            \"msgid\": \"000618DD161F682DF4450000F4160011\",\n            \"mqueue_priority\": 0,\n            \"qos\": 0,\n            \"topic\": \"t/1\",\n            \"payload\": \"SGVsbG8gRnJvbSBNUVRUWCBDTEk=\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ACL Rules in Redis\nDESCRIPTION: This snippet shows how to set ACL rules in Redis for EMQX 5.1. It demonstrates setting different permissions for various topics and actions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-from-v4.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/# subscribe\nHSET mqtt_acl:emqx_u # all\nHSET mqtt_acl:emqx_u a/1 publish\n```\n\n----------------------------------------\n\nTITLE: Example Sparkplug B Message Structure\nDESCRIPTION: JSON structure showing the format of a decoded Sparkplug B message containing metrics and timestamps.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1678094561521,\n  \"seq\": 88,\n  \"metrics\": [\n    {\n      \"timestamp\": 1678094561525,\n      \"name\": \"counter_group1/counter1_1sec\",\n      \"int_value\": 424,\n      \"datatype\": 2\n    },\n    {\n      \"timestamp\": 1678094561525,\n      \"name\": \"counter_group1/counter1_5sec\",\n      \"int_value\": 84,\n      \"datatype\": 2\n    },\n    {\n      \"timestamp\": 1678094561525,\n      \"name\": \"counter_group1/counter1_10sec\",\n      \"int_value\": 42,\n      \"datatype\": 2\n    },\n    {\n      \"timestamp\": 1678094561525,\n      \"name\": \"counter_group1/counter1_run\",\n      \"int_value\": 1,\n      \"datatype\": 5\n    },\n    {\n      \"timestamp\": 1678094561525,\n      \"name\": \"counter_group1/counter1_reset\",\n      \"int_value\": 0,\n      \"datatype\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: 配置 EMQX 集群协议\nDESCRIPTION: 在 EMQX 配置文件中设置集群协议相关参数，包括分布式协议类型和 TLS 证书文件路径。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster.proto_dist = inet_tcp\nnode.ssl_dist_optfile = etc/ssl_dist.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Node Bootstrap Batch Size\nDESCRIPTION: New configuration option added to set the batch size for initial data sync during node startup. Increasing this value can significantly reduce startup time for replicated nodes, especially in high-latency networks with large amounts of data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\nnode.default_bootstrap_batch_size = 600\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX OpenTelemetry Integration\nDESCRIPTION: HOCON configuration for EMQX to enable integration with OpenTelemetry, specifying the endpoint and metrics collection interval.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/metrics.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  exporter { endpoint = \"http://localhost:4317\" }\n  metrics {\n     interval = \"10s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Pulsar Topic\nDESCRIPTION: Command to consume and verify messages written to the Pulsar topic\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it pulsar bin/pulsar-client consume -n 0 -s mysubscriptionid -p Earliest persistent://public/default/my-topic\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule Engine SQL Query\nDESCRIPTION: SQL query for EMQX rule engine to process messages from root/# topic\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"root/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Keep-Alive in MQTT Listeners (Erlang)\nDESCRIPTION: New configuration option added to enable TCP layer's Keep Alive feature and specify time parameters for MQTT/TCP and MQTT/SSL listeners. Only effective on Linux and MacOS systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\nzone.<zone-name>.tcp_keepalive = Idle,Interval,Probes\n```\n\n----------------------------------------\n\nTITLE: Comparing HTTP API Response Formats in EMQX 4.x and 5.1\nDESCRIPTION: This snippet demonstrates the differences in HTTP API response formats between EMQX 4.x and 5.1 for both successful and error responses. In 5.1, the 'code' field is removed for successful responses, and error responses use HTTP status codes with a new error code format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-5.1.0.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 4.x\n## HTTP StatusCode = 200\nGET /api/v4/rules/my_rule\n{ \"code\": 0, \"data\": { ... } }\n\n# 5.1\n## HTTP StatusCode = 200\nGET /api/v5/rules/my_rule\n{ ... }\n\n# 4.x\n## HTTP StatusCode = 200\nGET /api/v4/rules/my_rule\n{ \"code\": 404, \"message\": \"Not Found\" }\n\n# 5.1\n## HTTP StatusCode = 404\nGET /api/v5/rules/my_rule\n{ \"code\": \"NOT_FOUND\", \"message\": \"Rule Id Not Found\" }\n```\n\n----------------------------------------\n\nTITLE: MySQL Duplicate Key Handling in Batch Mode\nDESCRIPTION: SQL query template for MySQL batch insertions with ON DUPLICATE KEY UPDATE handling to avoid duplicate entries\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(msgid, topic, qos, payload, arrived) VALUES (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000)) ON DUPLICATE KEY UPDATE id=id\n```\n\n----------------------------------------\n\nTITLE: Redis CLI Hash Creation Example\nDESCRIPTION: Example of creating a Redis hash for user authentication with username, password hash, salt and superuser flag\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/redis.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n>redis-cli\n127.0.0.1:6379> HSET mqtt:user123 is_superuser 1 salt salt password_hash ac63a624e7074776d677dd61a003b8c803eb11db004d0ec6ae032a5d7c9c5caf\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Geographic Area and Route Protocol Fields Definition\nDESCRIPTION: Detailed mapping of protocol fields to JSON structure for handling geographic areas (rectangular and polygonal), routes, and associated commands. Includes data types and format specifications for each field.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msg_id\": 34306,\n  \"type\": \"integer\",\n  \"length\": \"integer\",\n  \"areas\": [{\n    \"id\": \"integer\",\n    \"flag\": \"integer\",\n    \"lt_lat\": \"integer\",\n    \"lt_lng\": \"integer\",\n    \"rb_lat\": \"integer\",\n    \"rb_lng\": \"integer\",\n    \"start_time\": \"string\",\n    \"end_time\": \"string\",\n    \"max_speed\": \"integer\",\n    \"overspeed_duration\": \"integer\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Keyspace\nDESCRIPTION: Docker command to create a keyspace named 'mqtt' with SimpleStrategy replication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e CREATE KEYSPACE mqtt WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': 1}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB for collectd\nDESCRIPTION: This snippet shows how to configure InfluxDB to receive data from collectd. It defines the collectd configuration block, enabling collectd input, specifying the bind address and database name, and setting other relevant parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[[collectd]]\n  enabled = true\n  bind-address = \":25826\"\n  database = \"collectd\"\n  batch-size = 5000\n  batch-pending = 10\n  batch-timeout = \"10s\"\n  read-buffer = 0\n  typesdb = \"/usr/share/collectd/types.db\"\n  security-level = \"none\"\n  parse-multivalue-plugin = \"split\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Site from EMQX Durable Storage\nDESCRIPTION: Command to remove a site from the EMQX durable storage, transferring its shard replica responsibilities to other sites.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds leave messages <Site ID>\nok\n```\n\n----------------------------------------\n\nTITLE: Durable Storage Shard Info Example\nDESCRIPTION: Example output from 'emqx ctl ds info' showing shard replica set status and transitions when nodes have left the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.8.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSite\nABCDEF1111111111 'emqx@emqxc1-core0.local' (!) UNIDENTIFIED\nABCDEF2222222222 'emqx@emqxc2-core0.local' up\n<...>\n\nShard            Replicas\nmessages/0       (!) ABCDEF1111111111\nmessages/1       (!) ABCDEF1111111111\n<...>\nmessages/9       (!) ABCDEF1111111111\n\nShard             Transitions\nmessages/0        +ABCDEF2222222222 -ABCDEF1111111111\nmessages/1        +ABCDEF2222222222 -ABCDEF1111111111\n<...>\nmessages/9        +ABCDEF2222222222 -ABCDEF1111111111\n```\n\n----------------------------------------\n\nTITLE: Rule Engine FOREACH Variable Access Fix (SQL)\nDESCRIPTION: Fixed an issue where the rule engine was unable to access variables exported by FOREACH in the DO clause. Now correctly processes and outputs variables from FOREACH statements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH payload.date as date, payload.array as elem\nDO date, elem\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: 重新连接 EMQX 并恢复会话\nDESCRIPTION: 使用相同的客户端 ID emqx_c，并设置 Clean Start 为 false，重新连接到 EMQX 以恢复会话。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/durability/durability_introduction.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -i emqx_c --no-clean\n```\n\n----------------------------------------\n\nTITLE: Overriding MQTT Packet Size in EMQX Zone Configuration\nDESCRIPTION: Shows how to override the MQTT packet size limit from 1MB to 10MB in a specific zone configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzones {\n  zone1 {\n    mqtt.max_packet_size = 1M\n  }\n}\nzones.zone1.mqtt.max_packet_size = 10M\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Data Dump HTTP Import Support in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that adds support for getting imported data from HTTP requests in data dump in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4900](https://github.com/emqx/emqx/pull/4900)\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for MQTT Message Processing in EMQX\nDESCRIPTION: SQL statement to select all fields from MQTT messages on the 't/#' topic. This rule will be used to process incoming messages before sending them to Datalayers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Authentication Configuration\nDESCRIPTION: Configuration for Redis Cluster authentication setup with multiple nodes\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/redis.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = redis\n\n  redis_type = cluster\n  servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = suffix\n  }\n\n  cmd = \"HMGET mqtt_user:${username} password_hash salt is_superuser\"\n  password = \"public\"\n  auto_reconnect = true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Node Status with emqx ctl status\nDESCRIPTION: Quickly check if the current EMQX node is running by displaying its status information including node name and version.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl status\nNode 'emqx@127.0.0.1' 5.0.3 is started\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Multi-NIC Support for MQTT Load Balancing\nDESCRIPTION: NGINX configuration using split_clients module to distribute MQTT connections across multiple IP addresses. This setup helps handle more than 60,000 connections by utilizing multiple network interfaces.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nstream {\n split_clients \"$remote_addr$remote_port\" $multi_ip {\n    20% 10.211.55.5;\n    20% 10.211.55.20;\n    20% 10.211.55.21;\n    20% 10.211.55.22;\n    * 10.211.55.23;\n  }\n\n  upstream mqtt_servers {\n    server emqx1-cluster.emqx.io:1883;\n    server emqx2-cluster.emqx.io:1883;\n  }\n\n  server {\n    listen 1883;\n\n    proxy_pass mqtt_servers;\n    proxy_bind $multi_ip;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Dropped Event JSON Output Example\nDESCRIPTION: Example JSON output demonstrating a message dropped event with its key attributes\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"timestamp\": 1645003103004,\n  \"reason\": \"no_subscribers\",\n  \"qos\": 1,\n  \"node\": \"emqx@127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EMQX Data Using CLI Commands\nDESCRIPTION: Multiple examples of importing EMQX data using different file path methods: absolute path, relative path, and from the backup directory. Each command demonstrates the import process and confirmation messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/operations/backup-restore.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# import the file by the absolute path\n$ ./emqx ctl data import /tmp/emqx-export-2023-06-19-15-14-19.947.tar.gz\nImporting data from \"/tmp/emqx-export-2023-06-19-15-14-19.947.tar.gz\"...\nImporting cluster configuration...\nImporting built-in database...\nImporting emqx_banned database table...\nImporting emqx_psk database table...\nImporting emqx_acl database table...\nImporting emqx_app database table...\nImporting emqx_enhanced_authn_scram_mnesia database table...\nImporting emqx_authn_mnesia database table...\nImporting emqx_admin database table...\nData has been imported successfully.\n\n# import the file by the path relative to EMQX root directory:\n$ ./emqx ctl data import ../../../tmp/emqx-export-2023-06-21-13-28-06.418.tar.gz\nImporting data from \"../../../tmp/emqx-export-2023-06-21-13-28-06.418.tar.gz\"...\nImporting cluster configuration...\nImporting built-in database...\nImporting emqx_enhanced_authn_scram_mnesia database table...\nImporting emqx_authn_mnesia database table...\nImporting emqx_admin database table...\nImporting emqx_acl database table...\nImporting emqx_banned database table...\nImporting emqx_psk database table...\nImporting emqx_app database table...\nData has been imported successfully.\n\n# import the file from `<EMQX data directory>/backup` directory:\n$ cp /tmp/emqx-export-2023-06-21-13-28-06.418.tar.gz /opt/emqx/data/backup/\n$ ./emqx ctl data import emqx-export-2023-06-21-13-28-06.418.tar.gz\nImporting data from \"data/backup/emqx-export-2023-06-21-13-28-06.418.tar.gz\"...\nImporting cluster configuration...\nImporting built-in database...\nImporting emqx_enhanced_authn_scram_mnesia database table...\nImporting emqx_authn_mnesia database table...\nImporting emqx_admin database table...\nImporting emqx_acl database table...\nImporting emqx_banned database table...\nImporting emqx_psk database table...\nImporting emqx_app database table...\nData has been imported successfully.\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone Offset to Seconds in EMQX SQL\nDESCRIPTION: Demonstrates the usage of timezone_to_offset_seconds() function which converts a time zone offset string to an integer in seconds. It supports 'Z' notation, explicit offsets in various formats, and the 'local' keyword.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ntimezone_to_offset_seconds('Z') = 0\ntimezone_to_offset_seconds('+08:00') = 28800\ntimezone_to_offset_seconds('local') = 28800\n```\n\n----------------------------------------\n\nTITLE: Enhanced JWT ACL Claim Format in JSON\nDESCRIPTION: Example of the new array structure format for ACL claims in EMQX JWT authentication. This format supports more versatile access control rules with permission, action, topic, QoS, and retain parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n  \"permission\": \"allow\",\n  \"action\": \"pub\",\n  \"topic\": \"${username}/#\",\n  \"qos\": [0, 1],\n  \"retain\": true\n},\n{\n  \"permission\": \"allow\",\n  \"action\": \"sub\",\n  \"topic\": \"eq ${username}/#\",\n  \"qos\": [0, 1]\n},\n{\n  \"permission\": \"deny\",\n  \"action\": \"all\",\n  \"topics\": [\"#\"]\n}\n]\n```\n\n----------------------------------------\n\nTITLE: MongoDB Payload Template Configuration\nDESCRIPTION: JSON template for configuring the payload structure to be stored in MongoDB\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientid\": \"${clientid}\",\n  \"topic\": \"${topic}\",\n  \"qos\": ${qos},\n  \"timestamp\": ${timestamp},\n  \"payload\": ${payload}\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Format for JT/T 808 Gateway\nDESCRIPTION: HTTP POST request format for device authentication, including authentication code and phone number.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nURL: http://127.0.0.1:8991/jt808/auth\nMethod: POST\nBody:\n   { \"code\": \"authcode\",\n     \"phone\", \"00123456789\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring NanoMQ for MQTT over QUIC Bridging\nDESCRIPTION: Configuration entry for NanoMQ to enable MQTT over QUIC bridging to EMQX. This configuration specifies the QUIC endpoint using the mqtt-quic URL prefix.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n## Bridge address: host:port .\n##\n## Value: String\nbridge.mqtt.emqx.address=mqtt-quic://127.0.0.1:14567\n```\n\n----------------------------------------\n\nTITLE: EMQX Plugin Management CLI Command\nDESCRIPTION: New CLI command for managing plugin installations and authorization\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins allow NAME-VSN\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Listener Parameters\nDESCRIPTION: This snippet configures the TCP listener parameters for EMQX, including the acceptor pool size and the maximum number of connections. These settings are crucial for managing the concurrency and capacity of the EMQX listener.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n## TCP Listener\nlisteners.tcp.$name.acceptors = 64\nlisteners.tcp.$name.max_connections = 1024000\n```\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Encoding JSON to Protobuf\nDESCRIPTION: SQL statement for a rule that encodes JSON payload to Protobuf format using the 'protobuf_person' schema.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-protobuf.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  schema_encode('protobuf_person', json_decode(payload), 'Person') as protobuf_person\nFROM\n  \"protobuf_in\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Field with Aliasing and WHERE Clause\nDESCRIPTION: This example selects the 'clientid' field and aliases it as 'cid', then filters messages where 'cid' equals 'abc'.  It showcases how to rename fields and use aliases within the WHERE clause for filtering.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid as cid FROM \"#\" WHERE cid = 'abc'\n```\n\n----------------------------------------\n\nTITLE: Directory Listing of Generated Certificates and Keys\nDESCRIPTION: This bash output shows the resulting files after generating the CA, server certificates, and associated keys. These files are used to configure SSL/TLS connections for secure communication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\".\n├── rootCA.crt\n├── rootCA.key\n├── rootCA.srl\n├── server.crt\n├── server.csr\n└── server.key\"\n```\n\n----------------------------------------\n\nTITLE: Installing libatomic dependency on Linux\nDESCRIPTION: Commands to install the libatomic dependency on various Linux distributions to resolve EMQX startup failure due to missing libatomic.so.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Rocky Linux, CentOS, ...\nyum install -y libatomic\n# Debian, Ubuntu, ...\napt install -y libatomic\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus Metrics with curl in EMQX 5.x\nDESCRIPTION: Command to fetch Prometheus metrics from the EMQX API endpoint. This endpoint is enabled by default in EMQX 5.x and requires no authentication to access the metrics data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"http://127.0.0.1:18083/api/v5/prometheus/stats\"\n```\n\n----------------------------------------\n\nTITLE: Configuring QUIC Listener TLS Secret Dumping in EMQX\nDESCRIPTION: Example configuration for enabling TLS secret dumping to the SSLKEYLOGFILE environment variable in QUIC listeners, allowing tools like Wireshark to decrypt QUIC traffic for debugging purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMQX_LISTENERS__QUIC__DEFAULT__SSLKEYLOGFILE=/tmp/EMQX_SSLKEYLOGFILE\n```\n\n----------------------------------------\n\nTITLE: Copying Upgrade Package to EMQX Releases Directory\nDESCRIPTION: This command copies the downloaded EMQX upgrade package to the releases directory in the EMQX installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cp emqx-5.0.1.zip ${EMQX_ROOT_DIR}/releases/\n```\n\n----------------------------------------\n\nTITLE: Loading Module Across Cluster\nDESCRIPTION: Command to ensure a specified module is loaded on all nodes in the EMQX cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl observer load Mod\nLoaded 'Mod' module on []: ok\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Keep-Alive in MQTT Listeners\nDESCRIPTION: Configuration example for enabling TCP keep-alive in MQTT/TCP and MQTT/SSL listeners. This configuration is only effective on Linux and MacOS systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nzone.<zone-name>.tcp_keepalive = Idle,Interval,Probes\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in EMQX Topic Rewrite Rules\nDESCRIPTION: EMQX now supports placeholders %u and %c in topic rewrite rules for greater flexibility.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_7\n\nLANGUAGE: Erlang\nCODE:\n```\n% Example topic rewrite rule with placeholders\n{rewrite, \"device/%u/data\", \"stats/%c/%u/data\"}\n```\n\n----------------------------------------\n\nTITLE: CSV Format for User Import\nDESCRIPTION: CSV file format specification for importing user credentials, including user_id, password_hash, salt, and superuser status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/user_management.md#2025-04-20_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nuser_id,password_hash,salt,is_superuser\nmyuser3,b6c743545a7817ae8c8f624371d5f5f0373234bb0ff36b8ffbf19bce0e06ab75,de1024f462fb83910fd13151bd4bd235,true\nmyuser4,ee68c985a69208b6eda8c6c9b4c7c2d2b15ee2352cdd64a903171710a99182e8,ad773b5be9dd0613fe6c2f4d8c403139,false\n```\n\n----------------------------------------\n\nTITLE: Starting Load Rebalancing in EMQX\nDESCRIPTION: Command to start load rebalancing in EMQX with various configuration options. It allows specifying nodes, wait times, eviction rates, and thresholds for connections and sessions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrebalance start \\\n    [--nodes \"node1@host1 node2@host2\"] \\\n    [--wait-health-check Secs] \\\n    [--conn-evict-rate ConnPerSec] \\\n    [--abs-conn-threshold Count] \\\n    [--rel-conn-threshold Fraction] \\\n    [--conn-evict-rate ConnPerSec] \\\n    [--wait-takeover Secs] \\\n    [--sess-evict-rate CountPerSec] \\\n    [--abs-sess-threshold Count] \\\n    [--rel-sess-threshold Fraction]\n```\n\n----------------------------------------\n\nTITLE: Creating EMQX Builder Docker Container\nDESCRIPTION: This snippet demonstrates how to create and run an EMQX Builder Docker container. It includes optional port mappings and uses a specific version of the EMQX Builder image.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-source.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx-builder \\\n  # -p 1883:1883 \\\n  # -p 8083:8083 \\\n  # -p 8084:8084 \\\n  # -p 8883:8883 \\\n  # -p 18083:18083 \\\n  ghcr.io/emqx/emqx-builder/5.0-17:1.13.4-24.2.1-1-ubuntu20.04 \\\n  bash -c \"tail -f /dev/null\"\n```\n\n----------------------------------------\n\nTITLE: Datalayers Database Creation Commands\nDESCRIPTION: SQL commands for connecting to Datalayers CLI and creating a new database named mqtt\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it datalayers bash\n```\n\nLANGUAGE: bash\nCODE:\n```\ndlsql -u admin -p public\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate database mqtt\n```\n\n----------------------------------------\n\nTITLE: Verifying collectd data in InfluxDB\nDESCRIPTION: This snippet shows how to connect to the InfluxDB shell and query data from the collectd database. It selects the first 8 data points from the cpu_value measurement.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ influx\nConnected to http://localhost:8086 version 1.8.10\nInfluxDB shell version: 1.8.10\n> use collectd\nUsing database collectd\n> select * from cpu_value limit 8\n```\n\n----------------------------------------\n\nTITLE: 事件记录规则 SQL\nDESCRIPTION: 用于记录客户端上/下线状态的规则 SQL。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  *\nFROM \n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Message Caching\nDESCRIPTION: SQL rule configuration to select messages from t/# topic for Redis caching\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Fixing HTTP Connection Issues in Erlang Plugins\nDESCRIPTION: These fixes address issues with HTTP long connections being disconnected in the emqx-auth-http and emqx-web-hook plugins.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_58\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx-auth-http#245](https://github.com/emqx/emqx-auth-http/pull/245)\nGithub PR: [emqx-web-hook#272](https://github.com/emqx/emqx-web-hook/pull/272)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Name in EMQX Configuration File\nDESCRIPTION: This snippet demonstrates how to set the node name in the emqx.conf configuration file for an EMQX node.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode.name = emqx@s1.emqx.io\n```\n\n----------------------------------------\n\nTITLE: Configuring SCRAM Authentication in EMQX Using HCL Configuration\nDESCRIPTION: Configuration example for SCRAM-based authentication using EMQX's built-in database. This snippet shows how to set up the authentication mechanism with parameters like algorithm type (sha512) and iteration count.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/scram.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    mechanism = scram\n    backend = built_in_database\n\n    algorithm = sha512\n    iteration_count = 4096\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Exproto Disconnect Retry in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that adds a disconnect retry mechanism for exproto in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5436](https://github.com/emqx/emqx/pull/5436)\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Rule Engine Resource Refresh Fix in EMQX 4.3.2\nDESCRIPTION: References a GitHub pull request that marks the resource as unavailable when the rule engine fails to refresh the resource in EMQX version 4.3.2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_55\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4821](https://github.com/emqx/emqx/pull/4821)\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to RFC3339 Format in EMQX SQL\nDESCRIPTION: Shows how the unix_ts_to_rfc3339() function converts a Unix timestamp in seconds to an RFC3339-compliant datetime string using the system's local timezone.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nunix_ts_to_rfc3339(1708671600) = '2024-02-23T15:00:00+08:00'\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Variable Byte Integer Fix in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes an issue where variable byte integers may be larger than 4 bytes in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5826](https://github.com/emqx/emqx/pull/5826)\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Rewrite Rules in EMQX\nDESCRIPTION: Example configuration format for defining a topic rewrite rule in EMQX. The rule specifies the action type, source topic pattern, destination topic pattern, and regular expression for matching and extracting elements from the topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-topic-rewrite.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrewrite = [\n  {\n    action:       \"all\"\n    source_topic: \"x/#\"\n    dest_topic:   \"x/y/z/$1\"\n    re:           \"^x/y/(.+)$\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Limiting Kafka Partitions for Data Integration\nDESCRIPTION: This snippet describes the new capability to specify a limit on the number of Kafka partitions utilized during data integration processes within EMQX, enhancing resource management and performance tuning.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementing Kafka partition limit\nconst kafkaIntegration = { maxPartitions: 10 };\n```\n\n----------------------------------------\n\nTITLE: Basic FOREACH Statement Structure in EMQX Rule SQL\nDESCRIPTION: Illustrates the basic format of a FOREACH statement in the EMQX rule engine SQL, which can produce zero or more output messages for each input message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH <expression_that_evaluates_to_array> [as <name>]\n[DO <fields_expressions>]\n[INCASE <condition>]\nFROM <topic>\n[WHERE <condition>]\n```\n\n----------------------------------------\n\nTITLE: Client Subscribed Event JSON Payload in EMQX\nDESCRIPTION: JSON payload structure for client subscription events published to $SYS/brokers/${node}/clients/${clientid}/subscribed. Contains details about the topic subscription including subscription options and client information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/mqtt-system-topics.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"username\":\"foo\",\n    \"ts\":1625572213878,\n    \"topic\":\"/the/best/mqtt/broker/is/emqx\",\n    \"subopts\":{\n        \"sub_props\":{},\n        \"rh\":0,\n        \"rap\":0,\n        \"qos\":0,\n        \"nl\":0,\n        \"is_new\":true\n    },\n    \"protocol\":\"mqtt\",\n    \"clientid\":\"emqtt-8348fe27a87976ad4db3\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in EMQX\nDESCRIPTION: The concat function joins two strings together into a single string without adding any separator between them.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nconcat('Name:', 'John') = 'Name:John'\n```\n\n----------------------------------------\n\nTITLE: Using Triple-quoted Strings with Indentation in EMQX Configuration\nDESCRIPTION: Shows how to use triple-quoted strings with indentation for multi-line SQL queries in EMQX configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: hocon\nCODE:\n```\nrule_xlu4 {\n  sql = \"\"\"~\n    SELECT\n      *\n    FROM\n      \"t/#\"\n  ~\"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authentication for CoAP Gateway using HTTP API\nDESCRIPTION: This curl command creates a built-in database authentication configuration for the CoAP gateway using the EMQX HTTP API. It specifies password-based authentication with SHA-256 hashing algorithm and username as the user ID type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://127.0.0.1:18083/api/v5/gateway/coap/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"backend\": \"built_in_database\",\n  \"mechanism\": \"password_based\",\n  \"password_hash_algorithm\": {\n    \"name\": \"sha256\",\n    \"salt_position\": \"suffix\"\n  },\n  \"user_id_type\": \"username\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: Example of an error response showing the format of error codes and reasons returned by the API.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"code\": \"RESOURCE_NOT_FOUND\",\n  \"reason\": \"Client id not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Schema for Person Message\nDESCRIPTION: Defines a Protobuf schema for a Person message with required name and id fields, and an optional email field.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-protobuf.md#2025-04-20_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing EMQX Topics\nDESCRIPTION: Command to list all subscribed topics in the current EMQX system. This example shows one topic 't/1' associated with the node 'emqx@127.0.0.1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl topics list\nt/1 -> emqx@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Response Format in EMQX 5.x\nDESCRIPTION: JSON response format required for HTTP authorization in EMQX 5.x. Authorization decisions are made based on the 'result' field in the response body.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"deny\"\n}\n```\n\n----------------------------------------\n\nTITLE: Padding Strings with Custom Characters in EMQX (4-parameter version)\nDESCRIPTION: The pad function with a custom character parameter extends a string to a specified length using the provided character or string for padding. The padding character is treated as a single unit regardless of its actual length.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npad('hello', 8, 'trailing', '!') = 'hello!!!'\npad('hello', 8, 'trailing', '\\r\\n') = 'hello\\r\\n\\r\\n\\r\\n'\npad('hello', 8, 'trailing', 'abc') = 'helloabcabcabc'\n```\n\n----------------------------------------\n\nTITLE: Installing EPEL repository on CentOS 7\nDESCRIPTION: Commands to install the Extra Packages for Enterprise Linux (EPEL) repository on CentOS 7 to enable installation of openssl11.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum install epel-release\nyum install openssl11\n```\n\n----------------------------------------\n\nTITLE: Managing Confluent Cloud Environments\nDESCRIPTION: Commands to list and select Confluent Cloud environments using the CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# list env\nconfluent environment list\n# use env\nconfluent environment use <environment_id>\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Locale on CentOS\nDESCRIPTION: Configures system-wide UTF-8 locale using localectl on CentOS systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo localectl set-locale LANG=C.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Publish Permission with Retain Restriction in Redis\nDESCRIPTION: Command to add publish permission with retain message restriction to Redis for user 'emqx_u' to topic 't/3' using JSON format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/3 '{ \"action\": \"publish\", \"retain\": false }'\n```\n\n----------------------------------------\n\nTITLE: Defining API Keys in Bootstrap File Format\nDESCRIPTION: Example format for defining API keys in the bootstrap file, including optional role assignment. Each line contains API Key, Secret Key, and optional Role.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmy-app:AAA4A275-BEEC-4AF8-B70B-DAAC0341F8EB\nec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL:viewer\nfoo:3CA92E5F-30AB-41F5-B3E6-8D7E213BE97E:publisher\n```\n\n----------------------------------------\n\nTITLE: Gateway-Specific Authentication Configuration in EMQX 5.0\nDESCRIPTION: Example of the new separate authentication configuration for gateways in EMQX 5.0, using CoAP gateway with HTTP backend authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_4\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.coap {\n    ...\n    authentication {\n      backend = \"http\"\n      method = \"post\"\n      url = \"http://127.0.0.1:8080/auth\"\n      headers {\"content-type\" = \"application/json\"}\n      body {password = \"${password}\", username = \"${username}\"}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ExProto ConnectionHandler Configuration in EMQX 4.x\nDESCRIPTION: Configuration for ExProto's ConnectionHandler in EMQX 4.x, showing the listener-specific handler URL and certificate settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_7\n\nLANGUAGE: conf\nCODE:\n```\nexproto.listener.protoname.connection_handler_url = http://127.0.0.1:9001\n#exproto.listener.protoname.connection_handler_certfile =\n#exproto.listener.protoname.connection_handler_cacertfile =\n#exproto.listener.protoname.connection_handler_keyfile =\n```\n\n----------------------------------------\n\nTITLE: Leaving EMQX Cluster\nDESCRIPTION: Command to leave the current EMQX cluster. This example shows a failed attempt to leave a cluster when the node is not part of any cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster leave\nFailed to leave the cluster: node_not_in_cluster\n```\n\n----------------------------------------\n\nTITLE: Installing eMQTT-Bench Binary Package\nDESCRIPTION: Commands to download, extract and verify the eMQTT-Bench binary package installation on Ubuntu 20.04.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir emqtt-bench && cd emqtt-bench\nwget https://github.com/emqx/emqtt-bench/releases/download/0.4.12/emqtt-bench-0.4.12-ubuntu20.04-amd64.tar.gz\ntar xfz emqtt-bench-0.4.12-ubuntu20.04-amd64.tar.gz\nrm emqtt-bench-0.4.12-ubuntu20.04-amd64.tar.gz\n\n./emqtt_bench\n```\n\n----------------------------------------\n\nTITLE: Accessing Datalayers Container Shell\nDESCRIPTION: Command to access the shell of the running Datalayers container.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it datalayers bash\n```\n\n----------------------------------------\n\nTITLE: Redis Basic Type Configuration\nDESCRIPTION: Simple Redis type configuration identifier\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\n  type = redis\n```\n\n----------------------------------------\n\nTITLE: Installing bsdutils dependency on Ubuntu/Debian\nDESCRIPTION: Command to install the bsdutils dependency on Ubuntu or Debian systems to resolve EMQX startup failure due to missing logger command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install bsdutils\n```\n\n----------------------------------------\n\nTITLE: ExProto ConnectionAdapter Service Configuration in EMQX 4.x\nDESCRIPTION: Configuration format for ExProto's ConnectionAdapter service in EMQX 4.x, showing HTTP/HTTPS port settings and certificate file paths.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_5\n\nLANGUAGE: conf\nCODE:\n```\nexproto.server.http.port = 9100\nexproto.server.https.port = 9101\nexproto.server.https.cacertfile = etc/certs/cacert.pem\nexproto.server.https.certfile = etc/certs/cert.pem\nexproto.server.https.keyfile = etc/certs/key.pem\n```\n\n----------------------------------------\n\nTITLE: Renaming Limiter Configuration - EMQX\nDESCRIPTION: This change renames the configuration options for the limiter feature in EMQX.  `message_in` is renamed to `messages`, and `bytes_in` is renamed to `bytes`.  Additionally, `capacity` is replaced with `burst`.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Creating Confluent Cloud API Key\nDESCRIPTION: Command to create a new Confluent Cloud API key and secret using the CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ confluent api-key create --resource <kafka_cluster_id>\n\nIt may take a couple of minutes for the API key to be ready.\nSave the API key and secret. The secret is not retrievable later.\n+------------+------------------------------------------------------------------+\n| API Key    | YZ6R7YO6Q2WK35X7                                                 |\n| API Secret | ****************************************                         |\n+------------+------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for LwM2M Gateway Cipher Suites in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that adds support for new cipher suites for LwM2M gateway in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5970](https://github.com/emqx/emqx/pull/5970)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Library Settings\nDESCRIPTION: Example configuration for the Kerberos library in /etc/krb5.conf, defining the default realm, keytab location, and KDC settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/kerberos.md#2025-04-20_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[libdefaults]\n    default_realm = EXAMPLE.COM\n    default_keytab_name = /var/lib/emqx/emqx.keytab\n\n[realms]\n   EXAMPLE.COM = {\n      kdc = kdc.example.com\n      admin_server = kdc.example.com\n   }\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for Snowflake Authentication\nDESCRIPTION: Commands to generate an RSA key pair for secure authentication with Snowflake.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out snowflake_rsa_key.private.pem -nocrypt\nopenssl rsa -in snowflake_rsa_key.private.pem -pubout -out snowflake_rsa_key.public.pem\n```\n\n----------------------------------------\n\nTITLE: Verifying DynamoDB Table Creation\nDESCRIPTION: Docker command to run AWS CLI and list tables in DynamoDB to verify successful table creation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    -e AWS_ACCESS_KEY_ID=root \\\n    -e AWS_SECRET_ACCESS_KEY=public \\\n    -e AWS_DEFAULT_REGION=us-west-2 \\\n    amazon/aws-cli:2.15.57 dynamodb list-tables \\\n    --endpoint-url http://host.docker.internal:8000\n```\n\n----------------------------------------\n\nTITLE: Static Clustering Configuration\nDESCRIPTION: Configuration example for static clustering method in EMQX using a predefined node list\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n    discovery_strategy = static\n    static {\n        seeds = [\"emqx@s1.emqx.io\", \"emqx@s2.emqx.io\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stomp Gateway in EMQX 5.x\nDESCRIPTION: Example configuration for Stomp gateway in EMQX 5.x using the etc/emqx.conf file format. Shows the new structured configuration with mountpoint, frame parameters, and TCP listener settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.stomp {\n    mountpoint = \"stomp/\"\n    frame {\n        max_headers = 10\n        max_headers_length = 1024\n        max_body_length = 65536\n    }\n    listeners.tcp.default {\n        bind = \"0.0.0.0:61613\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EMQX Integration in Datadog Agent\nDESCRIPTION: YAML configuration snippet that specifies the OpenMetrics endpoint in the Datadog Agent configuration file. This endpoint points to EMQX's Prometheus API to collect cluster-wide aggregated metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/datadog.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstances:\n  - openmetrics_endpoint: http://localhost:18083/api/v5/prometheus/stats?mode=all_nodes_aggregated\n```\n\n----------------------------------------\n\nTITLE: Binary to Hexadecimal String Conversion in EMQX\nDESCRIPTION: Example of using bin2hexstr to convert binary data to its hexadecimal string representation for readability or debugging.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip('hello')) = 'CB48CDC9C90700'\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL File in EMQX 5.1\nDESCRIPTION: This snippet demonstrates the updated ACL file configuration for EMQX 5.1. The main difference is the change from 'pubsub' to 'all' for specifying both publish and subscribe permissions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n{allow, {user, \"dashboard\"}, subscribe, [\"$SYS/#\"]}.\n\n{allow, {ipaddr, \"127.0.0.1\"}, all, [\"$SYS/#\", \"#\"]}.\n\n{deny, all, subscribe, [\"$SYS/#\", {eq, \"#\"}]}.\n\n{allow, all}.\n```\n\n----------------------------------------\n\nTITLE: Defining Event Settings Structure in JSON\nDESCRIPTION: This snippet outlines the structure for setting up events in the system, including event types, total counts, and a list of event items, where each item contains identification, length, and content. This structure supports dynamic event management within the tracking application.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"type\": VAL,\n    \"length\": VAL,\n    \"events\": [\n      {\"id\": ID, \"length\": LEN, \"content\": CON}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone to Offset Seconds\nDESCRIPTION: Examples of converting timezone strings to offset seconds\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntimezone_to_offset_seconds('Z') = 0\ntimezone_to_offset_seconds('+08:00') = 28800\ntimezone_to_offset_seconds('local') = 28800\n```\n\n----------------------------------------\n\nTITLE: Viewing License Information (Enterprise Edition)\nDESCRIPTION: Displays current license information for EMQX Enterprise edition, including customer details, deployment type, connection limits, and expiration date.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl license info\ncustomer        : Evaluation\nemail           : contact@emqx.io\ndeployment      : default\nmax_connections : 100\nstart_at        : 2023-01-09\nexpiry_at       : 2028-01-08\ntype            : trial\ncustomer_type   : 10\nexpiry          : false\n```\n\n----------------------------------------\n\nTITLE: Client Connected Event JSON Output Example\nDESCRIPTION: Example JSON output demonstrating a successful client connection event\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"keepalive\": 60,\n  \"is_bridge\": false,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Pushgateway in EMQX\nDESCRIPTION: Configuration snippet showing how to set up Prometheus integration in EMQX's configuration file. The snippet includes settings for push gateway server URL, collection interval, HTTP headers, and job name.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/prometheus.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprometheus {\n  push_gateway_server = \"http://127.0.0.1:9091\"\n  interval = 15s\n  headers {}\n  job_name = \"${name}/instance/${name}~${host}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Current Time as MongoDB ISODate in EMQX Enterprise\nDESCRIPTION: Demonstrates the mongo_date() function which returns the current time as a MongoDB ISODate type or string. This function is only available in EMQX Enterprise edition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nmongo_date() = 'ISODate(\"2024-02-23T15:00:00.123Z\")'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Will Message Topic with MQTTX CLI\nDESCRIPTION: Shows how to subscribe to a will message topic to receive messages when a client unexpectedly disconnects\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/explore-mqtt.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t 't/1' -h 'localhost' -p 1883 -v\n```\n\n----------------------------------------\n\nTITLE: Error Log Example - After Improvement\nDESCRIPTION: Enhanced error log format showing more detailed information for file descriptor exhaustion.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n[error] Accept error on 0.0.0.0:1883: EMFILE (Too many open files)\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Consumer Output\nDESCRIPTION: Example output showing the received messages in RocketMQ consumer after rule execution\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nConsumeMessageThread_please_rename_unique_group_name_4_1 Receive New Messages: [MessageExt [brokerName=broker-a, queueId=3, storeSize=581, queueOffset=0, sysFlag=0, bornTimestamp=1679037578889, bornHost=/172.26.83.106:43920, storeTimestamp=1679037578891, storeHost=/172.26.83.106:10911, msgId=AC1A536A00002A9F000000000000060E, commitLogOffset=1550, bodyCRC=7414108, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message{topic='TopicTest', flag=0, properties={MIN_OFFSET=0, MAX_OFFSET=8, CONSUME_START_TIME=1679037605342, CLUSTER=DefaultCluster}, body=[...], transactionId='null'}]]\nConsumeMessageThread_please_rename_unique_group_name_4_2 Receive New Messages: [MessageExt [brokerName=broker-a, queueId=3, storeSize=511, queueOffset=1, sysFlag=0, bornTimestamp=1679037580174, bornHost=/172.26.83.106:43920, storeTimestamp=1679037580176, storeHost=/172.26.83.106:10911, msgId=AC1A536A00002A9F0000000000000E61, commitLogOffset=3681, bodyCRC=1604860416, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message{topic='TopicTest', flag=0, properties={MIN_OFFSET=0, MAX_OFFSET=8, CONSUME_START_TIME=1679037605342, CLUSTER=DefaultCluster}, body=[...], transactionId='null'}]]\nConsumeMessageThread_please_rename_unique_group_name_4_3 Receive New Messages: [MessageExt [brokerName=broker-a, queueId=3, storeSize=458, queueOffset=2, sysFlag=0, bornTimestamp=1679037584933, bornHost=/172.26.83.106:43920, storeTimestamp=1679037584934, storeHost=/172.26.83.106:10911, msgId=AC1A536A00002A9F000000000000166E, commitLogOffset=5742, bodyCRC=383397630, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message{topic='TopicTest', flag=0, properties={MIN_OFFSET=0, MAX_OFFSET=8, CONSUME_START_TIME=1679037605342, CLUSTER=DefaultCluster}, body=[...], transactionId='null'}]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Durable Storage Info in EMQX CLI\nDESCRIPTION: This command displays information about the durable storage, including site details, shard allocations, and pending replica transitions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/management.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx_ctl ds info\n\nTHIS SITE:\nD8894F95DC86DFDB\n\nSITES:\n5C6028D6CE9459C7    'emqx@n2.local'        up\nD8894F95DC86DFDB    'emqx@n1.local'        up\nF4E92DEA197C8EBC    'emqx@n3.local'        up\n\nSHARDS:\nShard                             Replicas\nmessages/0                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/1                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/10                       5C6028D6CE9459C7\nmessages/11                       5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/2                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/3                        5C6028D6CE9459C7\nmessages/4                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/5                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/6                        5C6028D6CE9459C7\nmessages/7                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/8                        5C6028D6CE9459C7      D8894F95DC86DFDB\nmessages/9                        5C6028D6CE9459C7\n\nREPLICA TRANSITIONS:\nShard                         Transitions\nmessages/0                    +F4E92DEA197C8EBC\nmessages/1                    +F4E92DEA197C8EBC\nmessages/10                   +F4E92DEA197C8EBC  +D8894F95DC86DFDB\nmessages/11                   +F4E92DEA197C8EBC\nmessages/2                    +F4E92DEA197C8EBC\nmessages/3                    +F4E92DEA197C8EBC  +D8894F95DC86DFDB\nmessages/4                    +F4E92DEA197C8EBC\nmessages/5                    +F4E92DEA197C8EBC\nmessages/6                    +F4E92DEA197C8EBC  +D8894F95DC86DFDB\nmessages/7                    +F4E92DEA197C8EBC\nmessages/8                    +F4E92DEA197C8EBC\nmessages/9                    +F4E92DEA197C8EBC  +D8894F95DC86DFDB\n```\n\n----------------------------------------\n\nTITLE: Finding EMQX Installation Directory\nDESCRIPTION: These commands determine and display the root directory of the EMQX installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ EMQX_ROOT_DIR=$(emqx root_dir)\n\n$ echo ${EMQX_ROOT_DIR}\n\"/usr/lib/emqx\"\n```\n\n----------------------------------------\n\nTITLE: Leaving an EMQX Cluster\nDESCRIPTION: This command allows a node to leave the EMQX cluster gracefully. It notifies other nodes and stops participating in cluster operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./bin/emqx ctl cluster leave\n```\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Insert SQL Template\nDESCRIPTION: SQL template for inserting processed MQTT message data into ClickHouse table\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO messages(data, arrived) VALUES ('${data}', ${timestamp})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridges in EMQX 5.6 HOCON\nDESCRIPTION: Starting from EMQX 5.6, the 'bridges' config root is deprecated. Bridges are now configured as 'action' + 'connector' for egress data integration, or 'source' + 'connector' for ingress data integration. The old 'bridges' config in cluster.hocon and REST API path 'api/v5/bridges' still work but are considered deprecated.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ce-5.6.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\n// Old format (deprecated)\nbridges {\n  // bridge configurations\n}\n\n// New format\naction {\n  // action configurations\n}\nconnector {\n  // connector configurations\n}\n\n// Or for ingress\nsource {\n  // source configurations\n}\nconnector {\n  // connector configurations\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Registration Response Example\nDESCRIPTION: JSON response format indicating a failed registration attempt.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor Pagination API Request Example\nDESCRIPTION: Example of how to make a GET request using cursor pagination with position and limit parameters to retrieve client message queue data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGET /clients/{clientid}/mqueue_messages?position=1716187698257189921_0&limit=100\n```\n\n----------------------------------------\n\nTITLE: Python Function for Decoding Received Avro Messages\nDESCRIPTION: This Python function decodes Avro-encoded messages received from the MQTT broker and prints the decoded payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/schema-registry-example-avro.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef on_message(client, userdata, msg):\n    datum_r = avro.io.DatumReader(SCHEMA)\n    buf = io.BytesIO(msg.payload)\n    decoder = avro.io.BinaryDecoder(buf)\n    decoded_payload = datum_r.read(decoder)\n    print(msg.topic+\" \"+str(decoded_payload))\n```\n\n----------------------------------------\n\nTITLE: Reading Data from HStreamDB Streams\nDESCRIPTION: Commands to read data from the 'mqtt_message' and 'mqtt_connect' streams in HStreamDB to verify the stored messages and connection events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Read from Stream `mqtt_message`\nroot@9c7ce2f51860:/# hstream stream read-stream mqtt_message\n# Read from Stream `mqtt_connect`\nroot@9c7ce2f51860:/# hstream stream read-stream mqtt_connect\n```\n\n----------------------------------------\n\nTITLE: HStreamDB Record Template for Message Storage\nDESCRIPTION: JSON template for formatting MQTT messages before storing in HStreamDB\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": ${id}, \"topic\": \"${topic}\", \"qos\": ${qos}, \"payload\": \"${payload}\"}\n```\n\n----------------------------------------\n\nTITLE: Template Variable Usage - Bridge Topics\nDESCRIPTION: Example of using ${node} placeholder in bridge topic configurations\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n${node}\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: This command installs Homebrew, a package manager for macOS, which can be used to simplify the installation of EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-macOS-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with AWS CLI\nDESCRIPTION: Docker command to create a DynamoDB table using AWS CLI with input schema file\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $PWD:/dynamo_data \\\n    -e AWS_ACCESS_KEY_ID=root \\\n    -e AWS_SECRET_ACCESS_KEY=public \\\n    -e AWS_DEFAULT_REGION=us-west-2 \\\n    amazon/aws-cli:2.15.57 dynamodb create-table \\\n    --cli-input-json file:///dynamo_data/mqtt_msg.json \\\n    --endpoint-url http://host.docker.internal:8000\n```\n\n----------------------------------------\n\nTITLE: MongoDB Authorization Data Format in EMQX 5.x\nDESCRIPTION: Example of the JSON document format used for MongoDB authorization in EMQX 5.x, showing fields for username, clientid, permission, action, and topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n      \"username\": \"emqx_u\",\n      \"clientid\": \"emqx_c\",\n      \"ipaddress\": \"127.0.0.1\",\n      \"permission\": \"allow\",\n      \"action\": \"all\",\n      \"topics\": [\"#\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authentication in EMQX\nDESCRIPTION: Configuration snippet for setting up password-based authentication using EMQX's built-in database. Specifies the authentication backend, mechanism, password hashing algorithm with salt position, and user ID type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/mnesia.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n   backend = \"built_in_database\"\n   mechanism = \"password_based\"\n   password_hash_algorithm {\n      name = \"sha256\",\n      salt_position = \"suffix\"\n   }\n   user_id_type = \"username\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Lua Script in EMQX\nDESCRIPTION: This bash command loads a specific Lua script (test.lua) into the emqx_lua_hook plugin in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/lang-lua.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl luahook load test.lua\n```\n\n----------------------------------------\n\nTITLE: Defining EMQX Rule SQL for Message Processing\nDESCRIPTION: This SQL statement selects all fields from messages published to the 't/#' topic. It's used in the EMQX rule to determine which messages should be processed and sent to the S3 sink.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/s3.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Retained Message with MQTTX CLI\nDESCRIPTION: Command to publish a retained message with topic 't/1' using MQTTX CLI. The --retain true flag marks the message as retained so new subscribers will receive it.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-retained-message.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m 'A retained message from MQTTX CLI' --retain true -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Field References in MongoDB Bridge Configuration\nDESCRIPTION: Enhancement for MongoDB bridge to support dynamic collection selection using the ${field} syntax to reference fields in the message. This allows selecting the MongoDB collection dynamically based on message content.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_47\n\nLANGUAGE: hocon\nCODE:\n```\ncollection = \"${topic}\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Topic to Verify Sink Output\nDESCRIPTION: This command uses the Kafka console consumer to read messages from the `testtopic-in` topic. It is used to verify that the MQTT messages forwarded by EMQX are successfully written to the Kafka topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092  --topic testtopic-in\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for EMQX Cluster\nDESCRIPTION: Creates a Docker network to enable node-to-node communication between EMQX containers\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create emqx-net\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Peer Verification\nDESCRIPTION: Sets the SSL peer verification mode to control certificate validation during TLS connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_21\n\nLANGUAGE: configuration\nCODE:\n```\nssl_client_opts.verify = verify_peer\n```\n\n----------------------------------------\n\nTITLE: Vehicle Data Collection Protocol Fields Definition\nDESCRIPTION: Field specifications for vehicle data collection including driving records, electronic waybills, driver identity information, and CAN bus data. Defines data types and encoding formats.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msg_id\": 34560,\n  \"command\": \"integer\",\n  \"param\": \"string\",\n  \"data\": \"string\",\n  \"length\": \"integer\",\n  \"can_data\": [{\n    \"channel\": \"integer\",\n    \"frame_type\": \"integer\",\n    \"data_method\": \"integer\",\n    \"id\": \"integer\",\n    \"data\": \"string\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authentication in EMQX 5.1\nDESCRIPTION: Example configuration for MySQL authentication in EMQX 5.1. It includes updated settings for server, password hashing, query, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_6\n\nLANGUAGE: hocon\nCODE:\n```\nauthentication {\n  backend = mysql\n  mechanism = password_based\n  \n  enable = true\n\n  server = \"127.0.0.1:3306\"\n  username = \"dbuser\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = prefix\n  }\n\n  query = \"SELECT password_hash, salt, is_superuser FROM mqtt where username = ${username} LIMIT 1\"\n  query_timeout = \"5s\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymysql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for MQTT Message Processing\nDESCRIPTION: SQL statement for processing MQTT messages from t/# topic for InfluxDB storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Terminal to Server Communication in JT/T 808\nDESCRIPTION: Demonstrates the JSON payload structure for messages sent from terminals to servers. Includes header and body sections with fields like message ID, encryption, phone number, and sequence number.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\" : {\n    \"msg_id\" : 1,\n    \"encrypt\": 0,\n    \"len\": VAL,\n    \"phone\": 13900000000,\n    \"msg_sn\": 0\n  },\n  \"body\": {\n    \"seq\": 1,\n    \"id\": 1,\n    \"result\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FreeTDS ODBC Driver Installation on MacOS\nDESCRIPTION: Commands for installing and configuring FreeTDS ODBC driver on MacOS using Homebrew\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install unixodbc freetds\n$ vim /usr/local/etc/odbcinst.ini\n# add the following lines\n[ms-sql]\nDescription = ODBC for FreeTDS\nDriver      = /usr/local/lib/libtdsodbc.so\nSetup       = /usr/local/lib/libtdsodbc.so\nFileUsage   = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authentication in EMQX 5.1\nDESCRIPTION: Updated configuration for MySQL authentication and authorization in EMQX 5.1 with JSON format, improved query syntax with placeholders, and reorganized SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  type = mysql\n  enable = true\n\n  server = \"127.0.0.1:3306\"\n  username = \"dbuser\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n\n  query = \"select allow as permission, access as action, topic from mqtt_acl where username = ${username} and ipaddr = ${peerhost} and clientid = ${clientid}\"\n  query_timeout = \"5s\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymysql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grafana Dashboard Filter Example\nDESCRIPTION: This JSON snippet illustrates a filter used within the Grafana Dashboard to target specific data based on the 'host' tag. The example shows a condition that includes data where the host tag is equal to 'ecs-afc3'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"condition\": \"AND\",\n  \"key\": \"host::tag\",\n  \"operator\": \"=\",\n  \"value\": \"ecs-afc3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Authentication in EMQX 4.4\nDESCRIPTION: Example configuration for Redis authentication in EMQX 4.4. It includes server settings, authentication command, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\nauth.redis.type = single\nauth.redis.server = 127.0.0.1:6379\nauth.redis.pool = 8\nauth.redis.database = 0\nauth.redis.password = pass\nassword salt\nauth.redis.auth_cmd = HMGET mqtt_user:%u password salt\n\nauth.redis.password_hash = salt,sha256\n\nauth.redis.ssl = on\nauth.redis.ssl.cacertfile = path/to/your/cafile.pem\nauth.redis.ssl.certfile = path/to/your/certfile\nauth.redis.ssl.keyfile = path/to/your/keyfile\nauth.redis.ssl.verify = true\nauth.redis.ssl.server_name_indication = myredis\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX\nDESCRIPTION: This snippet shows how to download and install EMQX using wget and yum on a Linux system. The specific version number (5.3.0) may need to be updated based on the latest available version.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://www.emqx.com/en/downloads/broker/5.3.0/emqx-5.3.0-el7-amd64.rpm\nsudo yum install emqx-5.3.0-el7-amd64.rpm -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Default State (Enabled)\nDESCRIPTION: Erlang configuration example showing how to set a module (emqx_mod_rewrite) to start by default in the loaded_modules file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/advanced/internal-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{emqx_mod_rewrite, true}.\n```\n\n----------------------------------------\n\nTITLE: Optimizing Concurrent Subscribe/Unsubscribe Handling in Erlang\nDESCRIPTION: These optimizations improve the handling of massive concurrent subscribe/unsubscribe requests in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_62\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx#4732](https://github.com/emqx/emqx/pull/4732)\nGithub PR: [emqx#4738](https://github.com/emqx/emqx/pull/4738)\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Test Command\nDESCRIPTION: MQTTX command to publish a test message to topic 't/1' for testing the Cassandra rule\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Cassandra\" }'\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Subscription Clients\nDESCRIPTION: This command starts 500 subscription clients using `emqtt_bench`. It subscribes to the topic 't' on the EMQX broker at IP address 192.168.0.99. The `-c` flag specifies the number of clients.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench sub -t t -h 192.168.0.99 -c 500\n```\n\n----------------------------------------\n\nTITLE: HAProxy Frontend MQTT WebSocket Configuration\nDESCRIPTION: This configuration sets up a HAProxy frontend for MQTT over WebSocket. It binds to port 8083 and uses the mqtt_ws_backend.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nfrontend mqtt_ws_frontend\n  bind *:8083 \n  mode tcp\n  default_backend mqtt_ws_backend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Message Sequence with Retransmission in MQTT\nDESCRIPTION: Illustrates the step-by-step process of message delivery and retransmission in MQTT, showing how message order can be affected.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/design/retransmission.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n#1  [4,3,2,1 || ]   ----->   []\n#2  [4,3 || 2, 1]   ----->   [1, 2]\n#3  [4 || 3, 2]     ----->   [1, 2, 3]\n#4  [4 || 3, 2]     ----->   [1, 2, 3, 2, 3]\n#5  [ || 4]         ----->   [1, 2, 3, 2, 3, 4]\n#6  [ || ]          ----->   [1, 2, 3, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Handling String Values in EMQX 5.6 HOCON Config\nDESCRIPTION: In EMQX 5.6, triple-quote string values in HOCON config files no longer support escape sequences. For user-created configs like emqx.conf, strings using escape sequences (\\n, \\r, \\t, \\\\) should be changed to regular quotes instead of triple-quotes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ce-5.6.md#2025-04-20_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\n// Old format (no longer supported)\nconfig_key = \"\"\"This is a string with \\n newline\"\"\"\n\n// New format\nconfig_key = \"This is a string with \\n newline\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported InfluxDB Write Syntax Example\nDESCRIPTION: Example showing unsupported timestamp syntax in InfluxDB line protocol that would trigger an error\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nweather,location=us-midwest,season=summer temperature=82 ${timestamp}u\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT-SN Gateway in Configuration File\nDESCRIPTION: Configuration file settings for MQTT-SN gateway with mountpoint, gateway ID, and UDP listener parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/mqttsn.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway.mqttsn {\n\n  mountpoint = \"mqtt/sn\"\n\n  gateway_id = 1\n\n  broadcast = true\n\n  enable_qos3 = true\n\n  listeners.udp.default {\n    bind = 1884\n    max_connections = 10240000\n    max_conn_rate = 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Authorization Configuration\nDESCRIPTION: Configuration block for setting up Redis authorizer using Cluster deployment mode with multiple server endpoints.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    type = redis\n\n    redis_type = cluster\n    servers = \"10.123.13.11:6379,10.123.13.12:6379\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    password = public\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX\nDESCRIPTION: Uses MQTTX to publish a JSON message to the topic 't/opents' with CPU metric data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/opents -m '{\"metric\":\"cpu\",\"tags\":{\"host\":\"serverA\"},\"value\":12}'\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema Registry Cache Issues in EMQX\nDESCRIPTION: Shell command to clear the schema registry protobuf cache table entries when experiencing compatibility issues between different EMQX versions in a cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nemqx eval 'lists:foreach(fun(Key) -> mnesia:dirty_delete(emqx_ee_schema_registry_protobuf_cache_tab, Key) end, mnesia:dirty_all_keys(emqx_ee_schema_registry_protobuf_cache_tab)).'\n```\n\n----------------------------------------\n\nTITLE: EMQX Service-Specific File Handle Limits\nDESCRIPTION: Sets file handle limits specifically for the EMQX service in systemd service configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLimitNOFILE=2097152\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Gateway via emqx.conf\nDESCRIPTION: This snippet demonstrates how to configure the LwM2M gateway using the `emqx.conf` file. It defines settings like XML directory, auto-observe, listener configurations, and topic mappings for translators.  The configuration needs to be applied to each node separately.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway.lwm2m {\n  xml_dir = \"etc/lwm2m_xml/\"\n  auto_observe = true\n  enable_stats = true\n  idle_timeout = \"30s\"\n  lifetime_max = \"86400s\"\n  lifetime_min = \"1s\"\n  mountpoint = \"lwm2m/${endpoint_namea}/\"\n  qmode_time_window = \"22s\"\n  update_msg_publish_condition = \"contains_object_list\"\n  translators {\n    command {qos = 0, topic = \"dn/#\"}\n    notify {qos = 0, topic = \"up/notify\"}\n    register {qos = 0, topic = \"up/resp\"}\n    response {qos = 0, topic = \"up/resp\"}\n    update {qos = 0, topic = \"up/update\"}\n  }\n  listeners {\n    udp {\n      default {\n        bind = \"5783\"\n        max_conn_rate = 1000\n        max_connections = 1024000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key in EMQX Enterprise\nDESCRIPTION: Configuration snippet showing how to add an Enterprise license key to the emqx.conf file. This configuration is required after upgrading from Open Source to Enterprise Edition and must be done for each node after upgrade.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/rolling-upgrades.md#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlicense.key = \"your license\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake User and Setting RSA Public Key\nDESCRIPTION: SQL commands to create a new Snowflake user and set the RSA public key for secure authentication. This step is crucial for establishing a secure connection between EMQX and Snowflake.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER IF NOT EXISTS snowpipeuser\n    PASSWORD = 'Snowpipeuser99'\n    MUST_CHANGE_PASSWORD = FALSE;\n\nALTER USER snowpipeuser SET RSA_PUBLIC_KEY = '\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_1>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_2>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_3>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_4>\n';\n```\n\n----------------------------------------\n\nTITLE: Setting File Handle Limits for Current Session\nDESCRIPTION: Configures the file handle limit for the current session to 2 million using ulimit command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nulimit -n 2097152\n```\n\n----------------------------------------\n\nTITLE: Selecting All Messages from MQTT Topic in EMQX Rule Engine\nDESCRIPTION: This SQL statement selects all messages from the MQTT topic 't/#' for processing in the EMQX rule engine. It's used to define which messages will be forwarded through the SysKeeper data bridge.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/syskeeper.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue and Pull Request for Broker Crash Fix in EMQX 4.3.2\nDESCRIPTION: References a GitHub issue and pull request that fix an issue where the broker may crash when a large number of clients are offline in EMQX version 4.3.2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_54\n\nLANGUAGE: markdown\nCODE:\n```\nGithub Issue: [emqx#4823](https://github.com/emqx/emqx/issues/4823)\nGithub PR: [emqx#4824](https://github.com/emqx/emqx/pull/4824)\n```\n\n----------------------------------------\n\nTITLE: Querying ClickHouse for Inserted Messages\nDESCRIPTION: Curl command to query the 'messages' table in the 'mqtt_data' database of ClickHouse to verify inserted data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u emqx:public -X POST -d \"SELECT * FROM mqtt_data.messages\" http://localhost:18123\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication in EMQX 4.4\nDESCRIPTION: This snippet shows the configuration for HTTP-based authentication in EMQX 4.4. It includes settings for the request URL, method, headers, parameters, timeouts, SSL options, and connection pooling.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_21\n\nLANGUAGE: hocon\nCODE:\n```\nauth.http.auth_req.url = http://127.0.0.1:80/mqtt/auth\nauth.http.auth_req.method = post\nauth.http.auth_req.headers.content_type = application/x-www-form-urlencoded\n\nauth.http.auth_req.params = clientid=%c,username=%u,password=%P\n\nauth.http.timeout = 5s\n\nauth.http.connect_timeout = 5s\nauth.http.pool_size = 32\n\nauth.http.enable_pipelining = 100\n\nauth.http.ssl = on\nauth.http.ssl.cacertfile = path/to/your/cafile.pem\nauth.http.ssl.certfile = path/to/your/certfile\nauth.http.ssl.keyfile = path/to/your/keyfile\nauth.http.ssl.verify = true\nauth.http.ssl.server_name_indication = myhttp\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Keyspace\nDESCRIPTION: Creates a keyspace named 'mqtt' in Cassandra with SimpleStrategy replication and replication factor of 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e CREATE KEYSPACE mqtt WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': 1}\"\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Service with Systemd\nDESCRIPTION: Starts the EMQX service using systemd service manager\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Authentication in EMQX 5.1\nDESCRIPTION: Updated configuration for PostgreSQL authentication and authorization in EMQX 5.1 with JSON format, improved query syntax using placeholders, and reorganized SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  type = postgresql\n  \n  enable = true\n\n  server = \"127.0.0.1:5432\"\n  username = \"root\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n  query = \"select allow as permission, access as action, topic from mqtt_acl where username = ${username} and ipaddr = ${peerhost} and clientid = ${clientid}\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mypgsql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asymmetrical Cluster Link for EU West\nDESCRIPTION: Modified configuration for cluster-eu-west to create an asymmetrical link by setting empty topics array, preventing message reception from US East cluster\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n  name = \"cluster-eu-west\"\n  links = [\n    {\n      name = \"cluster-us-east\"\n      server = \"emqx.eu-west.myinfra.net:11883\"\n      clientid = \"clink-eu-west\"\n      topics = []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Observe Command Payload in JSON for LwM2M\nDESCRIPTION: Provides a complete example of an Observe command payload in JSON format for LwM2M. It includes a specific request ID, message type, and resource path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 10,\n  \"msgType\": \"observe\",\n  \"data\": {\n    \"path\": \"/31024/0/1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Enterprise Edition Release\nDESCRIPTION: Shell commands to create and push a new release tag for the enterprise edition of EMQX documentation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNEW_TAG=\"$(./cut-release.sh ee)\"\ngit push origin \"${NEW_TAG}\"\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Client Events Table in Microsoft SQL Server\nDESCRIPTION: This SQL command creates a table named 't_mqtt_events' for recording MQTT client online/offline events. It includes columns for client ID, event type, and event time.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE dbo.t_mqtt_events (id int PRIMARY KEY IDENTITY(1000000001,1) NOT NULL,\n                                  clientid VARCHAR(255) NULL,\n                                  event_type VARCHAR(255) NULL,\n                                  event_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);\nGO\n```\n\n----------------------------------------\n\nTITLE: Setting Max Erlang VM Ports\nDESCRIPTION: This snippet sets the maximum number of ports for the Erlang virtual machine. This parameter can be adjusted in the `etc/emqx.conf` file to increase the capacity of the Erlang VM.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n## 设置 Erlang 系统同时存在的最大端口数\nnode.max_ports = 2097152\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring Execute Request for LwM2M Resource Actions\nDESCRIPTION: JSON structure for executing an action on a LwM2M resource. Includes the resource path and optional arguments for the execution.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": {?ResourcePath},\n  \"args\": {?Arguments}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Hostname\nDESCRIPTION: This snippet shows how to retrieve the hostname of a Linux system by reading the `/proc/sys/kernel/hostname` file. This hostname is needed for configuring the Grafana Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/sys/kernel/hostname\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Storage Rule SQL\nDESCRIPTION: SQL rule for processing MQTT messages from t/# topic for DynamoDB storage\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MySQL/PostgreSQL Authentication Query with Field Mapping\nDESCRIPTION: SQL query example for MySQL/PostgreSQL authentication in EMQX 5.x, showing how to map the 'password' field to 'password_hash' using SQL alias to maintain compatibility.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  password as password_hash,\n  salt,\n  is_superuser\nFROM mqtt_user\n  where username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Overriding Log Level in EMQX Configuration\nDESCRIPTION: Demonstrates how to override the log level from 'error' to 'debug' while keeping other configurations unchanged.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlog {\n  console {\n    enable = true\n    level = error\n  }\n}\n\n## Set the console log printing level to debug, and keep the other configurations\nlog.console.level = debug\n```\n\n----------------------------------------\n\nTITLE: SSL Connection Examples\nDESCRIPTION: Commands demonstrating one-way and two-way SSL certificate connections for publishing and subscribing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench sub -c 100 -i 10 -t bench/%i -p 8883 -S\n./emqtt_bench pub -c 100 -I 10 -t bench/%i -p 8883 -s 256 -S\n\n./emqtt_bench sub -c 100 -i 10 -t bench/%i -p 8883 --certfile path/to/client-cert.pem --keyfile path/to/client-key.pem\n./emqtt_bench pub -c 100 -i 10 -t bench/%i -s 256 -p 8883 --certfile path/to/client-cert.pem --keyfile path/to/client-key.pem\n```\n\n----------------------------------------\n\nTITLE: Filtering Sparkplug B Metrics with JQ\nDESCRIPTION: SQL rule that uses JQ to filter specific metrics from a Sparkplug B message and republish them to a different topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/sparkplug.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\njq('\n         .metrics[] |\n         select(.name == \"counter_group1/counter1_run\")\n      ',\n      sparkplug_decode(payload)) AS item\nDO item\nFROM \"my/sparkplug/topic\"\n```\n\n----------------------------------------\n\nTITLE: Observing Message Reception Rate\nDESCRIPTION: This shows the output on the subscribing client, displaying the total number of received messages and the current rate (messages per second). It reflects the throughput achieved during the test.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrecv(28006): total=2102563, rate=99725(msg/sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT-SN Gateway via HTTP API\nDESCRIPTION: HTTP API configuration for enabling and setting up the MQTT-SN gateway with UDP listener and specific parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/mqttsn.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PUT' 'http://127.0.0.1:18083/api/v5/gateway/mqttsn' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"mqttsn\",\n  \"enable\": true,\n  \"gateway_id\": 1,\n  \"mountpoint\": \"mqttsn/\",\n  \"listeners\": [\n    {\n      \"type\": \"udp\",\n      \"bind\": \"1884\",\n      \"name\": \"default\",\n      \"max_conn_rate\": 1000,\n      \"max_connections\": 1024000\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Data Import Command Example\nDESCRIPTION: Command line example for importing data with authentication type specification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nemqx_ctl data import <filename> --env '{\"auth.mnesia.as\":\"username\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka Topics in Confluent Cloud\nDESCRIPTION: Command to list all Kafka topics in the selected Confluent Cloud cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic list\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Inserting Data into TimescaleDB\nDESCRIPTION: This SQL template is used to insert processed MQTT data into the 'sensor_data' table in TimescaleDB, including timestamp, location, temperature, and humidity.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-timescale.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\nsensor_data (time, location, temperature, humidity)\n VALUES\n  (NOW(), ${location}, ${temp}, ${humidity})\n```\n\n----------------------------------------\n\nTITLE: Adding Subscribe Permission with QoS Restrictions in Redis\nDESCRIPTION: Command to add subscribe permission with QoS restrictions (QoS1 and QoS2) to Redis for user 'emqx_u' to topic 't/2' using JSON format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHSET mqtt_acl:emqx_u t/2 '{ \"action\": \"subscribe\", \"qos\": [1, 2] }'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Capturing MQTT Messages\nDESCRIPTION: SQL statement to capture all messages from topics starting with 't/'\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/tablestore.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Managing EMQX Plugins via Command Line\nDESCRIPTION: Commands to start and stop EMQX plugins. These commands only affect the executing node and not the entire cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.1.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins stop emqx_plugin_template-5.0.0\n./bin/emqx ctl plugins start emqx_plugin_template-5.0.0\n```\n\n----------------------------------------\n\nTITLE: Persisting File Handle Limits in sysctl.conf\nDESCRIPTION: Configuration for permanently setting the maximum file handles in the system by modifying sysctl.conf.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfs.file-max = 2097152\n```\n\n----------------------------------------\n\nTITLE: LwM2M Read Request Payload Format\nDESCRIPTION: This code defines the JSON structure for a Read request to a LwM2M client. The data field includes the path to the resource that needs to be read. The path can specify an object, object instance, or a specific resource.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": {?ResourcePath}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 1,\n  \"msgType\": \"read\",\n  \"data\": {\n    \"path\": \"/3/0/1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting EMQX Data for Backup\nDESCRIPTION: This command exports data from the EMQX built-in database and configuration files into a compressed archive. This archive can be used to back up the current EMQX state, allowing for later restoration or migration to a new cluster. The resulting file is stored in the `data/backup/` directory with a timestamped filename.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/new-features.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl data export\n...\nData has been successfully exported to data/backup/emqx-export-2023-06-21-14-07-31.592.tar.gz.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snowflake Database and Resources Using SQL\nDESCRIPTION: SQL commands to create a database, table, stage, and pipe in Snowflake for storing EMQX data. It sets up the necessary structure for data integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUSE ROLE accountadmin;\n\nCREATE DATABASE IF NOT EXISTS testdatabase;\n\nCREATE OR REPLACE TABLE testdatabase.public.emqx (\n    clientid STRING,\n    topic STRING,\n    payload STRING,\n    publish_received_at TIMESTAMP_LTZ\n);\n\nCREATE STAGE IF NOT EXISTS testdatabase.public.emqx\nFILE_FORMAT = (TYPE = CSV PARSE_HEADER = TRUE FIELD_OPTIONALLY_ENCLOSED_BY = '\"')\nCOPY_OPTIONS = (ON_ERROR = CONTINUE PURGE = TRUE);\n\nCREATE PIPE IF NOT EXISTS testdatabase.public.emqx AS\nCOPY INTO testdatabase.public.emqx\nFROM @testdatabase.public.emqx\nMATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;\n```\n\n----------------------------------------\n\nTITLE: Client Machine Tuning Configuration\nDESCRIPTION: Optimizes client machine settings for benchmarking EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.ip_local_port_range=\"500 65535\"\necho 1000000 > /proc/sys/fs/nr_open\nulimit -n 100000\n```\n\n----------------------------------------\n\nTITLE: Creating Database in Datalayers\nDESCRIPTION: SQL command to create a new database named 'mqtt' in Datalayers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate database mqtt\n```\n\n----------------------------------------\n\nTITLE: Running EMQX Docker Container\nDESCRIPTION: Command to start an EMQX Docker container with port mappings for MQTT (1883), WebSocket (8083/8084), SSL (8883), and Dashboard (18083).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:@CE_VERSION@\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to MQTT Topic\nDESCRIPTION: This command uses MQTTX CLI's bench command to repeatedly publish messages to the 't/1' topic with one client. It's used to demonstrate message queuing for offline clients with durable sessions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/durability_introduction.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx bench pub -t t/1 -c 1\n```\n\n----------------------------------------\n\nTITLE: LwM2M Topic Configuration in EMQX 4.x\nDESCRIPTION: Configuration format for LwM2M topic settings in EMQX 4.x, showing the topic mapping for command, response, notify, register, and update messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_9\n\nLANGUAGE: conf\nCODE:\n```\nlwm2m.topics.command = dn/#\nlwm2m.topics.response = up/resp\nlwm2m.topics.notify = up/notify\nlwm2m.topics.register = up/resp\nlwm2m.topics.update = up/resp\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authentication in EMQX 4.4\nDESCRIPTION: Configuration for MySQL authentication and authorization in EMQX 4.4, including server settings, connection pool, query parameters, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_30\n\nLANGUAGE: properties\nCODE:\n```\nauth.mysql.server = 127.0.0.1:3306\nauth.mysql.pool = 8\nauth.mysql.username = dbuser\nauth.mysql.database = mqtt\n\nauth.mysql.query_timeout = 5s\n\nauth.mysql.acl_query = select allow, ipaddr, username, clientid, access, topic from mqtt_acl where username = '%u'\n\nauth.mysql.ssl = on\nauth.mysql.ssl.cacertfile = path/to/your/cafile.pem\nauth.mysql.ssl.certfile = path/to/your/certfile\nauth.mysql.ssl.keyfile = path/to/your/keyfile\nauth.mysql.ssl.verify = true\nauth.mysql.ssl.server_name_indication = mymysql\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Authentication Configuration\nDESCRIPTION: Core HTTP authentication mechanism and backend configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nmechanism = password_based\nbackend = http\n```\n\n----------------------------------------\n\nTITLE: Sample MQTT Message Payload\nDESCRIPTION: Example JSON payload structure for OpenTSDB data integration, showing metric name, tags, and value format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metric\": \"cpu\",\n  \"tags\": {\n    \"host\": \"serverA\"\n  },\n  \"value\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX Repository on Ubuntu\nDESCRIPTION: Downloads and installs the EMQX enterprise repository using packagecloud.io script\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://packagecloud.io/install/repositories/emqx/emqx-enterprise5/script.deb.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Subscribing to EMQX Topic using MQTTX CLI\nDESCRIPTION: Command to subscribe to the sub/# topic in EMQX with QoS 1 and verbose output enabled.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t sub/# -q 1 -v\n```\n\n----------------------------------------\n\nTITLE: Single-Level Wildcard Matching Topics\nDESCRIPTION: Example topics that match the sensor/+/temperature subscription pattern using single-level wildcard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_1\n\nLANGUAGE: awk\nCODE:\n```\nsensor/1/temperature\nsensor/2/temperature\n...\nsensor/n/temperature\n```\n\n----------------------------------------\n\nTITLE: Example of Single Resource Write Command Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Write command setting a string value for resource path /31024/11/1, with request ID 3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 3,\n  \"msgType\": \"write\",\n  \"data\": {\n    \"path\": \"/31024/11/1\",\n    \"type\": \"String\",\n    \"value\": \"write_an_example_value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Confluent Cloud API Key\nDESCRIPTION: Command to use a specific Confluent Cloud API key for subsequent operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconfluent api-key use <API_Key> --resource <kafka_cluster_id>\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Connection Acknowledgment Events\nDESCRIPTION: SQL query to extract client connection information when EMQX sends a CONNACK packet. Returns client ID, username, reason code, and node information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  reason_code,\n  node\nFROM\n  \"$events/client_connack\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"reason_code\": \"success\",\n  \"node\": \"emqx@127.0.0.1\",\n  \"connected_at\": 1645003578536,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: 配置 EMQX 集群节点自动清理\nDESCRIPTION: 在 EMQX 配置文件中设置断开连接节点的自动清理时间间隔。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/introduction.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster.autoclean = 24h\n```\n\n----------------------------------------\n\nTITLE: Schema Encode and Tag with External Registry in SQL\nDESCRIPTION: SQL example of using schema_encode_and_tag function. It encodes and tags a payload using a local Avro schema and an external Schema Registry.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  schema_encode_and_tag(\n    'my_local_avro_schema',\n    'my_external_registry',\n    json_decode(payload),\n    'my_subject'\n  ) as encoded\nfrom 't'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Basic Type Configuration\nDESCRIPTION: Simple PostgreSQL type configuration identifier\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_6\n\nLANGUAGE: hocon\nCODE:\n```\ntype = postgresql\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Database Type in EMQX 5.1\nDESCRIPTION: Simple configuration line to specify MongoDB as the database type for authentication or authorization in EMQX 5.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_35\n\nLANGUAGE: properties\nCODE:\n```\ntype = mongodb\n```\n\n----------------------------------------\n\nTITLE: Managing Dashboard Users with admins Commands\nDESCRIPTION: Create, modify and delete EMQX dashboard administrator accounts using the admins command set.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl admins add emqx_u EMQemq@1172\nok\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl admins passwd emqx_u EMQemq@11721\nok\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl admins del emqx_u\nok\n```\n\n----------------------------------------\n\nTITLE: SQL Query for MQTT Message Processing\nDESCRIPTION: SQL statement to select all messages from MQTT topic 't/#' for forwarding to Confluent\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Plugins via CLI Command in Bash\nDESCRIPTION: Command to remove an installed plugin from EMQX using the command-line interface, used when a plugin is no longer needed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins uninstall {pluginName}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Gateway Details\nDESCRIPTION: Retrieves detailed information about a specific gateway, including its configuration settings, status, and timestamps.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl gateway lookup coap\nname: coap\nstatus: running\ncreated_at: 2023-05-22T14:23:50.352+08:00\nstarted_at: 2023-05-22T14:23:50.353+08:00\nconfig: #{connection_required => false,enable => true,enable_stats => true,\n          heartbeat => 30000,idle_timeout => 30000,\n          listeners =>\n              #{udp =>\n                    #{default =>\n                          #{access_rules => [],bind => 5683,enable => true,\n                            enable_authn => true,max_conn_rate => 1000,\n                            max_connections => 1024000,\n                            udp_options =>\n                                #{active_n => 100,reuseaddr => true}}}},\n          mountpoint => <<>>,notify_type => qos,publish_qos => coap,\n          subscribe_qos => coap}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Rule Engine Rule Import Fix in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that fixes a rule engine rule import failure in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5512](https://github.com/emqx/emqx/pull/5512)\n```\n\n----------------------------------------\n\nTITLE: Producing Messages to Kafka Topic\nDESCRIPTION: Command to start a producer for sending messages to the 'testtopic-in' Kafka topic in Confluent Cloud.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic produce testtopic-in\n```\n\n----------------------------------------\n\nTITLE: Getting ASCII Code of a Character in EMQX\nDESCRIPTION: The ascii function returns the ASCII code corresponding to a character. If the input string contains multiple characters, only the code for the first character is returned.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nascii('a') = 97\nascii('abc') = 97\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Mode in CoAP Gateway\nDESCRIPTION: Configuration parameter to enable or disable connection mode in CoAP gateway, controlling session and connection management\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/coap.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ngateway.coap {\n\n  ## true: Enable connection mode\n  ## false: Disable connection mode\n  connection_required = true\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for JWKS Endpoint Configuration Crash Fix in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that fixes a crash caused by not configuring the JWKS endpoint in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4916](https://github.com/emqx/emqx/pull/4916)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Disk File Export in EMQX\nDESCRIPTION: This configuration sets up file export to the local disk, specifying the storage directory for exported files. It's used when you want to store complete files locally after merging segments.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/file-transfer/broker.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfile_transfer {\n  # Enable file transfer feature\n  enable = true\n\n  # Segment storage configuration\n  # ...\n\n  # Enable local disk file export\n  storage.local.exporter.local {\n    # Export file storage directory, preferably set on high I/O performance disks.\n    root = \"./data/transfers/exports\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LwM2M Update Message Payload Format\nDESCRIPTION: This code shows the JSON format of the MQTT payload for a LwM2M Update message.  It includes fields for endpoint name, version, lifetime, binding, and object list, similar to the Register message.  This message is sent to update the registration information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"update\",\n  \"data\": {\n    \"ep\": {?EndpointName},\n    \"lwm2m\": {?Version},\n    \"lt\": {?LifeTime},\n    \"b\": {?Binding},\n    \"objectList\": {?ObjectList}\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"update\",\n  \"data\": {\n    \"objectList\": [\"/7/0\"],\n    \"lwm2m\": \"1.0\",\n    \"lt\": 300,\n    \"ep\": \"testlwm2mclient\",\n    \"b\": \"U\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snowflake ODBC Driver on Linux\nDESCRIPTION: Script to install the Snowflake ODBC driver and configure the odbc.ini file on Linux systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nscripts/install-snowflake-driver.sh\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for Snowflake Authentication\nDESCRIPTION: OpenSSL commands to generate an RSA key pair for secure authentication with Snowflake. This creates both private and public key files in PEM format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out snowflake_rsa_key.private.pem -nocrypt\nopenssl rsa -in snowflake_rsa_key.private.pem -pubout -out snowflake_rsa_key.public.pem\n```\n\n----------------------------------------\n\nTITLE: Compiling and installing OpenSSL 1.1.1 from source on Linux\nDESCRIPTION: Steps to download, compile, and install OpenSSL 1.1.1 from source code on Linux systems to resolve EMQX startup issues related to missing OpenSSL libraries.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://www.openssl.org/source/openssl-1.1.1c.tar.gz\nscp openssl-1.1.1c.tar.gz ct-test-ha:~/\ntar zxf openssl-1.1.1c.tar.gz\ncd openssl-1.1.1c\n./config\nmake test\nmake install\n\nln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1\nln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1\n```\n\n----------------------------------------\n\nTITLE: 查询 emqx_client_events 表数据\nDESCRIPTION: 查看 emqx_client_events 表中是否已经写入测试数据。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from emqx_client_events;\n+----+----------+---------------------+---------------------+\n| id | clientid | event               | created_at          |\n+----+----------+---------------------+---------------------+\n|  1 | emqx_c   | client.connected    | 2022-12-09 08:44:07 |\n|  2 | emqx_c   | client.disconnected | 2022-12-09 08:44:07 |\n+----+----------+---------------------+---------------------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using Single Quotes in Rule Engine SQL FROM Clause\nDESCRIPTION: Enhancement to the rule engine SQL language to support single quotes (') in the FROM clause, where previously only double quotes (\") were allowed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM 'topic/example'\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX\nDESCRIPTION: MQTT publish command to test the rule by sending a message to topic t/1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello GreptimeDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Basic JWT Authentication Configuration\nDESCRIPTION: Core JWT authentication mechanism configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmechanism = jwt\n```\n\n----------------------------------------\n\nTITLE: Structuring Create Request for LwM2M Object Instances\nDESCRIPTION: JSON structure for creating a new object instance. Includes the base object path and an array of resources with their respective paths, types, and values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"basePath\": \"/{?ObjectID}\",\n  \"content\": [\n    {\n      \"path\": {?ResourcePath},\n      \"type\": {?ValueType},\n      \"value\": {?Value}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading EMQX Repository for Ubuntu\nDESCRIPTION: This command downloads and executes a script to set up the EMQX repository for Ubuntu. It requires sudo privileges to run.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://assets.emqx.com/scripts/install-emqx-deb.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend MQTT WebSocket Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend for MQTT over WebSocket.  It uses round robin load balancing and defines the EMQX server addresses with port 8083.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_ws_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:8083 check\n  server emqx2 emqx2-cluster.emqx.io:8083 check\n  server emqx3 emqx3-cluster.emqx.io:8083 check\n```\n\n----------------------------------------\n\nTITLE: Configuring GB/T 32960 Authentication via Configuration File\nDESCRIPTION: Example of setting up HTTP authentication for GB/T 32960 gateway using the configuration file approach. The configuration includes HTTP backend settings, connection parameters, and request specifications.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/gbt32960.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ngateway.gbt32960 {\n  authentication {\n    backend = \"http\"\n    mechanism = \"password_based\"\n    method = \"post\"\n    connect_timeout = \"5s\"\n    enable_pipelining = 100\n    url = \"http://127.0.0.1:8080\"\n    headers {\n      \"content-type\" = \"application/json\"\n    }\n    body {\n      \"vin\": \"${clientid}\"\n    }\n    pool_size = 8\n    request_timeout = \"5s\"\n    ssl.enable = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GCP PubSub JSON Field Support\nDESCRIPTION: This snippet details the update to the `service_account_json` field in GCP PubSub connectors, which now supports JSON-encoded strings, while maintaining backward compatibility with previous formats.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"service_account_json\": \"{\\\"type\\\":\\\"service_account\\\", \\\"project_id\\\":\\\"your-project-id\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Message Output\nDESCRIPTION: Sample output showing the republished message received on the transformed topic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n[2024-1-31] [16:49:22] › topic: sub/f/1\npayload: I'm from broker.emqx.io\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding in EMQX\nDESCRIPTION: Example of using json_encode to convert EMQX data structures like arrays or maps into JSON formatted strings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\njson_encode([1,2,3]) = '[1,2,3]'\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Cluster Status\nDESCRIPTION: This command checks the status of the EMQX cluster. It displays the running nodes in the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n$ ./bin/emqx ctl cluster status\n\n集群状态：[{running_nodes,['emqx@s1.emqx.io','emqx@s2.emqx.io']}]\n```\n```\n\n----------------------------------------\n\nTITLE: Reloading HAProxy\nDESCRIPTION: This command reloads the HAProxy service to apply new configurations without interrupting existing connections. It uses `systemctl` and requires `sudo` privileges.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload haproxy\n```\n\n----------------------------------------\n\nTITLE: CSV 格式认证数据示例\nDESCRIPTION: 这个示例展示了用于导入 EMQX 认证系统的 CSV 格式文件。文件包含用户 ID、密码哈希值、盐值和超级用户标志，用于定义用户的认证信息。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/user_management.md#2025-04-20_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nuser_id,password_hash,salt,is_superuser\nmyuser3,b6c743545a7817ae8c8f624371d5f5f0373234bb0ff36b8ffbf19bce0e06ab75,de1024f462fb83910fd13151bd4bd235,true\nmyuser4,ee68c985a69208b6eda8c6c9b4c7c2d2b15ee2352cdd64a903171710a99182e8,ad773b5be9dd0613fe6c2f4d8c403139,false\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL for Data Processing\nDESCRIPTION: SQL rule to process MQTT messages from t/# topic and extract temperature, humidity and location data\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-timescale.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload.temp as temp,\n  payload.humidity as humidity,\n  payload.location as location\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Superuser Configuration Example\nDESCRIPTION: Example showing MongoDB authentication configuration with superuser field.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nauthentication = [\n  {\n    ...\n    mechanism = \"password_based\"\n    backend = \"mongodb\"\n    # is_superuser_field = \"is_superuser\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Authorization in EMQX 4.4\nDESCRIPTION: This snippet demonstrates the configuration for Redis-based authorization in EMQX 4.4. It includes settings for the Redis server, connection pool, database, authentication, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_28\n\nLANGUAGE: hocon\nCODE:\n```\nauth.redis.type = single\nauth.redis.server = 127.0.0.1:6379\nauth.redis.pool = 8\nauth.redis.database = 0\nauth.redis.password = pass\nassword salt\nauth.redis.acl_cmd = HGETALL mqtt_user:%u\n\nauth.redis.password_hash = salt,sha256\n\nauth.redis.ssl = on\nauth.redis.ssl.cacertfile = path/to/your/cafile.pem\nauth.redis.ssl.certfile = path/to/your/certfile\nauth.redis.ssl.keyfile = path/to/your/keyfile\nauth.redis.ssl.verify = true\nauth.redis.ssl.server_name_indication = myredis\n```\n\n----------------------------------------\n\nTITLE: STOMP Gateway Basic Configuration\nDESCRIPTION: Basic configuration settings for the STOMP gateway including enable flags, idle timeout, and statistics settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\ngateway.stomp.enable = true\ngateway.stomp.enable_stats = true\ngateway.stomp.idle_timeout = 30s\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Service on CentOS/RHEL\nDESCRIPTION: This command starts the EMQX service using systemctl on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Registration Request Format for JT/T 808 Gateway\nDESCRIPTION: HTTP POST request format for device registration in JT/T 808 gateway. Includes device details like province, city, manufacturer, model, and other identifying information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nURL: http://127.0.0.1:8991/jt808/registry\nMethod: POST\nBody:\n   { \"province\": 58,\n     \"city\": 59,\n     \"manufacturer\": \"Infinity\",\n     \"model\": \"Q2\",\n     \"license_number\": \"ZA334455\",\n     \"dev_id\": \"xx11344\",\n     \"color\": 3,\n     \"phone\", \"00123456789\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Showing EMQX Client Subscriptions\nDESCRIPTION: Command to show subscriptions for a specific client in EMQX. This example displays the subscription for the client 'emqx_a'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl subscriptions show emqx_a\nemqx_a -> topic:t/1 qos:0 nl:0 rh:0 rap:0\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft SQL Server using sqlcmd\nDESCRIPTION: This command connects to the Microsoft SQL Server instance using the sqlcmd utility. It specifies the server, user, password, and additional connection options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P mqtt_public1 -N -C\n```\n\n----------------------------------------\n\nTITLE: Sending Heartbeat to Maintain CoAP Connection\nDESCRIPTION: Example using libcoap to send a heartbeat request to maintain the connection. This prevents the gateway from releasing resources when the heartbeat interval expires.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m put -e \"\" \"coap://127.0.0.1/mqtt/connection?clientid=123&token=3404490787\"\n```\n\n----------------------------------------\n\nTITLE: Area ID List JSON Format for Deleting Circular Areas in JT/T 808 Protocol\nDESCRIPTION: Example JSON format for representing the list of area IDs to be deleted in the Deleting Circular Area message (msg_id: 34305/0x8601). It contains a simple array of area identifiers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[ID1, ID2, ...]\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Force Shutdown Mechanism Fix in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that fixes an issue where the Force Shutdown mechanism cannot take effect when the process is suspended in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5460](https://github.com/emqx/emqx/pull/5460)\n```\n\n----------------------------------------\n\nTITLE: Publishing to MQTT Topic with MQTTX CLI\nDESCRIPTION: This command publishes a message to a specific MQTT topic using the MQTTX CLI. The `-t` option specifies the target topic, `-m` specifies the message payload, and `-h` and `-p` indicate the host and port of the MQTT broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-shared-subscription.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '1' -h 'localhost' -p 1883\n```\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '2' -h 'localhost' -p 1883\n```\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '3' -h 'localhost' -p 1883\n```\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '4' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Structuring Multiple Resources Write Request for LwM2M Operations\nDESCRIPTION: JSON structure for writing values to multiple resources. Includes a base path and an array of resources with their respective types and values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"basePath\": {?BasePath},\n  \"content\": [\n    {\n      \"path\": {?ResourcePath},\n      \"type\": {?ValueType},\n      \"value\": {?Value}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Snowflake\nDESCRIPTION: SQL query to verify the data written to the Snowflake table from EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM testdatabase.public.emqx;\n```\n\n----------------------------------------\n\nTITLE: HAProxy Status Monitoring Configuration\nDESCRIPTION: This configuration sets up a HAProxy frontend to expose status monitoring information. It binds to port 8888 and provides a statistics page at `/stats`.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nfrontend stats\n  mode http\n  bind *:8888\n  stats enable\n  stats uri /stats\n  stats refresh 10s\n```\n\n----------------------------------------\n\nTITLE: Creating Client Events Table in TDengine\nDESCRIPTION: SQL commands to create a table for storing client connection events with timestamp, client ID and event type\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emqx_client_events (\n  ts timestamp,\n  clientid VARCHAR(255),\n  event VARCHAR(255)\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Client Multi-condition Query Crash Fix in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that fixes an issue where parameter error in the client's multi-condition query may cause a crash in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4916](https://github.com/emqx/emqx/pull/4916)\n```\n\n----------------------------------------\n\nTITLE: Checking crypto library dependencies on Linux\nDESCRIPTION: Commands to navigate to EMQX installation directory and check crypto library dependencies using ldd command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd emqx\n# or\ncd /lib/emqx\n\nldd lib/crypto-*/priv/lib/crypto.so\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in EMQX 5.1\nDESCRIPTION: Updated configuration for MongoDB authentication and authorization in EMQX 5.1 with JSON format, improved filter syntax with placeholders, and reorganized SSL settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  type = mongodb\n  enable = true\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\", clientid = \"${clientid}\" }\n  \n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"pass\"\n  \n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymongo\n  }\n  \n  topology {\n    pool_size = 1\n    max_overflow = 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Alarm Confirmation Message Structure in JSON\nDESCRIPTION: This snippet defines the structure for a manual alarm confirmation message, including fields for the message sequence number and the type of alarm being confirmed. It ensures that confirmation can be aligned with the appropriate event type within the tracking system.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"seq\": VAL,\n    \"type\": VAL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MQTTX Message Publishing Command\nDESCRIPTION: Command to publish a test message to the configured MQTT topic using MQTTX client.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-gcp-pubsub.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t /devices/+/events -m '{ \"msg\": \"hello GCP PubSub\" }'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX via YUM\nDESCRIPTION: Command to remove EMQX installation using the yum package manager on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum remove emqx\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend Least Connections Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend using the least connections load balancing strategy. Requests are sent to the server with the fewest active connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance leastconn\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: LwM2M Topic Configuration in EMQX 5.0\nDESCRIPTION: New configuration format for LwM2M topic settings in EMQX 5.0, using translators structure with QoS and topic settings for each message type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_10\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.lwm2m {\n  translators {\n    command {qos = 0, topic = \"dn/#\"}\n    notify {qos = 0, topic = \"up/notify\"}\n    register {qos = 0, topic = \"up/resp\"}\n    response {qos = 0, topic = \"up/resp\"}\n    update {qos = 0, topic = \"up/update\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Processing SQL Rule\nDESCRIPTION: SQL statement to select all messages from the root/# topic pattern for processing\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"root/#\"\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for STOMP Gateway Fix in EMQX 4.3.10\nDESCRIPTION: References a GitHub pull request that fixes a STOMP gateway live-upgrade failure in EMQX version 4.3.10.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6110](https://github.com/emqx/emqx/pull/6110)\n```\n\n----------------------------------------\n\nTITLE: Accessing Microsoft SQL Server Docker Container\nDESCRIPTION: This bash command accesses the running Microsoft SQL Server Docker container's shell.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it sqlserver bash\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Cluster Status\nDESCRIPTION: Displays the command to check the current status of the EMQX cluster, showing all running nodes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl cluster status\n```\n\n----------------------------------------\n\nTITLE: Configuring IPV6 and SSL for Rule Engine Resources in EMQX 4.2.0\nDESCRIPTION: Added support for IPV6 and SSL connections in rule engine resources for MySQL, MongoDB, Cassandra, and PostgreSQL in EMQX 4.2.0. This expands connectivity options for these databases.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_31\n\nLANGUAGE: erlang\nCODE:\n```\nRule engine Mysql/MongoDB/Cassandra/PGsql resource supports IPV6 and SSL connection\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT 5.0 Properties for Message Republish\nDESCRIPTION: Support added for setting MQTT 5.0 publish properties and user properties when republishing messages via rule engine actions. Full Dashboard integration pending in future versions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n% Example config not provided in release notes\n```\n\n----------------------------------------\n\nTITLE: Installing InfluxDB 1.8\nDESCRIPTION: This snippet shows how to download and install InfluxDB version 1.8 using wget and yum on a Linux system.  It specifically advises against installing newer versions due to compatibility issues with collectd.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwget https://dl.influxdata.com/influxdb/releases/influxdb-1.8.10.x86_64.rpm\nsudo yum localinstall influxdb-1.8.10.x86_64.rpm -y\n```\n\n----------------------------------------\n\nTITLE: Improving Asynchronous Task Management\nDESCRIPTION: This snippet discusses the refinement in managing asynchronous tasks by separating the cleanup process for channels into its own dedicated pool, aimed at resolving performance issues and enhancing overall efficiency under high network latency.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Async task management separation\nasync function cleanupChannels() {\n  // cleanup logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB for collectd Data\nDESCRIPTION: Configuration for InfluxDB to receive and store metrics from collectd. This setup listens on port 25826 and writes data to a database named 'collectd'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_7\n\nLANGUAGE: conf\nCODE:\n```\n[[collectd]]\n  enabled = true\n  bind-address = \":25826\"\n  database = \"collectd\"\n  batch-size = 5000\n  batch-pending = 10\n  batch-timeout = \"10s\"\n  read-buffer = 0\n  typesdb = \"/usr/share/collectd/types.db\"\n  security-level = \"none\"\n  parse-multivalue-plugin = \"split\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Standalone Configuration - HCL\nDESCRIPTION: Configuration for MongoDB standalone deployment mode with authentication settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/mongodb.md#2025-04-20_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  type = mongodb\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Datadog Agent on macOS\nDESCRIPTION: Commands to stop and start the Datadog Agent service on macOS using launchctl. This is necessary after making configuration changes to apply them.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/datadog.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlaunchctl stop com.datadoghq.agent\nlaunchctl start com.datadoghq.agent\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 Locale for Amazon Linux\nDESCRIPTION: Sets up UTF-8 locale using cloud-init configuration on Amazon Linux systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | sudo tee /etc/cloud/cloud.cfg.d/99_locale.cfg\n#cloud-config\nlocale: C.utf8\nEOF\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX in Different Modes\nDESCRIPTION: These commands demonstrate how to start EMQX in daemon mode, foreground mode, and interactive mode. Replace 'emqx' with 'bin/emqx' if using the zip package installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-macOS-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 以守护进程模式启动\nemqx start\n\n# 以前台模式启动\nemqx foreground\n\n# 以交互模式启动，使用 Erlang shell\nemqx console\n```\n\n----------------------------------------\n\nTITLE: Adding IP Address Support in ACL Configuration for EMQX Enterprise 4.2.8\nDESCRIPTION: Enhanced ACL configuration to support IP addresses in the acl.conf file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_28\n\nLANGUAGE: Erlang\nCODE:\n```\n# Example acl.conf entry\n{allow, {ipaddr, \"192.168.1.0/24\"}, pubsub, [\"topic/#\"]}.\n```\n\n----------------------------------------\n\nTITLE: Improved Error Logging for Proxy Protocol (Erlang)\nDESCRIPTION: Enhanced error logging for Proxy Protocol issues, providing more detailed and readable error messages for invalid proxy info and timeouts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n2023-04-20T18:07:06.180134+08:00 [error] [esockd_proxy_protocol] The listener 127.0.0.1:8883 is working in proxy protocol mode, but received invalid proxy_protocol header, raw_bytes=<<\"f\\n\">>\n\n2023-04-20T18:10:17.205436+08:00 [error] [esockd_proxy_protocol] The listener 127.0.0.1:8883 is working in proxy protocol mode, but timed out while waiting for proxy_protocol header\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipelining for Webhook in EMQX Enterprise 4.2.8\nDESCRIPTION: Added support for enabling/disabling HTTP pipelining for Webhook connections. This is disabled by default.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_27\n\nLANGUAGE: Erlang\nCODE:\n```\nwebhook.http_pipelining = false\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Example - EMQX 4.4\nDESCRIPTION: Complete MySQL configuration example for EMQX 4.4 including connection and SSL settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nauth.mysql.server = 127.0.0.1:3306\nauth.mysql.pool = 8\nauth.mysql.username = dbuser\nauth.mysql.database = mqtt\n\nauth.mysql.query_timeout = 5s\n\nauth.mysql.acl_query = select allow, ipaddr, username, clientid, access, topic from mqtt_acl where username = '%u'\n\nauth.mysql.ssl = on\nauth.mysql.ssl.cacertfile = path/to/your/cafile.pem\nauth.mysql.ssl.certfile = path/to/your/certfile\nauth.mysql.ssl.keyfile = path/to/your/keyfile\nauth.mysql.ssl.verify = true\nauth.mysql.ssl.server_name_indication = mymysql\n```\n\n----------------------------------------\n\nTITLE: Creating ODBC Configuration File on macOS\nDESCRIPTION: Bash commands to create or update the ~/.odbc.ini file on macOS, configuring the ODBC connection for Snowflake. This sets up the driver path and data source information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF > ~/.odbc.ini\n[ODBC]\nTrace=no\nTraceFile=\n\n[ODBC Drivers]\nSnowflake = Installed\n\n[ODBC Data Sources]\nsnowflake = Snowflake\n\n[Snowflake]\nDriver = /opt/snowflake/snowflakeodbc/lib/universal/libSnowflake.dylib\nEOF\n```\n\n----------------------------------------\n\nTITLE: MQTT WebSocket Reverse Proxy Configuration\nDESCRIPTION: HAProxy configuration for MQTT WebSocket connections with load balancing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_ws_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:8083 check\n  server emqx2 emqx2-cluster.emqx.io:8083 check\n  server emqx3 emqx3-cluster.emqx.io:8083 check\n\nfrontend mqtt_ws_frontend\n  bind *:8083 \n  mode tcp\n  default_backend mqtt_ws_backend\n```\n\n----------------------------------------\n\nTITLE: Starting HStreamDB TLS Service with Docker Compose\nDESCRIPTION: Shell command to start the HStreamDB TLS service using Docker Compose. It sets the step_ca environment variable and specifies the docker-compose file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv step_ca=$PWD/ca docker compose -f docker-compose-tls.yaml up --build\n```\n\n----------------------------------------\n\nTITLE: FreeTDS ODBC Driver Installation on CentOS\nDESCRIPTION: Commands for installing and configuring FreeTDS ODBC driver on CentOS systems\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yum install unixODBC unixODBC-devel freetds freetds-devel perl-DBD-ODBC perl-local-lib\n$ vim /etc/odbcinst.ini\n# add the following lines\n[ms-sql]\nDescription = ODBC for FreeTDS\nDriver      = /usr/lib64/libtdsodbc.so\nSetup       = /usr/lib64/libtdsS.so.2\nDriver64    = /usr/lib64/libtdsodbc.so\nSetup64     = /usr/lib64/libtdsS.so.2\nFileUsage   = 1\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for STOMP Gateway Fixes in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes some issues with the STOMP gateway in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6040](https://github.com/emqx/emqx/pull/6040)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Engine Redis Resource SSL in EMQX 4.2.1\nDESCRIPTION: Added support for configuring SSL parameters in Redis resources for the rule engine in EMQX 4.2.1. This enhances security for Redis connections used by the rule engine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_30\n\nLANGUAGE: erlang\nCODE:\n```\nAdded redis resources to support configuring SSL parameters\n```\n\n----------------------------------------\n\nTITLE: Avro Encoding with External Registry in SQL\nDESCRIPTION: SQL example of using avro_encode function with an external Schema Registry. It encodes a JSON-decoded payload using a specified schema ID.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  avro_encode('my_external_registry', json_decode(payload), 123) as encoded\nfrom 't'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limits for TCP Listener in EMQX\nDESCRIPTION: This configuration sets the rate limits for the default TCP listener in EMQX. It limits the connection rate to 1000 connections per second, the message rate to 1000 messages per second per client, and the data rate to 1MB per second per client. These settings prevent overload and maintain system stability.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/rate-limit/rate-limit.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"listeners.tcp.default {\\n  bind = \\\"0.0.0.0:1883\\\"\\n  max_conn_rate = \\\"1000/s\\\"\\n  messages_rate = \\\"1000/s\\\"\\n  bytes_rate = \\\"1MB/s\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTT X\nDESCRIPTION: Bash command to publish a message to topic 't/1' using MQTT X, triggering an online/offline event.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello DynamoDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Status on macOS\nDESCRIPTION: Command to check the status of EMQX after installation on macOS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl status\n```\n\n----------------------------------------\n\nTITLE: Checking HAProxy Configuration\nDESCRIPTION: This command checks the syntax and validity of the HAProxy configuration file. It uses the `-c` flag to check the configuration and the `-f` flag to specify the configuration file path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n```\n\n----------------------------------------\n\nTITLE: Installing NanoMQ with QUIC Support\nDESCRIPTION: Commands for downloading, building and installing NanoMQ with QUIC support enabled. This is necessary for using NanoMQ as an MQTT over QUIC bridge.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/getting-started.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/nanomq.git\ncd nanomq ; git submodule update --init --recursive\n\nmkdir build && cd build\ncmake -G Ninja -DNNG_ENABLE_QUIC=ON ..\nsudo ninja install\n```\n\n----------------------------------------\n\nTITLE: Querying Datalayers to Verify Data Storage\nDESCRIPTION: SQL commands to select and view the data stored in Datalayers after processing by the EMQX rule and Sink.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nuse mqtt;\nselect * from devices;\n```\n\n----------------------------------------\n\nTITLE: Querying Couchbase Data using Docker and cbq\nDESCRIPTION: Bash command to execute a Couchbase query within a Docker container, retrieving data from the 'emqx_data' bucket.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-couchbase.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -t db /opt/couchbase/bin/cbq -u admin -p password -engine=http://127.0.0.1:8091/ -script \"SELECT * FROM emqx_data._default._default LIMIT 5;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in EMQX 4.4\nDESCRIPTION: Configuration for MongoDB authentication and authorization in EMQX 4.4, including server type, connection settings, query parameters, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_36\n\nLANGUAGE: properties\nCODE:\n```\nauth.mongo.type = single\nauth.mongo.srv_record = false\nauth.mongo.server = 127.0.0.1:27017\nauth.mongo.pool = 8\nauth.mongo.username = user\nauth.mongo.password = pass\nauth.mongo.auth_source = admin\nauth.mongo.database = mqtt\nauth.mongo.query_timeout = 5s\n\nauth.mongo.ssl = on\nauth.mongo.ssl.cacertfile = path/to/your/cafile.pem\nauth.mongo.ssl.certfile = path/to/your/certfile\nauth.mongo.ssl.keyfile = path/to/your/keyfile\nauth.mongo.ssl.verify = true\nauth.mongo.ssl.server_name_indication = mymongo\n\nauth.mongo.w_mode = unsafe\n\nauth.mongo.topology.pool_size = 1\nauth.mongo.topology.max_overflow = 0\n\n\nauth.mongo.acl_query.collection = mqtt_user\nauth.mongo.acl_query.selector = username=%u, clientid=%c\n```\n\n----------------------------------------\n\nTITLE: Forcibly Removing a Node from EMQX Cluster\nDESCRIPTION: This command forcibly removes a node from the EMQX cluster. It is typically used when a node has failed or is unresponsive.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/create-cluster.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n./bin/emqx ctl cluster force-leave emqx@s2.emqx.io\n```\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - License Connection Watermarks\nDESCRIPTION: Configuration settings for license connection watermark alarms in emqx.conf. High watermark triggers at 80% usage, low watermark clears at 75%.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\nlicense.connection_high_watermark_alarm\nlicense.connection_low_watermark_alarm\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Validation Rules in JSON\nDESCRIPTION: Example of multiple validation rules for password fields, combining length constraints and pattern matching for secure password requirements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": [\n    {\n      \"type\": \"length\",\n      \"minLength\": 8,\n      \"maxLength\": 128,\n      \"message\": \"$password_length_validate\"\n    },\n    {\n      \"type\": \"pattern\",\n      \"pattern\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]*$\",\n      \"message\": \"$password_validate\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Socket Buffer Sizes\nDESCRIPTION: This snippet sets the TCP socket read and write buffer sizes. Increasing buffer sizes can improve network throughput and reduce packet loss under high load.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.core.rmem_default=262144\nsysctl -w net.core.wmem_default=262144\nsysctl -w net.core.rmem_max=16777216\nsysctl -w net.core.wmem_max=16777216\nsysctl -w net.core.optmem_max=16777216\n    \n#sysctl -w net.ipv4.tcp_mem='16777216 16777216 16777216'\nsysctl -w net.ipv4.tcp_rmem='1024 4096 16777216'\nsysctl -w net.ipv4.tcp_wmem='1024 4096 16777216'\n```\n```\n\n----------------------------------------\n\nTITLE: Unhooking in EMQX (Erlang)\nDESCRIPTION: API for unhooking from EMQX. It takes the hook name and a tuple containing the module and function to unhook.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nemqx:unhook(Name, {Module, Function}).\n```\n\n----------------------------------------\n\nTITLE: JSON Data Manipulation Examples with jq in EMQX\nDESCRIPTION: Illustrates various ways to manipulate JSON data using jq, including accessing, transforming, and calculating values within JSON objects.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-jq.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\njq('.', '{\"temperature\": 10}') =\n[json_decode('{\"temperature\": 10}')]\n\njq('.', json_decode('{\"temperature\": 10}')) =\n[json_decode('{\"temperature\": 10}')]\n\njq('.temperature', '{\"temperature\": 10}') =\n[10]\n\njq('{temperature_C:.temperature,\n     temperature_F: (.temperature * 1.8 + 32)}',\n   '{\"temperature\": 10}') =\n[json_decode('{\"temperature_C\": 10, \"temperature_F\": 50}')]\n\njq('.temperature,(.temperature * 1.8 + 32)', '{\"temperature\": 10}') =\n[10, 50]\n```\n\n----------------------------------------\n\nTITLE: Running EMQX in Docker with volume mounts\nDESCRIPTION: Docker command to run EMQX container with volume mounts for data persistence. This may lead to permission issues if host directories are not properly configured.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --name emqx -p 18083:18083 -p 1883:1883 -v /emqx/data:/opt/emqx/data -v /emqx/log:/opt/emqx/log emqx:latest\n```\n\n----------------------------------------\n\nTITLE: Starting collectd\nDESCRIPTION: This snippet shows how to start the collectd service using systemctl. This assumes that collectd has been installed as a system service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start collectd\n```\n\n----------------------------------------\n\nTITLE: EMQX Data Persistence Directories\nDESCRIPTION: Critical directories that need to be persisted for EMQX data storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/opt/emqx/data\n/opt/emqx/log\n```\n\n----------------------------------------\n\nTITLE: Creating RocketMQ Directory Structure\nDESCRIPTION: Shell commands to create the required directory structure for RocketMQ configuration and storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-rocketmq.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir rocketmq\nmkdir rocketmq/logs\nmkdir rocketmq/store\nmkdir rocketmq/conf\n```\n\n----------------------------------------\n\nTITLE: Creating Streams in HStreamDB\nDESCRIPTION: These commands demonstrate how to enter the HStream container and create two streams named 'mqtt_connect' and 'mqtt_message' using the HStream CLI.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container exec -it quickstart-tcp-hserver bash\n# Create Stream `mqtt_connect`\nroot@9c7ce2f51860:/# hstream stream create mqtt_connect\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_connect | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n# Create Stream `mqtt_message`\nroot@9c7ce2f51860:/# hstream stream create mqtt_message\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_message | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n# List all Streams\nroot@9c7ce2f51860:/# hstream stream list\n+--------------+---------+----------------+-------------+\n| Stream Name  | Replica | Retention Time | Shard Count |\n+--------------+---------+----------------+-------------+\n| mqtt_message | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n| mqtt_connect | 1       | 604800 seconds | 1           |\n+--------------+---------+----------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX Package\nDESCRIPTION: Command to completely remove EMQX package and its configuration from the system using apt package manager.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt remove --purge emqx\n```\n\n----------------------------------------\n\nTITLE: Querying Client Connected Events in SQL\nDESCRIPTION: SQL query to retrieve details about successful client connections\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  keepalive,\n  is_bridge\nFROM\n  \"$events/client_connected\"\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table Structure in JSON\nDESCRIPTION: JSON configuration for creating a DynamoDB table named 'mqtt_msg' with device_id as hash key and timestamp as range key.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TableName\": \"mqtt_msg\",\n    \"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"device_id\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"timestamp\",\n            \"AttributeType\": \"N\"\n        }\n    ],\n    \"KeySchema\": [\n        {\n            \"AttributeName\": \"device_id\",\n            \"KeyType\": \"HASH\"\n        },\n        {\n            \"AttributeName\": \"timestamp\",\n            \"KeyType\": \"RANGE\"\n        }\n    ],\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 5,\n        \"WriteCapacityUnits\": 5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for MQTT-SN Gateway in Configuration File\nDESCRIPTION: Configuration file settings for HTTP-based authentication of MQTT-SN gateway with detailed authentication parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/mqttsn.md#2025-04-20_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ngateway.mqttsn {\n  authentication {\n    backend = \"http\"\n    mechanism = \"password_based\"\n    method = \"post\"\n    connect_timeout = \"5s\"\n    enable_pipelining = 100\n    url = \"http://127.0.0.1:8080\"\n    headers {\n      \"content-type\" = \"application/json\"\n    }\n    body {\n      clientid = \"${clientid}\"\n    }\n    pool_size = 8\n    request_timeout = \"5s\"\n    ssl.enable = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pulsar Topic\nDESCRIPTION: Command to create a partitioned topic in Pulsar with one partition under public tenant and default namespace\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it pulsar bin/pulsar-admin topics create-partitioned-topic persistent://public/default/my-topic -p 1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for OpenTelemetry and Jaeger\nDESCRIPTION: Docker Compose configuration to set up Jaeger and OpenTelemetry Collector services. It exposes the necessary ports for the Jaeger UI and the OpenTelemetry gRPC receiver.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/traces.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:1.51.0\n    restart: always\n    ports:\n      - \"16686:16686\"\n\n  otel-collector:\n    image: otel/opentelemetry-collector:0.90.0\n    restart: always\n    command: [\"--config=/etc/otel-collector-config.yaml\", \"${OTELCOL_ARGS}\"]\n    volumes:\n      - ./otel-trace-collector-config.yaml:/etc/otel-collector-config.yaml\n    ports:\n      - \"13133:13133\" # Health check extension\n      - \"4317:4317\"   # OTLP gRPC receiver\n    depends_on:\n      - jaeger\n```\n\n----------------------------------------\n\nTITLE: Test MQTT Message Payload\nDESCRIPTION: JSON payload used for testing the rule with temperature value and device ID\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"value\": \"37.6\",\n \"device_id\": \"root.sg27\"\n}\n```\n\n----------------------------------------\n\nTITLE: Flattened Node Configuration in HOCON Format\nDESCRIPTION: Alternative way to define node properties using flattened HOCON notation in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nnode.name = \"127.0.0.1\"\nnode.cookie = \"mysecret\"\nnode.cluster_call.retry_interval = \"1m\"\n```\n\n----------------------------------------\n\nTITLE: Kafka Dynamic Topic Template Configuration\nDESCRIPTION: Example showing Kafka topic template format using message context variables. Used to dynamically route messages to different Kafka topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"topic\": \"t-${t}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins via CLI Command in Bash\nDESCRIPTION: Command to install a compiled plugin package directly through the EMQX command-line interface, providing an alternative to Dashboard installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins install {pluginName}\n```\n\n----------------------------------------\n\nTITLE: Sample MQTT Message Payload\nDESCRIPTION: Example JSON payload for testing the IoTDB integration\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"index\": \"42\",\n    \"temp\": \"32.67\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX Plugin Permission Command\nDESCRIPTION: CLI command introduced in v5.8.6 that grants permission for plugin installation via REST API or Dashboard. This command must be executed before attempting to install plugins through these interfaces.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ce-5.8.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins allow NAME-VSN\n```\n\n----------------------------------------\n\nTITLE: MongoDB Sharded Cluster Configuration - HCL\nDESCRIPTION: Configuration for MongoDB sharded cluster deployment mode with multiple servers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/mongodb.md#2025-04-20_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  type = mongodb\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = sharded\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hostname Check Command\nDESCRIPTION: Command to view the system hostname that should be used in the Grafana dashboard configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/sys/kernel/hostname\n```\n\n----------------------------------------\n\nTITLE: Check EMQX Cluster Status\nDESCRIPTION: Command to verify the EMQX cluster status and running nodes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it emqx1 sh -c \"emqx ctl cluster status\"\n```\n\n----------------------------------------\n\nTITLE: Checking HAProxy Version\nDESCRIPTION: This command checks the installed version of HAProxy. It is used to verify that HAProxy has been installed successfully.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhaproxy -v\n```\n\n----------------------------------------\n\nTITLE: MongoDB Configuration Example - EMQX 5.1\nDESCRIPTION: Complete MongoDB configuration example for EMQX 5.1 showing new configuration structure\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_11\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = mongodb\n  enable = true\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\", clientid = \"${clientid}\" }\n  \n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"pass\"\n  \n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymongo\n  }\n  \n  topology {\n    pool_size = 1\n    max_overflow = 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Connection Event Rule SQL\nDESCRIPTION: SQL rule for recording client connection and disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  str(event) + timestamp as id, *\nFROM \n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: EMQX TCP Listener Configuration\nDESCRIPTION: Configuration example for modifying TCP listener port in emqx.conf. Note that changes to this configuration may not be reflected correctly in the Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.1.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlisteners.tcp.default {\n    bind = \"0.0.0.1884\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting MongoDB Authorization Rule for EMQX\nDESCRIPTION: This JavaScript snippet demonstrates how to insert an authorization rule into a MongoDB collection. The example creates a rule to deny a client with username 'emqx_u' from publishing to topic 't/1' with QoS 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/mongodb.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n> db.mqtt_acl.insertOne(\n  {\n      \"username\": \"emqx_u\",\n      \"clientid\": \"emqx_c\",\n      \"ipaddress\": \"127.0.0.1\",\n      \"permission\": \"deny\",\n      \"action\": \"publish\",\n      \"qos\": 1,\n      \"topics\": [\"t/1\"]\n  }\n);\n{\n  acknowledged: true,\n  insertedId: ObjectId(\"62b4a1a0e693ae0233bc3e98\")\n}\n```\n\n----------------------------------------\n\nTITLE: Start EMQX Cluster with Docker Compose\nDESCRIPTION: Command to start the EMQX cluster defined in docker-compose.yml\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: LocalStack Kinesis Record Retrieval and Decoding\nDESCRIPTION: Commands to retrieve records from LocalStack Kinesis stream and decode base64 encoded data\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nawslocal kinesis get-records --shard-iterator=\"AAAAAAAAAAG3YjBK9sp0uSIFGTPIYBI17bJ1RsqX4uJmRllBAZmFRnjq1kPLrgcyn7RVigmH+WsGciWpImxjXYLJhmqI2QO/DrlLfp6d1IyJFixg1s+MhtKoM6IOH0Tb2CPW9NwPYoT809x03n1zL8HbkXg7hpZjWXPmsEvkXjn4UCBf5dBerq7NLKS3RtAmOiXVN6skPpk=\"\n\necho 'eyAibXNnIjogImhlbGxvIEFtYXpvbiBLaW5lc2lzIiB9' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Deleting EMQX Exclusive Topic\nDESCRIPTION: Command to delete an exclusive topic in EMQX. This example demonstrates the deletion of the exclusive topic 't/1'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl exclusive delete t/1\nok\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Connection Tracking Parameters\nDESCRIPTION: This snippet configures the TCP connection tracking parameters, including the maximum number of tracked connections and the timeout for TIME_WAIT connections. These settings can impact the performance of NAT and firewall configurations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.nf_conntrack_max=1000000\nsysctl -w net.netfilter.nf_conntrack_max=1000000\nsysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=30\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy Status Monitoring Frontend\nDESCRIPTION: This configuration sets up a special frontend in HAProxy to enable status monitoring. It allows viewing connection status of backends, frontends, and global statistics through a web interface.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfrontend stats\n  mode http\n  bind *:8888\n  stats enable\n  stats uri /stats\n  stats refresh 10s\n```\n\n----------------------------------------\n\nTITLE: LwM2M Client Update Message Format in EMQX\nDESCRIPTION: This JSON structure shows the format of an Update message sent by an LwM2M client, converted to an MQTT message by the LwM2M Gateway. It includes updated client information such as endpoint name, version, lifetime, and changed object list.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msgType\": \"update\",\n  \"data\": {\n    \"objectList\": [\"/7/0\"],\n    \"lwm2m\": \"1.0\",\n    \"lt\": 300,\n    \"ep\": \"testlwm2mclient\",\n    \"b\": \"U\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake User and Setting RSA Public Key\nDESCRIPTION: SQL commands to create a new Snowflake user and set the RSA public key for authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE USER IF NOT EXISTS snowpipeuser\n    PASSWORD = 'Snowpipeuser99'\n    MUST_CHANGE_PASSWORD = FALSE;\n\nALTER USER snowpipeuser SET RSA_PUBLIC_KEY = '\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_1>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_2>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_3>\n<YOUR_PUBLIC_KEY_CONTENTS_LINE_4>\n';\n```\n\n----------------------------------------\n\nTITLE: Creating a combined certificate file for HAProxy\nDESCRIPTION: This command concatenates the server certificate and key into a single PEM file. This combined file is used by HAProxy to handle SSL/TLS connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncat server.crt server.key > server.pem\n```\n\n----------------------------------------\n\nTITLE: POST Request with JSON Body Configuration in HCL\nDESCRIPTION: Configuration example for POST requests with JSON body format. The example shows how placeholders in the URL and body are populated and formatted as JSON at runtime.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    method = post\n    url = \"http://127.0.0.1:8080/authz/${clientid}\"\n    body {\n        username = \"${username}\"\n        topic = \"${topic}\"\n        action = \"${action}\"\n    }\n    headers {\n        \"content-type\": \"application/json\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend Weighted Round Robin Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend using weighted round robin load balancing.  Each server is assigned a weight, influencing the proportion of requests it receives.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:1883 check weight 5\n  server emqx2 emqx2-cluster.emqx.io:1883 check weight 2\n  server emqx3 emqx3-cluster.emqx.io:1883 check weight 3\n```\n\n----------------------------------------\n\nTITLE: WebSocket Origin Validation Configuration\nDESCRIPTION: Controls origin header validation and allowed origins for WebSocket connections\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nws_opts.check_origin_enable: false\nws_opts.check_origins: [\"http://localhost:18083\", \"http://127.0.0.1:18083\"]\n```\n\n----------------------------------------\n\nTITLE: HStreamDB Record Template for Event Storage\nDESCRIPTION: SQL template for formatting client events before storing in HStreamDB\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n{\"clientid\": \"${clientid}\", \"event_type\": \"${event}\", \"event_time\": ${timestamp}}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the ExProto Server Example\nDESCRIPTION: This bash code clones the `emqx-extension-examples` repository from GitHub and then navigates into the `exproto-svr-python` directory. This sets up the environment for running the Python-based gRPC server example used to test the ExProto gateway.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqx-extension-examples\ncd exproto-svr-python\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message Payload in JSON Format\nDESCRIPTION: This JSON payload is used as a test message to verify the SysKeeper data bridge. It contains a simple key-value pair indicating the origin of the message.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/syskeeper.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"I am from the Security Zone I-II\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in EMQX\nDESCRIPTION: Configuration to add to the EMQX cluster.hocon file to enable OpenTelemetry log integration, specifying the collector endpoint and log level.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/logs.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry {\n  exporter {endpoint = \"http://localhost:4317\"}\n  logs {enable = true, level = warning}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for MQTT Client Pushback in EMQX 4.3.10\nDESCRIPTION: References a GitHub pull request that introduces pushback for MQTT clients in EMQX version 4.3.10.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6065](https://github.com/emqx/emqx/pull/6065)\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Client Certificate Chain\nDESCRIPTION: Configures the client certificate chain file with specific ordering requirements for certificates.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_20\n\nLANGUAGE: configuration\nCODE:\n```\nssl_client_opts.certfile = \"/path/to/client_certs.pem\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Database Type in EMQX 5.1\nDESCRIPTION: Simple configuration line to specify PostgreSQL as the database type for authentication or authorization in EMQX 5.1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_32\n\nLANGUAGE: properties\nCODE:\n```\ntype = postgresql\n```\n\n----------------------------------------\n\nTITLE: FreeTDS ODBC Driver Installation on Ubuntu\nDESCRIPTION: Commands for installing and configuring FreeTDS ODBC driver on Ubuntu 20.04\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install unixodbc unixodbc-dev tdsodbc freetds-bin freetds-common freetds-dev libdbd-odbc-perl liblocal-lib-perl\n$ vim /etc/odbcinst.ini\n```\n\n----------------------------------------\n\nTITLE: Listing MQTT Listeners with emqx ctl\nDESCRIPTION: Displays information about all configured MQTT listeners, including their type (ssl, tcp, ws, wss), listening address, connection counts, and status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners\nssl:default\n  listen_on       : 0.0.0.0:8883\n  acceptors       : 16\n  proxy_protocol  : false\n  running         : true\n  current_conn    : 0\n  max_conns       : 5000000\ntcp:default\n  listen_on       : 0.0.0.0:1883\n  acceptors       : 16\n  proxy_protocol  : false\n  running         : true\n  current_conn    : 12\n  max_conns       : 5000000\nws:default\n  listen_on       : 0.0.0.0:8083\n  acceptors       : 16\n  proxy_protocol  : false\n  running         : true\n  current_conn    : 0\n  max_conns       : 5000000\nwss:default\n  listen_on       : 0.0.0.0:8084\n  acceptors       : 16\n  proxy_protocol  : false\n  running         : true\n  current_conn    : 0\n  max_conns       : 5000000\n```\n\n----------------------------------------\n\nTITLE: Configuration path change for bridges in EMQX 5.6\nDESCRIPTION: Starting from EMQX 5.6, the 'bridges' config root is deprecated. Bridges are now implemented as either 'action' + 'connector' for egress data integration or 'source' + 'connector' for ingress data integration. The old config path and REST API endpoint still work but are considered deprecated.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ee-5.6.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nbridges\n```\n\n----------------------------------------\n\nTITLE: JSON 格式认证数据示例\nDESCRIPTION: 这个示例展示了用于导入 EMQX 认证系统的 JSON 格式文件。JSON 数据包含用户 ID、密码哈希值、盐值和超级用户标志，用于批量导入用户认证信息。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/user_management.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n      \"user_id\":\"myuser1\",\n      \"password_hash\":\"c5e46903df45e5dc096dc74657610dbee8deaacae656df88a1788f1847390242\",\n      \"salt\": \"e378187547bf2d6f0545a3f441aa4d8a\",\n      \"is_superuser\": true\n  },\n  {\n      \"user_id\":\"myuser2\",\n      \"password_hash\":\"f4d17f300b11e522fd33f497c11b126ef1ea5149c74d2220f9a16dc876d4567b\",\n      \"salt\": \"6d3f9bd5b54d94b98adbcfe10b6d181f\",\n      \"is_superuser\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from tar.gz Installation\nDESCRIPTION: This command starts EMQX in the foreground after installing from a tar.gz package.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian-ce.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: LocalStack Kinesis Shard Iterator Retrieval\nDESCRIPTION: AWS CLI command for getting a shard iterator from LocalStack Kinesis stream\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nawslocal kinesis get-shard-iterator --stream-name my_stream --shard-id shardId-000000000000 --shard-iterator-type LATEST\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Docker Container\nDESCRIPTION: Bash commands to start an Oracle Database docker container locally or remotely, with options for performance tuning and accessing the container.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To start the Oracle Database docker image locally\ndocker run --name oracledb -p 1521:1521 -d oracleinanutshell/oracle-xe-11g:1.0.0\n\n# To start the Oracle Database docker image remotely\ndocker run --name oracledb -p 1521:1521 -e ORACLE_ALLOW_REMOTE=true -d oracleinanutshell/oracle-xe-11g:1.0.0\n\n# For performance concern, you may want to disable the disk asynch IO:\ndocker run --name oracledb -p 1521:1521 -e ORACLE_DISABLE_ASYNCH_IO=true -d oracleinanutshell/oracle-xe-11g:1.0.0\n\n# Access the container\ndocker exec -it oracledb bash\n\n# Connect to the default database \"XE\"\n# username: \"system\"\n# password: \"oracle\"\nsqlplus\n```\n\n----------------------------------------\n\nTITLE: Defining Text Information Dispatch Structure in JSON\nDESCRIPTION: This snippet specifies the structure for a message dispatching text information, indicating a flag and the accompanying text message. It serves as a template for sending textual data to users or systems within the vehicle tracking context.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"flag\": VAL,\n    \"text\": VAL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Server Connector Log Entry\nDESCRIPTION: Sample log entry showing the connector state format before changes were made to remove verbose state information from logs\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\npid: <0.43914.0>, connector: connector:sqlserver:connector-05a2e105, reason: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Argument data type varchar is invalid for argument 2 of dateadd function. SQLSTATE IS: 42000, state: {\"resource_opts\":{\"start_timeout\":5000,\"start_after_created\":true,\"health_check_interval\":15000},\"pool_name\":\"connector:sqlserver:connector-05a2e105\",\"installed_channels\":{\"action:sqlserver:action-4b033621:connector:sqlserver:connector-05a2e105\":{\"sql_templates\":{\"batch_insert_temp\":{\"send_message\":{\"batch_insert_tks\":[\"{str,<<\\\" ( \\\">>}\",\"{var,[<<\\\"messageId\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"measurement\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_Fault_1\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_Fault_2\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_Fault_3\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_Fault_4\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_PV_1\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_PV_2\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_PV_3\\\">>]}\",\"{str,<<\\\", \\\">>}\",\"{var,[<<\\\"Analog_IN_PV_4\\\">>]}\",\"{str,<<\\\", DATEADD(MS, \\\">>}\",\"{var,[<<\\\"ms_shift\\\">>]}\",\"{str,<<\\\", DATEADD(S, \\\">>}\",\"{var,[<<\\\"s_shift\\\">>]}\",\"{str,<<\\\", '19700101 00:00:00:000') ))\\\">>}\"],\"batch_insert_part\":\"insert into TransactionLog(MessageId, Measurement, Fault1, Fault2, Fault3, Fault4, Value1, Value2, Value3, Value4, DateStamp) \\r\\n\"}}}}}},msg: invalid_request\n```\n\n----------------------------------------\n\nTITLE: Running Local DynamoDB Server with Docker\nDESCRIPTION: Docker command to run a local DynamoDB server instance with specified credentials and configuration\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name dynamodb-local \\\n  -e AWS_ACCESS_KEY_ID=root \\\n  -e AWS_SECRET_ACCESS_KEY=public \\\n  -e AWS_DEFAULT_REGION=us-west-2 \\\n  amazon/dynamodb-local:2.4.0\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Cluster Status\nDESCRIPTION: Command to check the status of the EMQX cluster using the emqx ctl utility.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-docker-ce.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it emqx1 sh -c \"emqx ctl cluster status\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Authentication Data Handling in Erlang\nDESCRIPTION: These fixes address issues with authentication data export/import and database storage in EMQX plugins.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_60\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx-management#314](https://github.com/emqx/emqx-management/pull/314)\nGithub PR: [emqx-auth-mnesia#54](https://github.com/emqx/emqx-auth-mnesia/pull/54)\n```\n\n----------------------------------------\n\nTITLE: Compression and Decompression Functions in EMQX Rule Engine\nDESCRIPTION: Functions for compressing and decompressing data using various algorithms like gzip and zip.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngunzip(hexstr2bin('1F8B0800000000000013CB48CDC9C9070086A6103605000000')) = 'hello'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(gzip('hello')) = '1F8B0800000000000013CB48CDC9C9070086A6103605000000'\n```\n\nLANGUAGE: bash\nCODE:\n```\nunzip(hexstr2bin('CB48CDC9C90700')) = 'hello'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip('hello')) = 'CB48CDC9C90700'\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin2hexstr(zip_compress('hello')) = '789CCB48CDC9C90700062C0215'\n```\n\nLANGUAGE: bash\nCODE:\n```\nzip_uncompress(hexstr2bin('789CCB48CDC9C90700062C0215')) = 'hello'\n```\n\n----------------------------------------\n\nTITLE: Setting Up IP Hash Load Balancing in HAProxy for EMQX\nDESCRIPTION: This snippet shows how to configure IP hash load balancing, which assigns requests from the same client IP to a fixed backend server. This ensures consistency for client connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance source\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: Multi-line String Configuration in HOCON\nDESCRIPTION: Configuration files now support multi-line string values, preserving indentation for enhanced readability. This improvement uses '\"\"\"~' and '~\"\"\"' markers to quote indented lines.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_23\n\nLANGUAGE: hocon\nCODE:\n```\nrule_xlu4 {\n  sql = \"\"\"~\n    SELECT\n      *\n    FROM\n      \"t/#\"\n  ~\"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Observe Response Payload in JSON for LwM2M\nDESCRIPTION: Defines the JSON payload format for Observe response in LwM2M. It includes request ID, message type, response code, and the observed resource's current value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": {?MsgType},\n  \"data\": {\n    \"reqPath\": {?RequestPath},\n    \"code\": {?ResponseCode},\n    \"codeMsg\": {?ResponseMsg},\n    \"content\": [\n      {\n        \"path\": {?ResourcePath},\n        \"value\": {?Value}\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Transfer Topic\nDESCRIPTION: The introduction of asynchronous file transfer capabilities using the `$file-async/...` topic allows clients to transfer files asynchronously. Clients can subscribe to the `$file-response/{clientId}` topic to receive the results of the command execution. This enhancement simplifies file transfer, especially for MQTT v3.1/v3.1.1 clients or those using MQTT bridging.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n`$file-async/...`\n```\n\nLANGUAGE: text\nCODE:\n```\n`$file-response/{clientId}`\n```\n\n----------------------------------------\n\nTITLE: HAProxy Frontend MQTT Configuration\nDESCRIPTION: This configuration sets up a HAProxy frontend for MQTT traffic. It binds to port 1883, operates in TCP mode, inspects MQTT packets, rejects invalid MQTT connections, and uses the mqtt_backend by default.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfrontend mqtt_servers\n  bind *:1883\n  mode tcp\n  # 等待缓冲区填满，以便解析 MQTT 报文\n  tcp-request inspect-delay 10s\n  # 拒绝非 MQTT 连接\n  tcp-request content reject unless { req.payload(0,0), mqtt_is_valid }\n  default_backend mqtt_backend\n```\n\n----------------------------------------\n\nTITLE: Installing collectd\nDESCRIPTION: This snippet demonstrates how to install collectd using yum. Collectd is used for collecting system metrics like CPU usage, memory usage, and network traffic.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyum install collectd -y\n```\n\n----------------------------------------\n\nTITLE: SQL Template for TDengine Message Insert\nDESCRIPTION: SQL template for inserting MQTT message data into TDengine table t_mqtt_msg\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) \n    VALUES (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Handle Limit via systemd\nDESCRIPTION: This snippet configures the default file handle limit for services managed by systemd by setting the `DefaultLimitNOFILE` parameter in `/etc/systemd/system.conf`. This ensures that services started by systemd, including EMQX, have the specified file handle limit.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nDefaultLimitNOFILE=1048576\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authentication in EMQX 4.4\nDESCRIPTION: Example configuration for MySQL authentication in EMQX 4.4. It includes server settings, authentication query, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_5\n\nLANGUAGE: hocon\nCODE:\n```\nauth.mysql.server = 127.0.0.1:3306\nauth.mysql.pool = 8\nauth.mysql.username = dbuser\nauth.mysql.database = mqtt\n\nauth.mysql.query_timeout = 5s\n\nauth.mysql.auth_query = select password_hash as password from mqtt where username = '%u' limit 1\nauth.mysql.super_query = select is_superuser from mqtt where username = '%u' limit 1\n\nauth.mysql.ssl = on\nauth.mysql.ssl.cacertfile = path/to/your/cafile.pem\nauth.mysql.ssl.certfile = path/to/your/certfile\nauth.mysql.ssl.keyfile = path/to/your/keyfile\nauth.mysql.ssl.verify = true\nauth.mysql.ssl.server_name_indication = mymysql\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Publishers\nDESCRIPTION: This command starts 20 publishers using `emqtt_bench`. It publishes to the topic 't' on the EMQX broker at IP address 192.168.0.99 at a rate of 10 messages per second. The `-c` flag specifies the number of clients, and the `-I` flag specifies the interval between messages in milliseconds.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench pub -t t -h 192.168.0.99 -c 20 -I 100\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository\nDESCRIPTION: This code snippet shows how to clone the EMQX usage example repository and navigate to the `mqtt-lb-haproxy` directory using `git clone` and `cd` commands. This is the first step in trying out the HAProxy load balancing example.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqx-usage-example\ncd emqx-usage-example/mqtt-lb-haproxy\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTTX\nDESCRIPTION: Command to publish a test message to topic 't/1' using MQTTX CLI\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/tablestore.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"table\": \"timeseries_demo_with_data\", \"measurement\": \"foo\", \"microsecond_timestamp\": 1734924039271024, \"column_name\": \"cc\", \"value\": 1}'\n```\n\n----------------------------------------\n\nTITLE: Configuration Example: EMQ Default Port\nDESCRIPTION: Example showing port configuration value with IPv6 address that caused error.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n::1:2000\n```\n\n----------------------------------------\n\nTITLE: Exporting EMQX Data Using CLI Command\nDESCRIPTION: Command line example showing how to export EMQX cluster data to a compressed tar file. The export includes cluster configuration, built-in database tables, and additional files from EMQX data directory.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/operations/backup-restore.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./emqx ctl data export\nExporting data to \"data/backup/emqx-export-2023-06-19-15-14-19.947.tar.gz\"...\nExporting cluster configuration...\nExporting additional files from EMQX data_dir: \"data\"...\nExporting built-in database...\nExporting emqx_admin database table...\nExporting emqx_authn_mnesia database table...\nExporting emqx_enhanced_authn_scram_mnesia database table...\nExporting emqx_app database table...\nExporting emqx_acl database table...\nExporting emqx_psk database table...\nExporting emqx_banned database table...\nData has been successfully exported to data/backup/emqx-export-2023-06-19-15-14-19.947.tar.gz.\n```\n\n----------------------------------------\n\nTITLE: Enhancing Health Checking for IoTDB Connector\nDESCRIPTION: This snippet explains the improvement in health checking for the IoTDB connector by utilizing the `ping` API, moving away from just socket connection verification. This change is targeted at improving reliability and monitoring.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Health check implementation\nfunction healthCheck() {\n  return fetch('http://iotdb/ping').then(res => res.ok);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Response JSON Format Example\nDESCRIPTION: Example of a properly formatted JSON response from an HTTP authentication server. The response includes authentication result, superuser status, optional client attributes, expiration time, and ACL rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/http.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": \"allow\", // \"allow\" | \"deny\" | \"ignore\"\n    \"is_superuser\": true, // options: true | false, default value: false\n    \"client_attrs\": { // optional (since v5.7.0)\n        \"role\": \"admin\",\n        \"sn\": \"10c61f1a1f47\"\n    }\n    \"expire_at\": 1654254601, // optional (since v5.8.0)\n    \"acl\": // optional (since v5.8.0)\n    [\n        {\n            \"permission\": \"allow\",\n            \"action\": \"subscribe\",\n            \"topic\": \"eq t/1/#\",\n            \"qos\": [1]\n        },\n        {\n            \"permission\": \"deny\",\n            \"action\": \"all\",\n            \"topic\": \"t/3\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Response Format in JSON\nDESCRIPTION: Example of a JSON response format for HTTP authorization in EMQX. The response includes a 'result' field that determines the authorization outcome.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/http.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": \"allow\" | \"deny\" | \"ignore\" // Default `\"ignore\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Complete Read Command Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Read command requesting the value of resource path /3/0/1, with request ID 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 1,\n  \"msgType\": \"read\",\n  \"data\": {\n    \"path\": \"/3/0/1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Plugin Installation via CLI Command in Bash\nDESCRIPTION: Command to revoke permission for plugin installation through the Dashboard, used when uninstalling plugins or for explicitly disallowing previously permitted plugins.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins disallow $NAME-$VSN\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX via Apt\nDESCRIPTION: This command installs EMQX using the apt package manager on Debian systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install emqx\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with MQTTX for Testing\nDESCRIPTION: Bash command to publish a test message to topic 't/1' using MQTTX, which triggers an online/offline event for testing the configured rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello Oracle Database\" }'\n```\n\n----------------------------------------\n\nTITLE: Starting GreptimeDB Docker Container\nDESCRIPTION: Docker command to start a GreptimeDB container with configured ports, volume mounting, and user authentication settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4000-4004:4000-4004 \\\n-p 4242:4242 -v \"$(pwd)/greptimedb:/tmp/greptimedb\" \\\n--name greptime --rm \\\ngreptime/greptimedb standalone start \\\n--http-addr 0.0.0.0:4000 \\\n--rpc-addr 0.0.0.0:4001 \\\n--mysql-addr 0.0.0.0:4002 \\\n--user-provider=static_user_provider:cmd:greptime_user=greptime_pwd\n```\n\n----------------------------------------\n\nTITLE: Redis Command Formatting Example\nDESCRIPTION: Redis command parsing improvement aligned with redis-cli compatibility standards, supporting quoted arguments for authentication and authorization processes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_35\n\nLANGUAGE: redis\nCODE:\n```\n$file-async/... \\n$file-response/{clientId}\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Subscribe Command\nDESCRIPTION: Example command to start 500 connections subscribing to topic 't' with QoS 0.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emqtt_bench sub -t t -h emqx-server -c 500\n```\n\n----------------------------------------\n\nTITLE: Starting Datalayers Container with Docker\nDESCRIPTION: Command to start a Datalayers container using Docker, exposing ports 8360 and 8361.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name datalayers -p 8360:8360 -p 8361:8361 datalayers/datalayers:latest\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Memory Usage Calculation Fix in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that fixes incorrect calculation of memory usage in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4891](https://github.com/emqx/emqx/pull/4891)\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration in EMQX Configuration File\nDESCRIPTION: Example of authentication configuration in EMQX's configuration file, showing how to set up authentication chains for MQTT listeners globally and for specific listeners, as well as for gateways.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/authn.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# emqx.conf\n\n# Specific global authentication chain for all MQTT listeners\nauthentication = [\n  ...\n]\n\nlisteners.tcp.default {\n  ...\n  enable_authn = true\n  # Specific authentication chain for the specified MQTT listener\n  authentication = [\n    ...\n  ]\n}\n\ngateway.stomp {\n  ...\n  enable_authn = true\n  # Specific global authenticator for all STOMP listeners\n  authentication = {\n    ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend IP Hash Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend using IP hash load balancing. Requests from the same client IP address are always directed to the same server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance source\n  server emqx1 emqx1-cluster.emqx.io:1883\n  server emqx2 emqx2-cluster.emqx.io:1883\n  server emqx3 emqx3-cluster.emqx.io:1883\n```\n\n----------------------------------------\n\nTITLE: Starting Secondary Node in Pseudo-Distributed EMQX Cluster\nDESCRIPTION: Command to start a second EMQX node with adjusted ports and join it to an existing cluster for testing purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/mria-introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMQX_NODE__NAME='emqx2@127.0.0.1' \\\n    EMQX_LOG__FILE_HANDLERS__DEFAULT__FILE='log2/emqx.log' \\\n    EMQX_STATSD__SERVER='127.0.0.1:8124' \\\n    EMQX_LISTENERS__TCP__DEFAULT__BIND='0.0.0.0:1882' \\\n    EMQX_LISTENERS__SSL__DEFAULT__BIND='0.0.0.0:8882' \\\n    EMQX_LISTENERS__WS__DEFAULT__BIND='0.0.0.0:8082' \\\n    EMQX_LISTENERS__WSS__DEFAULT__BIND='0.0.0.0:8085' \\\n    EMQX_DASHBOARD__LISTENERS__HTTP__BIND='0.0.0.0:18082' \\\n    EMQX_NODE__DATA_DIR=\"./data2\" \\\n./bin/emqx start\n\n./bin/emqx ctl cluster join emqx1@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector in YAML\nDESCRIPTION: YAML configuration file for OpenTelemetry Collector that sets up receivers, exporters, processors, and extensions to collect and redirect logs to stdout using the debug exporter.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/logs.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nexporters:\n  logging:\n    verbosity: detailed\n\nprocessors:\n  batch:\n\nextensions:\n  health_check:\n\nservice:\n  extensions: [health_check]\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [logging]\n```\n\n----------------------------------------\n\nTITLE: LwM2M Gateway Plugin Error Log Example\nDESCRIPTION: Example error log showing the LwM2M gateway plugin startup failure when the module was shut down before plugin start.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n{emqx_lwm2m,{bad_return,{{emqx_lwm2m_app,start,[normal,[]]},{'EXIT',{{already_started,<0.3895.177>},[...]}}}}}\n```\n\n----------------------------------------\n\nTITLE: Running Apache IoTDB Docker Container\nDESCRIPTION: Docker command to start an Apache IoTDB server instance with REST service enabled and necessary configuration parameters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name iotdb-service \\\n              --hostname iotdb-service \\\n              -p 6667:6667 \\\n              -p 18080:18080 \\\n              -e enable_rest_service=true \\\n              -e cn_internal_address=iotdb-service \\\n              -e cn_target_config_node_list=iotdb-service:10710 \\\n              -e cn_internal_port=10710 \\\n              -e cn_consensus_port=10720 \\\n              -e dn_rpc_address=iotdb-service \\\n              -e dn_internal_address=iotdb-service \\\n              -e dn_target_config_node_list=iotdb-service:10710 \\\n              -e dn_mpp_data_exchange_port=10740 \\\n              -e dn_schema_region_consensus_port=10750 \\\n              -e dn_data_region_consensus_port=10760 \\\n              -e dn_rpc_port=6667 \\\n              apache/iotdb:1.1.0-standalone\n```\n\n----------------------------------------\n\nTITLE: Converting Any Term to String in EMQX\nDESCRIPTION: The str function converts any data type to a string. It encodes maps and arrays as JSON, and converts floats with truncated trailing zeros and up to 10 decimal places. For more decimal precision, the float2str function should be used instead.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstr(100) = '100'\nstr(nth(1, json_decode('[false]'))) = 'false'\nstr(json_decode({\"msg\": \"hello\"})) = '{\"msg\":\"hello\"}'\nstr(json_decode('[{\"msg\": \"hello\"}]')) = '[{\"msg\":\"hello\"}]'\n\n# Trailing zeros are truncated\n# Up to 10 digits are preserved past the decimal point\nstr(0.30000000040) = '0.3000000004'\nstr(0.30000000004) = '0.3'\n\n# Rounded to 10 digits after the decimal\n# Rounded after the 10th digit\nstr(3.14159265359) = '3.1415926536'\nstr(0.000000314159265359) = '0.0000003142'\n```\n\n----------------------------------------\n\nTITLE: Defining Command Response Payload Structure for LwM2M Communication\nDESCRIPTION: JSON payload format for LwM2M command responses. Includes the original request ID, message type, and response data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": {?MsgType},\n  \"data\": {?Data}\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Key Format with Role\nDESCRIPTION: The format of the REST API key bootstrap file has been optimized to support the initialization of keys with roles. The new format is `api_key:api_secret:role`, where `role` is optional and defaults to `administrator` if not specified. This provides more granular access control when initializing API keys.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n`api_key:api_secret:role`\n```\n\n----------------------------------------\n\nTITLE: Standalone Redis Authorization Configuration\nDESCRIPTION: Complete configuration block for setting up Redis authorizer in standalone mode with all connection parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/redis.md#2025-04-20_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    type = redis\n\n    redis_type = single\n    server = \"127.0.0.1:6379\"\n\n    cmd = \"HGETALL mqtt_user:${username}\"\n    database = 1\n    password = public\n    server = \"127.0.0.1:6379\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Location Information Response Structure in JSON\nDESCRIPTION: This snippet defines the JSON structure for the response to a location information query, including fields for sequence number and parameters of the location information report. This response enables the tracking system to format and return relevant data appropriately.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"seq\": VAL,\n    \"params\": {\n      // location information report details\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Single-Level Wildcard Example\nDESCRIPTION: This example demonstrates the usage of the single-level wildcard '+' in MQTT topic filters. The '+' wildcard matches exactly one level in the topic hierarchy. The code shows valid and invalid examples of its usage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"+ \" 有效\n\"sensor/+\" 有效\n\"sensor/+/temperature\" 有效\n\"sensor+\" 无效 (没有占据整个层级)\n```\n\n----------------------------------------\n\nTITLE: Installing InfluxDB 1.8 on CentOS/RHEL\nDESCRIPTION: Commands to download and install InfluxDB 1.8.10 on Server 2. This version is specifically chosen because it directly supports the collectd write protocol.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwget https://dl.influxdata.com/influxdb/releases/influxdb-1.8.10.x86_64.rpm\nsudo yum localinstall influxdb-1.8.10.x86_64.rpm -y\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana\nDESCRIPTION: This snippet shows how to start the Grafana service using systemctl. This assumes that Grafana has been installed as a system service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start grafana-server\n```\n\n----------------------------------------\n\nTITLE: Performing Non-Permanent EMQX Hot Upgrade\nDESCRIPTION: This command performs a hot upgrade without making it permanent, allowing for easy rollback if needed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx upgrade --no-permanent 5.0.1\n\nRelease 5.0.1 not found, attempting to unpack releases/emqx-5.0.1.tar.gz\nUnpacked successfully: \"5.0.1\"\nInstalled Release: 5.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - ACL Order Definition\nDESCRIPTION: Example configuration showing how to define deterministic order for ACL checks using the new acl_order parameter.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\nacl_order = jwt,http\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring MongoDB via Docker\nDESCRIPTION: Commands to install MongoDB using Docker, run the container, and create an admin user. This setup is required before creating the MongoDB data integration in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#  To start the MongoDB docker image and set the password as public\ndocker run -d --name mongodb -p 27017:27017 mongo\n\n# Access the container\ndocker exec -it mongodb bash\n\n# Locate the MongoDB server in the container (use `mongo` with 4.x versions)\nmongosh\n\n# Create a user\nuse admin\ndb.createUser({ user: \"admin\", pwd: \"public\", roles: [ { role: \"root\", db: \"admin\" } ] })\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX as a Systemd Service on Ubuntu\nDESCRIPTION: This command starts EMQX as a systemd service. It requires sudo privileges to run and assumes EMQX is installed as a system service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu-ce.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Starting the Example with Docker Compose\nDESCRIPTION: This code snippet demonstrates how to start the HAProxy and EMQX cluster example using Docker Compose. The `docker compose up -d` command starts the services defined in the `docker-compose.yml` file in detached mode.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Cloning EMQX Usage Examples Repository\nDESCRIPTION: Commands to clone the example repository and navigate to the MQTT load balancing with NGINX directory\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqx-usage-example\ncd emqx-usage-example/mqtt-lb-nginx\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Scan Result JSON\nDESCRIPTION: JSON output from the DynamoDB scan, showing stored MQTT messages and client connection events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Items\": [\n        {\n            \"metadata\": {\n                \"S\": \"{\\\"rule_id\\\":\\\"90d98f59\\\"}\"\n            },\n            \"peerhost\": {\n                \"S\": \"127.0.0.1\"\n            },\n            \"clientid\": {\n                \"S\": \"emqx_c\"\n            },\n            \"flags\": {\n                \"S\": \"{\\\"retain\\\":false,\\\"dup\\\":false}\"\n            },\n            \"node\": {\n                \"S\": \"emqx@127.0.0.1\"\n            },\n            \"qos\": {\n                \"N\": \"0\"\n            },\n            \"payload\": {\n                \"S\": \"{ \\\"msg\\\": \\\"hello DynamoDB\\\" }\"\n            },\n            \"pub_props\": {\n                \"S\": \"{\\\"User-Property\\\":{}}\"\n            },\n            \"publish_received_at\": {\n                \"N\": \"1678263363503\"\n            },\n            \"topic\": {\n                \"S\": \"t/1\"\n            },\n            \"id\": {\n                \"S\": \"0005F65F239F03FEF44300000BB40002\"\n            },\n            \"event\": {\n                \"S\": \"message.publish\"\n            },\n            \"username\": {\n                \"S\": \"undefined\"\n            },\n            \"timestamp\": {\n                \"N\": \"1678263363503\"\n            }\n        },\n        {\n            \"conn_props\": {\n                \"S\": \"{\\\"User-Property\\\":{},\\\"Request-Problem-Information\\\":1}\"\n            },\n            \"peername\": {\n                \"S\": \"127.0.0.1:59582\"\n            },\n            \"metadata\": {\n                \"S\": \"{\\\"rule_id\\\":\\\"703890a5\\\"}\"\n            },\n            \"clientid\": {\n                \"S\": \"emqx_c\"\n            },\n            \"is_bridge\": {\n                \"S\": \"false\"\n            },\n            \"keepalive\": {\n                \"N\": \"30\"\n            },\n            \"proto_ver\": {\n                \"N\": \"5\"\n            },\n            \"proto_name\": {\n                \"S\": \"MQTT\"\n            },\n            \"connected_at\": {\n                \"N\": \"1678263363499\"\n            },\n            \"receive_maximum\": {\n                \"N\": \"32\"\n            },\n            \"sockname\": {\n                \"S\": \"127.0.0.1:1883\"\n            },\n            \"mountpoint\": {\n                \"S\": \"undefined\"\n            },\n            \"node\": {\n                \"S\": \"emqx@127.0.0.1\"\n            },\n            \"id\": {\n                \"S\": \"client.connected1678263363499\"\n            },\n            \"expiry_interval\": {\n                \"N\": \"0\"\n            },\n            \"event\": {\n                \"S\": \"client.connected\"\n            },\n            \"username\": {\n                \"S\": \"undefined\"\n            },\n            \"timestamp\": {\n                \"N\": \"1678263363499\"\n            },\n            \"clean_start\": {\n                \"S\": \"true\"\n            }\n        },\n        {\n            \"reason\": {\n                \"S\": \"normal\"\n            },\n            \"peername\": {\n                \"S\": \"127.0.0.1:59582\"\n            },\n            \"metadata\": {\n                \"S\": \"{\\\"rule_id\\\":\\\"703890a5\\\"}\"\n            },\n            \"clientid\": {\n                \"S\": \"emqx_c\"\n            },\n            \"proto_ver\": {\n                \"N\": \"5\"\n            },\n            \"proto_name\": {\n                \"S\": \"MQTT\"\n            },\n            \"sockname\": {\n                \"S\": \"127.0.0.1:1883\"\n            },\n            \"disconn_props\": {\n                \"S\": \"{\\\"User-Property\\\":{}}\"\n            },\n            \"node\": {\n                \"S\": \"emqx@127.0.0.1\"\n            },\n            \"id\": {\n                \"S\": \"client.disconnected1678263363503\"\n            },\n            \"event\": {\n                \"S\": \"client.disconnected\"\n            },\n            \"disconnected_at\": {\n                \"N\": \"1678263363503\"\n            },\n            \"username\": {\n                \"S\": \"undefined\"\n            },\n            \"timestamp\": {\n                \"N\": \"1678263363503\"\n            }\n        }\n    ],\n    \"Count\": 3,\n    \"ScannedCount\": 3,\n    \"ConsumedCapacity\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine with Docker\nDESCRIPTION: Docker commands to start a TDengine container and connect to it\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-tdengine.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 启动一个 TDengine 容器\ndocker run --name TDengine -p 6041:6041 tdengine/tdengine\n\n# 进入容器\ndocker exec -it TDengine bash\n\n# 在容器中连接到 TDengine 服务器\ntaos\n\n# 创建并选择数据库\nCREATE DATABASE mqtt;\n\nuse mqtt;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Conflict Handling in Batch Mode\nDESCRIPTION: SQL query template for PostgreSQL batch insertions with ON CONFLICT DO NOTHING handling to avoid duplicate entries\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(msgid, topic, qos, payload, arrived) VALUES (${id}, ${topic}, ${qos}, ${payload}, to_timestamp(${timestamp}::double precision /1000)) ON CONFLICT DO NOTHING\n```\n\n----------------------------------------\n\nTITLE: Managing Confluent Cloud Kafka Clusters\nDESCRIPTION: Commands to list and select Kafka clusters in Confluent Cloud using the CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# list kafka cluster\nconfluent kafka cluster list\n# use kafka\nconfluent kafka cluster use <kafka_cluster_id>\n```\n\n----------------------------------------\n\nTITLE: EMQX 5.1 MongoDB Configuration\nDESCRIPTION: Updated MongoDB authentication configuration for EMQX 5.1 with new structure and parameters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nauthentication {\n  mechanism = password_based\n  backend = mongodb\n  enable = true\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = prefix\n  }\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\", clientid = \"${clientid}\" }\n  \n  password_hash_field = \"password_hash\"\n  salt_field = \"salt\"\n  is_superuser_field = \"is_superuser\"\n\n  mongo_type = single\n  server = \"127.0.0.1:27017\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"pass\"\n  \n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mymongo\n  }\n  \n  topology {\n    pool_size = 1\n    max_overflow = 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Sites in EMQX Durable Storage\nDESCRIPTION: Command to perform a series of changes to the set of sites holding durable storage replicas in a single operation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds set_replicas messages <Site ID 1> <Site ID 2> ...\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for LwM2M Gateway Integer Coding Fix in EMQX 4.3.7\nDESCRIPTION: References a GitHub pull request that fixes an issue of coding error when LwM2M gateway sends integer numbers in EMQX version 4.3.7.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5425](https://github.com/emqx/emqx/pull/5425)\n```\n\n----------------------------------------\n\nTITLE: Fetching Prometheus Metrics via curl\nDESCRIPTION: This snippet demonstrates how to fetch Prometheus metrics using curl in EMQX 5.x. It shows the command to retrieve stats from the Prometheus API endpoint.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-from-v4.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"http://127.0.0.1:18083/api/v5/prometheus/stats\"\n```\n\n----------------------------------------\n\nTITLE: Example EMQX Log Message\nDESCRIPTION: Shows a complete example of an authorization warning log message with all relevant fields populated.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n2024-03-20T11:08:39.568980+01:00 [warning] tag: AUTHZ, clientid: client1, msg: cannot_publish_to_topic_due_to_not_authorized, peername: 127.0.0.1:47860, username: user1, topic: republish-event/1, reason: not_authorized\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Unix Timestamps\nDESCRIPTION: Examples of converting date strings to Unix timestamps with different time units and formats\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndate_to_unix_ts('second', '%Y-%m-%d %H:%M:%S%:z', '2024-02-23 15:00:00+08:00') = 1708671600\n```\n\n----------------------------------------\n\nTITLE: Log Throttling Configuration\nDESCRIPTION: Configuration example for setting up log throttling time window in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nlog {\n  throttling {\n    time_window = \"5m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Configuration File Example (slapd.conf)\nDESCRIPTION: This shell script snippet shows an example of an OpenLDAP configuration file (slapd.conf) that includes the necessary schema files and database settings for MQTT authorization.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/ldap.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ninclude         /usr/local/etc/openldap/schema/core.schema\ninclude         /usr/local/etc/openldap/schema/cosine.schema\ninclude         /usr/local/etc/openldap/schema/inetorgperson.schema\ninclude         /usr/local/etc/openldap/schema/emqx.schema\n\nTLSCACertificateFile  /usr/local/etc/openldap/cacert.pem\nTLSCertificateFile    /usr/local/etc/openldap/cert.pem\nTLSCertificateKeyFile /usr/local/etc/openldap/key.pem\n\ndatabase mdb\nsuffix \"dc=emqx,dc=io\"\nrootdn \"cn=root,dc=emqx,dc=io\"\nrootpw {SSHA}eoF7NhNrejVYYyGHqnt+MdKNBh4r1w3W\n\ndirectory       /usr/local/etc/openldap/data\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic on EMQX Node with MQTTX CLI\nDESCRIPTION: Command to subscribe to a topic 't/1' on an EMQX node at IP address 172.19.0.2 using MQTTX CLI. This is used to demonstrate distributed tracing functionality across nodes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t t/1 -h 172.19.0.2 -p 1883\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Topic in Confluent Cloud\nDESCRIPTION: Command to create a new Kafka topic named 'testtopic-in' in Confluent Cloud.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic create testtopic-in\n```\n\n----------------------------------------\n\nTITLE: 配置 EMQX 网络分区自动修复\nDESCRIPTION: 在 EMQX 配置文件中启用网络分区自动修复功能。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/introduction.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster.autoheal = on\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for HTTP Authentication and Webhook Query String Support in EMQX 4.3.4\nDESCRIPTION: References a GitHub pull request that adds support for Query String in HTTP authentication and Webhook in EMQX version 4.3.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4981](https://github.com/emqx/emqx/pull/4981)\n```\n\n----------------------------------------\n\nTITLE: Access Array Elements\nDESCRIPTION: This SQL query creates an array [1, 2, 3] and assigns it to the variable 'a'. It then accesses the second element (index 2) and assigns it to 'b', and accesses the second element from the end (index -2) and assigns it to 'c'. This showcases how to access array elements using both positive and negative indices.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  [1,2,3] as a,\n  a[2] as b,\n  a[-2] as c\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Report Structure in JSON\nDESCRIPTION: This snippet defines the JSON structure for reporting an event, containing a field for the event ID. This framework allows the system to relay information on specific events back to the central service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"id\": VAL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Retained Message with MQTTX CLI\nDESCRIPTION: Shows how to clear a retained message by publishing an empty payload with retain flag set to true\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/explore-mqtt.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m '' --retain true -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana on CentOS/RHEL\nDESCRIPTION: Command to install Grafana 10.0.0 on Server 2. Grafana will be used to visualize the performance metrics stored in InfluxDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y https://dl.grafana.com/oss/release/grafana-10.0.0-1.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: EMQ Dashboard Default User Configuration\nDESCRIPTION: Configuration options for setting default admin login credentials in EMQ dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\ndashboard.default_user.login\ndashboard.default_user.password\n```\n\n----------------------------------------\n\nTITLE: 配置 EMQX 企业版 License\nDESCRIPTION: 在 EMQX 企业版的 emqx.conf 配置文件中添加 License 配置。注意，这种方式的配置优先级最高，会覆盖通过其他方式设置的 License。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/rolling-upgrades.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlicense.key = \"你的 license\"\n```\n\n----------------------------------------\n\nTITLE: LwM2M Command Request Payload Format\nDESCRIPTION: This code illustrates the JSON format for sending commands to LwM2M clients through MQTT. The payload includes a request ID, message type, and data.  The data field varies based on the specific command being sent.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": {?ReqID},\n  \"msgType\": {?MsgType},\n  \"data\": {?Data}\n}\n```\n\n----------------------------------------\n\nTITLE: Running EMQX Enterprise Docker Container\nDESCRIPTION: Docker command to download and run the latest EMQX Enterprise container, exposing standard MQTT ports.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx-enterprise:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter for TCP Listener in EMQX\nDESCRIPTION: This code snippet demonstrates how to configure rate limiters for the default TCP listener in EMQX. It sets limits for connection rate, message publishing rate, and data transfer rate.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/limiter.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlisteners.tcp.default {\n  bind = \"0.0.0.0:1883\"\n  max_conn_rate = \"1000/s\"\n  messages_rate = \"1000/s\"\n  bytes_rate = \"1MB/s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Trace Span Overload in EMQX\nDESCRIPTION: This configuration snippet shows how to configure the `max_queue_size` and `scheduled_delay` parameters in EMQX for managing trace span overload.  It explains how to increase the `max_queue_size` and decrease `scheduled_delay` to avoid losing trace spans due to overload, while also noting the potential impact on system resources.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nopentelemetry {\n  traces {\n    max_queue_size = 50000\n    scheduled_delay = 1000\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring Discover Request Data for LwM2M Operations\nDESCRIPTION: JSON structure for the data field in Discover operations. Contains a path field specifying the resource path to discover attributes for.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": {?ResourcePath}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Select Component Options in JSON\nDESCRIPTION: Example showing how to configure options for a select dropdown component in the declarative UI, supporting internationalized labels.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"$mysql\",\n    \"value\": \"MySQL\"\n  },\n  {\n    \"label\": \"$pgsql\",\n    \"value\": \"postgreSQL\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting HAProxy\nDESCRIPTION: This command starts the HAProxy service using `systemctl`, the systemd service manager. It requires `sudo` privileges to manage system services.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start haproxy\n```\n\n----------------------------------------\n\nTITLE: MQTTX Publish Command for US East Cluster\nDESCRIPTION: Command to publish a message from the US East cluster using MQTTX CLI\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -h emqx.us-east.myinfra.net --topic linked/1 --message \"Hello from US!\"\n```\n\n----------------------------------------\n\nTITLE: Forcefully Removing Node from EMQX Cluster\nDESCRIPTION: Command to forcefully remove a specified node from the EMQX cluster. This example shows a failed attempt when the specified node is not part of the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl cluster force-leave emqx2@127.0.0.1\nFailed to remove the node from cluster: node_not_in_cluster\n```\n\n----------------------------------------\n\nTITLE: Setting Default Max Topic Levels in EMQX Enterprise 4.2.10\nDESCRIPTION: Changed default value of max_topic_levels configuration to 128 to mitigate potential DoS threats. Previously this had no limit (set to 0).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_26\n\nLANGUAGE: Erlang\nCODE:\n```\nmax_topic_levels = 128\n```\n\n----------------------------------------\n\nTITLE: Authentication Result in EMQX ExHook (Erlang)\nDESCRIPTION: Shows an example authentication result returned by the ExHook service, allowing login and setting the client as a superuser.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% AuthNResult\n{ok, #{is_superuser => true}}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL File in EMQX 4.3\nDESCRIPTION: This snippet shows the ACL file configuration for EMQX 4.3. It defines rules for allowing and denying access to specific topics based on user, IP address, and global settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n{allow, {user, \"dashboard\"}, subscribe, [\"$SYS/#\"]}.\n\n{allow, {ipaddr, \"127.0.0.1\"}, pubsub, [\"$SYS/#\", \"#\"]}.\n\n{deny, all, subscribe, [\"$SYS/#\", {eq, \"#\"}]}.\n\n{allow, all}.\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX using Homebrew\nDESCRIPTION: This command uses Homebrew to install EMQX on macOS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-macOS-ce.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install emqx\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Exhook Enhancements in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that adds automatic reconnection mechanism and related configuration items for request timeout for exhook to enhance reliability in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5447](https://github.com/emqx/emqx/pull/5447)\n```\n\n----------------------------------------\n\nTITLE: Message Acknowledged Event Output\nDESCRIPTION: Example JSON output showing the structure and content of message acknowledged event data including topic, timestamp, QoS, node, and publisher details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"timestamp\": 1645002965664,\n  \"qos\": 1,\n  \"node\": \"emqx@127.0.0.1\",\n  \"from_username\": \"u_emqx_1\",\n  \"from_clientid\": \"c_emqx_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting User Credentials in PostgreSQL\nDESCRIPTION: Example of inserting a superuser with hashed password and salt into the PostgreSQL database.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/postgresql.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINSERT INTO mqtt_user(username, password_hash, salt, is_superuser) VALUES ('user123', 'bede90386d450cea8b77b822f8887065e4e5abf132c2f9dccfcc7fbd4cba5e35', 'salt', true);\nINSERT 0 1\n```\n\n----------------------------------------\n\nTITLE: String Unescape Function Usage in SQL\nDESCRIPTION: Example of using the unescape function in SQL queries to properly handle escape sequences in string processing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT split(payload, unescape('\\n')) as device_info FROM 't/#'\n```\n\n----------------------------------------\n\nTITLE: Structuring Read Response Data for LwM2M Operations\nDESCRIPTION: JSON structure for the response data field in Read operations. Contains the requested path, response code, message, and content with resource values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqPath\": {?ResourcePath},\n  \"code\": {?ResponseCode},\n  \"codeMsg\": {?ResponseMsg},\n  \"content\": {?ReadResponseData}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Rule Engine Resource Release Fix in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes an issue where resources cannot be released after the rule engine disables rules in a cluster in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5731](https://github.com/emqx/emqx/pull/5731)\n```\n\n----------------------------------------\n\nTITLE: Node Metric Mode Parameter\nDESCRIPTION: URL parameter for getting metrics from a single node in pull mode\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/prometheus.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmode=node\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation Syntax Example in Authentication Configuration\nDESCRIPTION: Comparison between 4.x and 5.x syntax for variable interpolation in MySQL authentication configuration. In 5.x, the placeholder syntax changed from '%u' to '${username}'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# 4.x\n# etc/emqx_auth_mysql.conf\nauth.mysql.auth_query = select password from mqtt_user where username = '%u' limit 1\n\n# 5.x\n# emqx.conf\nauthentication = [\n  {\n    ...\n    mechanism = \"password_based\"\n    backend = \"mysql\"\n    query = \"SELECT password_hash, salt FROM mqtt_user where username = ${username} LIMIT 1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Loading EMQX Lua Hook Plugin via Command Line\nDESCRIPTION: Command to load the emqx_lua_hook plugin into EMQX broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/lang-lua.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins load emqx_lua_hook\n```\n\n----------------------------------------\n\nTITLE: Select a Field with WHERE Clause\nDESCRIPTION: This SQL query selects the 'username' field from messages originating from any topic ('#'), filtering for messages where 'username' is equal to 'Steven'. It shows how to filter messages based on the content of a field.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM \"#\" WHERE username='Steven'\n```\n\n----------------------------------------\n\nTITLE: Specifying MQTT Message Expiry Time\nDESCRIPTION: This snippet addresses the feature allowing users to specify the expiration time for MQTT messages via a configuration file, enhancing the control over message lifetimes in the EMQX system.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_33\n\nLANGUAGE: HOCON\nCODE:\n```\nmessage_expiry_interval = 3600\n```\n\n----------------------------------------\n\nTITLE: Improved Binary Data Representation in Erlang VM\nDESCRIPTION: Demonstrates the enhanced readability of binary data in messages after updating the virtual machine to use Unicode for its printable range.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n<<116,101,115,116,228,184,173,230,150,135>>\n```\n\nLANGUAGE: erlang\nCODE:\n```\n<<\"test中文\"/utf8>>\n```\n\n----------------------------------------\n\nTITLE: Testing Retained Messages with MQTTX CLI\nDESCRIPTION: Commands for testing MQTT retained message functionality using MQTTX CLI. Demonstrates publishing retained messages, subscribing to receive them, and clearing retained messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/explore-mqtt.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m 'A retained message from MQTTX CLI' --retain true -h 'localhost' -p 1883\nmqttx sub -t 't/1' -h 'localhost' -p 1883 -v\nmqttx pub -t 't/1' -m '' --retain true -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd CPU Plugin\nDESCRIPTION: This snippet configures the collectd CPU plugin to report the average CPU usage across all cores as a percentage, instead of reporting CPU Jiffies per core. This makes the data easier to interpret.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<Plugin cpu>\n  ReportByCpu false\n  ReportByState true\n  ValuesPercentage true\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: EMQ Variable Configuration Path\nDESCRIPTION: Configuration file variables for specifying runner directories.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{{ runner_etc_dir }}, {{ runner_etc_dir }}, {{ runner_data_dir }}\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from Binary\nDESCRIPTION: Command to start EMQX in foreground mode when installed from tar.gz archive.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT-SN Authentication via HTTP API\nDESCRIPTION: Curl command to configure HTTP Server Authentication for MQTT-SN gateway. The request sets up password-based authentication mechanism with HTTP backend, including connection pool settings and SSL configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/mqttsn.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/mqttsn/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"clientid\": \"${clientid}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Disabling an MQTT Listener\nDESCRIPTION: Permanently disables a specific MQTT listener by updating the configuration. This change persists after EMQX restarts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl listeners enable tcp:default false\nDisabled tcp:default listener successfully.\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for WebHook SSL Config Parse in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes WebHook's HTTP client SSL configuration parse in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5696](https://github.com/emqx/emqx/pull/5696)\n```\n\n----------------------------------------\n\nTITLE: Gateway UDP Listener Configuration\nDESCRIPTION: Configuration options for UDP listeners including socket options, connection limits, authentication and access rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\ngateway:udp_listener.enable = true\ngateway:udp_listener.max_connections = 1024\ngateway:udp_listener.max_conn_rate = 1000\ngateway:udp_listener.enable_authn = true\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Response Format in JSON\nDESCRIPTION: Example of expected JSON response format from the HTTP authorization server. The response must have content-type application/json and indicate the authorization result through the 'result' field with values 'allow', 'deny', or 'ignore'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": \"allow\" | \"deny\" | \"ignore\" // Default `\"ignore\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Select Specific Fields from a Topic Filter\nDESCRIPTION: This SQL query selects the 'qos', 'username', and 'clientid' fields from messages published to any topic that matches the 't/#' topic filter. It demonstrates how to retrieve specific pieces of information from a range of topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT qos, username, clientid FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Managing MQTT Clients with clients Commands\nDESCRIPTION: List, show details, and forcibly disconnect MQTT clients connected to the EMQX broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients list\nClient(emqx_c, username=undefined, peername=127.0.0.1:59441, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4530, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736435155, connected_at=1684736435155)\nClient(emqx_a, username=undefined, peername=127.0.0.1:59444, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4588, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736441613, connected_at=1684736441613)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients show emqx_c\nClient(emqx_c, username=undefined, peername=127.0.0.1:59441, clean_start=true, keepalive=60, session_expiry_interval=0, subscriptions=1, inflight=0, awaiting_rel=0, delivered_msgs=4680, enqueued_msgs=0, dropped_msgs=0, connected=true, created_at=1684736435155, connected_at=1684736435155)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl clients kick emqx_c\nok\n```\n\n----------------------------------------\n\nTITLE: Unloading a Gateway\nDESCRIPTION: Completely unloads a gateway from the system. This removes the gateway and frees up associated resources.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl gateway unload coap\nok\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Shared Topic with MQTTX CLI\nDESCRIPTION: This command subscribes a client to a shared MQTT topic using the MQTTX CLI. The `-t` option specifies the topic, including the `$share` prefix and group name, while `-h` and `-p` specify the host and port of the MQTT broker, respectively.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-shared-subscription.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t '$share/my_group1/t/1' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX on CentOS/RHEL\nDESCRIPTION: This command removes the EMQX package from the system using the Yum package manager on CentOS/RHEL.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel-ce.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum remove emqx\n```\n\n----------------------------------------\n\nTITLE: Hooking in EMQX (Erlang)\nDESCRIPTION: API for hooking into EMQX. It takes the hook name, a tuple containing the module, function, and arguments, and an optional priority.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nemqx:hook(Name, {Module, Function, Args}, Priority).\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publishing\nDESCRIPTION: MQTTX command to publish a test message to topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/confluent-sink.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Confluent\" }'\n```\n\n----------------------------------------\n\nTITLE: EMQ 2.0 Configuration Processing Flow\nDESCRIPTION: ASCII diagram showing how configuration files are processed and translated into Erlang app.config\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n----------------------                                          2.0/schema/*.schema      -------------------\n    | etc/emq.conf       |                   -----------------              \\|/              | data/app.config |\n    |       +            | --> mergeconf --> | data/app.conf | -->  cuttlefish generate  --> |                 |\n    | etc/plugins/*.conf |                   -----------------                               | data/vm.args    |\n    ----------------------                                                                   -------------------\n```\n\n----------------------------------------\n\nTITLE: Sample MQTT JSON Payload\nDESCRIPTION: Example JSON message structure for publishing to Apache IoTDB with device ID and value fields\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"index\": \"42\",\n\"temp\": \"32.67\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Topic Rewrite Rules Example\nDESCRIPTION: Demonstrates multiple complex topic rewrite rules with different matching and transformation strategies, including multi-level topic replacements\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-topic-rewrite.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrewrite = [\n  {\n    action:       \"all\"\n    source_topic: \"y/+/z/#\"\n    dest_topic:   \"y/z/$2\"\n    re:           \"^y/(.+)/z/(.+)$\"\n  },\n  {\n    action:       \"all\"\n    source_topic: \"x/#\"\n    dest_topic:   \"z/y/x/$1\"\n    re:           \"^x/y/(.+)$\"\n  },\n  {\n    action:       \"all\"\n    source_topic: \"x/y/+\"\n    dest_topic:   \"z/y/$1\"\n    re:           \"^x/y/(\\d+)$\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Stopping HAProxy\nDESCRIPTION: This command stops the HAProxy service using `systemctl`. It requires `sudo` privileges.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop haproxy\n```\n\n----------------------------------------\n\nTITLE: Example EMQX Topics and Certificate Expiry Metrics\nDESCRIPTION: These are example metrics collected from EMQX showing topic count and certificate expiry. These metrics are consistent across all nodes in the cluster, so the API returns the value from the node that receives the request, without node name labels. Certificate expiry is provided per listener.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"emqx_topics_count 3\nemqx_cert_expiry_at{listener_type=\\\"ssl\\\",listener_name=\\\"default\\\"} 1904285225\nemqx_cert_expiry_at{listener_type=\\\"wss\\\",listener_name=\\\"default\\\"} 1904285225\"\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT Subscription Events\nDESCRIPTION: SQL query to extract subscription information including client details, topic, and QoS when a client successfully subscribes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  topic,\n  qos\nFROM\n  \"$events/session_subscribed\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"topic\": \"t/a\",\n  \"qos\": 1,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX on CentOS/RHEL\nDESCRIPTION: Commands to download and install EMQX 5.3.0 on a CentOS/RHEL system using RPM package. This installs the MQTT broker that will be the target of performance testing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://www.emqx.com/en/downloads/broker/5.3.0/emqx-5.3.0-el7-amd64.rpm\nsudo yum install emqx-5.3.0-el7-amd64.rpm -y\n```\n\n----------------------------------------\n\nTITLE: MQTTX Publish Command\nDESCRIPTION: Command to publish a test message to MQTT topic 't/1' using MQTTX client\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Confluent\" }'\n```\n\n----------------------------------------\n\nTITLE: Setting Range Validation Rules in JSON\nDESCRIPTION: Example of a range validation rule configuration for validating port numbers, ensuring they fall within a specified numeric range.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": [\n    {\n      \"type\": \"range\",\n      \"min\": 1,\n      \"max\": 65535,\n      \"message\": \"$port_range_validate\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Complete Discover Response Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Discover response listing resources and attributes for path /3/0, with status code 2.05 (content).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 123,\n  \"msgType\": \"discover\",\n  \"data\": {\n    \"reqPath\": \"/3/0\",\n    \"code\": \"2.05\",\n    \"codeMsg\": \"content\",\n    \"content\": [\n      \"</3/0>;pmin=10\",\n      \"</3/0/0>\", \"</3/0/1>\", \"</3/0/2>\", \"</3/0/3>\", \"</3/0/4>\", \"</3/0/5>\",\n      \"</3/0/6>\", \"</3/0/7>\", \"</3/0/8>\", \"</3/0/9>\", \"</3/0/10>\", \"</3/0/11>\",\n      \"</3/0/12>\", \"</3/0/13>\", \"</3/0/14>\", \"</3/0/15>\", \"</3/0/16>\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Copy Commands\nDESCRIPTION: Shell commands for copying generated markdown configuration files for both opensource and enterprise editions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/DOCS-WRITING-GUIDE-EN.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp /path/to/emqx/project/_build/emqx/lib/emqx_dashboard/priv/www/static/config-zh.md ./zh_CN/admin/cfg-ce.md\ncp /path/to/emqx/project/_build/emqx/lib/emqx_dashboard/priv/www/static/config-en.md ./en_US/admin/cfg-ce.md\n```\n\n----------------------------------------\n\nTITLE: Illustrating QoS 2 Message Flow in MQTT\nDESCRIPTION: Shows the packet exchange for QoS 2 messages between sender and receiver, indicating potential retransmission points in the process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/design/retransmission.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n               PUBLISH\n#1 Sender  --------------->  Receiver       (*)\n               PUBREC\n#2 Sender  <---------------  Receiver\n               PUBREL\n#3 Sender  --------------->  Receiver       (*)\n               PUBCOM\n#4 Sender  <---------------  Receiver\n```\n\n----------------------------------------\n\nTITLE: Throttled Log Events Example\nDESCRIPTION: Example showing how throttled events are logged, including the initial event and the summary of dropped events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/log.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n2024-03-13T15:45:11.707574+02:00 [warning] clientid: test, msg: authorization_permission_denied, peername: 127.0.0.1:54870, username: test, topic: t/#, action: SUBSCRIBE(Q0), source: file\n2024-03-13T15:45:53.634909+02:00 [warning] msg: log_events_throttled_during_last_period, period: 1 minutes, 0 seconds, dropped: #{authorization_permission_denied => 4}\n```\n\n----------------------------------------\n\nTITLE: Cluster Unaggregated Mode Parameter\nDESCRIPTION: URL parameter for getting individual metrics from all cluster nodes in pull mode\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/prometheus.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmode=all_nodes_unaggregated\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 Locale on Debian\nDESCRIPTION: Sets up UTF-8 locale on Debian systems using either localectl or update-locale commands.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo localectl set-locale LANG=C.UTF-8\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-locale LANG=C.UTF-8\n```\n\n----------------------------------------\n\nTITLE: EMQX Docker Container Health Check Configuration\nDESCRIPTION: YAML configuration for the health check in an EMQX Docker container. This defines how Docker determines if the EMQX container is healthy by running the emqx_ctl status command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n      test: [\"CMD\", \"/opt/emqx/bin/emqx_ctl\", \"status\"]\n      interval: 60s\n      timeout: 15s\n      retries: 3\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry via Configuration File in EMQX\nDESCRIPTION: Configuration snippet for disabling telemetry permanently in the EMQX configuration file (etc/emqx.conf).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/telemetry/telemetry.md#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntelemetry.enable = false\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Table\nDESCRIPTION: Detailed table of advanced configuration parameters for Kafka integration, including field names, descriptions, and recommended values.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields                                    | Descriptions                                                 | Recommended Values |\n| ----------------------------------------- | ------------------------------------------------------------ | ------------------ |\n| Min Metadata Refresh Interval             | The minimum time interval the client must wait before refreshing Kafka broker and topic metadata. Setting this value too small may increase the load on the Kafka server unnecessarily. | `3` second         |\n| Metadata Request Timeout                  | The maximum duration to wait when the bridge requests metadata from Kafka. | `5` second         |\n```\n\n----------------------------------------\n\nTITLE: Querying Client Disconnected Events in SQL\nDESCRIPTION: SQL query to retrieve details about client disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  clientid,\n  username,\n  reason,\n  disconnected_at,\n  node\nFROM\n  \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Authorization Query with Placeholders in SQL\nDESCRIPTION: Example SQL query for the MySQL authorization checker that uses a placeholder to dynamically insert the client's username when performing authorization checks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/authz.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT action, permission, topic FROM mqtt_acl where username = ${username}\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Locale on Ubuntu\nDESCRIPTION: Configures system-wide UTF-8 locale using update-locale on Ubuntu systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-locale LANG=C.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Modify Array Element\nDESCRIPTION: This SQL query demonstrates how to modify an element within an array in a JSON payload. It sets the 'name' field of the first element (index 1) in the 'payload.data' array to 'STEVE'. This shows how to directly manipulate data within a JSON payload using SQL.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload,\n  'STEVE' as payload.data[1].name\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Shard Transitions in EMQX Cluster\nDESCRIPTION: Command to reallocate shards from a lost node to other nodes in the EMQX cluster, restoring availability.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/durability/managing-replication.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx ctl ds leave messages 5C6028D6CE9459C7 # Here, 5C6028D6CE9459C7 is the lost node's Site ID\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Client Disconnection Event\nDESCRIPTION: Example JSON output from the '$events/client_disconnected' event query, showing the username, reason, node, disconnect time, and client ID information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"reason\": \"normal\",\n  \"node\": \"emqx@127.0.0.1\",\n  \"disconnected_at\": 1645003578536,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cassandra Table Contents\nDESCRIPTION: Docker command to verify message storage by querying the mqtt_msg table.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e SELECT * FROM mqtt.mqtt_msg;\"\n```\n\n----------------------------------------\n\nTITLE: EMQX Background Startup (macOS)\nDESCRIPTION: Command to start EMQX in the background (not recommended for production)\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\\.\\/emqx\\/bin\\/emqx start\n```\n\n----------------------------------------\n\nTITLE: Cassandra Data Verification Query\nDESCRIPTION: Docker command to execute a CQL query for checking stored messages in Cassandra\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it cassa cqlsh \"-e SELECT * FROM mqtt.mqtt_msg;\"\n```\n\n----------------------------------------\n\nTITLE: Stopping a Listener via HTTP API\nDESCRIPTION: Example of stopping an EMQX listener named 'demo' using the HTTP API. This will prevent the listener from accepting new connections while maintaining existing ones.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n     'http://127.0.0.1:18083/api/v5/listeners/tcp%3Ademo/stop' \\\n     -H 'accept: */*' \\\n     -d ''\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Webhook TLS Support Fix in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that fixes an issue where Webhook cannot use TLS in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4908](https://github.com/emqx/emqx/pull/4908)\n```\n\n----------------------------------------\n\nTITLE: Rule Engine SQL Example\nDESCRIPTION: Example showing Rule Engine SQL syntax with single quotes in FROM clause\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM 't/#'\n```\n\n----------------------------------------\n\nTITLE: Rule Engine Error Log Example\nDESCRIPTION: Example error log showing the issue when stopping actively running rules where the action was not properly initialized.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nfoo@x.x.x.x:54663 Rule: <<\"rule:ba48182b\">>; Action: data_to_kafka; Resource: <<\"resource:7bacacdc\">>. Continue next action, reason: {error,{badmatch,not_found}, ...\n```\n\n----------------------------------------\n\nTITLE: Starting Cassandra Docker Container\nDESCRIPTION: Command to start a Cassandra v3.11.14 server instance in a Docker container with exposed port 9042.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name cassa --rm -p 9042:9042 cassandra:3.11.14\n```\n\n----------------------------------------\n\nTITLE: MQTT Disconnect Reason Code\nDESCRIPTION: MQTT protocol reason code indicating receive maximum exceeded condition.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\nRC_RECEIVE_MAXIMUM_EXCEEDED(0x93)\n```\n\n----------------------------------------\n\nTITLE: Sample Audit Log Entry for Dashboard/REST API Operations\nDESCRIPTION: This snippet demonstrates the format of an audit log entry for operations performed through the Dashboard or REST API. It includes details such as timestamp, operation type, result, and HTTP request information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/audit-log.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\"time\":1702604675872987,\"level\":\"info\",\"source_ip\":\"127.0.0.1\",\"operation_type\":\"mqtt\",\"operation_result\":\"success\",\"http_status_code\":204,\"http_method\":\"delete\",\"operation_id\":\"/mqtt/retainer/message/:topic\",\"duration_ms\":4,\"auth_type\":\"jwt_token\",\"query_string\":{},\"from\":\"dashboard\",\"source\":\"admin\",\"node\":\"emqx@127.0.0.1\",\"http_request\":{\"method\":\"delete\",\"headers\":{\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\",\"sec-fetch-site\":\"same-origin\",\"sec-fetch-mode\":\"cors\",\"sec-fetch-dest\":\"empty\",\"sec-ch-ua-platform\":\"\\\"macOS\\\"\",\"sec-ch-ua-mobile\":\"?0\",\"sec-ch-ua\":\"\\\"Google Chrome\\\";v=\\\"119\\\", \\\"Chromium\\\";v=\\\"119\\\", \\\"Not?A_Brand\\\";v=\\\"24\\\"\",\"referer\":\"http://localhost:18083/\",\"origin\":\"http://localhost:18083\",\"host\":\"localhost:18083\",\"connection\":\"keep-alive\",\"authorization\":\"******\",\"accept-language\":\"zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7\",\"accept-encoding\":\"gzip, deflate, br\",\"accept\":\"*/*\"},\"body\":{},\"bindings\":{\"topic\":\"$SYS/brokers/emqx@127.0.0.1/version\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Structure in JSON\nDESCRIPTION: Example JSON configuration for the Introduction section of the documentation menu structure. Shows how to define titles, nested children, and file paths.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/DOCS-WRITING-GUIDE-EN.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"en\": [\n    {\n      \"title\": \"Introduction\",\n      \"children\": [\n        {\n          \"title\": \"EMQX Broker\",\n          \"path\": \"./\"\n        },\n        {\n          \"title\": \"Features List\",\n          \"path\": \"introduction/checklist\"\n        }\n      ]\n    }\n  ],\n  \"cn\": [\n    \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EMQX Router Cleanup Command\nDESCRIPTION: Command to clean up routes for a node that has left the cluster. Must be run on any active EMQX host in the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.8.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ emqx eval \"emqx_router:cleanup_routes('emqx@10.11.12.13')\"\n```\n\n----------------------------------------\n\nTITLE: Executing EMQX Status Check Command in Docker\nDESCRIPTION: Command to check EMQX status within a Docker container and its error output. This shows the node not responding error that causes unhealthy container status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nemqx@docker:/opt/emqx$ emqx_ctl status\nNode emqx@docker not responding to pings.\n```\n\n----------------------------------------\n\nTITLE: Log Message Format Example\nDESCRIPTION: Example of MQTT packet log message format showing connection details and flags\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n2023-01-29T13:40:36.567692+08:00 [debug] 127.0.0.1:50393 [MQTT] RECV CONNECT(Q0, R0, D0ClientId=test_client, ... Password=undefined)\n```\n\n----------------------------------------\n\nTITLE: Detecting Binary Memory Leaks with observer bin_leak Command\nDESCRIPTION: Force garbage collection on all processes and print the top 100 processes that released the largest amount of binary data, helping identify potential memory leaks.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl observer bin_leak\n{<0.2140.0>,-48,\n [{current_function,{logger_std_h,file_ctrl_loop,1}},\n  {initial_call,{erlang,apply,2}}]}\n{<0.2093.0>,-29,\n [{current_function,{application_master,main_loop,2}},\n  {initial_call,{proc_lib,init_p,5}}]}\n{<0.2116.0>,-23,\n [user_drv,\n  {current_function,{user_drv,server_loop,6}},\n  {initial_call,{user_drv,server,2}}]}\n...\n```\n\n----------------------------------------\n\nTITLE: Setting TIME-WAIT Socket Parameters\nDESCRIPTION: This snippet configures parameters related to TIME-WAIT sockets, including the maximum number of TIME-WAIT buckets. The commented-out lines suggest caution when enabling TCP TIME_WAIT recycling and reuse, particularly in NAT environments.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.ipv4.tcp_max_tw_buckets=1048576\n    \n# 注意：不建议开启該设置，NAT 模式下可能引起连接 RST\n# sysctl -w net.ipv4.tcp_tw_recycle=1\n# sysctl -w net.ipv4.tcp_tw_reuse=1\n```\n```\n\n----------------------------------------\n\nTITLE: EMQX Shutdown Command\nDESCRIPTION: Command to stop EMQX server\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\\.\\/emqx\\/bin\\/emqx stop\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from tar.gz Installation\nDESCRIPTION: Starts EMQX in foreground mode after installing from tar.gz package\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authentication in EMQX 5.1\nDESCRIPTION: Example configuration for built-in database authentication in EMQX 5.1. It specifies the backend, mechanism, password hashing algorithm, and user ID type.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nauthentication {\n   backend = built_in_database\n   mechanism = password_based\n   password_hash_algorithm {\n      name = sha256\n      salt_position = prefix\n   }\n   user_id_type = username\n   enable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Discovery Strategy in EMQX\nDESCRIPTION: This snippet shows how to configure the cluster discovery strategy in the emqx.conf file. The default setting is manual clustering.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/create-cluster.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster {\n    ## Options: manual | static | dns | etcd | k8s | singleton\n    discovery_strategy  =  manual\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Interface - PEM Cache Clear\nDESCRIPTION: CLI command to forcibly clear x509 certificate cache for immediate reload after certificate updates\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nemqx_ctl pem_cache clean\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to RFC3339\nDESCRIPTION: Examples of converting Unix timestamps to RFC3339 format with different time units\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nunix_ts_to_rfc3339(1708671600) = '2024-02-23T15:00:00+08:00'\nunix_ts_to_rfc3339(1708671600766, 'millisecond') = '2024-02-23T15:00:00.766+08:00'\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream in LocalStack Emulated Kinesis\nDESCRIPTION: Command to create a stream named 'my_stream' with one shard in the LocalStack emulated Kinesis environment.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kinesis.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawslocal kinesis create-stream --stream-name \"my_stream\" --shard-count 1\n```\n\n----------------------------------------\n\nTITLE: 显示 API 错误信息示例 - JSON\nDESCRIPTION: 展示了当某些 EMQX 节点宕机时，/api/v5/monitor_current API 端点返回的错误信息格式。该错误发生在 EMQX 集群中有节点不可用的情况下。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n{\"code\":\"INTERNAL_ERROR\",\"message\":\"error, badarg, [{erlang,'++',[{error,nodedown},[{node,'emqx@10.42.0.150'}]], ...}\n```\n\n----------------------------------------\n\nTITLE: 使用 MQTTX 发布测试消息\nDESCRIPTION: 使用 MQTTX 向 't/1' 主题发布消息，用于测试规则。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello MySQL\" }'\n```\n\n----------------------------------------\n\nTITLE: Building eMQTT-Bench from Source\nDESCRIPTION: Commands to clone and build eMQTT-Bench from source code using make.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqtt-bench\ncd emqtt-bench\n\nmake\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to External MQTT Broker using MQTTX CLI\nDESCRIPTION: Command to publish a message to the f/1 topic on broker.emqx.io with retain flag enabled.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mqtt.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t f/1 -m \"I'm from broker.emqx.io\" -r -h broker.emqx.io\n```\n\n----------------------------------------\n\nTITLE: Displaying Log Format Example in EMQX 5.x\nDESCRIPTION: Shows the new log format in EMQX 5.x, which uses JSON structured logging and underscores as word separators for better machine readability and indexing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2022-06-29T16:58:53.235042+02:00 [info] foo: bar, msg: msg_for_human_to_read_but_also_easy_to_index\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Table with AWS CLI\nDESCRIPTION: Docker command to run AWS CLI and scan the 'mqtt_msg' table in DynamoDB, retrieving stored data.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -e AWS_ACCESS_KEY_ID=root -e AWS_SECRET_ACCESS_KEY=public -e AWS_DEFAULT_REGION=us-west-2 amazon/aws-cli dynamodb scan --table-name=mqtt_msg --endpoint-url http://host.docker.internal:8000\n```\n\n----------------------------------------\n\nTITLE: Viewing TLS Deploy Directory Structure\nDESCRIPTION: Shows the directory structure of the TLS deployment setup using the tree command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ tree tls-deploy\ntls-deploy\n├── ca\n└── docker-compose-tls.yaml\n\n2 directories, 1 file\n```\n\n----------------------------------------\n\nTITLE: MongoDB Basic Type Configuration\nDESCRIPTION: Simple MongoDB type configuration identifier\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_9\n\nLANGUAGE: hocon\nCODE:\n```\ntype = mongodb\n```\n\n----------------------------------------\n\nTITLE: EMQX 4.4 MongoDB Configuration\nDESCRIPTION: Complete MongoDB authentication configuration example for EMQX 4.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nauth.mongo.type = single\nauth.mongo.srv_record = false\nauth.mongo.server = 127.0.0.1:27017\nauth.mongo.pool = 8\nauth.mongo.username = user\nauth.mongo.password = pass\nauth.mongo.auth_source = admin\nauth.mongo.database = mqtt\nauth.mongo.query_timeout = 5s\n\nauth.mongo.ssl = on\nauth.mongo.ssl.cacertfile = path/to/your/cafile.pem\nauth.mongo.ssl.certfile = path/to/your/certfile\nauth.mongo.ssl.keyfile = path/to/your/keyfile\nauth.mongo.ssl.verify = true\nauth.mongo.ssl.server_name_indication = mymongo\n\nauth.mongo.w_mode = unsafe\n\nauth.mongo.topology.pool_size = 1\nauth.mongo.topology.max_overflow = 0\n\n## auth.mongo.auth_query.password_hash = salt,sha256\n\nauth.mongo.auth_query.collection = mqtt_user\nauth.mongo.auth_query.password_field = password_hash\n\nauth.mongo.auth_query.selector = username=%u, clientid=%c\n\nauth.mongo.super_query.collection = mqtt_user\nauth.mongo.super_query.super_field = is_superuser\nauth.mongo.super_query.selector = username=%u, clientid=%c\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Requests for K8s Deployment Restart Fix in EMQX 4.3.8\nDESCRIPTION: References GitHub pull requests that fix an issue where the k8s deployment EMQX cluster cannot be restarted correctly in some cases in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5646](https://github.com/emqx/emqx/pull/5646), [emqx#5428](https://github.com/emqx/emqx/pull/5428)\n```\n\n----------------------------------------\n\nTITLE: Querying collectd Data in InfluxDB\nDESCRIPTION: Command sequence to verify that collectd data is being correctly written to InfluxDB. This interactive session connects to InfluxDB, selects the collectd database, and displays CPU metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ influx\nConnected to http://localhost:8086 version 1.8.10\nInfluxDB shell version: 1.8.10\n> use collectd\nUsing database collectd\n> select * from cpu_value limit 8\nname: cpu_value\ntime                host     type    type_instance value\n----                ----     ----    ------------- -----\n1692954741571911752 ecs-afc3 percent user          0.049981257028614265\n1692954741571917449 ecs-afc3 percent system        0.024990628514307132\n1692954741571923666 ecs-afc3 percent wait          0.024990628514307132\n1692954741571932372 ecs-afc3 percent nice          0\n1692954741571943586 ecs-afc3 percent interrupt     0\n1692954741571947059 ecs-afc3 percent softirq       0\n1692954741571947389 ecs-afc3 percent steal         0\n1692954741571949536 ecs-afc3 percent idle          99.90003748594276\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Allow Command in EMQX CLI\nDESCRIPTION: CLI command to explicitly allow a plugin package before installation via HTTP API or Dashboard, enhancing security by preventing unauthorized installations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl plugins allow NAME-VSN\n```\n\n----------------------------------------\n\nTITLE: MQTTX Subscribe Command for EU West Cluster\nDESCRIPTION: Command to subscribe to topics on the EU West cluster using MQTTX CLI with verbose output enabled\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -h emqx.eu-west.myinfra.net --topic linked/# --qos 1 --verbose\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration Example - EMQX 5.1\nDESCRIPTION: Complete PostgreSQL configuration example for EMQX 5.1 with updated configuration format\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_8\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  type = postgresql\n  \n  enable = true\n\n  server = \"127.0.0.1:5432\"\n  username = \"root\"\n  database = \"mqtt\"\n  password = \"dbpass\"\n  pool_size = 8\n\n  query = \"select allow as permission, access as action, topic from mqtt_acl where username = ${username} and ipaddr = ${peerhost} and clientid = ${clientid}\"\n  \n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = mypgsql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd CPU Plugin\nDESCRIPTION: Configuration for collectd's CPU plugin to report the average percentage across all CPU cores instead of per-core metrics. This simplifies CPU usage visualization in Grafana.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\n<Plugin cpu>\n  ReportByCpu false\n  ReportByState true\n  ValuesPercentage true\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Checking HAProxy Status\nDESCRIPTION: This command checks the status of the HAProxy service using `systemctl`. It shows whether the service is running, stopped, or has encountered an error.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status haproxy\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX from TAR Installation\nDESCRIPTION: Command to start EMQX in foreground mode when installed from a tar.gz package.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: Error Logs for Proxy Protocol After Improvement\nDESCRIPTION: Sample error logs generated by Proxy Protocol issues after the logging improvements. Shows the improved format with more descriptive error messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n2023-04-20T18:07:06.180134+08:00 [error] [esockd_proxy_protocol] The listener 127.0.0.1:8883 is working in proxy protocol mode, but received invalid proxy_protocol header, raw_bytes=<<\"f\\n\">>\n\n2023-04-20T18:10:17.205436+08:00 [error] [esockd_proxy_protocol] The listener 127.0.0.1:8883 is working in proxy protocol mode, but timed out while waiting for proxy_protocol header\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Topic Metrics Monitoring Fix in EMQX 4.3.2\nDESCRIPTION: References a GitHub pull request that fixes an issue where topic metrics monitoring cannot be used in the cluster environment in EMQX version 4.3.2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_51\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4870](https://github.com/emqx/emqx/pull/4870)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum File Handles System-Wide\nDESCRIPTION: This snippet sets the maximum number of file handles that can be allocated system-wide using sysctl and by writing to the /proc filesystem. It aims to increase the maximum number of open files allowed, which is essential for handling a large number of concurrent connections in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# 2 millions system-wide\nsysctl -w fs.file-max=2097152\nsysctl -w fs.nr_open=2097152\necho 2097152 > /proc/sys/fs/nr_open\n```\n```\n\n----------------------------------------\n\nTITLE: Local Port Range Configuration\nDESCRIPTION: Sets the range of local ports that can be used for network connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.ip_local_port_range='1024 65535'\n```\n\n----------------------------------------\n\nTITLE: 查询 emqx_messages 表数据\nDESCRIPTION: 查看 emqx_messages 表中是否已经写入测试数据。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from emqx_messages;\n+----+----------+-------+--------------------------+---------------------+\n| id | clientid | topic | payload                  | created_at          |\n+----+----------+-------+--------------------------+---------------------+\n|  1 | emqx_c   | t/1   | { \"msg\": \"hello MySQL\" } | 2022-12-09 08:44:07 |\n+----+----------+-------+--------------------------+---------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Stopping EMQX\nDESCRIPTION: Command to stop a running EMQX instance after package installation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emqx/bin/emqx stop\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Service via Systemd\nDESCRIPTION: Command to start EMQX as a systemd service on Debian systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-debian.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Inspecting Cluster Configuration Synchronization State\nDESCRIPTION: Examine the synchronization status of cluster configuration changes by inspecting a specific transaction ID (tnxid), showing details of the configuration modification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl conf cluster_sync inspect 2\n{atomic,#{created_at => {{2022,6,21},{21,57,50}},\n          initiator => 'emqx@127.0.0.1',\n          mfa =>\n              {emqx,update_config,\n                    [[listeners,ssl,default],\n                     {action,stop,#{\\\"enabled\\\" => false}},\n                     #{override_to => cluster,rawconf_with_defaults => true}]},\n          tnx_id => 2}}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Couchbase using SQL Template\nDESCRIPTION: SQL template for inserting MQTT message data into the 'emqx_data' table in Couchbase, using message ID as key and payload as value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-couchbase.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into emqx_data (key, value) values (${.id}, ${.payload})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data for Temperature and Humidity Sensor\nDESCRIPTION: Example of JSON data published by a temperature and humidity sensor to the MQTT topic 'sensor/temperature'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/flow-designer/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_id\": \"device123\",\n  \"temperature\": 22.5,\n  \"humidity\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pattern Validation Rules in JSON\nDESCRIPTION: Example of a pattern validation rule configuration for validating hostnames, with support for internationalized error messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/plugins.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": [\n    {\n      \"type\": \"pattern\",\n      \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9]))*$\",\n      \"message\": \"$hostname_validate\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Redis Reconnection Failure in Erlang\nDESCRIPTION: This fix addresses a Redis reconnection failure issue in the emqx-auth-redis plugin.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_57\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx-auth-redis#195](https://github.com/emqx/emqx-auth-redis/pull/195)\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Confluent Topic\nDESCRIPTION: Command to consume messages from the Confluent testtopic-in topic\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/confluent-sink.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic consume -b testtopic-in\n```\n\n----------------------------------------\n\nTITLE: Non-Matching Single-Level Topics\nDESCRIPTION: Example topics that do not match the sensor/+/temperature subscription pattern.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsensor/temperature\nsensor/bedroom/1/temperature\n```\n\n----------------------------------------\n\nTITLE: Displaying Listener Shutdown Counts in Prometheus Metrics\nDESCRIPTION: This snippet shows the format of new Prometheus metrics for listener shutdown counts, labeled by shutdown reason. These metrics are available under the 'emqx_client_disconnected_reason' counters and are currently limited to TCP and TLS listeners.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_5\n\nLANGUAGE: Prometheus\nCODE:\n```\nemqx_client_disconnected_reason{node=\"emqx@127.0.0.1\",reason=\"takenover\"} 1 \nemqx_client_disconnected_reason{node=\"emqx@127.0.0.1\",reason=\"kicked\"} 1\n```\n\n----------------------------------------\n\nTITLE: Managing Retained Message Indexes\nDESCRIPTION: Check the status of retained message indexing and initiate reindexing operations to optimize message retrieval.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl retainer reindex status\nReindexing is not running\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl retainer reindex start true\nStarting reindexing\nReindexed 0 messages\nReindexing finished\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Priority Queue Interleaving in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that introduces interleaving for priority queues to avoid low priority queue starvation in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5666](https://github.com/emqx/emqx/pull/5666)\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Schema for MQTT Authorization in OpenLDAP\nDESCRIPTION: This SQL-like code defines the LDAP schema for storing MQTT authorization data, including attribute types for publish, subscribe, and publish/subscribe topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authz/ldap.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nattributetype ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.4.1 NAME ( 'mqttPublishTopic' 'mpt' )\n\tEQUALITY caseIgnoreMatch\n\tSUBSTR caseIgnoreSubstringsMatch\n\tSYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n\tUSAGE userApplications )\nattributetype ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.4.2 NAME ( 'mqttSubscriptionTopic' 'mst' )\n\tEQUALITY caseIgnoreMatch\n\tSUBSTR caseIgnoreSubstringsMatch\n\tSYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n\tUSAGE userApplications )\nattributetype ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.4.3 NAME ( 'mqttPubSubTopic' 'mpst' )\n\tEQUALITY caseIgnoreMatch\n\tSUBSTR caseIgnoreSubstringsMatch\n\tSYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n\tUSAGE userApplications )\n\nobjectclass ( 1.3.6.1.4.1.11.2.53.2.2.3.1.2.3.4 NAME 'mqttUser'\n    SUP top\n\tSTRUCTURAL\n\tMAY ( mqttPublishTopic $ mqttSubscriptionTopic $ mqttPubSubTopic  ) )\n```\n\n----------------------------------------\n\nTITLE: MongoDB Date Functions\nDESCRIPTION: Examples of MongoDB-specific date functions for generating ISODate objects\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmongo_date() = 'ISODate(\"2024-02-23T15:00:00.123Z\")'\nmongo_date(now_timestamp('millisecond')) = 'ISODate(2024-02-23T15:48:57.871Z)'\nmongo_date(now_timestamp('microsecond'), 'microsecond') = 'ISODate(2024-02-23T15:51:01.232Z)'\n```\n\n----------------------------------------\n\nTITLE: Creating CoAP Gateway Authentication via HTTP API\nDESCRIPTION: HTTP API configuration for setting up built-in database authentication with password-based mechanism for CoAP gateway\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/coap.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://127.0.0.1:18083/api/v5/gateway/coap/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"backend\": \"built_in_database\",\n  \"mechanism\": \"password_based\",\n  \"password_hash_algorithm\": {\n    \"name\": \"sha256\",\n    \"salt_position\": \"suffix\"\n  },\n  \"user_id_type\": \"username\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Closing a CoAP Connection\nDESCRIPTION: Example using libcoap to close an existing CoAP connection. This requires the client ID and token obtained during connection creation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/coap.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoap-client -m delete -e \"\" \"coap://127.0.0.1/mqtt/connection?clientid=123&token=3404490787\"\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Message Forwarding Order Fix in EMQX 4.3.4\nDESCRIPTION: References a GitHub pull request that ensures the forwarding order of messages between nodes in the default configuration in EMQX version 4.3.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4979](https://github.com/emqx/emqx/pull/4979)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Gateways\nDESCRIPTION: Displays information about all registered gateways in the system including their status, connected client count, and start time.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl gateway list\nGateway(name=coap, status=running, clients=0, started_at=2023-05-22T14:23:50.353+08:00)\nGateway(name=exproto, status=unloaded)\nGateway(name=lwm2m, status=unloaded)\nGateway(name=mqttsn, status=unloaded)\nGateway(name=stomp, status=unloaded)\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for OpenTelemetry Collector\nDESCRIPTION: Docker Compose configuration file that sets up the OpenTelemetry Collector container with the appropriate ports and mounts the configuration file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/logs.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n  # Collector\n  otel-collector:\n    image: otel/opentelemetry-collector:0.90.0\n    restart: always\n    command: [\"--config=/etc/otel-collector-config.yaml\", \"${OTELCOL_ARGS}\"]\n    volumes:\n      - ./otel-logs-collector-config.yaml:/etc/otel-collector-config.yaml\n    ports:\n      - \"13133:13133\" # Health check extension\n      - \"4317:4317\"   # OTLP gRPC receiver\n```\n\n----------------------------------------\n\nTITLE: Using Client Attributes in SQL Authentication Queries\nDESCRIPTION: Example SQL query showing how to use client attributes as placeholders in authentication queries. The query retrieves user credentials from a database where the serial number matches the client attribute 'sn'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/client-attributes/client-attributes.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# MySQL/PostgreSQL - Authentication query SQL\nSELECT password_hash, salt, is_superuser FROM mqtt_user WHERE sn = ${client_attrs.sn} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Default State (Disabled)\nDESCRIPTION: Erlang configuration example showing how to set a module (emqx_mod_rewrite) to not start by default in the loaded_modules file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/advanced/internal-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{emqx_mod_rewrite, false}.\n```\n\n----------------------------------------\n\nTITLE: EMQX 4.4 PostgreSQL Configuration\nDESCRIPTION: Complete PostgreSQL authentication configuration example for EMQX 4.4 including server settings, queries and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nauth.pgsql.server = 127.0.0.1:5432\nauth.pgsql.pool = 8\nauth.pgsql.username = root\nauth.pgsql.password = dbpass\n\nauth.pgsql.database = mqtt\nauth.pgsql.encoding = utf8\n\nauth.pgsql.auth_query = select password, salt from mqtt_user where username = '%u' limit 1\nauth.pgsql.password_hash = salt,sha256\nauth.pgsql.super_query = select is_superuser from mqtt_user where username = '%u' limit 1\n\nauth.pgsql.ssl = on\nauth.pgsql.ssl.cacertfile = path/to/your/cafile.pem\nauth.pgsql.ssl.certfile = path/to/your/certfile\nauth.pgsql.ssl.keyfile = path/to/your/keyfile\nauth.pgsql.ssl.verify = true\nauth.pgsql.ssl.server_name_indication = mypgsql\n```\n\n----------------------------------------\n\nTITLE: Unmounting EMQX Hook (Erlang)\nDESCRIPTION: API call to unmount a hook in EMQX. It specifies the hook name and the callback function module and method.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nemqx:unhook(Name, {Module, Function}).\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old EMQX Version\nDESCRIPTION: This command removes an old, no longer needed version of EMQX from the system.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/hot-upgrades.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx uninstall 5.0.0\n\nRelease 5.0.0 is marked old, uninstalling it.\nUninstalled Release: 5.0.0\n```\n\n----------------------------------------\n\nTITLE: Persisting File Handle Limit via sysctl.conf\nDESCRIPTION: This snippet demonstrates how to persist the `fs.file-max` setting across reboots by adding it to the `/etc/sysctl.conf` file. This ensures that the system maintains the increased file handle limit after a restart.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nfs.file-max = 1048576\n```\n```\n\n----------------------------------------\n\nTITLE: SSL/TLS Certificate Common Name Mismatch Error\nDESCRIPTION: Error message displayed when the server certificate's Common Name (CN) does not match the server address specified by the client during the connection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nError [ERR_TLS_CERT_ALTNAME_INVALID]: Hostname/IP does not match certificate's altnames: Host: localhost. is not cert's CN: Server\n```\n\n----------------------------------------\n\nTITLE: Wildcard Characters Example - Client Search\nDESCRIPTION: Special characters supported in client fuzzy search functionality\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n*, (, )\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL for Snowflake Integration\nDESCRIPTION: SQL rule in EMQX to process messages from topic 't/#' for writing to Snowflake.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  clientid,\n  unix_ts_to_rfc3339(publish_received_at, 'millisecond') as publish_received_at,\n  topic,\n  payload\nFROM\n    \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Client Connections\nDESCRIPTION: These commands use `docker exec` to run commands within the containers named `emqx1`, `emqx2`, and `emqx3`. The commands check the connection statistics of each EMQX node, filtering for the `connections.count` metric using `grep` to display the number of connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it emqx1 emqx ctl broker stats | grep connections.count\ndocker exec -it emqx2 emqx ctl broker stats | grep connections.count\ndocker exec -it emqx3 emqx ctl broker stats | grep connections.count\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Message Discard Statistics in EMQX\nDESCRIPTION: SQL statement to create a rule for collecting message discard statistics from specific EMQX events.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-redis.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/message_dropped\", \"$events/delivery_dropped\"\n```\n\n----------------------------------------\n\nTITLE: Example EMQX Retained Count Metric\nDESCRIPTION: This is an example metric collected from EMQX showing retained message counts. Because this is a cluster-wide value, the node name is not included as a label.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"emqx_retained_count 3\"\n```\n\n----------------------------------------\n\nTITLE: IoTDB CLI Connection Command\nDESCRIPTION: Shell command to connect to IoTDB's command line interface through Docker\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -ti iotdb-service /iotdb/sbin/start-cli.sh -h iotdb-service\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Client ID Search Fix in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes an issue where Client IDs containing '\\' characters could not be searched in a fuzzy manner in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5978](https://github.com/emqx/emqx/pull/5978)\n```\n\n----------------------------------------\n\nTITLE: Starting Cassandra Docker Container\nDESCRIPTION: Docker command to start a Cassandra v3.11.14 instance with exposed port 9042.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-cassa.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name cassa --rm -p 9042:9042 cassandra:3.11.14\n```\n\n----------------------------------------\n\nTITLE: Installing rsyslog dependency on CentOS/Redhat\nDESCRIPTION: Command to install the rsyslog dependency on CentOS or Redhat systems to resolve EMQX startup failure due to missing logger command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yum install rsyslog\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Command to install Homebrew package manager on macOS using a bash script.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-macOS-ce.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Authentication in EMQX 5.1\nDESCRIPTION: Example configuration for Redis authentication in EMQX 5.1. It includes updated settings for server, password hashing, command, and SSL options.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_4\n\nLANGUAGE: hocon\nCODE:\n```\nauthentication {\n  mechanism = password_based\n  backend = redis\n  enable = true\n\n  redis_type = single\n  server = \"127.0.0.1:6379\"\n\n  password_hash_algorithm {\n      name = sha256\n      salt_position = prefix\n  }\n\n  cmd = \"HMGET mqtt_user:${username} password salt\"\n  database = 0\n  password = \"pass\"\n  auto_reconnect = true\n  ssl {\n    enable = true\n    verify = verify_peer\n   \n    keyfile = path/to/your/keyfile\n    certfile = path/to/your/certfile\n    cacertfile = path/to/your/cafile.pem\n    \n    server_name_indication = myredis\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OpenTSDB Data with cURL\nDESCRIPTION: Sends a POST request to OpenTSDB's query API to retrieve CPU metric data for the last hour. It specifies the aggregator, metric, and tag filters.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Accept: Application/json\" -H \"Content-Type: application/json\" http://localhost:4242/api/query -d '{\n    \"start\": \"1h-ago\",\n    \"queries\": [\n        {\n            \"aggregator\": \"last\",\n            \"metric\": \"cpu\",\n            \"tags\": {\n                \"host\": \"*\"\n            }\n        }\n    ],\n    \"showTSUIDs\": \"true\",\n    \"showQuery\": \"true\",\n    \"delete\": \"false\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Deprecated Configuration Option\nDESCRIPTION: This entry describes the deprecation of the `broker.shared_dispatch_ack_enabled` configuration option. This setting was designed to prevent message distribution to disconnected shared subscription clients. However, since v5.0.9, it is no longer effective due to message redistribution in expired sessions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: TDEngine SQL Template Example\nDESCRIPTION: Example of TDEngine SQL template with line breaks that previously caused failures.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO ${devid}\nUSING\n  tsdb.profit\nTAGS\n  ('${custid}', '${devid}')\nVALUES (${ts}, ${value})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for gRPC Server\nDESCRIPTION: These Python commands use `pip` to install the necessary gRPC libraries required to run the `exproto_server.py` example.  `grpcio` provides the core gRPC functionality, while `grpcio-tools` provides tools for generating gRPC code from `.proto` files.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython -m pip install grpcio\npython -m pip install grpcio-tools\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Message Dropped During Delivery Event\nDESCRIPTION: Example JSON output from the '$events/delivery_dropped' event query, showing the topic, reason, QoS, username, and client ID information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"t/a\",\n  \"reason\": \"queue_full\",\n  \"qos\": 1,\n  \"from_username\": \"u_emqx_1\",\n  \"from_clientid\": \"c_emqx_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bit Sequence Operations in EMQX Rule Engine\nDESCRIPTION: Functions for manipulating bit sequences, including extracting bits and converting between different data types.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbitsize('abc') = 24\nbitsize('你好') = 48\n```\n\nLANGUAGE: bash\nCODE:\n```\nbyteszie('abc') = 3\nbyteszie('你好') = 6\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 159 = 0x9F\nsubbits(hexstr2bin('9F4E58'), 8) = 159\n\n# 40782 = 0x9F4E\nsubbits(hexstr2bin('9F4E58'), 16) = 40782\n\n# bin2hexstr(base64_decode('n05Y')) = '9F4E58'\nsubbits(base64_decode('n05Y'), 8) = 159\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 159 = 0x9F\nsubbits(hexstr2bin('9F4E58'), 1, 8) = 159\n\n# 78 = 0x4E\nsubbits(hexstr2bin('9F4E58'), 9, 8) = 78\n\n# bin2hexstr(base64_decode('n05Y')) = '9F4E58'\nsubbits(base64_decode('n05Y'), 9, 4) = 4\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 40782 = 0x9F4E\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'unsigned', 'big') = 40782\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'signed', 'big') = -24754\n\n# 20127 = 0x4E9F\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'integer', 'unsigned', 'little') = 20127\n\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'float', 'unsigned', 'big') = -0.00713348388671875\nsubbits(hexstr2bin('9F4E58'), 1, 16, 'float', 'signed', 'big') = -0.00713348388671875\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL 1.1 on macOS using Homebrew\nDESCRIPTION: Command to install OpenSSL 1.1 on macOS using Homebrew package manager to resolve EMQX startup issues related to missing OpenSSL libraries.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl@1.1\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Client Kick Improvement in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that improves client kick (forced step-down) in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6030](https://github.com/emqx/emqx/pull/6030)\n```\n\n----------------------------------------\n\nTITLE: Erlang VM Port Configuration\nDESCRIPTION: Sets the maximum number of ports for the Erlang virtual machine.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/tune.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnode.max_ports = 2097152\n```\n\n----------------------------------------\n\nTITLE: MySQL Query for User Authentication and Superuser Check\nDESCRIPTION: Example SQL query for MySQL authentication in EMQX 5.1. It selects the password hash, salt, and superuser status for a given username.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  password as password_hash,\n  salt,\n  is_superuser\nFROM mqtt_user\n  where username = ${username} LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Example EMQX CPU Usage Metrics\nDESCRIPTION: These are example metrics collected from EMQX showing CPU usage. The metrics include the node name as a label, allowing for differentiation between different nodes in the cluster. This demonstrates the format of the data returned by the EMQX Prometheus API when querying for CPU metrics in cluster aggregated or unaggregated mode.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"emqx_vm_cpu_use{node=\\\"emqx@172.17.0.2\\\"} 7.6669163995887715\nemqx_vm_cpu_idle{node=\\\"emqx@172.17.0.2\\\"} 92.33308360041123\n\nemqx_vm_cpu_use{node=\\\"emqx@172.17.0.3\\\"} 7.676007766679973\nemqx_vm_cpu_idle{node=\\\"emqx@172.17.0.3\\\"} 92.32399223332003\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Kafka Topic\nDESCRIPTION: Command to start a consumer for receiving messages from the 'testtopic-in' Kafka topic in Confluent Cloud.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nconfluent kafka topic consume -b testtopic-in\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Backlog Parameters\nDESCRIPTION: This snippet sets the TCP backlog parameters to increase the number of pending connections the system can handle.  These settings are crucial for managing a high volume of incoming connection requests to EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.core.somaxconn=32768\nsysctl -w net.ipv4.tcp_max_syn_backlog=16384\nsysctl -w net.core.netdev_max_backlog=16384\n```\n```\n\n----------------------------------------\n\nTITLE: EMQX v4 SSL Configuration\nDESCRIPTION: Legacy configuration for EMQX version 4, showing SSL listener setup with basic certificate and key file configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/emqx-mqtt-tls.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlistener.ssl.external = 8883\n\nlistener.ssl.external.keyfile = etc/certs/emqx.key\n\nlistener.ssl.external.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX CLI\nDESCRIPTION: This bash command uses MQTTX to publish a test message to the 't/1' topic. It's used to verify the rule's functionality by sending a sample JSON payload to be processed and stored in Azure Blob Storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/azure-blob-storage.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Azure\" }'\n```\n\n----------------------------------------\n\nTITLE: EMQX Protocol Gateway Support Matrix - TCP/UDP Protocol Support\nDESCRIPTION: Table showing TCP and UDP protocol support across different EMQX gateways. Includes support status for TCP, UDP, SSL, DTLS, Websocket and Websocket over TLS.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/extensions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            | TCP  | UDP  | SSL  | DTLS | Websocket | Websocket over TLS |\n| ---------- | ---- | ---- | ---- | ---- | --------- | ------------------ |\n| STOMP      | ✔︎    |      | ✔︎    |      |           |                    |\n| CoAP       |      | ✔︎    |      | ✔︎    |           |                    |\n| ExProto    | ✔︎    | ✔︎    | ✔︎    | ✔︎    |           |                    |\n| MQTT-SN    |      | ✔︎    |      | ✔︎    |           |                    |\n| LwM2M      |      | ✔︎    |      | ✔︎    |           |                    |\n| OCPP       |      |      |      |      | ✔︎         | ✔︎                  |\n| JT/T 808   | ✔︎    |      | ✔︎    |      |           |                    |\n| GB/T 32960 | ✔︎    |      | ✔︎    |      |           |                    |\n```\n\n----------------------------------------\n\nTITLE: Logging into Confluent Cloud Account\nDESCRIPTION: Command to log into your Confluent Cloud account using the CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconfluent login --save\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for MQTT-SN Subscription Fix in EMQX 4.3.3\nDESCRIPTION: References a GitHub pull request that fixes MQTT-SN subscription in cluster environment in EMQX version 4.3.3.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_47\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4915](https://github.com/emqx/emqx/pull/4915)\n```\n\n----------------------------------------\n\nTITLE: Defining Temporary Location Tracking Control Structure in JSON\nDESCRIPTION: This snippet provides the JSON structure for controlling temporary location tracking, specifying the period for tracking updates and the validity duration for the tracking session. This structure facilitates setting tracking intervals based on system requirements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/jt808_data_exchange.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Field\": {\n    \"period\": VAL,\n    \"expiry\": VAL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting InfluxDB\nDESCRIPTION: This snippet shows how to start the InfluxDB service using systemctl. This assumes that InfluxDB has been installed as a system service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start influxdb\n```\n\n----------------------------------------\n\nTITLE: Invalid SQL Statement Example\nDESCRIPTION: This SQL statement is an example of an invalid query because it attempts to filter on a field ('xyz') that is neither an available field in the message event nor defined in the SELECT statement. This illustrates a common error in SQL queries where the WHERE clause references an undefined variable.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- 错误示例\nSELECT clientid as cid FROM \"#\" WHERE xyz = 'abc'\n```\n\n----------------------------------------\n\nTITLE: RPC Error Log Example\nDESCRIPTION: Example of an RPC error log message that appears when attempting to contact nodes that have left the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.8.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npid: <0.123456.0>, msg: event=connect_to_remote_server, peer=emqx@10.11.12.13, port=5370, reason=ehostunreach\n```\n\n----------------------------------------\n\nTITLE: MySQL ON DUPLICATE KEY Example\nDESCRIPTION: SQL statement for MySQL to handle duplicate key conflicts by ignoring duplicates\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ee-v4.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t_mqtt_msg(msgid, topic, qos, payload, arrived) VALUES (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000)) ON DUPLICATE KEY UPDATE id=id\n```\n\n----------------------------------------\n\nTITLE: Uninstalling EMQX Package\nDESCRIPTION: Removes EMQX package and its configuration files from the system\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove --purge emqx\n```\n\n----------------------------------------\n\nTITLE: Running eMQTT-Bench Docker Container\nDESCRIPTION: Command to run the eMQTT-Bench docker image and display usage information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-emqtt-bench.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it emqx/emqtt-bench:latest\n```\n\n----------------------------------------\n\nTITLE: HTTPS Authorization Configuration with SSL in HCL\nDESCRIPTION: Example configuration for HTTPS authorization with SSL enabled. Shows how to configure the HTTPS URL and enable SSL for secure authorization requests.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/http.md#2025-04-20_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    ...\n    url = \"https://127.0.0.1:8080/authz?clientid=${clientid}\"\n    ssl {\n        enable = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publishing\nDESCRIPTION: Using MQTTX to publish a test message to MQTT topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-pulsar.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Pulsar\" }'\n```\n\n----------------------------------------\n\nTITLE: Cluster Configuration Format - EMQX\nDESCRIPTION: This enhancement unifies the configuration format for `cluster.core_nodes` and `cluster.statics.seeds`. Now, both support either an array format (e.g., `[\"emqx1@127.0.0.1\", \"emqx2@127.0.0.1\"]`) or a semicolon-separated string (e.g., `\"emqx1@127.0.0.1,emqx2@127.0.0.1\"`).\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Contact Item JSON Format for Phonebook Setting in JT/T 808 Protocol\nDESCRIPTION: Example JSON format for representing contact items in the Phonebook Setting message (msg_id: 33793/0x8401). Each contact includes type flag, phone number information, and contact name details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808_data_exchange.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\"type\": TYPE, \"phone_len\", PH_LEN, \"phone\": PHONE, \"name_len\": NAME_LEN, \"name\": NAME}, ...]\n```\n\n----------------------------------------\n\nTITLE: Starting Datalayers Container\nDESCRIPTION: Docker command to start a Datalayers container with exposed ports 8360 and 8361\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name datalayers -p 8360:8360 -p 8361:8361 datalayers/datalayers:latest\n```\n\n----------------------------------------\n\nTITLE: Redis Authentication Command Examples\nDESCRIPTION: Examples of valid and invalid Redis commands for authentication in EMQX 5.x. Only HMGET commands are supported, and they must return password_hash or password fields.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# bad\nGET emqx_user:${username}\n# bad\nHMGET emqx_user:${username} passwd\n\n# good\nHMGET emqx_user:${username} password_hash\n\n# good\nHMGET emqx_user:${username} password_hash is_superuser\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with AWS CLI\nDESCRIPTION: Docker command to run AWS CLI and create a DynamoDB table using the previously defined JSON structure.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $PWD:/dynamo_data \\\n    -e AWS_ACCESS_KEY_ID=root \\\n    -e AWS_SECRET_ACCESS_KEY=public \\\n    -e AWS_DEFAULT_REGION=us-west-2 \\\n    amazon/aws-cli:2.15.57 dynamodb create-table \\\n    --cli-input-json file:///dynamo_data/mqtt_msg.json \\\n    --endpoint-url http://host.docker.internal:8000\n```\n\n----------------------------------------\n\nTITLE: Starting InfluxDB Service\nDESCRIPTION: Command to start the InfluxDB service using systemd. This initializes the time-series database that will store system metrics collected by collectd.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start influxdb\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Listener Configuration Fix in EMQX 4.3.10\nDESCRIPTION: References a GitHub pull request that fixes an issue where EMQX couldn't start after updating the listener configuration through Dashboard in version 4.3.10.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6121](https://github.com/emqx/emqx/pull/6121)\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Special Characters in InfluxDB Line Protocol\nDESCRIPTION: Support for escaped special characters in InfluxDB data bridge write_syntax. This allows using special characters in string elements in accordance with InfluxDB line protocol requirements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_48\n\nLANGUAGE: hocon\nCODE:\n```\nwrite_syntax = \"measurement,tag_key=tag_value field_key=\\\"escaped value\\\" timestamp\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Port in EMQX Configuration\nDESCRIPTION: Example configuration for modifying the TCP listener port in the emqx.conf file. Note that this change will not be reflected correctly on the Dashboard in EMQX 5.1.0.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.1.md#2025-04-20_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nlisteners.tcp.default {\n    bind = \"0.0.0.1884\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service\nDESCRIPTION: Command to start the Grafana server using systemd. This initializes the visualization platform that will display the performance metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start grafana-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Span Overload Protection in EMQX\nDESCRIPTION: YAML configuration to manage trace span overload by increasing the maximum queue size and reducing the scheduled delay for exporting spans. Helps prevent loss of trace spans during high volume message processing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nopentelemetry {\n  traces {\n    max_queue_size = 50000\n    scheduled_delay = 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX\nDESCRIPTION: MQTT command to publish a test message to the 't/1' topic using MQTTX CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello HStreamDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Rules in Erlang\nDESCRIPTION: This snippet shows how to define authorization rules using Erlang syntax in EMQX 5.1. It includes rules for allowing dashboard users to subscribe to system topics and allowing localhost to access all topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-from-v4.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{allow, {username, {re, \"^dashboard$\"}}, subscribe, [\"$SYS/#\"]}.\n{allow, {ipaddr, \"127.0.0.1\"}, all, [\"$SYS/#\", \"#\"]}.\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana\nDESCRIPTION: This snippet shows how to install Grafana using yum on a Linux system.  It downloads the Grafana RPM package and installs it.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y https://dl.grafana.com/oss/release/grafana-10.0.0-1.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: MQTT-SN Gateway Configuration\nDESCRIPTION: Configuration settings for MQTT-SN gateway including gateway ID, broadcast settings, QoS support, and subscription management.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_9\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.mqttsn {\n  gateway_id: 1\n  broadcast: false\n  enable_qos3: true\n  subs_resume: false\n  predefined: []\n  mountpoint: \"\"\n  enable: true\n  enable_stats: true\n  idle_timeout: 30s\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OCSP Stapling in EMQX using HCL\nDESCRIPTION: This code snippet demonstrates how to configure OCSP Stapling for an SSL listener in EMQX by modifying the `emqx.conf` configuration file. It includes settings for enabling OCSP Stapling, specifying the issuer certificate path, OCSP responder URL, refresh interval, and HTTP timeout.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/ocsp.md#2025-04-20_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlisteners.ssl.default {\n  bind = \"0.0.0.0:8883\"\n  max_connections = 512000\n  ssl_options {\n    keyfile = \"/etc/emqx/certs/server.key\"\n    certfile = \"/etc/emqx/certs/server.pem\"\n    cacertfile = \"/etc/emqx/certs/ca.pem\"\n    ocsp {\n      enable_ocsp_stapling = true\n      issuer_pem = \"/etc/emqx/certs/ocsp-issuer.pem\"\n      responder_url = \"http://ocsp.responder.com:9877\"\n      refresh_interval = 15m\n      refresh_http_timeout = 15s\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for MQTT-SN Sleep Mode and KeepAlive Conflict Fix in EMQX 4.3.2\nDESCRIPTION: References a GitHub pull request that fixes the conflict between MQTT-SN sleep mode and KeepAlive mechanism in EMQX version 4.3.2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_53\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4842](https://github.com/emqx/emqx/pull/4842)\n```\n\n----------------------------------------\n\nTITLE: Setting FIN-WAIT-2 Socket Timeout\nDESCRIPTION: This snippet configures the timeout for FIN-WAIT-2 sockets. Reducing this timeout can free up resources faster but might impact connectivity if the connection is still needed.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.ipv4.tcp_fin_timeout=15\n```\n```\n\n----------------------------------------\n\nTITLE: Comparing HTTP API Response Formats in EMQX 4.x and 5.x\nDESCRIPTION: Demonstrates the differences in HTTP API response formats between EMQX 4.x and 5.x for both successful and error responses. The 5.x version removes the 'code' field for successful responses and uses HTTP status codes for errors.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 4.x\n## HTTP StatusCode = 200\nGET /api/v4/rules/my_rule\n{ \"code\": 0, \"data\": { ... } }\n\n# 5.1\n## HTTP StatusCode = 200\nGET /api/v5/rules/my_rule\n{ ... }\n\n# 4.x\n## HTTP StatusCode = 200\nGET /api/v4/rules/my_rule\n{ \"code\": 404, \"message\": \"Not Found\" }\n\n# 5.1\n## HTTP StatusCode = 404\nGET /api/v5/rules/my_rule\n{ \"code\": \"NOT_FOUND\", \"message\": \"Rule Id Not Found\" }\n```\n\n----------------------------------------\n\nTITLE: MongoDB Configuration Example - EMQX 4.4\nDESCRIPTION: Complete MongoDB configuration example for EMQX 4.4 with authentication and connection settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nauth.mongo.type = single\nauth.mongo.srv_record = false\nauth.mongo.server = 127.0.0.1:27017\nauth.mongo.pool = 8\nauth.mongo.username = user\nauth.mongo.password = pass\nauth.mongo.auth_source = admin\nauth.mongo.database = mqtt\nauth.mongo.query_timeout = 5s\n\nauth.mongo.ssl = on\nauth.mongo.ssl.cacertfile = path/to/your/cafile.pem\nauth.mongo.ssl.certfile = path/to/your/certfile\nauth.mongo.ssl.keyfile = path/to/your/keyfile\nauth.mongo.ssl.verify = true\nauth.mongo.ssl.server_name_indication = mymongo\n\nauth.mongo.w_mode = unsafe\n\nauth.mongo.topology.pool_size = 1\nauth.mongo.topology.max_overflow = 0\n\n\nauth.mongo.acl_query.collection = mqtt_user\nauth.mongo.acl_query.selector = username=%u, clientid=%c\n```\n\n----------------------------------------\n\nTITLE: Erlang Time Warp Mode Configuration\nDESCRIPTION: Configuration setting for Erlang runtime system time correction using multi-time-warp mode.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_36\n\nLANGUAGE: erlang\nCODE:\n```\nmulti-time-warp\n```\n\n----------------------------------------\n\nTITLE: Stopping Load Rebalancing in EMQX\nDESCRIPTION: CLI command to stop the ongoing load rebalancing process in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl rebalance stop\n```\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance stop\nRebalance stopped\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Database Authentication in EMQX 4.4\nDESCRIPTION: Example configuration for built-in database (Mnesia) authentication in EMQX 4.4. It sets the password hashing algorithm to SHA256.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nauth.mnesia.password_hash = sha256\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Built-in Database ACL Performance in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that improves performance for built-in database ACL (emqx_auth_mnesia) in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5885](https://github.com/emqx/emqx/pull/5885)\n```\n\n----------------------------------------\n\nTITLE: Client Disconnected Event JSON Payload in EMQX\nDESCRIPTION: JSON payload structure for client disconnected events published to $SYS/brokers/${node}/clients/${clientid}/disconnected. Contains information about the client that disconnected including the reason for disconnection.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/mqtt-system-topics.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"username\": \"foo\",\n    \"ts\": 1625572213873,\n    \"sockport\": 1883,\n    \"reason\": \"tcp_closed\",\n    \"proto_ver\": 4,\n    \"proto_name\": \"MQTT\",\n    \"ipaddress\": \"127.0.0.1\",\n    \"disconnected_at\": 1625572213873,\n    \"clientid\": \"emqtt-8348fe27a87976ad4db3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Node Evacuation in EMQX\nDESCRIPTION: Command to stop an ongoing node evacuation process.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/rebalancing.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl rebalance stop\n```\n\n----------------------------------------\n\nTITLE: EMQX Gateway Authentication Support Matrix\nDESCRIPTION: Table showing authentication method support across different EMQX gateways. Includes support status for various authentication methods like HTTP Server, Built-in Database, MySQL, MongoDB, etc.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/extensions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|            | HTTP Server | Built-in Database | MySQL | MongoDB | PostgreSQL | Redis | DTLS | JWT  | Scram | LDAP |\n| ---------- | ----------- | ----------------- | ----- | ------- | ---------- | ----- | ---- | ---- | ----- | ---- |\n| STOMP      | ✔︎           | ✔︎                 | ✔︎     | ✔︎       | ✔︎          | ✔︎     | ✔︎    | ✔︎    |       |      |\n| CoAP       | ✔︎           | ✔︎                 | ✔︎     | ✔︎       | ✔︎          | ✔︎     | ✔︎    | ✔︎    |       |      |\n| ExProto    | ✔︎           | ✔︎                 | ✔︎     | ✔︎       | ✔︎          | ✔︎     | ✔︎    | ✔︎    |       |      |\n| MQTT-SN    | ✔︎           |                   |       |         |            |       |      |      |       |      |\n| LwM2M      | ✔︎           |                   |       |         |            |       |      |      |       |      |\n| ExProto    | ✔︎           | ✔︎                 | ✔︎     | ✔︎       | ✔︎          | ✔︎     |      | ✔︎    |       | ✔︎    |\n| OCPP       | ✔︎           | ✔︎                 | ✔︎     | ✔︎       | ✔︎          | ✔︎     |      | ✔︎    |       | ✔︎    |\n| GB/T 32960 | ✔︎           |                   |       |         |            |       |      |      |       |      |\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for Unicode Character Support in EMQX\nDESCRIPTION: Example of a SQL query demonstrating improved Unicode character support in data files, allowing storage and retrieval of non-ASCII characters like Chinese.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/1\" WHERE clientid = \"-测试专用-\"\n```\n\n----------------------------------------\n\nTITLE: Log message example\nDESCRIPTION: An example of a log message that may appear due to late replies during slow synchronous bridge calls. While harmless, these messages can cause unnecessary concern for users.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"2023-04-19T18:24:35.350233+00:00 [error] msg: unexpected_info, mfa: emqx_channel:handle_info/2, line: 1278, peername: 172.22.0.1:36384, clientid: caribdis_bench_sub_1137967633_4788, info: {#Ref<0.408802983.1941504010.189402>,{ok,200,[{<<\\\"cache-control\\\">>,<<\\\"max-age=0, ...\\\">>}} \"\n```\n\n----------------------------------------\n\nTITLE: Fixing MQTT Packet Processing Issues in Erlang\nDESCRIPTION: These fixes address issues with MQTT packet receiving count and heartbeat packet processing in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_59\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx#4425](https://github.com/emqx/emqx/pull/4425)\nGithub Issue: [emqx#4370](https://github.com/emqx/emqx/issues/4370)\n```\n\n----------------------------------------\n\nTITLE: Gateway SSL Listener Configuration\nDESCRIPTION: Configuration options for SSL listeners including TCP socket options, proxy protocol settings, SSL options and connection management.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\ngateway:ssl_listener.acceptors = 16\ngateway:ssl_listener.enable = true\ngateway:ssl_listener.max_connections = 1024\ngateway:ssl_listener.max_conn_rate = 1000\ngateway:ssl_listener.enable_authn = true\n```\n\n----------------------------------------\n\nTITLE: MongoDB Authentication Configuration in EMQX 5.x\nDESCRIPTION: Configuration example for MongoDB authentication in EMQX 5.x, showing how to specify the super user field for authorization elevation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/upgrade-from-v4.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nauthentication = [\n  {\n    ...\n    mechanism = \"password_based\"\n    backend = \"mongodb\"\n    # is_superuser_field = \"is_superuser\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example of Complete Discover Command Payload for LwM2M\nDESCRIPTION: Complete JSON payload example for a Discover command requesting resource information for path /3/0, with request ID 2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 2,\n  \"msgType\": \"discover\",\n  \"data\": {\n    \"path\": \"/3/0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Select All Fields from a Specific Topic\nDESCRIPTION: This SQL query selects all fields from messages published to the topic 't/a'. It's a simple example of retrieving all available data from a specific source.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/a\"\n```\n\n----------------------------------------\n\nTITLE: Starting InfluxDB Container\nDESCRIPTION: Docker command to start an InfluxDB container instance on port 8086\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-influxdb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name influxdb -p 8086:8086 influxdb:2.5.1\n```\n\n----------------------------------------\n\nTITLE: Logging Throttled Messages in Erlang\nDESCRIPTION: Example of a log message indicating the number of throttled logs in EMQX. This helps track when logs are being dropped due to exceeding the configured throttling limit.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\nlog throttled during last 60s, dropped_msg: #{{emqx_channel,1400} => #{msg => \"Client ~s (Username: '~s') login failed for ~0p\", count => 33}}\n```\n\n----------------------------------------\n\nTITLE: Starting collectd Service\nDESCRIPTION: Command to start the collectd service using systemd. This begins the collection of system metrics that will be sent to InfluxDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start collectd\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repository\nDESCRIPTION: Commands to clone the EMQX usage example repository and navigate to the HAProxy configuration directory.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/emqx/emqx-usage-example\ncd emqx-usage-example/mqtt-lb-haproxy\n```\n\n----------------------------------------\n\nTITLE: Substring Search - find Function\nDESCRIPTION: Searches for a substring within a string and returns the remaining part after the match. Supports different search directions.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind('..., Value: 1.2', 'Value:') = 'Value: 1.2'\nfind('..., Value: 1.2', 'Data') = ''\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Example - EMQX 4.4\nDESCRIPTION: Complete Redis configuration example for EMQX 4.4 showing authentication and SSL settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nauth.redis.type = single\nauth.redis.server = 127.0.0.1:6379\nauth.redis.pool = 8\nauth.redis.database = 0\nauth.redis.password = pass\nassword salt\nauth.redis.acl_cmd = HGETALL mqtt_user:%u\n\nauth.redis.password_hash = salt,sha256\n\nauth.redis.ssl = on\nauth.redis.ssl.cacertfile = path/to/your/cafile.pem\nauth.redis.ssl.certfile = path/to/your/certfile\nauth.redis.ssl.keyfile = path/to/your/keyfile\nauth.redis.ssl.verify = true\nauth.redis.ssl.server_name_indication = myredis\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Cluster Call Fix in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes an issue where calls between clusters may cause the client process to lose response in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6062](https://github.com/emqx/emqx/pull/6062)\n```\n\n----------------------------------------\n\nTITLE: Successful Registration Response Example\nDESCRIPTION: JSON response format for a successful device registration with authentication code.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/jt808.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"authcode\": \"132456789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Snowflake Role\nDESCRIPTION: SQL commands to create a role for managing Snowflake resources and assign it to the user.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE ROLE snowpipe;\n\nGRANT USAGE ON DATABASE testdatabase TO ROLE snowpipe;\nGRANT USAGE ON SCHEMA testdatabase.public TO ROLE snowpipe;\nGRANT INSERT, SELECT ON testdatabase.public.emqx TO ROLE snowpipe;\nGRANT READ, WRITE ON STAGE testdatabase.public.emqx TO ROLE snowpipe;\nGRANT OPERATE, MONITOR ON PIPE testdatabase.public.emqx TO ROLE snowpipe;\nGRANT ROLE snowpipe TO USER snowpipeuser;\nALTER USER snowpipeuser SET DEFAULT_ROLE = snowpipe;\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message for Rule Testing using MQTTX\nDESCRIPTION: MQTT publish command using MQTTX to send a test message to the 't/1' topic. This message will trigger the EMQX rule and Datalayers Sink.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"temp\": \"23.5\", \"hum\": \"62\", \"precip\": 2}'\n```\n\n----------------------------------------\n\nTITLE: Formatting Delete Request Data in JSON for LwM2M Server\nDESCRIPTION: Defines the structure of the RequestData for a Delete operation in LwM2M. It includes the path with ObjectID and InstanceID.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/lwm2m.md#2025-04-20_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"{?ObjectID}/{?InstanceID}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Schema in Erlang\nDESCRIPTION: Example of decoding data using a schema in Erlang. It takes a schema name and bytes as input, returning a decoded Map.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nschema_decode(SchemaName, Bytes) -> Map\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Events in EMQX Rule SQL\nDESCRIPTION: Shows how to attach rules to events, specifically getting the IP address and port number when a specific client initiates a connection to EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-syntax.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT peername as ip_port FROM \"$events/client_connected\" WHERE clientid = 'c1'\n```\n\n----------------------------------------\n\nTITLE: MongoDB Authorization Data Example in JSON\nDESCRIPTION: This snippet demonstrates the format for authorization data in MongoDB for EMQX 5.x. It includes fields for username, client ID, IP address, permission, action, and topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-from-v4.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n      \"username\": \"emqx_u\",\n      \"clientid\": \"emqx_c\",\n      \"ipaddress\": \"127.0.0.1\",\n      \"permission\": \"allow\",\n      \"action\": \"all\",\n      \"topics\": [\"#\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Confluent Cloud CLI\nDESCRIPTION: Command to install the Confluent Cloud CLI tool for managing Confluent Cloud resources.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL --http1.1 https://cnfl.io/cli | sh -s -- -b /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Shared Subscription Load Balancing Example in EMQ 2.0\nDESCRIPTION: Demonstrates the shared subscription pattern using '$queue' or '$share/<group>/' prefix to enable load balancing between multiple subscribers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v3.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n---------\n|       | --Msg1--> Subscriber1\nPublisher--Msg1,Msg2,Msg3-->|  EMQ  | --Msg2--> Subscriber2\n|       | --Msg3--> Subscriber3\n---------\n```\n\n----------------------------------------\n\nTITLE: Fixing Wrong Port Used by Remsh in Erlang\nDESCRIPTION: This fix addresses an issue where the wrong port was being used by remsh in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_56\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx#4016](https://github.com/emqx/emqx/pull/4016)\n```\n\n----------------------------------------\n\nTITLE: Configuring Limiter - EMQX\nDESCRIPTION: This enhancement simplifies the configuration of limiters in EMQX.  It enables quicker setup of node-level message publishing limits.  This involves updating the `configs/limiter` API to accommodate the refactoring.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Displaying Unhealthy Docker Container Status in EMQX\nDESCRIPTION: Output of docker-compose ps command showing an EMQX container with unhealthy status despite being up and running. This occurs when the health check command fails to execute properly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose ps\nNAME      IMAGE                         COMMAND                  SERVICE   CREATED          STATUS                    PORTS\nemqx1     emqx/emqx:latest   \"/usr/bin/docker-ent…\"   emqx     120 seconds ago   Up 110 seconds (unhealthy)   0.0.0.0:1883->1883/tcp, :::1883->1883/tcp, 0.0.0.0:18083->18083/tcp, :::18083->18083/tcp\n```\n\n----------------------------------------\n\nTITLE: EMQX Hot Configuration Log Example\nDESCRIPTION: Log message format showing differences between listener configurations in hot configuration module\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[EMQX_HOT_CONF] There is a difference between the listener conf in the hot conf module and the one currently in use at runtime. Please restart the listener at an appropriate time to ensure the configuration is correctly applied. listener: mqtt:tcp:external, conf_in_use: #{...}, hot_conf: #{...}\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT.js via npm\nDESCRIPTION: Command to install MQTT.js using npm package manager.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/javascript.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mqtt\n```\n\n----------------------------------------\n\nTITLE: Installing HAProxy\nDESCRIPTION: This command installs HAProxy on Ubuntu using the `apt` package manager.  It requires `sudo` privileges to install software.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install haproxy\n```\n\n----------------------------------------\n\nTITLE: Document Differentiation Syntax\nDESCRIPTION: Shows the syntax for differentiating between Broker and Enterprise documentation content.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/DOCS-WRITING-GUIDE-EN.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Broker Docs\n{% emqxce %}\n  contents\n{% endemqxce %}\n\n# Enterprise Docs\n{% emqxee %}\n  contents\n{% endemqxee %}\n```\n\n----------------------------------------\n\nTITLE: Loading Module via EMQX CLI Command\nDESCRIPTION: Command line example showing how to load the emqx_mod_delayed module using the EMQX CLI. The command returns a success message when the module is loaded properly.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/advanced/internal-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./emqx_ctl modules load emqx_mod_delayed\nModule emqx_mod_delayed loaded successfully.\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for MongoDB Host Name Support in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that allows MongoDB resources to use host names in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#6035](https://github.com/emqx/emqx/pull/6035)\n```\n\n----------------------------------------\n\nTITLE: EMQX License Key Configuration\nDESCRIPTION: EMQX now supports loading license keys from a specified file using the `license.key` configuration setting with the `\"file://\"` prefix. Additionally, the license can be reverted to the default trial license by setting `license.key = default`. These options enhance license key management and simplify the process of returning to the trial license.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"file://\"\n```\n\nLANGUAGE: text\nCODE:\n```\nlicense.key = default\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Authentication Configuration\nDESCRIPTION: Core PostgreSQL authentication mechanism and backend configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n  mechanism = password_based\n  backend = postgresql\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL Query\nDESCRIPTION: SQL query to select all messages from t/# topic for processing\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Listener via HTTP API\nDESCRIPTION: Example of starting an EMQX listener named 'demo' using the HTTP API. This API endpoint takes the listener type and name as parameters in the URL path.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/listeners.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n     'http://127.0.0.1:18083/api/v5/listeners/tcp%3Ademo/start' \\\n     -H 'accept: */*' \\\n     -d ''\n```\n\n----------------------------------------\n\nTITLE: Installing Confluent Cloud CLI\nDESCRIPTION: Command to install the Confluent Cloud CLI tool to manage Confluent clusters\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/confluent-sink.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL --http1.1 https://cnfl.io/cli | sh -s -- -b /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Displaying Erlang Cookie Warning Message in EMQX Logs\nDESCRIPTION: The warning message that appears in EMQX logs when the default Erlang cookie is in use. This indicates a potential security issue as all EMQX nodes use the same default cookie value.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/deployment.md#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING: Default (insecure) Erlang cookie is in use.\nWARNING: Configure node.cookie in /usr/lib/emqx/etc/emqx.conf or override from environment variable EMQX_NODE__COOKIE\nWARNING: NOTE: Use the same cookie for all nodes in the cluster.\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX\nDESCRIPTION: Command to publish a test message to topic 't/1' using MQTTX CLI.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/snowflake.md#2025-04-20_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Snowflake\" }'\n```\n\n----------------------------------------\n\nTITLE: Creating New Community Edition Release\nDESCRIPTION: Shell commands to create and push a new release tag for the community edition of EMQX documentation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNEW_TAG=\"$(./cut-release.sh ce)\"\ngit push origin \"${NEW_TAG}\"\n```\n\n----------------------------------------\n\nTITLE: HTML Comparison Table for MQTT and Connectivity Features Across EMQX Products\nDESCRIPTION: An HTML table that compares MQTT and connectivity features across different EMQX deployments. The table uses check and cross marks to indicate feature availability for each EMQX offering, organized by feature categories including MQTT versions, transport protocols, gateway support, and industry-specific protocols.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/feature-comparison.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center;\">\n<table>\n<thead>\n  <tr>\n    <th rowspan=\"2\">MQTT &amp; Connectivity<br></th>\n    <th colspan=\"2\">Self-Hosted<br></th>\n    <th colspan=\"2\">MQTT as a Service<br></th>\n    <th rowspan=\"2\">Notes and Links<br></th>\n  </tr>\n  <tr>\n    <td>EMQX Open Source</td>\n    <td>EMQX Enterprise</td>\n    <td>EMQX Cloud Serverless</td>\n    <td>EMQX Dedicated Cloud</td>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><b>MQTT 3.x</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT 5.0</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT Retainer</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT over TCP</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT over TLS</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT over WebSocket</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT over QUIC</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td>EMQX is now the only MQTT broker in the world that supports QUIC transport.</td>\n  </tr>\n  <tr>\n    <td><b>LB (Proxy Protocol)</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td>Proxy protocol v1, v2</td>\n  </tr>\n  <tr>\n    <td><b>LB (Custom)</b></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td>GmSSL<br>Smooth connection migration</td>\n  </tr>\n  <tr>\n    <td><b>IPv6 Support</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>Multi-protocol Gateway</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>MQTT-SN</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>STOMP</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>CoAP</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>LwM2M</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>ExProto</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>OCPP</b></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>JT/808</b></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td><b>GBT32960</b></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td> </td>\n  </tr>\n</tbody>\n</table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Random SQL Functions for Rule Engine (SQL)\nDESCRIPTION: Added three new random SQL functions to the rule engine: random(), uuid_v4(), and uuid_v4_no_hyphen() for generating random numbers and UUIDs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nrandom()\nuuid_v4()\nuuid_v4_no_hyphen()\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd Network Plugin\nDESCRIPTION: This snippet configures the collectd network plugin to send collected metrics to a specified InfluxDB server. The `{Host}` placeholder should be replaced with the actual IP address of the InfluxDB server.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLoadPlugin network\n<Plugin network>\n  Server \"{Host}\" \"25826\"\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Shows the file structure organization for documentation files using bash tree format.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/DOCS-WRITING-GUIDE-EN.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── en_US\n│   ├── README.md\n│   └── introduction\n│       └── checklist.md\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for HTTP Authentication Superuser Requests in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that disables superuser requests by default in the HTTP authentication plugin in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5567](https://github.com/emqx/emqx/pull/5567)\n```\n\n----------------------------------------\n\nTITLE: Loading Modules with observer load Command\nDESCRIPTION: Ensure a specified module is loaded on all nodes in the EMQX cluster, useful when ensuring module availability across the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl observer load Mod\nLoaded 'Mod' module on []: ok\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Bootstrap File in EMQX\nDESCRIPTION: Configuration for specifying the location of a bootstrap file containing API keys in the emqx.conf file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/api.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napi_key = {\n  bootstrap_file = \"etc/default_api_key.conf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Username to Logs in MQTT\nDESCRIPTION: This snippet highlights the addition of a `username` log field which includes the username of connected MQTT clients if available, thereby enhancing traceability and log detail.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Log entry with username\nlogger.info(`Client connected: ${username}`);\n```\n\n----------------------------------------\n\nTITLE: LwM2M Gateway Basic Configuration\nDESCRIPTION: Core configuration parameters for the LwM2M protocol gateway including lifetime settings, QMode configuration, and automatic observation settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_8\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.lwm2m {\n  xml_dir: string\n  lifetime_min: 15s\n  lifetime_max: 86400s\n  qmode_time_window: 22s\n  auto_observe: false\n  update_msg_publish_condition: contains_object_list\n  enable: true\n  enable_stats: true\n  idle_timeout: 30s\n}\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE with Multiple Expressions in FOREACH\nDESCRIPTION: This SQL query demonstrates the usage of multiple expressions within the FOREACH clause. It first selects 'payload.data' as 'data' and then selects 'data.sensors' as 's'. This allows the query to traverse multiple levels of nesting before iterating over the final array.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.data as data\n    data.sensors as s\n...\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX Service\nDESCRIPTION: Command to start the EMQX service using systemd. This initializes the MQTT broker for testing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Client Disconnected Event JSON Output Example\nDESCRIPTION: Example JSON output demonstrating a client disconnection event\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-events-and-fields.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"u_emqx\",\n  \"reason\": \"normal\",\n  \"node\": \"emqx@127.0.0.1\",\n  \"disconnected_at\": 1645003578536,\n  \"clientid\": \"c_emqx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing EMQX Documentation\nDESCRIPTION: Shell commands to preview EMQX documentation locally. Supports both community (ce) and enterprise (ee) editions on specified ports.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# for community\n./preview.sh ce 8080\n\n# for enterprise\n./preview.sh ee 8080\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - License Connection Settings\nDESCRIPTION: Configuration example for license connection watermark alarms in emqx.conf\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nlicense.connection_high_watermark_alarm\nlicense.connection_low_watermark_alarm\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a GitHub pull request using Markdown syntax. It links to a specific pull request that fixed the 'resource_opts' configuration schema for the GCP PubSub Producer connector.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/breaking-changes-ee-5.5.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#12283](https://github.com/emqx/emqx/pull/12283)\n```\n\n----------------------------------------\n\nTITLE: EMQ 2.0 Configuration Example\nDESCRIPTION: Example of the new 'K = V' configuration format introduced in EMQ 2.0 for the etc/emq.conf file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v3.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode.name = emqttd@127.0.0.1\n\n...\n\nmqtt.listener.tcp = 1883\n\n...\n```\n\n----------------------------------------\n\nTITLE: OCPP Client Connection Logs\nDESCRIPTION: Example log output showing successful connection of an OCPP client to the gateway.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/gateway/ocpp.md#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nINFO[2023-12-01T03:08:39Z] connecting to server logger=websocket\nINFO[2023-12-01T03:08:39Z] connected to server as chargePointSim logger=websocket\nINFO[2023-12-01T03:08:39Z] connected to central system at ws://172.31.1.103:33033/ocpp\nINFO[2023-12-01T03:08:39Z] dispatched request 1200012677 to server logger=ocppj\n```\n\n----------------------------------------\n\nTITLE: Executing Authentication Hook in EMQX ExHook (Erlang)\nDESCRIPTION: Demonstrates the initial value passed to the authentication hook in EMQX ExHook. It sets the default AccIn value with is_superuser set to false.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% Default AccIn\n{ok, #{is_superuser => false}}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Index\nDESCRIPTION: This command updates the package index on Ubuntu using the `apt` package manager. This ensures that you are installing the latest version of HAProxy and its dependencies.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Scrape OpenTelemetry Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from the OpenTelemetry Collector, including both EMQX metrics and collector metrics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/observability/opentelemetry/metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# prometheus.yaml\nscrape_configs:\n  - job_name: 'otel-collector'\n    scrape_interval: 10s\n    static_configs:\n      - targets: ['otel-collector:8889'] # emqx metrics\n      - targets: ['otel-collector:8888'] # collector metrics\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQL Function in EMQX Rule Engine\nDESCRIPTION: Example of using a user-defined SQL function in the EMQX rule engine. The function 'func' is defined in a custom module 'emqx_rule_funcs1' and can be used in SQL queries for rules.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT emqx_rule_funcs1.func() FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to EMQX Documentation\nDESCRIPTION: Git commands for committing changes with a descriptive message and pushing them to your forked repository. These commands are used after making edits to documentation files locally.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/CONTRIBUTING-EN.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a -m 'docs(WHICH_DOC): fix xxxx in WHICH_DOC'\ngit push origin my-first-pr-branch-for-emqx-4.3\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Insertion Example - JavaScript\nDESCRIPTION: Example of inserting an authorization rule into MongoDB to deny a specific user from publishing to a topic with QoS 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/mongodb.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.mqtt_acl.insertOne(\n  {\n      \"username\": \"emqx_u\",\n      \"clientid\": \"emqx_c\",\n      \"ipaddress\": \"127.0.0.1\",\n      \"permission\": \"deny\",\n      \"action\": \"publish\",\n      \"qos\": 1,\n      \"topics\": [\"t/1\"]\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Log Example - Before Improvement\nDESCRIPTION: Example of error log format before the listener improvement for file descriptor exhaustion.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n[error] Accept error on 0.0.0.0:1883: emfile\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publishing\nDESCRIPTION: MQTTX command to publish test data to trigger the rule\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"temp\": \"23.5\", \"hum\": \"62\", \"precip\": 2}'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Settings for ExHook in EMQX\nDESCRIPTION: EMQX now exposes 4 TCP-related configuration items for the underlying gRPC connection of ExHook: KeepAlive, TCP_NODELAY, SO_RCVBUF and SO_SNDBUF.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_8\n\nLANGUAGE: Erlang\nCODE:\n```\n% Example ExHook TCP configuration\n{exhook, [\n  {tcp_options, [\n    {keepalive, true},\n    {nodelay, true},\n    {recbuf, 1024},\n    {sndbuf, 1024}\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Plugins Using EMQX CLI\nDESCRIPTION: Commands to start and stop EMQX plugins. These commands only affect the executing node, not other nodes within the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.1.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl plugins stop emqx_plugin_template-5.0.0\n./bin/emqx ctl plugins start emqx_plugin_template-5.0.0\n```\n\n----------------------------------------\n\nTITLE: Example Rule Engine SQL Query Fixes\nDESCRIPTION: Examples of rule engine SQL queries that were fixed to handle payload field duplication issues when using foreach and select statements.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH payload.sensors FROM \"t/#\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload.sensors, * FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for HTTP KeepAlive Fix in EMQX 4.3.7\nDESCRIPTION: References a GitHub pull request that fixes an issue where the current HTTP KeepAlive behavior may cause some servers to disconnect in EMQX version 4.3.7.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5395](https://github.com/emqx/emqx/pull/5395)\n```\n\n----------------------------------------\n\nTITLE: EMQ 2.0 Environment Variables Example\nDESCRIPTION: Demonstrates how to configure EMQ node settings using environment variables including node name, security cookie and ports.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v3.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEMQ_NODE_NAME=emqttd@127.0.0.1\nEMQ_NODE_COOKIE=emq_dist_cookie\nEMQ_MAX_PORTS=65536\nEMQ_TCP_PORT=1883\nEMQ_SSL_PORT=8883\nEMQ_HTTP_PORT=8083\nEMQ_HTTPS_PORT=8084\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message to topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello HStreamDB\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection Path\nDESCRIPTION: Defines the WebSocket MQTT protocol path with default value of '/mqtt' for establishing WebSocket connections\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nws_opts.mqtt_path: \"/mqtt\"\n```\n\n----------------------------------------\n\nTITLE: EMQ 2.0 Configuration File Example\nDESCRIPTION: Example of EMQ 2.0's k = v syntax configuration showing node name and MQTT client settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n## Node name\nnode.name = emqttd@127.0.0.1\n...\n## Max ClientId Length Allowed.\nmqtt.max_clientid_len = 1024\n...\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Schema for Temperature Validation in EMQX\nDESCRIPTION: This JSON Schema defines validation rules for a temperature object. It requires a 'temp' property that must be an integer greater than or equal to 101.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"temp\": {\n      \"type\": \"integer\",\n      \"minimum\": 101\n    }\n  },\n  \"required\": [\n    \"temp\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue and Pull Request for CoAP Gateway URI Resolution Fix in EMQX 4.3.4\nDESCRIPTION: References a GitHub issue and pull request that fix an issue where the CoAP gateway cannot resolve certain URIs in EMQX version 4.3.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\nGithub Issue: [emqx#5062](https://github.com/emqx/emqx/issues/5062)\nGithub PR: [emqx#5059](https://github.com/emqx/emqx/pull/5059)\n```\n\n----------------------------------------\n\nTITLE: Installing collectd on CentOS/RHEL\nDESCRIPTION: Command to install collectd on the EMQX server. Collectd will gather system metrics such as CPU usage, network traffic, and memory usage during performance testing.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum install collectd -y\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT.js globally and using CLI\nDESCRIPTION: Commands to install MQTT.js globally and use its command-line interface.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/javascript.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mqtt -g\n\nmqtt help\n\n> MQTT.js command line interface, available commands are:\n\n  * publish     publish a message to the broker\n  * subscribe   subscribe for updates from the broker\n  * version     the current MQTT.js version\n  * help        help about commands\n\n> Launch 'mqtt help [command]' to know more about the commands.\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Cluster Discovery in EMQX\nDESCRIPTION: This configuration sets the cluster discovery strategy to manual mode, which requires nodes to be joined to the cluster explicitly using the './bin/emqx_ctl join <Node>' command.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster.discovery = manual\n```\n\n----------------------------------------\n\nTITLE: ExProto ConnectionHandler Configuration in EMQX 5.0\nDESCRIPTION: Configuration for ExProto's ConnectionHandler in EMQX 5.0, showing the new structure with address and SSL options at the gateway level rather than per listener.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_8\n\nLANGUAGE: hocon\nCODE:\n```\ngateway.exproto {\n  handler {\n    address = \"http://127.0.0.1:9001\"\n    ssl_options {enable = false}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message to MQTT topic t/1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Kafka\" }'\n```\n\n----------------------------------------\n\nTITLE: LwM2M Gateway Warning Log Example\nDESCRIPTION: Example of a warning log message format when LwM2M Gateway ignores unknown resources during observation\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\n2023-03-28T18:50:27.771123+08:00 [warning] msg: ignore_observer_resource, mfa: emqx_lwm2m_session:observe_object_list/3, line: 522, peername: 127.0.0.1:56830, clientid: testlwm2mclient, object_id: 31024, reason: no_xml_definition\n```\n\n----------------------------------------\n\nTITLE: Grafana Dashboard JSON Configuration\nDESCRIPTION: JSON configuration snippet showing the host tag condition in Grafana dashboard that needs to be modified with the correct hostname.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/performance/benchmark-xmeter.md#2025-04-20_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"condition\": \"AND\",\n  \"key\": \"host::tag\",\n  \"operator\": \"=\",\n  \"value\": \"ecs-afc3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Functions in EMQX Rule Engine\nDESCRIPTION: Examples of using various mathematical functions provided by the EMQX rule engine, including absolute value, trigonometric functions, and numerical operations.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nabs(-12) = 12\nabs(-1.2) = 1.2\n\nacos(0.5) = 1.0471975511965976\n\nacosh(1.5) = 0.9624236501192069\n\nasin(0.5) = 0.5235987755982988\n\nasinh(0.5) = 0.48121182505960347\n\natan(0.5) = 0.46364760900080615\n\natanh(0.5) = 0.5493061443340549\n\nceil(0.8) = 1\n\ncos(0.5) = 0.8775825618903728\n\ncosh(0.5) = 1.1276259652063807\n\nexp(1) = 2.718281828459045\n\nfloor(3.6) = 3\n\nfmod(6.5, 2.5) = 1.5\n\nlog(7.38905609893065) = 2.0\n\nlog10(100) = 2.0\n\nlog2(8) = 3.0\nlog2(8.5) = 3.0874628412503395\n\nround(4.5) = 5\n\npower(2, 3) = 8.0\n\nrandom() = 0.5400050092601868\n\nsin(0.5) = 0.479425538604203\n\nsinh(0.5) = 0.5210953054937474\n\nsqrt(9) = 3.0\n\ntan(0.5) = 0.5463024898437905\n\ntanh(0.5) = 0.46211715726000974\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Cloud Marketplace Installation\nDESCRIPTION: Simple markdown header indicating installation instructions for cloud marketplace deployments\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-marketplace.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Install from cloud Marketplace\n```\n\n----------------------------------------\n\nTITLE: Logging QUIC Connection Shutdown Timeout Warning\nDESCRIPTION: Example of a warning log message that was produced when QUIC connections had a 5-second timeout for graceful shutdown. This has been reduced to improve performance.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n[warning] msg: session_stepdown_request_timeout, action: discard,\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Hierarchy Example\nDESCRIPTION: Demonstrates proper markdown heading hierarchy for documentation structure.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/DOCS-WRITING-GUIDE-EN.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# h1\n  ## h2\n    ### h3\n  ## h2\n    ### h3\n```\n\n----------------------------------------\n\nTITLE: FOREACH-DO-INCASE Example with SQL Function\nDESCRIPTION: This SQL query demonstrates how to use SQL functions within a FOREACH loop. It extracts the second token from the clientid string, using '_' as a delimiter, effectively removing the 'c_' prefix. The query then republishes the modified clientid, along with the name and index of each sensor object where the sensor's index is greater than or equal to 1.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nFOREACH\n    payload.sensors as s\nDO\n    nth(2, tokens(clientid,'_')) as clientid,\n    s.name as name,\n    s.idx as idx\nINCASE\n    s.idx >= 1\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MQTTX Publish Command for EU West Cluster\nDESCRIPTION: Command to publish a message from the EU West cluster using MQTTX CLI\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -h emqx.eu-west.myinfra.net --topic linked/42 --message \"Hello from the other side!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication for LwM2M Gateway via API\nDESCRIPTION: This code configures HTTP authentication for the LwM2M gateway using the EMQX HTTP API.  It specifies the HTTP method, URL, headers, and body for the authentication request.  It requires an application key and security key for authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://127.0.0.1:18083/api/v5/gateway/lwm2m/authentication' \\\n  -u <your-application-key>:<your-security-key> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"method\": \"post\",\n  \"url\": \"http://127.0.0.1:8080\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": {\n    \"clientid\": \"${clientid}\"\n  },\n  \"pool_size\": 8,\n  \"connect_timeout\": \"5s\",\n  \"request_timeout\": \"5s\",\n  \"enable_pipelining\": 100,\n  \"ssl\": {\n    \"enable\": false,\n    \"verify\": \"verify_none\"\n  },\n  \"backend\": \"http\",\n  \"mechanism\": \"password_based\",\n  \"enable\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: RPC Error Log Example\nDESCRIPTION: Example of RPC error log message that appears after rolling upgrades when attempting to connect to nodes that have left the cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.8.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npid: <0.123456.0>, msg: event=connect_to_remote_server, peer=emqx@10.11.12.13, port=5370, reason=ehostunreach\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID in EMQX SQL\nDESCRIPTION: Shows the usage of uuid_v4() function which generates a random version 4 UUID with hyphens between sections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nuuid_v4() = 'f5bb7bea-a371-4df7-aa30-479add04632b'\n```\n\n----------------------------------------\n\nTITLE: Checking EMQX Status\nDESCRIPTION: This command checks the current status of EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-macOS-ce.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl status\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Exproto Cross-Node Process Call Fix in EMQX 4.3.8\nDESCRIPTION: References a GitHub pull request that fixes an exproto cross-node process call error in EMQX version 4.3.8.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5436](https://github.com/emqx/emqx/pull/5436)\n```\n\n----------------------------------------\n\nTITLE: EMQX Foreground Startup (macOS)\nDESCRIPTION: Command to start EMQX in the foreground for manual installation process\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\\.\\/emqx\\/bin\\/emqx foreground\n```\n\n----------------------------------------\n\nTITLE: Configuring a STOMP Gateway\nDESCRIPTION: This code snippet shows how to configure a STOMP gateway using the EMQX configuration file. It defines the mount point for the gateway and sets up a TCP listener with its binding port, acceptor count, and connection limits. Configuring via file requires modification on each node, unlike HTTP API which affects the entire cluster.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/gateway.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngateway.stomp {\n\n  mountpoint = \"stomp/\"\n\n  listeners.tcp.default {\n    bind = 61613\n    acceptors = 16\n    max_connections = 1024000\n    max_conn_rate = 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example CLI Operation Audit Log in EMQX\nDESCRIPTION: This snippet shows the JSON structure of an audit log entry for a CLI operation in EMQX. It includes fields such as timestamp, log level, operation source, node name, execution duration, command, and arguments.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/dashboard/audit-log.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\"time\":1695866030977555,\"level\":\"info\",\"msg\":\"from_cli\",\"from\": \"cli\",\"node\":\"emqx@127.0.0.1\",\"duration_ms\":0,\"cmd\":\"retainer\",\"args\":[\"clean\", \"t/1\"]}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Message Parsing Errors Fix in EMQX 4.3.2\nDESCRIPTION: References a GitHub pull request that fixes some errors in message parsing in EMQX version 4.3.2.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_52\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4858](https://github.com/emqx/emqx/pull/4858)\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Rule Engine Resource Deletion Crash Fix in EMQX 4.3.4\nDESCRIPTION: References a GitHub pull request that fixes an issue where deleting a resource in the rule engine can cause a crash if there is a rule that depends on the resource in EMQX version 4.3.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#4996](https://github.com/emqx/emqx/pull/4996)\n```\n\n----------------------------------------\n\nTITLE: Starting Apache IoTDB Server with Docker\nDESCRIPTION: Command to start an Apache IoTDB server using Docker with REST interface enabled. This setup is necessary for creating the data integration with EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-iotdb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name iotdb-service \\\n              --hostname iotdb-service \\\n              -p 6667:6667 \\\n              -p 18080:18080 \\\n              -e enable_rest_service=true \\\n              -e cn_internal_address=iotdb-service \\\n              -e cn_target_config_node_list=iotdb-service:10710 \\\n              -e cn_internal_port=10710 \\\n              -e cn_consensus_port=10720 \\\n              -e dn_rpc_address=iotdb-service \\\n              -e dn_internal_address=iotdb-service \\\n              -e dn_target_config_node_list=iotdb-service:10710 \\\n              -e dn_mpp_data_exchange_port=10740 \\\n              -e dn_schema_region_consensus_port=10750 \\\n              -e dn_data_region_consensus_port=10760 \\\n              -e dn_rpc_port=6667 \\\n              apache/iotdb:1.1.0-standalone\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Integration Compatibility Table in HTML\nDESCRIPTION: This HTML code snippet creates a table that compares data integration capabilities across different EMQX products. It uses HTML table structure with rowspan and colspan attributes for complex header layout. The table includes checkmark and cross mark images to indicate compatibility.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/getting-started/feature-comparison.md#2025-04-20_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"text-align: center;\">\n<table>\n<thead>\n  <tr>\n    <th rowspan=\"2\">Data Integration<br></th>\n    <th colspan=\"2\">Self-Hosted<br></th>\n    <th colspan=\"2\">MQTT as a Service<br></th>\n  </tr>\n  <tr>\n    <td>EMQX Open Source</td>\n    <td>EMQX Enterprise</td>\n    <td>EMQX Cloud Serverless</td>\n    <td>EMQX Dedicated Cloud</td>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><b>MQTT Bridge</b></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/cross_mark_64.png\" style=\"zoom:40%;\" /></td>\n    <td><img src=\"./assets/check_mark_64.png\" style=\"zoom:40%;\" /></td>\n  </tr>\n  <!-- Additional rows omitted for brevity -->\n</tbody>\n</table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTTP Server in Python for Webhook Testing\nDESCRIPTION: This Python script uses Flask to create a basic HTTP server that listens on the local port 5000. It handles POST requests to the root URL, prints the received data, and returns a 200 OK response. This server is used to test the EMQX Webhook integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/webhook.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, json, request\n\napi = Flask(__name__)\n\n@api.route('/', methods=['POST'])\ndef print_messages():\n  reply= {\"result\": \"ok\", \"message\": \"success\"}\n  print(\"got post request: \", request.get_data())\n  return json.dumps(reply), 200\n\nif __name__ == '__main__':\n  api.run()\n```\n\n----------------------------------------\n\nTITLE: MQTT SDK Configuration Object\nDESCRIPTION: Configuration object that defines the structure and content of the MQTT SDK documentation, including SDK examples and third-party recommendations. Contains metadata like titles, descriptions, links, and image references for each SDK.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/connect-emqx/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'title': 'MQTT Client SDKs',\n  'categoryList': [\n    {\n      'title': 'SDK Example',\n      'moreText': 'More Examples',\n      'linkForMoreDemos': 'https://github.com/emqx/MQTT-Client-Examples',\n      'menus': [\n        {\n          'imgName': 'c',\n          'name': 'C',\n          'description': 'MQTT C SDK Example',\n          'link': './c.html'\n        },\n        // ... additional SDK entries\n      ]\n    },\n    {\n      'title': 'Third-party SDK Recommendation',\n      'menus': [\n        // ... third-party SDK entries\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced Process Shutdown in EMQX\nDESCRIPTION: This snippet defines settings for forced shutdown of processes based on message queue length or memory usage. It allows configuring thresholds for mailbox size and heap size that trigger automatic process termination.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n**force_shutdown.enable**\n\n  *Type*: `boolean`\n\n  *Default*: `true`\n\n  Enable `force_shutdown` feature.\n\n\n**force_shutdown.max_mailbox_size**\n\n  *Type*: `integer`\n\n  *Default*: `1000`\n\n  *Optional*: `0-inf`\n\n  In EMQX, each online client corresponds to an individual Erlang process. The configuration value establishes a mailbox size limit for these processes. If the mailbox size surpasses this limit, the client will be automatically terminated.\n\n\n**force_shutdown.max_heap_size**\n\n  *Type*: `wordsize`\n\n  *Default*: `32MB`\n\n  Total heap size\n```\n\n----------------------------------------\n\nTITLE: DS Info Output Example\nDESCRIPTION: Example output showing shard replica set transitions in a distributed storage system when nodes leave the cluster permanently without proper handover.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.8.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSite\nABCDEF1111111111 'emqx@emqxc1-core0.local' (!) UNIDENTIFIED\nABCDEF2222222222 'emqx@emqxc2-core0.local' up\n<...>\n\nShard            Replicas\nmessages/0       (!) ABCDEF1111111111\nmessages/1       (!) ABCDEF1111111111\n<...>\nmessages/9       (!) ABCDEF1111111111\n\nShard             Transitions\nmessages/0        +ABCDEF2222222222 -ABCDEF1111111111\nmessages/1        +ABCDEF2222222222 -ABCDEF1111111111\n<...>\nmessages/9        +ABCDEF2222222222 -ABCDEF1111111111\n```\n\n----------------------------------------\n\nTITLE: Importing EMQX Data from Backup\nDESCRIPTION: This command imports data and configuration files from a specified backup archive into an EMQX cluster. It's used to restore a previous state of EMQX from a backup file created using the `export` command. The `<File>` argument should be replaced with the actual path to the backup archive file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/new-features.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl data import <File>\n```\n\n----------------------------------------\n\nTITLE: Dynamic ACL Rule Using Zone Placeholder\nDESCRIPTION: Example of an ACL rule that uses the new ${zone} placeholder to dynamically apply permissions based on a client's assigned zone.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v5.md#2025-04-20_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n{allow, all, all, [\"${zone}/${username}/#\"]}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Response Example\nDESCRIPTION: Sample JSON response from Elasticsearch showing the stored document structure with device data\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/elasticsearch.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"took\" : 1098,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"device_data\",\n        \"_type\" : \"_doc\",\n        \"_id\" : \"emqx_c_1705479455289\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"clientid\" : \"emqx_c\",\n          \"ts\" : 1705479455289,\n          \"payload\" : {\n            \"temperature\": 24,\n            \"humidity\": 30\n          }\n        }\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: CASE-WHEN Example: Limiting Value Range\nDESCRIPTION: This SQL query demonstrates the use of a CASE-WHEN statement to limit the value of the 'payload.x' field to a range between 0 and 7. If the value is less than 0, it's set to 0; if it's greater than 7, it's set to 7; otherwise, it remains unchanged. The result is assigned to the alias 'x'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  CASE WHEN payload.x < 0 THEN 0\n       WHEN payload.x > 7 THEN 7\n       ELSE payload.x\n  END as x\nFROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: MQTTX CLI Publish Command\nDESCRIPTION: This command demonstrates how to use MQTTX CLI to publish a message to a specific topic (`t/1`) on an EMQX node. It specifies the host and port of the EMQX broker to connect to. The published message is used in the end-to-end tracing example to show how the message flow is traced.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/opentelemetry/e2e-traces.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nmqttx pub -t t/1 -h 172.19.0.2 -p 1883\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting a Field with Aliasing and Filtering on Another Field\nDESCRIPTION: This code selects the 'clientid' field (aliased as 'cid') from messages originating from any topic ('#'), filtering by the 'username' field being equal to 'abc'. This highlights how filtering can be based on fields other than the selected one.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clientid as cid FROM \"#\" WHERE username = 'abc'\n```\n\n----------------------------------------\n\nTITLE: Listing Rules in Rule Engine\nDESCRIPTION: Displays a list of all rules configured in the EMQX Rule Engine, showing their IDs, names, and enabled status.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/admin/cli.md#2025-04-20_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl rules list\nRule{id=my-rule, name=, enabled=true, descr=this is my rule}\n```\n\n----------------------------------------\n\nTITLE: Generating a Root CA Key Pair using OpenSSL\nDESCRIPTION: This command generates a 2048-bit RSA key pair for the Certificate Authority (CA). The `-des3` option encrypts the private key using Triple DES, requiring a passphrase to protect the key. This key is fundamental for signing server and client certificates.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/network/tls-certificate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"openssl genrsa -des3 -out rootCA.key 2048\"\n```\n\n----------------------------------------\n\nTITLE: Select User Property from MQTT 5.0 PUBLISH Message\nDESCRIPTION: This SQL query selects the value of the 'foo' key from the 'User-Property' within the 'pub_props' of an MQTT 5.0 PUBLISH message originating from topics matching 't/#', aliasing the value as 'foo'. It demonstrates extracting custom user properties from MQTT 5.0 messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pub_props.'User-Property'.foo as foo FROM \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Setting Local Port Range for Test Client\nDESCRIPTION: This snippet configures the local port range for test clients and also sets the maximum number of open files.  These settings are optimized for running a large number of connections from a test client to EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nsysctl -w net.ipv4.ip_local_port_range=\"500 65535\"\necho 1000000 > /proc/sys/fs/nr_open\nulimit -n 100000\n```\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend MQTT SSL Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend for MQTT over SSL/TLS.  It uses round robin load balancing and defines the EMQX server addresses.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_backend\n  mode tcp\n  balance roundrobin\n \n # 增加 send-proxy 会把真实 IP 带给 EMQX，对应后端监听器需要启用 proxy_protocol\n  server emqx1 emqx1-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n  server emqx2 emqx2-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n  server emqx3 emqx3-cluster.emqx.io:1883 check-send-proxy send-proxy-v2-ssl-cn\n```\n\n----------------------------------------\n\nTITLE: HAProxy Defaults Configuration\nDESCRIPTION: This is a HAProxy configuration snippet defining default settings. It sets the logging to global, configures TCP mode, enables TCP logging, sets timeouts for connect, client and server, and sets maximum connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndefaults  \n  log global \n  mode tcp \n  option tcplog \n  #option dontlognull  \n  timeout connect 10000 \n  # timeout > mqtt's keepalive * 1.2  \n  timeout client 240s  \n  timeout server 240s \n  maxconn 20000\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Sink Rule SQL\nDESCRIPTION: This SQL snippet defines a rule to select all fields from the MQTT topic `t/#`. This data can then be used in EMQX to forward messages to Kafka, demonstrating a basic rule for data integration. It is used as a starting point for forwarding MQTT data to Kafka topics.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT\n  *\nFROM\n  \\\"t/#\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating EMQX Builder Docker Container\nDESCRIPTION: Command to create an EMQX Builder Docker container for compiling EMQX from source. It includes optional port mappings for previewing after compilation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/install-source.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx-builder \\\n  # -p 1883:1883 \\\n  # -p 8083:8083 \\\n  # -p 8084:8084 \\\n  # -p 8883:8883 \\\n  # -p 18083:18083 \\\n  ghcr.io/emqx/emqx-builder/5.0-17:1.13.4-24.2.1-1-ubuntu20.04 \\\n  bash -c \"tail -f /dev/null\"\n```\n\n----------------------------------------\n\nTITLE: Java SocketCreatedRequest Message Definition\nDESCRIPTION: This Java code snippet defines the `SocketCreatedRequest` message, which is used when a new socket connects to the ExProto gateway. The message includes the connection identifier (`conn`) and connection information (`conninfo`). This message is passed as an argument in the `OnSocketCreated` function.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/exproto.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nmessage SocketCreatedRequest {\n  string conn = 1;\n  ConnInfo conninfo = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting File Handle Limit via limits.conf\nDESCRIPTION: This snippet demonstrates how to persist the file handle limit for all users and processes by modifying the `/etc/security/limits.conf` file. This setting ensures that the specified file handle limit is applied to all user sessions and processes on the system.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/tune.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n*      soft   nofile      1048576\n*      hard   nofile      1048576\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced Garbage Collection in EMQX\nDESCRIPTION: This snippet defines settings for forced garbage collection in MQTT connection processes. It allows configuring the frequency of garbage collection based on the number of messages processed or bytes of data handled.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n**force_gc.enable**\n\n  *Type*: `boolean`\n\n  *Default*: `true`\n\n  Enable forced garbage collection.\n\n\n**force_gc.count**\n\n  *Type*: `integer`\n\n  *Default*: `16000`\n\n  *Optional*: `0-inf`\n\n  GC the process after this many received messages.\n\n\n**force_gc.bytes**\n\n  *Type*: `bytesize`\n\n  *Default*: `16MB`\n\n  GC the process after specified number of bytes have passed through.\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message for Kafka Sink Testing\nDESCRIPTION: This command publishes an MQTT message to the topic `t/1` using MQTTX.  It's used for testing if the Kafka Sink and associated rules are working as expected, by sending a message that should be forwarded to Kafka.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-kafka.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"mqttx pub -i emqx_c -t t/1 -m '{ \\\"msg\\\": \\\"Hello Kafka\\\" }'\"\n```\n\n----------------------------------------\n\nTITLE: MQTTX Subscribe Command for US East Cluster\nDESCRIPTION: Command to subscribe to topics on the US East cluster using MQTTX CLI with verbose output enabled\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/cluster-linking/quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -h emqx.us-east.myinfra.net --topic linked/# --qos 1 --verbose\n```\n\n----------------------------------------\n\nTITLE: HAProxy Frontend MQTT SSL Configuration\nDESCRIPTION: This configuration sets up a HAProxy frontend for MQTT over SSL/TLS. It binds to port 8883 with SSL enabled, specifying the certificate file, and uses the mqtt_backend.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfrontend mqtt_tls_frontend\n  bind *:8883 ssl crt /etc/haproxy/certs/server.pem \n  # 双向认证\n  # bind *:8883 ssl ca-file /etc/haproxy/certs/cacert.pem crt /etc/haproxy/certs/server.pem verify required\n  mode tcp\n  default_backend mqtt_backend\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake ODBC Driver on macOS\nDESCRIPTION: Commands to update permissions and configuration for the Snowflake ODBC driver on macOS. This includes setting ownership and appending configuration to the driver's ini file.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchown $(id -u):$(id -g) /opt/snowflake/snowflakeodbc/lib/universal/simba.snowflake.ini\necho 'ODBCInstLib=libiodbcinst.dylib' >> /opt/snowflake/snowflakeodbc/lib/universal/simba.snowflake.ini\n```\n\n----------------------------------------\n\nTITLE: SQL Server Binary to Hex String Conversion in EMQX\nDESCRIPTION: Examples of using sqlserver_bin2hexstr to format binary data for Microsoft SQL Server with 0x prefix, including UTF-16 little-endian encoded Unicode strings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nsqlserver_bin2hexstr('hello') = '0x68656C6C6F'\nsqlserver_bin2hexstr(str_utf16_le('hello')) = '0x680065006C006C006F00'\nsqlserver_bin2hexstr(str_utf16_le('你好')) = '0x604F7D59'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication GET Request in EMQX\nDESCRIPTION: Configuration example for HTTP GET authentication in EMQX using HCL syntax. The 'body' parameters will be converted to a query string in the URL, with placeholders for username and password.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/http.md#2025-04-20_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{\n    mechanism = password_based\n    backend = http\n\n    method = get\n    url = \"http://127.0.0.1:32333/auth\"\n    body {\n        username = \"${username}\"\n        password = \"${password}\"\n    }\n    headers {\n        \"X-Request-Source\" = \"EMQX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Backend MQTT WebSocket SSL Configuration\nDESCRIPTION: This configuration sets up a HAProxy backend for MQTT over WebSocket with SSL/TLS. It uses round robin load balancing and defines the EMQX server addresses with port 8083.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbackend mqtt_ws_backend\n  mode tcp\n  balance roundrobin\n  server emqx1 emqx1-cluster.emqx.io:8083 check\n  server emqx2 emqx2-cluster.emqx.io:8083 check\n  server emqx3 emqx3-cluster.emqx.io:8083 check\n```\n\n----------------------------------------\n\nTITLE: Inserting MQTT Client Events into Microsoft SQL Server Table in EMQX\nDESCRIPTION: SQL template for inserting client connection event data into the 'dbo.t_mqtt_events' table in Microsoft SQL Server. Includes fields for client ID, event type, and event time with timestamp conversion.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-sqlserver.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ninsert into dbo.t_mqtt_events(clientid, event_type, event_time) values ( ${clientid}, ${event}, DATEADD(MS, ${ms_shift}, DATEADD(S, ${s_shift}, '19700101 00:00:00:000') ) )\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Message with MQTTX CLI\nDESCRIPTION: This command uses MQTTX to publish a test message to the 't/1' topic. It's used to verify that the EMQX rule is correctly processing and forwarding messages to the S3 bucket.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/s3.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello S3\" }'\n```\n\n----------------------------------------\n\nTITLE: Select Nested Field from JSON Payload\nDESCRIPTION: This SQL query selects the entire payload from messages originating from any topic ('#') and filters for messages where the nested field 'payload.x.y' is equal to 1.  It demonstrates accessing nested data within a JSON payload for filtering purposes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT payload FROM \"#\" WHERE payload.x.y = 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Signed CA Certificate with OpenSSL\nDESCRIPTION: Command to generate a self-signed CA certificate valid for 10 years (3650 days) using the previously created private key. The certificate uses SHA-256 for signing and will prompt for Distinguished Name information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/network/tls-certificate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.crt\n```\n\n----------------------------------------\n\nTITLE: MQTT Single-Level Wildcard Matching\nDESCRIPTION: This example shows how a subscription with a single-level wildcard matches specific topics. The `sensor/+/temperature` subscription will match topics like `sensor/1/temperature` and `sensor/2/temperature`, but will not match `sensor/temperature` or `sensor/bedroom/1/temperature`.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/mqtt-wildcard-subscription.md#2025-04-20_snippet_1\n\nLANGUAGE: awk\nCODE:\n```\nsensor/1/temperature\nsensor/2/temperature\n...\nsensor/n/temperature\n```\n\n----------------------------------------\n\nTITLE: Inserting MQTT User with Hashed Password in MySQL\nDESCRIPTION: MySQL command to insert a new MQTT user with SHA256 hashed password and salt. The example creates a superuser named 'emqx_u' with password 'public' and suffix salt.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/mysql.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql> INSERT INTO mqtt_user(username, password_hash, salt, is_superuser) VALUES ('emqx_u', SHA2(concat('public', 'slat_foo123'), 256), 'slat_foo123', 1);\nQuery OK, 1 row affected (0,01 sec)\n```\n\n----------------------------------------\n\nTITLE: Cleanup Routes Command for RPC Error Workaround\nDESCRIPTION: Command to clean up routes for a node that is no longer part of the cluster, used to resolve RPC error messages.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/known-issues-5.8.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx eval \"emqx_router:cleanup_routes('emqx@10.11.12.13')\"\n```\n\n----------------------------------------\n\nTITLE: LwM2M Read Response Payload Format\nDESCRIPTION: This code shows the JSON structure of the response to a Read request. It includes the request path, response code, response message, and the content of the read resource. The content is an array of key-value pairs.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/gateway/lwm2m.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqPath\": {?ResourcePath},\n  \"code\": {?ResponseCode},\n  \"codeMsg\": {?ResponseMsg},\n  \"content\": {?ReadResponseData}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reqID\": 1,\n  \"msgType\": \"read\",\n  \"data\": {\n    \"reqPath\": \"/3/0/1\",\n    \"code\": \"2.05\",\n    \"codeMsg\": \"content\",\n    \"content\": [\n      {\n        \"value\": \"Lightweight M2M Client\",\n        \"path\": \"/3/0/1\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking MQTT Connections with MQTTX CLI\nDESCRIPTION: This snippet uses the MQTTX CLI to establish 10 TCP connections to simulate MQTT client connections. The `mqttx bench conn -c 10` command creates the specified number of connections.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/cluster/lb-haproxy.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx bench conn -c 10\n```\n\n----------------------------------------\n\nTITLE: Shared Subscription Load Balancing Diagram in EMQ\nDESCRIPTION: ASCII diagram showing how EMQ distributes MQTT messages between multiple subscribers in the same group using shared subscriptions\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v3.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n---------\n|       | --Msg1--> Subscriber1\nPublisher--Msg1,Msg2,Msg3-->|  EMQ  | --Msg2--> Subscriber2\n|       | --Msg3--> Subscriber3\n---------\n```\n\n----------------------------------------\n\nTITLE: Docker Container Deployment for EMQX Enterprise Edition\nDESCRIPTION: Command to run EMQX Enterprise Edition using Docker, exposing necessary ports for MQTT and dashboard access\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/getting-started/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx\\/emqx-enterprise:latest\n```\n\n----------------------------------------\n\nTITLE: Managing EMQX Listeners via Command Line\nDESCRIPTION: Commands to start and stop EMQX TCP listeners through the command line interface. Note that these commands don't update the listener status in Dashboard.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/known-issues-5.1.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl listeners stop tcp:we\n./bin/emqx ctl listeners start tcp:we\n```\n\n----------------------------------------\n\nTITLE: Installing Snowflake ODBC Driver on Linux\nDESCRIPTION: Script to install the Snowflake ODBC driver and configure the odbc.ini file on Linux systems. This is for testing purposes and not recommended for production environments.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/snowflake.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscripts/install-snowflake-driver.sh\n```\n\n----------------------------------------\n\nTITLE: Example EMQX Connections Count Metric\nDESCRIPTION: This is an example metric collected from EMQX showing connection counts in a cluster non-aggregated mode. The node name is included as a label to differentiate between nodes.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/observability/prometheus.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"emqx_connections_count{node=\\\"emqx@127.0.0.1\\\"} 0\"\n```\n\n----------------------------------------\n\nTITLE: OpenTSDB Rule SQL Query\nDESCRIPTION: SQL rule configuration for processing MQTT messages from topic 't/#' and extracting metric, tags, and value fields from the payload for OpenTSDB storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-opents.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\t\tpayload.metric as metric, payload.tags as tags, payload.value as value\nFROM\n\t\t\"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Will Message with MQTTX CLI\nDESCRIPTION: Demonstrates setting up a will message during client connection, specifying topic and payload for automatic transmission if client disconnects unexpectedly\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/explore-mqtt.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mqttx conn -h 'localhost' -p 1883 --will-topic 't/1' --will-message 'A will message from MQTTX CLI'\n```\n\n----------------------------------------\n\nTITLE: Importing Migrated Configuration in EMQX 5.x\nDESCRIPTION: Command to import the migrated configuration file into the new EMQX 5.x cluster. This step is part of the migration process when upgrading from EMQX 4.4 to 5.x.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-cluster.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemqx ctl data import <文件>\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Built-in Database Authentication Fix in EMQX 4.3.9\nDESCRIPTION: References a GitHub pull request that fixes an issue where authentication based on the built-in database incorrectly transcodes HTTP request parameters in EMQX version 4.3.9.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5674](https://github.com/emqx/emqx/pull/5674)\n```\n\n----------------------------------------\n\nTITLE: MQTTX Test Command for Publishing Messages\nDESCRIPTION: Command to publish a test message to topic 't/1' using MQTTX CLI tool to verify the Azure Event Hubs integration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-azure-event-hub.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"Hello Azure Event Hub\" }'\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Response Format in JSON\nDESCRIPTION: This snippet illustrates the expected JSON response format for HTTP authorization in EMQX 5.1. It includes a 'result' field with possible values of 'allow', 'deny', or 'ignore'.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/deploy/upgrade-from-v4.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"deny\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table Structure for EMQX Authentication\nDESCRIPTION: SQL code to create a table structure for storing MQTT user credentials with username, password hash, salt and superuser flag\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/postgresql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mqtt_user (\n  id serial PRIMARY KEY,\n  username text NOT NULL UNIQUE,\n  password_hash  text NOT NULL,\n  salt text NOT NULL,\n  is_superuser boolean DEFAULT false,\n  created timestamp with time zone DEFAULT NOW()\n);\n```\n\n----------------------------------------\n\nTITLE: EMQX PostgreSQL Authentication Configuration\nDESCRIPTION: Configuration example for setting up PostgreSQL authentication in EMQX config file, including database connection and password hashing settings\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authn/postgresql.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = postgresql\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n  }\n\n  database = mqtt\n  username = postgres\n  password = public\n  server = \"127.0.0.1:5432\"\n  query = \"SELECT password_hash, salt, is_superuser FROM users where username = ${username} LIMIT 1\"\n}\n```\n\n----------------------------------------\n\nTITLE: HStream Record Template for Message Storage\nDESCRIPTION: JSON template for formatting MQTT messages before storing them in HStreamDB. It includes message ID, topic, QoS, and payload.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": ${id}, \"topic\": \"${topic}\", \"qos\": ${qos}, \"payload\": \"${payload}\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Schema Registry in HCL\nDESCRIPTION: HCL configuration example for setting up an external Confluent Schema Registry in EMQX. It includes the registry type, URL, and authentication details.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nschema_registry {\n  external {\n    my_external_registry {\n      type = confluent\n      url = \"https://confluent.registry.url:8081\"\n      auth {\n        username = \"myuser\"\n        password = \"secret\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving EMQX Broker Information with emqx ctl broker\nDESCRIPTION: Display the current node's running version, system description, and uptime information.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl broker\nsysdescr  : EMQX Enterprise\nversion   : 5.0.3\ndatetime  : 2023-05-12T10:21:50.095047713+08:00\nuptime    : 52 seconds\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB using Docker\nDESCRIPTION: Commands to install MongoDB via Docker, create a database and collection for EMQX data\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mongodb.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name mongodb -p 27017:27017 mongo\n\ndocker exec -it mongodb bash\n\nmongosh\n\nuse admin\ndb.createUser({ user: \"admin\", pwd: \"public\", roles: [ { role: \"root\", db: \"admin\" } ] })\n\nuse emqx_data\n\ndb.createCollection('emqx_messages')\n```\n\n----------------------------------------\n\nTITLE: Using bytesize Function in Rule Engine SQL\nDESCRIPTION: New SQL function added to the rule engine to get the size of a byte string. This allows filtering messages based on payload size.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/changes-ce-v5.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"t/#\" WHERE bytesize(payload) > 10\n```\n\n----------------------------------------\n\nTITLE: EMQX PostgreSQL Authentication Configuration\nDESCRIPTION: Sample configuration for setting up PostgreSQL authentication in EMQX including database connection and password hashing settings.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/postgresql.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  mechanism = password_based\n  backend = postgresql\n\n  password_hash_algorithm {\n    name = sha256\n    salt_position = suffix\n  }\n\n  database = mqtt\n  username = postgres\n  password = public\n  server = \"127.0.0.1:5432\"\n  query = \"SELECT password_hash, salt, is_superuser FROM users where username = ${username} LIMIT 1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EMQX Node Name via Environment Variable\nDESCRIPTION: Demonstrates how to set the EMQX node name using an environment variable, which can be useful in containerized environments or systemd services.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMQX_NODE__NAME='emqx@s1.emqx.io'\n```\n\n----------------------------------------\n\nTITLE: Create an Array\nDESCRIPTION: This SQL query creates an array containing the numbers 1, 2, and 3 and assigns it to the variable 'a'. It demonstrates how to create a simple array within an EMQX SQL query.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-syntax.md#2025-04-20_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  [1,2,3] as a\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Command Line Interface Character Printing Fix in EMQX 4.3.7\nDESCRIPTION: References a GitHub pull request that fixes an issue where the command line interface cannot print certain characters in EMQX version 4.3.7.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5411](https://github.com/emqx/emqx/pull/5411)\n```\n\n----------------------------------------\n\nTITLE: SQL Rule Example for Message Filtering and Transformation\nDESCRIPTION: Demonstrates a SQL rule that filters messages from a specific topic and extracts a specific payload field based on client ID\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rules.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n    payload.data as d\nFROM\n    \"t/#\"\nWHERE\n    clientid = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Subscriptions with MQTTX CLI\nDESCRIPTION: Demonstrates setting up shared subscriptions with group prefixes, allowing load balancing of message delivery across multiple subscribers\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/explore-mqtt.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqttx sub -t '$share/my_group1/t/1' -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: Using JSON Decode in SQL Rule Engine\nDESCRIPTION: SQL statement example for decoding JSON payload in the rule engine. It decodes the payload and uses the result in a WHERE clause.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_decode(payload) AS p FROM \"t/#\" WHERE p.x = p.y\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX\nDESCRIPTION: This snippet shows how to start the EMQX service using systemctl. This assumes that EMQX has been installed as a system service.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/performance/benchmark-xmeter.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Initialize ClickHouse Database Schema\nDESCRIPTION: SQL script to create the initial database and table structure for storing MQTT messages in ClickHouse\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-clickhouse.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE IF NOT EXISTS mqtt_data;\nCREATE TABLE IF NOT EXISTS mqtt_data.messages (\n   data String,\n   arrived TIMESTAMP\n) ENGINE = MergeTree()\nORDER BY arrived;\n```\n\n----------------------------------------\n\nTITLE: STOMP Mountpoint Configuration\nDESCRIPTION: Configuration for topic mountpoint which allows topic prefix management and routing isolation between different listeners. Supports variables like ${clientid} and ${username}.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\ngateway.stomp.mountpoint = \"\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Retained Message with MQTTX CLI\nDESCRIPTION: Demonstrates publishing a retained message to a specific topic, ensuring the message persists for future subscribers\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/messaging/explore-mqtt.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -t 't/1' -m 'A retained message from MQTTX CLI' --retain true -h 'localhost' -p 1883\n```\n\n----------------------------------------\n\nTITLE: STOMP Frame Size Configuration\nDESCRIPTION: Defines size limits for STOMP frames including maximum headers, header length, and body length constraints.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\ngateway.stomp.frame.max_headers = 10\ngateway.stomp.frame.max_headers_length = 1024\ngateway.stomp.frame.max_body_length = 65536\n```\n\n----------------------------------------\n\nTITLE: EMQX Kerberos Authentication Configuration\nDESCRIPTION: HCL configuration for setting up Kerberos authentication in EMQX, specifying the GSSAPI mechanism and server principal.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/access-control/authn/kerberos.md#2025-04-20_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n  {\n    mechanism = gssapi\n    backend = kerberos\n    principal = \"mqtt/cluster1.example.com@EXAMPLE.COM\"\n  }\n```\n\n----------------------------------------\n\nTITLE: 通过 Docker 安装并启动 MySQL\nDESCRIPTION: 使用 Docker 命令启动 MySQL 容器、进入容器、连接到 MySQL 服务器并创建数据库。\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-mysql.md#2025-04-20_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# 启动一个 MySQL 容器并设置密码为 public\ndocker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=public -d mysql\n\n# 进入容器\ndocker exec -it mysql bash\n\n# 在容器中连接到 MySQL 服务器，需要输入预设的密码\nmysql -u root -p\n\n# 创建并选择数据库\nCREATE DATABASE emqx_data CHARACTER SET utf8mb4;\nuse emqx_data;\n```\n\n----------------------------------------\n\nTITLE: Managing MQTT Topics with topics Commands\nDESCRIPTION: List all subscribed topics and view details about specific topics in the EMQX broker.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/admin/cli.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl topics list\nt/1 -> emqx@127.0.0.1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ emqx ctl topics show t/1\nt/1 -> emqx@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: MongoDB ReplicaSet Configuration - HCL\nDESCRIPTION: Configuration for MongoDB ReplicaSet deployment mode with multiple servers.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/access-control/authz/mongodb.md#2025-04-20_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  type = mongodb\n\n  collection = \"mqtt_user\"\n  filter { username = \"${username}\" }\n\n  mongo_type = rs\n  servers = \"10.123.12.10:27017,10.123.12.11:27017,10.123.12.12:27017\"\n  replica_set_name = \"rs0\"\n\n  database = \"mqtt\"\n  username = \"emqx\"\n  password = \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Client Connection Events in EMQX\nDESCRIPTION: SQL rule for selecting all fields from client connected and disconnected events in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-oracle.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request for Multi-language Extension Hook Start Fix in EMQX 4.3.4\nDESCRIPTION: References a GitHub pull request that fixes an issue where multi-language extension hooks may fail to start in EMQX version 4.3.4.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\nGithub PR: [emqx#5004](https://github.com/emqx/emqx/pull/5004)\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in EMQX Rule Engine\nDESCRIPTION: Functions for performing bitwise operations on integers, including AND, OR, XOR, and bit shifts.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbitand(10, 8) = 8\nbitand(-10, -8) = -16\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitnot(10) = -11\nbitnot(-12) = 11\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitsl(8, 2) = 32\nbitsl(-8, 2) = -32\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitsr(8, 2) = 2\nbitsr(8, 4) = 0\nbitsr(-8, 2) = -2\nbitsr(-8, 6) = -1\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitor(10, 8) = 10\nbitor(-10, -8) = -2\n```\n\nLANGUAGE: bash\nCODE:\n```\nbitxor(10, 8) = 2\nbitxor(-10, -8) = 14\n```\n\n----------------------------------------\n\nTITLE: UUID Generation Functions\nDESCRIPTION: Examples of generating version 4 UUIDs with and without hyphens\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nuuid_v4() = 'f5bb7bea-a371-4df7-aa30-479add04632b'\nuuid_v4_no_hyphen() = 'd7a39aa4195a42068b962eb9a665503e'\n```\n\n----------------------------------------\n\nTITLE: SQL Rule for Message Storage in HStreamDB\nDESCRIPTION: SQL statement for a rule that selects all messages from the 't/#' topic to be stored in HStreamDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Stats API Call\nDESCRIPTION: Example curl command to inspect the Prometheus scraping endpoint which is enabled by default without authentication.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"127.0.0.1:18083/api/v5/prometheus/stats\"\n```\n\n----------------------------------------\n\nTITLE: Storing Confluent Cloud API Key\nDESCRIPTION: Command to store an existing Confluent Cloud API key and secret using the CLI tool.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/confluent-sink.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconfluent api-key store --resource <kafka_cluster_id>\nKey: <API_KEY>\nSecret: <API_SECRET>\n```\n\n----------------------------------------\n\nTITLE: EMQX Node Leaving a Cluster\nDESCRIPTION: Demonstrates the command for a node to voluntarily leave an EMQX cluster. This should be executed on the node that is leaving.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/manual.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/emqx ctl cluster leave\n```\n\n----------------------------------------\n\nTITLE: Gateway Client Info Override Configuration\nDESCRIPTION: Configuration options for overriding client information like username, password and client ID using templates.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\ngateway:clientinfo_override.username = \"template\"\ngateway:clientinfo_override.password = \"template\"\ngateway:clientinfo_override.clientid = \"template\"\n```\n\n----------------------------------------\n\nTITLE: Mounting EMQX Hook (Erlang)\nDESCRIPTION: API call to mount a hook in EMQX. It specifies the hook name, callback function details, and priority.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/extensions/hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nemqx:hook(Name, {Module, Function, Args}, Priority).\n```\n\n----------------------------------------\n\nTITLE: List DynamoDB Tables with AWS CLI\nDESCRIPTION: Docker command to list all DynamoDB tables using AWS CLI\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-dynamo.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    -e AWS_ACCESS_KEY_ID=root \\\n    -e AWS_SECRET_ACCESS_KEY=public \\\n    -e AWS_DEFAULT_REGION=us-west-2 \\\n    amazon/aws-cli:2.15.57 dynamodb list-tables \\\n    --endpoint-url http://host.docker.internal:8000\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule SQL for Message Processing\nDESCRIPTION: SQL rule configuration for processing MQTT messages from topic t/# before forwarding to GreptimeDB.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-greptimedb.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Message Publishing\nDESCRIPTION: MQTTX command to publish a test message to trigger the rules\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/data-bridge-redis.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -u emqx_u -t t/1 -m '{ \"msg\": \"hello Redis\" }'\n```\n\n----------------------------------------\n\nTITLE: Validating Schema in Erlang\nDESCRIPTION: Example of validating data against a schema in Erlang. It takes a schema name and either a Map or Bytes, returning a Boolean.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/schema-registry.md#2025-04-20_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nschema_check(SchemaName, Map | Bytes) -> Boolean\n```\n\n----------------------------------------\n\nTITLE: Error Code - Maximum Cursors Exceeded\nDESCRIPTION: Oracle database error code indicating maximum number of open cursors has been exceeded.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nORA-01000: maximum open cursors exceeded\n```\n\n----------------------------------------\n\nTITLE: Fixing WebSocket and Certificate Issues in Erlang\nDESCRIPTION: This fix addresses an issue where WebSocket connections could not use peer certificates as usernames in EMQX.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ce-v4.md#2025-04-20_snippet_61\n\nLANGUAGE: erlang\nCODE:\n```\nGithub PR: [emqx#4574](https://github.com/emqx/emqx/pull/4574)\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Command\nDESCRIPTION: Command to consume messages from Kafka topic testtopic-in for verification.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-kafka.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092  --topic testtopic-in\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment\nDESCRIPTION: Command to start the NGINX and EMQX cluster using Docker Compose\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/cluster/lb-nginx.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing Command\nDESCRIPTION: MQTTX command to publish a test message to topic t/1\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-mysql.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqttx pub -i emqx_c -t t/1 -m '{ \"msg\": \"hello MySQL\" }'\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Processing SQL Rule\nDESCRIPTION: SQL rule to select all messages from topic 't/#' for processing in EMQX\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-cassa.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *\nFROM\n  \"t/#\"\n```\n\n----------------------------------------\n\nTITLE: Entering Datalayers CLI\nDESCRIPTION: Command to enter the Datalayers CLI using default admin credentials.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-datalayers.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndlsql -u admin -p public\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB HTTP/HTTPS Connection in EMQX 4.1.0\nDESCRIPTION: Added support for HTTP/HTTPS connections to InfluxDB in EMQX 4.1.0. This allows secure connections to InfluxDB for data storage.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/changes-ee-v4.md#2025-04-20_snippet_32\n\nLANGUAGE: erlang\nCODE:\n```\nInfluxDB supports http/https connection\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Client Events\nDESCRIPTION: SQL rule to capture client connection and disconnection events\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/data-integration/data-bridge-hstreamdb.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *\nFROM\n  \"$events/client_connected\", \"$events/client_disconnected\"\n```\n\n----------------------------------------\n\nTITLE: WebSocket Message Compression Settings\nDESCRIPTION: Enables compression of WebSocket messages using zlib with configurable compression options\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/cfg-manual-docgen/configuration-manual-ce-en.md#2025-04-20_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nws_opts.compress: false\n```\n\n----------------------------------------\n\nTITLE: Installing EMQX Package via Apt\nDESCRIPTION: Installs EMQX using the apt package manager\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-ubuntu.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install emqx\n```\n\n----------------------------------------\n\nTITLE: Starting EMQX as SystemD Service\nDESCRIPTION: Command to start EMQX as a systemd service on CentOS/RHEL systems.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/deploy/install-rhel.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start emqx\n```\n\n----------------------------------------\n\nTITLE: Comparing Gateway Listener Configurations in EMQX 4.x\nDESCRIPTION: Shows examples of different listener configurations for various gateways in EMQX 4.x, demonstrating the inconsistent formats used across different protocol gateways.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/changes/gateway-4.4-to-5.1-incompatibility.md#2025-04-20_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n## etc/plugins/emqx_stomp.conf\nstomp.listener = 61613\nstomp.listener.acceptors = 4\nstomp.listener.max_connections = 512\n## etc/plugins/emqx_sn.conf\nmqtt.sn.port = 1884\n## etc/plugins/emqx_coap.conf\ncoap.bind.udp.1 = 0.0.0.0:5683\ncoap.bind.dtls.1 = 0.0.0.0:5684\n## etc/plugins/emqx_lwm2m.conf\nlwm2m.bind.udp.1 = 0.0.0.0:5683\nlwm2m.bind.dtls.1 = 0.0.0.0:5684\n```\n\n----------------------------------------\n\nTITLE: MySQL Basic Type Configuration\nDESCRIPTION: Simple MySQL type configuration identifier\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/changes/auth-4.4-to-5.1-compatibility.md#2025-04-20_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\n  type = mysql\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Client Library\nDESCRIPTION: Simple markdown header that introduces the client library section of the documentation.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/mqtt-over-quic/client.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Client Library\n```\n\n----------------------------------------\n\nTITLE: Multi-line Client ID Processing Example\nDESCRIPTION: Shows how to use triple quotes with unescape function to handle multi-line client IDs in configuration.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/configuration/configuration.md#2025-04-20_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n#### For multi-line client ID, take the first line.\nexpression = \"\"\"nth(1, tokens(clientid, unescape('\\n')))\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Processing in Erlang for EMQX ExHook\nDESCRIPTION: Processes the authentication result in the EMQX ExHook module. This example assumes the authentication is valid and sets the client as a superuser.\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/extensions/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% AuthNResult\n{ok, #{is_superuser => true}}\n```\n\n----------------------------------------\n\nTITLE: Updating EMQX Enterprise License via CLI\nDESCRIPTION: Command line interface options for managing EMQX Enterprise license, including viewing current license info and updating with a new license string\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/en_US/faq/faq.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/emqx ctl \n\n    license info             # Show license info \n    license update <License> # Update license given as a string\n```\n\n----------------------------------------\n\nTITLE: Formatting Unix Timestamps to Date Strings\nDESCRIPTION: Converting Unix timestamps to formatted date strings with various timezone offsets and formats\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nformat_date('millisecond', '+08:00', '%Y-%m-%d %H:%M:%S.%6N%z', 1708933353472) = '2024-02-26 15:42:33.472000+0800'\nformat_date('millisecond', '+08:00', '%Y-%m-%d %H:%M:%S.%6N%:z', 1708933353472) = '2024-02-26 15:42:33.472000+08:00'\nformat_date('millisecond', '+08:20:30', '%Y-%m-%d %H:%M:%S.%3N%::z', 1708933353472) = '2024-02-26 16:03:03.472+08:20:30'\nformat_date('millisecond', 'Z', '%Y-%m-%d %H:%M:%S.%3N%:z', 1708933353472) = '2024-02-26 07:42:33.472+08:00'\nformat_date('millisecond', 28800, '%Y-%m-%d %H:%M:%S.%3N%:z', 1708933353472) = '2024-02-26 15:42:33.472+08:00'\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in RFC3339 Format\nDESCRIPTION: Examples of getting current time in RFC3339 format with different time units\nSOURCE: https://github.com/emqx/emqx-docs/blob/release-5.8/zh_CN/data-integration/rule-sql-builtin-functions.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnow_rfc3339() = '2024-02-23T10:26:20+08:00'\nnow_rfc3339('microsecond') = '2024-02-23T10:26:38.009706+08:00'\n```"
  }
]