[
  {
    "owner": "facultyai",
    "repo": "dash-bootstrap-components",
    "content": "TITLE: Installing dash-bootstrap-components using pip\nDESCRIPTION: Command to install the dash-bootstrap-components library using pip package manager.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install dash-bootstrap-components\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Dash Bootstrap Components\nDESCRIPTION: This snippet defines the required Python packages and their versions for a Dash Bootstrap Components project. It includes Dash 3.0.0 or higher, Dash Bootstrap Components 2.0.2, and other supporting libraries for web serving, markdown processing, data analysis, and machine learning.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndash>=3.0.0\ndash_bootstrap_components==2.0.2\ngunicorn\nmarkdown\npandas\npymdown-extensions\nscikit-learn\nwerkzeug>=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing dash-bootstrap-components using conda\nDESCRIPTION: Command to install the dash-bootstrap-components library using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge dash-bootstrap-components\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation Feedback in Dash Bootstrap\nDESCRIPTION: Shows how to use valid and invalid properties of Input along with FormFeedback component to provide actionable feedback for user-supplied inputs. The example demonstrates email validation.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import Input, Output, State, callback, html\n\nemail_input = html.Div(\n    [\n        dbc.Label(\"Email\", html_for=\"example-email-feedback\"),\n        dbc.Input(\n            type=\"email\",\n            id=\"example-email-feedback\",\n            placeholder=\"Enter email\",\n        ),\n        dbc.FormFeedback(\n            \"That looks like a valid email!\",\n            type=\"valid\",\n        ),\n        dbc.FormFeedback(\n            \"Sorry, that's not a valid email\",\n            type=\"invalid\",\n        ),\n    ]\n)\n\n\n@callback(\n    [Output(\"example-email-feedback\", \"valid\"), Output(\"example-email-feedback\", \"invalid\")],\n    [Input(\"example-email-feedback\", \"value\")],\n)\ndef check_validity(text):\n    if text:\n        is_gmail = text.endswith(\"@gmail.com\")\n        return is_gmail, not is_gmail\n    return False, False\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Dash Application with Bootstrap Components\nDESCRIPTION: Complete example showing how to set up a Dash application incorporating bootstrap components, including necessary imports and app configuration.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{code-example:components/index/simple.py}}\n```\n\n----------------------------------------\n\nTITLE: Dependencies List for Dash Bootstrap Components\nDESCRIPTION: A list of required Python packages including Dash framework (version 2.0.0 or higher), Dash Bootstrap Components, core and HTML components, and visualization libraries matplotlib and wordcloud.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/wordcloud/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndash>=2.0.0\ndash-bootstrap-components\ndash-core-components\ndash-html-components\nmatplotlib\nwordcloud\n```\n\n----------------------------------------\n\nTITLE: Linking Bootstrap stylesheet in Dash application\nDESCRIPTION: Python code to create a Dash application with a Bootstrap theme from dash-bootstrap-components. This shows how to link external CSS stylesheets to a Dash app.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n```\n\n----------------------------------------\n\nTITLE: Creating a minimal Dash Bootstrap Components app\nDESCRIPTION: Complete example of a minimal Dash application using dash-bootstrap-components. This code initializes the app with Bootstrap styling, creates a layout with a Container and Alert component, and runs the application.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/quickstart.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = dbc.Container(\n    dbc.Alert(\"Hello Bootstrap!\", color=\"success\"),\n    className=\"p-5\",\n)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Dash App with Bootstrap Theme in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Dash application with a Bootstrap theme using the external_stylesheets parameter. It uses the default Bootstrap theme from dash_bootstrap_components.themes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/themes.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Form Layout in Dash with Bootstrap\nDESCRIPTION: Demonstrates a basic form layout using Bootstrap components in a Dash application, including form groups, labels, inputs, and form text for additional help.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nform = html.Div(\n    [\n        dbc.Label(\"Email\", html_for=\"example-email\"),\n        dbc.Input(type=\"email\", id=\"example-email\", placeholder=\"Enter email\"),\n        dbc.FormText(\n            \"Are you on email? You simply have to be these days\",\n            color=\"secondary\",\n        ),\n        html.Hr(),\n        dbc.Label(\"Password\", html_for=\"example-password\"),\n        dbc.Input(\n            type=\"password\",\n            id=\"example-password\",\n            placeholder=\"Enter password\",\n        ),\n        dbc.FormText(\n            \"A password stops mean people taking your stuff\",\n            color=\"secondary\",\n        ),\n    ],\n    className=\"mb-3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Light/Dark Mode Toggle Callback in Dash\nDESCRIPTION: This snippet shows a clientside callback implementation for toggling between light and dark color modes in a Dash application. It updates the data-bs-theme attribute of the document's root element.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/themes.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclientside_callback(\n    \" \" \"\n    (switchOn) => {\n       document.documentElement.setAttribute(\"data-bs-theme\", switchOn ? \"light\" : \"dark\");\n       return window.dash_clientside.no_update\n    }\n    \" \" \",\n    Output(\"switch\", \"id\"),\n    Input(\"switch\", \"value\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Horizontal Alignment in Bootstrap Rows\nDESCRIPTION: Demonstrates horizontal alignment options for columns within a row using the 'justify' property with values like 'start', 'center', 'end', 'between', and 'around'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow1 = dbc.Row(\n    [\n        dbc.Col(\"justify='start'\", width=4),\n        dbc.Col(\"justify='start'\", width=4),\n    ],\n    justify=\"start\",\n)\n\nrow2 = dbc.Row(\n    [\n        dbc.Col(\"justify='center'\", width=4),\n        dbc.Col(\"justify='center'\", width=4),\n    ],\n    justify=\"center\",\n)\n\nrow3 = dbc.Row(\n    [\n        dbc.Col(\"justify='end'\", width=4),\n        dbc.Col(\"justify='end'\", width=4),\n    ],\n    justify=\"end\",\n)\n\nrow4 = dbc.Row(\n    [\n        dbc.Col(\"justify='between'\", width=4),\n        dbc.Col(\"justify='between'\", width=4),\n    ],\n    justify=\"between\",\n)\n\nrow5 = dbc.Row(\n    [\n        dbc.Col(\"justify='around'\", width=4),\n        dbc.Col(\"justify='around'\", width=4),\n    ],\n    justify=\"around\",\n)\n```\n\n----------------------------------------\n\nTITLE: Ordering and Offsetting Bootstrap Columns\nDESCRIPTION: Demonstrates how to use order and offset properties with Bootstrap columns to control their positioning within a row.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow = dbc.Row(\n    [\n        dbc.Col(\n            \"order=last, size=4\",\n            width={\"size\": 4, \"order\": \"last\"},\n        ),\n        dbc.Col(\n            \"order=first, size=3\",\n            width={\"size\": 3, \"order\": \"first\"},\n        ),\n        dbc.Col(\n            \"order=12, offset=2, size=3\",\n            width={\"size\": 3, \"offset\": 2, \"order\": 12},\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Tab Content with Graphs in Dash (Python)\nDESCRIPTION: Demonstrates how to render tab content dynamically using a callback in Dash. It uses dcc.Store to cache results client-side, which helps prevent sizing issues with graphs when switching tabs.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/advanced-component-usage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngraphs_in_tabs.py\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Bootstrap Layouts with Breakpoints\nDESCRIPTION: Shows how to create responsive layouts using Bootstrap's breakpoint system by specifying different column behaviors for different screen sizes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow1 = dbc.Row(\n    [\n        dbc.Col(\"md=4\", md=4),\n        dbc.Col(\"md=4\", md=4),\n        dbc.Col(\"md=4\", md=4),\n    ]\n)\n\nrow2 = dbc.Row(\n    [\n        dbc.Col(\"width=6, lg=3\", width=6, lg=3),\n        dbc.Col(\"width=6, lg=3\", width=6, lg=3),\n        dbc.Col(\"width=6, lg=3\", width=6, lg=3),\n        dbc.Col(\"width=6, lg=3\", width=6, lg=3),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Tabs with Callbacks\nDESCRIPTION: Shows how to use callbacks to control tab switching and content updates based on active tab selection.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Active tab callback example\n\ntabs = html.Div([\n    dbc.Tabs(\n        id=\"tabs-example\",\n        children=[\n            dbc.Tab(label=\"Tab 1\"),\n            dbc.Tab(label=\"Tab 2\"),\n        ]\n    ),\n    html.Div(id=\"tabs-example-content\")\n])\n\n@app.callback(\n    Output(\"tabs-example-content\", \"children\"),\n    [Input(\"tabs-example\", \"active_tab\")]\n)\ndef render_content(active_tab):\n    if active_tab == \"tab-1\":\n        return \"Tab 1 selected\"\n    return \"Tab 2 selected\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Widths in Bootstrap Grid\nDESCRIPTION: Creates a row with three columns that have specific widths: a full-width column, an auto-sized column, and a column that spans 5 of 12 grid columns.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow = dbc.Row(\n    [\n        dbc.Col(\"Width = True (expands to fill space)\", width=True),\n        dbc.Col(\"Width = \\\"auto\\\"\", width=\"auto\"),\n        dbc.Col(\"Width = 5 (5/12 width)\", width=5),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Building Complex Form Layouts with Grid Components in Dash\nDESCRIPTION: Shows how to create more complex form layouts using Row and Col grid components with Bootstrap's gutter modifier classes to adjust spacing between form components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nform = dbc.Form(\n    [\n        dbc.Row(\n            [\n                dbc.Col(\n                    [\n                        dbc.Label(\"Email\", html_for=\"example-email-grid\"),\n                        dbc.Input(\n                            type=\"email\",\n                            id=\"example-email-grid\",\n                            placeholder=\"Enter email\",\n                        ),\n                    ],\n                    width=6,\n                ),\n                dbc.Col(\n                    [\n                        dbc.Label(\"Password\", html_for=\"example-password-grid\"),\n                        dbc.Input(\n                            type=\"password\",\n                            id=\"example-password-grid\",\n                            placeholder=\"Enter password\",\n                        ),\n                    ],\n                    width=6,\n                ),\n            ],\n            className=\"g-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Col(\n                    [\n                        dbc.Label(\"Address\", html_for=\"example-address\"),\n                        dbc.Input(\n                            id=\"example-address\",\n                            placeholder=\"1234 Main St\",\n                        ),\n                    ],\n                    width=12,\n                )\n            ],\n            className=\"g-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Col(\n                    [\n                        dbc.Label(\"Address 2\", html_for=\"example-address-2\"),\n                        dbc.Input(\n                            id=\"example-address-2\",\n                            placeholder=\"Apartment, studio, or floor\",\n                        ),\n                    ],\n                    width=12,\n                )\n            ],\n            className=\"g-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Col(\n                    [\n                        dbc.Label(\"City\", html_for=\"example-city\"),\n                        dbc.Input(\n                            id=\"example-city\",\n                            placeholder=\"Enter city\",\n                        ),\n                    ],\n                    width=6,\n                ),\n                dbc.Col(\n                    [\n                        dbc.Label(\"State\", html_for=\"example-state\"),\n                        dbc.Input(id=\"example-state\", placeholder=\"Enter state\"),\n                    ],\n                    width=4,\n                ),\n                dbc.Col(\n                    [\n                        dbc.Label(\"Zip\", html_for=\"example-zip\"),\n                        dbc.Input(id=\"example-zip\"),\n                    ],\n                    width=2,\n                ),\n            ],\n            className=\"g-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Col(\n                    dbc.Checkbox(\n                        id=\"example-check\",\n                        label=\"Check me out\",\n                    ),\n                    width=12,\n                )\n            ],\n            className=\"g-3\",\n        ),\n        dbc.Button(\"Submit\", color=\"primary\", className=\"me-1\"),\n    ],\n    className=\"g-3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Collapse Components with Callbacks in Dash Bootstrap\nDESCRIPTION: This example demonstrates complex callback patterns with Collapse components, including a single button controlling multiple Collapse components and multiple buttons sharing control of a single Collapse.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/collapse.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/collapse/multiple.py:collapses}}\n```\n\n----------------------------------------\n\nTITLE: Implementing NavbarSimple Component in Dash Bootstrap Components\nDESCRIPTION: Example of using the NavbarSimple component which provides a brand on the left side and navigation items that collapse on smaller screens. The component can be customized with NavItems and DropdownMenus.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/navbar.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/navbar/simple.py:navbar}}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Dash app with Bootstrap theme\nDESCRIPTION: Code snippet showing how to initialize a Dash application with a Bootstrap theme from dash-bootstrap-components. This links the CSS stylesheet through the external_stylesheets parameter.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/quickstart.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n```\n\n----------------------------------------\n\nTITLE: Adding Icons and Dismiss Buttons to Toast Notifications in Dash Bootstrap Components\nDESCRIPTION: Example showing how to add a contextual icon to the Toast header and a dismiss button for user interaction. The dismiss button allows users to close the notification, and it can be made visible again using a callback.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/toast.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, html, callback\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\ntoast = html.Div(\n    [\n        dbc.Button(\n            \"Open toast\", id=\"button\", color=\"primary\", className=\"mb-3\"\n        ),\n        dbc.Toast(\n            [\n                html.P(\"This toast has an icon and a colored header\", className=\"mb-0\")\n            ],\n            id=\"toast\",\n            header=\"Danger!\",\n            is_open=False,\n            dismissable=True,\n            icon=\"danger\",\n            # top: 66 positions the toast below the navbar\n            style={\"position\": \"fixed\", \"top\": 66, \"right\": 10, \"width\": 350},\n        ),\n    ]\n)\n\n\n@callback(Output(\"toast\", \"is_open\"), Input(\"button\", \"n_clicks\"))\ndef open_toast(n):\n    if n:\n        return True\n    return False\n\n\napp.layout = dbc.Container(toast)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Manually Linking Bootstrap CDN in Dash App Initialization\nDESCRIPTION: This snippet illustrates how to manually link to a Bootstrap CDN when initializing a Dash application. It uses a direct URL to the Bootstrap CSS file instead of using the themes module.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/themes.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBS = \"https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css\"\napp = dash.Dash(external_stylesheets=[BS])\n```\n\n----------------------------------------\n\nTITLE: DataFrame to Bootstrap Table Conversion\nDESCRIPTION: Shows how to convert a Pandas DataFrame to a Bootstrap-styled table using the from_dataframe helper method.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/table/helper.py:table}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callbacks for Pagination in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to use the active_page prop with callbacks to track and respond to user interactions with the pagination component.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/pagination.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/pagination/callback.py:pagination}}\n```\n\n----------------------------------------\n\nTITLE: Button with Download Option in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to use the download prop to specify a filename for a downloaded file that can differ from the filename on the server. The example sets up a button that downloads a file when clicked.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import html, Input, Output, State, callback\nimport dash_bootstrap_components as dbc\n\nbutton = html.Div(\n    [\n        dbc.Button(\n            \"Download\",\n            id=\"example-download-button\",\n            color=\"primary\",\n            className=\"mb-3\",\n        ),\n        dbc.Collapse(\n            dbc.Card(dbc.CardBody(\"Content of downloaded file appears here\")),\n            id=\"example-download-collapse\",\n        ),\n    ]\n)\n\n@callback(\n    Output(\"example-download-collapse\", \"is_open\"),\n    [Input(\"example-download-button\", \"n_clicks\")],\n    [State(\"example-download-collapse\", \"is_open\")],\n)\ndef toggle_download_collapse(n, is_open):\n    if n:\n        return not is_open\n    return is_open\n```\n\n----------------------------------------\n\nTITLE: Basic Bootstrap Table Implementation in Dash\nDESCRIPTION: Demonstrates how to create a simple Bootstrap-styled table using dbc.Table as a replacement for html.Table, with basic table structure elements.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/table/simple.py:table}}\n```\n\n----------------------------------------\n\nTITLE: Integrating Progress Bars with Intervals in Python\nDESCRIPTION: Demonstrates how to use a Progress component with a dcc.Interval to periodically update the progress value.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import html, dcc\nfrom dash.dependencies import Input, Output\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = html.Div([\n    dbc.Progress(id=\"progress\"),\n    dcc.Interval(id=\"interval\", interval=250, n_intervals=0),\n])\n\n@app.callback(\n    Output(\"progress\", \"value\"),\n    Input(\"interval\", \"n_intervals\")\n)\ndef update_progress(n):\n    return min(n % 110, 100)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Callbacks with Accordion\nDESCRIPTION: Example demonstrating how to use item_id with callbacks to determine which sections have been opened in an Accordion.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/callback.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Button Usage with Callbacks in Dash\nDESCRIPTION: Shows how to use the n_clicks prop as an input to trigger callbacks when buttons are clicked by the user. The example displays a counter that increments when the button is clicked.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, State, html, callback\nimport dash_bootstrap_components as dbc\n\nbutton = html.Div(\n    [\n        dbc.Button(\"Click me\", id=\"example-button\", className=\"me-2\"),\n        html.Span(id=\"example-output\", style={\"verticalAlign\": \"middle\"}),\n    ]\n)\n\n@callback(\n    Output(\"example-output\", \"children\"), [Input(\"example-button\", \"n_clicks\")]\n)\ndef on_button_click(n):\n    if n is None:\n        return \"Not clicked.\"\n    else:\n        return f\"Clicked {n} times.\"\n```\n\n----------------------------------------\n\nTITLE: Using Spinner as a Loading Component in Dash Bootstrap Components\nDESCRIPTION: This example shows how to use the Spinner component as a loading indicator for other Dash components. The spinner is displayed while the graph component loads, and spinner styling can be customized with spinner_style or spinnerClassName properties.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/spinner.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\nimport plotly.express as px\nfrom dash import dcc\n\ndf = px.data.stocks()\nfig = px.line(df, x=\"date\", y=df.columns[1:],\n              hover_data={\"date\": \":|\"})\n\nloading_spinner = html.Div(\n    [\n        dbc.Spinner(children=[dcc.Graph(figure=fig)], color=\"primary\"),\n        dbc.Spinner(\n            children=[dcc.Graph(figure=fig)],\n            color=\"primary\",\n            spinner_style={\"width\": \"3rem\", \"height\": \"3rem\"},\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Alerts with Bootstrap Icons in Dash\nDESCRIPTION: This example shows how to create Bootstrap alerts with integrated icons. It uses the html.I component with Bootstrap Icon classes and combines them with dbc.Alert components to create informative, styled alerts with appropriate icons.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/icons.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nimport dash_html_components as html\n\nalerts = html.Div(\n    [\n        dbc.Alert(\n            [\n                html.I(className=\"bi bi-info-circle-fill me-2\"),\n                \"An example info alert with an icon\",\n            ],\n            color=\"info\",\n            className=\"d-flex align-items-center\",\n        ),\n        dbc.Alert(\n            [\n                html.I(className=\"bi bi-check-circle-fill me-2\"),\n                \"An example success alert with an icon\",\n            ],\n            color=\"success\",\n            className=\"d-flex align-items-center\",\n        ),\n        dbc.Alert(\n            [\n                html.I(className=\"bi bi-exclamation-triangle-fill me-2\"),\n                \"An example warning alert with an icon\",\n            ],\n            color=\"warning\",\n            className=\"d-flex align-items-center\",\n        ),\n        dbc.Alert(\n            [\n                html.I(className=\"bi bi-x-octagon-fill me-2\"),\n                \"An example danger alert with an icon\",\n            ],\n            color=\"danger\",\n            className=\"d-flex align-items-center\",\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu with Complex Content - Python\nDESCRIPTION: Implementation showing various menu content options including headers, dividers, and custom content.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/content.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Collapse Toggle in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates a basic collapse toggle using a button click to show and hide content by setting the 'is_open' property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/collapse.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/collapse/simple.py:collapse}}\n```\n\n----------------------------------------\n\nTITLE: Half-Size Block Button in Dash Bootstrap Components\nDESCRIPTION: Shows how to adjust the width of a block button using grid column width classes. This example creates a half-size button using .col-6 class and centers it with .mx-auto.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbutton = html.Div(\n    dbc.Button(\n        \"Half-width block button\",\n        color=\"primary\",\n        className=\"d-grid gap-2 col-6 mx-auto\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Pagination for Large Sets in Dash Bootstrap Components\nDESCRIPTION: Shows how to handle pagination for large numbers of pages by setting fully_expanded=False, which replaces some numbers with ellipses to make the component more compact.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/pagination.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/pagination/collapse.py:pagination}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dash App with Icon Libraries in dash-bootstrap-components\nDESCRIPTION: This snippet demonstrates how to initialize a Dash application with either Bootstrap Icons or Font Awesome by adding them to the external_stylesheets parameter. Both icon libraries are available via the dash_bootstrap_components.icons submodule.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/icons.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\n# For Bootstrap Icons...\napp = dash.Dash(\n    external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP]\n)\n# Or for Font Awesome Icons...\napp = dash.Dash(\n    external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.FONT_AWESOME]\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Options Structure Example\nDESCRIPTION: Example showing the standard structure for specifying options in Select, RadioItems and Checklist components using Python dictionaries.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions=[\n  {\n    \"label\": \"Label 1\",\n    \"value\": \"value_1\",\n    ...\n  },\n  {\n    \"label\": \"Label 2\",\n    \"value\": \"value_2\",\n    ...\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Mobile Viewport Meta Tags in Dash Constructor\nDESCRIPTION: Python code for adding viewport meta tags to a Dash application. This achieves the same effect as adding the meta tag in HTML, ensuring proper content scaling on mobile devices.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = dash.Dash(\n    external_stylesheets=[dbc.themes.BOOTSTRAP],\n    meta_tags=[\n        {\"name\": \"viewport\", \"content\": \"width=device-width, initial-scale=1\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Titles, Text, and Links to Dash Bootstrap Cards\nDESCRIPTION: This example illustrates how to add titles, subtitles, text, and links to a card using specific CSS classes and the CardLink component. It shows how to optimize spacing and create interactive links within cards.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/ttl.py:card}}\n```\n\n----------------------------------------\n\nTITLE: NavLink Implementation with Callbacks\nDESCRIPTION: Demonstrates NavLink usage as both hyperlinks and clickable elements with callback functionality, including external link handling.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/navlink.py:nav}}\n```\n\n----------------------------------------\n\nTITLE: MultiIndex DataFrame Table Conversion\nDESCRIPTION: Demonstrates how to handle MultiIndex DataFrames when converting to Bootstrap tables, with automatic header cell merging.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/table/helper_multi.py:table}}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Spinners with Different Colors in Dash Bootstrap Components\nDESCRIPTION: This snippet demonstrates how to create simple spinner components with different color options using the dbc.Spinner component from Dash Bootstrap Components. The example shows spinners with various contextual colors including primary, secondary, success, warning, danger, info, dark, and light.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/spinner.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nspinners = html.Div(\n    [\n        dbc.Spinner(color=\"primary\"),\n        dbc.Spinner(color=\"secondary\"),\n        dbc.Spinner(color=\"success\"),\n        dbc.Spinner(color=\"warning\"),\n        dbc.Spinner(color=\"danger\"),\n        dbc.Spinner(color=\"info\"),\n        dbc.Spinner(color=\"dark\"),\n        dbc.Spinner(color=\"light\"),\n    ],\n    className=\"d-flex flex-row\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Card with Mixed Content in Dash Bootstrap\nDESCRIPTION: This example demonstrates how to create a basic card with mixed content and a fixed width using the Card component in Dash Bootstrap. The card's width is set using the style argument.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/simple.py:card}}\n```\n\n----------------------------------------\n\nTITLE: Positioning Toast Notifications in Dash Bootstrap Components\nDESCRIPTION: Example demonstrating how to position Toast components using CSS. It shows how to use the style and className arguments for single toasts and how to wrap multiple toasts in a container for proper stacking.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/toast.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, State, html, callback\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\ntoast = html.Div(\n    [\n        dbc.Button(\"Top right\", id=\"positioned-toast-toggle-tr\", color=\"primary\"),\n        dbc.Button(\n            \"Bottom right\",\n            id=\"positioned-toast-toggle-br\",\n            color=\"primary\",\n        ),\n        dbc.Button(\"Bottom left\", id=\"positioned-toast-toggle-bl\", color=\"primary\"),\n        dbc.Button(\"Top left\", id=\"positioned-toast-toggle-tl\", color=\"primary\"),\n        html.Div(\n            [\n                dbc.Toast(\n                    \"Hi there! I'm a toast\",\n                    id=\"positioned-toast-tr\",\n                    header=\"Toast\",\n                    is_open=False,\n                    dismissable=True,\n                    style={\n                        \"position\": \"fixed\",\n                        \"top\": 10,\n                        \"right\": 10,\n                        \"width\": 350,\n                    },\n                ),\n                dbc.Toast(\n                    \"Hi there! I'm a toast\",\n                    id=\"positioned-toast-br\",\n                    header=\"Toast\",\n                    is_open=False,\n                    dismissable=True,\n                    style={\n                        \"position\": \"fixed\",\n                        \"bottom\": 10,\n                        \"right\": 10,\n                        \"width\": 350,\n                    },\n                ),\n                dbc.Toast(\n                    \"Hi there! I'm a toast\",\n                    id=\"positioned-toast-bl\",\n                    header=\"Toast\",\n                    is_open=False,\n                    dismissable=True,\n                    style={\n                        \"position\": \"fixed\",\n                        \"bottom\": 10,\n                        \"left\": 10,\n                        \"width\": 350,\n                    },\n                ),\n                dbc.Toast(\n                    \"Hi there! I'm a toast\",\n                    id=\"positioned-toast-tl\",\n                    header=\"Toast\",\n                    is_open=False,\n                    dismissable=True,\n                    style={\n                        \"position\": \"fixed\",\n                        \"top\": 10,\n                        \"left\": 10,\n                        \"width\": 350,\n                    },\n                ),\n            ]\n        ),\n    ],\n    className=\"p-3 bg-light rounded-3 buttons-stack\",\n)\n\n\n@callback(\n    Output(\"positioned-toast-tr\", \"is_open\"),\n    [Input(\"positioned-toast-toggle-tr\", \"n_clicks\")],\n    [State(\"positioned-toast-tr\", \"is_open\")],\n)\ndef open_toast(n, is_open):\n    if n:\n        return not is_open\n    return is_open\n\n\n@callback(\n    Output(\"positioned-toast-br\", \"is_open\"),\n    [Input(\"positioned-toast-toggle-br\", \"n_clicks\")],\n    [State(\"positioned-toast-br\", \"is_open\")],\n)\ndef open_toast(n, is_open):\n    if n:\n        return not is_open\n    return is_open\n\n\n@callback(\n    Output(\"positioned-toast-bl\", \"is_open\"),\n    [Input(\"positioned-toast-toggle-bl\", \"n_clicks\")],\n    [State(\"positioned-toast-bl\", \"is_open\")],\n)\ndef open_toast(n, is_open):\n    if n:\n        return not is_open\n    return is_open\n\n\n@callback(\n    Output(\"positioned-toast-tl\", \"is_open\"),\n    [Input(\"positioned-toast-toggle-tl\", \"n_clicks\")],\n    [State(\"positioned-toast-tl\", \"is_open\")],\n)\ndef open_toast(n, is_open):\n    if n:\n        return not is_open\n    return is_open\n\n\napp.layout = dbc.Container(toast)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Collapse Animation in Dash Bootstrap\nDESCRIPTION: This snippet shows how to implement a horizontal collapse animation by setting 'dimension=\"width\"'. It includes proper dimensioning for the objects inside the Collapse component.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/collapse.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/collapse/horizontal.py:collapse}}\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Visibility with Callbacks in Python using Dash\nDESCRIPTION: This example demonstrates how to control a tooltip's visibility using callbacks in a Dash app. It shows how to manually set the 'is_open' property and use 'trigger=None' for custom control over when the tooltip appears.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tooltip.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import Dash, Input, Output, State, html\n\napp = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = html.Div(\n    [\n        dbc.Button(\"Click me!\", id=\"tooltip-target\", n_clicks=0),\n        dbc.Tooltip(\n            \"This tooltip is being controlled by our callback\",\n            target=\"tooltip-target\",\n            trigger=None,\n        ),\n    ]\n)\n\n\n@app.callback(\n    Output(\"tooltip-target\", \"children\"),\n    Output(\"tooltip-target\", \"n_clicks\"),\n    Input(\"tooltip-target\", \"n_clicks\"),\n)\ndef update_button(n):\n    if n:\n        return \"Clicked!\", 0\n    return \"Click me!\", n\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Controlling Card Sizing with Grid Components in Dash Bootstrap\nDESCRIPTION: This snippet shows how to control card width and layout using Row and Col components. It demonstrates setting specific widths for cards within a grid system.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/sizing/grid.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Creating Image Overlays in Dash Bootstrap Cards\nDESCRIPTION: This example shows how to use CardImgOverlay to display card content over the top of a card image, potentially requiring additional styles or utilities depending on the image.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/image_overlay.py:card}}\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage in Python with Dash Bootstrap Components\nDESCRIPTION: This snippet demonstrates how to use the Tooltip component in a Dash app. It shows how to target a specific word in a text using html.Span and apply a tooltip to it.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tooltip.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import Dash, html\n\napp = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = html.Div(\n    [\n        html.P(\n            [\n                \"I wonder what \",\n                html.Span(\n                    \"floccinaucinihilipilification\",\n                    id=\"tooltip-target\",\n                    style={\"textDecoration\": \"underline\", \"cursor\": \"pointer\"},\n                ),\n                \" means?\",\n            ]\n        ),\n        dbc.Tooltip(\n            \"Noun: rare, the action or habit of estimating something as worthless.\",\n            target=\"tooltip-target\",\n        ),\n    ]\n)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navbar Component in Dash Bootstrap Components\nDESCRIPTION: Example of using the more flexible Navbar component that allows full control over children elements and layout. Requires custom callbacks for toggle behavior on small screens and should contain elements within a Container.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/navbar.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/navbar/navbar.py:navbar}}\n```\n\n----------------------------------------\n\nTITLE: Tabs in Bootstrap Cards\nDESCRIPTION: Demonstrates how to integrate tabs within Bootstrap card components using callbacks for content switching.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Card tabs example\n\ncard = dbc.Card([\n    dbc.CardHeader(\n        dbc.Tabs(\n            id=\"card-tabs\",\n            children=[\n                dbc.Tab(label=\"Tab 1\", tab_id=\"tab-1\"),\n                dbc.Tab(label=\"Tab 2\", tab_id=\"tab-2\"),\n            ]\n        )\n    ),\n    dbc.CardBody(id=\"card-content\")\n])\n\n@app.callback(\n    Output(\"card-content\", \"children\"),\n    [Input(\"card-tabs\", \"active_tab\")]\n)\ndef tab_content(active_tab):\n    if active_tab == \"tab-1\":\n        return \"This is tab 1's content\"\n    elif active_tab == \"tab-2\":\n        return \"This is tab 2's content\"\n    return \"No tab selected\"\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in Dash\nDESCRIPTION: Demonstrates the basic usage of Tabs component with multiple Tab children, including disabled state functionality.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Simple tabs example\n\ndbc.Tabs([\n    dbc.Tab(label=\"Tab 1\", children=[\"This is tab 1\"]),\n    dbc.Tab(label=\"Tab 2\", children=[\"This is tab 2\"]),\n    dbc.Tab(label=\"Tab 3\", children=[\"This is tab 3\"], disabled=True),\n])\n```\n\n----------------------------------------\n\nTITLE: Tooltip Placement Options in Python with Dash Bootstrap Components\nDESCRIPTION: This example shows how to control the placement of tooltips using the 'placement' argument. It demonstrates various placement options including 'top', 'left', 'right', 'bottom', and their variations with '-start' and '-end'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tooltip.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import Dash, html\n\napp = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\nbutton = dbc.Button(\"Click me!\", color=\"primary\")\n\napp.layout = html.Div(\n    [\n        dbc.Button(\"Top\", id=\"tooltip-target-top\", color=\"primary\", className=\"me-1\"),\n        dbc.Tooltip(\"Tooltip on top\", target=\"tooltip-target-top\"),\n        dbc.Button(\n            \"Left\", id=\"tooltip-target-left\", color=\"primary\", className=\"me-1\"\n        ),\n        dbc.Tooltip(\"Tooltip on left\", target=\"tooltip-target-left\", placement=\"left\"),\n        dbc.Button(\n            \"Right\", id=\"tooltip-target-right\", color=\"primary\", className=\"me-1\"\n        ),\n        dbc.Tooltip(\n            \"Tooltip on right\", target=\"tooltip-target-right\", placement=\"right\"\n        ),\n        dbc.Button(\n            \"Bottom\", id=\"tooltip-target-bottom\", color=\"primary\", className=\"me-1\"\n        ),\n        dbc.Tooltip(\n            \"Tooltip on bottom\", target=\"tooltip-target-bottom\", placement=\"bottom\"\n        ),\n    ]\n)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Popover Placement in Dash\nDESCRIPTION: This example demonstrates how to control the positioning of popovers using the placement property with options like top, bottom, left, right, and their variants.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/direction.py:popovers}}\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Form in Dash with Bootstrap\nDESCRIPTION: Demonstrates how to build a fully inline form using Row and Col components with width=\"auto\" on Label components and Bootstrap's gutter and spacing utilities to control component spacing.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nform = dbc.Form(\n    dbc.Row(\n        [\n            dbc.Label(\"Email\", width=\"auto\"),\n            dbc.Col(\n                dbc.Input(type=\"email\", placeholder=\"Enter email\"),\n                className=\"me-3\",\n            ),\n            dbc.Label(\"Password\", width=\"auto\"),\n            dbc.Col(\n                dbc.Input(type=\"password\", placeholder=\"Enter password\"),\n                className=\"me-3\",\n            ),\n            dbc.Col(\n                dbc.Checkbox(label=\"Remember me\"),\n                className=\"me-3\",\n            ),\n            dbc.Col(\n                dbc.Button(\"Submit\", color=\"primary\"),\n                width=\"auto\",\n            ),\n        ],\n        className=\"g-2 ms-auto flex-nowrap mt-3 mt-md-0\",\n        align=\"center\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Adding DropdownMenu to Input Groups\nDESCRIPTION: This example shows how to integrate DropdownMenu components within an InputGroup for advanced input options.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input_group.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/input_group/dropdown.py:input_group}}\n```\n\n----------------------------------------\n\nTITLE: Using Only the Bootstrap Grid System in Dash\nDESCRIPTION: Shows how to use only the Bootstrap grid system in a Dash app without loading all Bootstrap CSS, by importing only the grid CSS via the themes module.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import html\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP_GRID])\n\napp.layout = dbc.Container(\n    [\n        dbc.Row(\n            [\n                dbc.Col(html.Div(\"One of three columns\")),\n                dbc.Col(html.Div(\"One of three columns\")),\n                dbc.Col(html.Div(\"One of three columns\")),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sized Dropdown Menu - Python\nDESCRIPTION: Example showing different sizes of dropdown menu toggles using the size argument.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/size.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Adding Checkboxes and Radio Buttons to Input Groups\nDESCRIPTION: This example illustrates how to place Checkbox or RadioButton components inside the InputGroupText instead of just text.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input_group.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/input_group/check_radio.py:input_groups}}\n```\n\n----------------------------------------\n\nTITLE: Combining Stack with Bootstrap Spacing Utilities\nDESCRIPTION: Demonstrates how to combine the Stack component with Bootstrap's spacing utilities to create more sophisticated layouts with varied spacing.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nimport dash_html_components as html\n\nstack = dbc.Stack(\n    [\n        dbc.Button(\"First item\", color=\"primary\", className=\"mb-3\"),\n        dbc.Button(\"Second item\", color=\"secondary\", className=\"mb-3\"),\n        html.Div(\n            dbc.Button(\"Third item\", color=\"success\"),\n            className=\"ms-auto\",  # pushes the div to the right\n        ),\n    ],\n    gap=2,  # sets the gap size between items\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissable Alerts in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates how to create dismissable alerts using the 'dismissable' and 'is_open' properties, as well as how to control fade animations.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/alert.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/alert/dismiss.py:alert}}\n```\n\n----------------------------------------\n\nTITLE: Simple Button Styling with Color Options in Dash Bootstrap Components\nDESCRIPTION: Demonstrates the basic button components with different predefined contextual colors. The example shows how to use the color argument to choose between different button styles.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbuttons = html.Div(\n    [\n        dbc.Button(\"Primary\", color=\"primary\", className=\"me-1\"),\n        dbc.Button(\"Secondary\", color=\"secondary\", className=\"me-1\"),\n        dbc.Button(\"Success\", color=\"success\", className=\"me-1\"),\n        dbc.Button(\"Warning\", color=\"warning\", className=\"me-1\"),\n        dbc.Button(\"Danger\", color=\"danger\", className=\"me-1\"),\n        dbc.Button(\"Info\", color=\"info\", className=\"me-1\"),\n        dbc.Button(\"Light\", color=\"light\", className=\"me-1\"),\n        dbc.Button(\"Dark\", color=\"dark\", className=\"me-1\"),\n        dbc.Button(\"Link\", color=\"link\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Styled Dropdown Menu - Python\nDESCRIPTION: Example of dropdown menus with different Bootstrap contextual colors using the color prop.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/style.py:dropdowns}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Form Layout with Bootstrap Row in Dash\nDESCRIPTION: Demonstrates how to create a horizontal form using Row and Col components. The Label component requires a specified width, and inputs need to be wrapped in Col components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nform = html.Div(\n    [\n        dbc.Row(\n            [\n                dbc.Label(\"Email\", width=2),\n                dbc.Col(\n                    dbc.Input(\n                        type=\"email\", placeholder=\"Enter email\"\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"Password\", width=2),\n                dbc.Col(\n                    dbc.Input(\n                        type=\"password\",\n                        placeholder=\"Enter password\",\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"Radios\", width=2),\n                dbc.Col(\n                    dbc.RadioItems(\n                        options=[\n                            {\"label\": \"First radio\", \"value\": 1},\n                            {\"label\": \"Second radio\", \"value\": 2},\n                            {\n                                \"label\": \"Third disabled radio\",\n                                \"value\": 3,\n                                \"disabled\": True,\n                            },\n                        ],\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"Checkbox\", width=2),\n                dbc.Col(\n                    dbc.Checkbox(\n                        id=\"checkbox\",\n                        label=\"Check me out\",\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Button(\"Submit\", color=\"primary\"),\n    ],\n    className=\"ms-auto\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Colored Alerts in Dash Bootstrap Components\nDESCRIPTION: This snippet demonstrates how to create basic Alert components with different contextual colors using the 'color' argument.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/alert.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/alert/simple.py:alerts}}\n```\n\n----------------------------------------\n\nTITLE: Directional Dropdown Menu - Python\nDESCRIPTION: Dropdown menu with different directions using the direction argument for menu placement.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/direction.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Input Groups in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates how to create basic input groups by wrapping compatible input components with Button or InputGroupText in an InputGroup.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input_group.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/input_group/simple.py:input_groups}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Row with Equal-Width Columns in Bootstrap\nDESCRIPTION: Creates a simple row with three columns that have equal width and automatically expand to fill available space.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow = dbc.Row(\n    [\n        dbc.Col(\"One of three columns\"),\n        dbc.Col(\"One of three columns\"),\n        dbc.Col(\"One of three columns\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Incorporating Images in Dash Bootstrap Cards\nDESCRIPTION: This snippet demonstrates how to add images to cards using the CardImg component. It shows the usage of the 'top' and 'bottom' arguments to control border radius on image corners.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/image.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Vertical Navigation Stack\nDESCRIPTION: Implements vertically stacked navigation items with responsive breakpoint handling.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/vertical.py:nav}}\n```\n\n----------------------------------------\n\nTITLE: Managing Active Items in Always Open Accordion\nDESCRIPTION: Example showing how to handle the active_item property when always_open=True, which requires a list of specified item IDs.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/always_open_callback.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Controlling Vertical Alignment in Bootstrap Rows\nDESCRIPTION: Shows how to control the vertical alignment of columns within a row using the 'align' property with options for 'start', 'center', and 'end'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow = dbc.Row(\n    [\n        dbc.Col(\"align='start'\", align=\"start\", width=4),\n        dbc.Col(\"align='center'\", align=\"center\", width=4),\n        dbc.Col(\"align='end'\", align=\"end\", width=4),\n    ],\n    style={\"height\": \"10rem\"},  # set this to view the effect\n)\n```\n\n----------------------------------------\n\nTITLE: Using CardBody Component in Dash Bootstrap Cards\nDESCRIPTION: This snippet shows how to use the CardBody component for creating padded sections within a Card. It also demonstrates the use of the body=True argument on the Card for simplifying the code when all children are in the body.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/body.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Adding Headers and Footers to Dash Bootstrap Cards\nDESCRIPTION: This example demonstrates how to add optional headers or footers to cards using the CardHeader and CardFooter components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/header_footer.py:card}}\n```\n\n----------------------------------------\n\nTITLE: Direct NavLink Usage in Navigation\nDESCRIPTION: Shows simplified navigation layout using NavLink components directly as children of Nav without NavItem wrapper.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/link_based.py:nav}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Breadcrumb Navigation in Dash with Python\nDESCRIPTION: A Python example demonstrating how to create a basic breadcrumb navigation component using dash-bootstrap-components. The example shows how to set up breadcrumb items with labels, links, and active states to indicate the current page location.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/breadcrumb.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbreadcrumb\n```\n\n----------------------------------------\n\nTITLE: Creating a Light/Dark Mode Switch Component in Dash\nDESCRIPTION: This code creates a component for switching between light and dark color modes in a Dash application. It uses Bootstrap icons and a switch component.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/themes.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.FONT_AWESOME])\n\ncolor_mode_switch =  html.Span(\n    [\n        dbc.Label(className=\"fa fa-moon\", html_for=\"switch\"),\n        dbc.Switch( id=\"switch\", value=True, className=\"d-inline-block ms-1\", persistence=True),\n        dbc.Label(className=\"fa fa-sun\", html_for=\"switch\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Labels in a Dash Bootstrap Form\nDESCRIPTION: Shows how to create floating labels that appear over form fields when they receive focus using FormFloating component. A placeholder must be specified on the Input for proper display.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nform = html.Div(\n    [\n        dbc.FormFloating(\n            [\n                dbc.Input(type=\"email\", placeholder=\"name@example.com\"),\n                dbc.Label(\"Email address\"),\n            ]\n        ),\n        html.Br(),\n        dbc.FormFloating(\n            [\n                dbc.Input(type=\"password\", placeholder=\"Password\"),\n                dbc.Label(\"Password\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Icons to Pagination in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to add First/Last and Previous/Next navigation icons to a pagination component using the first_last and previous_next properties.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/pagination/navigation.py:pagination}}\n```\n\n----------------------------------------\n\nTITLE: Adding Color-Matched Links to Alerts in Dash Bootstrap Components\nDESCRIPTION: This example shows how to use the 'alert-link' class to create links within Alert components that match the alert's color scheme.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/alert.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/alert/link.py:alerts}}\n```\n\n----------------------------------------\n\nTITLE: Creating an Always Open Accordion\nDESCRIPTION: Implementation of an Accordion with always_open=True to allow multiple items to remain open simultaneously.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/always_open.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Controlling Popovers with Callbacks in Dash\nDESCRIPTION: This example shows how to manually control popover visibility using callbacks, allowing popovers to appear based on interactions with other components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/popover_callback.py:popover}}\n```\n\n----------------------------------------\n\nTITLE: Interactive Dropdown Menu Items - Python\nDESCRIPTION: Example showing dropdown menu items functioning as links and buttons with callback functionality.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/menu_items.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Navigation Alignment\nDESCRIPTION: Shows implementation of fill and justified navigation items to utilize horizontal space effectively.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/fill.py:navs}}\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Dismissing Alerts in Dash Bootstrap Components\nDESCRIPTION: This snippet shows how to implement automatically dismissing alerts using the 'duration' keyword argument, which specifies the time in milliseconds before the alert disappears.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/alert.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/alert/auto_dismiss.py:alert}}\n```\n\n----------------------------------------\n\nTITLE: Creating Alerts with Additional Content in Dash Bootstrap Components\nDESCRIPTION: This snippet illustrates how to include additional HTML elements like headings, paragraphs, and dividers within an Alert component.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/alert.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/alert/content.py:alert}}\n```\n\n----------------------------------------\n\nTITLE: Active and Disabled Button States in Dash Bootstrap Components\nDESCRIPTION: Shows how to enforce the active state of buttons by setting active=True and how to disable buttons using disabled=True. The example demonstrates both regular and outline buttons in these states.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbuttons = html.Div(\n    [\n        html.Div(\n            [\n                dbc.Button(\n                    \"Regular\", color=\"primary\", className=\"me-1\"\n                ),\n                dbc.Button(\n                    \"Active\", color=\"primary\", active=True, className=\"me-1\"\n                ),\n                dbc.Button(\n                    \"Disabled\", color=\"primary\", disabled=True, className=\"me-1\"\n                ),\n            ]\n        ),\n        html.Hr(),\n        html.Div(\n            [\n                dbc.Button(\n                    \"Outline\",\n                    outline=True,\n                    color=\"primary\",\n                    className=\"me-1\",\n                ),\n                dbc.Button(\n                    \"Active\",\n                    outline=True,\n                    color=\"primary\",\n                    active=True,\n                    className=\"me-1\",\n                ),\n                dbc.Button(\n                    \"Disabled\",\n                    outline=True,\n                    color=\"primary\",\n                    disabled=True,\n                    className=\"me-1\",\n                ),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Flex Layout with Block Buttons in Dash Bootstrap Components\nDESCRIPTION: Demonstrates using Flex and margin utilities to adjust the alignment of buttons in their horizontal state. This example combines flex utilities with responsive block buttons to control layout across screen sizes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbutton = html.Div(\n    [\n        html.H4(\"For large screens\"),\n        html.Div(\n            [\n                dbc.Button(\n                    \"Left\", className=\"me-auto\", color=\"primary\", outline=True\n                ),\n                dbc.Button(\n                    \"Middle\", className=\"mx-auto\", color=\"primary\", outline=True\n                ),\n                dbc.Button(\n                    \"Right\", className=\"ms-auto\", color=\"primary\", outline=True\n                ),\n            ],\n            className=\"d-flex mb-3\",\n        ),\n        html.H4(\"For small screens\"),\n        html.Div(\n            [\n                dbc.Button(\n                    \"Top\",\n                    className=\"d-md-block gap-2 col-6 mx-auto mb-2\",\n                    color=\"success\",\n                ),\n                dbc.Button(\n                    \"Middle\",\n                    className=\"d-md-block gap-2 col-6 mx-auto mb-2\",\n                    color=\"success\",\n                ),\n                dbc.Button(\n                    \"Bottom\",\n                    className=\"d-md-block gap-2 col-6 mx-auto\",\n                    color=\"success\",\n                ),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Spinner Sizes in Dash Bootstrap Components\nDESCRIPTION: This snippet shows how to create spinners of different sizes using either the size parameter or the spinner_style property. It demonstrates creating small spinners with size='sm' and custom-sized spinners with inline styles.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/spinner.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nspinners = html.Div(\n    [\n        dbc.Spinner(size=\"sm\"),\n        dbc.Spinner(),\n        dbc.Spinner(spinner_style={\"width\": \"3rem\", \"height\": \"3rem\"}),\n    ],\n    className=\"d-flex flex-row\",\n)\n```\n\n----------------------------------------\n\nTITLE: Positioning Badges with Bootstrap Utility Classes\nDESCRIPTION: Shows how to use Bootstrap's position utility classes to modify badges and position them in the corner of links or buttons for notification-style indicators.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/positioned.py:badge}}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors for Progress Bars in Python\nDESCRIPTION: Demonstrates how to set different background colors for progress bars using Bootstrap's contextual color names.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50, color=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Implementation in Dash-Bootstrap\nDESCRIPTION: Demonstrates basic navigation setup using Nav, NavItem, NavLink and DropdownMenu components with nav=True for consistent styling.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/simple.py:nav}}\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Cards in Dash Bootstrap\nDESCRIPTION: This example shows how to create horizontal cards using a combination of grid and utility classes, making them mobile-friendly and responsive.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/sizing/horizontal.py:card}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Item Size in Dash Bootstrap Components\nDESCRIPTION: Shows how to adjust the size of pagination items using the size prop. Available options are \"sm\" (small) and \"lg\" (large), with a default size if not specified.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/pagination/size.py:pagination}}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Striped Progress Bars in Python\nDESCRIPTION: Shows how to create animated striped progress bars by setting both 'striped' and 'animated' properties to True.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50, striped=True, animated=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Striped Progress Bars in Python\nDESCRIPTION: Demonstrates how to create striped progress bars by setting the 'striped' property to True.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50, striped=True)\n```\n\n----------------------------------------\n\nTITLE: Integrating List Groups in Dash Bootstrap Cards\nDESCRIPTION: This snippet illustrates how to create lists of content in a card using the ListGroup component with the flush=True setting.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/list_group.py:card}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Dismissing Toast Notifications in Dash Bootstrap Components\nDESCRIPTION: Demonstration of how to create Toast components that automatically dismiss themselves after a specified duration in milliseconds. This example shows how to make toast notifications disappear without user interaction.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/toast.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, html, callback\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\ntoast = html.Div(\n    [\n        dbc.Button(\n            \"Open toast with no delay\", id=\"simple-toast-toggle\", color=\"primary\", className=\"mb-3\",\n        ),\n        dbc.Button(\n            \"Open toast with delay\", id=\"auto-toast-toggle\", color=\"primary\", className=\"mb-3\",\n        ),\n        html.Div(\n            [\n                dbc.Toast(\n                    \"This toast doesn't auto-dismiss\",\n                    id=\"simple-toast\",\n                    header=\"Toast\",\n                    is_open=False,\n                    dismissable=True,\n                    style={\"position\": \"fixed\", \"top\": 66, \"right\": 10, \"width\": 350},\n                ),\n                dbc.Toast(\n                    \"This toast auto-dismisses after 5 seconds\",\n                    id=\"auto-toast\",\n                    header=\"Auto-dismiss toast\",\n                    icon=\"primary\",\n                    dismissable=True,\n                    duration=5000,\n                    is_open=False,\n                    style={\n                        \"position\": \"fixed\",\n                        \"top\": 66,\n                        \"right\": 10,\n                        \"width\": 350,\n                    },\n                ),\n            ]\n        ),\n    ]\n)\n\n\n@callback(\n    Output(\"simple-toast\", \"is_open\"),\n    [Input(\"simple-toast-toggle\", \"n_clicks\")],\n)\ndef open_toast(n):\n    if n:\n        return True\n    return False\n\n\n@callback(\n    Output(\"auto-toast\", \"is_open\"),\n    [Input(\"auto-toast-toggle\", \"n_clicks\")],\n)\ndef open_toast(n):\n    if n:\n        return True\n    return False\n\n\napp.layout = dbc.Container(toast)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Growing Spinners in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates how to create growing spinners by setting the type parameter to 'grow'. The snippet shows different colored growing spinners including primary, secondary, success, warning, danger, info, dark, and light variants.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/spinner.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nspinners = html.Div(\n    [\n        dbc.Spinner(color=\"primary\", type=\"grow\"),\n        dbc.Spinner(color=\"secondary\", type=\"grow\"),\n        dbc.Spinner(color=\"success\", type=\"grow\"),\n        dbc.Spinner(color=\"warning\", type=\"grow\"),\n        dbc.Spinner(color=\"danger\", type=\"grow\"),\n        dbc.Spinner(color=\"info\", type=\"grow\"),\n        dbc.Spinner(color=\"dark\", type=\"grow\"),\n        dbc.Spinner(color=\"light\", type=\"grow\"),\n    ],\n    className=\"d-flex flex-row\",\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Height in Python\nDESCRIPTION: Illustrates how to set a custom height for the progress bar using the 'style' argument.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50, style={\"height\": \"30px\"})\n```\n\n----------------------------------------\n\nTITLE: Colored ListGroup Items\nDESCRIPTION: Shows how to apply Bootstrap contextual colors to ListGroupItems.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/colors.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Jumbotron Styling with Bootstrap Utilities\nDESCRIPTION: Advanced example showing how to customize a jumbotron-like component using Bootstrap's utility classes for spacing, background, and border styling.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/jumbotron.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import html\nimport dash_bootstrap_components as dbc\n\njumbotron = html.Div(\n    [\n        html.H1(\"Custom jumbotron\", className=\"display-3\"),\n        html.P(\n            \"This example was created by combining multiple utility classes. \"\n            \"We've increased the padding, added a success background color, \"\n            \"darkened the text, and rounded the corners.\",\n            className=\"lead\",\n        ),\n        html.Hr(className=\"my-4\"),\n        dbc.Button(\"Click me!\", color=\"light\", size=\"lg\"),\n    ],\n    className=\"p-5 mb-4 bg-success text-white rounded-3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Outline Button Styling in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to create outline buttons which have a more lightweight style than the default buttons. This is done by setting outline=True for each button.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbuttons = html.Div(\n    [\n        dbc.Button(\"Primary\", outline=True, color=\"primary\", className=\"me-1\"),\n        dbc.Button(\"Secondary\", outline=True, color=\"secondary\", className=\"me-1\"),\n        dbc.Button(\"Success\", outline=True, color=\"success\", className=\"me-1\"),\n        dbc.Button(\"Warning\", outline=True, color=\"warning\", className=\"me-1\"),\n        dbc.Button(\"Danger\", outline=True, color=\"danger\", className=\"me-1\"),\n        dbc.Button(\"Info\", outline=True, color=\"info\", className=\"me-1\"),\n        dbc.Button(\"Light\", outline=True, color=\"light\", className=\"me-1\"),\n        dbc.Button(\"Dark\", outline=True, color=\"dark\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Responsive Badges in Dash\nDESCRIPTION: Demonstrates how badges scale to match the size of their parent elements by using relative font sizing. This creates a visual hierarchy of badge sizes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/size.py:badges}}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Progress Bars in Python\nDESCRIPTION: Shows how to nest Progress components to create a progress bar with multiple segments.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress([\n    dbc.Progress(value=20, color=\"success\", bar=True),\n    dbc.Progress(value=30, color=\"warning\", bar=True),\n    dbc.Progress(value=20, color=\"danger\", bar=True),\n])\n```\n\n----------------------------------------\n\nTITLE: Active ListGroup Items\nDESCRIPTION: Shows how to mark ListGroupItems as active using the active property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/active.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Using Popover Components with Headers and Bodies\nDESCRIPTION: This example demonstrates how to create styled popovers using PopoverHeader and PopoverBody components for better organization and formatting.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/popover_components.py:popovers}}\n```\n\n----------------------------------------\n\nTITLE: Setting Background and Color for Cards in Dash Bootstrap\nDESCRIPTION: This snippet illustrates how to set background and border colors of cards using Bootstrap's contextual colors, and how to invert text colors for better contrast with dark backgrounds.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/color.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flush Accordion\nDESCRIPTION: Implementation of an Accordion with the flush property to modify styling, removing borders and rounding edges to fit with the parent container.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/flush.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Styled Tabs Implementation\nDESCRIPTION: Shows how to apply custom styling to tabs using style properties and Bootstrap classes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Styled tabs example\n\ndbc.Tabs([\n    dbc.Tab(label=\"Tab 1\", tab_style={\"marginLeft\": \"auto\"},\n           label_style={\"color\": \"success\"}),\n    dbc.Tab(label=\"Tab 2\", tabClassName=\"ms-auto\",\n           labelClassName=\"text-success\"),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Stack in Bootstrap\nDESCRIPTION: Shows how to create a horizontal stack of elements with consistent spacing using the Stack component with direction='horizontal'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nstack = dbc.Stack(\n    [\n        dbc.Button(\"First item\", color=\"primary\"),\n        dbc.Button(\"Second item\", color=\"secondary\"),\n        dbc.Button(\"Third item\", color=\"success\"),\n    ],\n    direction=\"horizontal\",  # horizontal stack instead of vertical\n    gap=3,  # sets the gap size between items\n)\n```\n\n----------------------------------------\n\nTITLE: Sizing Input Groups in Dash Bootstrap Components\nDESCRIPTION: This snippet shows how to use the 'size' argument of InputGroup to set the size of all contents, including inputs and addons. Options include 'lg', 'md' (default), and 'sm'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input_group.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/input_group/size.py:input_group}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Vertical Stack in Bootstrap\nDESCRIPTION: Demonstrates how to create a vertical stack of elements with even gaps between them using the Stack component and its gap property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nstack = dbc.Stack(\n    [\n        dbc.Button(\"First item\", color=\"primary\"),\n        dbc.Button(\"Second item\", color=\"secondary\"),\n        dbc.Button(\"Third item\", color=\"success\"),\n    ],\n    gap=3,  # sets the gap size between items\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Text Colors\nDESCRIPTION: Illustrates using the 'text_color' argument to apply Bootstrap's contextual color classes to the font of badges, enabling further visual customization.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/text_color.py:badges}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Trigger Types in Dash\nDESCRIPTION: This example shows how to use different trigger types (click, focus, hover, legacy) to control when a popover appears and disappears.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/popover.py:popovers}}\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Utility Classes for Card Sizing in Dash\nDESCRIPTION: This example illustrates how to use Bootstrap's built-in utility classes, such as 'w-50', to quickly set desired widths for cards without custom CSS.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/sizing/utility.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Fixing DataTable and Bootstrap Row Class Conflict with Inline CSS\nDESCRIPTION: Python code showing how to pass custom CSS to the DataTable component to prevent conflicts with Bootstrap's row class. This solves issues with table overflow and dropdown rendering.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDataTable(..., css=[{\"selector\": \".row\", \"rule\": \"margin: 0; display: block\"}])\n```\n\n----------------------------------------\n\nTITLE: Active Tab Styling\nDESCRIPTION: Demonstrates how to apply specific styles to the currently active tab using active style properties.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/tabs.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Active style tabs example\n\ndbc.Tabs([\n    dbc.Tab(label=\"Tab 1\",\n           active_label_style={\"textDecoration\": \"underline\"},\n           activeLabelClassName=\"fw-bold\"),\n    dbc.Tab(label=\"Tab 2\",\n           active_tab_style={\"backgroundColor\": \"primary\"},\n           activeTabClassName=\"border-primary\"),\n])\n```\n\n----------------------------------------\n\nTITLE: Horizontal ListGroup Layout\nDESCRIPTION: Shows how to create horizontal list groups with responsive breakpoints.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/horizontal.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Using Spinners Inside Buttons in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates how to incorporate spinners inside buttons to indicate loading or processing states. The snippet shows two variations: a spinner with text in a button and a spinner-only button.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/spinner.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nspinners = html.Div(\n    [\n        dbc.Button(\n            [\n                dbc.Spinner(size=\"sm\", color=\"light\"),\n                \" Loading...\"\n            ],\n            color=\"primary\",\n            disabled=True,\n        ),\n        dbc.Button(\n            dbc.Spinner(size=\"sm\", color=\"light\"),\n            color=\"primary\",\n            disabled=True,\n        ),\n    ],\n    className=\"d-flex flex-row\",\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS for Card Sizing in Dash Bootstrap\nDESCRIPTION: This snippet demonstrates how to use custom CSS, either through inline styles or custom classes, to control the size of cards in Dash Bootstrap applications.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/sizing/css.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Constructing Custom Navbar in Dash Bootstrap Components (Python)\nDESCRIPTION: Shows how to manually construct a navbar with a customized layout using the Navbar component and supporting components like Nav, NavItem, NavLink, NavbarBrand, and NavbarToggler in dash-bootstrap-components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/advanced-component-usage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nnavbars.py\n```\n\n----------------------------------------\n\nTITLE: Applying Background Colors to Badges\nDESCRIPTION: Shows how to use the 'color' argument to apply Bootstrap's contextual color classes to badges. This allows for visual differentiation and emphasis.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/color.py:badges}}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Jumbotron Layout in Dash Bootstrap\nDESCRIPTION: Basic implementation of a jumbotron-like component using Bootstrap utility classes and Dash Bootstrap Components. Creates a highlighted content area with a title and descriptive text.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/jumbotron.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import html\nimport dash_bootstrap_components as dbc\n\njumbotron = html.Div(\n    [\n        html.H1(\"Hello, world!\", className=\"display-3\"),\n        html.P(\n            \"This is a simple hero unit, a simple jumbotron-style component \"\n            \"for calling extra attention to featured content or information.\",\n            className=\"lead\",\n        ),\n        html.Hr(className=\"my-2\"),\n        html.P(\n            \"It uses utility classes for typography and spacing to space content \"\n            \"out within the larger container.\"\n        ),\n        html.P(\n            html.A(\n                \"Learn more\",\n                className=\"btn btn-primary btn-lg\",\n                href=\"#\",\n            )\n        ),\n    ],\n    className=\"p-5 bg-light rounded-3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Dropdown - Python\nDESCRIPTION: Dropdown menu with custom styling using toggle_style and toggleClassName arguments.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/custom_style.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Responsive Block Button in Dash Bootstrap Components\nDESCRIPTION: Creates a responsive block button by utilizing breakpoints to specify behavior at different screen sizes. The d-md-block class changes button behavior on smaller screens.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbutton = html.Div(\n    dbc.Button(\n        \"Responsive block button\",\n        color=\"primary\",\n        className=\"d-md-block gap-2 col-6 mx-auto\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Badges with Links\nDESCRIPTION: Demonstrates adding links to badges using the 'href' argument, creating actionable badges with hover and focus states. Includes note about disabling Bootstrap 5's default underline style.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/links.py:badges}}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Dash Bootstrap Components\nDESCRIPTION: This snippet lists the required Python packages for a project using Dash Bootstrap Components. It includes Dash core libraries, pandas for data manipulation, and Plotly for data visualization. The Dash version is specified to be greater than 2.0.0.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/telephones-by-region/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndash>2.0.0\ndash-bootstrap-components\ndash-core-components\ndash-html-components\npandas\nplotly\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Offcanvas\nDESCRIPTION: Example of enabling scrolling of main page content while the Offcanvas component is displayed using the scrollable property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/offcanvas.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/offcanvas/scrollable.py:offcanvas}}\n```\n\n----------------------------------------\n\nTITLE: Styled Bootstrap Table Implementation\nDESCRIPTION: Shows how to modify table appearance using styling properties like dark, striped, bordered, and hover effects.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/table/kwargs.py:table}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Offcanvas Placement\nDESCRIPTION: Demonstrates how to modify the placement of the Offcanvas component using the placement property to control where it appears on the screen.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/offcanvas.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/offcanvas/placement.py:offcanvas}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Offcanvas Backdrop\nDESCRIPTION: Shows how to customize the backdrop behavior of the Offcanvas component, including options to remove it or make it static.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/offcanvas.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/offcanvas/backdrop.py:offcanvas}}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Popovers in Dash\nDESCRIPTION: This example demonstrates how to create a basic popover in a Dash application by setting the target property to connect it to a specific component.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/simple.py:popovers}}\n```\n\n----------------------------------------\n\nTITLE: Incorporating Button Addons in Input Groups\nDESCRIPTION: This snippet demonstrates how to place Button components inside an InputGroup for enhanced functionality.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input_group.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/input_group/button.py:input_group}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Markdown formatted changelog entries documenting version history, added features, fixed bugs, and breaking changes for the dash-bootstrap-components library.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Fixed\n\n- Expose `tabIndex` prop in `Input` component ([PR 344](https://github.com/facultyai/dash-bootstrap-components/pull/344))\n- Expose `style` prop in `Jumbotron` component ([PR 344](https://github.com/facultyai/dash-bootstrap-components/pull/344))\n\n## 0.9.1 - 2020/3/12\n\n### Fixed\n\n- Restore ability to install module with Python 2 ([PR 329](https://github.com/facultyai/dash-bootstrap-components/pull/329))\n\n## 0.9.0 - 2020/3/11\n\n### Added\n\n- Allow `Spinner` to be used like `dash_core_components.Loading` by passing `children` ([PR 314](https://github.com/facultyai/dash-bootstrap-components/pull/314))\n\n### Fixed\n\n- Prevent `false` being passed to the `target` prop of `Link` components ([PR 315](https://github.com/facultyai/dash-bootstrap-components/pull/315))\n```\n\n----------------------------------------\n\nTITLE: Customizing Fade Transition in Dash Bootstrap Components\nDESCRIPTION: This example shows how to modify the fade transition effect by changing the CSS transition property using inline styles. It demonstrates customizing the transition duration and timing function.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/fade.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, State, callback\nimport dash_bootstrap_components as dbc\nimport dash_html_components as html\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = dbc.Container(\n    [\n        html.H2(\"Custom transitions\", className=\"mt-3\"),\n        html.Hr(),\n        dbc.Row(\n            [\n                dbc.Col(\n                    [\n                        dbc.Button(\n                            \"Toggle\",\n                            id=\"fade-transition-button\",\n                            className=\"mb-3\",\n                            color=\"primary\",\n                            n_clicks=0,\n                        ),\n                        dbc.Fade(\n                            dbc.Card(\n                                dbc.CardBody(\n                                    [\n                                        html.H5(\n                                            \"5 second transition\",\n                                            className=\"card-title\",\n                                        ),\n                                        html.P(\n                                            \"This card takes 5 seconds to \"\n                                            \"fade in or out\",\n                                            className=\"card-text\",\n                                        ),\n                                    ]\n                                )\n                            ),\n                            id=\"fade-transition\",\n                            is_in=True,\n                            style={\"transition\": \"opacity 5s ease-out\"},\n                        ),\n                    ]\n                ),\n                dbc.Col(\n                    [\n                        dbc.Button(\n                            \"Toggle\",\n                            id=\"fade-transition-linear-button\",\n                            className=\"mb-3\",\n                            color=\"primary\",\n                            n_clicks=0,\n                        ),\n                        dbc.Fade(\n                            dbc.Card(\n                                dbc.CardBody(\n                                    [\n                                        html.H5(\n                                            \"Linear transition\",\n                                            className=\"card-title\",\n                                        ),\n                                        html.P(\n                                            \"This card has a linear transition\",\n                                            className=\"card-text\",\n                                        ),\n                                    ]\n                                )\n                            ),\n                            id=\"fade-transition-linear\",\n                            is_in=True,\n                            style={\"transition\": \"opacity 2s linear\"},\n                        ),\n                    ]\n                ),\n            ]\n        ),\n    ]\n)\n\n\n@callback(\n    Output(\"fade-transition\", \"is_in\"),\n    Input(\"fade-transition-button\", \"n_clicks\"),\n    State(\"fade-transition\", \"is_in\"),\n)\ndef toggle_transition(n, is_in):\n    if not n:\n        # Button has never been clicked\n        return True\n    return not is_in\n\n\n@callback(\n    Output(\"fade-transition-linear\", \"is_in\"),\n    Input(\"fade-transition-linear-button\", \"n_clicks\"),\n    State(\"fade-transition-linear\", \"is_in\"),\n)\ndef toggle_transition_linear(n, is_in):\n    if not n:\n        # Button has never been clicked\n        return True\n    return not is_in\n```\n\n----------------------------------------\n\nTITLE: Starting Accordion in Collapsed State\nDESCRIPTION: Example showing how to control which item is opened on startup using the active_item property, or how to collapse all items using start_collapsed=True.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/collapsed.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Dropdown Menu - Python\nDESCRIPTION: Implementation of a dropdown menu with dark color scheme using menu_variant=\"dark\" property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/dark.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Table Component API Documentation\nDESCRIPTION: API documentation for the Table component implementation.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{{apidoc:src/components/Table.js}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Fade Animation in Dash Bootstrap Components\nDESCRIPTION: This example demonstrates how to toggle content visibility with a fade animation using the Fade component. It uses a button click to switch between showing and hiding content by controlling the is_in property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/fade.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport dash\nfrom dash import Input, Output, State, callback\nimport dash_bootstrap_components as dbc\nimport dash_html_components as html\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\napp.layout = dbc.Container(\n    [\n        html.H2(\"Fade\", className=\"mt-3\"),\n        html.Hr(),\n        dbc.Button(\n            \"Toggle fade\",\n            id=\"fade-button\",\n            className=\"mb-3\",\n            n_clicks=0,\n        ),\n        dbc.Fade(\n            dbc.Card(\n                dbc.CardBody(\n                    html.P(\n                        \"This content fades in and out\",\n                        className=\"card-text\",\n                    )\n                )\n            ),\n            id=\"fade\",\n            is_in=True,\n            appear=False,\n        ),\n    ]\n)\n\n\n@callback(\n    Output(\"fade\", \"is_in\"),\n    [Input(\"fade-button\", \"n_clicks\")],\n    [State(\"fade\", \"is_in\")],\n)\ndef toggle_fade(n, is_in):\n    if not n:\n        # Button has never been clicked\n        return True\n    return not is_in\n```\n\n----------------------------------------\n\nTITLE: Basic ListGroup Implementation\nDESCRIPTION: Demonstrates the basic implementation of a ListGroup component with ListGroupItem elements.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/simple.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Form Components with Dash Core Components\nDESCRIPTION: Demonstrates how to integrate Bootstrap form components with Dash Core Components. Note that Bootstrap themes aren't automatically applied to components like dash-core-components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/form.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nimport dash_core_components as dcc\nfrom dash import html\n\nform = dbc.Form(\n    [\n        dbc.Row(\n            [\n                dbc.Label(\"Dropdown\", width=2),\n                dbc.Col(\n                    dcc.Dropdown(\n                        options=[\n                            {\"label\": \"Option 1\", \"value\": 1},\n                            {\"label\": \"Option 2\", \"value\": 2},\n                        ],\n                        clearable=False,\n                        style={\"color\": \"#000000\"},\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"Checklist\", width=2),\n                dbc.Col(\n                    dcc.Checklist(\n                        options=[\n                            {\"label\": \"Option 1\", \"value\": 1},\n                            {\"label\": \"Option 2\", \"value\": 2},\n                        ],\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"Slider\", width=2),\n                dbc.Col(\n                    dcc.Slider(\n                        min=0,\n                        max=5,\n                        step=None,\n                        marks={i: str(i) for i in range(6)},\n                        value=2,\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n        dbc.Row(\n            [\n                dbc.Label(\"RangeSlider\", width=2),\n                dbc.Col(\n                    dcc.RangeSlider(\n                        min=0,\n                        max=5,\n                        step=None,\n                        marks={i: str(i) for i in range(6)},\n                        value=[1, 4],\n                    ),\n                    width=10,\n                ),\n            ],\n            className=\"mb-3\",\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Offcanvas Component API Definition\nDESCRIPTION: API documentation for the Offcanvas component implementation in JavaScript.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/offcanvas.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{apidoc:src/components/offcanvas/Offcanvas.js}}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pagination Component in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to create a simple pagination component with a specified number of pages. The max_value property controls the total number of pages displayed.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/pagination/simple.py:pagination}}\n```\n\n----------------------------------------\n\nTITLE: Pills-Style Navigation\nDESCRIPTION: Demonstrates pills-style navigation with active state handling using exact and partial pathname matching.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/nav/pill.py:nav}}\n```\n\n----------------------------------------\n\nTITLE: ListGroup with Links\nDESCRIPTION: Implementation of ListGroup with clickable links and disabled states.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/links.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Using CardGroup for Card Layout in Dash Bootstrap\nDESCRIPTION: This snippet shows how to use the CardGroup component to render cards as a single attached element with equal width and height columns.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/layout/group.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Progress Bars in Python\nDESCRIPTION: Shows how to add text labels to progress bars using the 'label' prop.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50, label=\"50%\")\n```\n\n----------------------------------------\n\nTITLE: NavItem Component API Documentation\nDESCRIPTION: API documentation for the NavItem component implementation.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{{apidoc:src/components/nav/NavItem.js}}\n```\n\n----------------------------------------\n\nTITLE: Creating Outline-Style Cards in Dash Bootstrap\nDESCRIPTION: This example demonstrates how to create outline-style cards by removing block colors from the background and header using the outline=True argument.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/card.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/card/outline.py:cards}}\n```\n\n----------------------------------------\n\nTITLE: Block Button Implementation in Dash Bootstrap Components\nDESCRIPTION: Demonstrates how to create a legacy Bootstrap 4 style block level button that spans the full width of the parent using Bootstrap's spacing utility classes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbutton = html.Div(\n    dbc.Button(\n        \"Block button\", color=\"primary\", className=\"d-grid gap-2 col-12 mx-auto\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Row Without Gutters in Bootstrap\nDESCRIPTION: Demonstrates how to create a row without the default horizontal spacing (gutters) between columns using Bootstrap's gutter modifier classes.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/layout.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\nrow = dbc.Row(\n    [\n        dbc.Col(\"No gutters 1\", width=4, className=\"g-0\"),\n        dbc.Col(\"No gutters 2\", width=4, className=\"g-0\"),\n        dbc.Col(\"No gutters 3\", width=4, className=\"g-0\"),\n    ],\n    className=\"g-0\",\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Dash Project\nDESCRIPTION: A requirements list specifying the necessary Python packages for a Dash project that uses Bootstrap components. It includes core Dash libraries, pandas for data manipulation, plotly for visualization, and scikit-learn for machine learning capabilities.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/iris-kmeans/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndash>=2.0.0\ndash-bootstrap-components\ndash-core-components\ndash-html-components\npandas\nplotly\nscikit-learn\n```\n\n----------------------------------------\n\nTITLE: Colored Bootstrap Table Implementation\nDESCRIPTION: Demonstrates how to apply color styling to tables using the color property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/table.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/table/color.py:table}}\n```\n\n----------------------------------------\n\nTITLE: Simple Dropdown Menu Implementation - Python\nDESCRIPTION: Basic implementation of a dropdown menu with three items using DropdownMenu and DropdownMenuItem components.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/simple.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Dependencies List for Dash Application\nDESCRIPTION: Core package dependencies required for running a Dash Bootstrap Components application. Includes the main Dash framework (version 2.0.0 or higher), component libraries, and scientific computing packages like pandas, plotly and scipy.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/faithful/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndash>=2.0.0\ndash-bootstrap-components\ndash-core-components\ndash-html-components\npandas\nplotly\nscipy\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation in Python\nDESCRIPTION: Demonstrates how to create a basic progress bar using the Progress component with a specified value.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/progress.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\n\ndbc.Progress(value=50)\n```\n\n----------------------------------------\n\nTITLE: Simple Offcanvas Implementation in Dash\nDESCRIPTION: Basic example showing how to implement an Offcanvas component with default left-side placement and standard dismiss behaviors.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/offcanvas.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/offcanvas/simple.py:offcanvas}}\n```\n\n----------------------------------------\n\nTITLE: NavLink Component API Documentation\nDESCRIPTION: API documentation for the NavLink component implementation.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{{apidoc:src/components/nav/NavLink.js}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Viewport with HTML Meta Tag\nDESCRIPTION: HTML meta tag for ensuring proper scaling of content on mobile devices. This prevents mobile browsers from rescaling content on small screens and enables building mobile-optimized layouts.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Accordion\nDESCRIPTION: Basic implementation of an Accordion with multiple AccordionItems. Each section header is determined by the title prop of the AccordionItem.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/accordion.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/accordion/simple.py:accordion}}\n```\n\n----------------------------------------\n\nTITLE: Styling RadioItems as ButtonGroup in CSS\nDESCRIPTION: CSS code to restyle RadioItems components to appear as a ButtonGroup. It removes padding, adjusts border radius, and handles margin for a seamless button group appearance.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button_group.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* restyle radio items */\n.radio-group .form-check {\n  padding-left: 0;\n}\n\n.radio-group .btn-group > .form-check:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.radio-group .btn-group > .form-check:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  margin-left: -1px;\n}\n```\n\n----------------------------------------\n\nTITLE: Numbered ListGroup\nDESCRIPTION: Shows implementation of automatically numbered list groups.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/numbered.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Creating Pill-Shaped Badges\nDESCRIPTION: Demonstrates setting 'pill=True' to create more rounded badges with larger border-radius and additional horizontal padding for a pill-like appearance.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/pills.py:badges}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version for Project\nDESCRIPTION: This snippet defines the specific Python version (3.9.13) to be used for the project. It helps ensure consistency across development environments and can be used by version management tools like pyenv.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/runtime.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-3.9.13\n```\n\n----------------------------------------\n\nTITLE: Button Size Customization in Dash Bootstrap Components\nDESCRIPTION: Shows how to modify the size of buttons by setting the size prop to either \"sm\" or \"lg\" for small or large buttons respectively. Default size buttons are also shown for comparison.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/button.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\nbuttons = html.Div(\n    [\n        html.Div(\n            [\n                dbc.Button(\"Small button\", size=\"sm\", className=\"me-1\"),\n                dbc.Button(\"Normal button\", className=\"me-1\"),\n                dbc.Button(\"Large button\", size=\"lg\"),\n            ],\n            className=\"d-flex align-items-center\",\n        ),\n        html.Hr(),\n        html.Div(\n            [\n                dbc.Button(\n                    \"Small outline button\", outline=True, size=\"sm\", className=\"me-1\"\n                ),\n                dbc.Button(\n                    \"Normal outline button\", outline=True, className=\"me-1\"\n                ),\n                dbc.Button(\"Large outline button\", outline=True, size=\"lg\"),\n            ],\n            className=\"d-flex align-items-center\",\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Dash Bootstrap App Templates\nDESCRIPTION: Documentation header explaining the purpose of the template examples in the dash-bootstrap-components project. The templates demonstrate layout structure patterns with minimal content.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# App templates\n\nThese examples have minimal content, but are intended to demonstrate how you\ncould structure layouts in your apps using dash-bootstrap-components.\n```\n\n----------------------------------------\n\nTITLE: Flush ListGroup Styling\nDESCRIPTION: Demonstrates the flush property for removing borders and adjusting edges.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/flush.py:list_group}}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Badges in Dash with Bootstrap Components\nDESCRIPTION: Shows how to create a button with a badge counter using dash-bootstrap-components. The example implements a button with the text 'Notifications' alongside a badge showing the number '4'.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/badge.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/simple.py:badge}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Bootstrap Popover Width with CSS\nDESCRIPTION: CSS snippet to override Bootstrap's default max-width setting for popovers. This can be added to a custom stylesheet in the assets folder to make popovers wider.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.popover {\n  max-width: 400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component in Dash Bootstrap\nDESCRIPTION: Example usage of a badge component from dash-bootstrap-components library.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/badge/simple.py:badge}}\n```\n\n----------------------------------------\n\nTITLE: Fixing DataTable and Bootstrap Row Class Conflict with External CSS\nDESCRIPTION: CSS solution to prevent Bootstrap row styles from affecting DataTable rows. This can be added to a custom stylesheet to fix formatting issues for all tables in the application.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.dash-table-container .row {\n  display: block;\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popovers in Dash\nDESCRIPTION: This example shows how to customize popovers by hiding arrows and offsetting their position relative to the target element.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/popover.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n{{example:components/popover/styling.py:popovers}}\n```\n\n----------------------------------------\n\nTITLE: Example FTP Session for Accessing Project Gutenberg\nDESCRIPTION: Demonstrates the commands for accessing Project Gutenberg texts via FTP, including login process and navigation to etext directories.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/wordcloud/data/the-merchant-of-venice.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nftp sunsite.unc.edu\nlogin: anonymous\npassword: your@login\ncd pub/docs/books/gutenberg\ncd etext90 through etext99\ndir [to see files]\nget or mget [to get files. . .set bin for zip files]\nGET GUTINDEX.?? [to get a year's listing of books, e.g., GUTINDEX.99]\nGET GUTINDEX.ALL [to get a listing of ALL books]\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Toast Notifications in Dash Bootstrap Components with Python\nDESCRIPTION: Basic implementation of a Toast component in Dash that creates a notification with a header and body. The children of the component populate the body, while the header property sets the header text.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/toast.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import html\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\n\ntoast = html.Div(\n    [\n        dbc.Toast(\n            [\n                html.P(\"This is the content of the toast\", className=\"mb-0\")\n            ],\n            header=\"This is the header\",\n        ),\n    ]\n)\n\napp.layout = dbc.Container(toast)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Character Dialogue in Shakespeare's The Merchant of Venice (Act 1, Scene 1)\nDESCRIPTION: This snippet contains the opening dialogue of The Merchant of Venice, written in Early Modern English. It introduces the main characters and their relationships, setting the stage for the play's plot.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/wordcloud/data/the-merchant-of-venice.txt#2025-04-22_snippet_1\n\nLANGUAGE: English\nCODE:\n```\nEnter Anthonio, Salarino, and Salanio.\n\n  Anthonio. In sooth I know not why I am so sad,\nIt wearies me: you say it wearies you;\nBut how I caught it, found it, or came by it,\nWhat stuffe 'tis made of, whereof it is borne,\nI am to learne: and such a Want-wit sadnesse makes of\nmee,\nThat I haue much ado to know my selfe\n\n   Sal. Your minde is tossing on the Ocean,\nThere where your Argosies with portly saile\nLike Signiors and rich Burgers on the flood,\nOr as it were the Pageants of the sea,\nDo ouer-peere the pettie Traffiquers\nThat curtsie to them, do them reuerence\nAs they flye by them with their wouen wings\n```\n\n----------------------------------------\n\nTITLE: Nav Component API Documentation\nDESCRIPTION: API documentation for the Nav component implementation.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/nav.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{{apidoc:src/components/nav/Nav.js}}\n```\n\n----------------------------------------\n\nTITLE: Aligned Dropdown Menu - Python\nDESCRIPTION: Example of dropdown menu alignment using align_end property.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/dropdown.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/dropdown/alignment.py:dropdown}}\n```\n\n----------------------------------------\n\nTITLE: Installing dash-bootstrap-components with pip\nDESCRIPTION: Command to install the dash-bootstrap-components library using pip package manager.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install dash-bootstrap-components\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation Updates for dash-bootstrap-components\nDESCRIPTION: This command uses 'just' to deploy documentation updates to Heroku for the dash-bootstrap-components project.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/how-to-release.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njust deploy-docs\n```\n\n----------------------------------------\n\nTITLE: Opening Scene of A Midsummer Night's Dream\nDESCRIPTION: The opening dialogue between Theseus and Hippolyta, followed by Egeus's complaint about his daughter Hermia. This represents the original First Folio text with period spelling and punctuation preserved.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/wordcloud/data/a-midsummer-nights-dream.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEnter Theseus, Hippolita, with others.\n\n  Theseus. Now faire Hippolita, our nuptiall houre\nDrawes on apace: foure happy daies bring in\nAnother Moon: but oh, me thinkes, how slow\nThis old Moon wanes; She lingers my desires\nLike to a Step-dame, or a Dowager,\nLong withering out a yong mans reuennew\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Number Inputs with CSS\nDESCRIPTION: CSS styles to customize the appearance of invalid numeric input fields with Bootstrap styling, including red border and warning icon.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/input.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#styled-numeric-input input:invalid {\n  border-color: #dc3545;\n  padding-right: calc(1.5em + 0.75rem);\n  background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-position: right calc(0.375em + 0.1875rem) center;\n  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);\n  outline: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissable Messages with Toast Component in Dash (Python)\nDESCRIPTION: Demonstrates how to display dismissable messages using the Toast component in Dash. It uses dash_core_components.Store to maintain a list of messages client-side and updates the display through callbacks.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/advanced-component-usage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntoast.py\n```\n\n----------------------------------------\n\nTITLE: Installing dash-bootstrap-components with conda\nDESCRIPTION: Command to install the dash-bootstrap-components library using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge dash-bootstrap-components\n```\n\n----------------------------------------\n\nTITLE: Installing Example App Dependencies with pip\nDESCRIPTION: Command to install the dependencies for an example app using its requirements.txt file.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/examples/gallery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Dash App with Bootswatch Cyborg Theme in Python\nDESCRIPTION: This example shows how to initialize a Dash application using the Bootswatch Cyborg theme. It demonstrates changing the theme by modifying the external_stylesheets parameter.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/content/docs/themes.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_bootstrap_components as dbc\n\napp = dash.Dash(external_stylesheets=[dbc.themes.CYBORG])\n```\n\n----------------------------------------\n\nTITLE: Custom Content in ListGroup\nDESCRIPTION: Demonstrates using custom Dash components within ListGroupItems.\nSOURCE: https://github.com/facultyai/dash-bootstrap-components/blob/main/docs/components_page/components/list_group.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{{example:components/list_group/content.py:list_group}}\n```"
  }
]