[
  {
    "owner": "dart-lang",
    "repo": "mockito",
    "content": "TITLE: Fallback Generators - Dart\nDESCRIPTION: This demonstrates how to use `fallbackGenerators` in `MockSpec` to provide a custom function for generating valid return values when mocking members with non-nullable type variables. The specified `mShim` function provides a fallback value for the `m` method.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateNiceMocks([\n  MockSpec<Foo>(as: #MockFoo, fallbackGenerators: {#m: mShim})\n])\nimport 'foo_test.mocks.dart';\n\nabstract class Foo {\n  T m<T>(T a, int b);\n}\n\nT mShim<T>(T a, int? b) {\n  if (a is int) return 1;\n  throw 'unknown';\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Method Behavior\nDESCRIPTION: This snippet demonstrates how to stub the behavior of a method on a mock object using the `when` function and `thenReturn`, `thenAnswer`, and `thenThrow`.  Once stubbed, the method will always return stubbed value regardless of how many times it is called. If a method invocation matches multiple stubs, the one which was declared last will be used.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Stub a mock method before interacting.\nwhen(cat.sound()).thenReturn(\"Purr\");\nexpect(cat.sound(), \"Purr\");\n\n// You can call it again.\nexpect(cat.sound(), \"Purr\");\n\n// Let's change the stub.\nwhen(cat.sound()).thenReturn(\"Meow\");\nexpect(cat.sound(), \"Meow\");\n\n// You can stub getters.\nwhen(cat.lives).thenReturn(9);\nexpect(cat.lives, 9);\n\n// You can stub a method to throw.\nwhen(cat.lives).thenThrow(RangeError('Boo'));\nexpect(() => cat.lives, throwsRangeError);\n\n// We can calculate a response at call time.\nvar responses = [\"Purr\", \"Meow\"];\nwhen(cat.sound()).thenAnswer((_) => responses.removeAt(0));\nexpect(cat.sound(), \"Purr\");\nexpect(cat.sound(), \"Meow\");\n\n// We can stub a method with multiple calls that happened in a particular order.\nwhen(cat.sound()).thenReturnInOrder([\"Purr\", \"Meow\"]);\nexpect(cat.sound(), \"Purr\");\nexpect(cat.sound(), \"Meow\");\nexpect(() => cat.sound(), throwsA(isA<StateError>()));\n```\n\n----------------------------------------\n\nTITLE: Testing ISS Visibility in Dart using Mockito\nDESCRIPTION: This test group simulates the visibility of the ISS from different locations using the `MockIssLocator` and the `IssSpotter` classes.  The `IssLocator.currentPosition` method is stubbed using `when().thenReturn()` to return predefined locations. The tests then check whether the `IssSpotter.isVisible` property returns the expected boolean value. These tests run asynchronously.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/example/iss/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n  group('ISS spotter', () {\n    test('ISS visible', () async {\n      Point<double> sf = new Point(37.783333, -122.416667);\n      Point<double> mtv = new Point(37.389444, -122.081944);\n      IssLocator locator = new MockIssLocator();\n      // Mountain View should be visible from San Francisco.\n      when(locator.currentPosition).thenReturn(sf);\n\n      var spotter = new IssSpotter(locator, mtv);\n      expect(spotter.isVisible, true);\n    });\n\n    test('ISS not visible', () async {\n      Point<double> london = new Point(51.5073, -0.1277);\n      Point<double> mtv = new Point(37.389444, -122.081944);\n      IssLocator locator = new MockIssLocator();\n      // London should not be visible from Mountain View.\n      when(locator.currentPosition).thenReturn(london);\n\n      var spotter = new IssSpotter(locator, mtv);\n      expect(spotter.isVisible, false);\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Argument Matchers\nDESCRIPTION: This snippet demonstrates the use of argument matchers like `any`, `argThat`, `startsWith`, and `contains` when stubbing and verifying method calls.  Argument matchers can be used with plain arguments.  `equals` matcher is used for argument matching, if an argument other than an `ArgMatcher` is passed to a mock method. `argThat(identical(arg))` can be used for strict matching.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// You can use `any`\nwhen(cat.eatFood(any)).thenReturn(false);\n\n// ... or plain arguments themselves\nwhen(cat.eatFood(\"fish\")).thenReturn(true);\n\n// ... including collections\nwhen(cat.walk([\"roof\",\"tree\"])).thenReturn(2);\n\n// ... or matchers\nwhen(cat.eatFood(argThat(startsWith(\"dry\")))).thenReturn(false);\n\n// ... or mix arguments with matchers\nwhen(cat.eatFood(argThat(startsWith(\"dry\")), hungry: true)).thenReturn(true);\nexpect(cat.eatFood(\"fish\"), isTrue);\nexpect(cat.walk([\"roof\",\"tree\"]), equals(2));\nexpect(cat.eatFood(\"dry food\"), isFalse);\nexpect(cat.eatFood(\"dry food\", hungry: true), isTrue);\n\n// You can also verify using an argument matcher.\nverify(cat.eatFood(\"fish\"));\nverify(cat.walk([\"roof\",\"tree\"]));\nverify(cat.eatFood(argThat(contains(\"food\"))));\n\n// You can verify setters.\ncat.lives = 9;\nverify(cat.lives=9);\n```\n\n----------------------------------------\n\nTITLE: Calculating Spherical Distance in Dart\nDESCRIPTION: This test group calculates the spherical distance between two predefined points on Earth using the `sphericalDistanceKm` function. It includes two test cases: calculating the distance between London and Paris, and the distance between San Francisco and Mountain View. The `expect` function verifies that the calculated distance is within a specified tolerance.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/example/iss/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n  group('Spherical distance', () {\n    test('London - Paris', () {\n      Point<double> london = new Point(51.5073, -0.1277);\n      Point<double> paris = new Point(48.8566, 2.3522);\n      double d = sphericalDistanceKm(london, paris);\n      // London should be approximately 343.5km\n      // (+/- 0.1km) from Paris.\n      expect(d, closeTo(343.5, 0.1));\n    });\n\n    test('San Francisco - Mountain View', () {\n      Point<double> sf = new Point(37.783333, -122.416667);\n      Point<double> mtv = new Point(37.389444, -122.081944);\n      double d = sphericalDistanceKm(sf, mtv);\n      // San Francisco should be approximately 52.8km\n      // (+/- 0.1km) from Mountain View.\n      expect(d, closeTo(52.8, 0.1));\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining a Mockable Class and Generating Mock\nDESCRIPTION: This snippet shows how to define a class (`Cat`) and use the `@GenerateNiceMocks` annotation to generate a mock class (`MockCat`) using Mockito's code generation feature. It requires adding `build_runner` as a dev dependency and running `build_runner` to generate the `.mocks.dart` file. The generated mock class extends `Mock` and implements the original class, enabling stubbing and verification.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:mockito/annotations.dart';\nimport 'package:mockito/mockito.dart';\n\n// Annotation which generates the cat.mocks.dart library and the MockCat class.\n@GenerateNiceMocks([MockSpec<Cat>()])\nimport 'cat.mocks.dart';\n\n// Real class\nclass Cat {\n  String sound() => \"Meow\";\n  bool eatFood(String food, {bool? hungry}) => true;\n  Future<void> chew() async => print(\"Chewing...\");\n  int walk(List<String> places) => 7;\n  void sleep() {}\n  void hunt(String place, String prey) {}\n  int lives = 9;\n}\n\nvoid main() {\n  // Create mock object.\n  var cat = MockCat();\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Function Types with Mockito in Dart\nDESCRIPTION: This code demonstrates how to create mocks for Function objects using Mockito. It involves creating an abstract class with methods representing the function type signatures to be mocked. The methods can then be torn off, stubbed, and verified individually. Requires importing `cat_test.mocks.dart` and generating mocks for `Cat` and `Callbacks`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\n@GenerateMocks([Cat, Callbacks])\nimport 'cat_test.mocks.dart'\n\nabstract class Callbacks {\n  Cat findCat(String name);\n}\n\nvoid main() {\n  var mockCat = MockCat();\n  var findCatCallback = MockCallbacks().findCat;\n  when(findCatCallback('Pete')).thenReturn(mockCat);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Fake Implementation with Mockito in Dart\nDESCRIPTION: This code demonstrates how to write a simple fake class that implements a real class by extending `Fake` from Mockito.  `Fake` allows the subclass to satisfy the implementation of the real class without overriding unused methods, throwing an `UnimplementedError` by default. It requires extending the `Fake` class and implementing the desired methods.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\n// Fake class\nclass FakeCat extends Fake implements Cat {\n  @override\n  bool eatFood(String food, {bool? hungry}) {\n    print('Fake eat $food');\n    return true;\n  }\n}\n\nvoid main() {\n  // Create a new fake Cat at runtime.\n  var cat = FakeCat();\n\n  cat.eatFood(\"Milk\"); // Prints 'Fake eat Milk'.\n  cat.sleep(); // Throws.\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Mockito outputs using build.yaml - YAML\nDESCRIPTION: This YAML configuration demonstrates how to customize the output directory and filename patterns for Mockito-generated mocks.  It uses `build_extensions` to define source patterns and their corresponding output transformations, ensuring the output always ends with `.mocks.dart`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      mockito|mockBuilder:\n        generate_for:\n        options:\n          # build_extensions takes a source pattern and if it matches it will transform the output\n          # to your desired path. The default behaviour is to the .mocks.dart file to be in the same\n          # directory as the source .dart file. As seen below this is customizable, but the generated\n          # file must always end in `.mocks.dart`. \n          build_extensions:\n            '^tests/{{}}.dart' : 'tests/mocks/{{}}.mocks.dart' \n            '^integration-tests/{{}}.dart' : 'integration-tests/{{}}.mocks.dart' \n```\n\n----------------------------------------\n\nTITLE: Resetting Mocks with Mockito in Dart\nDESCRIPTION: This code demonstrates how to use `clearInteractions` and `reset` from the Mockito library to clear collected interactions and reset stubs and interactions, respectively.  `clearInteractions` removes the recorded method calls. `reset` clears both the stubs created with `when` and the recorded method calls. Requires using Mockito.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\n// Clearing collected interactions:\ncat.eatFood(\"Fish\");\nclearInteractions(cat);\ncat.eatFood(\"Fish\");\nverify(cat.eatFood(\"Fish\")).called(1);\n\n// Resetting stubs and collected interactions:\nwhen(cat.eatFood(\"Fish\")).thenReturn(true);\ncat.eatFood(\"Fish\");\nreset(cat);\nwhen(cat.eatFood(any)).thenReturn(false);\nexpect(cat.eatFood(\"Fish\"), false);\n```\n\n----------------------------------------\n\nTITLE: Capturing Arguments with Mockito in Dart\nDESCRIPTION: This code demonstrates how to capture arguments passed to mocked methods using `captureAny`, `captureThat`, and `captureAnyNamed` from the Mockito library. It shows how to capture single and multiple calls, and how to apply conditional capture using matchers like `startsWith`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\n// Simple capture\ncat.eatFood(\"Fish\");\nexpect(verify(cat.eatFood(captureAny)).captured.single, \"Fish\");\n\n// Capture multiple calls\ncat.eatFood(\"Milk\");\ncat.eatFood(\"Fish\");\nexpect(verify(cat.eatFood(captureAny)).captured, [\"Milk\", \"Fish\"]);\n\n// Conditional capture\ncat.eatFood(\"Milk\");\ncat.eatFood(\"Fish\");\nexpect(verify(cat.eatFood(captureThat(startsWith(\"F\")))).captured, [\"Fish\"]);\n```\n\n----------------------------------------\n\nTITLE: Verifying multiple method calls with argument capture - Dart\nDESCRIPTION: This code demonstrates how to verify the number of times a method was called and capture the arguments for each call. It saves the `verification` object returned by `verify` to access both the call count and captured arguments.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncat.hunt(\"home\", \"birds\");\ncat.hunt(\"home\", \"lizards\");\nvar verification = verify(cat.hunt(\"home\", captureAny));\nverification.called(greaterThan(2));\nvar firstCall = verification.captured[0];\nvar secondCall = verification.captured[1];\n\nexpect(firstCall, equals([\"birds\"]));\nexpect(secondCall, equals([\"lizards\"]));\n```\n\n----------------------------------------\n\nTITLE: Async Stubbing with thenAnswer\nDESCRIPTION: This snippet shows the correct way to stub methods that return a `Future` or `Stream` using `thenAnswer`. Using `thenReturn` with `Future` or `Stream` is discouraged due to potential unexpected behavior related to zones and exception handling.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n// BAD\nwhen(mock.methodThatReturnsAFuture())\n    .thenReturn(Future.value('Stub'));\nwhen(mock.methodThatReturnsAStream())\n    .thenReturn(Stream.fromIterable(['Stub']));\n\n// GOOD\nwhen(mock.methodThatReturnsAFuture())\n    .thenAnswer((_) async => 'Stub');\nwhen(mock.methodThatReturnsAStream())\n    .thenAnswer((_) => Stream.fromIterable(['Stub']));\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Use the above method unless you're sure you want to create the Future ahead\n// of time.\nfinal future = Future.value('Stub');\nwhen(mock.methodThatReturnsAFuture()).thenAnswer((_) => future);\n```\n\n----------------------------------------\n\nTITLE: Mocking IssLocator class in Dart\nDESCRIPTION: This code snippet demonstrates how to create a mock implementation of the `IssLocator` class using the `Mock` class from the `mockito` package. The `MockIssLocator` class extends `Mock` and implements `IssLocator`. This allows for easy stubbing and verification of interactions with the `IssLocator` in unit tests.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/example/iss/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// The Mock class uses noSuchMethod to catch all method invocations.\nclass MockIssLocator extends Mock implements IssLocator {}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments with Argument Matchers\nDESCRIPTION: This snippet demonstrates the correct way to use argument matchers with named arguments.  The name of the argument must be declared in the argument matcher.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n// GOOD: argument matchers include their names.\nwhen(cat.eatFood(any, hungry: anyNamed('hungry'))).thenReturn(true);\nwhen(cat.eatFood(any, hungry: argThat(isNotNull, named: 'hungry'))).thenReturn(false);\nwhen(cat.eatFood(any, hungry: captureAnyNamed('hungry'))).thenReturn(false);\nwhen(cat.eatFood(any, hungry: captureThat(isNotNull, named: 'hungry'))).thenReturn(true);\n\n// BAD: argument matchers do not include their names.\nwhen(cat.eatFood(any, hungry: any)).thenReturn(true);\nwhen(cat.eatFood(any, hungry: argThat(isNotNull))).thenReturn(false);\nwhen(cat.eatFood(any, hungry: captureAny)).thenReturn(false);\nwhen(cat.eatFood(any, hungry: captureThat(isNotNull))).thenReturn(true);\n```\n\n----------------------------------------\n\nTITLE: Debugging Mocks with Mockito in Dart\nDESCRIPTION: This code demonstrates how to use `logInvocations` and `throwOnMissingStub` for debugging mocks.  `logInvocations` prints all collected invocations. `throwOnMissingStub` throws an exception whenever a mock method is called without a stub being matched. Requires using Mockito.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_15\n\nLANGUAGE: Dart\nCODE:\n```\n// Print all collected invocations of any mock methods of a list of mock objects:\nlogInvocations([catOne, catTwo]);\n\n// Throw every time that a mock method is called without a stub being matched:\nthrowOnMissingStub(cat);\n```\n\n----------------------------------------\n\nTITLE: Stubbing and Verifying with Mockito (Dart)\nDESCRIPTION: This snippet shows how to use Mockito's `when` and `verify` methods for stubbing and verification. The `returnValue` provided in the method override is immediately dropped and not used during stubbing or verification. The actual return value comes from the stubbed value when the method is called.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvar httpServer = MockHttpServer();\nwhen(httpServer.uri).thenReturn(Uri.http('dart.dev', '/'));\nhttpServer.uri;\nverify(httpServer.uri).called(1);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Interactions with Mockito in Dart\nDESCRIPTION: This code demonstrates how to use `untilCalled` from the Mockito library to wait for interactions with mocked objects. It shows how to wait for a call that has already happened and how to wait for a call that will happen in the future. It requires Mockito as a dependency.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\n// Waiting for a call.\ncat.eatFood(\"Fish\");\nawait untilCalled(cat.chew()); // Completes when cat.chew() is called.\n\n// Waiting for a call that has already happened.\ncat.eatFood(\"Fish\");\nawait untilCalled(cat.eatFood(any)); // Completes immediately.\n```\n\n----------------------------------------\n\nTITLE: Mockito 3.0.0-alpha+4 API Changes\nDESCRIPTION: These code snippets represent the API changes introduced in Mockito 3.0.0-alpha+4, which provides backward and forward compatibility. It adds the `named` parameter to `argThat` and `captureThat` methods and introduces `anyNamed` and `captureAnyNamed`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n-argThat(Matcher matcher) => new ArgMatcher(matcher, false);\n+argThat(Matcher matcher, {String named}) => new ArgMatcher(matcher, false);\n\n-captureThat(Matcher matcher) => new ArgMatcher(matcher, true);\n+captureThat(Matcher matcher, {String named}) => new ArgMatcher(matcher, true);\n\n+anyNamed(String named) => typed(any, named: named);\n\n+captureAnyNamed(String named) => typed(captureAny, named: named);\n```\n\n----------------------------------------\n\nTITLE: Overriding getter with non-nullable return type (Dart)\nDESCRIPTION: This snippet demonstrates how to override a getter with a non-nullable return type using Mockito. The override calls `super.noSuchMethod` with an `Invocation.getter` and specifies a `returnValue` to satisfy the non-nullable return type constraint. This avoids runtime errors during stubbing and verification.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass MockHttpServer extends Mock implements HttpServer {\n  @override\n  Uri get uri =>\n      super.noSuchMethod(\n          Invocation.getter(#uri), returnValue: Uri.http('example.org', '/'));\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Number of Invocations\nDESCRIPTION: This snippet demonstrates how to verify the exact number of times a method has been called using `verify(method()).called(number)` or `verify(method()).called(matcher)`. It also shows how to verify that a method was never called using `verifyNever(method())`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\ncat.sound();\ncat.sound();\n\n// Exact number of invocations\nverify(cat.sound()).called(2);\n\n// Or using matcher\nverify(cat.sound()).called(greaterThan(1));\n\n// Or never called\nverifyNever(cat.eatFood(any));\n```\n\n----------------------------------------\n\nTITLE: Failing verify() call after successful verify() - Dart\nDESCRIPTION: This code demonstrates the behavior of `verify()` in Mockito, where subsequent verifications can fail because the call is marked as already verified. It highlights the importance of capturing arguments in a single verification call for multiple assertions.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ncat.eatFood(\"fish\");\nverify(cat.eatFood(\"fish\"));  // This call succeeds.\nverify(cat.eatFood(any));  // This call fails.\n```\n\n----------------------------------------\n\nTITLE: Stubbing methods using when().thenReturn() - Dart\nDESCRIPTION: This code shows how to stub a method using `when()` and `thenReturn()`. It first shows that an unstubbed method returns `null`. Then, it demonstrates how to configure the mock object to return a specific value when the method is called.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Unstubbed methods return null:\nexpect(cat.sound(), nullValue);\n\n// Stubbing - before execution:\nwhen(cat.sound()).thenReturn(\"Purr\");\n```\n\n----------------------------------------\n\nTITLE: Annotated Test File (Code Generation) - Dart\nDESCRIPTION: This shows the test file after adding the `@GenerateNiceMocks` annotation, importing the generated mocks library, and using the generated `MockHttpServer` class. This allows for null-safe mocking.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// http_server_test.dart:\nimport 'package:mockito/annotations.dart';\nimport 'package:test/test.dart';\nimport 'http_server.dart';\n\n@GenerateNiceMocks([MockSpec<HttpServer>()])\nimport 'http_server_test.mocks.dart';\n\nvoid main() {\n  test('test', () {\n    var httpServer = MockHttpServer();\n    // We want to stub the `start` method.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying method call arguments - Dart\nDESCRIPTION: This code shows how to verify method calls and capture the arguments passed to them. It uses `verify` with `captureAny` to capture the arguments. The captured arguments can then be asserted against expected values.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncat.hunt(\"home\", \"birds\");\nvar captured = verify(cat.hunt(captureAny, captureAny)).captured.single;\nexpect(captured[0], equals(\"home\"));\nexpect(captured[1], equals(\"birds\"));\n```\n\n----------------------------------------\n\nTITLE: Verifying Method Invocations\nDESCRIPTION: This snippet demonstrates how to verify that a method on a mock object has been called using the `verify` function.  The mock instance remembers all interactions.  Selective verification can be done using `verifyInOrder` and `verifyNever`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Interact with the mock object.\ncat.sound();\n// Verify the interaction.\nverify(cat.sound());\n```\n\n----------------------------------------\n\nTITLE: Mockito 2.x Argument Matching Example\nDESCRIPTION: This snippet demonstrates argument matching in Mockito 2.x.  It shows how `argThat` and `any` were used to match arguments in the `eatFood` method. It highlights that Mockito 2.x allowed passing `ArgumentMatcher` objects directly, which is not type-safe.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nwhen(cat.eatFood(argThat(contains('mouse')), hungry: any))...\n```\n\n----------------------------------------\n\nTITLE: Test Setup for Unsupported Members - Dart\nDESCRIPTION: Illustrates how to set up a test using a mock, when the class to be mocked has members with non-nullable type variable return types. Includes importing the generated mocks.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateNiceMocks([MockSpec<Foo>(as: #MockFoo)])\nimport 'foo_test.mocks.dart';\n\nabstract class Foo {\n  T m<T>(T a, int b);\n}\n\nvoid testFoo(Foo foo) {\n  when(foo.m(7)).thenReturn(42);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Redundant Invocations\nDESCRIPTION: This snippet demonstrates how to find redundant invocations on a mock object after verifying the necessary interactions using `verifyNoMoreInteractions`.  It ensures that there are no other calls to mock than those already verified.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\ncat.sound();\nverify(cat.sound());\nverifyNoMoreInteractions(cat);\n```\n\n----------------------------------------\n\nTITLE: Overriding method with nullable parameter type (Dart)\nDESCRIPTION: This snippet demonstrates how to override a method with a non-nullable parameter type by expanding the type to be nullable. It calls `super.noSuchMethod` to handle stubbing and verifying, passing in an `Invocation.method` with the method name and arguments.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass MockHttpServer extends Mock implements HttpServer {\n  @override\n  void start(int? port) =>\n      super.noSuchMethod(Invocation.method(#start, [port]));\n}\n```\n\n----------------------------------------\n\nTITLE: Mockito 2.x to 3.0 captureThat Upgrade\nDESCRIPTION: Demonstrates the code transformation required to upgrade a Mockito 2.x `captureThat` call with a named argument to Mockito 3's `captureThat` with the named argument. This includes removing the `typed` wrapper and adding the named parameter to captureThat.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfoo: captureThat(...)  // 2.x\nfoo: captureThat(..., named: 'foo') // 3.0\n```\n\n----------------------------------------\n\nTITLE: Refactor to enable mocking constructors - Dart\nDESCRIPTION: This code demonstrates how to refactor code to enable mocking of constructors. Instead of directly instantiating an object within a function, the function accepts the object as a parameter. This allows a mock object to be passed in during testing.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/FAQ.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// BEFORE:\nvoid f() {\n  var foo = Foo();\n  // ...\n}\n\n// AFTER\nvoid f(Foo foo) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Stubbing Example - Dart\nDESCRIPTION: This demonstrates the standard way to stub the `start` method of the `MockHttpServer`. It uses `when` to specify the return value for any argument passed to `start`. This code is illegal under null safety.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar server = MockHttpServer();\nvar uri = Uri.parse('http://localhost:8080');\nwhen(server.start(any)).thenReturn(uri);\n```\n\n----------------------------------------\n\nTITLE: Mockito 1.0.0 Typed Argument Matching\nDESCRIPTION: This snippet demonstrates how Mockito 1.0.0 used the `typed` function as an interim solution to simulate type-safe argument matching. It effectively passes null for both positional and named arguments.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwhen(cat.eatFood(\n    typed(argThat(contains('mouse'))), hungry: typed(any, named: 'hungry')))...\n```\n\n----------------------------------------\n\nTITLE: Unsupported Members - Dart\nDESCRIPTION: This demonstrates how to use `unsupportedMembers` in `MockSpec` to generate overrides that throw `UnsupportedError` for specified members.  Useful when mocking members with non-nullable type variable return types.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateNiceMocks([\n  MockSpec<Foo>(unsupportedMembers: {#method}),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining HttpServer Class - Dart\nDESCRIPTION: This defines a simple `HttpServer` class with a `start` method that takes a non-nullable integer `port` and returns a non-nullable `Uri`.  This class is used as an example for demonstrating mocking with null safety.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HttpServer {\n  Uri start(int port)  {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Invocations Order\nDESCRIPTION: This snippet demonstrates how to verify the order in which methods were called using `verifyInOrder`.  The order of the interactions can be selectively verified.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\ncat.eatFood(\"Milk\");\ncat.sound();\ncat.eatFood(\"Fish\");\nverifyInOrder([\n  cat.eatFood(\"Milk\"),\n  cat.sound(),\n  cat.eatFood(\"Fish\")\n]);\n```\n\n----------------------------------------\n\nTITLE: Mockito 3 Argument Matching Example\nDESCRIPTION: This snippet showcases the new Mockito 3 API for argument matching.  The `typed` wrapper is removed, and `anyNamed` is introduced for named arguments. This improves type safety and simplifies the API.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwhen(cat.eatFood(argThat(contains('mouse')), hungry: anyNamed('hungry')))...\n```\n\n----------------------------------------\n\nTITLE: Test File Setup (Code Generation) - Dart\nDESCRIPTION: This sets up the initial test file structure, importing necessary packages and defining a simple test function. This is before the mock is generated.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// http_server_test.dart:\nimport 'package:test/test.dart';\nimport 'http_server.dart';\n\nvoid main() {\n  test('test', () {\n    var httpServer = MockHttpServer();\n    // We want to stub the `start` method.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Mockito 2.x to 3.0 argThat Upgrade\nDESCRIPTION: Demonstrates upgrading `argThat` with a named argument from Mockito 2.x using `typed` to Mockito 3, removing the `typed` wrapper and adding the `named` parameter to `argThat` itself.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfoo: argThat(...) // 2.x\nfoo: argThat(..., named: 'foo') // 3.0\n```\n\n----------------------------------------\n\nTITLE: Standard Mock Definition - Dart\nDESCRIPTION: This defines a standard mock class `MockHttpServer` that extends `Mock` and implements `HttpServer`. This approach is problematic under null safety due to type mismatches with non-nullable types.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MockHttpServer extends Mock implements HttpServer {}\n```\n\n----------------------------------------\n\nTITLE: Custom Mock Name Generation - Dart\nDESCRIPTION: This example demonstrates how to specify a custom name for a generated mock class using the `as` parameter in `MockSpec`.  The generated class will be `BaseMockFoo` instead of `MockFoo`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateNiceMocks([MockSpec<Foo>(as: #BaseMockFoo)])\n```\n\n----------------------------------------\n\nTITLE: HttpServer Class (Manual Mock) - Dart\nDESCRIPTION: This shows the `HttpServer` class that will be manually mocked, including a method with a non-nullable parameter and a getter with a non-nullable return type.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass HttpServer {\n  void start(int port) { ... }\n\n  Uri get uri { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MockHttpServer (Manual) - Dart\nDESCRIPTION: A basic example demonstrating mock implementation before null safety. The class implements each of the methods in HttpServer's public interface via the `noSuchMethod` method found in the Mock class.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass MockHttpServer extends Mock implements HttpServer {}\n```\n\n----------------------------------------\n\nTITLE: Mockito 2.x Upgrade Example 1\nDESCRIPTION: Illustrates the upgrade from Mockito 2.x's `any` as a named argument, wrapped by `typed`, to Mockito 3's `anyNamed`. Shows the specific syntax change required during migration.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfoo: any //2.x\nfoo: anyNamed('foo') //3.0\n```\n\n----------------------------------------\n\nTITLE: Non-Generic Mock Generation - Dart\nDESCRIPTION: This shows how to generate a non-generic mock of a generic class by specifying the type arguments in `MockSpec`. The example generates `MockFooOfInt` which implements `Foo<int>`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateNiceMocks([MockSpec<Foo<int>>(as: #MockFooOfInt)])\n```\n\n----------------------------------------\n\nTITLE: Exception on Missing Stub - Dart\nDESCRIPTION: Demonstrates how to generate a mock that throws an exception when a method call doesn't match any stub. Uses `@GenerateMocks` instead of `@GenerateNiceMocks`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@GenerateMocks([Foo])\n```\n\n----------------------------------------\n\nTITLE: HttpServer Definition (Code Generation) - Dart\nDESCRIPTION: This code snippet shows the original `HttpServer` definition. It is the class that will be mocked using the code generation approach.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// http_server.dart:\nclass HttpServer {\n  Uri start(int port)  {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Runner Command - Shell\nDESCRIPTION: This shows the command-line instruction to run build_runner, which generates the mock classes based on the `@GenerateNiceMocks` annotation.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub run build_runner build\n# OR\ndart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Mockito 2.x to 3.0 captureAny Upgrade\nDESCRIPTION: Illustrates the upgrade of a `captureAny` argument in Mockito 2.x to the equivalent in Mockito 3, which requires using `captureAnyNamed` to specify the named argument.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/upgrading-to-mockito-3.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfoo: captureAny  // 2.x\nfoo: captureAnyNamed('foo') // 3.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Zero Interactions\nDESCRIPTION: This snippet demonstrates how to verify that there were no interactions with a mock object using `verifyZeroInteractions`.\nSOURCE: https://github.com/dart-lang/mockito/blob/master/README.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nverifyZeroInteractions(cat);\n```"
  }
]