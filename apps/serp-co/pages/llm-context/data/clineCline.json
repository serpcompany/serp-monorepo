[
  {
    "owner": "cline",
    "repo": "cline",
    "content": "TITLE: Implementing Cline's Memory Bank System in Markdown\nDESCRIPTION: This code snippet provides detailed instructions for implementing Cline's Memory Bank system. It covers the core concept, required files, and workflows for starting tasks, development, and updating the Memory Bank. The system is designed to maintain perfect documentation across memory resets.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/cline-memory-bank.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cline's Memory Bank\n\nYou are Cline, an expert software engineer with a unique constraint: your memory periodically resets completely. This isn't a bug - it's what makes you maintain perfect documentation. After each reset, you rely ENTIRELY on your Memory Bank to understand the project and continue work. Without proper documentation, you cannot function effectively.\n\n## Memory Bank Files\n\nCRITICAL: If `cline_docs/` or any of these files don't exist, CREATE THEM IMMEDIATELY by:\n\n1. Reading all provided documentation\n2. Asking user for ANY missing information\n3. Creating files with verified information only\n4. Never proceeding without complete context\n\nRequired files:\n\nproductContext.md\n\n-   Why this project exists\n-   What problems it solves\n-   How it should work\n\nactiveContext.md\n\n-   What you're working on now\n-   Recent changes\n-   Next steps\n    (This is your source of truth)\n\nsystemPatterns.md\n\n-   How the system is built\n-   Key technical decisions\n-   Architecture patterns\n\ntechContext.md\n\n-   Technologies used\n-   Development setup\n-   Technical constraints\n\nprogress.md\n\n-   What works\n-   What's left to build\n-   Progress status\n\n## Core Workflows\n\n### Starting Tasks\n\n1. Check for Memory Bank files\n2. If ANY files missing, stop and create them\n3. Read ALL files before proceeding\n4. Verify you have complete context\n5. Begin development. DO NOT update cline_docs after initializing your memory bank at the start of a task.\n\n### During Development\n\n1. For normal development:\n\n    - Follow Memory Bank patterns\n    - Update docs after significant changes\n\n2. Say `[MEMORY BANK: ACTIVE]` at the beginning of every tool use.\n\n### Memory Bank Updates\n\nWhen user says \"update memory bank\":\n\n1. This means imminent memory reset\n2. Document EVERYTHING about current state\n3. Make next steps crystal clear\n4. Complete current task\n\nRemember: After every memory reset, you begin completely fresh. Your only link to previous work is the Memory Bank. Maintain it as if your functionality depends on it - because it does.\n```\n\n----------------------------------------\n\nTITLE: Running Evaluations with the Cline CLI Tool\nDESCRIPTION: Bash command for running evaluations using the Cline CLI tool. This shows how to specify the model and benchmark to be evaluated, with options for model selection, benchmark choice, and limiting the number of tasks.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode dist/index.js run --model claude-3-opus-20240229 --benchmark exercism\n```\n\n----------------------------------------\n\nTITLE: Creating Security Rules in .clinerules File\nDESCRIPTION: This snippet demonstrates how to define security rules in a .clinerules file to protect sensitive information by instructing Cline to ignore specific files or patterns. It specifies which files to avoid and outlines security best practices.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security\n\n## Sensitive Files\n\nDO NOT read or modify:\n\n-   .env files\n-   \\*_/config/secrets._\n-   \\*_/_.pem\n-   Any file containing API keys, tokens, or credentials\n\n## Security Practices\n\n-   Never commit sensitive files\n-   Use environment variables for secrets\n-   Keep credentials out of logs and output\n```\n\n----------------------------------------\n\nTITLE: Building the CLI Tool for Cline Evaluation\nDESCRIPTION: Bash commands for building the CLI tool used in the Cline Evaluation System. These commands navigate to the CLI directory, install dependencies, and build the application.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd evals/cli\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using the Cline API in TypeScript\nDESCRIPTION: This snippet demonstrates how to access the Cline extension API and use its methods to control Claude's behavior, including setting/getting custom instructions, starting new tasks, sending messages, and simulating button presses.\nSOURCE: https://github.com/cline/cline/blob/main/src/exports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst clineExtension = vscode.extensions.getExtension<ClineAPI>(\"saoudrizwan.claude-dev\")\n\nif (!clineExtension?.isActive) {\n\tthrow new Error(\"Cline extension is not activated\")\n}\n\nconst cline = clineExtension.exports\n\nif (cline) {\n\t// Now you can use the API\n\n\t// Set custom instructions\n\tawait cline.setCustomInstructions(\"Talk like a pirate\")\n\n\t// Get custom instructions\n\tconst instructions = await cline.getCustomInstructions()\n\tconsole.log(\"Current custom instructions:\", instructions)\n\n\t// Start a new task with an initial message\n\tawait cline.startNewTask(\"Hello, Cline! Let's make a new project...\")\n\n\t// Start a new task with an initial message and images\n\tawait cline.startNewTask(\"Use this design language\", [\"data:image/webp;base64,...\"])\n\n\t// Send a message to the current task\n\tawait cline.sendMessage(\"Can you fix the @problems?\")\n\n\t// Simulate pressing the primary button in the chat interface (e.g. 'Save' or 'Proceed While Running')\n\tawait cline.pressPrimaryButton()\n\n\t// Simulate pressing the secondary button in the chat interface (e.g. 'Reject')\n\tawait cline.pressSecondaryButton()\n} else {\n\tconsole.error(\"Cline API is not available\")\n}\n```\n\n----------------------------------------\n\nTITLE: File Search Pattern using search_files XML Tool\nDESCRIPTION: Demonstrates using the search_files tool to find patterns in code using regex. Includes path, regex pattern, and file pattern parameters.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/cline-tools-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<search_files>\n<path>src</path>\n<regex>function\\s+\\w+\\(</regex>\n<file_pattern>*.ts</file_pattern>\n</search_files>\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Guidelines in .clinerules File\nDESCRIPTION: This snippet shows a comprehensive example of a .clinerules file structure for maintaining project standards. It includes sections for documentation requirements, architecture decision records, code style guidelines, and testing standards.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Project Guidelines\n\n## Documentation Requirements\n\n-   Update relevant documentation in /docs when modifying features\n-   Keep README.md in sync with new capabilities\n-   Maintain changelog entries in CHANGELOG.md\n\n## Architecture Decision Records\n\nCreate ADRs in /docs/adr for:\n\n-   Major dependency changes\n-   Architectural pattern changes\n-   New integration patterns\n-   Database schema changes\n    Follow template in /docs/adr/template.md\n\n## Code Style & Patterns\n\n-   Generate API clients using OpenAPI Generator\n-   Use TypeScript axios template\n-   Place generated code in /src/generated\n-   Prefer composition over inheritance\n-   Use repository pattern for data access\n-   Follow error handling pattern in /src/utils/errors.ts\n\n## Testing Standards\n\n-   Unit tests required for business logic\n-   Integration tests for API endpoints\n-   E2E tests for critical user flows\n```\n\n----------------------------------------\n\nTITLE: Generating a Changeset for Pull Requests\nDESCRIPTION: Command to generate a changeset entry before creating a pull request. This will prompt for the type of change and a description, generating a .changeset file to track the changes.\nSOURCE: https://github.com/cline/cline/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset using npm\nDESCRIPTION: This command initiates the changeset creation process using npm. This is used to document the changes made for proper versioning and release management. It prompts the user to define the type of change and provide a description.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Displaying Core Directory Structure in Tree Format\nDESCRIPTION: This tree structure represents the organization of the core directory in the cline project. It shows the main components including webview, controller, and task, along with their primary responsibilities.\nSOURCE: https://github.com/cline/cline/blob/main/src/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncore/\n├── webview/      # Manages webview lifecycle\n├── controller/   # Handles webview messages and task management\n├── task/         # Executes API requests and tool operations\n└── ...           # Additional components to help with context, parsing user/assistant messages, etc.\n```\n\n----------------------------------------\n\nTITLE: Create Changeset (npm)\nDESCRIPTION: This command is used to create a changeset, which is a file that describes the changes made in a pull request that will affect users. It is used for version management and helps automate the release process. This command is crucial before submitting the PR if your change affects users.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Generating Evaluation Reports with Cline CLI\nDESCRIPTION: Bash command for generating reports from evaluation results. This command creates reports in either JSON or Markdown format and allows specifying an output path.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode dist/index.js report\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline Extension\nDESCRIPTION: Command to install all necessary dependencies for both the extension and webview-gui components of the Cline project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Generating Changeset Entry\nDESCRIPTION: This command is used to generate a changeset entry before creating a pull request. The process will prompt for the type of change (major, minor, or patch) and a description of the changes made. The generated file is crucial for managing versioning.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline Extension and Web Interface\nDESCRIPTION: Command to install all necessary dependencies for both the Cline extension and its web interface.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in cline_mcp_settings.json\nDESCRIPTION: This snippet shows how to add a new GitHub Assistant server to the cline_mcp_settings.json configuration file. It includes the server start command and environment variables required for the server to function.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-server-from-scratch.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"name\": \"GitHub Assistant Server\",\n      \"start_command\": \"npm run start\",\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token_here\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Tests - npm\nDESCRIPTION: This command executes the test suite for the Cline project. It's crucial to run tests locally before submitting a pull request to ensure changes do not introduce regressions.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Settings for Windows\nDESCRIPTION: JSON configuration for setting up the MCP installer server on Windows systems using cmd.exe and npx.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"mcpServers\": {\n\t\t\"mcp-installer\": {\n\t\t\t\"command\": \"cmd.exe\",\n\t\t\t\"args\": [\"/c\", \"npx\", \"-y\", \"@anaisbetts/mcp-installer\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: Lints the codebase to identify potential style violations. All pull requests must pass these checks in CI.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Setting Up Benchmarks for Cline Evaluation\nDESCRIPTION: Bash commands for setting up benchmarks in the Cline Evaluation System. These commands demonstrate how to run the setup command for all benchmarks or for a specific benchmark.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd evals/cli\nnode dist/index.js setup\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode dist/index.js setup --benchmarks exercism\n```\n\n----------------------------------------\n\nTITLE: Format Code (npm)\nDESCRIPTION: This command automatically formats the code in the Cline project to adhere to the project's style guidelines.  Running this command before submitting a pull request helps maintain code consistency and readability. It's preferable to run the fix variant to automatically apply formatting changes.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline\nDESCRIPTION: This command installs the necessary dependencies for both the extension and the webview-gui parts of the Cline project. It uses npm to manage and install the required packages. It ensures that all the required node modules are installed for the project to run correctly.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies\nDESCRIPTION: This command installs all the necessary dependencies required for the Cline project. It is a crucial step to set up the local development environment.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for VS Code Extension Tests\nDESCRIPTION: Commands to install required system libraries for running VS Code extension tests on Debian-based Linux distributions. These libraries provide necessary GUI components and system services for the test environment.\nSOURCE: https://github.com/cline/cline/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y \\\n  libatk1.0-0 libatk-bridge2.0-0 libxkbfile1 libx11-xcb1 \\\n  libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 \\\n  libdrm2 libgtk-3-0 dbus xvfb\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for the project. It should be run after cloning the repository and before starting development.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Terminal\nDESCRIPTION: Example command showing how to check the installed version of Node.js in the terminal. The example demonstrates both the command and its output, indicating Node.js version 16.14.0.\nSOURCE: https://github.com/cline/cline/blob/main/docs/getting-started-new-coders/installing-dev-essentials.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ node -v\nv16.14.0\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository with Git-LFS\nDESCRIPTION: This command clones the Cline repository from GitHub. It requires git-lfs to be installed to properly handle large files. This is a necessary first step to contribute to the project or set up a local development environment.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Fetch Command\nDESCRIPTION: Bash command to instruct Cline to install and configure the mcp-server-fetch package.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-quickstart.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"install the MCP server named `mcp-server-fetch`\n- ensure the mcp settings are updated.\n- use uvx or python to run the server.\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Cline Repository\nDESCRIPTION: This command clones the Cline repository from GitHub, requiring git-lfs due to large files. It's the first step for local development, providing the necessary source code and assets.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Format Code Automatically\nDESCRIPTION: This command automatically formats the code using Prettier. It ensures that the code adheres to the project's defined style, contributing to better readability and consistency across the codebase. This should be run before submitting any code changes.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Formatting code\nDESCRIPTION: This command formats the code according to the project's style guidelines. It ensures consistency and readability throughout the codebase and should be executed before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: ASDF Environment Configuration\nDESCRIPTION: JSON configuration showing environment variables needed when using ASDF version manager.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-quickstart.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n        \"PATH\": \"/Users/<user_name>/.asdf/shims:/usr/bin:/bin\",\n        \"ASDF_DIR\": \"<path_to_asdf_bin_dir>\",\n        \"ASDF_DATA_DIR\": \"/Users/<user_name>/.asdf\",\n        \"ASDF_NODEJS_VERSION\": \"<your_node_version>\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Format Code\nDESCRIPTION: This command automatically formats the code according to the project's code style. Use this before submitting a pull request to ensure consistent formatting.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Lint Code (npm)\nDESCRIPTION: This command checks the code for style and potential errors using a linter.  It helps ensure code quality and adherence to project standards.  All pull requests must pass the linting checks.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Run Tests Locally\nDESCRIPTION: This command executes the test suite for the Cline project. Running tests locally helps to ensure that the codebase is functioning correctly and that any changes made do not introduce regressions. It is recommended to run tests before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline Extension\nDESCRIPTION: Command to install all necessary dependencies for both the extension and webview-gui components of the Cline project.\nSOURCE: https://github.com/cline/cline/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs all required dependencies for the project. This is a prerequisite step for local development and testing.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Format Code (check only) - npm\nDESCRIPTION: This command automatically formats the code according to the project's defined style conventions.  It helps maintain code consistency across the project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Running tests\nDESCRIPTION: This command executes all the tests defined for the Cline project. It helps ensure that the codebase is functioning correctly and that any new changes do not introduce regressions.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository using Git\nDESCRIPTION: Command to clone the Cline repository. Requires git-lfs to be installed for handling large files tracked in the repository.\nSOURCE: https://github.com/cline/cline/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Run Tests\nDESCRIPTION: This command executes the test suite for the Cline project. It ensures that the codebase is functioning as expected and that no regressions have been introduced.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for the Cline project. It is a prerequisite before running tests or submitting pull requests.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Project with Cline\nDESCRIPTION: A sample prompt to ask Cline to create a new project folder and a simple Hello World webpage with blue text. This demonstrates how to interact with Cline to create a basic web project.\nSOURCE: https://github.com/cline/cline/blob/main/docs/getting-started-new-coders/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHey Cline! Could you help me create a new project folder called \"hello-world\" in my Cline directory and make a simple webpage that says \"Hello World\" in big blue text?\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: This command runs the linter to check the code style and identify potential issues. It helps maintain code quality and consistency across the project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Opening the Cline Project in VSCode\nDESCRIPTION: This command opens the cloned Cline project in Visual Studio Code. It assumes that VSCode is installed and available in the system's PATH. This allows developers to explore the project's file structure and begin development.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (npm)\nDESCRIPTION: This command installs all necessary dependencies for the Cline project.  It is a prerequisite for running tests and formatting code.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Opening Cline Project in VSCode\nDESCRIPTION: This command opens the cloned Cline project in Visual Studio Code. It's a simple terminal command to navigate into the project directory within VSCode.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-cn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command uses npm to install all necessary dependencies for both the extension and the webview GUI of the Cline project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Opening the Project in VSCode\nDESCRIPTION: This command opens the cloned Cline project in Visual Studio Code, allowing for development and modification of the project's code.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: This command checks the code style for the Cline project using ESLint. Running this command helps identify any violations of the project's coding style guidelines. Addressing any warnings or errors reported by ESLint before submitting a pull request ensures code consistency and maintainability.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Cloning Cline Repository Using Git LFS\nDESCRIPTION: This command clones the Cline repository from GitHub. It requires git-lfs to be installed first because the repository uses Git Large File Storage for managing large files.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-cn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Example command for installing Homebrew, a package manager for macOS. Shows the command line prompt where a password would be entered, noting that the password input will not be visible.\nSOURCE: https://github.com/cline/cline/blob/main/docs/getting-started-new-coders/installing-dev-essentials.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nPassword:\n```\n\n----------------------------------------\n\nTITLE: Opening Cline Project in VSCode\nDESCRIPTION: Command to open the cloned Cline project in Visual Studio Code.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository with Git LFS\nDESCRIPTION: Command to clone the Cline repository from GitHub. Requires git-lfs to be installed for handling large files.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Opening Cline Project in VSCode\nDESCRIPTION: This command opens the cloned Cline project in Visual Studio Code. This step is necessary for setting up the development environment and working with the Cline codebase. VSCode must be installed.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - npm\nDESCRIPTION: This command installs all the necessary dependencies for the Cline project. It is a prerequisite for local development and testing.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Settings for Mac/Linux\nDESCRIPTION: JSON configuration for setting up the MCP installer server on Unix-based systems using npx directly.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"mcpServers\": {\n\t\t\"mcp-installer\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"@anaisbetts/mcp-installer\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure using Tree Command\nDESCRIPTION: A tree representation of the Cline Evaluation System's directory structure showing the organization of components including the src directory with service files and the evals directory containing the CLI tool, repositories, and results storage.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncline-repo/\n├── src/\n│   ├── services/\n│   │   ├── test/\n│   │   │   ├── TestServer.ts         # Enhanced HTTP server for task execution\n│   │   │   ├── GitHelper.ts          # Git utilities for file tracking\n│   │   │   └── ...\n│   │   └── ...\n│   └── ...\n├── evals/                            # Main directory for evaluation system\n│   ├── cli/                          # CLI tool for orchestrating evaluations\n│   │   ├── src/\n│   │   │   ├── index.ts              # CLI entry point\n│   │   │   ├── commands/             # CLI commands (setup, run, report)\n│   │   │   ├── adapters/             # Benchmark adapters\n│   │   │   ├── db/                   # Database management\n│   │   │   └── utils/                # Utility functions\n│   │   ├── package.json\n│   │   └── tsconfig.json\n│   ├── repositories/                 # Cloned benchmark repositories\n│   │   ├── exercism/                 # Modified Exercism (from pashpashpash/evals)\n│   │   ├── swe-bench/                # SWE-Bench repository\n│   │   ├── swelancer/                # SWELancer repository\n│   │   └── multi-swe/                # Multi-SWE-Bench repository\n│   ├── results/                      # Evaluation results storage\n│   │   ├── runs/                     # Individual run results\n│   │   └── reports/                  # Generated reports\n│   └── README.md                     # This file\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Extended MCP Settings with Fetch Server for Windows\nDESCRIPTION: Complete JSON configuration showing both the MCP installer and fetch server configuration for Windows.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-quickstart.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"mcpServers\": {\n\t\t\"mcp-installer\": {\n\t\t\t\"command\": \"cmd.exe\",\n\t\t\t\"args\": [\"/c\", \"npx\", \"-y\", \"@anaisbetts/mcp-installer\"]\n\t\t},\n\t\t\"mcp-server-fetch\": {\n\t\t\t\"command\": \"uvx\",\n\t\t\t\"args\": [\"mcp-server-fetch\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository\nDESCRIPTION: This command clones the Cline repository from GitHub using git. It requires git-lfs to be installed to handle large files.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Command Execution using execute_command XML Tool\nDESCRIPTION: Shows how to use the execute_command tool to run terminal commands with approval settings.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/cline-tools-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>npm install axios</command>\n<requires_approval>false</requires_approval>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Create Changeset\nDESCRIPTION: Creates a changeset for any user-facing changes, which helps manage versioning and release notes.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Example Interaction with Cline for Building an MCP Server\nDESCRIPTION: This code snippet demonstrates a typical conversation between a user and Cline when adding and building an MCP server for Brave browser control. It shows the complete workflow from specifying the repository to testing the server connection.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/mcp-server-from-github.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUser: \"Cline, I want to add the MCP server for Brave browser control. Here's the GitHub link: https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search Can you add it?\"\n\nCline: \"OK. Cloning the repository to the MCP directory. It needs to be built because it has a 'package.json' file. Should I run 'npm run build'?\"\n\nUser: \"Yes, build it.\"\n\nCline: \"Build complete. This server needs a browser path. Where's your Brave browser executable?\"\n\nUser: \"It's in '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'.\"\n\nCline: \"OK. I've updated the server config with that path and added it to 'cline_mcp_settings.json'. Anything else?\"\n\nUser: \"No, that's all. Let's test it.\"\n\nCline: \"Great! Starting the MCP Inspector to test the server connection. After that, we can try controlling the browser from Cline.\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline Extension\nDESCRIPTION: This command installs all necessary dependencies for both the main extension and the webview-gui components of Cline. It uses an npm script that's defined in the project's package.json.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-cn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Prompting Cline to Install Development Tools\nDESCRIPTION: A prompt to paste into Cline that will initiate the guided installation of essential development tools on a Mac. This prompt asks Cline to help set up software development tools with step-by-step guidance.\nSOURCE: https://github.com/cline/cline/blob/main/docs/getting-started-new-coders/installing-dev-essentials.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHello Cline! I need help setting up my Mac for software development. Could you please help me install the essential development tools like Homebrew, Node.js, Git, Python, and any other utilities that are commonly needed for coding? I'd like you to guide me through the process step-by-step, explaining what each tool does and making sure everything is installed correctly.\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Pull Requests\nDESCRIPTION: Command to generate a changeset entry before creating a pull request, used for version management.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Organizing Directory Structure for .clinerules Files - Example 2\nDESCRIPTION: This snippet shows a more complex directory structure for .clinerules files, illustrating how to organize rules for different frameworks and test environments in separate files and subdirectories.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.clinerules/\n├── .clinerules-nextjs\n├── .clinerules-serverside\n└── tests/\n    ├── .pytest-clinerules\n    └── .jest-clinerules\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cline Extension and Webview GUI\nDESCRIPTION: Command to install all necessary dependencies for the Cline extension and its Webview GUI interface.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Example .clineignore File Configuration\nDESCRIPTION: This example shows various ignore patterns that can be used in a .clineignore file, including ignoring log files, directories, using wildcards, and negation patterns to allow specific exceptions.\nSOURCE: https://github.com/cline/cline/blob/main/docs/cline-customization/clineignore.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Ignore log files\n*.log\n\n# Ignore the entire 'node_modules' directory\nnode_modules/\n\n# Ignore all files in the 'temp' directory and its subdirectories\ntemp/**\n\n# But DO NOT ignore 'important.log' even if it's in the root\n!important.log\n\n# Ignore any file named 'secret.txt' in any subdirectory\n**/secret.txt\n```\n\n----------------------------------------\n\nTITLE: Format Code\nDESCRIPTION: This command automatically formats the codebase to adhere to the project's code style. It is recommended to run this command before submitting a pull request to ensure consistency.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: File Creation Example using write_to_file XML Tool\nDESCRIPTION: Example showing how to use the write_to_file tool to create a new file with specified content. The tool requires a path and content parameter.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/cline-tools-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<write_to_file>\n<path>src/components/Header.tsx</path>\n<content>\n// Header component code\n</content>\n</write_to_file>\n```\n\n----------------------------------------\n\nTITLE: Lint Code - npm\nDESCRIPTION: This command runs the linter to check for code style issues and potential errors. It's essential to address all linting warnings and errors before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Managing Test Mode Activation with evals-env Commands\nDESCRIPTION: Bash commands for managing the evals.env file which activates test mode in the Cline extension. These commands allow creating, removing, and checking for the evals.env file with an option to specify a different directory.\nSOURCE: https://github.com/cline/cline/blob/main/evals/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode dist/index.js evals-env create  # Create evals.env file in current directory\nnode dist/index.js evals-env remove  # Remove evals.env file from current directory\nnode dist/index.js evals-env check   # Check if evals.env file exists in current directory\n```\n\n----------------------------------------\n\nTITLE: Format Code\nDESCRIPTION: Formats the codebase using the project's defined style guidelines. This ensures code consistency and readability.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Complete Analysis Methodology\nDESCRIPTION: Guidance for thorough problem analysis, emphasizing the importance of continuing analysis even after finding initial solutions.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nDon't complete the analysis prematurely, continue analyzing even if you think you found a solution\n```\n\n----------------------------------------\n\nTITLE: Linting code\nDESCRIPTION: This command checks the code for style issues, potential errors, and adherence to coding standards. It helps maintain code quality and consistency within the Cline project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Code Style Guidelines\nDESCRIPTION: Approach for influencing code organization and clarity through specific prompt terminology.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nUse words like \"elegant\" and \"simple\" in prompts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm\nDESCRIPTION: This command installs all necessary dependencies for both the extension and the web interface using npm. It assumes that npm is installed and configured correctly. This is essential to run the project and contribute to it.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Critical Thinking Implementation\nDESCRIPTION: Technique for questioning implementation decisions to uncover better solutions.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nAsk 'stupid' questions like: are you sure this is the best way to implement this?\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: This command checks the codebase for code style violations using linting tools. It helps ensure that the code adheres to the project's coding standards.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Working Directory Reference Syntax in Markdown\nDESCRIPTION: Illustrates how to reference the current Git working directory change status using the '@git-changes' keyword.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n@git-changes\n```\n\n----------------------------------------\n\nTITLE: Illustrating File Reference Syntax in Markdown\nDESCRIPTION: Demonstrates how to reference file contents using '@/' followed by the relative path within the project.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@/path/to/file.js\n```\n\n----------------------------------------\n\nTITLE: Example of Terminal Output Reference Usage in Markdown\nDESCRIPTION: Provides a practical example of using the terminal output reference to request error analysis.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nPlease identify the cause of the error in the @terminal output\n```\n\n----------------------------------------\n\nTITLE: Run Tests Locally\nDESCRIPTION: This command executes the test suite locally to ensure that the code changes do not introduce any regressions. It is recommended to run tests before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Terminal Output Reference Syntax in Markdown\nDESCRIPTION: Shows how to reference the latest terminal output using the '@terminal' keyword.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n@terminal\n```\n\n----------------------------------------\n\nTITLE: Example of File Reference Usage in Markdown\nDESCRIPTION: Shows a practical example of using a file reference to request analysis of a specific component file.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPlease analyze the implementation in @/src/components/Button.tsx\n```\n\n----------------------------------------\n\nTITLE: Resource Links in Markdown\nDESCRIPTION: A collection of markdown links to various MCP server resources, including GitHub repositories, online directories, and tutorial platforms.\nSOURCE: https://github.com/cline/cline/blob/main/docs/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   **GitHub Repositories:** [https://github.com/modelcontextprotocol/servers](https://github.com/modelcontextprotocol/servers) and [https://github.com/punkpeye/awesome-mcp-servers](https://github.com/punkpeye/awesome-mcp-servers)\n-   **Online Directories:** [https://mcpservers.org/](https://mcpservers.org/), [https://mcp.so/](https://mcp.so/), and [https://glama.ai/mcp/servers](https://glama.ai/mcp/servers)\n-   **PulseMCP:** [https://www.pulsemcp.com/](https://www.pulsemcp.com/)\n-   **YouTube Tutorial (AI-Driven Coder):** A video guide for building and using MCP servers: [https://www.youtube.com/watch?v=b5pqTNiuuJg](https://www.youtube.com/watch?v=b5pqTNiuuJg)\n```\n\n----------------------------------------\n\nTITLE: Run Tests (npm)\nDESCRIPTION: This command executes the test suite for the Cline project.  It ensures that the codebase functions as expected and that new contributions do not introduce regressions.  This is a critical step before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Opening Terminal on macOS\nDESCRIPTION: Command example showing how to open the Terminal application on macOS using the command line. This is useful for new coders learning to interact with the terminal.\nSOURCE: https://github.com/cline/cline/blob/main/docs/getting-started-new-coders/installing-dev-essentials.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ open -a Terminal\n```\n\n----------------------------------------\n\nTITLE: Example of URL Reference Usage in Markdown\nDESCRIPTION: Demonstrates a practical use case of referencing a URL to request parsing of a JSON response from an API.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nPlease parse the JSON response from @https://api.github.com/users/octocat\n```\n\n----------------------------------------\n\nTITLE: Markdown List of Popular URLs\nDESCRIPTION: A numbered list of 390 popular website URLs showing relative popularity rankings. Includes major platforms like Google, social media sites, news outlets, and various international domains.\nSOURCE: https://github.com/cline/cline/blob/main/webview-ui/src/components/mcp/RICH_MCP_TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. https://www.google.com\n2. https://www.blogger.com\n3. https://youtube.com\n[...387 more URLs...]\n390. https://walmart.com\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs all the necessary dependencies required for the Cline project. It is essential to run this command after cloning the repository to ensure that all required packages are available for development.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: Visualizing Memory Bank Structure with Mermaid\nDESCRIPTION: A flowchart diagram showing the hierarchy and relationships between core files in the Memory Bank. It illustrates how projectbrief.md serves as the foundation that feeds into other files, culminating in progress.md.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/raw-instructions/cline-memory-bank.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    PB[projectbrief.md] --> PC[productContext.md]\n    PB --> SP[systemPatterns.md]\n    PB --> TC[techContext.md]\n    \n    PC --> AC[activeContext.md]\n    SP --> AC\n    TC --> AC\n    \n    AC --> P[progress.md]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Diagnostic Reference Syntax in Markdown\nDESCRIPTION: Shows how to reference VSCode diagnostic information using the '@problems' keyword.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n@problems\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documentation Update Process with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the Memory Bank update process. It shows the sequence of reviewing all files, documenting current state, clarifying next steps, and updating .clinerules, all within a Process subgraph.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/raw-instructions/cline-memory-bank.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start[Update Process]\n    \n    subgraph Process\n        P1[Review ALL Files]\n        P2[Document Current State]\n        P3[Clarify Next Steps]\n        P4[Update .clinerules]\n        \n        P1 --> P2 --> P3 --> P4\n    end\n    \n    Start --> Process\n```\n\n----------------------------------------\n\nTITLE: Confidence Rating System\nDESCRIPTION: Implementation of a self-assessment system for maintaining quality throughout the development process.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nRate confidence (1-10) before saving files, after saving, after rejections, and before task completion\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Commit Reference Syntax in Markdown\nDESCRIPTION: Shows how to reference information about a specific Git commit using '@' followed by the commit hash.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n@commit_hash\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository with Git LFS\nDESCRIPTION: This command clones the Cline repository from GitHub, requiring Git LFS (Large File Storage) to handle large files. Git LFS ensures that large files, such as images and datasets, are properly managed during the cloning process.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Pause and Reflect Principle\nDESCRIPTION: Simple reminder to take time for consideration before acting on development tasks.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncount to 10\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository\nDESCRIPTION: Git command to clone the Cline repository, with a note about requiring git-lfs.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Project Structure Verification\nDESCRIPTION: Best practice for maintaining project integrity by verifying project files before making structural changes.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nCheck project files before suggesting structural or dependency changes\n```\n\n----------------------------------------\n\nTITLE: Installing Cline Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for both the Cline extension and the webview-gui. It ensures that all required packages are installed before running or debugging the project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install:all\n```\n\n----------------------------------------\n\nTITLE: User Interaction Expectations\nDESCRIPTION: Reminder about handling user interactions and maintaining clear communication.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nTHE HUMAN WILL GET ANGRY.\n```\n\n----------------------------------------\n\nTITLE: Format Code - npm\nDESCRIPTION: This command formats the codebase according to the project's style guide.  Running this before submitting a pull request ensures code consistency.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Formatting code\nDESCRIPTION: This command automatically formats the code according to the project's code style. It helps developers maintain consistent code formatting and improve readability.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Format Code with Prettier\nDESCRIPTION: This command automatically formats the codebase according to the project's coding style guidelines using Prettier. Running this command before submitting a pull request helps to maintain code consistency and readability, ensuring that the code adheres to the project's standards.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Auto-Format Code\nDESCRIPTION: This command automatically formats the code to meet the project's style guidelines. It should be run before submitting a pull request to ensure consistent formatting.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ja/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Opening the Cline Project in VSCode\nDESCRIPTION: This command opens the cline directory in VSCode, allowing developers to explore and modify the project's source code. It depends on VSCode being installed and accessible from the command line.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: New Task Creation with Context using new_task XML Tool\nDESCRIPTION: Example of starting a new task with predefined context using the new_task tool, including API endpoint information.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/cline-tools-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<new_task>\n<context>\nWe've completed the backend API with these endpoints:\n- GET /api/tasks\n- POST /api/tasks\n- PUT /api/tasks/:id\n- DELETE /api/tasks/:id\n\nNow we need to implement the React frontend.\n</context>\n</new_task>\n```\n\n----------------------------------------\n\nTITLE: Format Code (npm - auto fix)\nDESCRIPTION: This command automatically formats the code to match the project's style guide. It will fix the code automatically where possible.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ko/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Create Changeset\nDESCRIPTION: This command is used to create a changeset for UI changes, allowing for proper versioning and release management. The changeset captures the impact of the UI changes, including major, minor, or patch updates, ensuring that the changes are tracked and communicated effectively.\nSOURCE: https://github.com/cline/cline/blob/main/locales/ar-sa/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run changeset\n```\n\n----------------------------------------\n\nTITLE: Format Code Automatically\nDESCRIPTION: This command automatically formats the code according to the project's code style guidelines. It uses a code formatter to ensure consistency and readability. Run this before submitting a PR.\nSOURCE: https://github.com/cline/cline/blob/main/locales/de/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Example of Git Working Directory Reference Usage in Markdown\nDESCRIPTION: Shows a practical use case of referencing Git changes to request a summary of important changes for commit.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nReview the @git-changes and summarize the important changes that should be committed\n```\n\n----------------------------------------\n\nTITLE: Adding Cline as a Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the Cline extension as a dependency in your extension's package.json file to ensure it is activated before your extension.\nSOURCE: https://github.com/cline/cline/blob/main/src/exports/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensionDependencies\": [\n    \"saoudrizwan.claude-dev\"\n]\n```\n\n----------------------------------------\n\nTITLE: Run Tests Locally\nDESCRIPTION: Executes all tests locally to ensure the codebase functions as expected. This should be done before submitting a pull request.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Mention Syntax in Markdown\nDESCRIPTION: Shows the basic syntax for using mentions in Cline, which always start with the '@' symbol followed by a resource identifier.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@resource_identifier\n```\n\n----------------------------------------\n\nTITLE: Illustrating URL Reference Syntax in Markdown\nDESCRIPTION: Shows how to reference web page contents using '@' followed by the full URL.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n@https://example.com\n```\n\n----------------------------------------\n\nTITLE: Format Code (Check)\nDESCRIPTION: Formats the codebase to adhere to project styling guidelines. Ensures consistency across the project.\nSOURCE: https://github.com/cline/cline/blob/main/locales/zh-tw/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Example of Git Commit Reference Usage in Markdown\nDESCRIPTION: Illustrates a practical example of using a Git commit reference to request analysis of changes in a specific commit.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nAnalyze the commit @abcd123 and explain what changes were made\n```\n\n----------------------------------------\n\nTITLE: Example of Directory Reference Usage in Markdown\nDESCRIPTION: Provides a practical example of using a directory reference to inquire about available components in a specific directory.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nWhat components are available in the @/src/components/ directory?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Reference Syntax in Markdown\nDESCRIPTION: Illustrates how to reference directory contents using '@/' followed by the relative path of the directory with a trailing '/'.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n@/path/to/directory/\n```\n\n----------------------------------------\n\nTITLE: Opening Cline Project in VSCode\nDESCRIPTION: Command to open the cloned Cline project in Visual Studio Code.\nSOURCE: https://github.com/cline/cline/blob/main/locales/es/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Opening the Cline Project in VSCode\nDESCRIPTION: Command to open the cloned Cline project in Visual Studio Code editor.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Opening the Cline Project in VSCode\nDESCRIPTION: Command to open the cloned Cline project in Visual Studio Code for development.\nSOURCE: https://github.com/cline/cline/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode cline\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cline Repository using Git\nDESCRIPTION: Command to clone the Cline repository from GitHub. Requires git-lfs (Git Large File Storage) to be installed.\nSOURCE: https://github.com/cline/cline/blob/main/locales/pt-BR/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cline/cline.git\n```\n\n----------------------------------------\n\nTITLE: Example of Diagnostic Reference Usage in Markdown\nDESCRIPTION: Illustrates a practical example of using the diagnostic reference to request prioritization of errors in the workspace.\nSOURCE: https://github.com/cline/cline/blob/main/docs/tools/mentions-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nCheck @problems and tell me which errors I should prioritize fixing\n```\n\n----------------------------------------\n\nTITLE: Organizing Directory Structure for .clinerules Files - Example 1\nDESCRIPTION: This snippet demonstrates a simple directory structure for organizing .clinerules files, showing how to separate local and project-specific rules into different files within the .clinerules directory.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.clinerules/\n├── .local-clinerules\n└── .project-clinerules\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plan Mode Workflow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the Plan Mode workflow. It shows the process from starting with reading the Memory Bank files, checking if files are complete, and then either creating a plan or verifying context and developing a strategy.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/raw-instructions/cline-memory-bank.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start[Start] --> ReadFiles[Read Memory Bank]\n    ReadFiles --> CheckFiles{Files Complete?}\n    \n    CheckFiles -->|No| Plan[Create Plan]\n    Plan --> Document[Document in Chat]\n    \n    CheckFiles -->|Yes| Verify[Verify Context]\n    Verify --> Strategy[Develop Strategy]\n    Strategy --> Present[Present Approach]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Intelligence Learning Process with Mermaid\nDESCRIPTION: A flowchart diagram showing the learning process for project intelligence. It illustrates how patterns are discovered, validated with the user, documented in .clinerules, and then applied to improve future work.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/raw-instructions/cline-memory-bank.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start{Discover New Pattern}\n    \n    subgraph Learn [Learning Process]\n        D1[Identify Pattern]\n        D2[Validate with User]\n        D3[Document in .clinerules]\n    end\n    \n    subgraph Apply [Usage]\n        A1[Read .clinerules]\n        A2[Apply Learned Patterns]\n        A3[Improve Future Work]\n    end\n    \n    Start --> Learn\n    Learn --> Apply\n```\n\n----------------------------------------\n\nTITLE: Visualizing Act Mode Workflow with Mermaid\nDESCRIPTION: A flowchart diagram showing the Act Mode workflow. It depicts the process from checking the Memory Bank, updating documentation, updating .clinerules if needed, executing the task, and documenting changes.\nSOURCE: https://github.com/cline/cline/blob/main/docs/prompting/custom instructions library/raw-instructions/cline-memory-bank.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start[Start] --> Context[Check Memory Bank]\n    Context --> Update[Update Documentation]\n    Update --> Rules[Update .clinerules if needed]\n    Rules --> Execute[Execute Task]\n    Execute --> Document[Document Changes]\n```"
  }
]