[
  {
    "owner": "google-gemini",
    "repo": "gemini-image-editing-nextjs-quickstart",
    "content": "TITLE: Generating Images with Google Generative AI SDK in JavaScript\nDESCRIPTION: Example code showing how to use the Google Generative AI JavaScript SDK to generate images from text prompts using Gemini 2.0 Flash. The code demonstrates initializing the SDK, configuring the model to include image responses, and handling the response data to extract and save the generated image.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst fs = require(\"fs\");\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\nasync function generateImage() {\n  const contents =\n    \"Hi, can you create a 3d rendered image of a pig \" +\n    \"with wings and a top hat flying over a happy \" +\n    \"futuristic scifi city with lots of greenery?\";\n\n  // Set responseModalities to include \"Image\" so the model can generate\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-2.0-flash-exp\",\n    generationConfig: {\n      responseModalities: [\"Text\", \"Image\"]\n    }\n  });\n\n  try {\n    const response = await model.generateContent(contents);\n    for (const part of response.response.candidates[0].content.parts) {\n      // Based on the part type, either show the text or save the image\n      if (part.text) {\n        console.log(part.text);\n      } else if (part.inlineData) {\n        const imageData = part.inlineData.data;\n        const buffer = Buffer.from(imageData, \"base64\");\n        fs.writeFileSync(\"gemini-native-image.png\", buffer);\n        console.log(\"Image saved as gemini-native-image.png\");\n      }\n    }\n  } catch (error) {\n    console.error(\"Error generating content:\", error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: Commands to install project dependencies and start the Next.js development server. This allows developers to run the application locally for testing and development.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Local Development\nDESCRIPTION: Command to copy the example environment file. This is the first step in setting up the local development environment for the Gemini image editing application.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: Commands to build a Docker image for the application and run it as a container. The example shows how to pass the Gemini API key as an environment variable directly or through an environment file.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t nextjs-gemini-image-editing .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with API Key\nDESCRIPTION: Command to run the Docker container with the Gemini API key passed as an environment variable. This allows the containerized application to connect to the Gemini API.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:3000 -e GEMINI_API_KEY=your_google_api_key nextjs-gemini-image-editing\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Environment File\nDESCRIPTION: Alternative command to run the Docker container using an environment file that contains the Gemini API key. This approach is useful for managing multiple environment variables.\nSOURCE: https://github.com/google-gemini/gemini-image-editing-nextjs-quickstart/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Run container with env file\ndocker run -p 3000:3000 --env-file .env nextjs-gemini-image-editing\n```"
  }
]