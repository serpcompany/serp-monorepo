[
  {
    "owner": "resend",
    "repo": "react-email",
    "content": "TITLE: Rendering and Sending Email with AWS SES - TypeScript/React\nDESCRIPTION: Illustrates importing a React-based email template, converting it to an HTML string using @react-email/components, and configuring AWS SES parameters for sending the email. This code requires installation of @react-email/components and @aws-sdk/client-ses, and assumes valid AWS credentials and configuration for the SES region. The 'params' object sets the sender, recipients, email subject, and body, sending an HTML-formatted message to specified addresses.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/aws-ses.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SendEmailCommandInput } from \"@aws-sdk/client-ses\";\nimport { render } from '@react-email/components';\nimport { SES } from '@aws-sdk/client-ses';\nimport { Email } from './email';\n\nconst ses = new SES({ region: process.env.AWS_SES_REGION })\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst params: SendEmailCommandInput = {\n  Source: 'you@example.com',\n  Destination: {\n    ToAddresses: ['user@gmail.com'],\n  },\n  Message: {\n    Body: {\n      Html: {\n        Charset: 'UTF-8',\n        Data: emailHtml,\n      },\n    },\n    Subject: {\n      Charset: 'UTF-8',\n      Data: 'hello world',\n    },\n  },\n};\n\nawait ses.sendEmail(params);\n```\n\n----------------------------------------\n\nTITLE: Rendering and Sending Email using React Email and MailerSend\nDESCRIPTION: This TypeScript code demonstrates the process of rendering a React email component to an HTML string and sending it using the MailerSend SDK. It initializes MailerSend with an API key (from environment variables), defines sender and recipient details, constructs the email parameters including the rendered HTML, and sends the email asynchronously.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/mailersend.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from '@react-email/components';\nimport { MailerSend, EmailParams, Sender, Recipient } from \"mailersend\";\nimport { Email } from './email';\n\nconst mailerSend = new MailerSend({\n  apiKey: process.env.MAILERSEND_API_KEY || '',\n});\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst sentFrom = new Sender(\"you@yourdomain.com\", \"Your name\");\nconst recipients = [\n  new Recipient(\"your@client.com\", \"Your Client\")\n];\n\nconst emailParams = new EmailParams()\n  .setFrom(sentFrom)\n  .setTo(recipients)\n  .setSubject(\"This is a Subject\")\n  .setHtml(emailHtml)\n\nawait mailerSend.email.send(emailParams);\n```\n\n----------------------------------------\n\nTITLE: Rendering React Email and Sending via Postmark SDK (TypeScript)\nDESCRIPTION: Illustrates how to use the Postmark Node.js SDK to send an email created with React Email. It imports the 'render' function to convert the React 'Email' component into an HTML string. It then initializes the Postmark client using an API key (stored in environment variables), defines email parameters (sender, recipient, subject, HTML body), and calls the 'sendEmail' method to dispatch the email.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/postmark.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from '@react-email/components';\nimport postmark from 'postmark';\nimport { Email } from './email';\n\nconst client = new postmark.ServerClient(process.env.POSTMARK_API_KEY);\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst options = {\n  From: 'you@example.com',\n  To: 'user@gmail.com',\n  Subject: 'hello world',\n  HtmlBody: emailHtml,\n};\n\nawait client.sendEmail(options);\n```\n\n----------------------------------------\n\nTITLE: Creating a React Email Component (TSX)\nDESCRIPTION: Defines a basic email template as a React functional component using TSX syntax. It utilizes the `Html` and `Button` components from `@react-email/components` to structure the email content and includes a button linked to a URL passed via props. This component will be rendered into an HTML string before sending.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/plunk.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n\nexport default Email;\n```\n\n----------------------------------------\n\nTITLE: Converting React email component to HTML and sending via SendGrid SDK\nDESCRIPTION: Imports the 'render' function from '@react-email/components' to transform the React email component into static HTML. Sets the SendGrid API key, constructs an email object with sender, recipient, subject, and HTML body, then uses '@sendgrid/mail' to send the email. This snippet bridges React email templates with SendGrid's email delivery service.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/sendgrid.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from \"@react-email/components\";\nimport sendgrid from \"@sendgrid/mail\";\nimport { Email } from \"./email\";\n\nsendgrid.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst options = {\n  from: \"you@example.com\",\n  to: \"user@gmail.com\",\n  subject: \"hello world\",\n  html: emailHtml,\n};\n\nsendgrid.send(options);\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Scaleway SDK and React Email in TypeScript\nDESCRIPTION: Demonstrates the process of sending an email using the Scaleway SDK. It involves importing the React Email template (`Email`), rendering it to an HTML string using `render` from `@react-email/components`, configuring the Scaleway client (`createClient`) with credentials from environment variables (ACCESS_KEY, SECRET_KEY, PROJECT_ID), initializing the Transactional Email API, and finally calling `createEmail` with sender, recipient, subject, and the rendered HTML content.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/scaleway.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from \"@react-email/components\";\nimport { TransactionalEmail, createClient } from \"@scaleway/sdk\";\nimport { Email } from \"./email\";\n\nconst client = createClient({\n  accessKey: process.env.ACCESS_KEY,\n  secretKey: process.env.SECRET_KEY,\n  defaultProjectId: process.env.PROJECT_ID,\n  defaultRegion: \"fr-par\",\n  defaultZone: \"fr-par-1\",\n});\n\nconst transactionalEmailClient = new TransactionalEmail.v1alpha1.API(client);\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst sender = {\n  email: \"react-email@transactional.email.fr\",\n  subject: \"TEST\",\n  name: \"Team\",\n};\n\nconst userInvited = {\n  email: \"XXXX@scaleway.com\",\n  name: \"TEST\",\n  teamName: \"Team\",\n};\n\nconst userInvitedBy = {\n  email: \"XXXX@scaleway.com\",\n  name: \"TEST\",\n  teamName: \"Team\",\n};\n\ntransactionalEmailClient.createEmail({\n  from: {\n    email: sender.email,\n    name: sender.name,\n  },\n  to: [\n    {\n      email: userInvited.email,\n      name: userInvited.name,\n    },\n  ],\n  subject: sender.subject,\n  text: null,\n  html: emailHtml,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending an email with Resend and React Email template in TypeScript\nDESCRIPTION: Code that demonstrates how to use the Resend SDK to send an email with a React component. It initializes the Resend client with an API key, then sends an email with the React template, passing the URL prop.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/resend.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resend } from 'resend';\nimport { Email } from './email';\n\nconst resend = new Resend('re_123456789');\n\nawait resend.emails.send({\n  from: 'you@example.com',\n  to: 'user@gmail.com',\n  subject: 'hello world',\n  react: <Email url=\"https://example.com\" />,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting React Email to HTML String\nDESCRIPTION: Process for rendering a React email component to HTML. Uses the render function from @react-email/render along with pretty for formatting the output.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyTemplate } from './email';\nimport { render, pretty } from '@react-email/render';\n\nconst html = await pretty(await render(<MyTemplate />));\n\nconsole.log(html);\n```\n\n----------------------------------------\n\nTITLE: Using @react-email/html in a React Email Template\nDESCRIPTION: Sample React component demonstrating how to import and embed the Html component from @react-email/html within an email layout, including setting the language attribute and adding a styled Button. The Html component wraps the email content for consistent formatting across email clients.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/html/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@react-email/button\";\nimport { Html } from \"@react-email/html\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n        Click me\n      </Button>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering and Sending Email with Plunk SDK (TSX)\nDESCRIPTION: Demonstrates how to render the previously defined React email component (`Email`) into an HTML string using the `render` function from `@react-email/components`. It then initializes the Plunk Node.js SDK client using an API key stored in the `PLUNK_API_KEY` environment variable and sends the rendered HTML email using the `plunk.emails.send` method.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/plunk.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Plunk from \"@plunk/node\";\nimport { render } from \"@react-email/components\";\nimport { Email } from \"./email\";\n\nconst plunk = new Plunk(process.env.PLUNK_API_KEY);\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nplunk.emails.send({\n  to: \"hello@useplunk.com\",\n  subject: \"Hello world\",\n  body: emailHtml,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Section Component in React Email\nDESCRIPTION: Example of how to use the Section component in React Email templates. Demonstrates both basic usage with just a Text component and more complex formatting with nested Row and Column components.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/section.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Section, Column, Row, Text } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    {/* A simple `section` */}\n    <Section>\n      <Text>Hello World</Text>\n    </Section>\n\n    {/* Formatted with `rows` and `columns` */}\n     <Section>\n      <Row>\n        <Column>Column 1, Row 1</Column>\n        <Column>Column 2, Row 1</Column>\n      </Row>\n      <Row>\n        <Column>Column 1, Row 2</Column>\n        <Column>Column 2, Row 2</Column>\n      </Row>\n    </Section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template with React Email - TypeScript/React\nDESCRIPTION: Defines a reusable React component representing an HTML email template using @react-email/components. The component expects a 'url' prop, which is used as the destination for the embedded button. Requires React and @react-email/components installed, and can reside in a .jsx or .tsx file for rendering or compilation. Expects a 'url' string property as input and renders localized HTML output for email content.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/aws-ses.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template Component in React\nDESCRIPTION: This TypeScript React snippet shows how to define a simple functional component (`Email`) that serves as an email template. It uses components from `@react-email/components` (`Html`, `Button`) to structure the email content and accepts props, such as a URL for a clickable button, to make the template dynamic.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/mailersend.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Dependencies Shell\nDESCRIPTION: Installs the necessary project dependencies for the newly created React Email project. This command should be run in the root directory of the project after initialization. Requires Node.js and the corresponding package manager used for installation.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/automatic-setup.mdx#_snippet_1\n\nLANGUAGE: sh npm\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: sh yarn\nCODE:\n```\nyarn\n```\n\nLANGUAGE: sh pnpm\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using the Row Component in React Email (JSX)\nDESCRIPTION: Demonstrates importing `Row`, `Column`, and `Section` from `@react-email/components` and using them within a functional component (`Email`) to structure email content. Each `Row` component creates a distinct horizontal section, typically containing `Column` components for content.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/row.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Row, Column, Section } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Section>\n      <Row>\n        <Column>A</Column>\n      </Row>\n      <Row>\n        <Column>B</Column>\n      </Row>\n      <Row>\n        <Column>C</Column>\n      </Row>\n    </Section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Nodemailer\nDESCRIPTION: This code renders a React Email component to HTML and sends it using Nodemailer. It imports `render` from `@react-email/components`, Nodemailer, and the `Email` component.  It configures a Nodemailer transporter with SMTP settings, renders the email template with a URL, creates an email options object, and sends the email using `transporter.sendMail`. The `host`, `port`, `secure`, `auth.user`, and `auth.pass` configurations should be adjusted based on the SMTP provider.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/nodemailer.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from '@react-email/components';\nimport nodemailer from 'nodemailer';\nimport { Email } from './email';\n\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.forwardemail.net',\n  port: 465,\n  secure: true,\n  auth: {\n    user: 'my_user',\n    pass: 'my_password',\n  },\n});\n\nconst emailHtml = await render(<Email url=\"https://example.com\" />);\n\nconst options = {\n  from: 'you@example.com',\n  to: 'user@gmail.com',\n  subject: 'hello world',\n  html: emailHtml,\n};\n\nawait transporter.sendMail(options);\n```\n\n----------------------------------------\n\nTITLE: Using the Img component in React Email\nDESCRIPTION: This code snippet demonstrates how to use the `Img` component from `@react-email/img` to display an image in an email template. It imports the component and renders it with `src`, `alt`, `width`, and `height` props. The `src` prop specifies the image path, `alt` provides an alternative text, and `width` and `height` set the image dimensions in pixels.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/img/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Img } from \"@react-email/img\";\n\nconst Email = () => {\n  return <Img src=\"cat.jpg\" alt=\"Cat\" width=\"300\" height=\"300\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Example React Email with Tailwind Styling\nDESCRIPTION: A React component demonstrating how to wrap email content with Tailwind CSS using the @react-email/tailwind component. It illustrates configuration extension, applying custom colors, and rendering a button styled with Tailwind classes. Dependencies include React, @react-email/button, and @react-email/tailwind.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/tailwind/readme.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst Email = () => {\n  return (\n    <Tailwind\n      config={{\n        theme: {\n          extend: {\n            colors: {\n              \"custom-color\": \"#ff0000\",\n            },\n          },\n        },\n      }}\n    >\n      <Button\n        href=\"https://example.com\"\n        className=\"text-custom-color bg-white mx-auto\"\n      >\n        Click me\n      </Button>\n    </Tailwind>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using React Email Text component in JSX\nDESCRIPTION: Demonstrates how to import the `Text` component from the `@react-email/text` package and integrate it into a functional React component, typically used for creating an email template. The component renders simple text content provided as its children.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/text/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from \"@react-email/text\";\n\nconst Email = () => {\n  return <Text>Lorem ipsum</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SES and React Email Dependencies - shell\nDESCRIPTION: Demonstrates installing the @aws-sdk/client-ses and @react-email/components packages using the npm, yarn, and pnpm package managers. These dependencies are necessary to build, render, and send email templates with React Email and AWS SES SDK in a Node.js environment. No code parameters or inputs are required; choose the command corresponding to your project's package manager.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/aws-ses.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @aws-sdk/client-ses @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @aws-sdk/client-ses @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @aws-sdk/client-ses @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Button Component - React (JSX)\nDESCRIPTION: Demonstrates importing the Button component from @react-email/components and rendering it within a React functional component for an email template. The Button acts as a styled anchor ('a') tag and requires the href prop (target URL). Additional style props can be passed. Returns a React element rendering the button with custom text and styling. Requires @react-email/components to be installed in your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/button.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Button\n      href=\"https://example.com\"\n      style={{ color: \"#61dafb\", padding: \"10px 20px\" }}\n    >\n      Click me\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a React Email Component with React and TypeScript (TSX)\nDESCRIPTION: This TypeScript React (TSX) snippet defines a reusable email component named 'MyEmail'. It imports UI components from '@react-email/components', including Button and Html, and uses them to render a styled HTML email with a clickable button linking to 'https://example.com'. The component returns JSX encapsulated inside the Html wrapper for proper email formatting. It exports the component both as a named and default export for flexible usage.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/bun.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\nimport * as React from \"react\";\n\nexport const MyEmail = () => {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n\nexport default MyEmail;\n```\n\n----------------------------------------\n\nTITLE: Using the React Email Preview Component\nDESCRIPTION: This snippet demonstrates how to import and use the `<Preview>` component from `@react-email/components` in a React Email template. The text within the `<Preview>` tags will be used as the email's preview text.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/preview.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Preview } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Preview>Email preview text</Preview>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Code Block in React Email Component - JSX\nDESCRIPTION: Demonstrates how to import the CodeBlock component and a theme (dracula) from @react-email/code-block, then render a syntax-highlighted code block within a React functional email component. The code prop receives a JavaScript source string, with optional lineNumbers, theme, and language props for customization. This requires @react-email/code-block as a dependency, and the input JavaScript code can be any valid string to display. The rendered output appears as a styled, highlighted block in email-compatible HTML.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-block/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeBlock, dracula } from \"@react-email/code-block\";\n\nconst Email = () => {\n  const code = `export default async (req, res) => {\n  try {\n    const html = await renderAsync(\n      EmailTemplate({ firstName: 'John' })\n    );\n    return NextResponse.json({ html });\n  } catch (error) {\n    return NextResponse.json({ error });\n  }\n}`;\n\n  return (\n    <CodeBlock\n      code={code}\n      lineNumbers // add this so that there are line numbers beside each code line\n      theme={dracula}\n      language=\"javascript\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a basic email template with React Email\nDESCRIPTION: This code defines a simple React Email component named MyEmail that renders an HTML structure containing a styled button. It imports React and components from @react-email/components to create the email's layout and interactive elements.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/pnpm.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\nimport * as React from \"react\";\n\nexport const MyEmail = () => {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n\nexport default MyEmail;\n```\n\n----------------------------------------\n\nTITLE: Using the Hr Component in React Email (JSX)\nDESCRIPTION: Demonstrates importing and using the `Hr` component from `@react-email/hr` within a React functional component to render a horizontal rule divider in an email.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/hr/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Hr } from \"@react-email/hr\";\n\nconst Email = () => {\n  return <Hr />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a React Email Template Component\nDESCRIPTION: Example of building an email template using React components. Uses @react-email/components to create a structured email with text, horizontal rule, and a button.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button, Hr, Text } from \"@react-email/components\";\n\nexport function MyTemplate(props) {\n  return (\n    <Html lang=\"en\">\n      <Text>Some title</Text>\n      <Hr />\n      <Button href=\"https://example.com\">Click me</Button>\n    </Html>\n  );\n}\n\nexport default MyTemplate;\n```\n\n----------------------------------------\n\nTITLE: Creating an email template component with React and @react-email/components\nDESCRIPTION: Defines a React functional component named 'Email' that constructs an email layout using '@react-email/components' such as Html and Button. It receives props for dynamic content, like URL, and outputs a semantic email HTML structure, intended for rendering into static HTML for email delivery.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/sendgrid.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting React Email to Plain Text\nDESCRIPTION: Method to render a React email component as plain text using the plainText option. This ensures messages can be read by recipients who cannot view HTML emails.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyTemplate } from './email';\nimport { render } from '@react-email/render';\n\nconst text = await render(<MyTemplate />, {\n  plainText: true,\n});\n\nconsole.log(text);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React Email Button Component\nDESCRIPTION: Example of how to use a React Email Button component in a JSX template with custom styling.\nSOURCE: https://github.com/resend/react-email/blob/canary/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n      Click me\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an email template with React components in TypeScript\nDESCRIPTION: A TypeScript React component that defines an email template with a button. The component accepts a URL prop that will be used as the button's href attribute.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/resend.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n\nexport default Email;\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Row component in React Email\nDESCRIPTION: Example of using the @react-email/row component in a React email template, showing its relationship with Section and Column components to create a structured email layout.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/row/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Section } from \"@react-email/section\";\nimport { Row } from \"@react-email/row\";\nimport { Column } from \"@react-email/column\";\n\nconst Email = () => {\n  return (\n    <Section>\n      <Row>\n        <Column>A</Column>\n      </Row>\n      <Row>\n        <Column>B</Column>\n      </Row>\n      <Row>\n        <Column>C</Column>\n      </Row>\n    </Section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Markdown Component in React Email\nDESCRIPTION: This example demonstrates how to use the Markdown component within a React Email template. It imports the Markdown and Html components from the @react-email library and renders Markdown content with custom styles for headings and container. Two usage examples are given, one using the `children` prop as a string and the other demonstrating how custom styles are applied.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/markdown/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@react-email/markdown\";\nimport { Html } from \"@react-email/html\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\" dir=\"ltr\">\n      <Markdown\n        markdownCustomStyles={{\n          h1: { color: \"red\" },\n          h2: { color: \"blue\" },\n          codeInline: { background: \"grey\" },\n        }}\n        markdownContainerStyles={{\n          padding: \"12px\",\n          border: \"solid 1px black\",\n        }}\n      >{`# Hello, World!`}</Markdown>\n\n      {/* OR */}\n\n      <Markdown children={`# This is a ~~strikethrough~~`} />\n    </Html>\n  );\n\n```\n\n----------------------------------------\n\nTITLE: Create React Email Template - JSX\nDESCRIPTION: Creates a basic React Email template using JSX syntax. It imports components from @react-email/components and React, defining a functional component MyEmail which returns an HTML button linking to example.com. Located in packages/transactional/emails/MyEmail.tsx\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/npm.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\nimport * as React from \"react\";\n\nexport const MyEmail = () => {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n\nexport default MyEmail;\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component with npm - Shell\nDESCRIPTION: Installs the @react-email/components package, or the specific @react-email/button package, using npm. This command requires Node.js and npm to be installed. Execute in your project directory to add the necessary components for button usage in React email templates. The -E flag ensures exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/button.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/button -E\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind with Pixel Units (TypeScript)\nDESCRIPTION: Provides a sample TypeScript configuration (`tailwind.config.ts`) for the Tailwind component, specifically overriding the default `fontSize` and `spacing` scales to use pixel (`px`) units instead of `rem`. This configuration aims to improve compatibility with email clients that have limited support for `rem` units. It imports the `TailwindConfig` type from '@react-email/tailwind' for type checking.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/tailwind.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TailwindConfig } from \"@react-email/tailwind\";\n\nexport default {\n  theme: {\n    fontSize: {\n      xs: [\"12px\", { lineHeight: \"16px\" }],\n      sm: [\"14px\", { lineHeight: \"20px\" }],\n      base: [\"16px\", { lineHeight: \"24px\" }],\n      lg: [\"18px\", { lineHeight: \"28px\" }],\n      xl: [\"20px\", { lineHeight: \"28px\" }],\n      \"2xl\": [\"24px\", { lineHeight: \"32px\" }],\n      \"3xl\": [\"30px\", { lineHeight: \"36px\" }],\n      \"4xl\": [\"36px\", { lineHeight: \"36px\" }],\n      \"5xl\": [\"48px\", { lineHeight: \"1\" }],\n      \"6xl\": [\"60px\", { lineHeight: \"1\" }],\n      \"7xl\": [\"72px\", { lineHeight: \"1\" }],\n      \"8xl\": [\"96px\", { lineHeight: \"1\" }],\n      \"9xl\": [\"144px\", { lineHeight: \"1\" }],\n    },\n    spacing: {\n      px: \"1px\",\n      0: \"0\",\n      0.5: \"2px\",\n      1: \"4px\",\n      1.5: \"6px\",\n      2: \"8px\",\n      2.5: \"10px\",\n      3: \"12px\",\n      3.5: \"14px\",\n      4: \"16px\",\n      5: \"20px\",\n      6: \"24px\",\n      7: \"28px\",\n      8: \"32px\",\n      9: \"36px\",\n      10: \"40px\",\n      11: \"44px\",\n      12: \"48px\",\n      14: \"56px\",\n      16: \"64px\",\n      20: \"80px\",\n      24: \"96px\",\n      28: \"112px\",\n      32: \"128px\",\n      36: \"144px\",\n      40: \"160px\",\n      44: \"176px\",\n      48: \"192px\",\n      52: \"208px\",\n      56: \"224px\",\n      60: \"240px\",\n      64: \"256px\",\n      72: \"288px\",\n      80: \"320px\",\n      96: \"384px\",\n    },\n  },\n} satisfies TailwindConfig;\n```\n\n----------------------------------------\n\nTITLE: Installing Nodemailer and React Email Components\nDESCRIPTION: These commands install Nodemailer and the React Email components library using npm, yarn, and pnpm package managers. Nodemailer is used for sending emails, while React Email components provide pre-built React components for designing email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/nodemailer.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add nodemailer @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component with yarn - Shell\nDESCRIPTION: Adds the @react-email/components package, or specifically the @react-email/button, to your project dependencies using yarn. Requires yarn package manager to be installed. Use within the root of your project; includes the -E flag for version stability.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/button.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/button -E\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component in a React Email Template (JSX)\nDESCRIPTION: Demonstrates the basic usage of the `Button` component imported from `@react-email/button` within a React functional component designed for an email template. It shows how to render a button with a specific link (`href`) and apply inline styles. The text content 'Click me' is passed as children to the component.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/button/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@react-email/button\";\n\nconst Email = () => {\n  return (\n    <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n      Click me\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plunk and React Email Dependencies (Shell)\nDESCRIPTION: Installs the necessary Plunk Node.js SDK and React Email components packages using different package managers (npm, yarn, pnpm). These packages are required to build and send emails.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/plunk.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @plunk/node @react-email/components\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @plunk/node @react-email/components\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @plunk/node @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Integrating Column and Row Components in a React Email Template - JavaScript\nDESCRIPTION: Illustrates how to import the Column and Row components from @react-email/components and use them to structure an email template. This React component defines a simple layout with three columns inside a row, allowing distinct vertical sections in the rendered email. Requires installation of @react-email/components and assumes a React email rendering setup.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/column.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Column, Row } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Row>\n      <Column>A</Column>\n      <Column>B</Column>\n      <Column>C</Column>\n    </Row>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Font Component in React Email Template\nDESCRIPTION: Example of how to implement the Font component in a React Email template, including setting up web fonts with fallback options for email client compatibility.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/font.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Font, Head, Html } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <Font\n          fontFamily=\"Roboto\"\n          fallbackFontFamily=\"Verdana\"\n          webFont={{\n            url: \"https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2\",\n            format: \"woff2\",\n          }}\n          fontWeight={400}\n          fontStyle=\"normal\"\n        />\n      </Head>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for React Email and SendGrid SDK\nDESCRIPTION: Install the necessary NPM packages, @sendgrid/mail and @react-email/components, using npm, yarn, or pnpm. These dependencies are essential for email template creation and sending emails via SendGrid.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/sendgrid.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sendgrid/mail @react-email/components\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sendgrid/mail @react-email/components\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @sendgrid/mail @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Using Column component in React Email\nDESCRIPTION: This code demonstrates how to use the `Column` component from `@react-email/column` within an email template. It imports both `Row` and `Column` components and nests `Column` components inside a `Row` component to create a vertical layout. The example renders three columns labeled A, B, and C.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/column/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Row } from '@react-email/row';\nimport { Column } from '@react-email/column';\n\nconst Email = () => {\n  return(\n    <Row>\n      <Column>A<Column/>\n      <Column>B<Column/>\n      <Column>C<Column/>\n    </Row>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering React Component to HTML (jsx)\nDESCRIPTION: Imports the `render` function from `@react-email/render` and a custom React component (`MyTemplate`). It then calls `render` with an instance of the React component, passing props, to asynchronously generate an HTML string representing the email template.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/render/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyTemplate } from \"../components/MyTemplate\";\nimport { render } from \"@react-email/render\";\n\nconst html = await render(<MyTemplate firstName=\"Jim\" />);\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/components with NPM\nDESCRIPTION: Installs the @react-email/components package using the Node Package Manager (npm). The '-E' flag saves the exact version dependency in the package.json file.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/components/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email dependencies with pnpm\nDESCRIPTION: Installs react-email as a development dependency and @react-email/components, react, and react-dom as regular dependencies within the transactional workspace using pnpm. This ensures that React Email and its components are available for creating and rendering email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/pnpm.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-email -D -E\npnpm add @react-email/components react react-dom -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/column with npm\nDESCRIPTION: This command installs the @react-email/column component as a dependency in your project using npm. The `-E` flag ensures that the package version is saved exactly as specified.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/column/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/column -E\n```\n\n----------------------------------------\n\nTITLE: Defining PreviewProps for email templates\nDESCRIPTION: Illustrates how to define `PreviewProps` directly on the email component. These props are used when the email template is previewed, allowing specific data to be passed to the component for preview purposes. This enables developers to see how the email will look with sample data without needing to hardcode it.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/cli.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Email(props) {\n  return (\n    <div>\n      <a src={props.source}>click here if you want candy 👀</a>\n    </div>\n  );\n}\n\nEmail.PreviewProps = {\n  source: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Commands to start the React Email development server using different package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/manual-setup.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Using the Heading Component in React\nDESCRIPTION: Demonstrates how to import and use the Heading component in a React Email template. The component renders a heading element, and the `as` prop allows you to specify the heading level (h1, h2, etc.).\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/heading.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Heading as=\"h2\">Lorem ipsum</Heading>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Email Template in React\nDESCRIPTION: Example of a basic email template using React Email components. The template creates a button with custom styling that links to an example website.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/manual-setup.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\nimport * as React from \"react\";\n\nexport default function Email() {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Markdown Component in a React Email Template\nDESCRIPTION: Example of implementing the Markdown component in a React Email template with custom styles for different markdown elements and the container.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/markdown.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown, Html } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\" dir=\"ltr\">\n      <Markdown\n        markdownCustomStyles={{\n          h1: { color: \"red\" },\n          h2: { color: \"blue\" },\n          codeInline: { background: \"grey\" },\n        }}\n        markdownContainerStyles={{\n          padding: \"12px\",\n          border: \"solid 1px black\",\n        }}\n      >{`# Hello, World!`}</Markdown>\n\n      {/* OR */}\n\n      <Markdown children={`# This is a ~~strikethrough~~`} />\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using React Email Link Component in JSX\nDESCRIPTION: This snippet shows an example of how to use the `Link` component within a React Email template. It imports the `Link` component and uses it with the `href` prop to create a hyperlink. The `href` attribute specifies the URL the link will navigate to when clicked.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/link/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"@react-email/link\";\n\nconst Email = () => {\n  return <Link href=\"https://example.com\">Example</Link>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using yarn - Shell\nDESCRIPTION: This shell snippet demonstrates installing the @react-email/components or @react-email/container package using yarn with the exact version flag (-E). These commands will add the specified package to your dependencies, allowing for immediate import and use of the components in your codebase. No manual peer dependency installation is needed; yarn handles all required dependencies.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/container.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/container -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/components and @react-email/text via package managers\nDESCRIPTION: This snippet demonstrates how to install the @react-email/components package along with the @react-email/text package using npm, yarn, and pnpm, specifying version E. It ensures dependencies are correctly added to the project for React email template development.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/text.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm\ninstall @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/text -E\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/text -E\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/text -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using pnpm - Shell\nDESCRIPTION: This shell snippet illustrates how to add the @react-email/components or @react-email/container package to your project with pnpm, ensuring exact versioning with the -E flag. After running one of these commands, you will be able to import and use the Container component within your React project. pnpm efficiently installs all nested dependency trees and is an alternative package manager to npm and yarn.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/container.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/container -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using yarn - shell\nDESCRIPTION: Shows yarn commands for adding the full @react-email/components package or just the @react-email/column package to a project. The -E flag ensures exact version installation. This setup is necessary before importing and using the Column component in a React project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/column.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/column -E\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React Email Templates - JSX\nDESCRIPTION: This snippet demonstrates how to import and render the Link component from @react-email/components within a React functional component. It shows a simple use case where a hyperlink pointing to \"https://example.com\" is embedded inside an email template. The Link component is used to generate an anchor tag with its href pointing to the specified URL. This snippet assumes the component is installed and that React is properly configured for email rendering.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/link.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Link href=\"https://example.com\">Example</Link>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using pnpm - shell\nDESCRIPTION: Provides pnpm commands to install either the complete @react-email/components package or just the @react-email/column package. Uses the -E flag to lock to the exact version as specified. Required as a prerequisite to use Column and Row components in email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/column.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/column -E\n```\n\n----------------------------------------\n\nTITLE: React Email Head component usage example in JSX\nDESCRIPTION: Demonstrates how to import and incorporate the Head component within an email template in React. The example shows setting a custom email title inside the Head component's children, which manages document head elements such as title tags.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/head.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Head } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Head>\n      <title>My email title</title>\n    </Head>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installation commands for React Email Head component\nDESCRIPTION: Provides shell commands to install the @react-email/components package and its head sub-package using npm, yarn, and pnpm. These commands set up dependencies necessary for using the Head component in React email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/head.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm\ninstall @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/head -E\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/head -E\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/head -E\n```\n\n----------------------------------------\n\nTITLE: Code Block Theme Structure\nDESCRIPTION: Example of a theme object for the Code Block component, showing the structure with base styles and token-specific styling used with Prism.js tokenization.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-block.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"base\": {\n    \"color\": \"#f8f8f2\",\n    \"background\": \"#282a36\",\n    \"textShadow\": \"0 1px rgba(0, 0, 0, 0.3)\",\n    \"fontFamily\": \"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"wordWrap\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"4\",\n    \"OTabSize\": \"4\",\n    \"tabSize\": \"4\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"MsHyphens\": \"none\",\n    \"hyphens\": \"none\",\n    \"padding\": \"1em\",\n    \"margin\": \".5em 0\",\n    \"overflow\": \"auto\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"comment\": {\n    \"color\": \"#6272a4\"\n  },\n  \"prolog\": {\n    \"color\": \"#6272a4\"\n  },\n  \"doctype\": {\n    \"color\": \"#6272a4\"\n  },\n  \"cdata\": {\n    \"color\": \"#6272a4\"\n  },\n  \"punctuation\": {\n    \"color\": \"#f8f8f2\"\n  },\n  \"property\": {\n    \"color\": \"#ff79c6\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Heading Component in React Email (JSX)\nDESCRIPTION: Demonstrates importing the 'Heading' component from '@react-email/components' and using it within a functional React component to render an H1 heading for an email template. Requires React and the @react-email/components package to be installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/components/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Heading as=\"h1\">Lorem ipsum</Heading>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Email and Scaleway SDK\nDESCRIPTION: Commands to install the necessary `@react-email/components` and `@scaleway/sdk` packages using different package managers (npm, yarn, pnpm) required for building and sending emails.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/scaleway.mdx#_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install @scaleway/sdk @react-email/components\n```\n\nLANGUAGE: yarn\nCODE:\n```\nyarn add @scaleway/sdk @react-email/components\n```\n\nLANGUAGE: pnpm\nCODE:\n```\npnpm add @scaleway/sdk @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/row Component (Shell)\nDESCRIPTION: Provides commands to install the `@react-email/components` library or the individual `@react-email/row` package using npm, yarn, or pnpm package managers. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/row.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/row -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/row -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/row -E\n```\n\n----------------------------------------\n\nTITLE: Implementing and using the Hr component in a React Email template\nDESCRIPTION: Demonstrates how to import the Hr component from '@react-email/components' and embed it within an email JSX template. This setup allows for visual separation of content sections in an email. The sample includes a functional component returning the HR element and notes about styling as needed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/hr.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Hr } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Hr />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using @react-email/head in React JSX for Email Templates\nDESCRIPTION: This snippet demonstrates how to import the Head component from @react-email/head and include a <title> tag within an email template. It shows the core usage pattern for adding head elements to customize email metadata.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/head/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Head } from \"@react-email/head\";\n\nconst Email = () => {\n  return (\n    <Head>\n      <title>My email title</title>\n    </Head>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installation commands for React Email HR component via npm, yarn, and pnpm\nDESCRIPTION: Provides package manager commands to install the React Email HR component package globally or as an individual package. These commands prepare the dependencies needed to use the HR component in a React Email project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/hr.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm\n\n# Install the core react email components\nnpm install @react-email/components -E\n\n# Install the hr package separately\nnpm install @react-email/hr -E\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\n\n# Install the core react email components\nyarn add @react-email/components -E\n\n# Install the hr package separately\nyarn add @react-email/hr -E\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm\n\n# Install the core react email components\npnpm add @react-email/components -E\n\n# Install the hr package separately\npnpm add @react-email/hr -E\n```\n\n----------------------------------------\n\nTITLE: Using @react-email/container Component in React\nDESCRIPTION: This snippet shows the basic usage of the @react-email/container component in a React email template. It imports the Container and Button components and uses the Container component as a wrapper to center the content of the email. The example includes a button within the container with a specified style.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/container/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@react-email/button\";\nimport { Container } from \"@react-email/container\";\n\nconst Email = () => {\n  return (\n    <Container>\n      <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n        Click me\n      </Button>\n    </Container>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with npm/yarn/pnpm - Shell\nDESCRIPTION: This snippet provides multiple methods to install the @react-email/components or the individual @react-email/link package using different package managers: npm, yarn, and pnpm. It includes commands to add the entire component library or just the Link package as dependencies to a project. These commands must be run in the project root directory using the corresponding package manager. The '-E' flag enforces exact version installation.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/link.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/link -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/link -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/link -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Img with npm (sh)\nDESCRIPTION: This snippet provides the command to install the React Email components package or the individual `img` component using npm. It is required to use the `Img` component in your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/image.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/img -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with npm\nDESCRIPTION: Command for installing the entire react-email components package or the specific markdown component using npm.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/markdown.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/markdown -E\n```\n\n----------------------------------------\n\nTITLE: Installation using Yarn for @react-email/heading\nDESCRIPTION: This snippet demonstrates how to install the @react-email/heading package via Yarn package manager, including the specific installation flag.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/heading/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-email/heading -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/render with npm (sh)\nDESCRIPTION: Installs the `@react-email/render` package as an exact dependency using the npm package manager. This command adds the package to your project's dependencies and updates the package-lock.json file.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/render/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/render -E\n```\n\n----------------------------------------\n\nTITLE: Adding React Email Dev Script to package.json (JSON)\nDESCRIPTION: Adds a `dev` script to the `scripts` section of the `package.json` file within the `transactional` workspace. This script utilizes the `email dev` command provided by the `react-email` package to start the development server.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/yarn.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"email dev\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Tailwind Component in React Email (JSX)\nDESCRIPTION: Demonstrates how to import and utilize the <Tailwind> component from '@react-email/components' to wrap email content. It shows passing a custom Tailwind configuration object to the `config` prop to extend the default theme (e.g., adding a 'brand' color) and applying Tailwind utility classes directly to child components like <Button>.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/tailwind.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tailwind, Button } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Tailwind\n      config={{\n        theme: {\n          extend: {\n            colors: {\n              brand: \"#007291\",\n            },\n          },\n        },\n      }}\n    >\n      <Button\n        href=\"https://example.com\"\n        className=\"bg-brand px-3 py-2 font-medium leading-4 text-white\"\n      >\n        Click me\n      </Button>\n    </Tailwind>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Img with yarn (sh)\nDESCRIPTION: This snippet provides the command to install the React Email components package or the individual `img` component using yarn. It is required to use the `Img` component in your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/image.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/img -E\n```\n\n----------------------------------------\n\nTITLE: Adding Development Script to package.json\nDESCRIPTION: Configuration to add the development script to package.json for running the email development server.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/manual-setup.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"email dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Tailwind Component (Shell)\nDESCRIPTION: Provides commands to install the necessary React Email packages using different package managers (npm, yarn, pnpm). Users can choose to install the main '@react-email/components' package or the individual '@react-email/tailwind' package. The '-E' flag ensures an exact version match.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/tailwind.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/tailwind -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/tailwind -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/tailwind -E\n```\n\n----------------------------------------\n\nTITLE: Component Data Attributes and Props Reordering\nDESCRIPTION: This snippet demonstrates the addition of `data-id` attributes for components and reordering of props to enhance overrideability or control over default attributes, promoting easier testing and customization.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nMultiple components including `<Section>`, `<Column>`, `<Text>`, `<Button>` and others\n- Adding `data-id` attributes\n- Reordering props to prevent override of specific attributes\n- Requiring certain props like `align` and `width`\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with pnpm\nDESCRIPTION: Command for installing the entire react-email components package or the specific markdown component using pnpm.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/markdown.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/markdown -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-inline via yarn\nDESCRIPTION: Provides the yarn commands to install either the full `@react-email/components` package or the individual `@react-email/code-inline` component. The `-E` flag ensures an exact version dependency.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-inline.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/code-inline -E\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for React Email and Resend using package managers\nDESCRIPTION: Commands to install the required packages (@react-email/components and resend) using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/resend.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install resend @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add resend @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add resend @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-inline via npm\nDESCRIPTION: Provides the npm commands to install either the full `@react-email/components` package or the individual `@react-email/code-inline` component. The `-E` flag ensures an exact version dependency.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-inline.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/code-inline -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/button with Yarn\nDESCRIPTION: Installs the `@react-email/button` package using the Yarn package manager. The `-E` flag ensures an exact version is added to the project's dependencies, preventing unexpected updates from minor or patch releases.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/button/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/button -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/button with npm\nDESCRIPTION: Installs the `@react-email/button` package using the npm package manager. The `-E` flag ensures an exact version is saved to the project's `package.json`, promoting dependency stability.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/button/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/button -E\n```\n\n----------------------------------------\n\nTITLE: Running React Email Development Server Shell\nDESCRIPTION: Starts the local development server for React Email, allowing users to preview email templates and see live changes as they edit files in the `emails` folder. The server is typically accessible at `localhost:3000`. Requires dependencies to be installed beforehand.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/automatic-setup.mdx#_snippet_2\n\nLANGUAGE: sh npm\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh yarn\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh pnpm\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/html using yarn\nDESCRIPTION: Command to install the @react-email/html package using yarn with the '-E' flag to ensure exact version matching. This setup is necessary before importing and using the component in React email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/html/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-email/html -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-inline via pnpm\nDESCRIPTION: Provides the pnpm commands to install either the full `@react-email/components` package or the individual `@react-email/code-inline` component. The `-E` flag ensures an exact version dependency.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-inline.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/code-inline -E\n```\n\n----------------------------------------\n\nTITLE: Running React Email Development Server - Shell\nDESCRIPTION: Executes a shell command to start the React Email local development server, which watches email template files for changes and automatically rebuilds updated emails. The command `npx react-email dev` enables hot reloading and live preview during email template development. Requires prior setup of React Email project.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/react-email/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx react-email dev\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/body with Yarn\nDESCRIPTION: This command installs the @react-email/body component using Yarn. The -E flag ensures an exact version match, preventing unexpected behavior due to version updates. This command is executed from the command line.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/body/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/body -E\n```\n\n----------------------------------------\n\nTITLE: Installing Code Block Component\nDESCRIPTION: Code examples showing how to install the Code Block component using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-block.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/code-block -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/code-block -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/code-block -E\n```\n\n----------------------------------------\n\nTITLE: Adding a development script to package.json\nDESCRIPTION: This snippet adds a 'dev' script to the package.json file, which utilizes the 'email dev' command to start the React Email development server. This allows for live previewing and editing of email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/pnpm.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"email dev\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Dev Server for React Email Previews - Shell\nDESCRIPTION: This shell snippet shows the command to start the Bun development server within the 'transactional' workspace. Running 'bun dev' launches the email previews development server, allowing live reload of email components during development at the localhost URL.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/bun.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/body with NPM\nDESCRIPTION: This command installs the @react-email/body component using NPM. The -E flag ensures an exact version match, preventing unexpected behavior due to version updates. This command is executed from the command line.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/body/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/body -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with npm\nDESCRIPTION: This snippet shows how to install the `@react-email/components` package or the `@react-email/preview` package individually using npm. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/preview.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/preview -E\n```\n\n----------------------------------------\n\nTITLE: Starting the React Email Development Server with Yarn (Shell)\nDESCRIPTION: Executes the `dev` script (defined in `package.json`) within the `transactional` workspace using the `yarn dev` command. This starts the React Email development preview server, allowing developers to view and interact with their email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/yarn.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Nodemailer and React Email Components\nDESCRIPTION: These commands install Nodemailer and the React Email components library using npm, yarn, and pnpm package managers. Nodemailer is used for sending emails, while React Email components provide pre-built React components for designing email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/nodemailer.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add nodemailer @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-block with Yarn - Shell\nDESCRIPTION: Installs the @react-email/code-block package using Yarn with the exact version flag (-E). Requires Yarn installed. No parameters are necessary; simply run the command in your project directory. The package will be added to your dependencies, enabling use of the code-block component in your React Email project.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-block/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/code-block -E\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm using Bash\nDESCRIPTION: Installs all necessary project dependencies as defined in the package manifest files using the `pnpm install` command. This should be executed inside the root of the cloned react-email directory after enabling pnpm.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/1-setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing and using Heading component in React email template\nDESCRIPTION: This snippet shows how to import the Heading component from the @react-email/heading package and use it within a React functional component to render a heading, passing the 'as' prop to specify the heading level.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/heading/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Heading } from \"@react-email/heading\";\n\nconst Email = () => {\n  return <Heading as=\"h1\">Lorem ipsum</Heading>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Img with pnpm (sh)\nDESCRIPTION: This snippet provides the command to install the React Email components package or the individual `img` component using pnpm. It is required to use the `Img` component in your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/image.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/img -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-inline with NPM\nDESCRIPTION: This command installs the @react-email/code-inline package using NPM. The -E flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-inline/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/code-inline -E\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with npm or yarn - Shell\nDESCRIPTION: Launches the local development server for the React Email Starter project, using either npm or yarn as the task runner. Running either command will start the app on localhost (usually at port 3000), allowing for live preview of email templates in the browser. Ensure dependencies are installed before running these commands. No additional options or parameters are required.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/create-email/template/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing React Email Project Shell\nDESCRIPTION: Uses the `create-email` command-line tool to set up a new React Email project automatically. This command is the recommended way to get started and creates a starter folder (`react-email-starter`) with example templates. Requires a Node.js environment with a package manager (`npm`, `yarn`, or `pnpm`) installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/automatic-setup.mdx#_snippet_0\n\nLANGUAGE: sh npm\nCODE:\n```\nnpx create-email@latest\n```\n\nLANGUAGE: sh yarn\nCODE:\n```\nyarn create email\n```\n\nLANGUAGE: sh pnpm\nCODE:\n```\npnpm create email\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in React Email (jsx)\nDESCRIPTION: This snippet demonstrates how to import the `Img` component and use it within a React Email template. It shows how to set the image source (`src`), alternate text (`alt`), width, and height.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/image.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Img } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Img src=\"cat.jpg\" alt=\"Cat\" width=\"300\" height=\"300\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Font component with Yarn (sh)\nDESCRIPTION: This command installs the `@react-email/font` package as a dependency using the Yarn package manager. The `-E` flag ensures an exact version match is installed. It's a prerequisite for using the Font component in a React Email project.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/font/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/font -E\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn - Shell\nDESCRIPTION: Installs all necessary project dependencies required for the React Email Starter application using either npm or yarn. This snippet should be run from the project root directory and does not require additional configuration. Both commands achieve the same result; choose one based on your preferred package manager. The command downloads and sets up dependencies in node_modules as specified by package.json.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/create-email/template/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Dependencies with Bun - Shell\nDESCRIPTION: This snippet shows shell commands to install React Email and its related dependencies into the 'transactional' workspace using Bun's package manager. It installs 'react-email' as a dev dependency along with '@react-email/components', 'react', and 'react-dom' as regular dependencies using the exact version flag to ensure version consistency.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/bun.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun add react-email -D -E\nbun add @react-email/components react react-dom -E\n```\n\n----------------------------------------\n\nTITLE: Install Heading Component via yarn\nDESCRIPTION: Installs the @react-email/components package or the individual @react-email/heading package using yarn. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/heading.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/heading -E\n```\n\n----------------------------------------\n\nTITLE: Installation using npm for @react-email/heading\nDESCRIPTION: This snippet illustrates the installation of the @react-email/heading package through npm, specifying exact version installation.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/heading/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-email/heading -E\n```\n\n----------------------------------------\n\nTITLE: Initializing React Email Templates Folder Using Shell\nDESCRIPTION: This shell command uses 'npx' to execute the 'create-email' package, which scaffolds a new directory named 'emails' containing starter email templates. The command requires Node.js and npm installed locally. Its input is the command itself, and the output is the creation of the 'emails' folder with example templates, facilitating quick project setup.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/create-email/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-email\n```\n\n----------------------------------------\n\nTITLE: Conditional baseURL for static assets\nDESCRIPTION: This snippet shows how to create a base URL dynamically, depending on the environment. In production, it uses a CDN, whereas in development, it uses an empty string, assuming the assets are served locally. This is important for ensuring images and other assets load correctly both during development preview and in sent emails.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/cli.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst baseURL = process.env.NODE_ENV === \"production\" ? \"https://cdn.com\" : \"\";\n\nexport default function Email(props) {\n  return (\n    <div>\n      <img src={`${baseURL}/static/email-logo.png`} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Heading Component via pnpm\nDESCRIPTION: Installs the @react-email/components package or the individual @react-email/heading package using pnpm. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/heading.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/heading -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/img with Yarn\nDESCRIPTION: This command installs the @react-email/img component using yarn. The -E flag ensures an exact version is installed. This component is a dependency for rendering images in React Email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/img/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/img -E\n```\n\n----------------------------------------\n\nTITLE: CardGroup Component Layout with React Email Components\nDESCRIPTION: A JSX code snippet showing how to use the CardGroup and Card components to display a collection of React Email components. Each card contains a title, icon, and description with a link to the component's documentation page.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/snippets/next-steps.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup>\n  <Card title=\"Image\" icon='image' href=\"/components/image\">\n    Display an image in your email.\n  </Card>\n  <Card title=\"Link\" icon='link' href=\"/components/link\">\n    A hyperlink to web pages or anything else a URL can address.\n  </Card>\n  <Card title=\"Divider\" icon='horizontal-rule' href=\"/components/hr\">\n    Display a divider that separates content areas in your email.\n  </Card>\n  <Card\n    title=\"Preview\"\n    icon='magnifying-glass'\n    href=\"/components/preview\"\n  >\n    A preview text that will be displayed in the inbox of the recipient.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Add Email Development Script - JSON\nDESCRIPTION: Adds a 'dev' script to the package.json file that starts the React Email development server.  This allows for live previews and hot-reloading of email templates during development. Located in packages/transactional/package.json\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/npm.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"email dev\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using npm - shell\nDESCRIPTION: Demonstrates how to install the @react-email/components package or just the @react-email/column subpackage using npm in a terminal. Requires npm version compatible with the -E (exact version) flag. These commands provide the necessary dependency to use Column and Row components in React email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/column.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/column -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/img with NPM\nDESCRIPTION: This command installs the @react-email/img component using npm. The -E flag ensures an exact version is installed. This component is a dependency for rendering images in React Email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/img/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/img -E\n```\n\n----------------------------------------\n\nTITLE: Rendering Supported Email Clients Grid in JSX\nDESCRIPTION: This JSX snippet creates a responsive grid display for listing supported email clients. It uses a combination of CSS classes (likely Tailwind CSS) and inline styles to define the grid layout, border, padding, and text styling. Each grid item displays an email client icon and its name.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/snippets/support.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  role=\"list\"\n  className=\"grid py-2 list-none border rounded-xl text-sm\"\n  style={{\n    gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))',\n    columnGap: '0.5rem',\n    borderColor: 'rgb(30 41 59/1)'\n  }}\n>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/gmail.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"Gmail\"\n      className=\"mx-auto mb-1\"\n    />\n    Gmail\n  </div>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/apple-mail.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"Apple Mail\"\n      className=\"mx-auto mb-1\"\n    />\n    Apple Mail\n  </div>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/outlook.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"Outlook\"\n      className=\"mx-auto mb-1\"\n    />\n    Outlook\n  </div>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/yahoo-mail.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"Yahoo! Mail\"\n      className=\"mx-auto mb-1\"\n    />\n    Yahoo! Mail\n  </div>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/hey.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"HEY\"\n      className=\"mx-auto mb-1\"\n    />\n    HEY\n  </div>\n  <div className=\"text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden\">\n    <img\n      src=\"https://react.email/static/icons/superhuman.svg\"\n      width=\"56px\"\n      height=\"56px\"\n      alt=\"Superhuman\"\n      className=\"mx-auto mb-1\"\n    />\n    Superhuman\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking linting issues with BiomeJS using bash\nDESCRIPTION: Runs the lint command on the root workspace to identify any linting issues in the codebase using BiomeJS. It requires the pnpm package manager and expects to be executed from the project root. The output will report linting violations that need to be addressed before code submission.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/3-linting.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/column with yarn\nDESCRIPTION: This command installs the @react-email/column component as a dependency in your project using yarn. The `-E` flag ensures that the package version is saved exactly as specified.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/column/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/column -E\n```\n\n----------------------------------------\n\nTITLE: Exporting React Email Templates to HTML - Shell\nDESCRIPTION: Runs a shell command to generate plain HTML files from React Email templates, placing the output into an `out` directory. The command `npx react-email export` is used to create static HTML email versions ready for deployment or sending. Assumes that the React Email project and templates are set up.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/react-email/readme.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx react-email export\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Shows a file structure where directories prefixed with `_` are ignored by the preview server. This allows developers to organize their email projects with component directories or other utility directories that should not be displayed as individual email templates in the preview interface.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/cli.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmy-project\n├── emails\n│   ├── _components\n│   │   └── this-is-not-going-to-appear-in-the-sidebar.tsx\n│   ├── email.tsx\n│   └── static\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Email with JSON\nDESCRIPTION: Displays the Babel configuration file (.babelrc) as JSON, specifying the @babel/preset-typescript preset to enable TypeScript transpilation for React Email components.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/overview.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Email Development Server - npm\nDESCRIPTION: Starts the React Email development server using the 'dev' script defined in package.json. This command enables live previews and hot-reloading of email templates within the transactional workspace.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/npm.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/section using yarn command line\nDESCRIPTION: Command to add the @react-email/section component dependency to a project using the yarn package manager. This snippet requires yarn to be installed and uses the -E flag to save the exact version to package.json.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/section/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/section -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Dependencies\nDESCRIPTION: Commands to install required dependencies including react-email, @react-email/components, react, and react-dom using different package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/manual-setup.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-email -D -E\nnpm install @react-email/components react react-dom -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-email -D -E\nyarn add @react-email/components react react-dom -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-email -D -E\npnpm add @react-email/components react react-dom -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add react-email -D -E\nbun add @react-email/components react react-dom -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/row with yarn\nDESCRIPTION: Command to install the @react-email/row component using yarn package manager with the exact version flag (-E).\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/row/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/row -E\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Linker for React Email Compatibility (YAML)\nDESCRIPTION: Sets the `nodeLinker` in the `.yarnrc.yml` file to `node-modules`. This configuration is necessary because React Email currently only supports Yarn's `node-modules` or `pnpm` install modes when using Yarn modern.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/yarn.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnodeLinker: node-modules\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-block with npm - Shell\nDESCRIPTION: Installs the @react-email/code-block package using npm with the exact version flag (-E). Requires npm installed in your environment. No additional parameters are needed; this command updates package.json and downloads the code-block dependency for integration within React Email projects.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-block/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/code-block -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/markdown with npm\nDESCRIPTION: This command installs the @react-email/markdown component using npm. The -E flag ensures an exact version match, preventing unexpected updates.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/markdown/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/markdown -E\n```\n\n----------------------------------------\n\nTITLE: Using @react-email/section with React JSX for email template layout\nDESCRIPTION: Example React JSX demonstrating how to import and use the Section component from @react-email/section alongside Row, Column, and Text components from their respective packages. It shows a simple usage of Section with a single Text child, and a more complex layout using multiple Rows and Columns to organize content. This snippet requires a React environment configured for email template rendering, and the relevant @react-email packages installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/section/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Section } from '@react-email/section';\nimport { Column } from '@react-email/column';\nimport { Row } from '@react-email/row';\nimport { Text } from '@react-email/text';\n\nconst Email = () => {\n  return (\n    {/* A simple `section` */}\n    <Section>\n      <Text>Hello World</Text>\n    </Section>\n\n    {/* Formatted with `rows` and `columns` */}\n     <Section>\n      <Row>\n        <Column>Column 1, Row 1</Column>\n        <Column>Column 2, Row 1</Column>\n      </Row>\n      <Row>\n        <Column>Column 1, Row 2</Column>\n        <Column>Column 2, Row 2</Column>\n      </Row>\n    </Section>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Section Component\nDESCRIPTION: Commands to install the Section component using npm, yarn, or pnpm. Shows both how to install it as part of the full components package or as an individual package.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/section.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/section -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/section -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/section -E\n```\n\n----------------------------------------\n\nTITLE: Building a React Email Package with pnpm\nDESCRIPTION: Command to build a React Email package using pnpm. This runs tsup with specific settings to generate ESM and CJS versions along with type definitions from the src/index.ts entry point, while excluding React from the bundle.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/4-building.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with pnpm\nDESCRIPTION: This snippet shows how to install the `@react-email/components` package or the `@react-email/preview` package individually using pnpm. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/preview.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/preview -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components using npm\nDESCRIPTION: Command line instructions for installing React Email components package or the individual Font component using npm.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/font.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/font -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/section using npm command line\nDESCRIPTION: Command to install the @react-email/section component dependency using npm. It requires npm to be installed and the -E flag ensures the exact version is saved to package.json.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/section/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/section -E\n```\n\n----------------------------------------\n\nTITLE: Example Plain Text Output\nDESCRIPTION: The plain text output generated from rendering the example React email template. Shows simplified content with basic formatting and link URLs in brackets.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSome title\n\n---\n\nClick me [https://example.com]\n```\n\n----------------------------------------\n\nTITLE: Using React Email Font component in template (jsx)\nDESCRIPTION: This snippet shows how to integrate the `@react-email/font` component into a React Email template. It imports necessary components (`Html`, `Head`, `Font`) and uses `Font` within the `<Head>` tag to define a custom font family, fallback fonts, and a web font URL with format. This sets the font for the entire email.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/font/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html } from \"@react-email/html\";\nimport { Head } from \"@react-email/head\";\nimport { Font } from \"@react-email/font\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <Font\n          fontFamily=\"Roboto\"\n          fallbackFontFamily=\"Verdana\"\n          webFont={{\n            url: \"https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2\",\n            format: \"woff2\",\n          }}\n        />\n      </Head>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install React Email Dependencies - npm\nDESCRIPTION: Installs react-email and its components, react, and react-dom as dependencies within the transactional workspace. Uses the -D flag to save react-email as a dev dependency and the -E flag to install exact versions.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/npm.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-email -D -E\nnpm install @react-email/components react react-dom -E\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component with pnpm - Shell\nDESCRIPTION: Installs the @react-email/components package or the specific @react-email/button using pnpm. This requires pnpm to be globally installed. Use these commands to add the components to your project's dependencies, maintaining version consistency with -E.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/button.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/button -E\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode with pnpm\nDESCRIPTION: Initiates the test runner in watch mode. Vitest will run all tests initially and then monitor for file changes, automatically re-running only the tests affected by the modifications. This is useful for continuous testing during development.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/2-running-tests.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: This shell command installs all necessary project dependencies using PNPM package manager, which needs to be installed beforehand. It prepares the environment for development by downloading required libraries and packages listed in the project's package.json.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/snippets/localdev.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Babel preset-typescript using yarn\nDESCRIPTION: Provides the command to add @babel/preset-typescript as a development dependency with yarn, enabling Babel to process TypeScript in React Email projects.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/overview.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Fixing linting and formatting issues with BiomeJS using bash\nDESCRIPTION: Executes the lint:fix command to automatically apply linting and formatting corrections throughout the entire project using BiomeJS. This operation should be run from the project root and uses pnpm as the package manager. It ensures code adheres to the project's style and linting rules before code review or pull requests.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/3-linting.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint:fix\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components Using npm - Shell\nDESCRIPTION: This shell snippet shows how to install the @react-email/components package using npm with the exact version flag (-E), or the individual @react-email/container package if only the Container component is needed. The commands should be run in your project directory. Outputs package installations resolving all peer dependencies as needed with no further configuration required.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/container.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/container -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Link Component with npm\nDESCRIPTION: This snippet provides the command to install the `@react-email/link` component using npm. It's a command-line instruction for adding the component to the project's dependencies. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/link/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/link -E\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server (Shell)\nDESCRIPTION: This command starts the Mintlify development server for previewing the documentation.  It uses `pnpm` to execute the `dev` script within the `apps/docs` directory. This allows developers to view changes in real-time as they write and edit documentation.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/5-writing-docs.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with Package Managers\nDESCRIPTION: Code snippets showing how to install React Email components using yarn, npm, or pnpm package managers with the exact version flag.\nSOURCE: https://github.com/resend/react-email/blob/canary/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @react-email/components -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with yarn\nDESCRIPTION: Command for installing the entire react-email components package or the specific markdown component using yarn.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/markdown.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/markdown -E\n```\n\n----------------------------------------\n\nTITLE: Installing Nodemailer and React Email Components\nDESCRIPTION: These commands install Nodemailer and the React Email components library using npm, yarn, and pnpm package managers. Nodemailer is used for sending emails, while React Email components provide pre-built React components for designing email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/nodemailer.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install nodemailer @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server for React Email\nDESCRIPTION: Command to start the Next.js development server using pnpm package manager. This will launch the React Email application locally for development.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components\nDESCRIPTION: Instructions to install the `@react-email/components` package or the individual `@react-email/html` package using npm, yarn, or pnpm.  The `-E` flag ensures the exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/html.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/html -E\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/html -E\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/html -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Text component using Yarn\nDESCRIPTION: Installs the `@react-email/text` package using the Yarn package manager. The `-E` flag ensures that the exact version specified in `package.json` (or the latest matching version) is added to the project's dependencies. This requires Yarn to be installed and accessible in the command line.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/text/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/text -E\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Email Template (TypeScript)\nDESCRIPTION: Defines a simple React functional component named 'Email' in a TypeScript file (.tsx). It utilizes the 'Html' and 'Button' components from '@react-email/components' to structure the email content. The component accepts a 'url' prop to dynamically set the button's link.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/postmark.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/html using npm\nDESCRIPTION: Command to install the @react-email/html package using npm with the '-E' flag to ensure exact version matching. This allows integrating the component into a React project for email rendering.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/html/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-email/html -E\n```\n\n----------------------------------------\n\nTITLE: Running Tailwind Benchmarks using tsup and Node.js (Shell)\nDESCRIPTION: Shell command demonstrating how to run a specific benchmark (`with-vs-without`). First, it compiles the TypeScript source files using `tsup` via `pnpm compile`, placing the output in the `./dist` directory. Then, it executes the compiled JavaScript benchmark file using Node.js.\nSOURCE: https://github.com/resend/react-email/blob/canary/benchmarks/tailwind-component/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm compile && node ./dist/benchmark-with-vs-without.js\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/render with Yarn (sh)\nDESCRIPTION: Installs the `@react-email/render` package as an exact dependency using the Yarn package manager. This command adds the package to your project's dependencies and updates the lock file.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/render/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/render -E\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing npm\nDESCRIPTION: Commands to create a new project directory called 'react-email-starter' and initialize a new npm project within it.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/manual-setup.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir react-email-starter\ncd react-email-starter\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Cloning the Resend React Email GitHub Repository\nDESCRIPTION: This shell script snippet clones the Resend React Email project repository from GitHub to the local machine. It requires Git to be installed and accessible from the command line. The output is a local copy of the repository for development or exploration.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/snippets/localdev.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/resend/react-email.git\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/components with Yarn\nDESCRIPTION: Installs the @react-email/components package using the Yarn package manager. The '-E' flag ensures that an exact version of the package is added to the dependencies.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/components/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n```\n\n----------------------------------------\n\nTITLE: Static file usage in Email Template\nDESCRIPTION: Demonstrates how to reference static files (e.g., images) within an email template using the `/static` directory during development.  It also highlights that these images are not automatically hosted for sending emails and suggests a conditional approach using `process.env.NODE_ENV` to differentiate between development and production URLs.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/cli.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Email(props) {\n  return (\n    <div>\n      <img src=\"/static/email-logo.png\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Text component using NPM\nDESCRIPTION: Installs the `@react-email/text` package using the NPM package manager. The `-E` flag adds the exact version of the package to the `dependencies` in `package.json`. This command requires NPM to be installed and available in the system's PATH.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/text/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/text -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Font component with npm (sh)\nDESCRIPTION: This command installs the `@react-email/font` package as a dependency using the npm package manager. The `-E` flag ensures an exact version match is installed. It's a prerequisite for using the Font component in a React Email project.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/font/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/font -E\n```\n\n----------------------------------------\n\nTITLE: Using Email with PreviewProps\nDESCRIPTION: Shows how the `PreviewProps` are used to render the email component during preview. It demonstrates how the email component can be imported and rendered with the `PreviewProps` spread as props, effectively simulating the data that will be used during the actual email rendering process.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/cli.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Email from \"./path-to-my-email\";\n\n<Email {...Email.PreviewProps} />;\n```\n\n----------------------------------------\n\nTITLE: Component Version Update and Compatibility Fixes\nDESCRIPTION: This section describes updates to various React Email components, ensuring correct esm type exports, version synchronization, and compatibility fixes. It also notes reordering props and adding `data-id` attributes for testing or identification purposes.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nComponents `0.0.13`\n- Fix esm exports\n- Update individual component versions\n\nBody `0.0.7` - Fix esm exports\nButton, Column, Container, Head, Heading, Hr, Html, Img, Link, Text, Row, Section, Preview, Render etc.\n- Reordering props for override control\n- Adding `data-id`\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Link Component with Yarn\nDESCRIPTION: This snippet demonstrates how to install the `@react-email/link` component using yarn. It's a command-line instruction for adding the component to the project's dependencies. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/link/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/link -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/markdown with yarn\nDESCRIPTION: This command installs the @react-email/markdown component using yarn. The -E flag ensures an exact version match, preventing unexpected updates.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/markdown/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/markdown -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Dependencies in Yarn Workspace (Shell)\nDESCRIPTION: Installs `react-email` as a dev dependency (`-D`) and `@react-email/components`, `react`, and `react-dom` as regular dependencies within the `transactional` workspace using the Yarn package manager. The `-E` flag ensures exact versions are installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/yarn.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-email -D -E\nyarn add @react-email/components react react-dom -E\n```\n\n----------------------------------------\n\nTITLE: Using @react-email/body Component in React\nDESCRIPTION: This code snippet demonstrates how to use the @react-email/body component within a React email template. It imports necessary components from @react-email, including Html, Body, Section, and Column. The Body component wraps the email content and allows for styling, such as setting the background color.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/body/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html } from \"@react-email/html\";\nimport { Body } from \"@react-email/body\";\nimport { Section } from \"@react-email/section\";\nimport { Column } from \"@react-email/column\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\">\n      <Body style={{ backgroundColor: \"#61dafb\" }}>\n        <Section>\n          <Column style={{ width: \"50%\" }}>{/* First column */}</Column>\n          <Column style={{ width: \"50%\" }}>{/* Second column */}</Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building All react-email Packages using Bash\nDESCRIPTION: Builds all individual packages within the react-email monorepo using the `pnpm build` command. This is a crucial step before development, as packages often depend on each other, and pre-building ensures these dependencies are resolved correctly.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/1-setup.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/render with npm, yarn, or pnpm\nDESCRIPTION: Commands to install the @react-email/render package using different package managers. Each command uses the exact version flag (-E) to ensure consistency.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/render -E\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/render -E\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/render -E\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm via corepack using Bash\nDESCRIPTION: Enables Node.js corepack and prepares the latest version of pnpm for activation within the cloned react-email project directory. Corepack manages package manager versions, ensuring the correct pnpm version is used.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/1-setup.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\ncorepack prepare pnpm@latest --activate\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom-Named React Email Templates Folder Using Shell\nDESCRIPTION: This shell command extends the basic initialization by allowing users to specify a custom folder name (e.g., 'foo') where the email templates will be generated. Like the default command, it depends on Node.js and npm with 'npx' for execution. The input is the custom folder name argument, resulting in a directory named accordingly containing React email template starter files.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/create-email/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-email foo\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Email Component with React Email (JSX)\nDESCRIPTION: Defines a basic React functional component `MyEmail` using elements (`Html`, `Button`) imported from `@react-email/components`. This component represents a simple email structure with a styled button and is intended to be placed within the `emails` directory of the `transactional` workspace.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/yarn.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\nimport * as React from \"react\";\n\nexport const MyEmail = () => {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n\nexport default MyEmail;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Tailwind Component Benchmarks\nDESCRIPTION: Illustrates the file and folder layout for the benchmark project. It includes source files (`src`) containing individual benchmarks (`benchmark-*.ts`), email examples (`emails`), a utility for flamegraph generation (`tailwind-render.ts`), package configuration (`package.json`), Tailwind configuration (`tailwind.config.js`), and TypeScript configuration (`tsconfig.json`).\nSOURCE: https://github.com/resend/react-email/blob/canary/benchmarks/tailwind-component/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── package.json\n├── src\n|  ├── emails\n|  ├── benchmark-0.0.12-vs-local-version.ts\n|  ├── benchmark-with-vs-without.ts\n|  └── tailwind-render.ts\n├── tailwind.config.js\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/hr with Yarn (Shell)\nDESCRIPTION: Installs the `@react-email/hr` package as an exact dependency using the Yarn package manager.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/hr/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/hr -E\n```\n\n----------------------------------------\n\nTITLE: React Email Component Updates and Versioning\nDESCRIPTION: This section traces the evolution of the main React Email package, including version upgrades, bug fixes, and feature additions such as static file handling, render improvements, and directory structures. These snippets illustrate ongoing maintenance and enhancement of email rendering capabilities.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact Email `1.10.0`\n- Use `tree-cli` to fix proxy issues\n- Fix jsx: 'preserve' export issues\n- Improved error messages\n\ncreate-email `0.0.19`\n- Use `tree-cli`\n- Updated react-email version\n\nReact Email `1.9.1`\n- Upgraded client version\n\nReact Email `1.9.0`\n- Adjusts static file handling\n- Throws error if `emails` folder missing\n- Removed unused scripts\n\nReact Email `1.6.0`\n- Detects package manager\n\nReact Email `1.5.2`\n- Fixes glob pattern\n\nReact Email `1.5.1`\n- Path separator split\n\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/code-inline with Yarn\nDESCRIPTION: This command installs the @react-email/code-inline package using Yarn. The -E flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-inline/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/code-inline -E\n```\n\n----------------------------------------\n\nTITLE: Code Block Component Implementation\nDESCRIPTION: This snippet introduces a code block component using `prismjs`, providing syntax-highlighted code snippets within emails. It exports themes and styles relevant for consistent code display in email-rendering contexts.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nCode-block `0.0.1`\n- Adds a `<CodeBlock>` component\n- Uses a modified `prismjs` for syntax highlighting\n- Imports themes for styling code blocks\n```\n\n----------------------------------------\n\nTITLE: Cloning the react-email Repository using Bash\nDESCRIPTION: Clones the official react-email repository from GitHub using the `git clone` command. This is the initial step required to obtain the project source code locally for development.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/1-setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/resend/react-email\n```\n\n----------------------------------------\n\nTITLE: Adding Development Script to package.json in Bun Workspace - JSON\nDESCRIPTION: This snippet adds a 'dev' script entry to the package.json of the 'transactional' workspace, enabling the use of the 'email dev' command to start the email development environment. It assumes the presence of other standard package.json configuration and focuses solely on scripting for development startup.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/bun.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"email dev\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using CodeInline component in React Email\nDESCRIPTION: This code demonstrates how to import and use the CodeInline component from @react-email/code-inline within a React Email template. It renders the text \"@react-email/code-inline\" as inline code.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-inline/readme.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeInline } from \"@react-email/code-inline\";\n\nconst Email = () => {\n  return <CodeInline>@react-email/code-inline</CodeInline>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template with React Email Components\nDESCRIPTION: This code defines a React Email component. It imports React and the Html and Button components from `@react-email/components`. The `Email` component takes a `url` prop and renders a button with the provided URL within an HTML document. This component serves as the email's content.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/nodemailer.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Email Template in TSX\nDESCRIPTION: Defines a simple functional React component named `Email` using the `Html` and `Button` components from `@react-email/components`. This component serves as the email template and accepts a `url` prop to be used in the button's link.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/scaleway.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Html, Button } from \"@react-email/components\";\n\nexport function Email(props) {\n  const { url } = props;\n\n  return (\n    <Html lang=\"en\">\n      <Button href={url}>Click me</Button>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Prism.js-Inspired Theme for Code Blocks - JSON\nDESCRIPTION: Illustrates how to define a custom JSON theme object for use with the CodeBlock component, adhering to Prism.js token conventions. Each key represents a syntax token or base properties, with styles specified as key-value pairs. The 'base' property styles the wrapping <pre> element, while other keys map to code tokens. This is used by passing the theme as a prop to the CodeBlock component, with customization for background, colors, and more. Dependencies include a supporting theme prop in the CodeBlock component and knowledge of Prism.js token structure.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/code-block/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"base\": {\n    \"color\": \"#f8f8f2\",\n    \"background\": \"#282a36\",\n    \"textShadow\": \"0 1px rgba(0, 0, 0, 0.3)\",\n    \"fontFamily\": \"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"wordWrap\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"4\",\n    \"OTabSize\": \"4\",\n    \"tabSize\": \"4\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"MsHyphens\": \"none\",\n    \"hyphens\": \"none\",\n    \"padding\": \"1em\",\n    \"margin\": \".5em 0\",\n    \"overflow\": \"auto\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"comment\": {\n    \"color\": \"#6272a4\"\n  },\n  \"prolog\": {\n    \"color\": \"#6272a4\"\n  },\n  \"doctype\": {\n    \"color\": \"#6272a4\"\n  },\n  \"cdata\": {\n    \"color\": \"#6272a4\"\n  },\n  \"punctuation\": {\n    \"color\": \"#f8f8f2\"\n  },\n  \"property\": {\n    \"color\": \"#ff79c6\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Integration and Updates\nDESCRIPTION: This snippet details the Tailwind CSS package updates, including performance improvements, fixes for media queries and Safari-specific issues, and structural changes like Head component placement. These enhancements aim at better styling performance and compatibility in email templates.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTailwind `0.0.13`\n- Performance improvements\n- Fix media query loading\n- Safari regex fix\n- Head placement change\n- Fix component children handling\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the CodeInline Component in React Email (JSX)\nDESCRIPTION: Demonstrates how to import and use the `CodeInline` component from `@react-email/code-inline` within a React functional component (`Email`). It wraps the text `@react-email/code-inline` to render it as inline code in the email template.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-inline.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeInline } from \"@react-email/code-inline\";\n\nconst Email = () => {\n    return <CodeInline>@react-email/code-inline</CodeInline>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components with Yarn\nDESCRIPTION: This snippet shows how to install the `@react-email/components` package or the `@react-email/preview` package individually using Yarn. The `-E` flag ensures an exact version is installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/preview.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/preview -E\n```\n\n----------------------------------------\n\nTITLE: Initializing React Email Project - Shell\nDESCRIPTION: Runs a shell command to scaffold a new React Email project. The command `npx create-email` creates a folder named `emails` containing starter email template files, helping users quickly begin developing email content. Requires Node.js and npm/npx installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/react-email/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-email\n```\n\n----------------------------------------\n\nTITLE: Example Generated HTML Output\nDESCRIPTION: The HTML output generated from rendering the example React email template. Includes responsive design elements and MSO conditional comments for Outlook compatibility.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/utilities/render.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html lang=\"en\">\n  <p style=\"font-size:14px;line-height:24px;margin:16px 0\">Some title</p>\n  <hr style=\"width:100%;border:none;border-top:1px solid #eaeaea\" />\n  <a href=\"https://example.com\" target=\"_blank\" style=\"line-height:100%;text-decoration:none;display:inline-block;max-width:100%;padding:0px 0px\">\n    <span>\n      <!--[if mso]>\n        <i style=\"letter-spacing: undefinedpx;mso-font-width:-100%;mso-text-raise:0\" hidden>&nbsp;</i>\n      <![endif]-->\n    </span>\n    <span style=\"max-width:100%;display:inline-block;line-height:120%;text-decoration:none;text-transform:none;mso-padding-alt:0px;mso-text-raise:0\">Click me</span>\n    <span>\n      <!--[if mso]>\n        <i style=\"letter-spacing: undefinedpx;mso-font-width:-100%\" hidden>&nbsp;</i>\n      <![endif]-->\n    </span>\n  </a>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/container with npm\nDESCRIPTION: This code installs the @react-email/container component via npm. The `-E` flag ensures the exact version is installed. The component provides a layout element for centering email content, contributing to responsive design and consistent presentation across various email clients.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/container/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/container -E\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Email and MailerSend\nDESCRIPTION: These commands demonstrate how to install the required Node.js packages for building and sending emails using React Email and MailerSend. They include the MailerSend Node.js SDK and the @react-email/components library, showing options for npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/mailersend.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install mailersend @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add mailersend @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add mailersend @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/container with Yarn\nDESCRIPTION: This snippet demonstrates how to install the @react-email/container component using the yarn package manager. It adds the package as a project dependency and specifies an exact version using the -E flag. The component is a layout element used to center email content, making the email design responsive.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/container/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/container -E\n```\n\n----------------------------------------\n\nTITLE: Handling Static Files and Directory Structure\nDESCRIPTION: This snippet details strategies for static assets management, including moving assets to a static folder, enforcing folder structures, and handling static files correctly in the context of email rendering, with specific logic for Next.js support.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/changelog.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact Email `1.9.0`\n- Change static file handling to root directory\n- Error if `emails` folder missing\n- Remove unused scripts\n\n```\n\n----------------------------------------\n\nTITLE: Importing the Text component from @react-email/components in React\nDESCRIPTION: This snippet shows how to import the 'Text' component from '@react-email/components' into a React email template. The component is used to render styled block of text within the email body, enabling easy inclusion of textual content.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/text.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Text } from \"@react-email/components\";\n\nconst Email = () => {\n  return <Text>Lorem ipsum</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Once with pnpm\nDESCRIPTION: Executes the entire test suite a single time. When run from the project root, it leverages Turborepo to run tests for all packages. If executed within a specific package's directory, it runs tests only for that package.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/contributing/development-workflow/2-running-tests.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Using the Code Block Component\nDESCRIPTION: Example demonstrating how to implement the Code Block component in a React Email template with the dracula theme and JavaScript syntax highlighting.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/code-block.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeBlock, dracula } from '@react-email/code-block';\n\nconst Email = () => {\n  const code = `export default async (req, res) => {\n  try {\n    const html = await renderAsync(\n      EmailTemplate({ firstName: 'John' })\n    );\n    return NextResponse.json({ html });\n  } catch (error) {\n    return NextResponse.json({ error });\n  }\n}`;\n\n  return (<CodeBlock\n    code={code}\n    lineNumbers // add this so that there are line numbers beside each code line\n    theme={dracula}\n    language=\"javascript\"\n  />);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Container and Button Components in a React Email Template - JSX\nDESCRIPTION: This React JSX snippet demonstrates how to import and use the Container and Button components from the @react-email/components package. The example defines an Email functional component that wraps a styled Button inside a Container for layout purposes. Prerequisites include having the specified package installed, and the snippet expects you to use it within a React-based (or Next.js) email template environment. The Container centers its children horizontally, and the Button component is styled with a custom color and a link target.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/container.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container, Button } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Container>\n      <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n        Click me\n      </Button>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email and Postmark Dependencies (npm, yarn, pnpm)\nDESCRIPTION: Provides commands to install the required packages '@react-email/components' for building email templates and 'postmark' for interacting with the Postmark API. Examples are shown for npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/postmark.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install postmark @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add postmark @react-email/components\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add postmark @react-email/components\n```\n\n----------------------------------------\n\nTITLE: Using HTML Component in React Email\nDESCRIPTION: Example of using the `<Html>` component from `@react-email/components` within a React Email template. It demonstrates setting the `lang` and `dir` props and including a `<Button>` component with inline styles.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/html.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Button } from \"@react-email/components\";\n\nconst Email = () => {\n  return (\n    <Html lang=\"en\" dir=\"ltr\">\n      <Button href=\"https://example.com\" style={{ color: \"#61dafb\" }}>\n        Click me\n      </Button>\n    </Html>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with PNPM\nDESCRIPTION: This command starts the local development server and watches for code changes, facilitating real-time testing and development. It depends on the project having a 'dev' script defined in package.json and PNPM being installed.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/snippets/localdev.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the React Email development server\nDESCRIPTION: This command starts the React Email development server, enabling live previews of email templates. It allows developers to view and interact with their email designs in real-time during development.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/getting-started/monorepo-setup/pnpm.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Babel preset-typescript using pnpm\nDESCRIPTION: Provides the command to add @babel/preset-typescript as a development dependency using pnpm, supporting TypeScript compilation for React Email in Node.js applications.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/overview.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Install Heading Component via npm\nDESCRIPTION: Installs the @react-email/components package or the individual @react-email/heading package using npm. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/heading.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/components -E\n\n# or get the individual package\n\nnpm install @react-email/heading -E\n```\n\n----------------------------------------\n\nTITLE: Installing Babel preset-typescript using npm\nDESCRIPTION: Provides the command to install @babel/preset-typescript as a development dependency using npm for NodeJS projects supporting React Email integration.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/integrations/overview.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components using pnpm\nDESCRIPTION: Command line instructions for installing React Email components package or the individual Font component using pnpm.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/font.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @react-email/components -E\n\n# or get the individual package\n\npnpm add @react-email/font -E\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/row with npm\nDESCRIPTION: Command to install the @react-email/row component using npm package manager with the exact version flag (-E).\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/row/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/row -E\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components using yarn\nDESCRIPTION: Command line instructions for installing React Email components package or the individual Font component using yarn.\nSOURCE: https://github.com/resend/react-email/blob/canary/apps/docs/components/font.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-email/components -E\n\n# or get the individual package\n\nyarn add @react-email/font -E\n```\n\n----------------------------------------\n\nTITLE: Development Setup for React Email\nDESCRIPTION: Commands for setting up the React Email development environment, including installing dependencies and running the development server.\nSOURCE: https://github.com/resend/react-email/blob/canary/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing @react-email/hr with npm (Shell)\nDESCRIPTION: Installs the `@react-email/hr` package as an exact dependency using the npm package manager.\nSOURCE: https://github.com/resend/react-email/blob/canary/packages/hr/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @react-email/hr -E\n```\n\n----------------------------------------\n\nTITLE: npm Scripts for Benchmarking and Development (JSON)\nDESCRIPTION: Defines scripts within `package.json` for automating common tasks. It includes scripts to run specific benchmarks (`with-vs-without`, `before-perf-vs-after-perf`), generate a flamegraph for the Tailwind render process (`flamegraph-render-tailwind`), compile TypeScript source files using `tsup` (`compile`), and run ESLint (`lint`).\nSOURCE: https://github.com/resend/react-email/blob/canary/benchmarks/tailwind-component/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"with-vs-without\": \"pnpm compile && node ./dist/benchmark-with-vs-without.js\",\n    \"before-perf-vs-after-perf\": \"pnpm compile && node ./dist/benchmark-0.0.12-vs-local-version\",\n\n    \"flamegraph-render-tailwind\": \"pnpm compile && node --prof ./dist/tailwind-render && node --prof-process --preprocess -j isolate*.log | flamebearer\",\n\n    \"compile\": \"tsup src/*.ts\",\n    \"lint\": \"eslint .\"\n},\n```"
  }
]