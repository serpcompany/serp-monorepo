[
  {
    "owner": "graphprotocol",
    "repo": "grc-20-ts",
    "content": "TITLE: Complete Example Flow for Creating Entities and Relations in TypeScript\nDESCRIPTION: A comprehensive example demonstrating the creation of properties, types, entities, and relations using the Graph API, including creating images and setting various property types.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Graph } from '@graphprotocol/grc-20';\n\nconst ops: Array<Op> = [];\n\n// create an age property\nconst { id: agePropertyId, ops: createAgePropertyOps } = Graph.createProperty({\n  type: 'NUMBER',\n  name: 'Age',\n});\nops.push(...createAgePropertyOps);\n\n// create a likes property\nconst { id: likesPropertyId, ops: createLikesPropertyOps } = Graph.createProperty({\n  type: 'RELATION',\n  name: 'Likes',\n});\nops.push(...createLikesPropertyOps);\n\n// create a person type\nconst { id: personTypeId, ops: createPersonTypeOps } = Graph.createType({\n  name: 'Person',\n  cover: personCoverId,\n  properties: [agePropertyId, likesPropertyId],\n});\nops.push(...createPersonTypeOps);\n\n// create an restaurant cover image\nconst { id: restaurantCoverId, ops: createRestaurantCoverOps } = await Graph.createImage({\n  url: 'https://example.com/image.png',\n});\nops.push(...createRestaurantCoverOps);\n\n// create a restaurant entity with a website property\nconst restaurantTypeId = 'A9QizqoXSqjfPUBjLoPJa2';\nconst { id: restaurantId, ops: createRestaurantOps } = Graph.createEntity({\n  name: 'Yum Yum',\n  description: 'A restaurant serving fusion cuisine',\n  cover: restaurantCoverId,\n  types: [restaurantTypeId],\n  properties: {\n    [WEBSITE_PROPERTY]: {\n      type: 'URL',\n      value: 'https://example.com',\n    },\n  },\n});\nops.push(...createRestaurantOps);\n\n// create a person cover image\nconst { id: personCoverId, ops: createPersonCoverOps } = await Graph.createImage({\n  url: 'https://example.com/avatar.png',\n});\nops.push(...createPersonCoverOps);\n\n// create a person entity with a likes relation to the restaurant entity\nconst { id: personId, ops: createPersonOps } = Graph.createEntity({\n  name: 'Jane Doe',\n  types: [personTypeId],\n  cover: personCoverId,\n  properties: {\n    [agePropertyId]: {\n      type: 'NUMBER',\n      value: 42,\n    },\n    [likesPropertyId]: {\n      to: restaurantId,\n    },\n  },\n});\nops.push(...createPersonOps);\n```\n\n----------------------------------------\n\nTITLE: Creating Properties, Types, and Entities in TypeScript\nDESCRIPTION: Demonstrates how to create properties, types, and entities using the Graph API, including creating images and setting properties.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Graph } from '@graphprotocol/grc-20';\n\n// create a property\nconst propertyResult = Graph.createProperty({\n  name: 'name of the property',\n  type: 'TEXT', // TEXT | NUMBER | URL | TIME | POINT | CHECKBOX | RELATION,\n});\n\n// create a type\nconst { id: personTypeId, ops: createPersonTypeOps } = Graph.createType({\n  name: 'name of the type',\n  properties: […listOfPropertyIds],\n});\n\n// create an image\nconst { id: imageId, ops: createImageOps } = await Graph.createImage({\n  url: 'https://example.com/image.png',\n  // blob: new Blob([fs.readFileSync(path.join(__dirname, 'cover.png'))], { type: 'image/png' });\n});\n\n// create an entity\nconst { id: restaurantId, ops: createRestaurantOps } = Graph.createEntity({\n  name: 'name of the entity',\n  description: 'description of the entity',\n  types: […listOfTypeIds],\n  cover: imageId,\n  properties: {\n    // value property like text, number, url, time, point, checkbox\n    [propertyId]: {\n      type: 'TEXT', // TEXT | NUMBER | URL | TIME | POINT | CHECKBOX,\n      value: 'value of the property',\n    },\n    // relation property\n    [propertyId]: {\n      to: 'id of the entity',\n      relationId: 'id of the relation', // optional\n      position: positionString, // optional\n      properties: {\n        [propertyId]: {\n          type: 'TEXT', // TEXT | NUMBER | URL | TIME | POINT | CHECKBOX,\n          value: 'value of the property',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Edits with Smart Account Wallet in TypeScript\nDESCRIPTION: Demonstrates how to initialize a smart account wallet client using a private key from Geo wallet and send transactions. Transaction costs are sponsored by the Geo team during early access period. Requires private key from Geo wallet export.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSmartAccountWalletClient } from '@graphprotocol/grc-20';\n\n// IMPORTANT: Be careful with your private key. Don't commit it to version control.\n// You can get your private key using https://www.geobrowser.io/export-wallet\nconst privateKey = `0x${privateKeyFromGeoWallet}`;\nconst smartAccountWalletClient = await getSmartAccountWalletClient({\n  privateKey,\n  // rpcUrl, // optional\n});\n\n// publish an edit to IPFS\n// get the calldata for the edit\n\nconst txResult = await smartAccountWalletClient.sendTransaction({\n  to: to,\n  value: 0n,\n  data: data,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Spaces using GRC-20 API in TypeScript\nDESCRIPTION: Shows how to programmatically deploy spaces using the GRC-20 API. Currently supports PERSONAL governance mode deployment to both testnet and mainnet networks. Requires editor address and space name as parameters.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Graph } from '@graphprotocol/grc-20';\nconst editorAddress = '0x000000000000000000000000000000000000';\nconst spaceName = 'Example-Name';\n\nconst spaceId = await Graph.createSpace({\n  initialEditorAddress, \n  spaceName, \n  // Optionally specify TESTNET or MAINNET. Defaults to MAINNET\n  network: 'TESTNET',\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing an Edit Onchain Using a Wallet in TypeScript\nDESCRIPTION: Shows how to fetch the appropriate calldata for publishing an edit onchain and sending a transaction using a wallet client.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// You'll need to know your space id and have an IPFS hash ahead of time\nconst spaceId = 'space-id';\nconst cid = 'ipfs://hash';\n\n// This returns the correct contract address and calldata depending on the space id\nconst result = await fetch(`https://api-testnet.grc-20.thegraph.com/space/${spaceId}/edit/calldata`, {\n  method: \"POST\",\n  body: JSON.stringify({ \n    cid: cid,\n    // Optionally specify TESTNET or MAINNET. Defaults to MAINNET\n    network: \"TESTNET\",\n   }),\n});\n\nconst { to, data } = await result.json();\n\nconst txResult = await walletClient.sendTransaction({\n  to: to,\n  value: 0n,\n  data: data,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Triple and Relation Ops in TypeScript\nDESCRIPTION: Shows how to create and delete triple and relation operations using the SDK's Triple and Relation APIs.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type CreateRelationOp,\n  type DeleteRelationOp,\n  type DeleteTripleOp,\n  Relation,\n  type SetTripleOp,\n  Triple,\n} from '@graphprotocol/grc-20';\n\nconst setTripleOp: SetTripleOp = Triple.make({\n  entityId: 'id of entity',\n  attributeId: 'id of attribute',\n  value: {\n    type: 'TEXT', // TEXT | NUMBER | URL | TIME | POINT | CHECKBOX,\n    value: 'hello world',\n  },\n});\n\nconst deleteTripleOp: DeleteTripleOp = Triple.remove({\n  entityId: 'id of entity',\n  attributeId: 'id of attribute',\n});\n\nconst setRelationOp: CreateRelationOp = Relation.make({\n  fromId: 'id of from entity',\n  relationTypeId: 'id of relation type',\n  toId: 'id of to entity',\n});\n\nconst deleteRelationOp: DeleteRelationOp = Relation.remove('id of relation');\n```\n\n----------------------------------------\n\nTITLE: Publishing an Edit to IPFS in TypeScript\nDESCRIPTION: Demonstrates how to publish a set of operations as an Edit to IPFS using the Ipfs.publishEdit method.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ipfs } from '@graphprotocol/grc-20';\n\nconst { cid } = await Ipfs.publishEdit({\n  name: 'Edit name',\n  ops: ops,\n  author: '0x000000000000000000000000000000000000', \n})\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in TypeScript\nDESCRIPTION: Demonstrates how to create globally unique identifiers using the SDK's Id.generate() method.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Id } from '@graphprotocol/grc-20';\n\nconst newId = Id.generate();\n```\n\n----------------------------------------\n\nTITLE: Installing Knowledge Graph SDK via npm\nDESCRIPTION: Command to install the Knowledge Graph SDK package using npm.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @graphprotocol/grc-20\n```\n\n----------------------------------------\n\nTITLE: GRC-20 Full Changelog\nDESCRIPTION: Complete changelog entries documenting version history and changes for the GRC-20 TypeScript library, including new features, breaking changes, and patches.\nSOURCE: https://github.com/graphprotocol/grc-20-ts/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphprotocol/grc-20\n\n## 0.11.2\n\n### Patch Changes\n\n- c63c021: Add geo location property ID\n\n## 0.11.1\n\n### Patch Changes\n\n- d318633: Add bullet list view\n\n## 0.11.0\n\n### Minor Changes\n\n- 866fcbd: return object with cid and editId from Ipfs.publishEdit\n\n## 0.10.0\n\n### Minor Changes\n\n- 21997e9: allow to provide an existing id when creating an entity, image, type or property\n- 9d95766: add Graph.deleteEntity\n\n## 0.9.5\n\n### Patch Changes\n\n- 5c35de1: expose GeoSmartAccount type\n\n## 0.9.4\n\n### Patch Changes\n\n- Simplify CSV column metadata fields\n\n## 0.9.3\n\n### Patch Changes\n\n- Add Encoding namespace\n\n## 0.9.2\n\n### Patch Changes\n\n- Remove CSV writing APIs\n\n## 0.9.1\n\n### Patch Changes\n\n- Remove jsr dep\n\n## 0.9.0\n\n### Minor Changes\n\n- 33070df: Add FILE_IMPORT op\n\n### Patch Changes\n\n- 813c7a5: Remove several dependencies and upgrade others\n- 4f8e860: add getSmartAccountWalletClient\n\n## 0.9.0-next.0\n\n### Minor Changes\n\n- Add FILE_IMPORT op\n\n## 0.8.0\n\n### Minor Changes\n\n- Add mainnet APIs for deploying space\n\n## 0.7.0\n\n### Minor Changes\n\n- c684d49: rename types from \"args\" to \"params\" e.g. CreateTripleArgs to CreateTripleParams\n- c44f027: Update `QUOTES_THAT_SUPPORT_CLAIMS_PROPERTY` and `ACADEMIC_FIELD_TYPE` values to be valid IDs\n- c44f027: IDs now use a branded type `Id` instead of `string` and validate every ID param\n\n### Patch Changes\n\n- 454fbe2: add createImage to Graph namespace\n\n## 0.6.4\n\n### Patch Changes\n\n- fix aliased paths\n\n## 0.6.3\n\n### Patch Changes\n\n- Remove Graph.publish\n\n## 0.6.2\n\n### Patch Changes\n\n- Fix missing Graph export\n\n## 0.6.1\n\n### Patch Changes\n\n- 9c756b8: all IDs with ATTRIBUTE in the name now changed PROPERTY. The constants with ATTRIBUTE still exist and marked as deprecated\n- 9c756b8: Add utility functions createProperty, createType, createEntity\n\n## 0.6.0\n\n### Minor Changes\n\n- 424b98e: Add triple value options to encoding\n- add1f17: Rename exports:\n  IPFS -> Ipfs\n  ID -> Id\n  SYSTEM_IDS -> SystemIds\n  NETWORK_IDS -> NetworkIds\n  CONTENT_IDS -> ContentIds\n\n  Export decodeBase58ToUUID, encodeBase58 and BASE58_ALLOWED_CHARS under named export Base58\n\n## 0.5.2\n\n### Patch Changes\n\n- 5f7c358: Fix import in readme\n\n## 0.5.1\n\n### Patch Changes\n\n- Remove prettier deps and config files\n\n## 0.5.0\n\n### Minor Changes\n\n- Don't throw error if space id doesn't exist on scheme as it's optional.\n\n## 0.4.1\n\n### Patch Changes\n\n- Export contracts as const\n\n## 0.4.0\n\n### Minor Changes\n\n- Fixes example in readme for deploying space\n- Updates default API URL to one operated by The Graph.\n\n## 0.3.0\n\n### Minor Changes\n\n- don't use aliased imports\n\n## 0.2.3\n\n### Patch Changes\n\n- Add docs for specifying network in some API calls\n\n## 0.2.2\n\n### Patch Changes\n\n- Fix published artifacts\n\n## 0.2.1\n\n### Patch Changes\n\n- Move retrying and validating to server instead of client\n\n## 0.2.0\n\n### Minor Changes\n\n- Adds abstraction for publishing edits to IPFS using default API endpoint\n\n## 0.1.0\n\n### Minor Changes\n\n- Update ID generation fn name from make -> generate\n\n### Patch Changes\n\n- f8035bf: Add docs for deploying space and generating calldata to publish edits.\n\n## 0.0.9\n\n### Patch Changes\n\n- Add docs on deploying a personal space and generating calldata to publish.\n\n## 0.0.7\n\n### Patch Changes\n\n- f47d0f3: Adds JS Doc comments to APIs\n```"
  }
]