[
  {
    "owner": "casbin",
    "repo": "casbin-website",
    "content": "TITLE: Installing Casbin in Go\nDESCRIPTION: Command to install Casbin library for Go projects using go get.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/casbin/casbin/v2\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Go\nDESCRIPTION: Code to initialize a Casbin enforcer in Go using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/casbin/casbin/v2\"\n\ne, err := casbin.NewEnforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Go\nDESCRIPTION: Example of using a Casbin enforcer in Go to check if a user has permission to access a resource, including batch enforcement.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nsub := \"alice\" // the user that wants to access a resource.\nobj := \"data1\" // the resource that is going to be accessed.\nact := \"read\" // the operation that the user performs on the resource.\n\nok, err := e.Enforce(sub, obj, act)\n\nif err != nil {\n    // handle err\n}\n\nif ok == true {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n\n// You could use BatchEnforce() to enforce some requests in batches.\n// This method returns a bool slice, and this slice's index corresponds to the row index of the two-dimensional array.\n// e.g. results[0] is the result of {\"alice\", \"data1\", \"read\"}\nresults, err := e.BatchEnforce([][]interface{}{{\"alice\", \"data1\", \"read\"}, {\"bob\", \"data2\", \"write\"}, {\"jack\", \"data3\", \"read\"}})\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin File Adapter in Go\nDESCRIPTION: Shows how to initialize a Casbin enforcer using the built-in file adapter to load policies from CSV files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/casbin/casbin\"\n\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Node.js\nDESCRIPTION: Code to initialize a Casbin enforcer in Node.js using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { newEnforcer } from 'casbin';\n\nconst e = await newEnforcer('path/to/model.conf', 'path/to/policy.csv');\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Rust\nDESCRIPTION: Example of using a Casbin enforcer in Rust to check if a user has permission to access a resource using async/await syntax.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\n  let sub = \"alice\"; // the user that wants to access a resource.\n  let obj = \"data1\"; // the resource that is going to be accessed.\n  let act = \"read\"; // the operation that the user performs on the resource.\n\n  if e.enforce((sub, obj, act)).await? {\n      // permit alice to read data1\n  } else {\n      // error occurs\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Functions in Casbin\nDESCRIPTION: Demonstrates how to add custom matching functions to Casbin enforcer. Shows implementation of a custom key matching function across different languages that compares URL-like paths.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nfunc CustomFunction(key1 string, key2 string) bool {\n\tif key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data/:resource\" {\n\t\treturn true\n\t} else if key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data2/:id/using/:resId\" {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nfunc CustomFunctionWrapper(args ...interface{}) (interface{}, error) {\n\tkey1 := args[0].(string)\n\tkey2 := args[1].(string)\n\n\treturn bool(CustomFunction(key1, key2)), nil\n}\n\ne.AddFunction(\"keyMatchCustom\", CustomFunctionWrapper)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction customFunction(key1, key2){\n    if(key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data/:resource\") {\n        return true\n    } else if(key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data2/:id/using/:resId\") {\n        return true\n    } else {\n        return false\n    }\n}\n\ne.addFunction(\"keyMatchCustom\", customFunction);\n```\n\nLANGUAGE: php\nCODE:\n```\nfunc customFunction($key1, $key2) {\n\tif ($key1 == \"/alice_data2/myid/using/res_id\" && $key2 == \"/alice_data/:resource\") {\n\t\treturn true;\n\t} elseif ($key1 == \"/alice_data2/myid/using/res_id\" && $key2 == \"/alice_data2/:id/using/:resId\") {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunc customFunctionWrapper(...$args){\n\t$key1 := $args[0];\n\t$key2 := $args[1];\n\n\treturn customFunction($key1, $key2);\n}\n\n$e->addFunction(\"keyMatchCustom\", customFunctionWrapper);\n```\n\nLANGUAGE: python\nCODE:\n```\ndef custom_function(key1, key2):\n    return ((key1 == \"/alice_data2/myid/using/res_id\" and key2 == \"/alice_data/:resource\") or (key1 == \"/alice_data2/myid/using/res_id\" and key2 == \"/alice_data2/:id/using/:resId\"))\n\n\ne.add_function(\"keyMatchCustom\", custom_function)\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn custom_function(key1: STring, key2: String) {\n\tkey1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data/:resource\" || key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data2/:id/using/:resId\"\n}\n\n\ne.add_function(\"keyMatchCustom\", custom_function);\n```\n\nLANGUAGE: java\nCODE:\n```\npublic static class CustomFunc extends CustomFunction {\n\t@Override\n\tpublic AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n\t\tString key1 = FunctionUtils.getStringValue(arg1, env);\n\t\tString key2 = FunctionUtils.getStringValue(arg2, env);\n\t\tif (key1.equals(\"/alice_data2/myid/using/res_id\") && key2.equals(\"/alice_data/:resource\")) {\n\t\t\treturn AviatorBoolean.valueOf(true);\n\t\t} else if (key1.equals(\"/alice_data2/myid/using/res_id\") && key2.equals(\"/alice_data2/:id/using/:resId\")) {\n\t\t\treturn AviatorBoolean.valueOf(true);\n\t\t} else {\n\t\t\treturn AviatorBoolean.valueOf(false);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn \"keyMatchCustom\";\n\t}\n}\n\nFunctionTest.CustomFunc customFunc = new FunctionTest.CustomFunc();\ne.addFunction(customFunc.getName(), customFunc);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Java\nDESCRIPTION: Code to create a new Casbin enforcer in Java using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport org.casbin.jcasbin.main.Enforcer;\n\nEnforcer e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Python\nDESCRIPTION: Example of using a Casbin enforcer in Python to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsub = \"alice\"  # the user that wants to access a resource.\nobj = \"data1\"  # the resource that is going to be accessed.\nact = \"read\"  # the operation that the user performs on the resource.\n\nif e.enforce(sub, obj, act):\n    # permit alice to read data1\n    pass\nelse:\n    # deny the request, show an error\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enforcer Initialization\nDESCRIPTION: Examples of initializing the Casbin Enforcer across different programming languages\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforce::new(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in PHP\nDESCRIPTION: Example of using a Casbin enforcer in PHP to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$sub = \"alice\"; // the user that wants to access a resource.\n$obj = \"data1\"; // the resource that is going to be accessed.\n$act = \"read\"; // the operation that the user performs on the resource.\n\nif ($e->enforce($sub, $obj, $act) === true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with RBAC and Domains\nDESCRIPTION: Creates a new Casbin Enforcer instance using RBAC with domains model and policy files. This is a prerequisite for using the RBAC with Domains API.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforcer::new(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Python\nDESCRIPTION: Code to initialize a Casbin enforcer in Python using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport casbin\n\ne = casbin.Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in .NET\nDESCRIPTION: Code to create a new Casbin enforcer in C# using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing NetCasbin; \n\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Permissions for a User in Casbin RBAC\nDESCRIPTION: Assigns multiple permissions to a user or role using the AddPermissionsForUser function. Returns false if the user or role already has one of the permissions. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nvar permissions = [][]string{{\"data1\", \"read\"},{\"data2\",\"write\"}}\nfor i := 0; i < len(permissions); i++ {\n    e.AddPermissionsForUser(\"alice\", permissions[i])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst permissions = [\n    [\"data1\", \"read\"],\n    [\"data2\", \"write\"],\n];\n\npermissions.map((permission) => e.addPermissionForUser(\"bob\", ...permission));\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet permissions = vec![\n    vec![\"data1\".to_owned(), \"read\".to_owned()],\n    vec![\"data2\".to_owned(), \"write\".to_owned()],\n];\n\nlet all_added = e.add_permissions_for_user(\"bob\", permissions).await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with Custom Model and SQLAlchemy Adapter in Python\nDESCRIPTION: Example of configuring Casbin in Python with a custom model file and SQLite database adapter using SQLAlchemy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport casbin\nimport casbin_sqlalchemy_adapter\n\n\n# Use SQLAlchemy Casbin adapter with SQLLite DB\nadapter = casbin_sqlalchemy_adapter.Adapter('sqlite:///test.db')\n\n# Create a config model policy\nwith open(\"rbac_example_model.conf\", \"w\") as f:\n    f.write(\"\"\"\n    [request_definition]\n    r = sub, obj, act\n\n    [policy_definition]\n    p = sub, obj, act\n\n    [policy_effect]\n    e = some(where (p.eft == allow))\n\n    [matchers]\n    m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n    \"\"\")\n\n# Create enforcer from adapter and config policy\ne = casbin.Enforcer('rbac_example_model.conf', adapter)\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Roles For User with Casbin\nDESCRIPTION: The GetImplicitRolesForUser function retrieves both direct and indirect roles that a user has. Unlike GetRolesForUser(), this includes roles inherited through role hierarchies.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ne.GetImplicitRolesForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.getImplicitRolesForUser(\"alice\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->getImplicitRolesForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.get_implicit_roles_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar implicitRoles = e.GetImplicitRolesForUser(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\ne.get_implicit_roles_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> implicitRoles = e.getImplicitRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Basic ACL Model Configuration in Casbin\nDESCRIPTION: Defines a basic ACL (Access Control List) model configuration using Casbin's PERM metamodel components including request definition, policy definition, policy effect, and matchers.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/HowItWorks.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Node.js\nDESCRIPTION: Example of using a Casbin enforcer in Node.js to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst sub = 'alice'; // the user that wants to access a resource.\nconst obj = 'data1'; // the resource that is going to be accessed.\nconst act = 'read'; // the operation that the user performs on the resource.\n\nif ((await e.enforce(sub, obj, act)) === true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Request Definition in Casbin Model\nDESCRIPTION: Defines the structure of access request arguments used in e.Enforce() function. Specifies subject, object and action parameters.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with Custom Model and Database Adapter in Go\nDESCRIPTION: Example of configuring Casbin in Go with a custom model string and MySQL database adapter using XORM.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/casbin/casbin/v2\"\n\t\"github.com/casbin/casbin/v2/model\"\n\txormadapter \"github.com/casbin/xorm-adapter/v2\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// Initialize a Xorm adapter with MySQL database.\na, err := xormadapter.NewAdapter(\"mysql\", \"mysql_username:mysql_password@tcp(127.0.0.1:3306)/casbin\")\nif err != nil {\n\tlog.Fatalf(\"error: adapter: %s\", err)\n}\n\nm, err := model.NewModelFromString(`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n`)\nif err != nil {\n\tlog.Fatalf(\"error: model: %s\", err)\n}\n\ne, err := casbin.NewEnforcer(m, a)\nif err != nil {\n\tlog.Fatalf(\"error: enforcer: %s\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Policy Rule Exists in Casbin\nDESCRIPTION: Shows how to determine whether an authorization rule exists in the policy. Parameters represent the rule components (subject, object, action) in the policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhasPolicy := e.HasPolicy(\"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasPolicy = await e.hasPolicy('data2_admin', 'data2', 'read')\n```\n\nLANGUAGE: php\nCODE:\n```\n$hasPolicy = $e->hasPolicy('data2_admin', 'data2', 'read');\n```\n\nLANGUAGE: python\nCODE:\n```\nhas_policy = e.has_policy(\"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar hasPolicy = e.HasPolicy(\"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has_policy = e.has_policy(vec![\"data2_admin\".to_owned(), \"data2\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean hasPolicy = e.hasPolicy(\"data2_admin\", \"data2\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Policy Definition Examples in Casbin\nDESCRIPTION: Demonstrates how to define multiple policy types with different parameter structures.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[policy_definition]\np = sub, obj, act\np2 = sub, act\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin MySQL Adapter in Go\nDESCRIPTION: Example of setting up a MySQL adapter for Casbin in Go to store policies in a MySQL database.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin\"\n    \"github.com/casbin/mysql-adapter\"\n)\n\na := mysqladapter.NewAdapter(\"mysql\", \"root:@tcp(127.0.0.1:3306)/\")\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", a)\n```\n\n----------------------------------------\n\nTITLE: Checking Permission For User with Casbin\nDESCRIPTION: The HasPermissionForUser function determines whether a user has a specific permission. It returns a boolean value indicating if the user has the permission.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ne.HasPermissionForUser(\"alice\", []string{\"read\"})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.hasPermissionForUser('alice', 'read')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->hasPermissionForUser(\"alice\", []string{\"read\"});\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_permission_for_user(\"alice\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar has = e.HasPermissionForUser(\"bob\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_permission_for_user(\"alice\", vec![\"data1\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean has = e.hasPermissionForUser(\"alice\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Allow-Override Policy Effect Definition\nDESCRIPTION: Policy effect definition that implements allow-override logic where any matching allow rule grants access.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = some(where (p.eft == allow))\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin DBAL Adapter in PHP\nDESCRIPTION: Demonstrates how to set up a database adapter using DBAL in PHP for Casbin policy storage.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Casbin\\Enforcer;\nuse CasbinAdapter\\DBAL\\Adapter as DatabaseAdapter;\n\n$config = [\n    'driver'     => 'pdo_mysql',\n    'host' => '127.0.0.1',\n    'dbname' => 'test',\n    'user' => 'root',\n    'password' => '',\n    'port' => '3306',\n];\n\n$a = DatabaseAdapter::newAdapter($config);\n$e = new Enforcer('examples/basic_model.conf', $a);\n```\n\n----------------------------------------\n\nTITLE: Adding Grouping Policy in Casbin\nDESCRIPTION: AddGroupingPolicy adds a role inheritance rule to the current policy. It returns true if the rule is added successfully, false if the rule already exists.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nadded := e.AddGroupingPolicy(\"group1\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst added = await e.addGroupingPolicy('group1', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$added = $e->addGroupingPolicy(\"group1\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nadded = e.add_grouping_policy(\"group1\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddGroupingPolicy(\"group1\", \"data2_admin\");\nor\nvar added = await e.AddGroupingPolicyAsync(\"group1\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_grouping_policy(vec![\"group1\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addGroupingPolicy(\"group1\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Basic Enforce API Usage in Go\nDESCRIPTION: Example showing how to load the enforcer and check permissions using the basic Enforce API.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nenforcer, err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n\tlog.Fatalf(\"error, detail: %s\", err)\n}\nok, err := enforcer.Enforce(\"alice\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Getting Permissions For User with Casbin\nDESCRIPTION: The GetPermissionsForUser function retrieves all permissions for a user or role from the policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ne.GetPermissionsForUser(\"bob\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.getPermissionsForUser('bob')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->getPermissionsForUser(\"bob\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.get_permissions_for_user(\"bob\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar permissions = e.GetPermissionsForUser(\"bob\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> permissions = e.getPermissionsForUser(\"bob\");\n```\n\n----------------------------------------\n\nTITLE: Adding Role for User in Domain\nDESCRIPTION: Adds a role for a user within a specific domain using the AddRoleForUserInDomain method. Returns false if the user already has the role.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.AddRoleForUserInDomain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nok = e.add_role_for_user_in_domain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean ok = e.addRoleForUserInDomain(\"alice\", \"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Policy in Casbin\nDESCRIPTION: Shows how to get all authorization rules from a named policy. The parameter specifies the policy name (typically 'p' for the default policy).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nnamedPolicy := e.GetNamedPolicy(\"p\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst namedPolicy = await e.getNamedPolicy('p')\n```\n\nLANGUAGE: php\nCODE:\n```\n$namedPolicy = $e->getNamedPolicy(\"p\");\n```\n\nLANGUAGE: python\nCODE:\n```\nnamed_policy = e.get_named_policy(\"p\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar namedPolicy = e.GetNamedPolicy(\"p\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet named_policy = e.get_named_policy(\"p\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> namedPolicy = e.getNamedPolicy(\"p\");\n```\n\n----------------------------------------\n\nTITLE: Getting Domains For User with Casbin\nDESCRIPTION: The GetDomainsForUser function retrieves all domains associated with a user. This is useful in multi-tenancy applications with domain-specific policies.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nresult, err := e.GetDomainsForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in .NET\nDESCRIPTION: Example of using a Casbin enforcer in C# to check if a user has permission to access a resource using async/await pattern.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar sub = \"alice\";  # the user that wants to access a resource.\nvar obj = \"data1\";  # the resource that is going to be accessed.\nvar act = \"read\";  # the operation that the user performs on the resource.\n\nif (await e.EnforceAsync(sub, obj, act)) \n{\n    // permit alice to read data1\n}\nelse\n{\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Grouping Policy in Casbin\nDESCRIPTION: Shows how to get all role inheritance rules from a named grouping policy. The parameter specifies the policy name (typically 'g' for the default grouping policy).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nnamedGroupingPolicy := e.GetNamedGroupingPolicy(\"g\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst namedGroupingPolicy = await e.getNamedGroupingPolicy('g')\n```\n\nLANGUAGE: php\nCODE:\n```\n$namedGroupingPolicy = $e->getNamedGroupingPolicy(\"g\");\n```\n\nLANGUAGE: python\nCODE:\n```\nnamed_grouping_policy = e.get_named_grouping_policy(\"g\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar namedGroupingPolicy = e.GetNamedGroupingPolicy(\"g\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet named_grouping_policy = e.get_named_grouping_policy(\"g\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> namedGroupingPolicy = e.getNamedGroupingPolicy(\"g\");\n```\n\n----------------------------------------\n\nTITLE: Checking Role Inheritance Link (Go)\nDESCRIPTION: Determines whether a link exists between two roles in a specific domain in Go. This checks if u1 inherits from g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n    rm.HasLink(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policies in Casbin\nDESCRIPTION: Demonstrates how to remove multiple authorization rules from the current policy using the RemovePolicies function. The operation is atomic, ensuring all rules are removed only if they all exist in the current policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"jack\", \"data4\", \"read\"},\n\t[]string {\"katy\", \"data4\", \"write\"},\n\t[]string {\"leyo\", \"data4\", \"read\"},\n\t[]string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesRemoved := e.RemovePolicies(rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removePolicies(rules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_removed = e.remove_policies(rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n\tvec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_removed = e.remove_policies(rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nString[][] rules = {\n\t{\"jack\", \"data4\", \"read\"},\n\t{\"katy\", \"data4\", \"write\"},\n\t{\"leyo\", \"data4\", \"read\"},\n\t{\"ham\", \"data4\", \"write\"},\n};\nboolean areRulesRemoved = e.removePolicies(rules);\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Named Policy in Casbin\nDESCRIPTION: RemoveFilteredNamedPolicy removes an authorization rule from the current named policy, with field filters specified.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredNamedPolicy('p', 0, ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_filtered_named_policy(\"p\", 0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\nor\nvar removed = e.RemoveFilteredNamedPolicyAync(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_filtered_named_policy(\"p\", 0, vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Node.js\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Node.js using async/await.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst roles = await e.getRolesForUser('alice');\n```\n\n----------------------------------------\n\nTITLE: EnforceEx API Usage in Go\nDESCRIPTION: Demonstrates using EnforceEx to get additional information about which policy allowed the request.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nok, reason, err := enforcer.EnforceEx(\"amber\", \"data1\", \"read\")\nfmt.Println(ok, reason) // true [admin data1 read]\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Grouping Policies in Casbin\nDESCRIPTION: AddNamedGroupingPolicies adds multiple named role inheritance rules to the current policy. The operation is atomic, returning true if all rules are added successfully, false otherwise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"ham\", \"data4_admin\"},\n\t[]string {\"jack\", \"data5_admin\"},\n}\n\nareRulesAdded := e.AddNamedGroupingPolicies(\"g\", rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addNamedGroupingPolicies('g', groupingRules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\n\nare_rules_added = e.add_named_grouping_policies(\"g\", rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n\tvec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet are_rules_added = e.add_named_grouping_policies(\"g\", rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nString[][] groupingRules = {\n\t{\"ham\", \"data4_admin\"},\n\t{\"jack\", \"data5_admin\"}\n};\nboolean areRulesAdded = e.addNamedGroupingPolicies(\"g\", groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Named Policy Rule Exists in Casbin\nDESCRIPTION: Demonstrates how to determine whether a named authorization rule exists. Parameters include the policy name and the rule components (subject, object, action).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhasNamedPolicy := e.HasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasNamedPolicy = await e.hasNamedPolicy('p', 'data2_admin', 'data2', 'read')\n```\n\nLANGUAGE: php\nCODE:\n```\n$hasNamedPolicy = $e->hasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas_named_policy = e.has_named_policy(\"p\", \"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar hasNamedPolicy = e.HasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has_named_policy = e.has_named_policy(\"p\", vec![\"data2_admin\".to_owned(), \"data2\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean hasNamedPolicy = e.hasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Java\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Java.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nRoles roles = e.getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Deleting All Permissions For User with Casbin\nDESCRIPTION: The DeletePermissionsForUser function removes all permissions for a user or role. It returns false if the user or role does not have any permissions (not affected).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ne.DeletePermissionsForUser(\"bob\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deletePermissionsForUser('bob')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deletePermissionsForUser(\"bob\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_permissions_for_user(\"bob\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deletedAtLeastOne = e.DeletePermissionsForUser(\"bob\");\nor\nvar deletedAtLeastOne = await e.DeletePermissionsForUserAsync(\"bob\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted_at_least_one = e.delete_permissions_for_user(\"bob\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deletedAtLeastOne = e.deletePermissionForUser(\"bob\");\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Rust\nDESCRIPTION: Commands to add Casbin to a Rust project, including setup for different async executors.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-edit\ncargo add casbin\n\n// If you use async-std as async executor\ncargo add async-std\n\n// If you use tokio as async executor\ncargo add tokio // make sure you activate its `macros` feature\n```\n\n----------------------------------------\n\nTITLE: Removing a Named Policy in Casbin\nDESCRIPTION: Demonstrates how to remove a single authorization rule from a named policy using the RemoveNamedPolicy function.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveNamedPolicy(\"p\", \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeNamedPolicy('p', ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_named_policy(\"p\", \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemoveNamedPolicyAsync(\"p\", \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_named_policy(\"p\", vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Model from Go Code\nDESCRIPTION: Demonstrates how to dynamically initialize a Casbin model from Go code. This method allows for programmatic model creation without relying on a .CONF file.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ModelStorage.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/casbin/casbin/v2\"\n\t\"github.com/casbin/casbin/v2/model\"\n\t\"github.com/casbin/casbin/v2/persist/file-adapter\"\n)\n\n// Initialize the model from Go code.\nm := model.NewModel()\nm.AddDef(\"r\", \"r\", \"sub, obj, act\")\nm.AddDef(\"p\", \"p\", \"sub, obj, act\")\nm.AddDef(\"g\", \"g\", \"_, _\")\nm.AddDef(\"e\", \"e\", \"some(where (p.eft == allow))\")\nm.AddDef(\"m\", \"m\", \"g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\")\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid files.\na := fileadapter.NewAdapter(\"examples/rbac_policy.csv\")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n```\n\n----------------------------------------\n\nTITLE: Role-Based Priority Model Configuration in Casbin\nDESCRIPTION: Configuration for implementing priority based on role hierarchy where priority is automatically determined by the depth in the role tree.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PriorityModel.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = subjectPriority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Policy in Casbin\nDESCRIPTION: Demonstrates how to get authorization rules in the policy with field filters. The first parameter specifies the field index to filter on (0-based), and the second parameter is the filter value.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfilteredPolicy := e.GetFilteredPolicy(0, \"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filteredPolicy = await e.getFilteredPolicy(0, 'alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$filteredPolicy = $e->getFilteredPolicy(0, \"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\nfiltered_policy = e.get_filtered_policy(0, \"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar filteredPolicy = e.GetFilteredPolicy(0, \"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet filtered_policy = e.get_filtered_policy(0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> filteredPolicy = e.getFilteredPolicy(0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin MySQL Adapter in Rust\nDESCRIPTION: Shows how to configure and use the Diesel adapter with MySQL in Rust for Casbin policy storage.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse casbin::prelude::*;\nuse diesel_adapter::{ConnOptions, DieselAdapter};\n\nlet mut conn_opts = ConnOptions::default();\nconn_opts\n\t.set_hostname(\"127.0.0.1\")\n\t.set_port(3306)\n\t.set_host(\"127.0.0.1:3306\") // overwrite hostname, port config\n\t.set_database(\"casbin\")\n\t.set_auth(\"casbin_rs\", \"casbin_rs\");\n\nlet a = DieselAdapter::new(conn_opts)?;\nlet mut e = Enforcer::new(\"examples/basic_model.conf\", a).await?;\n```\n\n----------------------------------------\n\nTITLE: Checking Named Grouping Policy in Casbin\nDESCRIPTION: HasNamedGroupingPolicy determines whether a named role inheritance rule exists in the current policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nhas := e.HasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst has = await e.hasNamedGroupingPolicy('g', 'alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$has = $e->hasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_named_grouping_policy(\"g\", \"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar has = e.HasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_named_grouping_policy(\"g\", vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean has = e.hasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for User in Domain\nDESCRIPTION: Retrieves the roles that a user has within a specific domain using the GetRolesForUserInDomain method.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetRolesForUserInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = e.getRolesForUserInDomain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nres = e.get_roles_for_user_in_domain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getRolesForUserInDomain(\"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Function with Casbin Enforcer\nDESCRIPTION: Code snippet showing how to register a custom function with the Casbin enforcer. The function is registered with a name that can be used in the model configuration.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Function.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne.AddFunction(\"my_func\", KeyMatchFunc)\n```\n\n----------------------------------------\n\nTITLE: Uploading Translation Sources to Crowdin\nDESCRIPTION: Command to upload translation sources to Crowdin for the Casbin website project.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncrowdin --config ../crowdin.yaml upload sources --auto-update -b master\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Role Inheritance Rule in Casbin\nDESCRIPTION: RemoveFilteredGroupingPolicy removes a role inheritance rule from the current policy based on specified field filters. It takes the starting field index and the field values to filter.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemoveFilteredGroupingPolicy(0, \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst removed = await e.removeFilteredGroupingPolicy(0, 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removeFilteredGroupingPolicy(0, \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_filtered_grouping_policy(0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemoveFilteredGroupingPolicy(0, \"alice\");\nor\nvar removed = await e.RemoveFilteredGroupingPolicyAsync(0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_filtered_grouping_policy(0, vec![\"alice\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removeFilteredGroupingPolicy(0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Function in Casbin Model Configuration\nDESCRIPTION: Example of how to use a custom function in the matchers section of a Casbin model configuration file. The function is referenced by name and used alongside other conditions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Function.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = r.sub == p.sub && my_func(r.obj, p.obj) && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Model Configuration\nDESCRIPTION: Model configuration file defining request, policy, role definitions, policy effects and matchers for RBAC implementation.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Delphi\nDESCRIPTION: Example of using a Casbin enforcer in Delphi to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_25\n\nLANGUAGE: delphi\nCODE:\n```\nif casbin.enforce(['alice,data1,read']) then\n  // Alice is super happy as she can read data1\nelse\n  // Alice is sad\n```\n\n----------------------------------------\n\nTITLE: Using AddNamedMatchingFunc with KeyMatch in Casbin (Go)\nDESCRIPTION: Demonstrates how to add a key matching function to RoleManager, allowing wildcard matching for roles. The example shows adding a wildcard role and checking if a specific user has a link to an admin role in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    e.AddNamedMatchingFunc(\"g\", \"\", util.KeyMatch)\n\t_, _ = e.AddGroupingPolicies([][]string{{\"*\", \"admin\", \"domain1\"}})\n\t_, _ = e.GetRoleManager().HasLink(\"bob\", \"admin\", \"domain1\") // -> true, nil\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy in Casbin\nDESCRIPTION: Shows how to remove a single authorization rule from the current policy using the RemovePolicy function.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemovePolicy(\"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removePolicy(...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removePolicy(\"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_policy(\"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemovePolicy(\"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemovePolicyAsync(\"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_policy(vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removePolicy(\"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Getting Named Implicit Permissions For User with Casbin\nDESCRIPTION: The GetNamedImplicitPermissionsForUser function retrieves implicit permissions for a user by a specified policy name. This allows filtering permissions based on policy type.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ne.GetNamedImplicitPermissionsForUser(\"p2\",\"alice\")\n```\n\nLANGUAGE: python\nCODE:\n```\ne.get_named_implicit_permissions_for_user(\"p2\", \"alice\")\n```\n\n----------------------------------------\n\nTITLE: Adding Named Domain Matching Function to Enforcer (Node.js)\nDESCRIPTION: Node.js example for adding a domain matching function to a Casbin enforcer, enabling pattern matching for domain names in role definitions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    const e = await newEnforcer('path/to/model', 'path/to/policy');\n    await e.addNamedDomainMatchingFunc('g', Util.keyMatchFunc);\n```\n\n----------------------------------------\n\nTITLE: Defining Super Admin in Casbin Model Configuration (INI)\nDESCRIPTION: This code snippet defines a Casbin model configuration that implements a Super Admin role. It includes request definition, policy definition, policy effect, and matchers. The key feature is the matcher condition that grants full access if the subject is 'root'.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SuperAdmin.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act || r.sub == \"root\"\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Resources For User with Casbin\nDESCRIPTION: The GetImplicitResourcesForUser function returns all policies (including inherited ones) that should be true for a user. This provides a comprehensive view of a user's resource access rights.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nresources, err := e.GetImplicitResourcesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin.js in Auto Mode with Backend Integration\nDESCRIPTION: Code to initialize Casbin.js in auto mode which automatically syncs permissions with a backend Casbin service via a specified endpoint.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst casbinjs = require('casbin.js');\n\n// Set your backend casbin service url\nconst authorizer = new casbinjs.Authorizer(\n    'auto', // mode\n    {endpoint: 'http://your_endpoint/api/casbin'}\n);\n\n// Set your visitor. \n// Casbin.js will automatically sync the permission with your backend Casbin service.\nauthorizer.setUser(\"Tom\");\n\n// Evaluate the permission\nresult = authorizer.can(\"read\", \"data1\");\nresult.then((success, failed) => {\n    if (success) {\n        // Some frontend procedure ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Permission For User with Casbin\nDESCRIPTION: The DeletePermissionForUser function removes a specific permission for a user or role. It returns false if the user/role does not have the permission (not affected).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ne.DeletePermissionForUser(\"bob\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deletePermissionForUser(\"bob\", \"read\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deletePermissionForUser(\"bob\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_permission_for_user(\"bob\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeletePermissionForUser(\"bob\", \"read\");\nor\nvar deleted = await e.DeletePermissionForUserAsync(\"bob\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_permission_for_user(\"bob\", vec![\"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deletePermissionForUser(\"bob\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Pattern Matching in Go\nDESCRIPTION: Sets up pattern matching for RBAC using the KeyMatch2 function. This allows for pattern-based role assignments without explicit rules for each case.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithPattern.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, _ := NewEnforcer(\"./example.conf\", \"./example.csv\")\ne.AddNamedMatchingFunc(\"g\",\"KeyMatch2\",util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Loading Filtered Policies with Casbin File Adapter\nDESCRIPTION: This code example demonstrates how to use the built-in filtered file adapter in Casbin to load a subset of policies limited to a specific domain. It initializes an enforcer with a RBAC with domains model and filters policies to only include those for \"domain1\".\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PolicySubsetLoading.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/casbin/casbin\"\n\nenforcer := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter(\"examples/rbac_with_domains_policy.csv\")\nenforcer.InitWithAdapter(\"examples/rbac_with_domains_model.conf\", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{\"\", \"domain1\"},\n    G: []string{\"\", \"\", \"domain1\"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to \"domain1\".\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role in Casbin RBAC\nDESCRIPTION: Retrieves the users assigned to a specific role using the GetUsersForRole function. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetUsersForRole(\"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.getUsersForRole('data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->getUsersForRole(\"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nusers = e.get_users_for_role(\"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.GetUsersForRole(\"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet users = e.get_users_for_role(\"data1_admin\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getUsersForRole(\"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in PHP\nDESCRIPTION: Code to create a new Casbin enforcer in PHP using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse Casbin\\Enforcer;\n\n$e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Rust\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Rust.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nlet roles = e.get_roles_for_user(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function to Enforcer (Node.js)\nDESCRIPTION: Shows how to create a new Casbin enforcer in Node.js and add a key matching function to it, enabling pattern matching for roles.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    const e = await newEnforcer('path/to/model', 'path/to/policy');\n    await e.addNamedMatchingFunc('g', Util.keyMatchFunc);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Delphi\nDESCRIPTION: Code to create a new Casbin enforcer in Delphi using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_14\n\nLANGUAGE: delphi\nCODE:\n```\nvar\n  casbin: ICasbin;\nbegin\n  casbin := TCasbin.Create('path/to/model.conf', 'path/to/policy.csv');\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Python\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Python.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nroles = e.get_roles_for_user(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User (Python)\nDESCRIPTION: Python code showing how to get all roles that a user (u1) inherits in a domain.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n    rm.get_roles(\"u1\", \"domain\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy in Casbin\nDESCRIPTION: Shows how to add a single authorization rule to a named policy using the AddNamedPolicy function. If the rule already exists, the function returns false and doesn't add the rule.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nadded := e.AddNamedPolicy(\"p\", \"eve\", \"data3\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['eve', 'data3', 'read']\nconst added = await e.addNamedPolicy('p', ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$added = $e->addNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nadded = e.add_named_policy(\"p\", \"eve\", \"data3\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\nor\nvar added = await e.AddNamedPolicyAsync(\"p\", \"eve\", \"data3\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_named_policy(\"p\", vec![\"eve\".to_owned(), \"data3\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in PHP\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in PHP.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$roles = $e->getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in .NET\nDESCRIPTION: Command to add Casbin.NET package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casbin.NET\n```\n\n----------------------------------------\n\nTITLE: Batch Enforce Implementation in Java\nDESCRIPTION: Example of using batchEnforce() in Java to process multiple permission requests simultaneously and return results as a List of Boolean values.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/DataPermissions.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nList<Boolean> boolArray = e.batchEnforce(requests);\n```\n\n----------------------------------------\n\nTITLE: Using can() Method for Permission Checking\nDESCRIPTION: Example of using the can() method to check if a user has permission to perform an action on an object. The method returns a Promise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nresult = authorizer.can(\"write\", \"data1\");\nresult.then((success, failed) => {\n    if (success) {\n        console.log(\"you can write data1\");\n    } else {\n        console.log(\"you cannot write data1\");\n    }\n});\n// output: you can write data1\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Lua\nDESCRIPTION: Example of using a Casbin enforcer in Lua to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nif e:enforce(\"alice\", \"data1\", \"read\") then\n   -- permit alice to read data1\nelse\n   -- deny the request, show an error\nend\n\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policies in Casbin\nDESCRIPTION: Demonstrates how to add multiple authorization rules to a named policy using the AddNamedPolicies function. The operation is atomic, ensuring all rules are added only if they are consistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"jack\", \"data4\", \"read\"},\n\t[]string {\"katy\", \"data4\", \"write\"},\n\t[]string {\"leyo\", \"data4\", \"read\"},\n\t[]string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesAdded := e.AddNamedPolicies(\"p\", rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addNamedPolicies('p', rules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_added = e.add_named_policies(\"p\", rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n\tvec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_added := e.add_named_policies(\"p\", rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> rules = Arrays.asList(\n\tArrays.asList(\"jack\", \"data4\", \"read\"),\n\tArrays.asList(\"katy\", \"data4\", \"write\"),\n\tArrays.asList(\"leyo\", \"data4\", \"read\"),\n\tArrays.asList(\"ham\", \"data4\", \"write\")\n);\nboolean areRulesAdded = e.addNamedPolicies(\"p\", rules);\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for Kubernetes Webhook Authentication in Bash\nDESCRIPTION: This script generates the necessary certificates and keys for securing communication between the Kubernetes API server and the Casbin validation webhook.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/K8sAuthz.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gen_cert.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Named Grouping Policy in Casbin\nDESCRIPTION: AddNamedGroupingPolicy adds a named role inheritance rule to the current policy. It returns true if the rule is added successfully, false if the rule already exists.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nadded := e.AddNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst added = await e.addNamedGroupingPolicy('g', 'group1', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$added = $e->addNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nadded = e.add_named_grouping_policy(\"g\", \"group1\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\nor\nvar added = await e.AddNamedGroupingPolicyAsync(\"g\", \"group1\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_named_grouping_policy(\"g\", vec![\"group1\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Deleting All Roles for User in Domain\nDESCRIPTION: Removes all roles from a user within a specific domain using the DeleteRolesForUserInDomain method. Returns false if the user has no roles.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteRolesForUserInDomain(\"alice\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Adapter Methods in Go\nDESCRIPTION: Example implementation of optional adapter methods for cases where Auto-Save is not supported. These methods return 'not implemented' errors which are safely ignored by the Casbin enforcer.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// AddPolicy adds a policy rule to the storage.\nfunc (a *Adapter) AddPolicy(sec string, ptype string, rule []string) error {\n\treturn errors.New(\"not implemented\")\n}\n\n// RemovePolicy removes a policy rule from the storage.\nfunc (a *Adapter) RemovePolicy(sec string, ptype string, rule []string) error {\n\treturn errors.New(\"not implemented\")\n}\n\n// RemoveFilteredPolicy removes policy rules that match the filter from the storage.\nfunc (a *Adapter) RemoveFilteredPolicy(sec string, ptype string, fieldIndex int, fieldValues ...string) error {\n\treturn errors.New(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role (Python)\nDESCRIPTION: Python code showing how to get all users that inherit a specific role (g1).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n    rm.get_users(\"g1\")\n```\n\n----------------------------------------\n\nTITLE: Deleting All Roles for a User in Casbin RBAC\nDESCRIPTION: Removes all roles from a user using the DeleteRolesForUser function. Returns false if the user does not have any roles. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRolesForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRolesForUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRolesForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_roles_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deletedAtLeastOne = e.DeleteRolesForUser(\"alice\");\nor\nvar deletedAtLeastOne = await e.DeleteRolesForUserAsync(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted_at_least_one = e.delete_roles_for_user(\"alice\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deletedAtLeastOne = e.deleteRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom KeyMatch Function in Go\nDESCRIPTION: A sample implementation of the KeyMatch function that checks if a key matches a pattern with wildcards. It compares string equality or checks if the non-wildcard portions match.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Function.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc KeyMatch(key1 string, key2 string) bool {\n\ti := strings.Index(key2, \"*\")\n\tif i == -1 {\n\t\treturn key1 == key2\n\t}\n\n\tif len(key1) > i {\n\t\treturn key1[:i] == key2[:i]\n\t}\n\treturn key1 == key2[:i]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Permission for a User in Casbin RBAC\nDESCRIPTION: Assigns a permission to a user or role using the AddPermissionForUser function. Returns false if the user or role already has the permission. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ne.AddPermissionForUser(\"bob\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addPermissionForUser('bob', 'read')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->addPermissionForUser(\"bob\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.add_permission_for_user(\"bob\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddPermissionForUser(\"bob\", \"read\");\nor\nvar added = await e.AddPermissionForUserAsync(\"bob\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_permission_for_user(\"bob\", vec![\"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addPermissionForUser(\"bob\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Removing Named Role Inheritance Rule in Casbin\nDESCRIPTION: RemoveNamedGroupingPolicy removes a role inheritance rule from the current named policy. It takes the policy name and the rule parameters.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemoveNamedGroupingPolicy(\"g\", \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst removed = await e.removeNamedGroupingPolicy('g', 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removeNamedGroupingPolicy(\"g\", \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_named_grouping_policy(\"g\", \"alice\", \"data2_admin\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemoveNamedGroupingPolicy(\"g\", \"alice\");\nor \nvar removed = await e.RemoveNamedGroupingPolicyAsync(\"g\", \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_named_grouping_policy(\"g\", vec![\"alice\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removeNamedGroupingPolicy(\"g\", \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Role for User in Domain\nDESCRIPTION: Removes a role from a user within a specific domain using the DeleteRoleForUserInDomain method. Returns false if the user does not have the role.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteRoleForUserInDomain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean ok = e.deleteRoleForUserInDomain(\"alice\", \"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User in Casbin RBAC\nDESCRIPTION: Retrieves the roles assigned to a specific user using the GetRolesForUser function. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetRolesForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.getRolesForUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->getRolesForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\nroles = e.get_roles_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.GetRolesForUser(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet roles = e.get_roles_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grouping Policy in Casbin\nDESCRIPTION: Shows how to get all role inheritance rules in the policy. This returns the grouping policy which defines role hierarchies and user-role assignments.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngroupingPolicy := e.GetGroupingPolicy()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupingPolicy = await e.getGroupingPolicy()\n```\n\nLANGUAGE: php\nCODE:\n```\n$groupingPolicy = $e->getGroupingPolicy();\n```\n\nLANGUAGE: python\nCODE:\n```\ngrouping_policy = e.get_grouping_policy()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar groupingPolicy = e.GetGroupingPolicy();\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet grouping_policy = e.get_grouping_policy();\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> groupingPolicy = e.getGroupingPolicy();\n```\n\n----------------------------------------\n\nTITLE: GetAllRoles Return Value Example\nDESCRIPTION: Shows the return value format when retrieving all roles in Casbin RBAC.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CasbinRBACAndRBAC96.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n[admin]\n```\n\n----------------------------------------\n\nTITLE: RBAC API Operations\nDESCRIPTION: Examples of RBAC operations including role queries and permission management.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nroles, err := enforcer.GetRolesForUser(\"amber\")\nfmt.Println(roles) // [admin]\nusers, err := enforcer.GetUsersForRole(\"admin\")\nfmt.Println(users) // [amber abc]\n\nenforcer.HasRoleForUser(\"amber\", \"admin\") // true\n\nfmt.Println(enforcer.Enforce(\"bob\", \"data2\", \"write\")) // true\nenforcer.DeletePermission(\"data2\", \"write\")\nfmt.Println(enforcer.Enforce(\"bob\", \"data2\", \"write\")) // false\n```\n\n----------------------------------------\n\nTITLE: Adding Named Domain Matching Function to Enforcer (Go)\nDESCRIPTION: Demonstrates adding a domain matching function to a Casbin enforcer in Go, which allows for pattern matching in domain names.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    e, _ := casbin.NewEnforcer(\"path/to/model\", \"path/to/policy\")\n    e.AddNamedDomainMatchingFunc(\"g\", \"\", util.MatchKey)\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Node.js\nDESCRIPTION: Commands to install Casbin in a Node.js project using either NPM or Yarn package managers.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install casbin --save\n\n# Yarn\nyarn add casbin\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Policy Rules in Casbin\nDESCRIPTION: UpdatePolicies updates multiple old policy rules to new policy rules. It takes two parameters: a list of old policy rules and a list of new policy rules.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nupdated, err := e.UpdatePolicies([][]string{{\"eve\", \"data3\", \"read\"}, {\"jack\", \"data3\", \"read\"}}, [][]string{{\"eve\", \"data3\", \"write\"}, {\"jack\", \"data3\", \"write\"}})\n```\n\nLANGUAGE: Python\nCODE:\n```\nold_rules = [[\"eve\", \"data3\", \"read\"], [\"jack\", \"data3\", \"read\"]]\nnew_rules = [[\"eve\", \"data3\", \"write\"], [\"jack\", \"data3\", \"write\"]]\n\nupdated = e.update_policies(old_rules, new_rules)\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific Policies in Casbin\nDESCRIPTION: Example of policy rules with domain specification. Shows how to assign permissions to roles in specific domains and how to assign users to domain-specific roles.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomains.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\np, admin, tenant1, data1, read\np, admin, tenant2, data2, read\n\ng, alice, admin, tenant1\ng, alice, user, tenant2\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User (Go)\nDESCRIPTION: Retrieves all roles that a user inherits in a specific domain in Go. This gets all roles that u1 inherits in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n    rm.GetRoles(\"u1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Batch Policy Updates Example\nDESCRIPTION: Demonstration of batch policy updates using UpdatePolicies API.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenforcer.UpdatePolicies([][]string{{\"eve\", \"data3\", \"read\"}, {\"jack\", \"data3\", \"read\"}}, [][]string{{\"eve\", \"data3\", \"write\"}, {\"jack\", \"data3\", \"write\"}})\n```\n\n----------------------------------------\n\nTITLE: Initializing Distributed Enforcer in Go\nDESCRIPTION: Creates a new DistributedEnforcer instance that wraps SyncedEnforcer for use with dispatchers. This initialization requires a model configuration file and a policy file as parameters.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Dispatchers.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    e, _ := casbin.NewDistributedEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Checking User-Role Assignment in Casbin RBAC\nDESCRIPTION: Determines whether a user has a specific role using the HasRoleForUser function. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres := e.HasRoleForUser(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.hasRoleForUser('alice', 'data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->hasRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_role_for_user(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.HasRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_role_for_user(\"alice\", \"data1_admin\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean res = e.hasRoleForUser(\"alice\", \"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Adding Policy Rule in Casbin\nDESCRIPTION: Shows how to add an authorization rule to the current policy. The function returns true if the rule was added successfully, and false if the rule already exists and was not added.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nadded := e.AddPolicy('eve', 'data3', 'read')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['eve', 'data3', 'read']\nconst added = await e.addPolicy(...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$added = $e->addPolicy('eve', 'data3', 'read');\n```\n\nLANGUAGE: python\nCODE:\n```\nadded = e.add_policy(\"eve\", \"data3\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddPolicy(\"eve\", \"data3\", \"read\");\nor\nvar added = await e.AddPolicyAsync(\"eve\", \"data3\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_policy(vec![\"eve\".to_owned(), \"data3\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addPolicy(\"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Using addNamedMatchingFunc with KeyMatch in Casbin (Node.js)\nDESCRIPTION: Node.js example showing how to add a key matching function to RoleManager, enabling wildcard support in role names. It adds a policy with a wildcard and checks for role inheritance.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    await e.addNamedMatchingFunc('g', Util.keyMatchFunc);\n    await e.addGroupingPolicies([['*', 'admin', 'domain1']]);\n    await e.getRoleManager().hasLink('bob', 'admin', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Updating Policy Rule in Casbin\nDESCRIPTION: UpdatePolicy updates an old policy rule to a new policy rule. It takes two parameters: the old policy rule and the new policy rule.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nupdated, err := e.UpdatePolicy([]string{\"eve\", \"data3\", \"read\"}, []string{\"eve\", \"data3\", \"write\"})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst update = await e.updatePolicy([\"eve\", \"data3\", \"read\"], [\"eve\", \"data3\", \"write\"]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nupdated = e.update_policy([\"eve\", \"data3\", \"read\"], [\"eve\", \"data3\", \"write\"])\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean updated = e.updatePolicy(Arrays.asList(\"eve\", \"data3\", \"read\"), Arrays.asList(\"eve\", \"data3\", \"write\"));\n```\n\n----------------------------------------\n\nTITLE: Batch Enforce Implementation in Go\nDESCRIPTION: Example of using BatchEnforce() in Go to process multiple permission requests simultaneously and return results as a boolean array.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/DataPermissions.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nboolArray, err := e.BatchEnforce(requests)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Users by Domain\nDESCRIPTION: Removes all users associated with a specific domain using the DeleteAllUsersByDomain method. Returns false if no domain is defined in the model.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteAllUsersByDomain(\"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Printing All Roles (Python)\nDESCRIPTION: Python code showing how to print all role information for debugging purposes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n    rm.print_roles()\n```\n\n----------------------------------------\n\nTITLE: ABAC Matcher with 'in' Operator\nDESCRIPTION: Demonstrates how to use the 'in' operator for ABAC (Attribute-Based Access Control) in Golang edition of Casbin. Requires array length greater than 1 to avoid panic.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/HowItWorks.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Named Policy in Casbin\nDESCRIPTION: Demonstrates how to get filtered authorization rules from a named policy. Parameters include the policy name, the field index to filter on (0-based), and the filter value.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfilteredNamedPolicy = e.GetFilteredNamedPolicy(\"p\", 0, \"bob\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filteredNamedPolicy = await e.getFilteredNamedPolicy('p', 0, 'bob')\n```\n\nLANGUAGE: php\nCODE:\n```\n$filteredNamedPolicy = $e->getFilteredNamedPolicy(\"p\", 0, \"bob\");\n```\n\nLANGUAGE: python\nCODE:\n```\nfiltered_named_policy = e.get_filtered_named_policy(\"p\", 0, \"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar filteredNamedPolicy = e.GetFilteredNamedPolicy(\"p\", 0, \"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet filtered_named_policy = e.get_filtered_named_policy(\"p\", 0, vec![\"bob\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> filteredNamedPolicy = e.getFilteredNamedPolicy(\"p\", 0, \"bob\");\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Model in Casbin Configuration\nDESCRIPTION: A Casbin model configuration defining a Role-Based Access Control model with request definitions, policy definitions, role definitions, policy effect, and matchers for evaluating authorization requests.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\n```\n\n----------------------------------------\n\nTITLE: CSV Policy with Escaped Quotes\nDESCRIPTION: Examples showing how to properly escape double quotes in CSV policies. Double quotes within fields must be doubled up for proper escaping.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PolicyStorage.md#2025-04-09_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data, \"r.act in (\"\"get\"\", \"\"post\"\")\"\t\t--correct\np, alice, data, \"r.act in (\"get\", \"post\")\"\t\t\t--incorrect (should use \"\" to escape \"\")\n```\n\n----------------------------------------\n\nTITLE: Using AutoLoad Functions in Casbin for Multi-threading\nDESCRIPTION: Functions for enabling and disabling automatic policy loading in a multi-threaded Casbin environment. StartAutoLoadPolicy() initiates periodic policy refreshes from the database, while StopAutoLoadPolicy() terminates this automatic updating.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/MultiThreading.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStartAutoLoadPolicy()\nStopAutoLoadPolicy()\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Lua\nDESCRIPTION: Commands to install Casbin in Lua using luarocks package manager, with optional local installation flag.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nluarocks install casbin  \n```\n\nLANGUAGE: bash\nCODE:\n```\nluarocks install casbin  --local\n```\n\n----------------------------------------\n\nTITLE: ACL Policy Rules Example\nDESCRIPTION: Demonstrates how to define access control rules in Casbin's policy format, showing permissions for different users to access specific resources.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/HowItWorks.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\n```\n\n----------------------------------------\n\nTITLE: Domain Pattern Matching in Node.js\nDESCRIPTION: Sets up domain-specific pattern matching for RBAC using keyMatch2Func in Node.js environment.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithPattern.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addNamedDomainMatchingFunc('g', Util.keyMatch2Func);\n```\n\n----------------------------------------\n\nTITLE: Casbin Website Directory Structure\nDESCRIPTION: Overview of the Casbin website project's directory structure, showing key folders and files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncasbin-website/\n├── docs/\n│   ├── assets/\n│   ├── accessibility.md\n│   └── ...\n└── website/\n    ├── blog/\n    │   ├── assets/\n    │   ├── 2015-03-26-casbin-bringing-modern-web-techniques-to-mobile.md\n    │   └── ...\n    ├── core/\n    ├── pages/\n    │   └── en/\n    │       ├── ...\n    │       ├── index.js\n    │       └── ...\n    ├── static/\n    │   ├── css/\n    │   ├── img/\n    │   └── js/\n    ├── versioned_docs/\n    │   ├── version-0.5/\n    │   └── ...\n    ├── versioned_sidebars/\n    │   ├── version-0.5-sidebars.json\n    │   └── ...\n    ├── showcase.json\n    ├── sidebars.json\n    ├── siteConfig.js\n    └── versions.json\n```\n\n----------------------------------------\n\nTITLE: Starting the Authorization Server\nDESCRIPTION: Commands to build and start the Casbin authorization server that will handle authorization requests from Envoy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/EnvoyAuthz.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go build .\n$ ./authz\n```\n\n----------------------------------------\n\nTITLE: Deleting Role Inheritance Link (Go)\nDESCRIPTION: Removes an inheritance link between two roles in a specific domain in Go. This example deletes the link where u1 inherits from g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n    rm.DeleteLink(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Defining Role Definition with Domains in Casbin\nDESCRIPTION: Configuration for defining roles with domain support in Casbin. The third parameter in the role definition represents the domain/tenant name.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomains.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[role_definition]\ng = _, _, _\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in .NET\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in C#.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nvar roles = e.GetRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Role Inheritance Link (Node.js)\nDESCRIPTION: Node.js example for removing a role inheritance relationship between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.deleteLink('u1', 'g1', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Custom Function for Casbin Integration\nDESCRIPTION: Function wrapper that converts a custom function to the interface format required by Casbin. It takes variable arguments and returns an interface{} type and error.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Function.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc KeyMatchFunc(args ...interface{}) (interface{}, error) {\n\tname1 := args[0].(string)\n\tname2 := args[1].(string)\n\n\treturn (bool)(KeyMatch(name1, name2)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying an Effector in Casbin\nDESCRIPTION: This snippet shows how to deploy an Effector interface in Casbin. It initializes an Effector variable and calls the MergeEffects function to process policy effects based on the provided expression.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Effector.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar e Effector\nEffect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Built-in Matchers in Casbin\nDESCRIPTION: The standard format for built-in matcher functions in Casbin. Most functions take two string arguments and return a boolean indicating whether arg1 matches arg2.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Function.md#2025-04-09_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool function_name(string arg1, string arg2)\n```\n\n----------------------------------------\n\nTITLE: Python-based Admin Portal Projects\nDESCRIPTION: List of administrative portals built with Python frameworks like FastAPI and Django that use Casbin for authorization\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/AdminPortal.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Frontend | Backend | Description\n----|----|----|----|----\n[fastapi-mysql-generator](https://github.com/CoderCharm/fastapi-mysql-generator) | [@CoderCharm](https://github.com/CoderCharm) | None | FastAPI | FastAPI + MySQL + JWT + Casbin\n```\n\n----------------------------------------\n\nTITLE: Specifying Benchmark Environment for C++ Implementation\nDESCRIPTION: Describes the hardware specifications used for benchmarking the C++ implementation of Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Benchmark.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIntel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz, 4 cores, 4 threads\n```\n\n----------------------------------------\n\nTITLE: Deleting Role Inheritance Link (Python)\nDESCRIPTION: Python code showing how to delete a role inheritance link between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    rm.delete_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Casbin Kubernetes Authorization Middleware\nDESCRIPTION: Command to build a Docker image for the Casbin Kubernetes authorization middleware. The image is tagged with version 0.1 and can be deployed to a Kubernetes cluster.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/K8sAuthz.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n docker build -t casbin/k8s_authz:0.1 .\n```\n\n----------------------------------------\n\nTITLE: Logging format example in Casbin\nDESCRIPTION: Shows the default format of logs produced by Casbin when logging is enabled.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/LogError.md#2025-04-09_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2017/07/15 19:43:56 [Request: alice, data1, read ---> true]\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role (Node.js)\nDESCRIPTION: Node.js example for retrieving all users that inherit a specific role (g1).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.getUsers('g1');\n```\n\n----------------------------------------\n\nTITLE: Checking Grouping Policy in Casbin\nDESCRIPTION: HasGroupingPolicy determines whether a role inheritance rule exists in the current policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nhas := e.HasGroupingPolicy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst has = await e.hasGroupingPolicy('alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$has = $e->hasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_grouping_policy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar has = e.HasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_grouping_policy(vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean has = e.hasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AdSense Publisher Verification\nDESCRIPTION: This configuration line establishes the relationship between a website and Google AdSense for serving advertisements. It specifies the domain (google.com), publisher ID, relationship type (DIRECT), and the verification token.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/static/ads.txt#2025-04-09_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ngoogle.com, pub-3509678918753247, DIRECT, f08c47fec0942fa0\n```\n\n----------------------------------------\n\nTITLE: Getting RoleManager from Enforcer (Go)\nDESCRIPTION: Retrieves the current role manager from a Casbin enforcer in Go, which can then be used for direct role management operations.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    rm := e.GetRoleManager()\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Grouping Policies in Casbin\nDESCRIPTION: AddGroupingPolicies adds multiple role inheritance rules to the current policy. The operation is atomic, returning true if all rules are added successfully, false otherwise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"ham\", \"data4_admin\"},\n\t[]string {\"jack\", \"data5_admin\"},\n}\n\nareRulesAdded := e.AddGroupingPolicies(rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addGroupingPolicies(groupingRules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\n\nare_rules_added = e.add_grouping_policies(rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n\tvec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet areRulesAdded = e.add_grouping_policies(rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nString[][] groupingRules = {\n\t{\"ham\", \"data4_admin\"},\n\t{\"jack\", \"data5_admin\"}\n};\nboolean areRulesAdded = e.addGroupingPolicies(groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Printing All Roles (Go)\nDESCRIPTION: Prints all role information to the log in Go, useful for debugging role relationships.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n    rm.PrintRoles()\n```\n\n----------------------------------------\n\nTITLE: Getting RoleManager from Enforcer (Python)\nDESCRIPTION: Shows how to get the role manager from a Casbin enforcer in Python to access role management functions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    rm = e.get_role_manager()\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Webhook SSL Certificates\nDESCRIPTION: Command to create a Kubernetes secret that stores the SSL certificates used for secure communication between the API server and the Casbin webhook. This approach is recommended for production environments.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/K8sAuthz.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic casbin -n default \\\n  --from-file=key.pem=certs/casbin-key.pem \\\n  --from-file=cert.pem=certs/casbin-crt.pem\n```\n\n----------------------------------------\n\nTITLE: Loading Envoy Configuration\nDESCRIPTION: Command to start Envoy with the authorization configuration file and info-level logging.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/EnvoyAuthz.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$  envoy -c authz.yaml -l info\n```\n\n----------------------------------------\n\nTITLE: Enabling and disabling the Casbin enforcer in Go\nDESCRIPTION: Demonstrates how to dynamically enable or disable the Casbin enforcer at runtime. When disabled, Enforce() will always return true regardless of the policies.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/LogError.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n\n// Will return false.\n// By default, the enforcer is enabled.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n\n// Disable the enforcer at run-time.\ne.EnableEnforce(false)\n\n// Will return true for any request.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n\n// Enable the enforcer again.\ne.EnableEnforce(true)\n\n// Will return false.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin File Adapter in Rust\nDESCRIPTION: Shows how to create a Casbin enforcer in Rust using the file adapter for policy loading.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse casbin::prelude::*;\n\nlet mut e = Enforcer::new(\"examples/basic_model.conf\", \"examples/basic_policy.csv\").await?;\n```\n\n----------------------------------------\n\nTITLE: Removing Role Inheritance Rule in Casbin\nDESCRIPTION: RemoveGroupingPolicy removes a role inheritance rule from the current policy. It takes two parameters: the user and the role to be removed.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemoveGroupingPolicy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst removed = await e.removeGroupingPolicy('alice', 'data2_admin')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removeGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_grouping_policy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemoveGroupingPolicy(\"alice\", \"data2_admin\");\nor\nvar removed = await e.RemoveGroupingPolicyAsync(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_grouping_policy(vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removeGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Domains\nDESCRIPTION: Removes specified domains and all associated users and roles using the DeleteDomains method. Deletes all domains if no parameters are provided.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteDomains(\"domain1\", \"domain2\")\n```\n\n----------------------------------------\n\nTITLE: Sample Policy File to Database Mapping\nDESCRIPTION: Example showing how a policy file is mapped to database structure, with policy rules (p) and group assignments (g).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PolicyStorage.md#2025-04-09_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\np, data2_admin, data2, read\np, data2_admin, data2, write\ng, alice, admin\n```\n\n----------------------------------------\n\nTITLE: Updating Grouping Policies in Casbin\nDESCRIPTION: Shows how to update existing group policies by replacing old rules with new ones in the 'g' section.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nsucceed, err : = e.UpdateGroupingPolicy([]string{\"data3_admin\", \"data4_admin\"}, []string{\"admin\", \"data4_admin\"})\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean succeed = e.updateGroupingPolicy(Arrays.asList(\"data3_admin\", \"data4_admin\"), Arrays.asList(\"admin\", \"data4_admin\"));\n```\n\n----------------------------------------\n\nTITLE: Getting All Domains\nDESCRIPTION: Retrieves all domains using the GetAllDomains method.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nres, _ := e.GetAllDomains()\n```\n\n----------------------------------------\n\nTITLE: Creating a Casbin Policy for RBAC\nDESCRIPTION: A policy configuration that defines access rules for the RBAC model. It allows all users to access the homepage with GET, gives admin role full access to all resources, and assigns admin roles to users alice and bob.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\np, *, /, GET\np, admin, *, *\ng, alice, admin\ng, bob, admin\n```\n\n----------------------------------------\n\nTITLE: Using cannot() Method for Permission Checking\nDESCRIPTION: Example of using the cannot() method to check if a user is forbidden from performing an action on an object. Returns a Promise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nresult = authorizer.cannot(\"read\", \"data2\");\nresult.then((success, failed) => {\n    if (success) {\n        console.log(\"you cannot read data2\");\n    } else {\n        console.log(\"you can read data2\");\n    }\n});\n// output: you can read data2\n```\n\n----------------------------------------\n\nTITLE: Clearing RoleManager Data (Python)\nDESCRIPTION: Python example for clearing all data in the RoleManager and resetting it to the initial state.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    rm.clear()\n```\n\n----------------------------------------\n\nTITLE: Filtered Policy Example Data in CSV\nDESCRIPTION: Example CSV policy data showing access rules for users alice and bob\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, alice, book, read\np, bob, book, read\np, bob, book, write\np, alice, pen, get\np, bob, pen ,get\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Java\nDESCRIPTION: Example of using a Casbin enforcer in Java to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nString sub = \"alice\"; // the user that wants to access a resource.\nString obj = \"data1\"; // the resource that is going to be accessed.\nString act = \"read\"; // the operation that the user performs on the resource.\n\nif (e.enforce(sub, obj, act) == true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Casbin Enforcer in Java\nDESCRIPTION: Example of using a Casbin enforcer in Java to check if a user has permission to access a resource.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nString sub = \"alice\"; // the user that wants to access a resource.\nString obj = \"data1\"; // the resource that is going to be accessed.\nString act = \"read\"; // the operation that the user performs on the resource.\n\nif (e.enforce(sub, obj, act) == true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Policy with Escaped Commas\nDESCRIPTION: Examples showing how to properly format CSV policies when the data contains commas. The fields containing commas must be wrapped in double quotes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PolicyStorage.md#2025-04-09_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, alice, \"data1,data2\", read\t--correct\np, alice, data1,data2, read\t\t--incorrect (\"data1,data2\" should be a whole)\n```\n\n----------------------------------------\n\nTITLE: Getting Domains for a User (Go)\nDESCRIPTION: Retrieves all domains that a specific user has access to in Go. Returns both the list of domains and any error that occurred.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n    result, err := rm.GetDomains(name)\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function to Enforcer (Go)\nDESCRIPTION: Shows how to initialize a Casbin enforcer and add a named matching function to it. This allows for pattern matching in role names and relationships.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    e, _ := casbin.NewEnforcer(\"path/to/model\", \"path/to/policy\")\n    e.AddNamedMatchingFunc(\"g\", \"\", util.MatchKey)\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend API for Casbin.js in Go with Beego\nDESCRIPTION: Example implementation of a Go API endpoint using the Beego framework to provide permission data to Casbin.js frontend.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Router\nbeego.Router(\"api/casbin\", &controllers.APIController{}, \"GET:GetFrontendPermission\")\n\n// Controller\nfunc (c *APIController) GetFrontendPermission() {\n    // Get the visitor from the GET parameters. (The key is \"casbin_subject\")\n    visitor := c.Input().Get(\"casbin_subject\")\n    // `e` is an initialized instance of Casbin Enforcer\n    c.Data[\"perm\"] = casbin.CasbinJsGetPermissionForUser(e, visitor) \n    // Pass the data to the fronend.\n    c.ServeJSON()\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Casbin Validation Controller to Kubernetes Cluster\nDESCRIPTION: Command to apply the Kubernetes deployment configuration that sets up the Casbin validation webhook controller in the cluster.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/K8sAuthz.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading Filtered Policies in Casbin\nDESCRIPTION: Shows how to load filtered policies from file/database in Casbin. Includes examples of filtering by domain and other criteria.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nerr := e.LoadFilteredPolicy()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ok = await e.loadFilteredPolicy();\n```\n\nLANGUAGE: java\nCODE:\n```\ne.loadFilteredPolicy(new String[] { \"\", \"domain1\" });\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Filter:\n    P = []\n    G = []\n\nadapter = casbin.persist.adapters.FilteredAdapter(\"rbac_with_domains_policy.csv\")\ne = casbin.Enforcer(\"rbac_with_domains_model.conf\", adapter)\nfilter = Filter()\nfilter.P = [\"\", \"domain1\"]\nfilter.G = [\"\", \"\", \"domain1\"]\ne.load_filtered_policy(filter)\n```\n\n----------------------------------------\n\nTITLE: Python Framework Integrations for Casbin\nDESCRIPTION: List of Python web frameworks that support Casbin integration including Django, Flask, FastAPI and OpenStack. Each framework has corresponding plugins for implementing Casbin authorization.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Middlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDjango | A high-level Python Web framework, via plugin: django-casbin\nFlask | A microframework for Python based on Werkzeug, via plugin: flask-authz\nFastAPI | A modern, fast web framework for APIs, via plugin: fastapi-authz\nOpenStack | Open source cloud software, via plugin: openstack-patron\n```\n\n----------------------------------------\n\nTITLE: Lua Framework Integrations for Casbin\nDESCRIPTION: Lua-based frameworks OpenResty, Kong and APISIX with Casbin integration plugins for API gateway authorization.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Middlewares.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nOpenResty | NGINX-based web platform, via plugin: lua-resty-casbin\nKong | API Gateway, via plugin: kong-authz\nAPISIX | API gateway, via plugin: authz-casbin\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Delphi\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Delphi.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_34\n\nLANGUAGE: delphi\nCODE:\n```\nroles = e.rolesForEntity(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Priority Model in Casbin\nDESCRIPTION: Configuration for explicit priority implementation where priority is defined as a numeric value in the policy definition. Lower priority values have higher precedence.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PriorityModel.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = priority, sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = priority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: EnforceContext Implementation in Go\nDESCRIPTION: Go implementation of EnforceContext structure for specifying request, policy, effect and matcher types.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nEnforceContext{\"r2\",\"p2\",\"e2\",\"m2\"}\ntype EnforceContext struct {\n\tRType string\n\tPType string\n\tEType string\n\tMType string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Role Inheritance Relations in Casbin\nDESCRIPTION: This snippet shows how to define RBAC role inheritance relations in the Casbin model configuration. It demonstrates setting up multiple RBAC systems using 'g' and 'g2' variables.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBAC.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[role_definition]\ng = _, _\ng2 = _, _\n```\n\n----------------------------------------\n\nTITLE: EnforceContext Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of EnforceContext class for specifying enforcement types.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Named Role Inheritance Rule in Casbin\nDESCRIPTION: RemoveFilteredNamedGroupingPolicy removes a role inheritance rule from the current named policy based on specified field filters. It takes the policy name, starting field index, and the field values to filter.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemoveFilteredNamedGroupingPolicy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst removed = await e.removeFilteredNamedGroupingPolicy('g', 0, 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removeFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_filtered_named_grouping_policy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemoveFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\nor\nvar removed = await e.RemoveFilteredNamedGroupingPolicyAsync(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_filtered_named_groupingPolicy(\"g\", 0, vec![\"alice\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removeFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Checking in Casbin Matchers\nDESCRIPTION: This snippet shows how to configure a matcher in Casbin to check role memberships. The matcher uses g() function to verify if the requester has the appropriate role defined in the policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBAC.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom logger for Casbin in Go\nDESCRIPTION: Shows a complete implementation of a custom logger that implements the Logger interface for Casbin. The example demonstrates how to create a DefaultLogger that logs model, enforcement decisions, policies, and roles.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/LogError.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n)\n\n// DefaultLogger is the implementation for a Logger using golang log.\ntype DefaultLogger struct {\n\tenabled bool\n}\n\nfunc (l *DefaultLogger) EnableLog(enable bool) {\n\tl.enabled = enable\n}\n\nfunc (l *DefaultLogger) IsEnabled() bool {\n\treturn l.enabled\n}\n\nfunc (l *DefaultLogger) LogModel(model [][]string) {\n\tif !l.enabled {\n\t\treturn\n\t}\n\tvar str strings.Builder\n\tstr.WriteString(\"Model: \")\n\tfor _, v := range model {\n\t\tstr.WriteString(fmt.Sprintf(\"%v\\n\", v))\n\t}\n\n\tlog.Println(str.String())\n}\n\nfunc (l *DefaultLogger) LogEnforce(matcher string, request []interface{}, result bool, explains [][]string) {\n\tif !l.enabled {\n\t\treturn\n\t}\n\n\tvar reqStr strings.Builder\n\treqStr.WriteString(\"Request: \")\n\tfor i, rval := range request {\n\t\tif i != len(request)-1 {\n\t\t\treqStr.WriteString(fmt.Sprintf(\"%v, \", rval))\n\t\t} else {\n\t\t\treqStr.WriteString(fmt.Sprintf(\"%v\", rval))\n\t\t}\n\t}\n\treqStr.WriteString(fmt.Sprintf(\" ---> %t\\n\", result))\n\n\treqStr.WriteString(\"Hit Policy: \")\n\tfor i, pval := range explains {\n\t\tif i != len(explains)-1 {\n\t\t\treqStr.WriteString(fmt.Sprintf(\"%v, \", pval))\n\t\t} else {\n\t\t\treqStr.WriteString(fmt.Sprintf(\"%v \\n\", pval))\n\t\t}\n\t}\n\n\tlog.Println(reqStr.String())\n}\n\nfunc (l *DefaultLogger) LogPolicy(policy map[string][][]string) {\n\tif !l.enabled {\n\t\treturn\n\t}\n\n\tvar str strings.Builder\n\tstr.WriteString(\"Policy: \")\n\tfor k, v := range policy {\n\t\tstr.WriteString(fmt.Sprintf(\"%s : %v\\n\", k, v))\n\t}\n\n\tlog.Println(str.String())\n}\n\nfunc (l *DefaultLogger) LogRole(roles []string) {\n\tif !l.enabled {\n\t\treturn\n\t}\n\n\tlog.Println(\"Roles: \", roles)\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing RoleManager Data (Node.js)\nDESCRIPTION: Shows how to clear all role relationships and reset the RoleManager in Node.js.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.clear();\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User (Node.js)\nDESCRIPTION: Node.js example for retrieving all roles that a user inherits in a specific domain. Gets roles for u1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.getRoles('u1', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Setting Logger for RoleManager (Go)\nDESCRIPTION: Sets a logger for the RoleManager to enable logging functionality. This example creates a default logger, enables it, and assigns it to the RoleManager.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n\tlogger := log.DefaultLogger{}\n\tlogger.EnableLog(true)\n\trm.SetLogger(&logger)\n\t_ = rm.PrintRoles()\n```\n\n----------------------------------------\n\nTITLE: Role Hierarchy Policy Rules in Casbin\nDESCRIPTION: Example policy rules demonstrating role hierarchy with inheritance and corresponding access permissions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PriorityModel.md#2025-04-09_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, root, data1, read, deny\np, admin, data1, read, deny\n\np, editor, data1, read, deny\np, subscriber, data1, read, deny\n\np, jane, data1, read, allow\np, alice, data1, read, allow\n\ng, admin, root\n\ng, editor, admin\ng, subscriber, admin\n\ng, jane, editor\ng, alice, subscriber\n```\n\n----------------------------------------\n\nTITLE: Example of Role-Based Policy Rules in Casbin\nDESCRIPTION: This snippet demonstrates how to define policy rules with role assignments in Casbin. It shows a role assignment where 'alice' is given the 'data2_admin' role, which has permission to read 'data2'.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBAC.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\np, data2_admin, data2, read\ng, alice, data2_admin\n```\n\n----------------------------------------\n\nTITLE: Setting different loggers for Casbin enforcers in Go\nDESCRIPTION: Demonstrates how to set different loggers for different enforcer instances, allowing customized logging for each enforcer.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/LogError.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Set a default logger as enforcer e1's logger.\n// This operation could also be seen as changing the logger of e1 at run-time.\ne1.SetLogger(&Log.DefaultLogger{})\n\n// Set another logger as enforcer e2's logger.\ne2.SetLogger(&YouOwnLogger)\n\n// Set your logger when initialize enforcer e3.\ne3, _ := casbin.NewEnforcer(\"examples/rbac_model.conf\", a, logger)\n```\n\n----------------------------------------\n\nTITLE: Downloading Translations from Crowdin\nDESCRIPTION: Command to download translations from Crowdin for the Casbin website project.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncrowdin --config ../crowdin.yaml download -b master\n```\n\n----------------------------------------\n\nTITLE: Multi-line Matcher Configuration\nDESCRIPTION: Shows how to write matcher rules across multiple lines using the continuation character in Casbin configuration.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/HowItWorks.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\ \n  && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Creating Global Model and Policy in Plugin Metadata\nDESCRIPTION: A cURL command to set up a global Casbin model and policy in the APISIX plugin metadata. This allows sharing the same authorization configuration across multiple routes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/plugin_metadata/authz-casbin -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -i -X PUT -d '\n{\n\"model\": \"[request_definition]\\nr = sub, obj, act\\n\\n[policy_definition]\\np = sub, obj, act\\n\\n[role_definition]\\ng = _, _\\n\\n[policy_effect]\\ne = some(where (p.eft == allow))\\n\\n[matchers]\\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\",\\n\\n\"policy\": \"p, *, /, GET\\np, admin, *, *\\ng, alice, admin\\ng, bob, admin\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Printing All Roles (Node.js)\nDESCRIPTION: Node.js example for printing all role information, which is useful for debugging.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.printRoles();\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Rust\nDESCRIPTION: Code to initialize a Casbin enforcer in Rust using model.conf and policy.csv files with different async runtimes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse casbin::prelude::*;\n\n// If you use async_td as async executor\n#[cfg(feature = \"runtime-async-std\")]\n#[async_std::main]\nasync fn main() -> Result<()> {\n    let mut e = Enforcer::new(\"path/to/model.conf\", \"path/to/policy.csv\").await?;\n    Ok(())\n}\n\n// If you use tokio as async executor\n#[cfg(feature = \"runtime-tokio\")]\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let mut e = Enforcer::new(\"path/to/model.conf\", \"path/to/policy.csv\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Rust\nDESCRIPTION: Code to initialize a Casbin enforcer in Rust using model.conf and policy.csv files with different async runtimes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse casbin::prelude::*;\n\n// If you use async_td as async executor\n#[cfg(feature = \"runtime-async-std\")]\n#[async_std::main]\nasync fn main() -> Result<()> {\n    let mut e = Enforcer::new(\"path/to/model.conf\", \"path/to/policy.csv\").await?;\n    Ok(())\n}\n\n// If you use tokio as async executor\n#[cfg(feature = \"runtime-tokio\")]\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let mut e = Enforcer::new(\"path/to/model.conf\", \"path/to/policy.csv\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Java with Maven\nDESCRIPTION: Maven dependency configuration to add Casbin to a Java project.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://mvnrepository.com/artifact/org.casbin/jcasbin -->\n<dependency>\n    <groupId>org.casbin</groupId>\n    <artifactId>jcasbin</artifactId>\n    <version>1.x.y</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Python\nDESCRIPTION: Command to install Casbin package in Python using pip package manager.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install casbin\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Lua\nDESCRIPTION: Code to create a new Casbin enforcer in Lua using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal Enforcer = require(\"casbin\")\nlocal e = Enforcer:new(\"path/to/model.conf\", \"path/to/policy.csv\") -- The Casbin Enforcer\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Lua\nDESCRIPTION: Code to create a new Casbin enforcer in Lua using model.conf and policy.csv files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal Enforcer = require(\"casbin\")\nlocal e = Enforcer:new(\"path/to/model.conf\", \"path/to/policy.csv\") -- The Casbin Enforcer\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin.js via npm or yarn\nDESCRIPTION: Commands for installing Casbin.js and dependencies using npm or yarn package managers.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casbin.js\nnpm install casbin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add casbin.js\n```\n\n----------------------------------------\n\nTITLE: Adding a Role for a User in Casbin RBAC\nDESCRIPTION: Assigns a role to a user using the AddRoleForUser function. Returns false if the user already has the role. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne.AddRoleForUser(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addRoleForUser('alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->addRoleForUser(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.add_role_for_user(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddRoleForUser(\"alice\", \"data2_admin\");\nor\nvar added = await e.AddRoleForUserAsync(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_role_for_user(\"alice\", \"data2_admin\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addRoleForUser(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Getting All Subjects in Casbin RBAC\nDESCRIPTION: Shows how to retrieve all subjects (both users and roles) using the GetAllSubjects() method in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CasbinRBACAndRBAC96.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.GetAllSubjects()\n```\n\n----------------------------------------\n\nTITLE: Go-based Admin Portal Projects\nDESCRIPTION: List of administrative portals built with Go that utilize Casbin for authorization, including frameworks like Gin, Beego, and Echo\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/AdminPortal.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Frontend | Backend | Description\n----|----|----|----|----\n[Casdoor](https://casdoor.org) | Casbin | React + Ant Design | Beego | Based on Beego + XORM + React\n[go-admin-team/go-admin](https://github.com/go-admin-team/go-admin) | [@go-admin-team](https://github.com/go-admi-team) | Vue + Element UI | Gin | go-admin Based on Gin + Casbin + GORM\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role for a User in Casbin RBAC\nDESCRIPTION: Removes a role from a user using the DeleteRoleForUser function. Returns false if the user does not have the role. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRoleForUser(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRoleForUser('alice', 'data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_role_for_user(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteRoleForUser(\"alice\", \"data1_admin\");\nor\nvar deleted = await e.DeleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_role_for_user(\"alice\", \"data1_admin\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role in Casbin RBAC\nDESCRIPTION: Removes a role using the DeleteRole function. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRole(\"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRole(\"data2_admin\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRole(\"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_role(\"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteRole(\"data2_admin\");\nor\nvar deleted = await e.DeleteRoleAsync(\"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_role(\"data2_admin\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\ne.deleteRole(\"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Listing Go-based Cloud Native Authorization Middlewares\nDESCRIPTION: A table listing Go-based cloud native projects that use Casbin for authorization in Kubernetes, Istio/Envoy, and KubeSphere environments. It includes project names, authors, and brief descriptions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CloudNative.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Description\n---- | ---- | ----\n[k8s-authz](https://github.com/casbin/k8s-authz) | Casbin | Authorization middleware For [Kubernetes](https://kubernetes.io/)\n[envoy-authz](https://github.com/casbin/envoy-authz) | Casbin | Authorization middleware For [Istio](https://istio.io/) and [Envoy](https://envoyproxy.io/)\n[kubesphere-authz](https://github.com/casbin/kubesphere-authz) | Casbin | Authorization middleware For [kubeSphere](https://kubesphere.io/)\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Role Inheritance Rules in Casbin\nDESCRIPTION: RemoveGroupingPolicies removes multiple role inheritance rules from the current policy atomically. It returns true if all rules are removed successfully, false otherwise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n\t\t\t\t[]string {\"ham\", \"data4_admin\"},\n\t\t\t\t[]string {\"jack\", \"data5_admin\"},\n\t\t}\n\nareRulesRemoved := e.RemoveGroupingPolicies(rules)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeGroupingPolicies(groupingRules);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n\tvec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet are_rules_removed = e.remove_grouping_policies(rules).await?;\n```\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\n\nare_rules_removed = e.remove_grouping_policies(rules)\n```\n\nLANGUAGE: Java\nCODE:\n```\nString[][] groupingRules = {\n\t{\"ham\", \"data4_admin\"},\n\t{\"jack\", \"data5_admin\"}\n};\nboolean areRulesRemoved = e.removeGroupingPolicies(groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin File Adapter in PHP\nDESCRIPTION: Demonstrates initializing a Casbin enforcer in PHP using the file adapter for CSV policy files.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Casbin\\Enforcer;\n\n$e = new Enforcer('examples/basic_model.conf', 'examples/basic_policy.csv');\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Integrations for Casbin\nDESCRIPTION: Cloud identity provider integrations including Okta and Auth0 with Casbin for authorization management.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Middlewares.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nOkta | Identity platform, via plugin: casbin-spring-boot-demo\nAuth0 | Authentication platform, via plugin: casbin-auth0-rbac\n```\n\n----------------------------------------\n\nTITLE: Specifying Benchmark Environment for Go Implementation\nDESCRIPTION: Describes the hardware specifications used for benchmarking the Go implementation of Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Benchmark.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIntel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, 2601 Mhz, 4 Core(s), 8 Logical Processor(s)\n```\n\n----------------------------------------\n\nTITLE: EnforceContext Implementation in Java\nDESCRIPTION: Java implementation of EnforceContext class for managing enforcement types.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nEnforceContext enforceContext = new EnforceContext(\"2\");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = \"p\" + suffix;\n      this.eType = \"e\" + suffix;\n      this.mType = \"m\" + suffix;\n      this.rType = \"r\" + suffix;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java-based Admin Portal Projects\nDESCRIPTION: List of administrative portals built with Java and Spring Boot that implement Casbin authorization\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/AdminPortal.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Frontend | Backend | Description\n----|----|----|----|----\n[spring-boot-web](https://github.com/BazookaW/spring-boot-web) | [@BazookaW](https://github.com/BazookaW) | None | SpringBoot | Admin portal based on SpringBoot 2.0 + MyBatisPlus + Casbin\n```\n\n----------------------------------------\n\nTITLE: Policy Management Operations\nDESCRIPTION: Examples of adding, removing, updating and checking policies using Management APIs.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nenforcer,err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n   fmt.Printf(\"Error, details: %s\\n\", err)\n}\n\nenforcer.AddPolicy(\"added_user\", \"data1\", \"read\")\nhasPolicy := enforcer.HasPolicy(\"added_user\", \"data1\", \"read\")\nfmt.Println(hasPolicy)\n\nenforcer.RemovePolicy(\"alice\", \"data1\", \"read\")\nhasPolicy = enforcer.HasPolicy(\"alice\", \"data1\", \"read\")\nfmt.Println(hasPolicy)\n\nenforcer.UpdatePolicy([]string{\"added_user\", \"data1\", \"read\"}, []string{\"added_user\", \"data1\", \"write\"})\nhasPolicy = enforcer.HasPolicy(\"added_user\", \"data1\", \"read\")\nfmt.Println(hasPolicy)\nhasPolicy = enforcer.HasPolicy(\"added_user\", \"data1\", \"write\")\nfmt.Println(hasPolicy)\n```\n\n----------------------------------------\n\nTITLE: Creating Matchers for Domain-Specific RBAC in Casbin\nDESCRIPTION: Matcher configuration that checks if the user has the required role in the specified domain, then verifies if domain, object, and action all match between request and policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomains.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Listing Node.js-based Cloud Native Authorization Middlewares\nDESCRIPTION: A table listing Node.js-based cloud native projects that use Casbin for authorization. It includes the ODPF Shield project, which is a cloud-native role-based authorization aware reverse-proxy service.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CloudNative.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Description\n---- | ---- | ----\n[ODPF Shield](https://github.com/odpf/shield) | [Open Data Platform](https://github.com/odpf) | ODPF Shield is cloud native role-based authorization aware reverse-proxy service.\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Permissions For User with Casbin\nDESCRIPTION: The GetImplicitPermissionsForUser function retrieves both direct permissions and permissions from inherited roles for a user. This is more comprehensive than GetPermissionsForUser().\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ne.GetImplicitPermissionsForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.getImplicitPermissionsForUser(\"alice\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->getImplicitPermissionsForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.get_implicit_permissions_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar implicitPermissions = e.GetImplicitPermissionsForUser(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\ne.get_implicit_permissions_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> implicitPermissions = e.getImplicitPermissionsForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin Authorization in GraphQL Resolver (JavaScript)\nDESCRIPTION: This snippet demonstrates how to integrate Casbin authorization logic within a GraphQL resolver function. It shows a PostType definition with a body field that uses a postRepository to handle authorization checks.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GraphQLMiddlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Casbin authorization logic lives inside postRepository\nvar postRepository = require('postRepository');\n \nvar postType = new GraphQLObjectType({\n  name: 'Post',\n  fields: {\n    body: {\n      type: GraphQLString,\n      resolve: (post, args, context, { rootValue }) => {\n        return postRepository.getBody(context.user, post);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: LoadFilteredPolicy Filter Structure\nDESCRIPTION: JSON structure example for the filter parameter used in LoadFilteredPolicy method. Shows how to structure policy filters for different rule types.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Adapters.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"p\":[ [ \"alice\" ], [ \"bob\" ] ],\n    \"g\":[ [ \"\", \"book_group\" ], [ \"\", \"pen_group\" ] ],\n    \"g2\":[ [ \"alice\" ] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Matcher Definition in Casbin\nDESCRIPTION: Simple matcher that checks exact equality between request and policy parameters.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/SyntaxForModels.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Go Enforcer Types in Casbin\nDESCRIPTION: A table listing the different enforcer types available in Casbin Go implementation, including their authors and descriptions. Each enforcer provides different capabilities such as basic policy operations, caching, distributed support, and thread safety.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Enforcers.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEnforcer | Author | Description\n----|------|------\n[Enforcer](https://github.com/casbin/casbin/blob/master/enforcer.go)  | Casbin | `Enforcer` is the basic structure for users to interact with Casbin policies and models. You can find more details of `Enforcer`'s API at [here](/docs/en/management-api).\n[CachedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_cached.go) | Casbin | `CachedEnforcer` is based on `Enforcer`. It supports to cache the evaluation result of a request in memory by a map and clear caches in a specified expire time. Moreover, it is guaranted to be thread-safe by a Read-Write lock. You can use `EnableCache` to enable to cache evaluation results (default is enabled). `CachedEnforcer`'s other API is the same as `Enforcer`'s.\n[DistributedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_distributed.go) | Casbin | `DistributedEnforcer` supports multiple instances in distributed clusters. It wraps `SyncedEnforcer` for dispatcher. You can find more details about dispather at [here](/docs/en/dispatchers#distributedenforcer).\n[SyncedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_synced.go) | Casbin | `SyncedEnforer` is based on `Enforcer` and provides synchronized access. It is thread-safe.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version of Casbin Website\nDESCRIPTION: Command to create a new version of the Casbin website documentation using Yarn.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn version <version>\n```\n\n----------------------------------------\n\nTITLE: PHP-based Admin Portal Projects\nDESCRIPTION: List of administrative portals built with PHP frameworks like Laravel and ThinkPHP that implement Casbin authorization\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/AdminPortal.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Frontend | Backend | Description\n----|----|----|----|----\n[Tadmin](https://github.com/techoner/tadmin) | [@techoner](https://github.com/techoner) | AmazeUI | ThinkPHP | Non-intrusive backend framework based on ThinkPHP 5.1+\n```\n\n----------------------------------------\n\nTITLE: Adding Domain Pattern Matching in Go\nDESCRIPTION: Configures domain-specific pattern matching using KeyMatch2 function for RBAC with domains support.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithPattern.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedDomainMatchingFunc(\"g\",\"KeyMatch2\",util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Adding Casbin License to New Files\nDESCRIPTION: The standard Apache 2.0 license header that must be included at the top of any new files contributed to Casbin projects. This ensures proper copyright attribution and licensing consistency across the codebase.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Contributing.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Copyright 2021 The casbin Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Loading Casbin Model from String in Go\nDESCRIPTION: Shows how to load a Casbin model from a multi-line string in Go. This method eliminates the need for a separate model file and allows for inline model definition.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ModelStorage.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/casbin/casbin/v2\"\n\t\"github.com/casbin/casbin/v2/model\"\n)\n\n// Initialize the model from a string.\ntext :=\n`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\nm, _ := model.NewModelFromString(text)\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid files.\na := fileadapter.NewAdapter(\"examples/rbac_policy.csv\")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n```\n\n----------------------------------------\n\nTITLE: Rust Framework Integrations for Casbin\nDESCRIPTION: Rust web framework integrations including Actix, Actix-web and Rocket with their respective Casbin authorization plugins.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Middlewares.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nActix | Rust actors framework, via plugin: actix-casbin\nActix web | Fast rust web framework, via plugin: actix-casbin-auth\nRocket | Web framework for Rust, via plugin: rocket-authz\n```\n\n----------------------------------------\n\nTITLE: Loading Incremental Filtered Policies in Casbin\nDESCRIPTION: Demonstrates how to append filtered policies from file/database in Casbin without replacing existing ones.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nerr := e.LoadIncrementalFilteredPolicy()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ok = await e.loadIncrementalFilteredPolicy();\n```\n\nLANGUAGE: python\nCODE:\n```\nadapter = casbin.persist.adapters.FilteredAdapter(\"rbac_with_domains_policy.csv\")\ne = casbin.Enforcer(\"rbac_with_domains_model.conf\", adapter)\nfilter = Filter()\nfilter.P = [\"\", \"domain1\"]\nfilter.G = [\"\", \"\", \"domain1\"]\ne.load_increment_filtered_policy(filter)\n```\n\n----------------------------------------\n\nTITLE: .NET Framework Integrations for Casbin\nDESCRIPTION: ASP.NET Core integrations for Casbin including official plugin Casbin.AspNetCore and a demo implementation CasbinACL-aspNetCore.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Middlewares.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nASP.NET Core | Open-source framework for cloud applications, via plugin: Casbin.AspNetCore\nASP.NET Core | Demo implementation via plugin: CasbinACL-aspNetCore\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin.js in Manual Mode\nDESCRIPTION: Code to initialize Casbin.js in manual mode where permission rules are set manually in the frontend application.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst casbinjs = require(\"casbin.js\");\n// Set the user's permission:\n// He/She can read `data1` and `data2` objects and can write `data1` object\nconst permission = {\n    \"read\": [\"data1\", \"data2\"],\n    \"write\": [\"data1\"]\n}\n\n// Run casbin.js in manual mode, which requires you to set the permission manually.\nconst authorizer = new casbinjs.Authorizer(\"manual\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Scalable ABAC Model with eval() Function\nDESCRIPTION: A Casbin model configuration that uses the eval() function to support complex ABAC rules in policies rather than the model itself. This approach improves maintainability for large rulesets.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ABAC.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub_rule, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = eval(p.sub_rule) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: GetAllSubjects Return Value Example\nDESCRIPTION: Shows the return value format when retrieving all subjects in Casbin RBAC.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CasbinRBACAndRBAC96.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n[admin alice]\n```\n\n----------------------------------------\n\nTITLE: Checking Role Inheritance Link (Python)\nDESCRIPTION: Python code showing how to check for a role inheritance link between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n    rm.has_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Getting All Roles in Casbin RBAC\nDESCRIPTION: Demonstrates how to retrieve only roles using the GetAllRoles() method in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CasbinRBACAndRBAC96.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne.GetAllRoles()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Named Grouping Policy in Casbin\nDESCRIPTION: Demonstrates how to get filtered role inheritance rules from a named grouping policy. Parameters include the policy name, the field index to filter on (0-based), and the filter value.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nnamedGroupingPolicy := e.GetFilteredNamedGroupingPolicy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst namedGroupingPolicy = await e.getFilteredNamedGroupingPolicy('g', 0, 'alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$namedGroupingPolicy = $e->getFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\nnamed_grouping_policy = e.get_filtered_named_grouping_policy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar namedGroupingPolicy = e.GetFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet named_grouping_policy = e.get_filtered_named_groupingPolicy(\"g\", 0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> filteredNamedGroupingPolicy = e.getFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Removing Named Policies in Casbin\nDESCRIPTION: RemoveNamedPolicies removes authorization rules from the current named policy. The operation is atomic, and it returns true if all rules are successfully removed, false otherwise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"jack\", \"data4\", \"read\"},\n\t[]string {\"katy\", \"data4\", \"write\"},\n\t[]string {\"leyo\", \"data4\", \"read\"},\n\t[]string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesRemoved := e.RemoveNamedPolicies(\"p\", rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removeNamedPolicies('p', rules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_removed = e.remove_named_policies(\"p\", rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n\tvec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet areRulesRemoved = e.remove_named_policies(\"p\", rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> rules = Arrays.asList(\n\tArrays.asList(\"jack\", \"data4\", \"read\"),\n\tArrays.asList(\"katy\", \"data4\", \"write\"),\n\tArrays.asList(\"leyo\", \"data4\", \"read\"),\n\tArrays.asList(\"ham\", \"data4\", \"write\")\n);\nboolean areRulesRemoved = e.removeNamedPolicies(\"p\", rules);\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in Casbin RBAC\nDESCRIPTION: Removes a user using the DeleteUser function. Returns false if the user does not exist. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteUser(\"alice\");\nor\nvar deleted = await e.DeleteUserAsync(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_user(\"alice\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deleteUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Lua\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Lua.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nlocal roles = e:GetRolesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Checking Role Inheritance Link (Node.js)\nDESCRIPTION: Node.js example for checking if a role inheritance relationship exists between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.hasLink('u1', 'g1', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Filtered Policy Queries in Go\nDESCRIPTION: Examples of using GetFilteredPolicy method with different field indexes and values\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.GetFilteredPolicy(1, \"book\") // will return: [[alice book read] [bob book read] [bob book write]]\n\ne.GetFilteredPolicy(1, \"book\", \"read\") // will return: [[alice book read] [bob book read]]\n\ne.GetFilteredPolicy(0, \"alice\", \"\", \"read\") // will return: [[alice book read]]\n\ne.GetFilteredPolicy(0, \"alice\") // will return: [[alice book read] [alice pen get]]\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policy Rules\nDESCRIPTION: CSV policy file containing access control rules and role assignments for the RBAC system.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, admin, data1, read\np, admin, data1, write\np, admin, data2, read\np, admin, data2, write\np, alice, data1, read\np, bob, data2, write\ng, amber, admin\ng, abc, admin\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Named Role Inheritance Rules in Casbin\nDESCRIPTION: RemoveNamedGroupingPolicies removes multiple named role inheritance rules from the current policy atomically. It returns true if all rules are removed successfully, false otherwise.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"ham\", \"data4_admin\"},\n\t[]string {\"jack\", \"data5_admin\"},\n}\n\nareRulesRemoved := e.RemoveNamedGroupingPolicies(\"g\", rules)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeNamedGroupingPolicies('g', groupingRules);\n```\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\nare_rules_removed = e.remove_named_grouping_policies(\"g\", rules)\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n\tvec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet are_rules_removed = e.remove_named_grouping_policies(\"g\", rules).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nString[][] groupingRules = {\n\t{\"ham\", \"data4_admin\"},\n\t{\"jack\", \"data5_admin\"}\n};\nboolean areRulesRemoved = e.removeNamedGroupingPolicies(\"g\", groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Struct with Attributes for ABAC in Go\nDESCRIPTION: A Go struct definition that can be used as the object in ABAC rules. This struct has Name and Owner attributes that can be referenced in policy matchers.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ABAC.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype testResource struct {\n\tName  string\n\tOwner string\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Policies in Casbin\nDESCRIPTION: Shows how to remove authorization rules from the current policy using the RemoveFilteredPolicy function, which allows specifying field filters.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveFilteredPolicy(0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredPolicy(0, ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeFilteredPolicy(0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_filtered_policy(0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveFilteredPolicy(\"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemoveFilteredPolicyAsync(\"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_filtered_policy(0, vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeFilteredPolicy(0, \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Grouping Policy in Casbin\nDESCRIPTION: Demonstrates how to get filtered role inheritance rules from the policy. Parameters include the field index to filter on (0-based) and the filter value.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfilteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, \"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filteredGroupingPolicy = await e.getFilteredGroupingPolicy(0, 'alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$filteredGroupingPolicy = $e->getFilteredGroupingPolicy(0, \"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\nfiltered_grouping_policy = e.get_filtered_grouping_policy(0, \"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar filteredGroupingPolicy = e.GetFilteredGroupingPolicy(0, \"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet filtered_grouping_policy = e.get_filtered_grouping_policy(0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> filteredGroupingPolicy = e.getFilteredGroupingPolicy(0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Loading Casbin Model from .CONF File\nDESCRIPTION: Example of a Casbin model defined in a .CONF file, including request definition, policy definition, role definition, policy effect, and matchers. Also shows how to load this model file in Go code.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ModelStorage.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\nLANGUAGE: go\nCODE:\n```\ne := casbin.NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Management API Get Operations\nDESCRIPTION: Example of using Management APIs to retrieve policy information.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/APIOverview.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nenforcer,err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n\tfmt.Printf(\"Error, details: %s\\n\", err)\n}\nallSubjects := enforcer.GetAllSubjects()\nfmt.Println(allSubjects)\n```\n\n----------------------------------------\n\nTITLE: Adding Role Inheritance Link (Go)\nDESCRIPTION: Adds an inheritance link between two roles in a specific domain in Go. In this example, u1 inherits from g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n    rm.AddLink(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Users For Role with Casbin\nDESCRIPTION: The GetImplicitUsersForRole function gets all users inheriting a role, including indirect users through role hierarchies. Unlike GetUsersForRole(), this includes users with inherited roles.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nusers := e.GetImplicitUsersForRole(\"role:user\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = e.getImplicitUsersForRole(\"role:user\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> users = e.getImplicitUsersForRole(\"role:user\");\n```\n\n----------------------------------------\n\nTITLE: Clearing RoleManager Data (Go)\nDESCRIPTION: Demonstrates how to clear all stored role data and reset the RoleManager to its initial state in Go.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    rm.Clear()\n```\n\n----------------------------------------\n\nTITLE: Implementing Implicit Priority Policy in Casbin\nDESCRIPTION: Basic configuration for implicit priority based on policy order where earlier policies have higher priority.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PriorityModel.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = priority(p.eft) || deny\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Roles with Casbin in Go\nDESCRIPTION: Code snippet showing how to get all roles assigned to a user in Go.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nroles, err := e.GetRolesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Getting Users for Role in Domain\nDESCRIPTION: Retrieves the users that have a specific role within a given domain using the GetUsersForRoleInDomain method.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetUsersForRoleInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = e.getUsersForRoleInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nres = e.get_users_for_role_in_domain(\"admin\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Casbin Website to GitHub Pages\nDESCRIPTION: Command to manually publish the Casbin website to GitHub Pages using Yarn.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run publish-gh-pages\n```\n\n----------------------------------------\n\nTITLE: Explicit Priority Policy Rules in Casbin\nDESCRIPTION: Example policy rules showing explicit priority values with role assignments and access permissions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PriorityModel.md#2025-04-09_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, 10, data1_deny_group, data1, read, deny\np, 10, data1_deny_group, data1, write, deny\np, 10, data2_allow_group, data2, read, allow\np, 10, data2_allow_group, data2, write, allow\n\n\np, 1, alice, data1, write, allow\np, 1, alice, data1, read, allow\np, 1, bob, data2, read, deny\n\ng, bob, data2_allow_group\ng, alice, data1_deny_group\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer in Multiple Languages\nDESCRIPTION: Creates a new Enforcer instance using RBAC model and policy files. This is a prerequisite for using the RBAC API functions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforcer::new(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer in Multiple Languages\nDESCRIPTION: Creates a new Enforcer instance using RBAC model and policy files. This is a prerequisite for using the RBAC API functions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforcer::new(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Permission in Casbin RBAC\nDESCRIPTION: Removes a permission using the DeletePermission function. Returns false if the permission does not exist. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ne.DeletePermission(\"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deletePermission('read')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deletePermission(\"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_permission(\"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeletePermission(\"read\");\nor\nvar deleted = await e.DeletePermissionAsync(\"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_permission(vec![\"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deletePermission(\"read\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Route with Global authz-casbin Configuration\nDESCRIPTION: A cURL command to enable the authz-casbin plugin on a route using the global model and policy configuration stored in plugin metadata. This allows reusing the same authorization model across different routes.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/route1/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Getting Permissions for User in Domain\nDESCRIPTION: Retrieves the permissions for a user or role within a specific domain using the GetPermissionsForUserInDomain method.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithDomainsAPI.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetPermissionsForUserInDomain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> res = e.getPermissionsForUserInDomain(\"alice\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in PHP\nDESCRIPTION: Instructions for adding Casbin to a PHP project using Composer package manager.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/GetStarted.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require casbin/casbin\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role (Go)\nDESCRIPTION: Retrieves all users that inherit a specific role in Go. This gets all users that inherit the g1 role.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n    rm.GetUsers(\"g1\")\n```\n\n----------------------------------------\n\nTITLE: Getting RoleManager from Enforcer (Node.js)\nDESCRIPTION: Retrieves the role manager from a Casbin enforcer in Node.js for performing role-related operations.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    const rm = await e.getRoleManager();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Roles for a User in Casbin RBAC\nDESCRIPTION: Assigns multiple roles to a user using the AddRolesForUser function. Returns false if the user already has one of these roles. This function is part of the RBAC API in Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACAPI.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar roles = []string{\"data2_admin\", \"data1_admin\"}\ne.AddRolesForUser(\"alice\", roles)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = [\"data1_admin\", \"data2_admin\"];\nroles.map((role) => e.addRoleForUser(\"alice\", role));\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet roles = vec![\"data1_admin\".to_owned(), \"data2_admin\".to_owned()];\nlet all_added = e.add_roles_for_user(\"alice\", roles, None).await?; // No domain\n```\n\n----------------------------------------\n\nTITLE: Adding Role Inheritance Link (Python)\nDESCRIPTION: Python code showing how to add a role inheritance link between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    rm.add_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Enabling authz-casbin Plugin with File Paths\nDESCRIPTION: A cURL command to enable the authz-casbin plugin on an APISIX route using model and policy file paths. This configuration specifies the username header to be used for authorization subjects.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"model_path\": \"/path/to/model.conf\",\n            \"policy_path\": \"/path/to/policy.csv\",\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Role Manager Instance in Go with Hierarchy Level\nDESCRIPTION: This Go function creates a new instance of the default RoleManager with a specified maximum hierarchy level. The default level is 10, limiting how many levels of role inheritance an end user can have.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBAC.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// NewRoleManager is the constructor for creating an instance of the\n// default RoleManager implementation.\nfunc NewRoleManager(maxHierarchyLevel int) rbac.RoleManager {\n\trm := RoleManager{}\n\trm.allRoles = &sync.Map{}\n\trm.maxHierarchyLevel = maxHierarchyLevel\n\trm.hasPattern = false\n\n\treturn &rm\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling authz-casbin Plugin with Inline Model and Policy\nDESCRIPTION: A cURL command to enable the authz-casbin plugin on an APISIX route using inline model and policy text. This approach embeds the authorization configuration directly in the route definition.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/website/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"model\": \"[request_definition]\\n            r = sub, obj, act\\n\\n            [policy_definition]\\n            p = sub, obj, act\\n\\n            [role_definition]\\n            g = _, _\\n\\n            [policy_effect]\\n            e = some(where (p.eft == allow))\\n\\n            [matchers]\\n            m = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\",\\n\\n            \"policy\": \"p, *, /, GET\\n            p, admin, *, *\\n            g, alice, admin\\n            g, bob, admin\",\\n\\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Configuration in Node.js\nDESCRIPTION: Implements pattern matching functionality for RBAC using the keyMatch2Func utility in Node.js.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RBACWithPattern.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addNamedMatchingFunc('g', Util.keyMatch2Func);\n```\n\n----------------------------------------\n\nTITLE: Adding Role Inheritance Link (Node.js)\nDESCRIPTION: Node.js example for adding a role inheritance relationship between u1 and g1 in domain1.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/RoleManagerApi.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n    await rm.addLink('u1', 'g1', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Basic Casbin RBAC Policy Definition\nDESCRIPTION: Demonstrates how to define basic RBAC policies in Casbin, showing the relationship between users, roles, and permissions.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/CasbinRBACAndRBAC96.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\np, admin, book, read\np, alice, book, read\ng, amber, admin\n```\n\n----------------------------------------\n\nTITLE: Loading Basic RBAC Policy in CSV Format\nDESCRIPTION: Example of a basic RBAC policy definition in CSV format showing permissions and role assignments. Demonstrates policy rules (p) and group assignments (g).\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/PolicyStorage.md#2025-04-09_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\np, data2_admin, data2, read\np, data2_admin, data2, write\ng, alice, data2_admin\n```\n\n----------------------------------------\n\nTITLE: Defining an ABAC Model in Casbin\nDESCRIPTION: A basic ABAC model configuration that uses object attributes in the matcher. This example shows how to reference an object's Owner attribute in the access control decision.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ABAC.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == r.obj.Owner\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Policies in Casbin\nDESCRIPTION: Demonstrates how to add multiple authorization rules to the current policy using the AddPolicies function. The operation is atomic, meaning all rules are added only if they are all consistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n\t[]string {\"jack\", \"data4\", \"read\"},\n\t[]string {\"katy\", \"data4\", \"write\"},\n\t[]string {\"leyo\", \"data4\", \"read\"},\n\t[]string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesAdded := e.AddPolicies(rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addPolicies(rules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_added = e.add_policies(rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n\tvec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n\tvec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n\tvec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_added = e.add_policies(rules).await?\n```\n\nLANGUAGE: java\nCODE:\n```\nString[][] rules = {\n\t{\"jack\", \"data4\", \"read\"},\n\t{\"katy\", \"data4\", \"write\"},\n\t{\"leyo\", \"data4\", \"read\"},\n\t{\"ham\", \"data4\", \"write\"},\n};\n\nboolean areRulesAdded = e.addPolicies(rules);\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Service Protocol Buffer\nDESCRIPTION: Protocol buffer definition for the external authorization service interface that performs authorization checks on incoming network requests.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/EnvoyAuthz.md#2025-04-09_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// A generic interface for performing authorization check on incoming\n// requests to a networked service.\nservice Authorization {\n  // Performs authorization check based on the attributes associated with the\n  // incoming request, and returns status `OK` or not `OK`.\n  rpc Check(v2.CheckRequest) returns (v2.CheckResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Academic Citation for Casbin/PML Paper\nDESCRIPTION: BibTeX citation format for the paper 'PML: An Interpreter-Based Access Control Policy Language for Web Services' which describes the technical details of Casbin\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Tutorial.md#2025-04-09_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{luo2019pml,\n  title={PML: An Interpreter-Based Access Control Policy Language for Web Services},\n  author={Luo, Yang and Shen, Qingni and Wu, Zhonghai},\n  journal={arXiv preprint arXiv:1903.09756},\n  year={2019}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Backend Response Format for Casbin.js\nDESCRIPTION: JSON format that the backend endpoint should return to Casbin.js containing permission data.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/FrontendUsage.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"other\":\"other\",\n    \"data\": \"What you get from `CasbinJsGetPermissionForUser`\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Named Grouping Policies in Casbin\nDESCRIPTION: Demonstrates how to update named group policies by specifying the policy type and replacing old rules with new ones.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/ManagementAPI.md#2025-04-09_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nsucceed, err : = e.UpdateGroupingPolicy(\"g1\",[]string{\"data3_admin\", \"data4_admin\"}, []string{\"admin\", \"data4_admin\"})\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean succeed = e.updateNamedGroupingPolicy(\"g1\", Arrays.asList(\"data3_admin\", \"data4_admin\"), Arrays.asList(\"admin\", \"data4_admin\"));\n```\n\n----------------------------------------\n\nTITLE: Batch Enforce Implementation in TypeScript\nDESCRIPTION: Example of using batchEnforce() in Node.js/TypeScript to process multiple permission requests asynchronously and return results as a boolean array.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/DataPermissions.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst boolArray = await e.batchEnforce(requests);\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus CLI with Yarn or npm\nDESCRIPTION: Command to globally install the Docusaurus CLI tool using either Yarn or npm package managers.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add docusaurus-init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global docusaurus-init\n```\n\n----------------------------------------\n\nTITLE: Running Casbin Website Development Server\nDESCRIPTION: Command to start the local development server for the Casbin website using Yarn or npm.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Specifying Benchmark Environment for Lua Implementation\nDESCRIPTION: Describes the hardware specifications used for benchmarking the Lua implementation of Casbin.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Benchmark.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAMD Ryzen(TM) 5 4600H CPU @ 3.0GHz, 6 Cores, 12 Threads\n```\n\n----------------------------------------\n\nTITLE: Node.js-based Admin Portal Projects\nDESCRIPTION: List of administrative portals built with Node.js and Express that incorporate Casbin for authorization management\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/AdminPortal.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Frontend | Backend | Description\n----|----|----|----|----\n[node-mysql-rest-api](https://github.com/JoemaNequinto/node-mysql-rest-api) | [@JoemaNequinto](https://github.com/JoemaNequinto) | None | Express | A boilerplate application for building RESTful APIs Microservice in Node.js using Express, Sequelize, JWT and Casbin.\n```\n\n----------------------------------------\n\nTITLE: Using MergeEffects Function in Casbin\nDESCRIPTION: This snippet demonstrates how to use the MergeEffects function to merge policy results in Casbin. It passes parameters like expression, effects array, matches array, and policy indices to produce a final decision.\nSOURCE: https://github.com/casbin/casbin-website/blob/master/docs/Effector.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nEffect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n```"
  }
]