[
  {
    "owner": "valentinh",
    "repo": "react-easy-crop",
    "content": "TITLE: Defining React Easy Crop Component Props in JavaScript\nDESCRIPTION: This snippet outlines the various props available for the React Easy Crop component, including callback functions, styling options, and configuration parameters. It covers props for handling zoom, rotation, crop size changes, and user interactions.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  onZoomChange: zoom => void,\n  onRotationChange: rotation => void,\n  onCropSizeChange: cropSize => void,\n  onCropComplete: Function,\n  onCropAreaChange: Function,\n  transform: string,\n  style: { containerStyle: object, mediaStyle: object, cropAreaStyle: object },\n  classes: { containerClassName: string, mediaClassName: string, cropAreaClassName: string },\n  mediaProps: object,\n  cropperProps: object,\n  restrictPosition: boolean,\n  initialCroppedAreaPercentages: { width: number, height: number, x: number, y: number},\n  initialCroppedAreaPixels: { width: number, height: number, x: number, y: number},\n  onInteractionStart: Function,\n  onInteractionEnd: Function,\n  onMediaLoaded: Function,\n  onTouchRequest: (e: React.TouchEvent<HTMLDivElement>) => boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example with Hooks for React Easy Crop\nDESCRIPTION: A simple example showing how to implement the Cropper component using React hooks. This snippet demonstrates setting up state for crop position and zoom level, handling crop changes, and passing the required props to the Cropper component.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useCallback } from 'react'\nimport Cropper from 'react-easy-crop'\n\nconst Demo = () => {\n  const [crop, setCrop] = useState({ x: 0, y: 0 })\n  const [zoom, setZoom] = useState(1)\n\n  const onCropComplete = (croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels)\n  }\n\n  return (\n    <Cropper\n      image={yourImage}\n      crop={crop}\n      zoom={zoom}\n      aspect={4 / 3}\n      onCropChange={setCrop}\n      onCropComplete={onCropComplete}\n      onZoomChange={setZoom}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crop Area Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of the crop area object returned by onCropComplete and onCropAreaChange callbacks. It includes x and y coordinates, width, and height of the cropped area.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = {\n  x: number, // x/y are the coordinates of the top/left corner of the cropped area\n  y: number,\n  width: number, // width of the cropped area\n  height: number, // height of the cropped area\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Zoom Strategy in React\nDESCRIPTION: Example of using the onMediaLoaded callback to implement a custom zoom strategy based on media size. It adjusts the zoom to fit a maximum container height.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CONTAINER_HEIGHT = 300\n\nconst CroppedImage = ({ image }) => {\n  const [crop, onCropChange] = React.useState({ x: 0, y: 0 })\n  const [zoom, onZoomChange] = React.useState(1)\n  return (\n    <Cropper\n      image={image}\n      crop={crop}\n      zoom={zoom}\n      onCropChange={onCropChange}\n      onZoomChange={onZoomChange}\n      onMediaLoaded={(mediaSize) => {\n        // Adapt zoom based on media size to fit max height\n        onZoomChange(CONTAINER_HEIGHT / mediaSize.naturalHeight)\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for React Easy Crop\nDESCRIPTION: Shell commands for setting up the development environment for React Easy Crop. It includes installing dependencies and starting the development server.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Contributors Table HTML\nDESCRIPTION: HTML table markup displaying contributor information with avatars, names, and contribution types. Each cell contains a linked avatar image, contributor name, and contribution type indicators.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://labithiotis.com/\"><img src=\"https://avatars.githubusercontent.com/u/784306?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Darren Labithiotis</b></sub></a><br /><a href=\"https://github.com/ValentinH/react-easy-crop/commits?author=labithiotis\" title=\"Code\">ðŸ’»</a></td>\n```\n\n----------------------------------------\n\nTITLE: Project Badges Markdown\nDESCRIPTION: Markdown links and badge definitions for various project status indicators including npm version, build status, license, and test status.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[package]: https://www.npmjs.com/package/react-easy-crop\n[version-badge]: https://img.shields.io/npm/v/react-easy-crop.svg?style=flat-square\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Releases Page\nDESCRIPTION: Markdown link directing users to view the changelog on the project's GitHub releases page.\nSOURCE: https://github.com/valentinh/react-easy-crop/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\nYou can see the changelog on the [releases page](../../releases).\n```"
  }
]