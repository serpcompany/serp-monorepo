[
  {
    "owner": "grantjenks",
    "repo": "python-diskcache",
    "content": "TITLE: Basic Cache operations\nDESCRIPTION: Demonstrates the basic dictionary-like operations on a Cache object: setting, getting, checking existence, and deleting values.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> cache['key'] = 'value'\n>>> cache['key']\n'value'\n>>> 'key' in cache\nTrue\n>>> del cache['key']\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Cache Operations in Python\nDESCRIPTION: Demonstrates how to use asyncio and a thread-pool executor to perform cache operations asynchronously. This example shows an asynchronous set operation on the cache.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def set_async(key, val):\n    loop = asyncio.get_running_loop()\n    future = loop.run_in_executor(None, cache.set, key, val)\n    result = await future\n    return result\n\nasyncio.run(set_async('test-key', 'test-value'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Disk Serialization in Python\nDESCRIPTION: Shows how to create a custom Disk subclass (JSONDisk) that uses compressed JSON for serialization. This class overrides put, get, store, and fetch methods to handle JSON serialization and compression.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass JSONDisk(diskcache.Disk):\n    def __init__(self, directory, compress_level=1, **kwargs):\n        self.compress_level = compress_level\n        super().__init__(directory, **kwargs)\n\n    def put(self, key):\n        json_bytes = json.dumps(key).encode('utf-8')\n        data = zlib.compress(json_bytes, self.compress_level)\n        return super().put(data)\n\n    def get(self, key, raw):\n        data = super().get(key, raw)\n        return json.loads(zlib.decompress(data).decode('utf-8'))\n\n    def store(self, value, read, key=UNKNOWN):\n        if not read:\n            json_bytes = json.dumps(value).encode('utf-8')\n            value = zlib.compress(json_bytes, self.compress_level)\n        return super().store(value, read, key=key)\n\n    def fetch(self, mode, filename, value, read):\n        data = super().fetch(mode, filename, value, read)\n        if not read:\n            data = json.loads(zlib.decompress(data).decode('utf-8'))\n        return data\n\nwith Cache(disk=JSONDisk, disk_compress_level=6) as cache:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Cache in Python DiskCache\nDESCRIPTION: Demonstrates the use of transactions in DiskCache to perform atomic operations, such as incrementing values and retrieving multiple items consistently.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> with cache.transact():\n...     total = cache.incr('total', 123.45)\n...     count = cache.incr('count')\n>>> total\n123.45\n>>> count\n1\n\n>>> with cache.transact():\n...     total = cache.get('total')\n...     count = cache.get('count')\n>>> average = None if count == 0 else total / count\n>>> average\n123.45\n```\n\n----------------------------------------\n\nTITLE: Optimal Cache Stampede Prevention with Early Recomputation in Python\nDESCRIPTION: Using DiskCache's memoize_stampede decorator to implement early probabilistic recomputation. This approach preemptively recomputes the result in a separate thread before the cache expires.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dc.memoize_stampede(cache, expire=1)\ndef generate_landing_page():\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Implementing set_many Function with Transactions in Python DiskCache\nDESCRIPTION: Shows an implementation of a set_many function that uses a transaction to efficiently set multiple items in the cache at once.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> def set_many(cache, mapping):\n...     with cache.transact():\n...         for key, value in mapping.items():\n...             cache[key] = value\n```\n\n----------------------------------------\n\nTITLE: Using Memoization Decorator in Python DiskCache\nDESCRIPTION: This snippet demonstrates the use of the memoize decorator provided by FanoutCache to cache function arguments and return values, applied to a Fibonacci sequence calculation.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import FanoutCache\n>>> cache = FanoutCache()\n>>> @cache.memoize(typed=True, expire=1, tag='fib')\n... def fibonacci(number):\n...     if number == 0:\n...         return 0\n...     elif number == 1:\n...         return 1\n...     else:\n...         return fibonacci(number - 1) + fibonacci(number - 2)\n>>> print(sum(fibonacci(value) for value in range(100)))\n573147844013817084100\n```\n\n----------------------------------------\n\nTITLE: Double-Checked Locking Caching Pattern in Python\nDESCRIPTION: A more advanced caching approach using double-checked locking with multiple decorators. This pattern reduces concurrent workers regenerating the same content by using a barrier with a lock.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@cache.memoize(expire=0)\n@dc.barrier(cache, dc.Lock)\n@cache.memoize(expire=1)\ndef generate_landing_page():\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Web Crawler with DiskCache\nDESCRIPTION: A modified version of the crawler function that uses DiskCache's Deque and Index data structures to provide persistence. Data is stored in the local file system rather than in memory.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diskcache import Deque, Index\ndef crawl():\n    urls = Deque([0], 'data/urls')\n    results = Index('data/results')\n\n    while True:\n        try:\n            url = urls.popleft()\n        except IndexError:\n            break\n\n        if url in results:\n            continue\n\n        data = get(url)\n\n        for link in parse(data):\n            urls.append(link)\n\n        results[url] = data\n\n    print('Results: %s' % len(results))\n```\n\n----------------------------------------\n\nTITLE: Using set() with additional parameters\nDESCRIPTION: Shows how to use the set() method with expiration time, file-like reading, and tagging features to store more complex data.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from io import BytesIO\n>>> cache.set('key', BytesIO(b'value'), expire=5, read=True, tag='data')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Incrementing and decrementing values\nDESCRIPTION: Shows how to use the incr() and decr() methods to atomically increment and decrement numeric values in the cache.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.incr(b'test')\n124\n>>> cache.decr(b'test', 24)\n100\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cache object\nDESCRIPTION: Shows how to import and create a basic Cache object, which is the core component of DiskCache.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import Cache\n>>> cache = Cache()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Deque in Python with DiskCache\nDESCRIPTION: Demonstrates the creation and usage of a Deque object from the DiskCache library. Shows operations like pop, popleft, appendleft, and checking the length and directory type.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import Deque\n>>> deque = Deque(range(5, 10))\n>>> deque.pop()\n9\n>>> deque.popleft()\n5\n>>> deque.appendleft('foo')\n>>> len(deque)\n4\n>>> type(deque.directory).__name__\n'str'\n>>> other = Deque(directory=deque.directory)\n>>> len(other)\n4\n>>> other.popleft()\n'foo'\n>>> thing = Deque('abcde', maxlen=3)\n>>> list(thing)\n['c', 'd', 'e']\n```\n\n----------------------------------------\n\nTITLE: Adding new items with add()\nDESCRIPTION: Demonstrates the add() method which inserts a value only if the key doesn't already exist.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.add(b'test', 123)\nTrue\n>>> cache[b'test']\n123\n>>> cache.add(b'test', 456)\nFalse\n>>> cache[b'test']\n123\n```\n\n----------------------------------------\n\nTITLE: Evicting cache items by tag\nDESCRIPTION: Shows how to add items with tags and then selectively evict items based on their tag values.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> for num in range(100):\n...     _ = cache.set(num, num, tag='odd' if num % 2 else 'even')\n>>> cache.evict('even')\n50\n```\n\n----------------------------------------\n\nTITLE: Using Queue-like Operations in Python DiskCache\nDESCRIPTION: This snippet demonstrates the use of push, pull, and peek methods to maintain a queue-like structure within the cache. It shows how to add items to the front or back of the queue and retrieve them.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> key = cache.push('first')\n>>> print(key)\n500000000000000\n>>> cache[key]\n'first'\n>>> _ = cache.push('second')\n>>> _ = cache.push('zeroth', side='front')\n>>> _, value = cache.peek()\n>>> value\n'zeroth'\n>>> key, value = cache.pull()\n>>> print(key)\n499999999999999\n>>> value\n'zeroth'\n```\n\n----------------------------------------\n\nTITLE: Using Cache with a context manager\nDESCRIPTION: Demonstrates how to use a Cache object with Python's 'with' statement to ensure proper closing of the cache.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.close()\n>>> with Cache(cache.directory) as reference:\n...     reference.set('key', 'value')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Initializing FanoutCache in Python DiskCache\nDESCRIPTION: This snippet shows how to create a FanoutCache object with custom shards and timeout settings. FanoutCache is built on top of Cache and provides automatic sharding for improved concurrency.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import FanoutCache\n>>> cache = FanoutCache(shards=4, timeout=1)\n```\n\n----------------------------------------\n\nTITLE: Removing and retrieving values with pop()\nDESCRIPTION: Shows how to use the pop() method to atomically remove and return a value, with options for default values and metadata retrieval.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.pop('alice')\n1\n>>> cache.pop('dave', default='does not exist')\n'does not exist'\n>>> cache.set('dave', 0, expire=None, tag='admin')\nTrue\n>>> result = cache.pop('dave', expire_time=True, tag=True)\n>>> value, timestamp, tag = result\n>>> value\n0\n>>> print(timestamp)\nNone\n>>> print(tag)\nadmin\n```\n\n----------------------------------------\n\nTITLE: Configuring DjangoCache in Django Settings\nDESCRIPTION: This snippet shows how to configure DjangoCache in a Django settings file, including backend, location, timeout, shards, and other options.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    'default': {\n        'BACKEND': 'diskcache.DjangoCache',\n        'LOCATION': '/path/to/cache/directory',\n        'TIMEOUT': 300,\n        # ^-- Django setting for default timeout of each key.\n        'SHARDS': 8,\n        'DATABASE_TIMEOUT': 0.010,  # 10 milliseconds\n        # ^-- Timeout for each DjangoCache database transaction.\n        'OPTIONS': {\n            'size_limit': 2 ** 30   # 1 gigabyte\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Index in Python with DiskCache\nDESCRIPTION: Shows how to create an Index object, check for key existence, access values, delete items, and create a new Index from an existing directory.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import Index\n>>> index = Index([('a', 1), ('b', 2), ('c', 3)])\n>>> 'b' in index\nTrue\n>>> index['c']\n3\n>>> del index['a']\n>>> len(index)\n2\n>>> other = Index(index.directory)\n>>> len(other)\n2\n>>> other.popitem(last=False)\n('b', 2)\n```\n\n----------------------------------------\n\nTITLE: Clearing the entire cache\nDESCRIPTION: Shows how to remove all items from the cache using the clear() method.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.clear() > 0\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving additional information with get()\nDESCRIPTION: Demonstrates how to use the get() method with parameters to retrieve not just the value but also expiration time and tag metadata.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> result = cache.get('key', read=True, expire_time=True, tag=True)\n>>> reader, timestamp, tag = result\n>>> print(reader.read().decode())\nvalue\n>>> type(timestamp).__name__\n'float'\n>>> print(tag)\ndata\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Cache Eviction Policy in Python\nDESCRIPTION: Demonstrates how to initialize a Cache object with different eviction policies and how to reset the policy. It shows the default policy and how to set a custom policy during initialization.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> cache = Cache()\n>>> print(cache.eviction_policy)\nleast-recently-stored\n>>> cache = Cache(eviction_policy='least-frequently-used')\n>>> print(cache.eviction_policy)\nleast-frequently-used\n>>> print(cache.reset('eviction_policy', 'least-recently-used'))\nleast-recently-used\n```\n\n----------------------------------------\n\nTITLE: Managing the tag index\nDESCRIPTION: Shows how to drop and create tag indexes to accelerate tag-based operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.drop_tag_index()\n>>> cache.tag_index\n0\n>>> cache.create_tag_index()\n>>> cache.tag_index\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings in Python DiskCache\nDESCRIPTION: Shows how to initialize a Cache with specific settings and how to reset or update settings after initialization.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> cache = Cache(size_limit=int(4e9))\n>>> print(cache.size_limit)\n4000000000\n>>> cache.disk_min_file_size\n32768\n>>> cache.reset('cull_limit', 0)  # Disable automatic evictions.\n0\n>>> cache.set(b'key', 1.234)\nTrue\n>>> cache.count           # Stale attribute.\n0\n>>> cache.reset('count')  # Prefer: len(cache)\n1\n```\n\n----------------------------------------\n\nTITLE: Managing Cache Statistics in Python DiskCache\nDESCRIPTION: This snippet demonstrates how to enable, collect, and reset cache statistics, including hits and misses. It's useful for evaluating different eviction policies.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.stats(enable=True)\n(0, 0)\n>>> for num in range(100):\n...     _ = cache.set(num, num)\n>>> for num in range(150):\n...     _ = cache.get(num)\n>>> hits, misses = cache.stats(enable=False, reset=True)\n>>> (hits, misses)\n(100, 50)\n```\n\n----------------------------------------\n\nTITLE: DiskCache Import Examples\nDESCRIPTION: Examples showing how to import various DiskCache components including Cache, FanoutCache, DjangoCache, Deque, Index, and utility functions.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from diskcache import Cache, FanoutCache, DjangoCache\n>>> help(Cache)                                 # doctest: +SKIP\n>>> help(FanoutCache)                           # doctest: +SKIP\n>>> help(DjangoCache)                           # doctest: +SKIP\n\n>>> from diskcache import Deque, Index\n>>> help(Deque)                                 # doctest: +SKIP\n>>> help(Index)                                 # doctest: +SKIP\n\n>>> from diskcache import memoize_stampede, Lock, throttle\n>>> help(memoize_stampede)                      # doctest: +SKIP\n>>> help(Lock)                                  # doctest: +SKIP\n>>> help(throttle)                              # doctest: +SKIP\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Consistency in Python DiskCache\nDESCRIPTION: This snippet shows how to use the check method to verify cache consistency, fix inconsistencies, and reclaim unused space.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> warnings = cache.check()\n```\n\n----------------------------------------\n\nTITLE: Using numeric tags with cache eviction\nDESCRIPTION: Demonstrates using numeric values as tags and evicting cache items based on those tags.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.clear()\n50\n>>> for num in range(100):\n...     _ = cache.set(num, num, tag=(num % 2))\n>>> cache.evict(0)\n50\n```\n\n----------------------------------------\n\nTITLE: Managing cache expiration\nDESCRIPTION: Demonstrates how to disable automatic culling, set items with immediate expiration, and manually expire items from the cache.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.clear()\n3\n>>> cache.reset('cull_limit', 0)       # Disable automatic evictions.\n0\n>>> for num in range(10):\n...     _ = cache.set(num, num, expire=1e-9)  # Expire immediately.\n>>> len(cache)\n10\n>>> list(cache)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> import time\n>>> time.sleep(1)\n>>> cache.expire()\n10\n```\n\n----------------------------------------\n\nTITLE: Accessing Cache Shards in FanoutCache with Python DiskCache\nDESCRIPTION: Demonstrates how to access specific cache shards with transaction support from a FanoutCache instance.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> fanout_cache = FanoutCache()\n>>> tutorial_cache = fanout_cache.cache('tutorial')\n>>> username_queue = fanout_cache.deque('usernames')\n>>> url_to_response = fanout_cache.index('responses')\n```\n\n----------------------------------------\n\nTITLE: Using default values with increment/decrement\nDESCRIPTION: Demonstrates how to handle missing keys when using incr() and decr() by providing default values.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.incr('alice')\n1\n>>> cache.decr('bob', default=-9)\n-10\n>>> cache.incr('carol', default=None)\nTraceback (most recent call last):\n    ...\nKeyError: 'carol'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cache Iteration and Ordering in Python DiskCache\nDESCRIPTION: This snippet shows how to iterate over a Cache object in both insertion and sorted order, and demonstrates the use of the peekitem method for efficient access to the first or last item.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> for key in 'cab':\n...     cache[key] = None\n>>> list(cache)\n['c', 'a', 'b']\n>>> list(cache.iterkeys())\n['a', 'b', 'c']\n>>> cache.peekitem()\n('b', None)\n>>> cache.peekitem(last=False)\n('c', None)\n```\n\n----------------------------------------\n\nTITLE: Manual cache size management with cull()\nDESCRIPTION: Demonstrates how to manually enforce the cache's size limit by setting configuration options and using the cull() method.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.clear()\n50\n>>> cache.reset('size_limit', int(1e6))\n1000000\n>>> cache.reset('cull_limit', 0)\n0\n>>> for count in range(1000):\n...     cache[count] = b'A' * 1000\n>>> cache.volume() > int(1e6)\nTrue\n>>> cache.cull() > 0\nTrue\n>>> cache.volume() < int(1e6)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using DjangoCache with X-Accel-Redirect in Django\nDESCRIPTION: This snippet demonstrates how to use DjangoCache with X-Accel-Redirect headers in a Django view for efficient file serving.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache import cache\n\ndef media(request, path):\n    try:\n        with cache.read(path) as reader:\n            response = HttpResponse()\n            response['X-Accel-Redirect'] = reader.name\n            return response\n    except KeyError:\n        # Handle cache miss.\n```\n\n----------------------------------------\n\nTITLE: Clearing All Django Cache Backends\nDESCRIPTION: This snippet demonstrates how to iterate through all configured cache backends in Django settings and clear them. It's useful for resetting cache state during development or testing.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/sf-python-2017-meetup-talk.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> for key in settings.CACHES.keys():\n...     caches[key].clear()\n```\n\n----------------------------------------\n\nTITLE: Traditional Memoization Caching for Landing Page in Python\nDESCRIPTION: Implementing basic caching with a 1-second expiration using DiskCache's memoize decorator. This approach still suffers from cache stampedes when the cache expires.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport diskcache as dc\n\ncache = dc.Cache()\n\n@cache.memoize(expire=1)\ndef generate_landing_page():\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Tuning Early Recomputation with Beta Parameter in Python\nDESCRIPTION: Customizing the eagerness of recomputation with the beta parameter set to 0.5. This reduces worker load while maintaining optimal latency for frequently called functions.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dc.memoize_stampede(cache, expire=1, beta=0.5)\ndef generate_landing_page():\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Updating cache item expiration with touch()\nDESCRIPTION: Shows how to use the touch() method to update the expiration time of an existing cache item.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.touch('key', expire=None)\nTrue\n>>> cache.touch('does-not-exist', expire=1)\nFalse\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Volume in Python DiskCache\nDESCRIPTION: This snippet shows how to use the volume method to estimate the total size of the cache directory on disk.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.volume() < int(1e5)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Directory in Python DiskCache\nDESCRIPTION: This snippet demonstrates how to manually delete the cache directory after closing the cache, as it is not automatically removed.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.close()\n>>> import shutil\n>>> try:\n...     shutil.rmtree(cache.directory)\n... except OSError:  # Windows wonkiness\n...     pass\n```\n\n----------------------------------------\n\nTITLE: Running Web Crawler in Parallel with Multiprocessing\nDESCRIPTION: Code that demonstrates how to run multiple instances of the web crawler in parallel using Python's multiprocessing module, leveraging DiskCache's thread-safe persistent data structures.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresults.clear()\nfrom multiprocessing import Process\nprocesses = [Process(target=crawl) for _ in range(4)]\nfor process in processes:\n    process.start()\nfor process in processes:\n    process.join()\nlen(results)\n```\n\n----------------------------------------\n\nTITLE: Working with closed Cache objects\nDESCRIPTION: Shows how a closed Cache object automatically reopens when accessed, though this operation is slower than keeping it open.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> cache.close()\n>>> cache.get('key')  # Automatically opens, but slower.\n'value'\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Crawler with Standard Library Collections\nDESCRIPTION: A function that implements a breadth-first search web crawler using Python's standard library collections.deque to track URLs to visit and a dictionary to store results.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import deque\ndef crawl():\n    urls = deque([0])\n    results = dict()\n\n    while True:\n        try:\n            url = urls.popleft()\n        except IndexError:\n            break\n\n        if url in results:\n            continue\n\n        data = get(url)\n\n        for link in parse(data):\n            urls.append(link)\n\n        results[url] = data\n\n    print('Results: %s' % len(results))\n```\n\n----------------------------------------\n\nTITLE: Benchmarking FanoutCache Performance Metrics (Text Table)\nDESCRIPTION: Performance metrics for diskcache.FanoutCache showing operation counts, miss rates, and latency measurements. FanoutCache shows the lowest total execution time (58.991s) with very fast get operations but higher latency for set and delete operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     71106  25.034us  47.922us 101.089us   9.015ms  22.336s\n      set     71530        39 134.945us   1.324ms   5.763ms  16.027ms  33.347s\n   delete      7916       775  88.930us   1.267ms   5.017ms  13.732ms   3.308s\n    Total    791992                                                    58.991s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Fanout Cache (8 Shards) Timing Results\nDESCRIPTION: Benchmark results for diskcache.FanoutCache with 8 shards and 0.010s timeout. Shows how increasing shard count affects performance metrics.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTimings for diskcache.FanoutCache(shards=8, timeout=0.010)\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get     88966      9705  15.020us  20.027us  34.094us 627.995us   1.420s\n      set      9021         0  72.956us 100.851us 203.133us   9.623ms 927.824ms\n   delete      1012       104  50.783us  72.002us 132.084us   8.396ms  78.898ms\n    Total     98999                                                     2.426s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Under-Tuned Beta Parameter in Python\nDESCRIPTION: Showing the effects of setting beta too low (0.3), which can lead to cache expirations before recomputation occurs, resulting in cache stampedes when real cache misses happen.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dc.memoize_stampede(cache, expire=1, beta=0.3)\ndef generate_landing_page():\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Django Shell Example of Cache Inspection in Python\nDESCRIPTION: This code shows how to import time module and access Django cache objects using the settings and caches modules. It demonstrates basic cache interaction in the Django shell.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/sf-python-2017-meetup-talk.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import time\n>>> from django.conf import settings\n>>> from django.core.cache import caches\n```\n\n----------------------------------------\n\nTITLE: Basic Landing Page Generation Without Caching in Python\nDESCRIPTION: A simple function that simulates generating a landing page with a 200ms delay to represent heavy computation work.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-landing-page-caching.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef generate_landing_page():\n    time.sleep(0.2)  # Work really hard.\n    # Return HTML response.\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cache Files with Shell Loop\nDESCRIPTION: A Python shell snippet that combines Python with a shell command to continuously monitor the number of files in a file-based cache directory. It uses an infinite loop with a sleep timer to check file count every second.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/sf-python-2017-meetup-talk.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> while True:\n...     !ls /tmp/filebased | wc -l\n...     time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Installing DiskCache using pip\nDESCRIPTION: Shows how to install the DiskCache library using pip, the Python package manager.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --upgrade diskcache\n```\n\n----------------------------------------\n\nTITLE: Running the Standard Library Web Crawler\nDESCRIPTION: Executing the web crawler function to demonstrate its functionality with in-memory storage.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncrawl()\n```\n\n----------------------------------------\n\nTITLE: Memcached Benchmark Results\nDESCRIPTION: Performance metrics for Django's Memcached implementation showing stable low-latency performance across operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for memcached\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     69185  87.023us  99.182us 110.865us 576.973us  61.758s\n      set     71530         0  89.169us 102.043us 114.202us 259.876us   6.395s\n   delete      7916         0  85.115us  97.990us 108.957us 201.941us 672.212ms\n    Total    791992                                                    68.825s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Redis Benchmark Results\nDESCRIPTION: Performance metrics for Redis cache implementation showing roughly half the performance of Memcached.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for redis\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     69526 160.933us 195.980us 239.134us   1.365ms 116.816s\n      set     71530         0 166.178us 200.987us 242.949us 587.940us  12.143s\n   delete      7916       791 143.051us 177.860us 217.915us 330.925us   1.165s\n    Total    791992                                                   130.124s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Filebased Cache Benchmark Results\nDESCRIPTION: Performance metrics for Django's filebased cache implementation showing significantly higher latencies compared to other backends.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for filebased\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712749    103843 112.772us 193.119us 423.908us  18.428ms  92.428s\n      set     71431         0   8.893ms  11.742ms  14.790ms  44.201ms 646.879s\n   delete      7812         0 223.875us 389.099us 679.016us  15.058ms   1.940s\n    Total    791992                                                   741.247s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package in Editable Mode with Pip\nDESCRIPTION: This command installs the current package in editable mode, allowing developers to modify the code without reinstalling the package. The '-e .' syntax tells pip to install the package from the current directory in development mode.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .\n```\n\n----------------------------------------\n\nTITLE: Simulating Web Page Parsing in Python\nDESCRIPTION: A function that simulates parsing a web page and extracting links. It uses a seed based on the input data to generate a random list of integers representing URLs.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom random import randrange, seed\ndef parse(data):\n    \"Parse data and return list of links.\"\n    seed(int(data))\n    count = randrange(1, 10)\n    return [randrange(100) for _ in range(count)]\n```\n\n----------------------------------------\n\nTITLE: DiskCache Benchmark Results\nDESCRIPTION: Performance metrics for DiskCache implementation showing fast get operations but higher set and delete latencies due to retry behavior.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for diskcache\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     69509  33.855us  56.982us  79.155us  11.908ms  30.078s\n      set     71530         0 178.814us   1.355ms   5.032ms  26.620ms  34.461s\n   delete      7916         0 107.050us   1.280ms   4.738ms  17.217ms   3.303s\n    Total    791992                                                    67.842s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Fanout Cache (4 Shards) Timing Results\nDESCRIPTION: Benchmark results for diskcache.FanoutCache with 4 shards and 1.0s timeout. Shows performance metrics across different operations with sharding enabled.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTimings for diskcache.FanoutCache(shards=4, timeout=1.0)\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get     88966      9705  15.020us  20.027us  33.855us 437.021us   1.425s\n      set      9021         0  71.049us 100.136us 203.133us   9.186ms 892.262ms\n   delete      1012       104  48.161us  69.141us 129.952us   5.216ms  87.294ms\n    Total     98999                                                     2.405s\n```\n\n----------------------------------------\n\nTITLE: Single Access Cache Timing Results\nDESCRIPTION: Benchmark results showing timing data for diskcache.Cache in single access mode. Shows metrics for get, set and delete operations including count, miss rate, median, P90, P99, max and total times.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTimings for diskcache.Cache\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get     88966      9705  12.159us  17.166us  28.849us 174.999us   1.206s\n      set      9021         0  68.903us  93.937us 188.112us  10.297ms 875.907ms\n   delete      1012       104  47.207us  66.042us 128.031us   7.160ms  89.599ms\n    Total     98999                                                     2.171s\n```\n\n----------------------------------------\n\nTITLE: Running DiskCache Coverage Testing with Nose\nDESCRIPTION: Shows how to run coverage tests for DiskCache using nose, displaying test execution time and coverage statistics for each module.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ nosetests --cover-erase --with-coverage --cover-package diskcache\n.........................................................................\nName                       Stmts   Miss  Cover   Missing\n--------------------------------------------------------\ndiskcache.py                  13      2    85%   9-11\ndiskcache/core.py            442      4    99%   22-25\ndiskcache/djangocache.py      43      0   100%\ndiskcache/fanout.py           66      0   100%\n--------------------------------------------------------\nTOTAL                        564      6    99%\n----------------------------------------------------------------------\nRan 98 tests in 28.766s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Running DiskCache Benchmarks with Command Line Options\nDESCRIPTION: Shows the help output for the benchmark_core script, listing available command-line options for customizing benchmark tests.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ python tests/benchmark_core.py --help\nusage: benchmark_core.py [-h] [-p PROCESSES] [-n OPERATIONS] [-r RANGE]\n                         [-w WARMUP]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PROCESSES, --processes PROCESSES\n                        Number of processes to start (default: 8)\n  -n OPERATIONS, --operations OPERATIONS\n                        Number of operations to perform (default: 100000)\n  -r RANGE, --range RANGE\n                        Range of keys (default: 100)\n  -w WARMUP, --warmup WARMUP\n                        Number of warmup operations before timings (default:\n                        1000)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking pylibmc.Client Performance Metrics (Text Table)\nDESCRIPTION: Performance metrics for Memcached via pylibmc.Client showing operation counts, miss rates, and latency measurements. Memcached shows stable low latency with a total execution time of 68.788s and consistent performance across all operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for pylibmc.Client\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     72043  83.923us 107.050us 123.978us 617.027us  61.824s\n      set     71530         0  84.877us 108.004us 124.931us 312.090us   6.283s\n   delete      7916       796  82.970us 105.858us 123.024us 288.963us 680.970ms\n    Total    791992                                                    68.788s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Benchmarking redis.StrictRedis Performance Metrics (Text Table)\nDESCRIPTION: Performance metrics for Redis via redis.StrictRedis showing operation counts, miss rates, and latency measurements. Redis demonstrates the highest total execution time (112.476s) with consistent but higher latency across all operations, potentially impacted by persistence settings.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/cache-benchmarks.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for redis.StrictRedis\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546     72093 138.044us 169.039us 212.908us 151.121ms 101.197s\n      set     71530         0 138.998us 169.992us 216.007us   1.200ms  10.173s\n   delete      7916       752 136.137us 167.847us 211.954us   1.059ms   1.106s\n    Total    791992                                                   112.476s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Running DiskCache Stress Tests with Command Line Options\nDESCRIPTION: Shows the help output for the stress_test_core module, listing available command-line options for customizing stress tests.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m tests.stress_test_core --help\nusage: stress_test_core.py [-h] [-n OPERATIONS] [-g GET_AVERAGE]\n                           [-k KEY_COUNT] [-d DEL_CHANCE] [-w WARMUP]\n                           [-e EXPIRE] [-t THREADS] [-p PROCESSES] [-s SEED]\n                           [--no-create] [--no-delete] [-v EVICTION_POLICY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n OPERATIONS, --operations OPERATIONS\n                        Number of operations to perform (default: 10000)\n  -g GET_AVERAGE, --get-average GET_AVERAGE\n                        Expected value of exponential variate used for GET\n                        count (default: 100)\n  -k KEY_COUNT, --key-count KEY_COUNT\n                        Number of unique keys (default: 10)\n  -d DEL_CHANCE, --del-chance DEL_CHANCE\n                        Likelihood of a key deletion (default: 0.1)\n  -w WARMUP, --warmup WARMUP\n                        Number of warmup operations before timings (default:\n                        10)\n  -e EXPIRE, --expire EXPIRE\n                        Number of seconds before key expires (default: None)\n  -t THREADS, --threads THREADS\n                        Number of threads to start in each process (default:\n                        1)\n  -p PROCESSES, --processes PROCESSES\n                        Number of processes to start (default: 1)\n  -s SEED, --seed SEED  Random seed (default: 0)\n  --no-create           Do not create operations data (default: True)\n  --no-delete           Do not delete operations data (default: True)\n  -v EVICTION_POLICY, --eviction-policy EVICTION_POLICY\n```\n\n----------------------------------------\n\nTITLE: Local Memory Cache Benchmark Results\nDESCRIPTION: Performance metrics for Django's local memory cache implementation showing count, miss rate, median, percentiles, and total timing data.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n========= ========= ========= ========= ========= ========= ========= =========\nTimings for locmem\n-------------------------------------------------------------------------------\n   Action     Count      Miss    Median       P90       P99       Max     Total\n========= ========= ========= ========= ========= ========= ========= =========\n      get    712546    140750  36.001us  57.936us  60.081us  10.202ms  28.962s\n      set     71530         0  36.955us  39.101us  45.061us   2.784ms   2.709s\n   delete      7916         0  32.902us  35.048us  37.193us   1.524ms 265.399ms\n    Total    791992                                                    31.936s\n========= ========= ========= ========= ========= ========= ========= =========\n```\n\n----------------------------------------\n\nTITLE: Setting up ReStructuredText Table of Contents in DiskCache Documentation\nDESCRIPTION: This snippet defines a hidden table of contents (toctree) for the DiskCache documentation. It includes links to tutorials, benchmarks, case studies, API reference, and development documentation.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.rst\n\n.. toctree::\n   :hidden:\n\n   tutorial\n   cache-benchmarks\n   djangocache-benchmarks\n   case-study-web-crawler\n   case-study-landing-page-caching\n   sf-python-2017-meetup-talk\n   api\n   development\n```\n\n----------------------------------------\n\nTITLE: Running DiskCache Tests with Tox\nDESCRIPTION: Shows the output of running DiskCache tests with tox across multiple Python versions, including execution time and test counts.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ tox\nGLOB sdist-make: python-diskcache/setup.py\npy27 inst-nodeps: python-diskcache/.tox/dist/diskcache-0.9.0.zip\npy27 runtests: PYTHONHASHSEED='3527394681'\npy27 runtests: commands[0] | nosetests\n.........................................................................\n----------------------------------------------------------------------\nRan 98 tests in 29.404s\n\nOK\npy34 inst-nodeps: python-diskcache/.tox/dist/diskcache-0.9.0.zip\npy34 runtests: PYTHONHASHSEED='3527394681'\npy34 runtests: commands[0] | nosetests\n.........................................................................\n----------------------------------------------------------------------\nRan 98 tests in 22.841s\n\nOK\npy35 inst-nodeps: python-diskcache/.tox/dist/diskcache-0.9.0.zip\npy35 runtests: PYTHONHASHSEED='3527394681'\npy35 runtests: commands[0] | nosetests\n.........................................................................\n----------------------------------------------------------------------\nRan 98 tests in 23.803s\n\nOK\n____________________ summary ____________________\n  py27: commands succeeded\n  py34: commands succeeded\n  py35: commands succeeded\n  congratulations :)\n```\n\n----------------------------------------\n\nTITLE: Recording Benchmark Data for glob.glob1 Performance\nDESCRIPTION: Benchmark data showing the relationship between file count and execution time for glob.glob1 operations in Django's filesystem cache backend.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/djangocache-benchmarks.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n============ ============\nTimings for glob.glob1\n-------------------------\n       Count         Time\n============ ============\n           1      1.602ms\n          10      2.213ms\n         100      8.946ms\n        1000     65.869ms\n       10000    604.972ms\n      100000      6.450s\n============ ============\n```\n\n----------------------------------------\n\nTITLE: Running DiskCache Tests with Setup.py\nDESCRIPTION: Command to run DiskCache tests using Python's setup.py without installing all development requirements.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py test\n```\n\n----------------------------------------\n\nTITLE: Installing DiskCache from source\nDESCRIPTION: Demonstrates how to install DiskCache from the source code into your Python environment.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing DiskCache Development Dependencies\nDESCRIPTION: Shows the pip command to install all development dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning the DiskCache repository\nDESCRIPTION: Demonstrates how to get the DiskCache source code by cloning the GitHub repository.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/grantjenks/python-diskcache.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the DiskCache Repository with Git\nDESCRIPTION: Shows the Git command to clone the DiskCache repository from GitHub.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/grantjenks/python-diskcache.git\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Requirements file that specifies project dependencies including testing tools (pytest), documentation tools (sphinx), database interfaces (django_redis, sqlitedict), and development utilities (flake8, pylint). Local package installation is enabled with -e flag.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e .\nblue\ncoverage\ndjango==4.2.*\ndjango_redis\ndoc8\nflake8\nipython\njedi\npickleDB\npylibmc\npylint\npytest\npytest-cov\npytest-django\npytest-env\npytest-xdist\nrstcheck\nsphinx\nsqlitedict\ntox\ntwine\nwheel\n```\n\n----------------------------------------\n\nTITLE: Downloading DiskCache as a tarball\nDESCRIPTION: Shows how to download the DiskCache source code as a tarball archive.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/grantjenks/python-diskcache/tarball/master\n```\n\n----------------------------------------\n\nTITLE: Downloading DiskCache as a zipball\nDESCRIPTION: Shows how to download the DiskCache source code as a zip archive.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/grantjenks/python-diskcache/zipball/master\n```\n\n----------------------------------------\n\nTITLE: glob.glob1 Performance Timings Table\nDESCRIPTION: ASCII table displaying performance benchmarks for glob.glob1 function across different iteration counts. Shows execution time scaling from 1.602ms for a single operation up to 6.450 seconds for 100,000 operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/tests/timings_glob.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n============ ============\nTimings for glob.glob1\n-------------------------\n       Count         Time\n============ ============\n           1      1.602ms\n          10      2.213ms\n         100      8.946ms\n        1000     65.869ms\n       10000    604.972ms\n      100000      6.450s \n============ ============\n```\n\n----------------------------------------\n\nTITLE: Downloading DiskCache Tarball Archive\nDESCRIPTION: Command to download the DiskCache project as a tarball archive using curl.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/grantjenks/python-diskcache/tarball/master\n```\n\n----------------------------------------\n\nTITLE: Downloading DiskCache Zipball Archive\nDESCRIPTION: Command to download the DiskCache project as a zipball archive using curl.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/development.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/grantjenks/python-diskcache/zipball/master\n```\n\n----------------------------------------\n\nTITLE: DiskCache Performance Benchmarks\nDESCRIPTION: Performance comparison table showing operation timings (in microseconds) for different caching solutions including diskcache, dbm, shelve, sqlitedict, and pickleDB. Measurements include get, set, and delete operations.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n================ ============= ========= ========= ============ ============\nProject          diskcache     dbm       shelve    sqlitedict   pickleDB\n================ ============= ========= ========= ============ ============\nget                      25 µs     36 µs     41 µs       513 µs        92 µs\nset                     198 µs    900 µs    928 µs       697 µs     1,020 µs\ndelete                  248 µs    740 µs    702 µs     1,717 µs     1,020 µs\n================ ============= ========= ========= ============ ============\n```\n\n----------------------------------------\n\nTITLE: Comparing DiskCache vs Pylibmc Performance\nDESCRIPTION: Code snippet demonstrating performance comparison between DiskCache and Pylibmc using IPython's timeit magic command. Shows basic key-value operations and their execution times.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pylibmc\nclient = pylibmc.Client(['127.0.0.1'], binary=True)\nclient[b'key'] = b'value'\n%timeit client[b'key']\n\n10000 loops, best of 3: 25.4 µs per loop\n\nimport diskcache as dc\ncache = dc.Cache('tmp')\ncache[b'key'] = b'value'\n%timeit cache[b'key']\n\n100000 loops, best of 3: 11.8 µs per loop\n```\n\n----------------------------------------\n\nTITLE: Simulating URL Retrieval in Python\nDESCRIPTION: A function that simulates retrieving data from a URL by sleeping for a duration proportional to the URL value. This mimics the delay of downloading a web page.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\ndef get(url):\n    \"Get data for url.\"\n    sleep(url / 1000.0)\n    return str(url)\n```\n\n----------------------------------------\n\nTITLE: Accessing Persistent Results After Crawling\nDESCRIPTION: Demonstrating how to initialize and query the persistent Index of results after the crawler has completed.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = Index('data/results')\nlen(results)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parse Function Output\nDESCRIPTION: A simple example showing the output of the parse function when given the string '20' as input.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparse('20')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Retrieval Function\nDESCRIPTION: A simple example showing the output of the get function when retrieving URL 20.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget(20)\n```\n\n----------------------------------------\n\nTITLE: Running the Persistent Web Crawler\nDESCRIPTION: Executing the persistent web crawler function to demonstrate its functionality with disk-based storage.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/docs/case-study-web-crawler.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncrawl()\n```\n\n----------------------------------------\n\nTITLE: Installing DiskCache with pip\nDESCRIPTION: Simple pip installation command for the DiskCache library.\nSOURCE: https://github.com/grantjenks/python-diskcache/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install diskcache\n```"
  }
]