[
  {
    "owner": "pointfreeco",
    "repo": "swift-snapshot-testing",
    "content": "TITLE: Basic Snapshot Testing Example in Swift\nDESCRIPTION: Demonstrates basic usage of snapshot testing with a view controller using the image strategy.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SnapshotTesting\nimport Testing\n\n@MainActor\nstruct MyViewControllerTests {\n  @Test func myViewController() {\n    let vc = MyViewController()\n\n    assertSnapshot(of: vc, as: .image)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous WKWebView Image Snapshot Strategy using AsyncPullback in Swift\nDESCRIPTION: This snippet shows how to create an asynchronous image snapshot strategy for WKWebView using asyncPullback. It handles the asynchronous nature of WKWebView's takeSnapshot method.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/CustomStrategies.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension Snapshotting where Value == WKWebView, Format == UIImage {\n  public static let image: Snapshotting = Snapshotting<UIImage, UIImage>\n    .image\n    .asyncPullback { webView in\n      Async { callback in\n        webView.takeSnapshot(with: nil) { image, error in\n          callback(image!)\n        }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Record with HTTP POST Request\nDESCRIPTION: This snippet shows a complete HTTP POST request to create a new employee record. It specifies the endpoint URL, request headers for JSON content, and includes a JSON payload with the employee's name, salary, and age information.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.post-with-json.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://dummy.restapiexample.com/api/v1/create\nAccept: application/json\nContent-Type: application/json\n\n{\"name\":\"tammy134235345235\", \"salary\":0, \"age\":\"tammy133\"}\n```\n\n----------------------------------------\n\nTITLE: Creating UIViewController Image Snapshot Strategy using Pullback in Swift\nDESCRIPTION: This code demonstrates how to create an image snapshot strategy for UIViewController by pulling back from the UIView strategy. It transforms the UIViewController to its view property.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/CustomStrategies.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension Snapshotting where Value == UIViewController, Format == UIImage {\n  public static let image: Snapshotting = Snapshotting<UIView, UIImage>\n    .image\n    .pullback { viewController in viewController.view }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Snapshot Assertion Function\nDESCRIPTION: Main function for asserting snapshots in Swift testing, with parameters for the snapshot subject, format, name, recording mode, timeout, and test metadata.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/AssertSnapshot.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshot(of:as:named:record:timeout:file:testName:line:)\n```\n\n----------------------------------------\n\nTITLE: POST Request to Point-Free Subscription API\nDESCRIPTION: HTTP POST request to initiate a subscription with monthly billing for an individual plan. Includes session cookie with user ID and expects JSON response.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.post-json.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://www.pointfree.co/subscribe\nAccept: application/json\nCookie: pf_session={\"user_id\":\"0\"}\n\n{\n  \"pricing\" : {\n    \"billing\" : \"monthly\",\n    \"lane\" : \"individual\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Snapshot Examples in Swift\nDESCRIPTION: Shows different ways to record snapshots including single records, scoped records, and recording failed snapshots.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Record just this one snapshot\nassertSnapshot(of: vc, as: .image, record: .all)\n\n// Record all snapshots in a scope:\nwithSnapshotTesting(record: .all) {\n  assertSnapshot(of: vc1, as: .image)\n  assertSnapshot(of: vc2, as: .image)\n  assertSnapshot(of: vc3, as: .image)\n}\n\n// Record all snapshot failures in a Swift Testing suite:\n@Suite(.snapshots(record: .failed))\nstruct FeatureTests {}\n\n// Record all snapshot failures in an 'XCTestCase' subclass:\nclass FeatureTests: XCTestCase {\n  override func invokeTest() {\n    withSnapshotTesting(record: .failed) {\n      super.invokeTest()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting POST Request to Point-Free Subscription Endpoint\nDESCRIPTION: This HTTP POST request demonstrates how to subscribe to the Point-Free service. It includes headers setting the Accept type to text/html and setting a cookie with a user ID. The request body specifies parameters for monthly billing on an individual pricing lane.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.post.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://www.pointfree.co/subscribe\nAccept: text/html\nCookie: pf_session={\"user_id\":\"0\"}\n\npricing[billing]=monthly&pricing[lane]=individual\n```\n\n----------------------------------------\n\nTITLE: Using assertSnapshot in XCTest and Swift Testing\nDESCRIPTION: Demonstrates how to use the assertSnapshot function in both XCTest and Swift Testing frameworks. The SnapshotTesting library automatically detects the context and triggers the appropriate test failure.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/IntegratingWithTestFrameworks.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureTests: XCTestCase {\n  func testFeature() {\n    assertSnapshot(of: MyView(), as: .image)  // ✅\n  }\n}\n\n@Test \nfunc testFeature() {\n  assertSnapshot(of: MyView(), as: .image)  // ✅\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Headers\nDESCRIPTION: Demonstrates an HTTP GET request to pointfree.co with multiple query parameters and standard headers including Accept, Content-Type, and Cookie. The request includes three key-value pairs in the query string and specifies JSON content type.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.get-with-query.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://www.pointfree.co?key_1=value_1&key_2=value_2&key_3=value_3\nAccept: text/html\nContent-Type: application/json\nCookie: pf_session={}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshots in XCTest\nDESCRIPTION: Shows how to configure snapshot testing properties (record and diffTool) for all tests in an XCTestCase by overriding the invokeTest method and using withSnapshotTesting.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/IntegratingWithTestFrameworks.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureTests: XCTestCase {\n  override func invokeTest() {\n    withSnapshotTesting(\n      record: .missing,\n      diffTool: .ksdiff \n    ) {\n      super.invokeTest()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request to Point-Free Website with HTTP Headers\nDESCRIPTION: This HTTP request performs a GET operation on the Point-Free website homepage with specific headers. It includes Accept header for HTML, Content-Type for JSON, and an empty session cookie.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.get.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://www.pointfree.co/\nAccept: text/html\nContent-Type: application/json\nCookie: pf_session={}\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Snapshot Testing in Swift\nDESCRIPTION: Shows how to use the assertInlineSnapshot function from the InlineSnapshotTesting module to create inline snapshots that will be written directly into the test file.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/InlineSnapshotTesting/Documentation.docc/InlineSnapshotTesting.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nassertInlineSnapshot(of: value, as: .json)\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with curl to Point Free Website\nDESCRIPTION: A curl command that performs a GET request to pointfree.co with custom headers, an empty session cookie, and multiple query parameters. The request specifies it will accept HTML responses and sends data as JSON.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.get-with-query-curl.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: text/html\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--cookie \"pf_session={}\" \\\n\t\"https://www.pointfree.co?key_1=value_1&key_2=value_2&key_3=value_3\"\n```\n\n----------------------------------------\n\nTITLE: Automatically Generated Inline Snapshot in Swift\nDESCRIPTION: Demonstrates how the assertInlineSnapshot function automatically inserts the snapshot as a trailing closure after the first test run. This shows the format of the resulting test code with the embedded snapshot.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/InlineSnapshotTesting/Documentation.docc/InlineSnapshotTesting.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nassertInlineSnapshot(of: value, as: .json) {  // ❌\n  \"\"\"\n  {\n    \"id\": 42,\n    \"name\": \"Blob\"\n  }\n  \"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying UITabBarController Hierarchy with State Information\nDESCRIPTION: A textual representation of a UIKit view controller hierarchy, showing a UITabBarController with multiple UINavigationController children. The output shows each controller's state (appeared/disappeared) and view type, indicating which views are currently visible in the window hierarchy.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testViewControllerHierarchy.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<UITabBarController>, state: appeared, view: <UILayoutContainerView>\n   | <UINavigationController>, state: appeared, view: <UILayoutContainerView>\n   |    | <UIPageViewController>, state: appeared, view: <_UIPageViewControllerContentView>\n   |    |    | <UIViewController>, state: appeared, view: <UIView>\n   | <UINavigationController>, state: disappeared, view: <UILayoutContainerView> not in the window\n   |    | <UIViewController>, state: disappeared, view: (view not loaded)\n   | <UINavigationController>, state: disappeared, view: <UILayoutContainerView> not in the window\n   |    | <UIViewController>, state: disappeared, view: (view not loaded)\n   | <UINavigationController>, state: disappeared, view: <UILayoutContainerView> not in the window\n   |    | <UIViewController>, state: disappeared, view: (view not loaded)\n   | <UINavigationController>, state: disappeared, view: <UILayoutContainerView> not in the window\n   |    | <UIViewController>, state: disappeared, view: (view not loaded)\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous WKWebView Image Snapshot Strategy using Async Initialization in Swift\nDESCRIPTION: This code demonstrates an alternative way to create an asynchronous image snapshot strategy for WKWebView using the async initializer of Snapshotting. It directly handles the asynchronous snapshot creation.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/CustomStrategies.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension Snapshotting where Value == WKWebView, Format == UIImage {\n  public static let image = Snapshotting(\n    pathExtension: \"png\",\n    diffing: .image,\n    asyncSnapshot: { webView in\n      Async { callback in\n        webView.takeSnapshot(with: nil) { image, error in\n          callback(image!)\n        }\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle with SVG Path Commands\nDESCRIPTION: This snippet defines a perfect circle using SVG path commands. It uses a series of Cubic Bézier curves (CurveTo commands) to create a smooth circular shape centered at (75, 75) with a radius of 15 units.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testUIBezierPath.iOS.txt#2025-04-18_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\nMoveTo (90.0, 75.0)\nCurveTo (90.0, 83.284) (83.284, 90.0) (75.0, 90.0)\nCurveTo (66.716, 90.0) (60.0, 83.284) (60.0, 75.0)\nCurveTo (60.0, 66.716) (66.716, 60.0) (75.0, 60.0)\nCurveTo (83.284, 60.0) (90.0, 66.716) (90.0, 75.0)\nClose\n```\n\n----------------------------------------\n\nTITLE: Swift Package Manager Integration\nDESCRIPTION: Shows how to integrate SnapshotTesting into a Swift package as a test dependency.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(\n    url: \"https://github.com/pointfreeco/swift-snapshot-testing\",\n    from: \"1.12.0\"\n  ),\n]\n```\n\nLANGUAGE: swift\nCODE:\n```\ntargets: [\n  .target(name: \"MyApp\"),\n  .testTarget(\n    name: \"MyAppTests\",\n    dependencies: [\n      \"MyApp\",\n      .product(name: \"SnapshotTesting\", package: \"swift-snapshot-testing\"),\n    ]\n  )\n]\n```\n\n----------------------------------------\n\nTITLE: Drawing Custom Rounded Shape with SVG Path Commands\nDESCRIPTION: This snippet defines a custom shape using SVG path commands. It starts at the origin, creates vertical and curved lines to form a rounded rectangle-like shape with a protrusion on the right side.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testUIBezierPath.iOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nQuadCurveTo (3.75, 86.25) (30.0, 90.0)\nQuadCurveTo (56.25, 86.25) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose\n```\n\n----------------------------------------\n\nTITLE: Multiple Snapshots Assertion Functions\nDESCRIPTION: Functions for asserting multiple snapshots simultaneously with varying parameter sets.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/AssertSnapshot.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshots(of:as:record:timeout:file:testName:line:)-6mdbp\n```\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshots(of:as:record:timeout:file:testName:line:)-6c4fe\n```\n\n----------------------------------------\n\nTITLE: Drawing a Curved Shape with Path Commands\nDESCRIPTION: A sequence of graphics path commands that draw a shape resembling a rounded rectangle with a circular attachment. The commands include MoveTo for positioning, LineTo for straight lines, and QuadCurveTo/CurveTo for creating curved segments.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testUIBezierPath.tvOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nQuadCurveTo (3.75, 86.25) (30.0, 90.0)\nQuadCurveTo (56.25, 86.25) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose \n\nMoveTo (90.0, 75.0)\nCurveTo (90.0, 83.284) (83.284, 90.0) (75.0, 90.0)\nCurveTo (66.716, 90.0) (60.0, 83.284) (60.0, 75.0)\nCurveTo (60.0, 66.716) (66.716, 60.0) (75.0, 60.0)\nCurveTo (83.284, 60.0) (90.0, 66.716) (90.0, 75.0)\nClose \n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Verification\nDESCRIPTION: Function for custom snapshot verification with additional control over snapshot directory location.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/AssertSnapshot.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nverifySnapshot(of:as:named:record:snapshotDirectory:timeout:file:testName:line:)\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Point Free Subscription API\nDESCRIPTION: cURL command to submit a subscription request to Point Free with monthly billing for individual plan. Includes session cookie and accepts HTML response.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.post-curl.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: text/html\" \\\n\t--data \"pricing[billing]=monthly&pricing[lane]=individual\" \\\n\t--cookie \"pf_session={\\\"user_id\\\":\\\"0\\\"}\" \\\n\t\"https://www.pointfree.co/subscribe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshots in Swift Testing\nDESCRIPTION: Demonstrates how to configure snapshot testing properties (record and diffTool) for an entire test suite in Swift Testing using test traits.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/IntegratingWithTestFrameworks.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport SnapshotTesting\n\n@Suite(.snapshots(record: .all, diffTool: .ksdiff))\nstruct FeatureTests {\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HEAD Request to Point-Free Website with Empty Cookie\nDESCRIPTION: This HTTP HEAD request targets the Point-Free homepage with an empty session cookie, likely used for testing connections or authentication workflows in the swift-snapshot-testing framework.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.head.txt#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHEAD https://www.pointfree.co/\nCookie: pf_session={}\n```\n\n----------------------------------------\n\nTITLE: Function Reference withSnapshotTesting\nDESCRIPTION: Reference documentation for the withSnapshotTesting function variant -2kuyr with record, diffTool and operation parameters. Links to another overload variant -6bsqw.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/WithSnapshotTesting.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nwithSnapshotTesting(record:diffTool:operation:)\n```\n\n----------------------------------------\n\nTITLE: Making HEAD Request with CURL\nDESCRIPTION: A curl command that performs a HEAD request to pointfree.co with an empty session cookie. The command uses line continuations for readability and sets specific HTTP headers.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.head-curl.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--head \\\n\t--cookie \"pf_session={}\" \\\n\t\"https://www.pointfree.co/\"\n```\n\n----------------------------------------\n\nTITLE: Accessing UIView Image Snapshot Strategy in Swift\nDESCRIPTION: This snippet shows how to access the existing image snapshot strategy for UIView.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Articles/CustomStrategies.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nSnapshotting<UIView, UIImage>.image\n```\n\n----------------------------------------\n\nTITLE: Displaying UIButton Snapshot Test Output\nDESCRIPTION: Shows a debug output format for a UIButton component containing a UIImageView. The snapshot includes frame dimensions, opacity settings and layer properties in a hierarchical structure.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testUIView.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<UIButton; frame = (0 0; 24.3333 23.6667); opaque = NO; layer = <CALayer>>\n   | <UIImageView; frame = (0 0; 24.3333 23.6667); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer>>\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Testing in Swift\nDESCRIPTION: Demonstrates the traditional snapshot testing approach where snapshots are written to disk alongside test files.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/InlineSnapshotTesting/Documentation.docc/InlineSnapshotTesting.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshot(of: value, as: .json)\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy with Labels - Swift\nDESCRIPTION: Shows a UIView container with multiple UILabels positioned at specific coordinates. The view includes labels for 'What's', 'the', 'point' and '?' characters with precise frame measurements and layer information.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-x.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 375 812); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (161.333 44; 52.6667 19.3333); text = 'What\\'s'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 401.333; 23.6667 19.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (338 401.333; 37 19.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (184 761; 7.33333 17); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Finding Snapshot Files in Directory Structure\nDESCRIPTION: Shows how to locate snapshot files in the filesystem when using traditional snapshot testing. The snapshots are stored in a __Snapshots__ directory with a structure based on the test file and method names.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/InlineSnapshotTesting/Documentation.docc/InlineSnapshotTesting.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cat __Snapshots__/MySnapshotTests/testMySnapshot.2.json\n{\n  \"id\": 42,\n  \"name\": \"Blob\"\n}\n```\n\n----------------------------------------\n\nTITLE: UIKit View Hierarchy Debug Output\nDESCRIPTION: Debug representation of a UIView container with multiple UILabels showing text fragments 'What's', 'the', 'point' and '?' positioned at specific coordinates with defined frames and layer properties.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-se.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (133.667 20; 52.6667 19.3333); text = 'What\\'s'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 284.333; 23.6667 19.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (283 284.333; 37 19.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (156.333 551; 7.33333 17); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: UIView Hierarchy Debug Description\nDESCRIPTION: Debug output showing a UIView containing four UILabels with specific positioning and text content. The view has a frame of 1194x834 and contains labels with the text 'What's', 'the', 'point' and '?' positioned at various coordinates.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-pro-11.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 1194 834); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (569.333 24; 55.6667 20.3333); text = 'What\\'s'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 409; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (1155 409; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (593.333 796; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Describing UIView Hierarchy in Swift\nDESCRIPTION: This snippet provides a textual representation of a UIView hierarchy, including a main view and four UILabel subviews. It details the frame, text content, user interaction settings, and layer properties for each view.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-8-plus.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 414 736); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (180.667 20; 52.6667 19.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 368.333; 23.6667 19.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (377 368.333; 37 19.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (203.333 719; 7.33333 17); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy with UILabels in Swift\nDESCRIPTION: This code snippet represents a UIView hierarchy containing multiple UILabel subviews. Each UILabel is positioned within the parent UIView with specific frame dimensions and text content. The structure is typical of iOS app UI layouts.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-xr.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 414 896); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (180.667 44; 52.6667 19.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 443.333; 23.6667 19.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (377 443.333; 37 19.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (203.333 845; 7.33333 17); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy Description in Swift\nDESCRIPTION: This snippet shows the debug description output of a UIView hierarchy, including the parent view dimensions and its child UILabel elements with their respective frames, text content, and layer properties.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-8.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 375 667); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (161.333 20; 52.6667 19.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 334; 23.6667 19.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (338 334; 37 19.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (184 650; 7.33333 17); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Rendering UIView Hierarchy with UILabels in Swift\nDESCRIPTION: This code snippet represents a UIView hierarchy with multiple UILabels. It shows the frame, text content, and layer properties of each element. The main view has a frame of 414x896, and contains four UILabels with different text and positioning.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.iphone-xs-max.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 414 896); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (179.333 44; 55.6667 20.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 443; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (375 443; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (203.333 844; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy Structure for Snapshot Testing in Swift\nDESCRIPTION: A textual representation of a UIView hierarchy showing frame positions, text content, and layer information. This format is commonly used in the swift-snapshot-testing library to capture the structure of views for verification in UI tests.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-pro-12-9.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 1366 1024); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (655.333 20; 55.6667 20.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 512; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (1327 512; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (679.333 1006; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy with Embedded UILabel in Swift\nDESCRIPTION: This code snippet shows the structure of a UIView containing a UILabel. It includes details such as frame dimensions, autoresizing behavior, and layer properties for both the UIView and UILabel.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 36); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy in Swift\nDESCRIPTION: This snippet shows a textual representation of a UIView hierarchy, displaying the frame dimensions, properties, and nested UILabel elements with their text content. This format is typically used for debugging or snapshot testing UI components.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-pro-10-5.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 1112 834); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (528.333 20; 55.6667 20.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 417; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (1073 417; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (552.333 816; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Representing UIView Hierarchy for Snapshot Testing in Swift\nDESCRIPTION: This code snippet represents a UIView hierarchy with a nested UILabel. It's commonly used in snapshot testing frameworks to verify the visual structure and properties of UI components.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-extra-extra-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 40.6667); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Describing UIView Hierarchy in Swift\nDESCRIPTION: This code snippet represents a UIView with a frame of 1024x768 points containing four UILabels. Each UILabel is positioned at specific coordinates and displays a part of the phrase 'What's the point?'. The snippet shows the frame, text, and layer information for each view.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-mini.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 1024 768); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (484.333 20; 55.6667 20.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 384; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (985 384; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (508.333 750; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Describing NSButton Hierarchy and Properties in Text Format\nDESCRIPTION: This snippet provides a detailed textual representation of an NSButton and its subviews, including their frame sizes, visibility states, and various other properties. It uses a compact notation where each letter represents a specific attribute of the view.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNSView.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[   AF    ! wLU ] h=--- v=--- NSButton \"Push Me\" f=(0,0,87,32) b=(-) => <NSViewBackingLayer>\n  [   A     ! wLU ] h=--- v=--- NSButtonBezelView f=(0,0,87,32) b=(-) => <NSViewBackingLayer>\n  [   AF    ! wLU ] h=--- v=--- NSButtonTextField \"Push Me\" f=(11,6,65,16) b=(-) => <NSTextLayer>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy with UILabels in Swift\nDESCRIPTION: This code snippet represents a UIView hierarchy with four UILabel subviews. It shows the frame, text content, and layer information for each view. The main view has a frame of 1080x810 points, and the labels are positioned at different locations within it.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-10-2.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 1080 810); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (512.333 20; 55.6667 20.3333); text = 'What's'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 405; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (1041 405; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (536.333 792; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Explaining View Property Abbreviations in Text Format\nDESCRIPTION: This snippet provides a legend for the compact notation used in the NSButton hierarchy description. It explains what each letter in the notation represents, such as autoresizing behavior, drawing properties, and layout needs.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNSView.2.txt#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nA=autoresizesSubviews, C=canDrawConcurrently, D=needsDisplay, F=flipped, G=gstate, H=hidden (h=by ancestor), L=needsLayout (l=child needsLayout), U=needsUpdateConstraints (u=child needsUpdateConstraints), O=opaque, P=preservesContentDuringLiveResize, S=scaled/rotated, W=wantsLayer (w=ancestor wantsLayer), V=needsVibrancy (v=allowsVibrancy), #=has surface\n```\n\n----------------------------------------\n\nTITLE: UIView Hierarchy Layout Description\nDESCRIPTION: Represents a UIView layout hierarchy containing multiple UILabels with specific frame positions, text content, and layer properties. The root view is 1024x768 with autoresizing enabled.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraits.ipad-9-7.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 1024 768); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (484.333 20; 55.6667 20.3333); text = 'What\\'s'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (0 384; 25 20.3333); text = 'the'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (985 384; 39 20.3333); text = 'point'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n   | <UILabel; frame = (508.333 750; 7.66667 18); text = '?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Analyzing NSView Properties in Swift Snapshot Testing\nDESCRIPTION: This code snippet represents a debug output for an NSView in the swift-snapshot-testing framework. It shows various properties and states of the view in a compact format, including autoresizing, drawing, layout, and layer-related attributes.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNSViewWithLayer.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n[   A     ! W U ] h=--- v=--- NSView f=(0,0,10,10) b=(-) => <NSViewBackingLayer>\n```\n\n----------------------------------------\n\nTITLE: Rendering UIView Hierarchy in Swift\nDESCRIPTION: A textual representation of a UIView hierarchy showing a UIView with a UILabel subview. This format is typically used by snapshot testing frameworks to verify UI layout and structure.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-small.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 31.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rounded Rectangle with Vector Path Commands\nDESCRIPTION: A sequence of vector path commands that draw a rounded rectangle with one curved corner. The commands include MoveTo, LineTo, QuadCurveTo, and CurveTo operations to define the geometry of the shape.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testCGPath.iOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: vector-path\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nQuadCurveTo (3.75, 86.25) (30.0, 90.0)\nQuadCurveTo (56.25, 86.25) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose \n```\n\n----------------------------------------\n\nTITLE: Defining UIView and UILabel Structure for Snapshot Testing in Swift\nDESCRIPTION: This code defines the structure of a UIView containing a UILabel, including their frames, properties, and layer information. It's formatted for use in snapshot testing, allowing developers to verify the layout and properties of UI components.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-medium.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 32.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle with Vector Path Commands\nDESCRIPTION: A sequence of vector path commands that draw a circle. The commands use MoveTo and CurveTo operations to create a circular shape with a radius of 15 units centered at (75, 75).\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testCGPath.iOS.txt#2025-04-18_snippet_1\n\nLANGUAGE: vector-path\nCODE:\n```\nMoveTo (90.0, 75.0)\nCurveTo (90.0, 83.284) (83.284, 90.0) (75.0, 90.0)\nCurveTo (66.716, 90.0) (60.0, 83.284) (60.0, 75.0)\nCurveTo (60.0, 66.716) (66.716, 60.0) (75.0, 60.0)\nCurveTo (83.284, 60.0) (90.0, 66.716) (90.0, 75.0)\nClose \n```\n\n----------------------------------------\n\nTITLE: Displaying UIView hierarchy with UILabel in snapshot test format\nDESCRIPTION: A textual representation of a UIView containing a UILabel as would be displayed in snapshot test output. The snippet shows the view hierarchy with frame dimensions and key properties of each component.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 33.6667); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Drawing Vector Path with Basic Shapes\nDESCRIPTION: Vector path commands that draw a complex shape consisting of straight lines, quadratic curves and bezier curves. Creates a rounded rectangle connected to a circle.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testCGPath.macOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: graphics\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nQuadCurveTo (3.75, 86.25) (30.0, 90.0)\nQuadCurveTo (56.25, 86.25) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose \n\nMoveTo (90.0, 75.0)\nCurveTo (90.0, 83.284) (83.284, 90.0) (75.0, 90.0)\nCurveTo (66.716, 90.0) (60.0, 83.284) (60.0, 75.0)\nCurveTo (60.0, 66.716) (66.716, 60.0) (75.0, 60.0)\nCurveTo (83.284, 60.0) (90.0, 66.716) (90.0, 75.0)\nClose\n```\n\n----------------------------------------\n\nTITLE: UIView Layout Snapshot Output\nDESCRIPTION: Snapshot output showing a UIView container with frame dimensions (320x568) and an embedded UILabel with text 'What's the point?' positioned at (16,20) with dimensions (288x30).\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-extra-small.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 30); text = 'What\\'s the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Path Drawing Commands for Two Shapes\nDESCRIPTION: Two sets of path drawing commands that define geometric shapes. The first shape is a rounded rectangle with a curved corner, while the second is a circle. Commands include MoveTo, LineTo, QuadCurveTo, CurveTo, and Close operations with specific coordinate parameters.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testCGPath.tvOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nQuadCurveTo (3.75, 86.25) (30.0, 90.0)\nQuadCurveTo (56.25, 86.25) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose \n\nMoveTo (90.0, 75.0)\nCurveTo (90.0, 83.284) (83.284, 90.0) (75.0, 90.0)\nCurveTo (66.716, 90.0) (60.0, 83.284) (60.0, 75.0)\nCurveTo (60.0, 66.716) (66.716, 60.0) (75.0, 60.0)\nCurveTo (83.284, 60.0) (90.0, 66.716) (90.0, 75.0)\nClose \n```\n\n----------------------------------------\n\nTITLE: iOS View Hierarchy Snapshot\nDESCRIPTION: A text representation of a UIView hierarchy showing frame dimensions and properties. Contains a parent UIView with a UILabel child element displaying 'What's the point?' text.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-extra-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 38.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Drawing Complex Shape with SVG Path Commands\nDESCRIPTION: This snippet defines a complex shape using SVG path commands. It starts at the origin, creates vertical and curved lines to form a shape with rounded corners and a protruding section.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNSBezierPath.macOS.txt#2025-04-18_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\nMoveTo (0.0, 0.0)\nLineTo (0.0, 60.0)\nCurveTo (0.0, 75.0) (15.0, 90.0) (30.0, 90.0)\nCurveTo (45.0, 90.0) (60.0, 75.0) (60.0, 60.0)\nCurveTo (75.0, 60.0) (90.0, 45.0) (90.0, 30.0)\nCurveTo (90.0, 15.0) (75.0, 0.0) (60.0, 0.0)\nLineTo (0.0, 0.0)\nClose\n```\n\n----------------------------------------\n\nTITLE: Drawing Circular Shape with SVG Curve Commands\nDESCRIPTION: This snippet creates a circular or oval shape using only CurveTo commands in SVG. It defines four curved sections that form a closed shape, likely representing a circle or ellipse.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNSBezierPath.macOS.txt#2025-04-18_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\nMoveTo (85.607, 64.393)\nCurveTo (91.464, 70.251) (91.464, 79.749) (85.607, 85.607)\nCurveTo (79.749, 91.464) (70.251, 91.464) (64.393, 85.607)\nCurveTo (58.536, 79.749) (58.536, 70.251) (64.393, 64.393)\nCurveTo (70.251, 58.536) (79.749, 58.536) (85.607, 64.393)\n```\n\n----------------------------------------\n\nTITLE: Viewing UIKit Component Hierarchy in Swift Snapshot Testing\nDESCRIPTION: A representation of a UIKit view hierarchy as captured by the swift-snapshot-testing framework. The output shows a UIView containing a UILabel with its respective frame dimensions and properties.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-accessibility-medium.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 45.6667); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Structure in Swift for Snapshot Testing\nDESCRIPTION: This code defines a User data structure with three properties: a string 'bio', an integer 'id', and a string 'name'. The structure is likely used as sample data for snapshot testing in Swift.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testAny.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n▿ User\n  - bio: \"Blobbed around the world.\"\n  - id: 1\n  - name: \"Blobby\"\n```\n\n----------------------------------------\n\nTITLE: Generating UIView Hierarchy Snapshot in Swift\nDESCRIPTION: This code snippet represents a UIView hierarchy snapshot, including a main UIView and a nested UILabel. It's commonly used in snapshot testing frameworks to verify the visual appearance of UI components.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-accessibility-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 51.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: NSObject Type Reference in Swift Snapshot Testing\nDESCRIPTION: This code snippet references NSObject, which is the root class of most Objective-C class hierarchies. In a snapshot testing context, this likely indicates functionality for testing NSObject-derived classes.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testAnySnapshotStringConvertible.nsobject.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n- <NSObject>\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy Structure in Swift\nDESCRIPTION: This code snippet represents the structure of a UIView containing a UILabel subview. It shows the frame sizes, autoresizing behavior, and text content of the views.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-accessibility-extra-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 63.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: String Literal in Swift\nDESCRIPTION: A basic Swift string literal containing the classic \"Hello, world!\" text. This is commonly used as sample content in testing frameworks like snapshot testing.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testAnySnapshotStringConvertible.string.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n\"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Collection Output in Swift Snapshot Testing\nDESCRIPTION: This code snippet demonstrates how the swift-snapshot-testing framework displays a collection of strings when rendered as output. The format uses a tree-like structure to show the elements contained in the collection.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SwiftTestingTests/testSnapshot.snap.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ 2 elements\n  - \"Hello\"\n  - \"World\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary and Set Container Output Structure\nDESCRIPTION: A formatted output representation showing a DictionarySetContainer with a dictionary containing string keys and integer values, and a set containing Person objects with name properties. The structure uses hierarchical indentation to show nested relationships.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testDeterministicDictionaryAndSetSnapshots.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ DictionarySetContainer\n  ▿ dict: 3 key/value pairs\n    ▿ (2 elements)\n      - key: \"a\"\n      - value: 1\n    ▿ (2 elements)\n      - key: \"b\"\n      - value: 2\n    ▿ (2 elements)\n      - key: \"c\"\n      - value: 3\n  ▿ set: 2 members\n    ▿ Person\n      - name: \"Brandon\"\n    ▿ Person\n      - name: \"Stephen\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Array Output Format in Swift Snapshot Testing\nDESCRIPTION: Demonstrates the formatted output representation of a Swift array containing string elements when displayed through the swift-snapshot-testing framework. The output shows the array structure with indentation and element markers.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SwiftTestingTests/testSnapshot.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ 2 elements\n  - \"Hello\"\n  - \"World\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Swift Array Element\nDESCRIPTION: Shows the hierarchical output representation of a Swift array containing a single numeric element. The output uses a triangle symbol (▿) to indicate the array structure and a dash (-) to denote individual elements.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testMultipleSnapshots.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ 1 element\n  - 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Array Output in Swift Snapshot Testing\nDESCRIPTION: This snippet shows how the swift-snapshot-testing framework formats an array of strings in a snapshot test result. The output uses a hierarchical format with indentation to represent the array structure.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SwiftTestingTests/testSnapshotFailure.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ 2 elements\n  - \"Hello\"\n  - \"World\"\n```\n\n----------------------------------------\n\nTITLE: Swift Array Representation Example\nDESCRIPTION: A structured representation of a Swift array containing two integer elements. The format follows Swift's standard debug output style with the '▿' character indicating a collection that can be expanded.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testMultipleSnapshots.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ 2 elements\n  - 1\n  - 2\n```\n\n----------------------------------------\n\nTITLE: Displaying User Object Snapshot Test Output\nDESCRIPTION: Shows the hierarchical output format of a snapshot test for a User object containing id, name and bio properties. The output uses indentation and symbols to represent the object structure.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testNamedAssertion.named.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ User\n  - bio: \"Blobbed around the world.\"\n  - id: 1\n  - name: \"Blobby\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Circular Reference Detection in Swift Snapshot Testing\nDESCRIPTION: This output shows how swift-snapshot-testing represents circular references in hierarchical data structures. It demonstrates a Father object containing a Child object, which in turn references back to the Father, creating a circular dependency that the framework detects and marks appropriately.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testRecursion.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ Father\n  ▿ child: Optional<Child>\n    ▿ some: Child\n      ▿ father (circular reference detected)\n```\n\n----------------------------------------\n\nTITLE: Displaying Circular Reference Detection in Swift Object Graph\nDESCRIPTION: This output shows how swift-snapshot-testing formats a circular reference detection when dumping an object graph. The library identifies that the Child object references its Father, which in turn references back to the same Child, creating a circular dependency.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testRecursion.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ Child\n  ▿ father: Father\n    ▿ child: Optional<Child>\n      ▿ some (circular reference detected)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hierarchical User Data Structure in Swift\nDESCRIPTION: A representation of a User object with its properties (bio, id, name) displayed in a hierarchical format. This is likely sample data used in snapshot tests to verify that the object's representation remains consistent across test runs.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/AssertSnapshotSwiftTests/dump.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n▿ User\n  - bio: \"Blobbed around the world.\"\n  - id: 1\n  - name: \"Blobby\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Object Structure for Snapshot Testing in Swift\nDESCRIPTION: This code defines the structure of a User object with properties for bio, id, and name. It's formatted in a way that suggests it's being used in a snapshot test, possibly to verify the object's structure or content.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/AssertSnapshotSwiftTests/dump.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n▿ User\n  - bio: \"Blobbed around the world.\"\n  - id: 1\n  - name: \"Blobby\"\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Point-Free with cURL\nDESCRIPTION: A cURL command that sends a GET request to the Point-Free website with specific headers for accepting HTML content and setting the content type to JSON. It also includes an empty session cookie.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.get-curl.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: text/html\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--cookie \"pf_session={}\" \\\n\t\"https://www.pointfree.co/\"\n```\n\n----------------------------------------\n\nTITLE: Creating a User Record with cURL POST Request to REST API\nDESCRIPTION: This cURL command sends a POST request to create a new user record in the dummy.restapiexample.com API. It includes JSON data with user information (name, salary, and age) and sets the appropriate headers for JSON content type and response.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testURLRequest.post-with-json-curl.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--data \"{\\\"name\\\":\\\"tammy134235345235\\\", \\\"salary\\\":0, \\\"age\\\":\\\"tammy133\\\"}\" \\\n\t\"http://dummy.restapiexample.com/api/v1/create\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Snapshot Functions\nDESCRIPTION: Legacy snapshot testing functions that have been deprecated in favor of newer implementations.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/AssertSnapshot.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshot(matching:as:named:record:timeout:file:testName:line:)\n```\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshots(matching:as:record:timeout:file:testName:line:)-4fz7d\n```\n\nLANGUAGE: swift\nCODE:\n```\nassertSnapshots(matching:as:record:timeout:file:testName:line:)-wq4j\n```\n\nLANGUAGE: swift\nCODE:\n```\nverifySnapshot(matching:as:named:record:snapshotDirectory:timeout:file:testName:line:)\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated diffTool Property in SnapshotTesting Framework (Swift)\nDESCRIPTION: This code snippet shows the documentation for the deprecated diffTool property in the SnapshotTesting framework. It includes a deprecation summary that directs users to use an alternative method for customizing the diff tool and provides a link to migration information.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/Deprecations/diffTool-property-deprecation.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n# ``SnapshotTesting/diffTool``\n\n@DeprecationSummary {\n  Use ``withSnapshotTesting(record:diffTool:operation:)-2kuyr`` to customize the diff tool, instead.\n  See <doc:MigratingTo1.17> for more information.\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the deprecated isRecording property with migration recommendation\nDESCRIPTION: Markdown documentation block that shows the isRecording property is deprecated and provides a recommendation to use withSnapshotTesting function instead with a reference to migration documentation.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Sources/SnapshotTesting/Documentation.docc/Extensions/Deprecations/isRecording-property-deprecation.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``SnapshotTesting/isRecording``\n\n@DeprecationSummary {\n  Use ``withSnapshotTesting(record:diffTool:operation:)-2kuyr`` to customize the record mode,\n  instead. See <doc:MigratingTo1.17> for more information.\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading and Content - Project Contributing Guidelines\nDESCRIPTION: Markdown content defining the contribution guidelines and code of conduct reference for the swift-snapshot-testing project. Includes a link to the full code of conduct document and contact information for reporting violations.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by its [Code of Conduct](.github/CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code. Please report unacceptable behavior to support@pointfree.co.\n```\n\n----------------------------------------\n\nTITLE: Displaying UIView Hierarchy in Snapshot Testing Format\nDESCRIPTION: A text representation of a UIView hierarchy that includes a UILabel. This format shows the frame dimensions, text content, and layer information that would be used in snapshot testing to verify UI appearance.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-accessibility-extra-extra-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 69.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```\n\n----------------------------------------\n\nTITLE: UIView Hierarchy Snapshot in Swift\nDESCRIPTION: Shows the textual representation of a UIView containing a UILabel component with specific frame dimensions and properties. The snapshot includes layout information like frame coordinates, autoresizing behavior, and layer configuration.\nSOURCE: https://github.com/pointfreeco/swift-snapshot-testing/blob/main/Tests/SnapshotTestingTests/__Snapshots__/SnapshotTestingTests/testTraitsWithViewController.label-accessibility-extra-large.txt#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n<UIView; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer>>\n   | <UILabel; frame = (16 20; 288 57.3333); text = 'What's the point?'; userInteractionEnabled = NO; layer = <_UILabelLayer>>\n```"
  }
]