[
  {
    "owner": "rasterio",
    "repo": "rasterio",
    "content": "TITLE: Writing Array to Single Band TIFF using Rasterio\nDESCRIPTION: Example showing how to write a numpy array to a new 8-bit TIFF file using Rasterio. The code demonstrates setting up the environment, configuring the output profile with compression, and writing the data using a context manager.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/writing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Register GDAL format drivers and configuration options with a\n# context manager.\nwith rasterio.Env():\n\n    # Write an array as a raster band to a new 8-bit file. For\n    # the new file's profile, we start with the profile of the source\n    profile = src.profile\n\n    # And then change the band count to 1, set the\n    # dtype to uint8, and specify LZW compression.\n    profile.update(\n        dtype=rasterio.uint8,\n        count=1,\n        compress='lzw')\n\n    with rasterio.open('example.tif', 'w', **profile) as dst:\n        dst.write(array.astype(rasterio.uint8), 1)\n\n# At the end of the ``with rasterio.Env()`` block, context\n# manager exits and all drivers are de-registered.\n```\n\n----------------------------------------\n\nTITLE: Reading Raster Data and Spatial Indexing\nDESCRIPTION: Demonstrates reading band data and performing spatial indexing operations.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> band1 = dataset.read(1)\n>>> band1[dataset.height // 2, dataset.width // 2]\n17491\n>>> x, y = (dataset.bounds.left + 100000, dataset.bounds.top - 50000)\n>>> row, col = dataset.index(x, y)\n>>> band1[row, col]\n7566\n```\n\n----------------------------------------\n\nTITLE: Processing Multi-band Raster Image in Python using Rasterio\nDESCRIPTION: Example showing how to read multiple bands from a GeoTIFF file, average them to create a panchromatic band, and write the result to a new compressed TIFF file using Rasterio and NumPy.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\n\n# Read raster bands directly to Numpy arrays.\n#\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    r, g, b = src.read()\n\n# Combine arrays in place. Expecting that the sum will\n# temporarily exceed the 8-bit integer range, initialize it as\n# a 64-bit float (the numpy default) array. Adding other\n# arrays to it in-place converts those arrays \"up\" and\n# preserves the type of the total array.\ntotal = np.zeros(r.shape)\n\nfor band in r, g, b:\n    total += band\n\ntotal /= 3\n\n# Write the product as a raster band to a new 8-bit file. For\n# the new file's profile, we start with the meta attributes of\n# the source file, but then change the band count to 1, set the\n# dtype to uint8, and specify LZW compression.\nprofile = src.profile\nprofile.update(dtype=rasterio.uint8, count=1, compress='lzw')\n\nwith rasterio.open('example-total.tif', 'w', **profile) as dst:\n    dst.write(total.astype(rasterio.uint8), 1)\n```\n\n----------------------------------------\n\nTITLE: Importing and Opening Dataset with Rasterio\nDESCRIPTION: Shows how to import Rasterio and open a GeoTIFF file in read mode, with basic attribute checks.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> dataset = rasterio.open('example.tif')\n>>> dataset.name\n'example.tif'\n>>> dataset.mode\n'r'\n>>> dataset.closed\nFalse\n```\n\n----------------------------------------\n\nTITLE: Extracting Raster Shapes in Python using Rasterio\nDESCRIPTION: Demonstrates how to extract vector shapes from a raster image using Rasterio's features.shapes() function. Shows basic shape extraction and handling of mask data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/features.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pprint\nimport rasterio\nfrom rasterio import features\n\nwith rasterio.open('13547682814_f2e459f7a5_o_d.png') as src:\n    blue = src.read(3)\n\n# pprint requires that the image dtype must be one of: int16, int32, uint8, uint16, float32.\n# If your data comes as int8 you can cast your data to an appropriate dtype like this: \n# data = data.astype('int16')\n\nmask = blue != 255\nshapes = features.shapes(blue, mask=mask)\npprint.pprint(next(shapes))\n```\n\n----------------------------------------\n\nTITLE: Writing to Raster Windows with Rasterio\nDESCRIPTION: Demonstrates creating a new GeoTIFF and writing data to a specific window within it.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimage = numpy.ones((150, 250), dtype=rasterio.ubyte) * 127\n\nwith rasterio.open(\n        '/tmp/example.tif', 'w',\n        driver='GTiff', width=500, height=300, count=1,\n        dtype=image.dtype) as dst:\n    dst.write(image, window=Window(50, 30, 250, 150), indexes=1)\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers with Raster Datasets in Python using Rasterio\nDESCRIPTION: Shows how to use Rasterio datasets with context managers (with statements) to ensure proper closing of files, even when exceptions occur.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('tests/data/RGB.byte.tif', 'r') as one:\n...     with rasterio.open('tests/data/RGB.byte.tif', 'r') as two:\n...         print(two)\n...     print(one)\n...     raise Exception(\"an error occurred\")\n...\n<open DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\n<open DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\nTraceback (most recent call last):\n  File \"<stdin>\", line 5, in <module>\nException: an error occurred\n>>> print(two)\n<closed DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\n>>> print(one)\n<closed DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\n```\n\n----------------------------------------\n\nTITLE: Using Format-Specific Options when Opening Raster Datasets in Python with Rasterio\nDESCRIPTION: Demonstrates how to pass format-specific options when opening a raster dataset. The example shows how to limit GeoTIFF georeference sources to internal TIFF tags.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('tests/data/RGB.byte.tif', GEOREF_SOURCES='INTERNAL') as dataset:\n...     # .aux.xml, .tab, .tfw sidecar files will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Reading a Single Band from a Raster Dataset in Python using Rasterio\nDESCRIPTION: Demonstrates how to read a single band from a raster dataset and check its shape. The example reads the first band and shows that it's a 2-dimensional numpy array.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> array = src.read(1)\n>>> array.shape\n(718, 791)\n```\n\n----------------------------------------\n\nTITLE: Using Source Dataset Profile for Writing GeoTIFF in Python with Rasterio\nDESCRIPTION: This snippet demonstrates how to open a source dataset, copy its profile, modify it for writing a GeoTIFF, and then use it to create a new dataset. It shows how to change the driver and add GeoTIFF-specific parameters.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/profiles.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('first.jp2') as src_dataset:\n\n    # Get a copy of the source dataset's profile. Thus our\n    # destination dataset will have the same dimensions,\n    # number of bands, data type, and georeferencing as the\n    # source dataset.\n    kwds = src_dataset.profile\n\n    # Change the format driver for the destination dataset to\n    # 'GTiff', short for GeoTIFF.\n    kwds['driver'] = 'GTiff'\n\n    # Add GeoTIFF-specific keyword arguments.\n    kwds['tiled'] = True\n    kwds['blockxsize'] = 256\n    kwds['blockysize'] = 256\n    kwds['photometric'] = 'YCbCr'\n    kwds['compress'] = 'JPEG'\n\n    with rasterio.open('second.tif', 'w', **kwds) as dst_dataset:\n        # Write data to the destination dataset.\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset Properties\nDESCRIPTION: Demonstrates how to access basic dataset properties like dimensions and data types.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> dataset.count\n1\n>>> dataset.width\n7731\n>>> dataset.height\n7871\n>>> {i: dtype for i, dtype in zip(dataset.indexes, dataset.dtypes)}\n{1: 'uint16'}\n```\n\n----------------------------------------\n\nTITLE: Reprojecting a GeoTIFF Dataset in Python Using Rasterio\nDESCRIPTION: This code snippet shows how to reproject a GeoTIFF dataset from one coordinate reference system to another using Rasterio. It uses calculate_default_transform to determine the optimal resolution and transform for the destination raster, then applies the reprojection.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reproject.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\ndst_crs = 'EPSG:4326'\n\nwith rasterio.open('rasterio/tests/data/RGB.byte.tif') as src:\n    transform, width, height = calculate_default_transform(\n        src.crs, dst_crs, src.width, src.height, *src.bounds)\n    kwargs = src.meta.copy()\n    kwargs.update({\n        'crs': dst_crs,\n        'transform': transform,\n        'width': width,\n        'height': height\n    })\n\n    with rasterio.open('/tmp/RGB.byte.wgs84.tif', 'w', **kwargs) as dst:\n        for i in range(1, src.count + 1):\n            reproject(\n                source=rasterio.band(src, i),\n                destination=rasterio.band(dst, i),\n                src_transform=src.transform,\n                src_crs=src.crs,\n                dst_transform=transform,\n                dst_crs=dst_crs,\n                resampling=Resampling.nearest)\n```\n\n----------------------------------------\n\nTITLE: Block Operations in Rasterio\nDESCRIPTION: Shows how to work with raster dataset blocks, including reading block shapes and performing block-by-block operations.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     for i, shape in enumerate(src.block_shapes, 1):\n...         print((i, shape))\n...\n(1, (3, 791))\n(2, (3, 791))\n(3, (3, 791))\n\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     for ji, window in src.block_windows(1):\n...         print((ji, window))\n...\n((0, 0), ((0, 3), (0, 791)))\n((1, 0), ((3, 6), (0, 791)))\n...\n\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     for ji, window in src.block_windows(1):\n...         r = src.read(1, window=window)\n...         print(r.shape)\n...         break\n...\n(3, 791)\n\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     assert len(set(src.block_shapes)) == 1\n...     for ji, window in src.block_windows(1):\n...         b, g, r = (src.read(k, window=window) for k in (1, 2, 3))\n...         print((ji, r.shape, g.shape, b.shape))\n...         break\n...\n((0, 0), (3, 791), (3, 791), (3, 791))\n```\n\n----------------------------------------\n\nTITLE: Working with Raster Windows using Rasterio\nDESCRIPTION: Shows how to use Rasterio's windowing functionality to read specific portions of a raster file based on georeferenced coordinates.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    window = src.window(*src.bounds)\n    print(window)\n    print(src.read(window=window).shape)\n```\n\n----------------------------------------\n\nTITLE: Concurrent Raster Processing with ThreadPoolExecutor\nDESCRIPTION: Implementation of concurrent raster processing using ThreadPoolExecutor. The program processes raster data window-by-window with controlled access for reading and writing operations using threading locks.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/concurrency.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"thread_pool_executor.py\n\nOperate on a raster dataset window-by-window using a ThreadPoolExecutor.\n\nSimulates a CPU-bound thread situation where multiple threads can improve\nperformance.\n\nWith -j 4, the program returns in about 1/4 the time as with -j 1.\n\"\"\"\n\nimport concurrent.futures\nimport threading\n\nimport rasterio\nfrom rasterio._example import compute\n\n\ndef main(infile, outfile, num_workers=4):\n    \"\"\"Process infile block-by-block and write to a new file\n\n    The output is the same as the input, but with band order\n    reversed.\n    \"\"\"\n\n    with rasterio.open(infile) as src:\n\n        # Create a destination dataset based on source params. The\n        # destination will be tiled, and we'll process the tiles\n        # concurrently.\n        profile = src.profile\n        profile.update(blockxsize=128, blockysize=128, tiled=True)\n\n        with rasterio.open(outfile, \"w\", **src.profile) as dst:\n            windows = [window for ij, window in dst.block_windows()]\n\n            # We cannot write to the same file from multiple threads\n            # without causing race conditions. To safely read/write\n            # from multiple threads, we use a lock to protect the\n            # DatasetReader/Writer\n            read_lock = threading.Lock()\n            write_lock = threading.Lock()\n\n            def process(window):\n                with read_lock:\n                    src_array = src.read(window=window)\n\n                # The computation can be performed concurrently\n                result = compute(src_array)\n\n                with write_lock:\n                    dst.write(result, window=window)\n\n            # We map the process() function over the list of\n            # windows.\n            with concurrent.futures.ThreadPoolExecutor(\n                max_workers=num_workers\n            ) as executor:\n                executor.map(process, windows)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Objects in Python with Rasterio\nDESCRIPTION: Demonstrates how to create Window objects using direct initialization and slice methods in Rasterio. Windows represent rectangular subsets of raster datasets defined by column/row offsets and dimensions.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rasterio.windows import Window\n\nWindow(col_off, row_off, width, height)\n```\n\n----------------------------------------\n\nTITLE: Opening and Inspecting a Raster Dataset in Python using Rasterio\nDESCRIPTION: Demonstrates how to open a raster file using Rasterio and inspect basic properties of the dataset object. Shows accessing attributes like name, mode, and closed status.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> src = rasterio.open('tests/data/RGB.byte.tif')\n>>> src\n<open DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\n>>> src.name\n'tests/data/RGB.byte.tif'\n>>> src.mode\n'r'\n>>> src.closed\nFalse\n```\n\n----------------------------------------\n\nTITLE: Extracting GeoJSON Shapes from Raster Data using Rasterio\nDESCRIPTION: Example program demonstrating how to read a GeoTIFF file, extract valid data mask shapes, and transform coordinates to CRS84 (EPSG:4326) format. Uses rasterio's features and warp modules to process geographic data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\nimport rasterio.features\nimport rasterio.warp\n\nwith rasterio.open('example.tif') as dataset:\n\n    # Read the dataset's valid data mask as a ndarray.\n    mask = dataset.dataset_mask()\n\n    # Extract feature shapes and values from the array.\n    for geom, val in rasterio.features.shapes(\n            mask, transform=dataset.transform):\n\n        # Transform shapes from the dataset's own coordinate\n        # reference system to CRS84 (EPSG:4326).\n        geom = rasterio.warp.transform_geom(\n            dataset.crs, 'EPSG:4326', geom, precision=6)\n\n        # Print GeoJSON shapes to stdout.\n        print(geom)\n```\n\nLANGUAGE: python\nCODE:\n```\n{'type': 'Polygon', 'coordinates': [[(-77.730817, 25.282335), ...]]}\n```\n\n----------------------------------------\n\nTITLE: Writing Raster Data with Context Manager\nDESCRIPTION: Shows how to write raster data using Python's context manager (with statement). This method automatically handles file closure and is the recommended approach for writing raster data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\n    '/tmp/new.tif',\n    'w',\n    driver='GTiff',\n    height=Z.shape[0],\n    width=Z.shape[1],\n    count=1,\n    dtype=Z.dtype,\n    crs='+proj=latlong',\n    transform=transform,\n) as dst:\n    dst.write(Z, 1)\n```\n\n----------------------------------------\n\nTITLE: Saving Masked Raster Image with Updated Metadata using Rasterio in Python\nDESCRIPTION: This snippet updates the metadata of the masked image, including its new dimensions and transform. It then writes the masked image to a new file using the updated metadata.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masking-by-shapefile.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nout_meta.update({\"driver\": \"GTiff\",\n                 \"height\": out_image.shape[1],\n                 \"width\": out_image.shape[2],\n                 \"transform\": out_transform})\n\nwith rasterio.open(\"RGB.byte.masked.tif\", \"w\", **out_meta) as dest:\n    dest.write(out_image)\n```\n\n----------------------------------------\n\nTITLE: Reading Raster Windows with Rasterio\nDESCRIPTION: Example showing how to read a 256x512 subset of a raster file using windowed reading.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     w = src.read(1, window=Window(0, 0, 512, 256))\n...\n>>> print(w.shape)\n(256, 512)\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset with Custom CRS\nDESCRIPTION: Demonstrates how to create a new raster dataset with a specified CRS using EPSG code in Web Mercator projection.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/georeferencing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> profile = {'driver': 'GTiff', 'height': 100, 'width': 100, 'count': 1, 'dtype': rasterio.uint8}\n>>> with rasterio.open('/tmp/foo.tif', 'w', crs='EPSG:3857', **profile) as dst:\n...     pass # write data to this Web Mercator projection dataset.\n```\n\n----------------------------------------\n\nTITLE: Masking Raster Image with Shapefile Geometries using Rasterio in Python\nDESCRIPTION: This code opens a raster image using Rasterio and applies a mask based on the shapes extracted from the shapefile. It crops the image to the extent of the mask and returns the masked image along with its updated transform.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masking-by-shapefile.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"tests/data/RGB.byte.tif\") as src:\n    out_image, out_transform = rasterio.mask.mask(src, shapes, crop=True)\n    out_meta = src.meta\n```\n\n----------------------------------------\n\nTITLE: Rasterizing Vector Shapes in Python using Rasterio\nDESCRIPTION: Demonstrates how to burn vector shapes into a raster using Rasterio's features.rasterize() function. Shows basic rasterization and georeferenced rasterization.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/features.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimage = features.rasterize(\n            ((g, 255) for g, v in shapes),\n            out_shape=src.shape)\n```\n\nLANGUAGE: python\nCODE:\n```\nimage = features.rasterize(\n            ((g, 255) for g, v in shapes),\n            out_shape=src.shape,\n            transform=src.transform)\n```\n\n----------------------------------------\n\nTITLE: Virtual Warping and Tile Extraction with Rasterio\nDESCRIPTION: Demonstrates how to virtually warp a raster dataset from EPSG:32618 to EPSG:3857 (Web Mercator) and extract pixels for a specific zoom level tile. The code handles coordinate transformation, window calculation, and writing the resulting tile to disk.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/virtual-warping.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom affine import Affine\nimport mercantile\n\nimport rasterio\nfrom rasterio.enums import Resampling\nfrom rasterio.vrt import WarpedVRT\n\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    with WarpedVRT(src, crs='EPSG:3857',\n                     resampling=Resampling.bilinear) as vrt:\n\n        # Determine the destination tile and its mercator bounds using\n        # functions from the mercantile module.\n        dst_tile = mercantile.tile(*vrt.lnglat(), 9)\n        left, bottom, right, top = mercantile.xy_bounds(*dst_tile)\n\n        # Determine the window to use in reading from the dataset.\n        dst_window = vrt.window(left, bottom, right, top)\n\n        # Read into a 3 x 512 x 512 array. Our output tile will be\n        # 512 wide x 512 tall.\n        data = vrt.read(window=dst_window, out_shape=(3, 512, 512))\n\n        # Use the source's profile as a template for our output file.\n        profile = vrt.profile\n        profile['width'] = 512\n        profile['height'] = 512\n        profile['driver'] = 'GTiff'\n\n        # We need determine the appropriate affine transformation matrix\n        # for the dataset read window and then scale it by the dimensions\n        # of the output array.\n        dst_transform = vrt.window_transform(dst_window)\n        scaling = Affine.scale(dst_window.height / 512,\n                               dst_window.width / 512)\n        dst_transform *= scaling\n        profile['transform'] = dst_transform\n\n        # Write the image tile to disk.\n        with rasterio.open('/tmp/test-tile.tif', 'w', **profile) as dst:\n            dst.write(data)\n```\n\n----------------------------------------\n\nTITLE: Reading Data with MemoryFile\nDESCRIPTION: Demonstrates how to read GeoTIFF data directly from bytes using Rasterio's MemoryFile class.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rasterio.io import MemoryFile\n\n\nwith MemoryFile(data) as memfile:\n    with memfile.open() as dataset:\n        data_array = dataset.read()\n```\n\n----------------------------------------\n\nTITLE: HTTP Upload with MemoryFile\nDESCRIPTION: Shows how to use MemoryFile for HTTP uploads using the requests library.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith MemoryFile() as memfile:\n    with memfile.open(driver='GTiff', count=3, ...) as dataset:\n        dataset.write(data_array)\n\n    requests.post('https://example.com/upload', data=memfile)\n```\n\n----------------------------------------\n\nTITLE: Setting GDAL Config Options - Basic GDAL Example\nDESCRIPTION: Demonstrates the basic GDAL approach to setting configuration options, specifically forcing RGBA mode for TIFF files. Shows the traditional method of setting and unsetting options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngdal.SetConfigOption('GTIFF_FORCE_RGBA', 'YES')\nds = gdal.Open('data/stefan_full_greyalpha.tif')\ngdal.SetConfigOption('GTIFF_FORCE_RGBA', None)\n```\n\n----------------------------------------\n\nTITLE: Reading All Bands from a Raster Dataset in Python using Rasterio\nDESCRIPTION: Demonstrates how to read all bands of a raster dataset into a 3-dimensional numpy array. The shape of the array is (bands, rows, columns).\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> array = src.read()\n>>> array.shape\n(3, 718, 791)\n```\n\n----------------------------------------\n\nTITLE: Using Affine Transformation Matrix in Rasterio\nDESCRIPTION: Demonstrates coordinate transformation using AffineTransformer with an Affine transformation matrix to convert between pixel and geographic coordinates.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> transform = Affine(300.0379266750948, 0.0, 101985.0, 0.0,\n                       -300.041782729805, 2826915.0)\n>>> transformer = rasterio.transform.AffineTransformer(transform)\n>>> transformer.xy(0, 0)\n(102135.01896333754, 2826764.979108635)\n>>> transformer.rowcol(102135.01896333754, 2826764.979108635)\n(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Upsampling Raster Image using Bilinear Resampling in Python\nDESCRIPTION: Demonstrates how to upsample a raster image by a factor of 2 using bilinear resampling. The example shows how to read image data, resize it, and adjust the transform accordingly. Can be modified for downsampling by using an upscale_factor less than 1.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/resampling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\nfrom rasterio.enums import Resampling\n\nupscale_factor = 2\n\nwith rasterio.open(\"example.tif\") as dataset:\n\n    # resample data to target shape\n    data = dataset.read(\n        out_shape=(\n            dataset.count,\n            int(dataset.height * upscale_factor),\n            int(dataset.width * upscale_factor)\n        ),\n        resampling=Resampling.bilinear\n    )\n\n    # scale image transform\n    transform = dataset.transform * dataset.transform.scale(\n        (dataset.width / data.shape[-1]),\n        (dataset.height / data.shape[-2])\n    )\n```\n\n----------------------------------------\n\nTITLE: Using DefaultGTiffProfile for Creating New Dataset in Python with Rasterio\nDESCRIPTION: This snippet shows how to use the DefaultGTiffProfile to create a new GeoTIFF dataset. It demonstrates that the count parameter needs to be specified when using this profile, as it's not included in the default settings.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/profiles.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rasterio.profiles import DefaultGTiffProfile\n\nwith rasterio.open(\n        'output.tif', 'w', **DefaultGTiffProfile(count=3)) as dst_dataset:\n    # Write data to the destination dataset.\n```\n\n----------------------------------------\n\nTITLE: Single Band Visualization with Custom Colormap\nDESCRIPTION: Demonstrates plotting a single band using show function with optional parameters like colormap specification.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> show((src, 2), cmap='viridis')\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show(src.read(2), transform=src.transform, cmap='viridis')\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n```\n\n----------------------------------------\n\nTITLE: Setting GeoTIFF Creation Options in Python with Rasterio\nDESCRIPTION: This example shows how to set GeoTIFF creation options when opening a file in write mode with Rasterio. It demonstrates setting compression, tiling, block sizes, and photometric interpretation options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/image_options.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"output.tif\", 'w', **src.meta, compress=\"JPEG\",\n                   tiled=True, blockxsize=256, blockysize=256,\n                   photometric=\"YCBCR\") as dataset:\n    # Write data to the dataset.\n```\n\n----------------------------------------\n\nTITLE: Accessing Raster File Properties with Rasterio\nDESCRIPTION: Demonstrates how to access basic properties of a geospatial raster file including dimensions, coordinate reference system (CRS), transform matrix, and band information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    print(src.width, src.height)\n    print(src.crs)\n    print(src.transform)\n    print(src.count)\n    print(src.indexes)\n```\n\n----------------------------------------\n\nTITLE: Working with Raster Windows\nDESCRIPTION: Shows how to read a subset of raster data using Rasterio's Window abstraction.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsrc = rasterio.open('example.tif')\n\nxoff, yoff = 0, 0\nxsize, ysize = 10, 10\nsubset = src.read(1, window=Window(xoff, yoff, xsize, ysize))\n```\n\n----------------------------------------\n\nTITLE: Normalizing Raster Data with WarpedVRT\nDESCRIPTION: Python script demonstrating how to normalize multiple raster datasets to consistent dimensions, CRS, and cell size within a pre-defined bounding box using WarpedVRT.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/virtual-warping.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import division\n\nimport os\n\nimport affine\n\nimport rasterio\nfrom rasterio.crs import CRS\nfrom rasterio.enums import Resampling\nfrom rasterio import shutil as rio_shutil\nfrom rasterio.vrt import WarpedVRT\n\n\ninput_files = (\n    # This file is in EPSG:32618\n    'tests/data/RGB.byte.tif',\n    # This file is in EPSG:4326\n    'tests/data/WGS84-RGB.byte.tif'\n)\n\n# Destination CRS is Web Mercator\ndst_crs = CRS.from_epsg(3857)\n\n# These coordinates are in Web Mercator\ndst_bounds = -8744355, 2768114, -8559167, 2908677\n\n# Output image dimensions\ndst_height = dst_width = 100\n\n# Output image transform\nleft, bottom, right, top = dst_bounds\nxres = (right - left) / dst_width\nyres = (top - bottom) / dst_height\ndst_transform = affine.Affine(xres, 0.0, left,\n                              0.0, -yres, top)\n\nvrt_options = {\n    'resampling': Resampling.cubic,\n    'crs': dst_crs,\n    'transform': dst_transform,\n    'height': dst_height,\n    'width': dst_width,\n}\n\nfor path in input_files:\n\n    with rasterio.open(path) as src:\n\n        with WarpedVRT(src, **vrt_options) as vrt:\n\n            # At this point 'vrt' is a full dataset with dimensions,\n            # CRS, and spatial extent matching 'vrt_options'.\n\n            # Read all data into memory.\n            data = vrt.read()\n\n            # Process the dataset in chunks.  Likely not very efficient.\n            for _, window in vrt.block_windows():\n                data = vrt.read(window=window)\n\n            # Dump the aligned data into a new file.  A VRT representing\n            # this transformation can also be produced by switching\n            # to the VRT driver.\n            directory, name = os.path.split(path)\n            outfile = os.path.join(directory, 'aligned-{}'.format(name))\n            rio_shutil.copy(vrt, outfile, driver='GTiff')\n```\n\n----------------------------------------\n\nTITLE: Accessing Web-Hosted ZIP Archives\nDESCRIPTION: Demonstrates accessing a GeoTIFF file within a ZIP archive hosted on the web using zip+https scheme.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"zip+https://github.com/rasterio/rasterio/files/13675561/files.zip!RGB.byte.tif\") as src:\n    print(src.shape)\n\n# Printed:\n# (718, 791)\n```\n\n----------------------------------------\n\nTITLE: Warping Raster with Bounds and Resolution\nDESCRIPTION: Shows how to warp a raster file using specified bounds and resolution in the target coordinate system\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ rio warp input.tif output.tif --dst-crs EPSG:4326 --bounds -78 22 -76 24 --res 0.1\n```\n\n----------------------------------------\n\nTITLE: Dataset Coordinate Methods in Rasterio\nDESCRIPTION: Example of using dataset methods for coordinate transformation with a real file.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('RGB.byte.tif') as src:\n            print(src.xy(0, 0))\n(102135.01896333754, 2826764.979108635)\n```\n\n----------------------------------------\n\nTITLE: RGB Display Using Rasterio Plot Show Function\nDESCRIPTION: Shows equivalent methods for displaying RGB data using rasterio.plot.show, either with a dataset object or numpy array with transform.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio.plot import show\n>>> show(src)\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show(src.read(), transform=src.transform)\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n```\n\n----------------------------------------\n\nTITLE: Setting GDAL Configuration Options in Python with Rasterio\nDESCRIPTION: This snippet demonstrates how to use Rasterio's Env class to set GDAL configuration options. In this example, it sets the GDAL_TIFF_INTERNAL_MASK option to True, which will cause GeoTIFFs written within this context to have internal masks instead of .msk sidecar files.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/image_options.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n\nwith rasterio.Env(GDAL_TIFF_INTERNAL_MASK=True):\n    # GeoTIFFs written here will have internal masks, not the\n    # .msk sidecars.\n    # ...\n\n# Option is gone and the default (False) returns.\n```\n\n----------------------------------------\n\nTITLE: Reprojecting with Rational Polynomial Coefficients (RPCs) in Python Using Rasterio\nDESCRIPTION: This code snippet shows how to reproject a dataset using Rational Polynomial Coefficients (RPCs) with Rasterio. It demonstrates the use of RPCs for geocoding (orthorectifying) datasets, resampling and reorienting them to a new coordinate reference system.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reproject.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\nfrom rasterio.warp import reproject\nfrom rasterio.enums import Resampling\n\nwith rasterio.open('RGB.byte.rpc.vrt') as source:\n    print(source.rpcs)\n    src_crs = \"EPSG:4326\"  # This is the crs of the rpcs\n\n    # Optional keyword arguments to be passed to GDAL transformer\n    # https://gdal.org/api/gdal_alg.html?highlight=gdalcreategenimgprojtransformer2#_CPPv432GDALCreateGenImgProjTransformer212GDALDatasetH12GDALDatasetHPPc\n    kwargs = {\n        'RPC_DEM': '/path/to/dem.tif'\n    }\n\n    # Destination: a 1024 x 1024 dataset in Web Mercator (EPSG:3857)\n    destination = np.zeros((1024, 1024), dtype=np.uint8)\n    dst_crs = \"EPSG:3857\"\n\n    _, dst_transform = reproject(\n        rasterio.band(source, 1),\n        destination,\n        rpcs=source.rpcs,\n        src_crs=src_crs,\n        dst_crs=dst_crs,\n        resampling=Resampling.nearest,\n        **kwargs\n    )\n\n    assert destination.any()\n```\n\n----------------------------------------\n\nTITLE: Writing Dataset to MemoryFile\nDESCRIPTION: Demonstrates how to write data to a MemoryFile using dataset API methods.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith MemoryFile() as memfile:\n    with memfile.open(driver='GTiff', count=3, ...) as dataset:\n        dataset.write(data_array)\n```\n\n----------------------------------------\n\nTITLE: Clipping Rasters with rio clip\nDESCRIPTION: Examples of using the 'rio clip' command to clip a raster dataset using either explicit bounds or the bounds from a template raster.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ rio clip input.tif output.tif --bounds xmin ymin xmax ymax\n$ rio clip input.tif output.tif --like template.tif\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rio clip input.tif output.tif --bounds $(fio info features.shp --bounds)\n```\n\n----------------------------------------\n\nTITLE: Accessing ZIP Archive Data with Rasterio\nDESCRIPTION: Demonstrates how to open and read a GeoTIFF file stored within a local ZIP archive using the zip+file URI scheme.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"zip+file://tests/data/files.zip!RGB.byte.tif\") as src:\n    print(src.shape)\n\n# Printed:\n# (718, 791)\n```\n\n----------------------------------------\n\nTITLE: Writing Rasterized Results to GeoTIFF in Python using Rasterio\nDESCRIPTION: Shows how to write rasterized results to a GeoTIFF file with proper parameters and configuration.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/features.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\n        '/tmp/rasterized-results.tif', 'w', \n        driver='GTiff', \n        dtype=rasterio.uint8, \n        count=1, \n        width=src.width, \n        height=src.height) as dst:\n    dst.write(image, indexes=1)\n```\n\n----------------------------------------\n\nTITLE: Accessing CRS in Rasterio\nDESCRIPTION: Demonstrates how to open a raster dataset and access its Coordinate Reference System (CRS) information. Shows retrieving both the PROJ.4 format and WKT representation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/georeferencing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> src = rasterio.open('tests/data/RGB.byte.tif')\n>>> src.crs\nCRS({'init': 'epsg:32618'})\n```\n\n----------------------------------------\n\nTITLE: Modern GDAL Environment Setup\nDESCRIPTION: Shows the new recommended way to set up the GDAL environment using rasterio.Env() for driver registration and file operations.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\nimport rasterio.env\n\nwith rasterio.Env():\n\n    with rasterio.open('tests/data/RGB.byte.tif') as src:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Raster Band using Matplotlib in Python\nDESCRIPTION: Shows how to visualize a single band of a raster dataset using Matplotlib. The example uses the 'pink' colormap to display the array.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from matplotlib import pyplot\n>>> pyplot.imshow(array, cmap='pink')\n<matplotlib.image.AxesImage object at 0x...>\n>>> pyplot.show()  # doctest: +SKIP\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Raster Datasets with rio create\nDESCRIPTION: Example of using the 'rio create' command to create a new empty raster dataset with specified format, data type, dimensions, and other creation options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ rio create new.tif -f GTiff -t uint8 -n 3 -h 512 -w 512 \\\n> --co tiled=true --co blockxsize=256 --co blockysize=256\n```\n\n----------------------------------------\n\nTITLE: Window Creation from Slices in Rasterio\nDESCRIPTION: Shows how to create Window objects using array slices and slice objects, including examples with relative and open-ended slices using height/width parameters.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWindow.from_slices((row_start, row_stop), (col_start, col_stop))\nWindow.from_slices(slice(row_start, row_stop), slice(col_start, col_stop))\n\nWindow.from_slices(slice(None), slice(None), height=100, width=100)\n# Window(col_off=0.0, row_off=0.0, width=100.0, height=100.0)\n\nWindow.from_slices(slice(10, -10), slice(10, -10), height=100, width=100)\n# Window(col_off=10, row_off=10, width=80, height=80)\n```\n\n----------------------------------------\n\nTITLE: Reprojecting Between Arrays in Python Using Rasterio\nDESCRIPTION: This snippet demonstrates how to reproject between two numpy arrays using Rasterio's reproject function. It creates a source array with a specific coordinate reference system and transform, then reprojects it to a destination array with different parameters.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reproject.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\nfrom rasterio import Affine as A\nfrom rasterio.warp import reproject, Resampling\n\nwith rasterio.Env():\n\n    # As source: a 512 x 512 raster centered on 0 degrees E and 0\n    # degrees N, each pixel covering 15\".\n    rows, cols = src_shape = (512, 512)\n    d = 1.0/240 # decimal degrees per pixel\n    # The following is equivalent to\n    # A(d, 0, -cols*d/2, 0, -d, rows*d/2).\n    src_transform = A.translation(-cols*d/2, rows*d/2) * A.scale(d, -d)\n    src_crs = {'init': 'EPSG:4326'}\n    source = np.ones(src_shape, np.uint8)*255\n\n    # Destination: a 1024 x 1024 dataset in Web Mercator (EPSG:3857)\n    # with origin at 0.0, 0.0.\n    dst_shape = (1024, 1024)\n    dst_transform = A.translation(-237481.5, 237536.4) * A.scale(425.0, -425.0)\n    dst_crs = {'init': 'EPSG:3857'}\n    destination = np.zeros(dst_shape, np.uint8)\n\n    reproject(\n        source,\n        destination,\n        src_transform=src_transform,\n        src_crs=src_crs,\n        dst_transform=dst_transform,\n        dst_crs=dst_crs,\n        resampling=Resampling.nearest)\n\n    # Assert that the destination is only partly filled.\n    assert destination.any()\n    assert not destination.all()\n```\n\n----------------------------------------\n\nTITLE: Basic Single Band Plotting with Matplotlib\nDESCRIPTION: Demonstrates how to read and display a single raster band using pyplot's imshow function with a custom colormap.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> from matplotlib import pyplot\n>>> src = rasterio.open(\"tests/data/RGB.byte.tif\")\n>>> pyplot.imshow(src.read(1), cmap='pink')\n<matplotlib.image.AxesImage object at 0x...>\n>>> pyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing Zip Archives with Rasterio in Python\nDESCRIPTION: Shows how to identify datasets within a local zip file using the 'zip' scheme from Apache Commons VFS. The '!' character separates the archive path from the internal file path.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"zip:///path/to/file.zip!/folder/file.tif\"\n\"zip+file:///path/to/file.zip!/folder/file.tif\"\n```\n\n----------------------------------------\n\nTITLE: Working with Numpy Masked Arrays in Rasterio\nDESCRIPTION: Demonstrates reading dataset bands as NumPy masked arrays and converting between GDAL and NumPy mask formats.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masks.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> src = rasterio.open(\"tests/data/RGB.byte.tif\")\n>>> blue = src.read(1, masked=True)\n>>> blue.mask\narray([[ True,  True,  True, ...,  True,  True,  True],\n       [ True,  True,  True, ...,  True,  True,  True],\n       [ True,  True,  True, ...,  True,  True,  True],\n       ...\n       [ True,  True,  True, ...,  True,  True,  True],\n       [ True,  True,  True, ...,  True,  True,  True],\n       [ True,  True,  True, ...,  True,  True,  True]], dtype=bool)\n\n>>> msk = (~blue.mask * 255).astype('uint8')\n```\n\n----------------------------------------\n\nTITLE: Reading Band Data with Rasterio\nDESCRIPTION: Shows how to read a specific band from a dataset using Rasterio's band indexing.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('example.tif') as src:\n    band1 = src.read(1)\n```\n\n----------------------------------------\n\nTITLE: Combined RGB and Histogram Display\nDESCRIPTION: Shows how to create a subplot combining both RGB visualization and histogram representation of the raster data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> fig, (axrgb, axhist) = pyplot.subplots(1, 2, figsize=(14,7))\n>>> show(src, ax=axrgb)\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show_hist(src, bins=50, histtype='stepfilled',\n...           lw=0.0, stacked=False, alpha=0.3, ax=axhist)\n>>> pyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Colormaps in Rasterio\nDESCRIPTION: Demonstrates how to write a colormap to a dataset and verify it was written correctly. Maps 8-bit pixel values to RGBA values and includes verification of the colormap entries.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/color.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n\nwith rasterio.Env():\n\n    with rasterio.open('tests/data/shade.tif') as src:\n        shade = src.read(1)\n        meta = src.meta\n\n    with rasterio.open('/tmp/colormap.tif', 'w', **meta) as dst:\n        dst.write(shade, indexes=1)\n        dst.write_colormap(\n            1, {\n                0: (255, 0, 0, 255), \n                255: (0, 0, 255, 255) })\n        cmap = dst.colormap(1)\n        # True\n        assert cmap[0] == (255, 0, 0, 255)\n        # True\n        assert cmap[255] == (0, 0, 255, 255)\n\nsubprocess.call(['open', '/tmp/colormap.tif'])\n```\n\n----------------------------------------\n\nTITLE: ProcessPoolExecutor Implementation for Raster Processing\nDESCRIPTION: Example of using ProcessPoolExecutor for parallel processing of raster data, showing how to handle data serialization when working with multiple processes.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/concurrency.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narrays = [src.read(window=window) for window in windows]\n\nwith concurrent.futures.ProcessPoolExecutor(\n    max_workers=num_workers\n) as executor:\n    futures = executor.map(compute, arrays)\n    for window, result in zip(windows, futures):\n        dst.write(result, window=window)\n```\n\n----------------------------------------\n\nTITLE: Window Decimation in Rasterio\nDESCRIPTION: Shows how to write data with decimation when the write window is smaller than the source data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    b, g, r = (src.read(k) for k in (1, 2, 3))\n# src.height = 718, src.width = 791\n\nwrite_window = Window.from_slices((30, 269), (50, 313))\n# write_window.height = 239, write_window.width = 263\n\nwith rasterio.open(\n        '/tmp/example.tif', 'w',\n        driver='GTiff', width=500, height=300, count=3,\n        dtype=r.dtype) as dst:\n    for k, arr in [(1, b), (2, g), (3, r)]:\n        dst.write(arr, indexes=k, window=write_window)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raster Coordinates with Transform\nDESCRIPTION: Demonstrates how to open a raster file and use affine transforms to convert between pixel and geographic coordinates.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src = rasterio.open('example.tif')\n>>> src.transform * (0, 0)\n(101985.0, 2826915.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data Array\nDESCRIPTION: Shows how to create a sample data array using NumPy for writing to a new raster file.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> x = np.linspace(-4.0, 4.0, 240)\n>>> y = np.linspace(-3.0, 3.0, 180)\n>>> X, Y = np.meshgrid(x, y)\n>>> Z1 = np.exp(-2 * np.log(2) * ((X - 0.5) ** 2 + (Y - 0.5) ** 2) / 1 ** 2)\n>>> Z2 = np.exp(-3 * np.log(2) * ((X + 0.5) ** 2 + (Y + 0.5) ** 2) / 2.5 ** 2)\n>>> Z = 10.0 * (Z2 - Z1)\n```\n\n----------------------------------------\n\nTITLE: Writing Tags to Datasets and Bands in Python with Rasterio\nDESCRIPTION: This snippet demonstrates how to write tags to a dataset and its bands using the update_tags() method. It includes examples of adding tags to the default namespace, band-specific tags, and tags in a custom namespace.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/tags.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n\nwith rasterio.open(\n        '/tmp/test.tif', \n        'w', \n        driver='GTiff', \n        count=1, \n        dtype=rasterio.uint8, \n        width=10, \n        height=10) as dst:\n\n    dst.update_tags(a='1', b='2')\n    dst.update_tags(1, c=3)\n    with pytest.raises(ValueError):\n        dst.update_tags(4, d=4)\n    \n    # True\n    assert dst.tags() == {'a': '1', 'b': '2'}\n    # True\n    assert dst.tags(1) == {'c': '3' }\n    \n    dst.update_tags(ns='rasterio_testing', rus=u'другая строка')\n    # True\n    assert dst.tags(ns='rasterio_testing') == {'rus': u'другая строка'}\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Transformation in Rasterio\nDESCRIPTION: Shows basic usage of RPCTransformer for coordinate transformation using rational polynomial coefficients.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('RGB.byte.rpc.vrt') as src:\n            transformer = rasterio.transform.RPCTransformer(src.rpcs)\n            transformer.xy(0, 0)\n(-123.47959047080701, 49.52794990575094)\n```\n\n----------------------------------------\n\nTITLE: Opening and Inspecting Raster Dataset with Rasterio\nDESCRIPTION: Opens a test RGB GeoTIFF file and displays basic properties including shape, band count, data types and nodata values.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masks.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n>>> import rasterio\n>>> src = rasterio.open(\"tests/data/RGB.byte.tif\")\n>>> src.shape\n(718, 791)\n>>> src.count\n3\n>>> src.dtypes\n('uint8', 'uint8', 'uint8')\n>>> src.nodatavals\n(0.0, 0.0, 0.0)\n>>> src.nodata\n0.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Affine Transform Matrix\nDESCRIPTION: Shows how to access the affine transformation matrix of a raster dataset, which maps pixel coordinates to world coordinates.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/georeferencing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> src.transform\nAffine(300.0379266750948, 0.0, 101985.0,\n       0.0, -300.041782729805, 2826915.0)\n```\n\n----------------------------------------\n\nTITLE: Complex Band-wise Scaling\nDESCRIPTION: Shows how to apply different scaling factors to different bands using arithmetic operations.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (+ 2 (* 0.95 (read 1 1))) (+ 3 (* 0.9 (read 1 2))) (+ 4 (* 0.85 (read 1 3))))\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: Alternative Affine Transform Method in Rasterio\nDESCRIPTION: Shows an alternative method for performing affine transformations using matrix multiplication operators.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> transform = Affine(300.0379266750948, 0.0, 101985.0, 0.0,\n                       -300.041782729805, 2826915.0)\n>>> transform * (0.5, 0.5)\n(102135.01896333754, 2826764.979108635)\n>>> ~transform * (102135.01896333754, 2826764.979108635)\n(0.5, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Extracting Georeferenced Shapes in Python using Rasterio\nDESCRIPTION: Shows how to extract georeferenced shapes from raster data using transform parameter and band selection shortcut.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/features.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nshapes = features.shapes(blue, mask=mask, transform=src.transform)\n```\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('13547682814_f2e459f7a5_o_d.png') as src:\n    shapes = features.shapes(rasterio.band(src, 3), mask=mask, transform=src.transform)\n```\n\n----------------------------------------\n\nTITLE: Creating New Raster Dataset\nDESCRIPTION: Demonstrates how to create and open a new raster dataset for writing with specified parameters.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio 8transform import Affine\n>>> res = (x[-1] - x[0]) / 240.0\n>>> transform = Affine.translation(x[0] - res / 2, y[0] - res / 2) * Affine.scale(res, res)\n>>> new_dataset = rasterio.open(\n...     '/tmp/new.tif',\n...     'w',\n...     driver='GTiff',\n...     height=Z.shape[0],\n...     width=Z.shape[1],\n...     count=1\n```\n\n----------------------------------------\n\nTITLE: Reading Dataset Masks in Rasterio\nDESCRIPTION: Demonstrates how to read mask arrays from a dataset band using read_masks() method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masks.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> msk = src.read_masks(1)\n>>> msk.shape\n(718, 791)\n>>> msk\narray([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)\n```\n\n----------------------------------------\n\nTITLE: Reading Dataset Tags in Python with Rasterio\nDESCRIPTION: This snippet demonstrates how to read tags from the default namespace of a dataset using the tags() method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/tags.rst#2025-04-22_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src.tags()\n{'AREA_OR_POINT': 'Area'}\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS S3 Data\nDESCRIPTION: Demonstrates reading metadata from a TIFF stored in AWS S3.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"s3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF\") as src:\n    print(src.profile)\n```\n\n----------------------------------------\n\nTITLE: RPC Transformation with Height Offset in Rasterio\nDESCRIPTION: Demonstrates RPC transformation with a constant height offset for scenes with minimal elevation change.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('RGB.byte.rpc.vrt') as src:\n            # 100 meters above sea level    \n            transformer = rasterio.transform.RPCTransformer(src.rpcs, rpc_height=100)\n            transformer.xy(0, 0, zs=0)\n(-123.4811362101663, 49.52811584352445)\n```\n\n----------------------------------------\n\nTITLE: Using Rasterio Environment Context Manager\nDESCRIPTION: Demonstrates Rasterio's context manager approach to GDAL configuration, which provides a cleaner and safer way to manage GDAL options within a specific code block.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.Env(GTIFF_FORCE_RGBA=True, CPL_DEBUG=True):\n    with rasterio.open('data/stefan_full_greyalpha.tif') as dataset:\n       # Suite of code accessing dataset ``ds`` follows...\n```\n\n----------------------------------------\n\nTITLE: Using GDAL VSI Filenames\nDESCRIPTION: Shows how to use GDAL's virtual filesystem interface (VSI) filenames directly for legacy compatibility.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"/vsizip/vsicurl/https://github.com/rasterio/rasterio/files/13675561/files.zip/RGB.byte.tif\") as src:\n    print(src.shape)\n\n# Printed:\n# (718, 791)\n```\n\n----------------------------------------\n\nTITLE: Performing Raster Calculations with rio calc\nDESCRIPTION: Demonstrates the use of the 'rio calc' command to perform simple mathematical operations on raster datasets using lisp-like expressions.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(+ 2 (* 0.95 (read 1)))\" tests/data/RGB.byte.tif /tmp/out.tif\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (take a 1) (* (take a 2) (/ (mean (take a 1)) (mean (take a 2)))) (* (take a 3) (/ (mean (take a 1)) (mean (take a 3)))))\" \\\n> --name a=tests/data/RGB.byte.tif /tmp/out.rgb.tif\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Shape Differences in Python\nDESCRIPTION: This code snippet shows the difference in array shapes between Rasterio's (bands, rows, columns) format and the (rows, columns, bands) format used by other image processing libraries. It demonstrates how to use reshape functions to convert between these formats.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/image_processing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> from rasterio.plot import reshape_as_raster, reshape_as_image\n\n>>> raster = rasterio.open(\"tests/data/RGB.byte.tif\").read()\n>>> raster.shape\n(3, 718, 791)\n\n>>> image = reshape_as_image(raster)\n>>> image.shape\n(718, 791, 3)\n\n>>> raster2 = reshape_as_raster(image)\n>>> raster2.shape\n(3, 718, 791)\n```\n\n----------------------------------------\n\nTITLE: Coordinate Reference System Transformation\nDESCRIPTION: Shows how to work with CRS using pyproj to transform coordinates between different coordinate systems.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from pyproj import Transformer\n>>> src = rasterio.open('example.tif')\n>>> transformer = Transformer.from_crs(src.crs, \"EPSG:3857\", always_xy=True)\n>>> transformer.transfform(101985.0, 2826915.0)\n(-8789636.707871985, 2938035.238323653)\n```\n\n----------------------------------------\n\nTITLE: Custom File Opener with fs_s3fs\nDESCRIPTION: Shows how to use a custom file opener with fs_s3fs to access S3 data.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\nfrom fs_s3fs import S3FS\n\nfs = S3FS(\n    bucket_name=\"sentinel-cogs\",\n    dir_path=\"sentinel-s2-l2a-cogs/45/C/VQ/2022/11/S2B_45CVQ_20221102_0_L2A\",\n    aws_access_key_id=AWS_ACCESS_KEY_ID,\n    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n)\n\nwith rasterio.open(\"B01.tif\", opener=fs.open) as src:\n    print(src.profile)\n```\n\n----------------------------------------\n\nTITLE: Writing Dataset Masks in Rasterio\nDESCRIPTION: Shows how to write a mask that applies to all dataset bands using write_mask() method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masks.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil\n>>> import rasterio\n\n>>> tmp = shutil.copy(\"tests/data/RGB.byte.tif\", \"/tmp/RGB.byte.tif\")\n>>> src = rasterio.open(tmp, mode=\"r+\")\n\n>>> src.write_mask(True)\n>>> src.read_masks(1).all()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Accessing GDAL Metadata Tags\nDESCRIPTION: Demonstrates how to access GDAL metadata tags from different namespaces in Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src.tags()\n{'AREA_OR_POINT': 'Area'}\n>>> src.tags(ns='IMAGE_STRUCTURE')\n{'INTERLEAVE': 'PIXEL'}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Files in Python with Rasterio\nDESCRIPTION: Demonstrates three equivalent ways to identify local datasets using file paths, 'file' URLs, or pathlib.Path objects. These identifiers can be used with rasterio.open() function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"/path/to/file.tif\"\n\"file:///path/to/file.tif\"\npathlib.Path('/path/to/file.tif')\n```\n\n----------------------------------------\n\nTITLE: Multi-file Band Stacking\nDESCRIPTION: Demonstrates stacking bands from multiple input files into a single output file.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (read 1 1) (read 2 2) (read 3 3))\" \\\n> tests/data/RGB.byte.tif tests/data/RGB.byte.tif tests/data/RGB.byte.tif \\\n> out.tif\n```\n\n----------------------------------------\n\nTITLE: Ground Control Points Transformation in Rasterio\nDESCRIPTION: Demonstrates coordinate transformation using GCPTransformer with ground control points.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> gcps = [GroundControlPoint(row=11521.5, col=0.5, x=-123.6185142817931, y=48.99561141948625, z=89.13533782958984, id='217', info=''),\n                GroundControlPoint(row=11521.5, col=7448.5, x=-122.8802747777599, y=48.91210259315549, z=89.13533782958984, id='234', info=''),\n                GroundControlPoint(row=0.5, col=0.5, x=-123.4809665720148, y=49.52809729106944, z=89.13533782958984, id='1', info=''),\n                GroundControlPoint(row=0.5, col=7448.5, x=-122.7345733674704, y=49.44455878004666, z=89.13533782958984, id='18', info='')]\n>>> transformer = rasterio.transform.GCPTransformer(gcps)\n>>> transformer.xy(0, 0)\n(-123.478928146887, 49.52808986989645)\n```\n\n----------------------------------------\n\nTITLE: Using fsspec Filesystem\nDESCRIPTION: Demonstrates using fsspec filesystem for accessing S3 data with support for auxiliary files.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\nfrom fsspec\n\nfs = fsspec.filesystem(\"s3\", anon=True)\n\nwith rasterio.open(\n    \"sentinel-cogs/sentinel-s2-l2a-cogs/45/C/VQ/2022/11/S2B_45CVQ_20221102_0_L2A/B01.tif\",\n    opener=fs\n) as src:\n    print(src.profile)\n```\n\n----------------------------------------\n\nTITLE: Opening Shapefile and Extracting Geometries with Fiona in Python\nDESCRIPTION: This snippet demonstrates how to open a shapefile using Fiona and extract geometries from its features. It creates a list of shapes that will be used for masking the raster image.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/masking-by-shapefile.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fiona\nimport rasterio\nimport rasterio.mask\n\nwith fiona.open(\"tests/data/box.shp\", \"r\") as shapefile:\n    shapes = [feature[\"geometry\"] for feature in shapefile]\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS S3 Resources with Rasterio in Python\nDESCRIPTION: Shows how to identify datasets on AWS S3 using the 's3' scheme. This format allows direct access to S3 buckets and objects within Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"s3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Zip Archives on the Web with Rasterio in Python\nDESCRIPTION: Demonstrates how to identify datasets within a zip file on the web using a 'zip+https' scheme. The URL and internal path are separated by '!', and URL parameters can be included.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"zip+https://example.com/file.tif&p=x&q=y!/folder/file.tif\"\n```\n\n----------------------------------------\n\nTITLE: Histogram Generation for Raster Data\nDESCRIPTION: Demonstrates creating histograms for raster data using show_hist function with customization options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio.plot import show_hist\n>>> show_hist(\n...     src, bins=50, lw=0.0, stacked=False, alpha=0.3,\n...     histtype='stepfilled', title=\"Histogram\")\n```\n\n----------------------------------------\n\nTITLE: Inverting Affine Transformation\nDESCRIPTION: Shows how to invert the affine transformation matrix to convert back from geographic to pixel coordinates.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ~src.transform * (101985.0, 2826915.0)\n(0.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Rasterio Format Drivers in Python\nDESCRIPTION: Python code to display all format drivers supported by the current Rasterio installation using the Rasterio environment\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.Env() as env:\n    print(list(env.drivers().items()))\n```\n\n----------------------------------------\n\nTITLE: Multiple Channel Subplot Creation\nDESCRIPTION: Creates a figure with multiple subplots showing individual RGB channels with different colormaps and titles.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> fig, (axr, axg, axb) = pyplot.subplots(1,3, figsize=(21,7))\n>>> show((src, 1), ax=axr, cmap='Reds', title='red channel')\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show((src, 2), ax=axg, cmap='Greens', title='green channel')\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show((src, 3), ax=axb, cmap='Blues', title='blue channel')\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> pyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Reading Decimated Data\nDESCRIPTION: Demonstrates reading data at full resolution and at reduced resolution using overviews.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> src.read().shape\n(3, 718, 791)\n>>> src.read(out_shape=(3, int(src.height / 4), int(src.width / 4))).shape\n(3, 179, 197)\n```\n\n----------------------------------------\n\nTITLE: Reverse Band Order Operation\nDESCRIPTION: Shows how to reverse the order of bands in a raster file using asarray and read functions.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (read 1 3) (read 1 2) (read 1 1))\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: RPC Transformation with DEM in Rasterio\nDESCRIPTION: Shows RPC transformation using a digital elevation model for accurate height values.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open('RGB.byte.rpc.vrt') as src:\n            transformer = rasterio.transform.RPCTransformer(src.rpcs, rpc_dem='vancouver-dem.tif')\n            transformer.xy(0, 0)\n(-123.47954729595642, 49.5279448909449)\n```\n\n----------------------------------------\n\nTITLE: Reading Masked Arrays\nDESCRIPTION: Shows how to read raster data as a masked NumPy array where invalid data is masked out.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src.read(1, masked=True)\nmasked_array(data =\n [[-- -- -- ..., -- -- --]\n  [-- -- -- ..., -- -- --]\n  [-- -- -- ..., -- -- --]\n  ...,\n  [-- -- -- ..., -- -- --]\n  [-- -- -- ..., -- -- --]\n  [-- -- -- ..., -- -- --]],\n             mask =\n [[ True  True  True ...,  True  True  True]\n  [ True  True  True ...,  True  True  True]\n  [ True  True  True ...,  True  True  True]\n  ...,\n  [ True  True  True ...,  True  True  True]\n  [ True  True  True ...,  True  True  True]\n  [ True  True  True ...,  True  True  True]],\n        fill_value = 0)\n```\n\n----------------------------------------\n\nTITLE: Merging Raster Datasets with Rio Merge Command\nDESCRIPTION: Flattens a stack of identically structured datasets into a single dataset.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ rio merge rasterio/tests/data/R*.tif merged.tif\n```\n\n----------------------------------------\n\nTITLE: Contour Generation for Single-Band Data\nDESCRIPTION: Shows how to create contour overlays for single-band raster data using the show function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/plotting.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> fig, ax = pyplot.subplots(1, figsize=(12, 12))\n>>> show((src, 1), cmap='Greys_r', interpolation='none', ax=ax)\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> show((src, 1), contour=True, ax=ax)\n<matplotlib.axes._subplots.AxesSubplot object at 0x...>\n>>> pyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Warping Raster with Rio Warp Command\nDESCRIPTION: Reprojects a raster to a new coordinate reference system using template or direct parameters.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ rio warp input.tif output.tif --like template.tif\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging for Rasterio\nDESCRIPTION: Demonstrates how to set up basic logging configuration for Rasterio using Python's built-in logging module.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/errors.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(format=\"%(levelname)s:%(message)s\", level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Incremental Writing to MemoryFile\nDESCRIPTION: Shows how to write data incrementally to a MemoryFile from an input stream.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith MemoryFile() as memfile:\n    while True:\n        data = f.read(8192)  # ``f`` is an input stream.\n        if not data:\n            break\n        memfile.write(data)\n    with memfile.open() as dataset:\n        data_array = dataset.read()\n```\n\n----------------------------------------\n\nTITLE: Building Overviews with Rasterio\nDESCRIPTION: Opens a dataset in r+ mode, builds overviews using specified factors and resampling method, and updates tags with resampling information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> dst = rasterio.open(path, 'r+')\n>>> dst.build_overviews(factors, Resampling.average)\n>>> dst.update_tags(ns='rio_overview', resampling='average')\n>>> dst.close()\n```\n\n----------------------------------------\n\nTITLE: Multiple Named Datasets Operation\nDESCRIPTION: Demonstrates using multiple named datasets to combine bands from different sources.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (take a 1) (take b 2) (take b 3))\" \\\n> --name \"a=tests/data/RGB.byte.tif\" --name \"b=tests/data/RGB.byte.tif\" \\\n> --name \"c=tests/data/RGB.byte.tif\" out.tif\n```\n\n----------------------------------------\n\nTITLE: Data Window Operations in Rasterio\nDESCRIPTION: Demonstrates how to crop NODATA values from around a dataset using get_data_window.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rasterio.windows import get_data_window\n\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    window = get_data_window(src.read(1, masked=True))\n    # window = Window(col_off=13, row_off=3, width=757, height=711)\n\n    kwargs = src.meta.copy()\n    kwargs.update({\n        'height': window.height,\n        'width': window.width,\n        'transform': rasterio.windows.transform(window, src.transform)})\n\n    with rasterio.open('/tmp/cropped.tif', 'w', **kwargs) as dst:\n        dst.write(src.read(window=window))\n```\n\n----------------------------------------\n\nTITLE: Window Utility Operations in Rasterio\nDESCRIPTION: Demonstrates basic union and intersection operations on windows.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio import windows\n>>> # Full window is ((0, 1000), (0, 500))\n>>> window1 = Window(10, 100, 490, 400)\n>>> window2 = Window(50, 10, 200, 140)\n>>> windows.union(window1, window2)\nWindow(col_off=10, row_off=10, width=490, height=490)\n>>> windows.intersection(window1, window2)\nWindow(col_off=50, row_off=100, width=200, height=50)\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Files for Stream Processing\nDESCRIPTION: Shows how to handle byte streams by writing them to a temporary file before processing with Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\n\n\nwith tempfile.NamedTemporaryFile() as tmpfile:\n    tmpfile.write(data)\n    with rasterio.open(tmpfile.name) as dataset:\n        data_array = dataset.read()\n```\n\n----------------------------------------\n\nTITLE: Transformer Resource Management in Rasterio\nDESCRIPTION: Demonstrates proper resource management for transformers using context managers.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/transforms.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.transform.RPCTransformer(rpcs) as transform:\n            transform.xy(0, 0)\n>>> transform.xy(0, 0)\nValueError: Unexpected NULL transformer\n```\n\n----------------------------------------\n\nTITLE: Stacking Raster Bands with Rio Stack Command\nDESCRIPTION: Combines bands from one or more input files into a multiband dataset.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ rio stack RGB.byte.tif stacked.tif\n```\n\n----------------------------------------\n\nTITLE: Defining Overview Factors\nDESCRIPTION: Specifies zoom factors as powers of 2 for building overviews.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> factors = [2, 4, 8, 16]\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple GDAL Config Options with Error Handling\nDESCRIPTION: Shows an improved approach to handling multiple GDAL configuration options with proper error handling using try/finally blocks to ensure options are reset.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions = {'GTIFF_FORCE_RGBA': 'YES'}\nfor key, val in options.items():\n    gdal.SetConfigOption(key, val)\ntry:\n    ds = gdal.Open('data/stefan_full_greyalpha.tif')\nfinally:\n    for key, val in options.items():\n        gdal.SetConfigOption(key, None)\n```\n\n----------------------------------------\n\nTITLE: Updating Color Interpretation in Existing Dataset with Rasterio\nDESCRIPTION: Demonstrates how to modify color interpretation of an existing dataset in update mode using ColorInterp enum values.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/color.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio.enums import ColorInterp\n>>> with rasterio.open('/tmp/rgb.tif', 'r+', **profile) as src:\n...     src.colorinterp = [\n...         ColorInterp.red, ColorInterp.green, ColorInterp.blue]\n```\n\n----------------------------------------\n\nTITLE: Window Transform Operations in Rasterio\nDESCRIPTION: Shows how to access and manipulate the affine transform of a window using window_transform method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/windowed-rw.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> from rasterio.windows import Window\n>>> win = Window(256, 256, 128, 128)\n>>> with rasterio.open('tests/data/RGB.byte.tif') as src:\n...     src_transform = src.transform\n...     win_transform = src.window_transform(win)\n...\n>>> print(src_transform)\n| 300.04, 0.00, 101985.00|\n| 0.00,-300.04, 2826915.00|\n| 0.00, 0.00, 1.00|\n>>> print(win_transform)\n| 300.04, 0.00, 178794.71|\n| 0.00,-300.04, 2750104.30|\n| 0.00, 0.00, 1.00|\n```\n\n----------------------------------------\n\nTITLE: Inspecting Rasterio Environment Options\nDESCRIPTION: Shows how to inspect currently configured GDAL options when using Rasterio's environment context manager by binding it to a variable.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.Env(GTIFF_FORCE_RGBA=True, CPL_DEBUG=True) as env:\n    for key, val in env.options.items():\n        print(key, val)\n\n# Prints:\n# ('GTIFF_FORCE_RGBA', True)\n# ('CPL_DEBUG', True)\n```\n\n----------------------------------------\n\nTITLE: Masking Raster with GeoJSON using Rio Mask Command\nDESCRIPTION: Masks in pixels from all bands using GeoJSON features.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ rio mask input.tif output.tif --geojson-mask input.geojson\n```\n\n----------------------------------------\n\nTITLE: Rasterio Setup Configuration\nDESCRIPTION: Configuration file (setup.cfg) settings for specifying GDAL include and library directories when gdal-config is not available\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[build_ext]\ninclude_dirs = C:/vcpkg/installed/x64-windows/include\nlibraries = gdal\nlibrary_dirs = C:/vcpkg/installed/x64-windows/lib\n```\n\n----------------------------------------\n\nTITLE: Creating a Zoomed Out Dataset Using Rasterio's Reproject Function\nDESCRIPTION: This snippet demonstrates how to use Rasterio's reproject function to create an output dataset zoomed out by a factor of 2. It uses methods from the Affine class to generate the output dataset's transform matrix and spatial extent.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reproject.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\nfrom rasterio import Affine as A\nfrom rasterio.warp import reproject, Resampling\n\nwith rasterio.open('rasterio/tests/data/RGB.byte.tif') as src:\n    src_transform = src.transform\n\n    # Zoom out by a factor of 2 from the center of the source\n    # dataset. The destination transform is the product of the\n    # source transform, a translation down and to the right, and\n    # a scaling.\n    dst_transform = src_transform*A.translation(\n        -src.width/2.0, -src.height/2.0)*A.scale(2.0)\n\n    data = src.read()\n\n    kwargs = src.meta\n    kwargs['transform'] = dst_transform\n\n    with rasterio.open('/tmp/zoomed-out.tif', 'w', **kwargs) as dst:\n\n        for i, band in enumerate(data, 1):\n            dest = np.zeros_like(band)\n\n            reproject(\n                band,\n                dest,\n                src_transform=src_transform,\n                src_crs=src.crs,\n                dst_transform=dst_transform,\n                dst_crs=src.crs,\n                resampling=Resampling.nearest)\n\n            dst.write(dest, indexes=i)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rasterio Environment with Context Manager\nDESCRIPTION: Shows how to explicitly configure GDAL environment settings using Rasterio's Env context manager.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n# The GDAL environment has no registered format drivers or error\n# handlers at this point.\n\nwith rasterio.Env(CPL_DEBUG=True, GDAL_CACHEMAX=128000000):\n    # This ensures that all drivers are registered in the global\n    # context. Within this block *only* GDAL's debugging messages\n    # are turned on and the raster block cache size is set to 128 MB.\n\n    with rasterio.open('example.tif') as src:\n        # Perform GDAL operations in this context.\n        # ...\n        # Done.\n```\n\n----------------------------------------\n\nTITLE: Installing Rasterio via pip\nDESCRIPTION: Simple installation command using pip to install Rasterio from PyPI using pre-built wheels\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install rasterio\n```\n\n----------------------------------------\n\nTITLE: Using ZIP Shorthand in Rasterio\nDESCRIPTION: Shows the shorthand notation for accessing ZIP archives using just 'zip://' instead of 'zip+file://'.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"zip://tests/data/files.zip!RGB.byte.tif\") as src:\n    print(src.shape)\n\n# Printed:\n# (718, 791)\n```\n\n----------------------------------------\n\nTITLE: Defining Default GeoTIFF Profile Class in Python with Rasterio\nDESCRIPTION: This code defines a DefaultGTiffProfile class that inherits from Profile. It sets default parameters for creating a tiled, band-interleaved, LZW-compressed, 8-bit GeoTIFF. This profile can be used as a template for creating new datasets.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/profiles.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass DefaultGTiffProfile(Profile):\n    \"\"\"Tiled, band-interleaved, LZW-compressed, 8-bit GTiff.\"\"\"\n\n    defaults = {\n        'driver': 'GTiff',\n        'interleave': 'band',\n        'tiled': True,\n        'blockxsize': 256,\n        'blockysize': 256,\n        'compress': 'lzw',\n        'nodata': 0,\n        'dtype': uint8\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Documentation for Rio Blocks Command using Click\nDESCRIPTION: This snippet uses the Click library's directive to generate documentation for the 'rio blocks' command. It specifies the command module, program name, and includes nested subcommands.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.blocks.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.blocks:blocks\n   :prog: rio blocks\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Writing Raster Data with Direct Method\nDESCRIPTION: Demonstrates writing raster data to a dataset using explicit write and close methods. This approach requires manually closing the dataset after writing.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> new_dataset.write(Z, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> new_dataset.close()\n```\n\n----------------------------------------\n\nTITLE: Reading Color Interpretation in Python using Rasterio\nDESCRIPTION: Demonstrates how to read color interpretation from a raster dataset using Rasterio. Opens a TIFF file and checks the color interpretation of the first band.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/color.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rasterio\n>>> src = rasterio.open(\"tests/data/RGB.byte.tif\")\n>>> src.colorinterp[0]\n<ColorInterp.red: 3>\n```\n\n----------------------------------------\n\nTITLE: Extracting Shapes from Raster with Rio Shapes Command\nDESCRIPTION: Extracts features from a specified dataset band and outputs as GeoJSON.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ rio shapes tests/data/shade.tif --bidx 1 --precision 6 --collection > shade.geojson\n```\n\n----------------------------------------\n\nTITLE: Interactive Raster Inspection using Rio CLI\nDESCRIPTION: Example of using Rasterio's command-line interface (rio) to interactively inspect and analyze raster data properties and content.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> src.name\n'tests/data/RGB.byte.tif'\n>>> src.closed\nFalse\n>>> src.shape\n(718, 791)\n>>> src.crs\n{'init': 'epsg:32618'}\n>>> b, g, r = src.read()\n>>> b\nmasked_array(data =\n [[-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n ...,\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]],\n             mask =\n [[ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n ...,\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]],\n       fill_value = 0)\n\n>>> np.nanmin(b), np.nanmax(b), np.nanmean(b)\n(0, 255, 29.94772668847656)\n```\n\n----------------------------------------\n\nTITLE: Generating Bounding Box GeoJSON with rio bounds\nDESCRIPTION: Shows how to use the 'rio bounds' command to extract and display the geographic bounds of a raster dataset as a GeoJSON feature.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rio bounds tests/data/RGB.byte.tif --indent 2\n{\n  \"features\": [\n    {\n      \"geometry\": {\n        \"coordinates\": [\n          [\n            [\n              -78.898133,\n              23.564991\n            ],\n            [\n              -76.599438,\n              23.564991\n            ],\n            [\n              -76.599438,\n              25.550874\n            ],\n            [\n              -78.898133,\n              25.550874\n            ],\n            [\n              -78.898133,\n              23.564991\n            ]\n          ]\n        ],\n        \"type\": \"Polygon\"\n      },\n      \"properties\": {\n        \"id\": \"0\",\n        \"title\": \"tests/data/RGB.byte.tif\"\n      },\n      \"type\": \"Feature\"\n    }\n  ],\n  \"type\": \"FeatureCollection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents\nDESCRIPTION: Creates a table of contents tree structure using reStructuredText directives, listing advanced topics in the Rasterio documentation with maxdepth of 1.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   calc\n   color\n   concurrency\n   configuration\n   datasets\n   errors\n   features\n   fillnodata\n   georeferencing\n   image_options\n   image_processing\n   masking-by-shapefile\n   masks\n   memory-files\n   migrating-to-v1\n   overviews\n   plotting\n   profiles\n   reading\n   reproject\n   resampling\n   switch\n   tags\n   transforms\n   virtual-warping\n   vsi\n   windowed-rw\n   writing\n```\n\n----------------------------------------\n\nTITLE: Reading Georeferencing Information\nDESCRIPTION: Shows how to access dataset georeferencing information including bounds, transform matrix and CRS.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> dataset.bounds\nBoundingBox(left=358485.0, bottom=4028985.0, right=590415.0, top=4265115.0)\n>>> dataset.transform\nAffine(30.0, 0.0, 358485.0,\n       0.0, -30.0, 4265115.0)\n>>> dataset.crs\nCRS.from_epsg(32612)\n```\n\n----------------------------------------\n\nTITLE: Logical Operation with Thresholding\nDESCRIPTION: Demonstrates combining logical and arithmetic operations to create a binary mask based on a threshold value.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(* (>= (read 1) 40) 255)\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: Direct HTTPS Access\nDESCRIPTION: Demonstrates accessing a GeoTIFF file directly via HTTPS URL.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open(\"https://github.com/rasterio/rasterio/raw/main/tests/data/RGB.byte.tif\") as src:\n    print(src.shape)\n\n# Printed:\n# (718, 791)\n```\n\n----------------------------------------\n\nTITLE: Setting Nodata Value with Rio Edit-Info Command\nDESCRIPTION: Sets the nodata value of a raster file to 0 using the rio edit-info command.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ rio edit-info --nodata 0 example.tif\n```\n\n----------------------------------------\n\nTITLE: Initializing Rasterio Environment with Open\nDESCRIPTION: Demonstrates basic Rasterio file opening which initializes GDAL environment only when needed. Shows lazy initialization pattern.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n# The GDAL environment has no registered format drivers or error\n# handlers at this point.\n\nwith rasterio.open('example.tif') as src:\n    # Format drivers and error handlers are registered just before\n    # open() executes.\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset Masks\nDESCRIPTION: Demonstrates how to access the valid data mask of a raster dataset.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src = rasterio.open('example.tif')\n>>> src.dataset_mask()\narray([[0, 0, 0, ..., 0, 0, 0],\n      [0, 0, 0, ..., 0, 0, 0],\n      [0, 0, 0, ..., 0, 0, 0],\n      ...,\n      [0, 0, 0, ..., 0, 0, 0],\n      [0, 0, 0, ..., 0, 0, 0],\n      [0, 0, 0, ..., 0, 0, 0]], dtype-uint8)\n```\n\n----------------------------------------\n\nTITLE: Named Dataset Band Manipulation\nDESCRIPTION: Shows how to reference datasets by name and manipulate bands using the take function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(asarray (take a 3) (take a 2) (take a 1))\" \\\n> --name \"a=tests/data/RGB.byte.tif\" out.tif\n```\n\n----------------------------------------\n\nTITLE: Sampling Raster Values with Rio Sample Command\nDESCRIPTION: Reads x,y positions from stdin and outputs corresponding raster values.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ cat << EOF | rio sample tests/data/RGB.byte.tif\\n[220649.99999832606, 2719199.999999095]\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Editing Raster Metadata with rio edit-info\nDESCRIPTION: Shows how to use the 'rio edit-info' command to modify a raster dataset's metadata, including coordinate reference system and transformation matrix.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ rio edit-info --crs EPSG:3857 example.tif\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rio edit-info --transform \"[300.0, 0.0, 101985.0, 0.0, -300.0, 2826915.0]\" example.tif\n```\n\n----------------------------------------\n\nTITLE: Accessing Web Resources with Rasterio in Python\nDESCRIPTION: Shows how to identify datasets on the web using 'http' or 'https' URLs. These can be used directly with rasterio.open() to access remote datasets.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"https://example.com/file.tif\"\n\"https://landsat-pds.s3.amazonaws.com/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF\"\n```\n\n----------------------------------------\n\nTITLE: Accessing NetCDF Variables with Rasterio in Python\nDESCRIPTION: Demonstrates how to access variables of a netCDF dataset using the 'netcdf' scheme identifier. This format specifies the file path and the variable name separated by a colon.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/datasets.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"netcdf:/path/to/file.nc:variable\"\n```\n\n----------------------------------------\n\nTITLE: Setting Creation Options with rio Commands\nDESCRIPTION: Demonstrates how to pass format-specific creation options to rio commands using the --co flag, including examples for tiling and compression options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n--co tiled=true --co blockxsize=256 --co blockysize=256\n```\n\nLANGUAGE: console\nCODE:\n```\n--co compress=LZW\n```\n\n----------------------------------------\n\nTITLE: Warping South-up Raster Image\nDESCRIPTION: Demonstrates warping a south-up raster image with negative resolution using escaped command syntax\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ rio warp input.tif output.tif --dst-crs EPSG:4326 --bounds -78 22 -76 24 --res 0.1 -- -0.1\n```\n\n----------------------------------------\n\nTITLE: Converting GDAL Affine Parameters\nDESCRIPTION: Demonstrates conversion between GDAL affine parameters and Rasterio's Affine objects.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from rasterio.transform import Affine\n>>> Affine.from_gdal(101985.0, 300.0379266750948, 0.0,\n...                  2826915.0, 0.0, -300.041782729805).to_gdal()\n...\n(101985.0, 300.0379266750948, 0.0, 2826915.0, 0.0, -300.041782729805)\n```\n\n----------------------------------------\n\nTITLE: Enabling GDAL/PROJ Debug Output\nDESCRIPTION: Demonstrates how to enable debugging for internal GDAL/PROJ functions by setting environment variables and using rasterio.Env context manager.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/errors.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"PROJ_DEBUG\"] = \"2\"\n\nimport rasterio\n\nwith rasterio.Env(CPL_DEBUG=True):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Simple Arithmetic Scaling\nDESCRIPTION: Demonstrates basic arithmetic operations by scaling all bands uniformly.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(+ 2 (* 0.95 (read 1)))\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: GDAL Geotransform Structure\nDESCRIPTION: Shows the structure of a GDAL geotransform tuple containing 6 elements in a different order (c,a,b,f,d,e).\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(c, a, b, f, d, e)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Interpretation with Photometric Option in Rasterio\nDESCRIPTION: Shows how to set color interpretation when creating a new dataset using the photometric creation option in the profile.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/color.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> profile = src.profile\n>>> profile['photometric'] = \"RGB\"\n>>> with rasterio.open(\"/tmp/rgb.tif\", 'w', **profile) as dst:\n...     dst.write(src.read())\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Band Objects with Rasterio\nDESCRIPTION: Shows how to create custom band objects using namedtuples to represent band properties.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import namedtuple\n\nBand = namedtuple('Band', ['idx', 'dtype', 'description', 'units'])\n\nsrc = rasterio.open('example.tif')\nbands = [Band(vals) for vals in zip(\n    src.indexes, src.dtypes, src.descriptions, src.units)]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Band Properties of a Raster Dataset in Python using Rasterio\nDESCRIPTION: Shows how to access and print the indexes, data types, and nodata values for all bands in a raster dataset using Rasterio's attributes.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> for i, dtype, nodataval in zip(src.indexes, src.dtypes, src.nodatavals):\n...     print(i, dtype, nodataval)\n...\n1 uint8 0.0\n2 uint8 0.0\n3 uint8 0.0\n```\n\n----------------------------------------\n\nTITLE: Getting Verbose Raster Info with Rio Info Command\nDESCRIPTION: Prints detailed information about a dataset including band statistics using the verbose option.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ rio info tests/data/RGB.byte.tif --indent 2 --verbose\n```\n\n----------------------------------------\n\nTITLE: Opening Dataset with Format Driver in Rasterio\nDESCRIPTION: Demonstrates how to specify format driver when creating new dataset with Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndst = rasterio.open('new.tif', 'w', format='GTiff', **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Verifying Color Interpretation in Rasterio\nDESCRIPTION: Shows how to verify the color interpretation of a band after setting it.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/color.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with rasterio.open(\"/tmp/rgb.tif\") as src2:\n...     src2.colorinterp[1]\n<ColorInterp.green: 4>\n```\n\n----------------------------------------\n\nTITLE: Accessing Python Dataset Properties - Python\nDESCRIPTION: Example showing the new preferred way to set dataset CRS property instead of using deprecated set_* methods.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndataset.crs = \"EPSG:4326\"  # preferred\n# Instead of deprecated:\n# dataset.set_crs(\"EPSG:4326\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Band-specific Tags in Python with Rasterio\nDESCRIPTION: This example shows how to access tags for a specific band (in this case, the first band) using the tags() method with a positional argument.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/tags.rst#2025-04-22_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src.tags(1)['STATISTICS_MEAN']\n'29.947726688477'\n```\n\n----------------------------------------\n\nTITLE: Extracting Block Information with rio blocks Command\nDESCRIPTION: Examples of using the 'rio blocks' command to extract internal block information from raster datasets as GeoJSON features, with options for specific bands and output formatting.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nrio blocks --bidx 3 tests/data/RGB.byte.tif\n```\n\nLANGUAGE: console\nCODE:\n```\nrio blocks tests/data/RGB.byte.tif --sequence\n```\n\n----------------------------------------\n\nTITLE: Implementing GIL-releasing Computation in Cython\nDESCRIPTION: A Cython function that simulates CPU-intensive raster processing by reversing bands. The function releases the GIL during computation to allow concurrent processing.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/concurrency.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# cython: boundscheck=False\n\nimport numpy as np\n\n\ndef compute(unsigned char[:, :, :] input):\n    \"\"\"reverses bands inefficiently\n\n    Given input and output uint8 arrays, fakes an CPU-intensive\n    computation.\n    \"\"\"\n    cdef int I, J, K\n    cdef int i, j, k, l\n    cdef double val\n    I = input.shape[0]\n    J = input.shape[1]\n    K = input.shape[2]\n    output = np.empty((I, J, K), dtype='uint8')\n    cdef unsigned char[:, :, :] output_view = output\n    with nogil:\n        for i in range(I):\n            for j in range(J):\n                for k in range(K):\n                    val = <double>input[i, j, k]\n                    for l in range(2000):\n                        val += 1.0\n                    val -= 2000.0\n                    output_view[~i, j, k] = <unsigned char>val\n    return output\n```\n\n----------------------------------------\n\nTITLE: Read and Take Operation\nDESCRIPTION: Shows the difference between read and take functions by reading and selecting a single band.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(take (read 1) 1)\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: Dataset Type Casting Example\nDESCRIPTION: Demonstrates casting raster values to a specified output data type using the out_dtype parameter\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDatasetReaderBase.read(out_dtype=desired_type)\n```\n\n----------------------------------------\n\nTITLE: Reading Tags from Specific Namespaces in Python with Rasterio\nDESCRIPTION: These snippets show how to read tags from specific GDAL namespaces ('IMAGE_STRUCTURE', 'SUBDATASETS', and 'RPC') using the ns keyword argument.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/tags.rst#2025-04-22_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> src.tags(ns='IMAGE_STRUCTURE')\n{'INTERLEAVE': 'PIXEL'}\n>>> src.tags(ns='SUBDATASETS')\n{}\n>>> src.tags(ns='RPC')\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rasterio Logger\nDESCRIPTION: Sets up a custom logging configuration for Rasterio with a console handler and formatter to output debug information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/errors.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nconsole_handler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(levelname)s:%(message)s\")\nconsole_handler.setFormatter(formatter)\nlogger = logging.getLogger(\"rasterio\")\nlogger.addHandler(console_handler)\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Building Overviews with Rio Overview Command\nDESCRIPTION: Creates overview levels for improved performance using specified decimation levels.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ rio overview --build 2,4,8,16\n```\n\n----------------------------------------\n\nTITLE: Using Band Objects in Rasterio\nDESCRIPTION: Demonstrates accessing band properties using Rasterio's band representation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('example.tif') as src:\n    bnd = rasterio.band(src, 1)\n    print(bnd.dtype)\n```\n\n----------------------------------------\n\nTITLE: Dataset Opening with Sharing Disabled\nDESCRIPTION: Example of opening a dataset with connection sharing disabled for thread safety\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nrasterio.open(filename, sharing=False)\n```\n\n----------------------------------------\n\nTITLE: Reading Overview Information\nDESCRIPTION: Opens the dataset in read mode and verifies the presence of overviews by checking overview factors and resampling method tags.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> src = rasterio.open(path, 'r')\n>>> [src.overviews(i) for i in src.indexes]\n[[2, 4, 8, 16], [2, 4, 8, 16], [2, 4, 8, 16]]\n>>> src.tags(ns='rio_overview').get('resampling')\n'average'\n```\n\n----------------------------------------\n\nTITLE: Simplified Rasterio Environment Configuration\nDESCRIPTION: Shows concise Rasterio environment configuration using context manager.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.Env(CPL_DEBUG=True, GDAL_CACHEMAX=512000000):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Creation Options in Rasterio CLI\nDESCRIPTION: This bash command demonstrates how to use the --co flag to set creation options when using Rasterio's command-line interface. In this case, it sets the 'tiled' option to true when copying a file.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/image_options.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ rio copy source.tif dest.tif --co tiled=true\n```\n\n----------------------------------------\n\nTITLE: Defining Affine Transformation in Python\nDESCRIPTION: Shows the structure of an affine.Affine() transformation matrix with 6 parameters (a,b,c,d,e,f) used for geospatial transformations.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naffine.Affine(a, b, c,\n              d, e, f)\n```\n\n----------------------------------------\n\nTITLE: Using the rio CLI Help Command\nDESCRIPTION: Shows the output of the 'rio --help' command, displaying all available commands and options in the Rasterio CLI.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rio --help\nUsage: rio [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio command line interface.\n\nOptions:\n  -v, --verbose           Increase verbosity.\n  -q, --quiet             Decrease verbosity.\n  --aws-profile TEXT      Select a profile from the AWS credentials file\n  --aws-no-sign-requests  Make requests anonymously\n  --aws-requester-pays    Requester pays data transfer costs\n  --version               Show the version and exit.\n  --gdal-version\n  --show-versions         Show dependency versions\n  --help                  Show this message and exit.\n\nCommands:\n  blocks     Write dataset blocks as GeoJSON features.\n  bounds     Write bounding boxes to stdout as GeoJSON.\n  calc       Raster data calculator.\n  clip       Clip a raster to given bounds.\n  convert    Copy and convert raster dataset.\n  create     Create an empty or filled dataset.\n  edit-info  Edit dataset metadata.\n  env        Print information about the Rasterio environment.\n  gcps       Print ground control points as GeoJSON.\n  info       Print information about a data file.\n  insp       Open a data file and start an interpreter.\n  mask       Mask in raster using features.\n  merge      Merge a stack of raster datasets.\n  overview   Construct overviews in an existing dataset.\n  rasterize  Rasterize features.\n  rm         Delete a dataset.\n  sample     Sample a dataset.\n  shapes     Write shapes extracted from bands or masks.\n  stack      Stack a number of bands into a multiband dataset.\n  transform  Transform coordinates.\n  warp       Warp a raster dataset.\n```\n\n----------------------------------------\n\nTITLE: Getting Basic Raster Info with Rio Info Command\nDESCRIPTION: Prints structured information about a dataset including dimensions, CRS, data type, and bounds.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ rio info tests/data/RGB.byte.tif --indent 2\n```\n\n----------------------------------------\n\nTITLE: Rasterizing GeoJSON Features with Rio Rasterize Command\nDESCRIPTION: Converts GeoJSON features into a raster format with specified resolution.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ rio rasterize test.tif --res 0.0167 < input.geojson\n```\n\n----------------------------------------\n\nTITLE: Converting Raster Formats with rio convert\nDESCRIPTION: Shows how to use the 'rio convert' command to copy and convert raster datasets between formats, with an example of scaling data values.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rio convert in16.tif out8.tif --dtype uint8 --scale-ratio 0.0625\n```\n\n----------------------------------------\n\nTITLE: Installing Rasterio with pip and Custom GDAL Configuration\nDESCRIPTION: Advanced installation using pip with specified GDAL configuration and building from source\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython -m pip install --user -U pip\nGDAL_CONFIG=/path/to/gdal-config python -m pip install --user --no-binary rasterio rasterio\n```\n\n----------------------------------------\n\nTITLE: Legacy GDAL Driver Registration\nDESCRIPTION: Demonstrates the deprecated method of registering GDAL drivers and opening a dataset using rasterio.drivers().\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n\nwith rasterio.drivers():\n\n    with rasterio.open('tests/data/RGB.byte.tif') as src:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Basic File Copy Operation using Rio-calc\nDESCRIPTION: Demonstrates how to copy a dataset using the read function. Reads all bands from the first input dataset.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/calc.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rio calc \"(read 1)\" tests/data/RGB.byte.tif out.tif\n```\n\n----------------------------------------\n\nTITLE: Warping Raster with Dimensions\nDESCRIPTION: Demonstrates warping a raster file to EPSG:4326 coordinate system with specified output dimensions of 100x200\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ rio warp input.tif output.tif --dst-crs EPSG:4326 --dimensions 100 200\n```\n\n----------------------------------------\n\nTITLE: Managing GDAL Configuration with Traditional Bindings\nDESCRIPTION: Demonstrates equivalent configuration management using traditional GDAL Python bindings. Shows more verbose approach.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/switch.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom osgeo import gdal\n\n# Define a new configuration, save the previous configuration,\n# and then apply the new one.\nnew_config = {\n    'CPL_DEBUG': 'ON', 'GDAL_CACHEMAX': '512'}\nprev_config = {\n    key: gdal.GetConfigOption(key) for key in new_config.keys()}\nfor key, val in new_config.items():\n    gdal.SetConfigOption(key, val)\n\n# Perform GDAL operations in this context.\n# ...\n# Done.\n\n# Restore previous configuration.\nfor key, val in prev_config.items():\n    gdal.SetConfigOption(key, val)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Rasterio Format Drivers via Console\nDESCRIPTION: Command to display all format drivers supported by the current Rasterio installation using the rio CLI tool\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nrio env --formats\n```\n\n----------------------------------------\n\nTITLE: Legacy Multi-band Reading\nDESCRIPTION: Demonstrates the deprecated method of reading multiple bands using read_band() with map function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport rasterio\n\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    data = np.array(map(src.read_band, (1, 2, 3)))\n    band1 = src.read_band(1)\n```\n\n----------------------------------------\n\nTITLE: Closing a Raster Dataset in Python using Rasterio\nDESCRIPTION: Demonstrates how to close a raster dataset and shows that attempting to read from a closed dataset raises an error, similar to Python's file objects.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> src.close()\n>>> src\n<closed DatasetReader name='tests/data/RGB.byte.tif' mode='r'>\n>>> src.read(1)\nTraceback (most recent call last):\n ...\nValueError: can't read closed raster file\n```\n\n----------------------------------------\n\nTITLE: GDAL Warping Command for Image Transformation\nDESCRIPTION: Console command using gdalwarp to create a new image with different dimensions and cell size, reprojecting from UTM zone 18 to WGS84.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/virtual-warping.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ gdalwarp \\\n    -t_srs EPSG:4326 \\\n    -te_srs EPSG:32618 \\\n    -te 101985 2673031 339315 2801254 \\\n    -ts 200 250 \\\n    tests/data/RGB.byte.tif \\\n    tests/data/WGS84-RGB.byte.tif\n```\n\n----------------------------------------\n\nTITLE: Setting RGBA Color Interpretation with Rio Edit-Info Command\nDESCRIPTION: Sets color interpretation using shorthand RGBA notation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ rio edit-info --colorinterp RGBA example.tif\n```\n\n----------------------------------------\n\nTITLE: Rasterio Info Commands\nDESCRIPTION: Console commands demonstrating how to retrieve information about raster files using rio CLI tools.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/virtual-warping.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rio info --shape tests/data/RGB.byte.tif\n718 791\n$ rio info --shape tests/data/WGS84-RGB.byte.tif\n250 200\n$ rio info --crs tests/data/RGB.byte.tif\nEPSG:32618\n$ rio info --crs tests/data/WGS84-RGB.byte.tif\nEPSG:4326\n$ rio bounds --bbox --geographic --precision 7 tests/data/RGB.byte.tif\n[-78.95865, 23.5649912, -76.5749237, 25.5508738]\n$ rio bounds --bbox --geographic --precision 7 tests/data/WGS84-RGB.byte.tif\n[-78.9147773, 24.119606, -76.5963819, 25.3192311]\n```\n\n----------------------------------------\n\nTITLE: Python S3 URL Pattern\nDESCRIPTION: URI pattern used for accessing S3 objects in the Rasterio library\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ns3://bucket/object\n```\n\n----------------------------------------\n\nTITLE: MemoryFile Usage Example\nDESCRIPTION: BytesIO-like MemoryFile class for improved Python interface to GDAL's in-memory filesystem.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nwith MemoryFile(file_object) as memfile:\n    with memfile.open() as dataset:\n        # work with dataset\n```\n\n----------------------------------------\n\nTITLE: Basic File Reading with Rasterio\nDESCRIPTION: Demonstrates the standard way of reading data from a file on disk using Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/memory-files.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith rasterio.open('example.tif') as dataset:\n    data_array = dataset.read()\n```\n\n----------------------------------------\n\nTITLE: Calculating Destination Raster Values in rio convert\nDESCRIPTION: Shows the Python formula used to calculate destination values when using scale options in the 'rio convert' command.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndst = scale_ratio * src + scale_offset\n```\n\n----------------------------------------\n\nTITLE: Handling File Not Found Errors when Opening Raster Files in Python\nDESCRIPTION: Shows how Rasterio's open function raises an exception when trying to access a non-existent file, similar to Python's built-in open function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/reading.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> open('/lol/wut.tif')\nTraceback (most recent call last):\n ...\nFileNotFoundError: [Errno 2] No such file or directory: '/lol/wut.tif'\n>>> rasterio.open('/lol/wut.tif')\nTraceback (most recent call last):\n ...\nrasterio.errors.RasterioIOError: No such file or directory\n```\n\n----------------------------------------\n\nTITLE: Installing GDAL on Ubuntu\nDESCRIPTION: Commands to install GDAL and its development headers on Ubuntu Linux using apt.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo add-apt-repository ppa:ubuntugis/ppa\n$ sudo apt-get update\n$ sudo apt-get install gdal-bin libgdal-dev\n```\n\n----------------------------------------\n\nTITLE: Python Pip Install Command\nDESCRIPTION: Command for installing Rasterio with S3 support\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U rasterio[s3]\n```\n\n----------------------------------------\n\nTITLE: Modern Multi-band Reading\nDESCRIPTION: Shows the new simplified method of reading multiple bands using the read() method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/migrating-to-v1.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport rasterio\n\nwith rasterio.open('tests/data/RGB.byte.tif') as src:\n    data = src.read((1, 2, 3))\n    band1 = src.read(1)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GDAL_DATA Error with Console Command\nDESCRIPTION: Example showing how incorrect GDAL_DATA environment variable setting triggers an error when using ogrinfo command\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/faq.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ GDAL_DATA=\"/path/to/nowhere\" ogrinfo example.shp -so example\nINFO: Open of 'example.shp'\n      using driver 'ESRI Shapefile' successful.\n\nLayer name: example\nGeometry: Polygon\nFeature Count: 67\nExtent: (-113.564247, 37.068981) - (-104.970871, 41.996277)\nERROR 4: Unable to open EPSG support file gcs.csv.  Try setting the GDAL_DATA environment variable to point to the directory containing EPSG csv files.\n```\n\n----------------------------------------\n\nTITLE: Setting Color Interpretation with Rio Edit-Info Command\nDESCRIPTION: Sets color interpretation for channels as red, green, blue, and alpha using explicit channel mapping.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ rio edit-info --colorinterp 1=red,2=green,3=blue,4=alpha example.tif\n```\n\n----------------------------------------\n\nTITLE: Installing Python Build Requirements\nDESCRIPTION: Commands to install Rasterio's Python build requirements using pip.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U pip\n$ pip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Installation Command\nDESCRIPTION: Shows the pip install command for adding S3 support to Rasterio.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/vsi.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npip install rasterio[s3]\n```\n\n----------------------------------------\n\nTITLE: Converting CRS to WKT Format\nDESCRIPTION: Shows how to convert a rasterio CRS object to Well-Known Text (WKT) format using the to_wkt() method.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/georeferencing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> src.crs.to_wkt()\n'PROJCS[\"WGS 84 / UTM zone 18N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-75],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32618\"]]'\n```\n\n----------------------------------------\n\nTITLE: GDAL Dataset URI Format\nDESCRIPTION: Example of GDAL URI-style dataset naming convention\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nNETCDF:foo:bar\n```\n\n----------------------------------------\n\nTITLE: Importing Resampling Enum\nDESCRIPTION: Imports the Resampling enum from rasterio.enums to specify resampling algorithms for overviews.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rasterio.enums import Resampling\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Coverage\nDESCRIPTION: Command to run the entire test suite with code coverage reporting.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest --cov rasterio --cov-report term-missing\n```\n\n----------------------------------------\n\nTITLE: Installing Rasterio in Editable Mode\nDESCRIPTION: Command to install Rasterio in editable mode with test dependencies for development.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e .[test]\n```\n\n----------------------------------------\n\nTITLE: Interactive Inspection with Rio Insp Command\nDESCRIPTION: Opens an interactive IPython interpreter with the dataset loaded for inspection.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ rio insp --ipython tests/data/RGB.byte.tif\n```\n\n----------------------------------------\n\nTITLE: Running Basic Rasterio Tests\nDESCRIPTION: Command to run the full test suite for Rasterio using pytest from the project root directory.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/tests/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest\n```\n\n----------------------------------------\n\nTITLE: Running Rasterio Tests with AWS Credentials\nDESCRIPTION: Command to run tests with AWS credentials for S3 access, allowing tests that interact with S3 to execute instead of being skipped.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/tests/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ AWS_ACCESS_KEY_ID=ID AWS_SECRET_ACCESS_KEY=KEY python -m pytest\n```\n\n----------------------------------------\n\nTITLE: Initializing Rasterio Interactive Inspector in Console\nDESCRIPTION: This snippet shows how to start the Rasterio interactive inspector in the console, which is used for the subsequent examples.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/tags.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rio insp tests/data/RGB.byte.tif\nRasterio 1.2.0 Interactive Inspector (Python 3.7.8)\nType \"src.name\", \"src.read(1)\", or \"help(src)\" for more information.\n>>>\n```\n\n----------------------------------------\n\nTITLE: Installing Rasterio with Custom GDAL Configuration\nDESCRIPTION: Installation command using setuptools with a specified GDAL configuration path\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nGDAL_CONFIG=/path/to/gdal-config python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test File\nDESCRIPTION: Command to run tests from a single test file.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest tests/test_band.py\n```\n\n----------------------------------------\n\nTITLE: Using Transform from Ground Control Points\nDESCRIPTION: New function for generating an Affine transformation matrix from ground control points\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nrasterio.transform.from_gcps()\n```\n\n----------------------------------------\n\nTITLE: Recompiling Cython Extensions\nDESCRIPTION: Command to recompile Cython extensions after editing .pyx or .pxd files.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Importing numpy example\nDESCRIPTION: Standardized numpy import convention used throughout the project\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Installing GDAL on macOS\nDESCRIPTION: Command to install GDAL on macOS using Homebrew.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install gdal\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test\nDESCRIPTION: Command to run a specific test function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest tests/test_band.py::test_band\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Command to install dependencies required for building Rasterio documentation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e .[docs]\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Rasterio Versions in Markdown\nDESCRIPTION: This markdown table shows the supported versions of Rasterio. Version 1.3.x is supported, while versions below 1.3 are not supported.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.3.x   | :white_check_mark: |\n| < 1.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Installing Numpy Dependencies on Linux\nDESCRIPTION: Commands to install additional dependencies for Numpy on Linux systems.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install libatlas-dev libatlas-base-dev gfortran\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Configuration\nDESCRIPTION: Sphinx documentation configuration for the rasterio.env module, specifying documentation options including inherited members, regular members, undocumented members, and inheritance display.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.env.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio.env\n   :inherited-members:\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Window Object Creation Example\nDESCRIPTION: Creation of a Window class to abstract Rasterio's window selection tuples, used for partial dataset reads.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nWindow(...)\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Pre-commit for Flake8\nDESCRIPTION: Commands to install the pre-commit package and set up git pre-commit hooks for automated flake8 linting. This ensures code style checking before each commit.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install pre-commit\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Defining Rio GCPS Command with Click in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to document the 'rio gcps' command. It specifies the command's location in the Rasterio package and sets options for the Click-based CLI documentation generator.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.gcps.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.gcps:gcps\n   :prog: rio gcps\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Documenting 'rio shapes' Command with Click in reStructuredText\nDESCRIPTION: This snippet uses the 'click' directive to generate documentation for the 'rio shapes' command in Rasterio's CLI. It specifies the command module, program name, and includes nested options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.shapes.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.shapes:shapes\n   :prog: rio shapes\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for Rasterio Mask Module\nDESCRIPTION: Sphinx configuration directive to automatically generate documentation for the rasterio.mask module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.mask.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio.mask\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Copying Test Data with Python\nDESCRIPTION: Creates a copy of test data to avoid modifying the original file using the shutil module.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/overviews.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil\n>>> path = shutil.copy('tests/data/RGB.byte.tif', '/tmp/RGB.byte.tif')\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for rasterio.vrt Module\nDESCRIPTION: This snippet configures Sphinx autodoc to generate documentation for the rasterio.vrt module. It includes inherited members, all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.vrt.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: rasterio.vrt\n   :inherited-members:\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Stack Command Using reStructuredText Directives\nDESCRIPTION: This snippet uses reStructuredText directives to document the 'rio stack' command from the rasterio.rio.stack module. The directive references the 'stack' function and configures documentation to show the command name as 'rio stack' and display nested options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.stack.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.stack:stack\n   :prog: rio stack\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Documentation for rio mask Command using Click\nDESCRIPTION: This snippet uses the Click library's Sphinx extension to generate documentation for the 'rio mask' command. It specifies the command module, program name, and includes nested options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.mask.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.mask:mask\n   :prog: rio mask\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Python Window Comparison - Python\nDESCRIPTION: Example showing changes to Window class comparison behavior where tuple comparison is no longer supported.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWindow(0, 0, 1, 1).toranges()  # new way\n# Old comparison no longer works:\n# Window(0, 0, 1, 1) == ((0, 1), (0, 1))\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Documenting fillnodata Function\nDESCRIPTION: ReStructuredText todo directive indicating that documentation needs to be written for the fillnodata function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/topics/fillnodata.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. todo::\n\n    :func:`.fillnodata`\n```\n\n----------------------------------------\n\nTITLE: Documenting Rasterio Remove Command in RST\nDESCRIPTION: ReStructuredText directive for generating CLI documentation for the 'rio rm' command, showing nested options\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.rm.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: rasterio.rio.rm:rm\n   :prog: rio rm\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Defining Rio Info Command with Click in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to define the 'rio info' command. It specifies the command's module, program name, and indicates that nested options should be shown in the documentation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.info.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.info:info\n   :prog: rio info\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Click Documentation for rio merge Command\nDESCRIPTION: RST directive configuration that specifies documentation generation for the merge function from rasterio.rio.merge module, setting it to display as 'rio merge' command with nested content shown.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.merge.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.merge:merge\n   :prog: rio merge\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Python Dataset Opening with Parameters - Python\nDESCRIPTION: Example showing URL parameter support in rasterio.open() function.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrasterio.open(\"http://example.com/data.tif?param=value\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Rasterio Transform Module Using Sphinx Directives in reStructuredText\nDESCRIPTION: This snippet uses Sphinx automodule directive to generate comprehensive documentation for the rasterio.transform module. It specifies that all members should be included in the documentation, along with undocumented members, and information about class inheritance.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.transform.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.transform\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for Rasterio Merge Module\nDESCRIPTION: Sphinx documentation configuration directives for automatically generating documentation from the rasterio.merge module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.merge.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.merge\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Clip Command with Click Directive\nDESCRIPTION: This snippet uses the 'click' directive to generate documentation for the 'rio clip' command. It specifies the Python module and function to document, and sets the program name for the CLI.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.clip.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.clip:clip\n   :prog: rio clip\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Env Command with Sphinx Click Directive\nDESCRIPTION: Sphinx directive that generates documentation for the rio env command by referencing the env function in rasterio.rio.env module. The show-nested flag indicates that nested commands should be documented.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.env.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: rasterio.rio.env:env\n   :prog: rio env\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: GDAL VSI Path Construction\nDESCRIPTION: Forward slashes are used for GDAL VSI paths (/vsizip/ etc) instead of os.path.sep for consistent path handling across platforms.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CHANGES.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"/vsizip/some/path.zip\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Rasterio _env Module with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the rasterio._env module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._env.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: rasterio._env\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Rasterio Features Module Documentation\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the rasterio._features module. The directive includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._features.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio._features\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Development Dependencies with pip\nDESCRIPTION: Requirements file that specifies Python packages needed for development environment setup. It includes testing frameworks, documentation tools, build utilities, and development libraries with specific version constraints.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/requirements-dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r requirements.txt\n\n# development specific requirements\naiohttp\nbuild\ncython>=3.0\ndelocate\nfsspec\nhypothesis\nmypy\nnumpydoc\npackaging\npytest\npytest-cov>=2.2.0\npytest-randomly==3.10.1\nrequests\nshapely\nsphinx\nsphinx-click\nsphinx-rtd-theme\nwheel\n```\n\n----------------------------------------\n\nTITLE: Sphinx Directive for Documenting Rasterio Windows Module in ReStructuredText\nDESCRIPTION: A Sphinx autodoc directive that automatically generates documentation for the rasterio.windows module. The directive includes all members, even undocumented ones, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.windows.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.windows\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Displaying Warp Command Help\nDESCRIPTION: Shows how to access the help documentation for the rio warp command\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ rio warp --help\n```\n\n----------------------------------------\n\nTITLE: Generating Rasterio Errors Module Documentation with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the rasterio.errors module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.errors.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: rasterio.errors\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Rio Overview CLI Documentation\nDESCRIPTION: ReStructuredText directive to generate documentation for the rio overview command using Click. Specifies the program name and enables showing nested commands.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.overview.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.overview:overview\n   :prog: rio overview\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for rasterio._transform\nDESCRIPTION: Sphinx directives configuring the documentation generation for the rasterio._transform module. Includes settings for showing inherited members, module members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._transform.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio._transform\n   :inherited-members:\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for RasterIO IO Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate comprehensive documentation for the rasterio.io module. It includes all members, inherited members, and undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.io.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: rasterio.io\n   :inherited-members:\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Rasterio Error Module\nDESCRIPTION: RST documentation directive that configures automatic module documentation generation for rasterio._err. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._err.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio._err\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Calc CLI Command with Sphinx\nDESCRIPTION: ReStructuredText directive to generate documentation for the rio calc command using Click and Sphinx. References the calc function from rasterio.rio.calc module.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.calc.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: rasterio.rio.calc:calc\n   :prog: rio calc\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Sphinx documentation directives for rasterio.tools module\nDESCRIPTION: Sphinx directives that configure automatic documentation generation for the rasterio.tools module. The directives specify that all members, undocumented members, and inheritance relationships should be included in the generated documentation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.tools.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: rasterio.tools\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Module Import\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the rasterio._filepath module, including inherited members, all members, undocumented members and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._filepath.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio._filepath\n   :inherited-members:\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Click Directive for Rio Warp\nDESCRIPTION: Sphinx documentation directive that generates CLI documentation for the warp command from the rasterio.rio.warp module. Uses click extension to auto-generate command help text.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.warp.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.warp:warp\n   :prog: rio warp\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Automodule Documentation Directive\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the rasterio._io module, including all members, undocumented members and inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._io.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio._io\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for rasterio.shutil Documentation\nDESCRIPTION: Sphinx directive configuration for automatically generating documentation for the rasterio.shutil module. The configuration includes displaying all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.shutil.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.shutil\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for Rasterio Profiles\nDESCRIPTION: Sphinx documentation directives for auto-generating module documentation. Configures the documentation to include all members, undocumented members, and show inheritance information for the rasterio.profiles module.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.profiles.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio.profiles\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Rasterio Testing Environment\nDESCRIPTION: Defines the required Python packages and their version constraints needed to create a reproducible testing environment for Rasterio. Each line specifies a package with version requirements using pip's version specifier syntax.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naffine~=2.3.0\nattrs>=19.2.0\nboto3>=1.3.1\nclick~=8.0\nclick-plugins\ncligj>=0.5\nmatplotlib\nnumpy>=1.24\nsetuptools>=20.0\npyparsing~=3.1\n```\n\n----------------------------------------\n\nTITLE: Rasterio Module Documentation Directive\nDESCRIPTION: Sphinx automodule directive for documenting the main rasterio package, excluding CRS and Env members while including all other members and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio\n   :members:\n   :exclude-members: CRS, Env\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rasterio Rasterize CLI Command - ReStructuredText\nDESCRIPTION: Sphinx documentation directive for the rio rasterize command, specifying to show nested options and setting the program name.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.rasterize.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: rasterio.rio.rasterize:rasterize\n   :prog: rio rasterize\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the rasterio.enums module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.enums.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.enums\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for rasterio._example\nDESCRIPTION: Sphinx reStructuredText directive configuration to automatically generate module documentation for rasterio._example. The configuration includes all module members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._example.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio._example\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with Toctree\nDESCRIPTION: Sets up the documentation table of contents tree (toctree) structure for the Rasterio API reference. Includes a single entry for the main rasterio module documentation.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n   rasterio\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for Rasterio Warp Module\nDESCRIPTION: Sphinx documentation configuration directive for automatically generating API documentation for the rasterio._warp module. Includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio._warp.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio._warp\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rasterio Coordinates Module with Sphinx\nDESCRIPTION: RestructuredText directive for auto-documenting the rasterio.coords Python module. Includes configuration to show all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.coords.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.coords\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Registering CLI Command Documentation in RST\nDESCRIPTION: ReStructuredText directive configuring documentation for the 'rio bounds' CLI command, using the Click directive to generate command help text from the bounds function in rasterio.rio.bounds module.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.bounds.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.bounds:bounds\n   :prog: rio bounds\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Importing Rasterio CRS Module - Python\nDESCRIPTION: Module import statement for the rasterio.crs package used for handling coordinate reference systems in geospatial data processing.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.crs.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: rasterio.crs\n```\n\n----------------------------------------\n\nTITLE: Rasterio Subpackages Tree Directive\nDESCRIPTION: Sphinx toctree directive for organizing subpackage documentation with maximum depth of 2 levels.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   rasterio.rio\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for Rasterio Library\nDESCRIPTION: BibTeX entry for citing Rasterio in academic publications. Includes author, organization, title, year range, and project URL.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/CITATION.txt#2025-04-22_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{gillies_2019,\n  author =    {Sean Gillies and others},\n  organization = {Mapbox},\n  title =     {Rasterio: geospatial raster I/O for {Python} programmers},\n  year =      {2013--},\n  url = \"https://github.com/rasterio/rasterio\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for Rasterio Warp Module\nDESCRIPTION: A Sphinx restructuredtext directive that configures automatic documentation generation for the rasterio.warp module. It includes all members, undocumented members, and shows inheritance relationships for the module's classes.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.warp.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.warp\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Directive for Rasterio Control\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the rasterio.control module. Includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.control.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rasterio.control\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing Rasterio Data Types Module\nDESCRIPTION: Sphinx documentation directive for importing and documenting the rasterio.dtypes module with all members, undocumented members, and inheritance information shown.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.dtypes.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: rasterio.dtypes\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Transforming Coordinates with Rio Transform Command\nDESCRIPTION: Transforms coordinates between different coordinate reference systems.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/cli.rst#2025-04-22_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"[-78.0, 23.0]\" | rio transform - --dst-crs EPSG:32618 --precision 2\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for Rasterio Fill Module\nDESCRIPTION: Sphinx configuration directives for auto-generating documentation for the rasterio.fill module. Includes settings for member documentation, undocumented members, and inheritance display.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.fill.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rasterio.fill\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Sample CLI with Click in reStructuredText\nDESCRIPTION: This snippet uses a reStructuredText directive to generate documentation for the 'rio sample' command-line interface. It specifies the module path, program name, and option to show nested commands.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.sample.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.sample:sample\n   :prog: rio sample\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Command for Rio Inspect using Click\nDESCRIPTION: This snippet uses the Click library to define the 'rio insp' command for the Rasterio CLI. It specifies the command name, program, and indicates that nested commands should be shown.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.insp.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: rasterio.rio.insp:insp\n   :prog: rio insp\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Rio Transform Command\nDESCRIPTION: Sphinx documentation directive that specifies the command line documentation for rasterio's transform command. Uses the click directive to document the CLI command, including nested options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.transform.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.transform:transform\n   :prog: rio transform\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rio Edit Info Command with Sphinx Click Directive\nDESCRIPTION: A Sphinx documentation directive that specifies how to document the 'edit' function from rasterio.rio.edit_info module as a command line program named 'rio edit_info', with nested options shown.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.edit_info.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: rasterio.rio.edit_info:edit\n   :prog: rio edit_info\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Defining Rio Convert Command with Click in reStructuredText\nDESCRIPTION: This snippet uses a reStructuredText directive to document the 'rio convert' command. It specifies the Click command function, the program name, and includes nested options.\nSOURCE: https://github.com/rasterio/rasterio/blob/main/docs/api/rasterio.rio.convert.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. click:: rasterio.rio.convert:convert\n   :prog: rio convert\n   :show-nested:\n```"
  }
]