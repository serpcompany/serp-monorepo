[
  {
    "owner": "rrousselgit",
    "repo": "flutter_hooks",
    "content": "TITLE: Using AnimationController with HookWidget in Dart\nDESCRIPTION: Simplified implementation using Flutter Hooks that achieves the same functionality as the StatefulWidget example but with significantly less code. The useAnimationController hook handles lifecycle management automatically.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hook-based Animation Controller Implementation\nDESCRIPTION: Demonstrates the simplified implementation of an AnimationController using Flutter hooks, showing how hooks reduce boilerplate code.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Function Hook in Dart\nDESCRIPTION: Example of creating a custom hook function that combines existing hooks. This useLoggedState hook creates a state variable that logs its value to the console whenever it changes.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>([T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Function-based Hook in Dart\nDESCRIPTION: Example of creating a custom hook that combines existing hooks (useState and useValueChanged) to create a state variable that logs changes to the console.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>([T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Functional Hook in Dart\nDESCRIPTION: This snippet shows how to create a custom functional hook called useLoggedState that combines useState and useValueChanged to create a value notifier that logs changes to the console.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>([T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook with Function in Flutter\nDESCRIPTION: Example of creating a custom hook using a function that combines existing hooks. This hook creates a state variable and logs its value changes to the console.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>([T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Implementation - Logged State\nDESCRIPTION: Shows how to create a custom hook using a function that combines existing hooks to create a value notifier that logs state changes.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>([T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Function Implementation\nDESCRIPTION: Example of creating a custom Hook using a function that combines other hooks to create logged state functionality.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/pt_br/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<T> useLoggedState<T>(BuildContext context, [T initialData]) {\n  final result = useState<T>(initialData);\n  useValueChanged(result.value, (_, __) {\n    print(result.value);\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Hooks in a HookWidget in Dart\nDESCRIPTION: Example demonstrating how multiple hooks can be used independently within the same build method, creating two separate AnimationController instances that are properly maintained across rebuilds.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final controller = useAnimationController();\n  final controller2 = useAnimationController();\n  return Container();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Hooks Usage Example in Flutter\nDESCRIPTION: Example showing how multiple hooks of the same type can be used independently within a single build method, demonstrating their independence and reusability.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final controller = useAnimationController();\n  final controller2 = useAnimationController();\n  return Container();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Hooks Usage Example in Dart\nDESCRIPTION: Demonstrates how multiple instances of the same hook can be used independently within a single build method.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final controller = useAnimationController();\n  final controller2 = useAnimationController();\n  return Container();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Hooks in a Single Widget in Dart\nDESCRIPTION: This snippet demonstrates how multiple hooks of the same type can be used within a single build method, with each hook maintaining its own independent state.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final controller = useAnimationController();\n  final controller2 = useAnimationController();\n  return Container();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimationController with HookWidget in Dart\nDESCRIPTION: This snippet shows how to implement the same AnimationController functionality using Flutter Hooks, demonstrating the concise syntax and automatic lifecycle management.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({Key? key, required this.duration})\n      : super(key: key);\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Animation Controller with HookWidget in Dart\nDESCRIPTION: A simplified implementation using HookWidget and useAnimationController hook that achieves the same functionality as the StatefulWidget version with much less code.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HookWidget with useAnimationController in Flutter\nDESCRIPTION: Simplified approach using HookWidget and the useAnimationController hook to achieve the same functionality as the StatefulWidget example with significantly less code.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hook-based Animation Controller Implementation\nDESCRIPTION: Simplified implementation of animation controller using Flutter Hooks, demonstrating reduced boilerplate code while maintaining the same functionality.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/pt_br/README.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends HookWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = useAnimationController(duration: duration);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Class-based Hook in Dart\nDESCRIPTION: Example of implementing a more complex hook as a class that extends Hook. This _TimeAlive hook tracks and prints the total lifetime of a widget when it's disposed.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nResult useMyHook() {\n  return use(const _TimeAlive());\n}\n```\n\n----------------------------------------\n\nTITLE: Class-based Custom Hook Implementation\nDESCRIPTION: Demonstrates how to create a more complex hook using a class that extends Hook, including lifecycle management.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing a Class-based Hook via a Function in Dart\nDESCRIPTION: This snippet shows the recommended pattern for exposing a class-based hook through a function that follows the 'use' naming convention.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nResult useMyHook() {\n  return use(const _TimeAlive());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Class-based Hook in Dart\nDESCRIPTION: This snippet demonstrates how to create a more complex custom hook using a class-based approach, implementing a hook that tracks and logs its lifetime on disposal.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Class-based Hook in Dart\nDESCRIPTION: Example of creating a more complex hook using a class that extends Hook, which tracks and logs the lifetime of a widget state.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nResult useMyHook() {\n  return use(const _TimeAlive());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook with Class in Flutter\nDESCRIPTION: Example of creating a more complex custom hook using a class-based approach that tracks and logs the lifetime of a widget state when disposed.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nResult useMyHook() {\n  return use(const _TimeAlive());\n}\n\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Class Implementation\nDESCRIPTION: Example of creating a custom Hook using a class-based approach that tracks and prints the lifetime of a state.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/pt_br/README.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nResult useMyHook(BuildContext context) {\n  return use(const _TimeAlive());\n}\n\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class-based Hook in Dart\nDESCRIPTION: Complete implementation of a class-based hook that tracks the lifetime of a widget and prints the duration when disposed. Shows the hook class structure with createState, initHook, build, and dispose methods.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time-tracking Hook Class in Dart\nDESCRIPTION: A complete implementation of a class-based hook that measures and logs the time a widget's state has been alive upon disposal.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass _TimeAlive extends Hook<void> {\n  const _TimeAlive();\n\n  @override\n  _TimeAliveState createState() => _TimeAliveState();\n}\n\nclass _TimeAliveState extends HookState<void, _TimeAlive> {\n  DateTime start;\n\n  @override\n  void initHook() {\n    super.initHook();\n    start = DateTime.now();\n  }\n\n  @override\n  void build(BuildContext context) {}\n\n  @override\n  void dispose() {\n    print(DateTime.now().difference(start));\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Controller and Listener Hooks in Dart\nDESCRIPTION: Shows the usage of multiple hooks together, creating and immediately listening to an AnimationController.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Creates an AnimationController\nfinal animationController = useAnimationController();\n// Immediately listen to the AnimationController\nuseListenable(animationController);\n```\n\n----------------------------------------\n\nTITLE: Simplified Hook Implementation Concept in Dart\nDESCRIPTION: A naive implementation showing the core concept of how hooks are stored and managed in the Element tree. This demonstrates the array-based implementation that tracks hook usage by index.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HookElement extends Element {\n  List<HookState> _hooks;\n  int _hookIndex;\n\n  T use<T>(Hook<T> hook) => _hooks[_hookIndex++].build(this);\n\n  @override\n  performRebuild() {\n    _hookIndex = 0;\n    super.performRebuild();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Hook Implementation in Dart\nDESCRIPTION: A simplified conceptual implementation showing how hooks are stored and retrieved in the Element tree based on their calling index.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HookElement extends Element {\n  List<HookState> _hooks;\n  int _hookIndex;\n\n  T use<T>(Hook<T> hook) => _hooks[_hookIndex++].build(this);\n\n  @override\n  performRebuild() {\n    _hookIndex = 0;\n    super.performRebuild();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Hook Implementation in Flutter\nDESCRIPTION: A simplified explanation of how hooks are implemented internally using a list of HookState objects and an index tracker in the HookElement class.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HookElement extends Element {\n  List<HookState> _hooks;\n  int _hookIndex;\n\n  T use<T>(Hook<T> hook) => _hooks[_hookIndex++].build(this);\n\n  @override\n  performRebuild() {\n    _hookIndex = 0;\n    super.performRebuild();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hook Implementation Example\nDESCRIPTION: Simple implementation showing how Hooks are managed internally using a HookElement class with a list of hooks and index tracking.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/pt_br/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass HookElement extends Element {\n  List<HookState> _hooks;\n  int _hookIndex;\n\n  T use<T>(Hook<T> hook) => _hooks[_hookIndex++].build(this);\n\n  @override\n  performRebuild() {\n    _hookIndex = 0;\n    super.performRebuild();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Hook Usage in Dart\nDESCRIPTION: Demonstrates how to conditionally use hooks within a build method, which is supported as of version 0.11.0.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(context) {\n  useSomething();\n  if (condition) {\n    return Container();\n  }\n  useSomething()\n  return Container();\n}\n```\n\n----------------------------------------\n\nTITLE: Hook.use to use Shorthand Migration in Dart\nDESCRIPTION: Shows the transition from Hook.use() to the shorthand use() syntax introduced in version 0.11.0.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nHook.use(MyHook());\n```\n\nLANGUAGE: dart\nCODE:\n```\nuse(MyHook());\n```\n\n----------------------------------------\n\nTITLE: Example of useRef Migration in Dart\nDESCRIPTION: Shows how to migrate code using the breaking change in useRef hook, which now requires an initial value parameter.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nObjectRef<int> ref = useRef<int>();\n```\n\nLANGUAGE: dart\nCODE:\n```\nObjectRef<int?> ref = useRef<int?>(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimationController with StatefulWidget in Dart\nDESCRIPTION: Traditional implementation of AnimationController using StatefulWidget, showing the verbose lifecycle management required including initState, didUpdateWidget, and dispose methods.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional StatefulWidget Animation Controller Implementation\nDESCRIPTION: Shows the conventional way of implementing an AnimationController using StatefulWidget, highlighting the verbose nature of lifecycle management.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimationController with StatefulWidget in Flutter\nDESCRIPTION: Traditional approach using StatefulWidget to manage an AnimationController with proper lifecycle handling including initialization, updates, and disposal.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ko_kr/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Controller with StatefulWidget in Dart\nDESCRIPTION: A traditional StatefulWidget implementation that uses AnimationController, showing the verbose lifecycle management code required in initState, didUpdateWidget and dispose methods.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/ja_jp/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimationController with StatefulWidget in Dart\nDESCRIPTION: This snippet demonstrates the traditional way of implementing an AnimationController using StatefulWidget, showing the verbose lifecycle management code required.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/zh_cn/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional StatefulWidget Animation Controller Implementation\nDESCRIPTION: Example showing the traditional verbose way of implementing an AnimationController using StatefulWidget with full lifecycle management.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/resources/translations/pt_br/README.md#2025-04-14_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key, required this.duration});\n\n  final Duration duration;\n\n  @override\n  _ExampleState createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.duration);\n  }\n\n  @override\n  void didUpdateWidget(Example oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.duration != oldWidget.duration) {\n      _controller.duration = widget.duration;\n    }\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Usage Order Example in Dart\nDESCRIPTION: Demonstrates how hooks are ordered in a component, relating to the breaking change in version 0.10.0 where disposal order was reversed.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nuseSomething();\nuseSomethingElse();\n```\n\n----------------------------------------\n\nTITLE: Migration from HookContext to Static Functions in Dart\nDESCRIPTION: Shows the migration from using HookContext to the static function approach introduced in version 0.2.0.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(HookContext context) {\n    final state = context.useState(0);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n    final state = useState(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Hooks Gallery Example App\nDESCRIPTION: Terminal commands to create the Flutter project and run the example application. These steps prepare the example directory structure and launch the Flutter Hooks Gallery example.\nSOURCE: https://github.com/rrousselGit/flutter_hooks/blob/master/packages/flutter_hooks/example/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter create .\nflutter run\n```"
  }
]