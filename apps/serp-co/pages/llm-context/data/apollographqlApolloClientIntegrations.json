[
  {
    "owner": "apollographql",
    "repo": "apollo-client-integrations",
    "content": "TITLE: Using Apollo Client in React Server Components\nDESCRIPTION: Demonstrates how to use the Apollo Client instance in React Server Components for querying data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = await getClient().query({ query: userQuery });\n// `query` is a shortcut for `getClient().query`\nconst { data } = await query({ query: userQuery });\n```\n\n----------------------------------------\n\nTITLE: Defining the registerApolloClient Function Type in TypeScript\nDESCRIPTION: TypeScript type declaration for the registerApolloClient function which ensures consistent Apollo Client instance access during RSC requests. It accepts a makeClient function and returns an object with getClient, query, and PreloadQuery properties.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.registerapolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function registerApolloClient<ApolloClientOrPromise extends Promise<ApolloClient$1<any>> | ApolloClient$1<any>>(makeClient: () => ApolloClientOrPromise): {\n    getClient: () => ApolloClientOrPromise;\n    query: Awaited<ApolloClientOrPromise>[\"query\"];\n    PreloadQuery: PreloadQueryComponent;\n};\n```\n\n----------------------------------------\n\nTITLE: Preloading Query in React Server Component with Apollo Client\nDESCRIPTION: Demonstrates how to use the PreloadQuery component in React Server Components to preload data for Client Components. It shows the setup for both RSC and Client Components.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n  query={QUERY}\n  variables={{\n    foo: 1,\n  }}\n>\n  <Suspense fallback={<>loading</>}>\n    <ClientChild />\n  </Suspense>\n</PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Using registerApolloClient Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the registerApolloClient function to create an ApolloClient instance with an InMemoryCache and HttpLink. It exports the getClient, query, and PreloadQuery properties returned by the function.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.registerapolloclient.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { getClient, query, PreloadQuery } = registerApolloClient(() => {\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      uri: \"http://example.com/api/graphql\",\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using PreloadQuery with QueryRef in React Server Component\nDESCRIPTION: Demonstrates how to use PreloadQuery with a render prop to obtain a QueryRef, which can be passed to a Client Component for use with useReadQuery to avoid request waterfalls.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n  query={QUERY}\n  variables={{\n    foo: 1,\n  }}\n>\n  {(queryRef) => (\n    <Suspense fallback={<>loading</>}>\n      <ClientChild queryRef={queryRef} />\n    </Suspense>\n  )}\n</PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: PreloadQuery with useSuspenseQuery Example in React\nDESCRIPTION: Example showing how to use PreloadQuery component with useSuspenseQuery approach. Client components will use the same query with useSuspenseQuery to access the preloaded data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n   <Suspense fallback={<>loading</>}>\n     <ClientChild />\n   </Suspense>\n </PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client for React Server Components\nDESCRIPTION: Sets up an Apollo Client instance for use in React Server Components, including client registration and export of utility functions.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpLink } from \"@apollo/client\";\nimport {\n  registerApolloClient,\n  ApolloClient,\n  InMemoryCache,\n} from \"@apollo/client-integration-nextjs\";\n\nexport const { getClient, query, PreloadQuery } = registerApolloClient(() => {\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      // this needs to be an absolute url, as relative urls cannot be used in SSR\n      uri: \"http://example.com/api/graphql\",\n      fetchOptions: {\n        // you can pass additional options that should be passed to `fetch` here,\n        // e.g. Next.js-related `fetch` options regarding caching and revalidation\n        // see https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options\n      },\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ApolloWrapper with ApolloNextAppProvider in React\nDESCRIPTION: Example of how to use ApolloNextAppProvider in a Next.js app. It demonstrates creating an Apollo client with HttpLink and InMemoryCache, and wrapping the app with ApolloNextAppProvider.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.apollonextappprovider.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HttpLink } from \"@apollo/client\";\nimport { ApolloNextAppProvider, ApolloClient, InMemoryCache } from \"@apollo/client-integration-nextjs\";\n\nfunction makeClient() {\n  const httpLink = new HttpLink({\n    uri: \"https://example.com/api/graphql\",\n  });\n\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: httpLink,\n  });\n}\n\nexport function ApolloWrapper({ children }: React.PropsWithChildren) {\n  return (\n    <ApolloNextAppProvider makeClient={makeClient}>\n      {children}\n    </ApolloNextAppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with Apollo Wrapper\nDESCRIPTION: Demonstrates how to wrap the Next.js root layout component with the Apollo Wrapper to provide Apollo Client context to all components.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApolloWrapper } from \"./ApolloWrapper\";\n\n// ...\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ApolloWrapper>{children}</ApolloWrapper>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Apollo Wrapper for Client Components\nDESCRIPTION: Defines an Apollo Wrapper component for use with Client Components and streaming SSR, including client creation and provider setup.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n// ^ this file needs the \"use client\" pragma\n\nimport { HttpLink } from \"@apollo/client\";\nimport {\n  ApolloNextAppProvider,\n  ApolloClient,\n  InMemoryCache,\n} from \"@apollo/client-integration-nextjs\";\n\n// have a function to create a client for you\nfunction makeClient() {\n  const httpLink = new HttpLink({\n    // this needs to be an absolute url, as relative urls cannot be used in SSR\n    uri: \"https://example.com/api/graphql\",\n    // you can disable result caching here if you want to\n    // (this does not work if you are rendering your page with `export const dynamic = \"force-static\"`)\n    fetchOptions: {\n      // you can pass additional options that should be passed to `fetch` here,\n      // e.g. Next.js-related `fetch` options regarding caching and revalidation\n      // see https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options\n    },\n    // you can override the default `fetchOptions` on a per query basis\n    // via the `context` property on the options passed as a second argument\n    // to an Apollo Client data fetching hook, e.g.:\n    // const { data } = useSuspenseQuery(MY_QUERY, { context: { fetchOptions: { ... }}});\n  });\n\n  // use the `ApolloClient` from \"@apollo/client-integration-nextjs\"\n  return new ApolloClient({\n    // use the `InMemoryCache` from \"@apollo/client-integration-nextjs\"\n    cache: new InMemoryCache(),\n    link: httpLink,\n  });\n}\n\n// you need to create a component to wrap your app in\nexport function ApolloWrapper({ children }: React.PropsWithChildren) {\n  return (\n    <ApolloNextAppProvider makeClient={makeClient}>\n      {children}\n    </ApolloNextAppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Server Entry Point\nDESCRIPTION: Updates to the server-side entry point to include Apollo Provider wrapper for SSR.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+import { makeClient } from \"./apollo\";\n+import { ApolloProvider } from \"@apollo/client/index.js\";\n\nexport default function handleRequest(\n  // ...\n) {\n  return new Promise((resolve, reject) => {\n  // ...\n+ const client = makeClient(request);\n  const { pipe, abort } = renderToPipeableStream(\n+   <ApolloProvider client={client}>\n      <ServerRouter\n        context={routerContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n+   </ApolloProvider>,\n    {\n      [readyOption]() {\n        shellRendered = true;\n```\n\n----------------------------------------\n\nTITLE: Using registerApolloClient with Apollo Client in Next.js\nDESCRIPTION: Example showing how to use registerApolloClient to initialize an Apollo Client instance with an InMemoryCache and HttpLink configuration. The function returns getClient, query, and PreloadQuery which can be used throughout the application.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.registerapolloclient.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { getClient, query, PreloadQuery } = registerApolloClient(() => {\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      uri: \"http://example.com/api/graphql\",\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSuspenseQuery in Client Component with Apollo Client\nDESCRIPTION: Shows how to use useSuspenseQuery in a Client Component to fetch data that was preloaded in the Server Component. This allows for efficient data loading without additional network requests.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { useSuspenseQuery } from \"@apollo/client\";\n// ...\n\nexport function ClientChild() {\n  const { data } = useSuspenseQuery(QUERY, { variables: { foo: 1 } });\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReadQuery in Client Component with Apollo Client\nDESCRIPTION: Shows how to use useReadQuery and useQueryRefHandlers in a Client Component with a QueryRef passed from a Server Component, enabling efficient data reading without additional network requests.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { useQueryRefHandlers, useReadQuery, QueryRef } from \"@apollo/client\";\n\nexport function ClientChild({ queryRef }: { queryRef: QueryRef<TQueryData> }) {\n  const { refetch } = useQueryRefHandlers(queryRef);\n  const { data } = useReadQuery(queryRef);\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring registerApolloClient Function in TypeScript\nDESCRIPTION: This snippet defines the registerApolloClient function signature. It takes a makeClient function as a parameter and returns an object with getClient, query, and PreloadQuery properties.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.registerapolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function registerApolloClient<ApolloClientOrPromise extends Promise<ApolloClient$1<any>> | ApolloClient$1<any>>(makeClient: () => ApolloClientOrPromise): {\n    getClient: () => ApolloClientOrPromise;\n    query: Awaited<ApolloClientOrPromise>[\"query\"];\n    PreloadQuery: PreloadQueryComponent;\n};\n```\n\n----------------------------------------\n\nTITLE: PreloadQuery Component with useSuspenseQuery Implementation\nDESCRIPTION: Example demonstrating PreloadQuery component usage with useSuspenseQuery pattern, where the ClientChild component uses the same query directly with useSuspenseQuery hook.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.preloadquerycomponent.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n <PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n   <Suspense fallback={<>loading</>}>\n     <ClientChild />\n   </Suspense>\n </PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Using useSuspenseQuery in TanStack Start Component\nDESCRIPTION: Demonstrates how to use the useSuspenseQuery hook from Apollo Client directly in a TanStack Start route component without a loader.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/tanstack-start/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSuspenseQuery } from \"@apollo/client/index.js\";\nimport { createFileRoute } from \"@tanstack/react-router\";\n\nexport const Route = createFileRoute(\"/myPage\")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const { data } = useSuspenseQuery(QUERY);\n\n  return <div> do something with `data` here </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Query Data for useSuspenseQuery in React Server Components\nDESCRIPTION: This example shows how to use PreloadQuery component for useSuspenseQuery. The ClientChild component would call the same query with useSuspenseQuery. The Suspense boundary is optional.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadquerycomponent.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n   <Suspense fallback={<>loading</>}>\n     <ClientChild />\n   </Suspense>\n </PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Using preloadQuery and useReadQuery in TanStack Start Route\nDESCRIPTION: Example of using preloadQuery in a route loader and useReadQuery in a component to fetch and read GraphQL data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/tanstack-start/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReadQuery } from \"@apollo/client/index.js\";\nimport { createFileRoute } from \"@tanstack/react-router\";\n\nexport const Route = createFileRoute(\"/loader-defer\")({\n  component: RouteComponent,\n  loader: ({ context: { preloadQuery } }) => {\n    const queryRef = preloadQuery(QUERY, {\n      variables: { myVariable: \"myValue\" },\n    });\n    return {\n      queryRef,\n    };\n  },\n});\n\nfunction RouteComponent() {\n  const { queryRef } = Route.useLoaderData();\n  const { data } = useReadQuery(queryRef);\n\n  return (\n    <div> do something with `data` here </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client Setup\nDESCRIPTION: Creates Apollo client configuration with HTTP link and in-memory cache, exports makeClient function and apolloLoader.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloLink, HttpLink, InMemoryCache } from \"@apollo/client/index.js\";\nimport {\n  createApolloLoaderHandler,\n  ApolloClient,\n} from \"@apollo/client-integration-react-router\";\n\n// `request` will be available on the server during SSR or in loaders, but not in the browser\nexport const makeClient = (request?: Request) => {\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({ uri: \"https://your.graphql.api\" }),\n  });\n};\nexport const apolloLoader = createApolloLoaderHandler(makeClient);\n```\n\n----------------------------------------\n\nTITLE: Preloading Query Data with queryRef in React Server Components\nDESCRIPTION: This example demonstrates how to use PreloadQuery component with queryRef. The ClientChild component would call useReadQuery with the queryRef. The Suspense boundary is optional.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadquerycomponent.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n  {(queryRef) => (\n    <Suspense fallback={<>loading</>}>\n      <ClientChild queryRef={queryRef} />\n    </Suspense>\n  )}\n</PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Loader\nDESCRIPTION: Example of creating an Apollo-enabled loader using apolloLoader function.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const loader = apolloLoader<Route.LoaderArgs>()(({ preloadQuery }) => {\n  const myQueryRef = preloadQuery(MY_QUERY, {\n    variables: { someVariable: 1 },\n  });\n  return {\n    myQueryRef,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClient Class for Next.js Integration\nDESCRIPTION: TypeScript class declaration extending the base ApolloClient for streaming SSR and React Server Components compatibility. The class maintains the core functionality while being optimized for Next.js server-side operations.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.apolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class ApolloClient<TCacheShape> extends ApolloClient$1<TCacheShape>\n```\n\n----------------------------------------\n\nTITLE: Using Apollo Query in Component\nDESCRIPTION: Example of consuming query data in a React component using useReadQuery hook.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Home() {\n  const { myQueryRef } = useLoaderData<typeof loader>();\n\n  const { data } = useReadQuery(myQueryRef);\n\n  return (\n    <div> do something with `data` here </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Resetting Apollo Client Singletons in Tests\nDESCRIPTION: Example showing how to reset Apollo Client singleton instances in testing environments, using the resetApolloClientSingletons function in test cleanup.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nafterEach(resetApolloClientSingletons);\n```\n\n----------------------------------------\n\nTITLE: WrapApolloProvider Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for WrapApolloProvider, which creates an ApolloProvider for streaming SSR. It takes a DataTransportProviderImplementation with generic ExtraProps and returns a WrappedApolloProvider with the same ExtraProps.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.wrapapolloprovider.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function WrapApolloProvider<ExtraProps>(TransportProvider: DataTransportProviderImplementation<ExtraProps>): WrappedApolloProvider<ExtraProps>;\n```\n\n----------------------------------------\n\nTITLE: Using RemoveMultipartDirectivesLink in Apollo Client\nDESCRIPTION: Shows how to use RemoveMultipartDirectivesLink to strip @defer fragments from queries before sending them to the server, with options for customizing which fragments to strip.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nnew RemoveMultipartDirectivesLink({\n  /**\n   * Whether to strip fragments with `@defer` directives\n   * from queries before sending them to the server.\n   *\n   * Defaults to `true`.\n   *\n   * Can be overwritten by adding a label starting\n   * with either `\"SsrDontStrip\"` or `\"SsrStrip\"` to the\n   * directive.\n   */\n  stripDefer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: PreloadQueryComponent Interface Definition\nDESCRIPTION: TypeScript interface definition for the PreloadQueryComponent, which defines the structure for preloading data in React Server Components.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.preloadquerycomponent.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadQueryComponent\n```\n\n----------------------------------------\n\nTITLE: Adding Apollo Hydration Helper\nDESCRIPTION: Integration of ApolloHydrationHelper component in the root layout.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ import { ApolloHydrationHelper } from \"@apollo/client-integration-react-router\";\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      // ...\n      <body>\n-        {children}\n+        <ApolloHydrationHelper>{children}</ApolloHydrationHelper>\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using SSRMultipartLink in Apollo Client\nDESCRIPTION: Shows how to use SSRMultipartLink, which combines the functionality of RemoveMultipartDirectivesLink and AccumulateMultipartResponsesLink for handling multipart responses in SSR.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nnew SSRMultipartLink({\n  /**\n   * Whether to strip fragments with `@defer` directives\n   * from queries before sending them to the server.\n   *\n   * Defaults to `true`.\n   *\n   * Can be overwritten by adding a label starting\n   * with either `\"SsrDontStrip\"` or `\"SsrStrip\"` to the\n   * directive.\n   */\n  stripDefer: true,\n  /**\n   * The maximum delay in milliseconds\n   * from receiving the first response\n   * until the accumulated data will be flushed\n   * and the connection will be closed.\n   *\n   * Defaults to `0`.\n   */\n  cutoffDelay: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ApolloNextAppProvider with Manual Data Transport\nDESCRIPTION: Example implementation of ApolloNextAppProvider using buildManualDataTransport with Next.js ServerInsertedHTMLContext. Shows how to create a provider that throws an error if used outside the Next App Router context.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.buildmanualdatatransport.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ApolloNextAppProvider = WrapApolloProvider(\n  buildManualDataTransport({\n    useInsertHtml() {\n      const insertHtml = useContext(ServerInsertedHTMLContext);\n      if (!insertHtml) {\n        throw new Error(\n          \"ApolloNextAppProvider cannot be used outside of the Next App Router!\"\n        );\n      }\n      return insertHtml;\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring ApolloHydrationHelper Function in TypeScript\nDESCRIPTION: Function signature for ApolloHydrationHelper, which serves as a helper component for Apollo hydration with React Router. The function accepts children as props and returns a React node. This API is marked as an alpha preview and not intended for production use.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.apollohydrationhelper.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function ApolloHydrationHelper(props: {\n    children: React.ReactNode;\n}): React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Using AccumulateMultipartResponsesLink in Apollo Client\nDESCRIPTION: Demonstrates how to use AccumulateMultipartResponsesLink to debounce and accumulate multipart responses, allowing for a configurable delay before flushing the accumulated data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nnew AccumulateMultipartResponsesLink({\n  /**\n   * The maximum delay in milliseconds\n   * from receiving the first response\n   * until the accumulated data will be flushed\n   * and the connection will be closed.\n   */\n  cutoffDelay: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SSRMultipartLink with Configuration in TypeScript\nDESCRIPTION: This example demonstrates how to create a new instance of SSRMultipartLink with configuration options. It shows how to set stripDefer and cutoffDelay properties for controlling multipart response handling.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.ssrmultipartlink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew SSRMultipartLink({\n  // Whether to strip fragments with `@defer` directives\n  // from queries before sending them to the server.\n  //\n  // Defaults to `true`.\n  //\n  // Can be overwritten by adding a label starting\n  // with either \"SsrDontStrip\" or \"SsrStrip\" to the\n  // directive.\n  stripDefer: true,\n  // The maximum delay in milliseconds\n  // from receiving the first response\n  // until the accumulated data will be flushed\n  // and the connection will be closed.\n  //\n  // Defaults to `0`.\n  //\n  cutoffDelay: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring the ReadFromReadableStreamLink Class in TypeScript\nDESCRIPTION: TypeScript class declaration for ReadFromReadableStreamLink, which extends the ApolloLink class to enable reading GraphQL responses from readable streams, such as multipart responses from RSC or server loaders.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.readfromreadablestreamlink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class ReadFromReadableStreamLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: Using AccumulateMultipartResponsesLink with Configuration Options\nDESCRIPTION: Example showing how to instantiate AccumulateMultipartResponsesLink with a cutoffDelay parameter, which controls how long to wait before flushing accumulated data and closing the connection.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.debouncemultipartresponseslink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew AccumulateMultipartResponsesLink({\n  // The maximum delay in milliseconds\n  // from receiving the first response\n  // until the accumulated data will be flushed\n  // and the connection will be closed.\n  cutoffDelay: 100,\n });\n```\n\n----------------------------------------\n\nTITLE: Defining preloadQuery Property Type in ApolloClientRouterContext Interface\nDESCRIPTION: TypeScript signature for the preloadQuery property which is part of the ApolloClientRouterContext interface. This property is of type PreloadQueryFunction and allows for the preloading of GraphQL queries within the TanStack Router context. This is an alpha preview feature that may change based on feedback.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.apolloclientroutercontext.preloadquery.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npreloadQuery: PreloadQueryFunction;\n```\n\n----------------------------------------\n\nTITLE: SSRMultipartLink Class Signature in TypeScript\nDESCRIPTION: The TypeScript class declaration for SSRMultipartLink that extends ApolloLink, providing functionality for handling multipart responses in server-side rendering.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.ssrmultipartlink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class SSRMultipartLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Selective @defer Stripping\nDESCRIPTION: Demonstrates a GraphQL query using @defer directives with labels to control which fragments should be stripped or kept when using RemoveMultipartDirectivesLink.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery myQuery {\n  fastField\n  ... @defer(label: \"SsrDontStrip1\") {\n    slowField1\n  }\n  ... @defer(label: \"SsrDontStrip2\") {\n    slowField2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Fetch Options in Apollo Client Queries\nDESCRIPTION: Shows how to override Next.js-specific fetch options when making queries with Apollo Client.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = await getClient().query({\n  query: userQuery,\n  context: {\n    fetchOptions: {\n      // you can pass additional options that should be passed to `fetch` here,\n      // e.g. Next.js-related `fetch` options regarding caching and revalidation\n      // see https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SSRMultipartLink with Configuration Options in TypeScript\nDESCRIPTION: Example showing how to initialize the SSRMultipartLink with configuration options including stripDefer for controlling @defer directive handling and cutoffDelay for setting the maximum delay before flushing accumulated data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.ssrmultipartlink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew SSRMultipartLink({\n  // Whether to strip fragments with `@defer` directives\n  // from queries before sending them to the server.\n  //\n  // Defaults to `true`.\n  //\n  // Can be overwritten by adding a label starting\n  // with either `\"SsrDontStrip\"` or `\"SsrStrip\"` to the\n  // directive.\n  stripDefer: true,\n  // The maximum delay in milliseconds\n  // from receiving the first response\n  // until the accumulated data will be flushed\n  // and the connection will be closed.\n  //\n  // Defaults to `0`.\n  //\n  cutoffDelay: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Selective Defer Directives\nDESCRIPTION: Example GraphQL query showing how to use @defer directives with special labels (SsrDontStrip) to prevent specific fragments from being stripped during SSR.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.removemultipartdirectiveslink.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery myQuery {\n  fastField\n  ... @defer(label: \"SsrDontStrip1\") {\n    slowField1\n  }\n  ... @defer(label: \"SsrDontStrip2\") {\n    slowField2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using resetApolloClientSingletons in TypeScript Tests\nDESCRIPTION: Demonstrates how to use the resetApolloClientSingletons function in a test environment, specifically in an afterEach block to reset Apollo Client singletons after each test.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.resetapolloclientsingletons.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nafterEach(resetApolloClientSingletons);\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoveMultipartDirectivesLink in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to create an instance of RemoveMultipartDirectivesLink with configuration options. It demonstrates setting the stripDefer option and explains its default behavior and overrides.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.removemultipartdirectiveslink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew RemoveMultipartDirectivesLink({\n  // Whether to strip fragments with `@defer` directives\n  // from queries before sending them to the server.\n  //\n  // Defaults to `true`.\n  //\n  // Can be overwritten by adding a label starting\n  // with either `\"SsrDontStrip\"` or `\"SsrStrip\"` to the\n  // directive.\n  stripDefer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: RemoveMultipartDirectivesLink Configuration Example\nDESCRIPTION: Example showing how to instantiate and configure RemoveMultipartDirectivesLink with options for stripping @defer directives.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.removemultipartdirectiveslink.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew RemoveMultipartDirectivesLink({\n  // Whether to strip fragments with `@defer` directives\n  // from queries before sending them to the server.\n  //\n  // Defaults to `true`.\n  //\n  // Can be overwritten by adding a label starting\n  // with either `\"SsrDontStrip\"` or `\"SsrStrip\"` to the\n  // directive.\n  stripDefer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Client Entry Point\nDESCRIPTION: Updates to the client-side entry point to include Apollo Provider wrapper.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+import { makeClient } from \"./apollo\";\n+import { ApolloProvider } from \"@apollo/client/index.js\";\n\nstartTransition(() => {\n+ const client = makeClient();\n  hydrateRoot(\n  document,\n  <StrictMode>\n+    <ApolloProvider client={client}>\n       <HydratedRouter />\n+    </ApolloProvider>\n  </StrictMode>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Defer Directives for SSR\nDESCRIPTION: Example GraphQL query showing how to use @defer directives with special labels that control SSR stripping behavior. Labels starting with 'SsrDontStrip' will prevent the fragment from being stripped during SSR.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery myQuery {\n  fastField\n  ... @defer(label: \"SsrDontStrip1\") {\n    slowField1\n  }\n  ... @defer(label: \"SsrDontStrip2\") {\n    slowField2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadQueryProps Interface in TypeScript\nDESCRIPTION: Interface definition for PreloadQueryProps that extends PreloadQueryOptions. It includes type parameters for data (TData) and variables (TVariables) with a children property that can accept either ReactNode or a function returning ReactNode.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.preloadqueryprops.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadQueryProps<TData, TVariables extends OperationVariables> extends PreloadQueryOptions<TVariables, TData>\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Selective @defer Stripping\nDESCRIPTION: This GraphQL query demonstrates how to use labels starting with 'SsrDontStrip' to prevent specific @defer fragments from being stripped by RemoveMultipartDirectivesLink.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.removemultipartdirectiveslink.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery myQuery {\n  fastField\n  ... @defer(label: \"SsrDontStrip1\") {\n    slowField1\n  }\n  ... @defer(label: \"SsrDontStrip2\") {\n    slowField2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PreloadQuery with queryRef Example in React\nDESCRIPTION: Example showing how to use PreloadQuery component with queryRef approach. The component preloads data in React Server Components which is then consumed by client components using useReadQuery.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n  {(queryRef) => (\n    <Suspense fallback={<>loading</>}>\n      <ClientChild queryRef={queryRef} />\n    </Suspense>\n  )}\n</PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Declaring useWrapTransportedQueryRef Function in TypeScript\nDESCRIPTION: Function signature for useWrapTransportedQueryRef which takes a QueryRef or TransportedQueryRef and returns a QueryRef with the same data and variables types. This function is used in Apollo Client's React streaming integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.usewraptransportedqueryref.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useWrapTransportedQueryRef<TData, TVariables>(queryRef: QueryRef<TData, TVariables> | TransportedQueryRef): QueryRef<TData, TVariables>;\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Route for Apollo Client Context in TanStack Start\nDESCRIPTION: Diff showing changes to the root route file to support Apollo Client integration, including import changes and using createRootRouteWithContext.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/tanstack-start/README.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+import { type ApolloClientRouterContext } from \"@apollo/client-integration-tanstack-start\";\nimport {\n-   createRootRoute\n+   createRootRouteWithContext\n} from \"@tanstack/react-router\";\n\n-export const Route = createRootRoute({\n+export const Route = createRootRouteWithContext<ApolloClientRouterContext>()({\n```\n\n----------------------------------------\n\nTITLE: Initializing AccumulateMultipartResponsesLink with Configuration in TypeScript\nDESCRIPTION: Example of how to instantiate the AccumulateMultipartResponsesLink with a cutoffDelay configuration. The cutoffDelay determines how long to accumulate data before flushing and closing the connection.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.debouncemultipartresponseslink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew AccumulateMultipartResponsesLink({\n  // The maximum delay in milliseconds\n  // from receiving the first response\n  // until the accumulated data will be flushed\n  // and the connection will be closed.\n  cutoffDelay: 100,\n });\n```\n\n----------------------------------------\n\nTITLE: Defining TransportedQueryRef Interface in TypeScript\nDESCRIPTION: Interface definition for TransportedQueryRef that extends QueryRef. It's an opaque object used within PreloadQuery components that allows child client components to suspend until query resolution via useReadQuery.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.transportedqueryref.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransportedQueryRef<TData = unknown, TVariables extends OperationVariables = OperationVariables> extends QueryRef<TData, TVariables> \n```\n\n----------------------------------------\n\nTITLE: Using resetApolloSingletons in Testing with TypeScript\nDESCRIPTION: An example showing how to use the resetApolloSingletons function in a test setup, specifically in an afterEach block to clean up Apollo singletons between tests.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.resetapollosingletons.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nafterEach(resetApolloSingletons);\n```\n\n----------------------------------------\n\nTITLE: Declaring SSRMultipartLink Class in TypeScript\nDESCRIPTION: This snippet defines the SSRMultipartLink class, which extends ApolloLink. It is used for handling multipart responses in Apollo Client with Next.js integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.ssrmultipartlink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class SSRMultipartLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: Declaring reviveTransportedQueryRef Function in TypeScript\nDESCRIPTION: Function declaration for reviveTransportedQueryRef that takes a queryRef and Apollo client instance as parameters. It asserts the queryRef parameter as a combination of TransportedQueryRef and the return type of wrapQueryRef.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.revivetransportedqueryref.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function reviveTransportedQueryRef(queryRef: TransportedQueryRef, client: ApolloClient$1<any>): asserts queryRef is TransportedQueryRef & ReturnType<typeof wrapQueryRef<any, any>>;\n```\n\n----------------------------------------\n\nTITLE: Resetting Apollo Client Singletons in Tests\nDESCRIPTION: Demonstrates how to reset Apollo Client singletons between tests using the resetApolloClientSingletons helper function, which is essential for maintaining test isolation.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { resetApolloClientSingletons } from \"@apollo/client-integration-nextjs\";\n\nafterEach(resetApolloClientSingletons);\n```\n\n----------------------------------------\n\nTITLE: Declaring ApolloClient Class for React Streaming\nDESCRIPTION: TypeScript declaration of the ApolloClient class that extends ApolloClient_base and implements Partial<ApolloClientSSRImpl>. This specialized version is designed for streaming Server-Side Rendering or React Server Components.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.apolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class ApolloClient<Ignored = NormalizedCacheObject> extends ApolloClient_base implements Partial<ApolloClientSSRImpl> \n```\n\n----------------------------------------\n\nTITLE: Declaring InMemoryCache Class for Streaming SSR in TypeScript\nDESCRIPTION: This code snippet defines the InMemoryCache class for use with streaming SSR in Apollo Client. It extends the InMemoryCache$1 class and is part of the @apollo/client-react-streaming package.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.inmemorycache.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class InMemoryCache extends InMemoryCache$1 \n```\n\n----------------------------------------\n\nTITLE: Using resetManualSSRApolloSingletons in testing with TypeScript\nDESCRIPTION: Example of how to use the resetManualSSRApolloSingletons function in a test environment. This function resets the singleton instances created for the Apollo SSR data transport and caches, and is meant to be used in testing only.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.resetmanualssrapollosingletons.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nafterEach(resetManualSSRApolloSingletons);\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClient Class for TanStack Start Integration in TypeScript\nDESCRIPTION: TypeScript declaration for a specialized ApolloClient class designed for TanStack Start integration. The class extends the base ApolloClient (ApolloClient$1) and maintains the same generic type parameter for cache shape configuration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.apolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class ApolloClient<TCacheShape> extends ApolloClient$1<TCacheShape> \n```\n\n----------------------------------------\n\nTITLE: Applying ReadableStream to Context in Apollo Client\nDESCRIPTION: This function applies a ReadableStream to a context that will be passed to a link chain containing ReadFromReadableStreamLink. It takes a readable stream of ReadableStreamLinkEvent type and a context object, returning an extended context with internal properties.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.readfromreadablestream.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function readFromReadableStream<T extends Record<string, any>>(readableStream: ReadableStream<ReadableStreamLinkEvent>, context: T): T & InternalContext$1;\n```\n\n----------------------------------------\n\nTITLE: Declaring routerWithApolloClient Function in TypeScript\nDESCRIPTION: This function combines a router with an Apollo Client. It takes a router that extends ApolloClientRouterContext and an ApolloClient instance as parameters, and returns the router. The function is marked as an alpha preview and may change based on feedback.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.routerwithapolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function routerWithApolloClient<TRouter extends AnyRouter>(router: TRouter[\"options\"][\"context\"] extends ApolloClientRouterContext ? TRouter : never, apolloClient: ApolloClient$1): TRouter;\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClientRouterContext Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ApolloClientRouterContext, which is part of the Apollo Client integration with TanStack Router. This alpha-stage interface contains properties for the Apollo Client instance and a preload query function.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.apolloclientroutercontext.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ApolloClientRouterContext \n```\n\n----------------------------------------\n\nTITLE: Declaring RemoveMultipartDirectivesLink Class in TypeScript\nDESCRIPTION: This TypeScript declaration defines the RemoveMultipartDirectivesLink class, which extends ApolloLink. It outlines the class structure including its constructor and request method.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.removemultipartdirectiveslink.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class RemoveMultipartDirectivesLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: Declaring createApolloLoaderHandler Namespace in TypeScript\nDESCRIPTION: This code snippet defines the createApolloLoaderHandler namespace. It is marked as an alpha preview and not recommended for production use. The namespace contains interfaces and type aliases for Apollo loader functionality.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.createapolloloaderhandler.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace createApolloLoaderHandler \n```\n\n----------------------------------------\n\nTITLE: Declaring ApolloClient Class in TypeScript\nDESCRIPTION: TypeScript class declaration for ApolloClient that extends ApolloClient$1<any>. This class provides core Apollo Client functionality with React Router integration support.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.apolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class ApolloClient extends ApolloClient$1<any>\n```\n\n----------------------------------------\n\nTITLE: Declaring TeeToReadableStreamLink Class in TypeScript\nDESCRIPTION: Class declaration for TeeToReadableStreamLink which extends ApolloLink. This class allows GraphQL requests to be cloned into a readable stream for transporting multipart responses from React Server Components or a server loader to the browser.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.teetoreadablestreamlink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class TeeToReadableStreamLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: Defining PreloadQueryFn Interface in TypeScript\nDESCRIPTION: Interface declaration for PreloadQueryFn in the createApolloLoaderHandler function. This is an alpha preview API that may change based on feedback and should not be used in production environments.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.createapolloloaderhandler.preloadqueryfn.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadQueryFn \n```\n\n----------------------------------------\n\nTITLE: Declaring AccumulateMultipartResponsesLink Class in TypeScript\nDESCRIPTION: Declaration of the AccumulateMultipartResponsesLink class which extends ApolloLink to handle debouncing of multipart responses.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.debouncemultipartresponseslink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class AccumulateMultipartResponsesLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: Defining DataTransportProviderImplementation Type for Apollo Client in TypeScript\nDESCRIPTION: Type definition for a custom data transport provider component that works with WrapApolloProvider. The component must provide a DataTransportContext to its children and can accept several callback props for handling query events, rerunning simulated queries, and registering dispatch request handlers.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.datatransportproviderimplementation.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DataTransportProviderImplementation<ExtraProps = {}> = React.FC<{\n    onQueryEvent?: (event: QueryEvent) => void;\n    rerunSimulatedQueries?: () => void;\n    registerDispatchRequestStarted?: (callback: (query: {\n        event: Extract<QueryEvent, {\n            type: \"started\";\n        }>;\n        observable: Observable$1<Exclude<QueryEvent, {\n            type: \"started\";\n        }>>;\n    }) => void) => void;\n    children: React.ReactNode;\n} & ExtraProps>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Transported Query Preloader in Apollo Client\nDESCRIPTION: Function signature for creating a transported query preloader that takes an Apollo Client instance and returns a PreloadTransportedQueryFunction. The function is used to set up preloading capabilities for transported queries in a React streaming context.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.createtransportedquerypreloader.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createTransportedQueryPreloader(client: ApolloClient$1<any>): PreloadTransportedQueryFunction;\n```\n\n----------------------------------------\n\nTITLE: Defining buildManualDataTransport Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for buildManualDataTransport that creates a manual Data Transport implementation. Takes ManualDataTransportOptions as arguments and returns a DataTransportProviderImplementation with HydrationContextOptions.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.buildmanualdatatransport.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuildManualDataTransport: (args: ManualDataTransportOptions) => DataTransportProviderImplementation<HydrationContextOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining DataTransportContext Type in TypeScript\nDESCRIPTION: Defines a React Context variable for handling data transport abstraction in Apollo Client. This context is specifically used for React Client Components and requires wrapping child components with DataTransportContext.Provider when implementing custom data transport.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.datatransportcontext.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDataTransportContext: React.Context<DataTransportAbstraction | null>\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadQueryComponent Interface in TypeScript\nDESCRIPTION: This code snippet defines the PreloadQueryComponent interface in TypeScript. It represents the structure of the component used for preloading query data in React Server Components.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadquerycomponent.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadQueryComponent \n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Apollo Client\nDESCRIPTION: Shows how to enable debug logging for Apollo Client by setting the verbosity level, which can be useful for troubleshooting and understanding data flow.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { setVerbosity } from \"ts-invariant\";\nsetVerbosity(\"debug\");\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadQueryProps Interface in TypeScript for Apollo Client React Streaming\nDESCRIPTION: TypeScript interface definition for PreloadQueryProps which extends PreloadQueryOptions. This interface defines the props accepted by the PreloadQueryComponent, including support for children as either ReactNode or a function that receives a TransportedQueryRef.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadqueryprops.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadQueryProps<TData, TVariables extends OperationVariables> extends PreloadQueryOptions<TVariables, TData> \n```\n\n----------------------------------------\n\nTITLE: Defining PreloadQueryProps Children Property in TypeScript\nDESCRIPTION: Type definition for the children property that accepts either a ReactNode or a render prop function that receives a TransportedQueryRef and returns a ReactNode. The function variant enables dynamic rendering based on query reference data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadqueryprops.children.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchildren: ReactNode | ((queryRef: TransportedQueryRef<NoInfer<TData>, NoInfer<TVariables>>) => ReactNode);\n```\n\n----------------------------------------\n\nTITLE: Defining resetApolloClientSingletons Variable in TypeScript\nDESCRIPTION: Declares the resetApolloClientSingletons variable with the same type as resetManualSSRApolloSingletons. This function resets singleton instances for Apollo SSR data transport and caches, intended for use in testing environments.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.resetapolloclientsingletons.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresetApolloClientSingletons: typeof resetManualSSRApolloSingletons\n```\n\n----------------------------------------\n\nTITLE: Declaring isTransportedQueryRef Function in TypeScript\nDESCRIPTION: This snippet defines the isTransportedQueryRef function signature. It takes a queryRef parameter of type 'any' and returns a boolean indicating if the queryRef is of type TransportedQueryRef.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.istransportedqueryref.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function isTransportedQueryRef(queryRef: any): queryRef is TransportedQueryRef;\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoveMultipartDirectivesLink Constructor in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of RemoveMultipartDirectivesLink. Takes a RemoveMultipartDirectivesConfig parameter to configure the link's behavior.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.removemultipartdirectiveslink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config: RemoveMultipartDirectivesConfig);\n```\n\n----------------------------------------\n\nTITLE: Initializing DebounceMultipartResponsesLink Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the DebounceMultipartResponsesLink class that accepts a configuration object of type AccumulateMultipartResponsesConfig. This class appears to handle the accumulation and debouncing of multipart responses in Apollo Client.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.debouncemultipartresponseslink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config: AccumulateMultipartResponsesConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting up Apollo Client and Router in TanStack Start\nDESCRIPTION: TypeScript code to create an Apollo Client instance and integrate it with the TanStack router using routerWithApolloClient.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/tanstack-start/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  routerWithApolloClient,\n  ApolloClient,\n  InMemoryCache,\n} from \"@apollo/client-integration-tanstack-start\";\nimport { HttpLink } from \"@apollo/client/index.js\";\n\nexport function createRouter() {\n  const apolloClient = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({ uri: \"https://your.graphl.api\" }),\n  });\n  const router = createTanStackRouter({\n    routeTree,\n    // the context properties `apolloClient` and `preloadQuery`\n    // will be filled in by calling `routerWithApolloClient` later\n    // you should omit them here, which means you have to\n    // `as any` this context object\n    context: {} as any,\n  });\n\n  return routerWithApolloClient(router, apolloClient);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DebounceMultipartResponsesLink Constructor in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of the DebounceMultipartResponsesLink class. Takes a configuration object of type AccumulateMultipartResponsesConfig as its parameter.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.debouncemultipartresponseslink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config: AccumulateMultipartResponsesConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Method in RemoveMultipartDirectivesLink\nDESCRIPTION: Method signature for handling GraphQL operations in Apollo Client. Takes an Operation parameter and optional NextLink parameter, returns an Observable object. Used for processing and forwarding GraphQL operations while removing multipart directives.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.removemultipartdirectiveslink.request.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(operation: Operation, forward?: NextLink): Observable<{}>;\n```\n\n----------------------------------------\n\nTITLE: Instantiating SSRMultipartLink Constructor in TypeScript\nDESCRIPTION: The constructor signature for creating a new instance of the SSRMultipartLink class. It accepts an optional configuration object of type SSRMultipartLinkConfig.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.ssrmultipartlink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config?: SSRMultipartLinkConfig);\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClient.setLink() Method Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the setLink() method of the ApolloClient class. It takes an ApolloLink parameter and returns void.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.apolloclient.setlink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetLink(newLink: ApolloLink): void;\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoveMultipartDirectivesLink Constructor in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of RemoveMultipartDirectivesLink class. Takes a RemoveMultipartDirectivesConfig parameter to configure the behavior of the link.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.removemultipartdirectiveslink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config: RemoveMultipartDirectivesConfig);\n```\n\n----------------------------------------\n\nTITLE: Initializing SSRMultipartLink in TypeScript\nDESCRIPTION: Constructor signature for the SSRMultipartLink class. It accepts an optional configuration object of type SSRMultipartLinkConfig. This constructor is used to create a new instance of SSRMultipartLink, which is likely used for handling server-side rendering with multipart responses in Apollo Client and Next.js integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.ssrmultipartlink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config?: SSRMultipartLinkConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Method in RemoveMultipartDirectivesLink - TypeScript\nDESCRIPTION: Method signature for the request function that processes operations in the RemoveMultipartDirectivesLink class. Takes an Operation parameter and optional NextLink forward parameter, returning an Observable object.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.removemultipartdirectiveslink.request.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(operation: Operation, forward?: NextLink): Observable<{}>;\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadFromReadableStreamLink Constructor in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of the ReadFromReadableStreamLink class. This class is used for handling readable streams in Apollo Client's React streaming integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.readfromreadablestreamlink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor();\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Method in DebounceMultipartResponsesLink\nDESCRIPTION: Method signature for handling GraphQL operation requests in the DebounceMultipartResponsesLink class. Takes an Operation object and optional NextLink parameter, returns an Observable of FetchResult containing Records of key-value pairs.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.debouncemultipartresponseslink.request.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(operation: Operation, forward?: NextLink): Observable<FetchResult<Record<string, any>, Record<string, any>, Record<string, any>>>;\n```\n\n----------------------------------------\n\nTITLE: Defining HydrationContextOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for HydrationContextOptions, which configures hydration context for Apollo Client with React streaming. It contains an optional extraScriptProps property that allows passing additional props to script tags used for data transport.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.hydrationcontextoptions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HydrationContextOptions \n```\n\n----------------------------------------\n\nTITLE: Implementing Request Method in DebounceMultipartResponsesLink - TypeScript\nDESCRIPTION: Method signature for handling streaming GraphQL operations with debounced multipart responses. Takes an Operation object and optional NextLink parameter, returning an Observable that emits FetchResults containing record data.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.debouncemultipartresponseslink.request.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(operation: Operation, forward?: NextLink): Observable<FetchResult<Record<string, any>, Record<string, any>, Record<string, any>>>;\n```\n\n----------------------------------------\n\nTITLE: Declaring InMemoryCache Class Extension for Next.js SSR\nDESCRIPTION: TypeScript class declaration extending the base InMemoryCache for streaming SSR support in Next.js applications. This specialized version maintains compatibility with Apollo Client's caching system while adding streaming SSR capabilities.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.inmemorycache.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class InMemoryCache extends InMemoryCache$1 \n```\n\n----------------------------------------\n\nTITLE: Defining skipDataTransport Function in TypeScript\nDESCRIPTION: Function signature for skipDataTransport which applies to a context to prevent an operation from being transported over the SSR data transport mechanism. It takes a generic record object and returns the same object enhanced with InternalContext.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.skipdatatransport.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function skipDataTransport<T extends Record<string, any>>(context: T): T & InternalContext;\n```\n\n----------------------------------------\n\nTITLE: Declaring InMemoryCache Class for TanStack Start\nDESCRIPTION: TypeScript class declaration that extends the base InMemoryCache implementation for TanStack Start compatibility. This class provides caching functionality specifically adapted for TanStack Start usage.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.inmemorycache.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class InMemoryCache extends InMemoryCache$1 \n```\n\n----------------------------------------\n\nTITLE: Defining TransportedQueryRef.toPromise Property in TypeScript\nDESCRIPTION: TypeScript definition for the toPromise property which is temporarily disabled and set to undefined. This property is disabled both in React Server Components and Client Components due to issue #332.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.transportedqueryref.topromise.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoPromise?: undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadTransportedQueryOptions Type in TypeScript for Apollo Client\nDESCRIPTION: This type definition combines QueryOptions and RestrictedPreloadOptions, omitting the 'query' field from QueryOptions. It is used for preloading transported queries in Apollo Client's React streaming integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadtransportedqueryoptions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PreloadTransportedQueryOptions<TVariables, TData> = Omit<QueryOptions<TVariables, TData>, \"query\"> & RestrictedPreloadOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining InMemoryCache sourceSymbol Property in TypeScript\nDESCRIPTION: TypeScript signature for the sourceSymbol property of the InMemoryCache class. This property uses a symbol as a property key and represents a string value, likely used for identifying the cache source.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.inmemorycache._sourcesymbol_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[sourceSymbol]: string;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryEvent Type in TypeScript for Apollo Client React Streaming\nDESCRIPTION: This code defines the QueryEvent type, which is a union of two object types. It represents events emitted during SSR for query transportation between server and browser in Apollo Client. The type includes options for a 'started' event and extends ReadableStreamLinkEvent for other events.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.queryevent.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryEvent = {\n    type: \"started\";\n    options: TransportedOptions;\n    id: TransportIdentifier;\n} | (ReadableStreamLinkEvent & {\n    id: TransportIdentifier;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClient Property in TypeScript Interface\nDESCRIPTION: TypeScript signature for the apolloClient property in the ApolloClientRouterContext interface. This property references an ApolloClient$1 instance and is marked as an alpha preview API that may change based on feedback.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-tanstack-start.apolloclientroutercontext.apolloclient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napolloClient: ApolloClient$1;\n```\n\n----------------------------------------\n\nTITLE: Defining TransportedQueryRef Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransportedQueryRef interface, which extends QueryRef with generic types for data and variables. It is used for transporting query references between server and client components in Next.js Apollo Client integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.transportedqueryref.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransportedQueryRef<TData = unknown, TVariables extends OperationVariables = OperationVariables> extends QueryRef<TData, TVariables>\n```\n\n----------------------------------------\n\nTITLE: Defining HydrationContextOptions.extraScriptProps Property in TypeScript\nDESCRIPTION: This code snippet defines the extraScriptProps property in the HydrationContextOptions interface. It allows passing additional properties (like nonce) to script tags that transport data from server to browser during hydration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.hydrationcontextoptions.extrascriptprops.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextraScriptProps?: ScriptProps;\n```\n\n----------------------------------------\n\nTITLE: PreloadQuery Component with queryRef Implementation\nDESCRIPTION: Example showing how to use PreloadQuery component with queryRef pattern to preload data and pass it to a ClientChild component. Includes optional Suspense boundary for loading states.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.preloadquerycomponent.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PreloadQuery\n   query={QUERY}\n   variables={{\n     foo: 1\n   }}\n >\n  {(queryRef) => (\n    <Suspense fallback={<>loading</>}>\n      <ClientChild queryRef={queryRef} />\n    </Suspense>\n  )}\n</PreloadQuery>\n```\n\n----------------------------------------\n\nTITLE: Declaring teeToReadableStream Function in TypeScript\nDESCRIPTION: Function declaration for teeToReadableStream that takes an OnLinkHitFunction and a generic context record, returning a combined type of the input context and InternalContext$1. Used to prepare context for a link chain containing TeeToReadableStreamLink.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.teetoreadablestream.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function teeToReadableStream<T extends Record<string, any>>(onLinkHit: OnLinkHitFunction, context: T): T & InternalContext$1;\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Client React Router Dependencies\nDESCRIPTION: Command to install the required npm packages for Apollo Client React Router integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @apollo/client-integration-react-router @apollo/client graphql\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloLoader Type for React Router Integration with Apollo Client\nDESCRIPTION: This code snippet defines the ApolloLoader type, which is a complex function type used in the createApolloLoaderHandler. It extends the CreateServerLoaderArgs and includes a preloadQuery function, returning a loader function that can be used with React Router.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.createapolloloaderhandler.apolloloader.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApolloLoader = <LoaderArgs extends CreateServerLoaderArgs<any>>() => <ReturnValue>(loader: (args: LoaderArgs & {\n        preloadQuery: PreloadQueryFn;\n    }) => ReturnValue) => (args: LoaderArgs) => ReturnValue;\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloNextAppProvider in TypeScript\nDESCRIPTION: Type signature for the ApolloNextAppProvider variable. It is a wrapped version of ApolloProvider with specific options for hydration context.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.apollonextappprovider.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nApolloNextAppProvider: _apollo_client_react_streaming.WrappedApolloProvider<_apollo_client_react_streaming_manual_transport.HydrationContextOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining DebounceMultipartResponsesLink Class in TypeScript\nDESCRIPTION: Class declaration for DebounceMultipartResponsesLink which extends ApolloLink. This class handles debouncing of multipart GraphQL responses.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.debouncemultipartresponseslink.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class AccumulateMultipartResponsesLink extends ApolloLink \n```\n\n----------------------------------------\n\nTITLE: RemoveMultipartDirectivesLink Class Declaration\nDESCRIPTION: TypeScript class declaration showing that RemoveMultipartDirectivesLink extends ApolloLink.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.removemultipartdirectiveslink.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class RemoveMultipartDirectivesLink extends ApolloLink\n```\n\n----------------------------------------\n\nTITLE: Defining children Property in PreloadQueryProps Interface\nDESCRIPTION: This code snippet shows the TypeScript signature for the children property in the PreloadQueryProps interface. It can be either a ReactNode or a function that takes a TransportedQueryRef with generic types TData and TVariables, and returns a ReactNode.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-nextjs.preloadqueryprops.children.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchildren: ReactNode | ((queryRef: TransportedQueryRef<NoInfer<TData>, NoInfer<TVariables>>) => ReactNode);\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadTransportedQueryFunction Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for PreloadTransportedQueryFunction in the Apollo Client React streaming integration. This appears to be an empty interface declaration that will likely be implemented elsewhere in the codebase.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.preloadtransportedqueryfunction.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreloadTransportedQueryFunction \n```\n\n----------------------------------------\n\nTITLE: Registering Late Initializing Queue in TypeScript\nDESCRIPTION: This function registers a queue that can be filled with data before initialization. It takes a key and a callback function as parameters. The callback is called with accumulated data upon initialization, and afterwards, window[key] becomes an object with a push method that calls the callback.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.registerlateinitializingqueue.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function registerLateInitializingQueue<K extends ValidQueueKeys>(key: K, callback: (data: Parameters<NonNullable<Window[K]>[\"push\"]>[0]) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Client and Next.js Integration\nDESCRIPTION: Command to install Apollo Client and the Next.js integration package using npm.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/nextjs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/client@latest @apollo/client-integration-nextjs\n```\n\n----------------------------------------\n\nTITLE: Defining WrappedApolloProvider Interface for React Streaming SSR in TypeScript\nDESCRIPTION: TypeScript interface definition for WrappedApolloProvider, a specialized version of ApolloProvider designed for React's streaming server-side rendering. The interface is generic, accepting an ExtraProps type parameter.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.wrappedapolloprovider.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WrappedApolloProvider<ExtraProps> \n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apollo Client and TanStack Start Integration\nDESCRIPTION: Command to install the required npm packages for integrating Apollo Client with TanStack Start.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/tanstack-start/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @apollo/client-integration-tanstack-start @apollo/client graphql\n```\n\n----------------------------------------\n\nTITLE: Defining ApolloClient Constructor for React Router Integration in TypeScript\nDESCRIPTION: The constructor signature for initializing an ApolloClient instance in the React Router integration package. It accepts options parameter that matches the original ApolloClient constructor parameters.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-integration-react-router.apolloclient._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(options: ConstructorParameters<typeof ApolloClient$1>[0]);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, dependency changes, and package renaming for Apollo Client Next.js integration\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/experimental-nextjs-app-support/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @apollo/experimental-nextjs-app-support\n\n## 0.12.1\n\n### Patch Changes\n\n- Updated dependencies [1957588]\n  - @apollo/client-integration-nextjs@0.12.1\n\n## 0.12.0\n\n### Minor Changes\n\n- dec635c: This package has now been renamed to \"@apollo/client-integration-nextjs\", please adjust your imports accordingly.\n\n### Patch Changes\n\n- dd2c972: Adjust imports to use the `@apollo/client/react` entrypoint for React-specific imports.\n- Updated dependencies [53972d4]\n- Updated dependencies [dd2c972]\n- Updated dependencies [8209093]\n  - @apollo/client-integration-nextjs@0.12.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name in Markdown\nDESCRIPTION: Shows the package name @apollo/client-react-streaming as a code block in Markdown format. This is used to highlight the package name in the documentation.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/client-react-streaming/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@apollo/client-react-streaming`\n```\n\n----------------------------------------\n\nTITLE: Defining WrappedApolloProvider.info Property in TypeScript\nDESCRIPTION: This code snippet defines the 'info' property of the WrappedApolloProvider class. It contains an object with a 'pkg' field of type string, which likely holds the package name or identifier.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.wrappedapolloprovider.info.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninfo: {\n        pkg: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining TransportedQueryRef.toPromise Type in TypeScript\nDESCRIPTION: Type definition for the toPromise property of TransportedQueryRef interface. The property is currently disabled and set to undefined due to issue #332.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.transportedqueryref.topromise.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoPromise?: undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining InMemoryCache Constructor in TypeScript for Apollo Client\nDESCRIPTION: Constructor signature for the InMemoryCache class which takes an optional configuration object. This constructor initializes a new instance of the InMemoryCache for Apollo Client's React streaming integration.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.inmemorycache._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(config?: InMemoryCacheConfig | undefined);\n```\n\n----------------------------------------\n\nTITLE: Constructing TeeToReadableStreamLink in TypeScript\nDESCRIPTION: This snippet shows the constructor signature for the TeeToReadableStreamLink class. It takes no parameters and is used to create a new instance of the class.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.teetoreadablestreamlink._constructor_.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for resetApolloSingletons\nDESCRIPTION: The function signature for resetApolloSingletons which returns void and takes no parameters. This function resets the singleton instances used for Apollo SSR data transport and caches.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.resetapollosingletons.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function resetApolloSingletons(): void;\n```\n\n----------------------------------------\n\nTITLE: Declaration of resetManualSSRApolloSingletons function in TypeScript\nDESCRIPTION: The function signature for resetManualSSRApolloSingletons which returns void. This function is only available in React Client Components and is used to reset Apollo SSR singletons.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/client-react-streaming.resetmanualssrapollosingletons.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function resetManualSSRApolloSingletons(): void;\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing Apollo Client integration packages with their names and descriptions. It includes links to individual package documentation and provides a brief explanation for the client-react-streaming package.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Packages\n\n<table><thead><tr><th>\n\nPackage\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[@apollo/client-integration-nextjs](./client-integration-nextjs.md)\n\n\n</td><td>\n\n\n\n</td></tr>\n<tr><td>\n\n[@apollo/client-integration-react-router](./client-integration-react-router.md)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[@apollo/client-integration-tanstack-start](./client-integration-tanstack-start.md)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[@apollo/client-react-streaming](./client-react-streaming.md)\n\n\n</td><td>\n\nThis package provides building blocks to create framework-level integration of Apollo Client with React's streaming SSR. See the \\[@<!-- -->apollo/client-integration-nextjs\\](https://github.com/apollographql/apollo-client-integrations/tree/main/packages/nextjs) package as an example.\n\nIt can also be used to use Apollo Client with a custom streaming SSR setup, e.g. with Vite. See the \\[vite streaming integration test\\](https://github.com/apollographql/apollo-client-integrations/tree/main/integration-test/vite-streaming) as an example.\n\n\n</td></tr>\n</tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, dependency changes, and bug fixes for the Apollo Client React Router integration package.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/packages/react-router/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @apollo/client-integration-react-router\n\n## 0.12.0-alpha.4\n\n### Patch Changes\n\n- 7836098: fix up types for async loaders\n- Updated dependencies [3b6eca6]\n  - @apollo/client-react-streaming@0.12.0-alpha.4\n\n## 0.12.0-alpha.3\n\n### Patch Changes\n\n- c1e2415: Fix handling of asynchronous loaders.\n- Updated dependencies [c1e2415]\n  - @apollo/client-react-streaming@0.12.0-alpha.3\n\n## 0.12.0-alpha.2\n\n### Patch Changes\n\n- dd2c972: Adjust imports to use the `@apollo/client/react` entrypoint for React-specific imports.\n- Updated dependencies [dd2c972]\n  - @apollo/client-react-streaming@0.12.0-alpha.2\n\n## 0.12.0-alpha.1\n\n### Patch Changes\n\n- 2f4890a: Set minimal version of React Router to 7.2.0-pre.3, removes need for patching.\n  - @apollo/client-react-streaming@0.12.0-alpha.1\n\n## 0.12.0-alpha.0\n\n### Minor Changes\n\n- 5417a54: Add a package to support React Router streaming SSR\n\n### Patch Changes\n\n- Updated dependencies [8209093]\n- Updated dependencies [20ce0c8]\n- Updated dependencies [9a8c872]\n- Updated dependencies [563db9b]\n  - @apollo/client-react-streaming@0.12.0-alpha.0\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to create a production-ready build of the application.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/integration-test/react-router/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands for building and running Docker containers using different package managers (npm, pnpm, and bun). Includes build commands for each Dockerfile variant and container execution.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/integration-test/react-router/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/examples/app-dir-experiments/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Commands in Next.js\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm package managers. Running these commands will start a local development server that auto-updates as you edit files.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/examples/polls-demo/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR) enabled. The server will be available at port 5173.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/integration-test/react-router/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/apollographql/apollo-client-integrations/blob/main/integration-test/react-router/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```"
  }
]