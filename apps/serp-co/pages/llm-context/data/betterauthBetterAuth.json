[
  {
    "owner": "better-auth",
    "repo": "better-auth",
    "content": "TITLE: Enabling Email and Password Authentication in Better Auth (TypeScript)\nDESCRIPTION: This code snippet shows how to enable email and password authentication within the Better Auth configuration. It sets the `enabled` property to `true` within the `emailAndPassword` option. This snippet is part of the server-side auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    emailAndPassword: {    // [!code highlight]\n        enabled: true // [!code highlight]\n    } // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Up a User with Email and Password (TypeScript)\nDESCRIPTION: This snippet demonstrates how to sign up a user using the `signUp.email` client method provided by Better Auth. It includes email, password, name, optional image, and a callback URL for redirection after email verification. It also showcases `onRequest`, `onSuccess`, and `onError` callbacks for handling the signup process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\"; //import the auth client // [!code highlight]\n\nconst { data, error } = await authClient.signUp.email({\n        email, // user email address\n        password, // user password -> min 8 characters by default\n        name, // user display name\n        image, // User image URL (optional)\n        callbackURL: \"/dashboard\" // A URL to redirect to after the user verifies their email (optional)\n    }, {\n        onRequest: (ctx) => {\n            //show loading\n        },\n        onSuccess: (ctx) => {\n            //redirect to the dashboard or sign in page\n        },\n        onError: (ctx) => {\n            // display the error message\n            alert(ctx.error.message);\n        },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Passkey Plugin to Auth Config (Server)\nDESCRIPTION: This snippet demonstrates how to add the passkey plugin to your Better Auth configuration. It imports the `passkey` plugin and includes it in the `plugins` array of the `betterAuth` options.  This enables passkey authentication on the server side.  Dependencies: better-auth, better-auth/plugins/passkey.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { passkey } from \"better-auth/plugins/passkey\" // [!code highlight]\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        passkey(), // [!code highlight]\n    ], // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Authentication Methods\nDESCRIPTION: This code snippet shows how to configure authentication methods, such as email/password and social providers, within the Better Auth configuration.  It enables email/password authentication and configures the GitHub social provider with client ID and secret from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    //...other options\n    emailAndPassword: {  // [!code highlight]\n        enabled: true // [!code highlight]\n    },// [!code highlight]\n    socialProviders: { // [!code highlight]\n        github: { // [!code highlight]\n           clientId: process.env.GITHUB_CLIENT_ID as string, // [!code highlight]\n           clientSecret: process.env.GITHUB_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    }, // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Stripe Checkout Session Parameters in Typescript\nDESCRIPTION: This code snippet demonstrates how to customize the Stripe Checkout session parameters within a Typescript application. It allows setting parameters such as enabling promotion codes, tax ID collection, requiring billing address collection, adding custom text, and including metadata like plan type and referral code. The function uses an idempotency key to ensure the uniqueness of the subscription.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetCheckoutSessionParams: async ({ user, session, plan, subscription }, request) => {\n    return {\n        params: {\n            allow_promotion_codes: true,\n            tax_id_collection: {\n                enabled: true\n            },\n            billing_address_collection: \"required\",\n            custom_text: {\n                submit: {\n                    message: \"We'll start your subscription right away\"\n                }\n            },\n            metadata: {\n                planType: \"business\",\n                referralCode: user.metadata?.referralCode\n            }\n        },\n        options: {\n            idempotencyKey: `sub_${user.id}_${plan.name}_${Date.now()}`\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Key Generation and Verification - TypeScript\nDESCRIPTION: This snippet illustrates how to customize the API key generation and validation processes. It uses the `customKeyGenerator` to define custom API key generation logic and the `customAPIKeyValidator` to validate the API key. By providing these custom functions, you can improve the performance of the API key verification process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      customKeyGenerator: (options: { length: number, prefix: string | undefined }) => {\n        const apiKey = mySuperSecretApiKeyGenerator(options.length, options.prefix);\n        return apiKey;\n      },\n      customAPIKeyValidator: ({ctx, key}) => {\n          if(key.endsWith(\"_super_secret_api_key\")) {\n            return true;\n          } else {\n            return false;\n          }\n      },\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Expiration in Better Auth\nDESCRIPTION: This snippet shows how to configure session expiration settings in Better Auth. It sets the expiration period to 7 days and configures the session to be refreshed every day.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    //... other config options\n    session: {\n        expiresIn: 60 * 60 * 24 * 7, // 7 days\n        updateAge: 60 * 60 * 24 // 1 day (every 1 day the session expiration is updated)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Add API Key Plugin to Better Auth Server (TS)\nDESCRIPTION: This code snippet demonstrates how to add the API Key plugin to the Better Auth server configuration. It imports the necessary modules and includes the `apiKey()` function in the `plugins` array of the `betterAuth` configuration object. This enables API key functionality within the Better Auth instance.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { apiKey } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [ // [!code highlight]\n        apiKey() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Signing In a User with Email and Password (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `signIn.email` function to sign in a user using their email and password.  It includes optional parameters like callbackURL and rememberMe. Callbacks can be defined to handle the sign-in process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signIn.email({\n        /**\n         * The user email\n         */\n        email,\n        /**\n         * The user password\n         */\n        password,\n        /**\n         * A URL to redirect to after the user verifies their email (optional)\n         */\n        callbackURL: \"/dashboard\",\n        /**\n         * remember the user session after the browser is closed. \n         * @default true\n         */\n        rememberMe: false\n}, {\n    //callbacks\n})\n```\n\n----------------------------------------\n\nTITLE: Extending User Schema with Additional Fields in Better Auth\nDESCRIPTION: This snippet demonstrates how to extend the user schema with additional fields like 'role' and 'lang' using the betterAuth configuration. It shows how to set field types, requirements, default values, and input restrictions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  user: {\n    additionalFields: {\n      role: {\n        type: \"string\",\n        required: false,\n        defaultValue: \"user\",\n        input: false, // don't allow user to set role\n      },\n      lang: {\n        type: \"string\",\n        required: false,\n        defaultValue: \"en\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Forget Password Functionality in Better Auth\nDESCRIPTION: Code sample demonstrating how to trigger the password reset process by calling the forgetPassword function with the user's email and a redirect URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.forgetPassword({\n  email: \"test@example.com\",\n  redirectTo: \"/reset-password\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Access Control with Statements (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create an access controller using the `createAccessControl` function from the `better-auth/plugins/access` module. It defines a statement object specifying resource names (e.g., 'project') and associated actions (e.g., 'create', 'share', 'update', 'delete'). The `as const` assertion ensures correct type inference.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\n\n/**\n * make sure to use `as const` so typescript can infer the type correctly\n */\nconst statement = { // [!code highlight]\n    project: [\"create\", \"share\", \"update\", \"delete\"], // [!code highlight]\n} as const; // [!code highlight]\n\nconst ac = createAccessControl(statement); // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook (React/TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `useSession` hook in a React component to access session data. It retrieves the session data, loading state (`isPending`), error, and a refetch function.  This allows you to easily display the user details on the client side.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\" // import the auth client // [!code highlight] \n\n        export function User(){\n\n            const { // [!code highlight]\n                data: session, // [!code highlight]\n                isPending, //loading state // [!code highlight]\n                error, //error object // [!code highlight]\n                refetch //refetch the session\n            } = authClient.useSession() // [!code highlight]\n\n            return (\n                //...\n            )\n        }\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth\nDESCRIPTION: This command installs the Better Auth package into your project. It is important to install the package in both the client and server if you have a separate setup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nbetter-auth\n```\n\n----------------------------------------\n\nTITLE: Verify API Key (Server - TS)\nDESCRIPTION: This code shows how to verify an API key using the `auth.api.verifyApiKey` method. It sends the API key in the `body` and checks for validity. The snippet also includes the ability to verify the key against required permissions, checking whether the API key has specific permissions for certain resources.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { valid, error, key } = await auth.api.verifyApiKey({\n  body: {\n    key: \"your_api_key_here\",\n  },\n});\n\n//with permissions check\nconst { valid, error, key } = await auth.api.verifyApiKey({\n  body: {\n    key: \"your_api_key_here\",\n    permissions: {\n      projects: [\"read\", \"read-write\"]\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Cross-Platform Passkey\nDESCRIPTION: This snippet shows how to add a cross-platform passkey to a user's account using the `addPasskey` method with the `authenticatorAttachment` option set to `'cross-platform'`. This will show a QR code for the user to scan as well as the option to plug in a security key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Register a cross-platform passkey showing only a QR code\n// for the user to scan as well as the option to plug in a security key\nconst { data, error } = await authClient.passkey.addPasskey({\n  authenticatorAttachment: 'cross-platform'\n});\n```\n\n----------------------------------------\n\nTITLE: Signing In with Google Using Better Auth Client (TypeScript)\nDESCRIPTION: This code demonstrates how to use the Better Auth client to initiate a sign-in with Google. It uses the signIn.social function, specifying 'google' as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/google.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"google\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Permissions Structure Definition (TypeScript)\nDESCRIPTION: This snippet defines the structure of the `Permissions` object, which is a map of resource types to an array of permission strings. This example shows how permissions are organized by resource type (e.g., files, users, projects) and the allowed actions for each resource.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype Permissions = {\n  [resourceType: string]: string[];\n};\n\n// Example:\nconst permissions = {\n  files: [\"read\", \"write\", \"delete\"],\n  users: [\"read\"],\n  projects: [\"read\", \"write\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Change User Email with Better Auth Client\nDESCRIPTION: This snippet shows how to use the `changeEmail` function on the Better Auth client to initiate the email change process. It requires the new email and a callback URL for redirection after verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.changeEmail({\n    newEmail: \"new-email@email.com\",\n    callbackURL: \"/dashboard\", //to redirect after verification\n});\n```\n\n----------------------------------------\n\nTITLE: Bypassing Session Cookie Cache in Better Auth\nDESCRIPTION: This code demonstrates how to force a fresh session fetch by bypassing the cookie cache with the disableCookieCache option.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await authClient.getSession({ query: {\n    disableCookieCache: true\n}})\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Route Handler for Better Auth\nDESCRIPTION: This TypeScript code updates the Next.js route handler to use Better Auth instead of NextAuth.js. It exports POST and GET handlers using the toNextJsHandler function from Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toNextJsHandler } from \"better-auth/next-js\";\nimport { auth } from \"~/server/auth\";\n\nexport const { POST, GET } = toNextJsHandler(auth);\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions on Server (TypeScript)\nDESCRIPTION: This code shows how to verify user permissions server-side using the `userHasPermission` action provided by the `auth.api`. It demonstrates passing the user ID or role along with the permissions object to check if a user or role has access to specific resources. Multiple resources can also be checked at the same time.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\";\nauth.api.userHasPermission({\n  body: {\n    userId: 'id', //the user id\n    permissions: {\n      project: [\"create\"], // This must match the structure in your access control\n    },\n  },\n});\n\n// You can also just pass the role directly\nauth.api.userHasPermission({\n  body: {\n   role: \"admin\",\n    permissions: {\n      project: [\"create\"], // This must match the structure in your access control\n    },\n  },\n});\n\n// You can also check multiple resource permissions at the same time\nauth.api.userHasPermission({\n  body: {\n   role: \"admin\",\n    permissions: {\n      project: [\"create\"], // This must match the structure in your access control\n      sale: [\"create\"]\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a Next.js application using Better Auth. It imports the `auth` object (assumed to be configured elsewhere) and `toNextJsHandler` from the `better-auth/next-js` package to handle authentication requests at the `/api/auth/[...all]` route.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\"; // path to your auth file\nimport { toNextJsHandler } from \"better-auth/next-js\";\n\nexport const { POST, GET } = toNextJsHandler(auth);\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Sign-in After Email Verification\nDESCRIPTION: Configures Better Auth to automatically sign in users after they successfully verify their email address by setting the autoSignInAfterVerification option to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = betterAuth({\n    //...your other options\n    emailVerification: {\n        autoSignInAfterVerification: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Signing In with Social Providers (TypeScript)\nDESCRIPTION: This snippet showcases how to initiate social sign-in using the `signIn.social` client method. It requires the `provider` ID (e.g., \"github\", \"google\", \"apple\"), an optional `callbackURL`, `errorCallbackURL`, `newUserCallbackURL` and an optional `disableRedirect` parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\"; //import the auth client // [!code highlight]\n\nawait authClient.signIn.social({\n    /**\n     * The social provider id\n     * @example \"github\", \"google\", \"apple\"\n     */\n    provider: \"github\",\n    /**\n     * A URL to redirect after the user authenticates with the provider\n     * @default \"/\"\n     */\n    callbackURL: \"/dashboard\", \n    /**\n     * A URL to redirect if an error occurs during the sign in process\n     */\n    errorCallbackURL: \"/error\",\n    /**\n     * A URL to redirect if the user is newly registered\n     */\n    newUserCallbackURL: \"/welcome\",\n    /**\n     * disable the automatic redirect to the provider. \n     * @default false\n     */\n    disableRedirect: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Create API Key with Metadata - TypeScript\nDESCRIPTION: This snippet demonstrates how to create an API key with associated metadata. The `metadata` field within the API key creation request allows storing custom information, such as a subscription plan.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.createApiKey({\n  body: {\n    metadata: {\n      plan: \"premium\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-Up with Email and Password in Better Auth\nDESCRIPTION: Code sample demonstrating how to sign up a user with email and password using the signUp.email function from the auth client. Takes email, password, name, and optional image parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signUp.email({\n  email: \"test@example.com\",\n  password: \"password1234\",\n  name: \"test\",\n  image: \"https://example.com/image.png\",\n});\n```\n\n----------------------------------------\n\nTITLE: List Users with Pagination - Typescript\nDESCRIPTION: This code snippet demonstrates how to implement pagination when listing users using the `listUsers` method.  It calculates total pages based on the total users and page size, and it shows how to pass limit and offset parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst pageSize = 10;\nconst currentPage = 2;\n\nconst users = await authClient.admin.listUsers({\n    query: {\n        limit: pageSize,\n        offset: (currentPage - 1) * pageSize\n    }\n});\n\nconst totalUsers = users.total;\nconst totalPages = Math.ceil(totalUsers / limit)\n```\n\n----------------------------------------\n\nTITLE: Revoking All Other Sessions in Better Auth\nDESCRIPTION: This code demonstrates how to revoke all sessions except the current one using the revokeOtherSessions function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.revokeOtherSessions()\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth in a Next.js Server Action with Cookie Management\nDESCRIPTION: This example shows how to use Better Auth in a server action with automatic cookie handling. With the nextCookies plugin configured, cookies will be set automatically when authentication functions are called.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\nimport { auth } from \"@/lib/auth\"\n\nconst signIn = async () => {\n    await auth.api.signInEmail({\n        body: {\n            email: \"user@email.com\",\n            password: \"password\",\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-In with Email and Password in Better Auth\nDESCRIPTION: Code sample demonstrating how to sign in a user with email and password using the signIn.email function from the auth client. Takes email, password, and optional rememberMe and callbackURL parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signIn.email({\n  email: \"test@example.com\",\n  password: \"password1234\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in Better Auth\nDESCRIPTION: Code sample demonstrating how to reset a user's password using the resetPassword function with a new password and the token from the URL query parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = new URLSearchParams(window.location.search).get(\"token\");\nif (!token) {\n  // Handle the error\n}\nconst { data, error } = await authClient.resetPassword({\n  newPassword: \"password1234\",\n  token,\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions on the Server\nDESCRIPTION: This snippet demonstrates how to use the `hasPermission` API on the server to check if a user has a specific permission (e.g., `project:create`). It retrieves headers using `await headers()` and sends a request to the `auth.api.hasPermission` endpoint with the required permissions defined in the `body.permissions` object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\";\nauth.api.hasPermission({\n  headers: await headers(),\n    body: {\n      permissions: {\n        project: [\"create\"] // This must match the structure in your access control\n      }\n    }\n});\n\n// You can also check multiple resource permissions at the same time\nauth.api.hasPermission({\n  headers: await headers(),\n    body: {\n      permissions: {\n        project: [\"create\"], // This must match the structure in your access control\n        sale: [\"create\"]\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Better Auth with PostgreSQL using Node.js\nDESCRIPTION: This snippet demonstrates how to initialize Better Auth with a PostgreSQL database connection using the 'pg' package. It creates a Pool connection with a connection string containing the database credentials.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/postgresql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n  database: new Pool({\n    connectionString: \"postgres://user:password@localhost:5432/database\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Improving Type Inference for Custom Session Plugin in Better Auth\nDESCRIPTION: This snippet demonstrates a workaround to improve type inference for custom session by passing the auth options to the plugin. This enables fields added by plugins to be properly inferred.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth, BetterAuthOptions } from \"better-auth\";\n\nconst options = {\n  //...config options\n  plugins: [\n    //...plugins\n  ]\n} satisfies BetterAuthOptions;\n\nexport const auth = betterAuth({\n    ...options,\n    plugins: [\n        ...(options.plugins ?? []),\n        customSession(async ({ user, session }, ctx) => {\n            // now both user and session will infer the fields added by plugins and your custom fields\n            return {\n                user,\n                session\n            }\n        }, options), // pass options here\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft Sign-In in Better Auth Client (TypeScript)\nDESCRIPTION: This snippet shows how to implement the sign-in functionality with Microsoft using the Better Auth client. It demonstrates creating an auth client and using the signIn.social function with the 'microsoft' provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/microsoft.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\n\nconst authClient = createAuthClient();\n\nconst signIn = async () => {\n  const data = await authClient.signIn.social({\n    provider: \"microsoft\",\n    callbackURL: \"/dashboard\", // The URL to redirect to after the sign in\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Protecting a route with authentication middleware\nDESCRIPTION: Example of using the requireAuth middleware to protect a route that requires authentication. This creates a GET endpoint that returns secret data only to authenticated users.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Object syntax of the route handler\nexport default defineEventHandler({\n  // The user has to be logged in to access this route\n  onRequest: [requireAuth],\n  handler: async (event) => {\n    setResponseStatus(event, 201, \"Secret data\");\n    return { message: \"Secret data\" };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Inferring Additional Fields in Better Auth\nDESCRIPTION: This snippet demonstrates how to add additional fields to the user object in Better Auth and infer the updated Session type. It adds a 'role' field of type string to the user object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport Database from \"better-sqlite3\"\n\nexport const auth = betterAuth({\n    database: new Database(\"database.db\"),\n    user: {\n       additionalFields: {\n          role: {\n              type: \"string\"\n            } \n        }\n    }\n   \n})\n\ntype Session = typeof auth.$Infer.Session\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in Better Auth (TypeScript)\nDESCRIPTION: This snippet shows how to configure the Facebook provider in the auth instance. It requires setting up the clientId and clientSecret as environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        facebook: {\n            clientId: process.env.FACEBOOK_CLIENT_ID as string,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Roles to the Plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate the created roles and access controller into the `betterAuth` configuration. It imports necessary modules, including the admin plugin, and passes the access controller (`ac`) and defined roles (e.g., 'admin', 'user', 'myCustomRole') to the plugin configuration, enabling role-based access control within the application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { admin as adminPlugin } from \"better-auth/plugins\"\nimport { ac, admin, user } from \"@/auth/permissions\"\n\nexport const auth = betterAuth({\n    plugins: [\n        adminPlugin({\n            ac,\n            roles: {\n                admin,\n                user,\n                myCustomRole\n            }\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Roles to the Client Plugin (TypeScript)\nDESCRIPTION: This code demonstrates how to pass the access controller and roles to the client plugin using `createAuthClient`.  This enables client-side permission checks without requiring a server request. It imports the necessary client modules and defines the roles within the plugin configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { adminClient } from \"better-auth/client/plugins\"\nimport { ac, admin, user, myCustomRole } from \"@/auth/permissions\"\n\nexport const client = createAuthClient({\n    plugins: [\n        adminClient({\n            ac,\n            roles: {\n                admin,\n                user,\n                myCustomRole\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login with Better Auth in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to implement social login (specifically for Discord) using Better Auth's signIn function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"~/lib/auth-client\";\n\nexport const signInDiscord = async () => {\n    const data = await signIn.social({\n        provider: \"discord\"\n    });\n    return data;\n};\n```\n\n----------------------------------------\n\nTITLE: React Auth Client Initialization\nDESCRIPTION: This snippet shows how to create the Better Auth client with React. It imports `createAuthClient` from `better-auth/react` and initializes it with a `baseURL` pointing to the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */ // [!code highlight]\n    baseURL: \"http://localhost:3000\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Encrypt Tokens Using Database Hooks (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use database hooks within Better Auth to encrypt tokens (accessToken and refreshToken) before they are saved to the database. It uses an `encrypt` function (not provided) to perform the encryption. This provides control over the encryption/decryption process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    databaseHooks: {\n        account: {\n            create: {\n                before(account, context) {\n                     const withEncryptedTokens = { ...account };\n                    if (account.accessToken) {\n                        const encryptedAccessToken = encrypt(account.accessToken)  // [!code focus]\n                        withEncryptedTokens.accessToken = encryptedAccessToken;\n                    }\n                    if (account.refreshToken) {\n                        const encryptedRefreshToken = encrypt(account.refreshToken); // [!code focus]\n                        withEncryptedTokens.refreshToken = encryptedRefreshToken;\n                    }\n                    return {\n                        data: resultAccount\n                    }\n                },\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Apple Provider\nDESCRIPTION: Configures the Apple provider within the `socialProviders` option of the Better Auth instance.  It requires the `clientId` and `clientSecret` obtained from the Apple Developer Portal, and optionally the `appBundleIdentifier`. The `appleid.apple.com` domain must be added to the `trustedOrigins` array to enable communication with Apple's authentication servers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/apple.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\n        export const auth = betterAuth({\n            socialProviders: {\n                apple: { // [!code highlight]\n                    clientId: process.env.APPLE_CLIENT_ID as string, // [!code highlight]\n                    clientSecret: process.env.APPLE_CLIENT_SECRET as string, // [!code highlight]\n                    // Optional\n                    appBundleIdentifier: process.env.APPLE_APP_BUNDLE_IDENTIFIER as string, // [!code highlight]\n                }, // [!code highlight]\n            },\n            // Add appleid.apple.com to trustedOrigins for Sign In with Apple flows\n            trustedOrigins: [\"https://appleid.apple.com\"], // [!code highlight]\n        })\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhook Events - Typescript\nDESCRIPTION: This snippet shows how to handle custom Stripe webhook events using the `onEvent` function within the Stripe plugin configuration. It provides a switch statement to handle different event types, such as `invoice.paid` and `payment_intent.succeeded`.  This allows developers to execute custom logic based on specific Stripe events received through webhooks.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nstripe({\n    // ... other options\n    onEvent: async (event) => {\n        // Handle any Stripe event\n        switch (event.type) {\n            case \"invoice.paid\":\n                // Handle paid invoice\n                break;\n            case \"payment_intent.succeeded\":\n                // Handle successful payment\n                break;\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Register OIDC Provider (Client)\nDESCRIPTION: This code snippet demonstrates how to register an OIDC provider on the client side using the `authClient.sso.register` method. It shows registering with just the issuer URL for providers supporting discovery, and with all necessary fields explicitly defined.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\";\n\n// only with issuer if the provider supports discovery\nawait authClient.sso.register({\n issuer: \"https://idp.example.com\",\n providerId: \"example-provider\",\n});\n\n// with all fields\nawait authClient.sso.register({\n issuer: \"https://idp.example.com\",\n domain: \"example.com\",\n clientId: \"client-id\",\n clientSecret: \"client-secret\",\n authorizationEndpoint: \"https://idp.example.com/authorize\",\n tokenEndpoint: \"https://idp.example.com/token\",\n jwksEndpoint: \"https://idp.example.com/jwks\",\n mapping: {\n id: \"sub\",\n email: \"email\",\n emailVerified: \"email_verified\",\n name: \"name\",\n image: \"picture\",\n },\n providerId: \"example-provider\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Auth Middleware in Next.js with Cookie Check\nDESCRIPTION: This code shows how to implement Next.js middleware that checks for a session cookie without making API calls. It uses getSessionCookie to check for authentication and redirects unauthenticated users appropriately.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { getSessionCookie } from \"better-auth/cookies\";\n\nexport async function middleware(request: NextRequest) {\n\tconst sessionCookie = getSessionCookie(request);\n\n\tif (!sessionCookie) {\n\t\treturn NextResponse.redirect(new URL(\"/\", request.url));\n\t}\n\n\treturn NextResponse.next();\n}\n\nexport const config = {\n\tmatcher: [\"/dashboard\"], // Specify the routes the middleware applies to\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Provider in Better Auth (TypeScript)\nDESCRIPTION: This snippet shows how to configure the Google social provider in the Better Auth configuration. It requires setting the clientId and clientSecret obtained from the Google Cloud Console.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        google: { // [!code highlight]\n            clientId: process.env.GOOGLE_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Add Two-Factor Auth Plugin (Client)\nDESCRIPTION: This code snippet demonstrates how to add the two-factor authentication plugin to the Better Auth client-side configuration. It imports the `twoFactorClient` plugin from `better-auth/client/plugins` and adds it to the `plugins` array in the `createAuthClient` configuration object, configuring the redirect page in case two factor verification is required.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport { twoFactorClient } from \"better-auth/client/plugins\"; // [!code highlight]\n\nconst authClient = createAuthClient({\n    plugins: [ // [!code highlight]\n        twoFactorClient({ // [!code highlight]\n            twoFactorPage: \"/two-factor\" // the page to redirect if a user need to verify 2nd factor // [!code highlight]\n        }) // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft OAuth Provider in Better Auth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft OAuth provider in the auth configuration. It includes setting up the clientId, clientSecret, and optional parameters like tenantId and requireSelectAccount.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/microsoft.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        microsoft: { // [!code highlight]\n            clientId: process.env.MICROSOFT_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.MICROSOFT_CLIENT_SECRET as string, // [!code highlight]\n            // Optional\n            tenantId: 'common', // [!code highlight]\n            requireSelectAccount: true // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Providers (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure social providers like GitHub within the Better Auth configuration. It sets the `clientId` and `clientSecret` properties for the desired provider. The variables `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET` should be defined in the environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    socialProviders: { // [!code highlight]\n        github: { // [!code highlight]\n            clientId: process.env.GITHUB_CLIENT_ID!, // [!code highlight]\n            clientSecret: process.env.GITHUB_CLIENT_SECRET!, // [!code highlight]\n        } // [!code highlight]\n    }, // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default API Key Permissions (Dynamic)\nDESCRIPTION: This snippet showcases how to provide a function that returns permissions dynamically based on the user ID and context. This enables permissions to be determined at runtime based on user roles or other data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      permissions: {\n        defaultPermissions: async (userId, ctx) => {\n          // Fetch user role or other data to determine permissions\n          return {\n            files: [\"read\"],\n            users: [\"read\"]\n          };\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced OTP Type-Based Email Sending\nDESCRIPTION: Example implementation of the sendVerificationOTP callback that handles different types of OTPs (sign-in, email verification, password reset) with custom email content for each type.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        emailOTP({\n            async sendVerificationOTP({\n                email,\n                otp,\n                type\n            }) {\n                if (type === \"sign-in\") {\n                    // Send the OTP for sign-in\n                } else if (type === \"email-verification\") {\n                    // Send the OTP for email verification\n                } else {\n                    // Send the OTP for password reset\n                }\n            },\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Create API Key (Server - TS)\nDESCRIPTION: This snippet demonstrates how to create an API key on the server-side using `auth.api.createApiKey`. It passes configuration options such as `name`, `expiresIn`, `prefix`, rate limiting configurations and metadata within the `body` of the request. It also associates the API key with a specific user using the `userId` property.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.createApiKey({\n    body: {\n      name: \"My API Key\",\n      expiresIn: 60 * 60 * 24 * 365, // 1 year\n      prefix: \"my_app\",\n      remaining: 100,\n      refillAmount: 100,\n      refillInterval: 60 * 60 * 24 * 7, // 7 days\n      metadata: {\n          tier: \"premium\",\n      },\n      rateLimitTimeWindow: 1000 * 60 * 60 * 24, // everyday\n      rateLimitMax: 100, // every day, they can use up to 100 requests\n      rateLimitEnabled: true,\n      userId: user.id, // the user id to create the API key for\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Validating JWT with Remote JWKS using Jose Library\nDESCRIPTION: This snippet demonstrates how to validate a JWT token using the Jose library with a remote JWKS endpoint. It creates a remote JWKS set and verifies the token with specified issuer and audience.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jwtVerify, createRemoteJWKSet } from 'jose'\n\nasync function validateToken(token: string) {\n  try {\n    const JWKS = createRemoteJWKSet(\n      new URL('http://localhost:3000/api/auth/jwks')\n    )\n    const { payload } = await jwtVerify(token, JWKS, {\n      issuer: 'http://localhost:3000', // Should match your JWT issuer, which is the BASE_URL\n      audience: 'http://localhost:3000', // Should match your JWT audience, which is the BASE_URL by default\n    })\n    return payload\n  } catch (error) {\n    console.error('Token validation failed:', error)\n    throw error\n  }\n}\n\n// Usage example\nconst token = 'your.jwt.token' // this is the token you get from the /api/auth/token endpoint\nconst payload = await validateToken(token)\n```\n\n----------------------------------------\n\nTITLE: Register OIDC Provider (Server)\nDESCRIPTION: This code snippet demonstrates how to register an OIDC provider on the server side using the `auth.api.createOIDCProvider` method. It requires providing all necessary configuration details for the provider, including issuer, client ID, and endpoints.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { headers } = await signInWithTestUser();\nawait auth.api.createOIDCProvider({\n body: {\n issuer: \"https://idp.example.com\",\n domain: \"example.com\",\n clientId: \"your-client-id\",\n clientSecret: \"your-client-secret\",\n authorizationEndpoint: \"https://idp.example.com/authorize\",\n tokenEndpoint: \"https://idp.example.com/token\",\n jwksEndpoint: \"https://idp.example.com/jwks\",\n mapping: {\n id: \"sub\",\n email: \"email\",\n emailVerified: \"email_verified\",\n name: \"name\",\n image: \"picture\",\n },\n providerId: \"example-provider\",\n },\n headers,\n});\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions on Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `hasPermission` function on the client side to check if a user has the required permissions. It checks permissions for a single resource (project) and multiple resources (project and sale) using the `authClient.admin.hasPermission` method.  It returns a boolean indicating whether the user possesses the specified permissions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst canCreateProject = await authClient.admin.hasPermission({\n  permissions: {\n    project: [\"create\"],\n  },\n});\n\n// You can also check multiple resource permissions at the same time\nconst canCreateProjectAndCreateSale = await authClient.admin.hasPermission({\n  permissions: {\n    project: [\"create\"],\n    sale: [\"create\"]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JWKS Response Format\nDESCRIPTION: This snippet shows the JSON format of the JWKS (JSON Web Key Set) response from the /api/auth/jwks endpoint, containing the public key information used for JWT verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n      {\n          \"crv\": \"Ed25519\",\n          \"x\": \"bDHiLTt7u-VIU7rfmcltcFhaHKLVvWFy-_csKZARUEU\",\n          \"kty\": \"OKP\",\n          \"kid\": \"c5c7995d-0037-4553-8aee-b5b620b89b23\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Two-Factor Methods (Client)\nDESCRIPTION: This code shows usage of the two-factor methods on the client side, including enabling, disabling, and verifying TOTP. It also illustrates how the sign-in process may redirect to a two-factor page if the user has two-factor authentication enabled.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"./auth-client\"\n\nconst enableTwoFactor = async() => {\n    const data = await authClient.twoFactor.enable({\n        password // the user password is required\n    }) // this will enable two factor\n}\n\nconst disableTwoFactor = async() => {\n    const data = await authClient.twoFactor.disable({\n        password // the user password is required\n    }) // this will disable two factor\n}\n\nconst signInWith2Factor = async() => {\n    const data = await authClient.signIn.email({\n        //...\n    })\n    //if the user has two factor enabled, it will redirect to the two factor page\n}\n\nconst verifyTOTP = async() => {\n    const data = await authClient.twoFactor.verifyTOTP({\n        code: \"123456\", // the code entered by the user \n        /**\n         * If the device is trusted, the user won't\n         * need to pass 2FA again on the same device\n         */\n        trustDevice: true\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Sign-In with Better Auth Client (TypeScript)\nDESCRIPTION: This code demonstrates how to use the Better Auth client to implement Facebook sign-in functionality. It uses the signIn.social method with the provider set to 'facebook'.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/auth-client\"\nconst authClient = createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"facebook\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Auth Middleware with Direct API Access in Next.js >= 15.2.0\nDESCRIPTION: This code demonstrates how to use Better Auth in Next.js middleware using the Node.js runtime available in Next.js 15.2.0 and above. It can directly access the auth API for session validation.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { headers } from \"next/headers\";\nimport { auth } from \"@/lib/auth\";\n\nexport async function middleware(request: NextRequest) {\n    const session = await auth.api.getSession({\n        headers: await headers()\n    })\n\n    if(!session) {\n        return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n    }\n\n    return NextResponse.next();\n}\n\nexport const config = {\n  runtime: \"nodejs\",\n  matcher: [\"/dashboard\"], // Apply middleware to specific routes\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Sign-In Client Function\nDESCRIPTION: Creates an auth client instance and implements a sign-in function specifically for Twitter authentication using the Better Auth client library.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/twitter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"twitter\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with emailAndPassword (TypeScript)\nDESCRIPTION: This snippet configures email and password authentication for Better Auth. It enables the provider, disables sign-up, requires email verification, sets password length constraints, and defines functions for sending reset password emails and custom password hashing/verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\temailAndPassword: {\n\t\tenabled: true,\n\t\tdisableSignUp: false,\n\t\trequireEmailVerification: true,\n\t\tminPasswordLength: 8,\n\t\tmaxPasswordLength: 128,\n\t\tautoSignIn: true,\n\t\tsendResetPassword: async ({ user, url, token }) => {\n\t\t\t// Send reset password email\n\t\t},\n\t\tresetPasswordTokenExpiresIn: 3600, // 1 hour\n\t\tpassword: {\n\t\t\thash: async (password) => {\n\t\t\t\t// Custom password hashing\n\t\t\t\treturn hashedPassword;\n\t\t\t},\n\t\t\tverify: async ({ hash, password }) => {\n\t\t\t\t// Custom password verification\n\t\t\t\treturn isValid;\n\t\t\t}\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: List User's Organizations (React/TSX)\nDESCRIPTION: This React code snippet demonstrates how to list a user's organizations using the `authClient.useListOrganizations` hook.  It renders a list of organization names if organizations are found. If no organizations are found, it displays a message indicating that no organizations were found. It also displays a loading message while the data is being fetched.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\"\n\nfunction App(){\n    const { data: organizations } = authClient.useListOrganizations()\n    return (\n        <div>\n            {organizations.map(org => <p>{org.name}</p>)}\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Sign-In with Better Auth Client\nDESCRIPTION: Demonstrates how to implement the GitHub sign-in functionality using the Better Auth client library. Creates an auth client instance and provides a sign-in function that uses the GitHub provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"github\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Drizzle Adapter\nDESCRIPTION: This snippet configures Better Auth to use Drizzle as an adapter.  It imports the necessary modules and the drizzle instance from your project, and then passes the drizzle instance to `drizzleAdapter`. The adapter and provider are then passed to the `betterAuth` configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/db\"; // your drizzle instance\n\nexport const auth = betterAuth({\n    database: drizzleAdapter(db, {\n        provider: \"pg\", // or \"mysql\", \"sqlite\"\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Full Organization Details (Client)\nDESCRIPTION: This snippet shows how to retrieve the full details of an organization on the client-side using `authClient.organization.getFullOrganization`. It allows fetching an organization either by `organizationId` or `organizationSlug`.  One of the two options must be provided.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst organization = await authClient.organization.getFullOrganization({\n    organizationId: \"organization-id\" // optional, by default it will use the active organization\n})\n//you can also use organizationSlug instead of organizationId\nconst organization = await authClient.organization.getFullOrganization({\n    organizationSlug: \"organization-slug\"\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema using Organization Plugin in Typescript\nDESCRIPTION: This code snippet shows how to customize the database schema using the organization plugin. It maps the 'organization' table to 'organizations' and the 'name' field to 'title' within the schema. This customization is achieved by passing the `schema` option to the `organization` plugin during authentication setup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = betterAuth({\n  plugins: [organization({\n    schema: {\n      organization: {\n        modelName: \"organizations\",  //map the organization table to organizations\n        fields: {\n          name: \"title\" //map the name field to title\n        }\n      }\n    }\n  })]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating One-Time Token on Server (TypeScript)\nDESCRIPTION: This code snippet shows how to generate a one-time token on the server side using the auth.api.generateOneTimeToken method. It requires passing the request headers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await auth.api.generateOneTimeToken({\n    headers: await headers() // pass the request headers\n})\n```\n\n----------------------------------------\n\nTITLE: Organization Creation Hooks (TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `beforeCreate` and `afterCreate` hooks to customize the organization creation process. The `beforeCreate` hook allows modifying the organization data before it's created, while the `afterCreate` hook allows running custom logic after the organization has been created, such as setting up default resources.  Request object is optional.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        organization({\n            organizationCreation: {\n                disabled: false, // Set to true to disable organization creation\n                beforeCreate: async ({ organization, user }, request) => {\n                    // Run custom logic before organization is created\n                    // Optionally modify the organization data\n                    return {\n                        data: {\n                            ...organization,\n                            metadata: {\n                                customField: \"value\"\n                            }\n                        }\n                    }\n                },\n                afterCreate: async ({ organization, member, user }, request) => {\n                    // Run custom logic after organization is created\n                    // e.g., create default resources, send notifications\n                    await setupDefaultResources(organization.id)\n                }\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting the Auth Handler - Astro - Typescript\nDESCRIPTION: This code snippet demonstrates how to mount the Better Auth handler to a catch-all API route in Astro, specifically within the `/pages/api/auth/[...all].ts` file. It imports the `auth` instance and defines an `APIRoute` that calls `auth.handler` with the request context. Optionally, it shows how to forward the client's IP address for rate limiting purposes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/auth\";\nimport type { APIRoute } from \"astro\";\n\nexport const ALL: APIRoute = async (ctx) => {\n\t// If you want to use rate limiting, make sure to set the 'x-forwarded-for' header to the request headers from the context\n\t// ctx.request.headers.set(\"x-forwarded-for\", ctx.clientAddress);\n\treturn auth.handler(ctx.request);\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Stripe Plugin\nDESCRIPTION: This code snippet shows how to configure the Stripe plugin within the Better Auth setup.  It initializes the Stripe client with the secret key and configures the plugin with the client, webhook secret, and automatic customer creation on signup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { stripe } from \"@better-auth/stripe\"\nimport Stripe from \"stripe\"\n\nconst stripeClient = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n    apiVersion: \"2025-02-24.acacia\",\n})\n\nexport const auth = betterAuth({\n    // ... your existing config\n    plugins: [\n        stripe({\n            stripeClient,\n            stripeWebhookSecret: process.env.STRIPE_WEBHOOK_SECRET!,\n            createCustomerOnSignUp: true,\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Create API Key (Client - TS)\nDESCRIPTION: This code shows how to create a new API key using the Better Auth client-side API. The `authClient.apiKey.create` method is called with an object containing the key's `name`, `expiresIn`, `prefix`, and `metadata`. The returned `apiKey` object contains the generated key, while `error` provides any error information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: apiKey, error } = await authClient.apiKey.create({\n    name: \"My API Key\",\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    prefix: \"my_app\",\n    metadata: {\n        tier: \"premium\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-Out with Redirection in Better Auth\nDESCRIPTION: Code sample demonstrating how to sign out a user with a redirect on success by passing fetchOptions to the signOut function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signOut({\n  fetchOptions: {\n    onSuccess: () => {\n      router.push(\"/login\"); // redirect to login page\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LinkedIn Sign-In with Better Auth Client (TypeScript)\nDESCRIPTION: This snippet shows how to implement the LinkedIn sign-in functionality using the Better Auth client. It creates an auth client instance and defines an async function to handle the sign-in process with the LinkedIn provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/linkedin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"linkedin\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating authentication middleware for Nitro routes\nDESCRIPTION: Implementation of a middleware function to protect routes that require authentication. This checks for a valid session and adds it to the event context if authenticated, otherwise returns a 401 error.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventHandler, H3Event } from \"h3\";\nimport { fromNodeHeaders } from \"better-auth/node\";\n\n/**\n * Middleware used to require authentication for a route.\n *\n * Can be extended to check for specific roles or permissions.\n */\nexport const requireAuth: EventHandler = async (event: H3Event) => {\n  const headers = event.headers;\n\n  const session = await auth.api.getSession({\n    headers: headers,\n  });\n  if (!session)\n    throw createError({\n      statusCode: 401,\n      statusMessage: \"Unauthorized\",\n    });\n  // You can save the session to the event context for later use\n  event.context.auth = session;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Table and Column Names in Better Auth\nDESCRIPTION: Configuration to customize the table names and column names for the core schema in Better Auth. This allows mapping the internal field names to custom database column names.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  user: {\n    modelName: \"users\",\n    fields: {\n      name: \"full_name\",\n      email: \"email_address\",\n    },\n  },\n  session: {\n    modelName: \"user_sessions\",\n    fields: {\n      userId: \"user_id\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Set User Password with Better Auth API\nDESCRIPTION: This snippet shows how to set a password for a user who initially registered via OAuth or other passwordless methods. This function is intended to be called from the server for security reasons, and typically part of a 'forgot password' flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.api.setPassword({\n    body: { newPassword: \"password\" },\n    headers: //\n});\n```\n\n----------------------------------------\n\nTITLE: Preload Passkeys for Conditional UI (React)\nDESCRIPTION: This snippet shows how to preload the user's passkeys when a React component mounts, using the `authClient.signIn.passkey` method with the `autoFill` option set to `true`. It also includes a check to see if the browser supports conditional UI before making the call to prevent unnecessary calls.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n   if (!PublicKeyCredential.isConditionalMediationAvailable ||\n       !PublicKeyCredential.isConditionalMediationAvailable()) {\n     return;\n   }\n\n  void authClient.signIn.passkey({ autoFill: true })\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Slack OAuth SignIn Implementation\nDESCRIPTION: This snippet shows how to use the authentication client to sign in with Slack, specifying the provider ID and callback URL for redirection after authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.signIn.oauth2({\n  providerId: \"slack\",\n  callbackURL: \"/dashboard\", // the path to redirect to after the user is authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Sending OTP for Authentication\nDESCRIPTION: Sends a one-time password to the user's email address. The type parameter specifies the purpose of the OTP (sign-in, email verification, or password reset).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.emailOtp.sendVerificationOtp({\n    email: \"user-email@email.com\",\n    type: \"sign-in\" // or \"email-verification\", \"forget-password\"\n})\n```\n\n----------------------------------------\n\nTITLE: Add Organization Plugin to Auth Config (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to integrate the organization plugin into your Better Auth configuration. It involves importing the `organization` function from `better-auth/plugins` and including it in the `plugins` array within the `betterAuth` configuration object. This enables organization management features within your authentication system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        organization() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset in Better Auth\nDESCRIPTION: Configuration snippet to enable password reset functionality by implementing a sendResetPassword function that sends a reset link to the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { sendEmail } from \"./email\"; // your email sending function\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    sendResetPassword: async ({user, url, token}, request) => {\n      await sendEmail({\n        to: user.email,\n        subject: \"Reset your password\",\n        text: `Click the link to reset your password: ${url}`,\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Client Registration for OIDC Provider in TypeScript\nDESCRIPTION: This code shows how to enable dynamic client registration for the OIDC provider by setting the allowDynamicClientRegistration option to true during plugin initialization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = betterAuth({\n    plugins: [oidcProvider({\n        allowDynamicClientRegistration: true,\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Sign-In with Better Auth Client\nDESCRIPTION: Example of how to use the Better Auth client to implement sign-in functionality with Zoom. It demonstrates creating an auth client and using the signIn.social function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/zoom.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n  const data = await authClient.signIn.social({\n    provider: \"zoom\"\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default API Key Permissions (Static)\nDESCRIPTION: This snippet demonstrates how to configure default permissions that will be applied to all newly created API keys using a static configuration. It defines permissions for 'files' and 'users' resources.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      permissions: {\n        defaultPermissions: {\n          files: [\"read\"],\n          users: [\"read\"]\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Settings with Better Auth in Typescript\nDESCRIPTION: This snippet shows how to configure advanced settings for the `better-auth` library, including IP address tracking, secure cookies, CSRF check, cross-subdomain cookies, custom cookie attributes, default cookie attributes, cookie prefix, and custom ID generation.  The configuration allows for fine-grained control over authentication and security features.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tadvanced: {\n\t\tipAddress: {\n\t\t\tipAddressHeaders: [\"x-client-ip\", \"x-forwarded-for\"],\n\t\t\tdisableIpTracking: false\n\t\t},\n\t\tuseSecureCookies: true,\n\t\tdisableCSRFCheck: false,\n\t\tcrossSubDomainCookies: {\n\t\t\tenabled: true,\n\t\t\tadditionalCookies: [\"custom_cookie\"],\n\t\t\tdomain: \"example.com\"\n\t\t},\n\t\tcookies: {\n\t\t\tsession_token: {\n\t\t\t\tname: \"custom_session_token\",\n\t\t\t\tattributes: {\n\t\t\t\t\thttpOnly: true,\n\t\t\t\t\tsecure: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdefaultCookieAttributes: {\n\t\t\thttpOnly: true,\n\t\t\tsecure: true\n\t\t},\n\t\tcookiePrefix: \"myapp\",\n\t\tdatabase: {\n\t\t\t// If your DB is using auto-incrementing IDs, set this to true.\n\t\t\tuseNumberId: false,\n\t\t\t// Use your own custom id generator, or disable generating IDs as a whole.\n\t\t\tgenerateId: (((options: {\n\t\t\t\tmodel: LiteralUnion<Models, string>;\n\t\t\t\tsize?: number;\n\t\t\t}) => {\n\t\t\t\treturn \"my-super-unique-id\";\n\t\t\t})) | false,\n\t\t\tdefaultFindManyLimit: 100,\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with basePath (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize Better Auth with a custom base path. The `basePath` option specifies the path where the Better Auth routes are mounted.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tbasePath: \"/api/auth\",\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GitLab Sign-in with better-auth Client\nDESCRIPTION: This code demonstrates how to implement the GitLab sign-in functionality on the client side. It creates an auth client instance and provides a function to initiate the GitLab authentication flow by specifying 'gitlab' as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/gitlab.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"gitlab\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reddit Social Sign-In with better-auth Client\nDESCRIPTION: Creates a function to handle Reddit authentication using the better-auth client. This code initializes the auth client and defines a sign-in function that uses Reddit as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/reddit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient = createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"reddit\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Define Static Subscription Plans\nDESCRIPTION: This example demonstrates defining subscription plans statically. It shows how to define the plans array, with the name, priceId, annualDiscountPriceId, limits, and freeTrial properties.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Static plans\nsubscription: {\n    enabled: true,\n    plans: [\n        {\n            name: \"basic\", // the name of the plan, it'll be automatically lower cased when stored in the database\n            priceId: \"price_1234567890\", // the price id from stripe\n            annualDiscountPriceId: \"price_1234567890\", // (optional) the price id for annual billing with a discount\n            limits: {\n                projects: 5,\n                storage: 10\n            }\n        },\n        {\n            name: \"pro\",\n            priceId: \"price_0987654321\",\n            limits: {\n                projects: 20,\n                storage: 50\n            },\n            freeTrial: {\n                days: 14,\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In with Google ID Token in Better Auth (TypeScript)\nDESCRIPTION: This snippet shows how to sign in with Google using an ID Token in Better Auth. It's useful when you have the Google ID Token on the client-side and want to use it for server-side authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/google.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await authClient.signIn.social({\n    provider: \"google\",\n    idToken: {\n        token: // Google ID Token,\n        accessToken: // Google Access Token\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Email and Password Authentication in Better Auth\nDESCRIPTION: Configuration snippet to enable email and password authentication by setting the emailAndPassword.enabled option to true in the auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  emailAndPassword: { // [!code highlight]\n    enabled: true, // [!code highlight]\n  }, // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Teams in the Server Plugin\nDESCRIPTION: This snippet demonstrates how to enable the teams feature within the Better Auth organization plugin on the server. It configures the `organization` plugin with the `teams` option set to `enabled: true`. Optional parameters like `maximumTeams` and `allowRemovingAllTeams` can also be configured.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        organization({\n            teams: {\n                enabled: true,\n                maximumTeams: 10, // Optional: limit teams per organization\n                allowRemovingAllTeams: false // Optional: prevent removing the last team\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-In on Client Side\nDESCRIPTION: Creates a sign-in function that uses the better-auth client to initiate the OAuth flow with Twitch. The function calls authClient.signIn.social with Twitch as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/twitch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"twitch\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Provider in better-auth\nDESCRIPTION: This snippet demonstrates how to set up the TikTok authentication provider in your auth configuration. It requires environment variables for the TikTok client ID, client secret, and client key which should be obtained from the TikTok Developer Portal.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/tiktok.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        tiktok: { // [!code highlight]\n            clientId: process.env.TIKTOK_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.TIKTOK_CLIENT_SECRET as string, // [!code highlight]\n            clientKey: process.env.TIKTOK_CLIENT_KEY as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Sign In with Passkey\nDESCRIPTION: This snippet demonstrates how to sign in a user with a passkey using the `passkeySignIn` method. This will prompt the user to sign in with their passkey.  The `callbackURL` can be set if redirection is required after the user is signed in. If `autoFill` is set to true, the browser autofill feature will attempt to preselect the passkey.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await authClient.signIn.passkey();\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-Out in Better Auth\nDESCRIPTION: Code sample demonstrating how to sign out a user using the signOut function from the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signOut();\n```\n\n----------------------------------------\n\nTITLE: Requiring Email Verification in Better Auth\nDESCRIPTION: Configuration snippet to require email verification before allowing users to log in by setting requireEmailVerification to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  emailAndPassword: {\n    requireEmailVerification: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Spotify Sign-In with Better Auth Client (TypeScript)\nDESCRIPTION: This code snippet shows how to use the Better Auth client to implement Spotify sign-in functionality. It creates an auth client instance and defines a function to initiate the Spotify authentication process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/spotify.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"spotify\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cookie Caching for Sessions in Better Auth\nDESCRIPTION: This snippet shows how to enable cookie caching for sessions to improve performance. It configures the cache to be valid for 5 minutes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"l\n\nexport const auth = betterAuth({\n    session: {\n        cookieCache: {\n            enabled: true,\n            maxAge: 5 * 60 // Cache duration in seconds\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Information\nDESCRIPTION: This snippet illustrates how to update organization information using `authClient.organization.update`.  It requires a `data` object containing the fields to update (e.g., name, logo, metadata, slug) and optionally an `organizationId` which defaults to the active organization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait authClient.organization.update({\n  data: {\n    name: \"updated-name\",\n    logo: \"new-logo.url\",\n    metadata: {\n      customerId: \"test\"\n    },\n    slug: \"updated-slug\"\n  },\n  organizationId: 'org-id' //defaults to the current active organization\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring App Scheme in Expo\nDESCRIPTION: Defines the app scheme in the Expo configuration file. This is necessary for handling deep links and redirects in the authentication flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"expo\": {\n        \"scheme\": \"myapp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Active Organization in React\nDESCRIPTION: This React snippet demonstrates how to use the `useActiveOrganization` hook to retrieve the active organization for a user. The hook re-evaluates whenever the active organization changes, providing the most up-to-date information. The returned `data` property contains the active organization object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\"\n\nfunction App(){\n    const { data: activeOrganization } = authClient.useActiveOrganization()\n    return (\n        <div>\n            {activeOrganization ? <p>{activeOrganization.name}</p> : null}\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Lifecycle Hooks - Typescript\nDESCRIPTION: This code demonstrates the usage of various subscription lifecycle hooks provided by the Stripe plugin.  These hooks allow developers to execute custom logic when a subscription is created, updated, canceled, or deleted.  Examples include sending welcome emails, logging updates, and sending cancellation emails using the `onSubscriptionComplete`, `onSubscriptionUpdate`, `onSubscriptionCancel`, and `onSubscriptionDeleted` options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription: {\n    // ... other options\n    onSubscriptionComplete: async ({ event, subscription, stripeSubscription, plan }) => {\n        // Called when a subscription is successfully created\n        await sendWelcomeEmail(subscription.referenceId, plan.name);\n    },\n    onSubscriptionUpdate: async ({ event, subscription }) => {\n        // Called when a subscription is updated\n        console.log(`Subscription ${subscription.id} updated`);\n    },\n    onSubscriptionCancel: async ({ event, subscription, stripeSubscription, cancellationDetails }) => {\n        // Called when a subscription is canceled\n        await sendCancellationEmail(subscription.referenceId);\n    },\n    onSubscriptionDeleted: async ({ event, subscription, stripeSubscription }) => {\n        // Called when a subscription is deleted\n        console.log(`Subscription ${subscription.id} deleted`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Hashing in Better Auth\nDESCRIPTION: Implementation example showing how to configure custom password hashing and verification functions in Better Auth. Uses TypeScript configuration to override default scrypt implementation with custom hashing logic.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { scrypt } from \"scrypt\"\n\nexport const auth = betterAuth({\n    //...rest of the options\n    emailAndPassword: {\n        password: {\n            hash: // your custom password hashing function\n            verify: // your custom password verification function\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Mapping with Drizzle Adapter\nDESCRIPTION: Example showing how to map custom schema names and enable plural form table names when using the Drizzle adapter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/drizzle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { db } from \"./drizzle\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { schema } from \"./schema\";\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"sqlite\", // or \"pg\" or \"mysql\"\n    schema: {\n      ...schema,\n      user: schema.users,\n    },\n    //if all of them are just using plural form, you can just pass the option below\n    usePlural: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email OTP Plugin in Server-Side Auth Configuration\nDESCRIPTION: Sets up the Email OTP plugin in the server-side authentication configuration. Requires implementing the sendVerificationOTP callback function that handles sending the OTP to the user's email address.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { emailOTP } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        emailOTP({ // [!code highlight]\n                async sendVerificationOTP({ email, otp, type}) { // [!code highlight]\n                    // Implement the sendVerificationOTP method to send the OTP to the user's email address // [!code highlight]\n                }, // [!code highlight]\n        }) // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Profile Mapping for OAuth Providers in Better Auth\nDESCRIPTION: Demonstrates how to use the mapProfileToUser function to customize how provider profile data is mapped to your application's user object. This is useful for populating additional fields or changing the default mapping behavior.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/oauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  // Other configurations...\n  socialProviders: {\n    google: {\n      clientId: \"YOUR_GOOGLE_CLIENT_ID\",\n      clientSecret: \"YOUR_GOOGLE_CLIENT_SECRET\",\n      mapProfileToUser: (profile) => {\n        return {\n          firstName: profile.given_name,\n          lastName: profile.family_name,\n        };\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Signing In with Email OTP\nDESCRIPTION: Authenticates a user using the provided email and OTP. If the user doesn't exist and disableSignUp isn't set to true, a new user will be automatically registered.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signIn.emailOtp({\n    email: \"user-email@email.com\",\n    otp: \"123456\"\n})\n```\n\n----------------------------------------\n\nTITLE: Enforcing Email Domain Restriction with Before Hook in TypeScript\nDESCRIPTION: This example demonstrates how to create a before hook that ensures users can only sign up with email addresses from a specific domain (@example.com). It throws an APIError with a custom message if the validation fails.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { createAuthMiddleware, APIError } from \"better-auth/api\";\n\nexport const auth = betterAuth({\n    hooks: {\n        before: createAuthMiddleware(async (ctx) => {\n            if (ctx.path !== \"/sign-up/email\") {\n                return;\n            }\n            if (!ctx.body?.email.endsWith(\"@example.com\")) {\n                throw new APIError(\"BAD_REQUEST\", {\n                    message: \"Email must end with @example.com\",\n                });\n            }\n        }),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Two-Factor Authentication Issuer in TypeScript\nDESCRIPTION: This code snippet shows how to set a custom issuer name for the two-factor authentication application. It allows you to specify your application name that will be displayed in authenticator apps like Google Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntwoFactor({\n    issuer: \"my-app-name\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Hooks with Better Auth in Typescript\nDESCRIPTION: This example demonstrates how to configure database lifecycle hooks for user creation and update operations in the `better-auth` library. It shows how to define `before` and `after` hooks to modify user data or perform actions before and after database operations, such as adding a custom field during user creation or updating the `updatedAt` field before updating user data. These hooks offer customization points for database interactions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tdatabaseHooks: {\n\t\tuser: {\n\t\t\tcreate: {\n\t\t\t\tbefore: async (user) => {\n\t\t\t\t\t// Modify user data before creation\n\t\t\t\t\treturn { data: { ...user, customField: \"value\" } };\n\t\t\t\t},\n\t\t\t\tafter: async (user) => {\n\t\t\t\t\t// Perform actions after user creation\n\t\t\t\t}\n\t\t\t},\n\t\t\tupdate: {\n\t\t\t\tbefore: async (userData) => {\n\t\t\t\t\t// Modify user data before update\n\t\t\t\t\treturn { data: { ...userData, updatedAt: new Date() } };\n\t\t\t\t},\n\t\t\t\tafter: async (user) => {\n\t\t\t\t\t// Perform actions after user update\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsession: {\n\t\t\t// Session hooks\n\t\t},\n\t\taccount: {\n\t\t\t// Account hooks\n\t\t},\n\t\tverification: {\n\t\t\t// Verification hooks\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Custom and Default Permissions (TypeScript)\nDESCRIPTION: This code shows how to extend existing roles with custom permissions by merging default statements and roles with new definitions. It imports `defaultStatements` and `adminAc` from `better-auth/plugins/admin/access` and combines them with custom project permissions, ensuring that existing permissions are not overwritten when creating custom roles.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\nimport { defaultStatements, adminAc } from \"better-auth/plugins/admin/access\";\n\nconst statement = {\n    ...defaultStatements, // [!code highlight]\n    project: [\"create\", \"share\", \"update\", \"delete\"],\n} as const;\n\nconst ac = createAccessControl(statement);\n\nconst admin = ac.newRole({\n    project: [\"create\", \"update\"],\n    ...adminAc.statements, // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth in a Next.js React Server Component\nDESCRIPTION: This example demonstrates how to authenticate in a React Server Component using Better Auth. It fetches the session and conditionally renders content based on authentication status.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\"\nimport { headers } from \"next/headers\"\n\nexport async function ServerComponent() {\n    const session = await auth.api.getSession({\n        headers: await headers()\n    })\n    if(!session) {\n        return <div>Not authenticated</div>\n    }\n    return (\n        <div>\n            <h1>Welcome {session.user.name}</h1>\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In with Apple (ID Token)\nDESCRIPTION: Illustrates how to sign in with Apple using an ID token obtained on the client-side. The `signIn.social` function is used, passing an `idToken` object containing the `token` (Apple ID Token), `nonce` (optional), and `accessToken` (optional). Providing an ID token bypasses the redirection flow and directly signs in the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/apple.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.social({\n    provider: \"apple\",\n    idToken: {\n        token: // Apple ID Token,\n        nonce: // Nonce (optional)\n        accessToken: // Access Token (optional)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Admin Roles Configuration (TypeScript)\nDESCRIPTION: This code demonstrates configuring the `adminRoles` option within the admin plugin.  This option defines which roles are considered to have admin privileges.  Any role not included in this list, even if granted permissions, will not be treated as an administrator.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  adminRoles: [\"admin\", \"superadmin\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Magic Link Authentication in TypeScript\nDESCRIPTION: Server-side setup of magic link authentication plugin. Demonstrates how to initialize the betterAuth instance with the magic link plugin and configure the email sending functionality.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { magicLink } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        magicLink({\n            sendMagicLink: async ({ email, token, url }, request) => {\n                // send email to user\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating API Key Permissions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update the permissions of an existing API key using the `auth.api.updateApiKey` method. The `body` parameter includes the `keyId` and the new `permissions` object. The `headers` parameter is used for authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.updateApiKey({\n  body: {\n    keyId: existingApiKeyId,\n    permissions: {\n      files: [\"read\", \"write\", \"delete\"],\n      users: [\"read\", \"write\"]\n    }\n  },\n  headers: user_headers,\n});\n```\n\n----------------------------------------\n\nTITLE: Update User Information with Better Auth\nDESCRIPTION: This snippet demonstrates how to update user information, such as image and name, using the `updateUser` function provided by the Better Auth client. The function takes an object containing the fields to be updated.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.updateUser({\n    image: \"https://example.com/image.jpg\",\n    name: \"John Doe\",\n})\n```\n\n----------------------------------------\n\nTITLE: Update API Key (Server - TS)\nDESCRIPTION: Illustrates updating an API key on the server-side using the `auth.api.updateApiKey` method. The `keyId` is required.  Any other API Key properties can be updated by specifying their values within the body.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.updateApiKey({\n    body: {\n      keyId: \"your_api_key_id_here\",\n      name: \"New API Key Name\",\n      userId: \"userId\",\n      enabled: false,\n      remaining: 100,\n      refillAmount: null,\n      refillInterval: null,\n      metadata: null,\n      expiresIn: 60 * 60 * 24 * 7,\n      rateLimitEnabled: false,\n      rateLimitTimeWindow: 1000 * 60 * 60 * 24,\n      rateLimitMax: 100,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Sign In with SSO via Server API\nDESCRIPTION: This code snippet demonstrates how to use the server API to sign in with SSO using the organization slug.  The `auth.api.signInSSO` method is called with the organization slug and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await auth.api.signInSSO({\n body: {\n organizationSlug: \"example-org\",\n callbackURL: \"/dashboard\",\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Inviting a Member to an Organization\nDESCRIPTION: This snippet shows how to invite a user to an organization using `authClient.organization.inviteMember`. It requires the user's `email` and the desired `role` within the organization. Optionally, the `organizationId` can be specified, defaulting to the active organization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait authClient.organization.inviteMember({\n    email: \"test@email.com\",\n    role: \"admin\", //this can also be an array for multiple roles (e.g. [\"admin\", \"sale\"])\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Better Auth Client for React in Next.js\nDESCRIPTION: This code creates a client instance for Better Auth that can be used in React components. The client provides reactive authentication state management using nano-store and handles requests via better-fetch.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\" // make sure to import from better-auth/react\n\nexport const authClient =  createAuthClient({\n    //you can pass client configuration here\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Stripe Client Plugin\nDESCRIPTION: This code snippet shows how to configure the Stripe client plugin. It imports the `createAuthClient` and `stripeClient` and adds the `stripeClient` plugin to the Better Auth client configuration, enabling subscription management.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { stripeClient } from \"@better-auth/stripe/client\"\n\nexport const client = createAuthClient({\n    // ... your existing config\n    plugins: [\n        stripeClient({\n            subscription: true //if you want to enable subscription management\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Instagram OAuth SignIn Implementation\nDESCRIPTION: This snippet demonstrates how to implement the sign-in flow for Instagram authentication using the auth client, including specifying the provider ID and redirect path.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.signIn.oauth2({\n  providerId: \"instagram\",\n  callbackURL: \"/dashboard\", // the path to redirect to after the user is authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Access Control with Custom Permissions\nDESCRIPTION: This snippet demonstrates how to create an access control object with custom permissions for a `project` resource, allowing actions like `create`, `share`, `update`, and `delete`. It uses `createAccessControl` from `better-auth/plugins/access` and defines a `statement` object to map resources to their allowed actions. The `as const` assertion ensures proper type inference.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\n\n/**\n * make sure to use `as const` so typescript can infer the type correctly\n */\nconst statement = { // [!code highlight]\n    project: [\"create\", \"share\", \"update\", \"delete\"], // [!code highlight]\n} as const; // [!code highlight]\n\nconst ac = createAccessControl(statement); // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client in TypeScript\nDESCRIPTION: This TypeScript code creates a Better Auth client for use in React applications. It sets up the authClient with a base URL and exports signIn, signOut, and useSession functions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n    baseURL: process.env.BASE_URL! // Optional if the API base URL matches the frontend\n});\n\nexport const { signIn, signOut, useSession } = authClient;\n```\n\n----------------------------------------\n\nTITLE: Enabling Two-Factor Authentication\nDESCRIPTION: Implementation for enabling 2FA with password verification and optional issuer specification\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await authClient.twoFactor.enable({\n  password: \"password\", \n  issuer: \"my-app-name\", \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TikTok Sign-In with better-auth Client\nDESCRIPTION: This code shows how to implement the sign-in with TikTok functionality using the better-auth client. It initializes the auth client and defines a sign-in function that specifies 'tiktok' as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/tiktok.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"tiktok\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Storing Bearer Token in TypeScript\nDESCRIPTION: This code demonstrates how to obtain a Bearer token after a successful sign-in and store it securely in localStorage.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await authClient.signIn.email({\n    email: \"user@example.com\",\n    password: \"securepassword\"\n}, {\n  onSuccess: (ctx)=>{\n    const authToken = ctx.response.headers.get(\"set-auth-token\") // get the token from the response headers\n    // Store the token securely (e.g., in localStorage)\n    localStorage.setItem(\"bearer_token\", authToken);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Magic Link Token in TypeScript\nDESCRIPTION: Manual verification of magic link tokens. Demonstrates how to verify a magic link token when implementing custom verification flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/magic-link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.magicLink.verify({\n  query: {\n    token,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Subscription with Seats - Typescript\nDESCRIPTION: This code snippet demonstrates how to upgrade a subscription with a specified number of seats for team or organization plans using the Better Auth Stripe plugin. It uses the `client.subscription.upgrade` method with parameters for the plan, reference ID (organization ID), number of seats, success URL, and cancel URL. The `seats` parameter determines the quantity for the Stripe subscription item.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.subscription.upgrade({\n    plan: \"team\",\n    referenceId: \"org_123456\",\n    seats: 10, // 10 team members\n    successUrl: \"/org/billing/success\",\n    cancelUrl: \"/org/billing\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Account Linking (Typescript)\nDESCRIPTION: This code snippet shows how to enable account linking in Better Auth configuration. Setting `accountLinking.enabled` to `true` allows users to associate multiple authentication methods with a single account, provided the provider confirms the user's email as verified.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    account: {\n        accountLinking: {\n            enabled: true, \n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: List Users with Advanced Query - Typescript\nDESCRIPTION: This code snippet shows how an admin can list users using the `listUsers` method with advanced query parameters for filtering, sorting, and searching.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await authClient.admin.listUsers({\n    query: {\n        searchField: \"email\",\n        searchOperator: \"contains\",\n        searchValue: \"@example.com\",\n        limit: 10,\n        offset: 0,\n        sortBy: \"createdAt\",\n        sortDirection: \"desc\",\n        filterField: \"role\",\n        filterOperator: \"eq\",\n        filterValue: \"admin\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session Data in Hono Routes\nDESCRIPTION: This snippet shows how to access the user and session data stored in the Hono context within a route handler, including checking for authentication before providing access to resources.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/session\", async (c) => {\n\tconst session = c.get(\"session\")\n\tconst user = c.get(\"user\")\n\t\n\tif(!user) return c.body(null, 401);\n\n  \treturn c.json({\n\t  session,\n\t  user\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Elysia with Better Auth\nDESCRIPTION: Implementation of CORS configuration using @elysiajs/cors plugin alongside Better Auth. Sets up specific origin, methods, credentials, and allowed headers for cross-origin requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/elysia.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\nimport { cors } from \"@elysiajs/cors\";\n\nimport { auth } from \"./auth\";\n\nconst app = new Elysia()\n  .use(\n    cors({\n      origin: \"http://localhost:3001\",\n      methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n      credentials: true,\n      allowedHeaders: [\"Content-Type\", \"Authorization\"],\n    }),\n  )\n  .mount(auth.handler)\n  .listen(3000);\n\nconsole.log(\n  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Context with Before Hook in TypeScript\nDESCRIPTION: This example shows how to use a before hook to modify the request context before an endpoint is executed. It specifically adds a default name to the body of a sign-up request.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { createAuthMiddleware } from \"better-auth/api\";\n\nexport const auth = betterAuth({\n    hooks: {\n        before: createAuthMiddleware(async (ctx) => {\n            if (ctx.path === \"/sign-up/email\") {\n                return {\n                    context: {\n                        ...ctx,\n                        body: {\n                            ...ctx.body,\n                            name: \"John Doe\",\n                        },\n                    }\n                };\n            }\n        }),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Customize Customer Creation\nDESCRIPTION: This code shows how to customize the customer creation process.  It defines a callback function `onCustomerCreate` that allows manipulating the newly created Stripe customer after it's created, and `getCustomerCreateParams` to modify the creation parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstripe({\n    // ... other options\n    createCustomerOnSignUp: true,\n    onCustomerCreate: async ({ customer, stripeCustomer, user }, request) => {\n        // Do something with the newly created customer\n        console.log(`Customer ${customer.id} created for user ${user.id}`);\n    },\n    getCustomerCreateParams: async ({ user, session }, request) => {\n        // Customize the Stripe customer creation parameters\n        return {\n            metadata: {\n                referralSource: user.metadata?.referralSource\n            }\n        };\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Session Hook in Better Auth Client\nDESCRIPTION: This snippet shows how to access the current session reactively using the useSession hook provided by the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/client\"\n\nconst { data: session } = authClient.useSession()\n```\n\n----------------------------------------\n\nTITLE: Server-Side Session Handling with Better Auth in Next.js\nDESCRIPTION: This TypeScript code demonstrates how to handle server-side sessions using Better Auth in a Next.js server action. It uses the auth instance to get session data from request headers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nimport { auth } from \"~/server/auth\";\nimport { headers } from \"next/headers\";\n\nexport const protectedAction = async () => {\n    const session = await auth.api.getSession({\n        headers: await headers(),\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Set Active Organization (Client - TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to set the active organization on the client-side using the `authClient.organization.setActive` method. It shows setting the active organization using either the `organizationId` or `organizationSlug`.  One of the identifiers must be provided.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\";\n\n  await authClient.organization.setActive({\n    organizationId: \"organization-id\"\n  })\n\n  // you can also use organizationSlug instead of organizationId\n  await authClient.organization.setActive({\n    organizationSlug: \"organization-slug\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth Instance in Remix\nDESCRIPTION: Creates and exports the main auth instance with database configuration for Better Auth in a Remix application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/remix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    database: {\n        provider: \"postgres\", //change this to your database provider\n        url: process.env.DATABASE_URL, // path to your database or connection string\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Sign-In with IdToken in React Native\nDESCRIPTION: This snippet demonstrates how to use the authClient.signIn.social method for social sign-in with an ID token in a React Native application. It includes options for specifying the provider, ID token, and callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"react-native\";\n\nexport default function App() {\n    const handleLogin = async () => {\n        await authClient.signIn.social({\n            provider: \"google\", // only google, apple and facebook are supported for idToken sign-in\n            idToken: {\n                token: \"...\", // id token from provider\n                nonce: \"...\", // nonce from provider (optional)\n            }\n            callbackURL: \"/dashboard\" // this will be converted to a deep link (eg. `myapp://dashboard`) on native\n        })\n    };\n    return <Button title=\"Login with Google\" onPress={handleLogin} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Number Implementation\nDESCRIPTION: Client-side implementation for updating a user's phone number with verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst isVerified = await authClient.phoneNumber.verify({\n    phoneNumber: \"+1234567890\",\n    code: \"123456\",\n    updatePhoneNumber: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic OAuth Plugin in Auth Config\nDESCRIPTION: Adds the Generic OAuth plugin to the betterAuth configuration. This setup enables authentication with one or more OAuth providers by specifying their credentials and discovery URLs.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { genericOAuth } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [ \n        genericOAuth({ // [!code highlight]\n            config: [ // [!code highlight]\n                { // [!code highlight] \n                    providerId: \"provider-id\", // [!code highlight]\n                    clientId: \"test-client-id\", // [!code highlight]\n                    clientSecret: \"test-client-secret\", // [!code highlight]\n                    discoveryUrl: \"https://auth.example.com/.well-known/openid-configuration\", // [!code highlight]\n                    // ... other config options // [!code highlight]\n                }, // [!code highlight]\n                // Add more providers as needed // [!code highlight]\n            ] // [!code highlight]\n        }) // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: List Active Subscriptions\nDESCRIPTION: This code snippet shows how to retrieve a list of active subscriptions for a user using the `subscription.list` method on the client. The active subscription is then filtered.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: subscriptions } = await client.subscription.list();\n\n// get the active subscription\nconst activeSubscription = subscriptions.find(\n    sub => sub.status === \"active\" || sub.status === \"trialing\"\n);\n\n// Check subscription limits\nconst projectLimit = subscriptions?.limits?.projects || 0;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Output Data Transformation\nDESCRIPTION: Example of implementing a custom transformation for output data after it's retrieved from the database. This shows how to modify returned data before providing it to the application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncustomTransformOutput: ({ field, data }) => {\n  if (field === \"name\") {\n    return \"Bob\"; // Force the name to be \"Bob\"\n  }\n\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an API Route for Better Auth with Next.js App Router\nDESCRIPTION: This code sets up a route handler for authentication in Next.js App Router by mounting the Better Auth handler to an API route. The handler is accessible via GET and POST methods.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\";\nimport { toNextJsHandler } from \"better-auth/next-js\";\n\nexport const { GET, POST } = toNextJsHandler(auth.handler);\n```\n\n----------------------------------------\n\nTITLE: Installing Username Plugin on Server\nDESCRIPTION: Adding the username plugin to the Better Auth server configuration. This enables username functionality alongside the default email authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [ // [!code highlight]\n        username() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Unlink Account (Typescript)\nDESCRIPTION: This code shows how to unlink a user account using the `authClient.unlinkAccount` method. It accepts a `providerId` to identify the account to unlink. You can also specify an `accountId` to unlink a specific account.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.unlinkAccount({\n    providerId: \"google\"\n});\n\n// Unlink a specific account\nawait authClient.unlinkAccount({\n    providerId: \"google\",\n    accountId: \"123\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Consent in TypeScript\nDESCRIPTION: This snippet demonstrates how to handle the OAuth consent process using the oauth2.consent method. It shows accepting or denying consent for an authorization request.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await client.oauth2.consent({\n\taccept: true, // or false to deny\n});\n```\n\n----------------------------------------\n\nTITLE: Astro Locals Types - Typescript\nDESCRIPTION: This code snippet shows how to define types for Astro locals in the `env.d.ts` file. It declares a namespace `App` with an interface `Locals` that specifies the types for `user` and `session` properties, importing the necessary types from the `better-auth` package.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"../.astro/types.d.ts\" />\n\ndeclare namespace App {\n    // Note: 'import {} from \"\"' syntax does not work in .d.ts files.\n    interface Locals {\n        user: import(\"better-auth\").User | null;\n        session: import(\"better-auth\").Session | null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User (TypeScript)\nDESCRIPTION: This snippet demonstrates how to sign out a user using the `signOut` function from the Better Auth client. It provides an example of redirecting onSuccess using `fetchOptions`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signOut();\n```\n\n----------------------------------------\n\nTITLE: Sending OTP Verification Code\nDESCRIPTION: Client-side implementation for sending OTP verification code to a phone number.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.phoneNumber.sendOtp({\n    phoneNumber: \"+1234567890\"\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema - Typescript\nDESCRIPTION: This code snippet demonstrates how to customize the database schema used by the Stripe plugin. It allows mapping table names and field names to different values. For example, the subscription table can be mapped to `stripeSubscriptions`, and the `plan` field can be mapped to `planName`.  This provides flexibility in integrating with existing database structures.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstripe({\n    // ... other options\n    schema: {\n        subscription: {\n            modelName: \"stripeSubscriptions\", // map the subscription table to stripeSubscriptions\n            fields: {\n                plan: \"planName\" // map the plan field to planName\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropbox Sign-In with better-auth Client\nDESCRIPTION: Demonstrates how to implement the sign-in functionality using Dropbox as the authentication provider. Uses the createAuthClient function to initialize the auth client and then calls the signIn.social method with Dropbox as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/dropbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"dropbox\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Middleware with Better Auth and Hono\nDESCRIPTION: This code shows how to implement a middleware that extracts user session data from Better Auth and makes it available throughout the Hono application context for authenticated route handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { auth } from \"./auth\";\nimport { serve } from \"@hono/node-server\";\nimport { cors } from \"hono/cors\";\n \nconst app = new Hono<{\n\tVariables: {\n\t\tuser: typeof auth.$Infer.Session.user | null;\n\t\tsession: typeof auth.$Infer.Session.session | null\n\t}\n}>();\n\napp.use(\"*\", async (c, next) => {\n\tconst session = await auth.api.getSession({ headers: c.req.raw.headers });\n\n  \tif (!session) {\n    \tc.set(\"user\", null);\n    \tc.set(\"session\", null);\n    \treturn next();\n  \t}\n\n  \tc.set(\"user\", session.user);\n  \tc.set(\"session\", session.session);\n  \treturn next();\n});\n\napp.on([\"POST\", \"GET\"], \"/api/auth/*\", (c) => {\n\treturn auth.handler(c.req.raw);\n});\n\n\nserve(app);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Error Handling with Better Auth in Typescript\nDESCRIPTION: This snippet illustrates how to configure API error handling for the `better-auth` library. It demonstrates how to set options for throwing errors, defining a custom error handler, and specifying a URL to redirect to on error. This configuration facilitates custom error handling logic and redirection on authentication failures.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tonAPIError: {\n\t\tthrow: true,\n\t\tonError: (error, ctx) => {\n\t\t\t// Custom error handling\n\t\t\tconsole.error(\"Auth error:\", error);\n\t\t},\n\t\terrorURL: \"/auth/error\"\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Add Passkey (Default)\nDESCRIPTION: This snippet shows how to add a passkey to a user's account using the `addPasskey` method. The default behavior allows both platform and cross-platform passkeys. It prompts the user to register a passkey and then adds it to their account.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Default behavior allows both platform and cross-platform passkeys\nconst { data, error } = await authClient.passkey.addPasskey();\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth's useSession Hook in React TypeScript\nDESCRIPTION: This React component demonstrates how to use Better Auth's useSession hook to access session data in a client-side component.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSession } from \"~/lib/auth-client\";\n\nexport const Profile = () => {\n    const { data } = useSession();\n    return (\n        <div>\n            <pre>\n                {JSON.stringify(data, null, 2)}\n            </pre>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Auth Paths with Better Auth in Typescript\nDESCRIPTION: This example shows how to disable specific authentication paths in the `better-auth` library. It demonstrates how to use the `disabledPaths` option to prevent access to certain authentication routes, such as email sign-up or sign-in. This configuration allows for selective disabling of specific authentication methods.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tdisabledPaths: [\"/sign-up/email\", \"/sign-in/email\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom API Errors from Hooks in TypeScript\nDESCRIPTION: This example demonstrates how to throw custom API errors with specific status codes and messages using the APIError class. This provides a consistent way to handle errors and return appropriate responses.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthMiddleware, APIError } from \"better-auth/api\";\n\nconst hook = createAuthMiddleware(async (ctx) => {\n    throw new APIError(\"BAD_REQUEST\", {\n        message: \"Invalid request\",\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Phone Number Sign-In Implementation\nDESCRIPTION: Client-side implementation for signing in using phone number and password.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.phoneNumber({\n    phoneNumber: \"+123456789\",\n    password: \"password\",\n    rememberMe: true\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In with VK ID in Better Auth Client\nDESCRIPTION: This snippet demonstrates how to implement VK sign-in functionality in a client application using the Better Auth client. It creates an auth client instance and defines a function to initiate the social sign-in process with VK as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/vk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nconst authClient = createAuthClient();\n\nconst signIn = async () => {\n  const data = await authClient.signIn.social({\n    provider: \"vk\",\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors in TypeScript\nDESCRIPTION: This snippet shows how to handle errors when calling API endpoints. It demonstrates catching and handling APIError instances, which provide additional information about the error such as status codes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APIError } from \"better-auth/api\";\n\ntry {\n    await auth.api.signInEmail({\n        body: {\n            email: \"\",\n            password: \"\"\n        }\n    })\n} catch (error) {\n    if (error instanceof APIError) {\n        console.log(error.message, error.status)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Change User Password with Better Auth Client\nDESCRIPTION: This snippet demonstrates how to change a user's password using the `changePassword` function provided by the Better Auth client. It requires the new password and the current password, and optionally revokes other sessions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.changePassword({\n    newPassword: \"newPassword123\",\n    currentPassword: \"oldPassword123\",\n    revokeOtherSessions: true, // revoke all other sessions the user is signed into\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Two-Factor Authentication Plugin\nDESCRIPTION: Configuration setup for adding the two-factor authentication plugin to the auth system. Requires specifying the app name as issuer.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { twoFactor } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    // ... other config options\n    appName: \"My App\", \n    plugins: [\n        twoFactor()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Registering New OIDC Client in TypeScript\nDESCRIPTION: This code demonstrates how to register a new OIDC client using the oauth2.register method. It shows the process of creating a new application with a name and redirect URIs.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst application = await client.oauth2.register({\n    name: \"My Client\",\n    redirect_uris: [\"https://client.example.com/callback\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In Component with Better Auth in Remix\nDESCRIPTION: Creates a sign-in form component using Better Auth client with email and password fields, including success and error handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/remix.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Form } from \"@remix-run/react\"\nimport { useState } from \"react\"\nimport { authClient } from \"~/services/auth.client\"\n\nexport default function SignIn() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  const signIn = async () => {\n    await authClient.signIn.email(\n      {\n        email,\n        password,\n      },\n      {\n        onRequest: (ctx) => {\n          // show loading state\n        },\n        onSuccess: (ctx) => {\n          // redirect to home\n        },\n        onError: (ctx) => {\n          alert(ctx.error)\n        },\n      },\n    )\n  }\n\n  return (\n    <div>\n      <h2>\n        Sign In\n      </h2>\n      <Form onSubmit={signIn}>\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button\n          type=\"submit\"\n        >\n          Sign In\n        </button>\n      </Form>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with secondaryStorage (TypeScript)\nDESCRIPTION: This snippet shows how to initialize Better Auth with a secondary storage, in this case Redis, for storing session and rate limit data.  It imports the `redisStorage` helper function and configures it with a Redis URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { redisStorage } from \"better-auth/storage\";\n\nexport const auth = betterAuth({\n\tsecondaryStorage: redisStorage({\n\t\turl: \"redis://localhost:6379\"\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys with Custom Permissions\nDESCRIPTION: This snippet illustrates how to create API keys with custom permissions. It shows how to specify permissions for different resources when creating an API key, allowing fine-grained access control.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.createApiKey({\n  body: {\n    name: \"My API Key\",\n    permissions: {\n      files: [\"read\", \"write\"],\n      users: [\"read\"]\n    },\n    userId: \"userId\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Email Sign-In (TypeScript)\nDESCRIPTION: This snippet shows how to authenticate a user on the server-side using the `auth.api.signInEmail` method. It sends the user's email and password in the request body and retrieves the response. It is important to note that frameworks like Next.js may require additional plugins to handle cookies automatically.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\"; // path to your Better Auth server instance\n\nconst response = await auth.api.signInEmail({\n    body: {\n        email,\n        password\n    },\n    asResponse: true // returns a response object instead of data\n});\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests in React Native with Better Auth\nDESCRIPTION: This snippet demonstrates how to make authenticated requests to a server using Better Auth in a React Native app. It shows retrieving the session cookie from SecureStore and adding it to the request headers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\";\n\nconst makeAuthenticatedRequest = async () => {\n  const cookies = authClient.getCookie(); // [!code highlight]\n  const headers = {\n    \"Cookie\": cookies, // [!code highlight]\n  };\n  const response = await fetch(\"http://localhost:8081/api/secure-endpoint\", { headers });\n  const data = await response.json();\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Database for Username Plugin\nDESCRIPTION: Commands to run database migrations or generate schema for the username plugin. This adds the necessary fields and tables to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth and Calling API Endpoint in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Better Auth instance and call the getSession API endpoint on the server side. It shows the basic setup and usage of the auth object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { headers } from \"next/headers\";\n\nexport const auth = betterAuth({\n    //...\n})\n\n// calling get session on the server\nawait auth.api.getSession({\n    headers: headers() //some endpoint might require headers\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with account configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring account-related settings, including model name, field mappings, and account linking options like enabling linking, specifying trusted providers, and controlling email address requirements.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\taccount: {\n\t\tmodelName: \"accounts\",\n\t\tfields: {\n\t\t\tuserId: \"user_id\"\n\t\t},\n\t\taccountLinking: {\n\t\t\tenabled: true,\n\t\t\ttrustedProviders: [\"google\", \"github\", \"email-password\"],\n\t\t\tallowDifferentEmails: false\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Enable Change Email Feature in Better Auth\nDESCRIPTION: This code snippet shows how to enable the `changeEmail` feature in Better Auth's configuration. Setting `changeEmail.enabled` to `true` allows users to change their email addresses. This requires configuring the auth object during initialization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    user: {\n        changeEmail: {\n            enabled: true,\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: List API Keys (Client - TS)\nDESCRIPTION: Demonstrates how to list all API keys on the client-side using `authClient.apiKey.list`.  It returns an array of `ApiKey` objects.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: apiKeys, error } = await authClient.apiKey.list();\n```\n\n----------------------------------------\n\nTITLE: Updating a Member's Role\nDESCRIPTION: This snippet demonstrates how to update a member's role within an organization using `authClient.organization.updateMemberRole`. It requires the `memberId` and the new `role` (which can be a single role or an array of roles).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait authClient.organization.updateMemberRole({\n    memberId: \"member-id\",\n    role: \"admin\" // this can also be an array for multiple roles (e.g. [\"admin\", \"sale\"])\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client Instance\nDESCRIPTION: Initializes the Better Auth client for client-side authentication operations. Uses the better-auth/svelte package to create a configurable auth client instance.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/svelte-kit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/svelte\" // make sure to import from better-auth/svelte\n\nexport const authClient = createAuthClient({\n    // you can pass client configuration here\n})\n```\n\n----------------------------------------\n\nTITLE: Delete API Key (Client - TS)\nDESCRIPTION: Demonstrates deleting an API key on the client-side using the `authClient.apiKey.delete` method.  The `keyId` of the API Key to be deleted must be specified.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: result, error } = await authClient.apiKey.delete({\n  keyId: \"your_api_key_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Maximum Limit in Typescript\nDESCRIPTION: This code configures the maximum number of teams allowed per organization. It demonstrates both a fixed number and a dynamic limit based on the organization's plan, retrieved using an asynchronous function `getPlan`. The configuration resides within the `teams` object, setting the `enabled` property to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nteams: {\n  enabled: true,\n  maximumTeams: 10 // Fixed number\n  // OR\n  maximumTeams: async ({ organizationId, session }, request) => {\n    // Dynamic limit based on organization plan\n    const plan = await getPlan(organizationId)\n    return plan === 'pro' ? 20 : 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-Up with Phone Number\nDESCRIPTION: Server-side configuration for enabling sign-up functionality with phone number verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    plugins: [\n        phoneNumber({\n            sendOTP: ({ phoneNumber, code }, request) => {\n                // Implement sending OTP code via SMS\n            },\n            signUpOnVerification: {\n                getTempEmail: (phoneNumber) => {\n                    return `${phoneNumber}@my-site.com`\n                },\n                getTempName: (phoneNumber) => {\n                    return phoneNumber\n                }\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests with Bearer Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to make authenticated API calls using the configured auth client with Bearer token.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// This request is automatically authenticated\nconst { data } = await authClient.listSessions();\n```\n\n----------------------------------------\n\nTITLE: Enable Delete User Feature in Better Auth Configuration\nDESCRIPTION: This snippet demonstrates how to enable the `deleteUser` feature within Better Auth's configuration. By default, this feature is disabled, but setting `enabled: true` allows for the permanent deletion of user data from the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    //...other config\n    user: {\n        deleteUser: { // [!code highlight]\n            enabled: true // [!code highlight]\n        } // [!code highlight]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth Client with Expo SecureStore\nDESCRIPTION: This snippet demonstrates how to configure the Better Auth client for an Expo application using SecureStore as the storage mechanism for caching session data and cookies.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\nimport SecureStorage from \"expo-secure-store\";\n\nconst authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\",\n    storage: SecureStorage\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with user configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring user-related settings in Better Auth. It includes model name customization, field mappings, additional fields, change email configuration, and user deletion settings.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tuser: {\n\t\tmodelName: \"users\",\n\t\tfields: {\n\t\t\temail: \"emailAddress\",\n\t\t\tname: \"fullName\"\n\t\t},\n\t\tadditionalFields: {\n\t\t\tcustomField: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tnullable: true\n\t\t\t}\n\t\t},\n\t\tchangeEmail: {\n\t\t\tenabled: true,\n\t\t\tsendChangeEmailVerification: async ({ user, newEmail, url, token }) => {\n\t\t\t\t// Send change email verification\n\t\t\t}\n\t\t},\n\t\tdeleteUser: {\n\t\t\tenabled: true,\n\t\t\tsendDeleteAccountVerification: async ({ user, url, token }) => {\n\t\t\t\t// Send delete account verification\n\t\t\t},\n\t\t\tbeforeDelete: async (user) => {\n\t\t\t\t// Perform actions before user deletion\n\t\t\t},\n\t\t\tafterDelete: async (user) => {\n\t\t\t\t// Perform cleanup after user deletion\n\t\t\t}\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Global Bearer Token Setup in TypeScript\nDESCRIPTION: This snippet shows how to set up global token handling in the auth client, storing the token in localStorage upon successful requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        onSuccess: (ctx) => {\n            const authToken = ctx.response.headers.get(\"set-auth-token\") // get the token from the response headers\n            // Store the token securely (e.g., in localStorage)\n            if(authToken){\n              localStorage.setItem(\"bearer_token\", authToken);\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Add SSO Plugin to Server (auth.ts)\nDESCRIPTION: This code snippet demonstrates how to add the SSO plugin to the Better Auth server instance. It imports the `betterAuth` function and the `sso` plugin from the `better-auth` library. The `sso()` plugin is then included in the `plugins` array of the `betterAuth` configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { sso } from \"better-auth/plugins/sso\";\n\nconst auth = betterAuth({\n plugins: [ // [!code highlight]\n sso() // [!code highlight]\n ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth Project\nDESCRIPTION: Command to initialize Better Auth in a project, setting up necessary configurations and dependencies. Supports various frameworks, plugins, and database options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Inviting Member to a Team using Auth Client in Typescript\nDESCRIPTION: This code snippet demonstrates how to invite a member to an organization and specify a team to which they should be added. It uses the `authClient.organization.inviteMember` method, passing in the email, role, and `teamId` of the user being invited. The invited member will be added to the designated team upon accepting the invitation.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.organization.inviteMember({\n    email: \"user@example.com\",\n    role: \"member\",\n    teamId: \"team-id\"\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Sign-In After Sign-Up (TypeScript)\nDESCRIPTION: This snippet illustrates how to disable the default behavior of automatically signing in a user after a successful sign-up. By setting the `autoSignIn` property to `false` within the `emailAndPassword` configuration, you can prevent automatic sign-in and require the user to manually sign in instead.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    emailAndPassword: {\n    \tenabled: true,\n    \tautoSignIn: false //defaults to true // [!code highlight]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Canceling an Invitation\nDESCRIPTION: This snippet demonstrates how to cancel an invitation using `authClient.organization.cancelInvitation`. It requires the `invitationId` of the invitation to cancel.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n//cancel invitation\nawait authClient.organization.cancelInvitation({\n    invitationId: \"invitation-id\"\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing OIDC Metadata in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the OIDC metadata by providing a configuration object during the initialization of the OIDC provider plugin. It allows setting custom endpoints and other metadata.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { oidcProvider } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [oidcProvider({\n        metadata: {\n            issuer: \"https://your-domain.com\",\n            authorization_endpoint: \"/custom/oauth2/authorize\",\n            token_endpoint: \"/custom/oauth2/token\",\n            // ...other custom metadata\n        }\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Up Component with Better Auth in Remix\nDESCRIPTION: Creates a sign-up form component using Better Auth client with email, name, and password fields, including success and error handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/remix.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Form } from \"@remix-run/react\"\nimport { useState } from \"react\"\nimport { authClient } from \"~/lib/auth.client\"\n\nexport default function SignUp() {\n  const [email, setEmail] = useState(\"\")\n  const [name, setName] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  const signUp = async () => {\n    await authClient.signUp.email(\n      {\n        email,\n        password,\n        name,\n      },\n      {\n        onRequest: (ctx) => {\n          // show loading state\n        },\n        onSuccess: (ctx) => {\n          // redirect to home\n        },\n        onError: (ctx) => {\n          alert(ctx.error)\n        },\n      },\n    )\n  }\n\n  return (\n    <div>\n      <h2>\n        Sign Up\n      </h2>\n      <Form\n        onSubmit={signUp}\n      >\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Name\"\n        />\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Email\"\n        />\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\"\n        />\n        <button\n          type=\"submit\"\n        >\n          Sign Up\n        </button>\n      </Form>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Better Auth in Express.js\nDESCRIPTION: This snippet shows how to configure CORS (Cross-Origin Resource Sharing) when integrating Better Auth with Express.js. It uses the cors middleware to set up allowed origins, methods, and credentials.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/express.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport cors from \"cors\"; // Import the CORS middleware\nimport { toNodeHandler, fromNodeHeaders } from \"better-auth/node\";\nimport { auth } from \"./auth\";\n\nconst app = express();\nconst port = 3005;\n\n// Configure CORS middleware\napp.use(\n  cors({\n    origin: \"http://your-frontend-domain.com\", // Replace with your frontend's origin\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], // Specify allowed HTTP methods\n    credentials: true, // Allow credentials (cookies, authorization headers, etc.)\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth handler in Nitro routes\nDESCRIPTION: Creating a catch-all route handler that forwards requests to the Better Auth handler. This handles all authentication-related API endpoints under the /api/auth/ path.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  return auth.handler(toWebRequest(event));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Email OTP Client Plugin to Frontend Configuration\nDESCRIPTION: Configures the client-side Email OTP plugin for the authentication client. This enables the frontend to interact with the Email OTP authentication features.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { emailOTPClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [\n        emailOTPClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions on the Client from Server\nDESCRIPTION: This code snippet demonstrates how to check permissions on the client from the server using the `authClient.organization.hasPermission` function. It checks if the user has the `project:create` permission. It also shows an example of checking multiple permissions at once.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst canCreateProject = await authClient.organization.hasPermission({\n    permissions: {\n        project: [\"create\"]\n    }\n})\n\n// You can also check multiple resource permissions at the same time\nconst canCreateProjectAndCreateSale = await authClient.organization.hasPermission({\n    permissions: {\n        project: [\"create\"],\n        sale: [\"create\"]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks in Better Auth Server Plugin\nDESCRIPTION: Demonstrates how to define before and after hooks in a Better Auth server plugin. Hooks run code before or after an action is performed based on custom matchers and handlers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {  createAuthMiddleware } from \"better-auth/plugins\";\n\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        hooks: {\n            before: [{\n                    matcher: (context)=>{\n                        return context.headers.get(\"x-my-header\") === \"my-value\"\n                    },\n                    handler: createAuthMiddleware(async(ctx)=>{\n                        //do something before the request\n                        return  {\n                            context: ctx // if you want to modify the context\n                        }\n                    })\n                }],\n            after: [{\n                matcher: (context)=>{\n                    return context.path === \"/sign-up/email\"\n                },\n                handler: async(ctx)=>{\n                    return ctx.json({\n                        message: \"Hello World\"\n                    }) // if you want to modify the response\n                }\n            }]\n        }\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Role Permissions on the Client\nDESCRIPTION: This snippet shows how to check role permissions on the client using the `authClient.organization.checkRolePermission` function. It checks if a user with the `admin` role has the `organization:delete` permission. The second example checks multiple resource permissions at the same time.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst canCreateProject = authClient.organization.checkRolePermission({\n\tpermissions: {\n\t\torganization: [\"delete\"],\n\t},\n\trole: \"admin\",\n});\n\n// You can also check multiple resource permissions at the same time\nconst canCreateProjectAndCreateSale = authClient.organization.checkRolePermission({\n\tpermissions: {\n\t\torganization: [\"delete\"],\n    member: [\"delete\"]\n\t},\n\trole: \"admin\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with session configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring session-related settings in Better Auth, including model name, field mappings, expiration time, update age, additional fields, database storage options, and cookie cache settings.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tsession: {\n\t\tmodelName: \"sessions\",\n\t\tfields: {\n\t\t\tuserId: \"user_id\"\n\t\t},\n\t\texpiresIn: 604800, // 7 days\n\t\tupdateAge: 86400, // 1 day\n\t\tdisableSessionRefresh: true, // Disable session refresh so that the session is not updated regardless of the `updateAge` option. (default: `false`)\n\t\tadditionalFields: { // Additional fields for the session table\n\t\t\tcustomField: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tnullable: true\n\t\t\t}\n\t\t},\n\t\tstoreSessionInDatabase: true, // Store session in database when secondary storage is provided (default: `false`)\n\t\tpreserveSessionInDatabase: false, // Preserve session records in database when deleted from secondary storage (default: `false`)\n\t\tcookieCache: {\n\t\t\tenabled: true, // Enable caching session in cookie (default: `false`)\t\n\t\t\tmaxAge: 300 // 5 minutes\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Permissions (TypeScript)\nDESCRIPTION: This snippet illustrates how to create roles (e.g., 'user', 'admin', 'myCustomRole') using the access controller (`ac`) and assign specific permissions to each role based on the defined statement. It utilizes the `newRole` method of the access controller to define the actions a role can perform on specific resources.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\n\nconst statement = {\n    project: [\"create\", \"share\", \"update\", \"delete\"],\n} as const;\n\nconst ac = createAccessControl(statement);\n\nconst user = ac.newRole({ // [!code highlight]\n    project: [\"create\"], // [!code highlight]\n}); // [!code highlight]\n\nconst admin = ac.newRole({ // [!code highlight]\n    project: [\"create\", \"update\"], // [!code highlight]\n}); // [!code highlight]\n\nconst myCustomRole = ac.newRole({ // [!code highlight]\n    project: [\"create\", \"update\", \"delete\"], // [!code highlight]\n    user: [\"ban\"], // [!code highlight]\n}); // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Macro for Session Management\nDESCRIPTION: Advanced setup using Elysia macro pattern to handle authentication and session management. Creates a middleware that provides user and session information to routes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/elysia.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\nimport { auth } from \"./auth\";\n\n// user middleware (compute user and session and pass to routes)\nconst betterAuth = new Elysia({ name: \"better-auth\" })\n  .mount(auth.handler)\n  .macro({\n    auth: {\n      async resolve({ error, request: { headers } }) {\n        const session = await auth.api.getSession({\n          headers,\n        });\n\n        if (!session) return error(401);\n\n        return {\n          user: session.user,\n          session: session.session,\n        };\n      },\n    },\n  });\n\nconst app = new Elysia()\n  .use(betterAuth)\n  .get(\"/user\", ({ user }) => user, {\n    auth: true,\n  })\n  .listen(3000);\n\nconsole.log(\n  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,\n);\n```\n\n----------------------------------------\n\nTITLE: Set Active Organization (Server - TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to set the active organization using the server-side API (`auth.api.setActiveOrganization`). It requires passing the request headers and a body containing either the `organizationId` or `organizationSlug`.  One of the identifiers must be provided and passed in the body of the request.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\";\n\n    await auth.api.setActiveOrganization({\n      headers: // pass the headers,\n      body: {\n        organizationSlug: \"organization-slug\"\n      }\n    })\n\n    // you can also use organizationId instead of organizationSlug\n    await auth.api.setActiveOrganization({\n      headers: // pass the headers,\n      body: {\n        organizationId: \"organization-id\"\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Email Sign In with Account Linking - Better Auth TypeScript\nDESCRIPTION: Example of signing in with email while linking an anonymous account\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await authClient.signIn.email({\n    email,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Interceptors in Better Auth Plugin\nDESCRIPTION: Shows how to implement an onRequest function that runs before each request. This can be used to modify requests, intercept them, or allow them to proceed normally.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = ()=> {\n    return  {\n        id: \"my-plugin\",\n        onRequest: async (request, context) => {\n            //do something\n        },\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Route Handler for Better Auth in Nuxt\nDESCRIPTION: This snippet shows how to create an API route handler for Better Auth in a Nuxt application. It defines an event handler that uses the auth configuration to handle incoming requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/utils/auth\"; // import your auth config\n\nexport default defineEventHandler((event) => {\n\treturn auth.handler(toWebRequest(event));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side One Tap Authentication in TypeScript\nDESCRIPTION: Initializes the client-side One Tap plugin with customizable options including client ID, auto-select behavior, and prompt settings. Demonstrates the complete client configuration with optional parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport { oneTapClient } from \"better-auth/client/plugins\";\n\nconst authClient = createAuthClient({\n  plugins: [\n    oneTapClient({\n      clientId: \"YOUR_CLIENT_ID\",\n      // Optional client configuration:\n      autoSelect: false,\n      cancelOnTapOutside: true,\n      context: \"signin\",\n      additionalOptions: {\n        // Any extra options for the Google initialize method\n      },\n      // Configure prompt behavior and exponential backoff:\n      promptOptions: {\n        baseDelay: 1000,   // Base delay in ms (default: 1000)\n        maxAttempts: 5     // Maximum number of attempts before triggering onPromptNotification (default: 5)\n      }\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Update API Key (Client - TS)\nDESCRIPTION: This code snippet shows how to update an API key on the client-side using `authClient.apiKey.update`.  The `keyId` is required and other properties such as `name` and `enabled` can be updated as needed.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: apiKey, error } = await authClient.apiKey.update({\n  keyId: \"your_api_key_id_here\",\n  name: \"New API Key Name\",\n  enabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Delete User with Token using Better Auth Client\nDESCRIPTION: This snippet demonstrates how to delete a user using the `deleteUser` method with a verification token. This is useful when a custom URL with the token has been sent to the user for verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.deleteUser({\n    token\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Session with Better Auth in Express.js\nDESCRIPTION: This snippet demonstrates how to retrieve a user's session using the Better Auth getSession method in an Express.js route. It uses the fromNodeHeaders helper function to convert Node.js request headers to the format expected by Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/express.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromNodeHeaders } from \"better-auth/node\";\nimport { auth } from \"./auth\"; // Your Better Auth instance\n\napp.get(\"/api/me\", async (req, res) => {\n \tconst session = await auth.api.getSession({\n      headers: fromNodeHeaders(req.headers),\n    });\n\treturn res.json(session);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification in Better Auth\nDESCRIPTION: Demonstrates how to set up email verification by implementing the sendVerificationEmail function. This function is triggered when email verification starts and sends a verification link to the user's email address.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from 'better-auth';\nimport { sendEmail } from './email'; // your email sending function\n\nexport const auth = betterAuth({\n    emailVerification: {\n        sendVerificationEmail: async ({ user, url, token }, request) => {\n            await sendEmail({\n                to: user.email,\n                subject: 'Verify your email address',\n                text: `Click the link to verify your email: ${url}`\n            })\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in TypeScript\nDESCRIPTION: Sets up the Discord authentication provider with client credentials using the better-auth library. Requires Discord client ID and secret from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/discord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({ \n    socialProviders: {\n        discord: {\n            clientId: process.env.DISCORD_CLIENT_ID as string,\n            clientSecret: process.env.DISCORD_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom API Key Getter Function - TypeScript\nDESCRIPTION: This snippet demonstrates how to use a custom `apiKeyGetter` function to retrieve the API key from the request headers. This function allows for more complex logic when extracting the API key from the request context.  The function receives the `GenericEndpointContext` and should return the API key or `null` if not found.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      apiKeyGetter: (ctx) => {\n        const has = ctx.request.headers.has('x-api-key')\n        if(!has) return null\n        return ctx.request.headers.get('x-api-key')\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Provider in Better Auth\nDESCRIPTION: Sets up the Twitter social provider configuration with client ID and secret environment variables for Better Auth initialization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\" \n\nexport const auth = betterAuth({\n    socialProviders: {\n        twitter: {\n            clientId: process.env.TWITTER_CLIENT_ID as string,\n            clientSecret: process.env.TWITTER_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Add Organization Client Plugin (TypeScript)\nDESCRIPTION: This code snippet shows how to add the organization client plugin to your Better Auth client. It imports `createAuthClient` from `better-auth/client` and `organizationClient` from `better-auth/client/plugins`, then includes `organizationClient()` in the `plugins` array when creating the auth client. This exposes the `organization` namespace on the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { organizationClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [ // [!code highlight]\n        organizationClient() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Inferring Session Types in Better Auth Client\nDESCRIPTION: This snippet demonstrates how to infer the Session type from the Better Auth client. It creates an auth client and exports the inferred Session type, which includes both session and user properties.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\n\nconst authClient = createAuthClient()\n\nexport type Session = typeof authClient.$Infer.Session\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Database Connection for Better Auth\nDESCRIPTION: Connect Better Auth to your PostgreSQL database using the DATABASE_URL from your Supabase project.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth in a Next.js Server Action\nDESCRIPTION: This example shows how to get the session information in a Next.js server action. It imports the auth instance and next/headers to authenticate server-side operations.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\"\nimport { headers } from \"next/headers\"\n\nconst someAuthenticatedAction = async () => {\n    \"use server\";\n    const session = await auth.api.getSession({\n        headers: await headers()\n    })\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth API Route Handler in Remix\nDESCRIPTION: Sets up the API route handler for Better Auth authentication endpoints in Remix, handling both GET and POST requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/remix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '~/lib/auth.server' // Adjust the path as necessary\nimport type { LoaderFunctionArgs, ActionFunctionArgs } from \"@remix-run/node\"\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n    return auth.handler(request)\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n    return auth.handler(request)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Private Key Encryption in JWT Plugin Configuration\nDESCRIPTION: This snippet shows how to disable private key encryption in the JWT plugin configuration. It sets the disablePrivateKeyEncryption option to true, though this is not recommended for security reasons.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\njwt({\n  jwks: {\n    disablePrivateKeyEncryption: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Roles to the Server Plugin\nDESCRIPTION: This snippet shows how to configure the `betterAuth` server plugin with the defined access control (`ac`) and roles (`owner`, `admin`, `member`, `myCustomRole`).  It imports necessary functions and objects from `better-auth` and the local `@/auth/permissions` file. The `organization` plugin is configured with the `ac` and `roles`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\nimport { ac, owner, admin, member } from \"@/auth/permissions\"\n\nexport const auth = betterAuth({\n    plugins: [\n        organization({\n            ac,\n            roles: {\n                owner,\n                admin,\n                member,\n                myCustomRole\n            }\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Response Object from API Call in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the full Response object from an API call by using the asResponse option. This can be useful when you need more control over the response handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await auth.api.signInEmail({\n    body: {\n        email: \"\",\n        password: \"\"\n    },\n    asResponse: true\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Email Verification Errors in Better Auth\nDESCRIPTION: Code sample demonstrating how to handle email verification errors when a user tries to sign in without verifying their email.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.email(\n  {\n    email: \"email@example.com\",\n    password: \"password\",\n  },\n  {\n    onError: (ctx) => {\n      // Handle the error\n      if (ctx.error.status === 403) {\n        alert(\"Please verify your email address\");\n      }\n      //you can also show the original error message\n      alert(ctx.error.message);\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting with Better Auth in Typescript\nDESCRIPTION: This code snippet demonstrates how to configure rate limiting for the `better-auth` library. It shows how to enable rate limiting, set the time window and maximum number of requests, define custom rules for specific paths, configure storage, and specify the model name. The configuration allows for customization of rate limiting behavior based on different requirements.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\trateLimit: {\n\t\tenabled: true,\n\t\twindow: 10,\n\t\tmax: 100,\n\t\tcustomRules: {\n\t\t\t\"/example/path\": {\n\t\t\t\twindow: 10,\n\t\t\t\tmax: 100\n\t\t\t}\n\t\t},\n\t\tstorage: \"memory\",\n\t\tmodelName: \"rateLimit\"\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Send Email Verification for Email Change in Better Auth\nDESCRIPTION: This snippet demonstrates how to configure Better Auth to send an email verification when a user changes their email address. The `sendChangeEmailVerification` function should be implemented to send the email with a verification link.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    user: {\n        changeEmail: {\n            enabled: true,\n            sendChangeEmailVerification: async ({ user, newEmail, url, token }, request) => {\n                await sendEmail({\n                    to: user.email, // verification email must be sent to the current user email to approve the change\n                    subject: 'Approve email change',\n                    text: `Click the link to approve the change: ${url}`\n                })\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in Popup Component\nDESCRIPTION: React component example showing how to use the Better Auth client to display authentication state in the extension popup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { authClient } from \"./auth/auth-client\"\n\n\nfunction IndexPopup() {\n    const {data, isPending, error} = authClient.useSession();\n    if(isPending){\n        return <>Loading...</>\n    }\n    if(error){\n        return <>Error: {error.message}</>\n    }\n    if(data){\n        return <>Signed in as {data.user.name}</>\n    }\n}\n\nexport default IndexPopup;\n```\n\n----------------------------------------\n\nTITLE: Get API Key by ID (Server - TS)\nDESCRIPTION: This code snippet demonstrates how to retrieve an API key's information, excluding the key value itself, using its ID. The `auth.api.getApiKey` method is called with an object containing the `keyId` in the body.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = await auth.api.getApiKey({\n  body: {\n    keyId: \"your_api_key_id_here\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure SQLite Database\nDESCRIPTION: This code snippet configures Better Auth to use SQLite as the database.  It imports `betterAuth` and `Database` from `better-sqlite3` and creates a new `Database` instance pointing to a file.  This file will store user data.  The `database` option within `betterAuth` is assigned to this new Database instance.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport Database from \"better-sqlite3\";\n\nexport const auth = betterAuth({\n    database: new Database(\"./sqlite.db\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth API for Email Sign-In\nDESCRIPTION: This snippet demonstrates how to use the Better Auth API to sign in a user with email and password. The reactStartCookies plugin ensures that cookies are properly set using TanStack Start's cookie handling system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/tanstack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\"\n\nconst signIn = async () => {\n    await auth.api.signInEmail({\n        body: {\n            email: \"user@email.com\",\n            password: \"password\",\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the `auth.api.getSession` method in a Next.js application to retrieve session data. It imports the `auth` object and the `headers` function from `next/headers`, then awaits both and passes the headers object to the getSession method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\"; // path to your Better Auth server instance\nimport { headers } from \"next/headers\";\n\nconst session = await auth.api.getSession({\n    headers: await headers() // you need to pass the headers object.\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Phone Number Plugin Client Configuration\nDESCRIPTION: Client-side setup for the phone number authentication plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { phoneNumberClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [ \n        phoneNumberClient() \n    ] \n})\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands for Better Auth CLI\nDESCRIPTION: These commands show how to run database migrations or generate the schema using the Better Auth CLI. They are used to add necessary fields and tables to the database for the OIDC provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Global Rate Limit Error Handling\nDESCRIPTION: Implementation of global error handling for rate limit errors using authClient configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\n\nexport const authClient =  createAuthClient({\n    fetchOptions: {\n        onError: async (context) => {\n            const { response } = context;\n            if (response.status === 429) {\n                const retryAfter = response.headers.get(\"X-Retry-After\");\n                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);\n            }\n        },\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: List API Keys (Server - TS)\nDESCRIPTION: Illustrates retrieving a list of API keys on the server-side using the `auth.api.listApiKeys` method. It includes the `user_headers` for authentication and authorization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKeys = await auth.api.listApiKeys({\n  headers: user_headers,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Time Token Plugin Options (TypeScript)\nDESCRIPTION: This code snippet shows how to configure options for the One-Time Token plugin. It demonstrates setting the expiration time for tokens to 10 minutes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noneTimeToken({\n    expiresIn: 10 // 10 minutes\n})\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook in React\nDESCRIPTION: Example of using the useSession hook in a React component to access and display user session data, including handling loading states and errors.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n//make sure you're using the react client\nimport { createAuthClient } from \"better-auth/react\"\nconst { useSession } = createAuthClient() // [!code highlight]\n\nexport function User() {\n    const {\n        data: session,\n        isPending, //loading state\n        error, //error object \n        refetch //refetch the session\n    } = useSession()\n    return (\n        //...\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth Client in Expo\nDESCRIPTION: Sets up the Better Auth client in an Expo app. It configures the base URL, adds the Expo client plugin, and sets up secure storage for managing authentication state.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\nimport { expoClient } from \"@better-auth/expo/client\";\nimport * as SecureStore from \"expo-secure-store\";\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\", /* Base URL of your Better Auth backend. */\n    plugins: [\n        expoClient({\n            scheme: \"myapp\",\n            storagePrefix: \"myapp\",\n            storage: SecureStore,\n        })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Astro\nDESCRIPTION: This code snippet illustrates how to get session data in an Astro component. It imports the `auth` object and calls `auth.api.getSession` passing the request headers available through `Astro.request.headers`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\";\n\nconst session = await auth.api.getSession({\n\t    headers: Astro.request.headers,\n    });\n```\n\n----------------------------------------\n\nTITLE: Generating One-Time Token on Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to generate a one-time token on the client side using the authClient.oneTimeToken.generate method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.oneTimeToken.generate()\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration\nDESCRIPTION: This command runs the database migration using the Better Auth CLI. This adds the required tables and columns to your database for managing Stripe-related data, like customer and subscription information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Parameters in Better Auth\nDESCRIPTION: This snippet shows how to configure various JWT parameters such as issuer, audience, expiration time, and subject in the Better Auth JWT plugin configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\njwt({\n  jwt: {\n    issuer: \"https://example.com\",\n    audience: \"https://example.com\",\n    expirationTime: \"1h\",\n    getSubject: (session) => {\n      // by default the subject is the user id\n      return session.user.email\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Database\nDESCRIPTION: This code snippet configures Better Auth to use PostgreSQL as the database. It imports `betterAuth` and `Pool` from `pg` and creates a new `Pool` instance with connection options. The `database` option within `betterAuth` is assigned to this new Pool instance.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n    database: new Pool({\n        // connection options\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Roles to the Client Plugin\nDESCRIPTION: This snippet shows how to configure the `createAuthClient` with the defined access control (`ac`) and roles (`owner`, `admin`, `member`, `myCustomRole`). It imports necessary functions and objects from `better-auth/client` and the local `@/auth/permissions` file.  The `organizationClient` plugin is configured with the `ac` and `roles`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { organizationClient } from \"better-auth/client/plugins\"\nimport { ac, owner, admin, member, myCustomRole } from \"@/auth/permissions\"\n\nexport const authClient = createAuthClient({\n    plugins: [\n        organizationClient({\n            ac,\n            roles: {\n                owner,\n                admin,\n                member,\n                myCustomRole\n            }\n        })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a User's Username\nDESCRIPTION: Using the client to change a user's username after they're already registered. Requires the new username value.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst data = await authClient.updateUser({\n    username: \"new-username\"\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a basic server plugin\nDESCRIPTION: This code snippet demonstrates the creation of a basic Better Auth server plugin. It exports a function that returns an object conforming to the `BetterAuthPlugin` type, defining a unique ID for the plugin. This is the starting point for creating more complex server-side functionality.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport type { BetterAuthPlugin } from \"better-auth\";\n\nexport const birthdayPlugin = () =>\n  ({\n    id: \"birthdayPlugin\",\n  } satisfies BetterAuthPlugin);\n```\n\n----------------------------------------\n\nTITLE: Creating a Team\nDESCRIPTION: This snippet demonstrates how to create a new team within an organization using `authClient.organization.createTeam`.  It requires the team's `name` and optionally the `organizationId` (defaults to the active organization).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await authClient.organization.createTeam({\n    name: \"Development Team\",\n    organizationId: \"org-id\" // Optional: defaults to active organization\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrade to a Subscription Plan\nDESCRIPTION: This code snippet shows how to upgrade a user to a specific subscription plan using the `subscription.upgrade` method on the client.  It specifies the plan name, success URL, cancel URL, and an optional reference ID.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.subscription.upgrade({\n    plan: \"pro\",\n    successUrl: \"/dashboard\",\n    cancelUrl: \"/pricing\",\n    annual: true, // Optional: upgrade to an annual plan\n    referenceId: \"org_123\" // Optional: defaults to the current logged in user id\n    seats: 5 // Optional: for team plans\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Cookies with SameSite None in Better Auth\nDESCRIPTION: This snippet shows how to configure Better Auth to use SameSite=None and Secure=true for cookies, which is necessary when authentication needs to work across different domains.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = createAuth({\n  advanced: {\n    defaultCookieAttributes: {\n      sameSite: \"none\",\n      secure: true,\n      partitioned: true // New browser standards will mandate this for foreign cookies\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Invitation Email\nDESCRIPTION: This code snippet demonstrates how to set up the `sendInvitationEmail` function within the `organization` plugin of `betterAuth`.  This function is responsible for sending the invitation email to the user, and you should construct and include the invitation link containing the invitation ID.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\nimport { sendOrganizationInvitation } from \"./email\"\nexport const auth = betterAuth({\n\tplugins: [\n\t\torganization({\n\t\t\tasync sendInvitationEmail(data) {\n                const inviteLink = `https://example.com/accept-invitation/${data.id}`\n\t\t\t\tsendOrganizationInvitation({\n\t\t\t\t\temail: data.email,\n\t\t\t\t\t\tinvitedByUsername: data.inviter.user.name,\n\t\t\t\t\t\tinvitedByEmail: data.inviter.user.email,\n\t\t\t\t\t\tteamName: data.organization.name,\n\t\t\t\t\t\tinviteLink\n\t\t\t\t\t})\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Sign In with Apple (Redirect)\nDESCRIPTION: Demonstrates how to initiate the Sign In with Apple flow using the `signIn.social` function provided by the Better Auth client. The `provider` property must be set to `apple` to specify the Apple provider.  This method initiates a redirection-based authentication flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/apple.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"apple\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Add API Key Client Plugin (TS)\nDESCRIPTION: This code snippet illustrates how to integrate the API Key client plugin into a Better Auth client-side application. It imports the `createAuthClient` and `apiKeyClient` modules and includes the `apiKeyClient()` function in the `plugins` array during client initialization. This enables client-side API key management capabilities.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { apiKeyClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [ // [!code highlight]\n        apiKeyClient() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an API Route for Better Auth with Next.js Pages Router\nDESCRIPTION: This code configures a route handler for authentication in Next.js Pages Router. It uses toNodeHandler with bodyParser disabled to manage authentication requests manually.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toNodeHandler } from \"better-auth/node\"\nimport { auth } from \"@/lib/auth\"\n\n// Disallow body parsing, we will parse it manually\nexport const config = { api: { bodyParser: false } }\n\nexport default toNodeHandler(auth.handler)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Username Validator\nDESCRIPTION: Implementing a custom validation function for usernames. This example blocks the username 'admin' from being used.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [\n        username({\n            usernameValidator: (username) => {\n                if (username === \"admin\") {\n                    return false\n                }\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Provider with Redirect URI for OAuth Proxy\nDESCRIPTION: Example showing how to configure a social provider (GitHub) with the main production app's redirect URI. This configuration is required for each social provider that will use the OAuth proxy.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oauth-proxy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n   plugins: [\n       oAuthProxy(),\n   ], \n   socialProviders: {\n        github: {\n            clientId: \"your-client-id\",\n            clientSecret: \"your-client-secret\",\n            redirectURI: \"https://my-main-app.com/api/auth/callback/github\" // [!code highlight]\n        }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Prisma Adapter\nDESCRIPTION: This snippet configures Better Auth to use Prisma as an adapter.  It imports the necessary modules, initializes a Prisma client, and then passes the client to `prismaAdapter`.  The adapter and provider are then passed to the `betterAuth` configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\nexport const auth = betterAuth({\n    database: prismaAdapter(prisma, {\n        provider: \"sqlite\", // or \"mysql\", \"postgresql\", ...etc\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Magic Link Authentication in TypeScript\nDESCRIPTION: Client-side setup of magic link authentication plugin. Shows how to create an auth client instance with the magic link plugin enabled.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport { magicLinkClient } from \"better-auth/client/plugins\";\nconst authClient =  createAuthClient({\n    plugins: [\n        magicLinkClient()\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Coinbase OAuth Integration with Better Auth\nDESCRIPTION: This example shows how to configure the Generic OAuth plugin for Coinbase authentication, specifying the necessary client credentials, endpoints, and permission scopes for Coinbase's API.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { genericOAuth } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ... other config options\n  plugins: [\n    genericOAuth({\n      config: [\n        {\n          providerId: \"coinbase\",\n          clientId: process.env.COINBASE_CLIENT_ID as string,\n          clientSecret: process.env.COINBASE_CLIENT_SECRET as string,\n          authorizationUrl: \"https://www.coinbase.com/oauth/authorize\",\n          tokenUrl: \"https://api.coinbase.com/oauth/token\",\n          scopes: [\"wallet:user:read\"], // and more...\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Revoke All Sessions for a User - Typescript\nDESCRIPTION: This code snippet shows how to revoke all sessions for a user using the `revokeUserSessions` method. It requires the user ID as a parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst revokedSessions = await authClient.admin.revokeUserSessions({\n  userId: \"user_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Session in Better Auth Client\nDESCRIPTION: This snippet demonstrates how to retrieve the current active session using the getSession function from the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/client\"\n\nconst { data: session } = await authClient.getSession()\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Provider in Better Auth\nDESCRIPTION: Sets up the GitHub authentication provider by configuring the Better Auth instance with GitHub client credentials from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID as string,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configure User and Organization Provisioning\nDESCRIPTION: This code snippet demonstrates how to configure user and organization provisioning within the SSO plugin options. It shows how to define a custom `provisionUser` function and configure `organizationProvisioning` settings such as disabling provisioning, setting a default role, and defining a custom `getRole` function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = betterAuth({\n plugins: [\n sso({\n provisionUser: async (user) => {\n // provision user\n },\n organizationProvisioning: {\n disabled: false,\n defaultRole: \"member\",\n getRole: async (user) => {\n // get role if needed\n },\n },\n }),\n ],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Output Transformation Effect\nDESCRIPTION: Example showing how custom output transformation affects the data returned from an adapter. This demonstrates how a name value is transformed regardless of what was stored in the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst some_data = await adapter.create({\n  model: \"user\",\n  data: {\n    name: \"John\",\n  },\n});\n\n// The name will be \"Bob\"\nconsole.log(some_data.name);\n```\n\n----------------------------------------\n\nTITLE: Create Organization (TypeScript)\nDESCRIPTION: This code demonstrates how to create a new organization using the `authClient.organization.create` method. It requires the `name`, `slug`, and optionally a `logo` for the organization.  This function is called on the client side after the organization client plugin has been added.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.organization.create({\n    name: \"My Organization\",\n    slug: \"my-org\",\n    logo: \"https://example.com/logo.png\"\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Session Client Plugin\nDESCRIPTION: This snippet shows how to configure the client-side of the multi-session plugin. Import the createAuthClient function and the multiSessionClient plugin from the Better Auth client libraries.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { multiSessionClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [\n        multiSessionClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Delete All Expired API Keys - TypeScript\nDESCRIPTION: This snippet demonstrates how to delete all expired API keys using the `deleteAllExpiredApiKeys` function from the `auth.api` object. This function removes API keys that have an expiration date in the past. It's important to note that the function is rate-limited to prevent excessive database calls.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.api.deleteAllExpiredApiKeys();\n```\n\n----------------------------------------\n\nTITLE: Ban User - Typescript\nDESCRIPTION: This code snippet shows how to ban a user using the `banUser` method. It requires the user ID and includes optional parameters for the ban reason and expiration time.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst bannedUser = await authClient.admin.banUser({\n  userId: \"user_id_here\",\n  banReason: \"Spamming\", // Optional (if not provided, the default ban reason will be used - No reason)\n  banExpiresIn: 60 * 60 * 24 * 7, // Optional (if not provided, the ban will never expire)\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Email Verification\nDESCRIPTION: Shows how to manually trigger the email verification process for a user by calling the sendVerificationEmail function with the user's email address and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.sendVerificationEmail({\n    email: \"user@email.com\",\n    callbackURL: \"/\" // The redirect URL after verification\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Handler to TanStack API Endpoint\nDESCRIPTION: This code snippet demonstrates how to mount the Better Auth handler to a TanStack API endpoint. It creates a new file for handling authentication requests and exports an APIRoute using createAPIFileRoute from TanStack Start.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/tanstack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@/lib/auth' // import your auth instance\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/auth/$')({\n  GET: ({ request }) => {\n    return auth.handler(request)\n  },\n  POST: ({ request }) => {\n    return auth.handler(request)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sign In with SSO by Organization Slug\nDESCRIPTION: This code snippet demonstrates how to sign in with SSO using an organization slug. The `authClient.signIn.sso` method is called with the organization slug and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await authClient.signIn.sso({\n organizationSlug: \"example-org\",\n callbackURL: \"/dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Banned User Message Configuration (TypeScript)\nDESCRIPTION: This code configures the message displayed to banned users when they attempt to sign in. The `bannedUserMessage` option customizes the message shown to users who have been banned from the application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  bannedUserMessage: \"Custom banned user message\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook (Vue/TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `useSession` hook in a Vue component to access session data. It retrieves the session data allowing you to display the user details or perform actions based on authentication status.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n        import { authClient } from \"~/lib/auth-client\" // [!code highlight]\n\n        const session = authClient.useSession() // [!code highlight]\n        </script>\n\n        <template>\n            <div>\n                <div>\n                    <pre>{{ session.data }}</pre>\n                    <button v-if=\"session.data\" @click=\"authClient.signOut()\">\n                        Sign out\n                    </button>\n                </div>\n            </div>\n        </template>\n```\n\n----------------------------------------\n\nTITLE: Password Reset Flow Implementation\nDESCRIPTION: Client-side implementation for password reset using phone number verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.phoneNumber.forgetPassword({\n    phoneNumber: \"+1234567890\"\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst isVerified = await authClient.phoneNumber.resetPassword({\n    otp: \"123456\",\n    phoneNumber: \"+1234567890\",\n    newPassword: \"newPassword\"\n})\n```\n\n----------------------------------------\n\nTITLE: Leaving an Organization with Better Auth\nDESCRIPTION: This code snippet demonstrates how to use the `organization.leave` function to remove the current user from a specified organization.  The `organizationId` parameter identifies the organization to leave.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.organization.leave({\n    organizationId: \"organization-id\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth API Route in Expo\nDESCRIPTION: Sets up an API route in Expo to handle Better Auth requests. This code exports a handler for both GET and POST requests, allowing the Better Auth instance to be hosted within the Expo app.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/lib/auth\"; // import Better Auth handler\n\nconst handler = auth.handler;\nexport { handler as GET, handler as POST }; // export handler for both GET and POST requests\n```\n\n----------------------------------------\n\nTITLE: Inferring Additional Fields on Better Auth Client (Separate Projects)\nDESCRIPTION: This snippet demonstrates how to infer additional fields on the client side when the client and server are in separate projects. It manually specifies the additional fields when creating the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { auth } from \"./auth\";\nimport { inferAdditionalFields } from \"better-auth/client/plugins\";\n\nexport const authClient = createAuthClient({\n  plugins: [inferAdditionalFields({\n      user: {\n        role: {\n          type: \"string\"\n        }\n      }\n  })],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Sign-In in Expo\nDESCRIPTION: Demonstrates how to implement social sign-in using Better Auth in an Expo app. It uses the authClient.signIn.social method to initiate the Google sign-in process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from \"react-native\";\n\nexport default function App() {\n    const handleLogin = async () => {\n        await authClient.signIn.social({\n            provider: \"google\",\n            callbackURL: \"/dashboard\" // this will be converted to a deep link (eg. `myapp://dashboard`) on native\n        })\n    };\n    return <Button title=\"Login with Google\" onPress={handleLogin} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Better Auth Client with Magic Link Plugin in TypeScript\nDESCRIPTION: This snippet shows how to extend the Better Auth client with the Magic Link plugin. It demonstrates plugin integration during client creation and usage of the new functionality provided by the plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { magicLinkClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [\n        magicLinkClient()\n    ]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.magicLink({\n    email: \"test@email.com\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in Better Auth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the Spotify authentication provider in Better Auth. It imports the necessary module and sets up the auth instance with Spotify credentials.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/spotify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n   \n    socialProviders: {\n        spotify: {\n            clientId: process.env.SPOTIFY_CLIENT_ID as string,\n            clientSecret: process.env.SPOTIFY_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Username Plugin to Client\nDESCRIPTION: Configuring the client-side of the Better Auth system to support username functionality with the usernameClient plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { usernameClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [ // [!code highlight]\n        usernameClient() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Cookie Attributes in Better Auth\nDESCRIPTION: This code shows how to customize specific cookie attributes for individual cookies like the session token, providing granular control over cookie security settings.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = createAuth({\n  advanced: {\n    cookies: {\n      sessionToken: {\n        sameSite: \"none\",\n        secure: true,\n        partitioned: true // New browser standards will mandate this for foreign cookies\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Endpoint Interface in Better Auth Client Plugin\nDESCRIPTION: Demonstrates how to infer server plugin endpoints in a client plugin, which automatically converts kebab-case paths to camelCase for client-side usage.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BetterAuthClientPlugin } from \"better-auth/client\";\nimport type { myPlugin } from \"./plugin\";\n\nconst myPluginClient = ()=> {\n    return  {\n        id: \"my-plugin\",\n        $InferServerPlugin: {} as ReturnType<typeof myPlugin>,\n    } satisfies BetterAuthClientPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Up Functionality in Expo\nDESCRIPTION: Shows how to create a sign-up form using Better Auth in an Expo app. It manages state for name, email, and password inputs, and handles the sign-up process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from \"react\";\nimport { View, TextInput, Button } from \"react-native\";\nimport { authClient } from \"./auth-client\";\n\nexport default function App() {\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleLogin = async () => {\n        await authClient.signUp.email({\n                email,\n                password,\n                name\n        })\n    };\n\n    return (\n        <View>\n            <TextInput\n                placeholder=\"Name\"\n                value={name}\n                onChangeText={setName}\n            />\n            <TextInput\n                placeholder=\"Email\"\n                value={email}\n                onChangeText={setEmail}\n            />\n            <TextInput\n                placeholder=\"Password\"\n                value={password}\n                onChangeText={setPassword}\n            />\n            <Button title=\"Login\" onPress={handleLogin} />\n        </View>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting an Invitation\nDESCRIPTION: This snippet demonstrates how to accept an invitation using `authClient.organization.acceptInvitation`. It requires the `invitationId` to identify the invitation to accept.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait authClient.organization.acceptInvitation({\n    invitationId: \"invitation-id\"\n})\n```\n\n----------------------------------------\n\nTITLE: Create User - Typescript\nDESCRIPTION: This code snippet demonstrates how an admin can create a new user using the `createUser` method of the `authClient.admin` object. It includes parameters for name, email, password, role, and optional additional user data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUser = await authClient.admin.createUser({\n  name: \"Test User\",\n  email: \"test@example.com\",\n  password: \"password123\",\n  role: \"user\", // this can also be an array for multiple roles (e.g. [\"user\", \"sale\"])\n  data: {\n    // any additional on the user table including plugin fields and custom fields\n    customField: \"customValue\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth Client with Custom Scheme in Expo\nDESCRIPTION: This code snippet shows how to configure the Better Auth client for an Expo application with a custom scheme for deep linking. It overrides the default scheme that would be read from the app.json file.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\n\nconst authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\",\n    scheme: \"myapp\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Roblox Provider in better-auth\nDESCRIPTION: This code demonstrates how to configure the Roblox authentication provider in the better-auth instance. It requires the Roblox client ID and client secret from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/roblox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\" \n\nexport const auth = betterAuth({\n    socialProviders: {\n        roblox: { // [!code highlight]\n            clientId: process.env.ROBLOX_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.ROBLOX_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Validating JWT with Local JWKS using Jose Library\nDESCRIPTION: This snippet shows how to validate a JWT token using the Jose library with a locally stored JWKS. It creates a local JWKS set from stored key data and verifies the token with specified issuer and audience.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jwtVerify, createLocalJWKSet } from 'jose'\n\n\nasync function validateToken(token: string) {\n  try {\n    /**\n     * This is the JWKS that you get from the /api/auth/\n     * jwks endpoint\n     */\n    const storedJWKS = {\n      keys: [{\n        //...\n      }]\n    };\n    const JWKS = createLocalJWKSet({\n      keys: storedJWKS.data?.keys!,\n    })\n    const { payload } = await jwtVerify(token, JWKS, {\n      issuer: 'http://localhost:3000', // Should match your JWT issuer, which is the BASE_URL\n      audience: 'http://localhost:3000', // Should match your JWT audience, which is the BASE_URL by default\n    })\n    return payload\n  } catch (error) {\n    console.error('Token validation failed:', error)\n    throw error\n  }\n}\n\n// Usage example\nconst token = 'your.jwt.token' // this is the token you get from the /api/auth/token endpoint\nconst payload = await validateToken(token)\n```\n\n----------------------------------------\n\nTITLE: Authorize Organization Reference - Typescript\nDESCRIPTION: This code demonstrates the implementation of the `authorizeReference` function to ensure users have the appropriate permissions to manage organization subscriptions. It checks if the user is an 'owner' or 'admin' within the organization before authorizing the subscription action.  This prevents unauthorized modifications to organizational subscriptions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nauthorizeReference: async ({ user, referenceId, action }) => {\n    const member = await db.members.findFirst({\n        where: {\n            userId: user.id,\n            organizationId: referenceId\n        }\n    });\n    \n    return member?.role === \"owner\" || member?.role === \"admin\";\n}\n```\n\n----------------------------------------\n\nTITLE: Install Stripe Plugin\nDESCRIPTION: This command installs the Better Auth Stripe plugin, enabling integration with Stripe for payment and subscription management. It should be installed on both the client and server if using a separate setup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@better-auth/stripe\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Permissions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to verify an API key and check if it has the required permissions using the `auth.api.verifyApiKey` method. The `body` parameter includes the API key and the required `permissions` object. The `result.valid` property indicates whether the API key is valid and possesses the necessary permissions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await auth.api.verifyApiKey({\n  body: {\n    key: \"your_api_key_here\",\n    permissions: {\n      files: [\"read\"]\n    }\n  }\n});\n\nif (result.valid) {\n  // API key is valid and has the required permissions\n} else {\n  // API key is invalid or doesn't have the required permissions\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with database (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure Better Auth to use a specific database.  It sets the `database` option with dialect, type, and casing configurations for a Postgres database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tdatabase: {\n\t\tdialect: \"postgres\",\n\t\ttype: \"postgres\",\n\t\tcasing: \"camel\"\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Allow Linking Social Accounts with Different Emails (Typescript)\nDESCRIPTION: This code shows how to enable linking social accounts with different email addresses than the user's existing account in Better Auth. Setting `accountLinking.allowDifferentEmails` to true allows users to link social accounts even if their email addresses do not match.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    account: {\n        accountLinking: {\n            allowDifferentEmails: true\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Email Verification Errors in Client Authentication\nDESCRIPTION: Demonstrates how to handle errors when a user tries to sign in without verifying their email address, showing appropriate error messages to the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.email({\n    email: \"email@example.com\",\n    password: \"password\"\n}, {\n    onError: (ctx) => {\n        // Handle the error\n        if(ctx.error.status === 403) {\n            alert(\"Please verify your email address\")\n        }\n        //you can also show the original error message\n        alert(ctx.error.message)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting OIDC Provider Plugin in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add the OIDC provider plugin to your auth configuration in TypeScript. It includes setting up the plugin with options like the login page path.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { oidcProvider } from \"better-auth/plugins\";\n\nconst auth = betterAuth({\n    plugins: [oidcProvider({\n        loginPage: \"/sign-in\", // path to the login page\n        // ...other options\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Better Auth Session in Nuxt Server API Route\nDESCRIPTION: This snippet shows how to access the Better Auth session in a Nuxt server API route. It uses the auth.api.getSession method to retrieve the session data from the request headers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/lib/auth\";\n\nexport default defineEventHandler((event) => {\n    const session = await auth.api.getSession({\n      headers: event.headers\n    });\n\n   if(session) {\n     // access the session.session && session.user\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with appName (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize Better Auth with a custom application name. It imports the `betterAuth` function and calls it with an object containing the `appName` property.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tappName: \"My App\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the Base URL\nDESCRIPTION: This snippet sets the `BETTER_AUTH_URL` environment variable.  This variable specifies the base URL of your application, which Better Auth uses for redirects and other URL-related operations.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nBETTER_AUTH_URL=http://localhost:3000 #Base URL of your app\n```\n\n----------------------------------------\n\nTITLE: Server-side Bearer Token Authentication in TypeScript\nDESCRIPTION: This code shows how to authenticate requests on the server using the auth.api.getSession function with Bearer tokens.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\";\n\nexport async function handler(req, res) {\n  const session = await auth.api.getSession({\n    headers: req.headers\n  });\n  \n  if (!session) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  // Process authenticated request\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching JWT Token with Authorization Header\nDESCRIPTION: This snippet demonstrates how to fetch a JWT token by making a request to the /api/auth/token endpoint with the Authorization header containing a bearer token.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait fetch(\"/api/auth/token\", {\n  headers: {\n    \"Authorization\": `Bearer ${token}`\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Facebook Scopes and Fields (TypeScript)\nDESCRIPTION: This snippet shows how to configure additional scopes and fields for Facebook authentication. It extends the basic configuration to request more permissions and user profile fields.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/facebook.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    socialProviders: {\n        facebook: {\n            clientId: process.env.FACEBOOK_CLIENT_ID as string,\n            clientSecret: process.env.FACEBOOK_CLIENT_ID as string,\n            scopes: [\"email\", \"public_profile\", \"user_friends\"],\n            fields: [\"user_friends\"],\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Lifecycle Hooks with Better Auth in Typescript\nDESCRIPTION: This example shows how to configure request lifecycle hooks for the `better-auth` library. It demonstrates how to define `before` and `after` hooks to execute custom logic before and after processing a request. These hooks provide customization points for intercepting and modifying requests and responses during the authentication process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\thooks: {\n\t\tbefore: async (request, ctx) => {\n\t\t\t// Execute before processing the request\n\t\t},\n\t\tafter: async (request, response, ctx) => {\n\t\t\t// Execute after processing the request\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Kick Sign-in\nDESCRIPTION: Implements the social sign-in functionality for Kick using the better-auth client. Creates an authentication client instance and provides a function to initiate the Kick sign-in flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/kick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"kick\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Better Auth Database in Nuxt Project\nDESCRIPTION: This command uses the Better Auth CLI to create necessary tables in the database for the authentication system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Auth Middleware - Astro - Typescript\nDESCRIPTION: This code snippet demonstrates how to implement authentication middleware in Astro using Better Auth. It imports `auth` and `defineMiddleware` from the respective packages. The middleware function `onRequest` retrieves the session using `auth.api.getSession`, sets the `user` and `session` data in `context.locals` if the user is authenticated, and calls `next()` to continue the request handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\";\nimport { defineMiddleware } from \"astro:middleware\";\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n    const isAuthed = await auth.api\n        .getSession({\n            headers: context.request.headers,\n        })\n\n    if (isAuthed) {\n        context.locals.user = isAuthed.user;\n        context.locals.session = isAuthed.session;\n    } else {\n        context.locals.user = null;\n        context.locals.session = null;\n    }\n\n    return next();\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook (Svelte/TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `useSession` hook in a Svelte component to access session data. It retrieves the session data using svelte stores.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n            import { authClient } from \"$lib/auth-client\"; // [!code highlight]\n\n            const session = authClient.useSession(); // [!code highlight]\n            </script>\n            <p>\n                {$session.data?.user.email}\n            </p>\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Plugin in Better Auth Configuration\nDESCRIPTION: This snippet shows how to add the JWT plugin to the Better Auth configuration in the auth.ts file. It imports the necessary modules and includes the JWT plugin in the plugins array.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { jwt } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        jwt(), // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Verification Callback Configuration\nDESCRIPTION: Server-side configuration for handling post-verification callbacks.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    plugins: [\n        phoneNumber({\n            sendOTP: ({ phoneNumber, code }, request) => {\n                // Implement sending OTP code via SMS\n            },\n            callbackOnVerification: async ({ phoneNumber, user }, request) => {\n                // Implement callback after phone number verification\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with React Hooks in Better Auth\nDESCRIPTION: Shows how to access and handle error states and loading indicators when using Better Auth hooks like useSession.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error, isPending } = useSession()\nif (error) {\n    //handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth Client in Nuxt Vue Component\nDESCRIPTION: This example shows how to use the Better Auth client in a Nuxt Vue component. It demonstrates social sign-in with GitHub and displays the session data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { authClient } from \"~/lib/client\"\nconst session = authClient.useSession()\n</script>\n\n<template>\n    <div>\n        <button v-if=\"!session?.data\" @click=\"() => authClient.signIn.social({\n            provider: 'github'\n        })\">\n            Continue with GitHub\n        </button>\n        <div>\n            <pre>{{ session.data }}</pre>\n            <button v-if=\"session.data\" @click=\"authClient.signOut()\">\n                Sign out\n            </button>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Getting an Invitation\nDESCRIPTION: This snippet demonstrates how to retrieve an invitation using `authClient.organization.getInvitation`. It requires the `id` of the invitation to fetch, passed in the `query` parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthClient.organization.getInvitation({\n    query: {\n        id: params.id\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with Mapped Account Fields in TypeScript\nDESCRIPTION: This code snippet shows how to configure Better Auth to map existing database fields to the expected structure for the account schema. It maps various fields like 'providerAccountId' to 'accountId', 'refresh_token' to 'refreshToken', etc.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    // Other configs\n    account: {\n        fields: {\n            accountId: \"providerAccountId\",\n            refreshToken: \"refresh_token\",\n            accessToken: \"access_token\",\n            accessTokenExpiresAt: \"access_token_expires\",\n            idToken: \"id_token\",\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrate Database Using Better Auth CLI\nDESCRIPTION: This command migrates the database using the Better Auth CLI. It automatically applies the necessary schema changes to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Creating a client plugin\nDESCRIPTION: This code snippet shows how to create a Better Auth client plugin. It defines a function `birthdayClientPlugin` that returns an object conforming to `BetterAuthClientPlugin`. The crucial part is the `$InferServerPlugin` property, which allows the client plugin to infer types from the server plugin's schema, ensuring type safety and consistency between client and server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BetterAuthClientPlugin } from \"better-auth\";\nimport type { birthdayPlugin } from \"./index\"; // make sure to import the server plugin as a type // [!code highlight]\n\ntype BirthdayPlugin = typeof birthdayPlugin;\n\nexport const birthdayClientPlugin = () => {\n  return {\n    id: \"birthdayPlugin\",\n    $InferServerPlugin: {} as ReturnType<BirthdayPlugin>,\n  } satisfies BetterAuthClientPlugin;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TRPC Provider with Better Auth in React Native\nDESCRIPTION: This code snippet shows how to configure a TRPC provider to include authentication headers using Better Auth in a React Native application. It demonstrates setting up the TRPC client with custom headers that include the session cookie.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n//...other imports\nimport { authClient } from \"@/lib/auth-client\"; // [!code highlight]\n\nexport const api = createTRPCReact<AppRouter>();\n\nexport function TRPCProvider(props: { children: React.ReactNode }) {\n  const [queryClient] = useState(() => new QueryClient());\n  const [trpcClient] = useState(() =>\n    api.createClient({\n      links: [\n        httpBatchLink({\n          //...your other options\n          headers() {\n            const headers = new Map<string, string>(); // [!code highlight]\n            const cookies = authClient.getCookie(); // [!code highlight]\n            if (cookies) { // [!code highlight]\n              headers.set(\"Cookie\", cookies); // [!code highlight]\n            } // [!code highlight]\n            return Object.fromEntries(headers); // [!code highlight]\n          },\n        }),\n      ],\n    }),\n  );\n\n  return (\n    <api.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        {props.children}\n      </QueryClientProvider>\n    </api.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Auth Middleware with Full Session Check in Next.js <= 15.1.7\nDESCRIPTION: This example shows how to implement middleware with full session validation for Next.js version 15.1.7 and below. It makes an HTTP request to the authentication endpoint to validate the session.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from \"@better-fetch/fetch\";\nimport type { auth } from \"@/lib/auth\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\ntype Session = typeof auth.$Infer.Session;\n\nexport async function middleware(request: NextRequest) {\n\tconst { data: session } = await betterFetch<Session>(\"/api/auth/get-session\", {\n\t\tbaseURL: request.nextUrl.origin,\n\t\theaders: {\n\t\t\tcookie: request.headers.get(\"cookie\") || \"\", // Forward the cookies from the request\n\t\t},\n\t});\n\n\tif (!session) {\n\t\treturn NextResponse.redirect(new URL(\"/sign-in\", request.url));\n\t}\n\n\treturn NextResponse.next();\n}\n\nexport const config = {\n\tmatcher: [\"/dashboard\"], // Apply middleware to specific routes\n};\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema\nDESCRIPTION: This command uses the Better Auth CLI to generate the database schema required by the library. It generates an ORM schema or SQL migration file.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Key Transformation for Better Auth\nDESCRIPTION: Example of implementing key mapping to transform field names from database format back to Better Auth format. This example shows how to map '_id' from MongoDB back to 'id' for Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmapKeysTransformOutput: () => {\n  return {\n    _id: \"id\", // We want to replace `_id` (from MongoDB) to `id` (for Better-Auth)\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Social Provider in Better Auth\nDESCRIPTION: This snippet shows how to configure the VK social provider in the Better Auth instance. It requires setting the clientId and clientSecret obtained from the VK ID Developer Portal.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/vk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    vk: { // [!code highlight]\n      clientId: process.env.VK_CLIENT_ID as string, // [!code highlight]\n      clientSecret: process.env.VK_CLIENT_SECRET as string, // [!code highlight]\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Revoking All Sessions in Better Auth\nDESCRIPTION: This snippet shows how to revoke all sessions for the current user using the revokeSessions function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.revokeSessions()\n```\n\n----------------------------------------\n\nTITLE: Caching Server Functions in Next.js v15\nDESCRIPTION: This snippet shows how to use the 'use cache' directive in Next.js v15 to cache the response of a server function that retrieves users via Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getUsers() {\n    'use cache' // [!code highlight]\n    const { users } = await auth.api.listUsers();\n    return users\n}\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Svelte\nDESCRIPTION: This code snippet shows how to get session data in a Svelte load function. It imports the `auth` object and calls `auth.api.getSession` passing the request headers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\";\n\nexport async function load({ request }) {\n    const session = await auth.api.getSession({\n        headers: request.headers\n    })\n    return {\n        props: {\n            session\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Auth Plugin Endpoints\nDESCRIPTION: Demonstrates how to create custom endpoints in a Better Auth plugin using createAuthEndpoint, including route definition and request handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthEndpoint } from \"better-auth/api\";\n\nconst myPlugin = ()=> {\n    return {\n        id: \"my-plugin\",\n        endpoints: {\n            getHelloWorld: createAuthEndpoint(\"/my-plugin/hello-world\", {\n                method: \"GET\",\n            }, async(ctx) => {\n                return ctx.json({\n                    message: \"Hello World\"\n                })\n            })\n        }\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Client with Vanilla JavaScript\nDESCRIPTION: Initializes a framework-agnostic Better Auth client instance by specifying the base URL of the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth instance with Prisma adapter\nDESCRIPTION: Setting up the Better Auth instance with the Prisma adapter for database integration. This code configures email and password authentication and specifies SQLite as the database provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, { provider: \"sqlite\" }),\n  emailAndPassword: { enabled: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying One-Time Token on Client (TypeScript)\nDESCRIPTION: This snippet illustrates how to verify a one-time token on the client side. It extracts the token from the URL and uses the authClient.oneTimeToken.verify method for validation.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = window.location.href;\nconst token = url.split(\"token=\")[1]; //retrieve a token\nconst response = await authClient.oneTimeToken.verify({\n    token\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Email and Password Authentication in Better Auth\nDESCRIPTION: Configure Better Auth to support email and password authentication, which is optional but common in Supabase projects.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { admin, anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { \n        enabled: true, \n    } \n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Member (Server-Side)\nDESCRIPTION: This snippet demonstrates how to add a member to an organization directly on the server-side using `auth.api.addMember`.  It requires the `userId`, `organizationId`, and `role` in the request `body`.  Optionally, a `teamId` can be provided to add the member to a specific team.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { auth } from \"@/auth\";\n\nauth.api.addMember({\n  body: {\n      userId: \"user-id\",\n      organizationId: \"organization-id\",\n      role: \"admin\", // this can also be an array for multiple roles (e.g. [\"admin\", \"sale\"])\n      teamId: \"team-id\" // Optionally specify a teamId to add the member to a team. (requires teams to be enabled)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Revoke User Session - Typescript\nDESCRIPTION: This code snippet demonstrates how to revoke a specific session for a user using the `revokeUserSession` method. It requires the session token as a parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst revokedSession = await authClient.admin.revokeUserSession({\n  sessionToken: \"session_token_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Headers from API Response in TypeScript\nDESCRIPTION: This snippet shows how to get the headers from an API response by using the returnHeaders option. It demonstrates how to access specific headers like cookies or custom headers from the response.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { headers, response } = await auth.api.signUpEmail({\n\treturnHeaders: true,\n\tbody: {\n\t\temail: \"john@doe.com\",\n\t\tpassword: \"password\",\n\t\tname: \"John Doe\",\n\t},\n});\n\nconst cookies = headers.get(\"set-cookie\");\nconst headers = headers.get(\"x-custom-header\");\n```\n\n----------------------------------------\n\nTITLE: Link Social Account (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use `authClient.linkSocial` to link a social provider account (e.g., Google) to the user's existing account. It specifies the provider and a callback URL. Scopes can also be specified to request additional permissions during linking.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.linkSocial({\n    provider: \"google\", // Provider to link\n    callbackURL: \"/callback\" // Callback URL after linking completes\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Email Verification on Sign-up\nDESCRIPTION: Shows how to configure Better Auth to automatically send a verification email when a user signs up by setting the sendOnSignUp option to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from 'better-auth';\n\nexport const auth = betterAuth({\n    emailVerification: {\n        sendOnSignUp: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Better Auth Migration Command\nDESCRIPTION: Execute the Better Auth CLI migration command to create the necessary database tables for authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Better Auth Hooks\nDESCRIPTION: This example shows how to set and get both regular and signed cookies in a hook. It demonstrates setting cookies with options like maxAge and retrieving cookie values from the request.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthMiddleware } from \"better-auth/api\";\n\nconst hook = createAuthMiddleware(async (ctx) => {\n    ctx.setCookies(\"my-cookie\", \"value\");\n    await ctx.setSignedCookie(\"my-signed-cookie\", \"value\", ctx.context.secret, {\n        maxAge: 1000,\n    });\n\n    const cookie = ctx.getCookies(\"my-cookie\");\n    const signedCookie = await ctx.getSignedCookies(\"my-signed-cookie\");\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization\nDESCRIPTION: This code snippet demonstrates how to delete an organization using `authClient.organization.delete`. It requires an `organizationId` to specify the organization to delete.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait authClient.organization.delete({\n  organizationId: \"test\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth Client in Remix\nDESCRIPTION: Creates and exports the client-side authentication instance for Better Auth React integration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/remix.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\" // make sure to import from better-auth/react\n\nexport const authClient = createAuthClient({\n    //you can pass client configuration here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Active Organization in Svelte\nDESCRIPTION: This Svelte snippet shows how to use the `useActiveOrganization` hook from `authClient` to get the active organization. It uses Svelte's reactivity (`$activeOrganization`) to handle loading states and display organization information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\nimport { authClient } from \"$lib/auth-client\";\nconst activeOrganization = authClient.useActiveOrganization();\n</script>\n\n<h2>Active Organization</h2>\n\n{#if $activeOrganization.isPending}\n<p>Loading...</p>\n{:else if $activeOrganization.data === null}\n<p>No active organization found.</p>\n{:else}\n<p>{$activeOrganization.data.name}</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Running Better Auth CLI for Prisma Schema Generation\nDESCRIPTION: This command demonstrates how to use the Better Auth CLI to generate Prisma schema based on your Better Auth configuration and plugins. This is supported functionality whereas schema migration is not currently supported.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/prisma.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Connecting SQLite to Better Auth in TypeScript\nDESCRIPTION: Example showing how to connect an SQLite database to Better Auth. This requires the 'better-sqlite3' package to establish a connection to a local SQLite database file.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport Database from \"better-sqlite3\";\n\nexport const auth = betterAuth({\n  database: new Database(\"database.sqlite\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Session Response in Better Auth\nDESCRIPTION: This snippet demonstrates how to customize the session response by adding additional fields such as user roles using the customSession plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customSession } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        customSession(async ({ user, session }) => {\n            const roles = findUserRoles(session.session.userId);\n            return {\n                roles,\n                user: {\n                    ...user,\n                    newField: \"newField\",\n                },\n                session\n            };\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Device Sessions on Server Side\nDESCRIPTION: This snippet demonstrates how to list all active sessions for the current user on the server side. It uses the auth.api interface to access the listDeviceSessions method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.api.listDeviceSessions()\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Payload in Better Auth Configuration\nDESCRIPTION: This snippet demonstrates how to customize the JWT payload by defining a function that selects specific user properties to include in the token payload.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\njwt({\n  jwt: {\n    definePayload: ({user}) => {\n      return {\n        id: user.id,\n        email: user.email,\n        role: user.role\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure MySQL Database\nDESCRIPTION: This code snippet configures Better Auth to use MySQL as the database.  It imports `betterAuth` and `createPool` from `mysql2/promise` and creates a new pool instance with connection options. The `database` option within `betterAuth` is assigned to this new pool instance.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { createPool } from \"mysql2/promise\";\n\nexport const auth = betterAuth({\n    database: createPool({\n        // connection options\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Handler in Express.js\nDESCRIPTION: This snippet demonstrates how to mount the Better Auth handler to an Express.js server. It sets up a catch-all route for auth requests and configures the server to listen on a specified port.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/express.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { toNodeHandler } from \"better-auth/node\";\nimport { auth } from \"./auth\";\n\nconst app = express();\nconst port = 3005;\n\napp.all(\"/api/auth/*\", toNodeHandler(auth)); // For ExpressJS v4\n// app.all(\"/api/auth/*splat\", toNodeHandler(auth)); For ExpressJS v5 \n\n// Mount express json middleware after Better Auth handler\n// or only apply it to routes that don't interact with Better Auth\napp.use(express.json());\n\napp.listen(port, () => {\n\tconsole.log(`Example app listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Create Auth Client - Vue - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth client for Vue. It imports `createAuthClient` from the `better-auth/vue` package and exports a `authClient` constant that initializes the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/vue\"\nexport const authClient =  createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: List User's Organizations (Svelte)\nDESCRIPTION: This Svelte code snippet demonstrates how to list a user's organizations using the `authClient.useListOrganizations` hook. It handles pending, null data, and successful data states to provide a responsive UI. It fetches and displays a list of organization names or appropriate messages based on the data received.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { authClient } from \"$lib/auth-client\";\n  const organizations = authClient.useListOrganizations();\n</script>\n\n<h1>Organizations</h1>s\n\n{#if $organizations.isPending}\n  <p>Loading...</p>\n{:else if $organizations.data === null}\n  <p>No organizations found.</p>\n{:else}\n  <ul>\n    {#each $organizations.data as organization}\n      <li>{organization.name}</li>\n    {/each}\n  </ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Client for Cross-Origin Authentication Requests\nDESCRIPTION: This snippet demonstrates how to configure the Hono client to include credentials (cookies) when making cross-origin requests to Better Auth-protected endpoints.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hc } from \"@hono/client\";\nimport type { AppType } from \"./server\"; // Your Hono app type\n\nconst client = hc<AppType>(\"http://localhost:8787/\", {\n  fetch: ((input, init) => {\n    return fetch(input, { \n      ...init, \n      credentials: \"include\" // Required for sending cookies cross-origin\n    });\n  }) satisfies typeof fetch,\n});\n\n// Now your client requests will include credentials\nconst response = await client.someProtectedEndpoint.$get();\n```\n\n----------------------------------------\n\nTITLE: Cancel a Subscription\nDESCRIPTION: This code snippet demonstrates how to cancel a user's subscription using the `subscription.cancel` method on the client. It allows the user to cancel their subscription via the Stripe billing portal.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await client.subscription.cancel({\n    returnUrl: \"/account\",\n    referenceId: \"org_123\" // optional defaults to userId\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth SvelteKit Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Better Auth SvelteKit example project. Requires cloning the repository and setting up environment variables beforehand.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/svelte-kit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Hono\nDESCRIPTION: This snippet shows how to retrieve session data using the Hono framework. It accesses the headers from the request object `c.req.raw.headers` and passes them to the `auth.api.getSession` method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\";\n\nconst app = new Hono();\n\napp.get(\"/path\", async (c) => {\n    const session = await auth.api.getSession({\n        headers: c.req.raw.headers\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Set Active Organization on Session Creation (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to set the active organization during session creation using database hooks. The `before` hook in the `session.create` configuration allows modifying the session data before it's created, setting the `activeOrganizationId` based on the user's active organization retrieved using the `getActiveOrganization` function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  databaseHooks: {\n      session: {\n          create: {\n              before: async(session)=>{\n                  const organization = await getActiveOrganization(session.userId)\n                  return {\n                    data: {\n                      ...session,\n                      activeOrganizationId: organization.id\n                    }\n                  }\n              }\n          }\n      }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: MySQL Schema Generation Command\nDESCRIPTION: CLI command to generate MySQL database schema based on Better Auth configuration and plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mysql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Sign-In Flow in TypeScript\nDESCRIPTION: Example of initiating the magic link sign-in process. Shows how to trigger the magic link email sending with optional callback URL configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/magic-link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signIn.magicLink({\n  email: \"user@email.com\",\n  callbackURL: \"/dashboard\", //redirect after successful login (optional)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Phone Number Plugin Server Configuration\nDESCRIPTION: Server-side configuration for adding the phone number plugin to better-auth, including OTP sending functionality setup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { phoneNumber } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [ \n        phoneNumber({  \n            sendOTP: ({ phoneNumber, code }, request) => { \n                // Implement sending OTP code via SMS \n            } \n        }) \n    ] \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Plugin with Custom Key Pair Algorithm\nDESCRIPTION: This snippet demonstrates how to configure the JWT plugin with a custom key pair algorithm. It sets the algorithm to EdDSA with the Ed25519 curve in the auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\njwt({\n  jwks: {\n    keyPairConfig: {\n      alg: \"EdDSA\",\n      crv: \"Ed25519\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token Outside Auth Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a Bearer token to authenticate API requests outside of the auth client context.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = localStorage.getItem(\"bearer_token\");\n\nconst response = await fetch(\"https://api.example.com/data\", {\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n\nconst data = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Create Auth Client - React - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth client for React. It imports `createAuthClient` from the `better-auth/react` package and exports a `authClient` constant that initializes the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\"\nexport const authClient =  createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Actions to Better Auth Client Plugin\nDESCRIPTION: Shows how to extend a client plugin with custom actions using the getActions function, which provides access to the Better Fetch API for making HTTP requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BetterAuthClientPlugin } from \"better-auth/client\";\nimport type { myPlugin } from \"./plugin\";\nimport type { BetterFetchOption } from \"@better-fetch/fetch\";\n\nconst myPluginClient = {\n    id: \"my-plugin\",\n    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,\n    getActions: ($fetch)=>{\n        return {\n            myCustomAction: async (data: {\n                foo: string,\n            }, fetchOptions?: BetterFetchOption)=>{\n                const res = $fetch(\"/custom/action\", {\n                    method: \"POST\",\n                    body: {\n                        foo: data.foo\n                    },\n                    ...fetchOptions\n                })\n                return res\n            }\n        }\n    }\n} satisfies BetterAuthClientPlugin\n```\n\n----------------------------------------\n\nTITLE: Generating Better Auth Schema\nDESCRIPTION: Command to generate database schema for Better Auth using various ORM adapters like Prisma, Drizzle, or Kysely. The schema will be generated based on the configured adapter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Express Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in an Express application using Better Auth. It imports the necessary modules from Express and Better Auth, creates an Express app, and defines a route that handles all requests to `/api/auth/*`, forwarding the request to the Better Auth handler.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { toNodeHandler } from \"better-auth/node\";\nimport { auth } from \"./auth\";\n\nconst app = express();\nconst port = 8000;\n\napp.all(\"/api/auth/*\", toNodeHandler(auth));\n\n// Mount express json middleware after Better Auth handler\n// or only apply it to routes that don't interact with Better Auth\napp.use(express.json());\n\napp.listen(port, () => {\n    console.log(`Better Auth app listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Pre-fetching User Session for Server-Side Rendering\nDESCRIPTION: This snippet demonstrates how to pre-fetch a user session on the server side before passing it to the client, which is an optimal approach for frameworks supporting server-side rendering.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await auth.api.getSession({\n  headers: await headers(),\n});\n//then pass the session to the client\n```\n\n----------------------------------------\n\nTITLE: Mapping Social Provider Profiles to User in Better Auth\nDESCRIPTION: This example demonstrates how to map profile data from social providers (GitHub and Google) to the user object in Better Auth. It shows how to extract and set firstName and lastName fields from the profile data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    github: {\n      clientId: \"YOUR_GITHUB_CLIENT_ID\",\n      clientSecret: \"YOUR_GITHUB_CLIENT_SECRET\",\n      mapProfileToUser: (profile) => {\n        return {\n          firstName: profile.name.split(\" \")[0],\n          lastName: profile.name.split(\" \")[1],\n        };\n      },\n    },\n    google: {\n      clientId: \"YOUR_GOOGLE_CLIENT_ID\",\n      clientSecret: \"YOUR_GOOGLE_CLIENT_SECRET\",\n      mapProfileToUser: (profile) => {\n        return {\n          firstName: profile.given_name,\n          lastName: profile.family_name,\n        };\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware in Better Auth Plugin\nDESCRIPTION: Shows how to add custom middleware to a Better Auth server plugin. Middleware only runs on API requests from clients and can use path matching patterns.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        middlewares: [\n            {\n                path: \"/my-plugin/hello-world\",\n                middleware: createAuthMiddleware(async(ctx)=>{\n                    //do something\n                })\n            }\n        ]\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Session Types in Better Auth Server\nDESCRIPTION: This snippet shows how to infer the Session type on the server side of Better Auth. It initializes the auth object with a SQLite database and exports the inferred Session type.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport Database from \"better-sqlite3\"\n\nexport const auth = betterAuth({\n    database: new Database(\"database.db\")\n})\n\ntype Session = typeof auth.$Infer.Session\n```\n\n----------------------------------------\n\nTITLE: Impersonate User - Typescript\nDESCRIPTION: This code snippet demonstrates how an admin can impersonate a user using the `impersonateUser` method. It creates a session that mimics the specified user and requires the user ID as a parameter. The session duration is 1 hour.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst impersonatedSession = await authClient.admin.impersonateUser({\n  userId: \"user_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering One Tap Authentication Prompt\nDESCRIPTION: Simple implementation to display the One Tap authentication popup using the configured auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.oneTap();\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users from Hooks in TypeScript\nDESCRIPTION: This example demonstrates how to use the ctx.redirect method to redirect users to a different page. The redirect is implemented by throwing a redirect response which will be caught and processed by Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthMiddleware } from \"better-auth/api\";\n\nconst hook = createAuthMiddleware(async (ctx) => {\n    throw ctx.redirect(\"/sign-up/name\");\n});\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Responses from Hooks in TypeScript\nDESCRIPTION: This example shows how to send custom JSON responses from a hook using the ctx.json method. This is useful when you need to return custom data or override the default response from an endpoint.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hook = createAuthMiddleware(async (ctx) => {\n    return ctx.json({\n        message: \"Hello World\",\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Generate Better Auth Schema\nDESCRIPTION: This command generates the database schema required for Better Auth.  It uses the Better Auth CLI to generate the schema for database migration. The generated schema can then be manually applied to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Add SSO Client Plugin (auth-client.ts)\nDESCRIPTION: This code snippet demonstrates how to add the SSO client plugin to the Better Auth client instance. It imports `createAuthClient` and `ssoClient` from the `better-auth` library. The `ssoClient()` plugin is included in the `plugins` array when creating the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { ssoClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n plugins: [ // [!code highlight]\n ssoClient() // [!code highlight]\n ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: CLI commands for migrating or generating the database schema for 2FA functionality\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Anonymous Sign In Implementation - Better Auth TypeScript\nDESCRIPTION: Example of implementing anonymous sign-in functionality\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await authClient.signIn.anonymous()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Callback URL for One Tap Authentication\nDESCRIPTION: Configures a custom redirect URL after successful One Tap authentication using the callbackURL option.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nauthClient.oneTap({\n  callbackURL: \"/dashboard\"\n});\n```\n\n----------------------------------------\n\nTITLE: Link Social Account with Additional Scopes (Typescript)\nDESCRIPTION: This example shows how to request specific scopes when linking a social account. The `scopes` array allows requesting different permissions from the social provider than those requested during initial authentication. It specifies the provider, callback URL, and an array of scopes to request.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.linkSocial({\n    provider: \"google\",\n    callbackURL: \"/callback\",\n    scopes: [\"https://www.googleapis.com/auth/drive.readonly\"] // Request additional scopes\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Password with Email OTP\nDESCRIPTION: Resets a user's password using the provided email, OTP, and new password. This is typically used in a password recovery flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.emailOtp.resetPassword({\n    email: \"user-email@email.com\",\n    otp: \"123456\",\n    password: \"password\"\n})\n```\n\n----------------------------------------\n\nTITLE: MySQL Schema Migration Command\nDESCRIPTION: CLI command to migrate MySQL database schema according to Better Auth configuration changes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mysql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Hooks in Better Auth\nDESCRIPTION: This example demonstrates how to implement database hooks in Better Auth. It shows a 'before' hook for user creation that modifies the user object, and an 'after' hook that can perform additional actions post-creation.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  databaseHooks: {\n    user: {\n      create: {\n        before: async (user, ctx) => {\n          // Modify the user object before it is created\n          return {\n            data: {\n              ...user,\n              firstName: user.name.split(\" \")[0],\n              lastName: user.name.split(\" \")[1],\n            },\n          };\n        },\n        after: async (user) => {\n          //perform additional actions, like creating a stripe customer\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Forced Account Linking with Trusted Providers (Typescript)\nDESCRIPTION: This code configures Better Auth to automatically link accounts from 'trusted providers' (google and github in this example), even if the provider doesn't confirm the email verification status. Use with caution as it may increase the risk of account takeover.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    account: {\n        accountLinking: {\n            enabled: true,\n            trustedProviders: [\"google\", \"github\"]\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI with Better Auth Client\nDESCRIPTION: Demonstrates a Svelte component implementing authentication UI with session management, sign-in with GitHub, and sign-out functionality using the Better Auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/svelte-kit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { authClient } from \"$lib/client\";\n  const session = authClient.useSession();\n</script>\n    <div>\n      {#if $session.data}\n        <div>\n          <p>\n            {$session?.data?.user.name}\n          </p>\n          <button\n            on:click={async () => {\n              await authClient.signOut();\n            }}\n          >\n            Sign Out\n          </button>\n        </div>\n      {:else}\n        <button\n          on:click={async () => {\n            await authClient.signIn.social({\n              provider: \"github\",\n            });\n          }}\n        >\n          Continue with GitHub\n        </button>\n      {/if}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Configure Verification Email Before Deletion in Better Auth\nDESCRIPTION: This snippet shows how to configure Better Auth to send a verification email before deleting a user's account.  The `sendDeleteAccountVerification` function is used to send the email, including a URL and token for verification.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    user: {\n        deleteUser: {\n            enabled: true,\n            sendDeleteAccountVerification: async (\n                {\n                    user,   // The user object\n                    url, // The auto-generated URL for deletion\n                    token  // The verification token  (can be used to generate custom URL)\n                },\n                request  // The original request object (optional)\n            ) => {\n                // Your email sending logic here\n                // Example: sendEmail(data.user.email, \"Verify Deletion\", data.url);\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Method Examples\nDESCRIPTION: Example implementations of common database operations including create, update, delete, and query methods.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreate: async ({ model, data }) => {\n  return await db.insert(model).values(data);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdate: async ({ model, where, update }) => {\n  return await db.update(model).set(update).where(where);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfindOne: async ({ model, where, select }) => {\n  return await db.select().from(model).where(where).limit(1);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfindMany: async ({ model, where, limit, sortBy, offset }) => {\n  return await db\n    .select()\n    .from(model)\n    .where(where)\n    .limit(limit)\n    .offset(offset)\n    .orderBy(sortBy);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with baseURL (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize Better Auth with a custom base URL. The `baseURL` option specifies the root URL where your application server is hosted.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tbaseURL: \"https://example.com\",\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Email with OTP\nDESCRIPTION: Verifies a user's email address using the provided email and OTP. This is typically used after registration to confirm ownership of the email address.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.emailOtp.verifyEmail({\n    email: \"user-email@email.com\",\n    otp: \"123456\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Client with Bearer Token in TypeScript\nDESCRIPTION: This code configures the auth client to include the Bearer token in all requests, retrieving it from localStorage.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        auth: {\n           type:\"Bearer\",\n           token: () => localStorage.getItem(\"bearer_token\") || \"\" // get the token from localStorage\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Database Schema with Better Auth CLI\nDESCRIPTION: This command creates the database schema required by Better Auth. It automatically detects your ORM (Prisma, Drizzle, Kysely) and generates the appropriate schema file for your project.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Nuxt\nDESCRIPTION: This code snippet shows how to retrieve session data within a Nuxt event handler. It accesses the headers using `event.headers` and passes them to the `auth.api.getSession` method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/utils/auth\";\n\nexport default defineEventHandler((event) => {\n    const session = await auth.api.getSession({\n        headers: event.headers,\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Plugin - Better Auth TypeScript\nDESCRIPTION: Adding the anonymous plugin to the main authentication configuration\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { anonymous } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        anonymous() // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Handlers in Better Auth Plugin\nDESCRIPTION: Demonstrates how to implement an onResponse function that executes after a response is returned. This can be used to modify responses before they are sent to the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        onResponse: async (response, context) => {\n            //do something\n        },\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In with SSO by Domain\nDESCRIPTION: This code snippet demonstrates how to sign in with SSO using a domain. The `authClient.signIn.sso` method is called with the domain and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await authClient.signIn.sso({\n domain: \"example.com\",\n callbackURL: \"/dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Set User Role - Typescript\nDESCRIPTION: This code snippet demonstrates how to change the role of a user using the `setRole` method. It requires the user ID and the new role as parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst updatedUser = await authClient.admin.setRole({\n  userId: \"user_id_here\",\n  role: \"admin\", // this can also be an array for multiple roles (e.g. [\"admin\", \"sale\"])\n});\n```\n\n----------------------------------------\n\nTITLE: Using Auth Client on Server with Headers\nDESCRIPTION: Demonstrates how to use the auth client on the server by passing request headers to the getSession method via fetchOptions. This approach allows server components to access authentication data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"./auth-client\";\nimport { headers } from \"next/headers\";\n\nconst session = await authClient.getSession({\n    fetchOptions:{\n      headers: await headers()\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with MongoDB Adapter\nDESCRIPTION: This code snippet demonstrates how to set up Better Auth with MongoDB. It shows the process of establishing a MongoDB connection, creating a database instance, and configuring the authentication system to use MongoDB as the data store.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mongo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { MongoClient } from \"mongodb\";\nimport { mongodbAdapter } from \"better-auth/adapters/mongodb\";\n\nconst client = new MongoClient(\"mongodb://localhost:27017/database\");\nconst db = client.db();\n\nexport const auth = betterAuth({\n  database: mongodbAdapter(db),\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Required Tables for Better Auth\nDESCRIPTION: This command uses the Better Auth CLI to migrate the required database tables for the authentication system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/tanstack-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Imports for authorization logic\nDESCRIPTION: These import statements are required to use `APIError` and `createAuthMiddleware` which are necessary to implement the before hook that performs authorization. The `APIError` allows the API to respond with meaningful errors, such as `BAD_REQUEST` and the `createAuthMiddleware` function creates an authentication middleware with the correct typing.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APIError } from \"better-auth/api\";\nimport { createAuthMiddleware } from \"better-auth/plugins\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Auth Middleware in Nuxt\nDESCRIPTION: This snippet shows how to implement Better Auth middleware in a Nuxt application. It uses the useSession method to check the session status and redirects unauthenticated users from protected routes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"~/lib/auth-client\";\nexport default defineNuxtRouteMiddleware(async (to, from) => {\n\tconst { data: session } = await authClient.useSession(useFetch); \n\tif (!session.value) {\n\t\tif (to.path === \"/dashboard\") {\n\t\t\treturn navigateTo(\"/\");\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration for Better Auth\nDESCRIPTION: This snippet demonstrates how to run the database migration using the Better Auth CLI to add necessary fields and tables to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Better Auth CLI\nDESCRIPTION: Command to run database migrations with the Better Auth CLI. This checks your database and prompts you to add missing tables or update existing ones with new columns.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Client Plugin Configuration\nDESCRIPTION: Setup for the client-side authentication plugin with two-factor support\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { twoFactorClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [\n        twoFactorClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Handler to Hono Endpoint\nDESCRIPTION: This snippet demonstrates how to set up a Hono application and mount the Better Auth handler to handle authentication requests at the '/api/auth/*' route pattern.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { auth } from \"./auth\";\nimport { serve } from \"@hono/node-server\";\nimport { cors } from \"hono/cors\";\n\nconst app = new Hono();\n\napp.on([\"POST\", \"GET\"], \"/api/auth/*\", (c) => {\n\treturn auth.handler(c.req.raw);\n});\n\nserve(app);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Stripe Webhooks Locally using Stripe CLI\nDESCRIPTION: This command uses the Stripe CLI to listen for Stripe webhook events and forward them to a local development environment. It forwards the events to `localhost:3000/api/auth/stripe/webhook`, allowing developers to test webhook handling logic without deploying to a production environment.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to localhost:3000/api/auth/stripe/webhook\n```\n\n----------------------------------------\n\nTITLE: Getting the Session (TypeScript)\nDESCRIPTION: This snippet demonstrates how to get the session data without using the `useSession` hook. It uses the `getSession` method and handles the result.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\" // import the auth client // [!code highlight]\n\nconst { data: session, error } = await authClient.getSession()\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Email Functionality\nDESCRIPTION: Shows how to enable password reset functionality by implementing the sendResetPassword function, which sends an email with a reset link to users who've forgotten their password.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from 'better-auth';\nimport { sendEmail } from './email'; // your email sending function\n\nexport const auth = betterAuth({\n    emailAndPassword: {\n        enabled: true,\n        sendResetPassword: async ({ user, url, token }, request) => {\n            await sendEmail({\n                to: user.email,\n                subject: 'Reset your password',\n                text: `Click the link to reset your password: ${url}`\n            })\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit OAuth Scopes with better-auth\nDESCRIPTION: Extends the Reddit provider configuration to include custom OAuth scopes. This allows requesting additional permissions from users during authentication such as read access or submission capabilities.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/reddit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    socialProviders: {\n        reddit: {\n            clientId: process.env.REDDIT_CLIENT_ID as string,\n            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,\n            duration: \"permanent\",\n            scope: [\"read\", \"submit\"] // Add required scopes\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Session in .astro File\nDESCRIPTION: This code snippet shows how to access the session data within an `.astro` file using `Astro.locals`. It defines a `session` function that checks if `Astro.locals.session` exists. If it does, the function returns the session data; otherwise, it redirects the user to the login page using `Astro.redirect`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { UserCard } from \"@/components/user-card\";\n\nconst session = () => {\n    if (Astro.locals.session) {\n        return Astro.locals.session;\n    } else {\n        // Redirect to login page if the user is not authenticated\n        return Astro.redirect(\"/login\");\n    }\n}\n\n---\n\n<UserCard initialSession={session} />\n```\n\n----------------------------------------\n\nTITLE: Per-Request Rate Limit Error Handling\nDESCRIPTION: Example of handling rate limit errors for specific requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nawait authClient.signIn.email({\n    fetchOptions: {\n        onError: async (context) => {\n            const { response } = context;\n            if (response.status === 429) {\n                const retryAfter = response.headers.get(\"X-Retry-After\");\n                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);\n            }\n        },\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing One-Time Token Plugin in Better Auth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and configure the One-Time Token plugin in the Better Auth setup. It shows the basic structure for adding the plugin to the auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { oneTimeToken } from \"better-auth/plugins/one-time-token\";\n\nexport const auth = betterAuth({\n    plugins: [\n      oneTimeToken()\n    ]\n    // ... other auth config\n});\n```\n\n----------------------------------------\n\nTITLE: Unban User - Typescript\nDESCRIPTION: This code snippet demonstrates how to unban a user using the `unbanUser` method. It requires the user ID as a parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst unbannedUser = await authClient.admin.unbanUser({\n  userId: \"user_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Team\nDESCRIPTION: This snippet demonstrates updating the details of an existing team using `authClient.organization.updateTeam`. It requires the `teamId` and a `data` object containing the fields to update (e.g., `name`).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst updatedTeam = await authClient.organization.updateTeam({\n    teamId: \"team-id\",\n    data: {\n        name: \"Updated Team Name\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: List User's Organizations (Vue)\nDESCRIPTION: This Vue code snippet demonstrates how to list a user's organizations using the `authClient.useListOrganizations` hook. It uses Vue's reactivity system to display a loading message, a \"no organizations found\" message, or a list of organization names based on the state of the `organizations` data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">;\nexport default {\n    setup() {\n        const organizations = authClient.useListOrganizations()\n        return { organizations };\n    }\n};\n</script>\n\n<template>\n    <div>\n        <h1>Organizations</h1>\n        <div v-if=\"organizations.isPending\">Loading...</div>\n        <div v-else-if=\"organizations.data === null\">No organizations found.</div>\n        <ul v-else>\n            <li v-for=\"organization in organizations.data\" :key=\"organization.id\">\n                {{ organization.name }}\n            </li>\n        </ul>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection with Better Auth in TypeScript\nDESCRIPTION: Demonstrates how to set up a MySQL connection pool and integrate it with Better Auth. Uses mysql2/promise for the database connection and requires MySQL credentials for configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mysql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { createPool } from \"mysql2/promise\";\n\nexport const auth = betterAuth({\n  database: createPool({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"password\",\n    database: \"database\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Remix Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up route handlers in a Remix application using Better Auth. It imports the `auth` object and defines both `loader` and `action` functions, which both call `auth.handler` to handle authentication requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '~/lib/auth.server' // Adjust the path as necessary\nimport type { LoaderFunctionArgs, ActionFunctionArgs } from \"@remix-run/node\"\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n    return auth.handler(request)\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n    return auth.handler(request)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum OTP Verification Attempts\nDESCRIPTION: Sets the maximum number of attempts allowed for verifying an OTP. After exceeding this limit, the OTP becomes invalid and the user needs to request a new one.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        emailOTP({\n            maxAttempts: 5, // Allow 5 attempts before invalidating the OTP\n            expiresIn: 300\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Fetch Options to Auth Client Functions\nDESCRIPTION: Demonstrates two ways to provide fetch options when calling Better Auth client functions, either as a second argument or as a property in the main options object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.email({\n    email: \"email@email.com\",\n    password: \"password1234\",\n}, {\n    onSuccess(ctx) {\n            //      \n    }\n})\n\n//or\n\nawait authClient.signIn.email({\n    email: \"email@email.com\",\n    password: \"password1234\",\n    fetchOptions: {\n        onSuccess(ctx) {\n            //      \n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Feature\nDESCRIPTION: TypeScript configuration for enabling teams/sub-organizations functionality within organizations\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = betterAuth({\n  plugins: [\n    organization({\n      teams: {\n        enabled: true,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: List Users - Typescript\nDESCRIPTION: This code snippet shows how an admin can list users using the `listUsers` method. It includes options for limiting the number of users returned.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await authClient.admin.listUsers({\n  query: {\n    limit: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Teams in the Client Plugin\nDESCRIPTION: This snippet demonstrates enabling the teams feature in the Better Auth organization plugin on the client-side.  It configures the `organizationClient` plugin with the `teams` option set to `{ enabled: true }`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { organizationClient } from \"better-auth/client/plugins\"\n\nexport const authClient = createAuthClient({\n    plugins: [\n        organizationClient({\n            teams: {\n                enabled: true\n            }\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Better Auth User Schema\nDESCRIPTION: Shows how to extend the default user schema in Better Auth with additional fields that are automatically inferred in TypeScript.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        schema: {\n            user: {\n                fields: {\n                    age: {\n                        type: \"number\",\n                    },\n                },\n            },\n        },\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: OTP Configuration Setup\nDESCRIPTION: Server-side configuration for One-Time Password (OTP) functionality including send method implementation\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { twoFactor } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        twoFactor({\n          \totpOptions: {\n\t\t\t\tasync sendOTP({ user, otp }, request) {\n                    // send otp to user\n\t\t\t\t},\n\t\t\t},\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Subdomain Cookies in Better Auth\nDESCRIPTION: Code example for configuring Better Auth to share cookies across subdomains by setting the crossSubDomainCookies and defaultCookieAttributes options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    advanced: {\n        crossSubDomainCookies: {\n            enabled: true,\n            domain: \".example.com\", // Domain with a leading period\n        },\n        defaultCookieAttributes: {\n            secure: true,\n            httpOnly: true,\n            sameSite: \"none\",  // Allows CORS-based cookie sharing across subdomains\n            partitioned: true, // New browser standards will mandate this for foreign cookies\n        },\n    },\n    trustedOrigins: [\n        'https://example.com',\n        'https://app1.example.com',\n        'https://app2.example.com',\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Migrate Database Schema\nDESCRIPTION: This command uses the Better Auth CLI to directly create the required tables in the database. This command is only available for the built-in Kysely adapter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Custom Domain Configuration - Better Auth TypeScript\nDESCRIPTION: Configuration example for setting a custom email domain for anonymous users\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        anonymous({\n            emailDomainName: \"example.com\"\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing authorization logic with hooks\nDESCRIPTION: This code snippet demonstrates how to implement authorization logic using Better Auth's hooks. It adds a `before` hook that intercepts requests to the `/sign-up/email` path and checks if the user's provided birthday indicates they are older than 5 years. If not, it throws an `APIError` to prevent the signup process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const birthdayPlugin = () => ({\n    //...\n    // In our case, we want to write authorization logic,\n    // meaning we want to intercept it `before` hand.\n    hooks: {\n      before: [\n        {\n          matcher: (context) => /* ... */,\n          handler: createAuthMiddleware(async (ctx) => {\n            //...\n          }),\n        },\n      ],\n    },\n} satisfies BetterAuthPlugin)\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Database Hooks in Better Auth\nDESCRIPTION: This snippet illustrates how to throw errors using the APIError class in database hooks. It shows a 'before' hook that checks a condition and throws an error if it's not met, preventing the user creation process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { APIError } from \"better-auth/api\";\n\nexport const auth = betterAuth({\n  databaseHooks: {\n    user: {\n      create: {\n        before: async (user, ctx) => {\n          if (user.isAgreedToTerms === false) {\n            // Your special condition.\n            // Send the API error.\n            throw new APIError(\"BAD_REQUEST\", {\n              message: \"User must agree to the TOS before signing up.\",\n            });\n          }\n          return {\n            data: user,\n          };\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Server Dependencies\nDESCRIPTION: Command to install the Better Auth package and Expo plugin for the server application. This step is crucial for setting up the authentication backend.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n@better-auth/expo better-auth\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth Nuxt Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Better Auth Nuxt example. Requires setting up environment variables from .env.example first.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth Proxy Plugin in Better Auth Configuration\nDESCRIPTION: Code snippet showing how to add the OAuth Proxy plugin to a Better Auth configuration. This is the first step to enable OAuth request proxying in your application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oauth-proxy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { oAuthProxy } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        oAuthProxy(), // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Authorize Reference Implementation - Typescript\nDESCRIPTION: This snippet illustrates how to implement the `authorizeReference` function within the subscription options. This function is used to check if a user has the necessary permissions to manage subscriptions for a given reference ID (e.g., an organization). It verifies if the user is an 'owner' role for the organization before authorizing actions like upgrading, canceling, or restoring a subscription.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription: {\n    // ... other options\n    authorizeReference: async ({ user, session, referenceId, action }) => {\n        // Check if the user has permission to manage subscriptions for this reference\n        if (action === \"upgrade-subscription\" || action === \"cancel-subscription\" || action === \"restore-subscription\") {\n            const org = await db.member.findFirst({\n                where: {\n                    organizationId: referenceId,\n                    userId: user.id\n                }\n            });\n            return org?.role === \"owner\"\n        }\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating State Atoms in Better Auth Client Plugin\nDESCRIPTION: Demonstrates how to provide reactive state atoms in a client plugin using nanostores, which can be consumed by framework-specific hooks.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { atom } from \"nanostores\";\nimport type { BetterAuthClientPlugin } from \"better-auth/client\";\n\nconst myPluginClient = {\n    id: \"my-plugin\",\n    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,\n    getAtoms: ($fetch)=>{\n        const myAtom = atom<null>()\n        return {\n            myAtom\n        }\n    }\n} satisfies BetterAuthClientPlugin\n```\n\n----------------------------------------\n\nTITLE: Add Passkey Client Plugin\nDESCRIPTION: This snippet demonstrates how to add the passkey client plugin to your Better Auth client configuration. It imports the `passkeyClient` plugin and includes it in the `plugins` array when creating the auth client. This enables passkey authentication on the client side. Dependencies: better-auth/client, better-auth/client/plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { passkeyClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [ // [!code highlight]\n        passkeyClient() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema\nDESCRIPTION: This command uses the Better Auth CLI to generate the database schema. This can be used to manually add the necessary fields and tables to the database if you prefer not to run migrations automatically.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: React QR Code Implementation\nDESCRIPTION: React component implementation for displaying TOTP QR code\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport QRCode from \"react-qr-code\";\n\nexport default function UserCard(){\n    const { data: session } = client.useSession();\n\tconst { data: qr } = useQuery({\n\t\tqueryKey: [\"two-factor-qr\"],\n\t\tqueryFn: async () => {\n\t\t\tconst res = await authClient.twoFactor.getTotpUri();\n\t\t\treturn res.data;\n\t\t},\n\t\tenabled: !!session?.user.twoFactorEnabled,\n\t});\n    return (\n        <QRCode value={qr?.totpURI || \"\"} />\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Invitations\nDESCRIPTION: This snippet demonstrates how to list invitations using `authClient.organization.listInvitations`. It accepts an optional `organizationId` in the `query` parameter; if omitted, it defaults to the active organization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst invitations = await authClient.organization.listInvitations({\n    query: {\n        organizationId: \"organization-id\" // optional, by default it will use the active organization\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook in Svelte\nDESCRIPTION: Example of using the useSession hook in a Svelte component to manage user authentication, display user data, and implement sign-in/sign-out functionality.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\nimport { client } from \"$lib/client\";\nconst session = client.useSession();\n</script>\n\n<div\n    style=\"display: flex; flex-direction: column; gap: 10px; border-radius: 10px; border: 1px solid #4B453F; padding: 20px; margin-top: 10px;\"\n>\n    <div>\n    {#if $session}\n        <div>\n        <p>\n            {$session?.data?.user.name}\n        </p>\n        <p>\n            {$session?.data?.user.email}\n        </p>\n        <button\n            on:click={async () => {\n            await authClient.signOut();\n            }}\n        >\n            Signout\n        </button>\n        </div>\n    {:else}\n        <button\n        on:click={async () => {\n            await authClient.signIn.social({\n            provider: \"github\",\n            });\n        }}\n        >\n        Continue with GitHub\n        </button>\n    {/if}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Schema Generation Command for Better Auth with PostgreSQL\nDESCRIPTION: CLI command to generate a PostgreSQL database schema based on the Better Auth configuration and plugins. This command creates the necessary tables and relationships in your database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/postgresql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Generating Better Auth models in Prisma schema\nDESCRIPTION: Command to update the Prisma schema with Better Auth's required models using the Better Auth CLI tool.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate --config server/utils/auth.ts\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Schema Migration Command with Better Auth CLI\nDESCRIPTION: Command for migrating an existing SQLite database schema to match the current Better Auth configuration and plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Initiating the server plugin\nDESCRIPTION: This code snippet demonstrates how to initiate the server plugin within the `server.ts` file. It imports the `birthdayPlugin` and adds it to the `plugins` array when initializing `betterAuth`. This activates the plugin's functionality on the server side.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { birthdayPlugin } from \"./birthday-plugin\";// [!code highlight]\n \nexport const auth = betterAuth({\n    plugins: [\n      birthdayPlugin(),// [!code highlight]\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Error Callbacks in Better Auth Client\nDESCRIPTION: Demonstrates how to use the onError callback in fetch options to handle errors when making authentication requests with Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.email({\n    email: \"email@email.com\",\n    password: \"password1234\",\n}, {\n    onError(ctx) {\n        //handle error\n    }\n})\n\n//or\nawait authClient.signIn.email({\n    email: \"email@email.com\",\n    password: \"password1234\",\n    fetchOptions: {\n        onError(ctx) {\n            //handle error\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Handler in Elysia\nDESCRIPTION: Basic setup for integrating Better Auth handler with an Elysia server instance. Mounts the auth handler and starts the server on port 3000.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/elysia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\nimport { auth } from \"./auth\";\n\nconst app = new Elysia().mount(auth.handler).listen(3000);\n\nconsole.log(\n  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in Better Auth Client for Expo\nDESCRIPTION: This snippet demonstrates how to configure the Better Auth client for an Expo application with caching disabled. By default, the client caches session data in SecureStore, but this option allows disabling that behavior.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\n\nconst authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\",\n    disableCache: true\n});\n```\n\n----------------------------------------\n\nTITLE: Authorization logic using createAuthMiddleware\nDESCRIPTION: This code snippet shows the actual authorization logic within the `createAuthMiddleware` function. It extracts the `birthday` from the request body, validates that it's a Date object, and then checks if the user is at least 5 years old. If not, an `APIError` is thrown.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  //...\n  handler: createAuthMiddleware(async (ctx) => {\n    const { birthday } = ctx.body;\n    if(!birthday instanceof Date) {\n      throw new APIError(\"BAD_REQUEST\", { message: \"Birthday must be of type Date.\" });\n    }\n\n    const today = new Date();\n    const fiveYearsAgo = new Date(today.setFullYear(today.getFullYear() - 5));\n\n    if(birthday >= fiveYearsAgo) {\n      throw new APIError(\"BAD_REQUEST\", { message: \"User must be above 5 years old.\" });\n    }\n\n    return { context: ctx };\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTP Length and Expiration Time\nDESCRIPTION: Customizes the OTP length and expiration time. This example sets an 8-digit OTP that expires after 600 seconds (10 minutes).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/email-otp.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        emailOTP({\n            otpLength: 8,\n            expiresIn: 600\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Adapter Methods\nDESCRIPTION: Basic structure for implementing essential database operations like create, update, and delete.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAdapter = (config: CustomAdapterConfig = {}) =>\n  createAdapter({\n    config: {\n      // ...\n    },\n    adapter: ({}) => {\n      return {\n        create: async ({ data, model, select }) => {\n          // ...\n        },\n        update: async ({ data, model, select }) => {\n          // ...\n        },\n        updateMany: async ({ data, model, select }) => {\n          // ...\n        },\n        delete: async ({ data, model, select }) => {\n          // ...\n        },\n        // ...\n      };\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Better Auth Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an auth client, define custom error messages, and handle error translations. It includes a function to get localized error messages based on error codes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst authClient = createAuthClient();\n\ntype ErrorTypes = Partial<\n\tRecord<\n\t\tkeyof typeof client.$ERROR_CODES,\n\t\t{\n\t\t\ten: string;\n\t\t\tes: string;\n\t\t}\n\t>\n>;\n\nconst errorCodes = {\n\tUSER_ALREADY_EXISTS: {\n\t\ten: \"user already registered\",\n\t\tes: \"usuario ya registrada\",\n\t},\n} satisfies ErrorTypes;\n\nconst getErrorMessage = (code: string, lang: \"en\" | \"es\") => {\n\tif (code in errorCodes) {\n\t\treturn errorCodes[code as keyof typeof errorCodes][lang];\n\t}\n\treturn \"\";\n};\n\n\nconst { error } = await authClient.signUp.email({\n\temail: \"user@email.com\",\n\tpassword: \"password\",\n\tname: \"User\",\n});\nif(error?.code){\n    alert(getErrorMessage(error.code), \"en\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Numeric ID Tests for Better Auth Adapter\nDESCRIPTION: Example of implementing additional tests specifically for numeric ID support in a Better Auth adapter. This test suite verifies that the adapter correctly handles numeric IDs if the database supports them.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test, describe } from \"vitest\";\nimport { runNumberIdAdapterTest } from \"better-auth/adapters/test\";\nimport { myAdapter } from \"./my-adapter\";\n\ndescribe(\"My Adapter Numeric ID Tests\", async () => {\n  afterAll(async () => {\n    // Run DB cleanup here...\n  });\n  const adapter = myAdapter({\n    debugLogs: { // If your adapter config allows passing in debug logs, then pass this here.\n\t\t\tisRunningAdapterTests: true, // This is our super secret flag to let us know to only log debug logs if a test fails.\n\t\t}\n  });\n\n  await runNumberIdAdapterTest({\n    getAdapter: async (betterAuthOptions = {}) => {\n      return adapter(betterAuthOptions);\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Captcha Plugin in Better Auth\nDESCRIPTION: Shows how to initialize and configure the captcha plugin in the auth configuration file. The example demonstrates setting up Cloudflare Turnstile as the captcha provider with a secret key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/captcha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { captcha } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        captcha({\n            provider: \"cloudflare-turnstile\", // or google-recaptcha, hcaptcha\n            secretKey: process.env.TURNSTILE_SECRET_KEY!,\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: List Subscriptions for an Organization\nDESCRIPTION: This code snippet demonstrates how to list subscriptions for a specific organization using the custom `referenceId` in the query parameters. This retrieves all subscriptions associated with the specified organization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// List subscriptions for an organization\nconst { data: subscriptions } = await client.subscription.list({\n    query: {\n        referenceId: \"org_123456\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side One Tap Authentication in TypeScript\nDESCRIPTION: Sets up the One Tap server plugin in the Better Auth configuration. This snippet shows how to initialize the server-side component of the One Tap authentication system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { oneTap } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    oneTap(), // Add the One Tap server plugin\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema\nDESCRIPTION: Command to apply the Better Auth schema directly to the database when using the Kysely adapter. For other adapters, ORM-specific migration tools should be used.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Migrating MSSQL Schema with Better Auth CLI\nDESCRIPTION: This command uses the Better Auth CLI to migrate the existing database schema for Microsoft SQL Server based on changes in the Better Auth configuration and plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mssql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: List API Keys Result Type (TS)\nDESCRIPTION: Defines the TypeScript type for the result of listing API keys, specifying it as an array of `ApiKey` objects.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Result = ApiKey[]\n```\n\n----------------------------------------\n\nTITLE: Manually Verifying Email with Token\nDESCRIPTION: Illustrates how to manually verify a user's email by calling the verifyEmail function with the verification token, useful for custom verification flows.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nauthClient.verifyEmail({\n    query: {\n        token: \"\" // Pass the token here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Check Organization Slug Availability (TypeScript)\nDESCRIPTION: This code demonstrates how to check if an organization slug is already taken using the `authClient.organization.checkSlug` method. It takes an object with the `slug` property, representing the slug to be checked. This is used to prevent duplicate slugs in the system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.organization.checkSlug({\n    slug: \"my-org\",\n});\n```\n\n----------------------------------------\n\nTITLE: Elysia Route Handler Setup\nDESCRIPTION: This snippet configures Better Auth in an Elysia application.  It defines a view function `betterAuthView` which validates the HTTP method and calls `auth.handler` if the method is GET or POST. It then mounts this function to the `/api/auth/*` route using `app.all`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia, Context } from \"elysia\";\nimport { auth } from \"./auth\";\n\nconst betterAuthView = (context: Context) => {\n    const BETTER_AUTH_ACCEPT_METHODS = [\"POST\", \"GET\"]\n    // validate request method\n    if(BETTER_AUTH_ACCEPT_METHODS.includes(context.request.method)) {\n        return auth.handler(context.request);\n    } else {\n        context.error(405)\n    }\n}\n\nconst app = new Elysia().all(\"/api/auth/*\", betterAuthView).listen(3000);\n\nconsole.log(\n`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring Email Verification for User Login\nDESCRIPTION: Configures Better Auth to require email verification before users can log in. This ensures users must verify their email addresses to access the application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/email.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    emailAndPassword: {\n        requireEmailVerification: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Building Remix Production Bundle\nDESCRIPTION: Command to build the application for production deployment, generating optimized assets\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/remix-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Session\nDESCRIPTION: This code shows how to switch the currently active session to a different one by passing the session token to the setActive method of the multiSession client plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.multiSession.setActive({\n    sessionToken: \"session-token\"\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Captcha Protection\nDESCRIPTION: TypeScript configuration for adding Captcha protection to authentication flows using either Google reCAPTCHA or Cloudflare Turnstile\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { captcha } from \"better-auth/plugins\";\n\nconst auth = betterAuth({\n  plugins: [\n    captcha({\n      provider: \"cloudflare-turnstile\",\n      secretKey: process.env.TURNSTILE_SECRET_KEY!,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with Drizzle Adapter\nDESCRIPTION: Example of setting up Better Auth with Drizzle ORM adapter, including database provider configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/drizzle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"./database.ts\";\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"sqlite\", // or \"pg\" or \"mysql\"\n  }),\n  //... the rest of your config\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with reactStartCookies Plugin\nDESCRIPTION: This code configures the Better Auth instance with the reactStartCookies plugin. This plugin automatically handles cookie setting for TanStack Start when using authentication functions that need to set cookies.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/tanstack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { reactStartCookies } from \"better-auth/react-start\";\n\nexport const auth = betterAuth({\n    //...your config\n    plugins: [reactStartCookies()] // make sure this is the last plugin in the array\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Better Auth Plugin\nDESCRIPTION: Shows the minimal implementation of a Better Auth plugin with a unique identifier. Demonstrates the basic plugin structure using the BetterAuthPlugin interface.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BetterAuthPlugin } from \"better-auth\";\n\nexport const myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Type Inference for Custom Session in Better Auth Client\nDESCRIPTION: This snippet shows how to set up type inference for custom session data on the client side using the customSessionClient plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customSessionClient } from \"better-auth/client/plugins\";\nimport type { auth } from \"@/lib/auth\"; // Import the auth instance as a type\n\nconst authClient = createAuthClient({\n    plugins: [customSessionClient<typeof auth>()],\n});\n\nconst { data } = await authClient.useSession();\nconst { data: sessionData } = await authClient.getSession();\n// data.roles\n// data.user.newField\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Astro Example Project\nDESCRIPTION: Commands for installing dependencies and starting the development server for the Better Auth Astro example. Uses pnpm as the package manager.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/astro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Handler for Better Auth\nDESCRIPTION: Sets up the server-side handler for Better Auth integration with SvelteKit hooks. This code mounts the authentication handler to process authentication requests and sessions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/svelte-kit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"$lib/auth\";\nimport { svelteKitHandler } from \"better-auth/svelte-kit\";\n\nexport async function handle({ event, resolve }) {\n\treturn svelteKitHandler({ event, resolve, auth });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Provider in Better Auth\nDESCRIPTION: Code snippet showing how to configure the Zoom provider in the Better Auth setup. It includes setting the client ID and client secret as environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/zoom.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n  socialProviders: {\n    zoom: {\n      clientId: process.env.ZOOM_CLIENT_ID as string,\n      clientSecret: process.env.ZOOM_CLIENT_SECRET as string,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Package\nDESCRIPTION: Command to install the Better Auth library using PNPM package manager\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/better-auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install better-auth\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Accounts to Existing Users\nDESCRIPTION: Initiates the account linking flow to connect an OAuth provider account to an existing authenticated user. This allows users to sign in with multiple methods using the same account.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.oauth2.link({\n  providerId: \"provider-id\",\n  callbackURL: \"/dashboard\" // the path to redirect to after the account is linked\n});\n```\n\n----------------------------------------\n\nTITLE: Set Password for Credential-Based Account (Typescript)\nDESCRIPTION: This code demonstrates how to set a password for a credential-based account (e.g., email/password) using the `setPassword` method on the Better Auth API. This method is designed to be called from the server, not the client, for security reasons.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.api.setPassword({\n    headers: /* headers containing the user's session token */,\n    password: /* new password */\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret Key (Bash)\nDESCRIPTION: This snippet provides a bash command to generate a secure random secret key using OpenSSL. This is recommended for the `secret` configuration option in production environments.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Auth for Extension Integration\nDESCRIPTION: TypeScript code for configuring the Better Auth server to trust the browser extension's origin for cross-origin requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { auth } from \"@/auth/auth\"\n\nexport const auth = betterAuth({\n    trustedOrigins: [\"chrome-extension://YOUR_EXTENSION_ID\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth Next.js Example\nDESCRIPTION: Commands to set up and run the Better Auth Next.js example locally. This involves installing dependencies with pnpm and starting the development server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/next-js.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Client with Svelte\nDESCRIPTION: Initializes a Svelte-specific Better Auth client instance by specifying the base URL of the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/svelte\"\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Database Adapter in TypeScript\nDESCRIPTION: Basic setup for creating a custom database adapter with type definitions and initial configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAdapter, type AdapterDebugLogs } from \"better-auth/adapters\";\n\ninterface CustomAdapterConfig {\n  debugLogs?: AdapterDebugLogs;\n  usePlural?: boolean;\n}\n\nexport const myAdapter = (config: CustomAdapterConfig = {}) =>\n  createAdapter({\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration\nDESCRIPTION: This code snippet shows how to run a database migration using the Better Auth CLI. This command updates the database schema to include the necessary fields and tables for SSO functionality.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth Plugin with Conditional Schema Migration\nDESCRIPTION: Demonstrates how to configure schema migration conditions in a Better Auth plugin based on storage provider settings.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = (opts: PluginOptions)=>{\n    return {\n        id: \"my-plugin\",\n        schema: {\n            rateLimit: {\n                fields: {\n                    key: {\n                        type: \"string\",\n                    },\n                },\n                disableMigration: opts.storage.provider !== \"database\",\n            },\n        },\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Account Linking Configuration - Better Auth TypeScript\nDESCRIPTION: Configuration for handling account linking between anonymous and authenticated users\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        anonymous({\n            onLinkAccount: async ({ anonymousUser, newUser }) => {\n               // perform actions like moving the cart items from anonymous user to the new user\n            }\n        })\n    ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmo Project with TailwindCSS\nDESCRIPTION: Command to create a new Plasmo project with TailwindCSS support and a src directory structure.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create plasmo --with-tailwindcss --with-src\n```\n\n----------------------------------------\n\nTITLE: Verifying Phone Number with OTP\nDESCRIPTION: Implementation for verifying a phone number using the received OTP code.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isVerified = await authClient.phoneNumber.verify({\n    phoneNumber: \"+1234567890\",\n    code: \"123456\"\n})\n```\n\n----------------------------------------\n\nTITLE: Generic OAuth Configuration Interface\nDESCRIPTION: Defines the configuration options available for each OAuth provider. This interface supports both standard OAuth 2.0 and OpenID Connect providers with options for custom endpoints, scopes, and user data handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericOAuthConfig {\n  providerId: string;\n  discoveryUrl?: string;\n  authorizationUrl?: string;\n  tokenUrl?: string;\n  userInfoUrl?: string;\n  clientId: string;\n  clientSecret: string;\n  scopes?: string[];\n  redirectURI?: string;\n  responseType?: string;\n  prompt?: string;\n  pkce?: boolean;\n  accessType?: string;\n  getUserInfo?: (tokens: OAuth2Tokens) => Promise<User | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Methods in Better Auth Client Plugin\nDESCRIPTION: Demonstrates how to create a client-side plugin configuration with custom path methods. The example shows setting up a plugin with a specific POST method for a route, using TypeScript type definitions and satisfies operator.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BetterAuthClientPlugin } from \"better-auth/client\";\nimport type { myPlugin } from \"./plugin\";\n\nconst myPluginClient = {\n    id: \"my-plugin\",\n    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,\n    pathMethods: {\n        \"/my-plugin/hello-world\": \"POST\"\n    }\n} satisfies BetterAuthClientPlugin\n```\n\n----------------------------------------\n\nTITLE: Verifying One-Time Token on Server (TypeScript)\nDESCRIPTION: This code shows how to verify a one-time token on the server side. It retrieves the token from the request query and uses the auth.api.verifyOneTimeToken method to validate it.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-time-token.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = request.query.token as string; //retrieve a token\nconst response = await auth.api.verifyOneTimeToken({\n    body: {\n        token\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Better Auth Client Plugin\nDESCRIPTION: Shows how to create a minimal client plugin that can be used with the Better Auth system, requiring only an ID property.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BetterAuthClientPlugin } from \"better-auth\";\n\nexport const myPluginClient = ()=>{\n    return {\n        id: \"my-plugin\",\n    } satisfies BetterAuthClientPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth Remix Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Better Auth Remix example project. Requires setting up environment variables before running.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/remix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client Instance\nDESCRIPTION: TypeScript code that creates and configures the Better Auth client for use in the browser extension.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\"\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" /* Base URL of your Better Auth backend. */,\n    plugins: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling strictNullChecks for Better Auth\nDESCRIPTION: Demonstrates how to enable just the strictNullChecks TypeScript option in tsconfig.json when full strict mode cannot be enabled. This is the minimum requirement for Better Auth's type safety features.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strictNullChecks\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Better Auth in Hono\nDESCRIPTION: This snippet shows how to configure CORS settings for Better Auth integration, including setting the origin, allowed headers, methods, exposed headers, and credentials options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { auth } from \"./auth\";\nimport { serve } from \"@hono/node-server\";\nimport { cors } from \"hono/cors\";\n \nconst app = new Hono();\n\napp.use(\n\t\"/api/auth/*\", // or replace with \"*\" to enable cors for all routes\n\tcors({\n\t\torigin: \"http://localhost:3001\", // replace with your origin\n\t\tallowHeaders: [\"Content-Type\", \"Authorization\"],\n\t\tallowMethods: [\"POST\", \"GET\", \"OPTIONS\"],\n\t\texposeHeaders: [\"Content-Length\"],\n\t\tmaxAge: 600,\n\t\tcredentials: true,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Admin User IDs Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to specify specific user IDs that should be considered administrators, regardless of their assigned role.  The `adminUserIds` option takes an array of user IDs.  Users in this list bypass role-based permission checks and are granted full admin privileges.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n    adminUserIds: [\"user_id_1\", \"user_id_2\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a user schema for the plugin\nDESCRIPTION: This code snippet extends the basic server plugin by adding a schema definition for the `user` model. It defines a `birthday` field with a `date` type, marking it as required, non-unique, and without any references. This schema will be used by Better Auth's CLI to generate database schemas.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//...\nexport const birthdayPlugin = () =>\n  ({\n    id: \"birthdayPlugin\",\n    schema: {// [!code highlight]\n      user: {// [!code highlight]\n        fields: {// [!code highlight]\n          birthday: {// [!code highlight]\n            type: \"date\", // string, number, boolean, date // [!code highlight]\n            required: true, // if the field should be required on a new record. (default: false) // [!code highlight]\n            unique: false, // if the field should be unique. (default: false) // [!code highlight]\n            references: null // if the field is a reference to another table. (default: null) // [!code highlight]\n          },// [!code highlight]\n        },// [!code highlight]\n      },// [!code highlight]\n    },\n  } satisfies BetterAuthPlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth 1.2.0\nDESCRIPTION: Final installation command for Better Auth version 1.2.0\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_7\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install better-auth@1.2.0\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Production Server\nDESCRIPTION: Command to start the application in production mode after building\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/remix-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Sign-In Flow\nDESCRIPTION: Starts the OAuth authentication process by redirecting the user to the provider's authorization page. The callbackURL parameter specifies where to redirect after successful authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.signIn.oauth2({\n  providerId: \"provider-id\",\n  callbackURL: \"/dashboard\" // the path to redirect to after the user is authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Consent Page for OIDC Provider in TypeScript\nDESCRIPTION: This code shows how to customize the consent screen by providing a consentPage option during the initialization of the OIDC provider plugin. It allows specifying a custom path for the consent page.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    plugins: [oidcProvider({\n        consentPage: \"/path/to/consent/page\"\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Calling API Endpoints with Body, Headers, and Query Parameters in TypeScript\nDESCRIPTION: This snippet illustrates how to call different API endpoints with various parameter types such as body, headers, and query. It shows the correct structure for passing these parameters to the API calls.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.api.getSession({\n    headers: headers()\n})\n\nawait auth.api.signInEmail({\n    body: {\n        email: \"john@doe.com\",\n        password: \"password\"\n    },\n    headers: headers() // optional but would be useful to get the user IP, user agent, etc.\n})\n\nawait auth.api.verifyEmail({\n    query: {\n        token: \"my_token\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Per-Request Bearer Token Usage in TypeScript\nDESCRIPTION: This code shows how to provide a Bearer token for individual requests when using the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await authClient.listSessions({\n    fetchOptions: {\n        headers: {\n            Authorization: `Bearer ${token}`\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Client with Solid\nDESCRIPTION: Initializes a Solid-specific Better Auth client instance by specifying the base URL of the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/solid\"\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in Remix\nDESCRIPTION: This snippet shows how to retrieve session data within a Remix loader function. It accesses the request headers from the `LoaderFunctionArgs` and passes them to the `auth.api.getSession` method. The session data is then returned in a JSON response.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"lib/auth\"; // path to your Better Auth server instance\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n    const session = await auth.api.getSession({\n        headers: request.headers\n    })\n\n    return json({ session })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Open API Plugin in Better Auth Configuration\nDESCRIPTION: This snippet shows how to add the Open API plugin to the Better Auth configuration. It imports the necessary components and adds the plugin to the auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/open-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { openAPI } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        openAPI(),\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Login Page for OIDC Provider in TypeScript\nDESCRIPTION: This code shows how to set a custom login page for the OIDC provider by specifying the loginPage option during plugin initialization. It allows redirecting users to a specific sign-in page.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    plugins: [oidcProvider({\n        loginPage: \"/sign-in\"\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Matcher for signup path\nDESCRIPTION: This code snippet shows the matcher function used in the `before` hook to target requests specifically to the `/sign-up/email` path.  The matcher is used to determine if the hook's handler function should be executed.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  matcher: (context) => context.path.startsWith(\"/sign-up/email\"),\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications on User Registration with After Hook in TypeScript\nDESCRIPTION: This after hook example demonstrates how to send a notification when a new user registers. It checks if a new session was created after a sign-up endpoint is executed and then triggers a notification with the user's name.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { createAuthMiddleware } from \"better-auth/api\";\nimport { sendMessage } from \"@/lib/notification\"\n\nexport const auth = betterAuth({\n    hooks: {\n        after: createAuthMiddleware(async (ctx) => {\n            if(ctx.path.startsWith(\"/sign-up\")){\n                const newSession = ctx.context.newSession;\n                if(newSession){\n                    sendMessage({\n                        type: \"user-register\",\n                        name: newSession.user.name,\n                    })\n                }\n            }\n        }),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Revoking a Single Session\nDESCRIPTION: This snippet demonstrates how to revoke a specific session by its token. It calls the revoke method of the multiSession client plugin with the sessionToken parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.multiSession.revoke({\n    sessionToken: \"session-token\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using Social Sign-In with OAuth Proxy\nDESCRIPTION: Example of initiating a social sign-in with the OAuth Proxy plugin. The plugin automatically overrides the callbackURL to route through the proxy endpoint before redirecting to the intended destination.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oauth-proxy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.social({\n    provider: \"github\",\n    callbackURL: \"/dashboard\" // the plugin will override this to something like \"http://localhost:3000/api/auth/oauth-proxy?callbackURL=/dashboard\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic OAuth Plugin in Auth Config\nDESCRIPTION: This snippet shows how to add the Generic OAuth plugin to your auth configuration. It includes setting up the provider ID, client credentials, and discovery URL for authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { genericOAuth } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        genericOAuth({ // [!code highlight]\n            config: [ // [!code highlight]\n                { // [!code highlight]\n                    providerId: \"provider-id\", // [!code highlight]\n                    clientId: \"test-client-id\", // [!code highlight]\n                    clientSecret: \"test-client-secret\", // [!code highlight]\n                    discoveryUrl: \"https://auth.example.com/.well-known/openid-configuration\", // [!code highlight]\n                    // ... other config options // [!code highlight]\n                }, // [!code highlight]\n                // Add more providers as needed // [!code highlight]\n            ] // [!code highlight]\n        }) // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client for Database Connection\nDESCRIPTION: Install the 'pg' package to connect to your PostgreSQL database for the migration process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg\n```\n\n----------------------------------------\n\nTITLE: TOTP Code Verification\nDESCRIPTION: Verification of Time-based One-Time Password (TOTP) codes\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.twoFactor.verifyTotp({\n    code: \"\" // user input\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth 1.2\nDESCRIPTION: Command to install the latest version 1.2 of Better Auth package\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install better-auth@1.2\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cookie Names and Attributes in Better Auth\nDESCRIPTION: This example demonstrates how to customize cookie names and attributes for the session token and other cookies used by Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    advanced: {\n        cookies: {\n            session_token: {\n                name: \"custom_session_token\",\n                attributes: {\n                    // Set custom cookie attributes\n                }\n            },\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling One Tap Prompt Dismissals with Notification Callback\nDESCRIPTION: Implements handling for One Tap prompt dismissals using exponential backoff and provides a notification callback for alternative UI rendering.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nauthClient.oneTap({\n  onPromptNotification: (notification) => {\n    console.warn(\"Prompt was dismissed or skipped. Consider displaying an alternative sign-in option.\", notification);\n    // Render your alternative UI here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom OAuth Redirect URL\nDESCRIPTION: Example of the OAuth Redirect URL to be set in the Zoom App settings. This URL should point to the callback endpoint of your application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/zoom.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000/api/auth/callback/zoom\n```\n\n----------------------------------------\n\nTITLE: Verification with Disabled Session\nDESCRIPTION: Implementation for phone number verification without creating a user session.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst isVerified = await authClient.phoneNumber.verify({\n    phoneNumber: \"+1234567890\",\n    code: \"123456\",\n    disableSession: true\n})\n```\n\n----------------------------------------\n\nTITLE: Secondary Storage Configuration for Rate Limiting\nDESCRIPTION: Configuration for using secondary storage to store rate limit data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    //...other options\n    rateLimit: {\n\t\tstorage: \"secondary-storage\"\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Update Input Fields for Conditional UI\nDESCRIPTION: This HTML snippet shows how to add the `autocomplete` attribute with the value `webauthn` to your input fields. This allows the browser to autofill the passkey if the user has already registered one.  The `webauthn` value should be the last entry of the `autocomplete` attribute.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"name\">Username:</label>\n<input type=\"text\" name=\"name\" autocomplete=\"username webauthn\">\n<label for=\"password\">Password:</label>\n<input type=\"password\" name=\"password\" autocomplete=\"current-password webauthn\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Caching in Better Auth\nDESCRIPTION: This snippet demonstrates how to enable cookie caching in Better Auth by configuring the session.cookieCache property. Cookie caching reduces database queries by storing session data in short-lived, signed cookies.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  session: {\n    cookieCache: {\n      enabled: true,\n      maxAge: 5 * 60, // Cache duration in seconds\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Two-Factor Auth Plugin (Server)\nDESCRIPTION: This code snippet demonstrates how to add the two-factor authentication plugin to the Better Auth server-side configuration. It imports the `twoFactor` plugin from `better-auth/plugins` and adds it to the `plugins` array in the `betterAuth` configuration object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { twoFactor } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    //...rest of the options\n    plugins: [ // [!code highlight]\n        twoFactor() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Subdomain Cookies in Better Auth\nDESCRIPTION: This configuration demonstrates how to enable cross-subdomain cookies in Better Auth, allowing authentication to work across different subdomains of the same parent domain.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/hono.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = createAuth({\n  advanced: {\n    crossSubDomainCookies: {\n      enabled: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Plugin Schema in Better Auth\nDESCRIPTION: Configuration to customize table names and column names for Better Auth plugins. This example shows how to customize field names for the two-factor authentication plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { twoFactor } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    twoFactor({\n      schema: {\n        user: {\n          fields: {\n            twoFactorEnabled: \"two_factor_enabled\",\n            secret: \"two_factor_secret\",\n          },\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack OAuth Integration with Better Auth\nDESCRIPTION: This example shows how to configure the Generic OAuth plugin for Slack authentication, including setting up client credentials, authorization URLs, token endpoints, and required scopes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { genericOAuth } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ... other config options\n  plugins: [\n    genericOAuth({\n      config: [\n        {\n          providerId: \"slack\",\n          clientId: process.env.SLACK_CLIENT_ID as string,\n          clientSecret: process.env.SLACK_CLIENT_SECRET as string,\n          authorizationUrl: \"https://slack.com/oauth/v2/authorize\",\n          tokenUrl: \"https://slack.com/api/oauth.v2.access\",\n          scopes: [\"users:read\", \"users:read.email\"], // and more...\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session with useSession Hook in React Native\nDESCRIPTION: This code snippet shows how to use the useSession hook provided by Better Auth to access the current user's session in a React Native application. It demonstrates retrieving and displaying the user's name from the session data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { authClient } from \"@/lib/auth-client\";\n\nexport default function App() {\n    const { data: session } = authClient.useSession();\n\n    return <Text>Welcome, {session.user.name}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Password Compromised Error Message\nDESCRIPTION: Example of how to configure the plugin with a custom error message for compromised passwords.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/have-i-been-pwned.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhaveIBeenPwned({\n    customPasswordCompromisedMessage: \"Please choose a more secure password.\"\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Resources with React Component in Markdown\nDESCRIPTION: This code snippet uses a custom Resource component to render a collection of blog post resources related to Better Auth. Each resource includes a title, description, link, and tags for different implementations and integrations.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Resource resources={\n    [\n        {\n\t\t\ttitle: \"Better Auth with Hono, Bun, TypeScript, React and Vite\",\n\t\t\tdescription:\n\t\t\t\t\"You'll learn how to implement authentication with Better Auth in a client - server architecture, where the frontend is separate from the backend.\",\n\t\t\thref: \"https://catalins.tech/better-auth-with-hono-bun-typescript-react-vite\",\n\t\t\ttags: [\"typescript\", \"react\", \"bun\", \"vite\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Polar.sh + BetterAuth for Organizations\",\n\t\t\tdescription:\n\t\t\t\t\"Polar.sh is a platform for building payment integrations. This article will show you how to use Better Auth to authenticate your users.\",\n\t\t\thref: \"https://dev.to/phumudzosly/polarsh-betterauth-for-organizations-1j1b\",\n\t\t\ttags: [\"organizations\", \"integration\", \"payments\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Authenticating users in Astro with Better Auth\",\n\t\t\tdescription:\n\t\t\t\t\"Step by step guide on how to authenticate users in Astro with Better Auth.\",\n\t\t\thref: \"https://www.launchfa.st/blog/astro-better-auth\",\n\t\t\ttags: [\"astro\", \"integration\", \"tutorial\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Building Multi-Tenant Apps With Better-Auth and ZenStack\",\n\t\t\tdescription:\n\t\t\t\t\"Learn how to build multi-tenant apps with Better-Auth and ZenStack.\",\n\t\t\thref: \"https://zenstack.dev/blog/better-auth\",\n\t\t\ttags: [\"multi-tenant\", \"zenstack\", \"architecture\"],\n\t\t},\n    ]\n} />\n```\n\n----------------------------------------\n\nTITLE: API Key Permissions Example (TS)\nDESCRIPTION: Illustrates the structure for defining API key permissions using a record mapping resource types to arrays of allowed actions. In this example, it defines that for the `projects` resource, the allowed actions are `read` and `read-write`.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst example = {\n  projects: [\"read\", \"read-write\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Database Storage Configuration for Rate Limiting\nDESCRIPTION: Shows how to configure database storage for rate limit data instead of using memory storage.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    //...other options\n    rateLimit: {\n        storage: \"database\",\n        modelName: \"rateLimit\", //optional by default \"rateLimit\" is used\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Revoking a Specific Session in Better Auth\nDESCRIPTION: This snippet shows how to end a specific session by providing its token to the revokeSession function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.revokeSession({\n    token: \"session-token\"\n})\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command for Rate Limiting\nDESCRIPTION: Command to create the rate limit table in the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Kick Provider in better-auth\nDESCRIPTION: Sets up the Kick authentication provider by configuring it with client credentials in the better-auth instance. Requires KICK_CLIENT_ID and KICK_CLIENT_SECRET environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/kick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        kick: {\n            clientId: process.env.KICK_CLIENT_ID as string,\n            clientSecret: process.env.KICK_CLIENT_SECRET as string,\n        },\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure LibsqlDialect\nDESCRIPTION: This snippet demonstrates how to configure Better Auth with LibsqlDialect.  It imports the necessary modules and sets up the dialect with the Turso database URL and authentication token.  The dialect and database type are then passed to the `betterAuth` configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { LibsqlDialect } from \"@libsql/kysely-libsql\";\n\nconst dialect = new LibsqlDialect({\n    url: process.env.TURSO_DATABASE_URL || \"\",\n    authToken: process.env.TURSO_AUTH_TOKEN || \"\",\n})\n\nexport const auth = betterAuth({\n  database: {\n    dialect,\n    type: \"sqlite\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring nextCookies Plugin for Better Auth in Next.js\nDESCRIPTION: This code demonstrates how to set up the nextCookies plugin to handle cookie management automatically in Next.js server actions. The plugin must be placed as the last plugin in the array for proper functionality.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { nextCookies } from \"better-auth/next-js\";\n\nexport const auth = betterAuth({\n    //...your config\n    plugins: [nextCookies()] // make sure this is the last plugin in the array\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in Development Mode\nDESCRIPTION: Shows how to enable rate limiting in development environment by setting the enabled flag.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    rateLimit: {\n        enabled: true,\n        //...other options\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Better Auth Session with SSR in Nuxt Vue Component\nDESCRIPTION: This example demonstrates how to use the Better Auth session with SSR in a Nuxt Vue component. It uses the useSession function with useFetch for SSR compatibility.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { authClient } from \"~/lib/auth-client\";\n\nconst { data: session } = await authClient.useSession(useFetch);\n</script>\n\n<template>\n    <p>\n        {{ session }}\n    </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Admin and Anonymous Plugins to Better Auth\nDESCRIPTION: Incorporate admin and anonymous authentication plugins to support admin users and anonymous sessions that may exist in your Supabase setup.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { admin, anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { \n        enabled: true,\n    },\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID!,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n        }\n    },\n    plugins: [admin(), anonymous()], \n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-Side Better Auth Plugin\nDESCRIPTION: Shows how to initialize Better Auth on the server side with plugin support by configuring the plugins array in the auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    plugins: [\n        // Add your plugins here\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Plasmo Development Server\nDESCRIPTION: Command to start the Plasmo development server for testing the browser extension during development.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cookie Prefix in Better Auth\nDESCRIPTION: Example showing how to change the default cookie prefix from 'better-auth' to a custom value using the cookiePrefix option in the advanced configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    advanced: {\n        cookiePrefix: \"my-app\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: CLI: Run Database Migration (Bash)\nDESCRIPTION: This bash command executes a database migration using the Better Auth CLI. It updates the database schema to include the tables and fields required by the organization plugin.  Ensure the Better Auth CLI is installed and configured correctly before running this command.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Pushing Prisma schema to database\nDESCRIPTION: Command to synchronize the Prisma schema with the database, generating the Prisma client and creating database tables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Create Auth Client - Solid - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth client for Solid. It imports `createAuthClient` from the `better-auth/solid` package and exports a `authClient` constant that initializes the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/solid\"\nexport const authClient =  createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: Mapping Session Fields in Prisma Schema\nDESCRIPTION: This Prisma schema snippet demonstrates how to map existing database fields to Better Auth's expected structure for the Session model. It shows the mapping of 'expires' to 'expiresAt' and 'sessionToken' to 'token'.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n    id          String   @id @default(cuid())\n    expiresAt   DateTime @map(\"expires\") // Map your existing `expires` field to Better Auth's `expiresAt`\n    token       String   @map(\"sessionToken\") // Map your existing `sessionToken` field to Better Auth's `token`\n    userId      String\n    user        User     @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Implementation for Secondary Storage in Better Auth\nDESCRIPTION: Example implementation of the SecondaryStorage interface using Redis as a backend. This setup allows Better Auth to use Redis for storing session data and rate limiting counters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"redis\";\nimport { betterAuth } from \"better-auth\";\n\nconst redis = createClient();\nawait redis.connect();\n\nexport const auth = betterAuth({\n\t// ... other options\n\tsecondaryStorage: {\n\t\tget: async (key) => {\n\t\t\tconst value = await redis.get(key);\n\t\t\treturn value ? value : null;\n\t\t},\n\t\tset: async (key, value, ttl) => {\n\t\t\tif (ttl) await redis.set(key, value, { EX: ttl });\n\t\t\t// or for ioredis:\n\t\t\t// if (ttl) await redis.set(key, value, 'EX', ttl)\n\t\t\telse await redis.set(key, value);\n\t\t},\n\t\tdelete: async (key) => {\n\t\t\tawait redis.del(key);\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Bun Project\nDESCRIPTION: This command executes the main entry point of the Bun project, which is 'index.ts'. It starts the application using the Bun runtime.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/dev/bun/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Running Plasmo Development Server\nDESCRIPTION: Commands to start the development server for a Plasmo extension project. The server will auto-update as you make changes, allowing you to test the extension in real-time.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/browser-extension-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enable Metadata in API Key Plugin - TypeScript\nDESCRIPTION: This snippet shows how to enable the metadata feature in the API key plugin options. Setting `enableMetadata` to `true` allows storing additional data associated with the API key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      enableMetadata: true,\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Two-Factor Authentication with Trusted Device in TypeScript\nDESCRIPTION: This snippet demonstrates how to verify a two-factor authentication code and mark the device as trusted using the Better Auth library. It sets the trust period to 60 days and handles the verification result.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst verify2FA = async (code: string) => {\n    const { data, error } = await authClient.twoFactor.verifyTotp({\n        code,\n        callbackURL: \"/dashboard\",\n        trustDevice: true // Mark this device as trusted\n    })\n    if (data) {\n        // 2FA verified and device trusted\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Fields in Better Auth Signup\nDESCRIPTION: This snippet shows how to access the additional fields (role and lang) during the signup process and in the resulting user object. It demonstrates the usage of the extended schema in practice.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//on signup\nconst res = await auth.api.signUpEmail({\n  email: \"test@example.com\",\n  password: \"password\",\n  name: \"John Doe\",\n  lang: \"fr\",\n});\n\n//user object\nres.user.role; // > \"admin\"\nres.user.lang; // > \"fr\"\n```\n\n----------------------------------------\n\nTITLE: Using Init CLI Command\nDESCRIPTION: Command to initialize Better Auth in a project using the CLI tool\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli init\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite database URL in environment variables\nDESCRIPTION: Setting the DATABASE_URL environment variable to point to a local SQLite database file.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"file:./dev.db\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Roblox Sign-In with better-auth Client\nDESCRIPTION: This code shows how to implement the sign-in functionality for Roblox authentication using the better-auth client. It creates an auth client instance and defines a function to initiate the Roblox authentication flow.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/roblox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"roblox\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Strict Mode for Better Auth\nDESCRIPTION: Shows how to configure tsconfig.json with strict mode enabled, which is required for Better Auth to properly type-check authentication-related code and prevent runtime errors.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSessionFromCtx Helper Function in Better Auth\nDESCRIPTION: Demonstrates how to use the getSessionFromCtx helper function to access a client's session data within a hook or middleware context.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {  createAuthMiddleware } from \"better-auth/plugins\";\n\nconst myPlugin = {\n    id: \"my-plugin\",\n    hooks: {\n        before: [{\n                matcher: (context)=>{\n                    return context.headers.get(\"x-my-header\") === \"my-value\"\n                },\n                handler: createAuthMiddleware(async (ctx) => {\n                    const session = await getSessionFromCtx(ctx);\n                    //do something with the client's session.\n\n                    return  {\n                        context: ctx\n                    }\n                })\n            }],\n    }\n} satisfies BetterAuthPlugin\n```\n\n----------------------------------------\n\nTITLE: Running Better-Auth Project in Development Mode\nDESCRIPTION: This snippet shows the sequence of commands needed to set up and run the better-auth project in development mode. It includes installing dependencies with pnpm, running local database migrations, and starting the development server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/dev/cloudflare/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run migrate:local\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Create Auth Client - Vanilla - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth client for Vanilla Javascript. It imports `createAuthClient` from the `better-auth/client` package and exports a `authClient` constant that initializes the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nexport const authClient =  createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: Importing Auth Client in React Frontend\nDESCRIPTION: Shows how to properly import the createAuthClient function from the React-specific package path for client-side authentication in React components.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\";\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Default Ban Reason Configuration (TypeScript)\nDESCRIPTION: This code configures the default reason for user bans using the `defaultBanReason` option. When an admin bans a user without providing a specific reason, this default reason is applied.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  defaultBanReason: \"Spamming\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with Prisma Adapter in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Better Auth with the Prisma adapter. It imports the necessary dependencies, creates a Prisma client instance, and configures the authentication system to use Prisma as the database adapter with SQLite as the provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/prisma.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, {\n    provider: \"sqlite\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing Secure Cookies in Better Auth\nDESCRIPTION: Example showing how to force cookies to be always secure regardless of environment by setting the useSecureCookies option to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cookies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    advanced: {\n        useSecureCookies: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox Provider in better-auth\nDESCRIPTION: Sets up the Dropbox authentication provider by configuring it in the better-auth instance. Requires environment variables for Dropbox client ID and client secret.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/dropbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        dropbox: { // [!code highlight]\n            clientId: process.env.DROPBOX_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.DROPBOX_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Better Auth with Google\nDESCRIPTION: Environment variables required for setting up Better Auth with Google sign-in integration. Includes Google client credentials and the Better Auth secret key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/examples/astro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\nBETTER_AUTH_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key\nDESCRIPTION: Command to generate a secure secret key for Better Auth instance authentication and encryption purposes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Extension Manifest\nDESCRIPTION: JSON configuration for package.json to set host permissions for the backend URL in the extension manifest.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n    \"manifest\": {\n        \"host_permissions\": [\n            \"https://URL_TO_YOUR_BACKEND\" // localhost works too (e.g. http://localhost:3000)\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with Vitest for BetterAuth\nDESCRIPTION: An example of writing tests using Vitest for the BetterAuth project. This demonstrates the testing pattern with describe and it blocks following the project's testing conventions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { describe, it, expect } from \"vitest\";\nimport { getTestInstance } from \"./test-utils/test-instance\";\n\ndescribe(\"Feature\", () => {\n    it(\"should work as expected\", async () => {\n        const { client } = getTestInstance();\n        // Test code here\n        expect(result).toBeDefined();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Strict Mode\nDESCRIPTION: Configuration for tsconfig.json to enable strict mode and set up import aliases for the src directory.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"paths\": {\n            \"@/_\": [\n                \"./src/_\"\n            ]\n        },\n        \"strict\": true,\n        \"baseUrl\": \".\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up initial Prisma schema\nDESCRIPTION: Basic Prisma schema configuration with SQLite as the database provider and a placeholder Test model. This schema serves as a starting point before integrating Better Auth models.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Will be deleted. Just need it to generate the prisma client\nmodel Test {\n  id   Int    @id @default(autoincrement())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Restore a Canceled Subscription\nDESCRIPTION: This code snippet shows how to restore a previously canceled subscription using the `subscription.restore` method on the client. This reactivates a subscription that was set to cancel at the end of the billing period.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await client.subscription.restore({\n    referenceId: \"org_123\" // optional, defaults to userId\n});\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: CLI commands to migrate or generate the database schema for phone number authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Vue Auth Client Initialization\nDESCRIPTION: This snippet shows how to create the Better Auth client with Vue.  It imports `createAuthClient` from `better-auth/vue` and initializes it with a `baseURL` pointing to the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/vue\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */ // [!code highlight]\n    baseURL: \"http://localhost:3000\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Better Auth Plugin\nDESCRIPTION: Shows how to define custom rate limit rules for specific paths in a Better Auth plugin, specifying request limits within time windows.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        rateLimit: [\n            {\n                pathMatcher: (path)=>{\n                    return path === \"/my-plugin/hello-world\"\n                },\n                limit: 10,\n                window: 60,\n            }\n        ]\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Delete API Key (Server - TS)\nDESCRIPTION: Shows how to delete an API key on the server-side using the `auth.api.deleteApiKey` method. The `keyId` of the key and the user id `userId` must be passed in the body.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.deleteApiKey({\n  body: {\n    keyId: \"your_api_key_id_here\",\n    userId: \"userId\", \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sign In with SSO by Provider ID\nDESCRIPTION: This code snippet demonstrates how to sign in with SSO using the provider's ID.  The `authClient.signIn.sso` method is called with the provider ID and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await authClient.signIn.sso({\n providerId: \"example-provider-id\",\n callbackURL: \"/dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Better Auth Development Environment with Bash Commands\nDESCRIPTION: Commands for setting up the development environment for the Better Auth project. This includes cloning the fork, creating environment files, installing dependencies, and building the project. These commands prepare the local environment for making contributions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp -n ./docs/.env.example ./docs/.env\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm -F docs dev\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Schema Generation Command with Better Auth CLI\nDESCRIPTION: Command for generating a database schema based on the Better Auth configuration and plugins when using SQLite.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Caching with React Query\nDESCRIPTION: This snippet demonstrates using React Query's useQuery hook to fetch and cache user data from Better Auth API with a specified stale time, along with handling loading states and rendering the retrieved data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\n\nconst fetchUsers = async () => {\n    const { users } = await auth.api.listUsers();\n    return users;\n};\n\nexport default function Users() {\n    const { data: users, isLoading } = useQuery('users', fetchUsers, {\n        staleTime: 1000 * 60 * 15, // Cache for 15 minutes\n    });\n\n    if (isLoading) return <div>Loading...</div>;\n\n    return (\n        <ul>\n            {users.map(user => (\n                <li key={user.id}>{user.name}</li>\n            ))}\n        </ul>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Client Library\nDESCRIPTION: Command to install the Better Auth package using npm. This is the first step to integrate Better Auth into your application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i better-auth\n```\n\n----------------------------------------\n\nTITLE: Building Extension for Production\nDESCRIPTION: Command to build the browser extension for production deployment.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Better Auth Plugin\nDESCRIPTION: Command to install the Polar plugin for Better Auth\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/polar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n@polar-sh/better-auth\n```\n\n----------------------------------------\n\nTITLE: Revoking Sessions on Password Change in Better Auth\nDESCRIPTION: This snippet demonstrates how to automatically revoke all other sessions when a user changes their password by setting the revokeOtherSessions flag to true.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.changePassword({\n    newPassword: newPassword,\n    currentPassword: currentPassword,\n    revokeOtherSessions: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma schema\nDESCRIPTION: Command to initialize Prisma, which generates a basic schema.prisma file in the prisma directory.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Customizing One Tap Authentication Success Callback\nDESCRIPTION: Implements custom success handling for One Tap authentication without page reload, using router navigation as an example.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/one-tap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nauthClient.oneTap({\n  fetchOptions: {\n    onSuccess: () => {\n      // For example, use a router to navigate without a full reload:\n      router.push(\"/dashboard\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Generic OAuth Client Plugin\nDESCRIPTION: Initializes the client-side component of the Generic OAuth plugin by adding it to the authentication client instance. This is required for the frontend to interact with OAuth providers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { genericOAuthClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [\n        genericOAuthClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with socialProviders (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure social login providers for Better Auth. It includes configurations for Google and GitHub, specifying client IDs, client secrets, and redirect URIs.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tsocialProviders: {\n\t\tgoogle: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/google\"\n\t\t},\n\t\tgithub: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/github\"\n\t\t}\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Better Auth Logo with Dark Mode Support in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display the Better Auth logo with support for dark mode using the <picture> element and media queries.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source srcset=\"./banner-dark.png\" media=\"(prefers-color-scheme: dark)\">\n  <source srcset=\"./banner.png\" media=\"(prefers-color-scheme: light)\">\n  <img src=\"./banner.png\" alt=\"Better Auth Logo\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Impersonation Session Duration Configuration (TypeScript)\nDESCRIPTION: This example configures the duration of impersonation sessions using the `impersonationSessionDuration` option. The duration is specified in seconds; the example shows how to set it to one day.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  impersonationSessionDuration: 60 * 60 * 24, // 1 day\n});\n```\n\n----------------------------------------\n\nTITLE: CLI: Generate Database Schema (Bash)\nDESCRIPTION: This bash command generates the database schema using the Better Auth CLI.  This command is used to create a schema file that reflects the database structure required by the organization plugin. Ensure the Better Auth CLI is installed and configured correctly before running this command.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Preventing Removal of All Teams in Typescript\nDESCRIPTION: This snippet configures the `allowRemovingAllTeams` option within the `teams` configuration. Setting `allowRemovingAllTeams` to `false` prevents the last team from being removed from an organization. This ensures that there is always at least one team present.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nteams: {\n  enabled: true,\n  allowRemovingAllTeams: false // Prevent removing the last team\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for Better Auth and TanStack Start\nDESCRIPTION: This command installs the necessary dependencies for the project using pnpm package manager.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/tanstack-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Script File\nDESCRIPTION: Create a new TypeScript file to contain the migration script for transferring users from Supabase to Better Auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch migration.ts\n```\n\n----------------------------------------\n\nTITLE: Error Response for Exceeded Attempts\nDESCRIPTION: JSON response structure when verification attempts exceed the limit.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/phone-number.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"status\": 403,\n    \"message\": \"Too many attempts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List User Accounts with Better Auth Client\nDESCRIPTION: This code snippet shows how to retrieve a list of user accounts using the `authClient.listAccounts()` method provided by Better Auth. The method returns all accounts associated with the current user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst accounts = await authClient.listAccounts();\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Freshness Checks in Better Auth\nDESCRIPTION: This snippet shows how to disable the session freshness check completely by setting the freshAge value to 0.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    //... other config options\n    session: {\n        freshAge: 0 // Disable freshness check\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: OAuth Access Token Database Schema Definition\nDESCRIPTION: Defines the database table schema for storing OAuth access tokens including fields for token data, expiration times, client and user references, and scope information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<DatabaseTable\n  fields={[\n    {\n      name: \"id\",\n      type: \"string\",\n      description: \"Database ID of the access token\",\n      isPrimaryKey: true\n   },\n    { \n      name: \"accessToken\", \n      type: \"string\", \n      description: \"Access token issued to the client\",\n    },\n    { \n      name: \"refreshToken\", \n      type: \"string\", \n      description: \"Refresh token issued to the client\",\n      isRequired: true\n    },\n    { \n      name: \"accessTokenExpiresAt\", \n      type: \"Date\", \n      description: \"Expiration date of the access token\",\n      isRequired: true\n    },\n    { \n      name: \"refreshTokenExpiresAt\", \n      type: \"Date\", \n      description: \"Expiration date of the refresh token\",\n      isRequired: true\n    },\n    { \n      name: \"clientId\", \n      type: \"string\", \n      description: \"ID of the OAuth client\",\n      isForeignKey: true,\n      references: { model: \"oauthClient\", field: \"clientId\" }\n    },\n    { \n      name: \"userId\", \n      type: \"string\", \n      description: \"ID of the user associated with the token\",\n      isForeignKey: true,\n      references: { model: \"user\", field: \"id\" }\n    },\n    { \n      name: \"scopes\", \n      type: \"string\", \n      description: \"Comma-separated list of scopes granted\",\n      isRequired: true\n    },\n    { \n      name: \"createdAt\", \n      type: \"Date\", \n      description: \"Timestamp of when the access token was created\" \n    },\n    {\n      name: \"updatedAt\",\n      type: \"Date\",\n      description: \"Timestamp of when the access token was last updated\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Integration\nDESCRIPTION: TypeScript configuration for integrating Stripe with Better Auth, including customer creation and subscription plans setup\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripe } from \"@better-auth/stripe\";\n\nexport const auth = betterAuth({\n  plugins: [\n    stripe({\n      createCustomerOnSignup: true,\n      subscription: {\n        enabled: true,\n        plans: [\n          {\n            name: \"pro\",\n            priceId: \"price_1234567890\",\n          },\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Custom Permissions\nDESCRIPTION: This snippet demonstrates creating roles with custom permissions using the access control object. Roles are created using `ac.newRole`, defining allowed actions for the `project` resource.  The example includes roles for `member`, `admin`, `owner`, and a custom role with `organization` permissions.  Requires the `createAccessControl` and statement definition from the previous step.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\n\nconst statement = {\n    project: [\"create\", \"share\", \"update\", \"delete\"],\n} as const;\n\nconst ac = createAccessControl(statement);\n\nconst member = ac.newRole({ // [!code highlight]\n    project: [\"create\"], // [!code highlight]\n}); // [!code highlight]\n\nconst admin = ac.newRole({ // [!code highlight]\n    project: [\"create\", \"update\"], // [!code highlight]\n}); // [!code highlight]\n\nconst owner = ac.newRole({ // [!code highlight]\n    project: [\"create\", \"update\", \"delete\"], // [!code highlight]\n}); // [!code highlight]\n\nconst myCustomRole = ac.newRole({ // [!code highlight]\n    project: [\"create\", \"update\", \"delete\"], // [!code highlight]\n    organization: [\"update\"], // [!code highlight]\n}); // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Starting the Better Auth Demo Development Server\nDESCRIPTION: Commands to start the development server for the Better Auth demo application using various package managers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/demo/nextjs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK\nDESCRIPTION: Command to install the core Polar SDK for server-side implementation\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/polar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n@polar-sh/sdk\n```\n\n----------------------------------------\n\nTITLE: Remove User - Typescript\nDESCRIPTION: This code snippet shows how to hard delete a user from the database using the `removeUser` method. It requires the user ID as a parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst deletedUser = await authClient.admin.removeUser({\n  userId: \"user_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in Hooks\nDESCRIPTION: This example shows how to access the response headers that were added by endpoints and hooks that ran earlier in the request lifecycle.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAuthMiddleware(async (ctx) => {\n    const responseHeaders = ctx.context.responseHeaders;\n});\n```\n\n----------------------------------------\n\nTITLE: Inferring Additional Fields on Better Auth Client (Monorepo Setup)\nDESCRIPTION: This snippet shows how to infer additional fields on the client side in a monorepo or single-project setup. It uses the inferAdditionalFields plugin to automatically infer the fields from the server configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inferAdditionalFields } from \"better-auth/client/plugins\";\nimport { createAuthClient } from \"better-auth/react\";\nimport type { auth } from \"./auth\";\n\nexport const authClient = createAuthClient({\n  plugins: [inferAdditionalFields<typeof auth>()],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC Client Plugin in TypeScript\nDESCRIPTION: This snippet shows how to add the OIDC client plugin to your auth client configuration in TypeScript. It sets up the client-side component of the OIDC provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport { oidcClient } from \"better-auth/client/plugins\"\nconst authClient = createAuthClient({\n    plugins: [oidcClient({\n        // Your OIDC configuration\n    })]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in Better Auth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the LinkedIn provider in the auth instance. It imports the betterAuth function and sets up the LinkedIn provider with client ID and secret from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/linkedin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        linkedin: { // [!code highlight]\n            clientId: process.env.LINKEDIN_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.LINKEDIN_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for BetterAuth\nDESCRIPTION: Command to install project dependencies using pnpm package manager. Prior to running this command, pnpm must be installed on the system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Plasmo Extension for Production\nDESCRIPTION: Commands to create a production-ready bundle for your Plasmo extension. This generates optimized files that can be zipped and published to browser extension stores.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/browser-extension-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n# or\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Bypassing Session Cookie Cache on Server in Better Auth\nDESCRIPTION: This snippet shows how to bypass the session cookie cache when fetching a session on the server side.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nauth.api.getSession({\n    query: {\n        disableCookieCache: true,\n    }, \n    headers: req.headers, // pass the headers\n});\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration (Bash)\nDESCRIPTION: This command-line instruction demonstrates how to run the database migration for the API Key plugin using the Better Auth CLI. This step is necessary to add the required fields and tables to the database, enabling the persistence of API key data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Trial Periods - Typescript\nDESCRIPTION: This snippet shows how to configure trial periods for subscription plans using the Stripe plugin. It includes options for defining the number of trial days and specifying functions to be executed when the trial starts, ends, or expires. This allows for actions like sending trial start emails, trial end emails, and trial expired emails.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    name: \"pro\",\n    priceId: \"price_0987654321\",\n    freeTrial: {\n        days: 14,\n        onTrialStart: async (subscription) => {\n            // Called when a trial starts\n            await sendTrialStartEmail(subscription.referenceId);\n        },\n        onTrialEnd: async ({ subscription, user }, request) => {\n            // Called when a trial ends\n            await sendTrialEndEmail(user.email);\n        },\n        onTrialExpired: async (subscription) => {\n            // Called when a trial expires without conversion\n            await sendTrialExpiredEmail(subscription.referenceId);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Limit Configuration in TypeScript\nDESCRIPTION: Demonstrates how to set up basic rate limiting with custom window and max request settings.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    rateLimit: {\n        window: 10, // time window in seconds\n        max: 100, // max requests in the window\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Default Role Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to configure the default role for users when using the admin plugin.  The `defaultRole` option sets the role assigned to new users.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  defaultRole: \"regular\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth Client with Two-Factor Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the auth client with the two-factor authentication plugin. It includes configuration for handling the 2FA verification redirect.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/2fa.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { twoFactorClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [\n        twoFactorClient({ // [!code highlight]\n            onTwoFactorRedirect(){\n                window.location.href = \"/2fa\" // Handle the 2FA verification redirect\n            }\n        }) // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the BetterAuth Repository\nDESCRIPTION: Command to clone the forked BetterAuth repository and navigate to the project directory. The user needs to replace YOUR-USERNAME with their GitHub username.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Replace YOUR-USERNAME with your GitHub username\ngit clone https://github.com/YOUR-USERNAME/better-auth.git\ncd better-auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with Custom Fetch Options\nDESCRIPTION: Shows how to configure the Better Auth client with custom fetch options using the better-fetch library for advanced request customization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\n\nconst authClient = createAuthClient({\n    fetchOptions: {\n        //any better-fetch options\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Better Auth Module Resolution\nDESCRIPTION: Sets up Babel configuration to manually resolve Better Auth module paths. This is an alternative approach if enabling package exports in Metro is not possible.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n    api.cache(true);\n    return {\n        presets: [\"babel-preset-expo\"],\n        plugins: [\n            [\n                \"module-resolver\",\n                {\n                    alias: {\n                        \"better-auth/react\": \"./node_modules/better-auth/dist/client/react/index.cjs\",\n                        \"better-auth/client/plugins\": \"./node_modules/better-auth/dist/client/plugins/index.cjs\",\n                        \"@better-auth/expo/client\": \"./node_modules/@better-auth/expo/dist/client.cjs\",\n                    },\n                },\n            ],\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Username Length\nDESCRIPTION: Setting a custom maximum length for usernames. The default maximum length is 30 characters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [\n        username({\n            maxUsernameLength: 100\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: This command installs the project dependencies using Bun package manager. It should be run in the project root directory to set up the required packages.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/dev/bun/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema - Bash\nDESCRIPTION: This bash command generates the database schema using the Better Auth CLI. It's an alternative to running migrations and can be used to add the required fields manually.  See the Schema section to add the fields manually.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User With Router Push(TypeScript)\nDESCRIPTION: This snippet demonstrates how to sign out a user using the `signOut` function from the Better Auth client with router push.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signOut({\n  fetchOptions: {\n    onSuccess: () => {\n      router.push(\"/login\"); // redirect to login page\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Better Auth\nDESCRIPTION: Modifies the Metro bundler configuration to enable package exports resolution for Better Auth. This is necessary for proper module resolution in the Expo environment.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require(\"expo/metro-config\");\n\nconst config = getDefaultConfig(__dirname)\n\nconfig.resolver.unstable_enablePackageExports = true; // [!code highlight]\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Compromised Passwords\nDESCRIPTION: Shows the default error response format when a compromised password is detected during account creation or password update.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/have-i-been-pwned.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"PASSWORD_COMPROMISED\",\n  \"message\": \"Password is compromised\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Database IDs in Better Auth\nDESCRIPTION: This snippet shows how to configure Better Auth to use automatic database ID generation instead of the default Better Auth ID generation. It demonstrates setting the generateId option to false in the advanced database configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { db } from \"./db\";\n\nexport const auth = betterAuth({\n  database: {\n    db: db,\n  },\n  advanced: {\n    database: {\n      generateId: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Username Length\nDESCRIPTION: Setting a custom minimum length for usernames. The default minimum length is 3 characters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [\n        username({\n            minUsernameLength: 5\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Active Sessions in Better Auth\nDESCRIPTION: This code demonstrates how to retrieve a list of all active sessions for the current user using the listSessions function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"@/lib/client\"\n\nconst sessions = await authClient.listSessions()\n```\n\n----------------------------------------\n\nTITLE: Response Caching in Remix with Cache-Control Headers\nDESCRIPTION: This snippet demonstrates how to implement caching in Remix by setting Cache-Control headers in the loader function to cache API responses on the server for a specified duration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json } from '@remix-run/node';\n\nexport const loader = async () => {\nconst { users } = await auth.api.listUsers();\nreturn json(users, {\n    headers: {\n    'Cache-Control': 'max-age=3600', // Cache for 1 hour\n    },\n});\n};\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands - Better Auth CLI\nDESCRIPTION: CLI commands for migrating or generating the database schema for anonymous authentication\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Organization Subscription - Typescript\nDESCRIPTION: This example illustrates how to create a subscription for an organization instead of a user, utilizing the organization plugin. It retrieves the active organization ID using `client.useActiveOrganization()` and passes it as the `referenceId` when upgrading the subscription. This ensures that the subscription is associated with the organization.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the active organization\nconst { data: activeOrg } = client.useActiveOrganization();\n\n// Create a subscription for the organization\nawait client.subscription.upgrade({\n    plan: \"team\",\n    referenceId: activeOrg.id,\n    seats: 10,\n    annual: true, // upgrade to an annual plan (optional)\n    successUrl: \"/org/billing/success\",\n    cancelUrl: \"/org/billing\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Better Auth Instance\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth instance in your project.  It imports the `betterAuth` function and exports an instance of it, typically named `auth`.  This instance is then configured with various options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    //...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Captcha Token in API Requests\nDESCRIPTION: Demonstrates how to include the captcha token in API request headers when making authentication calls. The example shows implementation for a sign-in request with optional IP address forwarding.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/captcha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.signIn.email({\n    email: \"user@example.com\",\n    password: \"secure-password\",\n    fetchOptions: {\n        headers: {\n            \"x-captcha-response\": turnstileToken,\n            \"x-captcha-user-remote-ip\": userIp, // optional: forwards the user's IP address to the captcha service\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Nitro Application using npx\nDESCRIPTION: Command to scaffold a new Nitro application using the giget package. This creates a new directory called 'nitro-app' and installs all dependencies.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx giget@latest nitro nitro-app --install\n```\n\n----------------------------------------\n\nTITLE: Allow Unlinking All Accounts (Typescript)\nDESCRIPTION: This code snippet configures Better Auth to allow a user to unlink all their accounts by setting `accountLinking.allowUnlinkingAll` to `true`. By default, the unlinking process will fail if the user only has one account to prevent account lockout. This setting overrides that behavior.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    account: {\n        accountLinking: {\n            allowUnlinkingAll: true\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Functionality in Expo\nDESCRIPTION: Demonstrates how to implement a sign-in form using Better Auth in an Expo app. It includes state management for form inputs and handling the sign-in process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from \"react\"; \nimport { View, TextInput, Button } from \"react-native\";\nimport { authClient } from \"./auth-client\";\n\nexport default function App() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleLogin = async () => {\n        await authClient.signIn.email({\n            email,\n            password,\n        })\n    };\n\n    return (\n        <View>\n            <TextInput\n                placeholder=\"Email\"\n                value={email}\n                onChangeText={setEmail}\n            />\n            <TextInput\n                placeholder=\"Password\"\n                value={password}\n                onChangeText={setPassword}\n            />\n            <Button title=\"Login\" onPress={handleLogin} />\n        </View>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Full Organization Details (Server)\nDESCRIPTION: This snippet demonstrates how to retrieve full organization details on the server-side using `auth.api.getFullOrganization`. It requires passing headers and optionally accepts `organizationSlug` in the query parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { auth } from \"@/auth\";\n\nauth.api.getFullOrganization({\n    headers: // pass the headers\n})\n\n//  you can also use organizationSlug instead of organizationId\nauth.api.getFullOrganization({\n    headers: // pass the headers,\n    query: {\n        organizationSlug: \"organization-slug\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Social Provider with better-auth\nDESCRIPTION: Sets up the Reddit social provider in the better-auth configuration. This code connects your application to Reddit's authentication service using your Reddit client credentials from environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/reddit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        reddit: {\n            clientId: process.env.REDDIT_CLIENT_ID as string,\n            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Create Auth Client - Svelte - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a Better Auth client for Svelte. It imports `createAuthClient` from the `better-auth/svelte` package and exports a `authClient` constant that initializes the client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/astro.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/svelte\"\nexport const authClient =  createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Refresh in Better Auth\nDESCRIPTION: This snippet demonstrates how to disable session refresh functionality so that session expiration is not updated when the session is used.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    //... other config options\n    session: {\n        disableSessionRefresh: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Tax Collection in Stripe Checkout Session in Typescript\nDESCRIPTION: This code snippet shows how to enable tax collection within the Stripe Checkout session parameters using Typescript. It specifically configures the `tax_id_collection` parameter to enable tax collection during the checkout process. This is useful for collecting tax information from customers during the subscription process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription: {\n    // ... other options\n    getCheckoutSessionParams: async ({ user, session, plan, subscription }, request) => {\n        return {\n            params: {\n                tax_id_collection: {\n                    enabled: true\n                }\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT from Session Response Headers\nDESCRIPTION: This snippet shows how to extract a JWT from the 'set-auth-jwt' header in the response when calling the getSession method of the auth client.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.getSession({\n  fetchOptions: {\n    onSuccess: (ctx)=>{\n      const jwt = ctx.response.headers.get(\"set-auth-jwt\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with MSSQL Dialect in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Better Auth with Microsoft SQL Server using the MssqlDialect. It includes configuration for connection pooling with Tarn and database connection settings using Tedious.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mssql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport * as Tedious from 'tedious'\nimport * as Tarn from 'tarn'\n\nconst dialect = new MssqlDialect({\n  tarn: {\n    ...Tarn,\n    options: {\n      min: 0,\n      max: 10,\n    },\n  },\n  tedious: {\n    ...Tedious,\n    connectionFactory: () => new Tedious.Connection({\n      authentication: {\n        options: {\n          password: 'password',\n          userName: 'username',\n        },\n        type: 'default',\n      },\n      options: {\n        database: 'some_db',\n        port: 1433,\n        trustServerCertificate: true,\n      },\n      server: 'localhost',\n    }),\n  },\n})\n\nexport const auth = betterAuth({\n  database: {\n    dialect,\n    type: \"mssql\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Active Organization in Vue\nDESCRIPTION: This Vue snippet shows how to use the `useActiveOrganization` method from `authClient` within the `setup` function. It returns the `activeOrganization` object, which can then be used within the template to display data and handle loading states.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_16\n\nLANGUAGE: Vue\nCODE:\n```\n<script lang=\"ts\">;\nexport default {\n    setup() {\n        const activeOrganization = authClient.useActiveOrganization();\n        return { activeOrganization };\n    }\n};\n</script>\n\n<template>\n    <div>\n        <h2>Active organization</h2>\n        <div v-if=\"activeOrganization.isPending\">Loading...</div>\n        <div v-else-if=\"activeOrganization.data === null\">No active organization.</div>\n        <div v-else>\n            {{ activeOrganization.data.name }}\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Checking Role Permissions on Client (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `checkRolePermission` function on the client-side to determine if a given role has a specific permission.  This allows for client-side permission checks without making a request to the server.  It supports checking permissions for single and multiple resources.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst canCreateProject = client.admin.checkRolePermission({\n  permissions: {\n    user: [\"delete\"],\n  },\n  role: \"admin\",\n});\n\n// You can also check multiple resource permissions at the same time\nconst canCreateProjectAndRevokeSession = client.admin.checkRolePermission({\n  permissions: {\n    user: [\"delete\"],\n    session: [\"revoke\"]\n  },\n  role: \"admin\",\n});\n```\n\n----------------------------------------\n\nTITLE: API Key Rate Limiting Configuration - TypeScript\nDESCRIPTION: This snippet configures rate limiting for the API key plugin. The rate limit settings include whether it is enabled, the time window for requests, and the maximum number of requests allowed within that time window.  These configurations apply to the verification process for a given API key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      rateLimit: {\n        enabled: true,\n        timeWindow: 1000 * 60 * 60 * 24, // 1 day\n        maxRequests: 10, // 10 requests per day\n      },\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: TanStack Start Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a TanStack Start application using Better Auth. It imports the `auth` object and `createAPIFileRoute` from `@tanstack/react-start/api`, then defines GET and POST methods that use `auth.handler` to process authentication requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '~/lib/server/auth'\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/auth/$')({\n    GET: ({ request }) => {\n        return auth.handler(request)\n    },\n    POST: ({ request }) => {\n        return auth.handler(request)\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Admin Client Plugin - Typescript\nDESCRIPTION: This code snippet shows how to include the admin client plugin in the authentication client instance.  It imports the `adminClient` plugin and adds it to the `plugins` array within the `createAuthClient` configuration object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { adminClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [\n        adminClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Better Auth with Mapped Session Fields in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Better Auth to map existing database fields to the expected structure for the session schema. It shows how to map 'expires' to 'expiresAt' and 'sessionToken' to 'token'.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/next-auth-migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    // Other configs\n    session: {\n        fields: {\n            expiresAt: \"expires\", // Map your existing `expires` field to Better Auth's `expiresAt`\n            token: \"sessionToken\" // Map your existing `sessionToken` field to Better Auth's `token`\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Delete User with Password using Better Auth Client\nDESCRIPTION: This snippet illustrates how to delete a user's account using the `deleteUser` method with their password. Providing a valid password confirms the user's intention to delete the account.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.deleteUser({\n    password: \"password\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Session Plugin in Better Auth Server\nDESCRIPTION: This code demonstrates how to add the multi-session plugin to your auth configuration on the server side. Import the plugin from Better Auth and add it to your auth configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { multiSession } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        multiSession(), // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Nitro application\nDESCRIPTION: Setting up CORS (Cross-Origin Resource Sharing) for the Nitro application using a plugin. This allows requests from any origin, which can be customized for production environments.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nitro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from \"cors\";\nexport default defineNitroPlugin((plugin) => {\n  plugin.h3App.use(\n    fromNodeMiddleware(\n      cors({\n        origin: \"*\",\n      }),\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Hono Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a Hono application using Better Auth. It imports the necessary modules from Hono and defines a route that handles both POST and GET requests to `/api/auth/**`, forwarding the request to the Better Auth handler.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { auth } from \"./auth\"; // path to your auth file\nimport { serve } from \"@hono/node-server\";\nimport { cors } from \"hono/cors\";\n\nconst app = new Hono();\n\napp.on([\"POST\", \"GET\"], \"/api/auth/**\", (c) => auth.handler(c.req.raw));\n\nserve(app);\n```\n\n----------------------------------------\n\nTITLE: Svelte Auth Client Initialization\nDESCRIPTION: This snippet shows how to create the Better Auth client with Svelte.  It imports `createAuthClient` from `better-auth/svelte` and initializes it with a `baseURL` pointing to the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/svelte\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */ // [!code highlight]\n    baseURL: \"http://localhost:3000\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Removing a Member from an Organization\nDESCRIPTION: This snippet demonstrates how to remove a member from an organization using `authClient.organization.removeMember`. It requires either the `memberIdOrEmail` (the member's ID or email) and optionally the `organizationId` (defaults to the active organization).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n//remove member\nawait authClient.organization.removeMember({\n    memberIdOrEmail: \"member-id\", // this can also be the email of the member\n    organizationId: \"organization-id\" // optional, by default it will use the active organization\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Have I Been Pwned Plugin with Better Auth\nDESCRIPTION: Demonstrates how to import and initialize the Have I Been Pwned plugin with Better Auth authentication system.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/have-i-been-pwned.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { haveIBeenPwned } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    plugins: [\n        haveIBeenPwned()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Provider Profile to User Model\nDESCRIPTION: Transforms the provider's user profile data to match the application's user model using the mapProfileToUser function. This enables field mapping and additional data transformation when needed.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngenericOAuth({\n  config: [\n    {\n      providerId: \"custom-provider\",\n      // ... other config options\n      mapProfileToUser: async (profile) => {\n        return {\n          firstName: profile.given_name,\n          // ... map other fields as needed\n        };\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Social Providers in Better Auth\nDESCRIPTION: Configure social authentication providers (GitHub in this example) to match what was previously set up in Supabase.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { admin, anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { \n        enabled: true,\n    },\n    socialProviders: { \n        github: { \n            clientId: process.env.GITHUB_CLIENT_ID, \n            clientSecret: process.env.GITHUB_CLIENT_SECRET, \n        } \n    } \n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Auth Client Methods\nDESCRIPTION: This snippet demonstrates how to destructure and export specific methods from the created auth client, such as signIn, signUp, and useSession.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { signIn, signUp, useSession } = createAuthClient()\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook in Vue\nDESCRIPTION: Example of using the useSession hook in a Vue component to display the user session and implement authentication flows like social login and sign out.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { authClient } from '@/lib/auth-client'\nconst session = authClient.useSession()\n</script>\n<template>\n    <div>\n        <button v-if=\"!session.data\" @click=\"() => authClient.signIn.social({\n            provider: 'github'\n        })\">\n            Continue with GitHub\n        </button>\n        <div>\n            <pre>{{ session.data }}</pre>\n            <button v-if=\"session.data\" @click=\"authClient.signOut()\">\n                Sign out\n            </button>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting the Secret Key\nDESCRIPTION: This snippet sets the `BETTER_AUTH_SECRET` environment variable. This secret is used for encryption and generating hashes within the Better Auth library.  It's crucial for security.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nBETTER_AUTH_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info from OIDC Provider in TypeScript\nDESCRIPTION: This snippet illustrates how a client application would use the UserInfo endpoint of the OIDC provider. It shows making a GET request with an access token to retrieve user information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch('https://your-domain.com/api/auth/oauth2/userinfo', {\n  headers: {\n    'Authorization': 'Bearer ACCESS_TOKEN'\n  }\n});\n\nconst userInfo = await response.json();\n// userInfo contains user details based on the scopes granted\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Sessions Limit\nDESCRIPTION: This code shows how to customize the maximum number of sessions a user can have by passing the maximumSessions option to the multiSession plugin. By default, the plugin allows 5 sessions per device.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    plugins: [\n        multiSession({\n            maximumSessions: 3\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Coinbase OAuth SignIn Implementation\nDESCRIPTION: This snippet shows how to implement the sign-in flow for Coinbase authentication, specifying the provider ID and callback URL for redirection after successful authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await authClient.signIn.oauth2({\n  providerId: \"coinbase\",\n  callbackURL: \"/dashboard\", // the path to redirect to after the user is authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Headers in Better Auth\nDESCRIPTION: This snippet demonstrates how to configure custom IP address headers in Better Auth to ensure accurate IP address detection and prevent IP spoofing attacks. The configuration sets trusted headers for IP address detection used in rate limiting and security monitoring.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/security.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  security: {\n    ipAddress: {\n      ipAddressHeaders: ['cf-connecting-ip'] // or any other custom header\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with emailVerification (TypeScript)\nDESCRIPTION: This snippet configures email verification for Better Auth. It defines a function to send verification emails, enables automatic sending on sign-up, and sets the verification token expiration time.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\temailVerification: {\n\t\tsendVerificationEmail: async ({ user, url, token }) => {\n\t\t\t// Send verification email to user\n\t\t},\n\t\tsendOnSignUp: true,\n\t\tautoSignInAfterVerification: true,\n\t\texpiresIn: 3600 // 1 hour\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook in Solid\nDESCRIPTION: Example of using the useSession hook in a Solid component to conditionally render UI elements based on authentication status.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { client } from \"~/lib/client\";\nimport { Show } from 'solid-js';\n\nexport default function Home() {\n    const session = client.useSession()\n    return (\n        <Show\n            when={session()}\n            fallback={<button onClick={toggle}>Log in</button>}\n        >\n            <button onClick={toggle}>Log out</button>\n        </Show>\n    ); \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in better-auth\nDESCRIPTION: Sets up the Twitch authentication provider by configuring it in the better-auth instance. This requires the Twitch client ID and client secret obtained from the Twitch Developer Portal.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/twitch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        twitch: { // [!code highlight]\n            clientId: process.env.TWITCH_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.TWITCH_CLIENT_SECRET as string, // [!code highlight]\n        }, // [!code highlight]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar Better Auth Plugin\nDESCRIPTION: TypeScript configuration for integrating Polar with Better Auth, including customer creation, checkout setup, and webhook handling\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/polar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { polar } from \"@polar-sh/better-auth\";\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst client = new Polar({\n    accessToken: process.env.POLAR_ACCESS_TOKEN,\n    // Use 'sandbox' if you're using the Polar Sandbox environment\n    // Remember that access tokens, products, etc. are completely separated between environments.\n    // Access tokens obtained in Production are for instance not usable in the Sandbox environment.\n    server: 'production'\n});\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            client,\n            // Enable automatic Polar Customer creation on signup\n            createCustomerOnSignUp: true,\n            // Enable customer portal\n            enableCustomerPortal: true, // Deployed under /portal for authenticated users\n            // Configure checkout\n            checkout: {\n                enabled: true,\n                products: [\n                    {\n                        productId: \"123-456-789\", // ID of Product from Polar Dashboard\n                        slug: \"pro\" // Custom slug for easy reference in Checkout URL, e.g. /checkout/pro\n                    }\n                ],\n                successUrl: \"/success?checkout_id={CHECKOUT_ID}\"\n            },\n            // Incoming Webhooks handler will be installed at /polar/webhooks\n            webhooks: {\n                secret: process.env.POLAR_WEBHOOK_SECRET,\n                onPayload: ...,\n            }\n        })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Adapter Tests with Vitest\nDESCRIPTION: Example of how to set up tests for a custom Better Auth adapter using Vitest. This includes creating a test suite that runs the provided adapter tests and handles cleanup after tests complete.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test, describe } from \"vitest\";\nimport { runAdapterTest } from \"better-auth/adapters/test\";\nimport { myAdapter } from \"./my-adapter\";\n\ndescribe(\"My Adapter Tests\", async () => {\n  afterAll(async () => {\n    // Run DB cleanup here...\n  });\n  const adapter = myAdapter({\n    debugLogs: { // If your adapter config allows passing in debug logs, then pass this here.\n\t\t\tisRunningAdapterTests: true, // This is our super secret flag to let us know to only log debug logs if a test fails.\n\t\t}\n  });\n\n  await runAdapterTest({\n    getAdapter: async (betterAuthOptions = {}) => {\n      return adapter(betterAuthOptions);\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Nuxt Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a Nuxt application using Better Auth. It imports the `auth` object and utilizes the `defineEventHandler` function from Nuxt to handle authentication requests at the `/server/api/auth/[...all].ts` route, converting the event to a WebRequest.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/utils/auth\"; // path to your auth file\n\nexport default defineEventHandler((event) => {\n    return auth.handler(toWebRequest(event));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Deletion\nDESCRIPTION: This snippet shows how to configure the behavior of organization deletion using the `organizationDeletion` option within the `organization` plugin of `betterAuth`.  It allows disabling deletion completely or defining callbacks to run before and after the deletion process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst auth = betterAuth({\n  plugins: [\n    organization({\n      organizationDeletion: {\n        disabled: true, //to disable it altogether\n        beforeDelete: async (data, request) => {\n          // a callback to run before deleting org\n        },\n        afterDelete: async (data, request) => {\n          // a callback to run after deleting org\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Create API Key with Custom Rate Limit - TypeScript\nDESCRIPTION: This snippet shows how to create an API key with custom rate limit settings. The rate limit is set at the time of creation. This requires accessing the server auth instance, as customization is only possible on the server side.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.createApiKey({\n  body: {\n    rateLimitEnabled: true,\n    rateLimitTimeWindow: 1000 * 60 * 60 * 24, // 1 day\n    rateLimitMax: 10, // 10 requests per day\n  },\n  headers: user_headers,\n});\n```\n\n----------------------------------------\n\nTITLE: API Key Plugin Configuration - TypeScript\nDESCRIPTION: This snippet shows how to configure the `apiKey` plugin within the `betterAuth` configuration. It includes options for specifying API key headers.  The `apiKeyHeaders` option defines which headers to check for the API key.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n  plugins: [\n    apiKey({\n      apiKeyHeaders: ['x-api-key', 'xyz-api-key'], // or you can pass just a string, eg: \"x-api-key\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configure beforeDelete Callback in Better Auth\nDESCRIPTION: This snippet shows how to configure the `beforeDelete` callback in Better Auth. This callback is executed before a user is deleted and can be used for cleanup or additional checks.  APIError can be thrown to prevent user deletion.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    user: {\n        deleteUser: {\n            enabled: true,\n            beforeDelete: async (user) => {\n                // Perform any cleanup or additional checks here\n            },\n        },\n    },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { APIError } from \"better-auth/api\";\n\nexport const auth = betterAuth({\n    user: {\n        deleteUser: {\n            enabled: true,\n            beforeDelete: async (user, request) => {\n                if (user.email.includes(\"admin\")) {\n                    throw new APIError(\"BAD_REQUEST\", {\n                        message: \"Admin accounts can't be deleted\",\n                    });\n                }\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Expo Plugin to Better Auth Server\nDESCRIPTION: Configures the Better Auth server to use the Expo plugin. This setup is essential for handling Expo-specific authentication flows.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\n\nexport const auth = betterAuth({\n    plugins: [expo()]\n});\n```\n\n----------------------------------------\n\nTITLE: Create a Subscription for an Organization\nDESCRIPTION: This code snippet shows how to create a subscription for an organization using a custom `referenceId`.  This associates the subscription with the specified organization instead of the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a subscription for an organization\nawait client.subscription.upgrade({\n    plan: \"pro\",\n    referenceId: \"org_123456\",\n    successUrl: \"/dashboard\",\n    cancelUrl: \"/pricing\",\n    seats: 5 // Number of seats for team plans\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Device Sessions on Client Side\nDESCRIPTION: This code shows how to retrieve all active sessions for the current user using the client-side multi-session plugin. It calls the listDeviceSessions method from the authClient.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/multi-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.multiSession.listDeviceSessions()\n```\n\n----------------------------------------\n\nTITLE: Using the useSession Hook (Solid/TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the `useSession` hook in a Solid component to access session data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authClient } from \"~/lib/auth-client\"; // [!code highlight]\n\n            export default function Home() {\n                const session = authClient.useSession() // [!code highlight]\n                return (\n                    <pre>{JSON.stringify(session(), null, 2)}</pre>\n                );\n            }\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Client with Vue\nDESCRIPTION: Initializes a Vue-specific Better Auth client instance by specifying the base URL of the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/vue\"\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Solid Auth Client Initialization\nDESCRIPTION: This snippet shows how to create the Better Auth client with Solid.  It imports `createAuthClient` from `better-auth/solid` and initializes it with a `baseURL` pointing to the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/solid\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */ // [!code highlight]\n    baseURL: \"http://localhost:3000\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with plugins (TypeScript)\nDESCRIPTION: This snippet shows how to configure plugins for Better Auth, specifically the `emailOTP` plugin.  It imports the plugin and configures the `sendVerificationOTP` function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { emailOTP } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n\tplugins: [\n\t\temailOTP({\n\t\t\tsendVerificationOTP: async ({ email, otp, type }) => {\n\t\t\t\t// Send OTP to user's email\n\t\t\t}\n\t\t})\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with verification configuration (TypeScript)\nDESCRIPTION: This snippet configures verification settings for Better Auth, including model name, field mappings, and disabling cleanup of expired verification values.  It customizes the verification table.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tverification: {\n\t\tmodelName: \"verifications\",\n\t\tfields: {\n\t\t\tuserId: \"user_id\"\n\t\t},\n\t\tdisableCleanup: false\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data in Server Components\nDESCRIPTION: Shows how to properly retrieve session data in a server component by using the auth.api.getSession method with Next.js headers. This approach is necessary because the client-side getSession method can't access cookies in server environments.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\";\nimport { headers } from \"next/headers\";\n\nconst session = await auth.api.getSession({\n    headers: await headers()\n})\n```\n\n----------------------------------------\n\nTITLE: Configure MongoDB Adapter\nDESCRIPTION: This snippet configures Better Auth to use MongoDB as an adapter. It imports the necessary modules and the MongoDB client from your project, and then passes the client to `mongodbAdapter`. The adapter is then passed to the `betterAuth` configuration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { mongodbAdapter } from \"better-auth/adapters/mongodb\";\nimport { client } from \"@/db\"; // your mongodb client\n\nexport const auth = betterAuth({\n    database: mongodbAdapter(client)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Anonymous Plugin - Better Auth TypeScript\nDESCRIPTION: Setting up the anonymous plugin in the client-side authentication configuration\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/anonymous.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { anonymousClient } from \"better-auth/client/plugins\"\n\nconst authClient =  createAuthClient({\n    plugins: [\n        anonymousClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Client with React\nDESCRIPTION: Initializes a React-specific Better Auth client instance by specifying the base URL of the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/react\"\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Define Dynamic Subscription Plans\nDESCRIPTION: This example demonstrates defining subscription plans dynamically. It fetches the subscription plans from the database and transforms the result.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Dynamic plans (fetched from database or API)\nsubscription: {\n    enabled: true,\n    plans: async () => {\n        const plans = await db.query(\"SELECT * FROM plans\");\n        return plans.map(plan => ({\n            name: plan.name,\n            priceId: plan.stripe_price_id,\n            limits: JSON.parse(plan.limits)\n        }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve API Key Metadata - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve the metadata associated with an API key.  The `getApiKey` function is used to fetch the API key object, and the metadata can then be accessed from the `metadata` property.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = await auth.api.getApiKey({\n  body: {\n    keyId: \"your_api_key_id_here\",\n  },\n});\n\nconsole.log(apiKey.metadata.plan); // \"premium\"\n```\n\n----------------------------------------\n\nTITLE: Schema Migration Command for Better Auth with PostgreSQL\nDESCRIPTION: CLI command to migrate an existing PostgreSQL database schema to match the current Better Auth configuration. This ensures your database structure stays in sync with your application requirements.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/postgresql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Using Session Middleware in Better Auth Endpoints\nDESCRIPTION: Shows how to use the built-in sessionMiddleware to validate user sessions and make session data available in the context object for endpoint handlers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthMiddleware } from \"better-auth/plugins\";\nimport { sessionMiddleware } from \"better-auth/api\";\n\nconst myPlugin = ()=>{\n    return {\n        id: \"my-plugin\",\n        endpoints: {\n            getHelloWorld: createAuthEndpoint(\"/my-plugin/hello-world\", {\n                method: \"GET\",\n                use: [sessionMiddleware], // [!code highlight]\n            }, async(ctx) => {\n                const session = ctx.context.session;\n                return ctx.json({\n                    message: \"Hello World\"\n                })\n            })\n        }\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Start API Route Handler\nDESCRIPTION: This snippet shows how to create a default API route handler for TanStack Start. It imports necessary functions from @tanstack/react-start/api and exports a default handler.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/tanstack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createStartAPIHandler,\n  defaultAPIFileRouteHandler,\n} from '@tanstack/react-start/api'\n\nexport default createStartAPIHandler(defaultAPIFileRouteHandler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification in Better Auth\nDESCRIPTION: Configuration snippet to enable email verification by implementing a sendVerificationEmail function that sends a verification link to the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { sendEmail } from \"./email\"; // your email sending function\n\nexport const auth = betterAuth({\n  emailVerification: {\n    sendVerificationEmail: async ( { user, url, token }, request) => {\n      await sendEmail({\n        to: user.email,\n        subject: \"Verify your email address\",\n        text: `Click the link to verify your email: ${url}`,\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Freshness in Better Auth\nDESCRIPTION: This code shows how to customize the freshAge setting which determines how long a session is considered fresh. In this example, it's set to 5 minutes.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/session-management.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    //... other config options\n    session: {\n        freshAge: 60 * 5 // 5 minutes (the session is fresh if created within the last 5 minutes)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Teams\nDESCRIPTION: This snippet demonstrates retrieving a list of teams from an organization using `authClient.organization.listTeams`. It uses the `query` parameter to filter teams by `organizationId` (optional, defaults to the active organization).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst teams = await authClient.organization.listTeams({\n  query: {\n    organizationId: org.id, // Optional: defaults to active organization\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema with Better Auth CLI\nDESCRIPTION: This command applies the Better Auth schema directly to your database. It's available specifically when using the built-in Kysely adapter and will update your database structure to match requirements.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Strict Mode for Better Auth\nDESCRIPTION: This snippet shows how to enable strict mode in the TypeScript configuration file for Better Auth. It recommends setting 'strict' to true or at least enabling 'strictNullChecks' if full strict mode cannot be used.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strictNullChecks\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Open API Schema in Better Auth\nDESCRIPTION: This code demonstrates how to generate the Open API schema as a JSON object using the Better Auth API. It imports the auth configuration and calls the generateOpenAPISchema method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/open-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/lib/auth\"\n\nconst openAPISchema = await auth.api.generateOpenAPISchema()\nconsole.log(openAPISchema)\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Handler in SolidStart\nDESCRIPTION: Code to mount the Better Auth handler to SolidStart server routes by creating GET and POST endpoints. The handler should be placed in an auth.ts file within the /routes/api/auth directory.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/solid-start.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/lib/auth\";\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n----------------------------------------\n\nTITLE: Add Admin Plugin to Auth Config - Typescript\nDESCRIPTION: This code snippet demonstrates how to add the Admin plugin to the Better Auth configuration. It imports the `admin` plugin and includes it in the `plugins` array within the `betterAuth` configuration object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { admin } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        admin() // [!code highlight]\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Bearer Plugin in TypeScript\nDESCRIPTION: This snippet shows how to add the Bearer plugin to the authentication setup using better-auth.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/bearer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [bearer()]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Transformation for Database Compatibility\nDESCRIPTION: Example of implementing key mapping to transform field names between Better Auth and a database. This example shows how to map 'id' to '_id' for MongoDB compatibility when saving data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmapKeysTransformInput: () => {\n  return {\n    id: \"_id\", // We want to replace `id` to `_id` to save into MongoDB\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Hook Returns\nDESCRIPTION: This example demonstrates how to access the returned value from previous hooks in the chain using ctx.context.returned. This allows hooks to build on each other's outputs.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAuthMiddleware(async (ctx) => {\n    const returned = ctx.context.returned; //this could be a successful response or an APIError\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Team\nDESCRIPTION: This snippet demonstrates removing a team from an organization using `authClient.organization.removeTeam`. It requires the `teamId` and optionally the `organizationId` (defaults to the active organization).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.organization.removeTeam({\n    teamId: \"team-id\",\n    organizationId: \"org-id\" // Optional: defaults to active organization\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Adapter Settings\nDESCRIPTION: Configuration setup for the adapter including ID handling, data type support, and debug options.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAdapter = (config: CustomAdapterConfig = {}) =>\n  createAdapter({\n    config: {\n      adapterId: \"custom-adapter\",\n      adapterName: \"Custom Adapter\",\n      usePlural: config.usePlural ?? false,\n      debugLogs: config.debugLogs ?? false,\n      supportsJSON: false,\n      supportsDates: true,\n      supportsBooleans: true,\n      supportsNumericIds: true,\n    },\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Generic OAuth Client Plugin\nDESCRIPTION: This snippet demonstrates how to include the Generic OAuth client plugin in your authentication client instance for client-side integration.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nimport { genericOAuthClient } from \"better-auth/client/plugins\"\n\nconst authClient = createAuthClient({\n    plugins: [\n        genericOAuthClient()\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Better Auth with Astro\nDESCRIPTION: Required environment variables for setting up Better Auth, including Google OAuth credentials and the authentication secret. These should be added to your .env file.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/astro-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\nBETTER_AUTH_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Full Migration Script for Transferring Users from Supabase to Better Auth\nDESCRIPTION: A comprehensive script that connects to the database, queries Supabase users and identities, and creates equivalent records in Better Auth. It handles email/password accounts and social provider connections.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pool } from \"pg\";\nimport { auth } from \"./auth\";\nimport { User as SupabaseUser } from \"@supabase/supabase-js\";\n\ntype User = SupabaseUser & {\n\tis_super_admin: boolean;\n\traw_user_meta_data: {\n\t\tavatar_url: string;\n\t};\n\tencrypted_password: string;\n\temail_confirmed_at: string;\n\tcreated_at: string;\n\tupdated_at: string;\n\tis_anonymous: boolean;\n\tidentities: {\n\t\tprovider: string;\n\t\tidentity_data: {\n\t\t\tsub: string;\n\t\t\temail: string;\n\t\t};\n\t\tcreated_at: string;\n\t\tupdated_at: string;\n\t};\n};\n\nconst migrateFromSupabase = async () => {\n\tconst ctx = await auth.$context;\n\tconst db = ctx.options.database as Pool;\n\tconst users = await db\n\t\t.query(`\n\t\t\tSELECT \n\t\t\t\tu.*,\n\t\t\t\tCOALESCE(\n\t\t\t\t\tjson_agg(\n\t\t\t\t\t\ti.* ORDER BY i.id\n\t\t\t\t\t) FILTER (WHERE i.id IS NOT NULL),\n\t\t\t\t\t'[]'::json\n\t\t\t\t) as identities\n\t\t\tFROM auth.users u\n\t\t\tLEFT JOIN auth.identities i ON u.id = i.user_id\n\t\t\tGROUP BY u.id\n\t\t`)\n\t\t.then((res) => res.rows as User[]);\n\tfor (const user of users) {\n\t\tif (!user.email) {\n\t\t\tcontinue;\n\t\t}\n\t\tawait ctx.adapter\n\t\t\t.create({\n\t\t\t\tmodel: \"user\",\n\t\t\t\tdata: {\n\t\t\t\t\tid: user.id,\n\t\t\t\t\temail: user.email,\n\t\t\t\t\tname: user.email,\n\t\t\t\t\trole: user.is_super_admin ? \"admin\" : user.role,\n\t\t\t\t\temailVerified: !!user.email_confirmed_at,\n\t\t\t\t\timage: user.raw_user_meta_data.avatar_url,\n\t\t\t\t\tcreatedAt: new Date(user.created_at),\n\t\t\t\t\tupdatedAt: new Date(user.updated_at),\n\t\t\t\t\tisAnonymous: user.is_anonymous,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.catch(() => {});\n\t\tfor (const identity of user.identities) {\n\t\t\tconst existingAccounts = await ctx.internalAdapter.findAccounts(user.id);\n\n\t\t\tif (identity.provider === \"email\") {\n\t\t\t\tconst hasCredential = existingAccounts.find(\n\t\t\t\t\t(account) => account.providerId === \"credential\",\n\t\t\t\t);\n\t\t\t\tif (!hasCredential) {\n\t\t\t\t\tawait ctx.adapter\n\t\t\t\t\t\t.create({\n\t\t\t\t\t\t\tmodel: \"account\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t\t\t\tproviderId: \"credential\",\n\t\t\t\t\t\t\t\taccountId: user.id,\n\t\t\t\t\t\t\t\tpassword: user.encrypted_password,\n\t\t\t\t\t\t\t\tcreatedAt: new Date(user.created_at),\n\t\t\t\t\t\t\t\tupdatedAt: new Date(user.updated_at),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {});\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst supportedProviders = Object.keys(ctx.options.socialProviders || {})\n\t\t\tif (supportedProviders.includes(identity.provider)) {\n\t\t\t\tconst hasAccount = existingAccounts.find(\n\t\t\t\t\t(account) => account.providerId === identity.provider,\n\t\t\t\t);\n\t\t\t\tif (!hasAccount) {\n\t\t\t\t\tawait ctx.adapter.create({\n\t\t\t\t\t\tmodel: \"account\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t\t\tproviderId: identity.provider,\n\t\t\t\t\t\t\taccountId: identity.identity_data?.sub,\n\t\t\t\t\t\t\tcreatedAt: new Date(identity.created_at ?? user.created_at),\n\t\t\t\t\t\t\tupdatedAt: new Date(identity.updated_at ?? user.updated_at),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nmigrateFromSupabase();\n```\n\n----------------------------------------\n\nTITLE: Rejecting an Invitation\nDESCRIPTION: This snippet demonstrates how to reject an invitation using `authClient.organization.rejectInvitation`. It requires the `invitationId` of the invitation to reject.  It must be called by the user who received the invitation while they are logged in.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n//reject invitation (needs to be called when the user who received the invitation is logged in)\nawait authClient.organization.rejectInvitation({\n    invitationId: \"invitation-id\"\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client Instance for Vue in Nuxt\nDESCRIPTION: This snippet demonstrates how to create a Better Auth client instance for use with Vue in a Nuxt application. It imports the createAuthClient function from the Vue-specific package.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/nuxt.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/vue\" // make sure to import from better-auth/vue\n\nexport const authClient = createAuthClient({\n    //you can pass client configuration here\n})\n```\n\n----------------------------------------\n\nTITLE: Handle Subscription Upgrade Errors\nDESCRIPTION: This code snippet shows how to handle errors that can occur during the subscription upgrade process. It awaits the result and display the error message to the user.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { error } = await client.subscription.upgrade({\n    plan: \"pro\",\n    successUrl: \"/dashboard\",\n    cancelUrl: \"/pricing\",\n});\nif(error) {\n    alert(error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Sign-In with ID Token or Access Token (TypeScript)\nDESCRIPTION: This code demonstrates how to sign in with Facebook using either an ID token or access token. It's useful for implementing sign-in on the server-side when you already have the token from the client-side.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/facebook.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await authClient.signIn.social({\n    provider: \"facebook\",\n    idToken: {\n        ...(platform === 'ios' ?\n            { token: idToken }\n            : { token: accessToken, accessToken: accessToken }),\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Better Auth Schema\nDESCRIPTION: Command to generate the database schema required by Better Auth using the CLI tool.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/drizzle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Signing Up with Username\nDESCRIPTION: Using the client to register a new user with a username. This function accepts email, name, password, and username parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst data = await authClient.signUp.email({\n    email: \"email@domain.com\",\n    name: \"Test User\",\n    password: \"password1234\",\n    username: \"test\"\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Email Verification in Better Auth\nDESCRIPTION: Code sample demonstrating how to manually trigger email verification by calling the sendVerificationEmail function with the user's email and a callback URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.sendVerificationEmail({\n  email: \"user@email.com\",\n  callbackURL: \"/\", // The redirect URL after verification\n});\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Better Auth\nDESCRIPTION: Server-side code for updating a user's password in the database using the internal adapter or ORM directly. Requires a previously hashed password.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.internalAdapter.updatePassword(\"userId\", hash) //(you can also use your orm directly)\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key with Better Auth CLI\nDESCRIPTION: This command generates a secure secret key for your Better Auth instance. The secret is used for encryption and securing authentication processes in your application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest secret\n```\n\n----------------------------------------\n\nTITLE: Handling API Response Errors in Better Auth\nDESCRIPTION: Shows how to handle errors from Better Auth client functions by checking the error property in the response object.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await authClient.signIn.email({\n    email: \"email@email.com\",\n    password: \"password1234\"\n})\nif (error) {\n    //handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Better Auth Plugin Schema\nDESCRIPTION: Shows how to define database schemas for Better Auth plugins, including table definitions and field configurations.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BetterAuthPlugin } from \"better-auth/plugins\";\n\nconst myPlugin = ()=> {\n    return {\n        id: \"my-plugin\",\n        schema: {\n            myTable: {\n                fields: {\n                    name: {\n                        type: \"string\"\n                    }\n                },\n                modelName: \"myTable\" // optional if you want to use a different name than the key\n            }\n        }\n    } satisfies BetterAuthPlugin\n}\n```\n\n----------------------------------------\n\nTITLE: List User Sessions - Typescript\nDESCRIPTION: This code snippet shows how to list all sessions for a user using the `listUserSessions` method. It requires the user ID as a parameter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessions = await authClient.admin.listUserSessions({\n  userId: \"user_id_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sign In with SSO by Email\nDESCRIPTION: This code snippet demonstrates how to sign in with SSO using an email address. The `authClient.signIn.sso` method is called with the user's email and a callback URL to redirect to after successful authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await authClient.signIn.sso({\n email: \"user@example.com\",\n callbackURL: \"/dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Expo Route Handler Setup\nDESCRIPTION: This snippet shows how to setup the route handler for Expo. It imports the auth object and exports it as GET and POST handlers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@/lib/server/auth'; // path to your auth file\n\nconst handler = auth.handler;\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Nuxt Better Auth\nDESCRIPTION: Commands for installing dependencies and starting the development server for the Nuxt Better Auth example project. Requires proper environment variables to be set up first.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/nuxt-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Email Sign-In Example with Better Auth\nDESCRIPTION: Demonstrates how to use the Better Auth client to sign in a user with email and password authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/client.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient = createAuthClient()\n\nawait authClient.signIn.email({\n    email: \"test@user.com\",\n    password: \"password1234\"\n})\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration\nDESCRIPTION: This command uses the Better Auth CLI to run database migrations. This ensures that the necessary tables and fields for passkey authentication are added to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/passkey.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Generating Database Schema for Better Auth\nDESCRIPTION: This snippet shows an alternative method to add the necessary fields and tables to the database by generating the schema using the Better Auth CLI.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Implementation for Rate Limiting\nDESCRIPTION: Example of implementing custom storage handlers for rate limit data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    //...other options\n    rateLimit: {\n        customStorage: {\n            get: async (key) => {\n                // get rate limit data\n            },\n            set: async (key, value) => {\n                // set rate limit data\n            },\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Stop Impersonating User - Typescript\nDESCRIPTION: This code snippet demonstrates how to stop impersonating a user using the `stopImpersonating` method, reverting to the admin account.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.admin.stopImpersonating();\n```\n\n----------------------------------------\n\nTITLE: Signing In with Username\nDESCRIPTION: Using the client to authenticate a user with their username and password instead of email. Requires username and password parameters.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/username.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst data = await authClient.signIn.username({\n    username: \"test\",\n    password: \"password1234\",\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth Cookies Configuration\nDESCRIPTION: This example demonstrates how to access Better Auth's predefined cookie properties, such as cookie names, which can be useful when you need to work with these cookies directly.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAuthMiddleware(async (ctx) => {\n    const cookieName = ctx.context.authCookies.sessionToken.name;\n});\n```\n\n----------------------------------------\n\nTITLE: OAuth Consent Database Schema Definition\nDESCRIPTION: Defines the database table schema for storing user consent records including fields for user and client references, scope permissions, and consent status.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/oidc-provider.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<DatabaseTable\n  fields={[\n    { \n      name: \"id\", \n      type: \"string\", \n      description: \"Database ID of the consent\",\n      isPrimaryKey: true\n    },\n    { \n      name: \"userId\", \n      type: \"string\", \n      description: \"ID of the user who gave consent\",\n      isForeignKey: true,\n      references: { model: \"user\", field: \"id\" }\n    },\n    { \n      name: \"clientId\", \n      type: \"string\", \n      description: \"ID of the OAuth client\",\n      isForeignKey: true,\n      references: { model: \"oauthClient\", field: \"clientId\" }\n    },\n    { \n      name: \"scopes\", \n      type: \"string\", \n      description: \"Comma-separated list of scopes consented to\",\n      isRequired: true\n    },\n    { \n      name: \"consentGiven\", \n      type: \"boolean\", \n      description: \"Indicates if consent was given\",\n      isRequired: true\n    },\n    { \n      name: \"createdAt\", \n      type: \"Date\", \n      description: \"Timestamp of when the consent was given\" \n    },\n    {\n      name: \"updatedAt\",\n      type: \"Date\",\n      description: \"Timestamp of when the consent was last updated\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Astro Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in an Astro application using Better Auth. It imports the `APIRoute` type and the `auth` object, then defines GET and POST routes that use `auth.handler` to process authentication requests.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { APIRoute } from \"astro\";\nimport { auth } from \"@/auth\"; // path to your auth file\n\nexport const GET: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n\nexport const POST: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n```\n\n----------------------------------------\n\nTITLE: Delete User with Callback URL using Better Auth Client\nDESCRIPTION: This snippet shows how to delete a user using the `deleteUser` method with a callback URL.  The callback URL is used to redirect the user after the deletion is complete.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.deleteUser({\n    callbackURL: \"/goodbye\" // you can provide a callback URL to redirect after deletion\n});\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a SvelteKit application using Better Auth. It imports the `auth` object and `svelteKitHandler` from the `better-auth/svelte-kit` package.  The `handle` hook is used to integrate Better Auth with SvelteKit's request handling.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"$lib/auth\"; // path to your auth file\nimport { svelteKitHandler } from \"better-auth/svelte-kit\";\n\nexport async function handle({ event, resolve }) {\n    return svelteKitHandler({ event, resolve, auth });\n}\n```\n\n----------------------------------------\n\nTITLE: Vanilla JS Auth Client Initialization\nDESCRIPTION: This snippet shows how to create the Better Auth client with Vanilla JS.  It imports `createAuthClient` from `better-auth/client` and initializes it with a `baseURL` pointing to the authentication server.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */ // [!code highlight]\n    baseURL: \"http://localhost:3000\" // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Active Member\nDESCRIPTION: This snippet demonstrates how to get the currently active member of the organization by using the `authClient.organization.getActiveMember` function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst member = await authClient.organization.getActiveMember()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Better Auth Demo\nDESCRIPTION: Commands to install the necessary dependencies for the Better Auth demo application using various package managers.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/demo/nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Better Auth Astro Example Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Better Auth Astro example project using pnpm as the package manager.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/astro-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Auth Client for Server Environments\nDESCRIPTION: Demonstrates the correct import path for the createAuthClient function when using it in server environments like Next.js middleware, server actions, or server components.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\n```\n\n----------------------------------------\n\nTITLE: Implementing createSchema Method for Better Auth Adapter\nDESCRIPTION: Example of implementing the createSchema method which allows the Better Auth CLI to generate a schema for the database. It receives tables from the user's schema and the output file path.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSchema: async ({ file, tables }) => {\n  // ... Custom logic to create a schema for the database.\n};\n```\n\n----------------------------------------\n\nTITLE: Drizzle Schema Migration Commands\nDESCRIPTION: Commands for generating and applying database migrations using Drizzle Kit.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/drizzle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx drizzle-kit generate # generate the migration file\nnpx drizzle-kit migrate # apply the migration\n```\n\n----------------------------------------\n\nTITLE: Data Caching in SolidStart with Query Function\nDESCRIPTION: This snippet shows how to use SolidStart's query function to cache data returned from the Better Auth API, enabling efficient data fetching and caching.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/optimizing-for-performance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = query(\n    async () => (await auth.api.listUsers()).users,\n    \"getUsers\"\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Script\nDESCRIPTION: Execute the migration script to transfer users and accounts from Supabase to Better Auth using Bun, Node, or another TypeScript runtime.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/supabase-migration-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbun migration.ts # or use node, ts-node, etc.\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server\nDESCRIPTION: Command to run the development server for local development and testing\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/remix-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SvelteKit Better Auth\nDESCRIPTION: Commands to install dependencies and start the development server for the Better Auth SvelteKit implementation. Requires proper environment variables to be set in .env file before running.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/svelte-kit-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: CLI command to generate schemas\nDESCRIPTION: This code snippet shows the CLI command used to generate the necessary database schemas based on the plugin's schema definition.  This ensures the database is synchronized with any new fields defined in the plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Window with Custom Rules\nDESCRIPTION: Example of setting up rate limiting with both global and path-specific custom rules.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/rate-limit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    //...other options\n    rateLimit: {\n        window: 60, // time window in seconds\n        max: 100, // max requests in the window\n        customRules: {\n            \"/sign-in/email\": {\n                window: 10,\n                max: 3,\n            },\n            \"/two-factor/*\": async (request)=> {\n                // custom function to return rate limit window and max\n                return {\n                    window: 10,\n                    max: 3,\n                }\n            }\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Info Fetching\nDESCRIPTION: Customizes how user information is retrieved from the OAuth provider by providing a custom getUserInfo function. This allows handling non-standard APIs or transforming the provider's response format.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/generic-oauth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngenericOAuth({\n  config: [\n    {\n      providerId: \"custom-provider\",\n      // ... other config options\n      getUserInfo: async (tokens) => {\n        // Custom logic to fetch and return user info\n        const userInfo = await fetchUserInfoFromCustomProvider(tokens);\n        return {\n          id: userInfo.sub,\n          email: userInfo.email,\n          name: userInfo.name,\n          // ... map other fields as needed\n        };\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing New Session in After Hooks\nDESCRIPTION: This example shows how to access the newly created session in an after hook. This is useful for performing operations that need information about the user who just registered or logged in.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/hooks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAuthMiddleware(async (ctx) => {\n    const newSession = ctx.context.newSession\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up API Key Plugin\nDESCRIPTION: TypeScript configuration for implementing API key functionality with rate limiting and expiration features\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKey } from \"better-auth/plugins\";\n\nconst auth = betterAuth({\n  plugins: [apiKey()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Plugin\nDESCRIPTION: Command to install the Stripe plugin for Better Auth integration\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/changelogs/1-2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @better-auth/stripe\n```\n\n----------------------------------------\n\nTITLE: Implementing Instagram OAuth Integration with Better Auth\nDESCRIPTION: This example demonstrates how to configure the Generic OAuth plugin for Instagram authentication, including the required authorization endpoints and scopes for Instagram's API.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/other-social-providers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { genericOAuth } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ... other config options\n  plugins: [\n    genericOAuth({\n      config: [\n        {\n          providerId: \"instagram\",\n          clientId: process.env.INSTAGRAM_CLIENT_ID as string,\n          clientSecret: process.env.INSTAGRAM_CLIENT_SECRET as string,\n          authorizationUrl: \"https://api.instagram.com/oauth/authorize\",\n          tokenUrl: \"https://api.instagram.com/oauth/access_token\",\n          scopes: [\"user_profile\", \"user_media\"],\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Stripe SDK\nDESCRIPTION: This command installs the Stripe SDK, required for server-side interactions with the Stripe API. Version 17.7.0 is specified for compatibility.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstripe@17.7.0\n```\n\n----------------------------------------\n\nTITLE: Adding Trusted Origins to Better Auth Config\nDESCRIPTION: Updates the Better Auth configuration to include the app's scheme in the trusted origins list. This allows Better Auth to securely redirect users back to the app after authentication.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    trustedOrigins: [\"myapp://\"]\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Token Response Format\nDESCRIPTION: This snippet illustrates the JSON response format when retrieving a JWT token from the /token endpoint. It includes a single 'token' field containing the JWT string.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/jwt.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"token\": \"ey...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Package\nDESCRIPTION: Command to install the Better Auth package as a dependency for the browser extension project.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/browser-extension-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add better-auth\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Tutorial Resources with React Component in Markdown\nDESCRIPTION: This code snippet uses a custom Resource component to render a collection of video tutorial resources related to Better Auth. Each resource includes a title, description, link, and tags.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Resource resources={\n    [\n\t\t{\n\t\t\ttitle: \"The State of Authentication\",\n\t\t\tdescription:\n\t\t\t\t\"<strong>Theo(t3.gg)</strong> explores the current landscape of authentication, discussing trends, challenges, and where the industry is heading.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=lxslnp-ZEMw\",\n\t\t\ttags: [\"trends\", \"showcase\", \"review\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Last Authentication You Will Ever Need\",\n\t\t\tdescription:\n\t\t\t\t\"A comprehensive tutorial demonstrating why Better Auth could be the final authentication solution you'll need for your projects.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=hFtufpaMcLM\",\n\t\t\ttags: [\"implementation\", \"showcase\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"This Might Be My New Favourite Auth Library\",\n\t\t\tdescription:\n\t\t\t\t\"<strong>developedbyed</strong> explores the features and capabilities of Better Auth, explaining why it stands out among authentication libraries.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=Hjs3zM7o7NE\",\n\t\t\ttags: [\"review\", \"showcase\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Nextjs 15 Authentication Made EASY with Better Auth\",\n\t\t\tdescription:\n\t\t\t\t\"A practical guide showing how to seamlessly integrate Better Auth with Next.js 15 for robust authentication.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=lxslnp-ZEMw\",\n\t\t\ttags: [\"nextjs\", \"implementation\", \"tutorial\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Best authentication framework for next.js\",\n\t\t\tdescription:\n\t\t\t\t\"A detailed comparison of authentication frameworks for Next.js, highlighting why Better Auth might be your best choice.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=V--T0q9FrEw\",\n\t\t\ttags: [\"nextjs\", \"comparison\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Better-Auth: A First Look\",\n\t\t\tdescription:\n\t\t\t\t\"An introductory overview and demonstration of Better Auth's core features and capabilities.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=2cQTV6NYxis\",\n\t\t\ttags: [\"implementation\", \"showcase\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Stripe was never so easy (with better auth)\",\n\t\t\tdescription: \"A tutorial on how to integrate Stripe with Better Auth.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=g-RIrzBEX6M\",\n\t\t\ttags: [ \"implementation\"],\n\t\t},\n\t\t{\n\t\t\ttitle: \"Better Auth: Headless Authentication for Your TanStack Start App\",\n\t\t\tdescription: \"<strong>Jack</strong> demonstrates how to implement headless authentication in your TanStack Start application using Better Auth, providing a modern approach to auth.\",\n\t\t\thref: \"https://www.youtube.com/watch?v=Atev8Nxpw7c\", \n\t\t\ttags: [\"tanstack\" ,  \"implementation\"],\n\t\t},\n    ]\n} />\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Client Dependencies\nDESCRIPTION: Commands to install necessary dependencies for the Expo client application, including Better Auth, Expo plugin, and additional packages for social integrations.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/integrations/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbetter-auth @better-auth/expo\n```\n\nLANGUAGE: bash\nCODE:\n```\nexpo-linking expo-web-browser expo-constants\n```\n\n----------------------------------------\n\nTITLE: SolidStart Route Handler Setup\nDESCRIPTION: This snippet demonstrates how to set up a route handler in a SolidStart application using Better Auth. It imports the `auth` object and `toSolidStartHandler` from the `better-auth/solid-start` package to handle authentication requests at the `/routes/api/auth/*all.ts` route.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/installation.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"~/lib/auth\"; // path to your auth file\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n----------------------------------------\n\nTITLE: Restrict Organization Creation (TypeScript)\nDESCRIPTION: This code snippet shows how to restrict organization creation based on a user's subscription plan. The `allowUserToCreateOrganization` option is set to an async function that checks the user's subscription and returns a boolean indicating whether the user is allowed to create an organization. A `getSubscription` function is assumed to exist to retrieve user subscription data.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\nimport { organization } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    //...\n    plugins: [\n        organization({\n            allowUserToCreateOrganization: async (user) => { // [!code highlight]\n                const subscription = await getSubscription(user.id) // [!code highlight]\n                return subscription.plan === \"pro\" // [!code highlight]\n            } // [!code highlight]\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema\nDESCRIPTION: This code snippet shows how to generate the database schema using the Better Auth CLI. This command generates the schema for the SSO functionality, allowing manual application to the database.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/sso.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Hashing Password for Update in Better Auth\nDESCRIPTION: Server-side code for hashing a new password before updating it in the database. This creates a secure hash of the password.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/email-password.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = await auth.$context;\nconst hash = await ctx.password.hash(\"your-new-password\");\n```\n\n----------------------------------------\n\nTITLE: Running the Better Auth and TanStack Start Project\nDESCRIPTION: This command starts the development server for the Better Auth and TanStack Start project.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/tanstack-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth Expo Example\nDESCRIPTION: Commands to install dependencies and start the Better Auth Expo example project. This assumes you have already cloned the repository and set up the necessary environment variables.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/examples/expo-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Better Auth Instance\nDESCRIPTION: Demonstrates how to set up the Better Auth client with plugin support using the createAuthClient function.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\n\nconst authClient =  createAuthClient({\n    plugins: [\n        // Add your client plugins here\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: SecondaryStorage Interface Definition for Key-Value Stores\nDESCRIPTION: Interface definition for implementing secondary storage in Better Auth. This allows using key-value stores for managing session data, rate limiting counters, and more.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SecondaryStorage {\n  get: (key: string) => Promise<string | null>;\n  set: (key: string, value: string, ttl?: number) => Promise<void>;\n  delete: (key: string) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating the client plugin\nDESCRIPTION: This code snippet shows how to initiate the client plugin in `auth-client.ts`. It imports `birthdayClientPlugin` and includes it in the `plugins` array when creating the `authClient` using `createAuthClient`. This makes the client plugin available for use in the frontend.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/your-first-plugin.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\";\nimport { birthdayClientPlugin } from \"./birthday-plugin/client\";// [!code highlight]\n \nconst authClient = createAuthClient({\n    plugins: [\n      birthdayClientPlugin()// [!code highlight]\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Generating MSSQL Schema with Better Auth CLI\nDESCRIPTION: This command uses the Better Auth CLI to generate the database schema for Microsoft SQL Server based on the Better Auth configuration and plugins.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/adapters/mssql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli@latest generate\n```\n\n----------------------------------------\n\nTITLE: User Table Schema Definition with Drizzle ORM\nDESCRIPTION: Defines the user table schema with fields for basic user information, email verification, and two-factor authentication status. Includes timestamps and unique constraints for email and username.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/cli/test/__snapshots__/auth-schema.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const user = pgTable(\"user\", {\n\t\t\t\t\tid: text('id').primaryKey(),\n\t\t\t\t\tname: text('name').notNull(),\n email: text('email').notNull().unique(),\n emailVerified: boolean('email_verified').notNull(),\n image: text('image'),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull(),\n twoFactorEnabled: boolean('two_factor_enabled'),\n username: text('username').unique(),\n displayUsername: text('display_username')\n\t\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Generating Database Schema with Better Auth CLI\nDESCRIPTION: Command to generate the schema required by Better Auth. It creates the appropriate schema for your ORM if using adapters like Prisma or Drizzle, or generates an SQL file for the built-in Kysely adapter.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/database.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Cloning the Better Auth Demo Repository\nDESCRIPTION: Commands to clone the Better Auth demo repository from GitHub and navigate to the Next.js demo directory.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/demo/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/better-auth/better-auth\ncd better-auth/demo/nextjs\n```\n\n----------------------------------------\n\nTITLE: Get Session Data in TanStack Start\nDESCRIPTION: This snippet demonstrates retrieving session data in a TanStack Start API route. It accesses the request headers from the `request` object and passes them to the `auth.api.getSession` method.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/basic-usage.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"./auth\";\nimport { createAPIFileRoute } from \"@tanstack/start/api\";\n\nexport const APIRoute = createAPIFileRoute(\"/api/$\")({\n    GET: async ({ request }) => {\n        const session = await auth.api.getSession({\n            headers: request.headers\n        })\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Roles with Default Permissions\nDESCRIPTION: This snippet shows how to extend existing roles with custom permissions by merging `defaultStatements` and role permissions. It imports `defaultStatements` and `adminAc` from `better-auth/plugins/organization/access` and merges the default statements with the custom `project` statement. The `admin` role is then extended with the default admin permissions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/organization.mdx#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccessControl } from \"better-auth/plugins/access\";\nimport { defaultStatements, adminAc } from 'better-auth/plugins/organization/access'\n\nconst statement = {\n    ...defaultStatements, // [!code highlight]\n    project: [\"create\", \"share\", \"update\", \"delete\"],\n} as const;\n\nconst ac = createAccessControl(statement);\n\nconst admin = ac.newRole({\n    project: [\"create\", \"update\"],\n    ...adminAc.statements, // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Session Table Schema Definition with Drizzle ORM\nDESCRIPTION: Defines the session table schema for managing user sessions with expiration times, tokens, and device information. Includes foreign key reference to user table with cascade deletion.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/cli/test/__snapshots__/auth-schema.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const session = pgTable(\"session\", {\n\t\t\t\t\tid: text('id').primaryKey(),\n\t\t\t\t\texpiresAt: timestamp('expires_at').notNull(),\n token: text('token').notNull().unique(),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull(),\n ipAddress: text('ip_address'),\n userAgent: text('user_agent'),\n userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' })\n\t\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Two-Factor Authentication Table Schema Definition with Drizzle ORM\nDESCRIPTION: Defines the two-factor authentication table schema for storing 2FA secrets and backup codes. Includes user reference with cascade deletion.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/cli/test/__snapshots__/auth-schema.txt#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const twoFactor = pgTable(\"two_factor\", {\n\t\t\t\t\tid: text('id').primaryKey(),\n\t\t\t\t\tsecret: text('secret').notNull(),\n backupCodes: text('backup_codes').notNull(),\n userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' })\n\t\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Sign-In in TypeScript\nDESCRIPTION: Demonstrates how to implement the Discord sign-in functionality using the better-auth client library. Creates an auth client instance and provides a sign-in function that uses the Discord provider.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/discord.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from \"better-auth/client\"\nconst authClient =  createAuthClient()\n\nconst signIn = async () => {\n    const data = await authClient.signIn.social({\n        provider: \"discord\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Provider in better-auth\nDESCRIPTION: This snippet shows how to import and configure the GitLab social provider in your authentication setup. It requires setting environment variables for GitLab client ID, client secret, and issuer URL.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/authentication/gitlab.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        gitlab: { // [!code highlight]\n            clientId: process.env.GITLAB_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.GITLAB_CLIENT_SECRET as string, // [!code highlight]\n            issuer: process.env.GITLAB_ISSUER as string, // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Preparing Environment Files for BetterAuth\nDESCRIPTION: Command to copy the example environment file to create a new .env file for local development in the docs directory.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp -n ./docs/.env.example ./docs/.env\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Data Transformation\nDESCRIPTION: Example of implementing a custom transformation for input data before it's saved to the database. This shows how to modify specific fields during the save process.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/guides/create-a-db-adapter.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncustomTransformInput: ({ field, data }) => {\n  if (field === \"id\") {\n    return \"123\"; // Force the id to be \"123\"\n  }\n\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Account Table Schema Definition with Drizzle ORM\nDESCRIPTION: Defines the account table schema for managing OAuth accounts and credentials. Includes fields for tokens, expiration times, and provider information with user reference.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/cli/test/__snapshots__/auth-schema.txt#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const account = pgTable(\"account\", {\n\t\t\t\t\tid: text('id').primaryKey(),\n\t\t\t\t\taccountId: text('account_id').notNull(),\n providerId: text('provider_id').notNull(),\n userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' }),\n accessToken: text('access_token'),\n refreshToken: text('refresh_token'),\n idToken: text('id_token'),\n accessTokenExpiresAt: timestamp('access_token_expires_at'),\n refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n scope: text('scope'),\n password: text('password'),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull()\n\t\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema (Bash)\nDESCRIPTION: This command-line instruction shows how to generate the database schema for the API Key plugin using the Better Auth CLI. This is an alternative to running a migration, allowing manual creation of the necessary database fields and tables for storing API key information.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Generate Database Schema\nDESCRIPTION: This command generates the database schema using the Better Auth CLI. This allows for generating the schema to add the necessary tables to the database manually.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/stripe.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Better Auth\nDESCRIPTION: Command to rename the example environment file to be used for configuration of the Better Auth demo application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/demo/nextjs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Feature Development\nDESCRIPTION: Git commands for creating a new feature branch. This ensures the developer is starting from the latest main branch before creating their feature branch.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you're on main\ngit checkout main\n\n# Pull latest changes\ngit pull upstream main\n\n# Create and switch to a new branch\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Verification Table Schema Definition with Drizzle ORM\nDESCRIPTION: Defines the verification table schema for managing verification tokens and codes. Includes expiration time and timestamps for verification tracking.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/packages/cli/test/__snapshots__/auth-schema.txt#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const verification = pgTable(\"verification\", {\n\t\t\t\t\tid: text('id').primaryKey(),\n\t\t\t\t\tidentifier: text('identifier').notNull(),\n value: text('value').notNull(),\n expiresAt: timestamp('expires_at').notNull(),\n createdAt: timestamp('created_at'),\n updatedAt: timestamp('updated_at')\n\t\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Provider in Better Auth\nDESCRIPTION: Example of how to configure Google as an OAuth provider in Better Auth by providing the clientId and clientSecret. This is the basic configuration needed to enable Google authentication for your application.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/oauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  // Other configurations...\n  socialProviders: {\n    google: {\n      clientId: \"YOUR_GOOGLE_CLIENT_ID\",\n      clientSecret: \"YOUR_GOOGLE_CLIENT_SECRET\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure afterDelete Callback in Better Auth\nDESCRIPTION: This snippet shows how to configure the `afterDelete` callback in Better Auth. This callback is executed after a user is deleted and can be used to perform cleanup actions.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = betterAuth({\n    user: {\n        deleteUser: {\n            enabled: true,\n            afterDelete: async (user, request) => {\n                // Perform any cleanup or additional actions here\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: API Key Verification Result Type (TS)\nDESCRIPTION: Defines the expected type for the result of API key verification, including a boolean indicating validity, potential error information, and the API key object (excluding the key itself).\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Result = {\n  valid: boolean;\n  error: { message: string; code: string } | null;\n  key: Omit<ApiKey, \"key\"> | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Development Servers for BetterAuth\nDESCRIPTION: Commands to start the development server and documentation server using pnpm. These commands enable developers to see changes in real-time during development.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/contributing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm -F docs dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Better Auth Documentation Site Locally\nDESCRIPTION: Commands to install dependencies and start the local development server for the Better Auth documentation site. After execution, the documentation site will be accessible at localhost:3000.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Auth with secret (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize Better Auth with a custom secret key. The `secret` option is used for encryption, signing, and hashing. It's crucial to set a strong, unique secret in production environments.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/reference/options.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tsecret: \"your-secret-key\",\n})\n```\n\n----------------------------------------\n\nTITLE: Admin Plugin Default Ban Expires In Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the default ban expiration time in seconds using the `defaultBanExpiresIn` option. If a value is not defined the ban will never expire.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nadmin({\n  defaultBanExpiresIn: 60 * 60 * 24, // 1 day\n});\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration - Bash\nDESCRIPTION: This bash command runs the database migration using the Better Auth CLI. It adds the necessary fields and tables to the database to support the Admin plugin.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/admin.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @better-auth/cli migrate\n```\n\n----------------------------------------\n\nTITLE: Delete User with Fresh Session using Better Auth Client\nDESCRIPTION: This code demonstrates how to delete a user's account using the `deleteUser` method with a fresh session. A fresh session indicates recent activity and confirms the user's intention.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/concepts/users-accounts.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait authClient.deleteUser();\n```\n\n----------------------------------------\n\nTITLE: Get API Key Result Type (TS)\nDESCRIPTION: Defines the TypeScript type representing the result of getting an API key. It represents a subset of the `ApiKey` type, excluding the actual `key` value.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Result = Omit<ApiKey, \"key\">;\n```\n\n----------------------------------------\n\nTITLE: Delete API Key Result Type (TS)\nDESCRIPTION: Defines the type for the result of deleting an API key, which is an object containing a `success` boolean property.\nSOURCE: https://github.com/better-auth/better-auth/blob/main/docs/content/docs/plugins/api-key.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype Result = {\n  success: boolean;\n};\n```"
  }
]