[
  {
    "owner": "alexgolec",
    "repo": "schwab-py",
    "content": "TITLE: Initializing and Using the Schwab Client\nDESCRIPTION: Demonstrates how to authenticate and initialize a Schwab API client using the manual flow, then retrieve price history data for Apple stock. The client requires an API key, app secret, callback URL, and token path.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.auth import client_from_manual_flow\n\n# Follow the instructions on the screen to authenticate your client.\nc = easy_client(\n        api_key='APIKEY',\n        app_secret='APP_SECRET',\n        callback_url='https://127.0.0.1',\n        token_path='/tmp/token.json')\n\nresp = c.get_price_history_every_day('AAPL')\nassert resp.status_code == httpx.codes.OK\nhistory = resp.json()\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Equity Buy Limit Order in Python\nDESCRIPTION: Example of placing a good-till-cancel limit order to buy Google stock with a specified price limit that remains active for six months. The code shows how to use the equity_buy_limit template and customize it with duration and session parameters.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-templates.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.equities import equity_buy_limit\nfrom schwab.orders.common import Duration, Session\n\nclient = ... # See \"Authentication and Client Creation\"\n\nclient.place_order(\n    1000,  # account_id\n    equity_buy_limit('GOOG', 1, 1250.0)\n        .set_duration(Duration.GOOD_TILL_CANCEL)\n        .set_session(Session.SEAMLESS)\n        .build())\n```\n\n----------------------------------------\n\nTITLE: Extracting Order ID from Schwab API Response in Python\nDESCRIPTION: Demonstrates how to extract an order ID from a successful order placement response using the Utils class. The code assumes a valid client and order exist, and shows the process of placing an order and extracting its ID for subsequent monitoring or modification.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/util.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Assume client and order already exist and are valid\naccount_id = ...  # Fetched from account_information\nr = client.place_order(account_hash, order)\nassert r.status_code == httpx.codes.OK, r.raise_for_status()\norder_id = Utils(client, account_hash).extract_order_id(r)\nassert order_id is not None\n```\n\n----------------------------------------\n\nTITLE: Creating Schwab API Client - Basic Python Example\nDESCRIPTION: Demonstrates the basic usage of easy_client function to authenticate and create a Schwab API client. Shows how to initialize the client with API credentials and make a simple price history request.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/auth.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.auth import easy_client\n\n# Follow the instructions on the screen to authenticate your client.\nc = easy_client(\n        api_key='APIKEY',\n        app_secret='APP_SECRET',\n        callback_url='https://127.0.0.1',\n        token_path='/tmp/token.json')\n\nresp = c.get_price_history_every_day('AAPL')\nassert resp.status_code == httpx.codes.OK\nhistory = resp.json()\n```\n\n----------------------------------------\n\nTITLE: Using Account Hashes for API Calls\nDESCRIPTION: Shows how to retrieve account hashes and use them for placing orders. The example creates a client using Selenium for authentication, fetches account information, and places a market order for Apple stock.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport atexit\nimport httpx\nfrom selenium import webdriver\n\nfrom schwab.auth import easy_client\nfrom schwab.orders.equities import equity_buy_market\n\ndef make_webdriver():\n    driver = webdriver.Firefox()\n    atexit.register(lambda: driver.quit())\n    return driver\n\nc = easy_client(\n        token_path='/path/to/token.json',\n        api_key='api-key',\n        app_secret='app-secret',\n        callback_url='https://callback.com',\n        webdriver_func=make_webdriver)\n\nresp = c.get_account_numbers()\nassert resp.status_code == httpx.codes.OK\n\n# The response has the following structure. If you have multiple linked\n# accounts, you'll need to inspect this object to find the hash you want:\n# [\n#    {\n#        \"accountNumber\": \"123456789\",\n#        \"hashValue\":\"123ABCXYZ\"\n#    }\n#]\naccount_hash = resp.json()[0]['hashValue']\n\nc.place_order(account_hash, equity_buy_market('AAPL', 1))\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Fetching Historical Price Data\nDESCRIPTION: Example demonstrating how to authenticate with the Schwab API and fetch daily historical price data for a stock. Shows token-based authentication setup and price history retrieval for Apple stock.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab import auth, client\nimport json\n\napi_key = 'YOUR_API_KEY'\napp_secret = 'YOUR_APP_SECRET'\ncallback_url = 'https://127.0.0.1:8182/'\ntoken_path = '/path/to/token.json'\n\nc = auth.easy_client(api_key, app_secret, callback_url, token_path)\n\nr = c.get_price_history_every_day('AAPL')\nr.raise_for_status()\nprint(json.dumps(r.json(), indent=4))\n```\n\n----------------------------------------\n\nTITLE: Complex Trigger Order JSON Structure - Schwab API\nDESCRIPTION: Advanced order specification showing a trigger order for GOOG with OCO (One-Cancels-Other) child strategies for take profit and stop loss conditions.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"session\": \"NORMAL\",\n    \"duration\": \"GOOD_TILL_CANCEL\",\n    \"orderType\": \"LIMIT\",\n    \"price\": \"1310.00\",\n    \"orderLegCollection\": [\n        {\n            \"instruction\": \"BUY\",\n            \"instrument\": {\n                \"assetType\": \"EQUITY\",\n                \"symbol\": \"GOOG\"\n            },\n            \"quantity\": 1\n        }\n    ],\n    \"orderStrategyType\": \"TRIGGER\",\n    \"childOrderStrategies\": [\n        {\n            \"orderStrategyType\": \"OCO\",\n            \"childOrderStrategies\": [\n                {\n                    \"session\": \"NORMAL\",\n                    \"duration\": \"GOOD_TILL_CANCEL\",\n                    \"orderType\": \"LIMIT\",\n                    \"price\": \"1400.00\",\n                    \"orderLegCollection\": [\n                        {\n                            \"instruction\": \"SELL\",\n                            \"instrument\": {\n                                \"assetType\": \"EQUITY\",\n                                \"symbol\": \"GOOG\"\n                            },\n                            \"quantity\": 1\n                        }\n                    ]\n                },\n                {\n                    \"session\": \"NORMAL\",\n                    \"duration\": \"GOOD_TILL_CANCEL\",\n                    \"orderType\": \"STOP_LIMIT\",\n                    \"stopPrice\": \"1250.00\",\n                    \"orderLegCollection\": [\n                        {\n                            \"instruction\": \"SELL\",\n                            \"instrument\": {\n                                \"assetType\": \"EQUITY\",\n                                \"symbol\": \"GOOG\"\n                            },\n                            \"quantity\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using StreamClient for Real-time NASDAQ Book Data in Python\nDESCRIPTION: This snippet demonstrates how to initialize a StreamClient, log in, subscribe to NASDAQ book data for a specific stock (GOOG), and continuously handle incoming messages. It uses asyncio for asynchronous operations.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/streaming.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.auth import easy_client\nfrom schwab.client import Client\nfrom schwab.streaming import StreamClient\n\nimport asyncio\nimport json\n\n# Assumes you've already created a token. See the authentication page for more\n# information.\nclient = easy_client(\n        api_key='YOUR_API_KEY',\n        app_secret='YOUR_APP_SECRET',\n        callback_url='https://127.0.0.1',\n        token_path='/path/to/token.json')\nstream_client = StreamClient(client, account_id=1234567890)\n\nasync def read_stream():\n    await stream_client.login()\n\n    def print_message(message):\n      print(json.dumps(message, indent=4))\n\n    # Always add handlers before subscribing because many streams start sending \n    # data immediately after success, and messages with no handlers are dropped.\n    stream_client.add_nasdaq_book_handler(print_message)\n    await stream_client.nasdaq_book_subs(['GOOG'])\n\n    while True:\n        await stream_client.handle_message()\n\nasyncio.run(read_stream())\n```\n\n----------------------------------------\n\nTITLE: Simple Limit Order JSON Structure - Schwab API\nDESCRIPTION: Example JSON specification for a simple limit order to buy 13 shares of MSFT at $190.90. Demonstrates basic order structure with a single leg equity purchase.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"session\": \"NORMAL\",\n    \"duration\": \"DAY\",\n    \"orderType\": \"LIMIT\",\n    \"price\": \"190.90\",\n    \"orderLegCollection\": [\n        {\n            \"instruction\": \"BUY\",\n            \"instrument\": {\n                \"assetType\": \"EQUITY\",\n                \"symbol\": \"MSFT\"\n            },\n            \"quantity\": 1\n        }\n    ],\n    \"orderStrategyType\": \"SINGLE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Order Builder Example - Schwab API\nDESCRIPTION: Python code demonstrating how to build a complex trigger order with OCO using the schwab-py library's order builder and templates.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import OrderType\nfrom schwab.orders.generic import OrderBuilder\n\none_triggers_other(\n    equity_buy_limit('GOOG', 1, 1310),\n    one_cancels_other(\n        equity_sell_limit('GOOG', 1, 1400),\n        equity_sell_limit('GOOG', 1, 1240)\n            .set_order_type(OrderType.STOP_LIMIT)\n            .clear_price()\n            .set_stop_price(1250)\n    ))\n```\n\n----------------------------------------\n\nTITLE: Using Client.search_instruments to Find Exchange Information in Python\nDESCRIPTION: A code example showing how to determine which exchange a stock symbol is listed on using the search_instruments method. This identifies whether a stock trades on NYSE or NASDAQ.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/streaming.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = c.search_instruments(['GOOG'], projection=c.Instrument.Projection.FUNDAMENTAL)\nassert r.status_code == httpx.codes.OK, r.raise_for_status()\nprint(r.json()['GOOG']['exchange'])  # Outputs NASDAQ\n```\n\n----------------------------------------\n\nTITLE: Building Option Symbols with OptionSymbol Helper in Python\nDESCRIPTION: Demonstrates how to construct option symbols using the OptionSymbol helper class. The example creates a Tesla put option symbol with a specific expiration date and strike price. Option symbols encode the underlying asset, expiration date, option type, and strike price.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-templates.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.options import OptionSymbol\n\nsymbol = OptionSymbol(\n    'TSLA', datetime.date(year=2020, month=11, day=20), 'P', '1360').build()\n```\n\n----------------------------------------\n\nTITLE: Accessing Schwab API Client Methods in Python\nDESCRIPTION: This snippet shows the autodoc directives for various methods of the Schwab API Client class, including placing orders, accessing existing orders, and editing orders.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: schwab.client.Client.place_order\n\n.. automethod:: schwab.client.Client.get_orders_for_account\n.. automethod:: schwab.client.Client.get_orders_for_all_linked_accounts\n.. automethod:: schwab.client.Client.get_order\n.. autoclass:: schwab.client.Client.Order\n  :members:\n  :undoc-members:\n\n.. automethod:: schwab.client.Client.cancel_order\n.. automethod:: schwab.client.Client.replace_order\n```\n\n----------------------------------------\n\nTITLE: Using Asyncio with the Schwab Client\nDESCRIPTION: Shows how to create and use an asynchronous Schwab client for higher-performance API usage. The asyncio parameter must be set to True, and API methods need to be awaited.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.auth import client_from_manual_flow\n\nasync def main():\n    c = easy_client(\n            api_key='APIKEY',\n            redirect_uri='https://localhost',\n            token_path='/tmp/token.json',\n            asyncio=True)\n\n    resp = await c.get_price_history_every_day('AAPL')\n    assert resp.status_code == httpx.codes.OK\n    history = resp.json()\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in schwab-py\nDESCRIPTION: Code snippet that demonstrates how to enable diagnostic logging in schwab-py using Python's built-in logging module. This allows users to see debug messages from the library.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/help.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.getLogger('').addHandler(logging.StreamHandler())\n```\n\n----------------------------------------\n\nTITLE: Handling API Responses\nDESCRIPTION: Demonstrates the pattern for handling responses from the Schwab API client. The method checks the status code and raises an exception for errors, then parses the JSON response data.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = client.some_endpoint()\nassert r.status_code == httpx.codes.OK, r.raise_for_status()\ndata = r.json()\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Price in OrderBuilder\nDESCRIPTION: This method is used to set the stop price for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module. The exact behavior of stop orders is currently undocumented.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_stop_price()\n```\n\n----------------------------------------\n\nTITLE: Enabling Bug Report Logging in schwab-py\nDESCRIPTION: Code snippet that shows how to enable the bug report logging feature in schwab-py. This captures logs, anonymizes them, and outputs them when the program exits, helping to prepare information for bug reports.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/help.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nschwab.debug.enable_bug_report_logging()\n```\n\n----------------------------------------\n\nTITLE: Setting Price in OrderBuilder\nDESCRIPTION: This method is used to set the price for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_price()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Message Handler Function in Python\nDESCRIPTION: This snippet shows how to implement a simple message handler function for the StreamClient. The function takes a single argument representing the stream message received and prints it as formatted JSON.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/streaming.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\ndef sample_handler(msg):\n    print(json.dumps(msg, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Adding Equity Leg in OrderBuilder\nDESCRIPTION: This method is used to add an equity leg to an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.add_equity_leg()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Composite Orders in Python\nDESCRIPTION: Example showing how NOT to construct composite orders. This demonstrates a common mistake where individual orders are placed separately before attempting to combine them, which will fail. Composite orders should be built from OrderBuilder objects, not from placed orders.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-templates.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\norder_one = c.place_order(config.account_id, \n                  option_buy_to_open_limit(trade_symbol, contracts, safety_ask)\n                  .set_duration(Duration.GOOD_TILL_CANCEL)\n                  .set_session(Session.NORMAL)\n                  .build())\n\norder_two = c.place_order(config.account_id, \n                  option_sell_to_close_limit(trade_symbol, half, double)\n                  .set_duration(Duration.GOOD_TILL_CANCEL)\n                  .set_session(Session.NORMAL)\n                  .build())\n\n# THIS IS BAD, DO NOT DO THIS\nexec_trade =  c.place_order(config.account_id, first_triggers_second(order_one, order_two))\n```\n\n----------------------------------------\n\nTITLE: Documenting OrderBuilder Methods for Stop Price in Python\nDESCRIPTION: This snippet documents methods for clearing stop price link type, setting and clearing stop price offset in the OrderBuilder class.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_stop_price_link_type\n\n.. automethod:: schwab.orders.generic.OrderBuilder.set_stop_price_offset\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_stop_price_offset\n```\n\n----------------------------------------\n\nTITLE: Schwab Token Generation CLI Usage\nDESCRIPTION: Command-line interface usage example for generating Schwab API tokens using the schwab-generate-token.py script. Shows available command line arguments and options.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/auth.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nusage: schwab-generate-token.py [-h] --token_file TOKEN_FILE --api_key API_KEY --app_secret APP_SECRET --callback_url CALLBACK_URL [--browser BROWSER]\n\nFetch a new token and write it to a file\n\noptions:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  --token_file TOKEN_FILE\n                        Path to token file. Any existing file will be overwritten\n  --api_key API_KEY\n  --app_secret APP_SECRET\n  --callback_url CALLBACK_URL\n  --browser BROWSER     Manually specify a browser in which to start the login flow. See here for available options:\n                        https://docs.python.org/3/library/webbrowser.html#webbrowser.register\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Price Link Type in OrderBuilder\nDESCRIPTION: This method is used to set the stop price link type for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_stop_price_link_type()\n```\n\n----------------------------------------\n\nTITLE: Installing schwab-py Package\nDESCRIPTION: Command to install the schwab-py package using pip package manager.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install schwab-py\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Price Link Basis in OrderBuilder\nDESCRIPTION: This method is used to set the stop price link basis for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_stop_price_link_basis()\n```\n\n----------------------------------------\n\nTITLE: Verifying schwab-py installation\nDESCRIPTION: Python code to import the schwab module, verifying successful installation of schwab-py.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/getting-started.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport schwab\n```\n\n----------------------------------------\n\nTITLE: Documenting PriceLinkType Enum and Related OrderBuilder Methods in Python\nDESCRIPTION: This snippet documents the PriceLinkType enum class and methods for setting and clearing price link type in the OrderBuilder class.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: schwab.orders.common::PriceLinkType\n  :members:\n  :undoc-members:\n.. automethod:: schwab.orders.generic.OrderBuilder.set_price_link_type\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_price_link_type\n```\n\n----------------------------------------\n\nTITLE: Installing schwab-py using pip\nDESCRIPTION: Command to install the schwab-py package using pip within the activated virtual environment.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/getting-started.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install schwab-py\n```\n\n----------------------------------------\n\nTITLE: Documenting StopType Enum and Related OrderBuilder Methods in Python\nDESCRIPTION: This snippet documents the StopType enum class and methods for setting and clearing stop type in the OrderBuilder class.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: schwab.orders.common::StopType\n  :members:\n  :undoc-members:\n.. automethod:: schwab.orders.generic.OrderBuilder.set_stop_type\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_stop_type\n```\n\n----------------------------------------\n\nTITLE: Adding Option Leg in OrderBuilder\nDESCRIPTION: This method is used to add an option leg to an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.add_option_leg()\n```\n\n----------------------------------------\n\nTITLE: Setting Special Instruction in OrderBuilder\nDESCRIPTION: This method is used to set a special instruction for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_special_instruction()\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Order Strategy Type in OrderBuilder\nDESCRIPTION: This method is used to set the complex order strategy type for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_complex_order_strategy_type()\n```\n\n----------------------------------------\n\nTITLE: Setting Destination Link Name in OrderBuilder\nDESCRIPTION: This method is used to set the destination link name for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_destination_link_name()\n```\n\n----------------------------------------\n\nTITLE: Setting Order Type in OrderBuilder\nDESCRIPTION: This method is used to set the order type for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_order_type()\n```\n\n----------------------------------------\n\nTITLE: Importing OrderType from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the OrderType class from the schwab.orders.common module. The OrderType class likely contains enumerations or constants representing different types of orders.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import OrderType\n```\n\n----------------------------------------\n\nTITLE: Setting Quantity in OrderBuilder\nDESCRIPTION: This method is used to set the quantity for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module. The exact meaning of this quantity is currently undocumented.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_quantity()\n```\n\n----------------------------------------\n\nTITLE: Importing SpecialInstruction from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the SpecialInstruction class from the schwab.orders.common module. The SpecialInstruction class likely contains enumerations or constants representing different special instructions for trades.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import SpecialInstruction\n```\n\n----------------------------------------\n\nTITLE: Setting Order Strategy Type in OrderBuilder\nDESCRIPTION: This method is used to set the order strategy type for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_order_strategy_type()\n```\n\n----------------------------------------\n\nTITLE: Importing Duration from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the Duration class from the schwab.orders.common module. The Duration class likely contains enumerations or constants representing different order durations.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import Duration\n```\n\n----------------------------------------\n\nTITLE: Copying Stop Price in OrderBuilder\nDESCRIPTION: This method is used to copy the stop price from another order into the current order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.copy_stop_price()\n```\n\n----------------------------------------\n\nTITLE: Documenting Schwab API Transaction History Methods in Python\nDESCRIPTION: This snippet shows the autodoc directives for transaction history related methods and classes in the Schwab API Client.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: schwab.client.Client.get_transaction\n.. automethod:: schwab.client.Client.get_transactions\n.. autoclass:: schwab.client.Client.Transactions\n  :members:\n  :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Session in OrderBuilder\nDESCRIPTION: This method is used to set the session for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_session()\n```\n\n----------------------------------------\n\nTITLE: Documenting Schwab API Market Hours Methods in Python\nDESCRIPTION: This snippet shows the autodoc directives for market hours related methods and classes in the Schwab API Client.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: schwab.client.Client.get_market_hours\n.. autoclass:: schwab.client.Client.MarketHours\n  :members:\n  :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Duration in OrderBuilder\nDESCRIPTION: This method is used to set the duration for an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.set_duration()\n```\n\n----------------------------------------\n\nTITLE: Clearing Session in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set session from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_session()\n```\n\n----------------------------------------\n\nTITLE: Copying Price in OrderBuilder\nDESCRIPTION: This method is used to copy the price from another order into the current order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.copy_price()\n```\n\n----------------------------------------\n\nTITLE: Clearing Duration in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set duration from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_duration()\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenv and creating a virtual environment\nDESCRIPTION: Commands to install virtualenv, create a new virtual environment named 'my-venv', and activate it.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/getting-started.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install virtualenv\nvirtualenv -v my-venv\nsource my-venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Clearing Order Strategy Type in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set order strategy type from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_order_strategy_type()\n```\n\n----------------------------------------\n\nTITLE: Setting up virtualenv for schwab-py development in Shell\nDESCRIPTION: These commands create and activate a virtual environment for isolated development of the schwab-py project, preventing system-wide package installation.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install virtualenv\nvirtualenv -v virtualenv\nsource virtualenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Order Code Generation Script Usage - Schwab API\nDESCRIPTION: Shell command example showing how to use the schwab-order-codegen.py script to generate order builder code from historical orders.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nschwab-order-codegen.py --token_file <your token file path> --api_key <your API key>\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies for schwab-py in Shell\nDESCRIPTION: This command installs all project dependencies including development requirements specified in setup.py with the dev extra.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Building documentation with Sphinx in Shell\nDESCRIPTION: This command builds the project documentation from the docs directory into the docs-build directory using Sphinx documentation generator.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-build docs/ docs-build\n```\n\n----------------------------------------\n\nTITLE: Running tests for schwab-py in Shell\nDESCRIPTION: This command executes the test suite for the schwab-py project using the make utility to ensure all tests pass before submitting changes.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Deactivating the virtual environment\nDESCRIPTION: Command to deactivate the currently active virtual environment in the terminal.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/getting-started.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Schwab-py Sphinx Documentation\nDESCRIPTION: This code snippet lists the required Python packages and their specific versions for the Schwab-py project's Sphinx documentation. It includes essential libraries for various functionalities such as authentication, web development, HTTP requests, multiprocessing, CLI interfaces, system monitoring, date handling, and WebSocket communication.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Note this requirements file is only used by sphinx. For regular installations, \n# see the setup.py file.\nauthlib==1.3.0\nFlask==3.0.3\nhttpx==0.27.0\nmultiprocess==0.70.16\nprompt_toolkit==3.0.43\npsutil==5.9.8\npython-dateutil==2.9.0.post0\nsphinx-rtd-theme==2.0.0\nwebsockets==12.0\n```\n\n----------------------------------------\n\nTITLE: Deactivating virtual environment in Shell\nDESCRIPTION: This command exits the currently active virtual environment, returning to the system's default Python environment.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Documenting PriceLinkBasis Enum and Related OrderBuilder Methods in Python\nDESCRIPTION: This snippet documents the PriceLinkBasis enum class and methods for setting and clearing price link basis in the OrderBuilder class.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: schwab.orders.common::PriceLinkBasis\n  :members:\n  :undoc-members:\n.. automethod:: schwab.orders.generic.OrderBuilder.set_price_link_basis\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_price_link_basis\n```\n\n----------------------------------------\n\nTITLE: Documenting OrderBuilder Methods for Activation Price in Python\nDESCRIPTION: This snippet documents methods for setting and clearing activation price in the OrderBuilder class.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: schwab.orders.generic.OrderBuilder.set_activation_price\n.. automethod:: schwab.orders.generic.OrderBuilder.clear_activation_price\n```\n\n----------------------------------------\n\nTITLE: Documenting Schwab API Market Movers Methods in Python\nDESCRIPTION: This snippet shows the autodoc directives for market movers related methods and classes in the Schwab API Client.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: schwab.client.Client.get_movers\n.. autoclass:: schwab.client.Client.Movers\n  :members:\n  :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Schwab API User Preferences Method in Python\nDESCRIPTION: This snippet shows the autodoc directive for the user preferences method in the Schwab API Client.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/client.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: schwab.client.Client.get_user_preferences\n```\n\n----------------------------------------\n\nTITLE: Importing EquityInstruction from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the EquityInstruction class from the schwab.orders.common module. The EquityInstruction class likely contains enumerations or constants representing different equity instructions.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import EquityInstruction\n```\n\n----------------------------------------\n\nTITLE: Importing OptionInstruction from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the OptionInstruction class from the schwab.orders.common module. The OptionInstruction class likely contains enumerations or constants representing different option instructions.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import OptionInstruction\n```\n\n----------------------------------------\n\nTITLE: Importing Destination from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the Destination class from the schwab.orders.common module. The Destination class likely contains enumerations or constants representing different trade destinations.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import Destination\n```\n\n----------------------------------------\n\nTITLE: Importing ComplexOrderStrategyType from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the ComplexOrderStrategyType class from the schwab.orders.common module. The ComplexOrderStrategyType class likely contains enumerations or constants representing different complex order strategies.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import ComplexOrderStrategyType\n```\n\n----------------------------------------\n\nTITLE: Importing OrderStrategyType from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the OrderStrategyType class from the schwab.orders.common module. The OrderStrategyType class likely contains enumerations or constants representing different order strategy types.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import OrderStrategyType\n```\n\n----------------------------------------\n\nTITLE: Importing StopPriceLinkBasis from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the StopPriceLinkBasis class from the schwab.orders.common module. The StopPriceLinkBasis class likely contains enumerations or constants representing different stop price link bases.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import StopPriceLinkBasis\n```\n\n----------------------------------------\n\nTITLE: Importing StopPriceLinkType from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the StopPriceLinkType class from the schwab.orders.common module. The StopPriceLinkType class likely contains enumerations or constants representing different stop price link types.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import StopPriceLinkType\n```\n\n----------------------------------------\n\nTITLE: Importing Session from schwab.orders.common\nDESCRIPTION: This snippet shows how to import the Session class from the schwab.orders.common module. The Session class likely contains enumerations or constants representing different trading sessions.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom schwab.orders.common import Session\n```\n\n----------------------------------------\n\nTITLE: Including External RST Contribution Guidelines\nDESCRIPTION: ReStructuredText directive to include the project's CONTRIBUTING.rst file from the parent directory.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/contributing.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _contributing:\n\n.. include:: ../CONTRIBUTING.rst\n\n```\n\n----------------------------------------\n\nTITLE: Clearing Price in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set price from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_price()\n```\n\n----------------------------------------\n\nTITLE: Clearing Order Legs in OrderBuilder\nDESCRIPTION: This method is used to clear all previously added order legs from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_order_legs()\n```\n\n----------------------------------------\n\nTITLE: Clearing Destination Link Name in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set destination link name from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_destination_link_name()\n```\n\n----------------------------------------\n\nTITLE: Clearing Special Instruction in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set special instruction from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_special_instruction()\n```\n\n----------------------------------------\n\nTITLE: Clearing Complex Order Strategy Type in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set complex order strategy type from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_complex_order_strategy_type()\n```\n\n----------------------------------------\n\nTITLE: Clearing Quantity in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set quantity from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_quantity()\n```\n\n----------------------------------------\n\nTITLE: Clearing Stop Price in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set stop price from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_stop_price()\n```\n\n----------------------------------------\n\nTITLE: Clearing Stop Price Link Basis in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set stop price link basis from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_stop_price_link_basis()\n```\n\n----------------------------------------\n\nTITLE: Clearing Order Type in OrderBuilder\nDESCRIPTION: This method is used to clear the previously set order type from an order being built. It's part of the OrderBuilder class in the schwab.orders.generic module.\nSOURCE: https://github.com/alexgolec/schwab-py/blob/main/docs/order-builder.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nschwab.orders.generic.OrderBuilder.clear_order_type()\n```"
  }
]