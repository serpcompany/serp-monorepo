[
  {
    "owner": "apollographql",
    "repo": "apollo-server",
    "content": "TITLE: Defining GraphQL Schema with Apollo Server\nDESCRIPTION: Implementation of a GraphQL schema that defines the structure of queryable data, including type definitions for Book objects and a Query type for fetching books.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\n// A schema is a collection of type definitions (hence \"typeDefs\")\n// that together define the \"shape\" of queries that are executed against\n// your data.\nconst typeDefs = `#graphql\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books: [Book]\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: TypeScript configuration file that specifies compiler options for the Apollo Server project, including module settings, target ES version, and output directory.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"rootDirs\": [\"src\"],\n    \"outDir\": \"dist\",\n    \"lib\": [\"es2020\"],\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"types\": [\"node\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Integration Test with Context and Data Sources in TypeScript\nDESCRIPTION: A comprehensive integration test that creates a test Apollo Server with proper context typing, mocks data sources, and validates a GraphQL query. This example includes type definitions for context and shows how to pass custom context to executeOperation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nit('fetches single launch', async () => {\n  const userAPI = new UserAPI({ store });\n  const launchAPI = new LaunchAPI();\n\n  // ensure our server's context is typed correctly\n  interface ContextValue {\n    user: User;\n    dataSources: {\n      userAPI: UserAPI;\n      launchAPI: LaunchAPI;\n    };\n  }\n\n  // create a test server to test against, using our production typeDefs,\n  // resolvers, and dataSources.\n  const server = new ApolloServer<ContextValue>({\n    typeDefs,\n    resolvers,\n  });\n\n  // mock the dataSource's underlying fetch methods\n  launchAPI.get = jest.fn(() => [mockLaunchResponse]);\n  userAPI.store = mockStore;\n  userAPI.store.trips.findAll.mockReturnValueOnce([\n    { dataValues: { launchId: 1 } },\n  ]);\n\n  // run the query against the server and snapshot the output\n  const res = await server.executeOperation(\n    {\n      query: GET_LAUNCH,\n      variables: { id: 1 },\n    },\n    {\n      contextValue: {\n        user: { id: 1, email: 'a@a.a' },\n        dataSources: {\n          userAPI,\n          launchAPI,\n        },\n      },\n    },\n  );\n\n  expect(res).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver with Arguments\nDESCRIPTION: Defines a resolver for the user field that accepts arguments and returns a user by ID from the hardcoded data array.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    user(parent, args, contextValue, info) {\n      return users.find((user) => user.id === args.id);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server Dependencies with npm\nDESCRIPTION: Command to install the core GraphQL dependencies required for Apollo Server: the graphql library and @apollo/server package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Initializing ApolloServer in TypeScript\nDESCRIPTION: Creates an instance of ApolloServer with typeDefs and resolvers. This is a basic setup for an Apollo Server, specifying the GraphQL schema and resolvers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers for Book Queries\nDESCRIPTION: Definition of a resolver function that returns the books data when the books query is executed, connecting the schema to the data source.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Resolvers define how to fetch the types defined in your schema.\n// This resolver retrieves books from the \"books\" array above.\nconst resolvers = {\n  Query: {\n    books: () => books,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server and GraphQL dependencies\nDESCRIPTION: Command for installing the core Apollo Server and GraphQL packages required to set up a GraphQL server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Error Redaction Plugin in TypeScript\nDESCRIPTION: This snippet shows how to configure Apollo Server with a usage reporting plugin that redacts sensitive information (API key) from error messages before sending them to Apollo Studio.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendErrors: {\n        transform: (err) => {\n          // Make sure that a specific pattern is removed from all error messages.\n          err.message = err.message.replace(/x-api-key:[A-Z0-9-]+/, 'REDACTED');\n          return err;\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data Sources to Context Function in Apollo Server\nDESCRIPTION: This code snippet demonstrates how to add data sources to the context function in Apollo Server. It shows the creation of a ContextValue interface, initializing data sources, and passing them to the context along with a token.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ContextValue {\n  dataSources: {\n    dogsDB: DogsDataSource;\n    catsApi: CatsAPI;\n  };\n  token: string;\n}\n\nconst server = new ApolloServer<ContextValue>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => {\n    const { cache } = server; // highlight-line\n    const token = req.headers.token;\n    return {\n      // We create new instances of our data sources with each request.\n      // We can pass in our server's cache, contextValue, or any other\n      // info our data sources require.\n      dataSources: {\n        dogsDB: new DogsDataSource({ cache, token }),\n        catsApi: new CatsAPI({ cache }),\n      },\n      token,\n    };\n  },\n});\n\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for GraphQL API\nDESCRIPTION: Definition of sample book data that matches the GraphQL schema structure, providing title and author information for testing the API.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst books = [\n  {\n    title: 'The Awakening',\n    author: 'Kate Chopin',\n  },\n  {\n    title: 'City of Glass',\n    author: 'Paul Auster',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server 4 with Express\nDESCRIPTION: Updated example showing how to set up Apollo Server 4 with Express, using expressMiddleware and including CORS configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install @apollo/server express graphql cors\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst app = express();\nconst httpServer = http.createServer(app);\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\napp.use('/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server, {\n    context: async ({ req }) => ({ token: req.headers.token }),\n  }),\n);\n\nawait new Promise<void>(resolve => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/graphql`);\n```\n\n----------------------------------------\n\nTITLE: Complete startStandaloneServer Configuration Example\nDESCRIPTION: Shows a full implementation of startStandaloneServer with context and port configuration. Includes type definitions for context and demonstrates how to access request headers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/standalone.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst server = new ApolloServer<MyContext>({ typeDefs, resolvers });\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => ({ token: req.headers.token }),\n  listen: { port: 4000 },\n});\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Function with Authentication in Apollo Server\nDESCRIPTION: Demonstrates how to create a context function with authentication scope checking and type definitions. Shows resolver usage of contextValue for admin authentication.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nconst resolvers = {\n  Query: {\n    adminExample: (parent, args, contextValue, info) => {\n      if (contextValue.authScope !== ADMIN) {\n        throw new GraphQLError('not admin!', {\n          extensions: { code: 'UNAUTHENTICATED' },\n        });\n      }\n    },\n  },\n};\n\ninterface MyContext {\n  authScope?: String;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req, res }) => ({\n    authScope: getScope(req.headers.authorization),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Apollo GraphQL Server\nDESCRIPTION: Implementation of a basic standalone Apollo GraphQL server. This code sets up a simple GraphQL schema with a 'hello' query that returns 'world', and starts the server using the standalone server functionality.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€ Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Context-based Authentication in Apollo Server\nDESCRIPTION: Demonstrates how to add authenticated user information to the context object that's passed to resolvers. This example extracts a user token from the Authorization header and adds the corresponding user object to the context.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\ninterface MyContext {\n  user: UserInterface;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req, res }) => {\n    const token = req.headers.authorization || '';\n    const user = await getUser(token);\n    return { user };\n  },\n});\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Lifecycle Events in an Apollo Server Plugin\nDESCRIPTION: This snippet shows how to define a plugin that responds to multiple request lifecycle events. It implements the requestDidStart function and returns an object with handlers for parsing and validation events.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = {\n  async requestDidStart(requestContext) {\n    console.log('Request started!');\n\n    return {\n      async parsingDidStart(requestContext) {\n        console.log('Parsing started!');\n      },\n\n      async validationDidStart(requestContext) {\n        console.log('Validation started!');\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Type in GraphQL Schema\nDESCRIPTION: This example shows how to define a Mutation type in GraphQL, which specifies the entry points for write operations. It provides a method to add a new book with a title and author.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  addBook(title: String, author: String): Book\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-based Authorization in Apollo Server (TypeScript)\nDESCRIPTION: This snippet shows how to add user authentication and model generation to the Apollo Server context. It checks for a user token, retrieves the user, and adds the user and generated models to the context.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncontext: async ({ req }) => {\n // get the user token from the headers\n const token = req.headers.authentication || '';\n\n // try to retrieve a user with the token\n const user = getUser(token);\n\n // optionally block the user\n // we could also check user roles/permissions here\n  if (!user) throw new GraphQLError(\"you must be logged in to query this schema\", {\n    extensions: {\n      code: 'UNAUTHENTICATED',\n    },\n  });\n\n // add the user to the contextValue\n return {\n   user,\n   models: {\n     User: generateUserModel({ user }),\n     ...\n   }\n };\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server 4 Standalone\nDESCRIPTION: Updated example showing how to set up a standalone Apollo Server 4 instance using startStandaloneServer function.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install @apollo/server graphql\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\n\nconst server = new ApolloServer<MyContext>({ typeDefs, resolvers });\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => ({ token: req.headers.token }),\n  listen: { port: 4000 },\n});\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Creating an Apollo GraphQL Server with Express Integration\nDESCRIPTION: Implementation of a GraphQL server using Apollo Server integrated with Express. This setup includes proper HTTP server handling, CORS support, and body parsing middleware, with a simple 'hello' query resolver.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\nconst app = express();\nconst httpServer = http.createServer(app);\n\n// Set up Apollo Server\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\n\napp.use(\n  cors(),\n  bodyParser.json(),\n  expressMiddleware(server),\n);\n\nawait new Promise((resolve) => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000`);\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Context Function\nDESCRIPTION: Demonstrates proper error handling in context functions including authentication errors and HTTP status code customization.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontext: async ({ req }) => {\n  const user = await getUserFromReq(req);\n  if (!user) {\n    throw new GraphQLError('User is not authenticated', {\n      extensions: {\n        code: 'UNAUTHENTICATED',\n        http: { status: 401 },\n      }\n    });\n  }\n\n  const db = await getDatabaseConnection();\n\n  return { user, db };\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Apollo Server Plugin for Custom HTTP Headers and Status Codes in TypeScript\nDESCRIPTION: This snippet shows how to create an Apollo Server plugin that sets custom HTTP headers and status codes based on GraphQL errors. It demonstrates using the 'requestDidStart' hook to modify the response.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst setHttpPlugin = {\n  async requestDidStart() {\n    return {\n      async willSendResponse({ response }) {\n        response.http.headers.set('custom-header', 'hello');\n        if (response.body.kind === 'single' &&\n            response.body.singleResult.errors?.[0]?.extensions?.code === 'TEAPOT') {\n          response.http.status = 418;\n        }\n      },\n    };\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [setHttpPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTDataSource Subclass for Movies API in TypeScript\nDESCRIPTION: Example of a RESTDataSource subclass that defines methods for fetching movie data from a REST API. It includes methods for getting a single movie and retrieving a list of most viewed movies.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESTDataSource } from '@apollo/datasource-rest';\n\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n\n  async getMovie(id: string): Promise<Movie> {\n    return this.get<Movie>(`movies/${encodeURIComponent(id)}`);\n  }\n\n  async getMostViewedMovies(limit = '10'): Promise<Movie[]> {\n    const data = await this.get('movies', {\n      params: {\n        per_page: limit.toString(), // all params entries should be strings,\n        order_by: 'most_viewed',\n      },\n    });\n    return data.results;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Aware Resolvers in TypeScript with Apollo Server\nDESCRIPTION: Example showing how to implement resolvers with typed context, including setting up a UserAPI data source and handling authentication tokens. The code demonstrates proper context typing and initialization in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserAPI } from \"./datasources/users\";\n\nconst resolvers = {\n  Query: {\n    // Our resolvers can access the fields in contextValue\n    // from their third argument\n    currentUser: (_, __, contextValue) => {\n      return contextValue.dataSources.userApi.findUser(contextValue.token);\n    },\n  },\n};\n\ninterface MyContext { // Context typing\n  token?: String;\n  dataSources: {\n    userApi: UserAPI;\n  }\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => ({\n    token: getToken(req.headers.authentication),\n    dataSources: {\n      userApi: new UserAPI()\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Methods Implementation in RESTDataSource\nDESCRIPTION: Complete example showing implementation of all HTTP methods (GET, POST, PUT, PATCH, DELETE) in a RESTDataSource class.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n\n  // GET\n  async getMovie(id) {\n    return this.get(\n      `movies/${encodeURIComponent(id)}`, // path\n    );\n  }\n\n  // POST\n  async postMovie(movie) {\n    return this.post(\n      `movies`, // path\n      { body: { movie } }, // request body\n    );\n  }\n\n  // PUT\n  async newMovie(movie) {\n    return this.put(\n      `movies`, // path\n      { body: { movie } }, // request body\n    );\n  }\n\n  // PATCH\n  async updateMovie(movie) {\n    return this.patch(\n      `movies`, // path\n      { body: { id: movie.id, movie } }, // request body\n    );\n  }\n\n  // DELETE\n  async deleteMovie(movie) {\n    return this.delete(\n      `movies/${encodeURIComponent(movie.id)}`, // path\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Book and Author Types\nDESCRIPTION: Sample GraphQL schema showing the relationship between Book and Author types, demonstrating how default resolvers can handle simple field resolution.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Book {\n  title: String\n}\n\ntype Author {\n  books: [Book]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Resolver Chain Implementation Example\nDESCRIPTION: A full implementation showing resolver chains in action, including data stores, schema definition, and resolver functions for Library, Book, and Author types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\nconst libraries = [\n  {\n    branch: 'downtown',\n  },\n  {\n    branch: 'riverside',\n  },\n];\n\n// The branch field of a book indicates which library has it in stock\nconst books = [\n  {\n    title: 'The Awakening',\n    author: 'Kate Chopin',\n    branch: 'riverside',\n  },\n  {\n    title: 'City of Glass',\n    author: 'Paul Auster',\n    branch: 'downtown',\n  },\n];\n\n// Schema definition\nconst typeDefs = `#graphql\n  # A library has a branch and books\n  type Library {\n    branch: String!\n    books: [Book!]\n  }\n\n  # A book has a title and author\n  type Book {\n    title: String!\n    author: Author!\n  }\n\n  # An author has a name\n  type Author {\n    name: String!\n  }\n\n  # Queries can fetch a list of libraries\n  type Query {\n    libraries: [Library]\n  }\n`;\n\n// Resolver map\nconst resolvers = {\n  Query: {\n    libraries() {\n      // Return our hardcoded array of libraries\n      return libraries;\n    },\n  },\n  Library: {\n    books(parent) {\n      // Filter the hardcoded array of books to only include\n      // books that are located at the correct branch\n      return books.filter((book) => book.branch === parent.branch);\n    },\n  },\n  Book: {\n    // The parent resolver (Library.books) returns an object with the\n    // author's name in the \"author\" field. Return a JSON object containing\n    // the name, because this field expects an object.\n    author(parent) {\n      return {\n        name: parent.author,\n      };\n    },\n  },\n\n  // Because Book.author returns an object with a \"name\" field,\n  // Apollo Server's default resolver for Author.name will work.\n  // We don't need to define one.\n};\n\n// Pass schema definition and resolvers to the\n// ApolloServer constructor\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n// Launch the server\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Complete Apollo Server Express Integration with Graceful Shutdown\nDESCRIPTION: This example provides a complete setup for Apollo Server with Express, including proper HTTP server management, context creation, and graceful shutdown handling using the ApolloServerPluginDrainHttpServer plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/express-middleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install @apollo/server express graphql cors\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: string;\n}\n\n// Required logic for integrating with Express\nconst app = express();\n// Our httpServer handles incoming requests to our Express app.\n// Below, we tell Apollo Server to \"drain\" this httpServer,\n// enabling our servers to shut down gracefully.\nconst httpServer = http.createServer(app);\n\n// Same ApolloServer initialization as before, plus the drain plugin\n// for our httpServer.\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\n// Ensure we wait for our server to start\nawait server.start();\n\n// Set up our Express middleware to handle CORS, body parsing,\n// and our expressMiddleware function.\napp.use(\n  '/',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  // expressMiddleware accepts the same arguments:\n  // an Apollo Server instance and optional configuration options\n  expressMiddleware(server, {\n    context: async ({ req }) => ({ token: req.headers.token }),\n  }),\n);\n\n// Modified server startup\nawait new Promise<void>((resolve) =>\n  httpServer.listen({ port: 4000 }, resolve),\n);\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/`);\n```\n\n----------------------------------------\n\nTITLE: Basic Apollo Server Integration with Express\nDESCRIPTION: This snippet demonstrates how to mount Apollo Server onto an Express application using the expressMiddleware function. It shows the basic setup with CORS and JSON parsing middleware.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/express-middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport cors from 'cors';\nimport express from 'express';\n\nconst app = express();\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n// Note you must call `start()` on the `ApolloServer`\n// instance before passing the instance to `expressMiddleware`\nawait server.start();\n\n// Specify the path where we'd like to mount our server\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server),\n);\n```\n\n----------------------------------------\n\nTITLE: Data Sources Implementation in Context\nDESCRIPTION: Shows how to implement and type data sources in context, with resolver access patterns for different API endpoints.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnimalAPI } from \"./datasources/animals\";\n\nconst resolvers = {\n  Query: {\n    dogs: (_, __, contextValue) => {\n      return contextValue.dataSources.animalApi.getDogs();\n    },\n    cats: (_, __, contextValue) => {\n      return contextValue.dataSources.animalApi.getCats();\n    },\n  },\n};\n\ninterface MyContext {\n  dataSources: {\n    animalApi: AnimalAPI;\n  }\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async () => {\n    const animalApi = new AnimalAPI();\n    return {\n      dataSources: {\n        animalApi\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Implementation\nDESCRIPTION: Complete example of migrating from startStandaloneServer to expressMiddleware, including CORS configuration, HTTP server setup, and proper shutdown handling.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/standalone.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst app = express();\nconst httpServer = http.createServer(app);\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\n\napp.use('/',\n  cors<cors.CorsRequest>(),\n  express.json({ limit: '50mb' }),\n  expressMiddleware(server, {\n    context: async ({ req }) => ({ token: req.headers.token }),\n  }),\n);\n\nawait new Promise<void>(resolve => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/`);\n```\n\n----------------------------------------\n\nTITLE: Throwing GraphQLError with Custom HTTP Status and Headers in TypeScript\nDESCRIPTION: This example demonstrates how to throw a GraphQLError with custom HTTP status code and headers using the 'extensions' property. This can be used in resolvers or context functions to customize the HTTP response.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nconst resolvers = {\n  Query: {\n    someField() {\n      throw new GraphQLError('the error message', {\n        extensions: {\n          code: 'SOMETHING_BAD_HAPPENED',\n          http: {\n            status: 404,\n            headers: new Map([\n              ['some-header', 'it was bad'],\n              ['another-header', 'seriously'],\n            ]),\n          },\n        },\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Apollo Server Subscription Setup\nDESCRIPTION: Full implementation of Apollo Server with WebSocket subscription support using Express.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport { createServer } from 'http';\nimport express from 'express';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { WebSocketServer } from 'ws';\nimport { useServer } from 'graphql-ws/lib/use/ws';\nimport cors from 'cors';\nimport resolvers from './resolvers';\nimport typeDefs from './typeDefs';\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\n\nconst app = express();\nconst httpServer = createServer(app);\n\nconst wsServer = new WebSocketServer({\n  server: httpServer,\n  path: '/subscriptions',\n});\nconst serverCleanup = useServer({ schema }, wsServer);\n\nconst server = new ApolloServer({\n  schema,\n  plugins: [\n    ApolloServerPluginDrainHttpServer({ httpServer }),\n    {\n      async serverWillStart() {\n        return {\n          async drainServer() {\n            await serverCleanup.dispose();\n          },\n        };\n      },\n    },\n  ],\n});\n\nawait server.start();\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server),\n);\n\nconst PORT = 4000;\nhttpServer.listen(PORT, () => {\n  console.log(`Server is now running on http://localhost:${PORT}/graphql`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Typing in Apollo Server 4\nDESCRIPTION: Demonstrates how to use improved TypeScript typing for context in Apollo Server 4. This includes defining a context interface, using it with ApolloServer, and accessing typed context in resolvers and plugins.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n// You can optionally create a TS interface to set up types\n// for your context\ninterface MyContext {\n  token: String\n}\n\n// Create a new ApolloServer instance, passing in your\n// context's types to ApolloServer's integration function.\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers: {\n    Query: {\n      hello: (root, args, { token }) {\n        return token;  // token is properly inferred as a string\n      },\n    },\n  },\n  plugins: [{\n    async requestDidStart({ contextValue }) {\n      // token is properly inferred as a string; note that in Apollo Server 4 you\n      // write `contextValue` rather than `context` in plugins.\n      console.log(contextValue.token);\n    },\n  }],\n});\n\nconst { url } = await startStandaloneServer(apolloServerInstance, {\n  context: async ({req, res}) => ({\n    // You now get proper type inference within your context function!\n    token: await getTokenForRequest(req),\n  }),\n  listen: { port: 4000 }\n});\n```\n\n----------------------------------------\n\nTITLE: User Data Model with Authorization Logic\nDESCRIPTION: Shows how to implement a User data model that encapsulates data fetching and transformation logic. This pattern helps centralize business logic and authorization checks.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const User = {\n  getAll: () => {\n    /* fetching/transformation logic for all users */\n  },\n  getById: (id) => {\n    /* fetching/transformation logic for a single user */\n  },\n  getByGroupId: (id) => {\n    /* fetching/transformation logic for a group of users */\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with a custom Date scalar\nDESCRIPTION: Shows how to integrate a custom Date scalar with Apollo Server. This example demonstrates the complete server setup including type definitions, resolver setup, and server initialization.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { GraphQLScalarType, Kind } from 'graphql';\n\nconst typeDefs = `#graphql\n  scalar Date\n\n  type Event {\n    id: ID!\n    date: Date!\n  }\n\n  type Query {\n    events: [Event!]\n  }\n`;\n\nconst dateScalar = new GraphQLScalarType({\n  // See definition above\n});\n\nconst resolvers = {\n  Date: dateScalar,\n  // ...other resolver definitions...\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Resolvers\nDESCRIPTION: Example of implementing subscription resolvers using async generators and PubSub.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Subscription: {\n    hello: {\n      subscribe: async function* () {\n        for await (const word of ['Hello', 'Bonjour', 'Ciao']) {\n          yield { hello: word };\n        }\n      },\n    },\n    postCreated: {\n      subscribe: () => pubsub.asyncIterator(['POST_CREATED']),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic startStandaloneServer Implementation in TypeScript\nDESCRIPTION: Demonstrates the basic setup of an Apollo Server using startStandaloneServer function. Shows how to initialize the server and start listening for requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/standalone.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// `startStandaloneServer` returns a `Promise` with the\n// the URL that the server is listening on.\nconst { url } = await startStandaloneServer(server);\n```\n\n----------------------------------------\n\nTITLE: Complete Federated Subgraph Implementation with Apollo Server in TypeScript\nDESCRIPTION: This comprehensive snippet combines all the previous steps to create a complete federated subgraph using Apollo Server. It includes schema definition, entity creation, resolvers, and server setup.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport gql from 'graphql-tag';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\n\nconst typeDefs = gql`\n  extend schema\n    @link(\n      url: \"https://specs.apollo.dev/federation/v2.0\"\n      import: [\"@key\", \"@shareable\"]\n    )\n\n  type Query {\n    me: User\n  }\n\n  type User @key(fields: \"id\") {\n    id: ID!\n    username: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    me() {\n      return { id: '1', username: '@ava' };\n    },\n  },\n  User: {\n    __resolveReference(user, { fetchUserById }) {\n      return fetchUserById(user.id);\n    },\n  },\n};\n\nconst server = new ApolloServer({\n  schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Data Source in Apollo Server 4\nDESCRIPTION: Updated implementation of REST data source using @apollo/datasource-rest in Apollo Server 4, showing new initialization patterns and context handling.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESTDataSource, AugmentedRequest } from '@apollo/datasource-rest';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options);\n    this.token = options.token;\n  }\n\n  override willSendRequest(path: string, request: AugmentedRequest) {\n    request.headers.authorization = this.token;\n  }\n\n  async getMovie(id: string): Promise<Movie> {\n    return this.get<Movie>(`movies/${encodeURIComponent(id)}`);\n  }\n\n  async updateMovie(movie: Movie): Promise<Movie>  {\n    return this.patch(\n      'movies',\n      { body: { id: movie.id, movie } },\n    );\n  }\n}\n\ninterface ContextValue {\n  token: string;\n  dataSources: {\n    moviesAPI: MoviesAPI;\n  };\n}\n\nconst server = new ApolloServer<ContextValue>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => {\n    const token = getTokenFromRequest(req);\n    const { cache } = server;\n    return {\n      token,\n      dataSources: {\n        moviesAPI: new MoviesAPI({ cache, token }),\n      },\n    };\n  },\n});\n\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Using Data Sources in Resolvers\nDESCRIPTION: This code snippet shows how to use data sources in resolvers. It demonstrates accessing the data sources from the contextValue object and using them to fetch data for different query resolvers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    dog: async (_, { id }, { dataSources }) => {\n      return dataSources.dogsDB.getDog(id);\n    },\n    popularDogs: async (_, __, { dataSources }) => {\n      return dataSources.dogsDB.getMostLikedDogs();\n    },\n    bigCats: async (_, __, { dataSources }) => {\n      return dataSources.catsApi.getCats({ size: 10 });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing with Supertest in TypeScript\nDESCRIPTION: A complete end-to-end test that spins up an actual Apollo Server instance and tests it using supertest HTTP client. This approach tests the full HTTP layer and is useful for validating the complete request-response cycle.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// we import a function that we wrote to create a new instance of Apollo Server\nimport { createApolloServer } from '../server';\n\n// we'll use supertest to test our server\nimport request from 'supertest';\n\n// this is the query for our test\nconst queryData = {\n  query: `query sayHello($name: String) {\n    hello(name: $name)\n  }`,\n  variables: { name: 'world' },\n};\n\ndescribe('e2e demo', () => {\n  let server, url;\n\n  // before the tests we spin up a new Apollo Server\n  beforeAll(async () => {\n    // Note we must wrap our object destructuring in parentheses because we already declared these variables\n    // We pass in the port as 0 to let the server pick its own ephemeral port for testing\n    ({ server, url } = await createApolloServer({ port: 0 }));\n  });\n\n  // after the tests we'll stop the server\n  afterAll(async () => {\n    await server?.stop();\n  });\n\n  it('says hello', async () => {\n    // send our request to the url of the test server\n    const response = await request(url).post('/').send(queryData);\n    expect(response.errors).toBeUndefined();\n    expect(response.body.data?.hello).toBe('Hello world!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting an Apollo Server with Express Middleware\nDESCRIPTION: Example of initializing an Apollo Server instance, starting it, and integrating it with Express middleware. This shows the proper sequence of operations when using a non-serverless environment.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\nawait server.start();\n\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Date scalar type in TypeScript\nDESCRIPTION: Creates a custom GraphQLScalarType for handling JavaScript Date objects. This implementation converts between Date objects and number timestamps during serialization and parsing.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLScalarType, Kind } from 'graphql';\n\nconst dateScalar = new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n  serialize(value) {\n    if (value instanceof Date) {\n      return value.getTime(); // Convert outgoing Date to integer for JSON\n    }\n    throw Error('GraphQL Date Scalar serializer expected a `Date` object');\n  },\n  parseValue(value) {\n    if (typeof value === 'number') {\n      return new Date(value); // Convert incoming integer to Date\n    }\n    throw new Error('GraphQL Date Scalar parser expected a `number`');\n  },\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      // Convert hard-coded AST string to integer and then to Date\n      return new Date(parseInt(ast.value, 10));\n    }\n    // Invalid hard-coded value (not an integer)\n    return null;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Error Code Checking in Apollo Server\nDESCRIPTION: TypeScript code demonstrating how to check error codes and handle different types of errors using ApolloServerErrorCode.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerErrorCode } from '@apollo/server/errors';\n\nif (error.extensions?.code === ApolloServerErrorCode.GRAPHQL_PARSE_FAILED) {\n  // respond to the syntax error\n} else if (error.extensions?.code === \"MY_CUSTOM_CODE\") {\n  // do something else\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reservations Data Source Class in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a data source class for handling reservations. It includes methods for initializing a database connection, retrieving user information, and fetching reservation details.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ReservationsDataSource {\n  private dbConnection;\n  private token;\n  private user;\n\n  constructor(options: { token: string }) {\n    this.dbConnection = this.initializeDBConnection();\n    this.token = options.token;\n  }\n\n  async initializeDBConnection() {\n    // set up our database details, instantiate our connection,\n    // and return that database connection\n    return dbConnection;\n  }\n\n  async getUser() {\n    if (!this.user) {\n      // store the user, lookup by token\n      this.user = await this.dbConnection.User.findByToken(this.token);\n    }\n    return this.user;\n  }\n\n  async getReservation(reservationId) {\n    const user = await this.getUser();\n    if (user) {\n      return await this.dbConnection.Reservation.findByPk(reservationId);\n    } else {\n      // handle invalid user\n    }\n  }\n\n  //... more methods for finding and creating reservations\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Authorization in Apollo Server Context (TypeScript)\nDESCRIPTION: This snippet shows how to pass request information through to the model in the Apollo Server context. This approach allows for leveraging external authorization systems, such as REST API authentication.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncontext: async ({ req }) => {\n // pass the request information through to the model\n return {\n   user,\n   models: {\n     User: generateUserModel({ req }),\n     ...\n   }\n };\n},\n```\n\n----------------------------------------\n\nTITLE: Database Connection Context Setup in Apollo Server\nDESCRIPTION: Shows how to establish database connections in the context function and use them in resolvers. Demonstrates async context initialization.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontext: async () => ({\n  db: await client.connect(),\n})\n\n// Resolver\n(parent, args, contextValue, info) => {\n  return contextValue.db.query('SELECT * FROM table_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API-wide Authorization in Apollo Server\nDESCRIPTION: Shows how to implement API-wide authorization by throwing GraphQL errors when users aren't authenticated. This approach provides complete API protection by validating authentication before any resolver execution.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { GraphQLError } from 'graphql';\n\ninterface MyContext {\n  user: UserInterface;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => {\n    const token = req.headers.authorization || '';\n    const user = getUser(token);\n    if (!user)\n      throw new GraphQLError('User is not authenticated', {\n        extensions: {\n          code: 'UNAUTHENTICATED',\n          http: { status: 401 },\n        }\n      });\n    return { user };\n  },\n});\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Input Validation Error in Resolver\nDESCRIPTION: Example resolver implementation showing input validation and custom error throwing with the BAD_USER_INPUT code.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nconst typeDefs = `#graphql\n  type Query {\n    userWithID(id: ID!): User\n  }\n\n  type User {\n    id: ID!\n    name: String!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    userWithID: (_, args) => {\n      if (args.id < 1) {\n        throw new GraphQLError('Invalid argument value', {\n          extensions: {\n            code: 'BAD_USER_INPUT',\n          },\n        });\n      }\n      // ...fetch correct user...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Object Types in GraphQL SDL\nDESCRIPTION: This example demonstrates how to define basic object types in GraphQL Schema Definition Language. It creates a Book type that references an Author type, establishing a relationship between them.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Book {\n  title: String\n  author: Author\n}\n\ntype Author {\n  name: String\n  books: [Book]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with @key Directive in TypeScript\nDESCRIPTION: This snippet shows how to define an entity by adding the @key directive to the User type. This allows other subgraphs to contribute fields to the User type and enables the gateway to uniquely identify User instances.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeDefs = gql`\n  extend schema\n    @link(\n      url: \"https://specs.apollo.dev/federation/v2.0\"\n      import: [\"@key\", \"@shareable\"]\n    )\n\n  type Query {\n    me: User\n  }\n\n  type User\n    @key(fields: \"id\") {\n    id: ID!\n    username: String\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Building a Federated Subgraph\nDESCRIPTION: Full implementation example showing how to set up a subgraph with Apollo Server, including type definitions with federation directives, resolvers with reference resolution, and server initialization.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-subgraph.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { ApolloServer } from '@apollo/server';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\n\nconst typeDefs = gql`\n  type Query {\n    me: User\n  }\n\n  type User @key(fields: \"id\") {\n    id: ID!\n    username: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    me() {\n      return { id: '1', username: '@ava' };\n    },\n  },\n  User: {\n    __resolveReference(user, { fetchUserById }) {\n      return fetchUserById(user.id);\n    },\n  },\n};\n\nconst server = new ApolloServer({\n  schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Odd integer scalar in TypeScript\nDESCRIPTION: Creates a custom GraphQLScalarType that only accepts odd integers. This example includes full validation logic and error handling for both parsing and serializing values.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { GraphQLScalarType, Kind, GraphQLError } from 'graphql';\n\n// Basic schema\nconst typeDefs = `#graphql\n  scalar Odd\n\n  type Query {\n    # Echoes the provided odd integer\n    echoOdd(odd: Odd!): Odd!\n  }\n`;\n\n// Validation function for checking \"oddness\"\nfunction oddValue(value: unknown) {\n  if (typeof value === 'number' && Number.isInteger(value) && value % 2 !== 0) {\n    return value;\n  }\n  throw new GraphQLError('Provided value is not an odd integer', {\n    extensions: { code: 'BAD_USER_INPUT' },\n  });\n}\n\nconst resolvers = {\n  Odd: new GraphQLScalarType({\n    name: 'Odd',\n    description: 'Odd custom scalar type',\n    parseValue: oddValue,\n    serialize: oddValue,\n    parseLiteral(ast) {\n      if (ast.kind === Kind.INT) {\n        return oddValue(parseInt(ast.value, 10));\n      }\n      throw new GraphQLError('Provided value is not an odd integer', {\n        extensions: { code: 'BAD_USER_INPUT' },\n      });\n    },\n  }),\n  Query: {\n    echoOdd(_, { odd }) {\n      return odd;\n    },\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Endpoint to Express Server in MERN Stack\nDESCRIPTION: Code snippet showing how to add a dedicated /graphql route to an Express server using Apollo Server's expressMiddleware. This allows the server to handle both REST and GraphQL requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\"/record\", records);\n// Specify the path to mount the server\n//highlight-start\napp.use(\n  '/graphql',\n  cors(),\n  express.json(),\n  expressMiddleware(server),\n);\n//highlight-end\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port: ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Role-based Authorization in GraphQL Resolvers\nDESCRIPTION: Demonstrates implementing role-based authorization checks within GraphQL resolvers. Shows how to restrict access to data based on user roles and authentication status.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nusers: (parent, args, contextValue) => {\n  if (!contextValue.user || !contextValue.user.roles.includes('admin')) return null;\n  return contextValue.models.User.getAll();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SSL Termination in Apollo Server with Express\nDESCRIPTION: A complete setup for an Apollo Server application with conditional SSL termination based on environment. Includes configuration for both development (HTTP) and production (HTTPS) environments, with proper Express middleware setup and server initialization. Requires SSL certificates to be present in a .ssl directory for production use.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/terminating-ssl.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport typeDefs from './graphql/schema';\nimport resolvers from './graphql/resolvers';\nimport cors from 'cors';\nimport express from 'express';\nimport http from 'http';\nimport https from 'https';\nimport fs from 'fs';\n\nconst configurations = {\n  // Note: You may need sudo to run on port 443\n  production: { ssl: true, port: 443, hostname: 'example.com' },\n  development: { ssl: false, port: 4000, hostname: 'localhost' },\n};\n\nconst environment = process.env.NODE_ENV || 'production';\nconst config = configurations[environment];\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\nawait server.start();\n\nconst app = express();\n// our express server is mounted at /graphql\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server),\n);\n\n// Create the HTTPS or HTTP server, per configuration\nlet httpServer;\nif (config.ssl) {\n  // Assumes certificates are in a .ssl folder off of the package root.\n  // Make sure these files are secured.\n  httpServer = https.createServer(\n    {\n      key: fs.readFileSync(`./ssl/${environment}/server.key`),\n      cert: fs.readFileSync(`./ssl/${environment}/server.crt`),\n    },\n\n    app,\n  );\n} else {\n  httpServer = http.createServer(app);\n}\n\nawait new Promise<void>((resolve) => httpServer.listen({ port: config.port }, resolve));\n\nconsole.log('ðŸš€ Server ready at', `http${config.ssl ? 's' : ''}://${config.hostname}:${config.port}/graphql`);\n```\n\n----------------------------------------\n\nTITLE: Query-Driven Schema Example in GraphQL\nDESCRIPTION: Complete example of a query-driven schema design for an events application.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery EventList {\n  upcomingEvents {\n    name\n    date\n    location {\n      name\n      weather {\n        temperature\n        description\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  upcomingEvents: [Event!]!\n}\n\ntype Event {\n  name: String!\n  date: String!\n  location: Location\n}\n\ntype Location {\n  name: String!\n  weather: WeatherInfo\n}\n\ntype WeatherInfo {\n  temperature: Float\n  description: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for TypeScript\nDESCRIPTION: Package.json configuration for a TypeScript Apollo Server project, setting the module type and defining compile and start scripts.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...etc.\n  \"type\": \"module\",\n  \"scripts\": {\n    \"compile\": \"tsc\",\n    \"start\": \"npm run compile && node ./dist/index.js\"\n  }\n  // other dependencies\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Lambda Handler for Apollo Server\nDESCRIPTION: Complete server setup with the AWS Lambda integration, creating and exporting a handler function that can be used by AWS Lambda.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\n// highlight-start\nimport {\n  startServerAndCreateLambdaHandler,\n  handlers,\n} from '@as-integrations/aws-lambda';\n// highlight-end\n\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n// This final export is important!\n// highlight-start\nexport const graphqlHandler = startServerAndCreateLambdaHandler(\n  server,\n  // We will be using the Proxy V2 handler\n  handlers.createAPIGatewayProxyEventV2RequestHandler()\n);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Schema\nDESCRIPTION: Schema definition for a subscription that notifies clients when a new post is created.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Subscription {\n  postCreated: Post\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers for MongoDB Operations\nDESCRIPTION: JavaScript code that implements resolver functions for the GraphQL schema. These functions connect the GraphQL operations to MongoDB, handling queries for fetching records and mutations for creating, updating, and deleting records.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport db from \"./db/connection.js\";\n\nconst resolvers = {\n  Record: {\n    id: (parent) => parent.id ?? parent._id,\n  },\n  Query: {\n    async record(_, { id }) {\n      let collection = await db.collection(\"records\");\n      let query = { _id: new ObjectId(id) };\n\n      return await collection.findOne(query);\n    },\n    async records(_, __, context) {\n      let collection = await db.collection(\"records\");\n      const records = await collection.find({}).toArray();\n      return records;\n    },\n  },\n  Mutation: {\n    async createRecord(_, { name, position, level }, context) {\n      let collection = await db.collection(\"records\");\n      const insert = await collection.insertOne({ name, position, level });\n      if (insert.acknowledged)\n        return { name, position, level, id: insert.insertedId };\n      return null;\n    },\n    async updateRecord(_, args, context) {\n      const id = new ObjectId(args.id);\n      let query = { _id: new ObjectId(id) };\n      let collection = await db.collection(\"records\");\n      const update = await collection.updateOne(\n        query,\n        { $set: { ...args } }\n      );\n\n      if (update.acknowledged)\n        return await collection.findOne(query);\n\n      return null;\n    },\n    async deleteRecord(_, { id }, context) {\n      let collection = await db.collection(\"records\");\n      const dbDelete = await collection.deleteOne({ _id: new ObjectId(id) });\n      return dbDelete.acknowledged && dbDelete.deletedCount == 1 ? true : false;\n    },\n  },\n};\n\nexport default resolvers;\n```\n\n----------------------------------------\n\nTITLE: Configuring Express with Apollo Server Drain Plugin in TypeScript\nDESCRIPTION: Example implementation of Apollo Server with Express using the ApolloServerPluginDrainHttpServer plugin. The code demonstrates how to set up an HTTP server with graceful shutdown capabilities, including CORS support and custom context creation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/drain-http-server.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst app = express();\n// Our httpServer handles incoming requests to our Express app.\n// Below, we tell Apollo Server to \"drain\" this httpServer,\n// enabling our servers to shut down gracefully.\nconst httpServer = http.createServer(app);\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\n\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server, {\n    context: async ({ req }) => ({ token: req.headers.token }),\n  }),\n);\n\nawait new Promise<void>((resolve) =>\n  httpServer.listen({ port: 4000 }, resolve),\n);\n\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/graphql`);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reference Resolver for User Entity in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add a reference resolver for the User entity. The __resolveReference function tells the gateway how to fetch a User entity by its @key fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    me() {\n      return { id: '1', username: '@ava' };\n    },\n  },\n  User: {\n    __resolveReference(user, { fetchUserById }) {\n      return fetchUserById(user.id);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server with TypeScript Generic Context\nDESCRIPTION: Demonstrates how to declare server context type using TypeScript generics. This ensures type safety between context function returns and resolver/plugin context usage.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer<MyContextType>\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Operations with executeOperation in TypeScript\nDESCRIPTION: A Jest test example that creates a test Apollo Server instance and tests a simple hello query using the executeOperation method. The test verifies the response structure and data returned from the GraphQL operation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// For clarity in this example we included our typeDefs and resolvers above our test,\n// but in a real world situation you'd be importing these in from different files\nconst typeDefs = `#graphql\n  type Query {\n    hello(name: String): String!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name}!`,\n  },\n};\n\nit('returns hello with the provided name', async () => {\n  const testServer = new ApolloServer({\n    typeDefs,\n    resolvers,\n  });\n\n  const response = await testServer.executeOperation({\n    query: 'query SayHelloWorld($name: String) { hello(name: $name) }',\n    variables: { name: 'world' },\n  });\n\n  // Note the use of Node's assert rather than Jest's expect; if using\n  // TypeScript, `assert`` will appropriately narrow the type of `body`\n  // and `expect` will not.\n  assert(response.body.kind === 'single');\n  expect(response.body.singleResult.errors).toBeUndefined();\n  expect(response.body.singleResult.data?.hello).toBe('Hello world!');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPDataSource with Apollo Server 4\nDESCRIPTION: Example showing how to implement a MoviesAPI class that extends HTTPDataSource and manually initialize it in Apollo Server 4. Demonstrates proper constructor setup, cache initialization, and context handling.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { KeyValueCache } from '@apollo/utils.keyvaluecache';\nimport { Pool } from 'undici';\nimport { HTTPDataSource } from 'apollo-datasource-http';\n\nclass MoviesAPI extends HTTPDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n\n  constructor(options: { cache: KeyValueCache<string>; token: string }) {\n    const pool = new Pool(baseURL);\n    super(baseURL, { pool });\n\n    this.initialize({ cache: options.cache, context: options.token });\n  }\n\n  async getMovie(id: string): Promise<Movie> {\n    return this.get<Movie>(`movies/${encodeURIComponent(id)}`);\n  }\n}\n\ninterface MyContext {\n  dataSources: {\n    moviesApi: MoviesAPI;\n  };\n  token?: string;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => {\n    const { cache } = server;\n    const token = req.headers.token;\n    return {\n      dataSources: {\n        moviesApi: new MoviesAPI({ cache, token }),\n      },\n      token,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating User Model with Authorization in Apollo Server (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a user model generator function that includes authorization logic. It provides methods for fetching all users, a single user by ID, and users by group ID.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generateUserModel = ({ user }) => ({\n  getAll: () => {\n    /* fetching/transform logic for all users */\n  },\n  getById: (id) => {\n    /* fetching/transform logic for a single user */\n  },\n  getByGroupId: (id) => {\n    /* fetching/transform logic for a group of users */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoader for Batching and Caching in TypeScript\nDESCRIPTION: This code snippet shows how to use DataLoader in a ProductsDataSource class to implement batching and caching. It includes a method for fetching products by ID and demonstrates how to create a new instance of the data source for each request.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport DataLoader from 'dataloader';\n\nclass ProductsDataSource {\n  private dbConnection;\n\n  constructor(dbConnection) {\n    this.dbConnection = dbConnection;\n  }\n\n  private batchProducts = new DataLoader(async (ids) => {\n    const productList = await this.dbConnection.fetchAllKeys(ids);\n    // Dataloader expects you to return a list with the results ordered just like the list in the arguments were\n    // Since the database might return the results in a different order the following code sorts the results accordingly\n    const productIdToProductMap = productList.reduce((mapping, product) => {\n        mapping[product.id] = product;\n        return mapping;\n    }, {});\n    return ids.map((id) => productIdToProductMap[id]);\n  });\n\n  async getProductFor(id) {\n    return this.batchProducts.load(id);\n  }\n}\n\n// In your server file\n\n// Set up our database, instantiate our connection,\n// and return that database connection\nconst dbConnection = initializeDBConnection();\n\nconst { url } = await startStandaloneServer(server, {\n  context: async () => {\n    return {\n      dataSources: {\n        // Create a new instance of our data source for every request!\n        // (We pass in the database connection because we don't need\n        // a new connection for every request.)\n        productsDb: new ProductsDataSource(dbConnection), //highlight-line\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Error Creation in Apollo Server\nDESCRIPTION: Example of creating custom GraphQL errors with custom error codes and extensions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nthrow new GraphQLError(message, {\n  extensions: { code: 'YOUR_ERROR_CODE', myCustomExtensions },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Subgraph Schema with Apollo Server in TypeScript\nDESCRIPTION: This snippet shows how to use the buildSubgraphSchema function to create a federated subgraph schema. The resulting schema is then provided to the ApolloServer constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n\n// Note the top level await!\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Context for GraphQL Subscriptions\nDESCRIPTION: Shows how to extract authentication tokens from connection parameters and create user context for subscription operations.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst getDynamicContext = async (ctx, msg, args) => {\n  // ctx is the graphql-ws Context where connectionParams live\n  if (ctx.connectionParams.authentication) {\n    const currentUser = await findUser(ctx.connectionParams.authentication);\n    return { currentUser };\n  }\n  // Otherwise let our resolvers know we don't have a current user\n  return { currentUser: null };\n};\n\nuseServer(\n  {\n    schema,\n    context: async (ctx, msg, args) => {\n      // Returning an object will add that information to\n      // contextValue, which all of our resolvers have access to.\n      return getDynamicContext(ctx, msg, args);\n    },\n  },\n  wsServer,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing __resolveReference for Entity Resolution\nDESCRIPTION: Example of implementing the __resolveReference resolver for a User entity, which enables the query planner to resolve entities across subgraphs using their unique identifiers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-subgraph.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeDefs = gql`\n  type User @key(fields: \"id\") {\n    id: ID!\n    username: String\n  }\n`;\n\nconst resolvers = {\n  User: {\n    __resolveReference(user, { dataSources }) {\n      // user will always have at least the `id` and the `__typename` here\n      return dataSources.users.fetchUserById(user.id);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing buildSubgraphSchema for Federation in TypeScript\nDESCRIPTION: This snippet shows how to import the buildSubgraphSchema function from the @apollo/subgraph package, which is essential for creating a federated subgraph.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildSubgraphSchema } from '@apollo/subgraph';\n```\n\n----------------------------------------\n\nTITLE: Complete Apollo Server Implementation with Books Example\nDESCRIPTION: A full example showing how to initialize an Apollo Server with typeDefs and resolvers for a books schema, including hardcoded data store and server startup.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\n// Hardcoded data store\nconst books = [\n  {\n    title: 'The Awakening',\n    author: 'Kate Chopin',\n  },\n  {\n    title: 'City of Glass',\n    author: 'Paul Auster',\n  },\n];\n\n// Schema definition\nconst typeDefs = `#graphql\n  type Book {\n    title: String\n    author: String\n  }\n\n  type Query {\n    books: [Book]\n  }\n`;\n\n// Resolver map\nconst resolvers = {\n  Query: {\n    books() {\n      return books;\n    },\n  },\n};\n\n// Pass schema definition and resolvers to the\n// ApolloServer constructor\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n// Launch the server\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hardcoded Data Store for Users\nDESCRIPTION: Defines a static array of user objects with id and name properties to serve as a mock data source.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = [\n  {\n    id: '1',\n    name: 'Elizabeth Bennet',\n  },\n  {\n    id: '2',\n    name: 'Fitzwilliam Darcy',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Apollo Server with Express Middleware\nDESCRIPTION: This snippet demonstrates how to set up and customize CORS behavior for Apollo Server using the expressMiddleware function and the cors package. It shows how to specify allowed origins and set up the server with proper CORS configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport express from 'express';\nimport http from 'http';\nimport { typeDefs, resolvers } from './schema';\nimport cors from 'cors';\n\nconst app = express();\nconst httpServer = http.createServer(app);\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\n\nawait server.start();\n\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>({ origin: ['https://www.your-app.example', 'https://studio.apollographql.com'] }),\n  express.json(),\n  expressMiddleware(server),\n);\n\nawait new Promise<void>((resolve) => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/graphql`);\n```\n\n----------------------------------------\n\nTITLE: Implementing executionDidStart Event Handler in TypeScript\nDESCRIPTION: Event handler that fires when Apollo Server begins executing a GraphQL operation. Can return listener for field resolution and execution end.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexecutionDidStart?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>,\n    'source' | 'queryHash' | 'document' | 'operationName' | 'operation'\n  >,\n): Promise<GraphQLRequestExecutionListener | void>;\n```\n\n----------------------------------------\n\nTITLE: Handling Database Errors in Apollo Server (TypeScript)\nDESCRIPTION: This snippet shows how to use the formatError hook to handle specific database errors and return a generic error message to the client.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nformatError: (formattedError, error) => {\n  if (formattedError.message.startsWith('Database Error: ')) {\n    return { message: 'Internal server error' };\n  }\n  return formattedError;\n},\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Custom GraphQL Directive\nDESCRIPTION: Shows how to define a custom @uppercase directive and apply it to a field in the schema. This example defines the directive to be used on field definitions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/directives.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# Definition\ndirective @uppercase on FIELD_DEFINITION\n\ntype Query {\n  # Usage\n  hello: String @uppercase\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Resolver Implementation\nDESCRIPTION: Implementation of a subscription resolver using asyncIterator\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Subscription: {\n    postCreated: {\n      subscribe: () => pubsub.asyncIterator(['POST_CREATED']),\n    },\n  },\n  // ...other resolvers...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection Lifecycle Handlers\nDESCRIPTION: Example of implementing onConnect and onDisconnect handlers for WebSocket connections with authentication validation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nuseServer(\n  {\n    schema,\n    // As before, ctx is the graphql-ws Context where connectionParams live.\n    onConnect: async (ctx) => {\n      // Check authentication every time a client connects.\n      if (tokenIsNotValid(ctx.connectionParams)) {\n        // You can return false to close the connection  or throw an explicit error\n        throw new Error('Auth token missing!');\n      }\n    },\n    onDisconnect(ctx, code, reason) {\n      console.log('Disconnected!');\n    },\n  },\n  wsServer,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in Resolvers\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the generated Resolvers type to type-check resolver functions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// This is the file where our generated types live\n// (specified in our `codegen.yml` file)\nimport { Resolvers } from './__generated__/resolvers-types';\n\nexport const resolvers: Resolvers = {\n  Query: {\n    // TypeScript now complains about the below resolver because\n    // the data returned by this resolver doesn't match the schema type\n    // (i.e., type Query { books: [Book] })\n    books: () => {\n      return \"apple\";\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using buildSubgraphSchema with Apollo Server\nDESCRIPTION: Basic example showing how to initialize an Apollo Server with a federation-ready subgraph schema. This is the core setup pattern for creating a subgraph.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-subgraph.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  schema: buildSubgraphSchema({ typeDefs, resolvers }), //highlight-line\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Server with Express\nDESCRIPTION: Complete implementation of Apollo Server integrated with Express, including HTTP server setup, CORS configuration, and middleware integration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'\nimport express from 'express';\nimport http from 'http';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\nconst app = express();\nconst httpServer = http.createServer(app);\n\n// Set up Apollo Server\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\n\napp.use(\n  cors(),\n  bodyParser.json(),\n  expressMiddleware(server),\n);\n\nawait new Promise((resolve) => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000`);\n```\n\n----------------------------------------\n\nTITLE: Defining List Fields in GraphQL\nDESCRIPTION: This example shows how to define a field that returns a list of a specific type in GraphQL. The books field returns a list of Book objects.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  name: String\n  books: [Book] # A list of Books\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Landing Page for Apollo Server\nDESCRIPTION: This code snippet shows how to create a custom HTML landing page for Apollo Server using a custom plugin. The plugin defines a serverWillStart lifecycle method that returns an object with a renderLandingPage function, which generates and returns the custom HTML content.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/build-run-queries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    {\n      async serverWillStart() {\n        return {\n          async renderLandingPage() {\n            const html = `\n              <!DOCTYPE html>\n              <html>\n                <head>\n                </head>\n                <body>\n                  <h1>Hello world!</h1>\n                </body>\n              </html>`;\n            return { html };\n          },\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Computing GraphQL Context in Apollo Server Integrations\nDESCRIPTION: Demonstrates how to set up the context function handling in an integration, including defining the appropriate types and creating a default empty context when none is provided by the user.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExpressContextFunctionArgument {\n  req: express.Request;\n  res: express.Response;\n}\n\nconst defaultContext: ContextFunction<\n  [ExpressContextFunctionArgument],\n  any\n> = async () => ({});\n\nconst context: ContextFunction<[ExpressContextFunctionArgument], TContext> =\n  options?.context ?? defaultContext;\n```\n\n----------------------------------------\n\nTITLE: Customizing Mock Values in Apollo Server\nDESCRIPTION: Demonstrates how to create a complete Apollo Server implementation with customized mock values. This example defines specific mock functions for Int, Float, and String scalar types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n    resolved: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    resolved: () => 'Resolved',\n  },\n};\n\n// highlight-start\nconst mocks = {\n  Int: () => 6,\n  Float: () => 22.1,\n  String: () => 'Hello',\n};\n// highlight-end\n\nconst server = new ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n    mocks, // highlight-line\n  }),\n});\n\nconst { url } = await startStandaloneServer(server, { listen: { port: 4000 } });\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Union Type\nDESCRIPTION: Shows how to define a basic union type in GraphQL that combines multiple object types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nunion Media = Book | Movie\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory Response Cache in Apollo Server with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an in-memory response cache in Apollo Server using the responseCachePlugin. It imports the plugin and adds it to the ApolloServer constructor options.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport responseCachePlugin from '@apollo/server-plugin-response-cache';\n\nconst server = new ApolloServer({\n  // ...other options...\n  plugins: [responseCachePlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for MongoDB Records Collection\nDESCRIPTION: A GraphQL schema definition file that specifies queries and mutations for CRUD operations on records stored in MongoDB. Includes types for querying single and multiple records, creating, updating, and deleting records.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  record(id:ID!): Record\n  records: [Record]\n}\n\ntype Mutation {\n  createRecord(name: String!, position: String, level: String): Record\n  deleteRecord(id: ID!): Boolean\n  updateRecord(id: ID! name: String, position: String, level: String): Record\n}\n\ntype Record {\n  id: ID\n  name: String\n  position: String\n  level: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Redis Sentinel\nDESCRIPTION: Shows how to configure Apollo Server with Redis Sentinel for high availability caching. This setup provides failover capabilities through multiple Redis sentinel instances.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from \"keyv\";\nimport { KeyvAdapter } from \"@apollo/utils.keyvadapter\";\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  // highlight-start\n  cache: new KeyvAdapter(new Keyv(\n    new KeyvRedis(\"redis://user:pass@localhost:6379\", {\n      sentinels: [\n        { host: \"localhost\", port: 26379 },\n        { host: \"localhost\", port: 26380 },\n      ],\n    })\n  )),\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ApolloGateway with Apollo Server in TypeScript\nDESCRIPTION: Creates an Apollo Server instance with an ApolloGateway configuration. This pattern shows how to pass the gateway as a configuration option to the ApolloServer constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  // highlight-start\n  gateway: new ApolloGateway({\n    serviceList: [\n      // ...\n    ],\n  }),\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a custom scalar in GraphQL schema\nDESCRIPTION: Shows how to define a custom scalar type in a GraphQL schema. This snippet demonstrates the basic syntax for adding a custom scalar to your schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar MyCustomScalar\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Modification with willSendRequest\nDESCRIPTION: Demonstrates adding user ID headers to outgoing requests by extending RemoteGraphQLDataSource and overriding willSendRequest.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthenticatedDataSource extends RemoteGraphQLDataSource {\n  willSendRequest({ request, context }) {\n    request.http.headers.set('x-user-id', context.userId);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Code Generator Scripts to package.json\nDESCRIPTION: This JSON snippet shows how to add scripts to package.json for generating types, compiling TypeScript, and starting the server with generated types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n// ...\n  \"scripts\": {\n    \"generate\": \"graphql-codegen --config codegen.yml\",\n    \"compile\": \"npm run generate && tsc\",\n    \"start\": \"npm run compile && node ./dist/index.js\",\n  },\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type in GraphQL Schema\nDESCRIPTION: This example shows how to define a Query type in GraphQL, which specifies the entry points for read operations. It provides fields for querying books and authors collections.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  books: [Book]\n  authors: [Author]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication for Subscription Context\nDESCRIPTION: Shows a complete example of user authentication handling in subscription context with user lookup functionality.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst findUser = async (authToken) => {\n  // Find a user by their auth token\n};\n\nconst getDynamicContext = async (ctx, msg, args) => {\n  if (ctx.connectionParams.authentication) {\n    const currentUser = await findUser(ctx.connectionParams.authentication);\n    return { currentUser };\n  }\n  // Let the resolvers know we don't have a current user so they can\n  // throw the appropriate error\n  return { currentUser: null };\n};\n\n// ...\nuseServer(\n  {\n    // Our GraphQL schema.\n    schema,\n    context: async (ctx, msg, args) => {\n      // This will be run every time the client sends a subscription request\n      return getDynamicContext(ctx, msg, args);\n    },\n  },\n  wsServer,\n);\n```\n\n----------------------------------------\n\nTITLE: Filtered Subscription Example\nDESCRIPTION: Implementation of a filtered subscription using withFilter helper\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withFilter } from 'graphql-subscriptions';\n\nconst resolvers = {\n  Subscription: {\n    commentAdded: {\n      subscribe: withFilter(\n        () => pubsub.asyncIterator('COMMENT_ADDED'),\n        (payload, variables) => {\n          return (\n            payload.commentAdded.repository_name === variables.repoFullName\n          );\n        },\n      ),\n    },\n  },\n  // ...other resolvers...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interface Schema\nDESCRIPTION: Shows how to define an interface type and implementing object types in GraphQL.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Book {\n  title: String!\n  author: Author!\n}\n\ntype Textbook implements Book {\n  title: String!\n  author: Author!\n  courses: [Course!]!\n}\n\ntype ColoringBook implements Book {\n  title: String!\n  author: Author!\n  colors: [String!]!\n}\n\ntype Query {\n  books: [Book!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federation 2 Schema with @link Directive in TypeScript\nDESCRIPTION: This code snippet demonstrates how to opt into Federation 2 by adding the @link directive to the schema. It imports specific directives and enables the use of Federation 2 features.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nconst typeDefs = gql`\n  extend schema\n    @link(\n      url: \"https://specs.apollo.dev/federation/v2.0\"\n      import: [\"@key\", \"@shareable\"]\n    )\n\n  type Query {\n    me: User\n  }\n\n  type User {\n    id: ID!\n    username: String\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Data Sources in Apollo Server Resolvers with TypeScript\nDESCRIPTION: Example of how to use the data sources in Apollo Server resolvers. The resolvers access the data sources from the shared contextValue object to fetch data for different queries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    movie: async (_, { id }, { dataSources }) => {\n      return dataSources.moviesAPI.getMovie(id);\n    },\n    mostViewedMovies: async (_, __, { dataSources }) => {\n      return dataSources.moviesAPI.getMostViewedMovies();\n    },\n    favorites: async (_, __, { dataSources }) => {\n      return dataSources.personalizationAPI.getFavorites();\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Context in Apollo Server 4 with startStandaloneServer\nDESCRIPTION: Demonstrates how to provide a context initialization function to the startStandaloneServer function in Apollo Server 4. The context function should return an object accessible to the server's resolvers and plugins.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyContext {\n  token: String;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  // A named context function is required if you are not\n  // using ApolloServer<BaseContext>\n  context: async ({req, res}) => ({\n    token: await getTokenForRequest(req),\n  }),\n  listen: { port: 4000 }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Query to Fetch Books and Authors\nDESCRIPTION: This GraphQL query demonstrates how to fetch multiple resources in a single request. It retrieves a list of book titles and a separate list of author names.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBooksAndAuthors {\n  books {\n    title\n  }\n\n  authors {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client with Persisted Queries\nDESCRIPTION: Setup code for enabling automatic persisted queries in Apollo Client. This configuration enables sending hashed queries as GET requests and includes the necessary link composition for APQ functionality.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport { createPersistedQueryLink } from '@apollo/client/link/persisted-queries';\nimport { sha256 } from 'crypto-hash';\n\nconst link = createPersistedQueryLink({\n  sha256,\n  useGETForHashedQueries: true,\n}).concat(new HttpLink({ uri: '/graphql' }));\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n```\n\n----------------------------------------\n\nTITLE: Using @deprecated Directive in GraphQL Schema\nDESCRIPTION: Example showing how to mark a field as deprecated in a GraphQL schema using the @deprecated directive, which takes an optional reason argument.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/directives.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype ExampleType {\n  oldField: String @deprecated(reason: \"Use `newField`.\")\n  newField: String\n}\n```\n\n----------------------------------------\n\nTITLE: Class-based Context Implementation with Data Sources in Apollo Server 4\nDESCRIPTION: Example showing how to implement a class-based context that can access its own properties within data sources.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESTDataSource, WillSendRequestOptions } from '@apollo/datasource-rest';\nimport { KeyValueCache } from '@apollo/utils.keyvaluecache';\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { IncomingMessage } from 'http';\n\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private contextValue: ContextValue;\n\n  constructor(options: { contextValue: ContextValue; cache: KeyValueCache }) {\n    super(options);\n    this.contextValue = options.contextValue;\n  }\n\n  override willSendRequest(path: string, request: WillSendRequestOptions) {\n    request.headers['authorization'] = this.contextValue.token;\n  }\n\n  async getMovie(id):Promise<Movie> {\n    return this.get<Movie>(`movies/${encodeURIComponent(id)}`);\n  }\n}\n\nclass ContextValue {\n  public token: string;\n  public dataSources: {\n    moviesAPI: MoviesAPI;\n  };\n\n  constructor({ req, server }: { req: IncomingMessage; server: ApolloServer<ContextValue> }) {\n    this.token = getTokenFromRequest(req);\n    const { cache } = server;\n    this.dataSources = {\n      moviesAPI: new MoviesAPI({ cache, contextValue: this }),\n    };\n  }\n}\n\nconst server = new ApolloServer<ContextValue>({\n  typeDefs,\n  resolvers,\n});\n\nawait startStandaloneServer(server, {\n  context: async ({ req }) => new ContextValue({ req, server }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IntrospectAndCompose in Apollo Gateway\nDESCRIPTION: Demonstrates how to set up Apollo Gateway using IntrospectAndCompose to fetch and compose subgraph schemas. Includes configuration of subgraph names and URLs.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ApolloGateway, IntrospectAndCompose } = require('@apollo/gateway');\n\nconst gateway = new ApolloGateway({\n  supergraphSdl: new IntrospectAndCompose({\n    subgraphs: [\n      { name: 'accounts', url: 'http://localhost:4001' },\n      { name: 'products', url: 'http://localhost:4002' },\n      // ...additional subgraphs...\n    ],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Usage Reporting Plugin in TypeScript\nDESCRIPTION: Example of how to import and configure the usage reporting plugin with custom options in an Apollo Server instance. This snippet demonstrates setting the fieldLevelInstrumentation option to sample 50% of operations.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/usage-reporting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      fieldLevelInstrumentation: 0.5,\n    })\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ApolloGateway with IntrospectAndCompose in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up an ApolloGateway instance with a custom buildService function and IntrospectAndCompose for supergraph SDL. It shows how to configure authenticated data sources for subgraphs.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  buildService({ name, url }) {\n    return new AuthenticatedDataSource({ url });\n  },\n  supergraphSdl: new IntrospectAndCompose({\n    subgraphs: [\n      { name: 'products', url: 'https://products-service.dev/graphql' },\n      { name: 'reviews', url: 'https://reviews-service.dev/graphql' },\n    ],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Union Type Resolution Implementation\nDESCRIPTION: Demonstrates how to implement a __resolveType function for resolving union types in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  SearchResult: {\n    __resolveType(obj, contextValue, info){\n      if(obj.name){\n        return 'Author';\n      }\n      if(obj.title){\n        return 'Book';\n      }\n      return null;\n    },\n  },\n  Query: {\n    search: () => { ... }\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€  Server ready at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Mocking in Apollo Server\nDESCRIPTION: Creates an Apollo Server instance with mocked data based on the schema. This example combines addMocksToSchema and makeExecutableSchema to provide default mock data for every field in the schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { typeDefs } from './schema';\nimport { resolvers } from './resolvers';\n\nnew ApolloServer({\n  // addMocksToSchema accepts a schema instance and provides\n  // mocked data for each field in the schema\n  // highlight-start\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n  }),\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic User Update Mutation Schema\nDESCRIPTION: Demonstrates the schema definition for a basic user email update mutation that returns the modified User type.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  # This mutation takes id and email parameters and responds with a User\n  updateUserEmail(id: ID!, email: String!): User\n}\n\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Query to Fetch Books with Authors\nDESCRIPTION: This GraphQL query demonstrates how to retrieve nested related data. It fetches books with their titles and the names of their authors in a single request.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBooks {\n  books {\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Header in REST Requests\nDESCRIPTION: Implementation of willSendRequest to add authorization header to all requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RESTDataSource,\n  AugmentedRequest,\n} from '@apollo/datasource-rest';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\n\nclass PersonalizationAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options);\n    this.token = options.token;\n  }\n\n  override willSendRequest(_path: string, request: AugmentedRequest) {\n    request.headers['authorization'] = this.token;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Book Mutation in GraphQL\nDESCRIPTION: Example of a GraphQL mutation that creates a new book and requests specific fields in the response.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateBook {\n  addBook(title: \"Fox in Socks\", author: \"Dr. Seuss\") {\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client with APQ\nDESCRIPTION: Demonstrates how to set up Apollo Client with APQ by creating a link chain that includes the persisted query link and HTTP link.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport { createPersistedQueryLink } from '@apollo/client/link/persisted-queries';\nimport { sha256 } from 'crypto-hash';\n\nconst linkChain = createPersistedQueryLink({ sha256 }).concat(\n  new HttpLink({ uri: 'http://localhost:4000/graphql' }),\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: linkChain,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type System Directive (GraphQL)\nDESCRIPTION: This GraphQL schema snippet demonstrates the definition of a custom type system directive '@deprecated' that can be applied to field definitions and enum values. It includes an example of how to use the directive in a type definition.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @deprecated(\n  reason: String = \"No longer supported\"\n) on FIELD_DEFINITION | ENUM_VALUE\n\ntype ExampleType {\n  newField: String\n  oldField: String @deprecated(reason: \"Use `newField`.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Gateway with Apollo Server\nDESCRIPTION: Basic setup of Apollo Server as a gateway using a static supergraph schema loaded from a file.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloGateway } from '@apollo/gateway';\nimport { readFileSync } from 'fs';\n\nconst supergraphSdl = readFileSync('./supergraph.graphql').toString();\n\nconst gateway = new ApolloGateway({\n  supergraphSdl,\n});\n\nconst server = new ApolloServer({\n  gateway,\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing serverWillStart Event Handler in Apollo Server Plugin\nDESCRIPTION: Example of creating a plugin that responds to the serverWillStart event, which fires when Apollo Server is preparing to start serving GraphQL requests. This async method must complete before the server begins processing requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async serverWillStart() {\n        console.log('Server starting!');\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using willSendResponse Hook in Apollo Server 4 (TypeScript)\nDESCRIPTION: This example illustrates how to use the willSendResponse plugin hook in Apollo Server 4 to transform GraphQL responses, replacing the formatResponse hook from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  plugins: [\n    {\n      async requestDidStart() {\n        return {\n          async willSendResponse(requestContext) {\n            const { response } = requestContext;\n            if (response.body.kind === 'single' && 'data' in response.body.singleResult) {\n              response.body.singleResult.extensions = {\n                ...response.body.singleResult.extensions,\n                hello: 'world',\n              };\n            }\n          },\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemoryLRUCache for ApolloServer DocumentStore\nDESCRIPTION: Demonstrates how to customize the documentStore option for ApolloServer using InMemoryLRUCache. This allows adjusting the cache size for storing GraphQL operations.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InMemoryLRUCache } from '@apollo/utils.keyvaluecache';\nimport type { DocumentNode } from 'graphql';\n\nnew ApolloServer({\n  documentStore: new InMemoryLRUCache<DocumentNode>({\n    maxSize: Math.pow(2, 20) * approximateDocumentStoreMiB,\n    sizeCalculation: InMemoryLRUCache.sizeCalculation,\n  }),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Non-Federated Apollo Server in TypeScript\nDESCRIPTION: This snippet shows a basic setup for a non-federated Apollo Server using TypeScript. It defines a simple schema with a User type and a Query type, along with corresponding resolvers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-subgraph-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport gql from 'graphql-tag';\n\nconst typeDefs = gql`\n  type Query {\n    me: User\n  }\n\n  type User {\n    id: ID!\n    username: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    me() {\n      return { id: '1', username: '@ava' };\n    },\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n// Note the top-level await!\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Cache Control in GraphQL Schema\nDESCRIPTION: Example of using the @cacheControl directive to set caching behavior for specific fields, with votes cached for 30 seconds publicly and readByCurrentUser cached for 10 seconds privately.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID!\n  title: String\n  author: Author\n  votes: Int @cacheControl(maxAge: 30)\n  comments: [Comment]\n  readByCurrentUser: Boolean! @cacheControl(maxAge: 10, scope: PRIVATE)\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Type Mutation Response Definition\nDESCRIPTION: Demonstrates how to structure a mutation response that involves multiple modified types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ntype LikePostMutationResponse implements MutationResponse {\n  code: String!\n  success: Boolean!\n  message: String!\n  post: Post\n  user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Access to Context in Apollo Server\nDESCRIPTION: Demonstrates how plugins can access contextValue through request lifecycle functions with proper TypeScript typing.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyContext {\n  token: string\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers: {\n    Query: {\n      hello: (root, args, { token }) => {\n        return token;\n      },\n    },\n  },\n  plugins: [{\n    async requestDidStart({ contextValue }) {\n      console.log(contextValue.token);\n    },\n  }],\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({req, res}) => ({\n    token: await getTokenForRequest(req),\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Redis Single Instance\nDESCRIPTION: Demonstrates how to configure Apollo Server with a single Redis instance for caching. Uses KeyvRedis adapter to connect to a Redis server with authentication.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from \"keyv\";\nimport KeyvRedis from \"@keyv/redis\";\nimport { KeyvAdapter } from \"@apollo/utils.keyvadapter\";\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  cache: new KeyvAdapter(new Keyv(new KeyvRedis(\"redis://user:pass@localhost:6379\"))), // highlight-line\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server 4 for Serverless Lambda Handler\nDESCRIPTION: Demonstrates how to create an Apollo Server 4 instance for a serverless Lambda handler. The serverless integration function should call the server's startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests method.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nexports.handler = startServerAndCreateLambdaHandler(server);\n```\n\n----------------------------------------\n\nTITLE: Configuring ApolloServerPluginCacheControl in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and configure the ApolloServerPluginCacheControl plugin in an Apollo Server instance. It sets a default max age of 1 second for all cached items and disables the cache-control HTTP header.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/cache-control.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginCacheControl({\n      // Cache everything for 1 second by default.\n      defaultMaxAge: 1,\n      // Don't send the `cache-control` response header.\n      calculateHttpHeaders: false,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Custom Executable Directive (GraphQL)\nDESCRIPTION: This GraphQL schema snippet shows the definition of a custom executable directive '@uppercase' that can be applied to fields. It also includes an example query demonstrating how to use the directive in a client operation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n# Uppercase this field's value (assuming it's a string)\ndirective @uppercase on FIELD\n\nquery GetUppercaseUsernames {\n  users {\n    name @uppercase\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Server Context with GraphQL-WS\nDESCRIPTION: Demonstrates how to set up context for GraphQL subscriptions using the useServer function with a custom context provider.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nuseServer(\n  {\n    // Our GraphQL schema.\n    schema,\n    // Adding a context property lets you add data to your GraphQL operation contextValue\n    context: async (ctx, msg, args) => {\n      // You can define your own function for setting a dynamic context\n      // or provide a static value\n      return getDynamicContext(ctx, msg, args);\n    },\n  },\n  wsServer,\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cache Control in GraphQL Resolvers\nDESCRIPTION: TypeScript example of setting cache control hints dynamically in a resolver function using the setCacheHint method provided by Apollo Server's cache control plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cacheControlFromInfo } from '@apollo/cache-control-types';\n\nconst resolvers = {\n  Query: {\n    post: (_, { id }, _, info) => {\n      // Access ApolloServerPluginCacheControl's extension of the GraphQLResolveInfo object\n      const cacheControl = cacheControlFromInfo(info)\n      cacheControl.setCacheHint({ maxAge: 60, scope: 'PRIVATE' });\n      return find(posts, { id });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Response Handling in Apollo Gateway (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to customize the Apollo Gateway to aggregate 'Server-Id' headers from subgraphs and include them in the final response to the client. It uses the RemoteGraphQLDataSource class and ApolloServer plugins to achieve this.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloGateway, RemoteGraphQLDataSource } from '@apollo/gateway';\nimport { readFileSync } from 'fs';\n\nconst supergraphSdl = readFileSync('./supergraph.graphql').toString();\n\nclass DataSourceWithServerId extends RemoteGraphQLDataSource {\n  async didReceiveResponse({ response, request, context }) {\n    const serverId = response.http.headers.get('Server-Id');\n    if (serverId) {\n      context.serverIds.push(serverId);\n    }\n    return response;\n  }\n}\n\nconst gateway = new ApolloGateway({\n  supergraphSdl,\n  buildService({ url }) {\n    return new DataSourceWithServerId({ url });\n  },\n});\n\nconst server = new ApolloServer({\n  gateway,\n  plugins: [\n    {\n      requestDidStart() {\n        return {\n          async willSendResponse({ contextValue, response }) {\n            response.http.headers.set(\n              'Server-Id',\n              contextValue.serverIds.join(','),\n            );\n          },\n        };\n      },\n    },\n  ],\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context() {\n    return { serverIds: [] };\n  },\n});\n\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Enabling Credentialed Requests with CORS in Apollo Server\nDESCRIPTION: This code snippet shows how to configure CORS to allow credentialed requests (e.g., cookies) in Apollo Server using Express middleware. It demonstrates setting the 'credentials' option to true and specifying the allowed origin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '/graphql',\n  cors<cors.CorsRequest>({\n    origin: yourOrigin,\n    credentials: true,\n  }),\n  express.json(),\n  expressMiddleware(server),\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Generation in TypeScript\nDESCRIPTION: Demonstrates how to create a custom cache key generator that prefixes operation names to ensure unique cache keys while maintaining searchable patterns.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/response-cache-eviction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHash } from 'crypto';\n\nfunction sha(s: string) {\n  return createHash('sha256').update(s).digest('hex');\n}\n\ngenerateCacheKey(requestContext, keyData) {\n  const operationName = requestContext.request.operationName ?? 'unnamed';\n  const key = operationName + ':' + sha(JSON.stringify(keyData));\n  return key;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Keyv Adapter\nDESCRIPTION: Demonstrates how to configure Apollo Server with the KeyvAdapter class to use Keyv for caching. This approach allows using various cache backends that Keyv supports.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from 'keyv';\nimport { KeyvAdapter } from '@apollo/utils.keyvadapter';\n\nconst server = new ApolloServer({\n  // ...,\n  cache: new KeyvAdapter(new Keyv()), // highlight-line\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Modules to TypeDefs/Resolvers in Apollo Server 4\nDESCRIPTION: Example showing how to migrate from the modules option to using separate typeDefs and resolvers arrays in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  typeDefs: modules.map({ typeDefs } => typeDefs),\n  resolvers: modules.map({ resolvers } => resolvers),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Data Sources to Apollo Server Context in TypeScript\nDESCRIPTION: Demonstrates how to add RESTDataSource instances to the Apollo Server context function. This setup creates new instances of data sources for each incoming operation, passing in the server's cache.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ContextValue {\n  dataSources: {\n    moviesAPI: MoviesAPI;\n    personalizationAPI: PersonalizationAPI;\n  };\n}\n\nconst server = new ApolloServer<ContextValue>({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async () => {\n    const { cache } = server;\n    return {\n      dataSources: {\n        moviesAPI: new MoviesAPI({ cache }),\n        personalizationAPI: new PersonalizationAPI({ cache }),\n      },\n    };\n  },\n});\n\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Basic Mutation Resolver\nDESCRIPTION: Basic resolver implementation for createPost mutation\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createPost(parent, args, { postController }) {\n      // Datastore logic lives in postController\n      return postController.createPost(args);\n    },\n  },\n  // ...other resolvers...\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting an Apollo Server Plugin as a Separate Module in TypeScript\nDESCRIPTION: This example demonstrates how to define a plugin in a separate file and export it as a module. It responds to the serverWillStart event.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async serverWillStart() {\n    console.log('Server starting up!');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing File-Watched Gateway with Health Checks\nDESCRIPTION: Advanced gateway setup with file watching, health checks, and cleanup functionality for schema updates.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloGateway } from '@apollo/gateway';\nimport { watch } from 'fs';\nimport { readFile } from 'fs/promises';\n\nconst server = new ApolloServer({\n  gateway: new ApolloGateway({\n    async supergraphSdl({ update, healthCheck }) {\n      const watcher = watch('./supergraph.graphql');\n      watcher.on('change', async () => {\n        try {\n          const updatedSupergraph = await readFile(\n            './supergraph.graphql',\n            'utf-8',\n          );\n          await healthCheck(updatedSupergraph);\n          update(updatedSupergraph);\n        } catch (e) {\n          console.error(e);\n        }\n      });\n\n      return {\n        supergraphSdl: await readFile('./supergraph.graphql', 'utf-8'),\n        async cleanup() {\n          watcher.close();\n        },\n      };\n    },\n  }),\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Formatting Errors for Client Responses in Apollo Server (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the formatError hook in the ApolloServer constructor to customize error messages sent to clients. It shows examples of modifying error messages for specific error types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloServerErrorCode } from '@apollo/server/errors';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  formatError: (formattedError, error) => {\n    if (\n      formattedError.extensions.code ===\n      ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED\n    ) {\n      return {\n        ...formattedError,\n        message: \"Your query doesn't match the schema. Try double-checking it!\",\n      };\n    }\n    return formattedError;\n  },\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Error Types in Apollo Server (TypeScript)\nDESCRIPTION: This example demonstrates how to handle specific error types thrown by resolvers using the unwrapResolverError function from @apollo/server/errors.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unwrapResolverError } from '@apollo/server/errors';\n\nnew ApolloServer({\n  formatError: (formattedError, error) => {\n    if (unwrapResolverError(error) instanceof CustomDBError) {\n      return { message: 'Internal server error' };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Errors Based on Message in Apollo Studio Reporting (TypeScript)\nDESCRIPTION: This example demonstrates how to use the transform function to filter out errors with specific messages from being reported to Apollo Studio.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendErrors: {\n        transform: (err) => {\n          if (err.message && err.message.startsWith('Known error message')) {\n            return null;\n          }\n          return err;\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting Apollo Server\nDESCRIPTION: Code to create an Apollo Server instance with the defined schema and resolvers, then start a standalone server on port 4000 that handles incoming GraphQL requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// The ApolloServer constructor requires two parameters: your schema\n// definition and your set of resolvers.\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n// Passing an ApolloServer instance to the `startStandaloneServer` function:\n//  1. creates an Express app\n//  2. installs your ApolloServer instance as middleware\n//  3. prepares your app to handle incoming requests\nconst { url } = await startStandaloneServer(server, {\n  listen: { port: 4000 },\n});\n\nconsole.log(`ðŸš€  Server ready at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Integrating Apollo Server with Express in MERN Stack\nDESCRIPTION: Code showing how to instantiate Apollo Server and integrate it with an existing Express server. Includes importing necessary packages, reading the schema file, and creating an Apollo Server instance with the defined schema and resolvers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport cors from 'cors';\nimport records from \"./routes/record.js\";\n\n//highlight-start\nimport gql from \"graphql-tag\";\nimport { ApolloServer } from '@apollo/server';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport resolvers from \"./resolvers.js\";\nimport { readFileSync } from \"fs\";\n//highlight-end\n\nconst PORT = process.env.PORT || 5050;\nconst app = express();\n\napp.use(cors());\napp.use(express.json());\n\n//highlight-start\nconst typeDefs = gql(\n    readFileSync(\"schema.graphql\", {\n      encoding: \"utf-8\",\n    })\n  );\n\nconst server = new ApolloServer({\n    schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n// Note you must call `start()` on the `ApolloServer`\n// instance before passing the instance to `expressMiddleware`\nawait server.start();\n//highlight-end\n\napp.use(\"/record\", records);\n\n// start the Express server\napp.listen(PORT, () => {\n  console.log(`Server is running on port: ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Errors in Apollo Server 4\nDESCRIPTION: Shows how to use the formatError hook in Apollo Server 4 to customize error responses. The hook now receives both the formatted error and the original error, allowing for more flexible error handling and formatting.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unwrapResolverError } from '@apollo/server/errors';\n\nnew ApolloServer({\n  formatError: (formattedError, error) => {\n    // Don't give the specific errors to the client.\n    if (unwrapResolverError(error) instanceof CustomDBError) {\n      return { message: 'Internal server error' };\n    }\n\n    // Strip `Validation: ` prefix and use `extensions.code` instead\n    if (formattedError.message.startsWith('Validation:')) {\n      return {\n        ...formattedError,\n        message: formattedError.message.replace(/^Validation: /, ''),\n        extensions: { ...formattedError?.extensions, code: 'VALIDATION' },\n      };\n    }\n\n    // Otherwise, return the original error. The error can also\n    // be manipulated in other ways, as long as it's returned.\n    return formattedError;\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: MutationResponse Interface Definition\nDESCRIPTION: Defines a standardized interface for mutation responses that includes status code, success flag, and message.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ninterface MutationResponse {\n  code: String!\n  success: Boolean!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding specification URL to a custom scalar\nDESCRIPTION: Demonstrates how to use the @specifiedBy directive to provide metadata about the format of a custom scalar. This directive helps schema consumers understand what format the scalar is using.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nscalar MyCustomScalar @specifiedBy(url: \"https://specs.example.com/rfc111\")\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Control Directive in GraphQL Schema\nDESCRIPTION: Schema definitions required to use the @cacheControl directive, including the CacheControlScope enum and the directive definition with its available parameters.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nenum CacheControlScope {\n  PUBLIC\n  PRIVATE\n}\n\ndirective @cacheControl(\n  maxAge: Int\n  scope: CacheControlScope\n  inheritMaxAge: Boolean\n) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to REST Requests\nDESCRIPTION: Example of adding API key as a query parameter to all requests using willSendRequest.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RESTDataSource,\n  AugmentedRequest,\n} from '@apollo/datasource-rest';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\n\nclass PersonalizationAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options);\n    this.token = options.token;\n  }\n\n  override willSendRequest(_path: string, request: AugmentedRequest) {\n    request.params.set('api_key', this.token);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory LRU Cache in Apollo Server\nDESCRIPTION: Shows how to configure Apollo Server with the default InMemoryLRUCache from @apollo/utils.keyvaluecache package. This is the most basic caching setup but provides control over cache behavior.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InMemoryLRUCache } from '@apollo/utils.keyvaluecache';\n\nconst server = new ApolloServer({\n  cache: new InMemoryLRUCache(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging in Apollo Server 4 (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up debug logging in Apollo Server 4 using the loglevel package, replacing the debug option's logging functionality from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport loglevel from 'loglevel';\n\nconst logger = loglevel.getLogger('apollo-server');\nlogger.setLevel(shouldShowDebugMessages ? loglevel.levels.DEBUG : loglevel.levels.INFO);\nconst server = new ApolloServer({\n  logger,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MutationResponse for User Update\nDESCRIPTION: Shows how to implement the MutationResponse interface for the user email update mutation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ntype UpdateUserEmailMutationResponse implements MutationResponse {\n  code: String!\n  success: Boolean!\n  message: String!\n  user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in Separate Resolver Files\nDESCRIPTION: These TypeScript snippets show how to use generated types for Query and Mutation resolvers in separate files.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryResolvers } from '__generated__/resolvers-types';\n\n// Use the generated `QueryResolvers`\n// type to type check our queries!\nconst queries: QueryResolvers = {\n  // ...queries\n};\n\nexport default queries;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MutationResolvers } from '__generated__/resolvers-types';\n\n// Use the generated `MutationResolvers` type\n// to type check our mutations!\nconst mutations: MutationResolvers = {\n  // ...mutations\n};\n\nexport default mutations;\n```\n\n----------------------------------------\n\nTITLE: Interface Type Resolution Implementation\nDESCRIPTION: Shows how to implement a __resolveType function for resolving interface types in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Book: {\n    __resolveType(book, contextValue, info){\n      if(book.courses){\n        return 'Textbook';\n      }\n      if(book.colors){\n        return 'ColoringBook';\n      }\n      return null;\n    },\n  },\n  Query: {\n    books: () => { ... }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Landing Page with Environment-Specific Plugins\nDESCRIPTION: This snippet demonstrates how to set up Apollo Server with different landing page plugins for production and non-production environments. It uses ApolloServerPluginLandingPageProductionDefault for production and ApolloServerPluginLandingPageLocalDefault for non-production, with the option to disable embedding.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/build-run-queries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport {\n  ApolloServerPluginLandingPageLocalDefault,\n  ApolloServerPluginLandingPageProductionDefault,\n} from '@apollo/server/plugin/landingPage/default';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    process.env.NODE_ENV === 'production'\n      ? ApolloServerPluginLandingPageProductionDefault()\n      : ApolloServerPluginLandingPageLocalDefault({ embed: false }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Apollo Server Plugin in TypeScript\nDESCRIPTION: This snippet shows how to create a simple plugin that responds to the serverWillStart event. It logs a message when the server is starting up.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = {\n  async serverWillStart() {\n    console.log('Server starting up!');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using GraphQLError instead of ApolloError in Apollo Server 4\nDESCRIPTION: Apollo Server 4 removes ApolloError in favor of GraphQLError from the graphql package. This snippet demonstrates how to throw a GraphQLError with custom error codes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\n// ...\nthrow new GraphQLError(message, {\n  extensions: { code: 'YOUR_ERROR_CODE' },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced User Update Mutation Response\nDESCRIPTION: Example of the enhanced JSON response format using the MutationResponse interface.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateUserEmail\": {\n      \"code\": \"200\",\n      \"success\": true,\n      \"message\": \"User email was successfully updated\",\n      \"user\": {\n        \"id\": \"1\",\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderLandingPage with Dynamic Content in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the renderLandingPage event with a function that dynamically generates HTML for each landing page request, providing more flexibility for custom landing pages.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n   plugins: [\n    {\n      async serverWillStart() {\n        return {\n          async renderLandingPage() {\n            return {\n              async html() {\n                return `<html><body>Welcome to your server!</body></html>`;\n              },\n            };\n          },\n        };\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Examples of Valid @deprecated Directive Locations\nDESCRIPTION: Demonstrates all valid locations where the @deprecated directive can be used in a GraphQL schema, including on arguments, fields, enum values, and input fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/directives.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# ARGUMENT_DEFINITION\n# Note: @deprecated arguments _must_ be optional.\ndirective @withDeprecatedArgs(\n  deprecatedArg: String @deprecated(reason: \"Use `newArg`\")\n  newArg: String\n) on FIELD\n\ntype MyType {\n  # ARGUMENT_DEFINITION (alternate example on a field's args)\n  fieldWithDeprecatedArgs(name: String @deprecated): String\n  # FIELD_DEFINITION\n  deprecatedField: String @deprecated\n}\n\nenum MyEnum {\n  # ENUM_VALUE\n  OLD_VALUE @deprecated(reason: \"Use `NEW_VALUE`.\")\n  NEW_VALUE\n}\n\ninput SomeInputType {\n  nonDeprecated: String\n  # INPUT_FIELD_DEFINITION\n  deprecated: String @deprecated\n}\n```\n\n----------------------------------------\n\nTITLE: Setting APQ Cache TTL in Apollo Server\nDESCRIPTION: Configuration for setting the time-to-live (TTL) for persisted queries in Apollo Server. This example shows how to set a custom TTL value of 15 minutes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  persistedQueries: {\n    ttl: 900, // 15 minutes\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types with Field Details in GraphQL\nDESCRIPTION: This snippet shows a Book type with two fields and comments explaining the return types. The example illustrates how to document fields in a GraphQL schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# This Book type has two fields: title and author\ntype Book {\n  title: String # returns a String\n  author: Author # returns an Author\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating requestAgent option to fetcher in usage reporting plugin\nDESCRIPTION: Shows how to replace the deprecated requestAgent option with a custom fetcher implementation using node-fetch in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nApolloServerPluginUsageReporting({ requestAgent })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetch from 'node-fetch';\nApolloServerPluginUsageReporting({\n  fetcher: (url, options) => fetch(url, {\n    ...options,\n    agent: requestAgent,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Apollo Gateway\nDESCRIPTION: Example showing how to customize request handling with authentication, including context setup and header forwarding to subgraphs using RemoteGraphQLDataSource.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloGateway, RemoteGraphQLDataSource } from '@apollo/gateway';\nimport { readFileSync } from 'fs';\n\nclass AuthenticatedDataSource extends RemoteGraphQLDataSource {\n  willSendRequest({ request, context }) {\n    // Pass the user's id from the context to each subgraph\n    // as a header called `user-id`\n    request.http.headers.set('user-id', context.userId);\n  }\n}\n\nconst supergraphSdl = readFileSync('./supergraph.graphql').toString();\nconst gateway = new ApolloGateway({\n  supergraphSdl,\n  buildService({ name, url }) {\n    return new AuthenticatedDataSource({ url });\n  },\n});\n\nconst server = new ApolloServer({\n  gateway,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  context: async ({ req }) => {\n    // Get the user token from the headers\n    const token = req.headers.authorization || '';\n    // Try to retrieve a user with the token\n    const userId = getUserId(token);\n    // Add the user ID to the contextValue\n    return { userId };\n  },\n});\n\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema in a Separate File\nDESCRIPTION: This snippet shows how to define a GraphQL schema in a separate .graphql file, including Query, Mutation, and custom types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  books: [Book]\n}\n\ntype Book {\n  title: String\n  author: String\n}\n\ntype AddBookMutationResponse {\n  code: String!\n  success: Boolean!\n  message: String!\n  book: Book\n}\n\ntype Mutation {\n  addBook(title: String, author: String): AddBookMutationResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Operation in Apollo Server (JavaScript)\nDESCRIPTION: Demonstrates how to use the executeOperation method to run a GraphQL query through Apollo Server's request pipeline without sending an HTTP request. This method is primarily used for testing.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await server.executeOperation({\n  query: 'query SayHelloWorld($name: String) { hello(name: $name) }',\n  variables: { name: 'world' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Reporting in Apollo Server 4\nDESCRIPTION: Examples of how to configure error reporting plugins in Apollo Server 4 for both monoliths and subgraphs. This restores the Apollo Server 3 behavior of including full error details in traces.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// monoliths\nnew ApolloServer({\n  plugins: [ApolloServerPluginUsageReporting({\n    sendErrors: { unmodified: true },\n  })],\n  // ...\n})\n\n// subgraphs\nnew ApolloServer({\n  plugins: [ApolloServerPluginInlineTrace({\n    includeErrors: { unmodified: true },\n  })],\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Deduplication in RESTDataSource\nDESCRIPTION: TypeScript implementation showing how to configure request deduplication policy in a RESTDataSource subclass.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options); // this sends our server's `cache` through\n    this.token = options.token;\n  }\n\n  protected override requestDeduplicationPolicyFor(\n    url: URL,\n    request: RequestOptions,\n  ) {\n    const cacheKey = this.cacheKeyFor(url, request);\n    return {\n      policy: 'deduplicate-until-invalidated',\n      deduplicationKey: `${request.method ?? 'GET'} ${cacheKey}`\n    };\n  }\n\n  // Duplicate requests are cached indefinitely\n  async getMovie(id) {\n    return this.get(`movies/${encodeURIComponent(id)}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating rewriteError to transform in usage reporting plugins\nDESCRIPTION: Shows how to update the rewriteError option to the new transform option within sendErrors/includeErrors for both monoliths and subgraphs in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// monoliths\nnew ApolloServer({\n  plugins: [ApolloServerPluginUsageReporting({ rewriteError })],\n  // ...\n})\n\n// subgraphs\nnew ApolloServer({\n  plugins: [ApolloServerPluginInlineTrace({ rewriteError })],\n  // ...\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// monoliths\nnew ApolloServer({\n  plugins: [ApolloServerPluginUsageReporting({\n    sendErrors: { transform: rewriteError },\n  })],\n  // ...\n})\n\n// subgraphs\nnew ApolloServer({\n  plugins: [ApolloServerPluginInlineTrace({\n    includeErrors: { transform: rewriteError },\n  })],\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing requestDidStart Event Handler in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the requestDidStart event handler which fires when Apollo Server begins fulfilling a GraphQL request, and how to respond to nested request lifecycle events.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async requestDidStart(requestContext) {\n        // Within this returned object, define functions that respond\n        // to request-specific lifecycle events.\n        return {\n          // The `parsingDidStart` request lifecycle event fires\n          // when parsing begins. The event is scoped within an\n          // associated `requestDidStart` server lifecycle event.\n          async parsingDidStart(requestContext) {\n            console.log('Parsing started!')\n          },\n        }\n      }\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with User Access Points\nDESCRIPTION: Defines a GraphQL schema showing multiple access points for user data, demonstrating where authorization checks might be needed.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(id: ID!): User\n  article(id: ID!): Article\n}\n\ntype Article {\n  author: User\n}\n\ntype User {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting GraphQL Schema Types\nDESCRIPTION: Example of adding documentation strings (descriptions) to GraphQL schema types and fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n\"Description for the type\"\ntype MyObjectType {\n  \"\"\"\n  Description for field\n  Supports **multi-line** description for your [API](http://example.com)!\n  \"\"\"\n  myField: String!\n\n  otherField(\n    \"Description for argument\"\n    arg: Int\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Prevention in Apollo Server Constructor\nDESCRIPTION: Configuration option to disable the default CSRF prevention feature in Apollo Server 4 constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncsrfPrevention: false\n```\n\n----------------------------------------\n\nTITLE: Using third-party JSON scalar with Apollo Server\nDESCRIPTION: Demonstrates how to import and use a third-party scalar type (GraphQLJSON) with Apollo Server. This example shows the complete server setup with the imported scalar properly registered in the resolvers map.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/custom-scalars.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport GraphQLJSON from 'graphql-type-json';\n\nconst typeDefs = `#graphql\n  scalar JSON\n\n  type MyObject {\n    myField: JSON\n  }\n\n  type Query {\n    objects: [MyObject]\n  }\n`;\n\nconst resolvers = {\n  JSON: GraphQLJSON,\n  // ...other resolvers...\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Creating an Apollo Server Plugin with Options in TypeScript\nDESCRIPTION: This snippet shows how to create a plugin that accepts options. It exports a function that takes an options object and returns a plugin object.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (options: { logMessage: string }) => {\n  return {\n    async serverWillStart() {\n      console.log(options.logMessage);\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query Example\nDESCRIPTION: Example of a client subscription query to receive updates about new posts.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription PostFeed {\n  postCreated {\n    author\n    comment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Schema in Apollo Server\nDESCRIPTION: This TypeScript snippet demonstrates how to import a GraphQL schema from a file and use it when creating an Apollo Server instance.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ...other imports\nimport { readFileSync } from 'fs';\n\n// Note: this uses a path relative to the project's\n// root directory, which is the current working directory\n// if the server is executed using `npm run`.\nconst typeDefs = readFileSync('./schema.graphql', { encoding: 'utf-8' });\n\ninterface MyContext {\n  dataSources: {\n    books: Book[];\n  };\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\n// ... start our server\n```\n\n----------------------------------------\n\nTITLE: Event-based Cache Eviction Implementation\nDESCRIPTION: Implementation of an event-based cache eviction system using Redis client with efficient scanning of cache entries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/response-cache-eviction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createClient, RedisClientType} from 'redis';\n\nconst deleteByPrefix = async (prefix: string) => {\n  const client = createClient({url: 'redis://localhost:6379'});\n  await client.connect();\n\n  const scanIterator = client.scanIterator({\n    MATCH: `keyv:fqc:${prefix}*`,\n    COUNT: 2000\n  });\n\n  let keys = [];\n\n  for await (const key of scanIterator) {\n    keys.push(key);\n  }\n\n  if (keys.length > 0) {\n    await client.del(keys); // This is blocking, consider handling async in production if the number of keys is large\n  }\n\n  return keys;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Apollo Server After Initialization\nDESCRIPTION: Demonstrates how to add plugins to an Apollo Server instance after it's created but before it's started. This is useful when a plugin needs access to the ApolloServer instance itself.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  plugins: [makeFirstPlugin()],\n});\n\nserver.addPlugin(makeSecondPlugin(server));\n```\n\n----------------------------------------\n\nTITLE: Simulating Gateway Requests to Subgraphs with GraphQL _entities Query\nDESCRIPTION: GraphQL query example that shows how to directly test subgraph latency by simulating requests from the Gateway using the _entities field. This helps identify performance bottlenecks at the subgraph level.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/gateway-performance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery__subgraphA__0($representations: [_Any!]!) {\n  _entities(representations: $representations) {\n    ... on EntityA {\n      fieldA\n      fieldB\n    }\n    ... on EntityB {\n      fieldC\n      fieldD\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Handling with didReceiveResponse\nDESCRIPTION: Shows how to handle cookies in responses by extending RemoteGraphQLDataSource and overriding didReceiveResponse.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass CookieDataSource extends RemoteGraphQLDataSource {\n  didReceiveResponse({ response, request, context }) {\n    const cookie = request.http.headers.get('Cookie');\n    if (cookie) {\n      context.responseCookies.push(cookie);\n    }\n\n    // Return the response, even when unchanged.\n    return response;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logging Plugin for Apollo Server\nDESCRIPTION: TypeScript example showing how to create a custom plugin for logging different phases of GraphQL request lifecycle.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/monitoring/metrics.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = {\n  // Fires whenever a GraphQL request is received from a client.\n  async requestDidStart(requestContext) {\n    console.log('Request started! Query:\\n' + requestContext.request.query);\n\n    return {\n      // Fires whenever Apollo Server will parse a GraphQL\n      // request to create its associated document AST.\n      async parsingDidStart(requestContext) {\n        console.log('Parsing started!');\n      },\n\n      // Fires whenever Apollo Server will validate a\n      // request's document AST against your GraphQL schema.\n      async validationDidStart(requestContext) {\n        console.log('Validation started!');\n      },\n    };\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [myPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Example Error Response in Apollo Server\nDESCRIPTION: JSON structure showing a typical error response from Apollo Server when encountering a validation error for a misspelled __typename field.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Cannot query field \\\"__typenam\\\" on type \\\"Query\\\".\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 2\n        }\n      ],\n      \"extensions\": {\n        \"code\": \"GRAPHQL_VALIDATION_FAILED\",\n        \"stacktrace\": [\n          \"GraphQLError: Cannot query field \\\"__typenam\\\" on type \\\"Query\\\".\",\n          \"    at Object.Field (/my_project/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js:48:31)\",\n          \"    ...additional lines...\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gateway with Custom Executor in Apollo Server 4 (TypeScript)\nDESCRIPTION: This snippet shows how to use a custom executor with the gateway option in Apollo Server 4, replacing the executor option from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  gateway: {\n    async load() {\n      return { executor };\n    },\n    onSchemaLoadOrUpdate() {\n      return () => {};\n    },\n    async stop() {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Preserving Existing Resolvers While Using Mocks\nDESCRIPTION: Sets up Apollo Server with mocking while preserving the existing resolvers by setting the preserveResolvers option to true. This allows certain fields to use their defined resolvers while others use mocked data.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n    resolved: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    resolved: () => 'Resolved',\n  },\n};\n\nconst mocks = {\n  Int: () => 6,\n  Float: () => 22.1,\n  String: () => 'Hello',\n};\n\nconst server = new ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n    mocks,\n    preserveResolvers: true, // highlight-line\n  }),\n});\n\nconst { url } = await startStandaloneServer(server, { listen: { port: 4000 } });\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Data Source in Apollo Server 3\nDESCRIPTION: Example showing how to implement a REST data source using apollo-datasource-rest in Apollo Server 3, including server setup and context configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESTDataSource, RequestOptions } from 'apollo-datasource-rest';\nimport { ApolloServer } from 'apollo-server';\n\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n\n  override willSendRequest(request: RequestOptions) {\n    request.headers.set('Authorization', this.context.token);\n  }\n\n  async getMovie(id: string): Promise<Movie> {\n    return this.get<Movie>(`movies/${encodeURIComponent(id)}`);\n  }\n\n  async updateMovie(movie: Movie): Promise<Movie>  {\n    return this.patch(\n      'movies',\n      { id: movie.id, movie },\n    );\n  }\n}\n\ninterface ContextValue {\n  token: string;\n  dataSources: {\n    moviesAPI: MoviesAPI;\n  }\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: ({ req: ExpressRequest }): Omit<ContextValue, 'dataSources'> => {\n    return {\n      token: getTokenFromRequest(req),\n    };\n  },\n  dataSources: (): ContextValue['dataSources'] => {\n    return {\n      moviesAPI: new MoviesAPI(),\n    };\n  },\n});\n\nawait server.listen();\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules\nDESCRIPTION: Required imports for setting up subscription server with Apollo Server and WebSocket.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { WebSocketServer } from 'ws';\nimport { useServer } from 'graphql-ws/lib/use/ws';\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Resolver Chain Example\nDESCRIPTION: Defines a schema with Library, Book, and Author types for demonstrating resolver chains and hierarchical data relationships.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n# A library has a branch and books\ntype Library {\n  branch: String!\n  books: [Book!]\n}\n\n# A book has a title and author\ntype Book {\n  title: String!\n  author: Author!\n}\n\n# An author has a name\ntype Author {\n  name: String!\n}\n\ntype Query {\n  libraries: [Library]\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Resolver with Event Publishing\nDESCRIPTION: Enhanced mutation resolver that publishes an event before creating a post\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createPost(parent, args, { postController }) {\n      pubsub.publish('POST_CREATED', { postCreated: args });\n      return postController.createPost(args);\n    },\n  },\n  // ...other resolvers...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Cache Control Types in Apollo Server 4\nDESCRIPTION: Shows how to use the new @apollo/cache-control-types package in Apollo Server 4 for handling cache control in resolvers. This replaces the previous method of accessing cacheControl directly from the info object.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cacheControlFromInfo } from '@apollo/cache-control-types';\n\n// ...\n  someField(parent, args, context, info) {\n    cacheControlFromInfo(info).setCacheHint({ maxAge: 100 });\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchResult Union Schema\nDESCRIPTION: Demonstrates a complete union type implementation with Book and Author types, including the query field definition.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nunion SearchResult = Book | Author\n\ntype Book {\n  title: String!\n}\n\ntype Author {\n  name: String!\n}\n\ntype Query {\n  search(contains: String): [SearchResult!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication in Apollo Gateway buildService\nDESCRIPTION: Example showing how to add custom authentication headers to subgraph requests by extending RemoteGraphQLDataSource and implementing in buildService.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthenticatedDataSource extends RemoteGraphQLDataSource {\n  willSendRequest({ request, context }) {\n    request.http.headers.set('x-user-id', context.userId);\n  }\n}\n\nconst gateway = new ApolloGateway({\n  // ...other options...\n  buildService({ name, url }) {\n    return new AuthenticatedDataSource({ url });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Gateway Schema Updates\nDESCRIPTION: Configuration for dynamically updating the supergraph schema at runtime using a callback function.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { ApolloGateway } from '@apollo/gateway';\nimport { readFile } from 'fs/promises';\n\nlet supergraphUpdate;\nconst gateway = new ApolloGateway({\n  async supergraphSdl({ update }) {\n    supergraphUpdate = update;\n    return {\n      supergraphSdl: await readFile('./supergraph.graphql', 'utf-8'),\n    };\n  },\n});\n\nconst server = new ApolloServer({\n  gateway,\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing drainServer Event Handler in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the drainServer event handler which fires when Apollo Server is starting to shut down. This allows graceful shutdown by stopping new connections and closing existing ones.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async serverWillStart() {\n        return {\n          async drainServer() {\n            await myCustomServer.drain();\n          }\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Resolvers in TypeScript\nDESCRIPTION: Example of setting internal values for enum types in resolver definitions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  AllowedColor: {\n    RED: '#f00',\n    GREEN: '#0f0',\n    BLUE: '#00f',\n  },\n  Query: {\n    favoriteColor: () => '#f00',\n    avatar: (parent, args) => {\n      // args.borderColor is '#f00', '#0f0', or '#00f'\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error-Tolerant Caching with ErrorsAreMissesCache\nDESCRIPTION: Shows how to make Apollo Server's caching more fault-tolerant by using the ErrorsAreMissesCache wrapper. This treats cache errors as misses, allowing the application to function even when the cache is unavailable.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from \"keyv\";\nimport KeyvRedis from \"@keyv/redis\";\nimport { KeyvAdapter } from \"@apollo/utils.keyvadapter\";\nimport { ErrorsAreMissesCache } from \"@apollo/utils.keyvaluecache\";\n\nconst redisCache = new Keyv(new KeyvRedis(\"redis://user:pass@localhost:6379\"));\nconst faultTolerantCache = new ErrorsAreMissesCache(\n  new KeyvAdapter(redisCache),\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Apollo Server 4 with executeOperation\nDESCRIPTION: Demonstrates how to test an Apollo Server 4 instance using the executeOperation method, which now accepts a context value directly, bypassing the context function. The structure of the returned GraphQLResponse has also changed.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyContext {\n  name: string;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs: \"type Query { hello: String!}\",\n  resolvers: {\n    Query: {\n      hello: (_, __, context) => `Hello ${context.name}!`,\n    },\n  },\n});\n\nconst { body } = await server.executeOperation({\n  query: 'query helloContext { hello }',\n}, {\n  contextValue: {\n    name: 'world',\n  }\n});\n\n// Note the use of Node's assert rather than Jest's expect; if using\n// TypeScript, `assert` will appropriately narrow the type of `body`\n// and `expect` will not.\nassert(body.kind === 'single');\nexpect(body.singleResult.data?.hello).toBe('Hello world!'); // -> true\n```\n\n----------------------------------------\n\nTITLE: Apollo Upload Client CSRF Prevention Configuration\nDESCRIPTION: Configuration for apollo-upload-client to work with CSRF prevention by setting required headers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{headers: {'Apollo-Require-Preflight': 'true'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing contextCreationDidFail Handler in TypeScript\nDESCRIPTION: Example of implementing a plugin hook to handle context creation failures in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async contextCreationDidFail({ error }) {\n        console.log(`Context creation failed: ${error}`);\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing schemaDidLoadOrUpdate Event Handler in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the schemaDidLoadOrUpdate event handler which fires whenever Apollo Server initially loads or updates the schema. This is a synchronous plugin API.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async serverWillStart() {\n        return {\n          schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {\n            console.log(`The API schema is ${printSchema(apiSchema)}`);\n            if (coreSupergraphSdl) {\n              console.log(`The core schema is ${coreSupergraphSdl}`);\n            }\n          },\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Subgraph Fetcher with RemoteGraphQLDataSource\nDESCRIPTION: Customizes the subgraph communication by providing a buildService function that returns a custom RemoteGraphQLDataSource with a configured fetcher. This example demonstrates how to implement custom retry logic for subgraph requests.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  buildService({ url, name }) {\n    return new (class extends RemoteGraphQLDataSource {\n      fetcher = require('make-fetch-happen').defaults({\n        onRetry() {\n          console.log('We will retry!');\n        },\n      });\n    })({\n      url,\n      name,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing External Authorization in User Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use external authorization in the user model. It passes the request token to an external API, allowing the API to handle authentication and authorization.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generateUserModel = ({ req }) => ({\n  getAll: () => {\n    return fetch('http://myurl.com/users', { token: req.headers.token });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Apollo Client WebSocket Link with Authentication\nDESCRIPTION: Demonstrates client-side WebSocket link configuration with authentication parameters using GraphQLWsLink.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\n\nconst wsLink = new GraphQLWsLink(\n  createClient({\n    url: 'ws://localhost:4000/subscriptions',\n    connectionParams: {\n      authentication: user.authToken,\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in GraphQL\nDESCRIPTION: Example of enum type definition and usage in queries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nenum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for JavaScript\nDESCRIPTION: Package.json configuration for a JavaScript Apollo Server project, setting the module type and defining the start script.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...etc.\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  }\n  // other dependencies\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Resolvers with Mocks in Apollo Server 4 (TypeScript)\nDESCRIPTION: This snippet illustrates how to preserve existing resolvers while using mocks in Apollo Server 4, replacing the mockEntireSchema option from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst mocks = {\n  Int: () => 6,\n};\nnew ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n    mocks,\n    preserveResolvers: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Authorization in User Model (TypeScript)\nDESCRIPTION: This snippet shows how to implement role-based authorization within the user model's getAll method. It checks if the user has an admin role before allowing access to all users' data.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetAll: () => {\n  if (!user || !user.roles.includes('admin')) return null;\n  return fetch('http://myurl.com/users');\n};\n```\n\n----------------------------------------\n\nTITLE: Using Schema Parsing Options with Apollo Server 4\nDESCRIPTION: Shows how to apply parsing options to both operation parsing and schema parsing in Apollo Server 4 using makeExecutableSchema from @graphql-tools/schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\n\nconst parseOptions = { noLocation: true };\nnew ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs,\n    resolvers,\n    // Note that if you're using `@graphql-tools/schema` v9 or newer, the parse\n    // options such as noLocation are passed *directly* to makeExecutableSchema,\n    // which we accomplish here with the `...` syntax.\n    // In older versions, pass it as a single option named `parseOptions`\n    // (ie, remove the `...`).\n    ...parseOptions,\n  }),\n  // This one affects operation parsing. Note that if you set any SDL-specific\n  // options in parseOptions, you'll need to pass a `parseOptions` here that\n  // does not contain those options.\n  parseOptions,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocks in Apollo Server 4 (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure mocks in Apollo Server 4 using the @graphql-tools/mock package, replacing the mocks and mockEntireSchema options from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nnew ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing serverWillStop Event Handler in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the serverWillStop event handler which fires when Apollo Server is shutting down. This is ideal for cleaning up background tasks and flushing observability data.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async serverWillStart() {\n        const interval = setInterval(doSomethingPeriodically, 1000);\n        return {\n          async serverWillStop() {\n            clearInterval(interval);\n          }\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Apollo Server in Serverless Environment\nDESCRIPTION: Shows the method call for handling startup errors in serverless environments where async startup work is not allowed. This alternative to await server.start() logs errors and fails requests appropriately.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nserver.startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests()\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 4 Plugin Addition Pattern\nDESCRIPTION: This code demonstrates the new approach for adding plugins in Apollo Server 4, using the addPlugin method when you need to reference the server instance in plugin creation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  plugins: [\n    makeFirstPlugin(),\n  ],\n});\nserver.addPlugin(makeSecondPlugin(server));\n```\n\n----------------------------------------\n\nTITLE: Constructor Option Changes in Apollo Server 4\nDESCRIPTION: Major changes to constructor options including removal of dataSources, modules, mocks, debug, formatResponse, and executor options. Highlights the new approach for handling DataSources and context functions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Old approach with dataSources constructor option\nnew ApolloServer({\n  dataSources: () => ({\n    myAPI: new MyDataSource()\n  })\n});\n\n// New approach using context function\nconst server = new ApolloServer(...);\nawait startStandaloneServer(server, {\n  context: async () => ({\n    dataSources: {\n      myAPI: new MyDataSource()\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Context Function Implementation with Lambda Event Access\nDESCRIPTION: Shows how to implement a context function to access Lambda event and context information in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nexport const graphqlHandler = startServerAndCreateLambdaHandler(\n  server,\n  handlers.createAPIGatewayProxyEventV2RequestHandler(),\n  {\n    context: async ({ event, context }) => {\n      return {\n        lambdaEvent: event,\n        lambdaContext: context,\n      };\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Context in Apollo Server 3\nDESCRIPTION: Shows how to provide an initial context to resolvers in Apollo Server 3 by adding a context initialization function to the ApolloServer constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  csrfPrevention: true,\n  context: ({ req }) => ({\n    authScope: getScope(req.headers.authorization)\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from ForbiddenError to GraphQLError\nDESCRIPTION: Example of how to replace the built-in ForbiddenError class from Apollo Server 3 with a GraphQLError using the appropriate error code in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError } from 'apollo-server';\nthrow new ForbiddenError(\"my message\", { myExtension: \"foo\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\nthrow new GraphQLError(\"my message\", {\n  extensions: {\n    code: 'FORBIDDEN',\n    myExtension: \"foo\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Type Definition\nDESCRIPTION: Defines a GraphQL mutation type for creating posts\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createPost(author: String, comment: String): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 3 Style Error Formatting in Apollo Server 4\nDESCRIPTION: A formatError implementation for Apollo Server 4 that replicates the Apollo Server 3 behavior of placing error properties and stacktrace in an exception extension object.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nfunction formatError(\n  formattedError: GraphQLFormattedError,\n  error: unknown,\n) {\n  const originalError = unwrapResolverError(error);\n  const exception: Record<string, unknown> = {\n    ...(typeof originalError === 'object' ? originalError : null),\n  };\n  delete exception.extensions;\n  if (formattedError.extensions?.stacktrace) {\n    exception.stacktrace = formattedError.extensions.stacktrace;\n  }\n  const extensions: Record<string, unknown> = {\n    ...formattedError.extensions,\n    exception,\n  };\n  delete extensions.stacktrace;\n  return {\n    ...formattedError,\n    extensions,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Union Types\nDESCRIPTION: Shows how to query a union type using inline fragments to handle multiple possible return types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/unions-interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetSearchResults {\n  search(contains: \"Shakespeare\") {\n    __typename\n    ... on Book {\n      title\n    }\n    ... on Author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing validationDidStart Event Handler in TypeScript\nDESCRIPTION: Event handler that fires when Apollo Server validates a request's document AST against the GraphQL schema. Only fires for uncached documents.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvalidationDidStart?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>,\n    'source' | 'queryHash' | 'document'\n  >,\n): Promise<void | (err?: ReadonlyArray<Error>) => Promise<void>>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Context in Apollo Server 4 with expressMiddleware\nDESCRIPTION: Shows how to provide a context initialization function to the expressMiddleware function in Apollo Server 4. The context function syntax is similar to startStandaloneServer, but uses Express-specific request and response types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyContext {\n  token: String;\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n\nawait server.start();\nconst app = express();\n\napp.use(\n  // A named context function is required if you are not\n  // using ApolloServer<BaseContext>\n  expressMiddleware(server, {\n    context: async ({ req, res }) => ({\n      token: await getTokenForRequest(req),\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Mocking Lists in GraphQL Schema\nDESCRIPTION: Demonstrates techniques for creating mock data for list types. Shows how to generate arrays of variable length for friends field and nested arrays for listOfLists field.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport casual from 'casual';\n\nconst mocks = {\n  Person: () => ({\n    // a list of length between 2 and 6, using the \"casual\" npm module\n    // to generate a random integer\n    friends: [...new Array(casual.integer(2, 6))],\n    // a list of three lists of two items: [[1, 1], [2, 2], [3, 3]]\n    listOfLists: () => [...new Array(3)].map((i) => [...new Array(2)]),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Keyv-based Caching\nDESCRIPTION: Shows the command to install the required packages for using Keyv-based caching with Apollo Server. Keyv provides a common interface for various cache backends.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install keyv @apollo/utils.keyvadapter\n```\n\n----------------------------------------\n\nTITLE: Throwing GraphQLError with Sensitive Information in TypeScript\nDESCRIPTION: This snippet demonstrates how to throw a GraphQLError with a message containing sensitive information (an API key) that needs to be redacted before sending to Apollo Studio.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nthrow new GraphQLError(\n  \"The x-api-key:12345 doesn't have sufficient privileges.\"\n);\n```\n\n----------------------------------------\n\nTITLE: Error Handling Updates in Apollo Server 4\nDESCRIPTION: Changes to error handling including removal of custom ApolloError class and introduction of ApolloServerErrorCode enum. Shows migration from custom error classes to GraphQLError usage.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Old approach\nthrow new ApolloError('message', 'ERROR_CODE');\n\n// New approach\nimport { GraphQLError } from 'graphql';\nthrow new GraphQLError('message', {\n  extensions: { code: 'ERROR_CODE' }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic Apollo Server\nDESCRIPTION: Initial code for setting up a basic Apollo Server with a simple schema and resolver.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\n// Set up Apollo Server\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Reporting for Apollo Studio (TypeScript)\nDESCRIPTION: This example demonstrates how to use the transform function in the sendErrors option to selectively report or modify errors before sending them to Apollo Studio.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  // etc.\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendErrors: {\n        transform: (err) => {\n          if (err.extensions.code === 'MY_CUSTOM_CODE') {\n            return null;\n          }\n          return err;\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server 4 for Variable Coercion Errors\nDESCRIPTION: Example of adding the status400ForVariableCoercionErrors option to the ApolloServer constructor to mitigate a regression in handling invalid variables.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  // ...\n  status400ForVariableCoercionErrors: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing End Hooks in an Apollo Server Plugin\nDESCRIPTION: This example demonstrates how to use end hooks for various lifecycle events. It logs any errors that occur during parsing, validation, and execution phases.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin = {\n  async requestDidStart() {\n    return {\n      async parsingDidStart() {\n        return async (err) => {\n          if (err) {\n            console.error(err);\n          }\n        }\n      },\n      async validationDidStart() {\n        // This end hook is unique in that it can receive an array of errors,\n        // which will contain every validation error that occurred.\n        return async (errs) => {\n          if (errs) {\n            errs.forEach(err => console.error(err));\n          }\n        }\n      },\n      async executionDidStart() {\n        return {\n          async executionDidEnd(err) {\n            if (err) {\n              console.error(err);\n            }\n          }\n        };\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Update Mutation Query\nDESCRIPTION: Shows how a client would structure a mutation request to update a user's email address.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateMyUser {\n  updateUserEmail(id: 1, email: \"jane@example.com\") {\n    id\n    name\n    email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderLandingPage Event Handler in Apollo Server Plugin\nDESCRIPTION: Example demonstrating how to define a custom landing page for Apollo Server using the renderLandingPage event. This allows serving custom HTML content from the server's base URL.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    {\n      async serverWillStart() {\n        return {\n          async renderLandingPage() {\n            const html = `\n              <!DOCTYPE html>\n              <html>\n                  <head>\n                  </head>\n                  <body>\n                      <h1>Hello world!</h1>\n                  </body>\n              </html>`;\n            return { html };\n          },\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Level Cache Control in GraphQL Schema\nDESCRIPTION: Example of applying cache control at the type level, where all fields returning a Post object are cached for 240 seconds unless overridden by field-level settings.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post @cacheControl(maxAge: 240) {\n  id: Int!\n  title: String\n  author: Author\n  votes: Int\n  comments: [Comment]\n  readByCurrentUser: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authentication Errors in Apollo Studio Reporting (TypeScript)\nDESCRIPTION: This snippet shows how to configure the ApolloServerPluginUsageReporting plugin to avoid reporting UNAUTHENTICATED errors to Apollo Studio while still reporting all other errors.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendErrors: {\n        transform: (err) => {\n          if (err.extensions.code === 'UNAUTHENTICATED') {\n            return null;\n          }\n          return err;\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server with AWS Lambda Integration\nDESCRIPTION: Command to install the required packages for using Apollo Server with AWS Lambda integration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/server graphql @as-integrations/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Authorization Error Example in Apollo Server\nDESCRIPTION: Example of throwing a custom FORBIDDEN error for unauthorized actions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql';\n\nthrow new GraphQLError('You are not authorized to perform this action.', {\n  extensions: {\n    code: 'FORBIDDEN',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin API Updates in Apollo Server 4\nDESCRIPTION: Changes to plugin API including modifications to GraphQLRequestContext, GraphQLServerContext, and request/response handling. Shows structural changes in plugin implementation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Old plugin structure\ncontext.request.http.headers; // Headers object\n\n// New plugin structure\ncontextValue.request.http.headers; // Map object\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Plugins in Apollo Server\nDESCRIPTION: This snippet demonstrates how to add custom plugins to Apollo Server. It shows different ways of including plugins: importing from a package, requiring a local module, and defining inline.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport ApolloServerOperationRegistry from '@apollo/server-plugin-operation-registry';\n\n/* This example doesn't provide `typeDefs` or `resolvers`,\n   both of which are required to start the server. */\nimport { typeDefs, resolvers } from './separatelyDefined';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  // You can import plugins or define them in-line, as shown:\n  plugins: [\n    /* This plugin is from a package that's imported above. */\n    ApolloServerOperationRegistry({\n      /* options */\n    }),\n\n    /* This plugin is imported in-place. */\n    require('./localPluginModule'),\n\n    /* This plugin is defined in-line. */\n    {\n      async serverWillStart() {\n        console.log('Server starting up!');\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Request Pipeline Plugin API with ServerWillStop Hook\nDESCRIPTION: Example of the request pipeline plugin API that now supports a serverWillStop lifecycle hook. This allows plugins to hook into shutdown logic.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = {\n  serverWillStop: async () => {\n    // Shutdown logic here\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Query Strings in Apollo Server Integrations\nDESCRIPTION: Shows how to extract the query string from an incoming request URL to support GET requests in Apollo Server integrations using Node's URL parsing utilities.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse } from 'url';\n\nconst search = parse(req.url).search ?? '';\n```\n\n----------------------------------------\n\nTITLE: KeyValueCache Interface Definition\nDESCRIPTION: Displays the KeyValueCache interface that custom cache implementations must satisfy to work with Apollo Server. This interface defines the required methods for getting, setting, and deleting cache entries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KeyValueCache<V> {\n  get(key: string): Promise<V | undefined>;\n  // ttl is specified in seconds\n  set(key: string, value: V, options?: { ttl?: number | null }): Promise<void>;\n  delete(key: string): Promise<boolean | void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing startupDidFail Event Handler in Apollo Server Plugin\nDESCRIPTION: Example showing how to implement the startupDidFail hook which triggers if the server fails to start, allowing for custom error handling and logging for startup failures.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async startupDidFail({ error }) {\n        console.log(`Startup failed: ${error}`);\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Field-Level Override of Type-Level Cache Control in GraphQL Schema\nDESCRIPTION: Example showing how field-level cache control settings override type-level settings, with post field cached for 120 seconds instead of the type's 240 seconds.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  post: Post! @cacheControl(maxAge: 120)\n  body: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring maxSockets Setting for ApolloGateway in JavaScript\nDESCRIPTION: Code snippet that demonstrates how to customize the maxSockets setting when initializing ApolloGateway. This controls the maximum number of connections to each subgraph host and port, with the example setting it to 50 connections.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/gateway-performance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ApolloGateway, RemoteGraphQLDataSource} from '@apollo/gateway';\nimport fetcher from 'make-fetch-happen';\n\nconst gateway = new ApolloGateway({\n  buildService({name, url}) {\n    return new RemoteGraphQLDataSource({\n      name,\n      url,\n      fetcher: fetcher.defaults({maxSockets: 50})\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Apollo GraphQL Server\nDESCRIPTION: Command to run the Apollo GraphQL server implementation from a JavaScript file with ES modules.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode server.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Object Mocks with Casual Library\nDESCRIPTION: Shows how to mock complex object types with nested fields using the casual library for generating fake data. This example creates a Person type with dynamically generated name and age fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// importing the casual library\nconst casual = require('casual');\n\nconst mocks = {\n  Person: () => ({\n    name: casual.name,\n    age: () => casual.integer(0, 120),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server Plugin Configuration in TypeScript\nDESCRIPTION: Example showing how to install and configure an Apollo Server plugin, specifically the usage reporting plugin with custom configuration options.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/builtin-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from \"@apollo/server\";\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    // Sets a non-default option on the usage reporting plugin\n    ApolloServerPluginUsageReporting({\n      sendVariableValues: { all: true },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Transformer Functions in Apollo Server\nDESCRIPTION: Example of generating a subgraph schema and applying transformer functions for custom directives before passing it to the ApolloServer constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/directives.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet subgraphSchema = buildSubgraphSchema({ typeDefs, resolvers });\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Transformer function for an @upper directive\nsubgraphSchema = upperDirectiveTransformer(subgraphSchema, 'upper');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  schema: subgraphSchema,\n  // ...other options...\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Level Cache Control Inheritance in GraphQL Schema\nDESCRIPTION: Example showing how fields of type Post inherit the type's cache control settings of 240 seconds maximum age.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  post: Post! # Cached for up to 240 seconds\n  body: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing parsingDidStart Event Handler in TypeScript\nDESCRIPTION: Event handler that fires when Apollo Server parses a GraphQL request into an AST document. Does not fire if document is already cached.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nparsingDidStart?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>, 'source' | 'queryHash'\n  >,\n): Promise<void | (err?: Error) => Promise<void>>;\n```\n\n----------------------------------------\n\nTITLE: Defining an Apollo Server Plugin with Context Type in TypeScript\nDESCRIPTION: This example demonstrates how to create a plugin that can access the contextValue of a request. It uses TypeScript generics to specify the context type.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyContext {\n  token: string\n}\n\nexport default function (): ApolloServerPlugin<MyContext> {\n  return {\n    async requestDidStart({ contextValue }) {\n      // token is properly inferred as a string\n      console.log(contextValue.token);\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing didResolveSource Event Handler in TypeScript\nDESCRIPTION: Event handler that fires after Apollo Server determines the string representation of the incoming operation. May be retrieved from cache for Automated Persisted Queries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndidResolveSource?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>, 'source' | 'queryHash'>,\n  >,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Landing Pages in Apollo Server\nDESCRIPTION: Example of configuring Apollo Server landing page plugins based on NODE_ENV environment variable. Shows how to set up different landing pages for production and development environments with custom configuration options.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/landing-pages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginLandingPageLocalDefault, ApolloServerPluginLandingPageProductionDefault } from '@apollo/server/plugin/landingPage/default';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    // Install a landing page plugin based on NODE_ENV\n    process.env.NODE_ENV === 'production'\n      ? ApolloServerPluginLandingPageProductionDefault({\n          graphRef: 'my-graph-id@my-graph-variant',\n          footer: false,\n        })\n      : ApolloServerPluginLandingPageLocalDefault({ footer: false }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping global-agent in Apollo Server\nDESCRIPTION: TypeScript code showing how to initialize global-agent before Apollo Server setup for proxy configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { bootstrap } from 'global-agent'; // highlight-line\n\n// Setup global support for environment variable based proxy configuration.\nbootstrap(); // highlight-line\n\n// The following represents existing configuration, though its\n// important to bootstrap the agent before Apollo Server.\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Control Plugin in Apollo Server 4\nDESCRIPTION: Demonstrates how to configure the ApolloServerPluginCacheControl to restore Apollo Server 3 behavior of only setting Cache-Control headers for cacheable responses.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';\n\nnew ApolloServer({\n  // ...\n  plugins: [\n    ApolloServerPluginCacheControl({ calculateHttpHeaders: 'if-cacheable' }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Operation with Context in Apollo Server (JavaScript)\nDESCRIPTION: Shows how to use the executeOperation method with a custom context value. This is useful when your server expects a specific context object for processing queries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await server.executeOperation({\n  query: 'query SayHelloWorld($name: String) { hello(name: $name) }',\n  variables: { name: 'world' },\n}, {\n  contextValue: { userId: 'test' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentStore in Apollo Server with TypeScript\nDESCRIPTION: Shows how to set up a custom DocumentStore using InMemoryLRUCache for Apollo Server's cache of parsed and validated GraphQL operation abstract syntax trees. This replaces the experimental_approximateDocumentStoreMiB option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InMemoryLRUCache } from 'apollo-server-caching';\nimport type { DocumentNode } from 'graphql';\nnew ApolloServer({\n  documentStore: new InMemoryLRUCache<DocumentNode>({\n    maxSize: Math.pow(2, 20) * approximateDocumentStoreMiB,\n    sizeCalculator: InMemoryLRUCache.jsonBytesSizeCalculator,\n  }),\n  ...moreOptions,\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Context Interface for Type Generation\nDESCRIPTION: This TypeScript snippet shows how to export the context interface used in Apollo Server for type generation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyContext {\n  dataSources: {\n    books: Book[];\n  };\n}\n\nconst server = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Control Headers Configuration\nDESCRIPTION: Example showing how to customize cache control headers for CDN integration using Apollo Server plugins.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  plugins: [\n    ApolloServerPluginCacheControl({ calculateHttpHeaders: false }),\n    {\n      async requestDidStart() {\n        return {\n          async willSendResponse(requestContext) {\n            const { response, overallCachePolicy } = requestContext;\n            const policyIfCacheable = overallCachePolicy.policyIfCacheable();\n            if (policyIfCacheable && !response.headers && response.http) {\n              response.http.headers.set(\n                'cache-control',\n                // ... or the values your CDN recommends\n                `max-age=0, s-maxage=${\n                  overallCachePolicy.maxAge\n                }, ${policyIfCacheable.scope.toLowerCase()}`,\n              );\n            }\n          },\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Query\nDESCRIPTION: Example of a GraphQL subscription query for incrementing numbers\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription IncrementingNumber {\n  numberIncremented\n}\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP GraphQL Request in Apollo Server (TypeScript)\nDESCRIPTION: Illustrates how to use the executeHTTPGraphQLRequest method, which is the main entry point for web framework integrations. It processes a GraphQL request represented by an HTTPGraphQLRequest object.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/apollo-server.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await server.executeHTTPGraphQLRequest({\n  httpGraphQLRequest: OurHttpGraphQLRequest,\n  context: async () => ({\n    // token: ...,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 4 JSON Error Response Format\nDESCRIPTION: Shows the new standard JSON error response format in Apollo Server 4, which is used for all non-landing-page-related responses.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\":[{\"message\": \"...\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining willSendResponse Hook in TypeScript\nDESCRIPTION: Hook that fires before Apollo Server sends a response for a GraphQL operation. Allows mutation of the response including extensions and data modifications.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nwillSendResponse?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>, 'source' | 'queryHash'\n  >,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using Cache Control Types in Apollo Server TypeScript Resolvers\nDESCRIPTION: Demonstrates the available approaches for implementing cache control in Apollo Server resolvers using TypeScript. Shows usage of GraphQLResolveInfoWithCacheControl type and utility functions maybeCacheControlFromInfo and cacheControlFromInfo for type-safe cache control access.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/cache-control-types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLResolveInfoWithCacheControl } from '@apollo/cache-control-types';\n\n// Example resolver with typed info parameter\nresolve(parent: any, args: any, context: any, info: GraphQLResolveInfoWithCacheControl) {\n  // info.cacheControl is now properly typed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Landing Page with Telemetry Options\nDESCRIPTION: Example showing how to configure Apollo Server with landing page plugins and disable telemetry (Google Analytics and Sentry) in the embedded Sandbox & Explorer landing pages.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    process.env.NODE_ENV === 'production'\n      ? ApolloServerPluginLandingPageProductionDefault({\n          graphRef: 'my-graph-id@my-graph-variant',\n          embed: {\n            runTelemetry: false\n          },\n        })\n      : ApolloServerPluginLandingPageLocalDefault({\n          embed: {\n            runTelemetry: false\n          },\n        }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Reporting Plugin in Apollo Server (TypeScript)\nDESCRIPTION: Basic setup for enabling schema reporting in Apollo Server. This imports the plugin from '@apollo/server/plugin/schemaReporting' and adds it to the plugins array when initializing an ApolloServer instance.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/schema-reporting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginSchemaReporting } from '@apollo/server/plugin/schemaReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginSchemaReporting(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Apollo Server Integration\nDESCRIPTION: Example package.json configuration showing the recommended dependency structure for an Apollo Server integration, including proper versioning of core dependencies and test suite.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/integration-testsuite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-server-integration\",\n  \"devDependencies\": {\n    \"@apollo/server\": \"4.1.0\",\n    \"@apollo/server-integration-testsuite\": \"4.1.0\"\n  },\n  \"peerDependencies\": {\n    \"@apollo/server\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Memcache\nDESCRIPTION: Demonstrates how to configure Apollo Server with Memcached for caching. Sets up connections to multiple Memcached servers with custom retry and expiration settings.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from \"keyv\";\nimport KeyvMemcache from \"@keyv/memcache\";\nimport { KeyvAdapter } from \"@apollo/utils.keyvadapter\";\n\n// servers is a comma-separated list of strings\n// highlight-start\nconst servers = [\n  \"user:pass@localhost:11211\",\n  \"user:pass@localhost:11222\"\n].join(\",\");\n\nconst memcache = new KeyvMemcache(servers, {\n  retries: 10,\n  expires: 60,\n});\n// highlight-end\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  cache: new KeyvAdapter(new Keyv({ store: memcache })), // highlight-line\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPGraphQLResponse Interface in TypeScript\nDESCRIPTION: This code defines the structure of an HTTPGraphQLResponse, including headers, status, and body. The body can be either 'complete' with a string or 'chunked' with an AsyncIterableIterator.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HTTPGraphQLHead {\n  status?: number;\n  headers: HeaderMap;\n}\n\ntype HTTPGraphQLResponseBody =\n  | { kind: 'complete'; string: string }\n  | { kind: 'chunked'; asyncIterator: AsyncIterableIterator<string> };\n\n\ntype HTTPGraphQLResponse = HTTPGraphQLHead & {\n  body: HTTPGraphQLResponseBody;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page in Apollo Server 4\nDESCRIPTION: Example demonstrating how to configure Apollo Server 4 to use the splash page landing page from Apollo Server 3 instead of the default embedded Apollo Sandbox.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginLandingPageLocalDefault, ApolloServerPluginLandingPageProductionDefault }\n  from '@apollo/server/plugin/landingPage/default';\n\nnew ApolloServer({\n  // ...\n  plugins: [\n    process.env.NODE_ENV === 'production'\n      ? ApolloServerPluginLandingPageProductionDefault()\n      : ApolloServerPluginLandingPageLocalDefault({ embed: false })\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with User Type and Query\nDESCRIPTION: A schema definition that includes a User type with id and name fields, and a Query type with a user field that accepts an ID argument.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID!\n  name: String\n}\n\ntype Query {\n  user(id: ID!): User\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Type Mutation Response Example\nDESCRIPTION: Shows the JSON response structure for a mutation that modifies multiple types.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"likePost\": {\n      \"code\": \"200\",\n      \"success\": true,\n      \"message\": \"Thanks!\",\n      \"post\": {\n        \"id\": \"123\",\n        \"likes\": 5040\n      },\n      \"user\": {\n        \"likedPosts\": [\"123\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring includeRequest Function for Apollo Usage Reporting\nDESCRIPTION: An asynchronous function that determines which GraphQL requests are included in usage reports sent to Apollo Studio. It receives a GraphQLRequestContext object and must return a Promise<Boolean>.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/usage-reporting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync Function\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Client Info Generation in Apollo Server\nDESCRIPTION: TypeScript example demonstrating how to customize client information headers using the ApolloServerPluginUsageReporting plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/monitoring/metrics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      generateClientInfo: ({\n        request\n      }) => {\n        const headers = request.http && request.http.headers;\n        if(headers) {\n          return {\n            clientName: headers[\"apollographql-client-name\"],\n            clientVersion: headers[\"apollographql-client-version\"],\n          };\n        } else {\n          return {\n            clientName: \"Unknown Client\",\n            clientVersion: \"Unversioned\",\n          };\n        }\n      },\n    })\n  ],\n});\n\nconst { url } = await startStandaloneServer(server);\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Federation Fetcher for Apollo Gateway\nDESCRIPTION: Sets up a custom fetcher specifically for managed federation configuration requests to Apollo. This example shows how to configure retry behavior for the fetcher that communicates with Apollo for managed federation configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  fetcher: require('make-fetch-happen').defaults({\n    onRetry() {\n      console.log('We will retry!');\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server 3 Standalone\nDESCRIPTION: Example of how to set up a standalone Apollo Server 3 instance with typeDefs, resolvers, and context.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install apollo-server graphql\nimport { ApolloServer } from 'apollo-server';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req }) => ({ token: req.headers.token }),\n});\nconst { url } = await server.listen(4000);\nconsole.log(`ðŸš€  Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Context Type in Resolvers\nDESCRIPTION: This TypeScript snippet demonstrates how to use the generated context type in resolver functions for type-safe access to context values.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers: Resolvers = {\n  Query: {\n    // Our third argument (`contextValue`) has a type here, so we\n    // can check the properties within our resolver's shared context value.\n    books: (_, __, contextValue) => {\n      return contextValue.dataSources.books;\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing unexpectedErrorProcessingRequest Handler in TypeScript\nDESCRIPTION: Example of implementing a plugin hook to handle unexpected programming errors during request processing.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async unexpectedErrorProcessingRequest({ requestContext,  error }) {\n        console.log(`Something went wrong: ${error}`);\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 3 Compatibility Plugin for Data Sources\nDESCRIPTION: Custom plugin implementation to maintain Apollo Server 3 data sources behavior in Apollo Server 4 for migration purposes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPlugin, BaseContext } from \"@apollo/server\";\nimport type { DataSource } from \"apollo-datasource\";\n\ntype DataSources = Record<string, DataSource>;\ntype DataSourcesFn = () => DataSources;\n\ninterface ContextWithDataSources extends BaseContext {\n  dataSources?: DataSources;\n}\n\nexport const ApolloDataSources = (options: {\n  dataSources: DataSourcesFn,\n}): ApolloServerPlugin<ContextWithDataSources> => ({\n  requestDidStart: async (requestContext) => {\n    const dataSources = options.dataSources();\n    const initializers = Object.values(dataSources).map(async (dataSource) => {\n      if (dataSource.initialize)\n        dataSource.initialize({\n          cache: requestContext.cache,\n          context: requestContext.contextValue,\n        });\n    });\n\n    await Promise.all(initializers);\n\n    requestContext.contextValue.dataSources = dataSources;\n  },\n});\n\nconst server = new ApolloServer({\n  schema,\n  plugins: [ApolloDataSources({ dataSources })],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing didResolveOperation Event Handler in TypeScript\nDESCRIPTION: Event handler that fires after successfully determining the operation from a request's document AST. Provides access to operationName and operation AST.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndidResolveOperation?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>,\n    'source' | 'queryHash' | 'document' | 'operationName'\n  >,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Mutation Response Structure in JSON\nDESCRIPTION: Example JSON response structure for a book creation mutation showing the returned data format.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"addBook\": {\n      \"title\": \"Fox in Socks\",\n      \"author\": {\n        \"name\": \"Dr. Seuss\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring generateClientInfo Function for Apollo Usage Reporting\nDESCRIPTION: A function that provides client details for each processed request, enabling Apollo Studio to segment metrics by client. Returns an object with clientName and clientVersion fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/usage-reporting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFunction\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Deduplication in RESTDataSource\nDESCRIPTION: TypeScript example demonstrating how to disable request deduplication in a RESTDataSource subclass.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MoviesAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options); // this sends our server's `cache` through\n    this.token = options.token;\n  }\n\n  protected override requestDeduplicationPolicyFor(\n    url: URL,\n    request: RequestOptions,\n  ) {\n    const cacheKey = this.cacheKeyFor(url, request);\n    return { policy: 'do-not-deduplicate' } as const;\n  }\n\n  // Outgoing requests aren't cached, but the HTTP response cache still works!\n  async getMovie(id) {\n    return this.get(`movies/${encodeURIComponent(id)}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Environment Variables\nDESCRIPTION: Example showing how to set required environment variables for connecting Apollo Server to GraphOS, including the API key and graph reference.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/monitoring/metrics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Replace the example values below with values specific to your use case.\n# This example associates your server with the `my-variant` variant of\n# the `my-graph` graph.\n$ APOLLO_KEY=YOUR_API_KEY APOLLO_GRAPH_REF=my-graph@my-variant \\\n  node start-server.js\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout with AbortSignal\nDESCRIPTION: Shows how to implement a timeout for REST requests using AbortSignal.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.get('/movies/1', { signal: AbortSignal.timeout(myTimeoutMilliseconds) });\n```\n\n----------------------------------------\n\nTITLE: Handling doubly-encoded variables and extensions with Express middleware\nDESCRIPTION: Demonstrates how to implement middleware in Express to handle doubly-encoded variables in request bodies, which is no longer supported by default in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(express.json());\napp.use((req, res, next) => {\n  if (typeof req.body?.variables === 'string') {\n    try {\n      req.body.variables = JSON.parse(req.body.variables);\n    } catch (e) {\n      // https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#json-parsing-failure\n      res.status(400).send(e instanceof Error ? e.message : e);\n      return;\n    }\n  }\n  next();\n});\napp.use(expressMiddleware(server));\n```\n\n----------------------------------------\n\nTITLE: Configuring User Identification for Private Cached Responses in Apollo Server\nDESCRIPTION: This code shows how to set up user identification for PRIVATE cached responses in Apollo Server. It defines a sessionId function that extracts a session ID from the request headers to identify users for accessing private cached responses.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport responseCachePlugin from '@apollo/server-plugin-response-cache';\nconst server = new ApolloServer({\n  // ...other settings...\n  plugins: [\n    responseCachePlugin({\n      sessionId: (requestContext) =>\n        requestContext.request.http.headers.get('session-id') || null,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with Options in TypeScript\nDESCRIPTION: Demonstrates how to make a basic GET request with options using RESTDataSource.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.get('/movies/1', options);\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Reporting Plugin in Apollo Server (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to disable the usage reporting plugin in Apollo Server by installing and using the ApolloServerPluginUsageReportingDisabled plugin. This is useful when you want to provide an API key for other purposes but don't want to enable usage reporting.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/usage-reporting.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginUsageReportingDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReportingDisabled(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Field-Level Cache Control in GraphQL Schema\nDESCRIPTION: Example schema with field-level cache control directives, where votes is cached for 30 seconds and readByCurrentUser is cached for 10 seconds with private scope.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID!\n  title: String\n  author: Author\n  votes: Int @cacheControl(maxAge: 30)\n  comments: [Comment]\n  readByCurrentUser: Boolean! @cacheControl(maxAge: 10, scope: PRIVATE)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing responseForOperation Event Handler in TypeScript\nDESCRIPTION: Event handler that fires before GraphQL execution. Can return a GraphQLResponse to skip normal execution.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nresponseForOperation?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>,\n    'source' | 'queryHash' | 'document' | 'operationName' | 'operation'\n): Promise<GraphQLResponse | null>;\n```\n\n----------------------------------------\n\nTITLE: Disabling File Uploads in Apollo Server 2\nDESCRIPTION: Configuration option to disable file uploads functionality in Apollo Server 2 to prevent CSRF vulnerability.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuploads: false\n```\n\n----------------------------------------\n\nTITLE: Implementing sendVariableValues.transform Function for Apollo Usage Reporting\nDESCRIPTION: A transform function that takes operation variables and returns a filtered version for reporting to Apollo Studio. Allows fine-grained control over what variable data is sent.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/usage-reporting.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ transform: ({ variables, operationString)} => { ... } }\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory LRU Cache with Custom Size and TTL\nDESCRIPTION: Demonstrates how to customize the InMemoryLRUCache with specific size limits and time-to-live settings. This example increases the cache size to approximately 100MiB and sets a 5-minute TTL.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InMemoryLRUCache } from '@apollo/utils.keyvaluecache';\n\nconst server = new ApolloServer({\n  // ...\n  cache: new InMemoryLRUCache({\n    // ~100MiB\n    maxSize: Math.pow(2, 20) * 100,\n    // 5 minutes (in seconds)\n    ttl: 300,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Request in Apollo Server with TypeScript\nDESCRIPTION: This snippet demonstrates how to execute a GraphQL request using the server's executeHTTPGraphQLRequest method. It uses an HTTPGraphQLRequest object and a context function, passing in req and res objects from Express.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await server\n  .executeHTTPGraphQLRequest({\n    httpGraphQLRequest,\n    context: () => context({ req, res }),\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GraphQL Schema with Simple Fields\nDESCRIPTION: A simple GraphQL schema definition that includes two fields in the Query type, both returning integers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  numberSix: Int! # Should always return the number 6 when queried\n  numberSeven: Int! # Should always return 7\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of the @deprecated Directive\nDESCRIPTION: Shows the GraphQL specification's definition of the @deprecated directive, which can be used on field definitions, argument definitions, input field definitions, and enum values.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/directives.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @deprecated(\n  reason: String = \"No longer supported\"\n) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n```\n\n----------------------------------------\n\nTITLE: Entity Cache Hints in Federation\nDESCRIPTION: Example showing how to set cache control directives on federated entities.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Book @key(fields: \"isbn\") @cacheControl(maxAge: 30) {\n  isbn: String!\n  title: String\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ApolloServerPluginInlineTrace in Apollo Server (TypeScript)\nDESCRIPTION: This snippet shows how to explicitly disable the inline trace plugin in an Apollo Server instance, even if the schema defines '_Service.sdl: String!'.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/inline-trace.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginInlineTraceDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginInlineTraceDisabled(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Control Plugin in TypeScript\nDESCRIPTION: This code snippet shows how to completely disable the cache control functionality in Apollo Server by using the ApolloServerPluginCacheControlDisabled plugin. This can provide a slight performance improvement if cache control features are not needed.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/cache-control.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginCacheControlDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginCacheControlDisabled(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing didEncounterSubsequentErrors Event Handler in TypeScript\nDESCRIPTION: Event handler for incremental delivery operations that fires when execution errors are encountered after the initial payload is sent.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndidEncounterSubsequentErrors?(\n  requestContext: GraphQLRequestContextDidEncounterSubsequentErrors<TContext>,\n  errors: ReadonlyArray<GraphQLError>,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded In-Memory Cache in Apollo Server 4\nDESCRIPTION: Example showing how to configure an unbounded in-memory cache in Apollo Server 4 to match the default behavior of Apollo Server 3, though this is not recommended due to vulnerability to memory exhaustion attacks.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { KeyvAdapter } from '@apollo/utils.keyvadapter';\nimport Keyv from 'keyv';\n\nnew ApolloServer({\n  // DANGEROUS: Match the unsafe default behavior of Apollo Server 3's with an\n  // unbounded in-memory cache.\n  cache: new KeyvAdapter(new Keyv()),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Same vs Different Origins in CORS\nDESCRIPTION: Example showing URL comparisons to illustrate what constitutes same origin versus different origin in the context of CORS. Same origin URLs share domain, protocol, and port, while different origins have variations in at least one of these components.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Same origin\nhttp://example.com:8080/ <==> http://example.com:8080/\n\n# Different origin (difference in domain, protocol, and port)\nhttp://example.com:8080/ =X= https://example1.com:8081/\n```\n\n----------------------------------------\n\nTITLE: Initializing PubSub Instance\nDESCRIPTION: Creates a new PubSub instance for handling subscription events\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PubSub } from 'graphql-subscriptions';\n\nconst pubsub = new PubSub();\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Response in Express with TypeScript\nDESCRIPTION: This snippet shows how to send a GraphQL response in an Express server. It sets headers and status code, then sends either a complete response or streams a chunked response. It also handles response compression flushing if available.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const [key, value] of httpGraphQLResponse.headers) {\n  res.setHeader(key, value);\n}\nres.statusCode = httpGraphQLResponse.status || 200;\n\nif (httpGraphQLResponse.body.kind === 'complete') {\n  res.send(httpGraphQLResponse.body.string);\n  return;\n}\n\nfor await (const chunk of httpGraphQLResponse.body.asyncIterator) {\n  res.write(chunk);\n  if (typeof (res as any).flush === 'function') {\n    (res as any).flush();\n  }\n}\nres.end();\n```\n\n----------------------------------------\n\nTITLE: Batched Query Format for Apollo Server\nDESCRIPTION: JSON format for sending multiple GraphQL operations in a single batched request, which requires enabling allowBatchedHttpRequests in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"query\": \"query { testString }\"\n  },\n  {\n    \"query\": \"query AnotherQuery{ test(who: \\\"you\\\" ) }\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Reporting in Apollo Server\nDESCRIPTION: Example showing how to enable experimental schema reporting by configuring the ApolloServer constructor with engine options. Requires an Apollo Graph Manager API key set via APOLLO_KEY environment variable.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  engine: {\n    experimental_schemaReporting: true,\n    /* Other existing options can remain the same. */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IntrospectAndCompose with Authentication\nDESCRIPTION: Demonstrates setting up IntrospectAndCompose with subgraph configurations and introspection authentication headers.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  supergraphSdl: new IntrospectAndCompose({\n    subgraphs: [\n      { name: 'products', url: 'https://products-service.dev/graphql' },\n      { name: 'reviews', url: 'https://reviews-service.dev/graphql' },\n    ],\n    introspectionHeaders: {\n      Authorization: 'Bearer abc123',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query with Variables\nDESCRIPTION: A GraphQL query that retrieves best-selling products filtered by an optional category parameter.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBestSellers($category: ProductCategory) {\n  bestSellers(category: $category) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ApolloServerPluginInlineTrace in Apollo Server (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and configure the ApolloServerPluginInlineTrace plugin in an Apollo Server instance. It shows how to customize error handling in traces.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/inline-trace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginInlineTrace } from '@apollo/server/plugin/inlineTrace';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginInlineTrace({\n      includeErrors: { transform: (err) => (err.message.match(SENSITIVE_REGEX) ? null : err ) },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining willSendSubsequentPayload Hook in TypeScript\nDESCRIPTION: Hook for handling incremental delivery payloads after the initial response. Used with @defer directives and requires graphql@17 pre-release.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nwillSendSubsequentPayload?(\n  requestContext: GraphQLRequestContextWillSendSubsequentPayload<TContext>,\n  payload: GraphQLExperimentalFormattedSubsequentIncrementalExecutionResult,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware for AWS Lambda Apollo Server\nDESCRIPTION: Demonstrates how to implement type-safe middleware for event and result mutations in AWS Lambda Apollo Server integration. Shows basic middleware setup with event handling capabilities.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middleware, startServerAndCreateLambdaHandler, handlers } from \"@as-integrations/aws-lambda\";\nimport { server } from \"./server\";\n\nconst requestHandler = handlers.createAPIGatewayProxyEventV2RequestHandler();\n\nconst middlewareFn: middleware.MiddlewareFn<typeof requestHandler> = async (event) => {\n  return async (result) => {\n  }\n}\n\nstartServerAndCreateLambdaHandler(server, requestHandler, {\n  middleware: [middlewareFn],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default MaxAge in Apollo Server\nDESCRIPTION: Configuration example showing how to set a default maxAge value using the ApolloServerPluginCacheControl plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';\n\nconst server = new ApolloServer({\n  // ...other options...\n  plugins: [ApolloServerPluginCacheControl({ defaultMaxAge: 5 })],  // 5 seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Apollo Gateway to View Query Plans\nDESCRIPTION: JavaScript code snippet that shows how to enable debug mode in ApolloGateway, which prints query plans to stdout. This helps identify potential performance issues related to complex query plans.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/gateway-performance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  debug: true // print query plans to stdout\n});\n```\n\n----------------------------------------\n\nTITLE: Schema Module Structure for buildSubgraphSchema\nDESCRIPTION: Defines the expected format for schema modules passed to buildSubgraphSchema. Each module must contain typeDefs (GraphQL type definitions) and resolvers (resolver functions).\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-subgraph.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  typeDefs: DocumentNode,\n  resolvers: ResolverMap\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Directives for Incremental Delivery\nDESCRIPTION: Directive definitions for @defer and @stream that must be added to your schema to enable incremental delivery of GraphQL responses.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @defer(if: Boolean, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\ndirective @stream(if: Boolean, label: String, initialCount: Int = 0) on FIELD\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Resolvers in TypeScript\nDESCRIPTION: Defines resolver functions for the numberSix and numberSeven fields that always return 6 and 7 respectively.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    numberSix() {\n      return 6;\n    },\n    numberSeven() {\n      return 7;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Books Query in GraphQL\nDESCRIPTION: This GraphQL query retrieves the title and author of all books from the server. It demonstrates the basic structure of a GraphQL query and how to select specific fields.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBooks {\n  books {\n    title\n    author\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Schema Reporting Plugin in Apollo Server (TypeScript)\nDESCRIPTION: Code example demonstrating how to explicitly disable schema reporting by using the ApolloServerPluginSchemaReportingDisabled plugin. This ensures schema reporting won't be enabled even if the APOLLO_SCHEMA_REPORTING environment variable is set.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/schema-reporting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginSchemaReportingDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginSchemaReportingDisabled(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mocks in Apollo Server 4 (TypeScript)\nDESCRIPTION: This example shows how to set up custom mocks in Apollo Server 4, replacing the mocks option with custom mock resolvers from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addMocksToSchema } from '@graphql-tools/mock';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst mocks = {\n  Int: () => 6,\n};\n\nnew ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs, resolvers }),\n    mocks,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Memcache\nDESCRIPTION: Shows the command to install the required packages for using Memcached as a cache backend with Apollo Server via Keyv.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install keyv @keyv/memcache @apollo/utils.keyvadapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless YAML\nDESCRIPTION: Configuration file for Serverless that defines how to deploy the Apollo Server Lambda function, including HTTP endpoints and runtime settings.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: apollo-lambda\nprovider:\n  name: aws\n  runtime: nodejs16.x\n  httpApi:\n    cors: true\nfunctions:\n  graphql:\n    # Make sure your file path is correct!\n    # (e.g., if your file is in the root folder use server.graphqlHandler )\n    # The format is: <FILENAME>.<HANDLER>\n    handler: src/server.graphqlHandler # highlight-line\n    events:\n      - httpApi:\n          path: /\n          method: POST\n      - httpApi:\n          path: /\n          method: GET\n# Omit the following lines if you aren't using TS!\nplugins:\n  - serverless-plugin-typescript\n```\n\n----------------------------------------\n\nTITLE: Heroku CLI Deployment Commands\nDESCRIPTION: Series of Git commands used to initialize and deploy an Apollo Server application to Heroku using the Heroku CLI.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/heroku.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ heroku login\n$ git init # existing git repositories can skip this\n$ heroku git:remote -a <HEROKU_APP_NAME>\n\n$ git add .\n$ git commit -m \"initial apollo server deployment\"\n$ git push heroku\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Cache Control Configuration\nDESCRIPTION: Shows how to configure default cache control settings in Apollo Server constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  // The max age is calculated in seconds\n  plugins: [ApolloServerPluginCacheControl({ defaultMaxAge: 5 })],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Request Handler Implementation\nDESCRIPTION: Shows implementation of a custom request handler for handling custom event types in AWS Lambda Apollo Server integration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  startServerAndCreateLambdaHandler,\n  handlers,\n} from '@as-integrations/aws-lambda';\nimport type { APIGatewayProxyEventV2 } from 'aws-lambda';\nimport { HeaderMap } from '@apollo/server';\nimport { server } from './server';\n\ntype CustomInvokeEvent = {\n  httpMethod: string;\n  queryParams: string;\n  headers: Record<string, string>;\n  body: string;\n};\n\ntype CustomInvokeResult =\n  | {\n      success: true;\n      body: string;\n    }\n  | {\n      success: false;\n      error: string;\n    };\n\nconst requestHandler = handlers.createRequestHandler<\n  CustomInvokeEvent,\n  CustomInvokeResult\n>(\n  {\n    parseHttpMethod(event) {\n      return event.httpMethod;\n    },\n    parseHeaders(event) {\n      const headerMap = new HeaderMap();\n      for (const [key, value] of Object.entries(event.headers)) {\n        headerMap.set(key, value);\n      }\n      return headerMap;\n    },\n    parseQueryParams(event) {\n      return event.queryParams;\n    },\n    parseBody(event) {\n      return event.body;\n    },\n  },\n  {\n    success({ body }) {\n      return {\n        success: true,\n        body: body.string,\n      };\n    },\n    error(e) {\n      if (e instanceof Error) {\n        return {\n          success: false,\n          error: e.toString(),\n        };\n      }\n      console.error('Unknown error type encountered!', e);\n      throw e;\n    },\n  },\n);\n\nexport default startServerAndCreateLambdaHandler(server, requestHandler);\n```\n\n----------------------------------------\n\nTITLE: Configuring IntrospectAndCompose for Apollo Gateway\nDESCRIPTION: Shows how to initialize ApolloServer with IntrospectAndCompose for development environments.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  gateway: new ApolloGateway({\n    supergraphSdl: new IntrospectAndCompose({\n      subgraphs: [\n        // ...\n      ],\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Event Example\nDESCRIPTION: Demonstrates how to publish an event with payload using PubSub\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npubsub.publish('POST_CREATED', {\n  postCreated: {\n    author: 'Ali Baba',\n    comment: 'Open sesame',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with didEncounterError\nDESCRIPTION: Demonstrates default error handling implementation in RemoteGraphQLDataSource by overriding didEncounterError.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDataSource extends RemoteGraphQLDataSource {\n  didEncounterError(error, fetchRequest, fetchResponse, context) {\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Library Book Authors\nDESCRIPTION: A query example that demonstrates traversing through libraries to books to authors, showing how to query nested relationships.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBooksByLibrary {\n  libraries {\n    books {\n      author {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Apollo Server Landing Page\nDESCRIPTION: This snippet demonstrates how to disable the Apollo Server landing page completely. It imports and uses the ApolloServerPluginLandingPageDisabled plugin in the ApolloServer constructor to turn off the landing page functionality.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/build-run-queries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginLandingPageDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginLandingPageDisabled()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Trace Inclusion in Apollo Server 4 (TypeScript)\nDESCRIPTION: This example shows how to configure the inclusion of stack traces in error responses for Apollo Server 4, replacing the debug option from Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst apolloServerInstance = new ApolloServer<MyContext>({\n  typeDefs,\n  resolvers,\n  includeStacktraceInErrorResponses: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server 3 with Express\nDESCRIPTION: Example of setting up Apollo Server 3 with Express, including HTTP server and middleware configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install apollo-server-express apollo-server-core express graphql\nimport { ApolloServer } from 'apollo-server-express';\nimport { ApolloServerPluginDrainHttpServer } from 'apollo-server-core';\nimport express from 'express';\nimport http from 'http';\nimport { typeDefs, resolvers } from './schema';\n\ninterface MyContext {\n  token?: String;\n}\n\nconst app = express();\nconst httpServer = http.createServer(app);\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req }) => ({ token: req.headers.token }),\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n});\nawait server.start();\nserver.applyMiddleware({ app });\nawait new Promise<void>(resolve => httpServer.listen({ port: 4000 }, resolve));\nconsole.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`);\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Health Check Query\nDESCRIPTION: Demonstrates a simple GraphQL query to check server health by requesting the __typename of the top-level Query type. This query can be used with a GET request to verify if the GraphQL server is operational.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/monitoring/health-checks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{__typename}\n```\n\n----------------------------------------\n\nTITLE: Event Extensions with Lambda Authorizer\nDESCRIPTION: Demonstrates how to extend event types with custom authorization information for AWS Lambda Apollo Server integration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  startServerAndCreateLambdaHandler,\n  middleware,\n  handlers,\n} from '@as-integrations/aws-lambda';\nimport type { APIGatewayProxyEventV2WithLambdaAuthorizer } from 'aws-lambda';\nimport { server } from './server';\n\nexport default startServerAndCreateLambdaHandler(\n  server,\n  handlers.createAPIGatewayProxyEventV2RequestHandler<\n    APIGatewayProxyEventV2WithLambdaAuthorizer<{\n      myAuthorizerContext: string;\n    }>\n  >(),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server Dependencies\nDESCRIPTION: Commands for installing the core Apollo Server packages and GraphQL dependencies for standalone server setup.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function Locally with Serverless\nDESCRIPTION: Command to test the Lambda function locally using the Serverless framework with the mock query.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local -f graphql -p query.json\n```\n\n----------------------------------------\n\nTITLE: Serverless Express Integration with Apollo Server\nDESCRIPTION: Demonstrates integration of Apollo Server with @vendia/serverless-express for custom HTTP routing in AWS Lambda.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ApolloServer } = require('@apollo/server');\nconst { expressMiddleware } = require('@apollo/server/express4');\nconst serverlessExpress = require('@vendia/serverless-express');\nconst express = require('express');\nconst cors = require('cors');\n\nconst server = new ApolloServer({\n  typeDefs: 'type Query { x: ID }',\n  resolvers: { Query: { x: () => 'hi!' } },\n});\n\nserver.startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests();\n\nconst app = express();\napp.use(cors(), express.json(), expressMiddleware(server));\n\nexports.graphqlHandler = serverlessExpress({ app });\n```\n\n----------------------------------------\n\nTITLE: Schema with Cache Control Directives\nDESCRIPTION: Example GraphQL schema showing how to add cache control directives for CDN caching.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author @cacheControl(maxAge: 60) {\n  id: Int\n  firstName: String\n  lastName: String\n  posts: [Post] @cacheControl(maxAge: 180)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Apollo Server 3 with executeOperation\nDESCRIPTION: Illustrates how to test an Apollo Server 3 instance using the executeOperation method, which allows specifying an operation's context value indirectly through a second optional argument.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs: \"type Query { hello: String!}\",\n  resolvers: {\n    Query: {\n      hello: (_, __, context) => `Hello ${context.name}!`,\n    },\n  },\n  context: async ({ req }) => ({ name: req.headers.name }),\n});\n\nconst result = await server.executeOperation({\n  query: 'query helloContext { hello }',\n}, {\n  // A half-hearted attempt at making something vaguely like an express.Request,\n  // and not bothering to make the express.Response at all.\n  req: { headers: { name: 'world' } },\n});\n\nexpect(result.data?.hello).toBe('Hello world!'); // -> true\n```\n\n----------------------------------------\n\nTITLE: Updating Redis Cache Implementation in Apollo Server\nDESCRIPTION: Updates the Redis cache implementation to support Redis Standalone, Cluster, and Sentinel modes using the 'ioredis' package instead of 'node_redis'.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\napollo-server-cache-redis: **BREAKING FOR USERS OF `apollo-server-cache-redis`**\n```\n\n----------------------------------------\n\nTITLE: Disabling Apollo Server Landing Page in TypeScript\nDESCRIPTION: This snippet demonstrates how to disable the default landing page in Apollo Server using the ApolloServerPluginLandingPageDisabled plugin. It's useful for environments where you don't want to expose a GraphQL playground.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/landing-pages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginLandingPageDisabled } from '@apollo/server/plugin/disabled';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginLandingPageDisabled()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Subscription Callback Plugin\nDESCRIPTION: This snippet shows how to enable callback subscriptions in Apollo Server by adding the ApolloServerPluginSubscriptionCallback plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginSubscriptionCallback } from '@apollo/server/plugin/subscriptionCallback';\nimport { ApolloServer } from '@apollo/server';\n\nconst server = new ApolloServer({\n  // ...\n  plugins: [ApolloServerPluginSubscriptionCallback()],\n});\n```\n\n----------------------------------------\n\nTITLE: Updated GraphQL Query with Book Title\nDESCRIPTION: An enhanced query example that adds the book title field to the previous query, demonstrating parallel execution in resolver chains.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/resolvers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBooksByLibrary {\n  libraries {\n    books {\n      title\n      author {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Express Integration Dependencies\nDESCRIPTION: Commands for installing Apollo Server with Express integration packages and their TypeScript type definitions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/server graphql express cors body-parser\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/cors @types/express @types/body-parser\n```\n\n----------------------------------------\n\nTITLE: Implementing Standalone Apollo Server\nDESCRIPTION: Basic implementation of a standalone Apollo Server with a simple GraphQL schema and resolver. Includes server initialization and startup configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`;\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server);\nconsole.log(`ðŸš€ Server ready at ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Precomputed Nonce\nDESCRIPTION: This snippet shows how to provide a precomputed nonce to Apollo Server's landing page plugin, useful for environments like Cloudflare Workers where random number generation is not available on startup.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  // ...\n  plugins: [\n    ApolloServerPluginLandingPageLocalDefault({\n      precomputedNonce: PRECOMPUTED_NONCE,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating gql import from Apollo Server to graphql-tag\nDESCRIPTION: In Apollo Server 4, the gql template literal tag is no longer provided. This snippet shows how to update imports to use the graphql-tag package directly.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gql } from 'apollo-server';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Start Method Implementation\nDESCRIPTION: Code showing the recommended way to start an Apollo Server instance when using integration packages, requiring await server.start() to be called before server.applyMiddleware.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nserver = new ApolloServer()\nawait server.start()\nserver.applyMiddleware()\n```\n\n----------------------------------------\n\nTITLE: DataLoader Integration with REST Data Source\nDESCRIPTION: Example of implementing DataLoader for batch loading data while maintaining RESTDataSource functionality.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport DataLoader from 'dataloader';\nimport {\n  RESTDataSource,\n  AugmentedRequest,\n} from '@apollo/datasource-rest';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\n\nclass PersonalizationAPI extends RESTDataSource {\n  override baseURL = 'https://movies-api.example.com/';\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options);\n    this.token = options.token;\n  }\n\n  override willSendRequest(_path: string, request: AugmentedRequest) {\n    request.headers['authorization'] = this.token;\n  }\n\n  private progressLoader = new DataLoader(async (ids) => {\n    const progressList = await this.get('progress', {\n      params: { ids: ids.join(',') },\n    });\n    return ids.map((id) => progressList.find((progress) => progress.id === id));\n  });\n\n  async getProgressFor(id) {\n    return this.progressLoader.load(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Landing Page with Extended Options\nDESCRIPTION: Example demonstrating comprehensive landing page configuration including collection embedding, header configuration, and endpoint customization options.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    process.env.NODE_ENV === 'production'\n      ? ApolloServerPluginLandingPageProductionDefault({\n          graphRef: 'my-graph-id@my-graph-variant',\n          collectionId: 'abcdef',\n          operationId: '12345',\n          embed: true,\n          footer: false,\n        })\n      : ApolloServerPluginLandingPageLocalDefault({\n          collectionId: 'abcdef',\n          operationId: '12345',\n          embed: {\n            initialState: {\n              pollForSchemaUpdates: false,\n              sharedHeaders: {\n                \"HeaderNeededForIntrospection\": \"ValueForIntrospection\"\n              },\n            },\n            endpointIsEditable: true,\n          },\n          footer: false,\n        }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Cache Options\nDESCRIPTION: Demonstrates how to pass a 'bounded' cache option to ApolloServer constructor, which is equivalent to not providing the cache option in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ApolloServer({ cache: 'bounded' })\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoteGraphQLDataSource Instance\nDESCRIPTION: Shows how to create a new RemoteGraphQLDataSource instance with a specific subgraph URL configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productsDataSource = new RemoteGraphQLDataSource({\n  url: 'https://products-service.dev/graphql',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Graph Ref\nDESCRIPTION: Example showing how to configure Apollo Server using a graph ref identifier in v2.25.0\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew ApolloServer({apollo: {graphRef: 'id@variant'}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Serverless Framework Detection in TypeScript\nDESCRIPTION: Shows how implementations of ApolloServer for serverless frameworks should override the serverlessFramework() method to return true. This affects Lambda and other serverless implementations.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass ServerlessApolloServer extends ApolloServer {\n  protected serverlessFramework() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSRF Prevention Headers Configuration\nDESCRIPTION: Example of configuring custom request headers for CSRF prevention in Apollo Server constructor.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/cors.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncsrfPrevention: { requestHeaders: ['Some-Special-Header'] }\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Package Import - TypeScript Example\nDESCRIPTION: Example of importing the main ApolloServer class from the new @apollo/server package in v4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server'\n```\n\n----------------------------------------\n\nTITLE: Migrating error type checking in Apollo Server 4\nDESCRIPTION: Shows how to migrate from using instanceof checks for error types to using the ApolloServerErrorCode enum in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nif (error instanceof SyntaxError)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerErrorCode } from '@apollo/server/errors';\nif (error.extensions?.code === ApolloServerErrorCode.GRAPHQL_PARSE_FAILED)\n```\n\n----------------------------------------\n\nTITLE: Configuring sendVariableValues in Apollo Engine Reporting\nDESCRIPTION: Sample configuration to maintain sending all GraphQL variable values to Apollo Engine, replacing the deprecated privateVariables option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nengine: {\n  sendVariableValues: { all: true }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Resolution in REST Data Source\nDESCRIPTION: Implementation of resolveURL method for dynamic base URL resolution using service discovery.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESTDataSource, AugmentedRequest } from '@apollo/datasource-rest';\nimport type { KeyValueCache } from '@apollo/utils.keyvaluecache';\n\nclass PersonalizationAPI extends RESTDataSource {\n  private token: string;\n\n  constructor(options: { token: string; cache: KeyValueCache }) {\n    super(options);\n    this.token = options.token;\n  }\n\n  override async resolveURL(path: string, request: AugmentedRequest) {\n    if (!this.baseURL) {\n      const addresses = await resolveSrv(\n        path.split('/')[1] + '.service.consul',\n      );\n      this.baseURL = addresses[0];\n    }\n    return super.resolveURL(path, request);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Directives with makeExecutableSchema in Apollo Server\nDESCRIPTION: Shows how to use schemaDirectives with makeExecutableSchema from @graphql-tools/schema after its removal as a direct ApolloServer constructor option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs,\n    resolvers,\n    schemaDirectives\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling TTL for Persisted Queries\nDESCRIPTION: Configuration to disable the TTL for persisted queries in Apollo Server, allowing queries to remain in cache until evicted by the cache's standard policy.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  persistedQueries: {\n    ttl: null,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server Dependencies for MERN Stack\nDESCRIPTION: Command to install necessary GraphQL packages including graphql, graphql-tag, @apollo/subgraph, and @apollo/server for implementing GraphQL in a MERN stack application.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql graphql-tag @apollo/subgraph @apollo/server\n```\n\n----------------------------------------\n\nTITLE: Initializing ApolloServer with Subscription Callback Plugin\nDESCRIPTION: Basic setup example showing how to import and configure the ApolloServerPluginSubscriptionCallback plugin with Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/subscription-callback.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { ApolloServerPluginSubscriptionCallback } from '@apollo/server/plugin/subscriptionCallback';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginSubscriptionCallback(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing invalidRequestWasReceived Handler in TypeScript\nDESCRIPTION: Example of implementing a plugin hook to handle bad request errors in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async invalidRequestWasReceived({ error }) {\n        console.log(`Bad request: ${error}`);\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generic Variables in Apollo Server Testing TypeScript\nDESCRIPTION: Demonstrates the use of generic types for variables in query and mutate functions when using apollo-server-testing. This allows for better type checking of variables in test scenarios.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { query, mutate } = createTestClient(server);\n\ninterface MyVariables {\n  id: string;\n}\n\nconst result = await query<MyData, MyVariables>({\n  query: MY_QUERY,\n  variables: { id: '123' }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Error Hiding\nDESCRIPTION: Example showing how to configure ApolloServer with the hideSchemaDetailsFromClientErrors option to prevent schema information leakage in error messages.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  hideSchemaDetailsFromClientErrors: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Server Startup in Apollo Server Integrations\nDESCRIPTION: Shows how to use the assertStarted method to ensure an Apollo Server instance has been properly started before handling requests. This check helps integration users identify startup issues.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nserver.assertStarted('expressMiddleware()');\n```\n\n----------------------------------------\n\nTITLE: Configuration - Apollo Server Batch Request Control\nDESCRIPTION: Configuration option to disable HTTP request batching in Apollo Server v3.5.0\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  allowBatchedHttpRequests: false\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Tracing Plugin in Apollo Server\nDESCRIPTION: Demonstrates how to re-enable the apollo-tracing functionality using the plugin system after its removal as a direct constructor option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew ApolloServer({\n  plugins: [\n    require('apollo-tracing').plugin()\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Persisted Queries\nDESCRIPTION: Configuration to completely disable Automatic Persisted Queries functionality in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  persistedQueries: false,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Event Handler Type Definition\nDESCRIPTION: Example showing how to specify TypeScript types for Apollo Server Lambda handlers, allowing you to choose between APIGatewayProxyEvent or APIGatewayProxyEventV2 types from aws-lambda.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer<APIGatewayProxyEvent>(...)\n// or\nnew ApolloServer<APIGatewayProxyEventV2>(...)\n```\n\n----------------------------------------\n\nTITLE: Using restrict Method for Cache Control in GraphQL Resolvers\nDESCRIPTION: TypeScript example demonstrating the restrict method which only applies cache hints that are more restrictive than existing settings.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cacheControlFromInfo } from '@apollo/cache-control-types';\n\n// Access ApolloServerPluginCacheControl's extension of the GraphQLResolveInfo object\nconst cacheControl = cacheControlFromInfo(info)\n\n// If we call this first...\ncacheControl.setCacheHint({ maxAge: 60, scope: 'PRIVATE' });\n\n// ...then this changes maxAge (more restrictive) but NOT scope (less restrictive)\ncacheControl.cacheHint.restrict({ maxAge: 30, scope: 'PUBLIC' });\n```\n\n----------------------------------------\n\nTITLE: Handling POST Body Fields in Apollo Server\nDESCRIPTION: Shows how Apollo Server 4.2.0 handles non-string operationName and non-object variables or extensions in POST bodies, failing with status code 400 instead of ignoring the field.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"operationName\": null,\n\"variables\": null,\n\"extensions\": null\n```\n\n----------------------------------------\n\nTITLE: Updating HeaderMap in TypeScript\nDESCRIPTION: Adds an __identity property to HeaderMap class to disallow standard Maps in TypeScript. This ensures typechecking occurs on fields declared to accept a HeaderMap.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew HeaderMap()\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressMiddleware Function Signatures in TypeScript\nDESCRIPTION: Shows the function overloading pattern used to provide type-safe signatures for the Express middleware integration. It defines the interface for middleware options and three function signatures to ensure proper typing of the ApolloServer instance and context function.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExpressMiddlewareOptions<TContext extends BaseContext> {\n  context?: ContextFunction<[ExpressContextFunctionArgument], TContext>;\n}\n\nexport function expressMiddleware(\n  server: ApolloServer<BaseContext>,\n  options?: ExpressMiddlewareOptions<BaseContext>,\n): express.RequestHandler;\nexport function expressMiddleware<TContext extends BaseContext>(\n  server: ApolloServer<TContext>,\n  options: WithRequired<ExpressMiddlewareOptions<TContext>, 'context'>,\n): express.RequestHandler;\nexport function expressMiddleware<TContext extends BaseContext>(\n  server: ApolloServer<TContext>,\n  options?: ExpressMiddlewareOptions<TContext>,\n): express.RequestHandler {\n  // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Error Thrown in Apollo Server 3 Resolver\nDESCRIPTION: Demonstrates creating and throwing an error with a custom property in a resolver function, which Apollo Server 3 would process and format with specific extensions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = new Error(\"hello\");\ne.extraProperty = \"bye\";\nthrow e;\n```\n\n----------------------------------------\n\nTITLE: User Update Mutation Response\nDESCRIPTION: Example of the JSON response returned after executing the user email update mutation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateUserEmail\": {\n      \"id\": \"1\",\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@example.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ExpressContext Type in TypeScript\nDESCRIPTION: Demonstrates how to import the ExpressContext type from the main apollo-server-express module. This type is useful for defining the context in Express-based Apollo Server applications.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressContext } from 'apollo-server-express';\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Posts and Authors\nDESCRIPTION: Example GraphQL query demonstrating the N+1 problem when fetching posts with their authors.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPosts {\n  posts {\n    body\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Execute Operation with DocumentNode\nDESCRIPTION: Demonstration of using server.executeOperation with a DocumentNode query in v2.25.0\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nserver.executeOperation({ \n  query: gql`query { ... }` \n})\n```\n\n----------------------------------------\n\nTITLE: POST Request JSON Body Format for Apollo Server\nDESCRIPTION: Example of a properly formatted JSON body for a POST request to Apollo Server, containing query string, operation name, and variables.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"query GetBestSellers($category: ProductCategory){bestSellers(category: $category){title}}\",\n  \"operationName\": \"GetBestSellers\",\n  \"variables\": { \"category\": \"BOOKS\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Dependencies\nDESCRIPTION: This bash command installs the necessary GraphQL Code Generator packages as dev dependencies for generating TypeScript types from a GraphQL schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @graphql-codegen/cli @graphql-codegen/typescript @graphql-codegen/typescript-resolvers\n```\n\n----------------------------------------\n\nTITLE: Rendering Embedded Explorer Script in TypeScript\nDESCRIPTION: This code demonstrates how the embedded Explorer is rendered using a script tag that references a CDN upload containing the built version of the @apollo/explorer package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README_landingpages.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<script src=\"https://embeddable-explorer.cdn.apollographql.com/_latest/embeddable-explorer.umd.production.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating HeaderMap for Apollo Server HTTPGraphQLRequest\nDESCRIPTION: Demonstrates how to convert framework-specific headers into Apollo Server's HeaderMap format, handling arrays of header values and undefined values properly.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HeaderMap } from '@apollo/server';\n\nconst headers = new HeaderMap();\nfor (const [key, value] of Object.entries(req.headers)) {\n  if (value !== undefined) {\n    headers.set(key, Array.isArray(value) ? value.join(', ') : value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 3 Error Response Format\nDESCRIPTION: Shows how Apollo Server 3 formats errors in debug mode, including the error message, location, path, and extensions with the exception object containing custom properties and stacktrace.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"hello\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\"x\"],\n      \"extensions\": {\n        \"code\": \"INTERNAL_SERVER_ERROR\",\n        \"exception\": {\n          \"extraProperty\": \"bye\",\n          \"stacktrace\": [\n            \"Error: hello\",\n            \"    at Object.x (file:///private/tmp/as3-t/server.mjs:8:27)\",\n            \"    at field.resolve (/private/tmp/as3-t/node_modules/apollo-server-core/dist/utils/schemaInstrumentation.js:56:26)\",\n            // more lines elided\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Control in Apollo Server\nDESCRIPTION: Examples showing how to disable cache control calculations and headers in Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';\n\nconst server = new ApolloServer({\n  // ...other options...\n  plugins: [ApolloServerPluginCacheControl({ calculateHttpHeaders: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting callbackWaitsForEmptyEventLoop in Apollo Server Lambda\nDESCRIPTION: Sets 'callbackWaitsForEmptyEventLoop' to false for OPTIONS requests in Apollo Server Lambda to return immediately after triggering the callback.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"callbackWaitsForEmptyEventLoop\": false\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-nullable Fields in GraphQL\nDESCRIPTION: This example demonstrates how to define a non-nullable field in GraphQL using the exclamation mark (!). The name field cannot return null.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  name: String! # Can't return null\n  books: [Book]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Print Reports in ApolloServer TypeScript\nDESCRIPTION: Enables debug printing of usage reports and traces in ApolloServer. This option is passed to the ApolloServerPluginUsageReporting plugin during server configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  plugins: [ApolloServerPluginUsageReporting({\n    debugPrintReports: true\n  })]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Reporting Plugin in Apollo Server 4\nDESCRIPTION: Updated example of importing the ApolloServerPluginUsageReporting plugin in Apollo Server 4 using a deep import from the @apollo/server package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting';\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure with Bash\nDESCRIPTION: Commands to create a new project directory and initialize a Node.js project using npm, setting the package type to module for ES Modules support.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir graphql-server-example\ncd graphql-server-example\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm init --yes && npm pkg set type=\"module\"\n```\n\n----------------------------------------\n\nTITLE: Cookie Middleware Implementation for AWS Lambda\nDESCRIPTION: Shows how to implement cookie handling middleware that can modify response cookies in AWS Lambda Apollo Server integration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  startServerAndCreateLambdaHandler,\n  middleware,\n  handlers,\n} from '@as-integrations/aws-lambda';\nimport { server } from './server';\nimport { refreshCookie } from './cookies';\n\nconst requestHandler = handlers.createAPIGatewayProxyEventV2RequestHandler();\n\nconst cookieMiddleware: middleware.MiddlewareFn<typeof requestHandler> = async (\n  event,\n) => {\n  const cookie = refreshCookie(event.cookies);\n  return async (result) => {\n    result.cookies = result.cookies ?? [];\n    result.cookies.push(cookie);\n  };\n};\n\nexport default startServerAndCreateLambdaHandler(server, requestHandler, {\n  middleware: [\n    cookieMiddleware,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Input Types in GraphQL\nDESCRIPTION: Examples of input type definitions for blog post content and media details.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ninput BlogPostContent {\n  title: String\n  body: String\n  media: [MediaDetails!]\n}\n\ninput MediaDetails {\n  format: MediaFormat!\n  url: String!\n}\n\nenum MediaFormat {\n  IMAGE\n  VIDEO\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Server 3 Plugin Factory Function Usage\nDESCRIPTION: This example shows how plugin factory functions were used in Apollo Server 3, allowing inline functions that could reference the server instance. This pattern is no longer supported in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  plugins: [\n    makeFirstPlugin,\n    () => makeSecondPlugin(server),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration - Apollo Server Usage Reporting Types\nDESCRIPTION: Type definition change showing removal of clientReferenceId from ClientInfo interface in Apollo Server v3.6.0\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClientInfo {\n  // clientReferenceId field removed in v3.6.0\n  name?: string;\n  version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Enabled and Disabled Plugins in Apollo Server\nDESCRIPTION: This code demonstrates the problematic pattern of combining a plugin with its disabled counterpart, which now throws an error in Apollo Server 4 instead of silently ignoring the disabled plugin as in Apollo Server 3.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  schema,\n  plugins: [\n    ApolloServerPluginUsageReporting(),\n    ApolloServerPluginUsageReportingDisabled(),\n  ]\n});\nawait server.start();\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Import - TypeScript Example\nDESCRIPTION: Example of importing the Express middleware integration from Apollo Server v4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expressMiddleware } from '@apollo/server/express4'\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTPGraphQLRequest Object for Apollo Server\nDESCRIPTION: Shows how to assemble the HTTPGraphQLRequest object required by Apollo Server from components extracted from the framework's request object. This includes method, headers, body, and search parameters.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/building-integrations.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst httpGraphQLRequest: HTTPGraphQLRequest = {\n  method: req.method.toUpperCase(),\n  headers,\n  body: req.body,\n  search: parse(req.url).search ?? '',\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the MERN Server with Apollo Integration\nDESCRIPTION: Command to start the Express server with Apollo Server integration, making both REST and GraphQL endpoints available for the application.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript type definitions for Express dependencies\nDESCRIPTION: Command for installing TypeScript type definitions as development dependencies for Express-related packages to avoid type errors when using TypeScript.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @types/cors @types/express @types/body-parser\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Configuration for Subscription Plugin\nDESCRIPTION: Example showing how to override default retry settings with custom configuration options for the subscription callback plugin.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/subscription-callback.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  plugins: [\n    ApolloServerPluginSubscriptionCallback({\n      retry: {\n        retries: 3,\n        minTimeout: 1000,\n        maxTimeout: 5000,\n        randomize: true,\n      },\n    }),\n  ],\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Redis Caching\nDESCRIPTION: Shows the command to install the required packages for using Redis as a cache backend with Apollo Server via Keyv. This includes the Redis adapter for Keyv.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install keyv @keyv/redis @apollo/utils.keyvadapter\n```\n\n----------------------------------------\n\nTITLE: Visualizing Apollo Server Architecture with Mermaid\nDESCRIPTION: A bottom-to-top (BT) Mermaid diagram showing the relationship between web/iOS clients, Graph Router, and multiple subgraphs (Users, Products, Reviews). The diagram illustrates Apollo Server's federated architecture with client applications connecting through a central router to various backend services.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/shared/diagrams/federation-architecture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph BT;\n  webapp(Web app);\n  iosapp(iOS app);\n  subgraph \" \";\n  router([Graph router]);\n  serviceA[Users<br/>subgraph];\n  serviceB[Products<br/>subgraph];\n  serviceC[Reviews<br/>subgraph];\n  end;\n  webapp & iosapp -.- router;\n  router --- serviceA & serviceB & serviceC;\n  class webapp,iosapp secondary;\n```\n\n----------------------------------------\n\nTITLE: Cache Control Max Age Restriction in Apollo Server 3\nDESCRIPTION: Example of setting dynamic cache control hint with maxAge parameter in Apollo Server 3.0.1, demonstrating the fixed behavior where explicitly set maxAge values override defaults.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninfo.cacheControl.cacheHint.restrict({ maxAge: 60 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Reporting for Apollo Studio (TypeScript)\nDESCRIPTION: This snippet shows how to configure the ApolloServerPluginUsageReporting plugin to send all error details to Apollo Studio for analysis.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/errors.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  // etc.\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendErrors: { unmodified: true },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Default Retry Configuration for Subscription Plugin\nDESCRIPTION: Shows the default retry configuration options used by the subscription callback plugin when making requests to GraphOS Router.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/plugin/subscription-callback.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  retries: 5,\n  minTimeout: 100,\n  maxTimeout: 1000,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Exclusions\nDESCRIPTION: Shell command showing how to exclude certain URLs from being proxied using NO_PROXY environment variable.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ GLOBAL_AGENT_NO_PROXY='*.foo.com,10.0.1.100,baz.com' node index.js\n```\n\n----------------------------------------\n\nTITLE: Report Timing API Implementation\nDESCRIPTION: Shows the reportTiming API usage for enabling/disabling trace reporting on a per-request basis. Takes a boolean or predicate function that determines if a trace should be reported.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  reportTiming: (requestContext) => {\n    // Return boolean to determine if this request should be traced\n    return true;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Redis Cluster\nDESCRIPTION: Shows the command to install required packages for using Redis Cluster with Apollo Server. This includes ioredis for cluster support.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install keyv @keyv/redis ioredis @apollo/utils.keyvadapter\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server with Express dependencies\nDESCRIPTION: Command for installing Apollo Server along with Express and necessary middleware packages for integrating GraphQL with an Express web application.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/server graphql express cors body-parser\n```\n\n----------------------------------------\n\nTITLE: Configuring sendHeaders in Apollo Engine Reporting\nDESCRIPTION: Sample configuration to maintain sending all GraphQL request headers to Apollo Engine, replacing the deprecated privateHeaders option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nengine: {\n  sendHeaders: { all: true }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Cache Control Directives\nDESCRIPTION: Example schema demonstrating various cache control configurations using directives and inheritance patterns.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/caching.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  book: Book\n  cachedBook: Book @cacheControl(maxAge: 60)\n  reader: Reader @cacheControl(maxAge: 40)\n}\n\ntype Book {\n  title: String\n  cachedTitle: String @cacheControl(maxAge: 30)\n}\n\ntype Reader {\n  book: Book @cacheControl(inheritMaxAge: true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ApolloServer Stop Behavior in TypeScript\nDESCRIPTION: Sets the grace period for stopping active connections when calling ApolloServer.stop(). This option can be passed during ApolloServer initialization to control the shutdown behavior.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({ stopGracePeriodMillis: 10000 })\n```\n\n----------------------------------------\n\nTITLE: Installing Gateway Dependencies with NPM\nDESCRIPTION: Commands for installing the required Node.js packages for setting up an Apollo Server gateway.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/gateway @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server with Redis Cluster\nDESCRIPTION: Demonstrates how to set up Apollo Server with Redis Cluster for distributed caching. Uses ioredis.Cluster directly with Keyv and requires disabling batch reads.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/cache-backends.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from \"keyv\";\nimport KeyvRedis from \"@keyv/redis\";\nimport Redis from \"ioredis\";\nimport { KeyvAdapter } from \"@apollo/utils.keyvadapter\";\n\n// highlight-start\nconst cluster = new Redis.Cluster([\n  { host: \"localhost\", port: 26379 },\n  { host: \"localhost\", port: 26380 },\n]);\n// highlight-end\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  // highlight-start\n  cache: new KeyvAdapter(new Keyv({ store: new KeyvRedis(cluster) }), {\n    disableBatchReads: true,\n  }),\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: cURL Command for POST Request to Apollo Server\nDESCRIPTION: Example cURL command that sends a GraphQL query via POST to an Apollo-hosted server with the proper Content-Type header and JSON payload.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request POST \\\n  -H 'Content-Type: application/json' \\\n  --data '{\"query\":\"query GetBestSellers($category: ProductCategory){bestSellers(category: $category){title}}\", \"operationName\":\"GetBestSellers\", \"variables\":{\"category\":\"BOOKS\"}}' \\\n  https://rover.apollo.dev/quickstart/products/graphql\n```\n\n----------------------------------------\n\nTITLE: Disabling Grace Period for ApolloServer Stop in TypeScript\nDESCRIPTION: Configures ApolloServer to disable the grace period when stopping the server, while still closing idle connections. This is done by passing Infinity as the stopGracePeriodMillis option.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({ stopGracePeriodMillis: Infinity })\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeScript Project Structure\nDESCRIPTION: Commands to create the source directory structure for a TypeScript project and install TypeScript-related dependencies.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src\ntouch src/index.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript @types/node\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading subscriptions-transport-ws in Apollo Server Core\nDESCRIPTION: Implements lazy loading of the 'subscriptions-transport-ws' package in Apollo Server Core to improve performance.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\napollo-server-core: Lazy load `subscriptions-transport-ws` in core\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Books and Authors Query\nDESCRIPTION: This JSON example shows the structure of a response from a GraphQL server to the GetBooksAndAuthors query, containing arrays of book and author data.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"books\": [\n      {\n        \"title\": \"City of Glass\"\n      },\n      ...\n    ],\n    \"authors\": [\n      {\n        \"name\": \"Paul Auster\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock GraphQL Request for Local Testing\nDESCRIPTION: JSON mock of an HTTP request with a GraphQL operation for testing the Lambda function locally.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n  },\n  \"isBase64Encoded\": false,\n  \"rawQueryString\": \"\",\n  \"requestContext\": {\n    \"http\": {\n      \"method\": \"POST\",\n    },\n    // Other requestContext properties omitted for brevity\n  },\n  \"rawPath\": \"/\",\n  \"routeKey\": \"/\",\n  \"body\": \"{\\\"operationName\\\": null, \\\"variables\\\": null, \\\"query\\\": \\\"{ hello }\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RESTDataSource Package for Apollo Server\nDESCRIPTION: Command to install the @apollo/datasource-rest package, which provides the RESTDataSource class for fetching data from REST APIs.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-rest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/datasource-rest\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Response Cache Plugin Setup Instructions\nDESCRIPTION: Instructions for implementing response caching in Apollo Server, requiring the plugin to be added to ApolloServer's plugins list and setting @cacheControl hints in the schema or via resolver cache control methods. Caching is applied when all response elements have non-zero maxAge cache hints.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/plugin-response-cache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Response Cache plugin\n\nThis Apollo Server response cache plugin implements a full GraphQL query response cache.\n\n- Add the plugin to your ApolloServer's plugins list\n- Set `@cacheControl` hints on your schema or call `info.cacheControl.setCacheHint` in your resolvers\n- If the entire GraphQL response is covered by cache hints with non-zero maxAge,\n  the whole response will be cached.\n\nThis cache is a full query cache: cached responses are only used for identical requests.\n```\n\n----------------------------------------\n\nTITLE: Importing APQ Link in Apollo Client\nDESCRIPTION: Shows how to import the createPersistedQueryLink function for APQ setup in Apollo Client.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPersistedQueryLink } from '@apollo/client/link/persisted-queries';\n```\n\n----------------------------------------\n\nTITLE: Migration Path Flowchart with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the migration path from Apollo Server 3 to Apollo Server 4 based on the current package being used.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB;\n  server(\"Am I using the <code>apollo-server</code> package?\");\n  server--No-->express(\"Am I using the <code>apollo-server-express</code> package?\");\n  server--Yes-->useStandAlone(\"Use the <code>startStandaloneServer</code> function\");\n  express--No-->otherIntegration(\"See if a community-supported integration exists\");\n  express--Yes-->useExpressMiddleware(\"Use the <code>expressMiddleware</code> function\");\n  class useStandAlone,useExpressMiddleware secondary;\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install necessary packages for implementing subscriptions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql-ws ws @graphql-tools/schema\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy via Environment Variables\nDESCRIPTION: Shell command demonstrating how to start Node.js server with HTTP proxy configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ GLOBAL_AGENT_HTTP_PROXY=http://proxy:3128/ node index.js\n```\n\n----------------------------------------\n\nTITLE: Querying Records with GraphQL in Apollo Sandbox\nDESCRIPTION: Example GraphQL query for retrieving all records from the MongoDB collection through the Apollo Server endpoint. This query fetches name, position, and level fields for all records.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/mern.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetRecords {\n  records {\n    name\n    position\n    level\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Production Landing Page Script in TypeScript\nDESCRIPTION: This snippet shows how the production landing page is rendered using a script tag that references a CDN upload containing the built version of the studio-landing-page repo.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README_landingpages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script src=\"https://embeddable-sandbox.cdn.apollographql.com/_latest/embeddable-sandbox.umd.production.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Apollo Gateway Package\nDESCRIPTION: Commands for updating the @apollo/gateway package either to the latest compatible version or to a specific version.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm update @apollo/gateway\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Tools for Mocking in Apollo Server\nDESCRIPTION: Installs the @graphql-tools/mock and @graphql-tools/schema packages as development dependencies, which are required for implementing mocking in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/testing/mocking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @graphql-tools/mock @graphql-tools/schema\n```\n\n----------------------------------------\n\nTITLE: Installing Express Dependencies\nDESCRIPTION: Commands for installing required dependencies when migrating from startStandaloneServer to expressMiddleware.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/api/standalone.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express cors\n```\n\n----------------------------------------\n\nTITLE: Deploying to AWS Lambda using Serverless\nDESCRIPTION: Command to deploy the Apollo Server application to AWS Lambda using the Serverless framework.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript as a Development Dependency\nDESCRIPTION: Command to install TypeScript as a development dependency for the project.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL/TLS Certificate\nDESCRIPTION: Shell command showing how to specify custom SSL/TLS certificates using NODE_EXTRA_CA_CERTS along with proxy configuration.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ NODE_EXTRA_CA_CERTS=/full/path/to/certificate.pem \\\n  GLOBAL_AGENT_HTTP_PROXY=http://proxy:3128/ \\\n  node index.js\n```\n\n----------------------------------------\n\nTITLE: Defining Non-nullable Lists with Non-nullable Items in GraphQL\nDESCRIPTION: This snippet shows how to define a field that returns a non-nullable list containing non-nullable items. Both the list itself and its items cannot be null.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  books: [Book!]! # This list can't be null AND its list *items* can't be null\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Embedded Sandbox Script in TypeScript\nDESCRIPTION: This snippet shows how the embedded Sandbox is rendered using a script tag that references a CDN upload containing the built version of the @apollo/sandbox package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README_landingpages.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<script src=\"https://embeddable-sandbox.cdn.apollographql.com/_latest/embeddable-sandbox.umd.production.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Apollo Gateway Version\nDESCRIPTION: Command to install a specific version of @apollo/gateway package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/gateway@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Reporting Plugin in Apollo Server 3\nDESCRIPTION: Example of importing the ApolloServerPluginUsageReporting plugin in Apollo Server 3 from the apollo-server-core package.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginUsageReporting } from 'apollo-server-core';\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query\nDESCRIPTION: Basic GraphQL query requesting __typename field from Query type.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/apq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __typename\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless CLI Globally\nDESCRIPTION: Command to install the Serverless CLI globally for deploying the application to AWS Lambda.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g serverless\n```\n\n----------------------------------------\n\nTITLE: Using Non-prefixed Environment Variables\nDESCRIPTION: Shell command demonstrating how to use non-prefixed environment variables by setting an empty namespace.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE=\"\" HTTP_PROXY=http://proxy:3128/ node index.js\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Directives in GraphQL Schema (GraphQL SDL)\nDESCRIPTION: This snippet demonstrates how to define custom authorization directives in a GraphQL schema. It creates an @auth directive that can be applied to objects or field definitions, specifying required roles for access.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nconst typeDefs = `#graphql\n  directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION\n\n  enum Role {\n    ADMIN\n    REVIEWER\n    USER\n  }\n\n  type User @auth(requires: USER) {\n    name: String\n    banned: Boolean @auth(requires: ADMIN)\n    canPost: Boolean @auth(requires: REVIEWER)\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating @apollo/protobufjs Dependency in Markdown\nDESCRIPTION: Patch change in version 4.0.2 that updates @apollo/protobufjs to remove its dependency on an old version of @types/node.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#7134](https://github.com/apollographql/apollo-server/pull/7134) [`361ca5c8e`](https://github.com/apollographql/apollo-server/commit/361ca5c8ed064932945e93bd069b06b5c4633cb1) Thanks [@renovate](https://github.com/apps/renovate)! - Update `@apollo/protobufjs` to drop its hopefully-unnecessary dependency on (an old version of) `@types/node`.\n```\n\n----------------------------------------\n\nTITLE: Removing AWS Lambda and S3 Resources\nDESCRIPTION: Command to remove all AWS resources created by the Serverless deployment, including Lambda functions and S3 buckets.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove\n```\n\n----------------------------------------\n\nTITLE: cURL Command for GET Request to Apollo Server\nDESCRIPTION: Example cURL command that sends a GraphQL query via GET request with query parameters for query, operationName, and URL-escaped variables JSON.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n  https://rover.apollo.dev/quickstart/products/graphql?query=query%20GetBestSellers%28%24category%3A%20ProductCategory%29%7BbestSellers%28category%3A%20%24category%29%7Btitle%7D%7D&operationName=GetBestSellers&variables=%7B%22category%22%3A%22BOOKS%22%7D\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator\nDESCRIPTION: This YAML configuration file for GraphQL Code Generator specifies how to generate TypeScript types based on the GraphQL schema.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/generate-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This configuration file tells GraphQL Code Generator how\n# to generate types based on our schema.\nschema: \"./schema.graphql\"\ngenerates:\n  # Specify where our generated types should live.\n  ./src/__generated__/resolvers-types.ts:\n    plugins:\n      - \"typescript\"\n      - \"typescript-resolvers\"\n    config:\n      useIndexSignature: true\n      # More on this below!\n      contextType: \"../index#MyContext\"\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Formatting Tools\nDESCRIPTION: Commands to run ESLint, Prettier, and spell checking for code quality assurance.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/DEVELOPMENT.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run prettier-fix\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run spell-check\n```\n\n----------------------------------------\n\nTITLE: Checking Apollo Gateway Version\nDESCRIPTION: Command to check the currently installed version of @apollo/gateway library.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/apollo-gateway-setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm list @apollo/gateway\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolution Monitoring Plugin in TypeScript\nDESCRIPTION: Example of a complete plugin implementation that monitors field resolution timing and results using willResolveField.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  /* ... other necessary configuration ... */\n\n  plugins: [\n    {\n      async requestDidStart(initialRequestContext) {\n        return {\n          async executionDidStart(executionRequestContext) {\n            return {\n              willResolveField({source, args, contextValue, info}) {\n                const start = process.hrtime.bigint();\n                return (error, result) => {\n                  const end = process.hrtime.bigint();\n                  console.log(`Field ${info.parentType.name}.${info.fieldName} took ${end - start}ns`);\n                  if (error) {\n                    console.log(`It failed with ${error}`);\n                  } else {\n                    console.log(`It returned ${result}`);\n                  }\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Apollo Server\nDESCRIPTION: Version history changelog entries documenting changes, updates and fixes to Apollo Server, including its transition from graphql-server to apollo-server naming convention.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.1.0\n\n- Added ability to provide custom default field resolvers [#482]\n- Add `tracing` option to collect and expose trace data\n- Add support for GraphiQL editor themes [#484]\n- Add support for full websocket using GraphiQL [#491]\n- Updated restify lib\n- Updated package apollo-server-micro\n\n## v1.0.3\n\n- Revert [#463], because it's a breaking change\n\n## v1.0.2\n\n- Rename packages from graphql-server- to apollo-server- [#465]\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku Procfile\nDESCRIPTION: Defines a Procfile that specifies the command to start the Apollo Server application on Heroku. This file is required for Heroku to properly launch the application.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/heroku.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nweb: node index.js\n```\n\n----------------------------------------\n\nTITLE: Initial Release Description in Markdown\nDESCRIPTION: Description of the initial release (version 4.0.0) of @apollo/usage-reporting-protobuf for Apollo Server 4, noting the package name change from apollo-reporting-protobuf used in earlier Apollo Server versions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nInitial release of `@apollo/usage-reporting-protobuf` with support for Apollo Server 4. The version of this plugin designed for Apollo Server 2 and 3 was named `apollo-reporting-protobuf`. This is an internal implementation detail of Apollo Server and is not intended for general direct use.\n```\n\n----------------------------------------\n\nTITLE: Importing Apollo Server Plugin - TypeScript Example\nDESCRIPTION: Example of importing a disabled schema reporting plugin from Apollo Server's new package structure in v4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPluginSchemaReportingDisabled } from '@apollo/server/plugin/schemaReporting'\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Playground Version\nDESCRIPTION: Example showing how to set a specific version of GraphQL Playground for security patching in v2.25.3\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew ApolloServer({playground: {version: '1.7.42'}})\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless TypeScript Plugin\nDESCRIPTION: Command to install the TypeScript plugin for Serverless to enable it to process TypeScript files.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/lambda.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D serverless-plugin-typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring ApolloGateway with Service List and Introspection Headers\nDESCRIPTION: Initializes an ApolloGateway instance with a list of subgraph services and authorization headers for introspection. This example shows how to define multiple services with their URLs and provide authentication for schema introspection.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/using-federation/api/apollo-gateway.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst gateway = new ApolloGateway({\n  serviceList: [\n    { name: 'products', url: 'https://products-service.dev/graphql' },\n    { name: 'reviews', url: 'https://reviews-service.dev/graphql' },\n  ],\n  introspectionHeaders: {\n    Authorization: 'Bearer abc123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Nested Books Query\nDESCRIPTION: This JSON example shows the structure of a response from a GraphQL server to the GetBooks query, containing book data with nested author information.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/schema/schema.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"books\": [\n      {\n        \"title\": \"City of Glass\",\n        \"author\": {\n          \"name\": \"Paul Auster\"\n        }\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing TypeScript Typings for CommonJS in Markdown\nDESCRIPTION: Patch change in version 4.1.1 that publishes TypeScript typings for CommonJS modules output, allowing correct resolution of Apollo's package typings as CommonJS in TypeScript projects using specific module resolution settings.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#7614](https://github.com/apollographql/apollo-server/pull/7614) [`4fadf3ddc`](https://github.com/apollographql/apollo-server/commit/4fadf3ddc9611e050dd0f08d51252ed9b0c0d9e1) Thanks [@Cellule](https://github.com/Cellule)! - Publish TypeScript typings for CommonJS modules output.\n\n  This allows TypeScript projects that use CommonJS modules with\n  `moduleResolution: \"node16\"` or\n  `moduleResolution: \"nodeNext\"`\n  to correctly resolves the typings of apollo's packages as CommonJS instead of ESM.\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Jest\nDESCRIPTION: Commands to run tests, including how to pass arguments to Jest and run specific test files.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm t -- --watch\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm t -- ApolloServer.test.ts\n```\n\n----------------------------------------\n\nTITLE: Configuration - Apollo Server Landing Page Options\nDESCRIPTION: New configuration options for Apollo Server landing page plugins allowing cookie inclusion and default values for Explorer\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/CHANGELOG_historical.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApolloServer({\n  plugins: [\n    ApolloServerPluginLandingPage({\n      includeCookies: boolean,\n      document: string,\n      variables: Object,\n      headers: Object\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Eviction with Redis CLI\nDESCRIPTION: Shows how to manually evict cache entries using Redis CLI commands by matching key patterns.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/performance/response-cache-eviction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --raw KEYS \"$PATTERN\" | xargs redis-cli del\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Environment Variables\nDESCRIPTION: Command to set the NODE_ENV environment variable in Heroku for development purposes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/heroku.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ heroku config:set NODE_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Migration from ApolloError with error code parameter\nDESCRIPTION: Shows how to migrate from the Apollo Server 3 pattern of using ApolloError with a code parameter to using GraphQLError with extensions in Apollo Server 4.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/migration.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new ApolloError(message, 'YOUR_ERROR_CODE');\n```\n\n----------------------------------------\n\nTITLE: Version Update Markdown\nDESCRIPTION: Version header and patch changes section documenting pull request changes and commit references for GraphQL HTTP dependency updates.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/integration-testsuite/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.7.4\n\n### Patch Changes\n\n- [#7604](https://github.com/apollographql/apollo-server/pull/7604) [`aeb511c7d`](https://github.com/apollographql/apollo-server/commit/aeb511c7d7b3b7260b33c7e392580bac6565e465) Thanks [@renovate](https://github.com/apps/renovate)! - Update `graphql-http` dependency\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Markdown\nDESCRIPTION: Updated dependency references including links to commit hashes and version bumps for Apollo cache control types, server, and usage reporting protobuf.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/integration-testsuite/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`4fadf3ddc`](https://github.com/apollographql/apollo-server/commit/4fadf3ddc9611e050dd0f08d51252ed9b0c0d9e1)]:\n  - @apollo/cache-control-types@1.0.3\n  - @apollo/server@4.7.5\n  - @apollo/usage-reporting-protobuf@4.1.1\n```\n\n----------------------------------------\n\nTITLE: Update Proto File Command\nDESCRIPTION: Command to update the reports.proto file to the current version used by Studio usage reporting ingress.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run update-proto -w @apollo/usage-reporting-protobuf\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Port for Heroku Deployment\nDESCRIPTION: Sets up an Apollo Server instance to listen on the port specified by Heroku's PORT environment variable, defaulting to 4000 if not specified. This configuration is essential for proper functioning on Heroku's platform.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/deployment/heroku.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst port = Number.parseInt(process.env.PORT) || 4000;\n\nconst { url } = await startStandaloneServer(server, { listen: { port } });\n\nconsole.log(`ðŸš€ Server listening at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: NPM Workspace Script Command\nDESCRIPTION: Command to run scripts in the NPM workspace for this specific module. Used for updating and generating protobuf definitions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run SCRIPTNAME -w @apollo/usage-reporting-protobuf\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Sources in Apollo Server\nDESCRIPTION: A Mermaid flowchart showing how Apollo Server can fetch data from different sources like REST API, MongoDB, and SQL databases using corresponding data source classes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/fetching-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n  restAPI(REST API);\n  mongo(MongoDB Database);\n  sql(SQL Database);\n  subgraph ApolloServer;\n    restDataSource(RESTDataSource);\n    mongoDBDataSource(MongoDBSource);\n    sqlDataSource(SQLDBSource);\n  end\n  restDataSource --Fetches data--> restAPI;\n  mongoDBDataSource --Fetches data--> mongo;\n  sqlDataSource --Fetches data--> sql;\n  client(ApolloClient);\n  client --Sends query--> ApolloServer;\n```\n\n----------------------------------------\n\nTITLE: Updating Protobuf for ConditionNode Support in Markdown\nDESCRIPTION: Minor change in version 4.1.0 that updates the protobuf to support ConditionNode in the gateway.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#7411](https://github.com/apollographql/apollo-server/pull/7411) [`021460e95`](https://github.com/apollographql/apollo-server/commit/021460e95c34ce921dc1c8caa3e5ded3463487ee) Thanks [@trevor-scheer](https://github.com/trevor-scheer)! - Update protobuf which includes updates for supporting (notably) ConditionNode in the gateway\n```\n\n----------------------------------------\n\nTITLE: Installing @apollo/cache-control-types Package\nDESCRIPTION: This code snippet shows the package name for installation. It's used in the context of describing version updates.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/cache-control-types/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @apollo/cache-control-types\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request with Author\nDESCRIPTION: This snippet shows how to reference a GitHub pull request in a changelog entry, including the PR number, commit hash, and the author's GitHub username.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/cache-control-types/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#173](https://github.com/apollographql/apollo-utils/pull/173) [`b231e5d`](https://github.com/apollographql/apollo-utils/commit/b231e5d57d4598661f22cb7338ecd2fff0222b54) Thanks [@glasser](https://github.com/glasser)!\n```\n\n----------------------------------------\n\nTITLE: Adding Package.json Fields in Markdown\nDESCRIPTION: Patch change in version 4.0.1 that includes 'main' and 'module' fields in package.json for build tools that look for them instead of 'exports'.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#7095](https://github.com/apollographql/apollo-server/pull/7095) [`72111f970`](https://github.com/apollographql/apollo-server/commit/72111f970e80bcf8538a002c08ce4a3d0da318d9) Thanks [@alex-statsig](https://github.com/alex-statsig)! - Include `main` and `module` fields in package.json for build tools that look for them instead of `exports`.\n```\n\n----------------------------------------\n\nTITLE: Generate Protobuf Code Command\nDESCRIPTION: Command to regenerate JavaScript and TypeScript files from the Protocol Buffer definitions.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/usage-reporting-protobuf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate -w @apollo/usage-reporting-protobuf\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Update\nDESCRIPTION: Versioned dependency updates for Apollo Server packages and TypeScript compatibility changes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/plugin-response-cache/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @apollo/server-plugin-response-cache\n\n## 4.1.4\n\n### Patch Changes\n\n- [#8010](https://github.com/apollographql/apollo-server/pull/8010) [`f4228e8`](https://github.com/apollographql/apollo-server/commit/f4228e88509b4cd2f50cf10bc6376d48488e03c1) Thanks [@glasser](https://github.com/glasser)! - Compatibility with Next.js Turbopack. Fixes #8004.\n\n## 4.1.3\n\n### Patch Changes\n\n- [#7614](https://github.com/apollographql/apollo-server/pull/7614) [`4fadf3ddc`](https://github.com/apollographql/apollo-server/commit/4fadf3ddc9611e050dd0f08d51252ed9b0c0d9e1) Thanks [@Cellule](https://github.com/Cellule)! - Publish TypeScript typings for CommonJS modules output.\n\n  This allows TypeScript projects that use CommonJS modules with\n  `moduleResolution: \"node16\"` or\n  `moduleResolution: \"nodeNext\"`\n  to correctly resolves the typings of apollo's packages as CommonJS instead of ESM.\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server Health Check with Express Middleware in TypeScript\nDESCRIPTION: Shows how to set up an Apollo Server with Express, including a custom health check endpoint. This example demonstrates configuring the GraphQL endpoint and adding a separate '/health' route that always returns a success response.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/monitoring/health-checks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// imports, etc.\n\nconst app = express();\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\n\nawait server.start();\napp.use('/graphql',\n  cors<cors.CorsRequest>(),\n  express.json(),\n  expressMiddleware(server)\n);\nawait new Promise<void>(resolve => app.listen({ port: 4000 }, resolve));\n\n// Our GraphQL server is listening for GraphQL operations\n// on `http://localhost:4000/graphql`\nconsole.log(`ðŸš€ Server ready at http://localhost:4000/graphql`);\n\n// Requests to `http://localhost:4000/health` now return \"Okay!\"\napp.get('/health', (req, res) => {\n  res.status(200).send('Okay!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Releases\nDESCRIPTION: Commands to create changesets for tracking changes in the project, including how to create an empty changeset for PRs with no package changes.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/DEVELOPMENT.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx changeset\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx changeset --empty\n```\n\n----------------------------------------\n\nTITLE: Running Smoke Tests\nDESCRIPTION: Command to run smoke tests that verify the built tarballs work properly.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:smoke\n```\n\n----------------------------------------\n\nTITLE: Running Typescript in Watch Mode\nDESCRIPTION: Command to run Typescript in watch mode during development of Apollo Server.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a GitHub pull request in a changelog entry. It includes the PR number and commit hash.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/cache-control-types/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#7614](https://github.com/apollographql/apollo-server/pull/7614) [`4fadf3ddc`](https://github.com/apollographql/apollo-server/commit/4fadf3ddc9611e050dd0f08d51252ed9b0c0d9e1)\n```\n\n----------------------------------------\n\nTITLE: Adding Incremental Delivery Directives to GraphQL Schema\nDESCRIPTION: TypeScript code showing how to add @defer and @stream directives to a GraphQL schema when creating it programmatically.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/workflow/requests.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GraphQLSchema,\n  GraphQLDeferDirective,\n  GraphQLStreamDirective,\n  specifiedDirectives,\n} from 'graphql';\n\nconst schema = new GraphQLSchema({\n  query,\n  directives: [\n    ...specifiedDirectives,\n    GraphQLDeferDirective,\n    GraphQLStreamDirective,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration to Landing Page in TypeScript\nDESCRIPTION: This code demonstrates how configuration parameters are passed from user-defined config in Apollo Server to the CDN bundle via the window.landingPage object.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/README_landingpages.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.landingPage = ${JSON.stringify(config)};\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Stringification in Apollo Server\nDESCRIPTION: This example demonstrates how to provide a custom stringifyResult function to Apollo Server to format the result of HTTP queries.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/packages/server/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  stringifyResult: (value: FormattedExecutionResult) => {\n    return JSON.stringify(value, null, 2);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing didEncounterErrors Event Handler in TypeScript\nDESCRIPTION: Event handler that fires when Apollo Server encounters errors during parsing, validation, or execution. Errors are available in requestContext.errors.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins-event-reference.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndidEncounterErrors?(\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>, 'errors'\n  >,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Link in Markdown\nDESCRIPTION: This snippet shows how to create a markdown link to the deployed version of the Apollo Server documentation.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* https://www.apollographql.com/docs/apollo-server/\n```\n\n----------------------------------------\n\nTITLE: Installing global-agent Package\nDESCRIPTION: Command to install the global-agent package using npm package manager.\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/security/proxy-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install global-agent\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Subscriptions Package\nDESCRIPTION: Command to install the graphql-subscriptions package via npm\nSOURCE: https://github.com/apollographql/apollo-server/blob/main/docs/source/data/subscriptions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphql-subscriptions\n```"
  }
]