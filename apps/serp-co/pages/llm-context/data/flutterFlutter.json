[
  {
    "owner": "flutter",
    "repo": "flutter",
    "content": "TITLE: Dart API Support Query Example\nDESCRIPTION: This code snippet demonstrates how to provide an API to query for feature support at runtime, enabling plugin clients to avoid hard-coding platform checks.  This ensures that the app can detect and use features as they become available across different platforms or plugin versions. It enhances flexibility and avoids code changes when new features are added.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n\"if (somePluginInstance.supportsDoingThing) {\\n  somePluginInstance.doThing();\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Building Flutter in Profile Mode\nDESCRIPTION: Commands for building Flutter in profile mode for Android and iOS. Profile mode is similar to release mode but enables performance profiling tools and tracing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsky/tools/gn --android --runtime-mode=profile\nsky/tools/gn --ios --runtime-mode=profile\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Hello World Example\nDESCRIPTION: Commands to navigate to the hello_world example directory and run the Flutter application. This assumes an emulator is running or a device is connected with USB debugging enabled.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/examples/Running-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Running Gradle to List Projects in Flutter Android Build\nDESCRIPTION: This command displays the project structure of a Flutter app that uses Gradle for building. It shows the root project and its subprojects, which typically include the main app and any plugins. This requires executing the \\'gradlew\\' script from the Android directory in the Flutter project.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/How-Flutter-apps-are-compiled-with-Gradle-for-Android.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./gradlew projects\n\n> Task :projects\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nRoot project 'android'\n+--- Project ':app'\n+--- Project ':bar'\n+--- Project ':baz'\n\\--- Project ':foo'\n```\n\n----------------------------------------\n\nTITLE: Running a Flutter App with Local Engine\nDESCRIPTION: This snippet is used to run a Flutter application with a locally built engine, enabling developers to test and iterate without relying on pre-built engines. It can perform builds automatically if needed.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd to/project/dir\net run\n```\n\n----------------------------------------\n\nTITLE: Registering Platform View in AppDelegate for iOS Flutter App\nDESCRIPTION: This snippet shows how to register the platform view in the AppDelegate of an iOS Flutter app. It initializes the view factory and registers it with the Flutter plugin registrar.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n#import \"AppDelegate.h\"\n#import \"FLNativeView.h\"\n#import \"GeneratedPluginRegistrant.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [GeneratedPluginRegistrant registerWithRegistry:self];\n\n   NSObject<FlutterPluginRegistrar>* registrar =\n      [self registrarForPlugin:@\"plugin-name\"];\n\n  FLNativeViewFactory* factory =\n      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];\n  [[self registrarForPlugin:@\"<plugin-name>\"] registerViewFactory:factory\n                                                          withId:@\"<platform-view-type>\"];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in pubspec.yaml\nDESCRIPTION: Package dependencies configuration for integration testing in Flutter\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  integration_test:\n    sdk: flutter\n  flutter_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Running iOS Integration Tests Locally\nDESCRIPTION: This command demonstrates how to run the built iOS integration tests on a local device. It uses xcodebuild to execute the tests without rebuilding the app.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild test-without-building \\\n  -xctestrun \"build/ios_integ/Build/Products/Runner_*.xctestrun\" \\\n  -destination id=<YOUR_DEVICE_ID>\n```\n\n----------------------------------------\n\nTITLE: Running device lab tests with a local engine\nDESCRIPTION: To run device lab tests with a locally built engine, use the `--local-engine-src-path`, `--local-engine`, and `--local-engine-host` flags. The `--local-engine-src-path` can be omitted if the local engine is in the same directory as the `flutter/` directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"../../bin/dart bin/run.dart \\\n  --local-engine-src-path=[path_to_src] \\\n  --local-engine=[engine_build_for_your_device] \\\n  --local-engine-host=[host_engine_build_for_your_device] \\\n  -t [task_name]\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"../../bin/dart bin/run.dart \\\n  --local-engine=[engine_build_for_your_device] \\\n  --local-engine-host=[host_engine_build_for_your_device] \\\n  -t [task_name]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target with the name `${BINARY_NAME}` for a WIN32 application. It lists the source files that will be compiled into the executable, including Flutter-generated and application-specific source files.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter App Commands\nDESCRIPTION: Common Flutter CLI commands for building and running the application across all platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter build\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Android and iOS in Flutter\nDESCRIPTION: This command runs the integration test file 'example_test.dart' using Flutter's drive command for Android and iOS platforms. It specifies both the driver and target test files.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive \\\n  --driver=test_driver/integration_test.dart \\\n  --target=integration_test/example_test.dart\n```\n\n----------------------------------------\n\nTITLE: Starting Chromedriver for Web Integration Tests in Flutter\nDESCRIPTION: This command starts Chromedriver on port 8444, which is necessary for running integration tests on the web platform. Chromedriver needs to be downloaded separately and run before executing the tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchromedriver --port 8444\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Tool Build - CMake\nDESCRIPTION: This snippet runs the Flutter tool's build portions, maintaining the necessary dependencies for proper Flutter application assembly. It is critical that this step is not removed to ensure the application builds correctly.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Package Dependencies Configuration in CMake\nDESCRIPTION: Configures system-level dependencies for the Flutter Linux library using PkgConfig to find GTK, GLIB, and GIO packages which are required for Linux desktop integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Updating Build Tools Version in Android Gradle for Flutter App\nDESCRIPTION: This snippet updates the Android SDK build tools and support libraries versions from 25 to 27 in the `android/app/build.gradle`, necessary for recent build environments in Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_4\n\nLANGUAGE: Gradle\nCODE:\n```\nIn `android/app/build.gradle`, replace version `25` by `27` and `25.0.3` by `27.0.3` (three places total).\n```\n\n----------------------------------------\n\nTITLE: Advanced MainActivity Java Method Channel Migration\nDESCRIPTION: Demonstrates how to update custom platform channel handling to use the new Flutter embedding API with method channel registration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n-import io.flutter.app.FlutterActivity;\n-import io.flutter.plugin.common.MethodCall;\n+import androidx.annotation.NonNull;\n+import io.flutter.embedding.android.FlutterActivity;\n+import io.flutter.embedding.engine.FlutterEngine;\n import io.flutter.plugin.common.MethodChannel;\n-import io.flutter.plugin.common.MethodChannel.MethodCallHandler;\n-import io.flutter.plugin.common.MethodChannel.Result;\n+import io.flutter.plugins.GeneratedPluginRegistrant;\n\npublic class MainActivity extends FlutterActivity {\n    private static final String CHANNEL = \"samples.flutter.dev/battery\";\n\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        GeneratedPluginRegistrant.registerWith(this);\n-        new MethodChannel(getFlutterView(), CHANNEL).setMethodCallHandler(\n-                new MethodCallHandler() {\n-                    @Override\n-                    public void onMethodCall(MethodCall call, Result result) {\n-                        // Your existing code\n-                    }\n-                });\n-    }\n+    @Override\n+    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {\n+        GeneratedPluginRegistrant.registerWith(flutterEngine);\n+        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)\n+                .setMethodCallHandler(\n+                    (call, result) -> {\n+                        // Your existing code\n+                }\n+        );\n+    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating MainActivity Kotlin Code - Simple Case\nDESCRIPTION: Updates MainActivity in Kotlin for the new Flutter Android embedding by removing manual plugin registration and updating import statements\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// MainActivity.kt\n-import android.os.Bundle\n-import io.flutter.app.FlutterActivity\n+import io.flutter.embedding.android.FlutterActivity\n-import io.flutter.plugins.GeneratedPluginRegistrant\n\nclass MainActivity: FlutterActivity() {\n-  override fun onCreate(savedInstanceState: Bundle?) {\n-    super.onCreate(savedInstanceState)\n-    GeneratedPluginRegistrant.registerWith(this)\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library\nDESCRIPTION: Sets up the Flutter application wrapper library for the runner with core and app-specific source files. Configures compilation settings and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Build Configuration - Groovy\nDESCRIPTION: These Gradle configuration updates involve changing the compile SDK version, target SDK version, and other references in build.gradle files to ensure compatibility with the new Android API version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n    // Update references in the specified files\n* `DEPS`: Change the version parameter under `flutter/android/sdk/all/${{platform}}` to the newly uploaded CIPD version tag, e.g. `'version': 'version:30r2'`\n* `tools/javadoc/gen_javadoc.py`: Bump the reference to `android-XX` in `classpath` to the latest version.\n* `tools/cipd/android_embedding_bundle/build.gradle`: Bump `compileSdkVersion XX` to the latest version.\n* `shell/platform/android/test_runner/build.gradle`: Bump `compileSdkVersion XX` to the latest version.\n* `shell/platform/android/AndroidManifest.xml`: Bump `android:targetSdkVersion=XX` to the latest version.\n* `testing/android/native_activity/native_activity.gni`: Bump the reference to `build-tools/XX` in `android_buildtools` to the latest **build-tools** version and the reference to `android-XX` in `android_jar` to the latest version.\n```\n\n----------------------------------------\n\nTITLE: Driver Script Implementation\nDESCRIPTION: Basic driver script for running integration tests\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:integration_test/integration_test_driver.dart';\n\nFuture<void> main() => integrationDriver();\n```\n\n----------------------------------------\n\nTITLE: Building Using Host Debug Configuration\nDESCRIPTION: This snippet outlines the command to build the Flutter engine using the default host debug configuration. It is useful for desktop platform development and requires a properly set up Flutter engine environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\net build\net build --config host_debug\n```\n\n----------------------------------------\n\nTITLE: Validating and Building Migrated Project\nDESCRIPTION: Ensures that the migrated project can be built for both Android and iOS. Executing `flutter build apk` and `flutter build ios` will compile the application for respective platforms, confirming successful migration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd <appname>\nflutter build apk\nflutter build ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: Defines the main executable target for a Flutter Windows application with necessary source files, build settings, and dependencies. Includes version definitions, Windows-specific configurations, and required library linkages.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Target and Dependencies\nDESCRIPTION: Sets up the main application target, including source files and dependencies. Links against Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Dart Platform View Link Implementation\nDESCRIPTION: Create a PlatformViewLink for hybrid composition on Android, managing view registration and surface creation\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final String viewType = 'hybrid-view-type';\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return PlatformViewLink(\n    viewType: viewType,\n    surfaceFactory:\n        (BuildContext context, PlatformViewController controller) {\n      return AndroidViewSurface(\n        controller: controller,\n        gestureRecognizers: const <Factory<OneSequenceGestureRecognizer>>{},\n        hitTestBehavior: PlatformViewHitTestBehavior.opaque,\n      );\n    },\n    onCreatePlatformView: (PlatformViewCreationParams params) {\n      return PlatformViewsService.initSurfaceAndroidView(\n        id: params.id,\n        viewType: viewType,\n        layoutDirection: TextDirection.ltr,\n        creationParams: creationParams,\n        creationParamsCodec: StandardMessageCodec(),\n      )\n        ..addOnPlatformViewCreatedListener(params.onPlatformViewCreated)\n        ..create();\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Integration Tests\nDESCRIPTION: This command runs Flutter integration tests. It requires a Flutter checkout and a working Android emulator or device. It uses the `flutter drive` command with `--local-engine-host` and `--local-engine` flags to specify the engine build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd $FLUTTER/dev/integration_tests/external_textures\nflutter drive \\\n  --local-engine-host=$ENGINE/out/host_debug_unopt_arm64 \\\n  --local-engine=$ENGINE/out/android_debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function for Flutter Targets\nDESCRIPTION: Creates a function that applies standard compilation settings to targets, including C++14 standard, warning flags, and optimization settings. This function centralizes common build configuration options.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Creates and configures the Flutter wrapper library for plugins, including core implementations and plugin registrar sources with appropriate compilation settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Create PerfTest for super_important_case (Dart)\nDESCRIPTION: This code snippet defines a function `createSuperImportantCasePerfE2ETest` that returns a `TaskFunction`. This TaskFunction uses `PerfTest.e2e` to define the performance test. It specifies the location of macrobenchmarks and the path to the e2e test.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n   TaskFunction createSuperImportantCasePerfE2ETest() {\n     return PerfTest.e2e(\n       '${flutterDirectory.path}/dev/benchmarks/macrobenchmarks',\n       'test/super_important_case_e2e.dart',\n     ).run;\n   }\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tools from Source\nDESCRIPTION: Command to run Flutter Tools directly from source code using dart command\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart bin/flutter_tools.dart\n```\n\n----------------------------------------\n\nTITLE: Importing Flutter Framework Libraries in Dart\nDESCRIPTION: Demonstrates how to import core Flutter framework libraries using the package:flutter namespace. Shows importing material design and platform services libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots with _flutter.screenshot Protocol\nDESCRIPTION: Captures a screenshot as PNG of a random Flutter view on the device. The returned image data is base64 encoded in the response. This extension takes no arguments and is useful for debugging and testing visual output.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Screenshot\",\n  \"screenshot\": \"<base64_data>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flutter in Debug Mode\nDESCRIPTION: Commands for building Flutter in debug mode for Android and iOS. Debug mode enables assertions, debugging information, and debugger tools while optimizing for fast development cycles.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsky/tools/gn --android\nsky/tools/gn --ios\n```\n\n----------------------------------------\n\nTITLE: Running Cull Opacity Benchmark - Flutter Shell\nDESCRIPTION: This shell script runs the cull opacity performance benchmark on a device using `flutter drive` with specified test and driver scripts. It generates the results in JSON files located in the build directory. Requires Flutter to be installed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile -t test_driver/run_app.dart --driver test_driver/cull_opacity_perf_test.dart\n```\n\n----------------------------------------\n\nTITLE: Running Java Unit Tests with Robolectric and JUnit in Flutter\nDESCRIPTION: A detailed guide for setting up unit tests for Java code using Robolectric 4.12.1 and JUnit 4 within the Flutter engine environment. The process involves creating test files, including them in the build, and running tests with specific commands. Dependencies include a properly set up Java environment and knowledge of both the Flutter engine structure and testing commands. The expected outcome is successfully executed tests with available console logs for debugging. Issues such as 'ClassNotFoundException' and import errors are addressed with references to additional resources.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n# Unit testing Java code\n\nAll Java code in the engine should now be able to be tested with Robolectric 4.12.1\nand JUnit 4. The test suite has been added after the bulk of the Java code was\nfirst written, so most of these classes do not have existing tests. Ideally code\nafter this point should be tested, either with unit tests here or with\nintegration tests in other repos.\n\n## Adding a new test\n\n1. Create a file under `test/` matching the path and name of the class under\ntest. For example,\n`shell/platform/android/io/flutter/util/Preconditions.java` ->\n`shell/platform/android/**test**/io/flutter/util/Preconditions**Test**.java`.\n2. Add your file to the `sources` of the `robolectric_tests` build target in\n`/shell/platform/android/BUILD.gn`. This compiles the test class into the\ntest jar.\n3. Import your test class and add it to the `@SuiteClasses` annotation in\n`FlutterTestSuite.java`. This makes sure the test is actually executed at\nrun time.\n4. Write your test.\n5. Build and run with `testing/run_tests.py [--type=java] [--java-filter=<test_class_name>]`.\n\nExample: from engine/src/flutter on a Mac\n`et build -c android_debug_unopt_arm64`\n`testing/run_tests.py --android-variant=android_debug_unopt_arm64 --type=java --java-filter=io.flutter.embedding.android.FlutterViewTest`\n\nNote that `testing/run_tests.py` does not build the engine binaries; instead they\nshould be built prior to running this command and also when the source files\nchange. See [Compiling the engine](https://github.com/flutter/flutter/wiki/Compiling-the-engine)\nfor details on how to do so.\n\n## Q&A\n\n### My new test won't run. There's a \"ClassNotFoundException\".\n\nSee [Updating Embedding Dependencies](/tools/cipd/android_embedding_bundle).\n\n### My new test won't compile. It can't find one of my imports.\n\nSee [Updating Embedding Dependencies](/tools/cipd/android_embedding_bundle).\n\n### My test does not show log output in the console\n\nImport `org.robolectric.shadows.ShadowLog;` then\nUse `ShadowLog.stream = System.out;` in your test or setup method.\n\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Module with CLI\nDESCRIPTION: Command to generate a new Flutter module using Flutter's create command with module template\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/module_host_with_custom_build_v2_embedding/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ flutter create -t module hello\n```\n\n----------------------------------------\n\nTITLE: Starting Fuchsia Package Server\nDESCRIPTION: This snippet navigates to the Fuchsia directory and starts the package server, which is necessary for running unit tests locally.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd \"$FUCHSIA_DIR\"\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Building Flutter in Test Mode\nDESCRIPTION: Command for building Flutter in headless test mode for desktop platforms. Test mode is similar to debug mode but runs headless on desktop.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsky/tools/gn\n```\n\n----------------------------------------\n\nTITLE: Generating Localizations Command\nDESCRIPTION: Commands for generating and updating localization files using the gen_localizations script.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ndart dev/tools/localization/bin/gen_localizations.dart\n\ndart dev/tools/localization/bin/gen_localizations.dart --overwrite\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Framework Tests\nDESCRIPTION: This shell command executes Flutter framework tests within the `flutter/flutter` repository. It assumes that the `flutter` and `engine` directories are siblings and uses the `flutter test` command with the `--local-engine` and `--local-engine-host` flags to specify the engine build to use for testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"(cd packages/flutter; ../../bin/flutter test --local-engine=host_debug_unopt --local-engine-host=host_debug_unopt)\"\n```\n\n----------------------------------------\n\nTITLE: Running Startup Benchmark using Flutter CLI\nDESCRIPTION: This shell command measures startup time on a device in profile mode, outputting the trace of startup events. The main logs display the results, with additional details saved in a JSON file. Requires Flutter installed and a connected device.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter run --profile --trace-startup\n```\n\n----------------------------------------\n\nTITLE: Finding Vulkan Package\nDESCRIPTION: Finds the Vulkan package and sets include directories and link libraries. It utilizes the `find_package` command to locate the Vulkan SDK, then configures include directories and link libraries for the executable target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Vulkan REQUIRED)\ntarget_include_directories(${EXE_NAME} PRIVATE ${Vulkan_INCLUDE_DIRS})\ntarget_link_libraries(${EXE_NAME} PRIVATE Vulkan::Vulkan)\n```\n\n----------------------------------------\n\nTITLE: Performing Saturated Arithmetic Type Conversions in C++\nDESCRIPTION: The `saturated_cast` template converts between arithmetic types, saturating the result to the destination type's maximum or minimum value if the source is out of bounds. The example shows casting to a smaller type and converting from floating-point to integer with saturation to `INT_MAX`, `INT_MIN`, or 0 for NaN.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Cast to a smaller type, saturating as needed.\nint8_t eight_bit_value = saturated_cast<int8_t>(int_value);\n\n// Convert from float with saturation to INT_MAX, INT_MIN, or 0 for NaN.\nint int_value = saturated_cast<int>(floating_point_value);\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard\nDESCRIPTION: Specifies the C++ standard to be used for compilation. This ensures that the code is compiled using the C++17 standard.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Method\nDESCRIPTION: Command to run a specific test method in a test class using fully qualified class name and method name\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test --tests \"com.flutter.gradle.BaseApplicationNameHandlerTest.setBaseName respects Flutter tool property\"\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter packages\nDESCRIPTION: This command recursively fetches all the Dart packages that Flutter depends on. This ensures that the Flutter project has all the necessary dependencies for building and running applications.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"flutter update-packages\"\n```\n\n----------------------------------------\n\nTITLE: Unicode ALetter Classification Data for Text Processing\nDESCRIPTION: This code snippet defines Unicode code point ranges categorized as 'ALetter', which identifies characters that can be used in words or identifiers. Each line specifies a range of Unicode points followed by a comment indicating the character type (like Lo, L&, Nl) and the count of characters in that range, along with descriptive names of the first and last characters in the range.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\nFB50..FBB1    ; ALetter # Lo  [98] ARABIC LETTER ALEF WASLA ISOLATED FORM..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM\nFBD3..FD3D    ; ALetter # Lo [363] ARABIC LETTER NG ISOLATED FORM..ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM\nFD50..FD8F    ; ALetter # Lo  [64] ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM..ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM\nFD92..FDC7    ; ALetter # Lo  [54] ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM..ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM\nFDF0..FDFB    ; ALetter # Lo  [12] ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM..ARABIC LIGATURE JALLAJALALOUHOU\nFE70..FE74    ; ALetter # Lo   [5] ARABIC FATHATAN ISOLATED FORM..ARABIC KASRATAN ISOLATED FORM\nFE76..FEFC    ; ALetter # Lo [135] ARABIC FATHA ISOLATED FORM..ARABIC LIGATURE LAM WITH ALEF FINAL FORM\nFF21..FF3A    ; ALetter # L&  [26] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER Z\nFF41..FF5A    ; ALetter # L&  [26] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER Z\nFFA0..FFBE    ; ALetter # Lo  [31] HALFWIDTH HANGUL FILLER..HALFWIDTH HANGUL LETTER HIEUH\nFFC2..FFC7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER A..HALFWIDTH HANGUL LETTER E\nFFCA..FFCF    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YEO..HALFWIDTH HANGUL LETTER OE\nFFD2..FFD7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YO..HALFWIDTH HANGUL LETTER YU\nFFDA..FFDC    ; ALetter # Lo   [3] HALFWIDTH HANGUL LETTER EU..HALFWIDTH HANGUL LETTER I\n10000..1000B  ; ALetter # Lo  [12] LINEAR B SYLLABLE B008 A..LINEAR B SYLLABLE B046 JE\n1000D..10026  ; ALetter # Lo  [26] LINEAR B SYLLABLE B036 JO..LINEAR B SYLLABLE B032 QO\n10028..1003A  ; ALetter # Lo  [19] LINEAR B SYLLABLE B060 RA..LINEAR B SYLLABLE B042 WO\n1003C..1003D  ; ALetter # Lo   [2] LINEAR B SYLLABLE B017 ZA..LINEAR B SYLLABLE B074 ZE\n1003F..1004D  ; ALetter # Lo  [15] LINEAR B SYLLABLE B020 ZO..LINEAR B SYLLABLE B091 TWO\n10050..1005D  ; ALetter # Lo  [14] LINEAR B SYMBOL B018..LINEAR B SYMBOL B089\n10080..100FA  ; ALetter # Lo [123] LINEAR B IDEOGRAM B100 MAN..LINEAR B IDEOGRAM VESSEL B305\n10140..10174  ; ALetter # Nl  [53] GREEK ACROPHONIC ATTIC ONE QUARTER..GREEK ACROPHONIC STRATIAN FIFTY MNAS\n10280..1029C  ; ALetter # Lo  [29] LYCIAN LETTER A..LYCIAN LETTER X\n10300..1031F  ; ALetter # Lo  [32] OLD ITALIC LETTER A..OLD ITALIC LETTER ESS\n1032D..10340  ; ALetter # Lo  [20] OLD ITALIC LETTER YE..GOTHIC LETTER PAIRTHRA\n10341         ; ALetter # Nl       GOTHIC LETTER NINETY\n10342..10349  ; ALetter # Lo   [8] GOTHIC LETTER RAIDA..GOTHIC LETTER OTHAL\n1034A         ; ALetter # Nl       GOTHIC LETTER NINE HUNDRED\n10350..10375  ; ALetter # Lo  [38] OLD PERMIC LETTER AN..OLD PERMIC LETTER IA\n10380..1039D  ; ALetter # Lo  [30] UGARITIC LETTER ALPA..UGARITIC LETTER SSU\n103A0..103C3  ; ALetter # Lo  [36] OLD PERSIAN SIGN A..OLD PERSIAN SIGN HA\n103C8..103CF  ; ALetter # Lo   [8] OLD PERSIAN SIGN AURAMAZDAA..OLD PERSIAN SIGN BUUMISH\n103D1..103D5  ; ALetter # Nl   [5] OLD PERSIAN NUMBER ONE..OLD PERSIAN NUMBER HUNDRED\n10400..1044F  ; ALetter # L&  [80] DESERET CAPITAL LETTER LONG I..DESERET SMALL LETTER EW\n10450..1049D  ; ALetter # Lo  [78] SHAVIAN LETTER PEEP..OSMANYA LETTER OO\n104B0..104D3  ; ALetter # L&  [36] OSAGE CAPITAL LETTER A..OSAGE CAPITAL LETTER ZHA\n104D8..104FB  ; ALetter # L&  [36] OSAGE SMALL LETTER A..OSAGE SMALL LETTER ZHA\n10500..10527  ; ALetter # Lo  [40] ELBASAN LETTER A..ELBASAN LETTER KHE\n10530..10563  ; ALetter # Lo  [52] CAUCASIAN ALBANIAN LETTER ALT..CAUCASIAN ALBANIAN LETTER KIW\n10600..10736  ; ALetter # Lo [311] LINEAR A SIGN AB001..LINEAR A SIGN A664\n10740..10755  ; ALetter # Lo  [22] LINEAR A SIGN A701 A..LINEAR A SIGN A732 JE\n10760..10767  ; ALetter # Lo   [8] LINEAR A SIGN A800..LINEAR A SIGN A807\n10800..10805  ; ALetter # Lo   [6] CYPRIOT SYLLABLE A..CYPRIOT SYLLABLE JA\n10808         ; ALetter # Lo       CYPRIOT SYLLABLE JO\n1080A..10835  ; ALetter # Lo  [44] CYPRIOT SYLLABLE KA..CYPRIOT SYLLABLE WO\n10837..10838  ; ALetter # Lo   [2] CYPRIOT SYLLABLE XA..CYPRIOT SYLLABLE XE\n1083C         ; ALetter # Lo       CYPRIOT SYLLABLE ZA\n1083F..10855  ; ALetter # Lo  [23] CYPRIOT SYLLABLE ZO..IMPERIAL ARAMAIC LETTER TAW\n10860..10876  ; ALetter # Lo  [23] PALMYRENE LETTER ALEPH..PALMYRENE LETTER TAW\n10880..1089E  ; ALetter # Lo  [31] NABATAEAN LETTER FINAL ALEPH..NABATAEAN LETTER TAW\n108E0..108F2  ; ALetter # Lo  [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH\n108F4..108F5  ; ALetter # Lo   [2] HATRAN LETTER SHIN..HATRAN LETTER TAW\n10900..10915  ; ALetter # Lo  [22] PHOENICIAN LETTER ALF..PHOENICIAN LETTER TAU\n10920..10939  ; ALetter # Lo  [26] LYDIAN LETTER A..LYDIAN LETTER C\n10980..109B7  ; ALetter # Lo  [56] MEROITIC HIEROGLYPHIC LETTER A..MEROITIC CURSIVE LETTER DA\n109BE..109BF  ; ALetter # Lo   [2] MEROITIC CURSIVE LOGOGRAM RMT..MEROITIC CURSIVE LOGOGRAM IMN\n10A00         ; ALetter # Lo       KHAROSHTHI LETTER A\n10A10..10A13  ; ALetter # Lo   [4] KHAROSHTHI LETTER KA..KHAROSHTHI LETTER GHA\n10A15..10A17  ; ALetter # Lo   [3] KHAROSHTHI LETTER CA..KHAROSHTHI LETTER JA\n10A19..10A35  ; ALetter # Lo  [29] KHAROSHTHI LETTER NYA..KHAROSHTHI LETTER VHA\n10A60..10A7C  ; ALetter # Lo  [29] OLD SOUTH ARABIAN LETTER HE..OLD SOUTH ARABIAN LETTER THETH\n10A80..10A9C  ; ALetter # Lo  [29] OLD NORTH ARABIAN LETTER HEH..OLD NORTH ARABIAN LETTER ZAH\n10AC0..10AC7  ; ALetter # Lo   [8] MANICHAEAN LETTER ALEPH..MANICHAEAN LETTER WAW\n10AC9..10AE4  ; ALetter # Lo  [28] MANICHAEAN LETTER ZAYIN..MANICHAEAN LETTER TAW\n10B00..10B35  ; ALetter # Lo  [54] AVESTAN LETTER A..AVESTAN LETTER HE\n10B40..10B55  ; ALetter # Lo  [22] INSCRIPTIONAL PARTHIAN LETTER ALEPH..INSCRIPTIONAL PARTHIAN LETTER TAW\n10B60..10B72  ; ALetter # Lo  [19] INSCRIPTIONAL PAHLAVI LETTER ALEPH..INSCRIPTIONAL PAHLAVI LETTER TAW\n10B80..10B91  ; ALetter # Lo  [18] PSALTER PAHLAVI LETTER ALEPH..PSALTER PAHLAVI LETTER TAW\n10C00..10C48  ; ALetter # Lo  [73] OLD TURKIC LETTER ORKHON A..OLD TURKIC LETTER ORKHON BASH\n10C80..10CB2  ; ALetter # L&  [51] OLD HUNGARIAN CAPITAL LETTER A..OLD HUNGARIAN CAPITAL LETTER US\n10CC0..10CF2  ; ALetter # L&  [51] OLD HUNGARIAN SMALL LETTER A..OLD HUNGARIAN SMALL LETTER US\n10D00..10D23  ; ALetter # Lo  [36] HANIFI ROHINGYA LETTER A..HANIFI ROHINGYA MARK NA KHONNA\n10E80..10EA9  ; ALetter # Lo  [42] YEZIDI LETTER ELIF..YEZIDI LETTER ET\n10EB0..10EB1  ; ALetter # Lo   [2] YEZIDI LETTER LAM WITH DOT ABOVE..YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE\n10F00..10F1C  ; ALetter # Lo  [29] OLD SOGDIAN LETTER ALEPH..OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL\n10F27         ; ALetter # Lo       OLD SOGDIAN LIGATURE AYIN-DALETH\n10F30..10F45  ; ALetter # Lo  [22] SOGDIAN LETTER ALEPH..SOGDIAN INDEPENDENT SHIN\n10FB0..10FC4  ; ALetter # Lo  [21] CHORASMIAN LETTER ALEPH..CHORASMIAN LETTER TAW\n10FE0..10FF6  ; ALetter # Lo  [23] ELYMAIC LETTER ALEPH..ELYMAIC LIGATURE ZAYIN-YODH\n11003..11037  ; ALetter # Lo  [53] BRAHMI SIGN JIHVAMULIYA..BRAHMI LETTER OLD TAMIL NNNA\n11083..110AF  ; ALetter # Lo  [45] KAITHI LETTER A..KAITHI LETTER HA\n110D0..110E8  ; ALetter # Lo  [25] SORA SOMPENG LETTER SAH..SORA SOMPENG LETTER MAE\n11103..11126  ; ALetter # Lo  [36] CHAKMA LETTER AA..CHAKMA LETTER HAA\n11144         ; ALetter # Lo       CHAKMA LETTER LHAA\n11147         ; ALetter # Lo       CHAKMA LETTER VAA\n11150..11172  ; ALetter # Lo  [35] MAHAJANI LETTER A..MAHAJANI LETTER RRA\n11176         ; ALetter # Lo       MAHAJANI LIGATURE SHRI\n11183..111B2  ; ALetter # Lo  [48] SHARADA LETTER A..SHARADA LETTER HA\n111C1..111C4  ; ALetter # Lo   [4] SHARADA SIGN AVAGRAHA..SHARADA OM\n111DA         ; ALetter # Lo       SHARADA EKAM\n111DC         ; ALetter # Lo       SHARADA HEADSTROKE\n11200..11211  ; ALetter # Lo  [18] KHOJKI LETTER A..KHOJKI LETTER JJA\n11213..1122B  ; ALetter # Lo  [25] KHOJKI LETTER NYA..KHOJKI LETTER LLA\n11280..11286  ; ALetter # Lo   [7] MULTANI LETTER A..MULTANI LETTER GA\n11288         ; ALetter # Lo       MULTANI LETTER GHA\n1128A..1128D  ; ALetter # Lo   [4] MULTANI LETTER CA..MULTANI LETTER JJA\n1128F..1129D  ; ALetter # Lo  [15] MULTANI LETTER NYA..MULTANI LETTER BA\n1129F..112A8  ; ALetter # Lo  [10] MULTANI LETTER BHA..MULTANI LETTER RHA\n112B0..112DE  ; ALetter # Lo  [47] KHUDAWADI LETTER A..KHUDAWADI LETTER HA\n11305..1130C  ; ALetter # Lo   [8] GRANTHA LETTER A..GRANTHA LETTER VOCALIC L\n1130F..11310  ; ALetter # Lo   [2] GRANTHA LETTER EE..GRANTHA LETTER AI\n11313..11328  ; ALetter # Lo  [22] GRANTHA LETTER OO..GRANTHA LETTER NA\n1132A..11330  ; ALetter # Lo   [7] GRANTHA LETTER PA..GRANTHA LETTER RA\n11332..11333  ; ALetter # Lo   [2] GRANTHA LETTER LA..GRANTHA LETTER LLA\n11335..11339  ; ALetter # Lo   [5] GRANTHA LETTER VA..GRANTHA LETTER HA\n1133D         ; ALetter # Lo       GRANTHA SIGN AVAGRAHA\n11350         ; ALetter # Lo       GRANTHA OM\n1135D..11361  ; ALetter # Lo   [5] GRANTHA SIGN PLUTA..GRANTHA LETTER VOCALIC LL\n11400..11434  ; ALetter # Lo  [53] NEWA LETTER A..NEWA LETTER HA\n11447..1144A  ; ALetter # Lo   [4] NEWA SIGN AVAGRAHA..NEWA SIDDHI\n1145F..11461  ; ALetter # Lo   [3] NEWA LETTER VEDIC ANUSVARA..NEWA SIGN UPADHMANIYA\n11480..114AF  ; ALetter # Lo  [48] TIRHUTA ANJI..TIRHUTA LETTER HA\n114C4..114C5  ; ALetter # Lo   [2] TIRHUTA SIGN AVAGRAHA..TIRHUTA GVANG\n114C7         ; ALetter # Lo       TIRHUTA OM\n11580..115AE  ; ALetter # Lo  [47] SIDDHAM LETTER A..SIDDHAM LETTER HA\n115D8..115DB  ; ALetter # Lo   [4] SIDDHAM LETTER THREE-CIRCLE ALTERNATE I..SIDDHAM LETTER ALTERNATE U\n11600..1162F  ; ALetter # Lo  [48] MODI LETTER A..MODI LETTER LLA\n11644         ; ALetter # Lo       MODI SIGN HUVA\n11680..116AA  ; ALetter # Lo  [43] TAKRI LETTER A..TAKRI LETTER RRA\n116B8         ; ALetter # Lo       TAKRI LETTER ARCHAIC KHA\n11800..1182B  ; ALetter # Lo  [44] DOGRA LETTER A..DOGRA LETTER RRA\n118A0..118DF  ; ALetter # L&  [64] WARANG CITI CAPITAL LETTER NGAA..WARANG CITI SMALL LETTER VIYO\n118FF..11906  ; ALetter # Lo   [8] WARANG CITI OM..DIVES AKURU LETTER E\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: Declares the project name and specifies the programming languages used.  Here the project name is `runner` and it uses `CXX` for C++.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Undefined Behavior Sanitizer Tests\nDESCRIPTION: This set of commands illustrates how to build Flutter Engine with Undefined Behavior Sanitizer enabled and run the embedder unit tests with appropriate suppressions.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./flutter/tools/gn --runtime-mode debug --ubsan --unoptimized --no-goma\n$ autoninja -C out/host_debug_unopt\n$ source ./flutter/testing/sanitizer_suppressions.sh\n$ ./out/host_debug_unopt/embedder_unittests\n```\n\n----------------------------------------\n\nTITLE: Performing Checked Arithmetic Type Conversions in C++\nDESCRIPTION: The `checked_cast` template is used to convert between arbitrary arithmetic types. If the conversion fails (e.g., overflow), the program terminates. This snippet demonstrates how to convert a signed value to a `size_t` and crash if the signed value is out of range.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Crash if signed_value is out of range for buff_size.\nsize_t buff_size = checked_cast<size_t>(signed_value);\n```\n\n----------------------------------------\n\nTITLE: Regenerating Mocks with Mockito\nDESCRIPTION: This snippet outlines the command necessary to regenerate mocks for unit tests in Flutter packages using Mockito. The command utilizes the build_runner package and ensures any conflicting outputs are deleted in the process.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ dart run build_runner build --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests with Android Variant\nDESCRIPTION: These commands execute C++ and Java unit tests for the Android embedder with a specific Android variant. This allows testing against different build configurations like `android_debug_unopt_arm64`. The script uses the `--type android` and `--android-variant` options.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./testing/run_tests.py --type android --android-variant android_debug_unopt_arm64\n```\n\nLANGUAGE: Shell\nCODE:\n```\n./testing/run_tests.py --type java --android-variant android_debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Manual Cherry-pick Git Commands\nDESCRIPTION: Step-by-step Git commands for performing a manual cherry-pick across release branches. These commands help developers create a cherry-pick branch, select a specific commit, and push changes.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-Cherrypick-Process.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <master/main>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <candidate branch you want to cherry-pick to>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <your local branch name for cherry-picking>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick <your commit hash>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --set-upstream origin <your branch name>\n```\n\n----------------------------------------\n\nTITLE: Running the Token Defaults Generator Script in Flutter\nDESCRIPTION: This shell command runs the Dart script responsible for generating default component themes based on token data. Designed for execution from the root of the repository, it updates the 'generated/used_tokens.csv' and various theme files. The script requires Dart installed and access to the Flutter project's root directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_defaults/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart dev/tools/gen_defaults/bin/gen_defaults.dart [-v]\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration for Flutter Application\nDESCRIPTION: Configures installation rules for the Flutter application, including copying runtime components, assets, and libraries to the installation directory\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the build bundle. The Flutter library contains the core Flutter runtime and rendering engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining a Change - YAML\nDESCRIPTION: This YAML snippet illustrates how to define a change with the kind of change specified, in this case, indicating the addition of a parameter to a function or method, including relevant details for implementation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'addParameter'\nindex: 0\nname: 'a'\nstyle: optional_positional\nargumentValue: ...\n```\n\n----------------------------------------\n\nTITLE: Incident Response Log Snippet\nDESCRIPTION: This Discord log snippet captures a real-time conversation among Flutter developers and infrastructure engineers regarding a potential false positive malware detection.  The discussion includes steps to reproduce the issue, verify file integrity, and investigate the build process.  Key aspects include coordinating responses, identifying affected files, and checking for compromised build environments.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/Postmortem-Windows-Defender-alert-on-2023-03-26.md#2025-04-21_snippet_0\n\nLANGUAGE: discord\nCODE:\n```\n\"[1:04 PM]Hixie: @Drewroen @Greg Spencer (gspencergoog) @timsneath let's coordinate here so we're not all speaking in different venues\\n[1:04 PM]Hixie: current issue is https://github.com/flutter/flutter/issues/123519\\n[1:05 PM]Hixie: greg and/or drew are you able to upload the affected file to the site tim gave?\\n[1:21 PM]Greg Spencer (gspencergoog): I would, but I'm not sure how to sign in. Am I an \\\"enterprise customer\\\", or a \\\"software developer\\\"? Apparently you have to sign in to a Microsoft account before submitting it, and I'm not sure what account is the correct one to use (Is it OK to associate my @google.com account with my GitHub account for MS login?, Should I use a personal GitHub account?, etc.)\\n[1:37 PM]Greg Spencer (gspencergoog): Okay, I figured out how to log in.\\n[1:43 PM]Greg Spencer (gspencergoog): I've submitted it, but it's unclear when we'll get a response. I submitted it at \\\"normal\\\" priority because I didn't have the necessary ID numbers to submit it with Google enterprise credentials to get a higher priority.\\n[1:44 PM]Hixie: sounds good, can you update the issue as well?\\n[1:44 PM]Hixie: and thanks for your help here\\n[1:44 PM]Greg Spencer (gspencergoog): Yes.\\n[1:44 PM]Greg Spencer (gspencergoog): No problem.\\n[1:45 PM]Drewroen: (Catching up now, had a meeting) Thank you for submitting, @Greg Spencer (gspencergoog)!\\n[1:48 PM]Hixie: @Greg Spencer (gspencergoog) do you get anything useful if you upload the file to https://www.virustotal.com/gui/home/upload ?\\n[2:18 PM]Greg Spencer (gspencergoog): No, it doesn't detect any threats.\\n[2:19 PM]Greg Spencer (gspencergoog): I'm trying to figure out how to download previous versions of the gen_snapshot tool and see if they too trigger the quarantine.\\n[2:20 PM]Greg Spencer (gspencergoog): Anyone know how to find out the hash on the flutter_infra_release gcs instance for a previous release?\\n[2:23 PM]Greg Spencer (gspencergoog): Is it just the full github hash for the release? (You'd think I'd know this: I think I wrote it originally! I just can't remember)\\n[2:33 PM]Greg Spencer (gspencergoog): What is the \\\"windows-x64.zip\\\" file from?  Is that from a Dart distro?\\n[2:33 PM]Drewroen: Maybe there's a simpler way, but I found the release commit for flutter/flutter for 3.7.7, then got the engine version from https://github.com/flutter/flutter/blob/2ad6cd72c040113b47ee9055e722606a490ef0da/bin/internal/engine.version and used that hash in the storage.googleapis url\\n\\nLong story short, this should be the engine artifact for the 3.7.7 windows stable: https://storage.googleapis.com/flutter_infra_release/flutter/1837b5be5f0f1376a1ccf383950e83a80177fb4e/android-x64-release/windows-x64.zip\\n[2:33 PM]Greg Spencer (gspencergoog): The Flutter version seems to be windows-x64-flutter.zip, and doesn't appear to have the problem (at least in the latest master build)\\n[2:34 PM]Greg Spencer (gspencergoog): Ahh, so it's in an Engine build.\\n[2:36 PM]Greg Spencer (gspencergoog): OK, so that 3.7.7 binary doesn't seem to trigger the quarantine.\\n[2:40 PM]Hixie: do we have any way to check if the machine on which we did the builds is compromised?\\n[2:40 PM]Hixie: cc @Godofredo Contreras (godofredoc)\\n[2:45 PM]Greg Spencer (gspencergoog): Actually, I just tried unpacking the original windows-x64.zip file that triggered the quarantine before, and it no longer flags the file.  As far as I know, it's the same file I unpacked before, and the same zip file I uploaded to MS for analysis.\\n[2:45 PM]Greg Spencer (gspencergoog): Perhaps they've updated their cloud definitions and corrected an incorrect definition?\\n[2:46 PM]Greg Spencer (gspencergoog): I haven't updated my local definitions, so it would have to be something online.\\n[3:05 PM]Godofredo Contreras (godofredoc): @Hixie those are ephemeral VMs recycled every 24 hours. There is no way to access it.\\n[3:06 PM]Godofredo Contreras (godofredoc): Let me get the builder that file was generated on, if the machine was compromised I'd expect all the other artifacts from the same build to also be infected\\n[3:08 PM]Godofredo Contreras (godofredoc): @Greg Spencer (gspencergoog) that's correct only prod service accounts and release engineers have access to update artifacts. I would not expect the file to be updated but we can check our trail logs just in case\\n[3:09 PM]Greg Spencer (gspencergoog): I completely agree. Also, the same file I originally downloaded earlier today no longer triggers it, and it is identical to the one I just downloaded now (same sha256sum).\\n[3:10 PM]Greg Spencer (gspencergoog): So I think we can rule out someone replacing the file with an innocuous one.\\n[3:11 PM]Greg Spencer (gspencergoog): The submission to MS is still \\\"pending\\\".\\n[3:13 PM]Greg Spencer (gspencergoog): My money is on MS Defender just falsely flagging the file, and them updating their definitions.\\n[3:15 PM]Hixie: that does seem most likely, but i would hate for us to assume that is the case and then later find it isn't :-)\\n[3:15 PM]Greg Spencer (gspencergoog): Oh, definitely!\\n[3:15 PM]Greg Spencer (gspencergoog): I haven't closed the issue yet. :-)\\n[3:16 PM]Hixie: @Godofredo Contreras (godofredoc)  if we rerun the build, do we get the same bits? it'd be a good test of our reproducible builds logic if we have it yet :-)\\n[3:18 PM]Godofredo Contreras (godofredoc): not sure, but let me give it a try\\n[4:40 PM]Hixie: @Godofredo Contreras (godofredoc) any luck?\\n[4:56 PM]Godofredo Contreras (godofredoc): The build has not finished yet, I'm using https://ci.chromium.org/p/flutter/builders/prod/Windows%20Host%20Engine/21257\\n[4:58 PM]Godofredo Contreras (godofredoc): I'll validate using this artifact https://storage.cloud.google.com/flutter_infra_release/flutter/8cb080365fb189a1e5d1e33a991518f2422e319b/dart-sdk-windows-x64.zip\\n[4:59 PM]Greg Spencer (gspencergoog): Can anyone else with a Windows machine reproduce the quarantine that used to happen if you download and unpack https://storage.googleapis.com/flutter_infra_release/flutter/685fbc6f4d9db8026c56ee1a177bb10cc09f884b/android-x64-release/windows-x64.zip ?\\n[5:00 PM]Greg Spencer (gspencergoog): It's not happening for me anymore.\\n[5:00 PM]Godofredo Contreras (godofredoc): let me check on my windows pc\\n[5:00 PM]Godofredo Contreras (godofredoc): @Greg Spencer (gspencergoog) which win OS are you using?\\n[5:00 PM]Greg Spencer (gspencergoog): Windows 11\\n[5:01 PM]Godofredo Contreras (godofredoc): ok, my computer is windows 10\\n[5:01 PM]Greg Spencer (gspencergoog): But I think the build servers are running Windows 10, right? And they saw the same issue.\\n[5:02 PM]Godofredo Contreras (godofredoc): yes, they are using win 10\\n[5:07 PM]Godofredo Contreras (godofredoc): were you getting the error when downloading? or when extracting?\\n[5:08 PM]Greg Spencer (gspencergoog): After extracting the zip file.\\n[5:08 PM]Greg Spencer (gspencergoog): It quarantined the gen_snapshot.exe file.\\n[5:10 PM]Godofredo Contreras (godofredoc): new behavior with downloads?\\n[5:11 PM]Godofredo Contreras (godofredoc): after downloading and extracting I get a blue window with message \\\"Microsoft defender smartscreen prevented an unrecognized app from starting\\\"\\n[5:12 PM]Godofredo Contreras (godofredoc): more info -> App: gen_snapshot.exe publisher: unknown publisher\\n[5:12 PM]Godofredo Contreras (godofredoc): with the option run anyway and don't run\\n[5:13 PM]Godofredo Contreras (godofredoc): I wonder if they started forcing | will start enforcing app signing\\n[5:15 PM]Godofredo Contreras (godofredoc): do you know how the flutter tool downloads binaries in win?\\n[5:16 PM]Godofredo Contreras (godofredoc): @Hixie https://luci-milo.appspot.com/raw/build/logs.chromium.org/flutter/led/godofredoc_google.com/9d161b36a3996876610f0a49660b9e0fd37f7e43881c33f17aa9fa0f5ec277f8/+/build.proto, I'll validate hashes once the build is complete\\n[5:31 PM]Greg Spencer (gspencergoog): It also might vary according to the system configuration. Mine is a stock Windows 11 install, not a corp machine.\\n[5:34 PM]Godofredo Contreras (godofredoc): mine is a win 10 with stock windows\\n[5:40 PM]Godofredo Contreras (godofredoc): Confirmed our builds are not replicable, sha for the test file in GCS 873d80acf1855733ce11a5b569859b6bc803ee38035cfb3491c0e3748544a48e and the one generated from a rebuild using the same build configs 57573123fff2713032b31cd8d99e30e79c0452516a54388c7aa237b8da1890b4\\n[5:41 PM]Hixie: that could mean the first one was bad or, more likely, that we just haven't managed to get replicable builds yet, right?\\n[5:45 PM]Godofredo Contreras (godofredoc): I used a build from a couple of hours ago for the validation, the two builds are correct\\n[5:46 PM]Godofredo Contreras (godofredoc): is just that we may use some compilation/linker flags that impacts replicability or maybe we are using timestamps somewhere in the build system\\n[5:46 PM]Godofredo Contreras (godofredoc): I haven't validate it yet the logs for the artifact, but let me do that\\n[5:49 PM]Hixie: does the new version also trigger windows defender?\\n[5:51 PM]Godofredo Contreras (godofredoc): In my windows machine it consistently blocks the execution on any binaries downloaded from the internet, until I explicitly allow them to run\\n[6:09 PM]Godofredo Contreras (godofredoc): AI: document how to audit GCS logs\\n[6:21 PM]Godofredo Contreras (godofredoc): There is a single log: event=storage.objects.create\\n[6:21 PM]Godofredo Contreras (godofredoc): timestamp: \\\"2023-03-24T22:19:48.210794479Z\\\"\\n[6:22 PM]Godofredo Contreras (godofredoc): auth: \\\"flutter-prod-builder@chops-service-accounts.iam.gserviceaccount.com\\\"\\n[6:31 PM]Godofredo Contreras (godofredoc): ok, rewinding everything to use the right data\\n[6:32 PM]Godofredo Contreras (godofredoc): Stable - 3.7.7 was https://github.com/flutter/flutter/commit/2ad6cd72c040113b47ee9055e722606a490ef0da\\n[6:32 PM]Godofredo Contreras (godofredoc): which is using engine 1837b5be5f0f1376a1ccf383950e83a80177fb4e\"\n```\n\n----------------------------------------\n\nTITLE: Test Package Description in Markdown\nDESCRIPTION: README file describing the purpose of the test package for Flutter widget interactions between Material and Cupertino design systems.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test/cupertino/material/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Tests for the Cupertino+Material mixed usages\n\nIn this package, we test for interactions between Material and Cupertino\nwidgets.\n```\n\n----------------------------------------\n\nTITLE: Building Flutter in Release Mode\nDESCRIPTION: Commands for building Flutter in release mode for Android and iOS. Release mode disables assertions and debugging tools while optimizing for performance and package size.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsky/tools/gn --android --runtime-mode=release\nsky/tools/gn --ios --runtime-mode=release\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Version Check\nDESCRIPTION: Command to verify Dart SDK and other artifacts are available by checking Flutter version\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter --version\n```\n\n----------------------------------------\n\nTITLE: Migrating MainActivity Java Code - Simple Case\nDESCRIPTION: Updates MainActivity for the new Flutter Android embedding by removing manual plugin registration and updating import statements\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// MainActivity.java\n-import android.os.Bundle;\n-import io.flutter.app.FlutterActivity;\n+import io.flutter.embedding.android.FlutterActivity;\n-import io.flutter.plugins.GeneratedPluginRegistrant;\n\npublic class MainActivity extends FlutterActivity {\n-  @Override\n-  protected void onCreate(Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    GeneratedPluginRegistrant.registerWith(this);\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter Project\nDESCRIPTION: This CMake setup defines build modes and compilation settings for a Flutter application. Dependencies include the CMake toolchain and Flutter SDK. Key parameters include `CMAKE_BUILD_TYPE` for setting the build mode and `CMAKE_INSTALL_PREFIX` for specifying installation paths. The script manages Flutter library and plugin build rules, adjusting linker and compiler flags as needed. It primarily supports Debug, Profile, and Release configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dartpad_curve2_d_0 LANGUAGES CXX)\n\nset(BINARY_NAME \"dartpad_curve2_d_0\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\nthem to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter Gallery Project\nDESCRIPTION: This code snippet sets up the basic configuration for the 'flutter_gallery' project using CMake. It defines the project name and languages, enforces specific CMake policies and handles multi-configuration setups. Dependencies include CMake version 3.14 or higher, and it requires setting up the appropriate build types for the Flutter project.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flutter_gallery LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_gallery\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Release Tests for Flutter Deferred Components\nDESCRIPTION: Command to run release mode tests for the Flutter app. It requires the path to bundletool.jar as an argument. This script builds and installs a release version of the app and validates the loading of deferred components.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/deferred_components_test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrun_release_test.sh <bundletool.jar path>\n```\n\n----------------------------------------\n\nTITLE: Managing Installation for CMake Builds\nDESCRIPTION: The snippet configures CMake to manage target installations, copying necessary runtime files alongside the executable. It removes stale assets and only installs the AOT library in non-Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Interface\nDESCRIPTION: Defines a CMake interface library for Flutter, setting include directories and linking against Flutter library\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Preparing Build Files and Building Binary\nDESCRIPTION: This snippet uses the `gn` tool to generate build files for Fuchsia, disabling link-time optimization (LTO) and setting the runtime mode to `profile`. It then uses `ninja` to build the Flutter shell, Fuchsia tests, and related components.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto --runtime-mode=profile\nninja -C $ENGINE_DIR/out/fuchsia_profile_x64 flutter/shell/platform/fuchsia fuchsia_tests\n```\n\n----------------------------------------\n\nTITLE: Building and Running Leak Sanitizer Tests\nDESCRIPTION: This set of commands demonstrates how to build Flutter Engine with Leak Sanitizer enabled, and run the embedder unit tests with the appropriate suppressions.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./flutter/tools/gn --runtime-mode debug --lsan --unoptimized --no-goma\n$ autoninja -C out/host_debug_unopt\n$ source ./flutter/testing/sanitizer_suppressions.sh\n$ ./out/host_debug_unopt/embedder_unittests\n```\n\n----------------------------------------\n\nTITLE: Flutter Device Added Event - JSON-RPC\nDESCRIPTION: Example JSON-RPC event notification when a new device is added\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[{\"event\":\"device.added\",\"params\":{\"id\":\"1DD6786B-37D4-4355-AA15-B818A87A18B4\",\"name\":\"iPhone XS Max\",\"platform\":\"ios\",\"emulator\":true,\"ephemeral\":false,\"platformType\":\"ios\",\"category\":\"mobile\"}}]\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version and project name with C++ language support.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(platform_channel LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"platform_channel\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to ensure consistency across targets. It enforces C++17 standards, enables specific warning levels, sets exception handling configurations, and specifies preprocessor definitions based on the configuration. This setup is crucial for maintaining a uniform build environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Version Definitions\nDESCRIPTION: Adds preprocessor definitions for Flutter version information. Defines version number components including major, minor, patch, and build numbers.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter C++ Project\nDESCRIPTION: The CMake script configures the build process for a C++ application, specifying the minimum CMake version, project specifics, and source files. It defines standard build settings, including preprocessor definitions related to Flutter versioning and dependencies on necessary libraries and plugins. The script ensures that the application can be built correctly with Flutter-related tools.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Installation Process for Flutter Gallery\nDESCRIPTION: Defines the installation process for the Flutter Gallery application. It specifies where binaries and resources are copied within the build system. The snippet also handles the separate installation of plugin libraries and asset directories to ensure all required components are included. This setup facilitates running the application directly from Visual Studio.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building iOS Engine Variants\nDESCRIPTION: This snippet provides commands to build the Flutter engine for iOS devices and simulators. Essential for iOS development, it assumes the necessary iOS SDK components are installed.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\net build --config ios_debug\net build --config ios_debug_sim\n```\n\n----------------------------------------\n\nTITLE: Building the Flutter Engine in Bash\nDESCRIPTION: The script builds the Flutter engine in debug, profile, and release modes for both host and Android platforms, leveraging the Goma compiler. Requires the GN tool to configure the build options before using 'ninja' to perform the actual builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash -e\\n\\nset -ex\\n\\ncd ~/engine/src\\nflutter/tools/gn --goma --runtime-mode=debug\\nflutter/tools/gn --goma --runtime-mode=profile\\nflutter/tools/gn --goma --runtime-mode=release\\nflutter/tools/gn --goma --android --runtime-mode=debug\\nflutter/tools/gn --goma --android --runtime-mode=profile\\nflutter/tools/gn --goma --android --runtime-mode=release\\ncd out\\nfind . -mindepth 1 -maxdepth 1 -type d | xargs -n 1 sh -c 'ninja -C $0 -j1000 || exit 255'\n```\n\n----------------------------------------\n\nTITLE: Using dart development-service Command for DDS in Flutter\nDESCRIPTION: This snippet shows the usage of the 'dart development-service' command to start a Dart Development Service instance. It includes the command's interface and explains key options like '--vm-service-uri' and '--serve-devtools'.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nStart Dart's development service.\n\nUsage: dart [vm-options] development-service [arguments]\n-h, --help                                 Print this usage information.\n    --vm-service-uri=<uri> (mandatory)     The VM service URI DDS will connect to.\n    --bind-address=<address>               The address DDS should bind to.\n                                           (defaults to \"localhost\")\n    --bind-port=<port>                     The port DDS should be served on.\n                                           (defaults to \"0\")\n    --[no-]disable-service-auth-codes      Disables authentication codes.\n    --[no-]serve-devtools                  If provided, DDS will serve DevTools. If not specified, \"--devtools-server-address\" is ignored.\n    --devtools-server-address              Redirect to an existing DevTools server. Ignored if \"--serve-devtools\" is not specified.\n    --[no-]enable-service-port-fallback    Bind to a random port if DDS fails to bind to the provided port.\n    --cached-user-tags                     A set of UserTag names used to determine which CPU samples are cached by DDS.\n    --google3-workspace-root               Sets the Google3 workspace root used for google3:// URI resolution.\n\nRun \"dart help\" to see global options.\n```\n\n----------------------------------------\n\nTITLE: Optimized Color Burn Function with Simple Varying Branches in GLSL\nDESCRIPTION: Illustrates an efficient implementation of a color burn function using simple varying branches. This approach is preferred over flattened branches for better performance across different GPU architectures, especially on modern SIMT devices.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\nvec3 ColorBurn(vec3 dst, vec3 src) {\n  vec3 color = 1 - min(vec3(1), (1 - dst) / src);\n  if (1 - dst.r < kEhCloseEnough) {\n    color.r = 1;\n  }\n  if (1 - dst.g < kEhCloseEnough) {\n    color.g = 1;\n  }\n  if (1 - dst.b < kEhCloseEnough) {\n    color.b = 1;\n  }\n  if (src.r < kEhCloseEnough) {\n    color.r = 0;\n  }\n  if (src.g < kEhCloseEnough) {\n    color.g = 0;\n  }\n  if (src.b < kEhCloseEnough) {\n    color.b = 0;\n  }\n  return color;\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Distribution URL Configuration\nDESCRIPTION: This snippet shows how to configure the Gradle distribution URL in the `gradle-wrapper.properties` file. This URL points to the specific Gradle version that the project should use.  The gradle wrapper version should be compatible with the target and compile SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_8\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.12.1-bin.zip\n```\n\n----------------------------------------\n\nTITLE: Retrieving InputConnection from Embedded Android View (Java)\nDESCRIPTION: This code snippet shows how the Flutter Android embedding retrieves the InputConnection from the embedded Android View when it's the real target of the input.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nTextInputPlugin.java#L206\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings - CMake\nDESCRIPTION: This snippet applies a standard set of build settings to the defined application target. These settings can be modified or removed if the application has specific needs.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ALetter Properties for Various Scripts\nDESCRIPTION: This code snippet defines Unicode code point ranges and their corresponding ALetter property assignments for multiple scripts. It includes definitions for Telugu, Kannada, Malayalam, Sinhala, Tibetan, Georgian, Hangul, Ethiopic, Cherokee, and other writing systems.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0C05..0C0C    ; ALetter # Lo   [8] TELUGU LETTER A..TELUGU LETTER VOCALIC L\n0C0E..0C10    ; ALetter # Lo   [3] TELUGU LETTER E..TELUGU LETTER AI\n0C12..0C28    ; ALetter # Lo  [23] TELUGU LETTER O..TELUGU LETTER NA\n0C2A..0C39    ; ALetter # Lo  [16] TELUGU LETTER PA..TELUGU LETTER HA\n0C3D          ; ALetter # Lo       TELUGU SIGN AVAGRAHA\n0C58..0C5A    ; ALetter # Lo   [3] TELUGU LETTER TSA..TELUGU LETTER RRRA\n0C60..0C61    ; ALetter # Lo   [2] TELUGU LETTER VOCALIC RR..TELUGU LETTER VOCALIC LL\n0C80          ; ALetter # Lo       KANNADA SIGN SPACING CANDRABINDU\n0C85..0C8C    ; ALetter # Lo   [8] KANNADA LETTER A..KANNADA LETTER VOCALIC L\n0C8E..0C90    ; ALetter # Lo   [3] KANNADA LETTER E..KANNADA LETTER AI\n0C92..0CA8    ; ALetter # Lo  [23] KANNADA LETTER O..KANNADA LETTER NA\n0CAA..0CB3    ; ALetter # Lo  [10] KANNADA LETTER PA..KANNADA LETTER LLA\n0CB5..0CB9    ; ALetter # Lo   [5] KANNADA LETTER VA..KANNADA LETTER HA\n0CBD          ; ALetter # Lo       KANNADA SIGN AVAGRAHA\n0CDE          ; ALetter # Lo       KANNADA LETTER FA\n0CE0..0CE1    ; ALetter # Lo   [2] KANNADA LETTER VOCALIC RR..KANNADA LETTER VOCALIC LL\n0CF1..0CF2    ; ALetter # Lo   [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA\n0D04..0D0C    ; ALetter # Lo   [9] MALAYALAM LETTER VEDIC ANUSVARA..MALAYALAM LETTER VOCALIC L\n0D0E..0D10    ; ALetter # Lo   [3] MALAYALAM LETTER E..MALAYALAM LETTER AI\n0D12..0D3A    ; ALetter # Lo  [41] MALAYALAM LETTER O..MALAYALAM LETTER TTTA\n0D3D          ; ALetter # Lo       MALAYALAM SIGN AVAGRAHA\n0D4E          ; ALetter # Lo       MALAYALAM LETTER DOT REPH\n0D54..0D56    ; ALetter # Lo   [3] MALAYALAM LETTER CHILLU M..MALAYALAM LETTER CHILLU LLL\n0D5F..0D61    ; ALetter # Lo   [3] MALAYALAM LETTER ARCHAIC II..MALAYALAM LETTER VOCALIC LL\n0D7A..0D7F    ; ALetter # Lo   [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K\n0D85..0D96    ; ALetter # Lo  [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA\n0D9A..0DB1    ; ALetter # Lo  [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA\n0DB3..0DBB    ; ALetter # Lo   [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA\n0DBD          ; ALetter # Lo       SINHALA LETTER DANTAJA LAYANNA\n0DC0..0DC6    ; ALetter # Lo   [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA\n0F00          ; ALetter # Lo       TIBETAN SYLLABLE OM\n0F40..0F47    ; ALetter # Lo   [8] TIBETAN LETTER KA..TIBETAN LETTER JA\n0F49..0F6C    ; ALetter # Lo  [36] TIBETAN LETTER NYA..TIBETAN LETTER RRA\n0F88..0F8C    ; ALetter # Lo   [5] TIBETAN SIGN LCE TSA CAN..TIBETAN SIGN INVERTED MCHU CAN\n10A0..10C5    ; ALetter # L&  [38] GEORGIAN CAPITAL LETTER AN..GEORGIAN CAPITAL LETTER HOE\n10C7          ; ALetter # L&       GEORGIAN CAPITAL LETTER YN\n10CD          ; ALetter # L&       GEORGIAN CAPITAL LETTER AEN\n10D0..10FA    ; ALetter # L&  [43] GEORGIAN LETTER AN..GEORGIAN LETTER AIN\n10FC          ; ALetter # Lm       MODIFIER LETTER GEORGIAN NAR\n10FD..10FF    ; ALetter # L&   [3] GEORGIAN LETTER AEN..GEORGIAN LETTER LABIAL SIGN\n1100..1248    ; ALetter # Lo [329] HANGUL CHOSEONG KIYEOK..ETHIOPIC SYLLABLE QWA\n124A..124D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE QWI..ETHIOPIC SYLLABLE QWE\n1250..1256    ; ALetter # Lo   [7] ETHIOPIC SYLLABLE QHA..ETHIOPIC SYLLABLE QHO\n1258          ; ALetter # Lo       ETHIOPIC SYLLABLE QHWA\n125A..125D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE QHWI..ETHIOPIC SYLLABLE QHWE\n1260..1288    ; ALetter # Lo  [41] ETHIOPIC SYLLABLE BA..ETHIOPIC SYLLABLE XWA\n128A..128D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE XWI..ETHIOPIC SYLLABLE XWE\n1290..12B0    ; ALetter # Lo  [33] ETHIOPIC SYLLABLE NA..ETHIOPIC SYLLABLE KWA\n12B2..12B5    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE KWI..ETHIOPIC SYLLABLE KWE\n12B8..12BE    ; ALetter # Lo   [7] ETHIOPIC SYLLABLE KXA..ETHIOPIC SYLLABLE KXO\n12C0          ; ALetter # Lo       ETHIOPIC SYLLABLE KXWA\n12C2..12C5    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE KXWI..ETHIOPIC SYLLABLE KXWE\n12C8..12D6    ; ALetter # Lo  [15] ETHIOPIC SYLLABLE WA..ETHIOPIC SYLLABLE PHARYNGEAL O\n12D8..1310    ; ALetter # Lo  [57] ETHIOPIC SYLLABLE ZA..ETHIOPIC SYLLABLE GWA\n1312..1315    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE GWI..ETHIOPIC SYLLABLE GWE\n1318..135A    ; ALetter # Lo  [67] ETHIOPIC SYLLABLE GGA..ETHIOPIC SYLLABLE FYA\n1380..138F    ; ALetter # Lo  [16] ETHIOPIC SYLLABLE SEBATBEIT MWA..ETHIOPIC SYLLABLE PWE\n13A0..13F5    ; ALetter # L&  [86] CHEROKEE LETTER A..CHEROKEE LETTER MV\n13F8..13FD    ; ALetter # L&   [6] CHEROKEE SMALL LETTER YE..CHEROKEE SMALL LETTER MV\n1401..166C    ; ALetter # Lo [620] CANADIAN SYLLABICS E..CANADIAN SYLLABICS CARRIER TTSA\n166F..167F    ; ALetter # Lo  [17] CANADIAN SYLLABICS QAI..CANADIAN SYLLABICS BLACKFOOT W\n1681..169A    ; ALetter # Lo  [26] OGHAM LETTER BEITH..OGHAM LETTER PEITH\n16A0..16EA    ; ALetter # Lo  [75] RUNIC LETTER FEHU FEOH FE F..RUNIC LETTER X\n16EE..16F0    ; ALetter # Nl   [3] RUNIC ARLAUG SYMBOL..RUNIC BELGTHOR SYMBOL\n16F1..16F8    ; ALetter # Lo   [8] RUNIC LETTER K..RUNIC LETTER FRANKS CASKET AESC\n1700..170C    ; ALetter # Lo  [13] TAGALOG LETTER A..TAGALOG LETTER YA\n170E..1711    ; ALetter # Lo   [4] TAGALOG LETTER LA..TAGALOG LETTER HA\n1720..1731    ; ALetter # Lo  [18] HANUNOO LETTER A..HANUNOO LETTER HA\n1740..1751    ; ALetter # Lo  [18] BUHID LETTER A..BUHID LETTER HA\n1760..176C    ; ALetter # Lo  [13] TAGBANWA LETTER A..TAGBANWA LETTER YA\n176E..1770    ; ALetter # Lo   [3] TAGBANWA LETTER LA..TAGBANWA LETTER SA\n1820..1842    ; ALetter # Lo  [35] MONGOLIAN LETTER A..MONGOLIAN LETTER CHI\n1843          ; ALetter # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1844..1878    ; ALetter # Lo  [53] MONGOLIAN LETTER TODO E..MONGOLIAN LETTER CHA WITH TWO DOTS\n1880..1884    ; ALetter # Lo   [5] MONGOLIAN LETTER ALI GALI ANUSVARA ONE..MONGOLIAN LETTER ALI GALI INVERTED UBADAMA\n1887..18A8    ; ALetter # Lo  [34] MONGOLIAN LETTER ALI GALI A..MONGOLIAN LETTER MANCHU ALI GALI BHA\n18AA          ; ALetter # Lo       MONGOLIAN LETTER MANCHU ALI GALI LHA\n18B0..18F5    ; ALetter # Lo  [70] CANADIAN SYLLABICS OY..CANADIAN SYLLABICS CARRIER DENTAL S\n1900..191E    ; ALetter # Lo  [31] LIMBU VOWEL-CARRIER LETTER..LIMBU LETTER TRA\n1A00..1A16    ; ALetter # Lo  [23] BUGINESE LETTER KA..BUGINESE LETTER HA\n1B05..1B33    ; ALetter # Lo  [47] BALINESE LETTER AKARA..BALINESE LETTER HA\n1B45..1B4B    ; ALetter # Lo   [7] BALINESE LETTER KAF SASAK..BALINESE LETTER ASYURA SASAK\n1B83..1BA0    ; ALetter # Lo  [30] SUNDANESE LETTER A..SUNDANESE LETTER HA\n1BAE..1BAF    ; ALetter # Lo   [2] SUNDANESE LETTER KHA..SUNDANESE LETTER SYA\n1BBA..1BE5    ; ALetter # Lo  [44] SUNDANESE AVAGRAHA..BATAK LETTER U\n1C00..1C23    ; ALetter # Lo  [36] LEPCHA LETTER KA..LEPCHA LETTER A\n1C4D..1C4F    ; ALetter # Lo   [3] LEPCHA LETTER TTA..LEPCHA LETTER DDA\n1C5A..1C77    ; ALetter # Lo  [30] OL CHIKI LETTER LA..OL CHIKI LETTER OH\n1C78..1C7D    ; ALetter # Lm   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD\n1C80..1C88    ; ALetter # L&   [9] CYRILLIC SMALL LETTER ROUNDED VE..CYRILLIC SMALL LETTER UNBLENDED UK\n1C90..1CBA    ; ALetter # L&  [43] GEORGIAN MTAVRULI CAPITAL LETTER AN..GEORGIAN MTAVRULI CAPITAL LETTER AIN\n1CBD..1CBF    ; ALetter # L&   [3] GEORGIAN MTAVRULI CAPITAL LETTER AEN..GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN\n1CE9..1CEC    ; ALetter # Lo   [4] VEDIC SIGN ANUSVARA ANTARGOMUKHA..VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL\n1CEE..1CF3    ; ALetter # Lo   [6] VEDIC SIGN HEXIFORM LONG ANUSVARA..VEDIC SIGN ROTATED ARDHAVISARGA\n1CF5..1CF6    ; ALetter # Lo   [2] VEDIC SIGN JIHVAMULIYA..VEDIC SIGN UPADHMANIYA\n1CFA          ; ALetter # Lo       VEDIC SIGN DOUBLE ANUSVARA ANTARGOMUKHA\n1D00..1D2B    ; ALetter # L&  [44] LATIN LETTER SMALL CAPITAL A..CYRILLIC LETTER SMALL CAPITAL EL\n1D2C..1D6A    ; ALetter # Lm  [63] MODIFIER LETTER CAPITAL A..GREEK SUBSCRIPT SMALL LETTER CHI\n1D6B..1D77    ; ALetter # L&  [13] LATIN SMALL LETTER UE..LATIN SMALL LETTER TURNED G\n1D78          ; ALetter # Lm       MODIFIER LETTER CYRILLIC EN\n1D79..1D9A    ; ALetter # L&  [34] LATIN SMALL LETTER INSULAR G..LATIN SMALL LETTER EZH WITH RETROFLEX HOOK\n1D9B..1DBF    ; ALetter # Lm  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n1E00..1F15    ; ALetter # L& [278] LATIN CAPITAL LETTER A WITH RING BELOW..GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA\n1F18..1F1D    ; ALetter # L&   [6] GREEK CAPITAL LETTER EPSILON WITH PSILI..GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA\n1F20..1F45    ; ALetter # L&  [38] GREEK SMALL LETTER ETA WITH PSILI..GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA\n1F48..1F4D    ; ALetter # L&   [6] GREEK CAPITAL LETTER OMICRON WITH PSILI..GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA\n1F50..1F57    ; ALetter # L&   [8] GREEK SMALL LETTER UPSILON WITH PSILI..GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI\n1F59          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA\n1F5B          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA\n1F5D          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA\n1F5F..1F7D    ; ALetter # L&  [31] GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI..GREEK SMALL LETTER OMEGA WITH OXIA\n1F80..1FB4    ; ALetter # L&  [53] GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI..GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FB6..1FBC    ; ALetter # L&   [7] GREEK SMALL LETTER ALPHA WITH PERISPOMENI..GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBE          ; ALetter # L&       GREEK PROSGEGRAMMENI\n1FC2..1FC4    ; ALetter # L&   [3] GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI..GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI\n1FC6..1FCC    ; ALetter # L&   [7] GREEK SMALL LETTER ETA WITH PERISPOMENI..GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FD0..1FD3    ; ALetter # L&   [4] GREEK SMALL LETTER IOTA WITH VRACHY..GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6..1FDB    ; ALetter # L&   [6] GREEK SMALL LETTER IOTA WITH PERISPOMENI..GREEK CAPITAL LETTER IOTA WITH OXIA\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command - Flutter iOS\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/image_list/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unittests with Engine Tool\nDESCRIPTION: This snippet illustrates how to run C++ unit tests specifically targeting the impeller component within the Flutter engine. It supports rebuilding and test execution in one command.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\net test //flutter/impeller:impeller_unittests\n```\n\n----------------------------------------\n\nTITLE: Configuring EGL for OpenGL ES 2.0 in C++\nDESCRIPTION: Sets up an EGL configuration descriptor for OpenGL ES 2.0 and chooses a compatible config.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\negl::ConfigDescriptor egl_desc;\negl_desc.api = egl::API::kOpenGLES2;\negl_desc.samples = egl::Samples::kOne;\negl_desc.color_format = egl::ColorFormat::kRGBA8888;\negl_desc.stencil_bits = egl::StencilBits::kZero;\negl_desc.depth_bits = egl::DepthBits::kZero;\negl_desc.surface_type = egl::SurfaceType::kWindow;\n\nauto config = display.ChooseConfig(egl_desc);\n```\n\n----------------------------------------\n\nTITLE: Defining Format Character Ranges in Unicode\nDESCRIPTION: Lists the Unicode code points for Format category (Cf) characters. Includes various control characters like soft hyphen, directional marks, joiners, and separators. The list shows individual code points and ranges with descriptions and totals 62 code points.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n00AD          ; Format # Cf       SOFT HYPHEN\n0600..0605    ; Format # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n061C          ; Format # Cf       ARABIC LETTER MARK\n06DD          ; Format # Cf       ARABIC END OF AYAH\n070F          ; Format # Cf       SYRIAC ABBREVIATION MARK\n08E2          ; Format # Cf       ARABIC DISPUTED END OF AYAH\n180E          ; Format # Cf       MONGOLIAN VOWEL SEPARATOR\n200E..200F    ; Format # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n202A..202E    ; Format # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2060..2064    ; Format # Cf   [5] WORD JOINER..INVISIBLE PLUS\n2066..206F    ; Format # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\nFEFF          ; Format # Cf       ZERO WIDTH NO-BREAK SPACE\nFFF9..FFFB    ; Format # Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n110BD         ; Format # Cf       KAITHI NUMBER SIGN\n110CD         ; Format # Cf       KAITHI NUMBER SIGN ABOVE\n13430..13438  ; Format # Cf   [9] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END SEGMENT\n1BCA0..1BCA3  ; Format # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n1D173..1D17A  ; Format # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\nE0001         ; Format # Cf       LANGUAGE TAG\n\n# Total code points: 62\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Ranges with H2/H3 Designations\nDESCRIPTION: This code snippet defines Unicode code points for Hangul syllables with H2 and H3 designations. Each entry specifies a Unicode code point (or range), followed by a designation (H2 or H3), Unicode category (Lo), and the name of the Hangul syllable.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\nB9C9..B9E3;H3     # Lo    [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH\nB9E4;H2           # Lo         HANGUL SYLLABLE MAE\nB9E5..B9FF;H3     # Lo    [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH\nBA00;H2           # Lo         HANGUL SYLLABLE MYA\nBA01..BA1B;H3     # Lo    [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH\nBA1C;H2           # Lo         HANGUL SYLLABLE MYAE\nBA1D..BA37;H3     # Lo    [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH\nBA38;H2           # Lo         HANGUL SYLLABLE MEO\nBA39..BA53;H3     # Lo    [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH\nBA54;H2           # Lo         HANGUL SYLLABLE ME\nBA55..BA6F;H3     # Lo    [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH\nBA70;H2           # Lo         HANGUL SYLLABLE MYEO\nBA71..BA8B;H3     # Lo    [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH\nBA8C;H2           # Lo         HANGUL SYLLABLE MYE\nBA8D..BAA7;H3     # Lo    [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH\nBAA8;H2           # Lo         HANGUL SYLLABLE MO\nBAA9..BAC3;H3     # Lo    [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH\nBAC4;H2           # Lo         HANGUL SYLLABLE MWA\nBAC5..BADF;H3     # Lo    [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH\nBAE0;H2           # Lo         HANGUL SYLLABLE MWAE\nBAE1..BAFB;H3     # Lo    [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH\nBAFC;H2           # Lo         HANGUL SYLLABLE MOE\nBAFD..BB17;H3     # Lo    [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH\nBB18;H2           # Lo         HANGUL SYLLABLE MYO\nBB19..BB33;H3     # Lo    [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH\nBB34;H2           # Lo         HANGUL SYLLABLE MU\nBB35..BB4F;H3     # Lo    [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH\nBB50;H2           # Lo         HANGUL SYLLABLE MWEO\nBB51..BB6B;H3     # Lo    [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH\nBB6C;H2           # Lo         HANGUL SYLLABLE MWE\nBB6D..BB87;H3     # Lo    [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH\nBB88;H2           # Lo         HANGUL SYLLABLE MWI\nBB89..BBA3;H3     # Lo    [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH\nBBA4;H2           # Lo         HANGUL SYLLABLE MYU\nBBA5..BBBF;H3     # Lo    [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH\nBBC0;H2           # Lo         HANGUL SYLLABLE MEU\nBBC1..BBDB;H3     # Lo    [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH\nBBDC;H2           # Lo         HANGUL SYLLABLE MYI\nBBDD..BBF7;H3     # Lo    [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH\nBBF8;H2           # Lo         HANGUL SYLLABLE MI\nBBF9..BC13;H3     # Lo    [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH\nBC14;H2           # Lo         HANGUL SYLLABLE BA\nBC15..BC2F;H3     # Lo    [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH\nBC30;H2           # Lo         HANGUL SYLLABLE BAE\nBC31..BC4B;H3     # Lo    [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH\nBC4C;H2           # Lo         HANGUL SYLLABLE BYA\nBC4D..BC67;H3     # Lo    [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH\nBC68;H2           # Lo         HANGUL SYLLABLE BYAE\nBC69..BC83;H3     # Lo    [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH\nBC84;H2           # Lo         HANGUL SYLLABLE BEO\nBC85..BC9F;H3     # Lo    [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH\nBCA0;H2           # Lo         HANGUL SYLLABLE BE\nBCA1..BCBB;H3     # Lo    [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH\nBCBC;H2           # Lo         HANGUL SYLLABLE BYEO\nBCBD..BCD7;H3     # Lo    [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH\nBCD8;H2           # Lo         HANGUL SYLLABLE BYE\nBCD9..BCF3;H3     # Lo    [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH\nBCF4;H2           # Lo         HANGUL SYLLABLE BO\nBCF5..BD0F;H3     # Lo    [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH\nBD10;H2           # Lo         HANGUL SYLLABLE BWA\nBD11..BD2B;H3     # Lo    [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH\nBD2C;H2           # Lo         HANGUL SYLLABLE BWAE\nBD2D..BD47;H3     # Lo    [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH\nBD48;H2           # Lo         HANGUL SYLLABLE BOE\nBD49..BD63;H3     # Lo    [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH\nBD64;H2           # Lo         HANGUL SYLLABLE BYO\nBD65..BD7F;H3     # Lo    [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH\nBD80;H2           # Lo         HANGUL SYLLABLE BU\nBD81..BD9B;H3     # Lo    [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH\nBD9C;H2           # Lo         HANGUL SYLLABLE BWEO\nBD9D..BDB7;H3     # Lo    [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH\nBDB8;H2           # Lo         HANGUL SYLLABLE BWE\nBDB9..BDD3;H3     # Lo    [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH\nBDD4;H2           # Lo         HANGUL SYLLABLE BWI\nBDD5..BDEF;H3     # Lo    [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH\nBDF0;H2           # Lo         HANGUL SYLLABLE BYU\nBDF1..BE0B;H3     # Lo    [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH\nBE0C;H2           # Lo         HANGUL SYLLABLE BEU\nBE0D..BE27;H3     # Lo    [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH\nBE28;H2           # Lo         HANGUL SYLLABLE BYI\nBE29..BE43;H3     # Lo    [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH\nBE44;H2           # Lo         HANGUL SYLLABLE BI\nBE45..BE5F;H3     # Lo    [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH\nBE60;H2           # Lo         HANGUL SYLLABLE BBA\nBE61..BE7B;H3     # Lo    [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH\nBE7C;H2           # Lo         HANGUL SYLLABLE BBAE\nBE7D..BE97;H3     # Lo    [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH\nBE98;H2           # Lo         HANGUL SYLLABLE BBYA\nBE99..BEB3;H3     # Lo    [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH\nBEB4;H2           # Lo         HANGUL SYLLABLE BBYAE\nBEB5..BECF;H3     # Lo    [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH\nBED0;H2           # Lo         HANGUL SYLLABLE BBEO\nBED1..BEEB;H3     # Lo    [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH\nBEEC;H2           # Lo         HANGUL SYLLABLE BBE\nBEED..BF07;H3     # Lo    [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH\nBF08;H2           # Lo         HANGUL SYLLABLE BBYEO\nBF09..BF23;H3     # Lo    [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH\nBF24;H2           # Lo         HANGUL SYLLABLE BBYE\nBF25..BF3F;H3     # Lo    [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH\nBF40;H2           # Lo         HANGUL SYLLABLE BBO\nBF41..BF5B;H3     # Lo    [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH\nBF5C;H2           # Lo         HANGUL SYLLABLE BBWA\nBF5D..BF77;H3     # Lo    [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH\nBF78;H2           # Lo         HANGUL SYLLABLE BBWAE\nBF79..BF93;H3     # Lo    [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH\nBF94;H2           # Lo         HANGUL SYLLABLE BBOE\nBF95..BFAF;H3     # Lo    [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH\nBFB0;H2           # Lo         HANGUL SYLLABLE BBYO\nBFB1..BFCB;H3     # Lo    [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH\nBFCC;H2           # Lo         HANGUL SYLLABLE BBU\nBFCD..BFE7;H3     # Lo    [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH\nBFE8;H2           # Lo         HANGUL SYLLABLE BBWEO\nBFE9..C003;H3     # Lo    [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH\nC004;H2           # Lo         HANGUL SYLLABLE BBWE\nC005..C01F;H3     # Lo    [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH\nC020;H2           # Lo         HANGUL SYLLABLE BBWI\nC021..C03B;H3     # Lo    [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH\nC03C;H2           # Lo         HANGUL SYLLABLE BBYU\nC03D..C057;H3     # Lo    [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH\nC058;H2           # Lo         HANGUL SYLLABLE BBEU\nC059..C073;H3     # Lo    [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH\nC074;H2           # Lo         HANGUL SYLLABLE BBYI\nC075..C08F;H3     # Lo    [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH\nC090;H2           # Lo         HANGUL SYLLABLE BBI\nC091..C0AB;H3     # Lo    [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH\nC0AC;H2           # Lo         HANGUL SYLLABLE SA\nC0AD..C0C7;H3     # Lo    [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH\nC0C8;H2           # Lo         HANGUL SYLLABLE SAE\nC0C9..C0E3;H3     # Lo    [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH\nC0E4;H2           # Lo         HANGUL SYLLABLE SYA\nC0E5..C0FF;H3     # Lo    [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH\nC100;H2           # Lo         HANGUL SYLLABLE SYAE\nC101..C11B;H3     # Lo    [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH\nC11C;H2           # Lo         HANGUL SYLLABLE SEO\nC11D..C137;H3     # Lo    [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH\nC138;H2           # Lo         HANGUL SYLLABLE SE\nC139..C153;H3     # Lo    [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH\nC154;H2           # Lo         HANGUL SYLLABLE SYEO\nC155..C16F;H3     # Lo    [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH\nC170;H2           # Lo         HANGUL SYLLABLE SYE\nC171..C18B;H3     # Lo    [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH\nC18C;H2           # Lo         HANGUL SYLLABLE SO\nC18D..C1A7;H3     # Lo    [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH\nC1A8;H2           # Lo         HANGUL SYLLABLE SWA\nC1A9..C1C3;H3     # Lo    [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH\nC1C4;H2           # Lo         HANGUL SYLLABLE SWAE\nC1C5..C1DF;H3     # Lo    [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH\nC1E0;H2           # Lo         HANGUL SYLLABLE SOE\nC1E1..C1FB;H3     # Lo    [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH\nC1FC;H2           # Lo         HANGUL SYLLABLE SYO\nC1FD..C217;H3     # Lo    [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH\nC218;H2           # Lo         HANGUL SYLLABLE SU\nC219..C233;H3     # Lo    [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH\nC234;H2           # Lo         HANGUL SYLLABLE SWEO\nC235..C24F;H3     # Lo    [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH\nC250;H2           # Lo         HANGUL SYLLABLE SWE\nC251..C26B;H3     # Lo    [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH\nC26C;H2           # Lo         HANGUL SYLLABLE SWI\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Device for Flutter CLI\nDESCRIPTION: This snippet demonstrates the interactive setup process to add a custom device to the Flutter CLI configuration. It requires Flutter CLI as a prerequisite and involves providing device details such as ID, label, SDK version, hostname, and SSH credentials. The setup prompts also include details on executing commands for app deployment and optionally taking device screenshots.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Using-custom-embedders-with-the-Flutter-CLI.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhannes@pop-os:~/devel$ flutter custom-devices add\nPlease enter the id you want to device to have. Must contain only alphanumeric\nor underscore characters. (example: pi)\npi\nPlease enter the label of the device, which is a slightly more verbose name for\nthe device. (example: Raspberry Pi)\nRaspberry Pi\nSDK name and version (example: Raspberry Pi 4 Model B+)\nRaspberry Pi 4 Model B+\nShould the device be enabled? [Y/n] (empty for default)\n\nPlease enter the hostname or IPv4/v6 address of the device. (example:\nraspberrypi)\nhpi4\nPlease enter the username used for ssh-ing into the remote device. (example: pi,\nempty for no username)\n\nPlease enter the command executed on the remote device for starting the app.\n\"/tmp/${appName}\" is the path to the asset bundle. (example: flutter-pi\n/tmp/${appName})\nflutter-pi /tmp/${appName}\nShould the device use port forwarding? Using port forwarding is the default\nbecause it works in all cases, however if your remote device has a static IP\naddress and you have a way of specifying the \"--observatory-host=<ip>\" engine\noption, you might prefer not using port forwarding. [Y/n] (empty for default)\n\nEnter the command executed on the remote device for taking a screenshot.\n(example: fbgrab /tmp/screenshot.png && cat /tmp/screenshot.png | base64 | tr -d\n' \\n\\t', empty for no screenshotting support)\n\nWould you like to add the custom device to the config now? [Y/n] (empty for\ndefault)\n\nSuccessfully added custom device to config file at\n\"/home/hannes/.config/flutter/custom_devices.json\".\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Hangul Syllables\nDESCRIPTION: A structured list of Unicode code point ranges for Hangul syllables with their corresponding format properties (H2 or H3) and descriptive comments. Each line follows the pattern of hexadecimal code point, property value, and syllable description.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_10\n\nLANGUAGE: unicode-data\nCODE:\n```\nC26D..C287;H3     # Lo    [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH\nC288;H2           # Lo         HANGUL SYLLABLE SYU\nC289..C2A3;H3     # Lo    [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH\nC2A4;H2           # Lo         HANGUL SYLLABLE SEU\nC2A5..C2BF;H3     # Lo    [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH\nC2C0;H2           # Lo         HANGUL SYLLABLE SYI\nC2C1..C2DB;H3     # Lo    [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH\nC2DC;H2           # Lo         HANGUL SYLLABLE SI\nC2DD..C2F7;H3     # Lo    [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH\nC2F8;H2           # Lo         HANGUL SYLLABLE SSA\nC2F9..C313;H3     # Lo    [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH\nC314;H2           # Lo         HANGUL SYLLABLE SSAE\nC315..C32F;H3     # Lo    [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH\nC330;H2           # Lo         HANGUL SYLLABLE SSYA\nC331..C34B;H3     # Lo    [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH\nC34C;H2           # Lo         HANGUL SYLLABLE SSYAE\nC34D..C367;H3     # Lo    [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH\nC368;H2           # Lo         HANGUL SYLLABLE SSEO\nC369..C383;H3     # Lo    [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH\nC384;H2           # Lo         HANGUL SYLLABLE SSE\nC385..C39F;H3     # Lo    [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH\nC3A0;H2           # Lo         HANGUL SYLLABLE SSYEO\nC3A1..C3BB;H3     # Lo    [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH\nC3BC;H2           # Lo         HANGUL SYLLABLE SSYE\nC3BD..C3D7;H3     # Lo    [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH\nC3D8;H2           # Lo         HANGUL SYLLABLE SSO\nC3D9..C3F3;H3     # Lo    [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH\nC3F4;H2           # Lo         HANGUL SYLLABLE SSWA\nC3F5..C40F;H3     # Lo    [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH\nC410;H2           # Lo         HANGUL SYLLABLE SSWAE\nC411..C42B;H3     # Lo    [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH\nC42C;H2           # Lo         HANGUL SYLLABLE SSOE\nC42D..C447;H3     # Lo    [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH\nC448;H2           # Lo         HANGUL SYLLABLE SSYO\nC449..C463;H3     # Lo    [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH\nC464;H2           # Lo         HANGUL SYLLABLE SSU\nC465..C47F;H3     # Lo    [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH\nC480;H2           # Lo         HANGUL SYLLABLE SSWEO\nC481..C49B;H3     # Lo    [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH\nC49C;H2           # Lo         HANGUL SYLLABLE SSWE\nC49D..C4B7;H3     # Lo    [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH\nC4B8;H2           # Lo         HANGUL SYLLABLE SSWI\nC4B9..C4D3;H3     # Lo    [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH\nC4D4;H2           # Lo         HANGUL SYLLABLE SSYU\nC4D5..C4EF;H3     # Lo    [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH\nC4F0;H2           # Lo         HANGUL SYLLABLE SSEU\nC4F1..C50B;H3     # Lo    [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH\nC50C;H2           # Lo         HANGUL SYLLABLE SSYI\nC50D..C527;H3     # Lo    [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH\nC528;H2           # Lo         HANGUL SYLLABLE SSI\nC529..C543;H3     # Lo    [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH\nC544;H2           # Lo         HANGUL SYLLABLE A\nC545..C55F;H3     # Lo    [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH\nC560;H2           # Lo         HANGUL SYLLABLE AE\nC561..C57B;H3     # Lo    [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH\nC57C;H2           # Lo         HANGUL SYLLABLE YA\nC57D..C597;H3     # Lo    [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH\nC598;H2           # Lo         HANGUL SYLLABLE YAE\nC599..C5B3;H3     # Lo    [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH\nC5B4;H2           # Lo         HANGUL SYLLABLE EO\nC5B5..C5CF;H3     # Lo    [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH\nC5D0;H2           # Lo         HANGUL SYLLABLE E\nC5D1..C5EB;H3     # Lo    [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH\nC5EC;H2           # Lo         HANGUL SYLLABLE YEO\nC5ED..C607;H3     # Lo    [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH\nC608;H2           # Lo         HANGUL SYLLABLE YE\nC609..C623;H3     # Lo    [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH\nC624;H2           # Lo         HANGUL SYLLABLE O\nC625..C63F;H3     # Lo    [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH\nC640;H2           # Lo         HANGUL SYLLABLE WA\nC641..C65B;H3     # Lo    [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH\nC65C;H2           # Lo         HANGUL SYLLABLE WAE\nC65D..C677;H3     # Lo    [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH\nC678;H2           # Lo         HANGUL SYLLABLE OE\nC679..C693;H3     # Lo    [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH\nC694;H2           # Lo         HANGUL SYLLABLE YO\nC695..C6AF;H3     # Lo    [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH\nC6B0;H2           # Lo         HANGUL SYLLABLE U\nC6B1..C6CB;H3     # Lo    [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH\nC6CC;H2           # Lo         HANGUL SYLLABLE WEO\nC6CD..C6E7;H3     # Lo    [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH\nC6E8;H2           # Lo         HANGUL SYLLABLE WE\nC6E9..C703;H3     # Lo    [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH\nC704;H2           # Lo         HANGUL SYLLABLE WI\nC705..C71F;H3     # Lo    [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH\nC720;H2           # Lo         HANGUL SYLLABLE YU\nC721..C73B;H3     # Lo    [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH\nC73C;H2           # Lo         HANGUL SYLLABLE EU\nC73D..C757;H3     # Lo    [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH\nC758;H2           # Lo         HANGUL SYLLABLE YI\nC759..C773;H3     # Lo    [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH\nC774;H2           # Lo         HANGUL SYLLABLE I\nC775..C78F;H3     # Lo    [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH\nC790;H2           # Lo         HANGUL SYLLABLE JA\nC791..C7AB;H3     # Lo    [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH\nC7AC;H2           # Lo         HANGUL SYLLABLE JAE\nC7AD..C7C7;H3     # Lo    [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH\nC7C8;H2           # Lo         HANGUL SYLLABLE JYA\nC7C9..C7E3;H3     # Lo    [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH\nC7E4;H2           # Lo         HANGUL SYLLABLE JYAE\nC7E5..C7FF;H3     # Lo    [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH\nC800;H2           # Lo         HANGUL SYLLABLE JEO\nC801..C81B;H3     # Lo    [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH\nC81C;H2           # Lo         HANGUL SYLLABLE JE\nC81D..C837;H3     # Lo    [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH\nC838;H2           # Lo         HANGUL SYLLABLE JYEO\nC839..C853;H3     # Lo    [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH\nC854;H2           # Lo         HANGUL SYLLABLE JYE\nC855..C86F;H3     # Lo    [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH\nC870;H2           # Lo         HANGUL SYLLABLE JO\nC871..C88B;H3     # Lo    [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH\nC88C;H2           # Lo         HANGUL SYLLABLE JWA\nC88D..C8A7;H3     # Lo    [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH\nC8A8;H2           # Lo         HANGUL SYLLABLE JWAE\nC8A9..C8C3;H3     # Lo    [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH\nC8C4;H2           # Lo         HANGUL SYLLABLE JOE\nC8C5..C8DF;H3     # Lo    [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH\nC8E0;H2           # Lo         HANGUL SYLLABLE JYO\nC8E1..C8FB;H3     # Lo    [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH\nC8FC;H2           # Lo         HANGUL SYLLABLE JU\nC8FD..C917;H3     # Lo    [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH\nC918;H2           # Lo         HANGUL SYLLABLE JWEO\nC919..C933;H3     # Lo    [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH\nC934;H2           # Lo         HANGUL SYLLABLE JWE\nC935..C94F;H3     # Lo    [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH\nC950;H2           # Lo         HANGUL SYLLABLE JWI\nC951..C96B;H3     # Lo    [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH\nC96C;H2           # Lo         HANGUL SYLLABLE JYU\nC96D..C987;H3     # Lo    [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH\nC988;H2           # Lo         HANGUL SYLLABLE JEU\nC989..C9A3;H3     # Lo    [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH\nC9A4;H2           # Lo         HANGUL SYLLABLE JYI\nC9A5..C9BF;H3     # Lo    [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH\nC9C0;H2           # Lo         HANGUL SYLLABLE JI\nC9C1..C9DB;H3     # Lo    [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH\nC9DC;H2           # Lo         HANGUL SYLLABLE JJA\nC9DD..C9F7;H3     # Lo    [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH\nC9F8;H2           # Lo         HANGUL SYLLABLE JJAE\nC9F9..CA13;H3     # Lo    [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH\nCA14;H2           # Lo         HANGUL SYLLABLE JJYA\nCA15..CA2F;H3     # Lo    [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH\nCA30;H2           # Lo         HANGUL SYLLABLE JJYAE\nCA31..CA4B;H3     # Lo    [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH\nCA4C;H2           # Lo         HANGUL SYLLABLE JJEO\nCA4D..CA67;H3     # Lo    [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH\nCA68;H2           # Lo         HANGUL SYLLABLE JJE\nCA69..CA83;H3     # Lo    [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH\nCA84;H2           # Lo         HANGUL SYLLABLE JJYEO\nCA85..CA9F;H3     # Lo    [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH\nCAA0;H2           # Lo         HANGUL SYLLABLE JJYE\nCAA1..CABB;H3     # Lo    [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH\nCABC;H2           # Lo         HANGUL SYLLABLE JJO\nCABD..CAD7;H3     # Lo    [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH\nCAD8;H2           # Lo         HANGUL SYLLABLE JJWA\nCAD9..CAF3;H3     # Lo    [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH\nCAF4;H2           # Lo         HANGUL SYLLABLE JJWAE\nCAF5..CB0F;H3     # Lo    [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH\nCB10;H2           # Lo         HANGUL SYLLABLE JJOE\nCB11..CB2B;H3     # Lo    [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Tracking for Upstream Repository\nDESCRIPTION: Adds a remote named 'upstream' that points to the main Flutter packages repository. This allows you to fetch the latest changes from the main repository without directly modifying your local copy.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: git\nCODE:\n```\n`git remote add upstream git@github.com:flutter/packages.git`\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Setting Include Directories - CMake\nDESCRIPTION: This code snippet adds necessary dependencies and include directories for the Flutter application build. It ensures that the project can compile correctly by linking against the flutter and flutter_wrapper_app libraries, as well as any Windows-specific libraries like dwmapi.lib.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Variables to Parent Scope\nDESCRIPTION: Publishes key variables, including `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`, to the parent scope. This allows other CMake files to access these variables.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings for CMake Targets\nDESCRIPTION: The function defines standard compilation settings for CMake targets by setting C++ standard, compiler options, and processing definitions. It disables exceptions and sets debug-specific definitions, ensuring consistent builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Ranges for Hangul Syllables\nDESCRIPTION: This snippet contains the Unicode code point mappings for Hangul syllables. Each line follows the format of code point (or range), property (H2 or H3), and description. The H2 property represents single characters while H3 represents ranges of 27 characters.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_11\n\nLANGUAGE: unicode-mapping\nCODE:\n```\nCB2C;H2           # Lo         HANGUL SYLLABLE JJYO\nCB2D..CB47;H3     # Lo    [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH\nCB48;H2           # Lo         HANGUL SYLLABLE JJU\nCB49..CB63;H3     # Lo    [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH\nCB64;H2           # Lo         HANGUL SYLLABLE JJWEO\nCB65..CB7F;H3     # Lo    [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH\nCB80;H2           # Lo         HANGUL SYLLABLE JJWE\nCB81..CB9B;H3     # Lo    [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH\nCB9C;H2           # Lo         HANGUL SYLLABLE JJWI\nCB9D..CBB7;H3     # Lo    [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH\nCBB8;H2           # Lo         HANGUL SYLLABLE JJYU\nCBB9..CBD3;H3     # Lo    [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH\nCBD4;H2           # Lo         HANGUL SYLLABLE JJEU\nCBD5..CBEF;H3     # Lo    [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH\nCBF0;H2           # Lo         HANGUL SYLLABLE JJYI\nCBF1..CC0B;H3     # Lo    [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH\nCC0C;H2           # Lo         HANGUL SYLLABLE JJI\nCC0D..CC27;H3     # Lo    [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH\nCC28;H2           # Lo         HANGUL SYLLABLE CA\nCC29..CC43;H3     # Lo    [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH\nCC44;H2           # Lo         HANGUL SYLLABLE CAE\nCC45..CC5F;H3     # Lo    [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH\nCC60;H2           # Lo         HANGUL SYLLABLE CYA\nCC61..CC7B;H3     # Lo    [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH\nCC7C;H2           # Lo         HANGUL SYLLABLE CYAE\nCC7D..CC97;H3     # Lo    [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH\nCC98;H2           # Lo         HANGUL SYLLABLE CEO\nCC99..CCB3;H3     # Lo    [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH\nCCB4;H2           # Lo         HANGUL SYLLABLE CE\nCCB5..CCCF;H3     # Lo    [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH\nCCD0;H2           # Lo         HANGUL SYLLABLE CYEO\nCCD1..CCEB;H3     # Lo    [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH\nCCEC;H2           # Lo         HANGUL SYLLABLE CYE\nCCED..CD07;H3     # Lo    [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH\nCD08;H2           # Lo         HANGUL SYLLABLE CO\nCD09..CD23;H3     # Lo    [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH\nCD24;H2           # Lo         HANGUL SYLLABLE CWA\nCD25..CD3F;H3     # Lo    [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH\nCD40;H2           # Lo         HANGUL SYLLABLE CWAE\nCD41..CD5B;H3     # Lo    [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH\nCD5C;H2           # Lo         HANGUL SYLLABLE COE\nCD5D..CD77;H3     # Lo    [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH\nCD78;H2           # Lo         HANGUL SYLLABLE CYO\nCD79..CD93;H3     # Lo    [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH\nCD94;H2           # Lo         HANGUL SYLLABLE CU\nCD95..CDAF;H3     # Lo    [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH\nCDB0;H2           # Lo         HANGUL SYLLABLE CWEO\nCDB1..CDCB;H3     # Lo    [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH\nCDCC;H2           # Lo         HANGUL SYLLABLE CWE\nCDCD..CDE7;H3     # Lo    [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH\nCDE8;H2           # Lo         HANGUL SYLLABLE CWI\nCDE9..CE03;H3     # Lo    [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH\nCE04;H2           # Lo         HANGUL SYLLABLE CYU\nCE05..CE1F;H3     # Lo    [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH\nCE20;H2           # Lo         HANGUL SYLLABLE CEU\nCE21..CE3B;H3     # Lo    [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH\nCE3C;H2           # Lo         HANGUL SYLLABLE CYI\nCE3D..CE57;H3     # Lo    [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH\nCE58;H2           # Lo         HANGUL SYLLABLE CI\nCE59..CE73;H3     # Lo    [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH\nCE74;H2           # Lo         HANGUL SYLLABLE KA\nCE75..CE8F;H3     # Lo    [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH\nCE90;H2           # Lo         HANGUL SYLLABLE KAE\nCE91..CEAB;H3     # Lo    [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH\nCEAC;H2           # Lo         HANGUL SYLLABLE KYA\nCEAD..CEC7;H3     # Lo    [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH\nCEC8;H2           # Lo         HANGUL SYLLABLE KYAE\nCEC9..CEE3;H3     # Lo    [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH\nCEE4;H2           # Lo         HANGUL SYLLABLE KEO\nCEE5..CEFF;H3     # Lo    [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH\nCF00;H2           # Lo         HANGUL SYLLABLE KE\nCF01..CF1B;H3     # Lo    [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH\nCF1C;H2           # Lo         HANGUL SYLLABLE KYEO\nCF1D..CF37;H3     # Lo    [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH\nCF38;H2           # Lo         HANGUL SYLLABLE KYE\nCF39..CF53;H3     # Lo    [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH\nCF54;H2           # Lo         HANGUL SYLLABLE KO\nCF55..CF6F;H3     # Lo    [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH\nCF70;H2           # Lo         HANGUL SYLLABLE KWA\nCF71..CF8B;H3     # Lo    [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH\nCF8C;H2           # Lo         HANGUL SYLLABLE KWAE\nCF8D..CFA7;H3     # Lo    [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH\nCFA8;H2           # Lo         HANGUL SYLLABLE KOE\nCFA9..CFC3;H3     # Lo    [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH\nCFC4;H2           # Lo         HANGUL SYLLABLE KYO\nCFC5..CFDF;H3     # Lo    [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH\nCFE0;H2           # Lo         HANGUL SYLLABLE KU\nCFE1..CFFB;H3     # Lo    [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH\nCFFC;H2           # Lo         HANGUL SYLLABLE KWEO\nCFFD..D017;H3     # Lo    [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH\nD018;H2           # Lo         HANGUL SYLLABLE KWE\nD019..D033;H3     # Lo    [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH\nD034;H2           # Lo         HANGUL SYLLABLE KWI\nD035..D04F;H3     # Lo    [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH\nD050;H2           # Lo         HANGUL SYLLABLE KYU\nD051..D06B;H3     # Lo    [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH\nD06C;H2           # Lo         HANGUL SYLLABLE KEU\nD06D..D087;H3     # Lo    [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH\nD088;H2           # Lo         HANGUL SYLLABLE KYI\nD089..D0A3;H3     # Lo    [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH\nD0A4;H2           # Lo         HANGUL SYLLABLE KI\nD0A5..D0BF;H3     # Lo    [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH\nD0C0;H2           # Lo         HANGUL SYLLABLE TA\nD0C1..D0DB;H3     # Lo    [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH\nD0DC;H2           # Lo         HANGUL SYLLABLE TAE\nD0DD..D0F7;H3     # Lo    [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH\nD0F8;H2           # Lo         HANGUL SYLLABLE TYA\nD0F9..D113;H3     # Lo    [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH\nD114;H2           # Lo         HANGUL SYLLABLE TYAE\nD115..D12F;H3     # Lo    [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH\nD130;H2           # Lo         HANGUL SYLLABLE TEO\nD131..D14B;H3     # Lo    [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH\nD14C;H2           # Lo         HANGUL SYLLABLE TE\nD14D..D167;H3     # Lo    [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH\nD168;H2           # Lo         HANGUL SYLLABLE TYEO\nD169..D183;H3     # Lo    [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH\nD184;H2           # Lo         HANGUL SYLLABLE TYE\nD185..D19F;H3     # Lo    [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH\nD1A0;H2           # Lo         HANGUL SYLLABLE TO\nD1A1..D1BB;H3     # Lo    [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH\nD1BC;H2           # Lo         HANGUL SYLLABLE TWA\nD1BD..D1D7;H3     # Lo    [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH\nD1D8;H2           # Lo         HANGUL SYLLABLE TWAE\nD1D9..D1F3;H3     # Lo    [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH\nD1F4;H2           # Lo         HANGUL SYLLABLE TOE\nD1F5..D20F;H3     # Lo    [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH\nD210;H2           # Lo         HANGUL SYLLABLE TYO\nD211..D22B;H3     # Lo    [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH\nD22C;H2           # Lo         HANGUL SYLLABLE TU\nD22D..D247;H3     # Lo    [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH\nD248;H2           # Lo         HANGUL SYLLABLE TWEO\nD249..D263;H3     # Lo    [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH\nD264;H2           # Lo         HANGUL SYLLABLE TWE\nD265..D27F;H3     # Lo    [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH\nD280;H2           # Lo         HANGUL SYLLABLE TWI\nD281..D29B;H3     # Lo    [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH\nD29C;H2           # Lo         HANGUL SYLLABLE TYU\nD29D..D2B7;H3     # Lo    [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH\nD2B8;H2           # Lo         HANGUL SYLLABLE TEU\nD2B9..D2D3;H3     # Lo    [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH\nD2D4;H2           # Lo         HANGUL SYLLABLE TYI\nD2D5..D2EF;H3     # Lo    [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH\nD2F0;H2           # Lo         HANGUL SYLLABLE TI\nD2F1..D30B;H3     # Lo    [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH\nD30C;H2           # Lo         HANGUL SYLLABLE PA\nD30D..D327;H3     # Lo    [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH\nD328;H2           # Lo         HANGUL SYLLABLE PAE\nD329..D343;H3     # Lo    [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH\nD344;H2           # Lo         HANGUL SYLLABLE PYA\nD345..D35F;H3     # Lo    [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH\nD360;H2           # Lo         HANGUL SYLLABLE PYAE\nD361..D37B;H3     # Lo    [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH\nD37C;H2           # Lo         HANGUL SYLLABLE PEO\nD37D..D397;H3     # Lo    [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH\nD398;H2           # Lo         HANGUL SYLLABLE PE\nD399..D3B3;H3     # Lo    [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH\nD3B4;H2           # Lo         HANGUL SYLLABLE PYEO\nD3B5..D3CF;H3     # Lo    [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH\nD3D0;H2           # Lo         HANGUL SYLLABLE PYE\n```\n\n----------------------------------------\n\nTITLE: Enabling XCTests or XCUITests in Flutter Plugin (Objective-C/Swift)\nDESCRIPTION: This section provides step-by-step instructions to enable XCTests or XCUITests for a Flutter plugin, detailing necessary configurations and settings to ensure compatibility with Flutter. It includes setting up test bundles and configuring project settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Open `<path_to_plugin>/example/ios/Runner.xcworkspace` using Xcode. (For macOS, replace `ios` with `macos`.)\n1. Create a new \"Unit Testing Bundle\" or \"UI Testing Bundle\", depending on the type of test.\n1. In the target options window, populate details as following, then click on \"Finish\".\n    * In the \"product name\" field, type \"RunnerTests\" or \"RunnerUITests\", depending on the type of test.\n    * In the \"Team\" field, select \"None\".\n    * Set the Organization Identifier to \"dev.flutter.plugins\".\n    * In the Language field, select \"Objective-C\" for iOS, or \"Swift\" for macOS.\n    * In the Project field, select the xcodeproj \"Runner\" (blue color).\n    * In the Target to be Tested, select xcworkspace \"Runner\" (white color).\n    * In the Build Settings tab, remove most of the target-level overrides that are generated by the template. In particular:\n        * `CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER` is currently incompatible with Flutter.\n        * `IPHONEOS_DEPLOYMENT_TARGET` and `TARGETED_DEVICE_FAMILY` may cause issues running tests.\n        * The compiler settings (`CLANG_*`, `GCC_*`, and `MTL_*`) shouldn't be needed.\n1. Use of OCMock in new tests, especially Swift tests, is discouraged in favor of protocol-based programming and dependency injection. However, if your XCTests require OCMock, open the Package Dependencies section of the project in Xcode, and add the following dependency to the RunnerTests target:\n\n   ```\n   https://github.com/erikdoe/ocmock\n   Commit fe1661a3efed11831a6452f4b1a0c5e6ddc08c3d\n   ```\n   OCMock must be set to Commit due to its use of unsafe build flags.\n1. A RunnerTests/RunnerUITests folder should be created and you can start hacking in the added `.m`/`.swift` file.\n```\n\n----------------------------------------\n\nTITLE: Defining Katakana Character Ranges in Unicode\nDESCRIPTION: Lists the Unicode code points for Katakana characters across different categories. Includes various Katakana letters, marks, and symbols categorized by their Unicode properties (Lm, Sk, Pd, Lo, So) and totals 314 code points.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n3031..3035    ; Katakana # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n309B..309C    ; Katakana # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n30A0          ; Katakana # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN\n30A1..30FA    ; Katakana # Lo  [90] KATAKANA LETTER SMALL A..KATAKANA LETTER VO\n30FC..30FE    ; Katakana # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\n30FF          ; Katakana # Lo       KATAKANA DIGRAPH KOTO\n31F0..31FF    ; Katakana # Lo  [16] KATAKANA LETTER SMALL KU..KATAKANA LETTER SMALL RO\n32D0..32FE    ; Katakana # So  [47] CIRCLED KATAKANA A..CIRCLED KATAKANA WO\n3300..3357    ; Katakana # So  [88] SQUARE APAATO..SQUARE WATTO\nFF66..FF6F    ; Katakana # Lo  [10] HALFWIDTH KATAKANA LETTER WO..HALFWIDTH KATAKANA LETTER SMALL TU\nFF70          ; Katakana # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\nFF71..FF9D    ; Katakana # Lo  [45] HALFWIDTH KATAKANA LETTER A..HALFWIDTH KATAKANA LETTER N\n1B000         ; Katakana # Lo       KATAKANA LETTER ARCHAIC E\n1B164..1B167  ; Katakana # Lo   [4] KATAKANA LETTER SMALL WI..KATAKANA LETTER SMALL N\n\n# Total code points: 314\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Application Executable - CMake\nDESCRIPTION: This code snippet defines the executable target for the Flutter application, specifying its source files and build settings. It also highlights the importance of changing the BINARY_NAME in the top-level CMakeLists.txt to ensure the build process works correctly. The application will be built with standard Windows settings and linked against necessary libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring gclient for Emscripten SDK\nDESCRIPTION: Configuration for gclient to download and activate the Emscripten SDK for CanvasKit building\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsolutions = [\n  {\n    \"managed\": False,\n    \"name\": \"src/flutter\",\n    \"url\": \"git@github.com:<your_username_here>/engine.git\",\n    \"custom_deps\": {},\n    \"deps_file\": \"DEPS\",\n    \"safesync_url\": \"\",\n    \"custom_vars\": {\n      \"download_emsdk\": True,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Making EGL Context Current in C++\nDESCRIPTION: Makes the created EGL context current on the calling thread.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ncontext->MakeCurrent(*surface);\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ALetter Category Code Points\nDESCRIPTION: This snippet defines Unicode code points for the ALetter category, which includes letters and letter-like characters. It specifies ranges and individual code points along with their descriptions, covering multiple scripts and languages.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n0041..005A    ; ALetter # L&  [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z\n0061..007A    ; ALetter # L&  [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z\n00AA          ; ALetter # Lo       FEMININE ORDINAL INDICATOR\n00B5          ; ALetter # L&       MICRO SIGN\n00BA          ; ALetter # Lo       MASCULINE ORDINAL INDICATOR\n00C0..00D6    ; ALetter # L&  [23] LATIN CAPITAL LETTER A WITH GRAVE..LATIN CAPITAL LETTER O WITH DIAERESIS\n00D8..00F6    ; ALetter # L&  [31] LATIN CAPITAL LETTER O WITH STROKE..LATIN SMALL LETTER O WITH DIAERESIS\n00F8..01BA    ; ALetter # L& [195] LATIN SMALL LETTER O WITH STROKE..LATIN SMALL LETTER EZH WITH TAIL\n01BB          ; ALetter # Lo       LATIN LETTER TWO WITH STROKE\n01BC..01BF    ; ALetter # L&   [4] LATIN CAPITAL LETTER TONE FIVE..LATIN LETTER WYNN\n01C0..01C3    ; ALetter # Lo   [4] LATIN LETTER DENTAL CLICK..LATIN LETTER RETROFLEX CLICK\n01C4..0293    ; ALetter # L& [208] LATIN CAPITAL LETTER DZ WITH CARON..LATIN SMALL LETTER EZH WITH CURL\n0294          ; ALetter # Lo       LATIN LETTER GLOTTAL STOP\n0295..02AF    ; ALetter # L&  [27] LATIN LETTER PHARYNGEAL VOICED FRICATIVE..LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL\n02B0..02C1    ; ALetter # Lm  [18] MODIFIER LETTER SMALL H..MODIFIER LETTER REVERSED GLOTTAL STOP\n02C2..02C5    ; ALetter # Sk   [4] MODIFIER LETTER LEFT ARROWHEAD..MODIFIER LETTER DOWN ARROWHEAD\n02C6..02D1    ; ALetter # Lm  [12] MODIFIER LETTER CIRCUMFLEX ACCENT..MODIFIER LETTER HALF TRIANGULAR COLON\n02D2..02D7    ; ALetter # Sk   [6] MODIFIER LETTER CENTRED RIGHT HALF RING..MODIFIER LETTER MINUS SIGN\n02DE..02DF    ; ALetter # Sk   [2] MODIFIER LETTER RHOTIC HOOK..MODIFIER LETTER CROSS ACCENT\n02E0..02E4    ; ALetter # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n02E5..02EB    ; ALetter # Sk   [7] MODIFIER LETTER EXTRA-HIGH TONE BAR..MODIFIER LETTER YANG DEPARTING TONE MARK\n02EC          ; ALetter # Lm       MODIFIER LETTER VOICING\n02ED          ; ALetter # Sk       MODIFIER LETTER UNASPIRATED\n02EE          ; ALetter # Lm       MODIFIER LETTER DOUBLE APOSTROPHE\n02EF..02FF    ; ALetter # Sk  [17] MODIFIER LETTER LOW DOWN ARROWHEAD..MODIFIER LETTER LOW LEFT ARROW\n0370..0373    ; ALetter # L&   [4] GREEK CAPITAL LETTER HETA..GREEK SMALL LETTER ARCHAIC SAMPI\n0374          ; ALetter # Lm       GREEK NUMERAL SIGN\n0376..0377    ; ALetter # L&   [2] GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA..GREEK SMALL LETTER PAMPHYLIAN DIGAMMA\n037A          ; ALetter # Lm       GREEK YPOGEGRAMMENI\n037B..037D    ; ALetter # L&   [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL\n037F          ; ALetter # L&       GREEK CAPITAL LETTER YOT\n0386          ; ALetter # L&       GREEK CAPITAL LETTER ALPHA WITH TONOS\n0388..038A    ; ALetter # L&   [3] GREEK CAPITAL LETTER EPSILON WITH TONOS..GREEK CAPITAL LETTER IOTA WITH TONOS\n038C          ; ALetter # L&       GREEK CAPITAL LETTER OMICRON WITH TONOS\n038E..03A1    ; ALetter # L&  [20] GREEK CAPITAL LETTER UPSILON WITH TONOS..GREEK CAPITAL LETTER RHO\n03A3..03F5    ; ALetter # L&  [83] GREEK CAPITAL LETTER SIGMA..GREEK LUNATE EPSILON SYMBOL\n03F7..0481    ; ALetter # L& [139] GREEK CAPITAL LETTER SHO..CYRILLIC SMALL LETTER KOPPA\n048A..052F    ; ALetter # L& [166] CYRILLIC CAPITAL LETTER SHORT I WITH TAIL..CYRILLIC SMALL LETTER EL WITH DESCENDER\n0531..0556    ; ALetter # L&  [38] ARMENIAN CAPITAL LETTER AYB..ARMENIAN CAPITAL LETTER FEH\n0559          ; ALetter # Lm       ARMENIAN MODIFIER LETTER LEFT HALF RING\n055A..055C    ; ALetter # Po   [3] ARMENIAN APOSTROPHE..ARMENIAN EXCLAMATION MARK\n055E          ; ALetter # Po       ARMENIAN QUESTION MARK\n0560..0588    ; ALetter # L&  [41] ARMENIAN SMALL LETTER TURNED AYB..ARMENIAN SMALL LETTER YI WITH STROKE\n058A          ; ALetter # Pd       ARMENIAN HYPHEN\n05F3          ; ALetter # Po       HEBREW PUNCTUATION GERESH\n0620..063F    ; ALetter # Lo  [32] ARABIC LETTER KASHMIRI YEH..ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE\n0640          ; ALetter # Lm       ARABIC TATWEEL\n0641..064A    ; ALetter # Lo  [10] ARABIC LETTER FEH..ARABIC LETTER YEH\n066E..066F    ; ALetter # Lo   [2] ARABIC LETTER DOTLESS BEH..ARABIC LETTER DOTLESS QAF\n0671..06D3    ; ALetter # Lo  [99] ARABIC LETTER ALEF WASLA..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE\n06D5          ; ALetter # Lo       ARABIC LETTER AE\n06E5..06E6    ; ALetter # Lm   [2] ARABIC SMALL WAW..ARABIC SMALL YEH\n06EE..06EF    ; ALetter # Lo   [2] ARABIC LETTER DAL WITH INVERTED V..ARABIC LETTER REH WITH INVERTED V\n06FA..06FC    ; ALetter # Lo   [3] ARABIC LETTER SHEEN WITH DOT BELOW..ARABIC LETTER GHAIN WITH DOT BELOW\n06FF          ; ALetter # Lo       ARABIC LETTER HEH WITH INVERTED V\n0710          ; ALetter # Lo       SYRIAC LETTER ALAPH\n0712..072F    ; ALetter # Lo  [30] SYRIAC LETTER BETH..SYRIAC LETTER PERSIAN DHALATH\n074D..07A5    ; ALetter # Lo  [89] SYRIAC LETTER SOGDIAN ZHAIN..THAANA LETTER WAAVU\n07B1          ; ALetter # Lo       THAANA LETTER NAA\n07CA..07EA    ; ALetter # Lo  [33] NKO LETTER A..NKO LETTER JONA RA\n07F4..07F5    ; ALetter # Lm   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE\n07FA          ; ALetter # Lm       NKO LAJANYALAN\n0800..0815    ; ALetter # Lo  [22] SAMARITAN LETTER ALAF..SAMARITAN LETTER TAAF\n081A          ; ALetter # Lm       SAMARITAN MODIFIER LETTER EPENTHETIC YUT\n0824          ; ALetter # Lm       SAMARITAN MODIFIER LETTER SHORT A\n0828          ; ALetter # Lm       SAMARITAN MODIFIER LETTER I\n0840..0858    ; ALetter # Lo  [25] MANDAIC LETTER HALQA..MANDAIC LETTER AIN\n0860..086A    ; ALetter # Lo  [11] SYRIAC LETTER MALAYALAM NGA..SYRIAC LETTER MALAYALAM SSA\n08A0..08B4    ; ALetter # Lo  [21] ARABIC LETTER BEH WITH SMALL V BELOW..ARABIC LETTER KAF WITH DOT BELOW\n08B6..08C7    ; ALetter # Lo  [18] ARABIC LETTER BEH WITH SMALL MEEM ABOVE..ARABIC LETTER LAM WITH SMALL ARABIC LETTER TAH ABOVE\n0904..0939    ; ALetter # Lo  [54] DEVANAGARI LETTER SHORT A..DEVANAGARI LETTER HA\n093D          ; ALetter # Lo       DEVANAGARI SIGN AVAGRAHA\n0950          ; ALetter # Lo       DEVANAGARI OM\n0958..0961    ; ALetter # Lo  [10] DEVANAGARI LETTER QA..DEVANAGARI LETTER VOCALIC LL\n0971          ; ALetter # Lm       DEVANAGARI SIGN HIGH SPACING DOT\n0972..0980    ; ALetter # Lo  [15] DEVANAGARI LETTER CANDRA A..BENGALI ANJI\n0985..098C    ; ALetter # Lo   [8] BENGALI LETTER A..BENGALI LETTER VOCALIC L\n098F..0990    ; ALetter # Lo   [2] BENGALI LETTER E..BENGALI LETTER AI\n0993..09A8    ; ALetter # Lo  [22] BENGALI LETTER O..BENGALI LETTER NA\n09AA..09B0    ; ALetter # Lo   [7] BENGALI LETTER PA..BENGALI LETTER RA\n09B2          ; ALetter # Lo       BENGALI LETTER LA\n09B6..09B9    ; ALetter # Lo   [4] BENGALI LETTER SHA..BENGALI LETTER HA\n09BD          ; ALetter # Lo       BENGALI SIGN AVAGRAHA\n09CE          ; ALetter # Lo       BENGALI LETTER KHANDA TA\n09DC..09DD    ; ALetter # Lo   [2] BENGALI LETTER RRA..BENGALI LETTER RHA\n09DF..09E1    ; ALetter # Lo   [3] BENGALI LETTER YYA..BENGALI LETTER VOCALIC LL\n09F0..09F1    ; ALetter # Lo   [2] BENGALI LETTER RA WITH MIDDLE DIAGONAL..BENGALI LETTER RA WITH LOWER DIAGONAL\n09FC          ; ALetter # Lo       BENGALI LETTER VEDIC ANUSVARA\n0A05..0A0A    ; ALetter # Lo   [6] GURMUKHI LETTER A..GURMUKHI LETTER UU\n0A0F..0A10    ; ALetter # Lo   [2] GURMUKHI LETTER EE..GURMUKHI LETTER AI\n0A13..0A28    ; ALetter # Lo  [22] GURMUKHI LETTER OO..GURMUKHI LETTER NA\n0A2A..0A30    ; ALetter # Lo   [7] GURMUKHI LETTER PA..GURMUKHI LETTER RA\n0A32..0A33    ; ALetter # Lo   [2] GURMUKHI LETTER LA..GURMUKHI LETTER LLA\n0A35..0A36    ; ALetter # Lo   [2] GURMUKHI LETTER VA..GURMUKHI LETTER SHA\n0A38..0A39    ; ALetter # Lo   [2] GURMUKHI LETTER SA..GURMUKHI LETTER HA\n0A59..0A5C    ; ALetter # Lo   [4] GURMUKHI LETTER KHHA..GURMUKHI LETTER RRA\n0A5E          ; ALetter # Lo       GURMUKHI LETTER FA\n0A72..0A74    ; ALetter # Lo   [3] GURMUKHI IRI..GURMUKHI EK ONKAR\n0A85..0A8D    ; ALetter # Lo   [9] GUJARATI LETTER A..GUJARATI VOWEL CANDRA E\n0A8F..0A91    ; ALetter # Lo   [3] GUJARATI LETTER E..GUJARATI VOWEL CANDRA O\n0A93..0AA8    ; ALetter # Lo  [22] GUJARATI LETTER O..GUJARATI LETTER NA\n0AAA..0AB0    ; ALetter # Lo   [7] GUJARATI LETTER PA..GUJARATI LETTER RA\n0AB2..0AB3    ; ALetter # Lo   [2] GUJARATI LETTER LA..GUJARATI LETTER LLA\n0AB5..0AB9    ; ALetter # Lo   [5] GUJARATI LETTER VA..GUJARATI LETTER HA\n0ABD          ; ALetter # Lo       GUJARATI SIGN AVAGRAHA\n0AD0          ; ALetter # Lo       GUJARATI OM\n0AE0..0AE1    ; ALetter # Lo   [2] GUJARATI LETTER VOCALIC RR..GUJARATI LETTER VOCALIC LL\n0AF9          ; ALetter # Lo       GUJARATI LETTER ZHA\n0B05..0B0C    ; ALetter # Lo   [8] ORIYA LETTER A..ORIYA LETTER VOCALIC L\n0B0F..0B10    ; ALetter # Lo   [2] ORIYA LETTER E..ORIYA LETTER AI\n0B13..0B28    ; ALetter # Lo  [22] ORIYA LETTER O..ORIYA LETTER NA\n0B2A..0B30    ; ALetter # Lo   [7] ORIYA LETTER PA..ORIYA LETTER RA\n0B32..0B33    ; ALetter # Lo   [2] ORIYA LETTER LA..ORIYA LETTER LLA\n0B35..0B39    ; ALetter # Lo   [5] ORIYA LETTER VA..ORIYA LETTER HA\n0B3D          ; ALetter # Lo       ORIYA SIGN AVAGRAHA\n0B5C..0B5D    ; ALetter # Lo   [2] ORIYA LETTER RRA..ORIYA LETTER RHA\n0B5F..0B61    ; ALetter # Lo   [3] ORIYA LETTER YYA..ORIYA LETTER VOCALIC LL\n0B71          ; ALetter # Lo       ORIYA LETTER WA\n0B83          ; ALetter # Lo       TAMIL SIGN VISARGA\n0B85..0B8A    ; ALetter # Lo   [6] TAMIL LETTER A..TAMIL LETTER UU\n0B8E..0B90    ; ALetter # Lo   [3] TAMIL LETTER E..TAMIL LETTER AI\n0B92..0B95    ; ALetter # Lo   [4] TAMIL LETTER O..TAMIL LETTER KA\n0B99..0B9A    ; ALetter # Lo   [2] TAMIL LETTER NGA..TAMIL LETTER CA\n0B9C          ; ALetter # Lo       TAMIL LETTER JA\n0B9E..0B9F    ; ALetter # Lo   [2] TAMIL LETTER NYA..TAMIL LETTER TTA\n0BA3..0BA4    ; ALetter # Lo   [2] TAMIL LETTER NNA..TAMIL LETTER TA\n0BA8..0BAA    ; ALetter # Lo   [3] TAMIL LETTER NA..TAMIL LETTER PA\n0BAE..0BB9    ; ALetter # Lo  [12] TAMIL LETTER MA..TAMIL LETTER HA\n0BD0          ; ALetter # Lo       TAMIL OM\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Hangul Syllables\nDESCRIPTION: This snippet defines Unicode ranges for various Hangul syllables, specifying their code points and properties. Each line represents a range or individual character, with the format: code point(s); property; character description.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\nB124;H2           # Lo         HANGUL SYLLABLE NE\nB125..B13F;H3     # Lo    [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH\nB140;H2           # Lo         HANGUL SYLLABLE NYEO\nB141..B15B;H3     # Lo    [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH\nB15C;H2           # Lo         HANGUL SYLLABLE NYE\nB15D..B177;H3     # Lo    [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH\nB178;H2           # Lo         HANGUL SYLLABLE NO\nB179..B193;H3     # Lo    [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH\nB194;H2           # Lo         HANGUL SYLLABLE NWA\nB195..B1AF;H3     # Lo    [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH\nB1B0;H2           # Lo         HANGUL SYLLABLE NWAE\nB1B1..B1CB;H3     # Lo    [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH\nB1CC;H2           # Lo         HANGUL SYLLABLE NOE\nB1CD..B1E7;H3     # Lo    [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH\nB1E8;H2           # Lo         HANGUL SYLLABLE NYO\nB1E9..B203;H3     # Lo    [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH\nB204;H2           # Lo         HANGUL SYLLABLE NU\nB205..B21F;H3     # Lo    [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH\nB220;H2           # Lo         HANGUL SYLLABLE NWEO\nB221..B23B;H3     # Lo    [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH\nB23C;H2           # Lo         HANGUL SYLLABLE NWE\nB23D..B257;H3     # Lo    [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH\nB258;H2           # Lo         HANGUL SYLLABLE NWI\nB259..B273;H3     # Lo    [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH\nB274;H2           # Lo         HANGUL SYLLABLE NYU\nB275..B28F;H3     # Lo    [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH\nB290;H2           # Lo         HANGUL SYLLABLE NEU\nB291..B2AB;H3     # Lo    [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH\nB2AC;H2           # Lo         HANGUL SYLLABLE NYI\nB2AD..B2C7;H3     # Lo    [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH\nB2C8;H2           # Lo         HANGUL SYLLABLE NI\nB2C9..B2E3;H3     # Lo    [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH\nB2E4;H2           # Lo         HANGUL SYLLABLE DA\nB2E5..B2FF;H3     # Lo    [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH\nB300;H2           # Lo         HANGUL SYLLABLE DAE\nB301..B31B;H3     # Lo    [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH\nB31C;H2           # Lo         HANGUL SYLLABLE DYA\nB31D..B337;H3     # Lo    [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH\nB338;H2           # Lo         HANGUL SYLLABLE DYAE\nB339..B353;H3     # Lo    [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH\nB354;H2           # Lo         HANGUL SYLLABLE DEO\nB355..B36F;H3     # Lo    [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH\nB370;H2           # Lo         HANGUL SYLLABLE DE\nB371..B38B;H3     # Lo    [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH\nB38C;H2           # Lo         HANGUL SYLLABLE DYEO\nB38D..B3A7;H3     # Lo    [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH\nB3A8;H2           # Lo         HANGUL SYLLABLE DYE\nB3A9..B3C3;H3     # Lo    [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH\nB3C4;H2           # Lo         HANGUL SYLLABLE DO\nB3C5..B3DF;H3     # Lo    [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH\nB3E0;H2           # Lo         HANGUL SYLLABLE DWA\nB3E1..B3FB;H3     # Lo    [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH\nB3FC;H2           # Lo         HANGUL SYLLABLE DWAE\nB3FD..B417;H3     # Lo    [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH\nB418;H2           # Lo         HANGUL SYLLABLE DOE\nB419..B433;H3     # Lo    [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH\nB434;H2           # Lo         HANGUL SYLLABLE DYO\nB435..B44F;H3     # Lo    [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH\nB450;H2           # Lo         HANGUL SYLLABLE DU\nB451..B46B;H3     # Lo    [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH\nB46C;H2           # Lo         HANGUL SYLLABLE DWEO\nB46D..B487;H3     # Lo    [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH\nB488;H2           # Lo         HANGUL SYLLABLE DWE\nB489..B4A3;H3     # Lo    [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH\nB4A4;H2           # Lo         HANGUL SYLLABLE DWI\nB4A5..B4BF;H3     # Lo    [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH\nB4C0;H2           # Lo         HANGUL SYLLABLE DYU\nB4C1..B4DB;H3     # Lo    [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH\nB4DC;H2           # Lo         HANGUL SYLLABLE DEU\nB4DD..B4F7;H3     # Lo    [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH\nB4F8;H2           # Lo         HANGUL SYLLABLE DYI\nB4F9..B513;H3     # Lo    [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH\nB514;H2           # Lo         HANGUL SYLLABLE DI\nB515..B52F;H3     # Lo    [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH\nB530;H2           # Lo         HANGUL SYLLABLE DDA\nB531..B54B;H3     # Lo    [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH\nB54C;H2           # Lo         HANGUL SYLLABLE DDAE\nB54D..B567;H3     # Lo    [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH\nB568;H2           # Lo         HANGUL SYLLABLE DDYA\nB569..B583;H3     # Lo    [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH\nB584;H2           # Lo         HANGUL SYLLABLE DDYAE\nB585..B59F;H3     # Lo    [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH\nB5A0;H2           # Lo         HANGUL SYLLABLE DDEO\nB5A1..B5BB;H3     # Lo    [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH\nB5BC;H2           # Lo         HANGUL SYLLABLE DDE\nB5BD..B5D7;H3     # Lo    [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH\nB5D8;H2           # Lo         HANGUL SYLLABLE DDYEO\nB5D9..B5F3;H3     # Lo    [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH\nB5F4;H2           # Lo         HANGUL SYLLABLE DDYE\nB5F5..B60F;H3     # Lo    [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH\nB610;H2           # Lo         HANGUL SYLLABLE DDO\nB611..B62B;H3     # Lo    [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH\nB62C;H2           # Lo         HANGUL SYLLABLE DDWA\nB62D..B647;H3     # Lo    [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH\nB648;H2           # Lo         HANGUL SYLLABLE DDWAE\nB649..B663;H3     # Lo    [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH\nB664;H2           # Lo         HANGUL SYLLABLE DDOE\nB665..B67F;H3     # Lo    [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH\nB680;H2           # Lo         HANGUL SYLLABLE DDYO\nB681..B69B;H3     # Lo    [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH\nB69C;H2           # Lo         HANGUL SYLLABLE DDU\nB69D..B6B7;H3     # Lo    [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH\nB6B8;H2           # Lo         HANGUL SYLLABLE DDWEO\nB6B9..B6D3;H3     # Lo    [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH\nB6D4;H2           # Lo         HANGUL SYLLABLE DDWE\nB6D5..B6EF;H3     # Lo    [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH\nB6F0;H2           # Lo         HANGUL SYLLABLE DDWI\nB6F1..B70B;H3     # Lo    [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH\nB70C;H2           # Lo         HANGUL SYLLABLE DDYU\nB70D..B727;H3     # Lo    [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH\nB728;H2           # Lo         HANGUL SYLLABLE DDEU\nB729..B743;H3     # Lo    [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH\nB744;H2           # Lo         HANGUL SYLLABLE DDYI\nB745..B75F;H3     # Lo    [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH\nB760;H2           # Lo         HANGUL SYLLABLE DDI\nB761..B77B;H3     # Lo    [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH\nB77C;H2           # Lo         HANGUL SYLLABLE RA\nB77D..B797;H3     # Lo    [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH\nB798;H2           # Lo         HANGUL SYLLABLE RAE\nB799..B7B3;H3     # Lo    [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH\nB7B4;H2           # Lo         HANGUL SYLLABLE RYA\nB7B5..B7CF;H3     # Lo    [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH\nB7D0;H2           # Lo         HANGUL SYLLABLE RYAE\nB7D1..B7EB;H3     # Lo    [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH\nB7EC;H2           # Lo         HANGUL SYLLABLE REO\nB7ED..B807;H3     # Lo    [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH\nB808;H2           # Lo         HANGUL SYLLABLE RE\nB809..B823;H3     # Lo    [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH\nB824;H2           # Lo         HANGUL SYLLABLE RYEO\nB825..B83F;H3     # Lo    [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH\nB840;H2           # Lo         HANGUL SYLLABLE RYE\nB841..B85B;H3     # Lo    [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH\nB85C;H2           # Lo         HANGUL SYLLABLE RO\nB85D..B877;H3     # Lo    [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH\nB878;H2           # Lo         HANGUL SYLLABLE RWA\nB879..B893;H3     # Lo    [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH\nB894;H2           # Lo         HANGUL SYLLABLE RWAE\nB895..B8AF;H3     # Lo    [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH\nB8B0;H2           # Lo         HANGUL SYLLABLE ROE\nB8B1..B8CB;H3     # Lo    [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH\nB8CC;H2           # Lo         HANGUL SYLLABLE RYO\nB8CD..B8E7;H3     # Lo    [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH\nB8E8;H2           # Lo         HANGUL SYLLABLE RU\nB8E9..B903;H3     # Lo    [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH\nB904;H2           # Lo         HANGUL SYLLABLE RWEO\nB905..B91F;H3     # Lo    [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH\nB920;H2           # Lo         HANGUL SYLLABLE RWE\nB921..B93B;H3     # Lo    [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH\nB93C;H2           # Lo         HANGUL SYLLABLE RWI\nB93D..B957;H3     # Lo    [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH\nB958;H2           # Lo         HANGUL SYLLABLE RYU\nB959..B973;H3     # Lo    [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH\nB974;H2           # Lo         HANGUL SYLLABLE REU\nB975..B98F;H3     # Lo    [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH\nB990;H2           # Lo         HANGUL SYLLABLE RYI\nB991..B9AB;H3     # Lo    [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH\nB9AC;H2           # Lo         HANGUL SYLLABLE RI\nB9AD..B9C7;H3     # Lo    [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH\nB9C8;H2           # Lo         HANGUL SYLLABLE MA\n```\n\n----------------------------------------\n\nTITLE: Add RaisedButton to HomePage's ListView (Dart)\nDESCRIPTION: This code snippet adds a RaisedButton to the HomePage's ListView in the macrobenchmarks app, enabling manual testers and the Flutter driver to navigate to the new 'super_important_case' page. It uses the kSuperImportantCaseRouteName constant for navigation and provides a user-friendly text label.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n       RaisedButton(\n         key: const Key(kSuperImportantCaseRouteName),\n         child: const Text('Super Important Case'),\n         onPressed: () {\n           Navigator.pushNamed(context, kSuperImportantCaseRouteName);\n         },\n       ),\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend\nDESCRIPTION: Sets up the Flutter tool backend command and assembly target. Creates a custom command to generate necessary files and libraries using the Flutter tool backend.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Example of Build Definition in JSON\nDESCRIPTION: This snippet provides a JSON structure for defining a build in the Flutter Engine Build Definition Language. It includes properties like archives, gn commands, ninja commands, and more, essential for setting up and running CI builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n           \"archives\": [],\n           \"drone_dimensions\": [],\n           \"gclient_variables\": {},\n           \"gn\": [],\n           \"name\": \"host_debug\",\n           \"generators\": [],\n           \"ninja\": {},\n           \"tests\": []\n           \"postsubmit_overrides\": {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating CIPD Package Manually - Bash Command\nDESCRIPTION: This Bash command allows for manual creation and upload of Android SDK packages to CIPD. It specifies the package name and version tag for the uploaded package.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cipd create -in <your-android-dir>/Android/sdk/<some_package> -name flutter/android/sdk/<some_package> -tag version:<new-version-tag>\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Various Scripts\nDESCRIPTION: This code snippet defines Unicode character ranges and their corresponding categories for multiple scripts. It includes mappings for punctuation, letters, modifiers, and syllables across different writing systems.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\nAA5C;AL           # Po         CHAM PUNCTUATION SPIRAL\nAA5D..AA5F;BA     # Po     [3] CHAM PUNCTUATION DANDA..CHAM PUNCTUATION TRIPLE DANDA\nAA60..AA6F;SA     # Lo    [16] MYANMAR LETTER KHAMTI GA..MYANMAR LETTER KHAMTI FA\nAA70;SA           # Lm         MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAA71..AA76;SA     # Lo     [6] MYANMAR LETTER KHAMTI XA..MYANMAR LOGOGRAM KHAMTI HM\nAA77..AA79;SA     # So     [3] MYANMAR SYMBOL AITON EXCLAMATION..MYANMAR SYMBOL AITON TWO\nAA7A;SA           # Lo         MYANMAR LETTER AITON RA\nAA7B;SA           # Mc         MYANMAR SIGN PAO KAREN TONE\nAA7C;SA           # Mn         MYANMAR SIGN TAI LAING TONE-2\nAA7D;SA           # Mc         MYANMAR SIGN TAI LAING TONE-5\nAA7E..AA7F;SA     # Lo     [2] MYANMAR LETTER SHWE PALAUNG CHA..MYANMAR LETTER SHWE PALAUNG SHA\nAA80..AAAF;SA     # Lo    [48] TAI VIET LETTER LOW KO..TAI VIET LETTER HIGH O\nAAB0;SA           # Mn         TAI VIET MAI KANG\nAAB1;SA           # Lo         TAI VIET VOWEL AA\nAAB2..AAB4;SA     # Mn     [3] TAI VIET VOWEL I..TAI VIET VOWEL U\nAAB5..AAB6;SA     # Lo     [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB7..AAB8;SA     # Mn     [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA\nAAB9..AABD;SA     # Lo     [5] TAI VIET VOWEL UEA..TAI VIET VOWEL AN\nAABE..AABF;SA     # Mn     [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK\nAAC0;SA           # Lo         TAI VIET TONE MAI NUENG\nAAC1;SA           # Mn         TAI VIET TONE MAI THO\nAAC2;SA           # Lo         TAI VIET TONE MAI SONG\nAADB..AADC;SA     # Lo     [2] TAI VIET SYMBOL KON..TAI VIET SYMBOL NUENG\nAADD;SA           # Lm         TAI VIET SYMBOL SAM\nAADE..AADF;SA     # Po     [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI\nAAE0..AAEA;AL     # Lo    [11] MEETEI MAYEK LETTER E..MEETEI MAYEK LETTER SSA\nAAEB;CM           # Mc         MEETEI MAYEK VOWEL SIGN II\nAAEC..AAED;CM     # Mn     [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI\nAAEE..AAEF;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\nAAF0..AAF1;BA     # Po     [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nAAF2;AL           # Lo         MEETEI MAYEK ANJI\nAAF3..AAF4;AL     # Lm     [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nAAF5;CM           # Mc         MEETEI MAYEK VOWEL SIGN VISARGA\nAAF6;CM           # Mn         MEETEI MAYEK VIRAMA\nAB01..AB06;AL     # Lo     [6] ETHIOPIC SYLLABLE TTHU..ETHIOPIC SYLLABLE TTHO\nAB09..AB0E;AL     # Lo     [6] ETHIOPIC SYLLABLE DDHU..ETHIOPIC SYLLABLE DDHO\nAB11..AB16;AL     # Lo     [6] ETHIOPIC SYLLABLE DZU..ETHIOPIC SYLLABLE DZO\nAB20..AB26;AL     # Lo     [7] ETHIOPIC SYLLABLE CCHHA..ETHIOPIC SYLLABLE CCHHO\nAB28..AB2E;AL     # Lo     [7] ETHIOPIC SYLLABLE BBA..ETHIOPIC SYLLABLE BBO\nAB30..AB5A;AL     # Ll    [43] LATIN SMALL LETTER BARRED ALPHA..LATIN SMALL LETTER Y WITH SHORT RIGHT LEG\nAB5B;AL           # Sk         MODIFIER BREVE WITH INVERTED BREVE\nAB5C..AB5F;AL     # Lm     [4] MODIFIER LETTER SMALL HENG..MODIFIER LETTER SMALL U WITH LEFT HOOK\nAB60..AB68;AL     # Ll     [9] LATIN SMALL LETTER SAKHA YAT..LATIN SMALL LETTER TURNED R WITH MIDDLE TILDE\nAB69;AL           # Lm         MODIFIER LETTER SMALL TURNED W\nAB6A..AB6B;AL     # Sk     [2] MODIFIER LETTER LEFT TACK..MODIFIER LETTER RIGHT TACK\nAB70..ABBF;AL     # Ll    [80] CHEROKEE SMALL LETTER A..CHEROKEE SMALL LETTER YA\nABC0..ABE2;AL     # Lo    [35] MEETEI MAYEK LETTER KOK..MEETEI MAYEK LETTER I LONSUM\nABE3..ABE4;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\nABE5;CM           # Mn         MEETEI MAYEK VOWEL SIGN ANAP\nABE6..ABE7;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\nABE8;CM           # Mn         MEETEI MAYEK VOWEL SIGN UNAP\nABE9..ABEA;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\nABEB;BA           # Po         MEETEI MAYEK CHEIKHEI\nABEC;CM           # Mc         MEETEI MAYEK LUM IYEK\nABED;CM           # Mn         MEETEI MAYEK APUN IYEK\nABF0..ABF9;NU     # Nd    [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE\nAC00;H2           # Lo         HANGUL SYLLABLE GA\nAC01..AC1B;H3     # Lo    [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH\nAC1C;H2           # Lo         HANGUL SYLLABLE GAE\nAC1D..AC37;H3     # Lo    [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH\nAC38;H2           # Lo         HANGUL SYLLABLE GYA\nAC39..AC53;H3     # Lo    [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH\nAC54;H2           # Lo         HANGUL SYLLABLE GYAE\nAC55..AC6F;H3     # Lo    [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH\nAC70;H2           # Lo         HANGUL SYLLABLE GEO\nAC71..AC8B;H3     # Lo    [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH\nAC8C;H2           # Lo         HANGUL SYLLABLE GE\nAC8D..ACA7;H3     # Lo    [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH\nACA8;H2           # Lo         HANGUL SYLLABLE GYEO\nACA9..ACC3;H3     # Lo    [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH\nACC4;H2           # Lo         HANGUL SYLLABLE GYE\nACC5..ACDF;H3     # Lo    [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH\nACE0;H2           # Lo         HANGUL SYLLABLE GO\nACE1..ACFB;H3     # Lo    [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH\nACFC;H2           # Lo         HANGUL SYLLABLE GWA\nACFD..AD17;H3     # Lo    [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH\nAD18;H2           # Lo         HANGUL SYLLABLE GWAE\nAD19..AD33;H3     # Lo    [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH\nAD34;H2           # Lo         HANGUL SYLLABLE GOE\nAD35..AD4F;H3     # Lo    [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH\nAD50;H2           # Lo         HANGUL SYLLABLE GYO\nAD51..AD6B;H3     # Lo    [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH\nAD6C;H2           # Lo         HANGUL SYLLABLE GU\nAD6D..AD87;H3     # Lo    [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH\nAD88;H2           # Lo         HANGUL SYLLABLE GWEO\nAD89..ADA3;H3     # Lo    [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH\nADA4;H2           # Lo         HANGUL SYLLABLE GWE\nADA5..ADBF;H3     # Lo    [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH\nADC0;H2           # Lo         HANGUL SYLLABLE GWI\nADC1..ADDB;H3     # Lo    [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH\nADDC;H2           # Lo         HANGUL SYLLABLE GYU\nADDD..ADF7;H3     # Lo    [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH\nADF8;H2           # Lo         HANGUL SYLLABLE GEU\nADF9..AE13;H3     # Lo    [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH\nAE14;H2           # Lo         HANGUL SYLLABLE GYI\nAE15..AE2F;H3     # Lo    [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH\nAE30;H2           # Lo         HANGUL SYLLABLE GI\nAE31..AE4B;H3     # Lo    [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH\nAE4C;H2           # Lo         HANGUL SYLLABLE GGA\nAE4D..AE67;H3     # Lo    [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH\nAE68;H2           # Lo         HANGUL SYLLABLE GGAE\nAE69..AE83;H3     # Lo    [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH\nAE84;H2           # Lo         HANGUL SYLLABLE GGYA\nAE85..AE9F;H3     # Lo    [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH\nAEA0;H2           # Lo         HANGUL SYLLABLE GGYAE\nAEA1..AEBB;H3     # Lo    [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH\nAEBC;H2           # Lo         HANGUL SYLLABLE GGEO\nAEBD..AED7;H3     # Lo    [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH\nAED8;H2           # Lo         HANGUL SYLLABLE GGE\nAED9..AEF3;H3     # Lo    [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH\nAEF4;H2           # Lo         HANGUL SYLLABLE GGYEO\nAEF5..AF0F;H3     # Lo    [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH\nAF10;H2           # Lo         HANGUL SYLLABLE GGYE\nAF11..AF2B;H3     # Lo    [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH\nAF2C;H2           # Lo         HANGUL SYLLABLE GGO\nAF2D..AF47;H3     # Lo    [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH\nAF48;H2           # Lo         HANGUL SYLLABLE GGWA\nAF49..AF63;H3     # Lo    [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH\nAF64;H2           # Lo         HANGUL SYLLABLE GGWAE\nAF65..AF7F;H3     # Lo    [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH\nAF80;H2           # Lo         HANGUL SYLLABLE GGOE\nAF81..AF9B;H3     # Lo    [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH\nAF9C;H2           # Lo         HANGUL SYLLABLE GGYO\nAF9D..AFB7;H3     # Lo    [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH\nAFB8;H2           # Lo         HANGUL SYLLABLE GGU\nAFB9..AFD3;H3     # Lo    [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH\nAFD4;H2           # Lo         HANGUL SYLLABLE GGWEO\nAFD5..AFEF;H3     # Lo    [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH\nAFF0;H2           # Lo         HANGUL SYLLABLE GGWE\nAFF1..B00B;H3     # Lo    [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH\nB00C;H2           # Lo         HANGUL SYLLABLE GGWI\nB00D..B027;H3     # Lo    [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH\nB028;H2           # Lo         HANGUL SYLLABLE GGYU\nB029..B043;H3     # Lo    [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH\nB044;H2           # Lo         HANGUL SYLLABLE GGEU\nB045..B05F;H3     # Lo    [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH\nB060;H2           # Lo         HANGUL SYLLABLE GGYI\nB061..B07B;H3     # Lo    [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH\nB07C;H2           # Lo         HANGUL SYLLABLE GGI\nB07D..B097;H3     # Lo    [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH\nB098;H2           # Lo         HANGUL SYLLABLE NA\nB099..B0B3;H3     # Lo    [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH\nB0B4;H2           # Lo         HANGUL SYLLABLE NAE\nB0B5..B0CF;H3     # Lo    [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH\nB0D0;H2           # Lo         HANGUL SYLLABLE NYA\nB0D1..B0EB;H3     # Lo    [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH\nB0EC;H2           # Lo         HANGUL SYLLABLE NYAE\nB0ED..B107;H3     # Lo    [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH\nB108;H2           # Lo         HANGUL SYLLABLE NEO\nB109..B123;H3     # Lo    [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Runner Executable in CMake\nDESCRIPTION: Defines a CMake executable target for a Flutter Windows application. It includes all necessary source files, applies standard build settings, and adds version information. The configuration also handles Windows-specific dependencies and ensures proper linkage with Flutter libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests in Profile Mode\nDESCRIPTION: Command to run Flutter unit tests with kProfileMode set to true, allowing tests of code that has different behavior in profile mode. Tests are executed in the VM without precompilation.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_profile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter test --dart-define=dart.vm.profile=true test_release/\n```\n\n----------------------------------------\n\nTITLE: Defining FLNativeViewFactory and FLNativeView Interfaces in Objective-C\nDESCRIPTION: This snippet defines the header file for FLNativeViewFactory and FLNativeView, which are used to create and manage platform views in iOS for Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\n#import <Flutter/Flutter.h>\n\n@interface FLNativeViewFactory : NSObject <FlutterPlatformViewFactory>\n- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;\n@end\n\n@interface FLNativeView : NSObject <FlutterPlatformView>\n\n- (instancetype)initWithFrame:(CGRect)frame\n               viewIdentifier:(int64_t)viewId\n                    arguments:(id _Nullable)args\n              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;\n\n- (UIView*)view;\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining the Flutter application executable target for Linux\nDESCRIPTION: Creates the executable target for the Flutter application, specifying the source files to be compiled including the main application code and plugin registrant.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function\nDESCRIPTION: Defines a reusable function to apply standard compilation settings across targets, including C++17 standard, compiler warnings, and exception handling\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Configures the include directories for the target, ensuring that header files can be found during compilation. This adds the project source directory to the include path.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Sample Output of AOT Snapshot Size Comparison in Flutter\nDESCRIPTION: This plaintext snippet shows an example of the tabulated output produced by the compare_size.dart tool. It displays the differences in method sizes between two AOT snapshots, organized by library and method name.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+------------+----------------------------------------------------------+--------------+\n| Library    | Method                                                   | Diff (Bytes) |\n+------------+----------------------------------------------------------+--------------+\n| dart:async | new ZoneSpecification.from                               |        +2136 |\n| dart:async | runZoned                                                 |        +1488 |\n| dart:async | new _CustomZone                                          |         +927 |\n| dart:async | runZoned.<anonymous closure>                             |         +881 |\n| dart:async | _rootFork                                                |         +504 |\n| dart:async | _rootCreatePeriodicTimer                                 |         +500 |\n| dart:async | _rootCreateTimer                                         |         +498 |\n| dart:async | _rootRegisterUnaryCallback                               |         +485 |\n| dart:async | _rootRegisterBinaryCallback                              |         +485 |\n| dart:async | _rootRegisterCallback                                    |         +485 |\n| dart:async | _rootPrint                                               |         +453 |\n| dart:async | _CustomZone.fork                                         |         +396 |\n| dart:async | _rootErrorCallback                                       |         +389 |\n| dart:async | _CustomZone.bindUnaryCallbackGuarded                     |         +368 |\n| dart:async | _rootHandleUncaughtError                                 |         +342 |\n| dart:async | _CustomZone.runBinary                                    |         +296 |\n| dart:async | _CustomZone.runUnary                                     |         +293 |\n| dart:async | _CustomZone.[]                                           |         +291 |\n| dart:async | _CustomZone.registerCallback                             |         +290 |\n| dart:async | _CustomZone.run                                          |         +290 |\n| dart:async | _CustomZone.registerUnaryCallback                        |         +290 |\n| dart:async | _CustomZone.registerBinaryCallback                       |         +290 |\n| dart:async | _CustomZone.runBinaryGuarded                             |         +289 |\n| dart:async | _CustomZone.runUnaryGuarded                              |         +286 |\n| dart:async | _RootZone.fork                                           |         +283 |\n| dart:async | _CustomZone.bindCallback                                 |         +259 |\n| dart:async | _CustomZone.bindUnaryCallback                            |         +259 |\n| dart:async | _CustomZone.bindUnaryCallback.<anonymous closure>        |         +248 |\n| dart:async | _RootZone.bindUnaryCallback.<anonymous closure>          |         +248 |\n| dart:async | _CustomZone.bindUnaryCallbackGuarded.<anonymous closure> |         +248 |\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|            | [Stub] Type Test Type: class 'PopupMenuEntry'            |         -128 |\n|            | [Stub] Type Test Type: class '_SyncIterator@0150898'     |         -128 |\n|            | [Stub] Type Test Type: class 'PopupMenuItem'             |         -128 |\n|            | [Stub] Type Test Type: class 'FormFieldState'            |         -128 |\n|            | [Stub] Type Test Type: class 'PopupMenuButton'           |         -128 |\n|            | [Stub] Type Test Type: class '_SyncIterator@0150898'     |         -131 |\n|            | [Stub] Type Test Type: class '_SplayTreeMapNode@3220832' |         -139 |\n|            | [Stub] Type Test Type: class '_SplayTreeMapNode@3220832' |         -165 |\n| dart:io    | new Directory                                            |         -211 |\n| dart:io    | new Link                                                 |         -211 |\n+------------+----------------------------------------------------------+--------------+\nTotal change +24036 bytes.\n```\n\n----------------------------------------\n\nTITLE: Running Test Suites with felt Command\nDESCRIPTION: The 'felt test' command compiles and runs web engine unit test suites with several configurable flags for customization. This command allows specifying test suites, browsers, compilers, and more to filter the tests that are executed.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfelt test\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt test test/engine/util_test.dart\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt test test/engine/util_test.dart test/engine/alarm_clock_test.dart\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt test --compiler dart2wasm\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt test --browser chrome --browser safari\n```\n\n----------------------------------------\n\nTITLE: Running Impeller Golden Tests with run_tests.py\nDESCRIPTION: This command demonstrates how to execute Impeller golden tests using the `run_tests.py` script. The `--variant` flag specifies the build configuration (host_debug_unopt_arm64), and the `--type` flag indicates that these are Impeller golden tests. Running this locally will not upload results to Skia Gold.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/golden_tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./run_tests.py --variant=\"host_debug_unopt_arm64\" --type=\"impeller-golden\"\n```\n\n----------------------------------------\n\nTITLE: Expected Result After Data-Driven Fix\nDESCRIPTION: Golden master file showing the expected code after a data-driven fix is applied. Used for comparison testing to verify the fix works correctly.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n// test_fixes/C.dart.expect\nimport 'package:<package-name>/C.dart';\n\nC.newName('Fix me'); // expected usage after the change.\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Flutter Runner in CMake\nDESCRIPTION: This CMake snippet sets up the build environment for a Flutter Runner application. It specifies the minimum CMake version, defines the executable target, and configures build settings specific to the Flutter environment. Key parameters include `BINARY_NAME` for the target name, and `FLUTTER_VERSION` for versioning preprocessor definitions. Dependencies include Flutter libraries and application-specific dependencies defined in CMake variables.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Git Repository Content for Flutter Engine\nDESCRIPTION: Uses git filter-repo to remove specific file types and directories from the repository, significantly reducing its size from ~780MB to ~110MB.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit filter-repo  --force --invert-paths \\\n--path-glob 'impeller/docs/assets/*.png' \\\n--path-glob 'impeller/docs/assets/*.gif' \\\n--path-glob '*/example/game/*' \\\n--path-glob 'benchmarks/parser/resources/html5.html' \\\n--path-glob '*.dll' \\\n--path-glob '*.jar' \\\n--path-glob '*/SourceHanSerifCN*' \\\n--path-glob 'third_party/txt/third_party/fonts/NotoSansCJK-Regular.ttc' \\\n--path-glob 'impeller/fixtures/flutter_logo_baked.*' \\\n--path-glob 'impeller/fixtures/image.png' \\\n--path-glob '*.golden' \\\n--path-glob '*.aac' \\\n--path-glob '*.S' \\\n--path-glob '*.so' \\\n--path-glob '*.idl' \\\n--path-glob '*.gpy' \\\n--path-glob '*.gypi' \\\n--path-glob '*.asm' \\\n--path-glob '*.m4' \\\n--path-glob '*.in' \\\n--path-glob '*.pxd' \\\n--path-glob '*.hh' \\\n--path 'ci/licenses_golden/licenses_third_party' \\\n--path 'testing/scenario_app/android/reports' \\\n--path 'impeller/third_party' \\\n--path 'mojo/public/third_party' \\\n--path 'tests/data' \\\n--path 'tests/fast' \\\n--path 'tests/framework' \\\n--path 'travis' \\\n--path 'mojo' \\\n--path 'sky/sdk' \\\n--path 'sky/engine' \\\n--path 'sky/tools/webkitpy' \\\n--path 'sky/shell' \\\n--path 'sky/packages/sky' \\\n--path 'sky/tests' \\\n--path 'sky/unit' \\\n--path 'sky/services' \\\n--path 'sky/compositor' \\\n--path 'sky/build' \\\n--path 'sky/specs' \\\n--path 'skysprites' \\\n--path 'examples/demo_launcher' \\\n--path 'examples/game' \\\n--path 'third_party/qcms' \\\n--path 'third_party/libevent' \\\n--path 'third_party/boringssl' \\\n--path 'third_party/tcmalloc' \\\n--path 'third_party/cython' \\\n--path 'third_party/protobuf' \\\n--path 'third_party/libpng' \\\n--path 'third_party/re2' \\\n--path 'third_party/harfbuzz-ng' \\\n--path 'third_party/jinja2' \\\n--path 'third_party/libjpeg' \\\n--path 'third_party/glfw' \\\n--path 'third_party/zlib' \\\n--path 'third_party/android_platform' \\\n--path 'third_party/expat' \\\n--path 'third_party/brotli' \\\n--path 'third_party/yasm' \\\n--path 'third_party/khronos' \\\n--path 'third_party/okhttp' \\\n--path 'third_party/libxml' \\\n--path 'third_party/ots' \\\n--path 'third_party/libXNVCtrl' \\\n--path 'lib/web_ui/test/golden_files' \\\n--path 'apk' \\\n--path 'flutter' \\\n--path 'base' \\\n--path 'sdk' \\\n--path 'gpu' \\\n--path 'engine' \\\n--path 'tools/webkitpy' \\\n--path 'tools/valgrind' \\\n--path 'tools/clang' \\\n--path 'tools/android' \\\n--path 'build/linux' \\\n--path 'build/win' \\\n--path 'build/mac' \\\n--path 'ui' \\\n--path 'examples/stocks' \\\n--path 'examples/stocks2' \\\n--path 'examples/stocks-fn' \\\n--path 'examples/data' \\\n--path 'examples/fitness' \\\n--path 'examples/city-list' \\\n--path 'examples/widgets' \\\n--path 'examples/raw' \\\n--path 'examples/color' \\\n--path 'examples/flights' \\\n--path 'examples/rendering' \\\n--path 'examples/fn' \\\n--path 'specs' \\\n--path 'url' \\\n--path 'services' \\\n--path 'framework' \\\n--path 'crypto' \\\n--path 'skia/ext' \\\n--path 'e2etests' \\\n--path 'tests/resources' \\\n--path 'viewer' \\\n--path 'lib/stub_ui' \\\n--path 'content_handler'\n```\n\n----------------------------------------\n\nTITLE: Downloading CAS Artifacts with Bash\nDESCRIPTION: This bash script demonstrates how to download sub-build artifacts using the CAS utility. It iterates through a series of `cas download` commands, specifying the CAS instance, digest, and destination directory within the gclient checkout. These commands are used for triaging global generators locally.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npushd <gclient checkout>/src/out\ncas download -cas-instance projects/chromium-swarm/instances/default_instance -digest 39f15436deaed30f861bdd507ba6297f2f26a2ff13d45acfd8819dbcda346faa/88 -dir ./\ncas download -cas-instance projects/chromium-swarm/instances/default_instance -digest bdec3208e70ba5e50ee7bbedaaff4588d3f58167ad3d8b1c46d29c6ac3a18c00/94 -dir ./\ncas download -cas-instance projects/chromium-swarm/instances/default_instance -digest d19edb65072aa9d872872b55d3c270db40c6a626c8a851ffcb457a28974f3621/84 -dir ./\ncas download -cas-instance projects/chromium-swarm/instances/default_instance -digest ac6f08662d18502cfcd844771bae736f4354cb3fe209552fcf2181771e139e0b/86 -dir ./\ncas download -cas-instance projects/chromium-swarm/instances/default_instance -digest 1d4d1a3b93847451fe69c1939d7582c0d728b198a40abd06f43d845117ef3214/86 -dir ./\n```\n\n----------------------------------------\n\nTITLE: Installation Script for Flutter Application on Windows\nDESCRIPTION: This snippet sets up the installation process for a Flutter Windows application, including copying support files to the correct locations, ensuring the application can run within Visual Studio, and setting the default install directory. It handles assets directory management and conditions for AOT library installation based on build configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n\n```\n\n----------------------------------------\n\nTITLE: Running iOS End-to-End Tests\nDESCRIPTION: This shell script executes the end-to-end tests for the iOS embedding of the Flutter engine.  It is located in the `testing/ios_scenario_app` directory and is responsible for building and running the tests on a headless iOS simulator.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n\"testing/ios_scenario_app/run_ios_tests.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating Default gcloud Credentials\nDESCRIPTION: This command creates default gcloud credentials if the 'bootstrap' process encounters an error about missing Application Default Credentials.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Application Executable in CMake\nDESCRIPTION: Configures the main executable for the Flutter application, applies standard settings, links necessary libraries, and sets output properties.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a New Android Emulator Test Target with YAML\nDESCRIPTION: This YAML snippet defines a new Android Emulator test target for the Devicelab framework. It specifies the target's platform, recipe to use, timeout values, and essential properties required for running the test in the infrastructure. The 'dependencies' field allows for specifying the required Android virtual device version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Testing-Android-Changes-in-the-Devicelab-on-an-Emulator.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Linux_android android_defines_test\n  recipe: devicelab/devicelab_drone\n  presubmit: true\n  timeout: 60\n  dimensions: {\n    kvm: “1”,\n    cores: “8”,\n    Machine_name: “n1-standard-8”\n  }\n  properties:\n    device_type: “none”\n    task_name: android_defines_test\n    use_emulator: “true”\n    dependencies: >-\n      [\n        {\"dependency\": \"android_virtual_device\", \"version\": \"31\"}\n      ]\n    tags: >\n      [\"devicelab\", “linux”]\n    timeout: 300\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable in CMake\nDESCRIPTION: This CMake script configures the build for the Flutter Windows runner executable. It sets up the project, defines the target, adds source files, applies build settings, sets version definitions, and links required libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable in CMake\nDESCRIPTION: This CMake snippet sets up the executable target for a Flutter Windows runner application. It specifies the source files, applies standard settings, adds preprocessor definitions for version information, and sets up dependencies and include directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Using addr2line for Symbolication\nDESCRIPTION: Demonstrates how to use the addr2line tool from the NDK to symbolicate stack traces on macOS by feeding stack addresses manually. Requires a downloaded .so file corresponding to the crash.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n% $ANDROID_HOME/ndk/20.0.5594570/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android-addr2line -e ~/Downloads/libflutter.so\n```\n\n----------------------------------------\n\nTITLE: Deploying iOS Tests to Firebase Test Lab\nDESCRIPTION: This command uploads the iOS integration test artifacts to Firebase Test Lab for cloud testing. It specifies the test package and device configuration for the test run.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngcloud firebase test ios run \\\n  --test \"build/ios_integ/Build/Products/ios_tests.zip\" \\\n  --device model=iphone11pro,version=14.1,locale=fr_FR,orientation=portrait\n```\n\n----------------------------------------\n\nTITLE: Defining physical and virtual devices for FirebaseLab\nDESCRIPTION: This JSON snippet shows how to define physical and virtual devices for FirebaseLab tests using the `physical_devices` and `virtual_device` properties. These properties specify the devices to use for running the tests, including their model and version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-FirebaseLab-Tests.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\nphysical_devices: >-\n        [\n           \"--device\", \"model=oriole,version=33\",\n           \"--device\", \"model=griffin,version=24\"\n        ],\nvirtual_device: >-\n        [\n          \"--device\", \"model=Nexus5,version=21\",\n          \"--device\", \"model=Nexus6P,version=27\"\n        ]\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Android UI tests in Flutter Plugin (Java)\nDESCRIPTION: Instructions for setting up Android UI tests for a Flutter plugin. This includes copying test files, creating necessary directories, and adjusting Gradle configurations. Customization based on package identifiers is also discussed.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n1. Duplicate the `DartIntegrationTests.java` file from another plugin to `example/android/app/src/androidTest/java/io/flutter/plugins/DartIntegrationTest.java`\n1. Create a file under `example/android/app/src/androidTest/java/` with a sub-path corresponding to the example app's package identifier from `example/android/app/src/main/AndroidManifest.xml`. The file should be called `FlutterActivityTest.java` (or if the example uses a custom MainActivity as its `android:name` in `AndroidManifest.xml`, `MainActivityTest.java`).\n    * For example, if `AndroidManifest.xml` uses `io.flutter.plugins.fooexample` as the package identifier, and `io.flutter.embedding.android.FlutterActivity` as its `android:name`, the file should be `example/android/app/src/androidTest/java/io/flutter/plugins/fooexample/FlutterActivityTest.java`.\n\n    The file should look like:\n    ```\n    package io.flutter.plugins.fooexample;\n\n    import androidx.test.rule.ActivityTestRule;\n    import dev.flutter.plugins.integration_test.FlutterTestRunner;\n    import io.flutter.embedding.android.FlutterActivity;\n    import io.flutter.plugins.DartIntegrationTest;\n    import org.junit.Rule;\n    import org.junit.runner.RunWith;\n\n    @DartIntegrationTest\n    @RunWith(FlutterTestRunner.class)\n    public class FlutterActivityTest {\n      @Rule\n      public ActivityTestRule<FlutterActivity> rule = new ActivityTestRule<>(FlutterActivity.class);\n    }\n    ```\n\n    Note:\n      * Update the `package` to match the actual package.\n      * If using a custom `MainActivity`, replace the `FlutterActivity` references with `MainActivity`.\n1. Ensure that `example/android/app/build.gradle`'s `defaultConfig` section contains:\n    ```\n    testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Using LocaleKeymap to get Logical Key in Dart\nDESCRIPTION: This code snippet demonstrates how to use the `web_locale_keymap` package to get the logical key from a KeyboardEvent. It initializes a `LocaleKeymap` instance for Windows, Darwin, or Linux, and then uses its `getLogicalKey` method to retrieve the logical key based on the event's code, key, and keyCode properties. Fallback methods are included for dead keys, unprintable keys and numpad keys, and minting new logical keys.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_locale_keymap/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:web_locale_keymap/web_locale_keymap.dart' as locale_keymap;\n\nfinal locale_keymap.LocaleKeymap mapping =\n    locale_keymap.LocaleKeymap.win(); // Or .darwin() or .linux()\n\n/* ... */\n\nint getLogicalKey(html.KeyboardEvent event) {\n  int? result = _convertToDeadKey(event)\n             ?? _convertToUnprintableKey(event)\n             ?? _convertToNumpadKey(event);\n  if (result != null) {\n    return result;\n  }\n  result = mapping.getLogicalKey(event.code, event.key, event.keyCode);\n  if (result != null) {\n    return result;\n  }\n  return _mintLogicalKey(event);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges and Line Breaking Properties\nDESCRIPTION: This snippet defines Unicode character ranges and assigns line breaking properties to them. It covers a wide range of characters from various scripts and symbol sets.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\n1E8D0..1E8D6;CM   # Mn     [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n1E900..1E943;AL   # L&    [68] ADLAM CAPITAL LETTER ALIF..ADLAM SMALL LETTER SHA\n1E944..1E94A;CM   # Mn     [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n1E94B;AL          # Lm         ADLAM NASALIZATION MARK\n1E950..1E959;NU   # Nd    [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE\n1E95E..1E95F;OP   # Po     [2] ADLAM INITIAL EXCLAMATION MARK..ADLAM INITIAL QUESTION MARK\n1EC71..1ECAB;AL   # No    [59] INDIC SIYAQ NUMBER ONE..INDIC SIYAQ NUMBER PREFIXED NINE\n1ECAC;PO          # So         INDIC SIYAQ PLACEHOLDER\n1ECAD..1ECAF;AL   # No     [3] INDIC SIYAQ FRACTION ONE QUARTER..INDIC SIYAQ FRACTION THREE QUARTERS\n1ECB0;PO          # Sc         INDIC SIYAQ RUPEE MARK\n1ECB1..1ECB4;AL   # No     [4] INDIC SIYAQ NUMBER ALTERNATE ONE..INDIC SIYAQ ALTERNATE LAKH MARK\n1ED01..1ED2D;AL   # No    [45] OTTOMAN SIYAQ NUMBER ONE..OTTOMAN SIYAQ NUMBER NINETY THOUSAND\n1ED2E;AL          # So         OTTOMAN SIYAQ MARRATAN\n1ED2F..1ED3D;AL   # No    [15] OTTOMAN SIYAQ ALTERNATE NUMBER TWO..OTTOMAN SIYAQ FRACTION ONE SIXTH\n1EE00..1EE03;AL   # Lo     [4] ARABIC MATHEMATICAL ALEF..ARABIC MATHEMATICAL DAL\n1EE05..1EE1F;AL   # Lo    [27] ARABIC MATHEMATICAL WAW..ARABIC MATHEMATICAL DOTLESS QAF\n1EE21..1EE22;AL   # Lo     [2] ARABIC MATHEMATICAL INITIAL BEH..ARABIC MATHEMATICAL INITIAL JEEM\n1EE24;AL          # Lo         ARABIC MATHEMATICAL INITIAL HEH\n1EE27;AL          # Lo         ARABIC MATHEMATICAL INITIAL HAH\n1EE29..1EE32;AL   # Lo    [10] ARABIC MATHEMATICAL INITIAL YEH..ARABIC MATHEMATICAL INITIAL QAF\n1EE34..1EE37;AL   # Lo     [4] ARABIC MATHEMATICAL INITIAL SHEEN..ARABIC MATHEMATICAL INITIAL KHAH\n1EE39;AL          # Lo         ARABIC MATHEMATICAL INITIAL DAD\n1EE3B;AL          # Lo         ARABIC MATHEMATICAL INITIAL GHAIN\n1EE42;AL          # Lo         ARABIC MATHEMATICAL TAILED JEEM\n1EE47;AL          # Lo         ARABIC MATHEMATICAL TAILED HAH\n1EE49;AL          # Lo         ARABIC MATHEMATICAL TAILED YEH\n1EE4B;AL          # Lo         ARABIC MATHEMATICAL TAILED LAM\n1EE4D..1EE4F;AL   # Lo     [3] ARABIC MATHEMATICAL TAILED NOON..ARABIC MATHEMATICAL TAILED AIN\n1EE51..1EE52;AL   # Lo     [2] ARABIC MATHEMATICAL TAILED SAD..ARABIC MATHEMATICAL TAILED QAF\n1EE54;AL          # Lo         ARABIC MATHEMATICAL TAILED SHEEN\n1EE57;AL          # Lo         ARABIC MATHEMATICAL TAILED KHAH\n1EE59;AL          # Lo         ARABIC MATHEMATICAL TAILED DAD\n1EE5B;AL          # Lo         ARABIC MATHEMATICAL TAILED GHAIN\n1EE5D;AL          # Lo         ARABIC MATHEMATICAL TAILED DOTLESS NOON\n1EE5F;AL          # Lo         ARABIC MATHEMATICAL TAILED DOTLESS QAF\n1EE61..1EE62;AL   # Lo     [2] ARABIC MATHEMATICAL STRETCHED BEH..ARABIC MATHEMATICAL STRETCHED JEEM\n1EE64;AL          # Lo         ARABIC MATHEMATICAL STRETCHED HEH\n1EE67..1EE6A;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED HAH..ARABIC MATHEMATICAL STRETCHED KAF\n1EE6C..1EE72;AL   # Lo     [7] ARABIC MATHEMATICAL STRETCHED MEEM..ARABIC MATHEMATICAL STRETCHED QAF\n1EE74..1EE77;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED SHEEN..ARABIC MATHEMATICAL STRETCHED KHAH\n1EE79..1EE7C;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED DAD..ARABIC MATHEMATICAL STRETCHED DOTLESS BEH\n1EE7E;AL          # Lo         ARABIC MATHEMATICAL STRETCHED DOTLESS FEH\n1EE80..1EE89;AL   # Lo    [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH\n1EE8B..1EE9B;AL   # Lo    [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN\n1EEA1..1EEA3;AL   # Lo     [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL\n1EEA5..1EEA9;AL   # Lo     [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH\n1EEAB..1EEBB;AL   # Lo    [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN\n1EEF0..1EEF1;AL   # Sm     [2] ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL..ARABIC MATHEMATICAL OPERATOR HAH WITH DAL\n1F000..1F02B;ID   # So    [44] MAHJONG TILE EAST WIND..MAHJONG TILE BACK\n1F02C..1F02F;ID   # Cn     [4] <reserved-1F02C>..<reserved-1F02F>\n1F030..1F093;ID   # So   [100] DOMINO TILE HORIZONTAL BACK..DOMINO TILE VERTICAL-06-06\n1F094..1F09F;ID   # Cn    [12] <reserved-1F094>..<reserved-1F09F>\n1F0A0..1F0AE;ID   # So    [15] PLAYING CARD BACK..PLAYING CARD KING OF SPADES\n1F0AF..1F0B0;ID   # Cn     [2] <reserved-1F0AF>..<reserved-1F0B0>\n1F0B1..1F0BF;ID   # So    [15] PLAYING CARD ACE OF HEARTS..PLAYING CARD RED JOKER\n1F0C0;ID          # Cn         <reserved-1F0C0>\n1F0C1..1F0CF;ID   # So    [15] PLAYING CARD ACE OF DIAMONDS..PLAYING CARD BLACK JOKER\n1F0D0;ID          # Cn         <reserved-1F0D0>\n1F0D1..1F0F5;ID   # So    [37] PLAYING CARD ACE OF CLUBS..PLAYING CARD TRUMP-21\n1F0F6..1F0FF;ID   # Cn    [10] <reserved-1F0F6>..<reserved-1F0FF>\n1F100..1F10C;AI   # No    [13] DIGIT ZERO FULL STOP..DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO\n1F10D..1F10F;ID   # So     [3] CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH\n1F110..1F12D;AI   # So    [30] PARENTHESIZED LATIN CAPITAL LETTER A..CIRCLED CD\n1F12E..1F12F;AL   # So     [2] CIRCLED WZ..COPYLEFT SYMBOL\n1F130..1F169;AI   # So    [58] SQUARED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z\n1F16A..1F16C;AL   # So     [3] RAISED MC SIGN..RAISED MR SIGN\n1F16D..1F16F;ID   # So     [3] CIRCLED CC..CIRCLED HUMAN FIGURE\n1F170..1F1AC;AI   # So    [61] NEGATIVE SQUARED LATIN CAPITAL LETTER A..SQUARED VOD\n1F1AD;ID          # So         MASK WORK SYMBOL\n1F1AE..1F1E5;ID   # Cn    [56] <reserved-1F1AE>..<reserved-1F1E5>\n1F1E6..1F1FF;RI   # So    [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n1F200..1F202;ID   # So     [3] SQUARE HIRAGANA HOKA..SQUARED KATAKANA SA\n1F203..1F20F;ID   # Cn    [13] <reserved-1F203>..<reserved-1F20F>\n1F210..1F23B;ID   # So    [44] SQUARED CJK UNIFIED IDEOGRAPH-624B..SQUARED CJK UNIFIED IDEOGRAPH-914D\n1F23C..1F23F;ID   # Cn     [4] <reserved-1F23C>..<reserved-1F23F>\n1F240..1F248;ID   # So     [9] TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C..TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557\n1F249..1F24F;ID   # Cn     [7] <reserved-1F249>..<reserved-1F24F>\n1F250..1F251;ID   # So     [2] CIRCLED IDEOGRAPH ADVANTAGE..CIRCLED IDEOGRAPH ACCEPT\n1F252..1F25F;ID   # Cn    [14] <reserved-1F252>..<reserved-1F25F>\n1F260..1F265;ID   # So     [6] ROUNDED SYMBOL FOR FU..ROUNDED SYMBOL FOR CAI\n1F266..1F2FF;ID   # Cn   [154] <reserved-1F266>..<reserved-1F2FF>\n1F300..1F384;ID   # So   [133] CYCLONE..CHRISTMAS TREE\n1F385;EB          # So         FATHER CHRISTMAS\n1F386..1F39B;ID   # So    [22] FIREWORKS..CONTROL KNOBS\n1F39C..1F39D;AL   # So     [2] BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES\n1F39E..1F3B4;ID   # So    [23] FILM FRAMES..FLOWER PLAYING CARDS\n1F3B5..1F3B6;AL   # So     [2] MUSICAL NOTE..MULTIPLE MUSICAL NOTES\n1F3B7..1F3BB;ID   # So     [5] SAXOPHONE..VIOLIN\n1F3BC;AL          # So         MUSICAL SCORE\n1F3BD..1F3C1;ID   # So     [5] RUNNING SHIRT WITH SASH..CHEQUERED FLAG\n1F3C2..1F3C4;EB   # So     [3] SNOWBOARDER..SURFER\n1F3C5..1F3C6;ID   # So     [2] SPORTS MEDAL..TROPHY\n1F3C7;EB          # So         HORSE RACING\n1F3C8..1F3C9;ID   # So     [2] AMERICAN FOOTBALL..RUGBY FOOTBALL\n1F3CA..1F3CC;EB   # So     [3] SWIMMER..GOLFER\n1F3CD..1F3FA;ID   # So    [46] RACING MOTORCYCLE..AMPHORA\n1F3FB..1F3FF;EM   # Sk     [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\n1F400..1F441;ID   # So    [66] RAT..EYE\n1F442..1F443;EB   # So     [2] EAR..NOSE\n1F444..1F445;ID   # So     [2] MOUTH..TONGUE\n1F446..1F450;EB   # So    [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN\n1F451..1F465;ID   # So    [21] CROWN..BUSTS IN SILHOUETTE\n1F466..1F478;EB   # So    [19] BOY..PRINCESS\n1F479..1F47B;ID   # So     [3] JAPANESE OGRE..GHOST\n1F47C;EB          # So         BABY ANGEL\n1F47D..1F480;ID   # So     [4] EXTRATERRESTRIAL ALIEN..SKULL\n1F481..1F483;EB   # So     [3] INFORMATION DESK PERSON..DANCER\n1F484;ID          # So         LIPSTICK\n1F485..1F487;EB   # So     [3] NAIL POLISH..HAIRCUT\n1F488..1F48E;ID   # So     [7] BARBER POLE..GEM STONE\n1F48F;EB          # So         KISS\n1F490;ID          # So         BOUQUET\n1F491;EB          # So         COUPLE WITH HEART\n1F492..1F49F;ID   # So    [14] WEDDING..HEART DECORATION\n1F4A0;AL          # So         DIAMOND SHAPE WITH A DOT INSIDE\n1F4A1;ID          # So         ELECTRIC LIGHT BULB\n1F4A2;AL          # So         ANGER SYMBOL\n1F4A3;ID          # So         BOMB\n1F4A4;AL          # So         SLEEPING SYMBOL\n1F4A5..1F4A9;ID   # So     [5] COLLISION SYMBOL..PILE OF POO\n1F4AA;EB          # So         FLEXED BICEPS\n1F4AB..1F4AE;ID   # So     [4] DIZZY SYMBOL..WHITE FLOWER\n1F4AF;AL          # So         HUNDRED POINTS SYMBOL\n1F4B0;ID          # So         MONEY BAG\n1F4B1..1F4B2;AL   # So     [2] CURRENCY EXCHANGE..HEAVY DOLLAR SIGN\n1F4B3..1F4FF;ID   # So    [77] CREDIT CARD..PRAYER BEADS\n1F500..1F506;AL   # So     [7] TWISTED RIGHTWARDS ARROWS..HIGH BRIGHTNESS SYMBOL\n1F507..1F516;ID   # So    [16] SPEAKER WITH CANCELLATION STROKE..BOOKMARK\n1F517..1F524;AL   # So    [14] LINK SYMBOL..INPUT SYMBOL FOR LATIN LETTERS\n1F525..1F531;ID   # So    [13] FIRE..TRIDENT EMBLEM\n1F532..1F549;AL   # So    [24] BLACK SQUARE BUTTON..OM SYMBOL\n1F54A..1F573;ID   # So    [42] DOVE OF PEACE..HOLE\n1F574..1F575;EB   # So     [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY\n1F576..1F579;ID   # So     [4] DARK SUNGLASSES..JOYSTICK\n1F57A;EB          # So         MAN DANCING\n1F57B..1F58F;ID   # So    [21] LEFT HAND TELEPHONE RECEIVER..TURNED OK HAND SIGN\n1F590;EB          # So         RAISED HAND WITH FINGERS SPLAYED\n1F591..1F594;ID   # So     [4] REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND\n1F595..1F596;EB   # So     [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS\n1F597..1F5D3;ID   # So    [61] WHITE DOWN POINTING LEFT HAND INDEX..SPIRAL CALENDAR PAD\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Linux Application Bundle\nDESCRIPTION: Sets up installation rules for creating a relocatable bundle with the application binary and all required assets. Handles data files, libraries, and configures proper directory structure for the installable package.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Android Key Properties File\nDESCRIPTION: This snippet shows the format for the key.properties file required for Android releases. It includes placeholders for the store password, key password, key alias, and keystore file path.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/README.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstorePassword=<password>\nkeyPassword=<password>\nkeyAlias=upload\nstoreFile=<keystore path>\n```\n\n----------------------------------------\n\nTITLE: Cloning Flutter repository using SSH\nDESCRIPTION: This command clones the flutter/flutter repository using SSH. SSH is a secure method for accessing the repository. Ensure you have a working SSH key configured on your GitHub account.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone git@github.com:flutter/flutter.git\"\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine\nDESCRIPTION: This shell command builds the Flutter engine for Fuchsia. It utilizes `gn` to generate the build files and `ninja` to compile the engine with the specified target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto && ninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input:tests\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Including Directories in CMake\nDESCRIPTION: This snippet links the required libraries and includes directories for the Flutter application runner. It adds the Flutter dependencies and any application-specific libraries to the build.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Viewing a Failed Embedder Test Output in CI\nDESCRIPTION: Shows the typical error output when an embedder test fails because the actual image output doesn't match the expected golden image file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/embedder/fixtures/README.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n[0;32m[ RUN      ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend\n[ERROR:flutter/shell/platform/embedder/tests/embedder_unittests_util.cc(199)] Image did not match expectation.\nExpected:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/expectation_verifyb143464703_soft_noxform.png\nGot:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png\n\n../../flutter/shell/platform/embedder/tests/embedder_unittests.cc:1335: Failure\nValue of: ImageMatchesFixture(\"verifyb143464703_soft_noxform.png\", rendered_scene)\n  Actual: false\nExpected: true\n[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend (8077 ms)\n[0;32m[----------] [m1 test from EmbedderTest (8080 ms total)\n\n[0;32m[----------] [mGlobal test environment tear-down\n[0;32m[==========] [m1 test from 1 test suite ran. (8080 ms total)\n[0;32m[  PASSED  ] [m0 tests.\n[0;31m[  FAILED  ] [m1 test, listed below:\n[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend\n\n 1 FAILED TEST\n[13/296] EmbedderTest.VerifyB143464703WithSoftwareBackend returned/aborted with exit code 1 (8226 ms)\n[14/296] EmbedderTest.VerifyB143464703WithSoftwareBackend (8484 ms)\n[INFO:test_timeout_listener.cc(76)] Test timeout of 300 seconds per test case will be enforced.\n[0;33mNote: Google Test filter = EmbedderTest.VerifyB143464703WithSoftwareBackend\n[m[0;32m[==========] [mRunning 1 test from 1 test suite.\n[0;32m[----------] [mGlobal test environment set-up.\n[0;32m[----------] [m1 test from EmbedderTest\n[0;33m[ DISABLED ] [mEmbedderTest.DISABLED_CanLaunchAndShutdownMultipleTimes\n[0;32m[ RUN      ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend\n[ERROR:flutter/shell/platform/embedder/tests/embedder_unittests_util.cc(199)] Image did not match expectation.\nExpected:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/expectation_verifyb143464703_soft_noxform.png\nGot:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png\n\n../../flutter/shell/platform/embedder/tests/embedder_unittests.cc:1335: Failure\nValue of: ImageMatchesFixture(\"verifyb143464703_soft_noxform.png\", rendered_scene)\n  Actual: false\nExpected: true\n[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend (8348 ms)\n[0;32m[----------] [m1 test from EmbedderTest (8350 ms total)\n\n[0;32m[----------] [mGlobal test environment tear-down\n[0;32m[==========] [m1 test from 1 test suite ran. (8350 ms total)\n[0;32m[  PASSED  ] [m0 tests.\n[0;31m[  FAILED  ] [m1 test, listed below:\n[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend\n```\n\n----------------------------------------\n\nTITLE: Flutter Incident Postmortem Markdown Template\nDESCRIPTION: Markdown template for documenting comprehensive incident postmortems in the Flutter project. Includes sections for incident summary, timeline, impact analysis, root cause analysis, lessons learned, and action items.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/postmortem-template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flutter postmortem: {Incident Title}\n\nStatus: {draft|final}<br>\nOwners: {who drove the incident resolution}\n\n## Summary\n\nDescription: {brief description of symptoms and root cause}<br>\nComponent: {affected area}<br>\nDate/time: {YYYY-MM-DD HH:MM}<br>\nDuration: {time from initial breakage to final resolution}<br>\nUser impact: {who was affected by the incident}\n\n## Timeline (all times in PST/PDT)\n\n### 1900-01-01\n\n14:44 - something happened<br>\n14:45 - next thing happened **&lt;START OF OUTAGE&gt;**\n\n### 1900-01-02\n\n09:12 - another thing happened **&lt;END OF OUTAGE&gt;**\n\n## Impact\n\n{summarize the problems that the outage caused}\n\n## Root causes\n\n{without blame, describe the root cause of the outage}\n\n## Lessons learned\n\n### What worked\n\n{list things where things worked as expected in a positive manner}\n\n### Where we got lucky\n\n{list things that mitigated this incident but not because of our foresight}\n\n### What didn't work\n\n{list things that failed, with github issues from the action items section}\n\n## Action items\n\n{each item here should have an owner}\n\n### Prevention\n\n{link to github issues for things that would have prevented this failure from happening in the first place, such as input validation, pinning dependencies, etc}\n\n### Detection\n\n{link to github issues for things that would have detected this failure before it became An Incident, such as better testing, monitoring, etc}\n\n### Mitigation\n\n{link to github issues for things that would have made this failure less serious, such as graceful degradation, better exception handling, etc}\n\n### Process\n\n{link to github issues for things that would have helped us resolve this failure faster, such as documented processes and protocols, etc}\n\n### Fixes\n\n{link to github issues or PRs/commits for the actual fixes that were necessary to resolve this incident}\n\n## Appendix\n\n{any other useful information, such as relevant chat logs}\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Handles installation of Flutter assets and the AOT library for non-Debug builds. This section ensures assets are cleanly copied and the AOT library is included for release builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with CMake for Flutter Windows\nDESCRIPTION: This code snippet sets the minimum required CMake version to 3.14, defines the project 'windows_startup_test', and specifies configurations for building a Flutter application on Windows. It includes settings for executable names, build types (Debug, Profile, Release), and Unicode usage. Dependencies include a modern version of CMake and correct setup of environment paths.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(windows_startup_test LANGUAGES CXX)\n\nset(BINARY_NAME \"windows_startup_test\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Git remotes\nDESCRIPTION: This command lists the configured Git remotes with their URLs. It is used to verify that the 'upstream' and 'origin' remotes are correctly set up.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"git remote -v\"\n```\n\n----------------------------------------\n\nTITLE: Running Flutter API Example on Android Device\nDESCRIPTION: This command shows how to run a Flutter API example on a specific Android device from the command line.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% flutter run -d MyAndroidDevice lib/services/system_chrome/system_chrome.set_system_u_i_overlay_style.1.dart\n```\n\n----------------------------------------\n\nTITLE: Open PRs/Issues script\nDESCRIPTION: This Javascript snippet automates the process of opening multiple pull requests or issues on a given GitHub page during triage, improving efficiency.  It requires enabling popups in Chrome for the script to function correctly. The script extracts URLs matching the issue or PR pattern from the current page and opens each in a new tab.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/triage/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This script is intended to be run in chrome devtools console\n// during triage to open PRs and Issues faster.\n\n// Before the script can be run you need to enable popups in Chrome\n// 1. On your computer, open Chrome Chrome.\n// 2. At the top right, click More More and then Settings.\n// 3. Click Privacy and security and then Site Settings.\n// 4. Click Pop-ups and redirects.\n// 5. Choose the option you want as your default setting.\n//\n// https://support.google.com/chrome/answer/95472?hl=en&co=GENIE.Platform%3DDesktop\n\nconst plural = window.location.toString().split('?')[0];\nconst singular = plural.substring(0, plural.length-1);\nconst suffix = singular.includes(\"issue\") ? \"s\" : \"\";\nconst re = new RegExp(\"^\" + singular + suffix + \"/\\\\d+$\");\n\nvar urls = document.getElementsByTagName('a');\n\nvar targets = []\nfor (url in urls) {\n    var link = urls[url].href;\n    if(link == undefined) continue;\n    if(link.match(re) == null) continue;\n    if(targets.includes(link)) continue;\n    targets.push(link);\n}\n\ntargets.forEach((target) => window.open(target));\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Tree Entries for Engine Files\nDESCRIPTION: Demonstrates using git ls-tree to list all engine-related files with their blob hashes, which forms the basis for content-based engine hashing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n100644 blob 5143313ce5826665309e8a086a281ad3ab1a9ce7    DEPS\n100644 blob 205edfe43306c4dbf9a4a6f15e83cf5d49b9fc7d    engine/src/flutter/.ci.yaml\n100644 blob 3c73f32a334086d9a0f4fd468dcdf9505d74e9c5    engine/src/flutter/.clang-format\n100644 blob b74be267bc42f08ebf9afe8eec5cbbfe75c5a1c9    engine/src/flutter/.clang-tidy\n100644 blob dd395bfd2104526d4f865313eab578f15ee5775b    engine/src/flutter/.engine-release.version\n100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    engine/src/flutter/.git-blame-ignore-revs\n100644 blob 915d1ed51d121f1986c9dfe71cf1745c1a11286d    engine/src/flutter/.gitattributes\n100644 blob c1c1d3d05f37b0e09155b32aceb6d2ec62ee464b    engine/src/flutter/.github/PULL_REQUEST_TEMPLATE.md\n100644 blob 9688ddae25af122d7c17d9c27d887b84888f3619    engine/src/flutter/.github/dependabot.yml\n100644 blob ed7171a9638274d8f411b6bededec61feab15a7b    engine/src/flutter/.github/labeler.yml\n100644 blob be245c915e7eb5377317cc6eb038442628071790    engine/src/flutter/.github/release.yml\n# ... all files\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App in Debug Mode with Local Web SDK\nDESCRIPTION: Commands to run a Flutter web app using a locally built Web Engine with Chrome or web server\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --local-web-sdk=wasm_release --debug -d chrome\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --local-web-sdk=wasm_release --debug -d web-server --web-port 8080\n```\n\n----------------------------------------\n\nTITLE: Running an RBE Build with 'et' Tool\nDESCRIPTION: This command demonstrates how to run an RBE build using the 'et' tool with the host_debug configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\net build -c host_debug\n```\n\n----------------------------------------\n\nTITLE: Building Fuchsia\nDESCRIPTION: This shell command configures the Fuchsia build target and then initiates the build process. It sets the target device to `terminal.qemu-x64` and executes the build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfx set terminal.qemu-x64 && fx build\n```\n\n----------------------------------------\n\nTITLE: Running License Checking Script\nDESCRIPTION: This sequence of commands updates the golden license files to reflect the current state of the repository. It requires the Dart SDK and any associated dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndart pub get\ngclient sync -D\nrm -rf ../../../out/licenses\ndart --enable-asserts lib/main.dart --src ../../.. --out ../../../out/licenses --golden ../../ci/licenses_golden\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Output in Flutter Testing Framework\nDESCRIPTION: This snippet provides a context for understanding an exception caught by the Flutter test framework. It describes the error message, the test file location, and other related information that can assist developers in debugging failing tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Fix-failing-checks.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure was thrown running a test:\nExpected: exactly one matching candidate\n  Actual: _TextWidgetFinder:<Found 0 widgets with text\n\"AsyncSnapshot<String>(ConnectionState.waiting, null, null, null)\": []>\n   Which: means none were found but one was expected\n\nWhen the exception was thrown, this was the stack:\n#4      main.<anonymous closure>.<anonymous closure> (…/packages/flutter/test/widgets/async_test.dart:115:7)\n<asynchronous suspension>\n#5      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:189:15)\n<asynchronous suspension>\n#6      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:1032:5)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided one frame from package:stack_trace)\n\nThis was caught by the test expectation on the following line:\n  file:///b/s/w/ir/x/w/flutter/packages/flutter/test/widgets/async_test.dart line 115\nThe test description was:\n  gracefully handles transition from null future\n════════════════════════════════════════════════════════════════════════════════════════════════════\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Touch Input Test Log Example\nDESCRIPTION: Example log output showing the injection of a tap event and the view's response, demonstrating coordinate translation and event handling.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nInjecting the tap event\n[touch-input-test.cm] INFO: [portable_ui_test.cc(193)] Injecting tap at (-500, -500)\n\nView receives the event\n[flutter_jit_runner] INFO: touch-input-view.cm(flutter): touch-input-view received tap: PointerData(embedderId: 0, timeStamp: 0:01:03.623259,\nchange: PointerChange.add, kind: PointerDeviceKind.touch, signalKind: PointerSignalKind.none, device: -4294967295, pointerIdentifier: 0,\nphysicalX: 319.99998331069946, physicalY: 199.99999284744263, physicalDeltaX: 0.0, physicalDeltaY: 0.0, buttons: 0, synthesized: false,\npressure: 0.0, pressureMin: 0.0, pressureMax: 0.0, distance: 0.0, distanceMax: 0.0, size: 0.0, radiusMajor: 0.0, radiusMinor: 0.0,\nradiusMin: 0.0, radiusMax: 0.0, orientation: 0.0, tilt: 0.0, platformData: 0, scrollDeltaX: 0.0, scrollDeltaY: 0.0, panX: 0.0, panY: 0.0,\npanDeltaX: 0.0, panDeltaY: 0.0, scale: 0.0, rotation: 0.0)\n\nSuccessfully received response from view\n[touch-input-test.cm] INFO: [touch-input-test.cc(162)] Received ReportTouchInput event\n[touch-input-test.cm] INFO: [touch-input-test.cc(255)] Expecting event for component touch-input-view at (320, 200)\n[touch-input-test.cm] INFO: [touch-input-test.cc(257)] Received event for component touch-input-view at (320, 200), accounting for pixel scale of 1\n```\n\n----------------------------------------\n\nTITLE: Executing E2E Benchmarks - Flutter Shell\nDESCRIPTION: Runs E2E-based benchmarks with `flutter drive`, focusing on independent execution from the host machine. Requires dependency on the `e2e` package and proper setup of tests and drivers.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile -t test/[test_name]_e2e.dart --driver test_driver/e2e_test.dart\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Embedder GLFW in C++\nDESCRIPTION: Sets up the CMake project, specifies C++11 standard, and creates the main executable target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(FlutterEmbedderGLFW)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\" )\n\nadd_executable(flutter_glfw FlutterEmbedderGLFW.cc)\n```\n\n----------------------------------------\n\nTITLE: Updating Mocks for Flutter Tests\nDESCRIPTION: This snippet explains how to update mock files generated by Mockito for Flutter tests, ensuring they are in sync with the current API changes.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter pub run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Running Objective-C XCTests with iOS Variant\nDESCRIPTION: This script builds and runs XCTests for the iOS embedding of the Flutter engine. The `--ios-variant` argument specifies the iOS build variant to use, such as `ios_debug_sim_unopt_arm64` for arm64 Mac simulators.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntesting/run_tests.py --type=objc\n\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Data in C++\nDESCRIPTION: Creates an instance of the `FragInfo` struct and sets its `time` member to the current time in seconds, obtained using `fml::TimePoint`.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nFS::FragInfo frag_info;\nfrag_info.time = fml::TimePoint::Now().ToEpochDelta().ToSecondsF();\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths for Flutter Application\nDESCRIPTION: Specifies file and component installation paths for a Flutter application, ensuring the runtime environment is set up correctly. The CMake installation settings cater to Visual Studio's needs while preventing stale file issues by fully copying necessary data on each build.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Throwing String Exception in Flutter Test\nDESCRIPTION: This snippet shows a test case where a string exception is thrown. The exception message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - string'.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nmain.<anonymous closure> (.+[/\\\\]dev[/\\\\]automated_tests[/\\\\]integration_test[/\\\\]exception_handling_test.dart:10:5)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library and Header Files\nDESCRIPTION: Creates a list of Flutter library header files and sets up an interface library for linking Flutter dependencies\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Establishes the minimum required CMake version for the Flutter build process. Ensures compatibility with Flutter's build requirements.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Thread Interactions in Vulkan Backend Using Mermaid Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the interactions between various threads in the Vulkan backend, including the render thread, concurrent workers, fence waiter, resource manager, and GPU. It shows the flow of operations during application launch and a single frame rendering cycle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/vulkan_threading.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant rt as Render Thread\n    participant worker1 as Concurrent Worker 1\n    participant worker2 as Concurrent Worker 2\n    participant fence_waiter as Fence Waiter\n    participant resource_manager as Resource Manager\n    participant gpu as GPU\n    rt->>+worker1: Setup PSO 1\n    rt->>+worker2: Setup PSO n\n    worker1-->>-rt: Done\n    worker2-->>-rt: Done\n    Note over rt,resource_manager: Application launch\n    loop One Frame\n        activate rt\n        rt->>+worker2: Frame Workload\n        activate fence_waiter\n        rt->>fence_waiter: Resource 1 owned by GPU\n        worker2-->>-rt: Done\n        rt->>fence_waiter: Resource 2 owned by GPU\n        rt->>gpu: Submit GPU Commands\n        deactivate rt\n    end\n    activate gpu\n    gpu-->>fence_waiter: GPU Work Done\n    fence_waiter->>resource_manager: Collect/Pool Resources\n    deactivate fence_waiter\n    activate resource_manager\n    deactivate gpu\n    deactivate resource_manager\n```\n\n----------------------------------------\n\nTITLE: Including Irrelevant Details in Flutter Widget Test (Bad)\nDESCRIPTION: This Flutter widget test example shows a case where a significant portion of the setup is unrelated to the behavior under test, which can confuse the reader.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Notice how much of the widget setup has nothing to do with the behavior-under-test...\ntestWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {\n  const double textScaleFactor = 1.0;\n  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);\n  await tester.pumpWidget(\n    new MaterialApp(home: new Material(\n      child: new Center(\n        child: new Builder(builder: (BuildContext context) {\n          return new RaisedButton(\n            onPressed: () {\n              showDialog<Null>(\n                context: context,\n                builder: (BuildContext context) {\n                  return new MediaQuery(\n                    data: MediaQuery.of(context).copyWith(textScaleFactor: textScaleFactor),\n                    child: new CupertinoAlertDialog(\n                      actions: const <Widget>[\n                        const CupertinoDialogAction(\n                          child: const Text('One'),\n                        ),\n                        const CupertinoDialogAction(\n                          child: const Text('Two'),\n                        ),\n                      ],\n                      actionScrollController: scrollController,\n                    ),\n                  );\n                },\n              );\n            },\n            child: const Text('Go'),\n          );\n        }),\n      ),\n    )),\n  );\n\n  await tester.tap(find.text('Go'));\n\n  await tester.pump();\n  await tester.pump(const Duration(seconds: 1));\n\n  // Check that the title/message section is not displayed\n  expect(scrollController.offset, 0.0);\n  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));\n\n  // Check that the button's vertical size is the same.\n  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,\n    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));\n});\n```\n\n----------------------------------------\n\nTITLE: Installing tool-proxy-client on glinux for Flutter Release Engineering\nDESCRIPTION: This command installs the tool-proxy-client on a glinux machine. The tool enables and enforces 2 party authorization for controlled builds in the Flutter release process.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/RELEASE_ONBOARDING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install tool-proxy-client\n```\n\n----------------------------------------\n\nTITLE: Engine Version Selection Process Flowchart\nDESCRIPTION: This Mermaid diagram illustrates the decision flow for selecting the Flutter engine version. It shows the priority order of checking environment variables, release files, and using git merge-base commands.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Engine-artifacts.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> CheckEnvVar\n    CheckEnvVar: <code>FLUTTER_PREBUILT_ENGINE_VERSION</code> set?\n    UseEnvVar: Use <code>FLUTTER_PREBUILT_ENGINE_VERSION</code>\n    CheckReleaseFile: <code>bin/internal/engine.version</code> exists?\n    UseReleaseFile: Use <code>bin/internal/engine.version</code>\n    UseMergeBase: <code>git merge-base HEAD upstream/master</code>\n\n    CheckEnvVar --> UseEnvVar: Yes\n    CheckEnvVar --> CheckReleaseFile: No\n    UseEnvVar --> [*]: Done\n    CheckReleaseFile --> UseReleaseFile: Yes\n    CheckReleaseFile --> UseMergeBase: No\n    UseReleaseFile --> [*]: Done\n    UseMergeBase --> [*]: Done\n```\n\n----------------------------------------\n\nTITLE: Adding a New Mock GLES Function in C++\nDESCRIPTION: This code demonstrates how to add a new function to the mock GLES implementation.  It involves defining a new function (e.g., `glFooBar`) in `mock_gles.cc` that records the call. The `recordCall` function is assumed to handle the recording of the function name.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cc\nCODE:\n```\nvoid glFooBar() {\n  recordCall(\"glFooBar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder where launch screen images can be added or modified.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Adding Docregion Comments in CSS\nDESCRIPTION: This snippet illustrates the use of docregion comments in a CSS file, allowing for sections of CSS to be documented.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n/* #docregion sectionname */\n/* #enddocregion sectionname */\n```\n\n----------------------------------------\n\nTITLE: Resetting Input Connection on WebView Unfocus (Java)\nDESCRIPTION: This code resets the input connection back to the Flutter thread when the WebView loses focus, preventing text input from being stuck inside the WebView.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nInputAwareWebView.java#L128\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter application wrapper code. Sets up compilation settings and dependencies for the main application runner.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Example Function Main for Dart\nDESCRIPTION: This snippet illustrates how to structure a simple main function in Dart that calls functions with certain parameters, promoting clarity and independence from global state.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// ... imports something that defines foo and bar ...\n\nvoid main() {\n  foo(1);\n  bar(2);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project and Build Configurations\nDESCRIPTION: This snippet initializes a CMake project with specified C++ language standards and defines build configurations for Debug, Profile, and Release modes. It sets the policy to modern CMake behaviors, and contains functions for applying standard settings to targets. The build configurations are necessary for managing application build modes effectively.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flutter_view LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_view\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a FirebaseLab test target in .ci.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure a FirebaseLab test target in a `.ci.yaml` file. It includes the target name, recipe, dependencies, task name, and device specifications. The `bringup: true` property is used for new tests to allow configuration propagation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-FirebaseLab-Tests.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n - name: Linux firebase_oriol33_abstract_method_smoke_test\n   # This is required for new tests to allow the\n   # configuration to propagate.\n   bringup: true\n   recipe: firebaselab/firebaselab\n   # The unit for timeout is minutes. 1 hour is enough\n   # for most use cases unless the test is using a device\n   # with low capacity and the queue is expected to be\n   # longer than 30 minutes.\n   timeout: 60\n   Properties:\n      # These top level dependencies are shared between firebaselab\n      # tests. For the current values you can copy paste the\n      # dependencies from another firebaselab target. Changing these\n      # values are only necessary when upgrading to a new android sdk\n      # version.\n      dependencies: >-\n          [\n            {\"dependency\": \"android_sdk\", \"version\": \"version:33v6\"}\n          ]\n      # Use for metrics collection and to be able to filter tasks**\n      # in swarming.\n      tags: >\n        [\"firebaselab\"]\n      task_name: abstract_method_smoke_test\n      physical_devices: >-\n          [\"--device\", \"model=oriole,version=33\"]\n      virtual_devices: >-\n          []\n```\n```\n\n----------------------------------------\n\nTITLE: Running Arabic Flutter Hello World Demo\nDESCRIPTION: Command to execute the Arabic language version of the Flutter Hello World demo by specifying the Arabic implementation file.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter run lib/arabic.dart\n```\n\n----------------------------------------\n\nTITLE: Executing Clangd Check Script with Specified Paths\nDESCRIPTION: This shell command runs the `clangd_check` tool using Dart, with specified paths to the `clangd` binary and the `--compile-commands-dir`. It is used when default path inference is inadequate, requiring manual path inputs. Ensure that the specified paths are correct and accessible.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clangd_check/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart ./tools/clangd_check/bin/main.dart \\\n  --clangd ../buildtools/mac-arm64/clang/bin/clangd \\\n  --compile-commands-dir ../out/host_Debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Leak Detection Test Failure Example\nDESCRIPTION: An example output from a Flutter Framework widget test failure due to leaks detected by leak_tracker. The test output indicates that an object was not disposed of properly, illustrating the need for careful management of disposables in tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Leak-tracking.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nExpected: leak free\n    Actual: <Instance of 'Leaks'>\n     Which: contains leaks:\n            # The text is generated by leak_tracker.\n            # For leak troubleshooting tips open:\n            # https://github.com/flutter/flutter/blob/main/docs/contributing/testing/Leak-tracking.md\n            notDisposed:\n              total: 1\n              objects:\n                FocusNode:\n                  test: Align smoke test\n                  identityHashCode: 82308154\n\n```\n\n----------------------------------------\n\nTITLE: Generating IntelliJ configuration files\nDESCRIPTION: This command generates IntelliJ configuration files, allowing the main flutter directory to be opened as a project and examples to be run from within the IDE. The `--overwrite` flag ensures that any existing configuration files are overwritten.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"flutter ide-config --overwrite\"\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings in CMake\nDESCRIPTION: This function applies standard compilation settings to C++ targets, enabling advanced C++ features and setting compiler options. It's designed to avoid altering defaults that might affect plugins and requires CMake to support feature-specific compile options. The function primarily sets exception-handling flags and warnings, allowing builds to use C++ standards specified in parameters.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options with CMake\nDESCRIPTION: This section defines the build configuration for both multi-config and single-config generators in CMake. It involves setting build types and linking flags, and requires the CMake toolset and policies to support conditional configuration. The function checks for multi-configuration and sets up build types accordingly, affecting how builds are optimized and executed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Engine Test Configuration in JSON\nDESCRIPTION: This JSON snippet configures an engine test within Flutter's CI. It defines the test's name, recipe, drone dimensions, dependencies, and tasks. The configuration details how to run a clang_tidy test for Android debug ARM64, including specifying the variant, linting options, shard ID, and script to execute.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests\": [\n    {\n       \"name\": \"test: clang_tidy android_debug_arm64\",\n       \"recipe\": \"engine_v2/tester_engine\",\n       \"drone_dimensions\": [\n         \"device_type=none\",\n         \"os=Linux\"\n       ],\n       \"dependencies\": [\n         \"host_debug\",\n         \"android_debug_arm64\"\n       ],\n       \"tasks\": [\n         {\n            \"name\": \"test: clang_tidy android_debug_arm64\",\n            \"parameters\": [\n              \"--variant\",\n              \"android_debug_arm64\",\n              \"--lint-all\",\n              \"--shard-id=0\",\n              \"--shard-variants=host_debug\"\n            ],\n            \"max_attempts\": 1,\n            \"script\": \"flutter/ci/clang_tidy.sh\",\n            \"test_timeout_secs\": 600,\n         }\n       ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Assets for Flutter Deferred Components Test\nDESCRIPTION: Command to download required assets before running the integration tests. This step is necessary to prepare the test environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/deferred_components_test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./download_assets.sh\n```\n\n----------------------------------------\n\nTITLE: Making Release Android App Debuggable for Profiling\nDESCRIPTION: XML configuration to mark an Android app as debuggable in the AndroidManifest.xml file. Required when profiling release mode applications.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nandroid:debuggable=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter Windows library paths and header files, configuring them for building Flutter applications on Windows. Defines core Flutter library components and includes necessary header files.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Building CanvasKit Locally\nDESCRIPTION: Command to build CanvasKit using felt tool after Emscripten SDK configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfelt build --build-canvaskit\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt test\n```\n\n----------------------------------------\n\nTITLE: Handling Build Types in CMake\nDESCRIPTION: This section manages the build types for the Flutter project. It ensures that the appropriate configurations such as Debug, Profile, and Release are available. The snippet adjusts compiler flags accordingly, which affects the way the project is compiled and linked, particularly affecting features like optimizations and debugging features.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Expecting a Golden File in a Dart Test\nDESCRIPTION: This code snippet demonstrates how to add an expectation for a golden file in a Flutter test using Dart. The `expectLater` function checks that the widget tree, wrapped in a `RepaintBoundary`, matches the specified golden file. The filename pattern is crucial: it must match the test filename, include a unique subtest identifier, and specify a unique subfile identifier within the testWidgets entry. Dependencies include the `flutter_test` package, and the output is a comparison against the reference image stored as the golden file.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nawait expectLater(\n  find.byType(RepaintBoundary),\n  matchesGoldenFile('test_name.subtest.subfile.png'),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Changed Files using `git_repo_tools` in Flutter Engine\nDESCRIPTION: This code snippet demonstrates how to use the `git_repo_tools` library to find and print the paths of all changed files within the current branch of a Flutter Engine Git repository. It utilizes the `Engine` class to locate the root directory of the engine and then uses the `GitRepo` class to retrieve the list of changed files. The script requires the `engine_repo_tools`, `git_repo_tools`, and `path` packages.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/git_repo_tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:io' as io show File, Platform;\n\nimport 'package:engine_repo_tools/engine_repo_tools.dart';\nimport 'package:git_repo_tools/git_repo_tools.dart';\nimport 'package:path/path.dart' as path;\n\nvoid main() async {\n  // Finds the root of the engine repository from the current script.\n  final Engine engine = Engine.findWithin(path.dirname(path.fromUri(io.Platform.script)));\n  final GitRepo gitRepo = GitRepo(engine.flutterDir);\n\n  for (final io.File file in gitRepo.changedFiles) {\n    print('Changed file: ${file.path}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Display List with C++ Impeller API\nDESCRIPTION: This snippet demonstrates how to use the Impeller C++ API to create a display list for rendering various shapes. It involves setting paint properties, translating draw positions, and drawing rectangles, ovals, lines, and rounded rectangles.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/toolkit/interop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <impeller/impeller.h>\n\nDisplayListBuilder builder;\n\nPaint red_paint;\nred_paint.SetColor({1.0, 0.0, 0.0, 1.0});\nred_paint.SetStrokeWidth(10.0);\n\nbuilder.Translate(10, 10);\nbuilder.DrawRect({0, 0, 100, 100}, red_paint);\nbuilder.Translate(100, 100);\nbuilder.DrawOval({0, 0, 100, 100}, red_paint);\nbuilder.Translate(100, 100);\nbuilder.DrawLine({0, 0}, {100, 100}, red_paint);\n\nbuilder.Translate(100, 100);\nImpellerRoundingRadii radii = {};\nradii.top_left = {10, 10};\nradii.bottom_right = {10, 10};\nbuilder.DrawRoundedRect({0, 0, 100, 100}, radii, red_paint);\n\nbuilder.Translate(100, 100);\nbuilder.DrawPath(hpp::PathBuilder{}.AddOval({0, 0, 100, 100}).Build(),\n                 red_paint);\n\nauto dl = builder.Build();\n\n// Per frame\nhpp::Surface window(surface);\nwindow.Draw(dl);\n```\n\n----------------------------------------\n\nTITLE: Running Full Microbenchmark Collection\nDESCRIPTION: Command to run all microbenchmarks on a specified device in profile mode using Flutter CLI\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart\n```\n\n----------------------------------------\n\nTITLE: Adding Touch Input View to Session\nDESCRIPTION: Command to add the touch-input-view component to the Fuchsia session.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nffx session add fuchsia-pkg://fuchsia.com/touch-input-view#meta/touch-input-view.cm\n```\n\n----------------------------------------\n\nTITLE: Updating Repositories in Gradle Build Files - Flutter\nDESCRIPTION: This snippet modifies the `repositories` section in `android/build.gradle` to use Google’s Maven repository instead of a direct URL, necessary for newer plugin updates in Flutter projects.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\nrepositories {\n    google()\n    jcenter()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Submit Test in YAML\nDESCRIPTION: Example of configuring a post-submit test named 'Mac mac_clang_tidy' in the CI YAML file. The test is set to run after merging (post-submit) rather than before merging (pre-submit).\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-pre-submits-and-post-submits.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: Mac mac_clang_tidy\n    recipe: engine_v2/engine_v2\n    presubmit: false\n```\n\n----------------------------------------\n\nTITLE: Project-Level Configuration with CMake\nDESCRIPTION: This CMake configuration sets up the project 'a11y_assessments' with settings for different build modes like Debug, Profile, and Release. It declares the binary name and opts into modern CMake policies to minimize warnings. Key dependencies include CMake version 3.14 or higher, and the CMake toolset's compliance with these configurations. Inputs expected are varying build modes and outputs are configured build environments.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(a11y_assessments LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"a11y_assessments\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Source Files for Flutter Linux Application\nDESCRIPTION: Defines the executable target for the application using the specified BINARY_NAME, includes source files, and links against Flutter and GTK dependencies. Configures the output directory for the binary.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Compiling GSettings Desktop Schemas in Bash\nDESCRIPTION: This Bash script details the steps for downloading the gsettings-desktop-schemas package, extracting schema sources, and compiling them for testing. Dependencies include GNU utilities like wget and tar, as well as glib-compile-schemas for compiling the schemas. The process requires specifying the correct paths for downloading and compiling. Key parameters include the desired package version and the target directory for compiled schemas.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/linux/testing/gschemas/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# download gsettings-desktop-schemas package\\nwget http://archive.ubuntu.com/ubuntu/pool/main/g/gsettings-desktop-schemas/gsettings-desktop-schemas_<version>.deb\\n\\n# extract schema sources (/usr/share/glib-2.0/schemas/*.gschema.xml & .override)\\nar x gsettings-desktop-schemas_<version>.deb\\ntar xf data.tar.zst\\n\\n# compile schemas (/usr/share/glib-2.0/schemas/gschemas.compiled)\\nglib-compile-schemas --targetdir path/to/testing/gschemas usr/share/glib-2.0/schemas/\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy View for WebView Input Connections (Java)\nDESCRIPTION: This code sets up a proxy view that listens for input connections on the same thread as WebView, necessary for handling text input in WebViews on Android versions pre-N.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nInputAwareWebView.java#L113\n```\n\n----------------------------------------\n\nTITLE: Setting up LLDB for Flutter Engine source mapping\nDESCRIPTION: LLDB initialization command to map Flutter Engine source files, useful for Googlers using RBE (Remote Build Execution).\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsettings set target.source-map \"flutter/\" \"/path/to/engine/src/flutter/\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Tool Backend\nDESCRIPTION: This custom command runs a shell script related to the Flutter tool backend, ensuring it is executed every time the build is performed, even without a real input file.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Flutter Library Target\nDESCRIPTION: Defines 'flutter' as an INTERFACE library target, specifies include directories, and links it against necessary system libraries. This is vital for ensuring the Flutter library integrates smoothly into the host application’s build.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Golden File Test Failure Message\nDESCRIPTION: This snippet provides the error message output when a golden file test fails due to an unapproved image in post-submit testing. The message guides users to approve the images or revert changes through the Flutter Gold dashboard. Dependencies include having access to the Flutter Gold dashboard and ensuring images are pre-approved. Expected output is an error message indicating the need for action on golden file images.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n  Skia Gold received an unapproved image in post-submit\n  testing. Golden file images in flutter/flutter are triaged\n  in pre-submit during code review for the given PR.\n\n  Visit https://flutter-gold.skia.org/ to view and approve\n  the image(s), or revert the associated change. For more\n  information, visit the wiki:\n  https://github.com/flutter/flutter/blob/main/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md\n```\n\n----------------------------------------\n\nTITLE: Publishing Files to PM\nDESCRIPTION: This snippet utilizes the `ffx repository publish` command to publish various FAR (Fuchsia Archive) files to the package manager (PM). These files include the Dart AOT runner integration test, the OOT (Out-of-Tree) Dart AOT runner, and the Dart AOT echo server.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/dart-aot-runner-integration-test-0.far\n\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/oot_dart_aot_runner-0.far\n\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/gen/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_echo_server/dart_aot_echo_server/dart_aot_echo_server.far\n```\n\n----------------------------------------\n\nTITLE: Implementing CHANGELOG Entries in Flutter Packages\nDESCRIPTION: This snippet shows an example of how to write CHANGELOG entries for Flutter packages. It uses version titles with a preceding blank line to separate them from the descriptions and marks entries with an asterisk for consistency. Breaking changes are explicitly labeled, and guidance or references should be provided for migration if required. This style ensures clarity and consistency in documenting package updates.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n## 2.0.0\n\n* Adds the ability to fetch data from the future.\n* **BREAKING CHANGES**:\n  * Removes the deprecated `neverCallThis` method.\n  * URLs parameters are now `Uri`s rather than `String`s.\n\n## 1.0.3\n\n* Fixes a crash when the device teleports during a network operation.\n\n```\n\n----------------------------------------\n\nTITLE: Handling Varying Branches in GLSL Fragment Shader\nDESCRIPTION: This GLSL snippet demonstrates how branching logic impacts performance in shaders on different GPU architectures. It shows a fragment shader that decides whether to perform an expensive operation based on the alpha component of a color vector. On SIMT architectures, branching costs are lower if the condition is true across all threads, whereas for VLIW/SIMD architectures, parallel instruction execution is hindered.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nin vec4 color;\nout vec4 frag_color;\n\nvoid main() {\n  vec4 result;\n\n  if (color.a == 0) {\n    result = vec4(0);\n  } else {\n    result = DoExtremelyExpensiveThing(color);\n  }\n\n  frag_color = result;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for Flutter on Other Platforms\nDESCRIPTION: Adding the Flutter binary directory to the PATH environment variable on non-Windows platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nexport PATH=\"$PATH:$PWD/flutter\"\n```\n\n----------------------------------------\n\nTITLE: Disable Remote Build Execution in Flutter Engine\nDESCRIPTION: Command to disable remote build execution. Note that this invalidates build context and previously built artifacts won't be reused.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\net build --no-rbe\n```\n\n----------------------------------------\n\nTITLE: Executing Clangd Check Script with Default Paths\nDESCRIPTION: This shell command runs the `clangd_check` tool using Dart, with paths inferred from existing artifacts. Its primary function is to execute clangd diagnostics on the codebase. It requires Dart and appropriate environment setup with access to the `clangd` and C++ codebase. On success, it exits with status 0.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clangd_check/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart ./tools/clangd_check/bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including bundle creation, file copying, and AOT library installation for non-Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including the executable, ICU data, Flutter library, bundled libraries, and assets.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows Build\nDESCRIPTION: Shell commands to set necessary environment variables for building the Flutter engine on Windows using Visual Studio.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDEPOT_TOOLS_WIN_TOOLCHAIN=0\nGYP_MSVS_OVERRIDE_PATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\"\nWINDOWSSDKDIR=\"C:\\Program Files (x86)\\Windows Kits\\10\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Flutter Repository\nDESCRIPTION: Cloning the Flutter Git repository from the master branch into a local directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b master https://github.com/flutter/flutter.git\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. It sets the C++ standard to 14, adds compiler warnings and treats them as errors, and enables optimizations and disables debug asserts for non-Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Remote Build Configuration in Flutter Engine Tool\nDESCRIPTION: Command to enable remote build execution (RBE) strategy for Flutter engine builds. This reduces local machine load but requires fast internet.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\net build --build-strategy=remote\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Line Break Classes for Various Scripts\nDESCRIPTION: This snippet shows the format used to define line break classes for ranges of Unicode code points. Each line specifies a range or single code point, followed by a line break class abbreviation and a comment describing the characters.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\n10D0..10FA;AL     # Ll    [43] GEORGIAN LETTER AN..GEORGIAN LETTER AIN\n10FB;AL           # Po         GEORGIAN PARAGRAPH SEPARATOR\n10FC;AL           # Lm         MODIFIER LETTER GEORGIAN NAR\n10FD..10FF;AL     # Ll     [3] GEORGIAN LETTER AEN..GEORGIAN LETTER LABIAL SIGN\n1100..115F;JL     # Lo    [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER\n1160..11A7;JV     # Lo    [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE\n11A8..11FF;JT     # Lo    [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\n```\n\n----------------------------------------\n\nTITLE: Cold Reloading Flutter Apps with _flutter.runInView Protocol\nDESCRIPTION: Performs a \"cold reload\" of a running application where the shell remains but the root isolate is restarted with new configuration. This is used in development workflow when the user requests a reload or presses the play button. The method requires viewId, mainScript, packagesFile, and assetDirectory arguments.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Success\",\n  \"view\": {\n    \"type\": \"FlutterView\",\n    \"id\": \"_flutterView/0x104e0ab58\",\n    \"isolate\": {\n      \"type\": \"@Isolate\",\n      \"fixedId\": true,\n      \"id\": \"isolates/1056589762\",\n      \"name\": \"main.dart$main-1056589762\",\n      \"number\": 1056589762\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configurations for CMake\nDESCRIPTION: This snippet defines build configuration options for different modes like 'Debug', 'Profile', and 'Release'. It specifies linker and compiler flags for the Profile build mode by mirroring Release settings and sets up Unicode definitions across all projects.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Callback for Surface Presentation in C++\nDESCRIPTION: Sets up a swap callback to flush OpenGL operations and present the surface.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nSurfaceGLES::SwapCallback swap_callback =\n    [surface, context]() -> bool {\n  context->GetReactor()->React();\n  return surface->Present();\n};\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Integration in CMake\nDESCRIPTION: Creates a custom command that runs the Flutter tool backend script to generate the necessary Flutter library and headers. Uses a phony output to ensure the command runs every time to handle dynamic Flutter tool outputs.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Impeller Unit-Test Setup in Markdown\nDESCRIPTION: This markdown snippet explains the unique approach to Impeller unit-tests in the Flutter project. It highlights that all tests use a single fixture set and are invoked using the 'impeller_unittest' harness, contrary to other targets in the buildroot.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/fixtures/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The Impeller Fixtures Set\n\nUnlike other targets in the buildroot, all Impeller unit-tests use the same\nfixture set and are invoked using a single test harness (`impeller_unittest`).\nThis is for convenience but also to make working with shader libraries easier.\n```\n\n----------------------------------------\n\nTITLE: Dart Skipped Test with Issue Link\nDESCRIPTION: Illustrates how to temporarily skip a flaky test in Dart, providing a link to a tracking issue for its resolution.  This is used to keep the test tree green while the fix is in development. The associated issue should be tagged with the `skip-test` label.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nskip: true, // https://github.com/flutter/flutter/issues/XXXXX\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of header files for the Flutter library to a CMake list. These headers are crucial for compiling projects that link against the Flutter engine. The function 'list_prepend' is used to add a specific directory path prefix to each header file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Running pre-push Hooks with Dart and Python\nDESCRIPTION: This snippet details the process of executing various hooks when pushing commits to a remote branch using Dart commands and accompanying Python wrapper scripts. Specifically, it outlines the execution of scripts such as `ci/clang_tidy.sh`, `ci/pylint.sh`, and `ci/format.sh`, while noting the exclusion of heavier scripts for efficiency. The pre-push hook can be modified to include additional checks by altering the `run()` method of the `PrePushCommand` class.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/githooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# This is a placeholder for Python wrapper script code that executes Dart commands\n\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart code to run pre-push checks\n\n```\n\n----------------------------------------\n\nTITLE: Clamped Arithmetic Functions Reference in C++\nDESCRIPTION: A collection of helper functions that perform arithmetic operations with clamping behavior. These functions accept both standard arithmetic and ClampedNumeric types as input and return ClampedNumeric results. They provide safe arithmetic operations by preventing overflow and underflow through clamping.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nClampAdd()  // Addition with clamping\nClampSub()  // Subtraction with clamping\nClampMul()  // Multiplication with clamping\nClampDiv()  // Division with clamping\nClampMod()  // Modulus with clamping (integer only)\nClampLsh()  // Left shift with clamping (integer only)\nClampRsh()  // Right shift with clamping (integer only)\nClampAnd()  // Bitwise AND with clamping (integer only, unsigned result)\nClampOr()   // Bitwise OR with clamping (integer only, unsigned result)\nClampXor()  // Bitwise XOR with clamping (integer only, unsigned result)\nClampMax()  // Maximum value with clamping\nClampMin()  // Minimum value with clamping\nMakeClampedNum()  // Creates new ClampedNumeric from arithmetic type\n```\n\n----------------------------------------\n\nTITLE: Adding goldctl Dependency in CI Tasks\nDESCRIPTION: This YAML snippet shows how to configure a CI task by adding the goldctl dependency, which is necessary for interfacing with Skia Gold during golden file testing. The task is defined in a top-level .ci.yaml file and requires specifying the correct git revision of goldctl. It is critical to ensure that the configuration matches existing tasks to maintain consistency in testing environments.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Linux framework_tests_widgets\n  properties:\n    dependencies: >-\n      [\n        {\"dependency\": \"goldctl\", \"version\": \"git_revision:2387d6fff449587eecbb7e45b2692ca0710b63b9\"}\n      ]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n+  properties:\n+    dependencies: >-\n+      [\n+        {\"dependency\": \"goldctl\", \"version\": \"git_revision:2387d6fff449587eecbb7e45b2692ca0710b63b9\"}\n+      ]\n```\n\n----------------------------------------\n\nTITLE: Creating a TextPainter with FlutterTest Font in Dart\nDESCRIPTION: This snippet demonstrates how to create a TextPainter using the FlutterTest font, testing the line metrics such as height, ascent, descent, and width of the text. It is a unit test example meant to confirm expectations about text property calculations.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Flutter-Test-Fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal painter = TextPainter(\n  text: const TextSpan(\n    text: 'text',\n    style: TextStyle(fontSize: 14.0, /* \"fontFamily: 'FlutterTest'\" is implied */),\n  ),\n  textDirection: TextDirection.ltr,\n  textScaleFactor: 1.0,\n);\nfinal lineMetrics = painter.computeLineMetrics().first;\n\nexpect(lineMetrics.height, 14.0);\nexpect(lineMetrics.ascent, 10.5); // 0.75em * 14.0pt\nexpect(lineMetrics.descent, 3.5); // 0.25em * 14.0pt\n// 'text' is 4 glyphs. Most glyphs are as wide as they are tall.\nexpect(lineMetrics.width, 14.0 * 4);\n```\n\n----------------------------------------\n\nTITLE: Clangd Configuration for C++ Code Completion\nDESCRIPTION: This JSONC snippet shows the configuration for `clangd` to enable C++ code completion in VS Code. It requires pointing `--compile-commands-dir` to an Android build output directory, like `out/android_debug_unopt_arm64`. Remember to adjust this path when working with other parts of the engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  /* ... */\n  \"clangd.path\": \"buildtools/mac-arm64/clang/bin/clangd\",\n  \"clangd.arguments\": [\"--compile-commands-dir=out/android_debug_unopt_arm64\"]\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Referring to Flutter View for Input Creation in WebView Proxy (Java)\nDESCRIPTION: This code snippet shows how the proxy thread refers back to the Flutter View for input creation when handling WebView input connections.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nThreadedInputConnectionProxyAdapterView.java#L67\n```\n\n----------------------------------------\n\nTITLE: Clean Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory at the beginning of each installation. This ensures a clean build and avoids stale files from previous installations. The `file(REMOVE_RECURSE)` command with the `INSTALL` command cleans the directory during the install step.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT library for non-Debug Flutter builds\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library for the Flutter application when building in Profile or Release mode, but not for Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests with Reduced Test Set in Dart\nDESCRIPTION: This Dart code snippet illustrates how to tag a test file in Flutter with `reduced-test-set` to ensure execution on all relevant platforms, even within conservative CI environments that aim to conserve resources. Adding this tag ensures that golden file images will be processed across necessary platforms like Mac and Windows, preventing overlooked tests in restrictive environments. The tag should be placed at the top of the Dart test file.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n@Tags(<String>['reduced-test-set'])\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Building Executable\nDESCRIPTION: Defines the application target executable with necessary source files and configures its build settings and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Interface\nDESCRIPTION: Defines the list of Flutter Linux header files, prepends their paths with the ephemeral directory path, and sets up the Flutter interface library with appropriate dependencies and include directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Flutter Test for Comprehension - Improved Version\nDESCRIPTION: This Flutter widget test shows the further optimized version that extracts the dialog declaration into its own statement to disambiguate the dialog being tested from the action of launching it.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {\n  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);\n\n  final Widget dialog = CupertinoAlertDialog(\n    actions: const <Widget>[\n      const CupertinoDialogAction(\n        child: const Text('One'),\n      ),\n      const CupertinoDialogAction(\n        child: const Text('Two'),\n      ),\n    ],\n    actionScrollController: scrollController,\n  );\n\n  await _launchDialog(dialog);\n\n  // Check that the title/message section is not displayed\n  expect(scrollController.offset, 0.0);\n  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));\n\n  // Check that the button's vertical size is the same.\n  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,\n    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Snippets for Header Files in JSON\nDESCRIPTION: This JSON configuration creates snippets for header files in VSCode, allowing developers to use the 'hdr' keyboard macro to generate boilerplate header code. It also includes additional settings for improved development workflow.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snippets\": [\n    {\n      \"name\": \"Header File\",\n      \"prefix\": \"hdr\",\n      \"body\": [\n        \"// Copyright ${CURRENT_YEAR} The Flutter Authors. All rights reserved.\",\n        \"// Use of this source code is governed by a BSD-style license that can be\",\n        \"// found in the LICENSE file.\",\n        \"\",\n        \"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_\",\n        \"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_\",\n        \"\",\n        \"$0\",\n        \"\",\n        \"#endif  // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Version Definitions to Windows Runner in CMake\nDESCRIPTION: Adds preprocessor definitions for the Flutter version information to the compiled Windows executable. These definitions include full version string, major, minor, patch, and build numbers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Platform Tools Installation\nDESCRIPTION: Installs Android platform tools for device interaction and debugging\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_3\n\nLANGUAGE: android-sdk\nCODE:\n```\nplatform-tools:platform-tools\n```\n\n----------------------------------------\n\nTITLE: Removing Named Parameter in YAML\nDESCRIPTION: Shows how to specify removing a named parameter by providing its parameter name in a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'removeParameter'\nname: 'p'\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Integration Test on iOS\nDESCRIPTION: This shell script snippet initializes a Flutter application with the iOS platform and runs an integration test located at 'integration_test/app_test.dart'. The 'flutter create' command is used to set up the project while avoiding overwriting existing files. Following that, the 'flutter test' command executes the integration test to verify wide gamut color support functionality. This assumes that Flutter and necessary iOS development environments are pre-installed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/wide_gamut_test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter create --platforms=\\\"ios\\\" --no-overwrite .\\nflutter test integration_test/app_test.dart\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings with CMake\nDESCRIPTION: This function defines standard compilation settings for targets, including C++ standard version, warning level adjustments, and exception handling settings. It also applies specific compile definitions for Debug configuration. This is used to ensure consistent build settings across targets and is intended for internal plugin and application building.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests with run_tests.py\nDESCRIPTION: Describes the process for configuring and running C++ tests for the Flutter engine using the run_tests.py script. It includes an example command for setting up and compiling a debug build for macOS arm64 and executing all applicable tests. The script is essential for ensuring that all changes behave as expected across supported platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Configure host build for macOS arm64 debug.\n$ flutter/tools/gn --runtime-mode=debug --unoptimized --no-lto --mac-cpu=arm64\n# Compile default targets (should cover all applicable run_tests.py requirements).\n$ ninja -j100 -C out/host_debug_unopt_arm64\n# Run all cross-platform C++ tests for the debug build arm64 variant.\n$ cd flutter/testing\n$ ./run_tests.py --variant=host_debug_unopt_arm64 --type=engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: This snippet sets up the Flutter library path and header files for Windows. It defines the location of the Flutter DLL and creates an interface library target with the necessary include directories and linkage.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Impeller Shader Compilation Pipeline with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the offline shader compilation pipeline for Impeller, showing the process from GLSL ES 4.60 to various platform-specific shader formats and C++ libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    glsl_460[GLSL ES 4.60] -- Stage 1 Compiler --> spirv[SPIRV]\n\n    spirv -- SPIRV Optimizer --> optimized_spirv[Optimized SPIRV]\n\n    optimized_spirv -- Metal Stage 2 Compiler --> metal_sources[Metal Shader Sources]\n    metal_sources -- Metal Linker --> metal_library[Metal Library]\n\n    optimized_spirv -- Vulkan Stage 2 Compiler --> vulkan_spirv[Vulkan SPIRV]\n    vulkan_spirv -- Shader Archiver --> vulkan_shader_archive[Vulkan Shader Archive]\n\n    optimized_spirv -- GLSL ES Stage 2 Compiler --> glsl_es_100[GLSL ES 1.00]\n    glsl_es_100 -- Shader Archiver --> gles_shader_archive[OpenGL ES Shader Archive]\n\n    spirv -- Reflector --> cxx_sources[C++ Sources]\n    cxx_sources -- Ninja Build --> cxx_library[C++ Library]\n```\n\n----------------------------------------\n\nTITLE: Adding a NEXT Version Entry in ChangeLog\nDESCRIPTION: This snippet illustrates how to add a new entry under the `NEXT` section in a CHANGELOG file. This is used when making updates that don't require an immediate version change but should still be tracked in the log. It ensures that even minor or version-exempt changes are documented, improving transparency and traceability for package consumers.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n## NEXT\n\n* Description of your new change.\n* Existing entry.\n\n## 1.0.2\n...\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Flutter Library Headers\nDESCRIPTION: Prepends the `EPHEMERAL_DIR/flutter_linux/` path to each header file in the `FLUTTER_LIBRARY_HEADERS` list using the custom `list_prepend` function. This ensures that the compiler can find the header files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: CI Configuration in YAML\nDESCRIPTION: Configuration of test shards using .ci.yaml file, including shard, subshard properties and bringup status\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Adding-a-new-Test-Shard.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# Example .ci.yaml entry for a new test shard\nshard: new_framework_test\nsubshard: specific_subshard\nbringup: true\n```\n\n----------------------------------------\n\nTITLE: Remove Asset Directory Recursively\nDESCRIPTION: Before installing assets, remove the existing assets directory recursively to ensure no stale files exist from previous installations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Local Engine - Shell Command\nDESCRIPTION: Command for running DeviceLab tests against a local engine build, specifying engine source path and architecture configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart bin/run.dart --task=[some_task] \\\n  --local-engine-src-path=[path_to_local]/engine/src \\\n  --local-engine=[local_engine_architecture] \\\n  --local-engine-host=[local_engine_host_architecture]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands\nDESCRIPTION: Configures custom commands for Flutter tool backend to generate necessary files. Uses a _phony_ non-existent file to force the command to run on each build, and sets up a flutter_assemble target that depends on the Flutter library and headers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake for Windows\nDESCRIPTION: This snippet sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time and defines the flutter_assemble target.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Using => Syntax in Flutter Widget Build Methods\nDESCRIPTION: The snippet demonstrates how to apply the '=>' syntax in widget build methods for a more concise syntax while maintaining readability.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n    // GOOD, but slightly more verbose than necessary since it doesn't use =>\n    @override\n    Widget build(BuildContext context) {\n      return PopupMenuButton<String>(\n        onSelected: (String value) { print('Selected: $value'); },\n        itemBuilder: (BuildContext context) {\n          return <PopupMenuItem<String>>[\n            PopupMenuItem<String>(\n              value: 'Friends',\n              child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),\n            ),\n            PopupMenuItem<String>(\n              value: 'Events',\n              child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),\n            ),\n          ];\n        }\n      );\n    }\n\n    // GOOD, does use =>, slightly briefer\n    @override\n    Widget build(BuildContext context) {\n      return PopupMenuButton<String>(\n        onSelected: (String value) { print('Selected: $value'); },\n        itemBuilder: (BuildContext context) => <PopupMenuItem<String>>[\n          PopupMenuItem<String>(\n            value: 'Friends',\n            child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),\n          ),\n          PopupMenuItem<String>(\n            value: 'Events',\n            child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),\n          ),\n        ]\n      );\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Flutter Driver Test Execution\nDESCRIPTION: Concrete example of running a specific Flutter driver test for keyboard resize functionality, demonstrating the precise syntax for test and driver file paths.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive -t lib/keyboard_resize.dart --driver test_driver/keyboard_resize_test.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Module\nDESCRIPTION: These commands create a Flutter module named 'hello', navigate into the project directory, and build the module into an AAR (Android Archive) file. The resulting AAR file can then be embedded within a native Android application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/pure_android_host_apps/android_custom_host_app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ flutter create -t module hello\n$ cd hello\n$ flutter build aar\n```\n\n----------------------------------------\n\nTITLE: Running External Texture Surface Producer Smiley Face App and Test\nDESCRIPTION: Commands to run the surface_producer_smiley_face app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/external_texture/surface_producer_smiley_face_main.dart\n\n# Run the test\n$ flutter drive lib/external_texture/surface_producer_smiley_face_main.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags in CMake\nDESCRIPTION: Configures Profile build mode settings by inheriting from Release configuration for linker and compiler flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake\nDESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the runner. These libraries include core implementations and specific functionalities for plugins and the main app.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time, and sets up dependencies for the flutter_assemble target.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: ClampRound, ClampFloor, and ClampCeil usage in C++\nDESCRIPTION: `ClampRound`, `ClampFloor`, and `ClampCeil` functions provide functionality similar to `std::round`, `std::floor`, and `std::ceil` but they saturate and return an integral type. The template parameter specifies the destination type, defaulting to int if unspecified. These are used for most floating-to-integral conversions.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Basically saturated_cast<int>(std::round(floating_point_value)).\nint int_value = ClampRound(floating_point_value);\n\n// A destination type can be explicitly specified.\nuint8_t byte_value = ClampFloor<uint8_t>(floating_point_value);\n```\n\n----------------------------------------\n\nTITLE: Updating Golden File Fixtures in Flutter Embedder Tests\nDESCRIPTION: Shell commands demonstrating how to build the engine, run tests, and update the golden fixture files when they need to be regenerated.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/embedder/fixtures/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# The examples below assume:\n#   $ENGINE = /path/to/engine/src\n#   $TARGET = /path/to/engine/src/out/{{host_you_want_to_build}}\n\n# 1. Make sure you have built the engine:\n$ ninja -j1000 -C $ENGINE/out/$TARGET\n\n# 2. Run the test locally (assuming you have built the engine).\n$ $ENGINE/out/$TARGET/embedder_unittests*\n\n# Or, to run just a single test:\n$ $ENGINE/out/$TARGET/embedder_unittests --gtest_filter=\"EmbedderTest.VerifyB143464703WithSoftwareBackend\"\n\n# Or, a suite of tests:\n$ $ENGINE/out/$TARGET/embedder_unittests --gtest_filter=\"EmbedderTest.*\"\n\n# 3. Now, copy the output to the golden file (notice the \"actual_\" prefix):\n$ cp \\\n  $ENGINE/out/$TARGET/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png \\\n  $ENGINE/flutter/shell/platform/embedder/fixtures/verifyb143464703_soft_noxform.png\n```\n\n----------------------------------------\n\nTITLE: Excluding Irrelevant Details in Flutter Widget Test (Good)\nDESCRIPTION: This Flutter widget test shows how to refactor a test by extracting irrelevant setup details into separate, well-named methods for improved clarity and maintainability.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Now the unrelated details are factored out...\ntestWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {\n  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);\n  await _launchDialog(\n    dialog: CupertinoAlertDialog(\n      actions: const <Widget>[\n        const CupertinoDialogAction(\n          child: const Text('One'),\n        ),\n        const CupertinoDialogAction(\n          child: const Text('Two'),\n        ),\n      ],\n      actionScrollController: scrollController,\n    ),\n  );\n\n  // Check that the title/message section is not displayed\n  expect(scrollController.offset, 0.0);\n  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));\n\n  // Check that the button's vertical size is the same.\n  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,\n    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter GLFW Embedder\nDESCRIPTION: This CMake script sets up a build configuration for a Flutter embedder using GLFW. It requires CMake version 3.15 or higher and sets the C++ standard to C++11. The script includes directory paths for GLFW and the Flutter engine, configures build options for GLFW, and links the necessary libraries. Prerequisites include a local build of the Flutter engine and GLFW sources.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(FlutterEmbedderGLFW)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\" )\nset(FLUTTER_ENGINE_VARIANT \"host_debug_unopt\" CACHE STRING \"\")\n\nadd_executable(flutter_glfw FlutterEmbedderGLFW.cc)\n```\n\nLANGUAGE: CMake\nCODE:\n```\n############################################################\n# GLFW\n############################################################\noption(GLFW_BUILD_EXAMPLES \"\" OFF)\noption(GLFW_BUILD_TESTS \"\" OFF)\noption(GLFW_BUILD_DOCS \"\" OFF)\noption(GLFW_INSTALL \"\" OFF)\nadd_subdirectory(${CMAKE_SOURCE_DIR}/../../third_party/glfw glfw)\ntarget_link_libraries(flutter_glfw glfw)\ninclude_directories(${CMAKE_SOURCE_DIR}/../../third_party/glfw/include)\n```\n\nLANGUAGE: CMake\nCODE:\n```\n############################################################\n# Flutter Engine\n############################################################\n# This is assuming you\\'ve built a local version of the Flutter Engine.  If you\ndownloaded yours is from the internet you\\'ll have to change this.\ninclude_directories(${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)\nfind_library(FLUTTER_LIB flutter_engine PATHS ${CMAKE_SOURCE_DIR}/../../../out/${FLUTTER_ENGINE_VARIANT})\ntarget_link_libraries(flutter_glfw ${FLUTTER_LIB})\n\n# Copy the flutter library here since the shared library\n# name is `./libflutter_engine.dylib`.\nadd_custom_command(\n        TARGET flutter_glfw POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy\n                ${FLUTTER_LIB}\n                ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Enforcing Arithmetic Type Conversions at Compile-Time in C++\nDESCRIPTION: The `strict_cast` template is analogous to `static_cast` but performs static checks to ensure the destination type can represent the full range of the source type. This prevents potential runtime errors during conversion. Additionally, `StrictNumeric` can be used to enforce compile-time restrictions on function parameters.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Throw a compiler error if byte_value is changed to an out-of-range-type.\nint int_value = strict_cast<int>(byte_value);\n\n// Throw a compiler error if the size argument cannot be represented by a\n// size_t (e.g. passing an int will fail to compile).\nbool AllocateBuffer(void** buffer, StrictCast<size_t> size);\n```\n\n----------------------------------------\n\nTITLE: Implementing FLNativeViewFactory and FLNativeView in Objective-C\nDESCRIPTION: This snippet provides the implementation for FLNativeViewFactory and FLNativeView classes, which create and manage the native UIView for the platform view.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_8\n\nLANGUAGE: objc\nCODE:\n```\n#import \"FLNativeView.h\"\n\n@implementation FLNativeViewFactory {\n  NSObject<FlutterBinaryMessenger>* _messenger;\n}\n\n- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {\n  self = [super init];\n  if (self) {\n    _messenger = messenger;\n  }\n  return self;\n}\n\n- (NSObject<FlutterPlatformView>*)createWithFrame:(CGRect)frame\n                                   viewIdentifier:(int64_t)viewId\n                                        arguments:(id _Nullable)args {\n  return [[FLNativeView alloc] initWithFrame:frame\n                              viewIdentifier:viewId\n                                   arguments:args\n                             binaryMessenger:_messenger];\n}\n\n@end\n\n@implementation FLNativeView {\n   UIView *_view;\n}\n\n- (instancetype)initWithFrame:(CGRect)frame\n               viewIdentifier:(int64_t)viewId\n                    arguments:(id _Nullable)args\n              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {\n  if (self = [super init]) {\n    _view = [[UIView alloc] init];\n  }\n  return self;\n}\n\n- (UIView*)view {\n  return _view;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Type Inference in Dart\nDESCRIPTION: Demonstrates appropriate use of type inference in Dart based on the Flutter engine style guide. Explicit types are sometimes necessary to enhance readability and maintainability, especially when the type is not evident from the context or when semantic implications exist. Type annotations can be added or removed as the code evolves.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Capitalized constructor name always returns a Foo.\nvar foo = Foo();\n\n// Similar with factory constructors.\nvar bar = Bar.create();\n\n// Literals (strings, numbers, lists, maps, etc) always return the same type.\nvar name = 'John Doe';\nvar flag = true;\nvar numbers = [1, 2, 3];\nvar map = {'one': 1, 'two': 2, 'three': 3};\n```\n\nLANGUAGE: dart\nCODE:\n```\n// toString() always returns a String.\nvar string = foo().toString();\n\n// It's reasonable to assume that length returns an int.\nvar length = string.length;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// When variables are in the same scope, reduce() clearly returns an int.\nvar list = [1, 2, 3];\nvar sum = list.reduce((a, b) => a + b);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// What does 'fetchLatest()' return?\nImageBuffer buffer = fetchLatest();\n\n// What does this large chain of method calls return?\nIterable<int> numbers = foo().bar().map((b) => b.baz());\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Without 'num', the map would be inferred as 'Map<String, int>'.\nconst map = <String, num>{'one': 1, 'two': 2, 'three': 3};\n```\n\n----------------------------------------\n\nTITLE: Unicode ALetter Category Code Point Ranges\nDESCRIPTION: Defines ranges of Unicode code points that are classified as ALetter category characters. Each line specifies either a single code point or a range of code points, along with the general category (Lo, L&, Lm, Nl) and a description of the character or range.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n11909         ; ALetter # Lo       DIVES AKURU LETTER O\n1190C..11913  ; ALetter # Lo   [8] DIVES AKURU LETTER KA..DIVES AKURU LETTER JA\n11915..11916  ; ALetter # Lo   [2] DIVES AKURU LETTER NYA..DIVES AKURU LETTER TTA\n11918..1192F  ; ALetter # Lo  [24] DIVES AKURU LETTER DDA..DIVES AKURU LETTER ZA\n```\n\n----------------------------------------\n\nTITLE: YAML Data File for Renaming a Method\nDESCRIPTION: This YAML code snippet shows a data file configuration for renaming a method using data-driven fixes. It specifies the version, transform title, date, element details (URI, method name, class name), and the 'rename' change with the new method name. The tools use this data to update references to the old method.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ntransforms:\n  - title: 'Rename to newName'\n    date: 2020-11-20\n    element:\n      uris: ['c.dart']\n      method: 'oldName'\n      inClass: 'C'\n    changes:\n      - kind: 'rename'\n        newName: 'newName'\n```\n\n----------------------------------------\n\nTITLE: Unicode Property Definitions for Indian Scripts\nDESCRIPTION: Defines Unicode character properties including combining marks (CM), alphabetic characters (AL), numbers (NU), and other categories for various Indian writing systems. Each line contains hex code point ranges and their property assignments.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n0A47..0A48;CM     # Mn     [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI\n0A4B..0A4D;CM     # Mn     [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA\n0A51;CM           # Mn         GURMUKHI SIGN UDAAT\n0A59..0A5C;AL     # Lo     [4] GURMUKHI LETTER KHHA..GURMUKHI LETTER RRA\n```\n\n----------------------------------------\n\nTITLE: Flowchart Diagram of Android Backend Selection Logic\nDESCRIPTION: A mermaid flowchart showing the decision process for selecting between Vulkan and OpenGL ES backends based on device capabilities, Android API level, Vulkan version, and extension support.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    start[Start]\n    android_api{Check Android API}\n    device_support{Device Supports Vulkan}\n    vulkan_version{Vulkan Version Check}\n    vulkan_exts{Vulkan Supports Extensions}\n    vulkan[Use Vulkan Backend]\n    opengl[Use OpenGL Backend]\n    \n    start-->device_support\n    \n    device_support-->|Yes|android_api\n    device_support-->|No|opengl\n    \n    android_api-->|>= Android 29|vulkan_version\n    android_api-->|< Android 29|opengl\n\n    vulkan_version-->|>= Vulkan 1.1|vulkan_exts\n    vulkan_version-->|< Vulkan 1.1|opengl\n\n    vulkan_exts-->|Supports Extensions|vulkan\n    vulkan_exts-->|Doesn't Support Extensions|opengl\n```\n\n----------------------------------------\n\nTITLE: C++ Struct with Padding for GLSL Uniform\nDESCRIPTION: Defines a C++ struct that matches the padded GLSL uniform block. The `Padding` member represents implicit padding added by the compiler for alignment purposes.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nstruct FragInfo {\n  Scalar time;               // (offset 0, size 4)\n  Padding<4> _PADDING_bar_;  // (offset 4, size 4)\n  Point bar;                 // (offset 8, size 8)\n  Vector4 baz;               // (offset 16, size 16)\n};                           // struct FragInfo (size 32)\n```\n\n----------------------------------------\n\nTITLE: Running Platform View Tap Color Change App and Test\nDESCRIPTION: Commands to run the platform_view_tap_color_change app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/platform_view_tap_color_change_main.dart\n\n# Run the test\n$ flutter drive lib/platform_view_tap_color_change_main_test.dart\n```\n\n----------------------------------------\n\nTITLE: Adding GLFW as Subdirectory\nDESCRIPTION: Adds GLFW as a subdirectory and links it to the executable. It configures GLFW build options and adds it as a subdirectory to the project, then links the GLFW library and sets include directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLFW_REPOSITORY ${CMAKE_SOURCE_DIR}/../../third_party/glfw)\n\nset(BUILD_SHARED_LIBS OFF)\nset(GLFW_BUILD_DOCS OFF CACHE BOOL \"\" FORCE)\nset(GLFW_BUILD_TESTS OFF CACHE BOOL \"\" FORCE)\nset(GLFW_BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE)\nset(GLFW_VULKAN_STATIC OFF CACHE BOOL \"\" FORCE)\nadd_subdirectory(${GLFW_REPOSITORY} build_glfw)\n\ntarget_link_libraries(${EXE_NAME} PRIVATE glfw)\ntarget_include_directories(${EXE_NAME} PRIVATE ${GLFW_REPOSITORY}/include)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter Windows DLL and related header files. Configures include directories and links the Flutter library interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Enhanced Image Diffs using ImageMagick\nDESCRIPTION: Provides a series of shell commands to install ImageMagick, create a custom git diff script for images, and configure git to use this script for image comparisons.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# On MacOS.\n$ brew install imagemagick\n\n# Create a comparison script.\n$ cat > ~/bin/git-imgdiff <<EOF\n#!/bin/sh\necho \"Comparing $2 and $5\"\n\n# Find a temporary directory to store the diff.\nif [ -z \"$TMPDIR\" ]; then\n  TMPDIR=/tmp\nfi\n\ncompare \\\n  \"$2\" \"$5\" \\\n  /tmp/git-imgdiff-diff.png\n\n# Display the diff.\nopen /tmp/git-imgdiff-diff.png\nEOF\n\n# Setup git.\ngit config --global core.attributesfile '~/.gitattributes'\n\n# Add the following to ~/.gitattributes.\ncat >> ~/.gitattributes <<EOF\n*.png diff=imgdiff\n*.jpg diff=imgdiff\n*.gif diff=imgdiff\nEOF\n\ngit config --global diff.imgdiff.command '~/bin/git-imgdiff'\n```\n\n----------------------------------------\n\nTITLE: Dart Deprecation Syntax Example\nDESCRIPTION: Demonstrates the required syntax for deprecating APIs in Dart within the Flutter framework. This includes a description of how to migrate, the motivation for breaking the API, and the beta version after which the feature was deprecated. This ensures that a script can detect all deprecated APIs and remove them.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@Deprecated(\n  'Call prepareFrame followed by owner.requestVisualUpdate() instead. '\n  'This will enable an improvement to performance in a future version of Flutter. '\n  'This feature was deprecated after v2.9.0-0.1.pre.'\n)\n```\n\n----------------------------------------\n\nTITLE: Unicode Properties Mapping\nDESCRIPTION: Defines bidirectional category codes and Unicode properties for character ranges in various scripts including Arabic, Syriac, Devanagari, Bengali, and Gurmukhi. Each line maps a code point or range to properties like script type, character category, and count.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n0600..0605;AL     # Cf     [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n0606..0608;AL     # Sm     [3] ARABIC-INDIC CUBE ROOT..ARABIC RAY\n0609..060A;PO     # Po     [2] ARABIC-INDIC PER MILLE SIGN..ARABIC-INDIC PER TEN THOUSAND SIGN\n0610..061A;CM     # Mn    [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: Configures installation rules for the binary, ICU data file, Flutter library, bundled libraries, and asset files required by the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Using Asserts for Contract Validation in Dart\nDESCRIPTION: Demonstrates proper usage of assert statements to verify contracts and invariants in debug mode. Shows both simple and complex assertions within a RenderBox class method.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nabstract class RenderBox extends RenderObject {\n  // ...\n\n  double getDistanceToBaseline(TextBaseline baseline, {bool onlyReal: false}) {\n    // simple asserts:\n    assert(!needsLayout);\n    assert(!_debugDoingBaseline);\n    // more complicated asserts:\n    assert(() {\n      final RenderObject parent = this.parent;\n      if (owner.debugDoingLayout) {\n        return (RenderObject.debugActiveLayout == parent) && parent.debugDoingThisLayout;\n      }\n      if (owner.debugDoingPaint) {\n        return ((RenderObject.debugActivePaint == parent) && parent.debugDoingThisPaint)\n            || ((RenderObject.debugActivePaint == this)   && debugDoingThisPaint);\n      }\n      assert(parent == this.parent);\n      return false;\n    });\n    // ...\n    return 0.0;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Flutter Views with _flutter.listViews Protocol\nDESCRIPTION: Retrieves a list of Flutter views including their associated isolates. This extension is typically requested early in the application lifecycle to get details of the root isolate. It takes no arguments and returns view information with isolate details.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"FlutterViewList\",\n  \"views\": [\n    {\n      \"type\": \"FlutterView\",\n      \"id\": \"_flutterView/0x1066096d8\",\n      \"isolate\": {\n        \"type\": \"@Isolate\",\n        \"fixedId\": true,\n        \"id\": \"isolates/453229818\",\n        \"name\": \"main.dart$main-453229818\",\n        \"number\": 453229818\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Property Mapping\nDESCRIPTION: Defines character ranges and their corresponding Unicode properties using a format of codepoint;property # type [count] description. Includes properties like CM (Combining Mark), AL (Alphabetic), NS (Non-spacing), and others for various scripts including Miao, Tangut, Katakana, and mathematical symbols.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n16F8F..16F92;CM   # Mn     [4] MIAO TONE RIGHT..MIAO TONE BELOW\n16F93..16F9F;AL   # Lm    [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8\n16FE0..16FE1;NS   # Lm     [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaGoldClient in Dart\nDESCRIPTION: This code snippet demonstrates how to import the skia_gold_client package, create a temporary directory, instantiate the SkiaGoldClient, authenticate it, and finally clean up the temporary directory. It highlights the basic setup for interacting with Skia Gold for screenshot testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io' as io;\n\nimport 'package:skia_gold_client/skia_gold_client.dart';\n\nvoid main() async {\n  // Create a temporary working directory.\n  final io.Directory tmpDirectory = io.Directory.systemTemp.createTempSync('skia_gold_wd');\n  try {\n    final SkiaGoldClient client = SkiaGoldClient(tmpDirectory);\n    await client.auth();\n    // ...\n  } finally {\n    tmpDirectory.deleteSync(recursive: true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Archive Configuration in JSON\nDESCRIPTION: This JSON snippet provides an archive configuration example for uploading generated artifacts. It specifies the source path relative to the checkout repository, the destination path within the storage bucket, and the realm (production or experimental) to determine the final destination. This defines how the artifacts are archived after global generator execution.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"archives\": [\n    {\n        \"source\": \"out/debug/artifacts.zip\",\n        \"destination\": \"ios/artifacts.zip\",\n        \"realm\": \"production\"\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Task Configuration in JSON\nDESCRIPTION: This JSON snippet represents a task configuration used within an engine test. It includes the task's name, parameters passed to the script execution, maximum attempts in case of failure, and the script path relative to the checkout directory. The configuration also specifies a timeout for the step running the test.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"test: clang_tidy android_debug_arm64\",\n    \"parameters\": [\n       \"--variant\",\n       \"android_debug_arm64\",\n       \"--lint-all\",\n       \"--shard-id=0\",\n       \"--shard-variants=host_debug\"\n    ],\n    \"max_attempts\": 1,\n    \"script\": \"flutter/ci/clang_tidy.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Hook\nDESCRIPTION: This section explains the steps required to create a new Git hook by copying an existing example and setting it up with the appropriate command implementation in the Dart codebase. Users must ensure the script is executable and that the new command is registered within the `CommandRunner`.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/githooks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Check the `git` documentation, and copy `pre-push` into a script with the right name.\n1. Make sure the script has the executable bit set\n   (`chmod +x <script>`).\n1. Add a new `Command` implementation under `lib/src`. Give the new `Command` the same name as the new hook.\n1. Add the new `Command` to the `CommandRunner` in `lib/githooks.dart`.\n1. Make sure the script from step (1) is passing the new command to the Dart program.\n\n```\n\n----------------------------------------\n\nTITLE: Listing Key Functionality in iOS Add2App Demo\nDESCRIPTION: This markdown snippet outlines the main components and functionalities implemented in the iOS Add2App demo project. It includes native iOS views, Flutter views in different configurations, and hybrid views demonstrating interaction between native and Flutter components.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. A regular iOS view controller (UIViewController), similar to the default\n   `flutter create` template (NativeViewController.m).\n1. A FlutterViewController subclass that takes over the full screen. Demos showing\n   this both from a cold/fresh engine state and a warm engine state\n   (FullScreenViewController.m).\n1. A demo of pushing a FlutterViewController on as a child view.\n1. A demo of showing both the native and the Flutter views using a platform\n   channel to interact with each other (HybridViewController.m).\n1. A demo of showing two FlutterViewControllers simultaneously\n   (DualViewController.m).\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: This snippet sets up the Flutter wrapper libraries for plugins and the main app. It defines source files, creates static libraries, and sets their properties and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Sample Flutter CI Log Output for Golden File Mismatch\nDESCRIPTION: Displays an example of the log output that the scraper tool looks for to identify golden file changes. It includes the file paths and base64 encoded image data.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nGolden file mismatch. Please check the difference between /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps.png and /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps_new.png, and  replace the former with the latter if the difference looks good.\nS\nSee also the base64 encoded /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps_new.png:\niVBORw0KGgoAAAANSUhEUgAAA+gAAAPoCAYAAABNo9TkAAAABHNCSVQICAgIfAhkiAAAIABJREFUeJzs3elzFWeeJ/rnHB3tSEILktgEBrPvYBbbUF4K24X3t (...omitted)\n```\n\n----------------------------------------\n\nTITLE: MidNum Unicode Properties Definition\nDESCRIPTION: Defines Unicode code points for punctuation marks that can appear between numbers, including commas and semicolons\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_13\n\nLANGUAGE: unicode-data\nCODE:\n```\n002C          ; MidNum # Po       COMMA\n003B          ; MidNum # Po       SEMICOLON\n037E          ; MidNum # Po       GREEK QUESTION MARK\n0589          ; MidNum # Po       ARMENIAN FULL STOP\n060C..060D    ; MidNum # Po   [2] ARABIC COMMA..ARABIC DATE SEPARATOR\n066C          ; MidNum # Po       ARABIC THOUSANDS SEPARATOR\n07F8          ; MidNum # Po       NKO COMMA\n2044          ; MidNum # Sm       FRACTION SLASH\nFE10          ; MidNum # Po       PRESENTATION FORM FOR VERTICAL COMMA\nFE14          ; MidNum # Po       PRESENTATION FORM FOR VERTICAL SEMICOLON\nFE50          ; MidNum # Po       SMALL COMMA\nFE54          ; MidNum # Po       SMALL SEMICOLON\nFF0C          ; MidNum # Po       FULLWIDTH COMMA\nFF1B          ; MidNum # Po       FULLWIDTH SEMICOLON\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Tool Backend Integration\nDESCRIPTION: Sets up the custom build command to generate Flutter libraries and headers using the Flutter tool backend. Creates a phony target to ensure proper rebuilding.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Translation Example\nDESCRIPTION: Example of a translation string containing a variable parameter that gets replaced at runtime.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"aboutListTileTitle\": \"About $applicationName\"\n```\n\n----------------------------------------\n\nTITLE: Flushing UI Thread Tasks with _flutter.flushUIThreadTasks Protocol\nDESCRIPTION: Waits for all pending tasks on the UI thread to complete before returning success. This extension takes no arguments and simply ensures all UI thread tasks are processed.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"Success\"}\n```\n\n----------------------------------------\n\nTITLE: Starting DDS with VM Service URI in Flutter\nDESCRIPTION: This snippet demonstrates how to start a Dart Development Service instance using the 'dart development-service' command with a specific VM service URI. It shows the command execution and the resulting JSON-encoded connection information output.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart development-service --vm-service-uri=http://127.0.0.1:59113/BBPoXnZUWFU=/ --serve-devtools\n{\"state\":\"started\",\"ddsUri\":\"http://127.0.0.1:59123/tbrR0DzW2j8=/\",\"devToolsUri\":\"http://127.0.0.1:59123/tbrR0DzW2j8=/devtools?uri=ws://127.0.0.1:59123/tbrR0DzW2j8=/ws\",\"dtd\":{\"uri\":\"ws://127.0.0.1:59122/R1LbdlhtkUygRWNA\"}}\n```\n\n----------------------------------------\n\nTITLE: Running Android DisplayList Benchmarks with ADB\nDESCRIPTION: These commands push the compiled display_list_benchmarks binary to the /data/local/tmp directory on an Android device using adb. Then, it executes the binary via adb shell, specifying the JSON benchmark format, and pipes the output to a file named android-results.json. This file contains the benchmark results that can be processed later.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/benchmark/README_displaylist.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ adb push out/android_profile_arm64/display_list_benchmarks /data/local/tmp/display_list_benchmarks\n$ adb shell /data/local/tmp/display_list_benchmarks --benchmark_format=json | tee android-results.json\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Linux Library Dependencies\nDESCRIPTION: Configures system-level dependencies for Flutter Linux using PkgConfig to find GTK, GLIB, and GIO packages. Sets the Flutter library path and publishes essential paths to parent scope for installation steps.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build Command in CMake\nDESCRIPTION: Sets up a custom command to call the Flutter tool backend for generating necessary files. Uses a _phony_ output to ensure the command runs on every build, as there's no reliable way to track all inputs and outputs from the Flutter tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Devicelab Task - Dart\nDESCRIPTION: This Dart code defines the main function for a devicelab task. It sets the device operating system and then executes the performance test defined by `createSuperImportantCasePerfTest`. This script resides within the devicelab tasks directory and is executed as part of the automated testing process.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n```Dart\nimport 'dart:async';\n\nimport 'package:flutter_devicelab/tasks/perf_tests.dart';\nimport 'package:flutter_devicelab/framework/adb.dart';\nimport 'package:flutter_devicelab/framework/framework.dart';\n\nFuture<void> main() async {\n  deviceOperatingSystem = DeviceOperatingSystem.android;  // or ios\n  await task(createSuperImportantCasePerfTest());\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_LIBRARY_PATH for Testing\nDESCRIPTION: This shell command sets the `DYLD_LIBRARY_PATH` environment variable, which is necessary for the `path_ops` library to find its dynamic library during testing.  The `BUILD_DIR` variable should be replaced with the actual path to the directory containing the compiled dynamic library. This is especially important when running tests directly from the command line or an IDE.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/path_ops/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport DYLD_LIBRARY_PATH=BUILD_DIR\n```\n\n----------------------------------------\n\nTITLE: Defining Line Breaking Properties for Unicode Character Ranges\nDESCRIPTION: This code snippet defines line breaking properties for various Unicode character ranges using a compact notation. Each line specifies a character or range, followed by a semicolon and the corresponding line breaking property code.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\n11235;CM          # Mc         KHOJKI SIGN VIRAMA\n11236..11237;CM   # Mn     [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA\n11238..11239;BA   # Po     [2] KHOJKI DANDA..KHOJKI DOUBLE DANDA\n1123A;AL          # Po         KHOJKI WORD SEPARATOR\n1123B..1123C;BA   # Po     [2] KHOJKI SECTION MARK..KHOJKI DOUBLE SECTION MARK\n1123D;AL          # Po         KHOJKI ABBREVIATION SIGN\n1123E;CM          # Mn         KHOJKI SIGN SUKUN\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter Linux header files and configures them with the interface library target including dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Setting compileSdk in Android Gradle\nDESCRIPTION: This snippet demonstrates the correct way to set the `compileSdk` in the `android` block of a Gradle build file. It uses the `flutter.compileSdkVersion` variable, or a specific API level if the variable is not available.  Using a numeric literal directly is allowed when `flutter.compileSdkVersion` is not available, for example in 'add to app' scenarios.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK\nandroid {\n  compileSdk = flutter.compileSdkVersion\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Skia SkSL Shader Artifacts with _flutter.getSkSLs Protocol\nDESCRIPTION: Retrieves Skia SkSL shader artifacts for warming up shader compilations to avoid jank. Requires prior preparation using 'flutter run --cache-sksl' or 'flutter drive --cache-sksl' and triggering animations. The response contains Base32 encoded keys and Base64 encoded shader content.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"GetSkSLs\",\n  \"SkSLs\": {\n    \"CAZAAAACAAAAAAAAAAABGAABAAOAAFAADQAAGAAQABSQAAAAAAAAAAAAAABAAAAAEAAGGAA\": \"eQ==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating a Buffer Size with Checked Arithmetic in C++\nDESCRIPTION: The `CheckedNumeric` template detects overflows and boundary conditions during arithmetic operations. The `AssignIfValid` method will cause a compile error if the result is ignored. This code demonstrates using `CheckAdd` and `CheckMul` with `CheckedNumeric` to calculate a buffer size and handle potential overflow errors.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Calculate the buffer size and detect if an overflow occurs.\nsize_t size;\nif (!CheckAdd(kHeaderSize, CheckMul(count, kItemSize)).AssignIfValid(&size)) {\n  // Handle an overflow error...\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Deprecation Syntax Template\nDESCRIPTION: Provides a template for the required syntax for deprecating APIs in Dart within the Flutter framework. This template includes placeholders for the description of how to migrate, the brief motivation for breaking the API, and the beta version at the time of deprecation. This standardized format allows for automated detection and removal of deprecated APIs.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@Deprecated(\n  '[description of how to migrate] '\n  '[brief motivation for why we are breaking the API] '\n  'This feature was deprecated after [beta version at time of deprecation].'\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Files to Package Manager\nDESCRIPTION: These commands publish the generated package files to the Fuchsia package manager (PM), making them accessible for integration testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/dart-jit-runner-integration-test-0.far\n\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/oot_dart_jit_runner-0.far\n\n$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_echo_server/dart_jit_echo_server/dart_jit_echo_server.far\n```\n\n----------------------------------------\n\nTITLE: Optimizing Flutter Test for Comprehension - Initial Version\nDESCRIPTION: This is the initial optimized test factored to remove unrelated details. It prepares for further refactoring to optimize for improved comprehension.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {\n  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);\n  await _launchDialog(\n    dialog: CupertinoAlertDialog(\n      actions: const <Widget>[\n        const CupertinoDialogAction(\n          child: const Text('One'),\n        ),\n        const CupertinoDialogAction(\n          child: const Text('Two'),\n        ),\n      ],\n      actionScrollController: scrollController,\n    ),\n  );\n\n  // Check that the title/message section is not displayed\n  expect(scrollController.offset, 0.0);\n  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));\n\n  // Check that the button's vertical size is the same.\n  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,\n    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));\n});\n```\n\n----------------------------------------\n\nTITLE: Running iOS Unit Tests with run_tests Script\nDESCRIPTION: Run iOS unit tests using the `run_tests` script located in the Flutter testing directory. It requires Python and can be executed with specific arguments to target different iOS architectures, especially important for Apple Silicon users. This script handles cleaning up the `.xcresult` files, but an environment variable can redirect outputs to a specified directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios/IosUnitTests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter/testing/run_tests.py --type=objc\n```\n\nLANGUAGE: Shell\nCODE:\n```\n./flutter/testing/run_tests.py \\\n  --type=objc \\\n  --ios-variant ios_debug_sim_unopt_arm64\n```\n\nLANGUAGE: Shell\nCODE:\n```\nexport FLUTTER_TEST_OUTPUTS_DIR=~/Desktop\n```\n\nLANGUAGE: Shell\nCODE:\n```\nflutter/testing/run_tests.py --help\n```\n\n----------------------------------------\n\nTITLE: Add devicelab task for super_important_case (Dart)\nDESCRIPTION: This code snippet creates a devicelab task for the 'super_important_case' performance test using the createSuperImportantCasePerfE2ETest function. It sets the device operating system and then runs the task. This ensures automated performance testing for every Flutter commit.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n   import 'dart:async';\n\n   import 'package:flutter_devicelab/tasks/perf_tests.dart';\n   import 'package:flutter_devicelab/framework/adb.dart';\n   import 'package:flutter_devicelab/framework/framework.dart';\n\n   Future<void> main() async {\n     deviceOperatingSystem = DeviceOperatingSystem.android;  // or ios\n     await task(createSuperImportantCasePerfE2ETest());\n   }\n```\n\n----------------------------------------\n\nTITLE: Correct compileOptions and kotlinOptions Configuration\nDESCRIPTION: This snippet demonstrates the correct way to configure `compileOptions` and `kotlinOptions` in an Android Gradle build file.  It sets the `sourceCompatibility`, `targetCompatibility`, and `jvmTarget` to the same Java version using `JavaVersion.*` constants. The `jvmTarget` should be the same version as the compile SDK to avoid potential issues.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_10\n\nLANGUAGE: Groovy\nCODE:\n```\n// Ok\ncompileOptions {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n}\n\nkotlinOptions {\n    jvmTarget = JavaVersion.VERSION_11.toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering All Backend Playground Tests in Flutter\nDESCRIPTION: GTest filter to run playground tests across all backends with a specific name pattern in Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n--gtest_filter=\"Play/*Foo*/*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake and Project\nDESCRIPTION: This snippet initializes CMake with a minimum required version and defines the project named 'runner' using CXX languages.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Verifying MacOS SDK Path with find_sdk.py\nDESCRIPTION: This command checks if the MacOS SDK path is correctly detected for building Flutter engine. It uses the find_sdk.py script to validate that version 10.13 will be used instead of the default Xcode 10 SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Supporting-legacy-platforms.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython your-flutter-engine-path/engine/src/build/mac/find_sdk.py 10.12\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend build process, setting up custom commands and targets for assembling Flutter components. Creates a phony target to ensure proper rebuilding of Flutter assets.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Bootstrap gclient for Flutter Engine\nDESCRIPTION: This snippet describes how to bootstrap the gclient dependency management tool for the Flutter engine. It includes steps for copying gclient configuration files based on user type (Googlers or others) and executing the sync command to set up dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Copy one of the `engine/scripts/*.gclient` to the [root](../) folder as `.gclient`:\n    1. Googlers: copy `rbe.gclient` to enable faster builds with [RBE](https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md)\n    2. Everyone else: copy `standard.gclient`\n2. run `gclient sync` from the [root](../) folder\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter library and its headers for Windows builds. It defines the library path, includes necessary headers, and creates an interface library target.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Global Generator with Python and Bash\nDESCRIPTION: This bash script demonstrates how to execute a global generator locally using Python. It runs the `create_ios_framework.py` script with specific arguments to create iOS artifacts. This command replicates the global generator execution in the CI environment for local debugging and validation.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython3 flutter/sky/tools/create_ios_framework.py   \\\n  --dst out/release                                 \\\n  --arm64-out-dir out/ios_release                   \\\n  --simulator-x64-out-dir out/ios_debug_sim         \\\n  --simulator-arm64-out-dir out/ios_debug_sim_arm64 \\\n  --dsym                                            \\\n  --strip\n```\n\n----------------------------------------\n\nTITLE: Starting DevTools with VM Service URI in Flutter\nDESCRIPTION: This snippet shows how to use the 'dart devtools' command to start DevTools and automatically connect it to a provided VM service URI. It demonstrates how the command checks for an existing DDS instance and starts one if necessary.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart devtools http://127.0.0.1:59251/2LS6f3Kb2JI=/\nStarted the Dart Development Service (DDS) at http://127.0.0.1:59260/38XeuQpIHRE=/\nServing DevTools at http://127.0.0.1:9101.\n\n          Hit ctrl-c to terminate the server.\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Linking Dependencies for Flutter Linux Application\nDESCRIPTION: Creates the executable target with source files and links required libraries. This section defines the main application target and links it with Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Generating AOT Snapshot with Size Information in Flutter\nDESCRIPTION: This bash command demonstrates how to use gen_snapshot to generate an AOT snapshot with additional size information output to a JSON file. It includes various flags for configuration and specifies input and output paths.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$FLUTTER_ENGINE/out/host_debug_unopt/gen_snapshot                    \\\n  --print-instructions-sizes-to=$SUMMARY_LOCATION                    \\\n  --causal_async_stacks                                              \\\n  --packages=.packages                                               \\\n  --deterministic                                                    \\\n  --snapshot_kind=app-aot-blobs                                      \\\n  --vm_snapshot_data=build/aot/vm_snapshot_data                      \\\n  --isolate_snapshot_data=build/aot/isolate_snapshot_data            \\\n  --vm_snapshot_instructions=build/aot/vm_snapshot_instr             \\\n  --isolate_snapshot_instructions=build/aot/isolate_snapshot_instr   \\\n  build/aot/app.dill\n```\n\n----------------------------------------\n\nTITLE: Defining Native Activity APK Configuration in GNI\nDESCRIPTION: This snippet sets up a native activity APK configuration in GNI. It specifies the name of the APK, marks it as test-only, lists the source files, and includes dependencies necessary for building the APK. This is a crucial step for integrating unit tests into the native activity framework.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/android/native_activity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: gni\nCODE:\n```\nnative_activity_apk(\"apk_unittests\") {\n  apk_name = \"toolkit_unittests\"\n\n  testonly = true\n\n  sources = [ \"toolkit_android_unittests.cc\" ]\n\n  deps = [\n    \":unittests_lib\",\n    \"//flutter/testing/android/native_activity:gtest_activity\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Bundle Path with _flutter.setAssetBundlePath Protocol\nDESCRIPTION: Updates the asset bundle path during hot-reload to ensure the engine uses updated assets. This extension requires viewId and assetDirectory arguments, and returns information about the updated view and its isolate.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Success\",\n  \"view\": {\n    \"type\": \"FlutterView\",\n    \"id\": \"_flutterView/0x104e0ab58\",\n    \"isolate\": {\n      \"type\": \"@Isolate\",\n      \"fixedId\": true,\n      \"id\": \"isolates/1056589762\",\n      \"name\": \"main.dart$main-1056589762\",\n      \"number\": 1056589762\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Entitlements File in Zip Artifact in GN\nDESCRIPTION: This snippet shows how to embed the file with collected data keys for code signing into a zip artifact in GN. It adds the entitlements.txt file as a dependency and specifies its destination in the zip file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: gn\nCODE:\n```\nif (host_os == \"mac\") {\n    deps += [ \":artifacts_entitlement_config\" ]\n    files += [\n        {\n        source = \"$target_gen_dir/entitlements.txt\"\n        destination = \"entitlements.txt\"\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the features and commands used in the CMakeLists.txt file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine for M1 Mac\nDESCRIPTION: Command to build the Flutter engine for M1 Mac (ARM64) in host debug unoptimized mode using the engine tool (et).\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# M1 Mac (host_debug_unopt_arm64)\net build -c host_debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Retrieving Display Refresh Rate with _flutter.getDisplayRefreshRate Protocol\nDESCRIPTION: Gets the display refresh rate (in fps) of the device running the Flutter view. This extension requires the viewId argument and returns the refresh rate as a floating-point value, which varies between different devices (e.g., 60fps for most devices, 120fps for iPad Pro).\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"DisplayRefreshRate\",\n  \"fps\": 60.0\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Template Xcode Project for Flutter iOS Debugging\nDESCRIPTION: This markdown snippet explains the purpose and usage of a template Xcode project. It's designed for debugging Flutter apps on iOS 17+ devices using Xcode 15+ with a custom application bundle path in the xcscheme, specifically when the '--use-application-binary' flag is used.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/xcode/ios/custom_application_bundle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Template Xcode project with a custom application bundle\n\nThis template is an empty Xcode project with a settable application bundle path\nwithin the `xcscheme`. It is used when debugging a project on a physical iOS 17+\ndevice via Xcode 15+ when `--use-application-binary` is used.\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Property Definitions\nDESCRIPTION: Defines the properties of Unicode characters including their categories (Lo, Po, Ps, Pe, etc.), scripts (Arabic, Linear B, Gothic, etc.), and display characteristics. Each line maps a code point or range to its properties and includes a descriptive comment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\nFE51;ID           # Po         SMALL IDEOGRAPHIC COMMA\nFE52;CL           # Po         SMALL FULL STOP\nFE54..FE55;NS     # Po     [2] SMALL SEMICOLON..SMALL COLON\nFE56..FE57;EX     # Po     [2] SMALL QUESTION MARK..SMALL EXCLAMATION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target in CMake\nDESCRIPTION: This snippet defines the executable target for the Flutter runner application. It specifies the binary name and lists all source files that will be compiled into the application. Changes to BINARY_NAME should be made in the top-level CMakeLists.txt to avoid issues with running the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ShaderStructMemberMetadata in C++ for Impeller Uniform Handling\nDESCRIPTION: This struct defines metadata for shader uniform members, used by Impeller to infer the correct glUniform* calls in OpenGL ES 2.0. It includes information about the data type, name, offset, size, and array elements of each uniform.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ubo_gles2.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct ShaderStructMemberMetadata {\n  ShaderType type; // the data type (bool, int, float, etc.)\n  std::string name; // the uniform member name \"frame_info.mvp\"\n  size_t offset;\n  size_t size;\n  size_t array_elements;\n};\n```\n\n----------------------------------------\n\nTITLE: Estimating Raster Cache Memory Usage with _flutter.estimateRasterCacheMemory Protocol\nDESCRIPTION: Estimates memory usage of both picture and layer raster cache. The estimation counts the memory used by rasterized SkImage objects that speed up future draws. This extension requires the viewId argument and returns the estimated memory usage in bytes for both layer and picture caches.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"EstimateRasterCacheMemory\",\n    \"layerBytes\": 40000,\n    \"pictureBytes\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Unbranching Complex Paths in GLSL for Parallelism\nDESCRIPTION: This GLSL shader snippet illustrates an unbranched approach to achieve maximum parallelism across architectures. The code performs expensive operations regardless of conditions, trading off execution efficiency on architectures like SIMT when the condition is false for all threads.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nin vec4 color;\nout vec4 frag_color;\n\nvoid main() {\n  frag_color = DoExtremelyExpensiveThing(color);\n\n  if (color.a == 0) {\n    frag_color = vec4(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setters with Dirty Checks in Dart\nDESCRIPTION: Pattern for defining mutable properties that mark a class as dirty when set. This implementation includes null checking, value comparison to prevent unnecessary updates, and calling a method to mark the object as dirty when the value changes.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n/// Documentation here (don't wait for a later commit).\nTheType get theProperty => _theProperty;\nTheType _theProperty;\nvoid set theProperty(TheType value) {\n  assert(value != null);\n  if (_theProperty == value) {\n    return;\n  }\n  _theProperty = value;\n  markNeedsWhatever(); // the method to mark the object dirty\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Build Commands for Flutter\nDESCRIPTION: Sets up a custom build command that executes every time, regardless of file changes, leveraging the custom target 'flutter_assemble'. This ensures the Flutter tool is invoked correctly, crucial for reliable custom build steps.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compiler Settings Function for Flutter Windows Targets\nDESCRIPTION: Creates a reusable function to apply consistent compiler settings to build targets. Configures C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Calculating Clamped Coordinates with Non-Sticky Arithmetic in C++\nDESCRIPTION: The `ClampedNumeric` template provides performant, non-sticky saturating arithmetic operations useful for calculations like coordinate insetting. The example shows using `ClampSub` and `ClampAdd` with `ClampedNumeric` to calculate rectangle dimensions while preventing overflows.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Use clamped arithmetic since inset calculations might overflow.\nvoid Rect::Inset(int left, int top, int right, int bottom) {\n  origin_ += Vector2d(left, top);\n  set_width(ClampSub(width(), ClampAdd(left, right)));\n  set_height(ClampSub(height(), ClampAdd(top, bottom)));\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Key Test Cases for iOS Add2App Integration\nDESCRIPTION: This markdown snippet outlines the main test cases implemented in the integration tests (IntegrationTests.m) for the iOS Add2App demo. It covers engine pre-warming, platform channel communication, multiple engine instances, and memory management for Flutter components.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n1. The ability to pre-warm the engine and attach/detach a ViewController from\n   it.\n1. The ability to use platform channels to communicate between views.\n1. The ability to simultaneously run two instances of the engine.\n1. That a FlutterViewController can be freed when no longer in use (also tested\n   from FlutterViewControllerTests.m).\n1. That a FlutterEngine can be freed when no longer in use.\n```\n\n----------------------------------------\n\nTITLE: Comparing Values Between Arbitrary Arithmetic Types in C++\nDESCRIPTION: `StrictNumeric` and `ClampedNumeric` types provide well-defined comparisons between arbitrary arithmetic types. This snippet shows how to use `MakeStrictNum` to allow a correct comparison between an unsigned value and a signed upper bound, which might otherwise trigger compiler warnings or errors.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nbool foo(unsigned value, int upper_bound) {\n  // Converting to StrictNumeric allows this comparison to work correctly.\n  if (MakeStrictNum(value) >= upper_bound)\n    return false;\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Definition in CMake\nDESCRIPTION: Creates a list of Flutter Linux library headers and prepends the ephemeral directory path to each header file. These headers define the API for Flutter Linux integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rename Resilience with Git Blob Hashes\nDESCRIPTION: Shows how Git blob hashes remain unchanged when files are renamed, illustrating how content-based hashing could be made resilient to file renames.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n#\n# Not using --object-only for demonstration. We would use --blob-only to get just the hash\n#\n$ git ls-tree -r HEAD README.md\n100644 blob 38daa079e3693e4940f0e9bc0201b7f5fda627e2\tREADME.md\n\n$ git mv README.md DONTREADME.md\n$ git commit -a -m \"test\"\n\n$ git ls-tree -r HEAD README.md\n#nothing to see here, its not in the tree\n\n$ git ls-tree -r HEAD DONTREADME.md\n100644 blob 38daa079e3693e4940f0e9bc0201b7f5fda627e2\tDONTREADME.md\n```\n\n----------------------------------------\n\nTITLE: AGP Dependency Declaration with Comment\nDESCRIPTION: This snippet shows a declaration of the Android Gradle Plugin (AGP) dependency. This includes a comment explaining why a specific, potentially older, version is being used (e.g., testing backwards compatibility).  Make sure this version is compatible with the target and compile SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_7\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK\ndependencies {\n    // Testing backwards compatability of feature XYZ\n    classpath \"com.android.tools.build:gradle:7.5.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preprocessor Definitions for Flutter Version\nDESCRIPTION: This snippet sets various preprocessor definitions for the Flutter version being built. These definitions include version number components such as major, minor, patch, and build, which can be used in the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Flutter Version - CMake\nDESCRIPTION: This code defines preprocessor definitions for the Flutter version used in the build. It incorporates version details like major, minor, patch, and build numbers which are crucial for version management.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths\nDESCRIPTION: Configures CMake variables that define the paths for the Flutter library, ICU data file, build directory, and AOT library for use throughout the build process. These paths are provided to the parent scope for wider accessibility.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories for Flutter Windows Application\nDESCRIPTION: Sets up installation directories for the application, placing files next to the executable to support in-place execution, which is important for Visual Studio integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Append Flutter library headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the path to the directory containing these headers using the previously defined `list_prepend` function.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Set Flutter library path\nDESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`) and other related files (ICU data file, AOT library, project build directory) and publishes them to the parent scope for use in install steps.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Incorrect compileOptions and kotlinOptions Configuration (String Literal)\nDESCRIPTION: This snippet illustrates an incorrect configuration where `compileOptions` use `JavaVersion` constants, but `kotlinOptions` uses a string literal for `jvmTarget`.  It is recommended that the `jvmTarget` use the `JavaVersion.VERSION_XX.toString()` format to avoid potential errors.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_11\n\nLANGUAGE: Groovy\nCODE:\n```\n// Not ok\ncompileOptions {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\nkotlinOptions {\n    jvmTarget = \"17\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Flutter Version\nDESCRIPTION: Adds preprocessor definitions for the Flutter version to the Windows runner target. This includes major, minor, patch, and build version numbers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Uniform Branches in GLSL Shaders\nDESCRIPTION: Demonstrates the use of uniform branches in a vertex shader. This example shows how to conditionally invert the y-coordinate based on a uniform boolean value, which is efficient across different GPU architectures.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nuniform struct FrameInfo {\n  mat4 mvp;\n  bool invert_y;\n} frame_info;\n\nin vec2 position;\n\nvoid main() {\n  gl_Position = frame_info.mvp * vec4(position, 0, 1)\n\n  if (frame_info.invert_y) {\n    gl_Position *= vec4(1, -1, 1, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Custom Dart Analysis\nDESCRIPTION: This snippet demonstrates how to run custom Dart analysis using Flutter plugin tools to identify deprecations in the codebase. It requires Dart SDK and Flutter plugin tools as dependencies. No parameters are needed, and it outputs a report of analysis results. Ensure `deprecated_member_use: ignore` is commented out in `analysis_options.yaml` before running.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Packages-Gardener-Rotation.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart analyze --custom-analysis=script/configs/custom_analysis.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and RPATH Settings for Flutter Linux Build\nDESCRIPTION: Sets CMake policies and RPATH configuration for loading bundled libraries correctly. This ensures proper library resolution during runtime and handles cross-building scenarios.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Integration Tests for External Textures\nDESCRIPTION: This snippet provides the command to run Flutter integration tests that check how external textures render within a Flutter app. The command utilizes the `flutter drive` command, specifying the main app file and a test driver file. Ensure you have the Flutter SDK installed and properly configured to run this command.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/external_textures/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive lib/frame_rate_main.dart --driver test_driver/frame_rate_test.dart\n```\n\n----------------------------------------\n\nTITLE: Running prepare_package.dart locally in Dart\nDESCRIPTION: This snippet demonstrates how to run the `prepare_package.dart` script locally for packaging Flutter releases. It requires depot_tools in the PATH and authentication with Google Cloud Storage via gsutil. It also requires specifying the temp directory, revision, branch, and publish flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"dart [path to your normal Flutter repo]/dev/bots/prepare_package.dart\\n  --temp_dir=. --revision=[revision to package] --branch=[branch to deploy to]\\n  --publish\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin Version Declaration\nDESCRIPTION: This snippet shows how to declare a Kotlin version variable and use it to define the Kotlin Gradle plugin dependency. Using a variable makes it easier to update the Kotlin version throughout the project.  Make sure the Kotlin version is compatible with AGP, Gradle, compile SDK and target SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_9\n\nLANGUAGE: Groovy\nCODE:\n```\n// Ok\next.kotlin_version = \"1.7.10\"\n...\nclasspath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n```\n\n----------------------------------------\n\nTITLE: Setting targetSdk in Android Gradle\nDESCRIPTION: This snippet demonstrates the correct way to set the `targetSdk` in the `defaultConfig` block of a Gradle build file. It uses the `flutter.targetSdkVersion` variable, or an integer literal if the variable is not available.  It is important to make sure the target SDK is compatible with the compile SDK. \nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK\ndefaultConfig {\n  targetSdk = flutter.targetSdkVersion\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a generator task in JSON\nDESCRIPTION: This snippet shows an example of how to define a task within a generator configuration. The task includes properties such as name, parameters, script path, and language, defining the script to be executed and its settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Debug-FlutterMacOS.framework\",\n    \"parameters\": [\n        \"--dst\",\n        \"out/debug\",\n        \"--arm64-out-dir\",\n        \"out/ios_debug\",\n        \"--simulator-x64-out-dir\",\n        \"out/ios_debug_sim\",\n        \"--simulator-arm64-out-dir\",\n        \"out/ios_debug_sim_arm64\"\n    ],\n    \"script\": \"flutter/sky/tools/create_ios_framework.py\",\n    \"language\": \"python3\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Merging VSCode Workspace Configuration - Shell Script\nDESCRIPTION: This shell script (`merge.sh`) is executed to merge changes into the VSCode workspace when modifications are made without direct editing of the YAML configuration file. This script addresses potential conflicts arising from the absence of anchors in JSON. Like the previous script, it also requires certain tools to function properly.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/vscode_workspace/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./merge.sh\n```\n\n----------------------------------------\n\nTITLE: Comparing Git Blob Hashing Methods\nDESCRIPTION: Shows how to manually regenerate a Git blob hash and verify it matches the hash from git ls-tree, demonstrating the relationship between file content and Git's internal representation.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Regenerate a \"blob\" hash\nfile_name=\"engine/src/flutter/vulkan/vulkan_window.h\";  (printf \"blob $(wc -c < \"$file_name\" | awk '{print $1}')\\0\"; cat \"$file_name\") | sha1sum\n11a5a03d15ae21bde366e41291a7899eec44e5ae  -\n\ngit ls-tree -r HEAD  engine/src/flutter/vulkan/vulkan_window.h\n100644 blob 11a5a03d15ae21bde366e41291a7899eec44e5ae\tengine/src/flutter/vulkan/vulkan_window.h\n```\n\n----------------------------------------\n\nTITLE: Full Autosubmit Configuration Example - YAML\nDESCRIPTION: This snippet provides a complete configuration example for the Autosubmit bot, showcasing all available configuration keys and their default values. It helps users understand how to set up the bot for optimal operation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_branch: main\nallow_config_override: false\nauto_approval_accounts:\n  - skia-flutter-autoroll\n  - engine-flutter-autoroll\n  - dependabot[bot]\n  - dependabot\n  - DartDevtoolWorkflowBot\napproving_reviews: 2\napproval_group: flutter-hackers\nrun_ci: true\nsupport_no_review_revert: true\nrequired_checkruns_on_revert:\n  - ci.yaml validation\n```\n\n----------------------------------------\n\nTITLE: Creating Perf Test Function - Dart\nDESCRIPTION: This Dart code defines a function that creates and configures a performance test. It specifies the directory containing the benchmark, the script to run, the test name, and the test driver. This function returns a `TaskFunction` that can be executed by the devicelab.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n```Dart\nTaskFunction createSuperImportantCasePerfTest() {\n  return PerfTest(\n    '${flutterDirectory.path}/dev/benchmarks/macrobenchmarks',\n    'test_driver/run_app.dart',\n    'super_important_case_perf',\n    testDriver: 'test_driver/super_important_case_perf_test.dart',\n  ).run;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Dry Run Unpublish Package (Dart/Shell)\nDESCRIPTION: This snippet demonstrates the command to perform a dry run of the `unpublish_package.dart` script. It's used to preview the actions that will be taken when unpublishing a Flutter package before actually executing the changes. It requires specifying a temporary directory and the revision to unpublish.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"dart ./unpublish_package.dart --temp_dir=/tmp/foo --revision d444a455de87a2e40b7f576dc12ffd9ab82fd491\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths in CMake\nDESCRIPTION: Sets up installation directory paths for the application bundle, ensuring the executable can run in place which is required for Visual Studio integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Engine Build Script for Linux and Android\nDESCRIPTION: A shell script that updates all necessary Flutter engine builds for development on Linux while testing on Android. It fetches upstream changes, syncs dependencies, and builds all relevant configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset -ex\n\ncd ~/dev/flutter\ngit fetch upstream master\ngit rebase upstream/master\ncd engine\ngclient sync -D\ncd src\n\nflutter/tools/gn --unoptimized --runtime-mode=debug\nflutter/tools/gn --android --unoptimized --runtime-mode=debug\nflutter/tools/gn --android --runtime-mode=profile\nflutter/tools/gn --android --runtime-mode=release\n\ncd out\nfind . -mindepth 1 -maxdepth 1 -type d | xargs -n 1 sh -c 'ninja -C $0 || exit 255'\n```\n\n----------------------------------------\n\nTITLE: Flutter Row Overflow Error Pattern\nDESCRIPTION: Standard error message pattern shown when a Row widget overflows its container horizontally by a specific number of pixels. This includes the error header, assertion details, widget reference, and overflow axis information.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/print_correct_local_widget_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n══╡ EXCEPTION CAUGHT BY RENDERING LIBRARY ╞═════════════════════════════════════════════════════════\nThe following assertion was thrown during layout:\nA RenderFlex overflowed by 2858 pixels on the right.\n\nThe relevant error-causing widget was:\n  Row\n  Row:file:////.+print_correct_local_widget_test.dart:[0-9]+:[0-9]+\n\nThe overflowing RenderFlex has an orientation of Axis.horizontal.\n```\n\n----------------------------------------\n\nTITLE: Running Scrolling Performance Test in Flutter\nDESCRIPTION: This command executes a scrolling performance benchmark using `flutter drive`. The `--profile` flag enables profiling mode, and the test script is specified by `test_driver/scroll_perf.dart`. The output is a timeline summary and a more detailed timeline log, stored in the `build` directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout_hybrid_composition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive --profile test_driver/scroll_perf.dart\n```\n\n----------------------------------------\n\nTITLE: Building AOT Flutter Engine Bash Command\nDESCRIPTION: This Bash command is used to build a Flutter engine configured for AOT mode, targeting the specified architecture and configurations. It allows custom target, sysroot, and toolchain flags for customized builds. This process leverages Flutter's 'release' mode policy and can be adapted by third-party embedder authors.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flutter/tools/gn --runtime-mode release <custom target flags as necessary>\n```\n\n----------------------------------------\n\nTITLE: Starting a Flutter release process using Conductor\nDESCRIPTION: This command initializes the release process by specifying essential parameters such as candidate branch, release channel, GitHub username, and Dart revision. It helps in determining the proper version increment or allows overriding it if necessary.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconductor start \\\n  --candidate-branch=flutter-2.2-candidate.10 \\\n  --release-channel=beta \\\n  --github-username=kingOfDevelopers \\\n  --dart-revision=4511eb2a779a612d9d6b2012123575013e0aef12 \\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a test configuration in JSON\nDESCRIPTION: This snippet illustrates how to define a test configuration, including the language, script path, parameters, and contexts, within a JSON file. The configuration specifies the test script to execute and its associated settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"tests\": [\n   {\n       \"language\": \"python3\",\n       \"test_timeout_secs\": 600,\n       \"name\": \"Host Tests for host_debug_impeller_vulkan\",\n       \"parameters\": [\n           \"--variant\",\n           \"host_debug_impeller_vulkan\",\n           \"--type\",\n           \"impeller\",\n           \"--engine-capture-core-dump\"\n       ],\n       \"script\": \"flutter/testing/run_tests.py\",\n       \"contexts\": [\"android_virtual_device\"]\n   }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to CMake targets, enforcing C++17 standards, warnings, and exception handling. These settings are critical for consistency across multiple targets, especially beneficial for plugin development.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Extensions Test in YAML\nDESCRIPTION: This YAML configuration specifies the setup for an iOS extensions integration test. It defines the project name, target devices, and the required Xcode project and workspace files for building and testing the iOS app with a watchOS extension.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_app_with_extensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ios_extensions\n\nios:\n  # The device that the integration test runs on.\n  device:\n    # Don't use the simulator because building extensions is not supported.\n    file: ios/ios_extensions.devices\n\n  # The scheme to use.\n  scheme: ios_extensions\n\n  # The Xcode project to use.\n  project:\n    # Use ios/Runner.xcworkspace for watchOS.\n    path: ios/Runner.xcodeproj\n\n  # The Xcode workspace to use.\n  workspace:\n    path: ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: AGP Dependency Declaration\nDESCRIPTION: This snippet shows how to declare the Android Gradle Plugin (AGP) dependency in the `dependencies` block of the project-level `build.gradle` file. It uses the `com.android.tools.build:gradle` artifact with a specific version number.  Make sure this version is compatible with the target and compile SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK\ndependencies {\n    classpath \"com.android.tools.build:gradle:8.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Test Configuration in JSON\nDESCRIPTION: This JSON snippet defines a framework test configuration for Flutter's CI. It specifies the test name, shard, subshard, and test dependencies, including the chrome and driver version. This configuration is used to run flutter/flutter tests using engine artifacts.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"tests\": [\n      {\n        \"name\": \"web-tests-1\",\n        \"shard\": \"web_tests\",\n        \"subshard\": \"1\",\n        \"test_dependencies\": [\n          {\n            \"dependency\": \"chrome_and_driver\",\n            \"version\": \"version:111.0a\"\n          }\n        ]\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Minimum SDK Version\nDESCRIPTION: This Dart command updates the minimum Flutter SDK version for all packages in the repository. The command utilizes the `flutter_plugin_tools.dart` script to set a specified minimum version. Dependency: Make sure the repo tooling is available and the script path is correct. Input: Desired Flutter minimum version. Make sure to commit changes in a single PR to maintain CI consistency.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/release/Updating-Packages-repo-for-a-stable-release.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart update-min-sdk --flutter-min=3.7.0\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extend Property Ranges\nDESCRIPTION: Defines extensive ranges of Unicode code points that have the 'Extend' property. Includes combining marks, vowel signs, and other extending characters from various scripts.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n114B0..114B2  ; Extend # Mc   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II\n114B3..114B8  ; Extend # Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n[...additional ranges...]\nE0100..E01EF  ; Extend # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n```\n\n----------------------------------------\n\nTITLE: Flutter Sample Creation Command\nDESCRIPTION: Command-line instruction for creating a Flutter project from a sample using the flutter create command\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --sample=[directory.File.sampleNumber] [name_of_project_directory]\n```\n\n----------------------------------------\n\nTITLE: Find Package PkgConfig\nDESCRIPTION: Finds the PkgConfig package, which is used to locate system libraries. It is marked as `REQUIRED`, meaning the build will fail if PkgConfig is not found.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Managed Directory\nDESCRIPTION: Sets the variable `FLUTTER_MANAGED_DIR` to point to the `flutter` subdirectory within the current source directory. This directory likely contains Flutter-related build files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Running Impeller Unit Tests with Playgrounds - Command Line\nDESCRIPTION: This snippet describes how to run Impeller unit tests with playgrounds enabled, which are used for visual debugging. The `--enable_playground` flag activates the playgrounds.  The `--timeout=-1` flag disables the timeout, allowing tests to run indefinitely which prevents premature termination of potentially long running tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/faq.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nimpeller_unittests --enable_playground --timeout=-1\n```\n\n----------------------------------------\n\nTITLE: Building iOS DisplayList Benchmarks with Ninja\nDESCRIPTION: This command builds the iOS DisplayList benchmark dylib using Ninja. The dylib contains the benchmarking code that is later linked to a skeleton test app in Xcode for execution on iOS devices. The target name `ios_display_list_benchmarks` must be specified during the Ninja build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/benchmark/README_displaylist.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ninja -C out/ios_profile ios_display_list_benchmarks\n```\n\n----------------------------------------\n\nTITLE: Incorrect compileOptions and kotlinOptions Configuration (Mismatched Versions)\nDESCRIPTION: This snippet shows an incorrect configuration where `compileOptions` and `kotlinOptions` have mismatched Java versions.  The `kotlinOptions.jvmTarget` should match the `compileOptions` versions for `sourceCompatibility` and `targetCompatibility` to ensure proper compatibility during compilation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_12\n\nLANGUAGE: Groovy\nCODE:\n```\n// Not ok\ncompileOptions {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n}\n\nkotlinOptions {\n    jvmTarget = JavaVersion.VERSION_17.toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend, which generates necessary files for the build process. It also creates a custom target 'flutter_assemble' that depends on these generated files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Flutter Engine Build in YAML\nDESCRIPTION: This snippet shows a YAML configuration for a Flutter Engine build, specifying the environment and properties such as the recipe and the Flutter OS X SDK version. It's used to set up builds on a CI system and specifies details like config names and timeouts.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: Mac mac_android_aot_engine\n    recipe: engine_v2/engine_v2\n    timeout: 60\n    properties:\n      config_name: mac_android_aot_engine\n      $flutter/osx_sdk : >-\n        { \"sdk_version\": \"16c5032a\" }\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Extension Loading - Flutter WebAssembly Example\nDESCRIPTION: This example demonstrates dynamic extension loading in Flutter using the `rfw` package and WebAssembly. It involves a Flutter desktop application downloading an interface description and a Wasm program to perform calculations, showcasing a proof-of-concept for dynamically extending Flutter applications. This example highlights the potential of combining `rfw` with FFI or Wasm for dynamic functionality.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/issue_hygiene/Popular-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: Flutter\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding Goldctl Dependency in CI YAML (Diff)\nDESCRIPTION: This diff snippet demonstrates how to add a dependency on `goldctl` in the `.ci.yaml` file of a Flutter project. It ensures that the `goldctl` tool is available during the CI process for screenshot testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   # This is just an example.\n   targets:\n     - name: Linux linux_android_emulator_tests\n       properties:\n         config_name: linux_android_emulator\n   +       dependencies: >-\n   +         [\n   +           {\"dependency\": \"goldctl\", \"version\": \"git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd\"}\n   +         ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Circular Progress Indicator in Flutter\nDESCRIPTION: This class implements a Material Design circular progress indicator. It handles both determinate and indeterminate progress modes, and manages animations for the indicator's rotation and arc sweep.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/license_header.txt#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass _MaterialCircularProgressIndicator extends StatefulWidget {\n  const _MaterialCircularProgressIndicator({\n    super.key,\n    required this.backgroundColor,\n    required this.valueColor,\n    required this.value,\n    required this.animationDuration,\n    required this.strokeWidth,\n    this.semanticsLabel,\n    this.semanticsValue,\n  });\n\n  final Color backgroundColor;\n  final Animation<Color?> valueColor;\n  final double? value;\n  final Duration animationDuration;\n  final double strokeWidth;\n  final String? semanticsLabel;\n  final String? semanticsValue;\n\n  @override\n  State<_MaterialCircularProgressIndicator> createState() => _MaterialCircularProgressIndicatorState();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands\nDESCRIPTION: Configures custom build commands for the Flutter tool backend, ensuring proper generation of libraries and headers through the Flutter tools command line interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Behavior and Cross-Building Support\nDESCRIPTION: Sets up modern CMake behaviors, RPATH settings for loading bundled libraries, and cross-building configurations when targeting a different system root.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting compileSdk with specific API level\nDESCRIPTION: This snippet demonstrates setting the `compileSdk` to a specific API level (35) when `flutter.compileSdkVersion` is not available, such as in 'add to app' scenarios. This is an acceptable practice when the flutter SDK is not available. Always make sure this version is supported by Flutter. \nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK if flutter.compileSdkVersion is not available like in an add to app example.\nandroid {\n  compileSdk = 35\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Linear Progress Indicator in Flutter\nDESCRIPTION: This class implements a Material Design linear progress indicator. It handles both determinate and indeterminate progress modes, and manages animations for the indicator's appearance.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/license_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nclass _MaterialLinearProgressIndicator extends StatefulWidget {\n  const _MaterialLinearProgressIndicator({\n    super.key,\n    required this.backgroundColor,\n    required this.valueColor,\n    required this.value,\n    required this.animationDuration,\n    required this.textDirection,\n    this.minHeight,\n    this.clip = Clip.none,\n    this.roundedCorners = false,\n  });\n\n  final Color backgroundColor;\n  final Animation<Color?> valueColor;\n  final double? value;\n  final Duration animationDuration;\n  final TextDirection textDirection;\n  final double? minHeight;\n  final Clip clip;\n  final bool roundedCorners;\n\n  @override\n  State<_MaterialLinearProgressIndicator> createState() => _MaterialLinearProgressIndicatorState();\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing SurfaceTexture Usage for Testing\nDESCRIPTION: This diff shows how to force the engine to use `SurfaceTextures` for external texture rendering. This is useful for testing the OpenGLES branch on devices with higher API levels.  It involves modifying `FlutterRenderer.java` and rebuilding the engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// shell/platform/android/io/flutter/embedding/engine/renderer/FlutterRenderer.java\n-  @VisibleForTesting static boolean debugForceSurfaceProducerGlTextures = false;\n+  @VisibleForTesting static boolean debugForceSurfaceProducerGlTextures = true;\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are required for compiling against the Flutter library.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting targetSdk with specific API level\nDESCRIPTION: This snippet demonstrates setting the `targetSdk` to a specific API level (35) when `flutter.compileSdkVersion` is not available, such as in an 'add to app' scenario. This demonstrates an acceptable case.  Always make sure the target SDK is compatible with the compile SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\n// OK if flutter.compileSdkVersion is not available like in an add to app example.\ndefaultConfig {\n  targetSdk = 35\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library and headers. It uses the Flutter tool's backend script to generate these files. A phony file is used to force the command to run every time.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter Application Setup\nDESCRIPTION: This snippet configures CMake with a minimum required version and initializes a project for a Flutter-based application. It sets application target names and defines modern CMake policies to avoid warnings with newer versions. The project requires CMake version 3.14 or higher.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(complex_layout LANGUAGES CXX)\nset(BINARY_NAME \"complex_layout\")\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Target Settings\nDESCRIPTION: Defines a function to apply standard compiler features, options, and definitions to a target. This function sets the C++ standard, enables warnings, and adds optimization/debugging flags based on the configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Rolling Browser Versions for Flutter\nDESCRIPTION: Instructions for updating browser versions in the Flutter project, specifically for Chrome and Firefox. It involves editing configuration files and running the 'dart dev/package_roller.dart' script to upload the appropriate versions of browsers and drivers.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      dependencies: >-\n        [\n          {\"dependency\": \"chrome_and_driver\", \"version\": \"version:107.0\"},\n          {\"dependency\": \"firefox\", \"version\": \"version:83.0\"},\n          {\"dependency\": \"goldctl\", \"version\": \"git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd\"}\n        ]\n```\n\nLANGUAGE: bash\nCODE:\n```\ndart dev/package_roller.dart --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: Setting Sysroot for Cross-Compilation\nDESCRIPTION: Configures the sysroot for cross-compilation if `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined. This is essential for building applications that target a different platform than the host system by specifying the root directory for libraries and headers.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating OpenJDK CIPD Configuration - Shell\nDESCRIPTION: This snippet illustrates how to create a configuration file for a new OpenJDK package in CIPD. It includes placeholder fields for package specifics like architecture and Java version. The resulting YAML file is used to define the package for upload.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npackage: flutter/java/openjdk/<platform-architecture>\n    description: OpenJDK <java_version> for <platform>\n    install_mode: copy\n    data:\n    # This directory contains Java <platform-architecture> to be used in automated tests.\n    - dir: .\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Linux Application Bundle\nDESCRIPTION: Sets up installation directories and ensures clean installation. This section configures the bundle directory and sets the install prefix if not already defined.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Branching Logic in GLSL Function\nDESCRIPTION: This GLSL function snippet shows how return statements in branching logic affect shader performance. The function, which returns a computed color based on an alpha check, behaves similarly at the assembly level to a version using an intermediate result vari\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 FrobnicateColor(vec4 color) {\n  if (color.a == 0) {\n    return vec4(0);\n  }\n\n  return DoExtremelyExpensiveThing(color);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Command-Line Options\nDESCRIPTION: This section describes various command-line options that can be passed to the integration test script. It includes details on disabling optimizations, targeting specific architectures, and runtime modes.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n* Pass `--unoptimized` to disable C++ compiler optimizations.\n* Add `--fuchsia-cpu x64` or `--fuchsia-cpu arm64` to target a particular architecture.\n* Add `--runtime-mode debug` or `--runtime-mode profile` to switch between JIT and AOT builds.\n```\n\n----------------------------------------\n\nTITLE: Compiling Dart Tests with Ninja\nDESCRIPTION: This snippet illustrates how to compile a Dart test using Ninja in a specific output directory. The command is necessary for building tests instead of running them directly from the source. Ensure Ninja is installed and configured in the environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nninja -C ../out/host_debug_unopt_arm64 compile_image_filter_test.dart\n```\n\n----------------------------------------\n\nTITLE: Defining an Import Value in YAML for Flutter Code Migration\nDESCRIPTION: Demonstrates how to specify an import value in YAML to reference top-level declarations from external libraries. The configuration includes the library URIs and the imported name.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkind: import\nuris: [ 'package:flutter/material.dart' ]\nname: 'Widget'\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a reusable function to apply standard compilation settings to targets including C++17 support, warning levels, and exception handling configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Linux Headers List in CMake\nDESCRIPTION: Creates a list of Flutter Linux header files needed for the build process. These headers provide the interface for Flutter's integration with Linux platform functionality.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Web Engine Targets with felt Command\nDESCRIPTION: The 'felt build' command is utilized to build web engine GN/Ninja targets. It can build all targets or specific ones based on command line parameters, affecting how the Flutter app is run using the SDK. Common targets include 'sdk', 'canvaskit', and 'skwasm'.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfelt build\ncd path/to/some/app\nflutter --local-web-sdk=wasm_release run -d chrome\n```\n\nLANGUAGE: bash\nCODE:\n```\nfelt build sdk canvaskit\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library and Related Files in CMake\nDESCRIPTION: Sets up variables for the Flutter library, ICU data file, build directory, and AOT library. These are published to the parent scope for use in the install step.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Using Pigeon to Regenerate Interface Definitions\nDESCRIPTION: This snippet demonstrates how to regenerate Pigeon interface definitions in Flutter packages after making changes. Dependencies include the Pigeon package, and the command should be run from the terminal. Replace [changed file] with the specific Pigeon interface file that was modified.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ dart run pigeon --input pigeons/[changed file]\n```\n\n----------------------------------------\n\nTITLE: Generating AOT Snapshot\nDESCRIPTION: This command generates the final AOT snapshot blobs after obtaining the kernel snapshot file. It configures the 'gen_snapshot' with necessary flags specific to the target architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$FLUTTER_ENGINE_OUT_DIR/gen_snapshot \\\n    --causal_async_stacks \\\n    --packages=.packages \\\n    --deterministic \\\n    --snapshot_kind=app-aot-blobs \\\n    --vm_snapshot_data=build/vm_snapshot_data \\\n    --isolate_snapshot_data=build/isolate_snapshot_data \\\n    --vm_snapshot_instructions=build/vm_snapshot_instr \\\n    --isolate_snapshot_instructions=build/isolate_snapshot_instr \\\n    --no-sim-use-hardfp \\\n    --no-use-integer-division \\\n    build/kernel_snapshot.dill\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Types\nDESCRIPTION: Opts into modern CMake behaviors and defines build configurations (Debug, Profile, Release) based on generator type.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Configures the installation process, defining the build bundle directory and ensuring it's cleaned before each install. The CMAKE_INSTALL_PREFIX is also initialized if it has its default value.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Scrolling Benchmark using Flutter CLI\nDESCRIPTION: This shell command is used to run a scrolling benchmark on a device in profile mode using Flutter's drive command. The results will be saved in a timeline summary JSON file, while more detailed logs will be in another JSON file. Ensure Flutter is installed and the device is connected.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile test_driver/scroll_perf.dart\n```\n\n----------------------------------------\n\nTITLE: Defining standard compilation settings function for Flutter Linux targets\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization options based on build type.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Compilation Settings Function in CMake for Flutter\nDESCRIPTION: Defines a function to apply standard compilation settings to targets. This function sets C++14 standard, compiler warnings, optimization levels, and debug definitions.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Getters with => Syntax in Dart\nDESCRIPTION: This snippet shows how to use the '=>' syntax for defining simple getters that return literals or switch expressions. It's focused on enhancing code clarity and reducing verbosity.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD:\nList<Color> get favorites => <Color>[\n  const Color(0xFF80FFFF),\n  const Color(0xFF00FFF0),\n  const Color(0xFF4000FF),\n  _mysteryColor(),\n];\n\n// GOOD:\nbool get isForwardOrCompleted => switch (status) {\n  AnimationStatus.forward || AnimationStatus.completed => true,\n  AnimationStatus.reverse || AnimationStatus.dismissed => false,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Image to Skia Gold in Dart\nDESCRIPTION: This code shows how to use the `addImg` method of the `SkiaGoldClient` to upload a screenshot to Skia Gold. The method takes the test name, the file path to the screenshot, and the size of the screenshot as arguments, and it is assumed the client has been authenticated.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait client.addImg(\n  'my-screenshot',\n  io.File('path/to/screenshot.png'),\n  screenshotSize: 400, // i.e. a 20x20 image\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK using Android SDK Manager (Shell)\nDESCRIPTION: This set of shell commands demonstrates how to update the Android SDK used by Flutter's Chrome infrastructure bots. It utilizes the Android SDK Manager to update packages and accept licenses, ensuring the latest SDK components are installed. The updated SDK is then uploaded to Google Cloud Storage.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"$ dev/bots/android_tools/sdk/tools/android update sdk\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ dev/bots/android_tools/sdk/tools/bin/sdkmanager --update\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ dev/bots/android_tools/sdk/tools/bin/sdkmanager --licenses\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ dev/bots/upload_android_tools.py -t sdk\"\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Standard Settings Function in CMake\nDESCRIPTION: Sets the default build type to Debug if not specified and defines a function APPLY_STANDARD_SETTINGS to apply common compilation settings to targets.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy on Entire Repository\nDESCRIPTION: This command runs clang_tidy on the entire repository, or on files matching a specified regular expression. `--lint-all` lints all files, while `--lint-regex` filters files based on a regex.  Be cautious as linting the entire repository may take significant time.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --lint-all\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --lint-regex=\".*test.*\\.cc\"\n```\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine with Vulkan Validation Layers Enabled\nDESCRIPTION: This command demonstrates how to build the Flutter engine with Vulkan Validation Layers enabled using the gn tool. It specifies debug mode, enables Vulkan validation layers, disables LTO, sets unoptimized build, targets Android platform, and specifies ARM64 architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_validation_layers.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter/tools/gn \\\n  --runtime-mode=debug \\\n  --enable-vulkan-validation-layers \\\n  --no-lto \\\n  --unoptimized \\\n  --android \\\n  --android-cpu=arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring Goldctl Dependency in CI Builder (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `goldctl` dependency in a CI builder configuration file (e.g., `linux_android_emulator.json`). This ensures that the builder environment has access to the `goldctl` tool for interacting with Skia Gold.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   \"dependencies\": [\n     {\n       \"dependency\": \"goldctl\",\n       \"version\": \"git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd\"\n     }\n   ]\n```\n\n----------------------------------------\n\nTITLE: Incorrect targetSdk setting\nDESCRIPTION: This snippet shows an incorrect way to set `targetSdk`. Using `targetSdk` without an equals sign `=` is not allowed. This is a syntax error in Gradle. Also make sure the target SDK is compatible with the compile SDK. \nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\n// NOT OK\ndefaultConfig {\n  targetSdk 28\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Skia Pictures with _flutter.screenshotSkp Protocol\nDESCRIPTION: Retrieves the Skia SKP (Skia Picture) of a random Flutter view. The SKP data is base64 encoded in the response body. This extension takes no arguments and provides low-level graphics information for detailed rendering analysis.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ScreenshotSkp\",\n  \"skp\": \"<base64_data>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader for Animated Shading\nDESCRIPTION: Fragment shader code that uses the `frag_info.time` uniform to mix between two colors, creating an animated shading effect. The `fract` value is adjusted based on whether the floor of the time is even or odd.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_15\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main() {\n  float floor = floor(frag_info.time);\n  float fract = frag_info.time - floor;\n  if (mod(int(floor), 2) == 0) {\n    fract = 1.0 - fract;\n  }\n  frag_color = mix(v_color, v_color2, fract);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands\nDESCRIPTION: Configures custom build commands for the Flutter tool backend. Sets up build dependencies and ensures proper generation of Flutter libraries and headers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Custom build command that runs the Flutter tool backend script to generate necessary build artifacts. Uses a _phony_ target to ensure the command runs on every build.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Build Root Filesystem Settings\nDESCRIPTION: Configures system root settings for cross-building, including root path modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Configuration for DeviceLab New Test\nDESCRIPTION: This snippet defines the configuration properties for a new test target intended to run on the Linux platform in DeviceLab. It includes necessary test properties such as recipe, bring-up flag, task name, and timeout.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/How-to-add-a-new-integration-test-to-Framework-CI.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\" name: Linux_android_emu new_test_to_add\\n    recipe: devicelab/devicelab_drone\\n    bringup: true\\n    properties:\\n      tags: >\\n        [\\\"framework\\\",\\\"hostonly\\\",\\\"linux\\\"]\\n      task_name: android_views\\n    timeout: 60\\n\"\n```\n\n----------------------------------------\n\nTITLE: Unicode Line Breaking Properties Definition (U+201D-U+2223)\nDESCRIPTION: Defines line breaking properties for Unicode code points using two-letter codes. Each line contains the code point (or range), breaking property code, general category, and character name.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n201D;QU           # Pf         RIGHT DOUBLE QUOTATION MARK\n201E;OP           # Ps         DOUBLE LOW-9 QUOTATION MARK\n201F;QU           # Pi         DOUBLE HIGH-REVERSED-9 QUOTATION MARK\n2020..2021;AI     # Po     [2] DAGGER..DOUBLE DAGGER\n2022..2023;AL     # Po     [2] BULLET..TRIANGULAR BULLET\n```\n\n----------------------------------------\n\nTITLE: Finding Flutter Engine Library\nDESCRIPTION: Locates the Flutter Engine library and links it to the executable.  The path to the Flutter Engine is configured using `EMBEDDER_H_DIR` and `FLUTTER_OUT_DIR`.  The engine is then linked and the include directories are added to the target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(EMBEDDER_H_DIR ${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)\nset(FLUTTER_OUT_DIR ${CMAKE_SOURCE_DIR}/../../../out/host_debug_unopt)\n\nfind_library(FLUTTER_LIB flutter_engine PATHS ${FLUTTER_OUT_DIR})\n\ntarget_link_libraries(${EXE_NAME} PRIVATE ${FLUTTER_LIB})\ntarget_include_directories(${EXE_NAME} PRIVATE ${EMBEDDER_H_DIR})\n```\n\n----------------------------------------\n\nTITLE: Updating `.gitignore` for Third-Party Libraries\nDESCRIPTION: This code snippet shows how to modify the `.gitignore` file to track specific third-party directories while ignoring others. It ensures that the necessary third-party dependencies are included in the version control system without cluttering it with irrelevant files.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/README.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# Ignores all third_party/ directories except for the ones we want to track.\n\n+ !{folder_name}/\n```\n\n----------------------------------------\n\nTITLE: Defining a Build Configuration in JSON\nDESCRIPTION: This JSON snippet illustrates a basic structure for a build configuration, which contains sections for builds, tests, generators, and archives. This is used as a template for creating more complex build configurations and integrates into the CI/CD pipeline.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"builds\": [],\n   \"tests\": [],\n   \"generators\": {\n       \"tasks\": []\n   },\n   \"archives\": [\n   ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Flutter Logo in HTML/Markdown\nDESCRIPTION: This snippet shows how to display the Flutter logo using HTML within a Markdown file. It includes a responsive image that changes based on the user's color scheme preference.\nSOURCE: https://github.com/flutter/flutter/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://flutter.dev/\">\n  <h1 align=\"center\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://storage.googleapis.com/cms-storage-bucket/6e19fee6b47b36ca613f.png\">\n      <img alt=\"Flutter\" src=\"https://storage.googleapis.com/cms-storage-bucket/c823e53b3a1a7b0d36a9.png\">\n    </picture>\n  </h1>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and GTK Dependencies in CMake\nDESCRIPTION: Adds the Flutter managed directory, sets up system-level dependencies including GTK, and defines the application target with its source files.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"my_texture.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 support, warning flags, and optimization options for non-Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Collecting Data Keys for Code Signing in GN\nDESCRIPTION: This snippet demonstrates how to create a generated_file rule in GN to collect data keys for code signing. It specifies the output file, data keys to collect, and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: gn\nCODE:\n```\ngenerated_file(\"artifacts_entitlement_config\") {\n    outputs = [ \"$target_gen_dir/entitlements.txt\" ]\n\n    data_keys = [ \"entitlement_file_path\" ]\n\n    deps = [ \"//flutter/lib/snapshot:generate_snapshot_bin\" ]\n    if (flutter_runtime_mode == \"debug\") {\n        deps += [\n        \"//flutter/impeller/compiler:impellerc\",\n        \"//flutter/impeller/tessellator:tessellator_shared\",\n        \"//flutter/shell/testing:testing\",\n        \"//flutter/tools/path_ops:path_ops\",\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Application Bundle\nDESCRIPTION: Sets up installation rules to create a relocatable bundle in the build directory, cleaning previous builds and setting the install prefix.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Property Mappings\nDESCRIPTION: Defines character properties using the format codepoint;property. Maps Unicode code points to properties like AL (Alphabetic), CM (Combining Mark), BA (Break After), etc. for various scripts.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_13\n\nLANGUAGE: data\nCODE:\n```\n108E0..108F2;AL   # Lo    [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH\n108F4..108F5;AL   # Lo     [2] HATRAN LETTER SHIN..HATRAN LETTER TAW\n108FB..108FF;AL   # No     [5] HATRAN NUMBER ONE..HATRAN NUMBER ONE HUNDRED\n```\n\n----------------------------------------\n\nTITLE: Local Task Validation Commands\nDESCRIPTION: This snippet provides commands to validate the task locally using Dart. It includes commands for building and testing only, directing to the application binary path based on the artifacts created.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Validate the task locally\n// build only: dart bin/test_runner.dart test -t {NAME_OR_PATH_OF_TEST} --task-args build --task-args application-binary-path={PATH_TO_ARTIFACT}\n// test only: dart bin/test_runner.dart test -t {NAME_OR_PATH_OF_TEST} --task-args test --task-args application-binary-path={PATH_TO_ARTIFACT}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Guarded Functions - Dart\nDESCRIPTION: This code snippet pertains to the error thrown when a guarded function is called without utilizing 'await'. It emphasizes the importance of properly sequencing async calls in Flutter Widget Testing to avoid conflicts between multiple calls to Future-returning methods.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/test_async_utils_unguarded_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n{\"test_description\":\"TestAsyncUtils - handling unguarded async helper functions\",\"error_message\":\"You must use \\\"await\\\" with all Future-returning test APIs.\",\"guarded_method\":\"pump\",\"tracked_methods\":[\"first_call\",\"second_call\"]}\n```\n\n----------------------------------------\n\nTITLE: Updating a single Flutter dependency for cherrypicks\nDESCRIPTION: This command updates a single dependency to a specific version, primarily used for cherry-picking changes to a release candidate branch. The `--cherry-pick-package` flag specifies the package name, and `--cherry-pick-version` specifies the desired version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Updating-dependencies-in-Flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n`flutter update-packages --cherry-pick-package=[pub package name] --cherry-pick-version='[pub package version]'`\n```\n\n----------------------------------------\n\nTITLE: Configuring List Prepend Function for CMake 3.10 Compatibility\nDESCRIPTION: Defines a custom function list_prepend that adds a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Checking Validity of Build Configurations with Dart\nDESCRIPTION: This snippet shows the command-line usage for checking the validity of engine build config JSON files in a Flutter project using Dart. The `bin/check.dart` script can optionally take a path to the Flutter engine source. It verifies the build configurations by ensuring they meet predefined criteria.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_build_configs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ dart bin/check.dart [/path/to/engine/src]\n```\n\n----------------------------------------\n\nTITLE: Iterating on Tests Efficiently\nDESCRIPTION: This snippet explains how to speed up the testing process by skipping the build of Fuchsia and the starting of the Fuchsia emulator during subsequent test runs. The provided command line shows the use of '--skip-fuchsia-build' and '--skip-fuchsia-emu' flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh embedder --no-lto --skip-fuchsia-build --skip-fuchsia-emu\n```\n\n----------------------------------------\n\nTITLE: Generating Kernel Snapshot\nDESCRIPTION: This command creates a kernel snapshot 'kernel_snapshot.dill' file for a Flutter application. It requires the 'flutter packages get' command beforehand to ensure all dependencies are fetched.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$FLUTTER_ENGINE_OUT_DIR/dart \\\n    $FLUTTER_ENGINE_OUT_DIR/frontend_server.dart.snapshot \\\n    --sdk-root $FLUTTER_ENGINE_OUT_DIR/flutter_patched_sdk/ \\\n    --strong \\\n    --target=flutter \\\n    --aot \\\n    --tfa \\\n    -Ddart.vm.product=true \\\n    --packages .packages \\\n    --output-dill build/kernel_snapshot.dill \\\n    package:flutter_gallery/main.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: Creates a new local branch based on the upstream's main branch.  This ensures you're starting from the latest state and allows for isolated development. Replace `name_of_your_branch` with a descriptive name for your feature or bug fix.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout upstream/main -b name_of_your_branch\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ Wrapper Sources\nDESCRIPTION: Defines and configures the C++ wrapper source files for core functionality, plugins, and application components. Groups source files into logical components for building.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Final Merged Configuration Example - YAML\nDESCRIPTION: This snippet shows the final configuration after merging repository level overrides with the organization level configuration, providing a consolidated view of the effective settings for the Autosubmit bot.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauto_approval_accounts:\n  - skia-flutter-autoroll\n  - engine-flutter-autoroll\n  - dependabot[bot]\n  - dependabot\n  - DartDevtoolWorkflowBot\napproving_reviews: 3\napproval_group: flutter-hackers\nrun_ci: true\nsupport_no_review_revert: false\nrequired_checkruns_on_revert:\n  - ci.yaml validation\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Libraries and Plugins with CMake\nDESCRIPTION: This snippet includes build rules for Flutter libraries and tools, specifically for plugins and the application itself. It adds necessary subdirectories and includes generated plugin rules to ensure that the application builds correctly with all required components.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers in CMake\nDESCRIPTION: Defines a list of Flutter library headers and prepends the ephemeral directory path to each header file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: Uses pkg-config to locate required system packages (GTK, GLIB, and GIO) for building Flutter applications. Marks these as required, ensuring the CMake build process stops if they are missing.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and linkage.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Executing device lab tests\nDESCRIPTION: To run a device lab test locally, navigate to the `dev/devicelab` directory and execute `bin/run.dart` with the `-t` flag, specifying the task name defined in `.ci.yaml`. Ensure a physical device, simulator, or emulator is connected and the current locale is en_US.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"../../bin/dart bin/run.dart -t [task_name]\"\n```\n\n----------------------------------------\n\nTITLE: Define list prepend function\nDESCRIPTION: Defines a CMake function `list_prepend` that prepends a specified prefix to each element of a given list.  This function mimics the behavior of `list(TRANSFORM ... PREPEND ...)` which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies Syntax in Default Flutter Project Templates\nDESCRIPTION: This snippet changes dependency syntax from `compile` to `api` or `implementation` and updates Android support test libraries to align with Android Studio's practices.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_6\n\nLANGUAGE: Gradle\nCODE:\n```\ndependencies {\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.1'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android NDK (Shell)\nDESCRIPTION: This series of shell commands outlines the process for updating the Android NDK used by Flutter's infrastructure. It involves downloading a new NDK binary, removing the old directory, extracting the new NDK, renaming the extracted directory, and uploading the updated NDK to Google Cloud Storage.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"$ cd dev/bots/android_tools\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ rm -rf ndk\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ ./android-ndk-r10e-linux-x86_64.bin\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ mv android-ndk-r10e ndk\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ cd ../..\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"$ dev/bots/upload_android_tools.py -t ndk\"\n```\n\n----------------------------------------\n\nTITLE: Dart Parameter Referencing Example\nDESCRIPTION: Demonstrates the correct way to reference parameters in Dart documentation. Uses backticks for regular parameters and square brackets for parameters that are also properties, addressing Dartdoc issue 1486.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD\n\n  /// Creates a foobar, which allows a baz to quux the bar.\n  ///\n  /// The [bar] argument must not be null.\n  ///\n  /// The `baz` argument must be greater than zero.\n  Foo({ this.bar, int baz }) : assert(bar != null), assert(baz > 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Path\nDESCRIPTION: This snippet assigns the path to the ephemeral directory, which contains auto-generated configuration files, to a CMake variable. It relies on the current source directory as a base path, indicating that the build setup uses relative paths to manage file locations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Referencing Gradle Files in Flutter Android Tools\nDESCRIPTION: File paths referenced in the documentation for key configuration files that control Android build settings and dependency versions.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/android/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngradle_utils.dart\nflutter.groovy\ndependency_version_checker.gradle.kts\nbuild.gradle.kts\n```\n\n----------------------------------------\n\nTITLE: iOS Podfile Configuration\nDESCRIPTION: Ruby configuration for iOS test target in Podfile\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'Runner' do\n  # Do not change existing lines.\n  ...\n\n  target 'RunnerTests' do\n    inherit! :search_paths\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding New Labels in GitHub Actions\nDESCRIPTION: This YAML configuration snippet illustrates how to set up new labels for a Flutter repository using GitHub Actions' labeler. The configuration requires specifying file path patterns for automated label application. Key paths are defined using glob patterns to target platform-specific or feature-specific directories. Dependencies include a working GitHub Actions setup with labeler.yml configuration. The expected outcome is automatic labeling of pull requests matching specified patterns, improving workflow management.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Labeling-PRs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmacos:\n  # **/* recursively searches all subdirectories and files\n  - shell/platform/darwin/macos/**/*\n\n# For complex label names, it may need to be wrapped in quotes\n'a: accessibility':\n  - **/accessibility/*\n```\n\n----------------------------------------\n\nTITLE: Running a Build Configuration with Dart\nDESCRIPTION: This snippet provides the command-line usage for running a build from a configuration file locally using Dart. It requires the build configuration name and the specific build name as inputs. The command uses `bin/run.dart` to execute the build process without involving generators or tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_build_configs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ dart bin/run.dart [build config name] [build name]\n```\n\n----------------------------------------\n\nTITLE: Creating a New DevTools Memory Test in Flutter\nDESCRIPTION: Steps to create a new DevTools memory test case and add it to Flutter's device lab. This involves writing a Flutter driver test, adding an entry to the manifest, and creating a task file.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n1. Write (or reuse) a normal Flutter driver test for the app in files named like `test_driver/some_memory_perf.dart` and `test_driver/some_memory_perf_test.dart`.\n2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]\n3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder.\n```\n\n----------------------------------------\n\nTITLE: Adding Team to Triage Bot - Engine.dart\nDESCRIPTION: This snippet shows the location of the `GitHubSettings.teams` set in the `engine.dart` file within the Cocoon project. This set contains the list of teams that the triage bot uses to manage issues. Adding a new team requires modifying this set and restarting the bot.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/triage/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nhttps://github.com/flutter/cocoon/blob/main/triage_bot/lib/engine.dart#L50\n```\n\n----------------------------------------\n\nTITLE: List GPG Keys to Find Key Hash\nDESCRIPTION: This command lists all secret keys with their long format key IDs. It is used to locate the correct GPG key hash required when configuring Git for signing commits. The key hash is found in the line starting with 'sec'.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngpg --list-secret-keys --keyid-format=long\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Include Directories\nDESCRIPTION: This snippet links the `flutter` and `flutter_wrapper_app` libraries to the executable, and adds the CMake source directory as an include directory.  This ensures that the necessary Flutter components are linked and that the compiler can find necessary header files.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Component Installation in CMake\nDESCRIPTION: Defines installation rules for runtime components including the main binary, ICU data file, Flutter library, and plugin libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Application Components for Windows\nDESCRIPTION: Defines installation rules for the main application binary, ICU data file, Flutter library, and plugin libraries required for execution.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nset(PLUGIN_BUNDLED_LIBRARIES)\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable in CMake\nDESCRIPTION: Sets up the Windows executable target for a Flutter application with necessary source files including window management, main entry point, utilities, and generated plugin registrations. Includes resource files for Windows application manifests.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring installation settings for Flutter Linux bundle\nDESCRIPTION: Sets up the installation directory and ensures it's cleaned before each installation to create a relocatable bundle in the build directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Testing Built Flutter Engine with Local Flutter Gallery App\nDESCRIPTION: Demonstrates how to test the newly built Flutter engine against the Flutter Gallery app in different execution modes. The test checks if the changes work as expected in release, debug, and unoptimized versions.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $FLUTTER_HOME/examples/flutter_gallery\\nflutter run --release --local-engine=android_release --local-engine-host=host_release\\nflutter run --local-engine=android_debug_unopt --local-engine-host=host_debug_unopt\\nflutter test --local-engine=host_debug --local-engine-host=host_debug\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the assets directory, ensuring all resources are copied to the build bundle and removing any previously existing resources to prevent stale files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Example running device lab tests with local engine\nDESCRIPTION: This is an example command demonstrating how to run a device lab test with a local Flutter engine. It specifies the path to the engine source, the engine build for the device, the engine build for the host, and the name of the test task.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"../../bin/dart bin/run.dart \\\n  --local-engine-src-path=/Users/myname/flutter/engine/src \\\n  --local-engine=android_debug_unopt_x86 \\\n  --local-engine-host=host_debug_unopt_x86 \\\n  -t external_ui_integration_test\"\n```\n\n----------------------------------------\n\nTITLE: Symbolicating with ndk-stack on macOS\nDESCRIPTION: This snippet shows how to use the ndk-stack tool from the Android NDK to symbolicate stack traces on a macOS system. Ensure that unzipped symbol files are available and the crash stack is saved in a file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.../ndk/prebuilt/darwin-x86_64/bin/ndk-stack -sym .../path/to/downloaded/symbols < stack.txt\n```\n\n----------------------------------------\n\nTITLE: Unpublish Package (Dart/Shell)\nDESCRIPTION: This snippet shows the command to unpublish a Flutter package using the `unpublish_package.dart` script.  It requires confirmation and the necessary cloud storage access and gsutil setup. The script removes the package from the channels in which it was published.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"dart ./unpublish_package.dart --confirm --temp_dir=/tmp/foo --revision d444a455de87a2e40b7f576dc12ffd9ab82fd491\"\n```\n\n----------------------------------------\n\nTITLE: Opening Generated Output Folder for Golden Files\nDESCRIPTION: This snippet provides an example command for opening the generated output folder using the `open` command, which varies based on architecture and test suite. Ensure the specified directory exists and permissions allow opening.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nopen ../out/host_debug_unopt_arm64/gen/skia_gold_image_filter_test.dart_iplr\n```\n\n----------------------------------------\n\nTITLE: Symbolicating with ndk-stack on Linux\nDESCRIPTION: This snippet demonstrates how to use the ndk-stack tool from the Android NDK to symbolicate stack traces on a Linux system. Ensure that unzipped symbol files are available and the crash stack is saved in a file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.../ndk/prebuilt/linux-x86_64/bin/ndk-stack -sym .../path/to/downloaded/symbols < stack.txt\n```\n\n----------------------------------------\n\nTITLE: Custom Function to Prepend List Elements\nDESCRIPTION: Defines a function 'list_prepend' to prepend a prefix to elements of a given list since some list manipulation functions aren't available in CMake 3.10. It expects a list name and a prefix string, and modifies the list in place.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Overriding GN flags for postsubmit builds in JSON\nDESCRIPTION: This snippet shows how to override GN flags specifically for postsubmit builds within a JSON configuration. The `postsubmit_overrides` section allows for defining different GN flags to be used in postsubmit environments.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"host_debug\",\n   \"gn\": [\n      \"--runtime-mode\",\n      \"debug\",\n      \"--prebuilt-dart-sdk\",\n      \"--build-embedder-examples\"\n   ],\n   \"ninja\": {},\n   \"postsubmit_overrides\": {\n     \"gn\": [\n        \"--runtime-mode\",\n        \"release\"\n     ],\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets Installation for Windows\nDESCRIPTION: Ensures clean asset installation by removing any stale files before copying the latest assets. This maintains consistency between builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Using Block Syntax for Complex Getters in Dart\nDESCRIPTION: This snippet illustrates the use of a block syntax for getters that require more complex logic, enhancing readability when conditions span multiple lines.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n// OKAY, but the code is more dense than it could be:\nString? get validated => switch(input[_inputIndex]?.trim()) {\n  final String value when value.isNotEmpty => value,\n  _ => null,\n};\n\n// BETTER (more verbose, but also more readable):\nString? get validated {\n  final String? value = input[_inputIndex]?.trim();\n\n  if (value != null && value.isNotEmpty) {\n    return value;\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing KXml Dependency Warnings in ProGuard\nDESCRIPTION: Configuration to prevent ProGuard from warning about missing KXml parser and serializer classes that are not properly marked by dependencies. This rule is needed due to an ongoing issue with Flutter's Android build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/android/lib-proguard-rules.txt#2025-04-21_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn org.kxml2.io.KXmlParser**,org.kxml2.io.KXmlSerializer**\n```\n\n----------------------------------------\n\nTITLE: Moving Android Resources\nDESCRIPTION: Transfers Android resources such as custom launcher icons to the new project structure. `<existing-app-dir>/android/res` should contain resources. This process is required for apps with custom resources to ensure they are included post-migration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp -r <existing-app-dir>/android/res <appname>android/app/src/main/\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends standard Flutter library header files to the list of headers for the Flutter library interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining a New Test Target for Android Emulators in DeviceLab using YAML\nDESCRIPTION: This snippet describes how to define a new test target for running Android emulators on the Linux platform within the DeviceLab. The configuration specifies that an emulator is being used, along with its associated properties.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/How-to-add-a-new-integration-test-to-Framework-CI.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"- name: Linux_android_emu new_test_to_add\\n\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter assets for Linux bundle\nDESCRIPTION: Sets up rules to copy the Flutter assets directory to the bundle, ensuring old files are removed first to avoid stale assets from previous installations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy with Added Checks\nDESCRIPTION: This command executes clang_tidy and includes additional checks specified by the `--checks` option. This allows developers to run checks not included in the default configuration, including using wildcards for multiple checks.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --checks=\"<check-name-to-run>\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --checks=\"readability-*\"\n```\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Generates custom build command for Flutter tool backend with phony output to ensure execution\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version changes, feature updates, breaking changes and bug fixes for the Flutter integration test package.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\nThis changelog was discontinued after version 0.9.2+2, when the package started\nto vend from the Flutter SDK rather than pub.\n\nIt is maintained here for historical purposes only.\n\n## 0.9.2+2\n\n* Broaden the constraint on vm_service.\n\n## 0.9.2+1\n\n* Update android compileSdkVersion to 29.\n\n## 0.9.2\n\n* Add `watchPerformance` for performance test.\n\n## 0.9.1\n\n* Keep handling deprecated Android v1 classes for backward compatibility.\n\n## 0.9.0\n\n* Add screenshot capability to web tests.\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Version in flutter.gradle\nDESCRIPTION: This snippet shows how to comment out a line in `flutter.gradle` to reveal the root cause of build errors in older Flutter versions. This allows developers to see the underlying error message when `assembleDebug` or `assembleRelease` fails silently.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Resolving-common-build-failures.md#2025-04-21_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\n\t\t\"gradle.useLogger(new FlutterEventLogger())\"\n```\n\n----------------------------------------\n\nTITLE: Running Java Unit Tests for Android Embedder\nDESCRIPTION: This command executes Java unit tests for the Android embedder. It assumes you are at the root of the engine repository where `run_tests.py` is located. This snippet shows how to run the tests using the `run_tests.py` script with the `--type java` option.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./testing/run_tests.py --type java\n```\n\n----------------------------------------\n\nTITLE: Add custom command for Flutter assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library. It uses the Flutter toolchain to build the library, specifying the target platform and build type.  The output is the Flutter library and headers.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Single Behaviors in Separate Flutter Tests (Good)\nDESCRIPTION: This code snippet shows how to separate tests to validate single behaviors of `SliverGeometry`.  This is a recommended practice to simplify debugging.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntest('SliverGeometry with no arguments is valid', () {\n  expect(const SliverGeometry().debugAssertIsValid(), isTrue);\n});\n\ntest('SliverGeometry throws error when layoutExtent exceeds paintExtent', () {\n  expect(() {\n    const SliverGeometry(layoutExtent: 10.0, paintExtent: 9.0).debugAssertIsValid();\n  }, throwsFlutterError);\n});\n\ntest('SliverGeometry throws error when maxPaintExtent is less than paintExtent', () {\n  expect(() {\n    const SliverGeometry(paintExtent: 9.0, maxPaintExtent: 8.0).debugAssertIsValid();\n  }, throwsFlutterError);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling WM_GETOBJECT Message for UIA in C++\nDESCRIPTION: This snippet shows how the Window class handles the WM_GETOBJECT message to provide the UIA root object. It checks if the lparam matches UiaRootObjectId and returns the UIA fragment root using UiaReturnRawElementProvider.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/windows/Accessibility-on-Windows.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nWindow::OnGetObject() {\n  if (lparam == UiaRootObjectId) {\n    return UiaReturnRawElementProvider(hwnd, wParam, lParam, fragment_root);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Memory Sanitizer Tests\nDESCRIPTION: This set of commands shows how to build Flutter Engine with Memory Sanitizer enabled to detect reads of uninitialized memory, and run the embedder unit tests. This sanitizer is only available on Linux.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./flutter/tools/gn --runtime-mode debug --msan --unoptimized --no-goma\n$ autoninja -C out/host_debug_unopt\n$ source ./flutter/testing/sanitizer_suppressions.sh\n$ ./out/host_debug_unopt/embedder_unittests\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests for Android Embedder\nDESCRIPTION: This command executes C++ unit tests for the Android embedder. It assumes you are at the root of the engine repository where `run_tests.py` is located.  The script uses the `--type android` option, which is, perhaps confusingly, for C++ tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./testing/run_tests.py --type android\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity Platform View Registration\nDESCRIPTION: Register platform view in the main activity for app-level platform view configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends FlutterActivity {\n    @Override\n    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {\n        flutterEngine\n            .getPlatformViewsController()\n            .getRegistry()\n            .registerViewFactory(\"<platform-view-type>\", new NativeViewFactory());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter iOS Project in Xcode\nDESCRIPTION: This command opens the Flutter project's Xcode workspace, allowing developers to access and modify the iOS-specific assets and configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_app_with_extensions/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`open ios/Runner.xcworkspace`\n```\n\n----------------------------------------\n\nTITLE: Updating CI for New Android API Support - YAML Configuration\nDESCRIPTION: This snippet demonstrates how to modify the CI configuration in a .ci.yaml file to support a new Android API version. It specifically shows the properties and dependencies needed for the Android Virtual Device.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/New-Android-version.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"  linux_android_emu:\\n    properties:\\n      contexts: >-\\n        [\\n          \\\"android_virtual_device\\\"\\n        ]\\n      dependencies: >-\\n        [\\n          ...\\n          {\\\"dependency\\\": \\\"android_virtual_device\\\", \\\"version\\\": \\\"android_<API#>_google_apis_x64.textpb\\\"},\\n          {\\\"dependency\\\": \\\"avd_cipd_version\\\", \\\"version\\\": \\\"build_id:<Instance ID>\\\"},\\n        ]\\n      ...\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types for Flutter Windows Application\nDESCRIPTION: Sets up Debug, Profile, and Release build configurations for the Flutter application. Handles both multi-config and single-config CMake generators.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Merging Flutter Engine into Flutter Framework Repository\nDESCRIPTION: Clones the Flutter framework repository, adds the engine repository as a remote, and merges them while allowing unrelated histories.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:flutter/flutter.git flutter_merge\ncd flutter_merge\n\n# add the other tree as remote\ngit remote add -f engine-upstream ~/src/engine_prep\n\n# --no-commit is important because we want to look around\ngit merge --no-commit --allow-unrelated-histories engine-upstream/main\n\n# You're a wizard, Harry\ngit commit -m \"Merge flutter/engine into framework\"\n\n# Garbage collect!\n# Now at 234MB .git\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n```\n\n----------------------------------------\n\nTITLE: Enabling Clang-tidy fix output in CI for Flutter Engine\nDESCRIPTION: This code snippet shows how to modify the ci/clang_tidy.sh file to enable printing of Clang-tidy fix suggestions in CI runs. This is useful for applying large-scale lint fixes across the project.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-Clang-Tidy-Linter.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To run on CI, just uncomment the following line:\n-# FLUTTER_LINT_PRINT_FIX=1\n+FLUTTER_LINT_PRINT_FIX=1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Integration in CMake Build System\nDESCRIPTION: Configures the Flutter library and tools by adding the Flutter subdirectory and plugin build rules, then links them to the application target.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\ntarget_include_directories(${BINARY_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Flutter Linux Application\nDESCRIPTION: Configures the output directory for the executable to prevent running unbundled copies. This places the binary in an intermediates directory to ensure users run the properly bundled version.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Defines and configures the Flutter plugin wrapper library with core and plugin-specific source files. Sets up compilation flags and dependencies for plugin support.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Support in CMake for Flutter Linux\nDESCRIPTION: Setup for cross-building environment when a target platform sysroot is specified. This configures the root filesystem and find behavior when cross-compiling the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile Configurations for Flutter Web Tests\nDESCRIPTION: Defines how tests should be compiled with options for compiler and renderer. Supports compilation using dart2js and dart2wasm with renderers like html, canvaskit, and skwasm\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncompile-configs:\n  * `name` - The name of the compile configuration.\n  * `compiler` - What compiler is used to compile the tests.\n  * `renderer` - Which renderer to use when compiling the tests.\n```\n\n----------------------------------------\n\nTITLE: Creating a New MemoryTest Case in Flutter\nDESCRIPTION: Steps to create a new MemoryTest case and add it to Flutter's device lab for CI measurement. This involves creating a main function, adding an entry to the manifest, and creating a task file.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n1. Create a `main` function for the test app in a file named like `test_memory/some_memory_perf.dart`.\n2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]\n3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder.\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter bin directory to PATH\nDESCRIPTION: This command adds the `bin` directory of the Flutter repository to the system's PATH environment variable. This allows the `flutter` command-line tool to be executed from any directory. The user needs to replace `<path to flutter repository>` with the actual path to the flutter repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"export PATH=\\\"$PATH:$HOME/<path to flutter repository>/bin\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: This snippet adds preprocessor definitions related to the Flutter version information. These definitions are used during compilation to embed the version details into the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Interface Library Configuration in CMake\nDESCRIPTION: Defines an interface library for Flutter that includes directories, links against the Flutter library, and specifies dependencies on GTK, GLIB, and GIO. This creates a linkable target for applications.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Golden File Scraper in Dart\nDESCRIPTION: Demonstrates how to use the Dart script to extract and apply golden file changes from a log file. It shows both the normal execution and the dry-run mode.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ dart bin/main.dart <path to log file, which can be http or a file>\n\nWrote 3 golden file changes:\n  testing/resources/performance_overlay_gold_60fps.png\n  testing/resources/performance_overlay_gold_90fps.png\n  testing/resources/performance_overlay_gold_120fps.png\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ dart bin/main.dart --dry-run <path to log file, which can be http or a file>\n\nFound 3 golden file changes:\n  testing/resources/performance_overlay_gold_60fps.png\n  testing/resources/performance_overlay_gold_90fps.png\n  testing/resources/performance_overlay_gold_120fps.png\n\nRun again without --dry-run to apply these changes.\n```\n\n----------------------------------------\n\nTITLE: Safe Buffer Size Calculation Pattern with CheckedNumeric in C++\nDESCRIPTION: Example pattern for safely calculating buffer sizes using CheckedNumeric. This pattern avoids direct comparisons with CheckedNumeric by using AssignIfValid to verify the calculation was valid before proceeding.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Either input or padding (or both) may be arbitrary sizes.\nsize_t buff_size;\nif (!CheckAdd(input, padding, kHeaderLength).AssignIfValid(&buff_size) ||\n     buff_size >= kMaxBuffer) {\n  // Handle an error...\n} else {\n  // Do stuff on success...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FlutterActivity in Java (New Embedding)\nDESCRIPTION: Updated example of a FlutterActivity subclass using the new stable Android embedding. This code demonstrates the simplified structure, removing the need for explicit plugin registration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage [your.package.name];\n\nimport io.flutter.embedding.android.FlutterActivity;\n\npublic class MainActivity extends FlutterActivity {\n  // You do not need to override onCreate() in order to invoke\n  // GeneratedPluginRegistrant. Flutter now does that on your behalf.\n\n  // ...retain whatever custom code you had from before (if any).\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Paths\nDESCRIPTION: The snippet sets up various paths that are essential for the Flutter library, such as the library file, ICU data file, and project build directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy with a Specific Target Variant\nDESCRIPTION: This command specifies the target variant for the clang_tidy run. This option is useful for running lints on specific builds of the engine, ensuring that rules applicable to those builds are enforced. `--target-variant` specifies the engine variant.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --target-variant <engine-variant>\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --target-variant android_debug_unopt\n```\n```\n\n----------------------------------------\n\nTITLE: Updating all Flutter dependencies\nDESCRIPTION: This command updates all dependencies in the `pubspec.yaml` file to the latest versions, overriding any existing constraints. The `--force-upgrade` flag ensures that all dependencies are updated, even if they are already at a compatible version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Updating-dependencies-in-Flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n`flutter update-packages --force-upgrade`\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Library Dependencies in CMake\nDESCRIPTION: Sets up system-level dependencies required for Flutter Linux applications using PkgConfig to find GTK, GLIB, and GIO packages. These dependencies are necessary for proper integration with the Linux desktop environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Test\nDESCRIPTION: This snippet shows how to execute a specific integration test with the 'run_integration_test.sh' script, specifying the name of the integration test folder and disabling link-time optimization. The script is located in the Flutter engine directory specified by the environment variable 'ENGINE_DIR'.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh <integration_test_folder_name> --no-lto\n```\n\n----------------------------------------\n\nTITLE: Pie Chart of Vulkan Version Distribution\nDESCRIPTION: A mermaid pie chart showing the distribution of Vulkan support across Android devices as of January 06, 2023, with 77% supporting Vulkan 1.1, 8% supporting Vulkan 1.0.3, and 15% having no Vulkan support.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\npie title Vulkan version\n\t\"No Vulkan Support\" : 15\n\t\"Vulkan 1.0.3\" : 8\n\t\"Vulkan 1.1\" : 77\n```\n\n----------------------------------------\n\nTITLE: Adding a New Scenario in Dart\nDESCRIPTION: This snippet explains how to create a new scenario by subclassing the Scenario class in Dart. This is crucial for extending the functionality of the Flutter app by adding new visual components for testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n\"// Import the necessary package\\nimport 'package:your_package/scenario.dart';\\n\\n// Create a subclass of Scenario to define a new visual scenario.\\nclass MyNewScenario extends Scenario {\\n  @override\\n  void update(double deltaTime) {\\n    // Logic for the new scenario goes here\\n  }\\n}\\n\\n// Add this scenario to the scenarios map in scenarios.dart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Defines and configures the Flutter wrapper libraries for plugins and applications. Sets up source files and build settings for both plugin and application wrappers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Running Unicode Sync Script in Check Mode in Dart\nDESCRIPTION: This command executes the Dart script `unicode_sync_script.dart` in check mode.  This mode validates the synchronization between the Unicode property files and the generated code without overwriting existing files. A non-zero exit code indicates discrepancies.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ndart tool/unicode_sync_script.dart --check\n```\n\n----------------------------------------\n\nTITLE: Declaring Flutter Test Dependency in pubspec.yaml\nDESCRIPTION: This code snippet demonstrates how to declare the 'flutter_test' package as a development dependency in the pubspec.yaml file.  This is a common requirement for Flutter projects that utilize testing frameworks.  The 'sdk: flutter' specifies that this dependency is provided by the Flutter SDK.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/missing_dependency_tests/trivial_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"dev_dependencies:\\n  flutter_test:\\n    sdk: flutter\"\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy with Removed Checks\nDESCRIPTION: This command executes clang_tidy while excluding specific checks specified using the `--checks` option with a `-` prefix. This allows developers to temporarily disable certain checks or entire categories of checks.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --checks=\"-<check-name-to-remove>\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --checks=\"-readability-*\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --checks=\"-*,<only-check-to-run>\"\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and Tool Build Rules\nDESCRIPTION: Sets up directory paths and project inclusions for building the Flutter application and its plugins. The managed directory for Flutter and plugin setup is necessary for integrating Flutter's build rules into the CMake project structure.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Settings for Flutter Linux Application\nDESCRIPTION: Initializes the CMake project with C++ language and sets up basic application parameters including the binary name and application ID for a Flutter platform_channel example.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"platform_channel\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"io.flutter.examples.platform_channel\")\n```\n\n----------------------------------------\n\nTITLE: Migrating FlutterActivity in Java (Old Embedding)\nDESCRIPTION: Example of a FlutterActivity subclass using the old Android embedding. This code shows the typical structure, including the onCreate method and plugin registration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage [your.package.name];\n\nimport android.os.Bundle;\nimport io.flutter.app.FlutterActivity;\nimport io.flutter.plugins.GeneratedPluginRegistrant;\n\npublic class MainActivity extends FlutterActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    GeneratedPluginRegistrant.registerWith(this);\n  }\n\n  // ...some amount of custom code for your app is here.\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Build Type\nDESCRIPTION: Configures the build type if not already set.  It defaults to `Debug` and provides options for `Debug`, `Profile`, and `Release` builds. This affects compiler optimizations and debugging information.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and configures the Flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating New Flutter Project Template\nDESCRIPTION: Initializes a new Flutter project with the updated template and renames the lib directory for easier merging. Requires Flutter SDK installed and accessible via terminal. `<appname>` should be replaced with the desired project name.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter create <appname>\nmv <appname>/lib <appname>/lib.template\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter application components for Linux bundle\nDESCRIPTION: Configures installation rules for the binary executable, ICU data file, and Flutter library, placing them in their appropriate directories within the bundle.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Behaviors in a Single Flutter Test (Bad)\nDESCRIPTION: This code snippet shows a test that validates multiple behaviors of `SliverGeometry`.  This is not recommended because it can make debugging difficult.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Single test that tests multiple behaviors\ntest('SliverGeometry', () {\n  expect(const SliverGeometry().debugAssertIsValid(), isTrue);\n  expect(() {\n    const SliverGeometry(layoutExtent: 10.0, paintExtent: 9.0).debugAssertIsValid();\n  }, throwsFlutterError);\n  expect(() {\n    const SliverGeometry(paintExtent: 9.0, maxPaintExtent: 8.0).debugAssertIsValid();\n  }, throwsFlutterError);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Project and Application Properties in CMake for Flutter Linux Application\nDESCRIPTION: Initial project setup with minimum CMake version, project name, executable name, and application ID configuration. These settings define the basic properties of the Flutter Linux application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"layers\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"io.flutter.examples.layers\")\n```\n\n----------------------------------------\n\nTITLE: Generating Fallback Fonts for Testing\nDESCRIPTION: The command 'felt roll-fallback-fonts' fetches fonts from the Google Fonts API and generates fallback font data for use in engine unit tests. It requires a valid Google Fonts API key and operates only on Linux.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncipd auth-login\nfelt roll-fallback-fonts --key=<Google Fonts API key>\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Application\nDESCRIPTION: Sets the default build type to 'Debug' if not otherwise specified. This section defines build configurations (Debug, Profile, Release) that control optimization levels.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Mobile Benchmark - Flutter Shell\nDESCRIPTION: This shell command runs various mobile benchmarks using `flutter drive`, depending on the `[test_name]` provided. It expects test and driver script paths, generating output in JSON files in the build directory. Flutter must be installed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile -t test_driver/run_app.dart --driver test_driver/[test_name]_test.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library paths and header files, configuring the main Flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Dart Unit Tests\nDESCRIPTION: This Python script executes the Dart unit tests for the Flutter engine. It utilizes the GN and Ninja build systems to compile and run `_test.dart` files under the `testing/dart` directory, leveraging a Dart SDK specified in the `DEPS` file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n\"testing/run_tests.py --type=dart\"\n```\n\n----------------------------------------\n\nTITLE: Checking gen_snapshot Target Architecture\nDESCRIPTION: This command checks the target architecture of a 'gen_snapshot' binary. By using the '--version' flag, it verifies the host/target pair, ensuring the binary is configured for the desired architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDart VM version: 2.1.1-dev.2.0.flutter-ac1bf656c4 (Thu Jan 17 16:55:19 2019 +0000) on \"macos_x64\"\n```\n\n----------------------------------------\n\nTITLE: Checking Out Branch in Flutter Channel Command\nDESCRIPTION: This code snippet shows the location where the channel command checks out the branch without fetching updated refs from GitHub first. This led to users having outdated branch heads.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/Postmortem-Beta-1-Release.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[checking out the branch](https://github.com/flutter/flutter/blob/eaa9b47a4ac278a9439468911d2c361a472b114b/packages/flutter_tools/lib/src/commands/channel.dart#L103)\n```\n\n----------------------------------------\n\nTITLE: Configuration Override Example - YAML\nDESCRIPTION: This snippet shows an example of how to override the Autosubmit configuration at the repository level through a local configuration file. The override allows for more flexible management of review requirements and approval accounts.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauto_approval_accounts:\n  - dependabot[bot]\n  - dependabot\n  - DartDevtoolWorkflowBot\napproving_reviews: 3\nsupport_no_review_revert: false\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Block with Padding\nDESCRIPTION: Defines a more complex uniform block in GLSL, including `float`, `vec2`, and `vec4` types.  This demonstrates how the GLSL compiler handles padding for different data types.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_11\n\nLANGUAGE: glsl\nCODE:\n```\nuniform FragInfo {\n  float time;\n  vec2 bar;\n  vec4 baz;\n} frag_info;\n```\n\n----------------------------------------\n\nTITLE: Hotfix Message Template for Flutter Issues\nDESCRIPTION: A recommended formula for describing hotfix scenarios that provides clear, succinct information about the problem, affected platforms, and potential impact\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Hotfix-Documentation-Best-Practices.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"When $scenario [on $platform], $problem_description\"\n```\n\n----------------------------------------\n\nTITLE: Dart Skipped Test with Intended Tag\nDESCRIPTION: Shows how to skip a test that doesn't make sense to run under specific conditions, such as a feature available only on a particular platform or environment. It requires the `[intended]` tag with a short description of why the skip is needed. It is used to mark tests that by design should not be tested under specific condition.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nskip: isBrowser, // [intended] There are no default transitions to test on the web.\n```\n\n----------------------------------------\n\nTITLE: Renaming Git origin remote to upstream\nDESCRIPTION: This command renames the 'origin' remote to 'upstream' in the local Git repository.  This is a common practice when contributing to open-source projects, where 'upstream' refers to the main project repository, and 'origin' refers to the contributor's forked repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"git remote rename origin upstream\"\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries. This allows other parts of the project to link against the Flutter library and use its headers.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Application Components in CMake\nDESCRIPTION: Defines installation rules for the application binary and required Flutter files. This ensures the executable, ICU data file, and Flutter library are installed to the correct locations.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Based Dependency Overrides\nDESCRIPTION: This command is used for creating path-based dependency overrides in Flutter packages when changing multiple federated plugins. The command targets the specified dependency packages that require modification. Tailored for use with the flutter_plugin_tools.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ dart run script/tool/bin/flutter_plugin_tools.dart make-deps-path-based --target-dependencies=video_player_platform_interface,video_player_android\n```\n\n----------------------------------------\n\nTITLE: Building and Running Address Sanitizer Tests\nDESCRIPTION: This set of commands shows how to build Flutter Engine with Address Sanitizer enabled, which also implicitly enables Leak Sanitizer, and run the embedder unit tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./flutter/tools/gn --runtime-mode debug --asan --unoptimized --no-goma\n$ autoninja -C out/host_debug_unopt\n$ source ./flutter/testing/sanitizer_suppressions.sh\n$ ./out/host_debug_unopt/embedder_unittests\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Header for Generated Flutter Localization Files\nDESCRIPTION: This code snippet contains the copyright notice and license information for the generated localization files in a Flutter project. It also includes a comment indicating that the files were generated using the 'flutter gen-l10n' command.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/header.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// THE FOLLOWING FILES WERE GENERATED BY `flutter gen-l10n`.\n```\n\n----------------------------------------\n\nTITLE: Running dart_roll_helper.py Script in Python\nDESCRIPTION: Automates the Dart SDK roll by updating revisions, syncing dependencies, building configurations, and running tests. It requires the 'FLUTTER_HOME', 'ENGINE_HOME', and 'DART_SDK_HOME' environment variables. The command should be run in a clean repository state.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython $ENGINE_HOME/tools/dart/dart_roll_helper.py --create-commit $TARGET_SDK_HASH\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Property Mapping Block\nDESCRIPTION: Maps Unicode code points to their associated character properties for various scripts and symbols. Each line contains a code point or range, followed by the character property and description.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n119E1;AL          # Lo         NANDINAGARI SIGN AVAGRAHA\n119E2;BB          # Po         NANDINAGARI SIGN SIDDHAM\n119E3;AL          # Lo         NANDINAGARI HEADSTROKE\n119E4;CM          # Mc         NANDINAGARI VOWEL SIGN PRISHTHAMATRA E\n```\n\n----------------------------------------\n\nTITLE: Defining Drone Dimensions in JSON\nDESCRIPTION: This JSON code snippet specifies the drone dimensions required for task execution, such as operating system and device type. It is utilized for selecting appropriate bots within a CI pipeline to execute builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"drone_dimensions\": [\n  \"device_type=none\",\n  \"os=Linux\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace in Git to Provide More Failure Information\nDESCRIPTION: This snippet demonstrates how to enable tracing in Git to get more information about command failures. By setting the GIT_TRACE environment variable to 1, more detailed logs are produced when a Git command fails.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGIT_TRACE=1 git commit -S -m 'some message'\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a function `list_prepend` that prepends a prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Emulator and Starting PM Serve\nDESCRIPTION: This code snippet initializes the QEMU emulator and starts the package manager (PM) serve process, which are essential first steps in the integration test setup for the Dart JIT runner.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfx set terminal.qemu-x64\nffx emu start --headless\n\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Minimum Autosubmit Configuration Example - YAML\nDESCRIPTION: This snippet depicts a minimal configuration file for the Autosubmit bot, where only the 'approval_group' key is provided. This is useful for users who want to get started quickly with the Autosubmit without extensive configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napproval_group: flutter-hackers\n```\n\n----------------------------------------\n\nTITLE: Equivalent Branching in GLSL Function for Performance\nDESCRIPTION: This GLSL code is an expanded equivalent of the previous function, illustrating the impact of branching on efficiency and drawing attention to how branching logic in shader code gets translated to assembly.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_5\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 FrobnicateColor(vec4 color) {\n  vec4 result;\n\n  if (color.a == 0) {\n    result = vec4(0);\n  } else {\n    result = DoExtremelyExpensiveThing(color);\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Build Specific Android Targets Recursively\nDESCRIPTION: This snippet demonstrates commands to build specific Android targets within the Flutter engine recursively. It allows for targeted building to save time and resources when only certain modules require updates.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\net build --config android_debug_unopt_arm64 //flutter/shell/platform/android:android_jar\net build --config android_debug_unopt_arm64 //flutter/shell/platform/...\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Implements a custom build command to generate Flutter libraries and wrapper sources using the Flutter tool backend script. Ensures dynamic generation of required build artifacts.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Library and Tool Build Rules\nDESCRIPTION: Manages the inclusion of Flutter-related build rules and dependencies by adding subdirectory paths for the Flutter library and other tools. It ensures that the necessary Flutter components are integrated into the project build system.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK Path Configuration in Gradle Settings\nDESCRIPTION: Gradle configuration code that loads Flutter SDK path from local.properties and applies plugin loader. This code should be removed when creating settings_aar.gradle file.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/manual_migration_settings.gradle.md#2025-04-21_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndef localPropertiesFile = new File(rootProject.projectDir, \"local.properties\")\ndef properties = new Properties()\n\nassert localPropertiesFile.exists()\nlocalPropertiesFile.withReader(\"UTF-8\") { reader -> properties.load(reader) }\n\ndef flutterSdkPath = properties.getProperty(\"flutter.sdk\")\nassert flutterSdkPath != null, \"flutter.sdk not set in local.properties\"\napply from: \"$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter Library\nDESCRIPTION: Links the Flutter library (`FLUTTER_LIBRARY`) and other dependencies (GTK, GLIB, GIO) to the `flutter` interface library. This ensures that targets that link to `flutter` also link to these dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Operator == and hashCode for Value Classes in Dart\nDESCRIPTION: Standard implementation pattern for equality operator and hashCode in Dart value classes. This ensures consistent behavior for value comparison and hashing, which is essential for collections.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  bool operator ==(Object other) {\n    if (other.runtimeType != runtimeType) {\n      return false;\n    }\n    return other is Foo\n        && other.bar == bar\n        && other.baz == baz\n        && other.quux == quux;\n  }\n\n  @override\n  int get hashCode => Object.hash(bar, baz, quux);\n```\n\n----------------------------------------\n\nTITLE: Throwing Uncaught Future Error in Flutter Test\nDESCRIPTION: This snippet shows a test case where an uncaught Future error is thrown. The error message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - uncaught Future error'.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nmain.<anonymous closure> (.+[/\\\\]dev[/\\\\]automated_tests[/\\\\]integration_test[/\\\\]exception_handling_test.dart:18:5)\n```\n\n----------------------------------------\n\nTITLE: Adding SSH origin remote to local clone\nDESCRIPTION: This command adds the user's forked repository as the 'origin' remote to the local Git clone using SSH. Replace ████████ with the user's GitHub account name. This allows pushing changes to the user's fork.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"git remote add origin git@github.com:████████/flutter.git\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the application bundle, including executable, ICU data, Flutter library, and bundled libraries. Handles asset directory management.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules in CMake\nDESCRIPTION: Configures installation rules for the application bundle, including copying of executable, ICU data, Flutter library, plugin libraries and assets to their respective directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Ninja targets in JSON\nDESCRIPTION: This snippet demonstrates how to define Ninja build targets and their associated GN configurations within a JSON file. The `config` key specifies the GN configuration, and `targets` lists the Ninja targets to build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"ninja\": {\n    \"config\": \"host_debug\",\n    \"targets\": [\n        \"flutter/build/archives:artifacts\",\n        \"flutter/build/archives:embedder\",\n    ]\n},\n\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Version Compile Definitions\nDESCRIPTION: Adds preprocessor definitions for Flutter version information to the build configuration. Includes major, minor, patch, and build version numbers.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"))\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests\nDESCRIPTION: This snippet describes the use of a shell script to run tests for a Flutter app on an iOS simulator. It is essential for validating the functionality of the app in a controlled environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"#!/bin/bash\\nset -e\\n\\n# Script to run iOS tests for the Flutter scenario app.\\n# This should be executed from the root of the Flutter repository.\\n\\ncd ios\\n\\n# Run tests using xcodebuild\\nxcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\"\n```\n\n----------------------------------------\n\nTITLE: Fetching and Checking out Beta Branch with Git\nDESCRIPTION: These commands are used to fetch the latest changes from the upstream repository and checkout the beta branch using Git. This is useful for contributors who have a local checkout of the Flutter repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n`git fetch upstream && git checkout upstream/beta`\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem in CMake\nDESCRIPTION: Sets up the root filesystem for cross-building if a Flutter target platform sysroot is specified. This configures the system root and find root paths for the build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows\nDESCRIPTION: Sets up installation rules for the Flutter application, including copying runtime dependencies, assets, and AOT library to the correct locations.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Libraries and Setting Up System Dependencies\nDESCRIPTION: Adds Flutter libraries and configures GTK dependencies for the Linux application. This section includes the Flutter managed directory and sets up the required GTK3 package.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Temporary Disabling Deprecated Member Use Warnings\nDESCRIPTION: This YAML configuration snippet is used to temporarily disable warnings for deprecated member use in the codebase during analysis. This step is necessary before running Dart analysis to ensure all deprecations are captured.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Packages-Gardener-Rotation.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndeprecated_member_use: ignore\n```\n\n----------------------------------------\n\nTITLE: Compilation Standard Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings across targets, including C++17 standard, warning levels, exception handling, and debug definitions\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Build Configuration and Mode Selection\nDESCRIPTION: Handles multi-configuration and single-configuration build scenarios, setting default build types and configurations for Debug, Profile, and Release modes\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dart Comment Example (Good)\nDESCRIPTION: Illustrates the correct way to start a sentence in Dart documentation. The sentence begins with a capital letter, adhering to grammar rules. It also demonstrates the use of square brackets to reference a parameter that is also a property.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD\n\n/// The [foo] argument must not be null.\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Build Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++14 support, warning flags, and optimization options for different build types.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Compiled Engine Artifacts in Dart\nDESCRIPTION: This snippet demonstrates how to use the engine_repo_tools library to locate the most recent compiled engine artifacts in the out/ directory. It specifically looks for the compile_commands.json file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_repo_tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:engine_repo_tools/engine_repo_tools.dart';\n\nvoid main() {\n  final engine = Engine.findWithin();\n  final latest = engine.latestOutput();\n  if (latest != null) {\n    print('Latest compile_commands.json: ${latest.compileCommandsJson?.path}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Platform View in Plugin for iOS Flutter App\nDESCRIPTION: This snippet demonstrates how to register the platform view in a Flutter plugin for iOS. It creates the view factory and registers it with the plugin registrar.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_10\n\nLANGUAGE: objc\nCODE:\n```\n#import \"FLPlugin.h\"\n#import \"FLNativeView.h\"\n\n@implementation FLPlugin\n\n+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar>*)registrar {\n  FLNativeViewFactory* factory =\n      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];\n  [registrar registerViewFactory:factory withId:@\"<platform-view-type>\"];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Publishing mouse-input-view\nDESCRIPTION: This shell command publishes the `mouse-input-view` package to the Fuchsia package repository. It utilizes `fx pm publish` with appropriate parameters to specify the package location and repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$FUCHSIA_DIR/.jiri_root/bin/fx pm publish -a -repo $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files -f $ENGINE_DIR/out/fuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/mouse-input-view/mouse-input-view/mouse-input-view.far\n```\n\n----------------------------------------\n\nTITLE: Building Host Binaries for macOS\nDESCRIPTION: These commands use `gn` to generate build files and `ninja` to compile the host binaries required for the Flutter tool to build applications targeting macOS. The `--unopt` flag specifies an unoptimized build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/darwin/macos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\n# Perform the host build.\n./tools/gn --unopt\nninja -C ../out/host_debug_unopt\n\n```\n\n----------------------------------------\n\nTITLE: Building Flutter iOS Integration Tests\nDESCRIPTION: This snippet shows how to build iOS integration tests for a Flutter project. It includes steps for building the app and generating test artifacts using xcodebuild.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Pass --simulator if building for the simulator.\nflutter build ios integration_test/foo_test.dart --release\n\npushd ios\nxcodebuild build-for-testing \\\n  -workspace Runner.xcworkspace \\\n  -scheme Runner \\\n  -xcconfig Flutter/Release.xcconfig \\\n  -configuration Release \\\n  -derivedDataPath \\\n  $output -sdk iphoneos\npopd\n\npushd $product\nfind . -name \"Runner_*.xctestrun\" -exec zip -r --must-match \"ios_tests.zip\" \"Release-iphoneos\" {} +\npopd\n```\n\n----------------------------------------\n\nTITLE: Modifying kMockResolver in C++\nDESCRIPTION: This diff shows how to update the `kMockResolver` to include the newly added mock GLES function. It adds an `else if` clause to check for the function name and return a pointer to the function if it matches. If the function name doesn't match, it defaults to `glDoNothing`.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cc\nCODE:\n```\n+ else if (strcmp(name, \"glFooBar\") == 0) {\n+  return reinterpret_cast<void*>(&glFooBar);\n  } else {\n   return reinterpret_cast<void*>(&glDoNothing);\n  }\n```\n\n----------------------------------------\n\nTITLE: Archiving Build Artifacts in JSON\nDESCRIPTION: This JSON snippet defines an archive configuration for handling build artifacts in a CI system, specifying their storage type, base path, and associated realm. It is crucial for uploading artifacts to specified storage services such as GCS or CAS.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"host_debug\",\n  \"base_path\": \"out/host_debug/zip_archives/\",\n  \"type\": \"gcs\",\n  \"include_paths\": [\n     \"out/host_debug/zip_archives/linux-x64/artifacts.zip\"\n  ],\n  \"realm\": \"production\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Fragment Value in YAML for Flutter Code Migration\nDESCRIPTION: Shows how to define a fragment value in a YAML configuration file to copy specific code pieces during automated migrations. Fragments are identified by a dot-separated list of accessors that reference parts of the code structure.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nkind: fragment\nvalue: 'arguments[0]'\n```\n\n----------------------------------------\n\nTITLE: Running Unicode Sync Script in Dart\nDESCRIPTION: This command executes the Dart script `unicode_sync_script.dart` located in the `tool` directory. The script is responsible for generating code based on Unicode property files. Ensure that the working directory is `third_party/web_unicode` before running the script.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ndart tool/unicode_sync_script.dart\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Ref for AMD64 Package - Shell Script\nDESCRIPTION: This snippet illustrates the procedure to set the latest reference for the AMD64 mobile provisioning package. Similar to the ARM64 snippet, it requires the instance ID from the latest upload.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncipd set-ref flutter_internal/mac/mobileprovision/mac-amd64 -ref latest -version AMD64_INSTANCE_ID\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Build Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to build targets, including C++14 support, wall warnings as errors, and optimization flags for non-debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Struct in C++ Header\nDESCRIPTION: Example of defining a simple struct 'A' in a C++ header file. This illustrates how changes to header files can affect other files that import them, potentially causing issues with Clang Tidy checks.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-pre-submits-and-post-submits.md#2025-04-21_snippet_1\n\nLANGUAGE: h\nCODE:\n```\n// impeller/a.h\nstruct A {}\n```\n\n----------------------------------------\n\nTITLE: Defining an Element - YAML\nDESCRIPTION: This YAML snippet illustrates how to specify an element within the API that has been changed, including its URIs and type information. It demonstrates how to represent classes and methods with the necessary structural keys.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuris: ['lib.dart']\nclass: 'C'\n```\n\n----------------------------------------\n\nTITLE: Measuring Startup Time in Flutter\nDESCRIPTION: This command runs the Flutter application in profiling mode with trace-startup enabled to measure startup time. The results are output to the logs and also stored in `build/start_up_info.json`.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout_hybrid_composition/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter run --profile --trace-startup\n```\n\n----------------------------------------\n\nTITLE: Configuring GLFW Dependencies for Flutter Embedder in CMake\nDESCRIPTION: Sets GLFW build options, finds OpenGL package, adds GLFW subdirectory, and links libraries to the main target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(GLFW_BUILD_EXAMPLES \"\" OFF)\noption(GLFW_BUILD_TESTS \"\" OFF)\noption(GLFW_BUILD_DOCS \"\" OFF)\noption(GLFW_INSTALL \"\" OFF)\nfind_package(OpenGL REQUIRED COMPONENTS EGL)\ninclude_directories(${OPENGL_INCLUDE_DIRS})\nadd_subdirectory(${CMAKE_SOURCE_DIR}/../../third_party/glfw glfw)\ntarget_link_libraries(flutter_glfw glfw OpenGL::EGL)\ninclude_directories(${CMAKE_SOURCE_DIR}/../../third_party/glfw/include)\n```\n\n----------------------------------------\n\nTITLE: Updating Android Gradle Properties for Flutter\nDESCRIPTION: This snippet updates the Gradle wrapper version in the `gradle-wrapper.properties` file from 3.3 to 4.1, aligning with new Flutter projects after the specified update.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nIn `android/gradle/wrapper/gradle-wrapper.properties`, replace `3.3` with `4.1` in the last line.\n```\n\n----------------------------------------\n\nTITLE: Creating the Flutter Library Interface\nDESCRIPTION: This snippet creates an interface library for Flutter and sets its include directories and linked libraries, ensuring it uses the system dependencies defined earlier.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Ref for ARM64 Package - Shell Script\nDESCRIPTION: This snippet demonstrates how to set the latest reference for the ARM64 mobile provisioning package using the cipd command-line tool. It requires the instance ID from the latest upload as a parameter.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncipd set-ref flutter_internal/mac/mobileprovision/mac-arm64 -ref latest -version ARM64_INSTANCE_ID\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: A custom CMake function that prepends a prefix to each element in a list, serving as a replacement for list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running Java JUnit Tests\nDESCRIPTION: This script is used to build and run JUnit tests for the Android embedding of the Flutter engine. It builds a .jar file containing the tests and dependencies and executes it using the system's Java runtime, with JDK v8 required.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntesting/run_tests.py --type=java\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Flags for Flutter Windows Application\nDESCRIPTION: Configures linker and compiler flags specifically for the Profile build mode, which inherits settings from Release mode.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Example in Packages\nDESCRIPTION: This command runs a Flutter example from the `flutter/packages` directory. It is useful for manual testing. It uses the `flutter run` command with `--local-engine-host` and `--local-engine` flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PACKAGES/packages/video_player/video_player_android/example\nflutter run \\\n  --local-engine-host=$ENGINE/out/host_debug_unopt_arm64 \\\n  --local-engine=$ENGINE/out/android_debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring .gclient File for RBE in Flutter Engine\nDESCRIPTION: This snippet shows how to add the 'use_rbe' entry to the .gclient file to enable Remote Build Execution for the Flutter engine project.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nsolutions = [\n  {\n    \"managed\": False,\n    \"name\": \"src/flutter\",\n    \"url\": \"git@github.com:zanderso/engine.git\",\n    \"custom_deps\": {},\n    \"custom_vars\": {\n      \"use_rbe\": True,\n    },\n    \"deps_file\": \"DEPS\",\n    \"safesync_url\": \"\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Executable\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the executable, specifying that libraries should be searched for in the 'lib' subdirectory relative to the executable's location. This helps the executable find its shared libraries at runtime.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Classpath in Flutter-Android Project\nDESCRIPTION: This change updates Android build tools classpath version from 2.3.3 to 3.0.1, ensuring compatibility with the newer Gradle version used by Flutter tooling.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_2\n\nLANGUAGE: Gradle\nCODE:\n```\ndependencies {\n    classpath 'com.android.tools.build:gradle:3.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Class with Deprecated Method and New Method\nDESCRIPTION: This Dart code snippet demonstrates a class `C` with a deprecated method `oldName` and a new method `newName`. The `oldName` method simply calls the `newName` method, serving as a temporary bridge during the deprecation period.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass C {\n  @deprecated\n  int oldName(String s) => newName(s);\n\n  int newName(String s) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Defines a custom build command that runs the Flutter tool backend script to generate necessary build artifacts. Uses a phantom output to ensure the command runs on every build.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrapper code. Sets up compilation settings and dependencies for plugin integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target with the specified binary name, source files, and dependencies. This creates the final executable file for the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux Application\nDESCRIPTION: Sets up build configuration options with Debug as the default build type when not explicitly specified. Defines debug, profile, and release as available build types.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Installs any bundled libraries from plugins to the lib directory within the build bundle. This ensures that any native dependencies of plugins are included in the final application bundle.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Architecture Specific gen_snapshot\nDESCRIPTION: This Bash command is used to generate a 'gen_snapshot' binary configured for a specific architecture, such as 'armv7' or 'aarch64'. It allows developers to customize the target architecture and align calling conventions.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./flutter/tools/gn --android --runtime-mode release\n```\n\nLANGUAGE: bash\nCODE:\n```\n./flutter/tools/gn --android --runtime-mode release --android-cpu arm64\n```\n\n----------------------------------------\n\nTITLE: Pie Chart of Android Version Distribution\nDESCRIPTION: A mermaid pie chart showing the distribution of Android versions as of June 04, 2024, with 84.5% of devices running Android 10 or higher, which is required for Vulkan support in Impeller.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\npie title Vulkan version\n\t\"Android 10 or higher\" : 84.5\n\t\"Android 9 and lower\" : 15.5\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library in CMake\nDESCRIPTION: Defines a Flutter interface library in CMake and configures its include directories and dependencies. This sets up the necessary linking for applications to use the Flutter engine on Linux.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: ClampedNumeric Saturation Example in C++\nDESCRIPTION: This example demonstrates that `ClampedNumeric` saturation is not sticky. A value that saturates at `INT_MAX` can be decremented to `INT_MAX - 1` in a subsequent operation, losing the saturated state.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nClampedNumeric<int> value = INT_MAX;\n++value;  // value is still INT_MAX, due to saturation.\n--value;  // value is now (INT_MAX - 1), because saturation is not sticky.\n```\n\n----------------------------------------\n\nTITLE: Throwing FlutterError in Flutter Test\nDESCRIPTION: This snippet demonstrates a test case where a FlutterError is thrown. The assertion message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - FlutterError'.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nmain.<anonymous closure> (.+[/\\\\]dev[/\\\\]automated_tests[/\\\\]integration_test[/\\\\]exception_handling_test.dart:13:5)\n```\n\n----------------------------------------\n\nTITLE: Uploading Java Version to CIPD - Shell\nDESCRIPTION: This command uploads the new Java version package to CIPD. It specifies the package path, name, and tag, ensuring that the structure and naming conventions are correct before executing the command.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncipd create -in <path_to_new_java_version_package>  -name flutter/java/openjdk/<platform-architecture> -tag version:<java_version>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Assets Installation in CMake\nDESCRIPTION: Configures the installation of Flutter assets, ensuring a clean copy by removing any existing assets directory before reinstalling.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Find system dependencies\nDESCRIPTION: Uses `find_package` and `pkg_check_modules` to locate and import GTK, GLIB, and GIO system libraries.  These libraries are essential for building a GTK-based Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Basic DeviceLab Test Implementation - Dart\nDESCRIPTION: Example implementation of a basic DeviceLab test using the testing framework. Shows how to define a task and report success or failure results.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter_devicelab/framework/framework.dart';\n\nFuture<void> main() async {\n  await task(() async {\n    ... do something interesting ...\n\n    // Aggregate results into a JSONable Map structure.\n    Map<String, dynamic> testResults = ...;\n\n    // Report success.\n    return new TaskResult.success(testResults);\n\n    // Or you can also report a failure.\n    return new TaskResult.failure('Something went wrong!');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses `find_package` and `pkg_check_modules` to locate and import system-level dependencies such as GTK, GLIB, and GIO. These are essential for the Flutter Linux GTK embedding.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Finding System-level Dependencies\nDESCRIPTION: This snippet uses PkgConfig to find and link system-level dependencies like GTK, GLIB, and GIO, which are necessary for the Flutter library.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Set Install Bundle Directories\nDESCRIPTION: Sets the directories for data and libraries within the installation bundle. `INSTALL_BUNDLE_DATA_DIR` is where data files (e.g., assets) are placed, and `INSTALL_BUNDLE_LIB_DIR` is for shared libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test Example\nDESCRIPTION: This excerpt illustrates how to run the 'embedder' integration test, using the same 'run_integration_test.sh' script. This serves as an example for users to follow when executing their own integration tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh embedder --no-lto\n```\n\n----------------------------------------\n\nTITLE: Comparing AOT Snapshot Sizes Using Dart Tool in Flutter\nDESCRIPTION: This bash command shows how to use a custom Dart tool (compare_size.dart) to compare two JSON files containing AOT snapshot size information. It uses the Dart SDK from the Flutter engine build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$FLUTTER_ENGINE/out/host_debug_unopt/dart-sdk/bin/dart \\\n  before.json                                          \\\n  after.json\n```\n\n----------------------------------------\n\nTITLE: Defining a Transform with Changes - YAML\nDESCRIPTION: This YAML snippet represents a sample transform that includes a title, date, and changes to be applied to an API element. The format follows the prescribed structure for defining transformations within the Flutter project.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: 'Descriptive title'\ndate: 2020-09-14\nelement: ...\nchanges:\n  - ...\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and Build Rules\nDESCRIPTION: The snippet sets the path for Flutter-managed directories and includes Flutter-specific build scripts. It integrates Flutter libraries and tools necessary for compilation and plugin management.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Uploading Android SDK to CIPD - Bash Script\nDESCRIPTION: This Bash script is used to create and upload Android SDK packages to CIPD. It automates the download and packaging process, ensuring that the Flutter engine has a stable version to depend on.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tools/android-sdk && ./create_cipd_packages.sh <new_version_tag> <path_to_your_local_android_sdk>\n```\n\n----------------------------------------\n\nTITLE: Setting Version Tag for ARM64 Package - Shell Script\nDESCRIPTION: In this snippet, the command used to set a version tag for the ARM64 mobile provisioning package is shown. The command tags the latest upload with a specified year, aiding in version control.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncipd set-tag flutter_internal/mac/mobileprovision/mac-arm64 -tag \"version:to_2025\" -version ARM64_INSTANCE_ID\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros for C++ Standard Library - CMake\nDESCRIPTION: This snippet disables specific Windows macros that may conflict with C++ Standard Library functions to ensure correct function usage and foster better compatibility with standard C++.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n```\n\n----------------------------------------\n\nTITLE: Adding Engine Tool to PATH in Shell\nDESCRIPTION: This snippet demonstrates how to add the `et` command-line tool to the system PATH, allowing for global access to the tool's functionalities. Ensure that the path specified points to the correct location in your Flutter engine setup.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPATH=$PATH:/path/to/engine/flutter/bin\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration for Flutter Linux Application\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, and application identifiers. This establishes the foundation for the Flutter Linux build.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"ui\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"io.flutter.ui\")\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Libraries and Tools in CMake\nDESCRIPTION: Sets up Flutter library paths and includes plugin build rules by adding Flutter managed directory and generated plugins configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Running Cubic Bezier Benchmark - Flutter Shell\nDESCRIPTION: This shell script runs the cubic bezier performance benchmark on a device using `flutter drive` with specified test and driver scripts. It generates results in JSON files in the build directory. Requires Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile -t test_driver/run_app.dart --driver test_driver/cubic_bezier_perf_test.dart\n```\n\n----------------------------------------\n\nTITLE: Running Header Guard Check Tool\nDESCRIPTION: This command executes the header guard check tool using Dart. It assumes the user is in the 'flutter' root directory of the engine repository and runs the `main.dart` script located in the `tools/header_guard_check/bin` directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"# Assuming you are in the `flutter` root of the engine repo.\\ndart ./tools/header_guard_check/bin/main.dart\"\n```\n\n----------------------------------------\n\nTITLE: Subprojects Build Directory Configuration in Flutter\nDESCRIPTION: This snippet configures subprojects' build directories and evaluations, preventing errors related to lexicographic order dependencies when building Flutter apps.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_3\n\nLANGUAGE: Gradle\nCODE:\n```\nsubprojects {\n    project.buildDir = \"${rootProject.buildDir}/${project.name}\"\n}\nsubprojects {\n    project.evaluationDependsOn(':app')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting output directory properties for Flutter Linux build\nDESCRIPTION: Configures the output directory for the executable to avoid users running the unbundled copy directly, placing it in an intermediates directory instead.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comment Practices in Dart\nDESCRIPTION: This snippet illustrates good and bad practices for writing comments in Dart code, particularly for TODOs and workarounds.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// BAD:\n\n// What should this be?\n\n// This is a workaround.\n\n\n// GOOD:\n\n// According to this specification, this should be 2.0, but according to that\n// specification, it should be 3.0. We split the difference and went with\n// 2.5, because we didn't know what else to do.\n\n// TODO(username): Converting color to RGB because class Color doesn't support\n//                 hex yet. See http://link/to/a/bug/123\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPS origin remote to local clone\nDESCRIPTION: This command adds the user's forked repository as the 'origin' remote to the local Git clone using HTTPS. Replace ████████ with the user's GitHub account name. This is an alternative to SSH.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"git remote add origin https://github.com/████████/flutter.git\"\n```\n\n----------------------------------------\n\nTITLE: Setting Max Parallel Forks for Debugging\nDESCRIPTION: This diff shows how to temporarily reduce the number of parallel forks for running tests to help with debugging timeouts or hangs. Setting `maxParallelForks` to `1` forces tests to run sequentially.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ maxParallelForks availableProcessors // The CI bot has 8 CPUs.\n- maxParallelForks 1\n```\n\n----------------------------------------\n\nTITLE: Running Web Benchmark - Flutter Shell\nDESCRIPTION: This shell command runs web benchmarks using `flutter run` in various modes and renderers like CanvasKit or Skwasm. Useful for performance profiling and executing in an environment similar to devicelab's setup.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd dev/benchmarks/macrobenchmarks\n\n# Runs in profile mode\nflutter run --profile -d web-server lib/web_benchmarks.dart\n```\n\n----------------------------------------\n\nTITLE: Applying Automatic Fixes\nDESCRIPTION: This command executes the header guard check tool with the `--fix` flag. This enables the tool to automatically correct header files that do not conform to the required header guard pattern. It uses Dart to run the tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"dart ./tools/header_guard_check/bin/main.dart --fix\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Options\nDESCRIPTION: This snippet demonstrates how to run specific unit tests by passing options to the test script. It includes options to disable optimizations, specify count of test runs, and filter by package or test.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --unopt\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --count N\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --package-filter flow_tests-0.far\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --package-filter flutter_runner_tests-0.far --gtest-filter \"*FlatlandConnection*\"\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: Applies predefined standard build settings to the target. This helper function likely sets common compiler flags and build configurations for Flutter applications.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Pre-caching Flutter Binary Artifacts\nDESCRIPTION: Command to ensure that the Flutter tool's cache of binary artifacts is up-to-date.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter precache\n```\n\n----------------------------------------\n\nTITLE: Installing Executable Target\nDESCRIPTION: Installs the executable target to the specified destination within the build bundle. This places the executable in the correct location for distribution.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Application Executable Target\nDESCRIPTION: Defines the main executable target for the Flutter application, including all necessary source files. The binary name is defined in the top-level CMakeLists.txt and referenced here.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Keycode Database - Shell\nDESCRIPTION: This shell command runs the keycode generator by collecting data anew from online sources, allowing for an updated database of physical and logical keys before generating the relevant files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_keycodes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"/PATH/TO/ROOT/bin/gen_keycodes --collect\"\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake for Flutter\nDESCRIPTION: Implements a custom function to prepend a prefix to each element of a list, mimicking the functionality of list(TRANSFORM ... PREPEND ...) for CMake versions below 3.12.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running C++ Engine Unit Tests with Variant\nDESCRIPTION: This shell command executes C++ unit tests for the Flutter engine, specifically targeting a specified build variant. The `--variant` flag allows selecting different build configurations like `host_debug_unopt_arm64`.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntesting/run_tests.py --type=engine --variant=host_debug_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Defining ReactorGLES Worker Class in C++\nDESCRIPTION: Creates a custom ReactorGLES::Worker subclass to handle OpenGL ES threading concerns.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nclass ReactorWorker final : public impeller::ReactorGLES::Worker {\n public:\n  ReactorWorker() = default;\n\n  // |ReactorGLES::Worker|\n  ~ReactorWorker() override = default;\n\n  ReactorWorker(const ReactorWorker&) = delete;\n\n  ReactorWorker& operator=(const ReactorWorker&) = delete;\n\n  // |ReactorGLES::Worker|\n  bool CanReactorReactOnCurrentThreadNow(\n      const ReactorGLES& reactor) const override {\n    return true;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Project in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization options.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Disabling Conflicting Windows Macros in CMake\nDESCRIPTION: This snippet disables certain Windows macros that may conflict with standard C++ library functions, specifically the NOMINMAX macro which can interfere with maximum and minimum definitions.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings for Flutter\nDESCRIPTION: Configures CMake policies, sets installation path, and defines cross-building settings if a target platform sysroot is specified.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Thread Sanitizer Tests\nDESCRIPTION: This set of commands demonstrates how to build Flutter Engine with Thread Sanitizer enabled to catch data races, and run the embedder unit tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./flutter/tools/gn --runtime-mode debug --tsan --unoptimized --no-goma\n$ autoninja -C out/host_debug_unopt\n$ source ./flutter/testing/sanitizer_suppressions.sh\n$ ./out/host_debug_unopt/embedder_unittests\n```\n\n----------------------------------------\n\nTITLE: Preparing Build Files and Building Binaries\nDESCRIPTION: This snippet executes build commands to configure and generate the necessary binaries for testing the Dart JIT runner on Fuchsia, using the GN and Ninja build systems.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto\nninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia fuchsia_tests\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target is responsible for assembling these files using the custom command defined earlier.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Scrolling Benchmark with Flutter\nDESCRIPTION: This command initiates a scrolling performance benchmark using Flutter's drive tool in profile mode. It generates a summary of scrolling performance in JSON format. Ensure Flutter is installed and properly set up on the device or simulator prior to running this command.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --profile test_driver/scroll_perf.dart\n```\n\n----------------------------------------\n\nTITLE: Add Executable\nDESCRIPTION: Adds the executable target. It specifies the source files (`main.cc`, `my_application.cc`, and `${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc`) that will be compiled into the executable named by `BINARY_NAME` which is `flutter_gallery`.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing VSCode Workspace Configuration - Shell Script\nDESCRIPTION: This shell script (`refresh.sh`) is utilized to refresh the VSCode workspace configuration by processing the YAML file and updating the engine's configuration accordingly. It requires that specific tools such as json5 and yq are installed on the user's system.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/vscode_workspace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./refresh.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Module for Android Host App\nDESCRIPTION: This snippet shows the command to create a Flutter module that will be used by an Android host application. It initializes a new Flutter module project in a sibling folder to the host app. Dependencies include Flutter SDK installed and available in the environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/pure_android_host_apps/android_host_app_v2_embedding/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ flutter create -t module hello\n```\n\n----------------------------------------\n\nTITLE: Dart Comment Example (Bad)\nDESCRIPTION: Demonstrates an incorrect way to start a sentence in Dart documentation.  The sentence begins with a lowercase letter, violating grammar rules. This is used as a negative example to show what not to do.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// BAD\n\n/// [foo] must not be null.\n```\n\n----------------------------------------\n\nTITLE: Overriding toString Method in Dart\nDESCRIPTION: Pattern for overriding toString in simple classes to aid debugging. This implementation uses objectRuntimeType which handles the runtime type correctly in both debug and release modes.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  String toString() => '${objectRuntimeType(this, 'NameOfObject')}($bar, $baz, $quux)';\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bad Test Naming in Flutter\nDESCRIPTION: These examples demonstrate poor test naming practices in Flutter, where tests are named after the object under test rather than the behavior, providing little to no value to the reader.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Bad test name\ntest('ListView', () {...});\n\n// Bad test name\ntest('RenderViewport', () {...});\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version Requirement\nDESCRIPTION: The snippet sets the minimum required version of CMake to 3.10. No dependencies are needed for this operation as it is intrinsic to CMake syntax. This defines the baseline CMake features available for use in the file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: C++ Header Guard Pattern\nDESCRIPTION: This code snippet illustrates the expected header guard pattern for C++ header files. It ensures that header files are included only once by defining a unique macro based on the file path.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_1\n\nLANGUAGE: h\nCODE:\n```\n\"// path/to/file.h\\n\\n#ifndef PATH_TO_FILE_H_\\n#define PATH_TO_FILE_H_\\n...\\n#endif  // PATH_TO_FILE_H_\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Configures the Flutter managed directory, adds it as a subdirectory, and sets up system-level dependencies using pkg-config, including GTK and upower-glib.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0 upower-glib)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Compiling Protocol Buffers for Flutter Conductor State\nDESCRIPTION: This script recompiles the Dart files from the conductor_state.proto file, formats them, and adds a license header. It should be run after any changes to the proto file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./compile_proto.sh\n```\n\n----------------------------------------\n\nTITLE: Applying build settings and linking dependencies for Flutter Linux application\nDESCRIPTION: Applies standard build settings to the application target and links necessary dependencies including Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Commits all staged changes with a descriptive message.  The `-a` flag automatically stages all modified and deleted files. A well-written commit message should explain the problem and the solution.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit commit -a -m \"<your informative commit message>\"\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Data File Structure\nDESCRIPTION: This YAML snippet illustrates the basic structure of a data file used for data-driven fixes. It contains the required `version` and `transforms` keys. The `version` indicates the file format version, and `transforms` is a list of individual transform objects.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ntransforms:\n  - ...\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Dart Youtube Link\nDESCRIPTION: Shows how to embed a YouTube video within Dart documentation using the `{@youtube}` tag.  The tag requires the video's width and height as the first two arguments, followed by the video's URL.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// {@youtube 560 315 https://www.youtube.com/watch?v=<id>}\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 for Flutter Development on macOS\nDESCRIPTION: This snippet demonstrates how to install Rosetta 2, which is necessary for running x86 applications on Apple Silicon Macs. The command should be run in the terminal and will agree to the license automatically.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/macos/Developing-with-Flutter-on-Apple-Silicon.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"sudo softwareupdate --install-rosetta --agree-to-license\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Context Subclass for IMM Handling (Java)\nDESCRIPTION: This code creates a subclass of Context that returns the same InputMethodManager as the Flutter View instead of the real IMM for the window when getSystemService is queried.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ngetSystemService\n```\n\n----------------------------------------\n\nTITLE: Measuring Startup Time with Flutter\nDESCRIPTION: This command runs a Flutter application in profile mode while tracing its startup time, providing logs with detailed startup performance metrics. Required prerequisites include Flutter installation and connectivity to the target device.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter run --profile --trace-startup\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds of Flutter Windows App\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compilation library only for Profile and Release builds, which optimizes performance in non-debug configurations.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries\nDESCRIPTION: Defines static libraries for Flutter plugin and app wrappers, including core, plugin, and application-specific source files. Manages library dependencies and include paths.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and GTK Dependencies for Linux Application\nDESCRIPTION: Sets up the Flutter managed directory, adds it as a subdirectory, and configures GTK dependencies using pkg-config. Defines the application ID as a preprocessor definition.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Plugin Wrapper Configuration\nDESCRIPTION: Configures the Flutter plugin wrapper library with core and plugin-specific source files. Sets up compilation flags and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: Defines the executable target, specifies source files, and creates the executable. It uses GLOB_RECURSE to find all source files and then adds an executable target.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXE_NAME embedder_example_vulkan)\n\nfile(GLOB_RECURSE SOURCE_FILES \"src/*.cc\" \"src/*.h\")\nadd_executable(${EXE_NAME} ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and binary name. Defines the GTK application identifier and sets modern CMake behaviors.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\nset(BINARY_NAME \"hello_world\")\nset(APPLICATION_ID \"io.flutter.examples.hello_world\")\ncmake_policy(SET CMP0063 NEW)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter dart fix Tests Locally with Shell Command\nDESCRIPTION: This command executes the `dart fix` tool with the `--compare-to-golden` flag to test Flutter's data-driven fixes against golden master files in the test_fixes directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_driver/test_fixes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake\nDESCRIPTION: Initializes core project settings including minimum CMake version, project name, and C++ standard version. Sets the binary name and application identifier for the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\nset(CMAKE_CXX_STANDARD 17)\nset(BINARY_NAME \"platform_view\")\nset(APPLICATION_ID \"io.flutter.examples.platform_view\")\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Engine Version in Bash\nDESCRIPTION: This snippet demonstrates how to set a custom engine version using an environment variable in Bash. It's useful for advanced use-cases or CI platforms where a specific prebuilt engine version is required.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Engine-artifacts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ FLUTTER_PREBUILT_ENGINE_VERSION=abc123 flutter --version\n..\nEngine • revision abc123 ..\n..\n```\n\n----------------------------------------\n\nTITLE: Overriding checkInputConnectionProxy in PlatformViewsController (Java)\nDESCRIPTION: This code snippet overrides the checkInputConnectionProxy method to make Android treat the Flutter View as a proxy for the Input Method Editor when communicating with embedded Android Views.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncheckInputConnectionProxy\n```\n\n----------------------------------------\n\nTITLE: Reinstalling ffi Ruby Gem with Special Flag\nDESCRIPTION: This snippet shows how to uninstall the existing ffi gem and reinstall it with the --enable-libffi-alloc flag to resolve potential crashes in CocoaPods related to ffi.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/macos/Developing-with-Flutter-on-Apple-Silicon.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"sudo gem uninstall ffi && sudo gem install ffi -- --enable-libffi-alloc\"\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests with Shell Script\nDESCRIPTION: This shell command executes iOS tests using a specified configuration for the Flutter Scenario app. It requires building the engine with the correct configuration for either Intel or ARM Macs before running the tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# From the root of the engine repository\n$ ./testing/ios_scenario_app/run_ios_tests.sh ios_debug_sim_unopt\n```\n\n----------------------------------------\n\nTITLE: Verifying Flutter Version\nDESCRIPTION: This command displays the currently installed Flutter version, allowing developers to verify that they are using the correct beta build. It helps to confirm the successful switch to the beta channel and upgrade process.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n`flutter --version`\n```\n\n----------------------------------------\n\nTITLE: Starting Fuchsia Package Server\nDESCRIPTION: This snippet demonstrates how to start the Fuchsia package server which is necessary before running Flutter integration tests. The 'cd' command is used to navigate to the Fuchsia directory specified by the environment variable 'FUCHSIA_DIR'.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd \"$FUCHSIA_DIR\"\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Text in Flutter Widget\nDESCRIPTION: Example of accessing a localized button label using MaterialLocalizations in a widget build method. Shows how to retrieve the cancelButtonLabel translation for the current context.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return TextButton(\n    child: Text(\n      MaterialLocalizations.of(context).cancelButtonLabel,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Finding and Linking GTK Dependency\nDESCRIPTION: Finds the GTK (GIMP Toolkit) library using PkgConfig and links it to the target. This enables the application to use GTK for its graphical user interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build with Vulkan Support on macOS\nDESCRIPTION: Command to generate Flutter build configuration with Vulkan support enabled for Impeller on macOS arm64 architecture. The command enables the Vulkan backend for Impeller, builds in unoptimized mode, and targets arm64 CPU architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Setting-up-MoltenVK-on-macOS-for-Impeller.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flutter/tools/gn --impeller-enable-vulkan --unopt --mac-cpu arm64\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library (Non-Debug)\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the library directory, but only for non-Debug builds. AOT compilation optimizes performance in Release and Profile builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Functions as a replacement for list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for Flutter Windows Runner\nDESCRIPTION: Links the required Flutter libraries and Windows system libraries to the executable and sets up the include directories. Dependencies include the Flutter engine, wrapper app, and Windows Desktop Window Manager API.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Vulkan Validation in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to enable Vulkan Validation Layers in an Android application by adding a meta-data tag to the AndroidManifest.xml file. It should be placed under the <application> tag to take effect.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_validation_layers.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"io.flutter.embedding.android.EnableVulkanValidation\"\n    android:value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Parameter Change - YAML\nDESCRIPTION: This YAML snippet shows how to describe an addition of a type parameter to an element, outlining keys like kind, index, and argument value while ensuring clarity in the type structure.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'addTypeParameter'\nindex: 0\nname: 'T'\nextends: ...\nargumentValue: ...\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App with Locally Built Engine for Profiling\nDESCRIPTION: Command to run a Flutter app using a locally built engine, specifying engine paths and enabling profile mode with Impeller. This connects the app to the custom engine build with profiling capabilities.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflutter --local-engine android_profile_arm64 --local-engine-host host_profile_arm64 run --enable-impeller --profile\n```\n\n----------------------------------------\n\nTITLE: Installation and Bundle Configuration\nDESCRIPTION: Configures installation rules for executable, data files, libraries, and assets, supporting in-place execution and bundle generation\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\n# Install targets, files, and assets\n```\n\n----------------------------------------\n\nTITLE: Defining generators tasks in JSON\nDESCRIPTION: This snippet showcases the structure of a JSON configuration for generators, highlighting the `tasks` property. Generators are scripts used to combine outputs from multiple sub-builds, such as creating universal binaries.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"generators\": {\n    \"tasks\": []\n }\n\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the generated CMake configuration from the ephemeral directory into the current build script. This assumes that 'generated_config.cmake' already exists and provides necessary build parameters.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set ephemeral directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and the Flutter library. This directory is typically used for files that are generated during the build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code launch settings for local engine debugging\nDESCRIPTION: JSON configuration for Visual Studio Code's launch.json file to enable debugging Flutter applications with a locally built engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch (local engine)\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"args\": [\"--local-engine\", \"XXX\", \"--local-engine-host\", \"YYY\"]\n    }\n\n    // Other profiles below..\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Name\nDESCRIPTION: Sets the minimum required CMake version and the project name. This is the standard starting point for a CMake project, defining the CMake version required to process the file and establishing the project's name.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(FlutterEmbedderVulkanGLFW)\n```\n\n----------------------------------------\n\nTITLE: Configuring cross-building sysroot for Flutter Linux build\nDESCRIPTION: Sets up the root filesystem and path configurations for cross-building the Flutter application if a target platform sysroot is specified.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Compilation Settings for Flutter Windows\nDESCRIPTION: Defines a function to apply standard compilation settings including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running Customer Tests with Dart\nDESCRIPTION: This snippet demonstrates how to run customer tests by navigating to the appropriate directory and executing the 'ci.dart' script with a specified commit SHA. This is essential for validating Flutter applications against specific versions.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/customer_testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd dev/customer_testing\n\n```\n\nLANGUAGE: dart\nCODE:\n```\ndart ci.dart [sha]\n\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Flutter Engine Development\nDESCRIPTION: VSCode settings configuration that sets up clangd and clang-format for Flutter engine development with proper paths and arguments.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"settings\": {\n    \"html.format.enable\": false,\n    \"githubPullRequests.ignoredPullRequestBranches\": [\n        \"master\"\n    ],\n    \"clangd.path\": \"engine/src/flutter/buildtools/mac-arm64/clang/bin/clangd\",\n    \"clangd.arguments\": [\n        \"--compile-commands-dir=engine/src/out/host_debug_unopt_arm64\"\n    ],\n    \"clang-format.executable\": \"engine/src/flutter/buildtools/mac-arm64/clang/bin/clang-format\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries for Flutter Linux Application\nDESCRIPTION: Iterates through bundled plugin libraries and installs them to the lib directory. This ensures all required plugin libraries are included in the final application bundle.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring iPhone Simulator for Auto Rotation\nDESCRIPTION: This bash command configures the iPhone Simulator to rotate automatically when signaled by a guest app. This is necessary to ensure proper execution of platform view rotation tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndefaults write com.apple.iphonesimulator RotateWindowWhenSignaledByGuest -int 1\n```\n\n----------------------------------------\n\nTITLE: Defining Test Suites for Flutter Web Tests\nDESCRIPTION: Provides complete specification for running a group of unit tests, including test bundle, run configuration, and required build artifacts\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest-suites:\n  * `name` - Name of the test suite.\n  * `test-bundle` - Compiled test bundle to use.\n  * `run-config` - Configuration for running tests.\n  * `artifact-deps` - Required gn/ninja build artifacts.\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Build Flavors Integration Test\nDESCRIPTION: This markdown snippet defines the purpose of the file, which is to set up integration tests for build flavors in Flutter. It mentions both Android product flavors and Xcode schemes as the targets for these tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flavors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# flavors\n\nIntegration test of build flavors (Android product flavors, Xcode schemes).\n```\n\n----------------------------------------\n\nTITLE: Running CanvasKit Web Benchmarks - Flutter Shell\nDESCRIPTION: Runs all web benchmarks using the CanvasKit renderer via Dart SDK as the devicelab executes them. Executes from the `devicelab` directory with a predefined task file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd dev/devicelab\n\n# Runs using the CanvasKit renderer\n../../bin/cache/dart-sdk/bin/dart bin/run.dart -t bin/tasks/web_benchmarks_canvaskit.dart\n```\n\n----------------------------------------\n\nTITLE: Symbolicating Android Local Engine Builds\nDESCRIPTION: Shows how to invoke the ndk-stack tool on logcat outputs for symbolication of local engine builds. Presumes access to unoptimized (debug) engine build directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nadb logcat | ~/dev/engine/src/third_party/android_tools/ndk/prebuilt/linux-x86_64/bin/ndk-stack -sym ~/dev/engine/src/out/android_debug_unopt\n```\n\n----------------------------------------\n\nTITLE: Running Golden Images Comparison Script in Shell\nDESCRIPTION: This shell command executes the Dart script that compares golden images located in two specified directories. It takes two directory paths as parameters and generates diff images in the current working directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/compare_goldens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart run compare_goldens <dir path> <dir path>\n```\n\n----------------------------------------\n\nTITLE: Setting Version Tag for AMD64 Package - Shell Script\nDESCRIPTION: This snippet details the command for setting a version tag for the AMD64 mobile provisioning package. It helps in managing the versions aligned with the ARM64 package updates.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncipd set-tag flutter_internal/mac/mobileprovision/mac-amd64 -tag \"version:to_2025\" -version AMD64_INSTANCE_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring ktlint Ruleset and Baseline\nDESCRIPTION: Details how to set the ktlint ruleset version and baseline configuration in Android Studio to match the Flutter repository's standards\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n2. Set the ruleset to be the same as the version used in [`.ci.yaml`](../../../.ci.yaml) (as of writing this is 1.5), and the baseline to be `dev/bots/test/analyze-test-input/ktlint-baseline.xml`.\n\n   a. Both of these options should be available under `Android Studio > Settings > Tools > ktlint`.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Interface Library in CMake\nDESCRIPTION: Creates an interface library for Flutter, sets include directories, and links required libraries including GTK, GLIB, and GIO.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories\nDESCRIPTION: Sets the include directories for the `flutter` interface library, adding the ephemeral directory. This allows targets that link to `flutter` to find the necessary header files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy on Flutter Engine\nDESCRIPTION: This command executes the clang_tidy tool on the Flutter engine repository. It assumes that the command is run from the root of the engine repository. By default, it lints the modified files in the latest build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# Assuming you are in the `flutter` root of the engine repo.\ndart ./tools/clang_tidy/bin/main.dart\n```\n```\n\n----------------------------------------\n\nTITLE: Building macOS Target Framework\nDESCRIPTION: These commands build the macOS Flutter embedder framework. The `--mac` flag passed to `gn` configures the build for macOS.  The resulting framework exposes public APIs like `FlutterViewController`.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/darwin/macos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\n# Perform the macOS target build.\n./tools/gn --unopt --mac\nninja -C ../out/mac_debug_unopt\n\n```\n\n----------------------------------------\n\nTITLE: Copying Flutter Library Post-Build\nDESCRIPTION: Adds a custom command to copy the Flutter library to the build directory after the executable is built. This ensures that the Flutter Engine library is available at runtime.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n        TARGET ${EXE_NAME} POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy\n                ${FLUTTER_LIB}\n                ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for hotRestart Request in Flutter DAP\nDESCRIPTION: JSON format for the hotRestart custom request in Flutter's Debug Adapter Protocol. The request includes an optional reason parameter that indicates the trigger for the restart (e.g., \"manual\" or \"save\").\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"reason\": \"manual\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the List Prepend Function\nDESCRIPTION: This function prepends a specified prefix to each element in a given list, mimicking behavior not available in older CMake versions.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for hotReload Request in Flutter DAP\nDESCRIPTION: JSON format for the hotReload custom request in Flutter's Debug Adapter Protocol. The request includes an optional reason parameter that indicates the trigger for the reload (e.g., \"manual\" or \"save\").\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"reason\": \"manual\"\n}\n```\n\n----------------------------------------\n\nTITLE: Check for GTK Modules\nDESCRIPTION: Checks for the GTK (Gimp Toolkit) library using PkgConfig. If found, it creates an imported target named `PkgConfig::GTK`. It is `REQUIRED`, so build will fail if GTK is not found.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest XML Configuration Update\nDESCRIPTION: Shows changes to AndroidManifest.xml for the new Flutter embedding, including application name and metadata configurations\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Previous Configuration -->\n<application\n  android:name=\"io.flutter.app.FlutterApplication\"\n  >\n  <!-- code omitted -->\n</application>\n\n<!-- New Configuration -->\n<application\n  android:name=\"${applicationName}\"\n  >\n  <!-- Add Flutter embedding metadata -->\n  <meta-data\n    android:name=\"flutterEmbedding\"\n    android:value=\"2\" />\n  <!-- code omitted -->\n</application>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Better Test Naming in Flutter\nDESCRIPTION: These examples demonstrate better test naming practices in Flutter, where the tests describe the behavior under test, improving the readability and understandability of the tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Better test name\ntest('Shrink-wrapped ListView resizes to match its content height', () {...});\n\n// Better test name\ntest('RenderViewport applies its offset to all child Slivers', () {...});\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests with run_tests.py Script\nDESCRIPTION: This snippet demonstrates how to use the `run_tests.py` script to execute all Dart tests in the directory. It requires Python to run the script and assumes access to the testing environment set up by Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./testing/run_tests.py --type=dart\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Sanitizer Suppressions Script\nDESCRIPTION: This snippet shows the expected output when sourcing the sanitizer suppressions script, indicating which suppression files are being used for different sanitizers.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsing Thread Sanitizer suppressions in ./flutter/testing/tsan_suppressions.txt\nUsing Leak Sanitizer suppressions in ./flutter/testing/lsan_suppressions.txt\n```\n\n----------------------------------------\n\nTITLE: Binding Uniforms using HostBuffer in C++\nDESCRIPTION: Creates a `HostBuffer`, emplacing the `frag_info` struct into it as a uniform. Then binds this uniform to the render pass using the `BindFragInfo` function.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nauto host_buffer = HostBuffer::Create(context->GetResourceAllocator());\nFS::BindFragInfo(pass, host_buffer->EmplaceUniform(frag_info));\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard C++17 compilation settings and options to targets including warning levels and exception handling.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Installation Path for Flutter Linux Application\nDESCRIPTION: Configuration of CMake policies and installation paths. This section opts into modern CMake behaviors and sets up the relative library path for the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type for Flutter Project in CMake\nDESCRIPTION: Configures the default build type to 'Debug' if not specified, and sets available build types to Debug, Profile, and Release.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Creates static libraries for Flutter plugin and app wrappers with core, plugin, and app sources\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON\n  CXX_VISIBILITY_PRESET hidden\n)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Key Hash to Git Configuration\nDESCRIPTION: This command sets the user signing key in the global Git configuration using the hash of the desired GPG key. It resolves signing errors by explicitly assigning the correct key hash for signing commits.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.signingkey XYZ\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Web in Flutter\nDESCRIPTION: This command runs the integration test file 'example_test.dart' for the web platform using Flutter's drive command. It specifies the driver, target test files, and the web-server device.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive \\\n  --driver=test_driver/integration_test.dart \\\n  --target=integration_test/example_test.dart \\\n  -d web-server\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter library and system dependencies for Linux build\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory and configures system-level dependencies like GTK3 for the Linux build of the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter API Samples in C++\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language. Defines the binary name and application ID for the Flutter API samples project.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_api_samples\")\nset(APPLICATION_ID \"dev.flutter.flutter_api_samples\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Rebasing for PR Updates\nDESCRIPTION: Updates the PR branch by rebasing it onto the upstream's main branch. This keeps the PR up-to-date and avoids merge conflicts. Replace `your_branch_name` with the name of your branch.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ngit fetch upstream; git rebase upstream/main; git push origin your_branch_name\n```\n\n----------------------------------------\n\nTITLE: Dartdoc Template Definition\nDESCRIPTION: Illustrates how to define a reusable template in Dartdoc.  The template is defined using `{@template <id>}` and `{@endtemplate}` tags, where `<id>` is a unique identifier for the template.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// {@template <id>}\n/// ...\n/// {@endtemplate}\n```\n\n----------------------------------------\n\nTITLE: Referencing ARB Specification in Markdown\nDESCRIPTION: This snippet shows how to include a link to the ARB (Application Resource Bundle) specification in Markdown format. It provides developers with a reference for the ARB file format used in Flutter internationalization.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/regenerate.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[ARB specification](https://github.com/google/app-resource-bundle/wiki/ApplicationResourceBundleSpecification)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Origin\nDESCRIPTION: Pushes the local branch to the remote origin repository.  This makes your changes available for review and integration. Replace `name_of_your_branch` with the name of your branch.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit push origin name_of_your_branch\n```\n\n----------------------------------------\n\nTITLE: Running Continuous Flutter Analysis with Watch Mode\nDESCRIPTION: Command to continuously monitor and analyze Flutter code, automatically checking for issues whenever files are changed. This is useful during development for immediate feedback.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter analyze --flutter-repo --watch\n```\n\n----------------------------------------\n\nTITLE: Build Configuration and Multi-Configuration Support\nDESCRIPTION: Configures build types including Debug, Profile, and Release modes with support for multi-configuration generators\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Dart Fix Tests in Flutter Driver\nDESCRIPTION: Command to execute tests that validate the fix rules in the flutter_driver package. This should be run in the flutter/packages/flutter_driver/test_fixes directory to compare the current fixes against golden files.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_driver/lib/fix_data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Add dependency on flutter_assemble target\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target.  This ensures that the `flutter_assemble` target (which likely builds the Flutter library) is built before any target that depends on the `flutter` interface library.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Engine Dependencies in CMake\nDESCRIPTION: Includes Flutter engine headers, finds the Flutter library, and links it to the main target. Assumes a local build of the Flutter engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)\nfind_library(FLUTTER_LIB flutter_engine PATHS ${CMAKE_SOURCE_DIR}/../../../out/host_debug_unopt)\ntarget_link_libraries(flutter_glfw ${FLUTTER_LIB})\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter and GTK Dependencies\nDESCRIPTION: Links the required libraries to the application target, including the Flutter engine and GTK (for Linux UI integration). These dependencies are essential for the runner to function properly.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and GTK Dependencies in CMake\nDESCRIPTION: Adds the Flutter managed directory, includes Flutter build rules, and finds system-level dependencies like GTK3 using pkg-config.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Mock GLES Test Example in C++\nDESCRIPTION: This test demonstrates how to use the mock GLES implementation. It initializes the mock GLES environment, calls GLES functions through the proc table, and verifies that the calls are recorded. The `MockGLES::Init()` creates and sets the mock, while `GetCapturedCalls()` retrieves the recorded function calls for assertion.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cc\nCODE:\n```\nTEST(MockGLES, Example) {\n  // Creates a mock GLES implementation and sets it as the current one.\n  auto mock_gles = MockGLES::Init();\n  auto& gl = mock_gles->GetProcTable();\n\n  // Call the proc table methods as usual, or pass the proc table to a class\n  // that needs it.\n  gl.PushDebugGroupKHR(GL_DEBUG_SOURCE_APPLICATION_KHR, 0, -1, \"test\");\n  gl.PopDebugGroupKHR();\n\n  // Method names are recorded and can be inspected.\n  //\n  // Note that many built-ins, like glGetString, are not recorded (otherwise the // logs would be much bigger and less useful).\n  auto calls = mock_gles->GetCapturedCalls();\n  EXPECT_EQ(calls, std::vector<std::string>(\n                       {\"PushDebugGroupKHR\", \"PopDebugGroupKHR\"}));\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ChromeDriver\nDESCRIPTION: Command to run ChromeDriver on a specified port. Ensure ChromeDriver version matches the browser version.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchromedriver --port=4444\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable\nDESCRIPTION: Sets up the main executable target for the Flutter Windows runner application. Includes all necessary source files and manifests required for the Windows desktop application.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Modes in CMake for Flutter\nDESCRIPTION: Defines build configuration options for Debug, Profile, and Release modes with appropriate compiler flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine for Android\nDESCRIPTION: This command builds an up-to-date Flutter engine for Android. It assumes you are in the `$ENGINE/src` directory. You can specify different arguments and build variants as needed.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nninja -j1000 -C ../out/android_debug_unopt_arm64 android_jar\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests on ARM Macs\nDESCRIPTION: This shell command runs iOS tests for the Flutter Scenario app on ARM Macs, using the `ios_debug_sim_unopt_arm64` configuration. The engine must be built with this specific configuration beforehand.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# From the root of the engine repository\n$ ./testing/ios_scenario_app/run_ios_tests.sh ios_debug_sim_unopt_arm64\n```\n\n----------------------------------------\n\nTITLE: Using Specialized Constructors in Flutter\nDESCRIPTION: Illustrates the proper use of specialized constructors in Flutter, showing how to prefer more specific constructors over general-purpose ones for better code clarity.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// BAD:\nconst EdgeInsets.TRBL(0.0, 8.0, 0.0, 8.0);\n\n// GOOD:\nconst EdgeInsets.symmetric(horizontal: 8.0);\n```\n\n----------------------------------------\n\nTITLE: Running Objective-C XCTests\nDESCRIPTION: This script builds and runs XCTests for the iOS embedding of the Flutter engine.  It compiles tests and dependencies into a .dylib and then uses Xcode to execute the tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntesting/run_tests.py --type=objc\n```\n\n----------------------------------------\n\nTITLE: Android Styles XML - Launch and Normal Themes\nDESCRIPTION: Defines launch and normal themes for managing splash screen and app background in the new Flutter Android embedding\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Launch Theme -->\n<style name=\"LaunchTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n    <item name=\"android:windowBackground\">@drawable/launch_background</item>\n</style>\n\n<!-- Normal Theme -->\n<style name=\"NormalTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n    <item name=\"android:windowBackground\">@drawable/normal_background</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Executable Target\nDESCRIPTION: Defines the main executable target for a Windows Flutter application with necessary source files. Includes core application files and Flutter-generated resources.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter unit tests with locally built engine\nDESCRIPTION: To run tests against a locally built Flutter engine, use the `--local-engine` and `--local-engine-host` flags. Specify the engine build directory for both options.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"flutter test \\\n  --local-engine=host_debug_unopt \\\n  --local-engine-host=host_debug_unopt\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Dart Tests with Filter\nDESCRIPTION: This snippet shows how to run a specific Dart test by providing the base file name with the `--dart-filter` argument. It requires the corresponding Dart test file to be present and accessible.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./testing/run_tests.py --type=dart --dart-filter=image_filter_test.dart\n```\n\n----------------------------------------\n\nTITLE: A/B Testing Engine Changes - Shell Command\nDESCRIPTION: Command for running A/B performance comparison tests between default and local engine builds, with configurable iteration count.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart bin/run.dart --ab=10 \\\n  --local-engine=host_debug_unopt \\\n  --local-engine-host=host_debug_unopt \\\n  -t bin/tasks/web_benchmarks_canvaskit.dart\n```\n\n----------------------------------------\n\nTITLE: Running Flutter unit tests\nDESCRIPTION: The `flutter test` command discovers and executes all files ending with `_test.dart` within the `test/` subdirectory of a Flutter package. It runs these tests inside a headless flutter shell.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flutter test\"\n```\n\n----------------------------------------\n\nTITLE: Defining GN flags in JSON\nDESCRIPTION: This snippet shows how to define a list of GN flags within a JSON configuration.  These flags are passed to the `tools/gn` script to configure the build.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"gn\": [\n      \"--runtime-mode\",\n      \"debug\",\n      \"--prebuilt-dart-sdk\",\n      \"--build-embedder-examples\"\n],\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AOT Library Installation in CMake\nDESCRIPTION: Sets up the installation of the Ahead-of-Time (AOT) compiled library for Profile and Release builds only, skipping Debug builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Conductor Release Tool in Dart\nDESCRIPTION: The Conductor tool, written in Dart, automates and drives Flutter releases. It manages git operations like pushes, cherry-picks, and tagging, and handles Flutter-specific complexities such as rolling and release infrastructure.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Constructing Flutter Treemap URL\nDESCRIPTION: Shows the URL pattern to access treemaps that visualize the component sizes within libflutter.so builds. The URL requires specifying the engine revision and build variant.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-disk-footprint.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://storage.googleapis.com/flutter_infra_release/flutter/<REVISION>/<VARIANT>/sizes/index.html\n```\n\n----------------------------------------\n\nTITLE: Checking Flutter Channel Status Using CLI\nDESCRIPTION: Command to display the current Flutter channel and list available channels. The output shows all available channels with an asterisk (*) indicating the currently active channel.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-build-release-channels.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter channel\nFlutter channels:\n* stable\n  beta\n  master\n```\n\n----------------------------------------\n\nTITLE: Dartdoc Template Identifier (Bad)\nDESCRIPTION: Shows an example of a poorly formatted Dartdoc template identifier. It does not follow the recommended naming convention, making it difficult to understand and maintain.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// BAD:\n/// {@template the_stuff!}\n/// This is some great stuff!\n/// {@endtemplate}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Dependencies in CMake\nDESCRIPTION: This snippet sets up a dependency for the Flutter assemble command ensuring that the Flutter tool portions of the build process are executed. This is essential for the proper functioning of the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Migrating iOS Project Files\nDESCRIPTION: Handles the migration of custom iOS code. The iOS template directory is renamed to segregate new template code, allowing easy integration of existing custom iOS code.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmv <appname>/ios <appname>/ios.template\ncp -r <existing-app-dir>/ios/ <appname>\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug)\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library only for non-Debug builds. This library is essential for optimized performance in Profile and Release builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Obfuscated Stack Trace in Release Mode\nDESCRIPTION: Example of a minified stack trace generated in release mode, showing obfuscated class and method names that are difficult to read and debug\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/web/Debugging-issues-on-the-Web.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUncaugh TypeError: Cannot read property 'c' of undefined js_helper.dart:1234\n    at a3R.$0 (app.dart:123)\n    at afG.b (util.dart:321)\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions in Dart\nDESCRIPTION: This snippet illustrates good and bad practices for using arrow functions (=>) in Dart, emphasizing single-line usage.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n// BAD:\nString capitalize(String s) =>\n  '${s[0].toUpperCase()}${s.substring(1)}';\n\n// GOOD:\nString capitalize(String s) => '${s[0].toUpperCase()}${s.substring(1)}';\n\nString capitalize(String s) {\n  return '${s[0].toUpperCase()}${s.substring(1)}';\n}\n```\n\n----------------------------------------\n\nTITLE: Android Platform View Factory\nDESCRIPTION: Create a PlatformViewFactory to manage the creation of native Android views\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass NativeViewFactory extends PlatformViewFactory {\n  @NonNull private final BinaryMessenger messenger;\n  @NonNull private final View containerView;\n\n  NativeViewFactory(@NonNull BinaryMessenger messenger, @NonNull View containerView) {\n    super(StandardMessageCodec.INSTANCE);\n    this.messenger = messenger;\n    this.containerView = containerView;\n  }\n\n  @NonNull\n  @Override\n  public PlatformView create(@NonNull Context context, int id, @Nullable Object args) {\n    final Map<String, Object> creationParams = (Map<String, Object>) args;\n    return new NativeView(context, id, creationParams);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Content-Based Hash for Engine Files\nDESCRIPTION: Shows how to generate a consistent hash for all engine files by combining git ls-tree with git hash-object, creating a reproducible identifier for engine versions.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-tree -r HEAD engine DEPS | git hash-object --stdin\n3b9abe00dec28902a589c982b5b460b0f9f38e93\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Paths\nDESCRIPTION: Sets up paths for Flutter library, ICU data, and build directories with parent scope visibility\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Android Platform Tools on macOS\nDESCRIPTION: This command uses Homebrew to install the Android platform tools on macOS. These tools are required for interacting with Android devices and emulators during Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"brew install --cask android-platform-tools\"\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories\nDESCRIPTION: Defines variables for the installation directories for data and libraries within the build bundle. These directories will contain assets, the Flutter ICU data file, and libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Updating LICENSE File for Release\nDESCRIPTION: This command updates the LICENSE file included in product releases. It ensures that any changes in golden files are reflected in the actual LICENSE file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndart pub get\ngclient sync -D\ndart --enable-asserts lib/main.dart --release --src ../../.. > ../../sky/packages/sky_engine/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake for Flutter Application\nDESCRIPTION: Sets up the initial project configuration including minimum CMake version, project name, and C++ standard. It also defines the binary name and application ID for the Flutter project.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\nset(CMAKE_CXX_STANDARD 17)\n\nset(BINARY_NAME \"texture\")\nset(APPLICATION_ID \"io.flutter.examples.texture\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic CMake Project Configuration for Flutter Platform View\nDESCRIPTION: Defines basic project configuration including minimum CMake version, project name, executable name, and build configuration options.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(platform_view LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"platform_view\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: Sets the default build type to 'Debug' if no build type is specified. Allows the user to override via the CMAKE_BUILD_TYPE cache variable.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Flutter Test Exception Stack Trace in Dart\nDESCRIPTION: This snippet shows a portion of a stack trace from a Flutter test execution. It indicates the location of the main function call in the test file that led to the exception.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/ticker_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n#[0-9]+      main.+ \\(.+/dev/automated_tests/flutter_test/ticker_test\\.dart:[0-9]+:[0-9]+\\)\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint Extension in Android Studio\nDESCRIPTION: Provides steps to install the ktlint plugin for automatic code formatting and linting in Android Studio, specifically for Kotlin files in the Flutter repository\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install the `ktlint` extension for Android Studio\n\n   a. On Mac, this is `Android Studio > Settings > Plugins > ` Search for `ktlint`.\n```\n\n----------------------------------------\n\nTITLE: Android Native View Implementation\nDESCRIPTION: Create a native Android view implementing PlatformView interface with a TextView\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass NativeView implements PlatformView {\n   @NonNull private final TextView textView;\n\n    NativeView(@NonNull Context context, int id, @Nullable Map<String, Object> creationParams) {\n        textView = new TextView(context);\n        textView.setTextSize(72);\n        textView.setBackgroundColor(Color.rgb(255, 255, 255));\n        textView.setText(\"Rendered on a native Android view (id: \" + id + \")\");\n    }\n\n    @NonNull\n    @Override\n    public View getView() {\n        return textView;\n    }\n\n    @Override\n    public void dispose() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Texture Layer Hybrid Composition Platform View App and Test\nDESCRIPTION: Commands to run the texture_layer_hybrid_composition_platform_view app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/platform_view/texture_layer_hybrid_composition_platform_view_main.dart\n\n# Run the test\n$ flutter drive lib/platform_view/texture_layer_hybrid_composition_platform_view_main.dart\n```\n\n----------------------------------------\n\nTITLE: Building Android Engine with Symbols for Profiling\nDESCRIPTION: Configuration command to build the Android engine with symbols enabled using the --no-stripped flag for better profiling data. This sets up a profile mode build for arm64 architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngn --no-lto --runtime-mode=profile --android --android-cpu=arm64 --no-stripped\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: Defines variables to store the binary name and application ID. These variables are used later in the build process to name the executable and set the application identifier, respectively.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"manual_tests\")\nset(APPLICATION_ID \"dev.flutter.manual_tests\")\n```\n\n----------------------------------------\n\nTITLE: Building AOT Snapshot for Android aarch64\nDESCRIPTION: This Bash command generates the AOT snapshot blobs for Android aarch64 targets. By utilizing the Flutter tooling, it produces the necessary binary blobs used in AOT mode.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter --local-engine <local_engine_configuration> --local-engine-host <local_host_engine_configuration> build aot --target-platform android-arm64 --release\n```\n\n----------------------------------------\n\nTITLE: Using Ignore Directives in Dart\nDESCRIPTION: This snippet shows how to properly use and comment ignore directives in Dart code, for both temporary and permanent cases.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n  foo(); // ignore: lint_code, https://link.to.bug/goes/here\n\n  foo(); // ignore: lint_code, sadly there is no choice but to do\n  // this because we need to twiddle the quux and the bar is zorgle.\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw Message Getter in GlobalMaterialLocalizations\nDESCRIPTION: Implementation of a protected raw getter and parameter replacement function for localized strings with parameters.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// The raw version of [aboutListTileTitle], with `$applicationName` verbatim\n/// in the string.\n@protected\nString get aboutListTileTitleRaw;\n\n@override\nString aboutListTileTitle(String applicationName) {\n  final String text = aboutListTileTitleRaw;\n  return text.replaceFirst(r'$applicationName', applicationName);\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Flutter Beta Channel\nDESCRIPTION: This command switches the Flutter channel to the beta channel and upgrades to the latest beta build. This allows developers to test the newest features and changes before they are released to the stable channel.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n`flutter channel beta && flutter upgrade`\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options for Flutter Linux build\nDESCRIPTION: Sets the default build type to Debug if not otherwise specified and defines available build configurations for the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Defines a custom build command to generate Flutter libraries and wrapper sources using the Flutter tool backend\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Set Default Install Prefix\nDESCRIPTION: Sets the default install prefix to the build bundle directory if it's initialized to the default value. This ensures that the installation process creates a relocatable bundle in the build directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Block Definition\nDESCRIPTION: Defines a uniform block named `FragInfo` in GLSL, containing a single float variable `time`. This block will be used to pass the current time to the fragment shader.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\nuniform FragInfo {\n  float time;\n} frag_info;\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Test Fixes Locally with Dart\nDESCRIPTION: Command to validate fix rules by comparing them to golden files. This should be executed in the flutter/packages/flutter_test/test_fixes directory to ensure that the fix rules work as expected.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_test/lib/fix_data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Plural Translations Definition\nDESCRIPTION: Example showing how plural translations are defined in the ARB file for different quantities (zero, one, and other cases).\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"selectedRowCountTitleZero\": \"No items selected\",\n\"selectedRowCountTitleOne\": \"1 item selected\",\n\"selectedRowCountTitleOther\": \"$selectedRowCount items selected\"\n```\n\n----------------------------------------\n\nTITLE: Setting Gclient Variables in JSON\nDESCRIPTION: This JSON snippet is used to define gclient variables in the build configuration, such as disabling downloads of certain dependencies. These variables influence the behavior of gclient sync operations.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"gclient_variables\": {\n   \"download_android_deps\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Clean up persistent state file after release\nDESCRIPTION: This command deletes the persistent state file created by the conductor, either because the release was successfully completed or abandoned.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconductor clean\n```\n\n----------------------------------------\n\nTITLE: Android Studio Gradle Distribution Configuration\nDESCRIPTION: These are the Gradle configurations that need to be configured in Android Studio to build the Android embedder.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n$ENGINE/src/third_party/gradle\n```\n\n----------------------------------------\n\nTITLE: Device Information Structure in Dart\nDESCRIPTION: Data structure returned by device.getDevices and device.added events containing device identification and capability information.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n{\n  \"id\": \"device_id\",\n  \"name\": \"device_name\",\n  \"platform\": \"platform_name\",\n  \"category\": \"mobile|web|desktop\",\n  \"platformType\": \"android|ios|linux|macos|fuchsia|windows|web\",\n  \"ephemeral\": true|false,\n  \"emulator\": true|false,\n  \"emulatorId\": \"emulator_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional UIA Usage in Flutter Engine C++\nDESCRIPTION: This code snippet demonstrates how the Flutter engine conditionally uses UI Automation based on the FLUTTER_ENGINE_USE_UIA macro. It's implemented in the Window::OnGetObject method.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/windows/Accessibility-on-Windows.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#ifdef FLUTTER_ENGINE_USE_UIA\n  // UIA response code\n#endif\n```\n\n----------------------------------------\n\nTITLE: Referencing Update Packages File in Flutter Repository\nDESCRIPTION: This code snippet shows the location of the update_packages.dart file in the Flutter repository, which is used to pin versions of third-party packages.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[update_packages.dart](https://github.com/flutter/flutter/blob/main/packages/flutter_tools/lib/src/commands/update_packages.dart#L23)\n```\n\n----------------------------------------\n\nTITLE: Incorrect compileSdk setting\nDESCRIPTION: This snippet shows an incorrect way to set `compileSdk`.  Specifically using the `compileSdk` without an equals sign `=` is not allowed. \nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\n// NOT OK\nandroid {\n  compileSdk 28\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter App Wrapper Configuration\nDESCRIPTION: Sets up the Flutter application wrapper library with core and app-specific source files. Configures compilation settings and dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Android Platform Tools on Linux\nDESCRIPTION: This command uses apt-get to install the Android platform tools on Linux. It provides the necessary components for connecting to Android devices for debugging and testing Flutter apps.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"sudo apt-get install android-tools-adb\"\n```\n\n----------------------------------------\n\nTITLE: Running Linters Globally on Engine Codebase\nDESCRIPTION: This snippet provides the command to run linters across the entire engine repository to maintain coding standards. It emphasizes comprehensive quality checks by applying to all files.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\net lint\n```\n\n----------------------------------------\n\nTITLE: Running Deflake Tool for Test Stability\nDESCRIPTION: Command to run the deflake tool, which builds an APK, establishes baseline golden-files, and runs multiple tests to ensure consistency.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndart tool/deflake.dart lib/flutter_rendered_blue_rectangle_main.dart\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app with local engine via command line\nDESCRIPTION: Command for running a Flutter application with a locally built engine, where XXXX represents the target engine variant and YYYY represents the host engine variant.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --local-engine=XXXX --local-engine-host=YYYY\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library only for non-Debug build configurations (Profile or Release) to optimize performance.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Target and Dependencies in CMake\nDESCRIPTION: Defines the main application executable target with source files and links required dependencies including Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Dartdoc Template Identifier (Good)\nDESCRIPTION: Illustrates a good example of a Dartdoc template identifier.  It follows the recommended format `flutter.library.Class.member[.optionalDescription]`, making it unique and easily identifiable.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD:\n/// {@template flutter.rendering.Layer.findAnnotations.aboutAnnotations}\n/// Annotations are great!\n/// {@endtemplate\n```\n\n----------------------------------------\n\nTITLE: Running Web Integration Tests for Flutter SDK\nDESCRIPTION: This command runs the web integration tests for the Flutter SDK. It uses the Dart SDK to execute the test suite located in the 'test/web.shard' directory. The command should be run from the 'flutter_tools' directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/web.shard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart run test test/web.shard\n```\n\n----------------------------------------\n\nTITLE: Copying Flutter Engine Library in CMake Post-Build Step\nDESCRIPTION: Adds a post-build command to copy the Flutter engine library to the build directory. This ensures the correct library name is used.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n        TARGET flutter_glfw POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy\n                ${FLUTTER_LIB}\n                ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Configuration Directory\nDESCRIPTION: This snippet sets the minimum required version of CMake and defines the directory for ephemeral configuration files needed by the Flutter tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Commands for Flutter Tool\nDESCRIPTION: Adds a custom command to generate Flutter libraries and headers ensuring that it runs every time the build is executed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS} ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN} ${CPP_WRAPPER_SOURCES_APP} ${PHONY_OUTPUT})\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and libraries. This directory is used to locate Flutter-specific files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Providing Flutter Documentation Link in Markdown\nDESCRIPTION: This snippet includes a Markdown link to the official Flutter documentation. It's essential for developers who need guidance on getting started with Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/flutterapp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[documentation](https://flutter.dev/)\n```\n\n----------------------------------------\n\nTITLE: Running individual Flutter unit tests\nDESCRIPTION: To run a specific test file, provide the file path to the `flutter test` command. This allows you to focus on individual tests during development and debugging.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"flutter test lib/my_app_test.dart\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros that Conflict with C++ Standard Library\nDESCRIPTION: Adds a compile definition to disable Windows MIN and MAX macros that would conflict with the C++ standard library functions through the NOMINMAX definition.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Running Dart Fix Tests in Flutter\nDESCRIPTION: Command to execute tests that validate the fix rules defined in the YAML files. This should be run in the flutter/packages/flutter/test_fixes directory to compare the fixes against golden files.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/lib/fix_data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder where launch screen images can be added or modified.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flavors/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`open ios/Runner.xcworkspace`\n```\n\n----------------------------------------\n\nTITLE: Dartdoc Template Usage\nDESCRIPTION: Shows how to use a previously defined template in Dartdoc. The template is inserted using the `{@macro <id>}` tag, where `<id>` is the unique identifier of the template.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n/// {@macro <id>}\n```\n\n----------------------------------------\n\nTITLE: Annotating Code for Documentation in Dart\nDESCRIPTION: This snippet shows how to annotate a Dart code block with docregion comments, allowing for later referencing in documentation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n// #docregion purple\nconst Color purple = Color(0xFFE6E6FA);\n// #enddocregion purple\n```\n\n----------------------------------------\n\nTITLE: Running Display Cutout Test via DeviceLab Test Runner\nDESCRIPTION: Command to run the Android display cutout test using the DeviceLab test runner. This method is executed from the flutter/dev/devicelab directory and uses a specific test target.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/display_cutout_rotation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`dart bin/test_runner.dart test -t android_display_cutout`\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: Sets default build type to Debug if not specified and defines available build mode options (Debug, Profile, Release).\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Rewriting Directory Structure for Flutter Engine\nDESCRIPTION: Moves files to engine/src/flutter, updates tags, and moves DEPS back to root using git filter-repo.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit filter-repo  --to-subdirectory-filter engine/src/flutter --tag-rename '':'engine-' --force\ngit filter-repo --path-rename engine/src/flutter/DEPS:DEPS\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter to Latest Stable Version with Hotfixes\nDESCRIPTION: Commands to switch to the stable channel and upgrade Flutter to the latest version with hotfixes. This ensures you have the most up-to-date stable release of Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter channel stable\n$ flutter upgrade\n```\n\n----------------------------------------\n\nTITLE: Enabling LTO for an RBE Build\nDESCRIPTION: This command demonstrates how to enable Link Time Optimization (LTO) for an RBE build using the --lto flag with the 'et' tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\net build -c host_debug --lto\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Executable\nDESCRIPTION: Links the Flutter library and GTK library to the executable.  Libraries are linked privately, so they are not exposed for other targets to link to.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Defines a custom build command to generate Flutter library and wrapper sources using Flutter tool backend\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests for Flutter Plugin\nDESCRIPTION: Details the command to run native tests (unit and integration) across various platforms using Flutter repository tools, specifying how to filter tests by platform.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart native-test --android --ios --packages=<some_plugin_name>\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project for Flutter Linux Runner\nDESCRIPTION: Configures the CMake project with minimum version requirements and C++ language specification. This establishes the basic project setup needed for the Linux runner build.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Sourcing Sanitizer Suppressions in Bash\nDESCRIPTION: This command sources a shell script that enables relevant options for all known sanitizers and prints the files containing suppressions for each sanitizer.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource ./flutter/testing/sanitizer_suppressions.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Identical Check for Operator == in Dart\nDESCRIPTION: Performance optimization for equality operator implementation in classes with many properties. This check short-circuits the comparison when comparing an object to itself.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n    if (identical(other, this)) {\n      return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running C++ Engine Unit Tests\nDESCRIPTION: This shell command is used to run the C++ unit tests for the Flutter engine. It specifies the test type as 'engine' and optionally allows specifying a build variant.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntesting/run_tests.py --type=engine\n```\n\n----------------------------------------\n\nTITLE: Include generated config\nDESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file likely contains configurations generated by the Flutter tool, such as platform-specific settings or build flags.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: Includes the generated plugin build rules, which manage building the plugins and adding them to the application. This is essential for integrating Flutter plugins into the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Regional Indicator Property Range\nDESCRIPTION: Defines the range of Unicode code points for Regional Indicator symbols, covering letters A through Z used in flag emoji sequences.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from Upstream\nDESCRIPTION: Fetches the latest changes from the upstream repository without merging them into the local branch. This is the first step in updating your local repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This allows CMake to process the CMakeLists.txt file within that directory, building the Flutter engine and related components.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Verify Installation of Engine Tool\nDESCRIPTION: This snippet shows how to verify the successful installation of the `et` tool by executing the help command. No additional dependencies are required, and it outputs the available commands and options.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ et help\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules for Flutter Linux\nDESCRIPTION: Includes the automatically generated plugin build rules for the Flutter application. This ensures all plugins are properly built and added to the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS build with local engine without compilation\nDESCRIPTION: Command to set up Xcode build settings and plugins for iOS without compiling the app, used to speed up the debugging workflow.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter build ios --local-engine ios_debug_unopt --local-engine-host host_debug_unopt --config-only\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assembly\nDESCRIPTION: Adds a dependency on the `flutter_assemble` custom target to the `flutter` interface library. This ensures that `flutter_assemble` is built before any target that depends on the `flutter` library.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Debugging Linux Flutter app with GDB\nDESCRIPTION: Series of commands to build and debug a Flutter Linux app using GDB with an unoptimized local engine, allowing for engine-level debugging.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter/tools/gn --runtime-mode=debug --unoptimized\nninja -C out/host_debug_unopt\ngdb out/host_debug_unopt/exe.unstripped/flutter_linux_unittests\n```\n\n----------------------------------------\n\nTITLE: Proceed to the next step in the release process\nDESCRIPTION: This command allows the user to advance to the next step after completing the necessary manual tasks outlined by the conductor during the release process.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nconductor next\n```\n\n----------------------------------------\n\nTITLE: Installing bundled plugin libraries for Flutter Linux\nDESCRIPTION: Sets up installation rules for each bundled plugin library, placing them in the lib directory of the Flutter application bundle.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Module for iOS Integration\nDESCRIPTION: This command creates a new Flutter module named 'hello' that can be integrated into the iOS host app. The module should be placed in a sibling folder to the host app clone.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_host_app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ flutter create -t module hello\n```\n\n----------------------------------------\n\nTITLE: Commenting Empty setState Closures in Dart\nDESCRIPTION: This example demonstrates how to properly comment an empty setState closure in Dart, explaining the state change that occurred elsewhere.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n  setState(() {\n    // The animation ticked. We use the animation's value in the build method.\n  });\n```\n\n----------------------------------------\n\nTITLE: ARB Resource Definition with Metadata\nDESCRIPTION: Example of defining a resource ID in an ARB file, including the translation value and metadata describing its usage and type.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"cancelButtonLabel\": \"CANCEL\",\n\"@cancelButtonLabel\": {\n  \"description\": \"The label for cancel buttons and menu items.\",\n  \"type\": \"text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Onscreen Surface for Rendering in C++\nDESCRIPTION: Creates a SurfaceGLES object by wrapping the default framebuffer for rendering.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nauto surface =\n    SurfaceGLES::WrapFBO(context,                         // context\n                         swap_callback,                   // swap callback\n                         0u,                              // fbo\n                         PixelFormat::kR8G8B8A8UNormInt,  // pixel format\n                         GetWindowSize()                  // surface size\n    );\n```\n\n----------------------------------------\n\nTITLE: Specifying Run Configurations for Flutter Web Tests\nDESCRIPTION: Defines test environment parameters including browser selection and optional CanvasKit variant\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrun-configs:\n  * `name` - Name of the run configuration.\n  * `browser` - Browser to run tests (chrome, firefox, safari, edge).\n  * `canvaskit-variant` - Optional CanvasKit variant (full or chromium).\n```\n\n----------------------------------------\n\nTITLE: Running External Texture Surface Texture Smiley Face App and Test\nDESCRIPTION: Commands to run the surface_texture_smiley_face app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/external_texture/surface_texture_smiley_face_main.dart\n\n# Run the test\n$ flutter drive lib/external_texture/surface_texture_smiley_face_main.dart\n```\n\n----------------------------------------\n\nTITLE: Updating Vertex Buffer with Color Data in C++\nDESCRIPTION: This code updates the vertex buffer to include color data for each vertex, creating a triangle with interpolated colors.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nvertex_buffer_builder.AddVertices({\n    {{-0.5, -0.5}, Color::Red()},\n    {{0.0, 0.5}, Color::Green()},\n    {{0.5, -0.5}, Color::Blue()},\n});\n```\n\n----------------------------------------\n\nTITLE: Querying RBE Proxy Status\nDESCRIPTION: This command shows how to query the status of the local RBE proxy using the reproxystatus tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbuildtools/mac-arm64/reclient/reproxystatus\n```\n\n----------------------------------------\n\nTITLE: Project Initialization in CMake\nDESCRIPTION: Initializes the CMake project, specifying the project name as 'runner' and enabling CXX language support. This is a fundamental step to define a CMake project.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. Interface libraries don't contain code themselves but provide include directories and link dependencies to other targets.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: Sets the output directory for the executable. This prevents users from running the unbundled executable. The executable will be placed in `intermediates_do_not_run`.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing gcloud for Flutter RBE Project\nDESCRIPTION: This command initializes gcloud and sets the project to flutter-rbe-prod for authentication with the Google cloud project that owns the RBE worker pool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud init --project flutter-rbe-prod\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Flutter Stocks Demo App\nDESCRIPTION: Commands to navigate to the project directory, fetch dependencies, and build/install the app in release mode. These steps assume Flutter is properly set up on the system.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $FLUTTER_ROOT/examples/stocks\nflutter pub get\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests for Package Flutter\nDESCRIPTION: Runs Flutter tests using the local engine build in debug mode to ensure hot-reload and hot-restart functionalities are operational.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $FLUTTER_HOME/packages/flutter\\nflutter test --local-engine=host_debug --local-engine-host=host_debug\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Field in GN Target for Code Signing\nDESCRIPTION: This snippet shows how to add a metadata field to a GN target for code signing a binary with entitlements. It demonstrates adding the binary name to the entitlement_file_path array.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: gn\nCODE:\n```\nmetadata = {\n    entitlement_file_path = [ \"libtessellator.dylib\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Hash for A/B Testing with Merge-Base\nDESCRIPTION: Demonstrates how to calculate an engine hash relative to the merge-base with master, enabling accurate A/B testing when working on feature branches.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-tree -r $(git merge-base HEAD master) engine DEPS | git hash-object --stdin\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command sequence runs tests for the project. It uses Dart's test runner to execute all `*_test.dart` files found in the directory structure.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndart pub get\nfind -name \"*_test.dart\" | xargs -n 1 dart --enable-asserts\n```\n\n----------------------------------------\n\nTITLE: Dry Run Image Upload Command\nDESCRIPTION: Command to simulate golden test image upload without actually uploading, useful for local testing and validation\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/golden_tests_harvester/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart \\./tools/golden_tests_harvester/bin/golden_tests_harvester\\.dart --dry-run <path\\/to\\/digests>\n```\n\n----------------------------------------\n\nTITLE: Adding mouse-input-view\nDESCRIPTION: This shell command adds the `mouse-input-view` to the Fuchsia session. It uses `ffx session add` with the package URL to register the view.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nffx session add fuchsia-pkg://fuchsia.com/mouse-input-view#meta/mouse-input-view.cm\n```\n\n----------------------------------------\n\nTITLE: Android API References in Markdown\nDESCRIPTION: Markdown links to relevant Android API documentation referenced in the technical explanation\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[VirtualDisplays](https://developer.android.com/reference/android/hardware/display/VirtualDisplay#summary)\n[`getSurface()`](https://developer.android.com/reference/android/hardware/display/VirtualDisplay#getSurface())\n[Display](https://developer.android.com/reference/android/view/Display.html)\n[AccessibilityNodeProvider](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Libraries\nDESCRIPTION: Links required libraries and sets include directories for the Flutter Windows runner. Includes Flutter framework libraries and Windows-specific dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Running Formatters on Changed Files\nDESCRIPTION: This snippet shows how to run formatters on changed files in the source code to ensure code quality and consistency. The tool automatically determines which files need formatting.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\net format\n```\n\n----------------------------------------\n\nTITLE: Running Custom Dart File in Flutter\nDESCRIPTION: Command to run a specific Dart file (spinning_square.dart) in the Flutter layers example. This demonstrates how to use the -t option to specify a custom entry point for the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/examples/Running-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -t widgets/spinning_square.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assemble\nDESCRIPTION: This snippet defines a custom target that depends on the Flutter library and headers, which helps in orchestrating the build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Example Assumptions Declaration in Dart\nDESCRIPTION: Shows how to declare context and variables that can be assumed in code examples without displaying them in the documentation\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Examples can assume:\n// final BuildContext context;\n// final String userAvatarUrl;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Configuration\nDESCRIPTION: Defines the minimum required CMake version, sets the project name, and configures basic build parameters for manual tests\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(manual_tests LANGUAGES CXX)\n\nset(BINARY_NAME \"manual_tests\")\n\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Running DeviceLab Tests Locally - Shell Commands\nDESCRIPTION: Shell commands for executing specific DeviceLab tests locally. Shows how to run individual or multiple tests using the test runner script.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart bin/test_runner.dart test -t {NAME_OF_TEST}\n```\n\nLANGUAGE: sh\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart bin/run.dart -t test1 -t test2 -t test3\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux in CMake\nDESCRIPTION: Sets up system-level dependencies required for Flutter Linux, including GTK, GLIB, and GIO using pkg-config.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Clear Number Usage in Dart Tests\nDESCRIPTION: Demonstrates how to write clear and understandable numeric values in tests by using explicit expressions instead of magic numbers.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// BAD\nexpect(rect.left, 4.24264068712);\n\n// GOOD\nexpect(rect.left, 3.0 * math.sqrt(2));\n```\n\n----------------------------------------\n\nTITLE: Snippet Tool Code Example in Dart\nDESCRIPTION: Demonstrates how to use the Flutter snippet tool for generating documentation code blocks with an example of CircleAvatar\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// {@tool snippet}\n///\n/// If the avatar is to have an image, the image should be specified in the\n/// [backgroundImage] property:\n///\n/// ```dart\n/// CircleAvatar(\n///   backgroundImage: NetworkImage(userAvatarUrl),\n/// )\n/// ```\n/// {@end-tool}\n```\n\n----------------------------------------\n\nTITLE: Recommended Engine Hash Calculation Formula\nDESCRIPTION: The recommended approach for calculating engine hash, using merge-base to ensure consistent results even when working on feature branches.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-tree -r $(git merge-base HEAD master) engine DEPS | git hash-object --stdin\n```\n\n----------------------------------------\n\nTITLE: Running Hybrid Composition Platform View App and Test\nDESCRIPTION: Commands to run the hybrid_composition_platform_view app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/platform_view/hybrid_composition_platform_view_main.dart\n\n# Run the test\n$ flutter drive lib/platform_view/hybrid_composition_platform_view_main.dart\n```\n\n----------------------------------------\n\nTITLE: Applying Patch File Locally\nDESCRIPTION: This command applies a patch file to update license files. It strips two path components from the file paths in the diff. The patch file must be adjusted as necessary.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npatch -p2 < my/patch/file\n```\n\n----------------------------------------\n\nTITLE: Screenshot Test Implementation\nDESCRIPTION: Integration test implementation for taking screenshots on mobile and web platforms\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized()\n      as IntegrationTestWidgetsFlutterBinding;\n\n  testWidgets('screenshot', (WidgetTester tester) async {\n    // Build the app.\n    app.main();\n\n    // This is required prior to taking the screenshot (Android only).\n    await binding.convertFlutterSurfaceToImage();\n\n    // Trigger a frame.\n    await tester.pumpAndSettle();\n    await binding.takeScreenshot('screenshot-1');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sets for Flutter Web Tests\nDESCRIPTION: Specifies groups of unit test files with a name and directory location under the flutter/lib/web_ui/test directory\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntest-sets:\n  * `name` - The name of the test set.\n  * `directory` - The directory containing test files.\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration for Flutter Tools\nDESCRIPTION: VS Code launch.json configuration for debugging the Flutter command-line tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"flutter_tools\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"program\": \"${workspaceFolder}/bin/flutter_tools.dart\",\n      \"env\": {\n        \"FLUTTER_ROOT\": \"${workspaceFolder}/../../\"\n      },\n      \"args\": [\"doctor\", \"-v\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dartpad API Example Documentation\nDESCRIPTION: This Dart code snippet demonstrates how to create a documentation block for a Dartpad API example in the Flutter framework source code.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// {@tool dartpad}\n/// Write a description of the example here. This description will appear in the\n/// API web documentation to introduce the example.\n///\n/// ** See code in examples/api/lib/animation/curves/curve2_d.0.dart **\n/// {@end-tool}\n```\n\n----------------------------------------\n\nTITLE: Set Install RPATH\nDESCRIPTION: Sets the runtime path for the installed executable to `$ORIGIN/lib`. This allows the executable to find its shared libraries at runtime relative to its location.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Dart Unit Tests in Flutter\nDESCRIPTION: This snippet shows how to run Dart unit tests for Flutter plugins using the command line. It highlights the specific command to execute tests for web packages as well.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart drive-examples --packages=<name_of_plugin>\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Description\nDESCRIPTION: This snippet provides a basic description of a Flutter project intended for testing the spell check functionality of the EditableText widget. It uses markdown to describe the project's purpose.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/spell_check/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# spell_check\n\nA Flutter project for testing spell check for [EditableText].\n```\n\n----------------------------------------\n\nTITLE: Set Executable Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This prevents users from running the unbundled executable by placing it in a subdirectory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Successful Flutter Test Results\nDESCRIPTION: This snippet shows the output format for successful Flutter tests. It includes a timestamp and a message indicating that all tests have passed.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/flutter_gold_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[0-9]+:[0-9]+ [+]2: All tests passed! *\n```\n\n----------------------------------------\n\nTITLE: Creating Shader Library Mappings in C++\nDESCRIPTION: Sets up shader library mappings for Impeller context creation.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include \"impeller/fixtures/gles/fixtures_shaders_gles.h\"\n\nstatic std::vector<std::shared_ptr<fml::Mapping>>\nShaderLibraryMappingsForApplication() {\n  return {\n      std::make_shared<fml::NonOwnedMapping>(\n          impeller_fixtures_shaders_gles_data,\n          impeller_fixtures_shaders_gles_length),\n  };\n}\n\n// In the setup routine.\n\nauto mappings = ShaderLibraryMappingsForApplication();\n```\n\n----------------------------------------\n\nTITLE: Running Virtual Display Platform View App and Test\nDESCRIPTION: Commands to run the virtual_display_platform_view app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/platform_view/virtual_display_platform_view_main.dart\n\n# Run the test\n$ flutter drive lib/platform_view/virtual_display_platform_view_main.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Fuchsia and Engine Directories\nDESCRIPTION: This snippet sets the environment variables required for the Fuchsia and Engine directories. It prepares the shell environment for running Fuchsia tests.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport FUCHSIA_DIR=~/fuchsia\nexport ENGINE_DIR=~/engine/src\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vertex Buffer in C++\nDESCRIPTION: This code creates a vertex buffer with three vertices defining a triangle in normalized device coordinates.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nVertexBufferBuilder<VS::PerVertexData> vertex_buffer_builder;\nvertex_buffer_builder.AddVertices({\n    {{-0.5, -0.5}},\n    {{0.0, 0.5}},\n    {{0.5, -0.5}},\n});\n\nauto vertex_buffer = vertex_buffer_builder.CreateVertexBuffer(\n      *context->GetResourceAllocator());\n```\n\n----------------------------------------\n\nTITLE: Adding Docregion Annotations in XML and HTML\nDESCRIPTION: This snippet demonstrates how to use docregion comments within XML and HTML files for documentation purposes.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_8\n\nLANGUAGE: XML/HTML\nCODE:\n```\n<!--#docregion sectionname-->\n<!--#enddocregion sectionname-->\n```\n\n----------------------------------------\n\nTITLE: JSON Redirect Entry Format for Firebase Configuration\nDESCRIPTION: Standard format for creating a tooling redirect in the Firebase configuration file, specifying the source path, destination URL, and redirect type\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/use-reliable-links.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"source\": \"/to/<redirect-name>\", \"destination\": \"<url>\", \"type\": 301 }\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the build bundle. This file is required for Flutter to handle internationalization and localization.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build process. This enables the inclusion of Flutter-specific build rules and targets.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Custom build command that runs the Flutter tool backend script to generate necessary build artifacts.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Package Dependencies\nDESCRIPTION: Command to update all package dependencies in the Flutter repository. This should be run after updating the source tree to ensure the analyzer has access to all necessary dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter update-packages\n```\n\n----------------------------------------\n\nTITLE: Disabling Multidex Support in Flutter Build\nDESCRIPTION: Command-line flag to temporarily disable multidex support during app compilation, useful for debugging or specific build scenarios\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Android-Multidex-support.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter build --no-multidex\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Snippet API Example\nDESCRIPTION: This Dart code snippet shows how to create an inline snippet API example in the Flutter framework source code using the snippet tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// {@tool dartpad}\n/// Write a description of the example here. This description will appear in the\n/// API web documentation to introduce the example.\n///\n/// ```dart\n/// // Sample code goes here, e.g.:\n/// const Widget emptyBox = SizedBox();\n/// ```\n/// {@end-tool}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Flutter Tools Snapshot\nDESCRIPTION: Commands to force regeneration of Flutter Tools snapshot by removing cache files\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm ../../bin/cache/flutter_tools.stamp ../../bin/cache/flutter_tools.snapshot\n```\n\n----------------------------------------\n\nTITLE: Flutter Framework References in Markdown\nDESCRIPTION: Markdown links to Flutter framework code and API documentation\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[hit testing logic within the Flutter Framework](https://github.com/flutter/flutter/blob/068fa84/packages/flutter/lib/src/rendering/platform_view.dart#L774)\n[dispatch a message to the Android engine embedding](https://github.com/flutter/flutter/blob/068fa84/packages/flutter/lib/src/rendering/platform_view.dart#L595)\n[`Semantics`](https://api.flutter.dev/flutter/widgets/Semantics-class.html)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Bundles for Flutter Web Tests\nDESCRIPTION: Defines groups of tests with specific compile configurations, with output stored in flutter/lib/web_ui/build/test_bundles\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntest-bundles:\n  * `name` - The name of the test bundle.\n  * `test-set` - The name of the test set to compile.\n  * `compile-config` - The compile configuration to use.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Defines and configures Flutter library headers for compilation\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on `flutter_assemble`, ensuring that the Flutter tool's assembly step is executed before building the executable target.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Script\nDESCRIPTION: This snippet runs the unit tests using the provided shell script located in the Engine directory. It includes options to control the test execution behavior.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh\n```\n\n----------------------------------------\n\nTITLE: Copy Updated License Files and Check Diffs\nDESCRIPTION: This command copies the updated license files from the output directory to the golden directory and checks differences to determine any required changes.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncp ../../../out/licenses/* ../../ci/licenses_golden\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Publishing Touch Input View Package\nDESCRIPTION: Command to publish the touch-input-view package to the Fuchsia package repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$FUCHSIA_DIR/.jiri_root/bin/fx pm publish -a -repo $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files -f $ENGINE_DIR/out/\nfuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/touch-input-view/touch-input-view/touch-input-view.far\n```\n\n----------------------------------------\n\nTITLE: Install Bundled Plugin Libraries\nDESCRIPTION: Installs any bundled plugin libraries to the library directory. This is conditional on the `PLUGIN_BUNDLED_LIBRARIES` variable being set.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project associated with a Flutter iOS app. This allows for visual management of launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`open ios/Runner.xcworkspace`\n```\n\n----------------------------------------\n\nTITLE: Running Integration Test\nDESCRIPTION: This snippet runs the Dart AOT runner integration test using the `ffx test run` command. It specifies the package URL of the test component.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nffx test run \"fuchsia-pkg://fuchsia.com/dart-aot-runner-integration-test#meta/dart-aot-runner-integration-test.cm\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter wrapper plugin, including core and plugin sources, and links it to the flutter interface library.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN})\n```\n\n----------------------------------------\n\nTITLE: Executing Integration Tests for Flutter Plugin\nDESCRIPTION: Instructions to execute integration tests located in the example directory of a Flutter plugin. It includes an optional device selection flag for targeting a device during testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd example\nflutter test integration_test\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Windows Runner Executable Target\nDESCRIPTION: Defines the executable target for the Flutter Windows runner. It specifies the source files to be included in the build.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initial Conditional Sampling GLSL Implementation\nDESCRIPTION: Example of platform-specific conditional texture sampling using preprocessor directives and runtime checks\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/specialization_constants.md#2025-04-21_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n// Decal sample if necessary.\nvec4 Sample(sampler2D sampler, vec2 coord) {\n#ifdef GLES\n  if (supports_decal) {\n    return texture(sampler, coord);\n  }\n  return IPSampleDecal(sampler, coord)\n#else\n  return texture(sampler, coord);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Dependencies Configuration\nDESCRIPTION: Sets up system-level dependencies using pkg-config for GTK, GLIB, and GIO libraries required by Flutter Linux.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Rendering to Surface with Impeller in C++\nDESCRIPTION: Uses the Impeller renderer to render to the created surface, providing a callback for custom rendering logic.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nrenderer_->Render(std::move(surface),\n                 [&](RenderTarget& render_target) -> bool {\n                    // Do things that render into the render target.\n                    return true;\n                 });\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the project can be built with the expected CMake features.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Playground Timeout in Flutter\nDESCRIPTION: Command-line argument to specify how long each playground window will remain open before moving to the next one in Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n--playground_timeout_ms=1000\n```\n\n----------------------------------------\n\nTITLE: Running Dart Fix Tests for Integration Test\nDESCRIPTION: Command to execute tests that validate the fix rules in the flutter/packages/integration_test/test_fixes directory. This compares the current fixes to the golden files.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/lib/fix_data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Engine Output Directory Cleanup Commands\nDESCRIPTION: Commands for managing engine output directories, including removing old directories and previewing cleanup operations.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# Deletes all output directories older than 30 days.\net cleanup\n\n# Shows what output directories would be deleted by the above command.\net cleanup --dry-run\n\n# Deletes all output directories accessed last in 2023.\net cleanup --untouched-since=2024-01-01\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine for Frame Capture with RenderDoc\nDESCRIPTION: Commands to build the Flutter engine in debug mode for frame capture. This ensures tracing is enabled for RenderDoc analysis.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/renderdoc_frame_capture.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In your $ENGINE_SRC folder, do:\n\n./flutter/tools/gn --unopt\nninja -C out/host_debug_unopt/\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Linux Build Configuration in CMake\nDESCRIPTION: Sets up the initial CMake configuration for Flutter Linux builds, including minimum version requirements and inclusion of generated config.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policies and installation path for Flutter Linux build\nDESCRIPTION: Configures CMake policies and sets up the installation path for bundled libraries relative to the binary.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web Integration Test\nDESCRIPTION: Example command for running a Flutter web integration test using flutter drive, specifying target file, web server, browser, and profile mode\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/web_e2e_tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --target=test_driver/text_editing_integration.dart \\\n  -d web-server \\\n  --browser-name=chrome \\\n  --profile\n```\n\n----------------------------------------\n\nTITLE: Testing Data-Driven Fixes with Dart Files\nDESCRIPTION: Example of test files used to verify data-driven fixes. Shows a test case file containing code before the fix is applied.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// test_fixes/C.dart\nimport 'package:<package-name>/C.dart';\n\nC.oldName('Fix me'); // usage before the change.\n```\n\n----------------------------------------\n\nTITLE: Displaying Successful Flutter Test Results in Plain Text\nDESCRIPTION: This snippet shows the output of a successful Flutter test run. It indicates that all tests have passed, with a timestamp prefix.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/trivial_widget_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[0-9]+:[0-9]+ [+]1: All tests passed!\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter GPU Dependencies in pubspec.yaml\nDESCRIPTION: This code snippet shows how to configure a Flutter project's pubspec.yaml file to include the Flutter GPU SDK dependency alongside the standard Flutter SDK dependency.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Flutter-GPU.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_gpu:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Starting Fuchsia Package Server\nDESCRIPTION: This shell command starts a Fuchsia package server. It changes the current directory to the Fuchsia directory and then runs the `fx serve` command.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd \"$FUCHSIA_DIR\"\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings in CMake\nDESCRIPTION: This snippet applies the standard set of build settings to the defined executable target. It can be removed if the application requires custom build settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Viewing Engine Version Hash from Git Commit\nDESCRIPTION: Demonstrates how to retrieve the current engine version hash that represents the Git commit hash used to produce engine binaries.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat bin/internal/engine.version\n76b7abb5c853860cb5b488ab5b8e1ad8c41b603e\n```\n\n----------------------------------------\n\nTITLE: Cloning Flutter repository using HTTPS\nDESCRIPTION: This command clones the flutter/flutter repository using HTTPS. This method can be used as an alternative if SSH is not configured or accessible.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone https://github.com/flutter/flutter.git\"\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Rendered Blue Rectangle App and Test\nDESCRIPTION: Commands to run the flutter_rendered_blue_rectangle app and its corresponding test using Flutter CLI.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Run the app\n$ flutter run lib/flutter_rendered_blue_rectangle_main.dart\n\n# Run the test\n$ flutter drive lib/flutter_rendered_blue_rectangle_main.dart\n```\n\n----------------------------------------\n\nTITLE: Importing Supporting Flutter Packages\nDESCRIPTION: Illustrates importing additional Flutter support libraries from separate packages. Shows importing testing utilities and file system access.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:file/local.dart';\n```\n\n----------------------------------------\n\nTITLE: Building and debugging Flutter Linux app with local engine\nDESCRIPTION: Process to build a Flutter Linux app with a local engine and prepare it for debugging by replacing the stripped library with an unstripped version.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflutter build linux --debug --local-engine=host_debug_unopt --local-engine-host=host_debug_unopt lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: CIPD Authentication Command - Shell\nDESCRIPTION: This command is used to authenticate the user to CIPD before performing any uploads. It ensures that the user has the required permissions.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncipd auth-login\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests with Engine Tool\nDESCRIPTION: Command to run Dart unit tests for the engine tool package. Currently has limited support and doesn't require BUILD.gn targets.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\net test //flutter/tools/engine_tool/...\n```\n\n----------------------------------------\n\nTITLE: Running Display Cutout Test Locally with Flutter CLI\nDESCRIPTION: Command to run the display cutout test locally using the Flutter CLI. This test specifically targets the display_cutout_test.dart file in the integration_test directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/display_cutout_rotation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`flutter test integration_test/display_cutout_test.dart`\n```\n\n----------------------------------------\n\nTITLE: Install Executable\nDESCRIPTION: Installs the executable to the install prefix. The `RUNTIME` keyword specifies that this is an executable, and `DESTINATION` specifies the directory to install it to.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Verify libflutter.so Build ID\nDESCRIPTION: This snippet allows you to verify the build ID of a libflutter.so file to ensure it matches the build ID from crash reports. It is important for successful symbolication.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% file ~/Downloads/libflutter.so\n/Users/user/Downloads/libflutter.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[xxHash]=34ad5bdf0830d77a, with debug_info, not stripped\n```\n\n----------------------------------------\n\nTITLE: Running Clang Tidy with Automatic Fixes\nDESCRIPTION: This command executes the clang_tidy tool with the `--fix` flag. This will attempt to automatically fix the detected issues. It also assumes that the command is run from the root of the engine repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndart ./tools/clang_tidy/bin/main.dart --fix\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This snippet disables Windows macros that can conflict with C++ standard library functions by defining `NOMINMAX` during compilation.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Embedder GLFW Example with Shell Script\nDESCRIPTION: This shell command is used to build and run the Flutter Embedder GLFW example. It should be executed from the directory containing the example files.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./run.sh\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Symbol Stripping in Gradle\nDESCRIPTION: Gradle script configuration to prevent automatic stripping of .so files during builds. Useful for maintaining symbol visibility during debugging.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\npackagingOptions{\n    doNotStrip \"**/*.so\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Dart JIT Runner Integration Test\nDESCRIPTION: This command initiates the execution of the Dart JIT runner integration test on the Fuchsia platform, specifying the appropriate package URL.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nffx test run \"fuchsia-pkg://fuchsia.com/dart-jit-runner-integration-test#meta/dart-jit-runner-integration-test.cm\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Redirection Method in Platform View Wrapper\nDESCRIPTION: Method responsible for redirecting native view drawing to a Flutter Texture canvas, enabling seamless UI composition\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Texture-Layer-Hybrid-Composition.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Drawing redirection logic\nprivate void redirectDrawing(Canvas canvas) {\n    // Redirect native view drawing to Texture canvas\n}\n```\n\n----------------------------------------\n\nTITLE: Check current status of the release\nDESCRIPTION: This command retrieves the current status of the Flutter SDK release process. It can be run at any time to check on the progress of the release.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconductor status\n```\n\n----------------------------------------\n\nTITLE: Including generated plugin build rules for Flutter Linux\nDESCRIPTION: Includes the generated plugins configuration file which manages building Flutter plugins and adding them to the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux System Dependencies Configuration\nDESCRIPTION: Sets up required system-level package dependencies for GTK, GLIB, and GIO using pkg-config.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Running Android Engine Tests on CI (LUCI)\nDESCRIPTION: Commands to run Android engine tests for Vulkan and OpenGL ES on the continuous integration system.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nSHARD=android_engine_vulkan_tests bin/cache/dart-sdk/bin/dart dev/bots/test.dart\nSHARD=android_engine_opengles_tests bin/cache/dart-sdk/bin/dart dev/bots/test.dart\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader for Triangle Rendering in GLSL\nDESCRIPTION: This vertex shader takes a 2D position input and converts it to normalized device coordinates (NDC) for rendering a triangle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nin vec2 position;\n\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patch from Clipboard on Mac\nDESCRIPTION: This command allows applying a patch from the clipboard, specifically useful for Mac users. The patch will strip two path components as configured.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npbpaste | patch -p2\n```\n\n----------------------------------------\n\nTITLE: Authenticating with CIPD for RBE Configuration Download\nDESCRIPTION: This command authenticates the user with CIPD to allow downloading of RBE configurations from the flutter_internal CIPD bucket.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncipd auth-login\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Interface Configuration\nDESCRIPTION: Configures the Flutter library interface target with necessary include directories and library dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling RBE for a Build\nDESCRIPTION: This command shows how to disable RBE for a specific build using the --no-rbe flag with the 'et' tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\net build -c host_debug --no-rbe\n```\n\n----------------------------------------\n\nTITLE: Screenshot Driver Implementation\nDESCRIPTION: Driver script for handling screenshots in integration tests\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\nimport 'package:integration_test/integration_test_driver_extended.dart';\n\nFuture<void> main() async {\n  await integrationDriver(\n    onScreenshot: (String screenshotName, List<int> screenshotBytes, [Map<String, Object?>? args]) async {\n      final File image = File('$screenshotName.png');\n      image.writeAsBytesSync(screenshotBytes);\n      // Return false if the screenshot is invalid.\n      return true;\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Image Upload Command\nDESCRIPTION: Primary command to upload golden test images from a specified directory using the golden tests harvester tool\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/golden_tests_harvester/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart \\./tools/golden_tests_harvester/bin/golden_tests_harvester\\.dart <path\\/to\\/digests>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Paths\nDESCRIPTION: Sets up essential paths and configurations for Flutter library, including ephemeral directory and target platform\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries\nDESCRIPTION: Configures static libraries for Flutter wrapper sources, including core, plugin, and app-specific implementations\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Impeller on Android in AndroidManifest.xml\nDESCRIPTION: XML configuration to explicitly opt out of using Impeller on Android by adding a meta-data tag to the AndroidManifest.xml file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n  android:name=\"io.flutter.embedding.android.EnableImpeller\"\n  android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Running the Keycode Generator - Shell\nDESCRIPTION: This shell command runs the keycode generator based on an existing database, facilitating keycode generation for Flutter's keyboard implementations.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_keycodes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"/PATH/TO/ROOT/bin/gen_keycodes\"\n```\n\n----------------------------------------\n\nTITLE: Creating EGL Context and Window Surface in C++\nDESCRIPTION: Creates an EGL context and window surface using the chosen configuration and native window handle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nauto context = display.CreateContext(*config, /* sharegroup= */ nullptr );\nauto surface = display.CreateWindowSurface(*config, native_window_handle);\n```\n\n----------------------------------------\n\nTITLE: Updating the Flutter Engine for Compilation\nDESCRIPTION: Commands to fetch the latest upstream master changes, rebase the current branch, and synchronize dependencies before compiling the engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream master\ngit rebase upstream/master\ngclient sync -D\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Including Directories for Flutter Windows Runner\nDESCRIPTION: Links necessary libraries and includes directories for the Flutter Windows runner. This includes Flutter-specific dependencies.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Running Data-Driven Fix Tests with Dart CLI\nDESCRIPTION: Command to run tests that compare dart files against their golden master files to verify data-driven fixes are working correctly.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Enabling Impeller OpenGL Backend on Android\nDESCRIPTION: XML configuration to enable Impeller with OpenGL backend on Android by adding a meta-data tag to the AndroidManifest.xml file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n  android:name=\"io.flutter.embedding.android.ImpellerBackend\"\n  android:value=\"opengles\" />\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter project and build environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Profile Configuration Flags\nDESCRIPTION: Sets linker and compilation flags for the Profile configuration to match Release configuration settings\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Creates static libraries for Flutter wrapper sources, including core, plugin, and app components\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Trailing Space in Flutter\nDESCRIPTION: This snippet demonstrates the detection of trailing spaces in code. It uses a caret (^) to indicate the position of the trailing space.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/test/analyze-test-input/root/packages/foo/spaces.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nTrailing space: \n               ^\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory within the installation bundle.  ICU provides Unicode and internationalization support.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: VSCode Multi-Root Workspace Configuration for Flutter\nDESCRIPTION: Sample VSCode workspace configuration file that includes the Flutter SDK path for a multi-root workspace setup.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# flutter.code-workspace\n{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \"path/to/the/flutter/sdk\"\n\t\t}\n\t],\n\t\"settings\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Web Engine Support to .gclient Configuration\nDESCRIPTION: Configuration to amend the .gclient file to enable web engine development by adding the download_emsdk variable set to True.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nsolutions = [\n  {\n    # Same as above...\n    \"custom_vars\": {\n      \"download_emsdk\": True,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader for Triangle Rendering in GLSL\nDESCRIPTION: This fragment shader sets a solid red color for each pixel covered by the triangle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nout vec4 frag_color;\n\nvoid main() {\n  frag_color = vec4(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dart Core Libraries in Flutter\nDESCRIPTION: Shows how to import built-in Dart libraries using the dart: namespace. Demonstrates importing async functionality and UI primitives.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:ui';\n```\n\n----------------------------------------\n\nTITLE: Displaying Successful Flutter Test Results\nDESCRIPTION: This snippet shows the output of a successful Flutter test run. It indicates that all tests have passed, with a timestamp prefix.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/package_assets_expectation.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[0-9]+:[0-9]+ [+]1: All tests passed!\n```\n\n----------------------------------------\n\nTITLE: Creating Impeller Context for OpenGL ES in C++\nDESCRIPTION: Initializes an Impeller context for OpenGL ES using the proc table and shader mappings.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nauto context = ContextGLES::Create(\n    std::move(gl),        // proc table\n    std::move(mappings),  // shader libraries\n    false                 // enable tracing\n);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Analyzer for Repository Code\nDESCRIPTION: Command to run the Flutter analyzer on the entire Flutter repository for a one-off analysis. This ensures proper analysis across all packages in the repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter analyze --flutter-repo\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name and Application ID\nDESCRIPTION: Sets the name of the executable binary and the application identifier. `BINARY_NAME` sets the name of the executable file and `APPLICATION_ID` identifies the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"flutter_gallery\")\nset(APPLICATION_ID \"io.flutter.demo.flutter_gallery\")\n```\n\n----------------------------------------\n\nTITLE: Stopping ADB Server\nDESCRIPTION: Command to stop the Android Debug Bridge server, terminating any ongoing device connections.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadb kill-server\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Microbenchmarks\nDESCRIPTION: Executing specific microbenchmark tests by providing a comma-separated list of test files using Dart defines\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart --dart-define=tests=foundation/change_notifier_bench.dart,language/sync_star_bench.dart\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Refresh Command\nDESCRIPTION: Command to force refresh dependencies in a Gradle project, useful for debugging and ensuring latest dependency versions are retrieved\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/Plugins-and-Packages-repository-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew app:dependencies --configuration <SOME_TASK> --refresh-dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Paths\nDESCRIPTION: Defines and sets various paths related to the Flutter library and considers fallback configurations for different platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Add Dependency on Flutter Assembly\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are built before the executable is linked.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Preprocessor Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID, which allows the C++ code to access the application identifier at compile time.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Release Mode Tests via Command Line\nDESCRIPTION: Command to execute the release-mode tests from the command line by using the dart.vm.product flag to simulate release mode conditions.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_release/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter test --dart-define=dart.vm.product=true test_release/\n```\n\n----------------------------------------\n\nTITLE: Running API Consistency Check Tool in Shell\nDESCRIPTION: This shell command runs a Dart script to verify the consistency of platform-specific embedders and their APIs with the dart:ui API. It requires the path to the Flutter engine repository as an argument. The expected output of the script is a report on API consistency.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/api_check/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n../../../out/host_debug_unopt/dart-sdk/bin/dart \\\n  test/apicheck_test.dart                       \\\n  \"$(dirname $(dirname $PWD))\"\n```\n\n----------------------------------------\n\nTITLE: Using Docregion Comments in C++\nDESCRIPTION: This snippet demonstrates the application of docregion comments for documentation purposes in C++ files.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n// #docregion sectionname\n// #enddocregion sectionname\n```\n\n----------------------------------------\n\nTITLE: Custom Dart SDK Build Configuration\nDESCRIPTION: Example of building with a from-source Dart SDK instead of prebuilt SDK, commonly used by Dart SDK and VM developers.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\net build --config host_debug --gn-args=\"--no-prebuilt-dart-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LUCI Builders in Starlark\nDESCRIPTION: Framework test shard builders are defined in Starlark configuration files, requiring both pre-submit and post-submit builder specifications\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Adding-a-new-Test-Shard.md#2025-04-21_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\n# Example configuration in framework_config.star\n# Defines LUCI builders for Flutter test shards\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Fix Tests with Golden Comparison\nDESCRIPTION: Command to execute the dart fix tests locally in the flutter/packages/flutter/test_fixes directory, comparing results against golden master files.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_fixes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Package Directory\nDESCRIPTION: Changes the current working directory to the cloned packages repository. This allows subsequent Git commands to operate within the repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n`cd packages`\n```\n\n----------------------------------------\n\nTITLE: Adding Docregion Comments in YAML\nDESCRIPTION: This snippet shows how to employ docregion annotations within a YAML file for documentation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n# #docregion sectionname\n# #enddocregion sectionname\n```\n\n----------------------------------------\n\nTITLE: Configuring application name and identifier for Flutter Linux build\nDESCRIPTION: Defines the binary name and GTK application identifier for the Flutter application on Linux platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"a11y_assessments\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.a11y_assessments\")\n```\n\n----------------------------------------\n\nTITLE: Using Docregion Comments in JavaScript\nDESCRIPTION: This snippet illustrates how to utilize docregion comments in JavaScript files to document code sections.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #docregion sectionname\n// #enddocregion sectionname\n```\n\n----------------------------------------\n\nTITLE: Setting Github Token Environment Variable\nDESCRIPTION: Demonstrates how to set a Github access token in the shell configuration file for authentication and quota control\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_TOKEN=<YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Creates an interface library called 'flutter' and specifies the include directories and linked libraries to be used in the project.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Driver Test Locally\nDESCRIPTION: Command-line instruction for executing Flutter driver tests with specified test and driver files. Allows debugging and local test verification.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive -t <test> --driver <driver>\n```\n\n----------------------------------------\n\nTITLE: Pull Request Title Template for Tooling Redirect\nDESCRIPTION: Recommended format for creating a pull request title when adding a new tooling redirect to the Flutter website repository\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/use-reliable-links.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAdd a `/to/<redirect-name>` tooling redirect\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros Conflicting with C++ Standard Library\nDESCRIPTION: Disables Windows macros that may collide with C++ standard library functions by defining NOMINMAX.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuchsia Component Runner for Dart\nDESCRIPTION: Provides the core implementation for launching and managing Dart applications as Fuchsia components, supporting non-Flutter Dart applications\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n# Dart Application Runner\n\nImplements the `fuchsia::component::runner::ComponentRunner` FIDL interface to\nlaunch and run Dart applications that don't use Flutter.\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet applies a predefined set of standard build settings to the executable target, which can be customized if needed.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Executing Web Integration Tests for Flutter Plugin\nDESCRIPTION: Describes the process for running web integration tests, including setting up ChromeDriver and executing the tests from the command line.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nchromedriver --port=4444\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart drive-examples --packages=<plugin_name>/<plugin_name_web> --web\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Module Project Name in Markdown\nDESCRIPTION: This snippet defines the name of the Flutter module project using a Markdown header. It's a crucial identifier for the project.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/flutterapp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ios_add2app_life_cycle_flutter\n```\n\n----------------------------------------\n\nTITLE: Replacing Element in YAML\nDESCRIPTION: Demonstrates how to specify replacing a top-level variable with a static field in another class using a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'replacedBy'\nnewElement:\n  uris: ['lib.dart']\n  field: 'f'\n  inClass: 'C'\n```\n\n----------------------------------------\n\nTITLE: Emulator Information Structure in Dart\nDESCRIPTION: Data structure returned by emulator.getEmulators containing emulator identification and platform information.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n{\n  \"id\": \"emulator_id\",\n  \"name\": \"emulator_name\",\n  \"category\": \"mobile|web|desktop\",\n  \"platformType\": \"android|ios|linux|macos|fuchsia|windows|web\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Path Support on Windows\nDESCRIPTION: PowerShell command to enable long path support on Windows, which is necessary for building the Flutter engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -Force\n```\n\n----------------------------------------\n\nTITLE: Custom Android FrameLayout for Texture Layer Hybrid Composition\nDESCRIPTION: A custom FrameLayout implementation that redirects drawing to a Flutter Texture for platform view rendering in Android\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Texture-Layer-Hybrid-Composition.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PlatformViewWrapper extends FrameLayout {\n    // Custom FrameLayout implementation\n    // Redirects drawing to canvas backing Flutter Texture\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Licenses Directory\nDESCRIPTION: This command navigates to the directory where license-related operations are performed. It is essential to be in this directory to correctly apply patches or run scripts.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd flutter/ci/licenses_golden\n```\n\n----------------------------------------\n\nTITLE: Updating Vertex Shader with Color Varying in GLSL\nDESCRIPTION: This updated vertex shader includes a color input and passes it to the fragment shader as a varying.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\nin vec4 color;\nout vec4 v_color;\n\nvoid main() {\n  v_color = color;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be created. It's located within the project's binary directory.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n```\n\n----------------------------------------\n\nTITLE: Changing directory to Flutter repo\nDESCRIPTION: This command changes the current directory to the cloned Flutter repository. This is required to perform subsequent Git operations within the repository.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"cd flutter\"\n```\n\n----------------------------------------\n\nTITLE: Executing Draw Call in C++\nDESCRIPTION: This code sets the pipeline and vertex buffer, then executes a draw call to render the triangle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\npass.SetPipeline(pipeline);\npass.SetVertexBuffer(vertex_buffer);\npass.Draw();\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactive Playgrounds and Disabling Timeout in Flutter\nDESCRIPTION: Command-line arguments to enable interactive playground windows and disable the test timeout watchdog in Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n--enable_playground --timeout=0\n```\n\n----------------------------------------\n\nTITLE: Using Docregion Comments in Swift\nDESCRIPTION: This snippet demonstrates the use of docregion comments in Swift files for proper documentation.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n// #docregion sectionname\n// #enddocregion sectionname\n```\n\n----------------------------------------\n\nTITLE: Creating Pipeline in C++\nDESCRIPTION: This code creates a pipeline using the previously defined descriptor, waiting for its creation to complete.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nauto pipeline = context->GetPipelineLibrary()->GetPipeline(desc).Get();\n```\n\n----------------------------------------\n\nTITLE: Rewriting PR Links in Commit Messages\nDESCRIPTION: Updates the PR links in commit messages to reflect the new repository structure.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit filter-repo --force --message-callback '\n    return re.sub(br\"^(.*)\\((#\\d+)\\)\\n(.*)\", br\"\\1(flutter/engine\\2)\\n\\3\", message, 1)\n    '\n```\n\n----------------------------------------\n\nTITLE: Android Studio Command-line Options Configuration\nDESCRIPTION: These are the command-line options that need to be configured in Android Studio to build the Android embedder.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n-Pbuild_dir=\"/tmp/build_dir\" -Pflutter_jar=\"$ENGINE/src/out/android_debug_unopt_arm64/flutter.jar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Dependencies and Include Directories\nDESCRIPTION: Sets up the linkage with Flutter libraries and configures include directories for the application build.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Launch Screen Asset Customization\nDESCRIPTION: Command to open the iOS portion of a Flutter project in Xcode to customize launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/module/ios/host_app_ephemeral/Runner.tmpl/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings for Flutter Windows Runner\nDESCRIPTION: Applies standard build settings to the Flutter Windows runner target. This can be customized for applications requiring different build settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Flutter Device List Response - JSON-RPC\nDESCRIPTION: Example JSON-RPC response containing list of available devices with their properties\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\":2,\"result\":[{\"id\":\"702ABC1F-5EA5-4F83-84AB-6380CA91D39A\",\"name\":\"iPhone 6\",\"platform\":\"ios_x64\",\"available\":true}]}]\n```\n\n----------------------------------------\n\nTITLE: Add Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for `APPLICATION_ID`. This allows the application to access its identifier at compile time.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Constructor Element in a Class - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify an unnamed constructor in class `C`. It exemplifies the structured approach to documenting constructors within the API's transformation framework.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nuris: ['lib.dart']\nconstructor: ''\ninClass: 'C'\n```\n\n----------------------------------------\n\nTITLE: Set CMake minimum required version\nDESCRIPTION: Specifies the minimum version of CMake required to build the project. This ensures that the CMake features used are supported.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Updating Fragment Shader with Color Varying in GLSL\nDESCRIPTION: This updated fragment shader uses the interpolated color varying from the vertex shader to set the fragment color.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\nin vec4 v_color;\n\nvoid main() {\n  frag_color = v_color;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GClient Configuration for Fuchsia\nDESCRIPTION: GClient configuration snippet to enable Fuchsia-specific dependencies and emulator support.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsolutions = [\n  {\n    # ...\n    \"custom_vars\": {\n      \"download_fuchsia_deps\": True,\n      \"run_fuchsia_emu\": True,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: iOS Dart Platform View Implementation\nDESCRIPTION: Create a UIKitView for implementing platform views on iOS\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final String viewType = '<platform-view-type>';\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return UiKitView(\n    viewType: viewType,\n    layoutDirection: TextDirection.ltr,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mint bin directory to PATH\nDESCRIPTION: Commands to add the Mint bin directory to the user's PATH and reload the profile.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho 'export PATH=\"$PATH:$HOME/.mint/bin\"' >> ~/.profile\nsource ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web with Local Engine\nDESCRIPTION: Flutter commands to run and test a Flutter web application using a locally built Web engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter run --local-web-sdk=wasm_release -d chrome\nflutter test --local-web-sdk=wasm_release test/path/to/your_test.dart\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Launch Screen Asset Configuration\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/ios.tmpl/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Starting ADB Server\nDESCRIPTION: Command to start the Android Debug Bridge server for enabling communication with Android devices.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nadb start-server\n```\n\n----------------------------------------\n\nTITLE: Launching Fuchsia Emulator\nDESCRIPTION: This shell command launches the Fuchsia emulator in a graphical environment. It uses `ffx emu start` to start the emulator.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nffx emu start\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests for Flutter Engine\nDESCRIPTION: Commands to build the Flutter engine and run Dart tests for native and web platforms.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflutter/tools/gn --unoptimized\nninja -C out/host_debug_unopt/\npython3 flutter/testing/run_tests.py --type dart\ncd flutter/lib/web_ui\ndev/felt test [test file]\n```\n\n----------------------------------------\n\nTITLE: Android Studio Gradle SDK Configuration\nDESCRIPTION: These are the Gradle SDK configurations that need to be configured in Android Studio to build the Android embedder.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n/Applications/Android Studio.app/Contents/jbr/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Application, Package, and Plugin Templates\nDESCRIPTION: Command to create a sample application, package, and plugin for Flutter, which populates the pub cache.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template=app app_sample\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template=package package_sample\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template=plugin plugin_sample\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Driver Tests\nDESCRIPTION: Example command illustrating how to run Flutter Driver tests for web using a specified browser and web port.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nflutter drive --target=test_driver/[driver_test].dart -d web-server --release --browser-name=chrome --web-port=8080\n```\n\n----------------------------------------\n\nTITLE: Custom Engine Dependency Override Configuration\nDESCRIPTION: YAML configuration for overriding sky_engine dependency when using a locally-built engine.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependency_overrides:\n  sky_engine:\n    path: /path/to/flutter/engine/src/out/host_debug/gen/dart-pkg/sky_engine\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Support for Windows Flutter Application\nDESCRIPTION: Adds Unicode definitions to ensure proper text handling in the Windows environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency for Windows Runner\nDESCRIPTION: Adds a dependency on the flutter_assemble target to ensure Flutter tool portions of the build are executed.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration\nDESCRIPTION: Gradle configuration for Android instrumentation testing\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n  ...\n  defaultConfig {\n    ...\n    testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n  }\n}\n\ndependencies {\n    testImplementation 'junit:junit:4.12'\n\n    // https://developer.android.com/jetpack/androidx/releases/test/#1.2.0\n    androidTestImplementation 'androidx.test:runner:1.2.0'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Engine for Fuchsia\nDESCRIPTION: Commands to build Flutter engine components for Fuchsia debugging and testing.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto && ninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia/flutter/tests/\nintegration/touch_input:tests\n```\n\n----------------------------------------\n\nTITLE: Changing Parameter Type to Non-Nullable in YAML\nDESCRIPTION: Shows how to specify making a parameter non-nullable with an optional default value in a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'changeParameterType'\nname: 'a'\nnullability: 'non_null'\nargumentValue:\n  expression: \"'newValue'\"\n```\n\n----------------------------------------\n\nTITLE: NDK Installation\nDESCRIPTION: Configures Native Development Kit (NDK) version 26.3.11579264 for native code compilation\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_5\n\nLANGUAGE: android-sdk\nCODE:\n```\nndk;26.3.11579264:ndk\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Integration Tests Command\nDESCRIPTION: Shell command to execute Flutter integration tests from the flutter_tools directory. Requires downloaded Dart SDK in the Flutter clone.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/integration.shard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n../../bin/cache/dart-sdk/bin/dart run test test/integration.shard\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Target Platform\nDESCRIPTION: Sets a fallback configuration for Flutter target platform if not previously defined, defaulting to windows-x64 architecture\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Test File References for Gradle Utils\nDESCRIPTION: File paths referenced for test files that verify gradle compatibility and configuration settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/android/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngradle_utils_test.dart\ncreate_test.dart\n```\n\n----------------------------------------\n\nTITLE: Gradle Settings Configuration for Flutter Plugin\nDESCRIPTION: Standard Gradle settings file configuration for Flutter plugin examples, including flutter tooling import and artifact registry configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/Plugins-and-Packages-repository-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n// package/example/android/settings.gradle\n// Imports flutter tooling and configures artifact registry\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file. This file manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Garbage Collection for Git Repository\nDESCRIPTION: Performs aggressive garbage collection on the Git repository to reduce its size after filtering.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n```\n\n----------------------------------------\n\nTITLE: Enabling Impeller on macOS Desktop in Info.plist\nDESCRIPTION: XML configuration to enable Impeller on macOS Desktop by adding a key-value pair to the Info.plist file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>FLTEnableImpeller</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Basic Integration Test Example\nDESCRIPTION: Simple integration test example showing test setup and assertion\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets(\"failing test example\", (WidgetTester tester) async {\n    expect(2 + 2, equals(5));\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter project configuration with CMake\nDESCRIPTION: Initial configuration for a Flutter project build in CMake, setting minimum CMake version requirements and project language specification.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Starting SafariDriver\nDESCRIPTION: Command to begin SafariDriver on a designated port on macOS devices. Ensure SafariDriver is enabled.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./usr/bin/safaridriver --port=4444\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version and project name with C++ language support.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(layers LANGUAGES CXX)\nset(BINARY_NAME \"layers\")\n```\n\n----------------------------------------\n\nTITLE: Custom LTO Build Configuration\nDESCRIPTION: Example of building with link-time optimization (LTO) using an existing host release configuration template.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\net build --config host_release --lto\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for configuring launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Creating Pipeline Descriptor in C++\nDESCRIPTION: This code creates a pipeline descriptor using the vertex and fragment shaders, initializing the fixed function state with default values.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nusing VS = BabyVertexShader;\nusing FS = BabyFragmentShader;\n\nauto desc = PipelineBuilder<VS, FS>::MakeDefaultPipelineDescriptor(*context);\n```\n\n----------------------------------------\n\nTITLE: Referencing Code Excerpts in Markdown Documentation\nDESCRIPTION: This snippet illustrates how to reference a code excerpt in a README.md using the code-excerpt tag, which will link to previously annotated code.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n<?code-excerpt \"main.dart (Foo)\"?>\n```dart\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Configuration\nDESCRIPTION: Establishes the minimum required CMake version, sets the project name, and defines the language as C++\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(ui LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Message Function in Dart Localization Class\nDESCRIPTION: Example of adding a new function with parameters to MaterialLocalizations class for localized strings.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nString aboutListTileTitle(String applicationName);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Development Script\nDESCRIPTION: Using the flutter-dev script for development, which doesn't use cached snapshots but runs slower\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter-dev\n```\n\n----------------------------------------\n\nTITLE: Defining OpenGL ES Function Resolver in C++\nDESCRIPTION: Creates a lambda function to resolve OpenGL ES function pointers using eglGetProcAddress.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nauto resolver = [](const char* name) -> void* {\n  return reinterpret_cast<void*>(::eglGetProcAddress(name));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Reactor Worker to Impeller Context in C++\nDESCRIPTION: Adds the custom reactor worker to the Impeller context for OpenGL ES threading management.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\ncontext->AddReactorWorker(worker);\n```\n\n----------------------------------------\n\nTITLE: Installing FlameGraph via Mint\nDESCRIPTION: Command to install the FlameGraph Swift command-line tool using Mint.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmint install lennet/FlameGraph\n```\n\n----------------------------------------\n\nTITLE: Android Instrumentation Test Setup\nDESCRIPTION: Java test class setup for Android instrumentation testing\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport androidx.test.rule.ActivityTestRule;\nimport dev.flutter.plugins.integration_test.FlutterTestRunner;\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\n\n@RunWith(FlutterTestRunner.class)\npublic class MainActivityTest {\n  @Rule\n  public ActivityTestRule<MainActivity> rule = new ActivityTestRule<>(MainActivity.class, true, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ChromeDriver for Web Testing\nDESCRIPTION: Command to start ChromeDriver on port 4444, which is required for running web integration tests in Flutter\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/web_e2e_tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchromedriver --port=4444\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake for Flutter Windows\nDESCRIPTION: Sets up initial project configuration including minimum CMake version, project name, and executable name.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(hello_world LANGUAGES CXX)\nset(BINARY_NAME \"hello_world\")\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Class\nDESCRIPTION: Command to run all tests in a specific test class using fully qualified class name\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test --tests com.flutter.gradle.BaseApplicationNameHandlerTest\n```\n\n----------------------------------------\n\nTITLE: DevTools Server Response Structure in Dart\nDESCRIPTION: Response structure from devtools.serve command containing server status and connection details.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n{\n  \"success\": true|false,\n  \"host\": \"server_host\",\n  \"port\": port_number\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Runner\nDESCRIPTION: Sets up the CMake project for a Flutter Windows runner application. It defines the minimum CMake version and project language.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (`libflutter_linux_gtk.so`). The path is stored in the `FLUTTER_LIBRARY` variable.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Impeller on iOS in Info.plist\nDESCRIPTION: XML configuration to disable Impeller on iOS by adding a key-value pair to the Info.plist file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>FLTEnableImpeller</key>\n<false/>\n```\n\n----------------------------------------\n\nTITLE: Android Build Gradle Minimum SDK Configuration\nDESCRIPTION: Set the minimum SDK version required for hybrid composition support\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    defaultConfig {\n        minSdkVersion 19\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Profile to HTML FlameGraph\nDESCRIPTION: Command to convert the copied profile data to an HTML FlameGraph using the FlameGraph tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nFlameGraph --html output.html\n```\n\n----------------------------------------\n\nTITLE: Running Flutter API Example in Chrome\nDESCRIPTION: This command demonstrates how to run a specific Flutter API example in Chrome from the command line.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% flutter run -d chrome lib/animation/curves/curve2_d.0.dart\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help for Web Locale Keymap Generator\nDESCRIPTION: Command to show help options for the keymap generation script with assertions enabled\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart --enable-asserts bin/gen_web_locale_keymap.dart -h\n```\n\n----------------------------------------\n\nTITLE: Installing Mint Package Manager via Homebrew\nDESCRIPTION: Command to install Mint, a package manager for Swift, using Homebrew.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install mint\n```\n\n----------------------------------------\n\nTITLE: Running GDB on a Flutter Linux application\nDESCRIPTION: Command to launch GDB debugger on a built Flutter Linux application, enabling debugging of the engine code.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngdb build/linux/x64/debug/bundle/your_app_name\n```\n\n----------------------------------------\n\nTITLE: Running Dart Analysis for Flutter Tools\nDESCRIPTION: Commands to run Dart analysis on the Flutter tool codebase and verify CI analysis builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd flutter/packages/flutter_tools\ndart analyze .\n```\n\nLANGUAGE: shell\nCODE:\n```\ndart --enable-asserts dev/bots/analyze.dart\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Architecture Examples\nDESCRIPTION: Commands to run different Flutter architecture examples including raw, rendering, and widgets implementations of spinning square demos.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter run raw/spinning_square.dart\nflutter run rendering/spinning_square.dart\nflutter run widgets/spinning_square.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Engine Tests\nDESCRIPTION: Commands to configure integration tests to use specific local engine variants\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport FLUTTER_LOCAL_ENGINE=android_debug_unopt\nexport FLUTTER_LOCAL_ENGINE_HOST=host_debug_unopt\nflutter test test/integration.shard/some_test_case\n```\n\n----------------------------------------\n\nTITLE: Defining Message Getter in Dart Localization Class\nDESCRIPTION: Example of adding a new getter without parameters to MaterialLocalizations class for localized strings.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nString get showMenuTooltip;\n```\n\n----------------------------------------\n\nTITLE: Disabling Flutter Analytics via CLI Command\nDESCRIPTION: Shell command to opt out of all Flutter data reporting including both analytics and crash reporting features.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/reporting/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter config --no-analytics\n```\n\n----------------------------------------\n\nTITLE: Defining Line Break Properties for Unicode Character Ranges\nDESCRIPTION: This code snippet defines line break properties for various Unicode character ranges. It uses a compact format where each line represents a character or range of characters, followed by a semicolon and the corresponding line break property code.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n0D70..0D78;AL     # No     [9] MALAYALAM NUMBER TEN..MALAYALAM FRACTION THREE SIXTEENTHS\n0D79;PO           # So         MALAYALAM DATE MARK\n0D7A..0D7F;AL     # Lo     [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K\n0D81;CM           # Mn         SINHALA SIGN CANDRABINDU\n0D82..0D83;CM     # Mc     [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0D85..0D96;AL     # Lo    [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA\n0D9A..0DB1;AL     # Lo    [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA\n0DB3..0DBB;AL     # Lo     [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA\n0DBD;AL           # Lo         SINHALA LETTER DANTAJA LAYANNA\n0DC0..0DC6;AL     # Lo     [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA\n```\n\n----------------------------------------\n\nTITLE: Creating OpenGL ES Proc Table in C++\nDESCRIPTION: Initializes an OpenGL ES proc table using the defined resolver function.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nauto gl = std::make_unique<ProcTableGLES>(resolver);\n```\n\n----------------------------------------\n\nTITLE: Running gclient sync for Flutter Engine\nDESCRIPTION: Command to synchronize dependencies for the Flutter engine after setting up the .gclient file.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngclient sync\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for Flutter Build\nDESCRIPTION: Establishes the minimum required CMake version for Flutter build configuration, ensuring compatibility with build tools\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Specifying Seed for Test Shuffling\nDESCRIPTION: Setting a custom seed value for randomizing microbenchmark test order\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart --dart-define=seed=12345\n```\n\n----------------------------------------\n\nTITLE: Dart Imports for Hybrid Composition\nDESCRIPTION: Import necessary Flutter packages for platform view implementation on the Dart side\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Flutter Device List Request - JSON-RPC\nDESCRIPTION: Example JSON-RPC request to get available devices using the device.getDevices method\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\"method\":\"device.getDevices\",\"id\":2}]\n```\n\n----------------------------------------\n\nTITLE: Using Angle OpenGL ES Emulation Layer in Flutter\nDESCRIPTION: Command-line argument to use the Angle OpenGL ES emulation layer instead of the default OpenGL ES driver in Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n--use_angle\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Screen Assets in Xcode\nDESCRIPTION: Method to replace launch screen images by opening iOS Xcode project and modifying Assets.xcassets\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Support in CMake\nDESCRIPTION: Adds Unicode support for all project targets through preprocessor definitions.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Command Line Tools Installation\nDESCRIPTION: Installs the latest version of Android command line tools for SDK management\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_1\n\nLANGUAGE: android-sdk\nCODE:\n```\ncmdline-tools;latest:cmdline-tools\n```\n\n----------------------------------------\n\nTITLE: Code Template in YAML\nDESCRIPTION: Illustrates a code template with an expression and variables for generating code during transformations\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nexpression: '{% type %}({% arg %})'\nvariables:\n  arg: ...\n  type: ...\n```\n\n----------------------------------------\n\nTITLE: Building Fuchsia for QEMU Testing\nDESCRIPTION: Command to set up and build Fuchsia for QEMU x64 testing environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfx set terminal.qemu-x64 && fx build\n```\n\n----------------------------------------\n\nTITLE: Running Web Locale Keymap Generator Script\nDESCRIPTION: Command to execute the Dart script for generating web locale keymap with assertions enabled\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart --enable-asserts bin/gen_web_locale_keymap.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Parameterized Message in DefaultMaterialLocalizations\nDESCRIPTION: Implementation of a simple localized string getter in the DefaultMaterialLocalizations class.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nString get showMenuTooltip => 'Show menu';\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings to Executable\nDESCRIPTION: Applies the standard compilation settings defined in the `APPLY_STANDARD_SETTINGS` function to the executable target.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running prepare_package.dart Script\nDESCRIPTION: Invoking the prepare_package.dart script to create an installation bundle efficiently.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./bin/cache/dart-sdk/bin/dart ./dev/bots/prepare_package.dart --temp_dir $TMPDIR --revision $REVISION --branch master --output $PWD\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Doctor\nDESCRIPTION: Executing the flutter doctor command to check the installation and ensure all dependencies are met.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter doctor\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for Flutter on Windows\nDESCRIPTION: Adding the Flutter binary directory to the PATH environment variable on Windows.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nset PATH=\"%PATH%;%CD%\\bin\\flutter\"\n```\n\n----------------------------------------\n\nTITLE: Running Fuchsia Tests Locally\nDESCRIPTION: Python command to run Fuchsia tests locally using the Flutter testing framework.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython3 flutter/tools/fuchsia/with_envs.py flutter/testing/fuchsia/run_tests.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Preserve Native Libraries for Profiling\nDESCRIPTION: Gradle configuration to prevent stripping of native libraries (*.so files) which preserves debug symbols for profiling. This should be added to the android block in build.gradle.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n packagingOptions{\n     doNotStrip \"**/*.so\"\n }\n```\n\n----------------------------------------\n\nTITLE: Updating BuildTestTask for Custom Task\nDESCRIPTION: This snippet suggests updating the task class to extend the BuildTestTask and override necessary functions to facilitate a new build and test model. The required functions to override include getBuildArgs, getTestArgs, parseTaskResult, and getApplicationBinaryPath.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Update the task class to extend BuildTestTask\n// Override function getBuildArgs\n// Override function getTestArgs\n// Override function parseTaskResult\n// Override function getApplicationBinaryPath\n```\n\n----------------------------------------\n\nTITLE: Local Sample Code Analysis Command\nDESCRIPTION: Bash command to run sample code analysis locally in the Flutter repository\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTMPDIR=/tmp bin/cache/dart-sdk/bin/dart dev/bots/analyze_sample_code.dart --temp=samples\n```\n\n----------------------------------------\n\nTITLE: Markdown Links and References\nDESCRIPTION: Link references for Flutter infrastructure team issues and documentation URLs\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/triage/Infra-Triage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`team-infra`]: https://github.com/flutter/flutter/issues?q=is%3Aissue%20state%3Aopen%20label%3Ateam-infra\n```\n\n----------------------------------------\n\nTITLE: Renaming Parameter in YAML\nDESCRIPTION: Demonstrates how to specify renaming a parameter from an old name to a new name in a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'renameParameter'\noldName: 'a'\nnewName: 'b'\n```\n\n----------------------------------------\n\nTITLE: Attaching with Specific Debug Port\nDESCRIPTION: Command for attaching to a Flutter application when the VM Service port is known.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/attach.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter attach --debug-port 12345\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required version of CMake to ensure compatibility during the build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Wrapper Download Command\nDESCRIPTION: Command to download the Gradle wrapper from the engine's third party directory\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../../../engine/src/flutter/third_party/gradle/bin/gradle wrapper\n```\n\n----------------------------------------\n\nTITLE: Update Script Path Reference - Widget Preview Scaffold\nDESCRIPTION: Reference to the Dart script path used to regenerate the widget preview scaffold project\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndart test/widget_preview_scaffold.shard/update_widget_preview_scaffold.dart\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Setting\nDESCRIPTION: Sets a CMake policy to NEW. This affects how CMake handles certain behaviors.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Removing Positional Parameter in YAML\nDESCRIPTION: Demonstrates how to specify removing a positional parameter using its zero-based index in a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'removeParameter'\nindex: 1\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tools Tests\nDESCRIPTION: Commands for running Flutter tool tests using either dart or flutter test commands.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart test test_file_or_directory_path\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter test test_file_or_directory_path\n```\n\n----------------------------------------\n\nTITLE: Test File Path Reference - Widget Preview Template Test\nDESCRIPTION: Reference to the test file path that detects template changes in the widget preview scaffold\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwidget_preview_scaffold/test/template_change_detection_smoke_test.dart\n```\n\n----------------------------------------\n\nTITLE: Starting Flutter Daemon - Shell Command\nDESCRIPTION: Command to start the Flutter daemon server in persistent JSON-RPC mode for IDE integration\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter daemon\n```\n\n----------------------------------------\n\nTITLE: Attaching to Fuchsia Module\nDESCRIPTION: Command for attaching to a Flutter application running on Fuchsia platform by specifying the module name.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/attach.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter attach --module=mod_name\n```\n\n----------------------------------------\n\nTITLE: Flutter Run Non-Resident Mode\nDESCRIPTION: Command modifier that makes the flutter run command return immediately after app launch.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--no-resident\n```\n\n----------------------------------------\n\nTITLE: Setting up EGL Display Connection in C++\nDESCRIPTION: Creates an EGL display connection using Impeller's EGL toolkit.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\negl::Display display;\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory within the installation bundle.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Packages\nDESCRIPTION: Command to download all necessary pub package dependencies for Flutter projects.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutter update-packages\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Flutter Textures\nDESCRIPTION: Basic markdown documentation explaining the purpose of the example repository for implementing custom Flutter textures.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flutter Texture\n\nAn example to show how to use custom Flutter textures.\n```\n\n----------------------------------------\n\nTITLE: Flutter Run Command Basic Usage\nDESCRIPTION: Basic command for running a Flutter app in debug mode with hot reload enabled.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Unit Tests\nDESCRIPTION: Command to run Flutter Tools unit tests with environment variable setup\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport FLUTTER_ROOT=~/path/to/flutter-sdk\nflutter test --concurrency 1\n```\n\n----------------------------------------\n\nTITLE: Flutter Run with Machine Mode\nDESCRIPTION: Command modifier that enables JSON-based communication for IDE integration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--machine\n```\n\n----------------------------------------\n\nTITLE: Creating Impeller Renderer in C++\nDESCRIPTION: Initializes an Impeller renderer using the created context.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nauto renderer = std::make_shared<Renderer>(context);\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Properties\nDESCRIPTION: This snippet defines Unicode character properties for a range of characters, including their General Category and script classification. It uses a semicolon-separated format where each line represents a character or range of characters followed by their properties.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n1ABE;CM           # Me         COMBINING PARENTHESES OVERLAY\n1ABF..1AC0;CM     # Mn     [2] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER TURNED W BELOW\n1B00..1B03;CM     # Mn     [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n1B04;CM           # Mc         BALINESE SIGN BISAH\n1B05..1B33;AL     # Lo    [47] BALINESE LETTER AKARA..BALINESE LETTER HA\n1B34;CM           # Mn         BALINESE SIGN REREKAN\n1B35;CM           # Mc         BALINESE VOWEL SIGN TEDUNG\n1B36..1B3A;CM     # Mn     [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n1B3B;CM           # Mc         BALINESE VOWEL SIGN RA REPA TEDUNG\n1B3C;CM           # Mn         BALINESE VOWEL SIGN LA LENGA\n1B3D..1B41;CM     # Mc     [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B42;CM           # Mn         BALINESE VOWEL SIGN PEPET\n1B43..1B44;CM     # Mc     [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n1B45..1B4B;AL     # Lo     [7] BALINESE LETTER KAF SASAK..BALINESE LETTER ASYURA SASAK\n1B50..1B59;NU     # Nd    [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE\n1B5A..1B5B;BA     # Po     [2] BALINESE PANTI..BALINESE PAMADA\n1B5C;AL           # Po         BALINESE WINDU\n1B5D..1B60;BA     # Po     [4] BALINESE CARIK PAMUNGKAH..BALINESE PAMENENG\n1B61..1B6A;AL     # So    [10] BALINESE MUSICAL SYMBOL DONG..BALINESE MUSICAL SYMBOL DANG GEDE\n1B6B..1B73;CM     # Mn     [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1B74..1B7C;AL     # So     [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Steps for CMake Builds\nDESCRIPTION: This segment configures the installation steps post-build, specifying where binaries and support files are placed. It's crucial for ensuring executables are runnable directly from Visual Studio. The process depends on the build directory's structure and includes repeated asset copying to ensure current resources. Intended inputs include configuration parameters, and outputs include organized runtime directories.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it\\'s required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Starting Fuchsia Emulator\nDESCRIPTION: Command to launch the Fuchsia emulator in a graphical environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nffx emu start\n```\n\n----------------------------------------\n\nTITLE: Flutter Daemon Version Request - JSON-RPC\nDESCRIPTION: Example JSON-RPC request to get the daemon protocol version using the daemon.version method\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\"method\":\"daemon.version\",\"id\":0}]\n```\n\n----------------------------------------\n\nTITLE: Android Platform Configuration\nDESCRIPTION: Defines the Android platform version 35 for development and compilation\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_0\n\nLANGUAGE: android-sdk\nCODE:\n```\nplatforms;android-35:platforms\n```\n\n----------------------------------------\n\nTITLE: Renaming Element in YAML\nDESCRIPTION: Illustrates how to specify renaming an element to a new name using a YAML configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: 'rename'\nnewName: 'B'\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Web Engine Locally\nDESCRIPTION: Command to build the Flutter Web Engine using the felt tool\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfelt build\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenGL ES Playground Tests in Flutter\nDESCRIPTION: GTest filter to run only OpenGL ES backend playground tests with a specific name pattern in Flutter development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n--gtest_filter=\"Play/*Foo*/OpenGLES\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Modes in CMake\nDESCRIPTION: Defines build configuration types (Debug/Profile/Release) and handles multi-config generators.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running the Private Test Runner in Flutter\nDESCRIPTION: Command to execute the private test runner script for testing private interfaces in Flutter.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_private/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart run bin/test_private.dart\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File\nDESCRIPTION: Command to run tests from a specific test file\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter test test/general.shard/utils_test.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Establishes the minimum required CMake version for the Flutter build configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Running Engine Tool Tests\nDESCRIPTION: Command for running tests for the engine tool itself during development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\net test //flutter/tools/engine_tool/...\n```\n\n----------------------------------------\n\nTITLE: Flutter Run Without Hot Reload\nDESCRIPTION: Command to run a Flutter app in debug mode without hot reload functionality.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --no-hot\n```\n\n----------------------------------------\n\nTITLE: MidLetter Unicode Properties Definition\nDESCRIPTION: Defines Unicode code points for punctuation marks that can appear between letters, including colons and dots\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_12\n\nLANGUAGE: unicode-data\nCODE:\n```\n003A          ; MidLetter # Po       COLON\n00B7          ; MidLetter # Po       MIDDLE DOT\n0387          ; MidLetter # Po       GREEK ANO TELEIA\n055F          ; MidLetter # Po       ARMENIAN ABBREVIATION MARK\n05F4          ; MidLetter # Po       HEBREW PUNCTUATION GERSHAYIM\n2027          ; MidLetter # Po       HYPHENATION POINT\nFE13          ; MidLetter # Po       PRESENTATION FORM FOR VERTICAL COLON\nFE55          ; MidLetter # Po       SMALL COLON\nFF1A          ; MidLetter # Po       FULLWIDTH COLON\n```\n\n----------------------------------------\n\nTITLE: Restricting Files to Check\nDESCRIPTION: This command restricts the header guard check tool to only check files within the specified directory. The `--include` flag is used to specify a relative path (to the `engine/src/flutter` root) for inclusion in the check. It uses Dart to run the tool.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"dart ./tools/header_guard_check/bin/main.dart --include impeller\"\n```\n\n----------------------------------------\n\nTITLE: Flutter Daemon Version Response - JSON-RPC\nDESCRIPTION: Example JSON-RPC response containing the daemon protocol version\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\":0,\"result\":\"0.1.0\"}]\n```\n\n----------------------------------------\n\nTITLE: SDK Tools Installation\nDESCRIPTION: Installs core Android SDK development tools\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_4\n\nLANGUAGE: android-sdk\nCODE:\n```\ntools:tools\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests\nDESCRIPTION: Command to run all Gradle tests in the project\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Running Basic Flutter Hello World Demo\nDESCRIPTION: Command to execute the default Flutter Hello World demo application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Flutter Run in Release Mode\nDESCRIPTION: Command to run a Flutter app in release mode with full optimizations.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: Flutter Run in Profile Mode\nDESCRIPTION: Command to run a Flutter app in profile mode for performance analysis.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --profile\n```\n\n----------------------------------------\n\nTITLE: iOS Integration Test Setup\nDESCRIPTION: Objective-C test setup for iOS integration testing\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n@import XCTest;\n@import integration_test;\n\nINTEGRATION_TEST_IOS_RUNNER(RunnerTests)\n```\n\n----------------------------------------\n\nTITLE: Adding Profile Fallbacks in Flutter Android Build Types\nDESCRIPTION: This YAML snippet adds fallback configurations for build types, aiding Flutter projects created with older tools when they use the profile configuration.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nprofile {\n    matchingFallbacks = ['debug', 'release']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the Flutter application including executable, ICU data, libraries, and assets. Handles different configurations for Debug vs Profile/Release builds.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Analyzer\nDESCRIPTION: Command to run the analyzer on Flutter Tools codebase\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter analyze\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Filter for Specific Playground Test\nDESCRIPTION: Command line arguments to pass to the test executable for running a specific Playground-enabled test and configuring additional debug settings.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/xcode_frame_capture.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--gtest_filter=TestName --enable_playground --timeout=-1\n```\n\n----------------------------------------\n\nTITLE: Creating a New iOS Memory Test in Flutter\nDESCRIPTION: Steps to create a new iOS memory test case and add it to Flutter's device lab. This involves writing a Flutter driver test, adding an entry to the manifest, and creating a task file with memory measurement enabled.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n1. Write (or reuse) a normal Flutter driver test for the app in files named like `test_driver/some_memory_perf.dart` and `test_driver/some_memory_perf_test.dart`.\n2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]\n3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder that specifies `measureMemory: true`.\n```\n\n----------------------------------------\n\nTITLE: Add driver test for super_important_case (deprecated) (Dart)\nDESCRIPTION: This code snippet adds a driver test using the macroPerfTest function to navigate to the 'super_important_case' page and collect performance metrics. It is deprecated in favor of e2e tests. It includes optional parameters for page delay, and custom driverOps/setupOps functions to customize the test.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n   import 'package:flutter_driver/flutter_driver.dart';\n   import 'package:macrobenchmarks/common.dart';\n\n   import 'util.dart';\n\n   void main() {\n     macroPerfTest(\n       'super_important_case',\n       kSuperImportantCaseRouteName,\n       pageDelay: const Duration(seconds: 1),\n       /* optional */ driverOps: (FlutterDriver driver) async {\n           ...\n       },\n       /* optional */ setupOps: (FlutterDriver driver) async {\n           ...\n       },\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to ensure consistent behavior across different CMake versions. CMP0063 relates to target_sources command.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Kotlin Formatting Rules\nDESCRIPTION: Explains how to use an .editorconfig file to apply additional Kotlin formatting rules specific to the Flutter repository\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n3. Additionally, Kotlin code in the Flutter repository currently uses some additional rules for compatibility with older versions of Kotlin.\nThese rules can only be configured by an `.editorconfig` file in the directory from which Android Studio was opened. To configure these rules, create a copy of the [`.editorconfig`](../../../dev/bots/test/analyze-test-input/.editorconfig) that is used by tests in the root directory you intend to open with Android Studio.\n```\n\n----------------------------------------\n\nTITLE: Add custom target for Flutter assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers.  This target is likely used to trigger the build of the Flutter library using the custom command defined earlier.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: C++ Struct for GLSL Uniform\nDESCRIPTION: Defines a C++ struct corresponding to the `FragInfo` uniform block in the GLSL code. This struct contains a `Scalar` member named `time` to hold the time value.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nstruct FragInfo {\n  Scalar time; // (offset 0, size 4)\n}; // struct FragInfo (size 4)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build and Plugin Rules\nDESCRIPTION: These CMake directives handle the integration of Flutter's build rules and plugin management within the project. The configuration utilizes a directory for Flutter-specific rules and includes generated plugin setups. Dependencies are the presence of Flutter-managed instructions and plugins intended for C++ integration within the build process.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Emulator and PM Serve\nDESCRIPTION: This snippet configures the Fuchsia emulator for x64 architecture and starts it in headless mode. It then initiates the Fuchsia service manager.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfx set terminal.qemu-x64\nffx emu start --headless\n\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Paths\nDESCRIPTION: Sets up ephemeral directory and Flutter library paths for Windows platform. Defines critical library and configuration locations for the Flutter build.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\nset(FLUTTER_TARGET_PLATFORM \"windows-x64\")\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for flutter.serviceExtensionStateChanged Event in Flutter DAP\nDESCRIPTION: JSON format for the flutter.serviceExtensionStateChanged custom event in Flutter's Debug Adapter Protocol. This event is emitted when a Flutter service extension value changes, with the extension name and its new value.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"event\",\n\t\"event\": \"flutter.serviceExtensionStateChanged\",\n\t\"body\": {\n\t\t\"extension\": \"ext.flutter.debugPaint\",\n\t\t\"value\": \"true\",\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend with custom commands for generating necessary files and libraries. Creates a phony target to ensure proper rebuilding of Flutter components.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Dart intl Package in Markdown\nDESCRIPTION: This snippet demonstrates how to include a link to the Dart 'intl' package in Markdown format. It's used to provide additional resources for internationalization in Flutter projects.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/regenerate.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Dart `intl` package](https://github.com/dart-lang/intl)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library and Application Build Configuration\nDESCRIPTION: Sets up subdirectories for Flutter library, application runner, and generated plugin build rules\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a compiler definition for the APPLICATION_ID. This makes the application ID available to the C++ code during compilation.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Metal Performance HUD\nDESCRIPTION: Activates the Metal performance heads-up display (HUD) for real-time graphics performance monitoring in command-line applications. Useful for debugging and performance analysis.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/metal_validation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport MTL_HUD_ENABLED=1\n```\n\n----------------------------------------\n\nTITLE: Creating a Manifest File for Flutter Private Tests\nDESCRIPTION: JSON configuration for a private test showing the structure of a manifest file. It defines test files, pubspec file, and dependencies to be copied to the temporary test environment.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_private/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests\": [\n    \"my_private_test.dart\"\n  ],\n  \"pubspec\": \"my_private_test.pubspec.yaml\",\n  \"deps\": [\n    \"lib/src/subpackage/my_private_implementation.dart\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Element in a Class - YAML\nDESCRIPTION: This YAML snippet shows how to represent a method `m` in a class `C`, detailing its URI and the contextual relationship with the containing class. It emphasizes the importance of indicating class membership.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuris: ['lib.dart']\nmethod: 'm'\ninClass: 'C'\n```\n\n----------------------------------------\n\nTITLE: Setting up iOS dependencies for Flutter-Platform View Example\nDESCRIPTION: Command sequence for installing CocoaPods dependencies required for the iOS portion of the Flutter-Platform View example. This must be executed before running the Flutter application.\nSOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npushd ios/ ; pod install ; popd\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Link References in Markdown\nDESCRIPTION: Markdown links referencing related documentation and issues about Virtual Display mode implementation\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Android Platform Views](Android-Platform-Views.md)\n[`vd-only` label](https://github.com/flutter/flutter/labels/vd-only)\n[flutter/flutter#19418](https://github.com/flutter/flutter/issues/19418)\n[Android SDK issue](https://issuetracker.google.com/issues/138442751)\n```\n\n----------------------------------------\n\nTITLE: Running Vulkan Unit Tests for Impeller in Flutter\nDESCRIPTION: Command to run Vulkan-specific unit tests for Impeller in Flutter. Uses gtest filtering to focus only on Vulkan-related tests from the build output directory for arm64 architecture.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Setting-up-MoltenVK-on-macOS-for-Impeller.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nout/host_debug_unopt_arm64/impeller_unittests --gtest_filter=\"*Vulkan*\"\n```\n\n----------------------------------------\n\nTITLE: Using CheckedNumeric for Safe Integer Operations in C++\nDESCRIPTION: Example of using CheckedNumeric to handle overflow and underflow conditions safely. The snippet demonstrates how CheckedNumeric detects underflow errors and can trigger breakpoints or configured handlers.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"base/numerics/checked_math.h\"\n...\nCheckedNumeric<uint32_t> variable = 0;\nvariable++;\nvariable--;\nif (variable.ValueOrDie() == 0)\n  // Fine, |variable| still within valid range.\n\nvariable--;\nvariable++;\nif (variable.ValueOrDie() == 0)  // Breakpoint or configured CheckHandler\n  // Does not happen as variable underflowed.\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake for Flutter Linux\nDESCRIPTION: Implements a custom function to prepend a prefix to each element in a list, replacing functionality that isn't available in CMake 3.10. This function is used to prepare header file paths with the appropriate directory prefix.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Testing Dart Packages\nDESCRIPTION: This command loads Dart package dependencies and executes all test files found in the directory structure. It utilizes asserts during the test execution to ensure correctness.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/compare_goldens/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart pub get\nfind . -name \"*_test.dart\" | xargs -n 1 dart --enable-asserts\n```\n\n----------------------------------------\n\nTITLE: Install Assets Directory\nDESCRIPTION: Installs the assets directory (named `flutter_assets`) to the data directory within the installation bundle. This includes all Flutter assets like images, fonts, and configuration files.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Minimum CMake Version\nDESCRIPTION: Establishes the minimum required CMake version for Flutter build configuration\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Build Tools Configuration\nDESCRIPTION: Specifies Android build tools version 35.0.0-rc4 for compilation and packaging\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_2\n\nLANGUAGE: android-sdk\nCODE:\n```\nbuild-tools;35.0.0-rc4:build-tools\n```\n\n----------------------------------------\n\nTITLE: Specialization Constant Shader Sampling Implementation\nDESCRIPTION: Optimized shader sampling using specialization constants to eliminate runtime branching and backend-specific code\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/specialization_constants.md#2025-04-21_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nlayout(constant_id = 0) const float supports_decal = 1.0;\n\nvec4 Sample(sampler2D sampler, vec2 coord) {\n  if (supports_decal) {\n    return texture(sampler, coord);\n  }\n  return IPSampleDecal(sampler, coord)\n}\n```\n\n----------------------------------------\n\nTITLE: ALetter Unicode Properties Definition\nDESCRIPTION: Defines Unicode code points for letter characters including Arabic mathematical symbols and Latin capital letters\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_11\n\nLANGUAGE: unicode-data\nCODE:\n```\n1EE7E         ; ALetter # Lo       ARABIC MATHEMATICAL STRETCHED DOTLESS FEH\n1EE80..1EE89  ; ALetter # Lo  [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH\n1EE8B..1EE9B  ; ALetter # Lo  [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN\n1EEA1..1EEA3  ; ALetter # Lo   [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL\n1EEA5..1EEA9  ; ALetter # Lo   [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH\n1EEAB..1EEBB  ; ALetter # Lo  [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN\n1F130..1F149  ; ALetter # So  [26] SQUARED LATIN CAPITAL LETTER A..SQUARED LATIN CAPITAL LETTER Z\n1F150..1F169  ; ALetter # So  [26] NEGATIVE CIRCLED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z\n1F170..1F189  ; ALetter # So  [26] NEGATIVE SQUARED LATIN CAPITAL LETTER A..NEGATIVE SQUARED LATIN CAPITAL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Describing Flutter Widget Preview Scaffold in Markdown\nDESCRIPTION: This Markdown snippet outlines the purpose of the Widget Preview Scaffold project. It explains that the project is automatically generated by the 'flutter widget-preview' command and serves as a host for widgets to be displayed in the Flutter widget previewer.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/widget_preview_scaffold/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Widget Preview Scaffold\n\nThis project is generated by `flutter widget-preview` and is used to host Widgets\nto be previewed in the widget previewer.\n```\n\n----------------------------------------\n\nTITLE: Identifying Extra Blank Line in Flutter\nDESCRIPTION: This snippet shows how an extra blank line is represented in the code. It's important for maintaining clean and consistent code formatting.\nSOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/test/analyze-test-input/root/packages/foo/spaces.txt#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nExtra blank line:\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Word Break Properties - Unicode\nDESCRIPTION: This snippet defines the Unicode properties for word breaking, including total code points and categorizations for various characters such as quotations and Hebrew letters. It serves as a reference for applications dealing with text processing and internationalization.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Property: Word_Break\n\n#  All code points not explicitly listed for Word_Break\n#  have the value Other (XX).\n\n# @missing: 0000..10FFFF; Other\n\n0022          ; Double_Quote # Po       QUOTATION MARK\n\n# Total code points: 1\n\n0027          ; Single_Quote # Po       APOSTROPHE\n\n# Total code points: 1\n\n05D0..05EA    ; Hebrew_Letter # Lo  [27] HEBREW LETTER ALEF..HEBREW LETTER TAV\n05EF..05F2    ; Hebrew_Letter # Lo   [4] HEBREW YOD TRIANGLE..HEBREW LIGATURE YIDDISH DOUBLE YOD\nFB1D          ; Hebrew_Letter # Lo       HEBREW LETTER YOD WITH HIRIQ\nFB1F..FB28    ; Hebrew_Letter # Lo  [10] HEBREW LIGATURE YIDDISH YOD YOD PATAH..HEBREW LETTER WIDE TAV\nFB2A..FB36    ; Hebrew_Letter # Lo  [13] HEBREW LETTER SHIN WITH SHIN DOT..HEBREW LETTER ZAYIN WITH DAGESH\nFB38..FB3C    ; Hebrew_Letter # Lo   [5] HEBREW LETTER TET WITH DAGESH..HEBREW LETTER LAMED WITH DAGESH\nFB3E          ; Hebrew_Letter # Lo       HEBREW LETTER MEM WITH DAGESH\nFB40..FB41    ; Hebrew_Letter # Lo   [2] HEBREW LETTER NUN WITH DAGESH..HEBREW LETTER SAMEKH WITH DAGESH\nFB43..FB44    ; Hebrew_Letter # Lo   [2] HEBREW LETTER FINAL PE WITH DAGESH..HEBREW LETTER PE WITH DAGESH\nFB46..FB4F    ; Hebrew_Letter # Lo  [10] HEBREW LETTER TSADI WITH DAGESH..HEBREW LIGATURE ALEF LAMED\n\n# Total code points: 75\n\n000D          ; CR # Cc       <control-000D>\n\n# Total code points: 1\n\n000A          ; LF # Cc       <control-000A>\n\n# Total code points: 1\n\n000B..000C    ; Newline # Cc   [2] <control-000B>..<control-000C>\n0085          ; Newline # Cc       <control-0085>\n2028          ; Newline # Zl       LINE SEPARATOR\n2029          ; Newline # Zp       PARAGRAPH SEPARATOR\n\n# Total code points: 5\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Mouse Input (Log Example)\nDESCRIPTION: This snippet shows log output when injecting mouse input into the application. It demonstrates the sequence of events, including the injection, event reception by the view, and successful response.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\nInjecting the mouse input\n[mouse-input-test.cm] INFO: [portable_ui_test.cc(227)] Injecting mouse input\n\nView receives the event\n[flutter_jit_runner] INFO: mouse-input-view.cm(flutter): mouse-input-view received input: PointerData(embedderId: 0, timeStamp: 23:18:05.031003, change: PointerChange.add, kind: PointerDeviceKind.mouse, signalKind: PointerSignalKind.none, device: 4294967295, pointerIdentifier: 0, physicalX: 641.4656372070312, physicalY: 402.9313049316406, physicalDeltaX: 0.0, physicalDeltaY: 0.0, buttons: 0, synthesized: true, pressure: 0.0, pressureMin: 0.0, pressureMax: 0.0, distance: 0.0, distanceMax: 0.0, size: 0.0, radiusMajor: 0.0, radiusMinor: 0.0, radiusMin: 0.0, radiusMax: 0.0, orientation: 0.0, tilt: 0.0, platformData: 0, scrollDeltaX: 0.0, scrollDeltaY: 0.0, panX: 0.0, panY: 0.0, panDeltaX: 0.0, panDeltaY: 0.0, scale: 0.0, rotation: 0.0)\n\nSuccessfully received response from view\n[mouse-input-test.cm] INFO: [mouse-input-test.cc(120)] Received MouseInput event\n[mouse-input-test.cm] INFO: [mouse-input-test.cc(207)] Client received mouse change at (641.466, 402.931) with buttons 0.\n[mouse-input-test.cm] INFO: [mouse-input-test.cc(211)] Expected mouse change is at approximately (641, 402) with buttons 0.\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Message in DefaultMaterialLocalizations\nDESCRIPTION: Implementation of a parameterized localized string function in the DefaultMaterialLocalizations class.\nSOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nString aboutListTileTitle(String applicationName) => 'About $applicationName';\n```\n\n----------------------------------------\n\nTITLE: Sample Suppressions Output\nDESCRIPTION: This snippet demonstrates the output format of used suppressions, showing the count and bytes for different suppression templates.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-----------------------------------------------------\nSuppressions used:\n  count      bytes template\n      1        120 class_createInstance\n      5         80 MakeSkSurfaceFromBackingStore\n      3        128 _dispatch_once_callout\n-----------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Category Code Point Ranges\nDESCRIPTION: Defines ranges of Unicode code points that belong to the 'Extend' category. Each line specifies a range or single code point and includes a description of the character(s), along with their general category (Mn for non-spacing mark, Mc for spacing combining mark, or Me for enclosing mark).\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n0300..036F    ; Extend # Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n0483..0487    ; Extend # Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n0488..0489    ; Extend # Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n[...additional ranges omitted for brevity...]\n0E34..0E3A    ; Extend # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E47..0E4E    ; Extend # Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n```\n\n----------------------------------------\n\nTITLE: Merging Flutter UI Code\nDESCRIPTION: Copies existing app's UI code and assets into the new project structure. Requires source directories (`<existing-app-dir>/lib` and optionally `<existing-app-dir>/assets`) to exist. This step ensures the UI and assets are retained in the migration process.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp -r <existing-app-dir>/lib <appname>/\n\nif [ -d \"<existing-app-dir>/assets\" ]; then\n  cp -r <existing-app-dir>/assets <appname>/\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting Fuchsia Package Server\nDESCRIPTION: Commands to initialize and start the Fuchsia package server.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd \"$FUCHSIA_DIR\"\nfx serve\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: Clones the forked repository from GitHub to your local machine. Replace `<your_name_here>` with your GitHub username.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n`git clone git@github.com:<your_name_here>/packages.git`\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode 'Extend' Category Code Points\nDESCRIPTION: This snippet defines Unicode code points and ranges that belong to the 'Extend' category. It includes characters from various scripts and writing systems, primarily consisting of combining marks, vowel signs, and other modifiers that extend the base character they're associated with.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n0EB1          ; Extend # Mn       LAO VOWEL SIGN MAI KAN\n0EB4..0EBC    ; Extend # Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO\n0EC8..0ECD    ; Extend # Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA\n0F18..0F19    ; Extend # Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n0F35          ; Extend # Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n0F37          ; Extend # Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0F39          ; Extend # Mn       TIBETAN MARK TSA -PHRU\n0F3E..0F3F    ; Extend # Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n0F71..0F7E    ; Extend # Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n0F7F          ; Extend # Mc       TIBETAN SIGN RNAM BCAD\n0F80..0F84    ; Extend # Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA\n0F86..0F87    ; Extend # Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n0F8D..0F97    ; Extend # Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n0F99..0FBC    ; Extend # Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n0FC6          ; Extend # Mn       TIBETAN SYMBOL PADMA GDAN\n102B..102C    ; Extend # Mc   [2] MYANMAR VOWEL SIGN TALL AA..MYANMAR VOWEL SIGN AA\n102D..1030    ; Extend # Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n1031          ; Extend # Mc       MYANMAR VOWEL SIGN E\n1032..1037    ; Extend # Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW\n1038          ; Extend # Mc       MYANMAR SIGN VISARGA\n1039..103A    ; Extend # Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n103B..103C    ; Extend # Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA\n103D..103E    ; Extend # Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA\n1056..1057    ; Extend # Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR\n1058..1059    ; Extend # Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL\n105E..1060    ; Extend # Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA\n1062..1064    ; Extend # Mc   [3] MYANMAR VOWEL SIGN SGAW KAREN EU..MYANMAR TONE MARK SGAW KAREN KE PHO\n1067..106D    ; Extend # Mc   [7] MYANMAR VOWEL SIGN WESTERN PWO KAREN EU..MYANMAR SIGN WESTERN PWO KAREN TONE-5\n1071..1074    ; Extend # Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE\n1082          ; Extend # Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA\n1083..1084    ; Extend # Mc   [2] MYANMAR VOWEL SIGN SHAN AA..MYANMAR VOWEL SIGN SHAN E\n1085..1086    ; Extend # Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y\n1087..108C    ; Extend # Mc   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3\n108D          ; Extend # Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n108F          ; Extend # Mc       MYANMAR SIGN RUMAI PALAUNG TONE-5\n109A..109C    ; Extend # Mc   [3] MYANMAR SIGN KHAMTI TONE-1..MYANMAR VOWEL SIGN AITON A\n109D          ; Extend # Mn       MYANMAR VOWEL SIGN AITON AI\n135D..135F    ; Extend # Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK\n1712..1714    ; Extend # Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n1732..1734    ; Extend # Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD\n1752..1753    ; Extend # Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n1772..1773    ; Extend # Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U\n17B4..17B5    ; Extend # Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n17B6          ; Extend # Mc       KHMER VOWEL SIGN AA\n17B7..17BD    ; Extend # Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA\n17BE..17C5    ; Extend # Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU\n17C6          ; Extend # Mn       KHMER SIGN NIKAHIT\n17C7..17C8    ; Extend # Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU\n17C9..17D3    ; Extend # Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n17DD          ; Extend # Mn       KHMER SIGN ATTHACAN\n180B..180D    ; Extend # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n1885..1886    ; Extend # Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n18A9          ; Extend # Mn       MONGOLIAN LETTER ALI GALI DAGALGA\n1920..1922    ; Extend # Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n1923..1926    ; Extend # Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n1927..1928    ; Extend # Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n1929..192B    ; Extend # Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n1930..1931    ; Extend # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1932          ; Extend # Mn       LIMBU SMALL LETTER ANUSVARA\n1933..1938    ; Extend # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1939..193B    ; Extend # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1A17..1A18    ; Extend # Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n1A19..1A1A    ; Extend # Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O\n1A1B          ; Extend # Mn       BUGINESE VOWEL SIGN AE\n1A55          ; Extend # Mc       TAI THAM CONSONANT SIGN MEDIAL RA\n1A56          ; Extend # Mn       TAI THAM CONSONANT SIGN MEDIAL LA\n1A57          ; Extend # Mc       TAI THAM CONSONANT SIGN LA TANG LAI\n1A58..1A5E    ; Extend # Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n1A60          ; Extend # Mn       TAI THAM SIGN SAKOT\n1A61          ; Extend # Mc       TAI THAM VOWEL SIGN A\n1A62          ; Extend # Mn       TAI THAM VOWEL SIGN MAI SAT\n1A63..1A64    ; Extend # Mc   [2] TAI THAM VOWEL SIGN AA..TAI THAM VOWEL SIGN TALL AA\n1A65..1A6C    ; Extend # Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n1A6D..1A72    ; Extend # Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n1A73..1A7C    ; Extend # Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Extend # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1AB0..1ABD    ; Extend # Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW\n1ABE          ; Extend # Me       COMBINING PARENTHESES OVERLAY\n1ABF..1AC0    ; Extend # Mn   [2] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER TURNED W BELOW\n1B00..1B03    ; Extend # Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n1B04          ; Extend # Mc       BALINESE SIGN BISAH\n1B34          ; Extend # Mn       BALINESE SIGN REREKAN\n1B35          ; Extend # Mc       BALINESE VOWEL SIGN TEDUNG\n1B36..1B3A    ; Extend # Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n1B3B          ; Extend # Mc       BALINESE VOWEL SIGN RA REPA TEDUNG\n1B3C          ; Extend # Mn       BALINESE VOWEL SIGN LA LENGA\n1B3D..1B41    ; Extend # Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B42          ; Extend # Mn       BALINESE VOWEL SIGN PEPET\n1B43..1B44    ; Extend # Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n1B6B..1B73    ; Extend # Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1B80..1B81    ; Extend # Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR\n1B82          ; Extend # Mc       SUNDANESE SIGN PANGWISAD\n1BA1          ; Extend # Mc       SUNDANESE CONSONANT SIGN PAMINGKAL\n1BA2..1BA5    ; Extend # Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU\n1BA6..1BA7    ; Extend # Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n1BA8..1BA9    ; Extend # Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG\n1BAA          ; Extend # Mc       SUNDANESE SIGN PAMAAEH\n1BAB..1BAD    ; Extend # Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA\n1BE6          ; Extend # Mn       BATAK SIGN TOMPI\n1BE7          ; Extend # Mc       BATAK VOWEL SIGN E\n1BE8..1BE9    ; Extend # Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE\n1BEA..1BEC    ; Extend # Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n1BED          ; Extend # Mn       BATAK VOWEL SIGN KARO O\n1BEE          ; Extend # Mc       BATAK VOWEL SIGN U\n1BEF..1BF1    ; Extend # Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H\n1BF2..1BF3    ; Extend # Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN\n1C24..1C2B    ; Extend # Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n1C2C..1C33    ; Extend # Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T\n1C34..1C35    ; Extend # Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n1C36..1C37    ; Extend # Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n1CD0..1CD2    ; Extend # Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n1CD4..1CE0    ; Extend # Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n1CE1          ; Extend # Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n1CE2..1CE8    ; Extend # Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL\n1CED          ; Extend # Mn       VEDIC SIGN TIRYAK\n1CF4          ; Extend # Mn       VEDIC TONE CANDRA ABOVE\n1CF7          ; Extend # Mc       VEDIC SIGN ATIKRAMA\n1CF8..1CF9    ; Extend # Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE\n1DC0..1DF9    ; Extend # Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW\n1DFB..1DFF    ; Extend # Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW\n200C          ; Extend # Cf       ZERO WIDTH NON-JOINER\n20D0..20DC    ; Extend # Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE\n20DD..20E0    ; Extend # Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n20E1          ; Extend # Mn       COMBINING LEFT RIGHT ARROW ABOVE\n20E2..20E4    ; Extend # Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\n20E5..20F0    ; Extend # Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE\n```\n\n----------------------------------------\n\nTITLE: Using Docregion Comments in Kotlin\nDESCRIPTION: This snippet shows how to annotate a Kotlin file for documentation with docregion comments.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\n// #docregion sectionname\n// #enddocregion sectionname\n```\n\n----------------------------------------\n\nTITLE: Add e2e test for super_important_case (Dart)\nDESCRIPTION: This code snippet defines an e2e test using the macroPerfTestE2E function to automatically navigate to the 'super_important_case' page and collect performance metrics. It includes optional parameters for page delay, duration, timeout, and custom body/setup functions to tailor the test to the specific scenario.\nSOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n    // Copyright 2014 The Flutter Authors. All rights reserved.\n    // Use of this source code is governed by a BSD-style license that can be\n    // found in the LICENSE file.\n\n    import 'package:flutter/gestures.dart';\n    import 'package:flutter/widgets.dart';\n    import 'package:flutter/foundation.dart';\n    import 'package:flutter_test/flutter_test.dart';\n    import 'package:macrobenchmarks/common.dart';\n\n    import 'util.dart';\n\n    void main() {\n      macroPerfTestE2E(\n        'super_important_case',\n        kSuperImportantCaseRouteName,\n        /* optional */ pageDelay: const Duration(seconds: 1),\n        /* optional */ duration: const Duration(seconds: 3),\n        /* optional */ timeout: const Duration(seconds: 30),\n        /* optional */ body: (WidgetController controller) async {\n            ...\n        },\n        /* optional */ setup: (WidgetController controller) async {\n            ...\n        },\n      );\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal API Validation Environment Variables\nDESCRIPTION: Enables comprehensive Metal API and shader validation by setting environment variables. Provides runtime checks, error handling, and logging for Metal-based graphics development.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/metal_validation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Metal Validation Defaults\nexport MTL_DEBUG_LAYER=1\nexport MTL_DEBUG_LAYER_ERROR_MODE=assert\n# Set this to assert for stricter runtime checks. Set to \"ignore\" if too chatty.\nexport MTL_DEBUG_LAYER_WARNING_MODE=nslog\nexport MTL_SHADER_VALIDATION=1\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Properties Data\nDESCRIPTION: A structured data file defining Unicode character properties. Each line contains hex code points, line break property codes (AL, AI, etc.), and character descriptions. The data covers mathematical symbols, geometric shapes, and other special characters with their corresponding properties.\nSOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_6\n\nLANGUAGE: unicode-data\nCODE:\n```\n2224;AL           # Sm         DOES NOT DIVIDE\n2225;AI           # Sm         PARALLEL TO\n2226;AL           # Sm         NOT PARALLEL TO\n2227..222C;AI     # Sm     [6] LOGICAL AND..DOUBLE INTEGRAL\n2228..222C;AI     # Sm     [6] LOGICAL AND..DOUBLE INTEGRAL\n```"
  }
]