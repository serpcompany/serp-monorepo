[
  {
    "owner": "rectorphp",
    "repo": "rector",
    "content": "TITLE: Adding Nullable Return Types in PHP\nDESCRIPTION: This rule adds nullable return types to methods that may return null or a specific type. It utilizes PHP 7.1+ syntax with the ? prefix to indicate nullable types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_305\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function getData()\n+    public function getData(): ?int\n    {\n        if (rand(0, 1)) {\n            return null;\n        }\n\n        return 100;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Property Types from Setter/Getter Methods in PHP\nDESCRIPTION: This rule adds property type declarations based on the types used in corresponding setter and getter methods. It improves type safety by ensuring property types match their accessor methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_303\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    private $name = 'John';\n+    private string $name = 'John';\n\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rector via Composer\nDESCRIPTION: Command to install Rector as a development dependency in a PHP project using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require rector/rector --dev\n```\n\n----------------------------------------\n\nTITLE: Upgrading to First Class Callable in PHP 8.1\nDESCRIPTION: Converts array callable syntax to first class callable syntax using the new (...) syntax.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_227\n\nLANGUAGE: diff\nCODE:\n```\n final class SomeClass\n {\n     public function run()\n     {\n-        $name = [$this, 'name'];\n+        $name = $this->name(...);\n     }\n\n     public function name()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting annotations to attributes in PHP 8.0\nDESCRIPTION: Transforms PHPDoc annotations to PHP 8.0 attributes using the new #[] syntax, providing native language support for metadata.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_211\n\nLANGUAGE: diff\nCODE:\n```\n use Symfony\\Component\\Routing\\Annotation\\Route;\n\n class SymfonyRoute\n {\n-    /**\n-     * @Route(\"/path\", name=\"action\") api route\n-     */\n+    #[Route(path: '/path', name: 'action')] // api route\n     public function action()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP Code into AST\nDESCRIPTION: Demonstrates how to parse PHP code into an Abstract Syntax Tree (AST) and dump it in human-readable form using the PHP Parser library. Shows error handling and basic parser setup.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/nikic/php-parser/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PhpParser\\Error;\nuse PhpParser\\NodeDumper;\nuse PhpParser\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Converting call_user_func_array() to Variadic Function Calls in PHP\nDESCRIPTION: Modernizes code by replacing call_user_func_array() with direct function calls using the spread operator (...), resulting in cleaner and more readable code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        call_user_func_array('some_function', $items);\n+        some_function(...$items);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing substring comparison with str_starts_with() in PHP 8.0\nDESCRIPTION: Converts substring checks that verify string beginnings to use the new str_starts_with() function introduced in PHP 8.0, improving code readability and performance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_225\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $isMatch = substr($haystack, 0, strlen($needle)) === $needle;\n+        $isMatch = str_starts_with($haystack, $needle);\n\n-        $isNotMatch = substr($haystack, 0, strlen($needle)) !== $needle;\n+        $isNotMatch = ! str_starts_with($haystack, $needle);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Function Calls to Method Calls (PHP)\nDESCRIPTION: FuncCallToMethodCallRector converts global function calls to method calls on injected dependencies. It adds necessary property declarations and constructor parameters.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_254\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n+    /**\n+     * @var \\Namespaced\\SomeRenderer\n+     */\n+    private $someRenderer;\n+\n+    public function __construct(\\Namespaced\\SomeRenderer $someRenderer)\n+    {\n+        $this->someRenderer = $someRenderer;\n+    }\n+\n     public function run()\n     {\n-        view('...');\n+        $this->someRenderer->view('...');\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Parameter Types to Private Methods (PHP)\nDESCRIPTION: This rector adds strict parameter types to private methods based on the types passed in method calls. It infers the type from usage and updates the method signature.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_277\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run(int $value)\n     {\n         $this->resolve($value);\n     }\n\n-    private function resolve($value)\n+    private function resolve(int $value)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Types from Resource Docblocks (PHP)\nDESCRIPTION: This configurable rector adds parameter and return types based on resource docblocks, replacing @param and @return annotations with type declarations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_288\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    /**\n-     * @param resource|null $resource\n-     */\n-    public function setResource($resource)\n+    public function setResource(?App\\ValueObject\\Resource $resource)\n     {\n     }\n\n-    /**\n-     * @return resource|null\n-     */\n-    public function getResource()\n+    public function getResource(): ?App\\ValueObject\\Resource\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting MyCLabs Enum to Native PHP 8.1 Enum\nDESCRIPTION: Refactors MyCLabs enum class to use PHP 8.1 native enum with string backing.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_228\n\nLANGUAGE: diff\nCODE:\n```\n-use MyCLabs\\Enum\\Enum;\n-\n-final class Action extends Enum\n+enum Action : string\n {\n-    private const VIEW = 'view';\n-    private const EDIT = 'edit';\n+    case VIEW = 'view';\n+    case EDIT = 'edit';\n }\n```\n\n----------------------------------------\n\nTITLE: Converting property assignments to constructor promotion in PHP 8.0\nDESCRIPTION: Transforms simple property initialization and assignment to use constructor promotion, a new feature in PHP 8.0 that simplifies class property declarations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_215\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    public float $price;\n-\n     public function __construct(\n-        float $price = 0.0\n+        public float $price = 0.0\n     ) {\n-        $this->price = $price;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Self Return Type from Fluent Interfaces in PHP\nDESCRIPTION: This rule adds 'self' return type to methods that return $this for fluent interfaces. It improves type safety and IDE support for method chaining patterns.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_311\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function run()\n+    public function run(): self\n    {\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Strict Comparison Operators for Same-Type Comparisons in PHP\nDESCRIPTION: Replaces loose equality operators (== and !=) with strict equality operators (=== and !==) when comparing values of the same type, preventing unexpected type juggling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run(int $firstValue, int $secondValue)\n     {\n-         $isSame = $firstValue == $secondValue;\n-         $isDiffernt = $firstValue != $secondValue;\n+         $isSame = $firstValue === $secondValue;\n+         $isDiffernt = $firstValue !== $secondValue;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Property Access to Method Calls (PHP)\nDESCRIPTION: PropertyFetchToMethodCallRector replaces property access with getter and setter method calls. This improves encapsulation and allows for additional logic in the accessors.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_264\n\nLANGUAGE: php\nCODE:\n```\n-$result = $object->property;\n-$object->property = $value;\n+$result = $object->getProperty();\n+$object->setProperty($value);\n\n-$bare = $object->bareProperty;\n+$bare = $object->getConfig('someArg');\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Return Types Based on Strict Returns in PHP\nDESCRIPTION: This rule adds int/float return types to methods based on their strictly typed return statements. It helps improve type safety by explicitly declaring numeric return types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_299\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeClass\n{\n-    public function increase($value)\n+    public function increase($value): int\n    {\n        return ++$value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rector in Dry-Run Mode\nDESCRIPTION: Command to execute Rector in dry-run mode, which displays the changes Rector would make without actually applying them.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector src --dry-run\n```\n\n----------------------------------------\n\nTITLE: Converting isset Condition to Null Coalescing Operator (PHP 7.0)\nDESCRIPTION: Replaces if statements with isset checks followed by conditional returns with the null coalescing operator (??) for cleaner and more concise code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_153\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    private $items = [];\n\n    public function resolve($key)\n    {\n-        if (isset($this->items[$key])) {\n-            return $this->items[$key];\n-        }\n-\n-        return 'fallback value';\n+        return $this->items[$key] ?? 'fallback value';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting switch statements to match expressions in PHP 8.0\nDESCRIPTION: Replaces switch statements with the new match expression introduced in PHP 8.0, resulting in more concise and expressive code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_212\n\nLANGUAGE: diff\nCODE:\n```\n-switch ($input) {\n-    case Lexer::T_SELECT:\n-        $statement = 'select';\n-        break;\n-    case Lexer::T_UPDATE:\n-        $statement = 'update';\n-        break;\n-    default:\n-        $statement = 'error';\n-}\n+$statement = match ($input) {\n+    Lexer::T_SELECT => 'select',\n+    Lexer::T_UPDATE => 'update',\n+    default => 'error',\n+};\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Types Based on Method Call Types in PHP\nDESCRIPTION: This rule adds parameter type declarations based on how the parameters are used in method calls. It helps maintain type consistency between method calls and their corresponding parameters.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_301\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeTypedService\n{\n    public function run(string $name)\n    {\n    }\n}\n\nfinal class UseDependency\n{\n    public function __construct(\n        private SomeTypedService $someTypedService\n    ) {\n    }\n\n-    public function go($value)\n+    public function go(string $value)\n    {\n        $this->someTypedService->run($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Types Declaration (PHP)\nDESCRIPTION: This rector adds the declare(strict_types=1) statement to PHP files if it's missing, enabling strict type checking.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_295\n\nLANGUAGE: php\nCODE:\n```\n+declare(strict_types=1);\n+\n function someFunction()\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Closures to Arrow Functions in PHP 7.4\nDESCRIPTION: Transforms simple closures to the new arrow function syntax introduced in PHP 7.4, resulting in more concise code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_198\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run($meetups)\n     {\n-        return array_filter($meetups, function (Meetup $meetup) {\n-            return is_object($meetup);\n-        });\n+        return array_filter($meetups, fn(Meetup $meetup) => is_object($meetup));\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Property from Assignments in PHP\nDESCRIPTION: The TypedPropertyFromAssignsRector adds type declarations to properties based on the types of values assigned to them. It analyzes assignment operations to determine the appropriate property type.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_324\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n-    private $name;\n+    private string|null $name = null;\n\n     public function run()\n     {\n         $this->name = 'string';\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting RectorConfig to RectorConfigBuilder (PHP)\nDESCRIPTION: RectorConfigBuilderRector modernizes Rector configuration from function-based to builder pattern. This simplifies configuration and makes it more expressive.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_265\n\nLANGUAGE: php\nCODE:\n```\n-return static function (RectorConfig $rectorConfig): void {\n-    $rectorConfig->rule(SomeRector::class);\n-};\n+return RectorConfig::configure()->rules([SomeRector::class]);\n```\n\n----------------------------------------\n\nTITLE: Removing Dead Code Statements in PHP\nDESCRIPTION: This rule removes statements that have no effect on the program execution, like expressions with no assignment or side effects.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n-$value = 5;\n-$value;\n+$value = 5;\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary Null Checks to Null Coalescing Operator (PHP 7.0)\nDESCRIPTION: Replaces ternary expressions that check for null or isset with the null coalescing operator (??) introduced in PHP 7.0 for more concise code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_163\n\nLANGUAGE: php\nCODE:\n```\n-$value === null ? 10 : $value;\n+$value ?? 10;\n```\n\n----------------------------------------\n\nTITLE: Using First-Class Callable Syntax in PHP\nDESCRIPTION: Upgrades string callback functions to first-class callable syntax using PHP 8.1 features, resulting in more type-safe and IDE-friendly code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run(array $data)\n     {\n-        return array_map('trim', $data);\n+        return array_map(trim(...), $data);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding String Parameter Type Based on Concatenation in PHP\nDESCRIPTION: The StrictStringParamConcatRector adds a string type to parameters that are used in string concatenation operations. It identifies when a parameter is concatenated with other strings and adds a string type hint.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_321\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class SomeClass\n {\n-    public function resolve($item)\n+    public function resolve(string $item)\n     {\n         return $item . ' world';\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting empty() on Nullable Objects to instanceof Check in PHP\nDESCRIPTION: This rule changes empty() checks on nullable objects to instanceof checks, which is a more precise way to check for object existence. The rule improves code clarity by making the intention explicit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_296\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeClass\n{\n    public function run(?AnotherObject $anotherObject)\n    {\n-        if (empty($anotherObject)) {\n+        if (! $anotherObject instanceof AnotherObject) {\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing substring comparison with str_ends_with() in PHP 8.0 - Variable Needle\nDESCRIPTION: Converts substring checks that verify string endings to use the new str_ends_with() function introduced in PHP 8.0, making code more readable and efficient.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_223\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $isMatch = substr($haystack, -strlen($needle)) === $needle;\n+        $isMatch = str_ends_with($haystack, $needle);\n\n-        $isNotMatch = substr($haystack, -strlen($needle)) !== $needle;\n+        $isNotMatch = !str_ends_with($haystack, $needle);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing strpos checks with str_contains() in PHP 8.0\nDESCRIPTION: Converts strpos() !== false and strstr() checks to use the new str_contains() function introduced in PHP 8.0 for more readable code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_222\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return strpos('abc', 'a') !== false;\n+        return str_contains('abc', 'a');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Boolean Return Statements in PHP\nDESCRIPTION: This rule simplifies if statements that return true or false based on a condition to a direct return of the condition.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n-if (strpos($docToken->getContent(), \"\\n\") === false) {\n-    return true;\n-}\n-\n-return false;\n+return strpos($docToken->getContent(), \"\\n\") === false;\n```\n\n----------------------------------------\n\nTITLE: Adding strict_types Declaration to PHP Files\nDESCRIPTION: This configurable rule adds 'declare(strict_types=1);' to PHP files. It's designed to be applied gradually to help teams transition to strict typing in their codebase.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_297\n\nLANGUAGE: diff\nCODE:\n```\n+declare(strict_types=1);\n+\n function someFunction()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing null coalescing assignment operator in PHP 7.4\nDESCRIPTION: Replaces the pattern of assigning a value with null coalescing operator with the new ??= operator introduced in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_205\n\nLANGUAGE: diff\nCODE:\n```\n $array = [];\n-$array['user_id'] = $array['user_id'] ?? 'value';\n+$array['user_id'] ??= 'value';\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types Based on Type Casts in PHP\nDESCRIPTION: This rule adds return types to methods that cast values in their return statements. It infers the return type from the cast operation to improve type safety.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_307\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function action($param)\n+    public function action($param): array\n    {\n        try {\n            return (array) $param;\n        } catch (Exception $exception) {\n            // some logging\n            throw $exception;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Parent Method Calls with Property Method Calls (PHP)\nDESCRIPTION: ReplaceParentCallByPropertyCallRector changes method calls on parameters to calls on class properties. This is useful when injecting dependencies as properties instead of passing them as parameters.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_266\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function run(SomeTypeToReplace $someTypeToReplace)\n    {\n-        $someTypeToReplace->someMethodCall();\n+        $this->someProperty->someMethodCall();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Try-Catch Blocks in PHP\nDESCRIPTION: This rule removes try-catch blocks where the catch simply rethrows the caught exception without any additional logic.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        try {\n-            // some code\n-        }\n-        catch (Throwable $throwable) {\n-            throw $throwable;\n-        }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting isset Checks in Ternary to Null Coalescing Operator (PHP 7.0)\nDESCRIPTION: Simplifies isset checks in ternary expressions to use the null coalescing operator (??) for more maintainable and readable code in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_164\n\nLANGUAGE: php\nCODE:\n```\n-isset($value) ? $value : 10;\n+$value ?? 10;\n```\n\n----------------------------------------\n\nTITLE: Converting func_get_args() to Variadic Parameters in PHP\nDESCRIPTION: Modernizes PHP functions by replacing func_get_args() with variadic parameters (...$args), improving code clarity and parameter handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n-function run()\n+function run(...$args)\n {\n-    $args = \\func_get_args();\n }\n```\n\n----------------------------------------\n\nTITLE: Converting list() to Array Destructuring Syntax (PHP 7.1)\nDESCRIPTION: Updates list() calls to use the short array destructuring syntax ([]) introduced in PHP 7.1, which is more concise and readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_171\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        list($id1, $name1) = $data;\n+        [$id1, $name1] = $data;\n\n-        foreach ($data as list($id, $name)) {\n+        foreach ($data as [$id, $name]) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MockObject Return Types in PHPUnit Tests\nDESCRIPTION: This rule adds PHPUnit MockObject return types to methods that create and return mock objects. It improves type safety and IDE autocompletion in test classes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_306\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeTest extends TestCase\n{\n-    public function createSomeMock()\n+    public function createSomeMock(): \\PHPUnit\\Framework\\MockObject\\MockObject\n    {\n        $someMock = $this->createMock(SomeClass::class);\n        return $someMock;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing array_merge() with Spread Operator in PHP\nDESCRIPTION: Modernizes code by converting array_merge() calls to use the spread operator (...), improving readability and reducing verbosity, especially when working with iterables.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run($iter1, $iter2)\n     {\n-        $values = array_merge(iterator_to_array($iter1), iterator_to_array($iter2));\n+        $values = [...$iter1, ...$iter2];\n\n         // Or to generalize to all iterables\n-        $anotherValues = array_merge(\n-            is_array($iter1) ? $iter1 : iterator_to_array($iter1),\n-            is_array($iter2) ? $iter2 : iterator_to_array($iter2)\n-        );\n+        $anotherValues = [...$iter1, ...$iter2];\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Array Checks with Null Coalescing Operator in PHP\nDESCRIPTION: Converts ternary with empty array checks to the null coalescing operator, simplifying code by using PHP's modern syntax features.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     private array $items = [];\n\n     public function run()\n     {\n-        return ! empty($this->items) ? $this->items[0] : 'default';\n+        return $this->items[0] ?? 'default';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Long Array Syntax to Short Array Syntax in PHP 5.4+\nDESCRIPTION: The LongArrayToShortArrayRector converts long array syntax (array()) to short array syntax ([]) for PHP 5.4+. This modernizes code by using the more concise array declaration syntax.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_138\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return array();\n+        return [];\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Declarations (PHP)\nDESCRIPTION: This configurable rector changes the return type declaration of methods and classes based on specified rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_286\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    public function getData()\n+    public function getData(): array\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Aligning Exception Variable Names with Their Types in PHP\nDESCRIPTION: Ensures catch block exception variable names follow naming conventions by matching their type, improving code readability and maintainability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n try {\n     // ...\n-} catch (SomeException $typoException) {\n-    $typoException->getMessage();\n+} catch (SomeException $someException) {\n+    $someException->getMessage();\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing get_class() with ::class syntax in PHP 8.0\nDESCRIPTION: Changes get_class($object) to $object::class which is more efficient and was introduced in PHP 8.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_213\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run($object)\n     {\n-        return get_class($object);\n+        return $object::class;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Property from Constructor in PHP\nDESCRIPTION: The TypedPropertyFromStrictConstructorRector adds type declarations to properties based on the typed parameters in a constructor. It identifies property assignments in the constructor and adds matching type hints to the properties.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_327\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class SomeObject\n {\n-    private $name;\n+    private string $name;\n\n     public function __construct(string $name)\n     {\n         $this->name = $name;\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Boolean Return Type Based on Strict Comparisons (PHP)\nDESCRIPTION: This rector adds a bool return type to methods that return the result of strict boolean operations or comparisons.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_292\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    public function resolve($first, $second)\n+    public function resolve($first, $second): bool\n     {\n         return $first > $second;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing type checking ternary with get_debug_type() in PHP 8.0\nDESCRIPTION: Changes ternary type resolution pattern to use get_debug_type() function introduced in PHP 8.0, which provides more precise type information.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_217\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run($value)\n     {\n-        return is_object($value) ? get_class($value) : gettype($value);\n+        return get_debug_type($value);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Types Based on Property Types (PHP)\nDESCRIPTION: This rector adds parameter type declarations based on the type of the property the value is assigned to. It analyzes property assignments and updates method signatures.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_281\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     private string $name;\n\n-    public function setName($name)\n+    public function setName(string $name)\n     {\n         $this->name = $name;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting array_key_exists Ternary to Null Coalescing Operator\nDESCRIPTION: This rule converts array_key_exists() ternary expressions to the null coalescing operator (??), which is more concise and readable for retrieving array values with fallbacks.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run($values, $keyToMatch)\n    {\n-        $result = array_key_exists($keyToMatch, $values) ? $values[$keyToMatch] : null;\n+        $result = $values[$keyToMatch] ?? null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date Function Calls to Carbon Library with DateFuncCallToCarbonRector\nDESCRIPTION: This rule converts PHP's date() function calls to Carbon's fluent interface. It replaces date() with Carbon::now()->format().\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $date = date('Y-m-d');\n+        $date = \\Carbon\\Carbon::now()->format('Y-m-d');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'never' Return Type to Methods in PHP\nDESCRIPTION: This rule adds the 'never' return type to methods that never return anything (e.g., methods that always throw exceptions). It helps signal that the method execution flow doesn't continue.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_304\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function run()\n+    public function run(): never\n    {\n        throw new InvalidException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_key_last() in PHP 7.3\nDESCRIPTION: Replaces the end() + key() pattern with array_key_last() to get the last key of an array, which was introduced in PHP 7.3.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_186\n\nLANGUAGE: diff\nCODE:\n```\n-end($items);\n-$lastKey = key($items);\n+$lastKey = array_key_last($items);\n```\n\n----------------------------------------\n\nTITLE: Converting Multidimensional Array Access to Array Destructuring in PHP\nDESCRIPTION: Transforms multidimensional array access within foreach loops to array destructuring syntax using the MultiDimensionalArrayToArrayDestructRector rule. This creates more readable code by eliminating repeated array access notation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    /**\n     * @param array<int, array{id: int, name: string}> $users\n     */\n    public function run(array $users)\n    {\n-        foreach ($users as $user) {\n-            echo $user['id'];\n-            echo sprintf('Name: %s', $user['name']);\n+        foreach ($users as ['id' => $id, 'name' => $name]) {\n+            echo $id;\n+            echo sprintf('Name: %s', $name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_key_first() in PHP 7.3\nDESCRIPTION: Replaces the reset() + key() pattern with array_key_first() to get the first key of an array, which was introduced in PHP 7.3.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_185\n\nLANGUAGE: diff\nCODE:\n```\n-reset($items);\n-$firstKey = key($items);\n+$firstKey = array_key_first($items);\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Property from Mock Creation in PHP\nDESCRIPTION: The TypedPropertyFromCreateMockAssignRector adds a typed property based on PHPUnit mock object assignments. It detects when a property is assigned a mock object created by createMock() and adds the appropriate mock type.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_325\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n use PHPUnit\\Framework\\TestCase;\n\n final class SomeTest extends TestCase\n {\n-    private $someProperty;\n+    private \\PHPUnit\\Framework\\MockObject\\MockObject $someProperty;\n\n     protected function setUp(): void\n     {\n         $this->someProperty = $this->createMock(SomeMockedClass::class);\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting while(each()) to foreach() in PHP 7.2\nDESCRIPTION: Replaces the deprecated while(list() = each()) pattern with foreach loops. The each() function was deprecated in PHP 7.2.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_183\n\nLANGUAGE: diff\nCODE:\n```\n-while (list($key, $callback) = each($callbacks)) {\n+foreach ($callbacks as $key => $callback) {\n     // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Object Type Check in PHP\nDESCRIPTION: This rule removes the redundant is_object() check when used in conjunction with an instanceof check, as instanceof already implies an object check.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n-is_object($obj) && $obj instanceof DateTime\n+$obj instanceof DateTime\n```\n\n----------------------------------------\n\nTITLE: Converting mixed PHPDoc type to typed parameter in PHP 8.0\nDESCRIPTION: Transforms PHPDoc @param mixed annotations to use the new mixed type hint introduced in PHP 8.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_218\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    /**\n-     * @param mixed $param\n-     */\n-    public function run($param)\n+    public function run(mixed $param)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting String Class Names to Class Constants (PHP 5.5)\nDESCRIPTION: Replaces string class names with Class::class constant notation for better type safety and refactoring support. This rule is configurable to adapt to specific project needs.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_146\n\nLANGUAGE: php\nCODE:\n```\nclass AnotherClass\n{\n}\n\nclass SomeClass\n{\n    public function run()\n    {\n-        return 'AnotherClass';\n+        return \\AnotherClass::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'void' Return Type to Closures Without Returns (PHP)\nDESCRIPTION: AddClosureVoidReturnTypeWhereNoReturnRector adds a 'void' return type to closures that don't return any value. This improves type safety and code clarity.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_275\n\nLANGUAGE: php\nCODE:\n```\n-function () {\n+function (): void {\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Variable Reassignment to Early Return in PHP\nDESCRIPTION: The ReturnEarlyIfVariableRector replaces if-conditioned variable overrides with direct returns. This eliminates the need for variable reassignment when the variable is only returned afterward.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_125\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run($value)\n     {\n         if ($value === 50) {\n-            $value = 100;\n+            return 100;\n         }\n\n         return $value;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Property Type Declarations (PHP)\nDESCRIPTION: This configurable rector adds type declarations to properties based on specified rules, typically for public properties inherited from parent classes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_283\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass extends ParentClass\n {\n-    public $name;\n+    public string $name;\n }\n```\n\n----------------------------------------\n\nTITLE: Converting If Comparisons to Spaceship Operator (PHP 7.0)\nDESCRIPTION: Transforms if/else comparison constructs to use the spaceship operator (<=>), which simplifies code for sorting and comparison operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_154\n\nLANGUAGE: php\nCODE:\n```\nusort($languages, function ($first, $second) {\n-if ($first[0] === $second[0]) {\n-    return 0;\n-}\n-\n-return ($first[0] < $second[0]) ? 1 : -1;\n+return $second[0] <=> $first[0];\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Variable Assignments in PHP\nDESCRIPTION: This rule removes unnecessary variable assignments, especially when the variable is immediately returned or used in a way that doesn't require the intermediate assignment.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nfunction () {\n-    $a = true;\n-    return $a;\n+    return true;\n};\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfunction () {\n    $a = 'Hello, ';\n-    $a .= 'World!';\n\n-    return $a;\n+    return $a . 'World!';\n};\n```\n\n----------------------------------------\n\nTITLE: Simplifying Foreach to Null Coalescing Operator in PHP\nDESCRIPTION: This rule replaces foreach loops that return a set value with the null coalescing operator, which is more concise and efficient.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n-foreach ($this->oldToNewFunctions as $oldFunction => $newFunction) {\n-    if ($currentFunction === $oldFunction) {\n-        return $newFunction;\n-    }\n-}\n-\n-return null;\n+return $this->oldToNewFunctions[$currentFunction] ?? null;\n```\n\n----------------------------------------\n\nTITLE: Running Rector CLI Command\nDESCRIPTION: Basic command to execute Rector in a project after installation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector\n```\n\n----------------------------------------\n\nTITLE: Simplifying Boolean Comparisons in PHP\nDESCRIPTION: This rule simplifies boolean value comparisons by removing redundant === TRUE or !== FALSE checks, as the boolean value itself is sufficient.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run(bool $value, string $items)\n    {\n-         $match = in_array($value, $items, TRUE) === TRUE;\n+         $match = in_array($value, $items, TRUE);\n\n-         $match = in_array($value, $items, TRUE) !== FALSE;\n+         $match = in_array($value, $items, TRUE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Exception Catches (PHP 7.1)\nDESCRIPTION: Merges multiple catch blocks with identical code into a single catch block using the multi-catch syntax (|) introduced in PHP 7.1 for more concise error handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_172\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    // Some code...\n-} catch (ExceptionType1 $exception) {\n-    $sameCode;\n-} catch (ExceptionType2 $exception) {\n+} catch (ExceptionType1 | ExceptionType2 $exception) {\n    $sameCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types to Doctrine Repository Methods (PHP)\nDESCRIPTION: This rector adds return types to methods in classes that extend Doctrine\\ORM\\EntityRepository based on the repository's entity type and Doctrine method names.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_293\n\nLANGUAGE: php\nCODE:\n```\n use Doctrine\\ORM\\EntityRepository;\n\n /**\n  * @extends EntityRepository<SomeType>\n  */\n final class SomeRepository extends EntityRepository\n {\n-    public function getActiveItem()\n+    public function getActiveItem(): ?SomeType\n     {\n         return $this->findOneBy([\n             'something'\n         ]);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Wrapping Variables in Curly Braces in PHP String Interpolation\nDESCRIPTION: Wraps variables within double-quoted strings in curly braces using the WrapEncapsedVariableInCurlyBracesRector rule. This improves clarity and prevents ambiguity in complex string interpolation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nfunction run($world)\n{\n-    echo \"Hello $world!\";\n+    echo \"Hello {$world}!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types from Object Instantiation in PHP\nDESCRIPTION: This rule adds return types to methods that return newly instantiated objects. It infers the return type from the class being instantiated to improve type safety and IDE support.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_309\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function create()\n+    public function create(): Project\n    {\n        return new Project();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting nested annotations to attributes in PHP 8.0\nDESCRIPTION: Transforms nested annotations to multiple attributes using PHP 8.0's attribute syntax, particularly useful for Doctrine ORM mappings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_219\n\nLANGUAGE: diff\nCODE:\n```\n use Doctrine\\ORM\\Mapping as ORM;\n\n class SomeEntity\n {\n-    /**\n-     * @ORM\\JoinTable(name=\"join_table_name\",\n-     *     joinColumns={@ORM\\JoinColumn(name=\"origin_id\")},\n-     *     inverseJoinColumns={@ORM\\JoinColumn(name=\"target_id\")}\n-     * )\n-     */\n+    #[ORM\\JoinTable(name: 'join_table_name')]\n+    #[ORM\\JoinColumn(name: 'origin_id')]\n+    #[ORM\\InverseJoinColumn(name: 'target_id')]\n     private $collection;\n }\n```\n\n----------------------------------------\n\nTITLE: Optimizing Empty Array Checks in PHP\nDESCRIPTION: Improves performance by replacing count() function calls with direct array comparison to empty array, making the code faster and more readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n-count($array) === 0;\n-count($array) > 0;\n-! count($array);\n+$array === [];\n+$array !== [];\n+$array === [];\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Literal Separators in PHP 7.4\nDESCRIPTION: Adds underscore separators to large numbers for improved readability, a feature introduced in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_196\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $int = 500000;\n-        $float = 1000500.001;\n+        $int = 500_000;\n+        $float = 1_000_500.001;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Previous Exception to Throw Statements in PHP Catch Blocks\nDESCRIPTION: Ensures exceptions thrown in catch blocks include the previous exception, preserving the exception chain for better debugging and error handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         try {\n             $someCode = 1;\n         } catch (Throwable $throwable) {\n-            throw new AnotherException('ups');\n+            throw new AnotherException('ups', $throwable->getCode(), $throwable);\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Declarations from Yields (PHP)\nDESCRIPTION: This rector adds return type declarations to generator methods based on the types of values yielded within the method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_285\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    public function provide()\n+    /**\n+     * @return Iterator<int>\n+     */\n+    public function provide(): Iterator\n     {\n         yield 1;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting ereg to preg_match Functions (PHP 7.0)\nDESCRIPTION: Changes deprecated ereg*() function calls to their preg_match() equivalents, adapting the regular expression pattern format to PCRE.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_151\n\nLANGUAGE: php\nCODE:\n```\n-ereg(\"hi\")\n+preg_match(\"#hi#\");\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Properties with CompleteDynamicPropertiesRector\nDESCRIPTION: Adds missing property declarations for dynamically accessed properties in PHP classes. This improves code clarity and type safety.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    /**\n     * @var int\n     */\n    public $value;\n\n    public function set()\n    {\n        $this->value = 5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Foreach Keys in PHP\nDESCRIPTION: This rule removes unused key variables from foreach loops, resulting in cleaner loop syntax when only the value is needed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n $items = [];\n-foreach ($items as $key => $value) {\n+foreach ($items as $value) {\n     $result = $value;\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Null Checks in PHP\nDESCRIPTION: This rule removes redundant null checks before returning a value, simplifying the control flow.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$newNode = 'something';\n-if ($newNode !== null) {\n-    return $newNode;\n-}\n-\n-return null;\n+return $newNode;\n```\n\n----------------------------------------\n\nTITLE: Removing Double Assignments in PHP\nDESCRIPTION: This rule simplifies code by removing consecutive assignments to the same variable when the values are identical.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_103\n\nLANGUAGE: php\nCODE:\n```\n-$value = 1;\n $value = 1;\n```\n\n----------------------------------------\n\nTITLE: Applying De Morgan's Law to Simplify Boolean Logic in PHP\nDESCRIPTION: This rule applies De Morgan's theorem to simplify negated conditions with boolean operators, making the logic more straightforward.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n$a = 5;\n$b = 10;\n-$result = !($a > 20 || $b <= 50);\n+$result = $a <= 20 && $b > 50;\n```\n\n----------------------------------------\n\nTITLE: Converting PHP4 Constructors to __construct (PHP 7.0)\nDESCRIPTION: Updates PHP 4 style constructors (methods with the same name as the class) to the modern __construct method, as PHP 4 constructors are deprecated in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_158\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n-    public function SomeClass()\n+    public function __construct()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting create_function() to Anonymous Functions in PHP 7.2\nDESCRIPTION: Replaces deprecated create_function() calls with anonymous functions. The create_function() function was deprecated in PHP 7.2 in favor of the more modern anonymous function syntax.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_175\n\nLANGUAGE: diff\nCODE:\n```\n class ClassWithCreateFunction\n {\n     public function run()\n     {\n-        $callable = create_function('$matches', \"return '$delimiter' . strtolower(\\$matches[1]);\");\n+        $callable = function($matches) use ($delimiter) {\n+            return $delimiter . strtolower($matches[1]);\n+        };\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Method Calls to Property Access (PHP)\nDESCRIPTION: MethodCallToPropertyFetchRector changes method calls without arguments to property access. This is useful for implementing getter methods that simply return property values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_259\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $this->someMethod();\n+        $this->someProperty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Void Return Type to Functions Without Return (PHP)\nDESCRIPTION: This rector adds a void return type to functions that don't return any value. It analyzes the function body and adds the appropriate type declaration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_276\n\nLANGUAGE: php\nCODE:\n```\n-function restore() {\n+function restore(): void {\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types from Native Function Calls in PHP\nDESCRIPTION: This rule adds return types to methods based on the return types of native PHP functions they call. It improves type safety by propagating the known return types of PHP's built-in functions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_312\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function run()\n+    public function run(): int\n    {\n        return strlen('value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types Based on Parameter Types in PHP\nDESCRIPTION: This rule adds return types to methods that return their parameters directly. It uses the parameter's type declaration as the return type to improve type safety and code clarity.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_314\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeClass\n{\n-    public function resolve(ParamType $item)\n+    public function resolve(ParamType $item): ParamType\n    {\n        return $item;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting is_array and Traversable Checks to is_iterable (PHP 7.1)\nDESCRIPTION: Replaces combined checks for is_array() or Traversable interface with the is_iterable() function introduced in PHP 7.1 for cleaner and more semantic code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_170\n\nLANGUAGE: php\nCODE:\n```\n-is_array($foo) || $foo instanceof Traversable;\n+is_iterable($foo);\n```\n\n----------------------------------------\n\nTITLE: Using is_countable() in PHP 7.3\nDESCRIPTION: Replaces is_array() || instanceof Countable checks with the is_countable() function that was introduced in PHP 7.3.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_187\n\nLANGUAGE: diff\nCODE:\n```\n-is_array($foo) || $foo instanceof Countable;\n+is_countable($foo);\n```\n\n----------------------------------------\n\nTITLE: Converting String Values to Class Constants (PHP)\nDESCRIPTION: StringToClassConstantRector replaces hardcoded string values with class constants. This improves type safety and makes code more maintainable by centralizing string definitions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_271\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeSubscriber\n{\n    public static function getSubscribedEvents()\n    {\n-        return ['compiler.post_dump' => 'compile'];\n+        return [\\Yet\\AnotherClass::CONSTANT => 'compile'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting switch(true) to if Statements in PHP\nDESCRIPTION: Transforms switch statements with true as the evaluated expression into a series of if statements for better readability and performance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        switch (true) {\n-            case $value === 0:\n-                return 'no';\n-            case $value === 1:\n-                return 'yes';\n-            case $value === 2:\n-                return 'maybe';\n-        };\n+        if ($value === 0) {\n+            return 'no';\n+        }\n+\n+        if ($value === 1) {\n+            return 'yes';\n+        }\n+\n+        if ($value === 2) {\n+            return 'maybe';\n+        }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting String Interpolation to sprintf() in PHP\nDESCRIPTION: Transforms embedded variables in strings to sprintf() calls or concatenation for improved readability and maintainability in complex string operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n-echo \"Unsupported format {$format} - use another\";\n+echo sprintf('Unsupported format %s - use another', $format);\n\n-echo \"Try {$allowed}\";\n+echo 'Try ' . $allowed;\n```\n\n----------------------------------------\n\nTITLE: Converting Static Calls to Object Instantiation (PHP)\nDESCRIPTION: StaticCallToNewRector changes static factory method calls to direct object instantiation. This simplifies code by using constructors directly instead of factory methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_270\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $dotenv = JsonResponse::create(['foo' => 'bar'], Response::HTTP_OK);\n+        $dotenv = new JsonResponse(['foo' => 'bar'], Response::HTTP_OK);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Case-Insensitive String Position Checks in PHP\nDESCRIPTION: This rule replaces strpos(strtolower(), ...) calls with stripos(), which is a more efficient way to perform case-insensitive string position checks.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n-strpos(strtolower($var), \"...\")\n+stripos($var, \"...\")\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Type Declarations (PHP)\nDESCRIPTION: This configurable rector adds parameter type declarations where needed. It can be customized to add specific types to parameters based on usage analysis.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_279\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    public function process($name)\n+    public function process(string $name)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Stringable Interface Implementation in PHP 8.0\nDESCRIPTION: Adds the Stringable interface to classes that implement __toString() method and ensures it returns string type.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_226\n\nLANGUAGE: diff\nCODE:\n```\n-class SomeClass\n+class SomeClass implements Stringable\n {\n-    public function __toString()\n+    public function __toString(): string\n     {\n         return 'I can stringz';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary Expressions to Elvis Operator in PHP 5.3+\nDESCRIPTION: The TernaryToElvisRector replaces ternary expressions with the Elvis operator (?:) when appropriate in PHP 5.3+. This simplifies code by using the shorthand syntax for common conditional patterns.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_137\n\nLANGUAGE: php\nCODE:\n```\n function elvis()\n {\n-    $value = $a ? $a : false;\n+    $value = $a ?: false;\n }\n```\n\n----------------------------------------\n\nTITLE: Fixing Boolean in If Condition with BooleanInIfConditionRuleFixerRector\nDESCRIPTION: This rule fixes PHPStan reports for strict type rule 'PHPStan\\Rules\\BooleansInConditions\\BooleanInIfConditionRule'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_244\n\nLANGUAGE: php\nCODE:\n```\n final class NegatedString\n {\n     public function run(string $name)\n     {\n-        if ($name) {\n+        if ($name !== '') {\n             return 'name';\n         }\n\n         return 'no name';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Assertions in PHP\nDESCRIPTION: Example of using a nullable assertion to validate that a value is either null or a string. Prefixing any assertion with 'nullOr' makes the assertion pass if the value is null, otherwise runs the normal assertion.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nAssert::nullOrString($middleName, 'The middle name must be a string or null. Got: %s');\n```\n\n----------------------------------------\n\nTITLE: Adding Array Return Type from Empty Arrays in PHP\nDESCRIPTION: This rule adds array return types to methods that create and return empty arrays. It improves type safety by explicitly declaring the return type for array values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_313\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function run()\n+    public function run(): array\n    {\n        $values = [];\n\n        return $values;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type from Strict Typed Call in PHP\nDESCRIPTION: The ReturnTypeFromStrictTypedCallRector adds a return type to methods based on the strict return type of calls made within them. It infers the return type from methods that already have explicit types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_316\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n-    public function getData()\n+    public function getData(): int\n     {\n         return $this->getNumber();\n     }\n\n     private function getNumber(): int\n     {\n         return 1000;\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing money_format() with number_format() in PHP 7.4\nDESCRIPTION: Converts money_format() function call to equivalent number_format() as money_format() is removed in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_204\n\nLANGUAGE: diff\nCODE:\n```\n-$value = money_format('%i', $value);\n+$value = number_format(round($value, 2, PHP_ROUND_HALF_ODD), 2, '.', '');\n```\n\n----------------------------------------\n\nTITLE: Converting Comparison Ternaries to Spaceship Operator (PHP 7.0)\nDESCRIPTION: Simplifies comparison ternary expressions with the spaceship operator (<=>), which provides a more concise way to express three-way comparisons.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_165\n\nLANGUAGE: php\nCODE:\n```\nfunction order_func($a, $b) {\n-    return ($a < $b) ? -1 : (($a > $b) ? 1 : 0);\n+    return $a <=> $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Private Methods\nDESCRIPTION: Removes private methods that are never called within the class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_119\n\nLANGUAGE: diff\nCODE:\n```\n final class SomeController\n {\n     public function run()\n     {\n         return 5;\n     }\n-\n-    private function skip()\n-    {\n-        return 10;\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Negated Ternary Conditions in PHP\nDESCRIPTION: Improves readability by flipping negated ternary conditions to use a positive condition and switching the order of the expressions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run(bool $upper, string $name)\n     {\n-        return ! $upper\n-            ? $name\n-            : strtoupper($name);\n+        return $upper\n+            ? strtoupper($name)\n+            : $name;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Resolver and Canceller in PHP\nDESCRIPTION: Demonstrates how to create a Promise object with a resolver function and an optional canceller function. The resolver function controls the state of the promise, while the canceller function handles cancellation logic.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$resolver = function (callable $resolve, callable $reject) {\n    // Do some work, possibly asynchronously, and then\n    // resolve or reject.\n\n    $resolve($awesomeResult);\n    // or throw new Exception('Promise rejected');\n    // or $resolve($anotherPromise);\n    // or $reject($nastyError);\n};\n\n$canceller = function () {\n    // Cancel/abort any running operations like network connections, streams etc.\n\n    // Reject promise by throwing an exception\n    throw new Exception('Promise cancelled');\n};\n\n$promise = new React\\Promise\\Promise($resolver, $canceller);\n```\n\n----------------------------------------\n\nTITLE: Converting Static Calls to Function Calls (PHP)\nDESCRIPTION: StaticCallToFuncCallRector transforms static method calls to global function calls. This is useful when migrating from class-based utilities to functional programming style.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_268\n\nLANGUAGE: php\nCODE:\n```\n-OldClass::oldMethod(\"args\");\n+new_function(\"args\");\n```\n\n----------------------------------------\n\nTITLE: Adding Void Return Type to Functions Without Return (PHP)\nDESCRIPTION: This rector adds a void return type to functions and methods that don't return any value, including those with an empty return statement.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_289\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n-    public function getValues()\n+    public function getValues(): void\n     {\n         $value = 1000;\n         return;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting array_push to Array Assignment with ChangeArrayPushToArrayAssignRector\nDESCRIPTION: This rule changes array_push() function calls to direct array assignments using the [] syntax, which is more concise and often faster for single elements.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$items = [];\n-array_push($items, $item);\n+$items[] = $item;\n```\n\n----------------------------------------\n\nTITLE: Adding Public Constant Visibility in PHP 7.1\nDESCRIPTION: Adds explicit public visibility modifier to class constants, which was introduced in PHP 7.1. This rule automatically prepends 'public' keyword to constants that don't have explicit visibility.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_173\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    const HEY = 'you';\n+    public const HEY = 'you';\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Promoted Properties\nDESCRIPTION: Removes constructor promoted properties that are never used in the class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_121\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function __construct(\n-        private $someUnusedDependency,\n         private $usedDependency\n     ) {\n     }\n\n     public function getUsedDependency()\n     {\n         return $this->usedDependency;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Nullable Checks to Explicit Comparison in PHP\nDESCRIPTION: Changes negation of empty comparison of nullable values to explicit === or !== comparison using the NullableCompareToNullRector rule. This improves code clarity and eliminates potential confusion with falsy values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n/** @var stdClass|null $value */\n-if ($value) {\n+if ($value !== null) {\n}\n\n-if (!$value) {\n+if ($value === null) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type from Symfony Serializer in PHP\nDESCRIPTION: The ReturnTypeFromSymfonySerializerRector adds a return type to methods using Symfony's serializer deserialize() method. It determines the return type from the class name passed to the deserialize() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_318\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n     private \\Symfony\\Component\\Serializer\\Serializer $serializer;\n\n-    public function resolveEntity($data)\n+    public function resolveEntity($data): SomeType\n     {\n         return $this->serializer->deserialize($data, SomeType::class, 'json');\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Union Return Type in PHP\nDESCRIPTION: The ReturnUnionTypeRector adds a union return type to methods that return multiple different types. It analyzes the code paths and determines all possible return types to create a complete union type declaration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_319\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n-    public function getData()\n+    public function getData(): null|\\DateTime|\\stdClass\n     {\n         if (rand(0, 1)) {\n             return null;\n         }\n\n         if (rand(0, 1)) {\n             return new DateTime('now');\n         }\n\n         return new stdClass;\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Single-Case Switch to If Statement in PHP\nDESCRIPTION: This rule replaces switch statements with only one case to an if statement, simplifying the control structure.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeObject\n{\n    public function run($value)\n    {\n        $result = 1;\n-        switch ($value) {\n-            case 100:\n+        if ($value === 100) {\n             $result = 1000;\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Declarations Based on Parent Class Methods (PHP)\nDESCRIPTION: This rector adds missing return type declarations to methods based on the return type of the corresponding method in the parent class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_284\n\nLANGUAGE: php\nCODE:\n```\n class A\n {\n     public function execute(): int\n     {\n     }\n }\n\n class B extends A{\n-    public function execute()\n+    public function execute(): int\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types to Closures (PHP)\nDESCRIPTION: This rector adds return type declarations to closures based on the types of values returned within the closure body.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_294\n\nLANGUAGE: php\nCODE:\n```\n-function () {\n+function (): int {\n     return 100;\n };\n```\n\n----------------------------------------\n\nTITLE: Optimizing Argument Count Check in PHP\nDESCRIPTION: This rule replaces count(func_get_args()) with func_num_args(), which is a more direct and efficient way to get the number of function arguments.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n-count(func_get_args());\n+func_num_args();\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Ternary Expressions in PHP\nDESCRIPTION: Eliminates unnecessary ternary expressions where the condition itself already returns a boolean value, simplifying the code without changing functionality.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n-$foo === $bar ? true : false;\n+$foo === $bar;\n```\n\n----------------------------------------\n\nTITLE: Changing array_key_exists() to property_exists() in PHP 7.4\nDESCRIPTION: Replaces array_key_exists() checks on objects with property_exists() for better performance and readability in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_197\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n      public $value;\n }\n $someClass = new SomeClass;\n\n-array_key_exists('value', $someClass);\n+property_exists($someClass, 'value');\n```\n\n----------------------------------------\n\nTITLE: Adding Array Return Type from Direct Array Returns in PHP\nDESCRIPTION: This rule adds array return types to methods that directly return array literals. It improves type safety by explicitly declaring the return type for array values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_308\n\nLANGUAGE: diff\nCODE:\n```\nfinal class AddReturnArray\n{\n-    public function getArray()\n+    public function getArray(): array\n    {\n        return [1, 2, 3];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Binary Operations Between Numbers and Strings (PHP 7.1)\nDESCRIPTION: Updates binary operations between numbers and strings to be compatible with PHP 7.1's stricter type handling by converting string operands to appropriate numeric types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_169\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $value = 5 + '';\n-        $value = 5.0 + 'hi';\n+        $value = 5 + 0;\n+        $value = 5.0 + 0.0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting If-Else to Ternary Operator in PHP\nDESCRIPTION: This rule simplifies if-else statements that assign the same variable to a ternary operator, making the code more concise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        if (empty($value)) {\n-            $this->arrayBuilt[][$key] = true;\n-        } else {\n-            $this->arrayBuilt[][$key] = $value;\n-        }\n+        $this->arrayBuilt[][$key] = empty($value) ? true : $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Post Increment/Decrement to Pre Increment/Decrement in PHP\nDESCRIPTION: Replaces post-increment/decrement with pre-increment/decrement using the PostIncDecToPreIncDecRector rule. This transformation can improve performance as pre-increment/decrement operators avoid creating a temporary copy of the variable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run($value = 1)\n    {\n-        $value++; echo $value;\n-        $value--; echo $value;\n+        ++$value; echo $value;\n+        --$value; echo $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Interfaces in Class Implementations (PHP)\nDESCRIPTION: MergeInterfacesRector removes redundant interface implementations when one interface already includes the methods of another. This helps clean up class definitions when interfaces have been consolidated.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_257\n\nLANGUAGE: php\nCODE:\n```\n-class SomeClass implements SomeInterface, SomeOldInterface\n+class SomeClass implements SomeInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Making Constants Case Sensitive in PHP 7.3\nDESCRIPTION: Updates code to use constants with case-sensitive comparisons, as case-insensitive constants are deprecated in PHP 7.3+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_190\n\nLANGUAGE: diff\nCODE:\n```\n define('FOO', 42, true);\n var_dump(FOO);\n-var_dump(foo);\n+var_dump(FOO);\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type from Strict Typed Property in PHP\nDESCRIPTION: The ReturnTypeFromStrictTypedPropertyRector adds a return type to methods based on the type of property they return. It identifies cases where a method returns a property with a strict type declaration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_317\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n     private int $age = 100;\n\n-    public function getAge()\n+    public function getAge(): int\n     {\n         return $this->age;\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Using Loop Class with Periodic and One-time Timers\nDESCRIPTION: This example demonstrates using ReactPHP's Loop class to set up a periodic timer that outputs 'Tick' every 0.1 seconds and a one-time timer that cancels the periodic timer after 1 second.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse React\\EventLoop\\Loop;\n\n$timer = Loop::addPeriodicTimer(0.1, function () {\n    echo 'Tick' . PHP_EOL;\n});\n\nLoop::addTimer(1.0, function () use ($timer) {\n    Loop::cancelTimer($timer);\n    echo 'Done' . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Types to Closure Arguments (PHP)\nDESCRIPTION: This configurable rector adds parameter type declarations to closure arguments within function-like calls. It infers types from usage and updates the closure signature.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_280\n\nLANGUAGE: php\nCODE:\n```\n-(new SomeClass)->process(function ($parameter) {});\n+(new SomeClass)->process(function (string $parameter) {});\n```\n\n----------------------------------------\n\nTITLE: Flipping Negated Instanceof Ternary Expressions in PHP\nDESCRIPTION: The FlipNegatedTernaryInstanceofRector transforms negated ternary operations with instanceof into a more direct form. This makes the code more readable by removing the double negative logic.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_126\n\nLANGUAGE: php\nCODE:\n```\n-echo ! $object instanceof Product ? null : $object->getPrice();\n+echo $object instanceof Product ? $object->getPrice() : null;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Multiple dirname() Calls (PHP 7.0)\nDESCRIPTION: Replaces nested dirname() function calls with a single call using the levels parameter introduced in PHP 7.0 for better performance and readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_157\n\nLANGUAGE: php\nCODE:\n```\n-dirname(dirname($path));\n+dirname($path, 2);\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Types Based on Parent Method in PHP\nDESCRIPTION: This rule adds parameter type declarations to methods based on the parameter types in their parent class methods. It ensures type consistency between parent and child class methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_302\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeControl\n{\n    public function __construct(string $name)\n    {\n    }\n}\n\nclass VideoControl extends SomeControl\n{\n-    public function __construct($name)\n+    public function __construct(string $name)\n    {\n        parent::__construct($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Combined Assignment Operators with CombinedAssignRector\nDESCRIPTION: This rule simplifies self-assignments that use operations (like addition) to use the combined assignment operators (+=, -=, etc.), resulting in more concise code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n-$value = $value + 5;\n+$value += 5;\n```\n\n----------------------------------------\n\nTITLE: Removing Dead Conditions Above Return Statements in PHP\nDESCRIPTION: This rule removes redundant conditional blocks that have the same return value as the code immediately following them.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function go()\n     {\n-        if (1 === 1) {\n-            return 'yes';\n-        }\n-\n         return 'yes';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Making array_search Use Strict Comparison in PHP\nDESCRIPTION: Modifies array_search() function calls to use strict comparison by adding the third parameter as true using the StrictArraySearchRector rule. This prevents unexpected results when searching for elements with type juggling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n-array_search($value, $items);\n+array_search($value, $items, true);\n```\n\n----------------------------------------\n\nTITLE: Converting Version Compare Function Calls to PHP Version Constants\nDESCRIPTION: Replaces version_compare() function calls with PHP version constants using the VersionCompareFuncCallToConstantRector rule. This provides better performance and more readable code when comparing PHP versions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        version_compare(PHP_VERSION, '5.3.0', '<');\n+        PHP_VERSION_ID < 50300;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shortening else if to elseif in PHP\nDESCRIPTION: This rule simplifies the structure of if-else statements by converting 'else { if ... }' to 'elseif ...', which improves readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        if ($cond1) {\n            return $action1;\n-        } else {\n-            if ($cond2) {\n-                return $action2;\n-            }\n+        } elseif ($cond2) {\n+            return $action2;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deferred for Asynchronous Operations in PHP\nDESCRIPTION: Illustrates how to use the React\\Promise\\Deferred class to create and resolve promises for asynchronous operations. This example shows a function that returns a promise and resolves or rejects it based on the result of an asynchronous computation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction getAwesomeResultPromise()\n{\n    $deferred = new React\\Promise\\Deferred();\n\n    // Execute a Node.js-style function using the callback pattern\n    computeAwesomeResultAsynchronously(function (\\Throwable $error, $result) use ($deferred) {\n        if ($error) {\n            $deferred->reject($error);\n        } else {\n            $deferred->resolve($result);\n        }\n    });\n\n    // Return the promise\n    return $deferred->promise();\n}\n\ngetAwesomeResultPromise()\n    ->then(\n        function ($value) {\n            // Deferred resolved, do something with $value\n        },\n        function (\\Throwable $reason) {\n            // Deferred rejected, do something with $reason\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Converting Relative Paths to Absolute with AbsolutizeRequireAndIncludePathRector\nDESCRIPTION: This rule converts relative paths in include/require statements to absolute paths using __DIR__. Note that this might introduce backwards incompatible code if the path depends on current working directory.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        require 'autoload.php';\n+        require __DIR__ . '/autoload.php';\n\n        require $variable;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Boolean Return Type Based on Constant Returns (PHP)\nDESCRIPTION: This rector adds a bool return type to methods that directly return true or false values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_291\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    public function resolve($value)\n+    public function resolve($value): bool\n     {\n         if ($value) {\n             return false;\n         }\n\n         return true;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Arrow Functions to Static When Possible in PHP\nDESCRIPTION: Changes arrow functions to be static when possible using the StaticArrowFunctionRector rule. This optimization can improve performance by avoiding the creation of closures that access the parent scope.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n-fn (): string => 'test';\n+static fn (): string => 'test';\n```\n\n----------------------------------------\n\nTITLE: Explicit Event Loop Creation and Execution in ReactPHP\nDESCRIPTION: This example shows explicitly creating an event loop instance, adding timers to it, and manually running the loop. This approach provides more explicit control over the event loop lifecycle.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$loop = React\\EventLoop\\Loop::get(); // or deprecated React\\EventLoop\\Factory::create();\n\n$timer = $loop->addPeriodicTimer(0.1, function () {\n    echo 'Tick' . PHP_EOL;\n});\n\n$loop->addTimer(1.0, function () use ($loop, $timer) {\n    $loop->cancelTimer($timer);\n    echo 'Done' . PHP_EOL;\n});\n\n$loop->run();\n```\n\n----------------------------------------\n\nTITLE: Removing Obsolete PHP Version Checks in PHP\nDESCRIPTION: This rule removes conditional checks for PHP versions that are already satisfied by the minimum PHP version requirement of the project.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_111\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        if (PHP_VERSION_ID < 80000) {\n-            return;\n-        }\n-\n         echo 'do something';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Handler Typehint (PHP 7.0)\nDESCRIPTION: Changes the typehint from Exception to Throwable in exception handlers to support the new exception hierarchy in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_152\n\nLANGUAGE: php\nCODE:\n```\n-function handler(Exception $exception) { ... }\n+function handler(Throwable $exception) { ... }\n set_exception_handler('handler');\n```\n\n----------------------------------------\n\nTITLE: Adding ReturnTypeWillChange Attribute to Methods (PHP)\nDESCRIPTION: ReturnTypeWillChangeRector adds the #[\\ReturnTypeWillChange] attribute to methods in classes implementing interfaces like ArrayAccess. This addresses PHP 8.1+ compatibility issues with return type covariance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_267\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass implements ArrayAccess\n{\n+    #[\\ReturnTypeWillChange]\n     public function offsetGet($offset)\n     {\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Methods with RenameMethodRector\nDESCRIPTION: This rule turns method names to new ones. It can be configured to target specific methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_239\n\nLANGUAGE: php\nCODE:\n```\n $someObject = new SomeExampleClass;\n-$someObject->oldMethod();\n+$someObject->newMethod();\n```\n\n----------------------------------------\n\nTITLE: Converting call_user_func() to Direct Method Calls in PHP\nDESCRIPTION: Simplifies code by transforming call_user_func() calls on known class methods to direct method calls, improving readability and possibly performance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run()\n     {\n-        $result = \\call_user_func([$this->property, 'method'], $args);\n+        $result = $this->property->method($args);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing ReflectionFunction::export() in PHP 7.4\nDESCRIPTION: Changes deprecated ReflectionFunction::export() static calls to use ReflectionFunction constructor and casting to string when needed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_200\n\nLANGUAGE: diff\nCODE:\n```\n-$reflectionFunction = ReflectionFunction::export('foo');\n-$reflectionFunctionAsString = ReflectionFunction::export('foo', true);\n+$reflectionFunction = new ReflectionFunction('foo');\n+$reflectionFunctionAsString = (string) new ReflectionFunction('foo');\n```\n\n----------------------------------------\n\nTITLE: Optimizing Empty Checks on Empty Arrays in PHP\nDESCRIPTION: This rule replaces empty() function calls on empty arrays with a direct comparison to an empty array, which is more explicit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$array = [];\n\n-if (empty($values)) {\n+if ([] === $values) {\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant AND TRUE Operations in PHP\nDESCRIPTION: Removes logical AND operations with true that have no effect on the result using the RemoveAndTrueRector rule. This simplifies boolean expressions by eliminating redundant true comparisons.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        return true && 5 === 1;\n+        return 5 === 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Binary OR to Early Returns in PHP\nDESCRIPTION: The ReturnBinaryOrToEarlyReturnRector transforms single returns with OR operators into early return statements. This improves code readability by making the control flow more explicit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_124\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function accept()\n     {\n-        return $this->something() || $this->somethingElse();\n+        if ($this->something()) {\n+            return true;\n+        }\n+        return (bool) $this->somethingElse();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Always Else Block in PHP Conditionals\nDESCRIPTION: The RemoveAlwaysElseRector rule splits if statements when the if condition always breaks execution flow. This transforms code to use early returns instead of else blocks when the if branch contains flow-breaking statements like throw.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_123\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run($value)\n     {\n         if ($value) {\n             throw new \\InvalidStateException;\n-        } else {\n-            return 10;\n         }\n+\n+        return 10;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using Comparator Class in PHP for Version Comparison\nDESCRIPTION: Example of using the Comparator class to check if one version is greater than another version. The method returns a boolean value indicating the comparison result.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/semver/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Semver\\Comparator;\n\nComparator::greaterThan('1.25.0', '1.24.0'); // 1.25.0 > 1.24.0\n```\n\n----------------------------------------\n\nTITLE: Piping file contents using React Streams in PHP\nDESCRIPTION: This example shows how to use React Streams to pipe the contents of a source file into a destination file without reading the entire file into memory.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$source = new React\\Stream\\ReadableResourceStream(fopen('source.txt', 'r'));\n$dest = new React\\Stream\\WritableResourceStream(fopen('destination.txt', 'w'));\n\n$source->pipe($dest);\n```\n\n----------------------------------------\n\nTITLE: Basic Child Process Execution in PHP with ReactPHP\nDESCRIPTION: A simple example demonstrating how to create, start, and handle a child process using ReactPHP. The process echoes 'foo', captures stdout output, and handles the exit event.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$process = new React\\ChildProcess\\Process('echo foo');\n$process->start();\n\n$process->stdout->on('data', function ($chunk) {\n    echo $chunk;\n});\n\n$process->on('exit', function($exitCode, $termSignal) {\n    echo 'Process exited with code ' . $exitCode . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Dead Type Checks on Typed Properties in PHP\nDESCRIPTION: This rule removes redundant instanceof checks on class properties that are already properly type-hinted.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_112\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     private $someObject;\n\n     public function __construct(SomeObject $someObject)\n     {\n         $this->someObject = $someObject;\n     }\n\n     public function run()\n     {\n-        if ($this->someObject instanceof SomeObject) {\n-            return true;\n-        }\n-\n-        return false;\n+        return true;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Resolving a Deferred Object in PHP\nDESCRIPTION: Resolves the promise returned by promise(). All consumers are notified by having their onFulfilled handlers called with the provided value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$deferred->resolve(mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Simplifying Array Search to in_array in PHP\nDESCRIPTION: This rule replaces array_search() !== false with in_array(), which is a more direct way to check for the presence of a value in an array.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n-array_search(\"searching\", $array) !== false;\n+in_array(\"searching\", $array);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n-array_search(\"searching\", $array, true) !== false;\n+in_array(\"searching\", $array, true);\n```\n\n----------------------------------------\n\nTITLE: Adding JSON_THROW_ON_ERROR to JSON Functions in PHP 7.3\nDESCRIPTION: Adds the JSON_THROW_ON_ERROR flag to json_encode() and json_decode() calls to use exceptions for error handling instead of return values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_188\n\nLANGUAGE: diff\nCODE:\n```\n-json_encode($content);\n-json_decode($json);\n+json_encode($content, JSON_THROW_ON_ERROR);\n+json_decode($json, null, 512, JSON_THROW_ON_ERROR);\n```\n\n----------------------------------------\n\nTITLE: Removing Unreachable Statements in PHP\nDESCRIPTION: This rule removes code that can never be executed because it appears after return, throw, or break statements.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         return 5;\n-\n-        $removeMe = 10;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing Double Boolean Negation with Type Casting in PHP\nDESCRIPTION: This rule replaces the double not operator (!!) with a boolean type cast (bool), which is a more explicit way to convert a value to boolean.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n-$bool = !!$var;\n+$bool = (bool) $var;\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant String Casting in Concatenation Operations in PHP\nDESCRIPTION: This rule eliminates unnecessary string casting in concatenation operations since PHP automatically casts values to strings when concatenating.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_93\n\nLANGUAGE: php\nCODE:\n```\n class SomeConcatingClass\n {\n     public function run($value)\n     {\n-        return 'hi ' . (string) $value;\n+        return 'hi ' . $value;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using ArgumentAdderRector to Add Default Arguments to Method Calls\nDESCRIPTION: This rule adds new default arguments in calls of defined methods and class types. The example shows adding a boolean parameter to a method call and its definition.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$someObject = new SomeExampleClass;\n-$someObject->someMethod();\n+$someObject->someMethod(true);\n\nclass MyCustomClass extends SomeExampleClass\n{\n-    public function someMethod()\n+    public function someMethod($value = true)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Nullable Return Checks in PHP\nDESCRIPTION: This rule simplifies methods that check for null before returning, by directly returning the result of the nullable method call.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $value = $this->get();\n-        if (! $value instanceof \\stdClass) {\n-            return null;\n-        }\n-\n-        return $value;\n+        return $this->get();\n    }\n\n    public function get(): ?stdClass {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing filter_var() with FILTER_SANITIZE_MAGIC_QUOTES in PHP 7.4\nDESCRIPTION: Changes filter_var() with FILTER_SANITIZE_MAGIC_QUOTES flag to use addslashes() instead, as the magic quotes filter was deprecated in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_201\n\nLANGUAGE: diff\nCODE:\n```\n $var= \"Satya's here!\";\n-filter_var($var, FILTER_SANITIZE_MAGIC_QUOTES);\n+addslashes($var);\n```\n\n----------------------------------------\n\nTITLE: Adding Curly Braces to Variable Variables (PHP 7.0)\nDESCRIPTION: Wraps variable variable names in curly braces to comply with PHP 7.0's stricter parsing rules for complex variable syntax.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_167\n\nLANGUAGE: php\nCODE:\n```\nfunction run($foo)\n{\n-    global $$foo->bar;\n+    global ${$foo->bar};\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in PHP\nDESCRIPTION: Shows how to attach an event listener for a 'user.created' event that logs user creation. The listener receives a User object as parameter and uses a logger dependency.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/evenement/evenement/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$emitter->on('user.created', function (User $user) use ($logger) {\n    $logger->log(sprintf(\"User '%s' was created.\", $user->getLogin()));\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Dead Type Checks on Type-Hinted Variables in PHP\nDESCRIPTION: This rule removes redundant instanceof checks on variables that are already type-hinted in the function signature.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_97\n\nLANGUAGE: php\nCODE:\n```\n function run(stdClass $stdClass)\n {\n-    if (! $stdClass instanceof stdClass) {\n-        return false;\n-    }\n-\n     return true;\n }\n```\n\n----------------------------------------\n\nTITLE: Optimizing Foreach Loops with Unused Values in PHP\nDESCRIPTION: Replaces foreach loops where only the key is used with array_keys() for better performance and code clarity.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         $items = [];\n-        foreach ($values as $key => $value) {\n+        foreach (array_keys($values) as $key) {\n             $items[$key] = null;\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Modifying Heredoc/Nowdoc Syntax in PHP 7.3\nDESCRIPTION: Changes heredoc/nowdoc that contains the closing word to a safe wrapper name to prevent syntax errors in PHP 7.3+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_192\n\nLANGUAGE: diff\nCODE:\n```\n-$value = <<<A\n+$value = <<<A_WRAP\n     A\n-A\n+A_WRAP\n```\n\n----------------------------------------\n\nTITLE: Adding parentheses to nested ternary operators in PHP 7.4\nDESCRIPTION: Adds explicit parentheses to nested ternary operators to clarify precedence, as required by PHP 7.4 which no longer allows ambiguous nested ternaries.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_206\n\nLANGUAGE: diff\nCODE:\n```\n-$value = $a ? $b : $a ?: null;\n+$value = ($a ? $b : $a) ?: null;\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary sprintf() Calls with Single Arguments in PHP\nDESCRIPTION: Simplifies sprintf() calls with only one argument by directly using the string value, improving performance and readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n-echo sprintf('value');\n+echo 'value';\n```\n\n----------------------------------------\n\nTITLE: Simplifying Negated Conditions in PHP\nDESCRIPTION: This rule simplifies negated conditions by removing double negations, which improves code readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n-if (! ($foo !== 'bar')) {...\n+if ($foo === 'bar') {...\n```\n\n----------------------------------------\n\nTITLE: Simplifying Tautological Ternary Operators in PHP\nDESCRIPTION: This rule simplifies ternary operators where both outcomes are the same, replacing them with the common value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n-$value = ($fullyQualifiedTypeHint !== $typeHint) ? $fullyQualifiedTypeHint : $typeHint;\n+$value = $fullyQualifiedTypeHint;\n```\n\n----------------------------------------\n\nTITLE: Removing Annotations with RemoveAnnotationRector in PHP\nDESCRIPTION: This rule removes specified annotations from classes. It allows developers to clean up unneeded annotations by configuring the specific annotation names to be removed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n-/**\n- * @method getName()\n- */\n final class SomeClass\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Converting $this::class to static::class in PHP 8.0\nDESCRIPTION: Changes $this::class to static::class or self::class depending on the class modifier to comply with PHP 8.0 standards.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_214\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return $this::class;\n+        return static::class;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding missing parameters based on parent class method in PHP 8.0\nDESCRIPTION: Adds missing parameters to a method that overrides a parent class method to ensure compatibility with PHP 8.0, which is stricter about method signatures.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_210\n\nLANGUAGE: diff\nCODE:\n```\n class A\n {\n     public function execute($foo)\n     {\n     }\n }\n\n class B extends A{\n-    public function execute()\n+    public function execute($foo)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Private Properties\nDESCRIPTION: Removes private properties that are never used within the class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_120\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    private $property;\n }\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Execution with Exit Event in ReactPHP\nDESCRIPTION: Shows how to execute processes sequentially by starting the next process after the previous one exits, providing better control over process I/O streams.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$first = new Process('cat first');\n$first->start();\n\n$first->on('exit', function () {\n    $second = new Process('cat second');\n    $second->start();\n});\n```\n\n----------------------------------------\n\nTITLE: Converting get_called_class() to static::class in Non-Final Classes for PHP 5.5+\nDESCRIPTION: The GetCalledClassToStaticClassRector changes get_called_class() to static::class on non-final classes in PHP 5.5+. This maintains the late static binding behavior while utilizing the newer class name resolution feature.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_143\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n    public function callOnMe()\n    {\n-       var_dump(get_called_class());\n+       var_dump(static::class);\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit Public Method Visibility in PHP\nDESCRIPTION: The ExplicitPublicClassMethodRector adds an explicit public visibility modifier to methods that don't have any visibility specified. It improves code clarity by making all method visibilities explicit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_332\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class SomeClass\n {\n-    function foo()\n+    public function foo()\n     {\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing strlen() Zero Comparison with Empty String Check in PHP\nDESCRIPTION: Optimizes code by changing strlen($value) === 0 checks to the more direct and readable $value === '' comparison.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run(string $value)\n     {\n-        $empty = strlen($value) === 0;\n+        $empty = $value === '';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Brackets with CompleteMissingIfElseBracketRector\nDESCRIPTION: Adds missing curly brackets to if/else statements to improve code consistency and prevent potential bugs.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run($value)\n    {\n        if ($value) {\n            return 1;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Variables to Match Method Return Types in PHP\nDESCRIPTION: The RenameVariableToMatchMethodCallReturnTypeRector renames variables to match the return type of the method they're assigned from. This improves code readability by making variable names reflect their content.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_131\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $a = $this->getRunner();\n+        $runner = $this->getRunner();\n     }\n\n     public function getRunner(): Runner\n     {\n         return new Runner();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing final modifier from private methods in PHP 8.0\nDESCRIPTION: Removes the final modifier from private methods as it became redundant in PHP 8.0 since private methods cannot be overridden.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_216\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    final private function getter() {\n+    private function getter() {\n         return $this;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Combining Nested Conditionals with CombineIfRector\nDESCRIPTION: This rule merges nested if statements into a single if statement with combined conditions using the logical AND operator (&&), making the code more concise and reducing nesting.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        if ($cond1) {\n-            if ($cond2) {\n-                return 'foo';\n-            }\n+        if ($cond1 && $cond2) {\n+            return 'foo';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Double Assignments in PHP\nDESCRIPTION: Splits multiple inline assignments to separate lines using the SplitDoubleAssignRector rule. This helps prevent undefined array issues and makes the code more explicit and easier to debug.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $one = $two = 1;\n+        $one = 1;\n+        $two = 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Negated Boolean Identity Checks with BooleanNotIdenticalToNotIdenticalRector\nDESCRIPTION: This rule converts negated identical boolean comparisons to not identical comparisons. It simplifies expressions like '! ($a === $b)' to '$a !== $b' for boolean values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        $a = true;\n        $b = false;\n\n-        var_dump(! $a === $b); // true\n-        var_dump(! ($a === $b)); // true\n+        var_dump($a !== $b); // true\n+        var_dump($a !== $b); // true\n        var_dump($a !== $b); // true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Get and Set Pattern with React PHP Cache\nDESCRIPTION: This example expands on the fallback get pattern by also setting the retrieved value in the cache after fetching it from the database. It uses promise chaining to conditionally cache values that were not initially found in the cache.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$cache\n    ->get('foo')\n    ->then(function ($result) {\n        if ($result === null) {\n            return $this->getAndCacheFooFromDb();\n        }\n        \n        return $result;\n    })\n    ->then('var_dump');\n\npublic function getAndCacheFooFromDb()\n{\n    return $this->db\n        ->get('foo')\n        ->then(array($this, 'cacheFooFromDb'));\n}\n\npublic function cacheFooFromDb($foo)\n{\n    $this->cache->set('foo', $foo);\n\n    return $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing list() with String Splitting (PHP 7.0)\nDESCRIPTION: Updates code where list() was used to split a string directly, which is no longer supported in PHP 7.0+, by using str_split() instead.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_155\n\nLANGUAGE: php\nCODE:\n```\n-list($foo) = \"string\";\n+list($foo) = str_split(\"string\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Curly Braces with Square Brackets for Array/String Access in PHP 7.4\nDESCRIPTION: Changes curly brace syntax for array and string access to square bracket syntax, as curly braces were deprecated in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_199\n\nLANGUAGE: diff\nCODE:\n```\n $string = 'test';\n-echo $string{0};\n+echo $string[0];\n\n $array = ['test'];\n-echo $array{0};\n+echo $array[0];\n```\n\n----------------------------------------\n\nTITLE: Renaming Foreach Loop Variables to Match Array Variable Names in PHP\nDESCRIPTION: The RenameForeachValueVariableToMatchExprVariableRector renames foreach loop value variables to match the expression variable name. This improves code consistency and makes the relationship between variables clearer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_127\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         $array = [];\n-        foreach ($variables as $property) {\n-            $array[] = $property;\n+        foreach ($variables as $variable) {\n+            $array[] = $variable;\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Constructor Parameters in PHP\nDESCRIPTION: This rule removes parameters from constructors that are never used within the class, simplifying method signatures.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     private $hey;\n\n-    public function __construct($hey, $man)\n+    public function __construct($hey)\n     {\n         $this->hey = $hey;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a LimitingServer with React\\Socket in PHP\nDESCRIPTION: Demonstrates how to create a LimitingServer that wraps a regular Server instance to limit and track open connections. The example sets a limit of 100 concurrent connections.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$server = new Server(0, $loop);\n$server = new LimitingServer($server, 100);\n\n$server->on('connection', function (ConnectionInterface $connection) {\n    $connection->write('hello there!' . PHP_EOL);\n    …\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Void Return Type to PHPUnit Test Methods (PHP)\nDESCRIPTION: This rector adds a void return type to PHPUnit test methods that don't explicitly return a value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_287\n\nLANGUAGE: php\nCODE:\n```\n use PHPUnit\\Framework\\TestCase;\n\n class SomeClass extends TestCase\n {\n-    public function testSomething()\n+    public function testSomething(): void\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying array_merge of Arrays with ArrayMergeOfNonArraysToSimpleArrayRector\nDESCRIPTION: This rule simplifies array_merge() calls with non-array arguments (like individual variables) into a direct array declaration, improving readability and performance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function go()\n    {\n        $value = 5;\n        $value2 = 10;\n\n-        return array_merge([$value], [$value2]);\n+        return [$value, $value2];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Empty Array Checks in PHP\nDESCRIPTION: This rule simplifies the combination of is_array() and empty() checks into a simple comparison with an empty array, which is more concise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n-is_array($values) && empty($values)\n+$values === []\n```\n\n----------------------------------------\n\nTITLE: Converting Object Instantiation to Static Factory Methods (PHP)\nDESCRIPTION: NewToStaticCallRector replaces direct object instantiation with calls to static factory methods. This pattern provides more flexibility and control over object creation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_261\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        new Cookie($name);\n+        Cookie::create($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting mktime() without Arguments to time() (PHP 7.0)\nDESCRIPTION: Renames mktime() calls without arguments to time() for clearer intent and to avoid deprecated behavior in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_161\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        $time = mktime(1, 2, 3);\n-        $nextTime = mktime();\n+        $nextTime = time();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Types Based on PHPUnit Data Providers (PHP)\nDESCRIPTION: This rector adds parameter type declarations to test methods based on the return type of their PHPUnit data provider methods. It analyzes the provider and updates the test method signature.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_278\n\nLANGUAGE: php\nCODE:\n```\n use PHPUnit\\Framework\\TestCase;\n\n final class SomeTest extends TestCase\n {\n     /**\n      * @dataProvider provideData()\n      */\n-    public function test($value)\n+    public function test(string $value)\n     {\n     }\n\n     public static function provideData()\n     {\n         yield ['name'];\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing Parent Class with Traits (PHP)\nDESCRIPTION: ParentClassToTraitsRector converts class inheritance to trait usage. This is particularly useful for migrating from inheritance hierarchies to composition with traits.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_262\n\nLANGUAGE: php\nCODE:\n```\n-class SomeClass extends Nette\\Object\n+class SomeClass\n{\n+    use Nette\\SmartObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing unused variables in catch blocks in PHP 8.0\nDESCRIPTION: Removes unused exception variables in catch blocks, taking advantage of the new anonymous catch feature in PHP 8.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_220\n\nLANGUAGE: diff\nCODE:\n```\n final class SomeClass\n {\n     public function run()\n     {\n         try {\n-        } catch (Throwable $notUsedThrowable) {\n+        } catch (Throwable) {\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Limiting Periodic Timer Executions in PHP Event Loop\nDESCRIPTION: Shows how to limit the number of executions of a periodic timer using a closure with a counter variable. The timer cancels itself after a specified number of executions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nfunction hello($name, LoopInterface $loop)\n{\n    $n = 3;\n    $loop->addPeriodicTimer(1.0, function ($timer) use ($name, $loop, &$n) {\n        if ($n > 0) {\n            --$n;\n            echo \"hello $name\\n\";\n        } else {\n            $loop->cancelTimer($timer);\n        }\n    });\n}\n\nhello('Tester', $loop);\n```\n\n----------------------------------------\n\nTITLE: Fixing mb_strrpos() encoding argument position in PHP 7.4\nDESCRIPTION: Adjusts mb_strrpos() function call by repositioning the encoding argument to maintain compatibility with PHP 7.4 changes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_203\n\nLANGUAGE: diff\nCODE:\n```\n-mb_strrpos($text, \"abc\", \"UTF-8\");\n+mb_strrpos($text, \"abc\", 0, \"UTF-8\");\n```\n\n----------------------------------------\n\nTITLE: Converting setcookie() Parameters to Options Array in PHP 7.3\nDESCRIPTION: Converts setcookie() function parameters to use the options array format introduced in PHP 7.3.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_193\n\nLANGUAGE: diff\nCODE:\n```\n-setcookie('name', $value, 360);\n+setcookie('name', $value, ['expires' => 360]);\n```\n\n----------------------------------------\n\nTITLE: AST Traversal and Modification\nDESCRIPTION: Shows how to traverse and modify an AST by implementing a NodeVisitor that removes function bodies. Demonstrates usage of NodeTraverser and visitor pattern.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/nikic/php-parser/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node;\nuse PhpParser\\Node\\Stmt\\Function_;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Removing Case Insensitive Flag from define() in PHP 7.3\nDESCRIPTION: Removes the case-insensitive flag (third parameter) from define() calls, as case-insensitive constants are deprecated in PHP 7.3+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_191\n\nLANGUAGE: diff\nCODE:\n```\n-define('FOO', 42, true);\n+define('FOO', 42);\n```\n\n----------------------------------------\n\nTITLE: Fixing Empty list() Assignments (PHP 7.0)\nDESCRIPTION: Addresses the PHP 7.0 requirement that list() can no longer be empty by adding an unused variable to the list assignment.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_150\n\nLANGUAGE: php\nCODE:\n```\n-'list() = $values;'\n+'list($unusedGenerated) = $values;'\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types from Ternary Expressions in PHP\nDESCRIPTION: This rule adds return types to methods based on the types of values in ternary expressions. It infers the common type from both branches of the ternary to improve type safety.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_315\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    public function getValue($number)\n+    public function getValue($number): int\n    {\n        return $number ? 100 : 500;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding null default to nullable type properties in PHP 7.4\nDESCRIPTION: Restores default null value to properties with PHP 7.4 typed property declarations that are nullable to ensure backward compatibility.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_208\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    public ?string $name;\n+    public ?string $name = null;\n }\n```\n\n----------------------------------------\n\nTITLE: Converting settype() to Type Casting in PHP\nDESCRIPTION: This rule changes settype() function calls to type casting where possible, which is generally more performant and readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run($foo)\n    {\n-        settype($foo, 'string');\n+        $foo = (string) $foo;\n\n-        return settype($foo, 'integer');\n+        return (int) $foo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Get Pattern with React PHP Cache\nDESCRIPTION: This example demonstrates a common caching pattern where the code attempts to fetch a value from cache and falls back to retrieving it from the database when not found. It uses promises for asynchronous operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$cache\n    ->get('foo')\n    ->then(function ($result) {\n        if ($result === null) {\n            return getFooFromDb();\n        }\n        \n        return $result;\n    })\n    ->then('var_dump');\n```\n\n----------------------------------------\n\nTITLE: Removing Parent Constructor Calls without Parent Class in PHP\nDESCRIPTION: This rule removes calls to parent::__construct() in classes that don't have a parent class, eliminating errors.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n class OrphanClass\n {\n     public function __construct()\n     {\n-         parent::__construct();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Merging DateTime Property Type Declarations in PHP\nDESCRIPTION: This rule updates DateTime properties that have DateTimeInterface docblocks to use DateTimeInterface as their type declaration. It helps unify the property type with the documented interface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_298\n\nLANGUAGE: diff\nCODE:\n```\nfinal class SomeClass\n{\n-    /**\n-     * @var DateTimeInterface\n-     */\n-    private DateTime $dateTime;\n+    private DateTimeInterface $dateTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Closures to Static When Possible in PHP\nDESCRIPTION: Changes closures to be static when possible using the StaticClosureRector rule. This optimization can improve performance for closures that don't access the parent scope.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n-function () {\n+static function () {\n    if (rand(0, 1)) {\n        return 1;\n    }\n\n    return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Nullable Object Checks to instanceof (PHP)\nDESCRIPTION: This rector changes boolean operations (&&, ||) between nullable objects to instanceof comparisons, improving type safety and readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_290\n\nLANGUAGE: php\nCODE:\n```\n function someFunction(?SomeClass $someClass)\n {\n-    if ($someClass && $someClass->someMethod()) {\n+    if ($someClass instanceof SomeClass && $someClass->someMethod()) {\n         return 'yes';\n     }\n\n     return 'no';\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy HTTP Server Variables in PHP 5.3+\nDESCRIPTION: The ReplaceHttpServerVarsByServerRector renames old $HTTP_* variable names to their modern replacements. This updates legacy code to use the superglobal $_SERVER array.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_136\n\nLANGUAGE: php\nCODE:\n```\n-$serverVars = $HTTP_SERVER_VARS;\n+$serverVars = $_SERVER;\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Default Cases in Switch (PHP 7.0)\nDESCRIPTION: Removes redundant default cases in switch statements, as PHP 7.0+ only allows one default case per switch, with subsequent defaults being ignored.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_160\n\nLANGUAGE: php\nCODE:\n```\nswitch ($expr) {\n    default:\n-         echo \"Hello World\";\n-\n-    default:\n          echo \"Goodbye Moon!\";\n          break;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous vs Asynchronous Error Handling in PHP\nDESCRIPTION: Compares synchronous try/catch/finally code with its asynchronous equivalent using promises with catch() and finally() methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    return doSomething();\n} catch (\\Throwable $e) {\n    return handleError($e);\n} finally {\n    cleanup();\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Needles to Strings in PHP 7.3\nDESCRIPTION: Explicitly casts non-string needle parameters to string in string functions, which is required in PHP 7.3+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_195\n\nLANGUAGE: diff\nCODE:\n```\n $needle = 5;\n-$fivePosition = strpos('725', $needle);\n+$fivePosition = strpos('725', (string) $needle);\n```\n\n----------------------------------------\n\nTITLE: Adding Periodic Timer in PHP Event Loop\nDESCRIPTION: Demonstrates how to add a periodic timer to the event loop using addPeriodicTimer(). The example also shows how to cancel the periodic timer after a certain duration using a one-time timer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$timer = $loop->addPeriodicTimer(0.1, function () {\n    echo 'tick!' . PHP_EOL;\n});\n\n$loop->addTimer(1.0, function () use ($loop, $timer) {\n    $loop->cancelTimer($timer);\n    echo 'Done' . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting pow() Function to Exponential Operator (PHP 5.6)\nDESCRIPTION: Replaces the pow() function calls with the ** (exponential) operator introduced in PHP 5.6 for more concise and readable code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_147\n\nLANGUAGE: php\nCODE:\n```\n-pow(1, 2);\n+1**2;\n```\n\n----------------------------------------\n\nTITLE: Using CI Detector in PHP\nDESCRIPTION: Example demonstrating how to use CI Detector to detect CI environment and retrieve build information. Shows various methods for accessing build details, branch information, and handling pull requests.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/ondram/ci-detector/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$ciDetector = new \\OndraM\\CiDetector\\CiDetector();\n\nif ($ciDetector->isCiDetected()) { // Make sure we are on CI environment\n    echo 'You are running this script on CI server!';\n    $ci = $ciDetector->detect(); // Returns class implementing CiInterface or throws CiNotDetectedException\n\n    // Example output when run inside GitHub Actions build:\n    echo $ci->getCiName(); // \"GitHub Actions\"\n    echo $ci->getBuildNumber(); // \"33\"\n    echo $ci->getBranch(); // \"feature/foo-bar\" or empty string if not detected\n\n    // Conditional code for pull request:\n    if ($ci->isPullRequest()->yes()) {\n        echo 'This is pull request. The target branch is: ';\n        echo $ci->getTargetBranch(); // \"main\"\n    }\n\n    // Conditional code for specific CI server:\n    if ($ci->getCiName() === OndraM\\CiDetector\\CiDetector::CI_GITHUB_ACTIONS) {\n        echo 'This is being built on GitHub Actions';\n    }\n\n    // Describe all detected values in human-readable form:\n    print_r($ci->describe());\n    // Array\n    // (\n    //     [ci-name] => GitHub Actions\n    //     [build-number] => 33\n    //     [build-url] => https://github.com/OndraM/ci-detector/commit/abcd/checks\n    //     [commit] => fad3f7bdbf3515d1e9285b8aa80feeff74507bde\n    //     [branch] => feature/foo-bar\n    //     [target-branch] => main\n    //     [repository-name] => OndraM/ci-detector\n    //     [repository-url] => https://github.com/OndraM/ci-detector\n    //     [is-pull-request] => Yes\n    // )\n\n} else {\n    echo 'This script is not run on CI server';\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rector to Apply Changes\nDESCRIPTION: Command to execute Rector and apply the changes to the codebase based on the configured rules and sets.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector src\n```\n\n----------------------------------------\n\nTITLE: Using Result Argument in parse_str() in PHP 7.2\nDESCRIPTION: Updates parse_str() calls to use the $result argument, which is the recommended approach in PHP 7.2+. This avoids the creation of variables in the current scope.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_178\n\nLANGUAGE: diff\nCODE:\n```\n-parse_str($this->query);\n-$data = get_defined_vars();\n+parse_str($this->query, $result);\n+$data = $result;\n```\n\n----------------------------------------\n\nTITLE: Removing Zero Parameter from Break and Continue in PHP 5.4+\nDESCRIPTION: The RemoveZeroBreakContinueRector removes the 0 parameter from break and continue statements in PHP 5.4+. This updates code to comply with modern PHP standards where explicitly specifying 0 is redundant.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_140\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run($random)\n     {\n-        continue 0;\n-        break 0;\n+        continue;\n+        break;\n\n         $five = 5;\n-        continue $five;\n+        continue 5;\n\n-        break $random;\n+        break;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types to Arrow Functions (PHP)\nDESCRIPTION: AddArrowFunctionReturnTypeRector adds explicit return type declarations to arrow functions based on the return value. This improves type safety and code readability.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_273\n\nLANGUAGE: php\nCODE:\n```\n-fn () => [];\n+fn (): array => [];\n```\n\n----------------------------------------\n\nTITLE: Converting Break Outside Loop to Return (PHP 7.0)\nDESCRIPTION: Converts break statements outside of loop or switch contexts to return statements, as break is not allowed in this context in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_148\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        if ($isphp5)\n            return 1;\n        else\n            return 2;\n-        break;\n+        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Return Types from Scalar Returns in PHP\nDESCRIPTION: This rule adds int/float return types to methods based on strict scalar return values, such as literal numbers. It improves type safety by adding missing return type declarations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_300\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeClass\n{\n-    public function getNumber()\n+    public function getNumber(): int\n    {\n        return 200;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the catch() Method on Promises in PHP\nDESCRIPTION: Registers a rejection handler for a promise. It is a shortcut for calling then(null, $onRejected) and can be used with type hints to catch specific errors.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$promise->catch(callable $onRejected);\n```\n\n----------------------------------------\n\nTITLE: Converting get_called_class() to self::class in Final Classes for PHP 5.5+\nDESCRIPTION: The GetCalledClassToSelfClassRector changes get_called_class() to self::class on final classes in PHP 5.5+. This utilizes the newer class name resolution feature for improved performance and IDE support.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_142\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n    public function callOnMe()\n    {\n-       var_dump(get_called_class());\n+       var_dump(self::class);\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rejection Forwarding in PHP with React Promise\nDESCRIPTION: This snippet illustrates how rejected promises behave similarly to try/catch. To propagate a rejection, you must either return a rejected promise or throw an exception, which the promise translates into a rejection.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Propagate the rejection\n        throw $x;\n    })\n    ->catch(function (\\Exception $x) {\n        // Can also propagate by returning another rejection\n        return React\\Promise\\reject(\n            new \\Exception($x->getMessage() + 1)\n        );\n    })\n    ->catch(function ($x) {\n        echo 'Reject ' . $x->getMessage(); // 3\n    });\n\n$deferred->resolve(1);  // Prints \"Reject 3\"\n```\n\n----------------------------------------\n\nTITLE: Converting dirname(__FILE__) to __DIR__ Constant in PHP 5.3+\nDESCRIPTION: The DirNameFileConstantToDirConstantRector converts dirname(__FILE__) to the __DIR__ magic constant available in PHP 5.3+. This simplifies code by using the built-in constant.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_135\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return dirname(__FILE__);\n+        return __DIR__;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Caching DNS Resolutions with ReactPHP\nDESCRIPTION: Demonstrates how to use the cached resolver to improve performance for repeated DNS lookups by storing results in memory.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config = React\\Dns\\Config\\Config::loadSystemConfigBlocking();\nif (!$config->nameservers) {\n    $config->nameservers[] = '8.8.8.8';\n}\n\n$factory = new React\\Dns\\Resolver\\Factory();\n$dns = $factory->createCached($config);\n\n$dns->resolve('igor.io')->then(function ($ip) {\n    echo \"Host: $ip\\n\";\n});\n\n...\n\n$dns->resolve('igor.io')->then(function ($ip) {\n    echo \"Host: $ip\\n\";\n});\n```\n\n----------------------------------------\n\nTITLE: Converting static::method() to self::method() in Final Classes in PHP\nDESCRIPTION: Changes method calls from static:: to self:: in final classes since late static binding isn't needed in classes that cannot be extended.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function d()\n     {\n-        echo static::run();\n+        echo self::run();\n     }\n\n     private static function run()\n     {\n         echo 'test';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Properly Terminating a Process with Pipe Cleanup\nDESCRIPTION: Example showing the recommended way to terminate a process by first closing all process pipes and then sending a termination signal. This ensures proper cleanup of resources and prevents inherited file descriptors from keeping the process alive.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('sleep 10');\n$process->start();\n\nLoop::addTimer(2.0, function () use ($process) {\n    foreach ($process->pipes as $pipe) {\n        $pipe->close();\n    }\n    $process->terminate();\n});\n```\n\n----------------------------------------\n\nTITLE: Separating Multiple Use Imports in PHP\nDESCRIPTION: Splits multi-use imports and trait statements into individual standalone lines using the SeparateMultiUseImportsRector rule. This improves code readability and makes version control diffs cleaner.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n-use A, B;\n+use A;\n+use B;\n\nclass SomeClass\n{\n-    use SomeTrait, AnotherTrait;\n+    use SomeTrait;\n+    use AnotherTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Oriented Dependency Injection with ReactPHP Loop\nDESCRIPTION: This example demonstrates how to use dependency injection with ReactPHP's Loop in an object-oriented programming context, injecting the loop instance into a Greeter class to schedule delayed greetings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse React\\EventLoop\\Loop;\nuse React\\EventLoop\\LoopInterface;\n\nclass Greeter\n{\n    private $loop;\n\n    public function __construct(LoopInterface $loop)\n    {\n        $this->loop = $loop;\n    }\n\n    public function greet(string $name)\n    {\n        $this->loop->addTimer(1.0, function () use ($name) {\n            echo 'Hello ' . $name . '!' . PHP_EOL;\n        });\n    }\n}\n\n$greeter = new Greeter(Loop::get());\n$greeter->greet('Alice');\n$greeter->greet('Bob');\n```\n\n----------------------------------------\n\nTITLE: Adding String Return Type from Strict String Returns in PHP\nDESCRIPTION: The StringReturnTypeFromStrictStringReturnsRector adds a string return type to methods that consistently return strings or string-yielding functions. It analyzes return statements to verify they all produce string values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_323\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n-    public function foo($condition, $value)\n+    public function foo($condition, $value): string;\n     {\n         if ($value) {\n             return 'yes';\n         }\n\n         return strtoupper($value);\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Renaming Parameters to Match Type Names in PHP\nDESCRIPTION: The RenameParamToMatchTypeRector renames method parameters to match their class type names. This improves code clarity by making parameter names consistent with their types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_129\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n-    public function run(Apple $pie)\n+    public function run(Apple $apple)\n     {\n-        $food = $pie;\n+        $food = $apple;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding AllowDynamicProperties Attribute with AddAllowDynamicPropertiesAttributeRector\nDESCRIPTION: This rule adds the `AllowDynamicProperties` attribute to all classes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_248\n\nLANGUAGE: php\nCODE:\n```\n namespace Example\\Domain;\n\n+#[AllowDynamicProperties]\n class SomeObject {\n     public string $someProperty = 'hello world';\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Return Types from Constants in PHP\nDESCRIPTION: This rule adds return types to methods that return class constants. It infers the return type from the constant's value type to improve type safety and code clarity.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_310\n\nLANGUAGE: diff\nCODE:\n```\nclass SomeClass\n{\n    public const NAME = 'name';\n\n-    public function run()\n+    public function run(): string\n    {\n        return self::NAME;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Loop Execution with ReactPHP's Loop Class\nDESCRIPTION: A simple example demonstrating how ReactPHP's Loop class automatically executes the event loop at the end of the program without an explicit run() call, scheduling a timer that outputs 'Hello' after 1 second.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse React\\EventLoop\\Loop;\n\nLoop::addTimer(1.0, function () {\n    echo 'Hello' . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Continue to Break in Switch Statements for PHP 5.2 Compatibility\nDESCRIPTION: The ContinueToBreakInSwitchRector replaces continue with break in switch statements for PHP 5.2 compatibility. This fixes issues where continue behaves differently in switch statements across PHP versions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_133\n\nLANGUAGE: php\nCODE:\n```\n function some_run($value)\n {\n     switch ($value) {\n         case 1:\n             echo 'Hi';\n-            continue;\n+            break;\n         case 2:\n             echo 'Hello';\n             break;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Nullable Check to Instanceof in PHP\nDESCRIPTION: The WhileNullableToInstanceofRector converts null comparison checks to instanceof checks in while loops. It improves code clarity by using a more explicit type check instead of a null comparison.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_329\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n     public function run(?SomeClass $someClass)\n     {\n-        while ($someClass !== null) {\n+        while ($someClass instanceof SomeClass) {\n             // do something\n         }\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing HostsFileExecutor with UdpTransportExecutor in PHP\nDESCRIPTION: Demonstrates how to use HostsFileExecutor in combination with UdpTransportExecutor to consider hosts file entries during DNS resolution.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$hosts = \\React\\Dns\\Config\\HostsFile::loadFromPathBlocking();\n\n$executor = new UdpTransportExecutor('8.8.8.8:53');\n$executor = new HostsFileExecutor($hosts, $executor);\n\n$executor->query(\n    new Query('localhost', Message::TYPE_A, Message::CLASS_IN)\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Rector via Composer\nDESCRIPTION: This command installs the rector/rector package as a development dependency, which includes Doctrine-specific rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-doctrine/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require rector/rector --dev\n```\n\n----------------------------------------\n\nTITLE: Inlining call_user_func with Arrow Functions using CallUserFuncWithArrowFunctionToInlineRector\nDESCRIPTION: This rule refactors call_user_func() with arrow functions to direct calls, eliminating unnecessary function indirection. It replaces the function call with the direct result.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function run()\n    {\n-        $result = \\call_user_func(fn () => 100);\n+        $result = 100;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Nullsafe Operators with CleanupUnneededNullsafeOperatorRector\nDESCRIPTION: This rule removes the nullsafe operator (?->) when it's unnecessary, such as when the object is guaranteed to be non-null. It simplifies code by using the standard object operator.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld {\n    public function getString(): string\n    {\n         return 'hello world';\n    }\n}\n\nfunction get(): HelloWorld\n{\n     return new HelloWorld();\n}\n\n-echo get()?->getString();\n+echo get()->getString();\n```\n\n----------------------------------------\n\nTITLE: Updating Random Functions to Modern Alternatives (PHP 7.0)\nDESCRIPTION: Changes deprecated random functions (rand, srand, getrandmax) to their more secure and modern alternatives (random_int, random_bytes) in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_159\n\nLANGUAGE: php\nCODE:\n```\n-rand();\n+random_int();\n```\n\n----------------------------------------\n\nTITLE: Adding SplFixedArray Parameter Types (PHP)\nDESCRIPTION: This rector adds exact fixed array types for SplFixedArray parameters in known cases. It updates both the method signature and docblock.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_282\n\nLANGUAGE: php\nCODE:\n```\n+use PhpCsFixer\\Tokenizer\\Token;\n use PhpCsFixer\\Tokenizer\\Tokens;\n\n class SomeClass\n {\n+    /**\n+     * @param Tokens<Token>\n+     */\n     public function run(Tokens $tokens)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Fixing Disallowed Empty with DisallowedEmptyRuleFixerRector\nDESCRIPTION: This rule fixes PHPStan reports for strict type rule 'PHPStan\\Rules\\DisallowedConstructs\\DisallowedEmptyRule'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_246\n\nLANGUAGE: php\nCODE:\n```\n final class SomeEmptyArray\n {\n     public function run(array $items)\n     {\n-        return empty($items);\n+        return $items === [];\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties with RenamePropertyRector\nDESCRIPTION: This rule replaces defined old properties by new ones. It can be configured to target specific properties.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_240\n\nLANGUAGE: php\nCODE:\n```\n-$someObject->someOldProperty;\n+$someObject->someNewProperty;\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Non-Empty Array Checks Before Foreach in PHP\nDESCRIPTION: This rule removes unnecessary checks for non-empty arrays before foreach loops since foreach will automatically handle empty arrays without iteration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         $values = [];\n-        if ($values !== []) {\n-            foreach ($values as $value) {\n-                echo $value;\n-            }\n+        foreach ($values as $value) {\n+            echo $value;\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding String Return Type Based on Scalar Returns in PHP\nDESCRIPTION: The StringReturnTypeFromStrictScalarReturnsRector adds a string return type to methods that return string literals. It analyzes all return statements to ensure they consistently return string values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_322\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n-    public function foo($condition)\n+    public function foo($condition): string\n     {\n         if ($condition) {\n             return 'yes';\n         }\n\n         return 'no';\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Using Boundaries Between Sub-Commands in Shell Process\nDESCRIPTION: Demonstrates a technique to discern the output of individual sub-commands by adding explicit boundaries between command outputs using echo.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('cat first && echo --- && cat second');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Using Intervals Class in PHP for Advanced Constraint Operations\nDESCRIPTION: Examples of utilizing the Intervals class for complex operations with version constraints, including subset checking, intersection testing, constraint optimization, and interval generation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/semver/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Semver\\Intervals;\n\n// Checks whether $candidate is a subset of $constraint\nIntervals::isSubsetOf(ConstraintInterface $candidate, ConstraintInterface $constraint);\n\n// Checks whether $a and $b have any intersection, equivalent to $a->matches($b)\nIntervals::haveIntersections(ConstraintInterface $a, ConstraintInterface $b);\n\n// Optimizes a complex multi constraint by merging all intervals down to the smallest\n// possible multi constraint. The drawbacks are this is not very fast, and the resulting\n// multi constraint will have no human readable prettyConstraint configured on it\nIntervals::compactConstraint(ConstraintInterface $constraint);\n\n// Creates an array of numeric intervals and branch constraints representing a given constraint\nIntervals::get(ConstraintInterface $constraint);\n\n// Clears the memoization cache when you are done processing constraints\nIntervals::clear()\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Class Methods in PHP\nDESCRIPTION: This rule removes empty class methods that are not required by parent classes or interfaces, reducing code clutter.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_106\n\nLANGUAGE: php\nCODE:\n```\n class OrphanClass\n {\n-    public function __construct()\n-    {\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Fixing list() Array Order Assignment (PHP 7.0)\nDESCRIPTION: Addresses changes in list() assignment order in PHP 7.0+ by using array_reverse() to maintain the expected behavior when assigning values to arrays.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_156\n\nLANGUAGE: php\nCODE:\n```\n-list($a[], $a[]) = [1, 2];\n+list($a[], $a[]) = array_reverse([1, 2]);\n```\n\n----------------------------------------\n\nTITLE: ThroughStream with Data Transformation\nDESCRIPTION: Shows how to use ThroughStream with a callback function to transform data (converting to NDJSON format).\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$through = new ThroughStream(function ($data) {\n    return json_encode($data) . PHP_EOL;\n});\n$through->on('data', $this->expectCallableOnceWith(\"[2, true]\\n\"));\n\n$through->write(array(2, true));\n```\n\n----------------------------------------\n\nTITLE: Loading System DNS Configuration in PHP\nDESCRIPTION: Demonstrates how to load the default system DNS configuration using the Config::loadSystemConfigBlocking() method introduced in version 0.4.13. This method supports parsing DNS config on various platforms.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$config = Config::loadSystemConfigBlocking();\n$server = $config->nameservers ? reset($config->nameservers) : '8.8.8.8';\n```\n\n----------------------------------------\n\nTITLE: Using Global Exception Handler with ReactPHP Loop\nDESCRIPTION: This example shows how to use a global exception handler with ReactPHP's Loop, stopping the loop when an exception occurs to prevent the timer from executing.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse React\\EventLoop\\Loop;\n\nLoop::addTimer(10.0, function () {\n    echo 'Never happens';\n});\n\nset_exception_handler(function (Throwable $e) {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n    Loop::stop();\n});\n\nthrow new RuntimeException('Demo');\n```\n\n----------------------------------------\n\nTITLE: Making define() Arguments Strings in PHP 7.2\nDESCRIPTION: Ensures the first argument to define() is a string literal. In PHP 7.2+, the constant name must be a string literal.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_180\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run(int $a)\n     {\n-         define(CONSTANT_2, 'value');\n+         define('CONSTANT_2', 'value');\n          define('CONSTANT', 'value');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Type Recasting in PHP\nDESCRIPTION: Eliminates unnecessary type recasting when the variable is already of the target type using the RecastingRemovalRector rule. This simplifies code and improves performance by removing superfluous operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n$string = '';\n-$string = (string) $string;\n+$string = $string;\n\n$array = [];\n-$array = (array) $array;\n+$array = $array;\n```\n\n----------------------------------------\n\nTITLE: Using ReactPHP Loop Static Methods for Timer Operations in PHP\nDESCRIPTION: Example of using the Loop class as a convenient global accessor for the event loop. It demonstrates creating a periodic timer and canceling it after a specific duration without explicitly managing the loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$timer = Loop::addPeriodicTimer(0.1, function () {\n    echo 'Tick' . PHP_EOL;\n});\n\nLoop::addTimer(1.0, function () use ($timer) {\n    Loop::cancelTimer($timer);\n    echo 'Done' . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceArgumentDefaultValueRector to Update Default Arguments\nDESCRIPTION: This rule replaces defined arguments in methods and their calls with new values. The example shows replacing a constant with a boolean false value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$someObject = new SomeClass;\n-$someObject->someMethod(SomeClass::OLD_CONSTANT);\n+$someObject->someMethod(false);\n```\n\n----------------------------------------\n\nTITLE: Replacing each() Assignment with key()/current() in PHP 7.2\nDESCRIPTION: Converts each() assignments outside of loops to use key() and current() functions. The each() function was deprecated in PHP 7.2.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_179\n\nLANGUAGE: diff\nCODE:\n```\n $array = ['b' => 1, 'a' => 2];\n\n-$eachedArray = each($array);\n+$eachedArray[1] = current($array);\n+$eachedArray['value'] = current($array);\n+$eachedArray[0] = key($array);\n+$eachedArray['key'] = key($array);\n+\n+next($array);\n```\n\n----------------------------------------\n\nTITLE: Replacing substring comparison with str_ends_with() in PHP 8.0 - Hardcoded Needle\nDESCRIPTION: Converts substring checks with hardcoded endings to use the new str_ends_with() function introduced in PHP 8.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_224\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $isMatch = substr($haystack, -9) === 'hardcoded;\n+        $isMatch = str_ends_with($haystack, 'hardcoded');\n\n-        $isNotMatch = substr($haystack, -9) !== 'hardcoded';\n+        $isNotMatch = !str_ends_with($haystack, 'hardcoded');\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding 'never' Return Type to Closures (PHP)\nDESCRIPTION: AddClosureNeverReturnTypeRector adds the 'never' return type to closures that always throw exceptions or terminate execution, indicating they never return normally.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_274\n\nLANGUAGE: php\nCODE:\n```\n-function () {\n+function (): never {\n    throw new InvalidException();\n}\n```\n\n----------------------------------------\n\nTITLE: Using futureTick() in PHP Event Loop\nDESCRIPTION: Demonstrates the use of futureTick() method to schedule callbacks for the next tick of the event loop. The example shows how multiple callbacks are executed in the order they are enqueued.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$loop->futureTick(function () {\n    echo 'b';\n});\n$loop->futureTick(function () {\n    echo 'c';\n});\necho 'a';\n```\n\n----------------------------------------\n\nTITLE: Escaping Dash in Regular Expressions in PHP 7.3\nDESCRIPTION: Adds backslash escaping for dash characters in certain regex patterns to maintain compatibility with PHP 7.3 changes in regular expression handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_189\n\nLANGUAGE: diff\nCODE:\n```\n-preg_match(\"#[\\w-()]#\", 'some text');\n+preg_match(\"#[\\w\\-()]#\", 'some text');\n```\n\n----------------------------------------\n\nTITLE: Resolving a Promise with a Value or Another Promise in PHP\nDESCRIPTION: Shows how to use the React\\Promise\\resolve() function to create a promise from a value or another promise. The resulting promise implements the PromiseInterface and can be consumed like any other promise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\resolve(42);\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Process Creation with Shell Wrapping on Unix\nDESCRIPTION: Demonstrates creating a simple process that will be wrapped in a shell on Unix systems. This example shows the default behavior for all commands on Unix.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('yes');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Converting Static Calls on Non-Static Methods to Instance Calls (PHP 7.0)\nDESCRIPTION: Changes static calls on non-static methods to instance calls with object instantiation, addressing PHP 7.0's stricter method calling conventions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_162\n\nLANGUAGE: php\nCODE:\n```\nclass Something\n{\n    public function doWork()\n    {\n    }\n}\n\nclass Another\n{\n    public function run()\n    {\n-        return Something::doWork();\n+        return (new Something)->doWork();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Foreach Variables to Match Method Return Types in PHP\nDESCRIPTION: The RenameForeachValueVariableToMatchMethodCallReturnTypeRector renames foreach loop variables to match the return type of method calls. This makes the code more intuitive by aligning variable names with their intended content.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         $array = [];\n-        foreach ($object->getMethods() as $property) {\n-            $array[] = $property;\n+        foreach ($object->getMethods() as $method) {\n+            $array[] = $method;\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Regular Expression Patterns in PHP\nDESCRIPTION: This rule simplifies regular expression patterns by using known character ranges, making the patterns more concise and efficient.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run($value)\n    {\n-        preg_match('#[a-zA-Z0-9+]#', $value);\n+        preg_match('#[\\w\\d+]#', $value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Method Calls to Function Calls (PHP)\nDESCRIPTION: MethodCallToFuncCallRector transforms method calls on objects to global function calls. This can be useful when refactoring to use simpler functional approaches.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_258\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function show()\n    {\n-        return $this->render('some_template');\n+        return view('some_template');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Strings with RenameStringRector\nDESCRIPTION: This rule changes string values. It can be configured to target specific strings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_242\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        return 'ROLE_PREVIOUS_ADMIN';\n+        return 'IS_IMPERSONATOR';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Splitting Logical AND Assignments with AndAssignsToSeparateLinesRector\nDESCRIPTION: This rule splits assignments using logical AND operator into separate lines, making the code more explicit and avoiding potential confusion with bitwise operators.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        $tokens = [];\n-        $token = 4 and $tokens[] = $token;\n+        $token = 4;\n+        $tokens[] = $token;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Quote Escaping in PHP Strings\nDESCRIPTION: Changes string quotes to minimize escape sequences by preferring quotes that aren't inside the string using the SymplifyQuoteEscapeRector rule. This makes string handling cleaner and more readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-         $name = \"\\\" Tom\";\n-         $name = '\\' Sara';\n+         $name = '\" Tom';\n+         $name = \"' Sara\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Return Statements at Function End in PHP\nDESCRIPTION: This rule removes unnecessary return statements at the end of functions since PHP functions automatically return when they reach the end of the function.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         $shallWeDoThis = true;\n\n         if ($shallWeDoThis) {\n             return;\n         }\n-\n-        return;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Events in PHP\nDESCRIPTION: Examples of handling various stream events including drain, pipe, and error events.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('drain', function () use ($stream) {\n    echo 'Stream is now ready to accept more data';\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('pipe', function (ReadableStreamInterface $source) use ($stream) {\n    echo 'Now receiving piped data';\n\n    // explicitly close target if source emits an error\n    $source->on('error', function () use ($stream) {\n        $stream->close();\n    });\n});\n\n$source->pipe($stream);\n```\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('error', function (Exception $e) {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Error Event in PHP Stream\nDESCRIPTION: This snippet illustrates how to handle the 'error' event on a stream. The event is emitted when a fatal error occurs, and the callback function receives an Exception object as an argument.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$server->on('error', function (Exception $e) {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting String to Array for Array Operations (PHP 7.1)\nDESCRIPTION: Changes string initialization to array initialization when array operations are performed on the variable, as PHP 7.1+ doesn't allow array operations on strings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_168\n\nLANGUAGE: php\nCODE:\n```\n-$string = '';\n+$string = [];\n $string[] = 1;\n```\n\n----------------------------------------\n\nTITLE: Basic DNS Resolution with ReactPHP\nDESCRIPTION: Creates a DNS resolver using the system configuration or fallback to Google DNS, then resolves a domain name to an IP address asynchronously.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config = React\\Dns\\Config\\Config::loadSystemConfigBlocking();\nif (!$config->nameservers) {\n    $config->nameservers[] = '8.8.8.8';\n}\n\n$factory = new React\\Dns\\Resolver\\Factory();\n$dns = $factory->create($config);\n\n$dns->resolve('igor.io')->then(function ($ip) {\n    echo \"Host: $ip\\n\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeoutExecutor with TcpTransportExecutor in PHP\nDESCRIPTION: Demonstrates how to combine TcpTransportExecutor with TimeoutExecutor to implement a timeout mechanism for DNS queries.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$executor = new TimeoutExecutor(\n    new TcpTransportExecutor($nameserver),\n    3.0\n);\n```\n\n----------------------------------------\n\nTITLE: Converting while(each()) with Single Key to foreach() in PHP 7.2\nDESCRIPTION: Replaces the deprecated while(list($key) = each()) pattern with foreach loops using array_keys() when only the key is needed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_184\n\nLANGUAGE: diff\nCODE:\n```\n-while (list($key) = each($callbacks)) {\n+foreach (array_keys($callbacks) as $key) {\n     // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Converting static::class to self::class in Final Classes (PHP 5.5)\nDESCRIPTION: Changes static::class to self::class on final classes for better performance and clarity. This rule targets final classes where self and static have the same behavior.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_145\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n   public function callOnMe()\n   {\n-       var_dump(static::class);\n+       var_dump(self::class);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class Keyword for Class Name Resolution in PHP\nDESCRIPTION: Replaces hardcoded class name strings with the ::class keyword for class name resolution using the UseClassKeywordForClassNameResolutionRector rule. This improves code maintainability by making class references type-safe.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n-$value = 'App\\SomeClass::someMethod()';\n+$value = \\App\\SomeClass::class . '::someMethod()';\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in PHP\nDESCRIPTION: Demonstrates how to remove a previously attached event listener from the 'user.created' event.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/evenement/evenement/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$emitter->removeListener('user.created', function (User $user) use ($logger) {\n    $logger->log(sprintf(\"User '%s' was created.\", $user->getLogin()));\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative String Interpolation Conversion in PHP\nDESCRIPTION: Another approach to transforming embedded variables in strings, consistently using sprintf() for all string formatting operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n-echo \"Unsupported format {$format} - use another\";\n+echo sprintf('Unsupported format %s - use another', $format);\n\n-echo \"Try {$allowed}\";\n+echo sprintf('Try %s', $allowed);\n```\n\n----------------------------------------\n\nTITLE: Changing Constant Visibility in PHP\nDESCRIPTION: The ChangeConstantVisibilityRector changes the visibility of constants to match their parent class declarations. It ensures that child class constants maintain the same visibility as in the parent class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_330\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class FrameworkClass\n {\n     protected const SOME_CONSTANT = 1;\n }\n\n class MyClass extends FrameworkClass\n {\n-    public const SOME_CONSTANT = 1;\n+    protected const SOME_CONSTANT = 1;\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Renaming Variables to Match Object Type Names in PHP\nDESCRIPTION: The RenameVariableToMatchNewTypeRector renames variables to match the type of newly instantiated objects. This improves code readability by making variable names reflect the objects they contain.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_132\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run()\n     {\n-        $search = new DreamSearch();\n-        $search->advance();\n+        $dreamSearch = new DreamSearch();\n+        $dreamSearch->advance();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties to Match Type Names in PHP\nDESCRIPTION: The RenamePropertyToMatchTypeRector renames class properties and method parameters to match their type. This creates a more intuitive codebase by aligning property names with their types.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_130\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     /**\n      * @var EntityManager\n      */\n-    private $eventManager;\n+    private $entityManager;\n\n-    public function __construct(EntityManager $eventManager)\n+    public function __construct(EntityManager $entityManager)\n     {\n-        $this->eventManager = $eventManager;\n+        $this->entityManager = $entityManager;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Adapter for DNS Resolver\nDESCRIPTION: Shows how to configure a DNS resolver with a custom cache implementation that implements the CacheInterface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cache = new React\\Cache\\ArrayCache();\n$factory = new React\\Dns\\Resolver\\Factory();\n$dns = $factory->createCached('8.8.8.8', null, $cache);\n```\n\n----------------------------------------\n\nTITLE: Handling Process Exit Events in PHP with ReactPHP\nDESCRIPTION: Example showing how to listen for the 'exit' event on a ReactPHP Process instance. The event listener receives the exit code and termination signal as arguments and outputs appropriate messages based on how the process terminated.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('sleep 10');\n$process->start();\n\n$process->on('exit', function ($code, $term) {\n    if ($term === null) {\n        echo 'exit with code ' . $code . PHP_EOL;\n    } else {\n        echo 'terminated with signal ' . $term . PHP_EOL;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Closure with Variables in PHP Event Loop Timer\nDESCRIPTION: Shows how to use a closure with variables in an event loop timer. The example defines a function that adds a timer to the loop, using a closure to access an external variable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction hello($name, LoopInterface $loop)\n{\n    $loop->addTimer(1.0, function () use ($name) {\n        echo \"hello $name\\n\";\n    });\n}\n\nhello('Tester', $loop);\n```\n\n----------------------------------------\n\nTITLE: Customizing YAML Dump Behavior with Bit Fields\nDESCRIPTION: Shows how to combine multiple dumper options using bit fields to customize how objects and other complex data structures are serialized to YAML.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nYaml::dump(['foo' => new A(), 'bar' => 1], 0, 0, Yaml::DUMP_EXCEPTION_ON_INVALID_TYPE | Yaml::DUMP_OBJECT);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PREG_UNMATCHED_AS_NULL Behavior with Pattern Matching\nDESCRIPTION: Example showing the difference in behavior when using PREG_UNMATCHED_AS_NULL flag, which makes pattern matching results more predictable by consistently representing unmatched groups as null.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npreg_match('/(a)(b)*(c)(d)*/', 'ac', $matches, $flags);\n```\n\n----------------------------------------\n\nTITLE: DuplexResourceStream TCP Connection Example\nDESCRIPTION: Shows how to create and use a DuplexResourceStream with a TCP socket connection for bidirectional communication.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$conn = stream_socket_client('tcp://google.com:80');\n$stream = new DuplexResourceStream($conn);\n$stream->write('hello!');\n$stream->end();\n```\n\n----------------------------------------\n\nTITLE: Standardizing implode() Function Parameter Order in PHP\nDESCRIPTION: Ensures consistent parameter order in implode() function calls by always using the 'glue' parameter first, followed by the array parameter.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run(array $items)\n     {\n-        $itemsAsStrings = implode($items);\n-        $itemsAsStrings = implode($items, '|');\n+        $itemsAsStrings = implode('', $items);\n+        $itemsAsStrings = implode('|', $items);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting $this Calls on Static Methods to Static Calls (PHP 7.0)\nDESCRIPTION: Changes $this->method() calls within static methods to static::method() to avoid deprecation warnings and future errors in PHP 7.0+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_166\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public static function run()\n    {\n-        $this->eat();\n+        static::eat();\n    }\n\n    public static function eat()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RemoveMethodCallParamRector to Remove Unnecessary Parameters\nDESCRIPTION: This rule removes specific parameters from method calls. The example shows removing the second parameter from a process() method call.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function run(Caller $caller)\n    {\n-        $caller->process(1, 2);\n+        $caller->process(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Method Visibility in PHP\nDESCRIPTION: The ChangeMethodVisibilityRector changes the visibility of methods to match their parent class declarations. It ensures that overridden methods maintain the same visibility as in the parent class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_331\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class FrameworkClass\n {\n     protected function someMethod()\n     {\n     }\n }\n\n class MyClass extends FrameworkClass\n {\n-    public function someMethod()\n+    protected function someMethod()\n     {\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Null Comparisons to Null Coalesce with ConsecutiveNullCompareReturnsToNullCoalesceQueueRector\nDESCRIPTION: Transforms multiple consecutive null comparisons and returns into a single null coalesce expression for cleaner code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        return $this->orderItem ?? $this->orderItemUnit;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Static Calls to Service Method Calls (PHP)\nDESCRIPTION: StaticCallToMethodCallRector replaces static calls with instance method calls on injected services. This improves testability and follows dependency injection principles.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_269\n\nLANGUAGE: php\nCODE:\n```\n-use Nette\\Utils\\FileSystem;\n+use App\\Custom\\SmartFileSystem;\n\nclass SomeClass\n{\n+    /**\n+     * @var SmartFileSystem\n+     */\n+    private $smartFileSystem;\n+\n+    public function __construct(SmartFileSystem $smartFileSystem)\n+    {\n+        $this->smartFileSystem = $smartFileSystem;\n+    }\n+\n     public function run()\n     {\n-        return FileSystem::write('file', 'content');\n+        return $this->smartFileSystem->dumpFile('file', 'content');\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Rector with Detailed Output\nDESCRIPTION: Command to run Rector with debug option that prints nested exceptions for troubleshooting.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector src/Controller --dry-run --debug\n```\n\n----------------------------------------\n\nTITLE: Executing DNS Query Using TcpTransportExecutor in PHP\nDESCRIPTION: Example of using TcpTransportExecutor to perform an IPv6 DNS lookup for a domain using TCP transport. The executor sends a DNS query to a specified nameserver and handles the response asynchronously.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$executor = new TcpTransportExecutor('8.8.8.8:53');\n\n$executor->query(\n    new Query($name, Message::TYPE_AAAA, Message::CLASS_IN)\n)->then(function (Message $message) {\n    foreach ($message->answers as $answer) {\n        echo 'IPv6: ' . $answer->data . PHP_EOL;\n    }\n}, 'printf');\n```\n\n----------------------------------------\n\nTITLE: Using Shell Command Chains with Process in ReactPHP\nDESCRIPTION: Shows how to use shell command chains (&&, ||) with the Process class to execute multiple sub-commands and handle their combined output.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('echo run && demo || echo failed');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Initializing WritableResourceStream for STDOUT\nDESCRIPTION: Demonstrates how to create and use a WritableResourceStream for writing to STDOUT. Shows basic write and end operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$stream = new WritableResourceStream(STDOUT);\n$stream->write('hello!');\n$stream->end();\n```\n\n----------------------------------------\n\nTITLE: Ending a ReactPHP Stream with buffered writes (PHP)\nDESCRIPTION: Example demonstrating how to write data to a stream and then end it properly. The end() method signals that no more data will be written and allows any buffered data to be flushed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$stream->write('hello');\n$stream->write('world');\n$stream->end();\n```\n\n----------------------------------------\n\nTITLE: Initializing Parser Classes with ParserConfig (PHP)\nDESCRIPTION: Example of initializing parser classes using the new ParserConfig object in phpstan/phpdoc-parser 2.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/phpstan/phpdoc-parser/UPGRADING.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\n\n$config = new ParserConfig(usedAttributes: ['lines' => true, 'indexes' => true]);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Aliases in Use Statements in PHP\nDESCRIPTION: Removes unnecessary aliases in use statements when the alias matches the imported class name using the RemoveUselessAliasInUseStatementRector rule. This simplifies code by eliminating redundant alias declarations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n-use App\\Bar as Bar;\n+use App\\Bar;\n```\n\n----------------------------------------\n\nTITLE: Removing String Assertions in PHP 7.2\nDESCRIPTION: Converts string assertions to direct assertions in PHP 7.2+. String evaluations in assert() are deprecated and should be converted to direct code execution.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_181\n\nLANGUAGE: diff\nCODE:\n```\n function nakedAssert()\n {\n-    assert('true === true');\n-    assert(\"true === true\");\n+    assert(true === true);\n+    assert(true === true);\n }\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Error Handling with Promises in PHP\nDESCRIPTION: Demonstrates how to handle errors in asynchronous code using promise chains with catch() and finally() methods, equivalent to synchronous try/catch/finally.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn doSomething()\n    ->catch('handleError')\n    ->finally('cleanup');\n```\n\n----------------------------------------\n\nTITLE: Splitting Grouped Class Constants in PHP\nDESCRIPTION: Separates grouped class constants into individual declarations using the SplitGroupedClassConstantsRector rule. This improves readability and makes it easier to add comments or modify individual constants.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n-    const HI = true, HELLO = 'true';\n+    const HI = true;\n+    const HELLO = 'true';\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Trivial Mathematical Operations in PHP\nDESCRIPTION: This rule removes mathematical operations that don't affect the value, such as multiplication by 1 or addition of 0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $value = 5 * 1;\n-        $value = 5 + 0;\n+        $value = 5;\n+        $value = 5;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in PHP\nDESCRIPTION: Shows how to emit a 'user.created' event with a user object as parameter, which triggers all registered listeners for this event.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/evenement/evenement/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$emitter->emit('user.created', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Item with get()\nDESCRIPTION: Example of retrieving a cached item using the get() method which returns a Promise that resolves with the cached value or default value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache\n    ->get('foo')\n    ->then('var_dump');\n```\n\n----------------------------------------\n\nTITLE: Getting a Promise from a Deferred in PHP\nDESCRIPTION: Retrieves the promise of a deferred object, which can be handed out to others while keeping the authority to modify its state.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$promise = $deferred->promise();\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Process with Command Line in ReactPHP\nDESCRIPTION: Shows how to create a Process instance with a simple command line string. This basic example demonstrates starting a process to echo text.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('echo test');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Initializing ArrayCache\nDESCRIPTION: Example of creating an ArrayCache instance and storing a value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$cache = new ArrayCache();\n\n$cache->set('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pipes for Process I/O in PHP\nDESCRIPTION: Advanced example showing how to specify custom file descriptors when creating a Process instance. This includes standard I/O pipes, file references, and socket resources, demonstrating the flexibility of pipe configuration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$fds = array(\n    // standard I/O pipes for stdin/stdout/stderr\n    0 => array('pipe', 'r'),\n    1 => array('pipe', 'w'),\n    2 => array('pipe', 'w'),\n\n    // example FDs for files or open resources\n    4 => array('file', '/dev/null', 'r'),\n    6 => fopen('log.txt','a'),\n    8 => STDERR,\n\n    // example FDs for sockets\n    10 => fsockopen('localhost', 8080),\n    12 => stream_socket_server('tcp://0.0.0.0:4711')\n);\n\n$process = new Process($cmd, null, null, $fds);\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Converting Time Function to Carbon with TimeFuncCallToCarbonRector\nDESCRIPTION: This rule converts PHP's time() function calls to Carbon's timestamp property. It replaces time() with Carbon::now()->timestamp.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $time = time();\n+        $time = \\Carbon\\Carbon::now()->timestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary False Expressions to If Statements in PHP\nDESCRIPTION: Transforms ternary expressions with false as the 'else' part into explicit if statements for improved readability and cleaner code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run($value, $someMethod)\n     {\n-        $value ? $someMethod->call($value) : false;\n+        if ($value) {\n+            $someMethod->call($value);\n+        }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using UnifiedDiffOutputBuilder for custom diff output\nDESCRIPTION: Shows how to use the UnifiedDiffOutputBuilder to customize the diff output, including a custom header and line number options.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\UnifiedDiffOutputBuilder;\n\n$builder = new UnifiedDiffOutputBuilder(\n    \"--- Original\\n+++ New\\n\", // custom header\n    false                      // do not add line numbers to the diff \n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Resolution Forwarding in PHP with React Promise\nDESCRIPTION: This snippet shows how resolved promises forward resolution values to the next promise, creating a promise 'pipeline'. Each call to then() returns a new promise that resolves with the return value of the previous handler.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        // $x will be the value passed to $deferred->resolve() below\n        // and returns a *new promise* for $x + 1\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 2\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 3\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 4\n        // This handler receives the return value of the\n        // previous handler.\n        echo 'Resolve ' . $x;\n    });\n\n$deferred->resolve(1); // Prints \"Resolve 4\"\n```\n\n----------------------------------------\n\nTITLE: Standardizing Not Equal Operators with CommonNotEqualRector\nDESCRIPTION: This rule replaces the less common not equal operator (<>) with the more standard not equal operator (!=), improving code readability while maintaining the same behavior.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function run($one, $two)\n    {\n-        return $one <> $two;\n+        return $one != $two;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Annotations with RenameAnnotationRector\nDESCRIPTION: This rule renames specified annotations above properties and methods to new values. It can be configured to target specific annotations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_232\n\nLANGUAGE: php\nCODE:\n```\n use PHPUnit\\Framework\\TestCase;\n\n final class SomeTest extends TestCase\n {\n     /**\n-     * @test\n+     * @scenario\n      */\n     public function someMethod()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Function Calls to Object Instantiation (PHP)\nDESCRIPTION: FuncCallToNewRector replaces function calls with object instantiation using the new operator. It's useful when migrating from functional to object-oriented code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_255\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $array = collection([]);\n+        $array = new \\Collection([]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary sprintf() Wrapper in PHP\nDESCRIPTION: This rule removes the sprintf() function when it's used with a single string argument, as it's redundant in such cases.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        $welcome = 'hello';\n-        $value = sprintf('%s', $welcome);\n+        $value = $welcome;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Deferred Object in PHP\nDESCRIPTION: Creates a Deferred object that represents an operation whose resolution is pending. The Deferred has separate promise and resolver parts.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$promise = $deferred->promise();\n\n$deferred->resolve(mixed $value);\n$deferred->reject(\\Throwable $reason);\n```\n\n----------------------------------------\n\nTITLE: Handling Windows Path Names with Spaces in Process Commands\nDESCRIPTION: Demonstrates proper handling of Windows paths containing spaces in process commands by using escapeshellarg() to properly escape and quote arguments.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$bin = 'C:\\\\Program files (x86)\\\\PHP\\\\php.exe';\n$file = 'C:\\\\Users\\\\me\\\\Desktop\\\\Application\\\\main.php';\n\n$process = new Process(escapeshellarg($bin) . ' ' . escapeshellarg($file));\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Item with set()\nDESCRIPTION: Example of storing an item in the cache with a 60 second TTL using the set() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cache->set('foo', 'bar', 60);\n```\n\n----------------------------------------\n\nTITLE: Using CompositeStream with stdin and stdout in PHP\nDESCRIPTION: This snippet demonstrates how to create a CompositeStream using ReadableResourceStream for stdin and WritableResourceStream for stdout. It sets up an event listener to echo back user input.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$stdin = new ReadableResourceStream(STDIN);\n$stdout = new WritableResourceStream(STDOUT);\n\n$stdio = new CompositeStream($stdin, $stdout);\n\n$stdio->on('data', function ($chunk) use ($stdio) {\n    $stdio->write('You said: ' . $chunk);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Always-True If Conditions in PHP\nDESCRIPTION: Eliminates if statements with conditions that are always true, directly executing the if block using the RemoveAlwaysTrueIfConditionRector rule. This simplifies code flow and removes unnecessary condition evaluations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function go()\n    {\n-        if (1 === 1) {\n-            return 'yes';\n-        }\n+        return 'yes';\n\n        return 'no';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Classes with RenameClassRector\nDESCRIPTION: This rule replaces defined classes with new ones. It updates all references to the old class name.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_235\n\nLANGUAGE: php\nCODE:\n```\n namespace App;\n\n-use SomeOldClass;\n+use SomeNewClass;\n\n-function someFunction(SomeOldClass $someOldClass): SomeOldClass\n+function someFunction(SomeNewClass $someOldClass): SomeNewClass\n {\n-    if ($someOldClass instanceof SomeOldClass) {\n-        return new SomeOldClass;\n+    if ($someOldClass instanceof SomeNewClass) {\n+        return new SomeNewClass;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: LRU Cache Implementation\nDESCRIPTION: Example of using ArrayCache with a size limit to implement LRU (Least Recently Used) caching behavior.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$cache = new ArrayCache(2);\n\n$cache->set('foo', '1');\n$cache->set('bar', '2');\n$cache->set('baz', '3');\n```\n\n----------------------------------------\n\nTITLE: Converting var Property Modifier to public in PHP 5.2+\nDESCRIPTION: The VarToPublicPropertyRector changes property modifiers from 'var' to 'public' for PHP 5.2+ compatibility. This updates legacy code to use the explicit visibility modifier.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_134\n\nLANGUAGE: php\nCODE:\n```\n final class SomeController\n {\n-    var $name = 'Tom';\n+    public $name = 'Tom';\n }\n```\n\n----------------------------------------\n\nTITLE: Removing (unset) Cast in PHP 7.2\nDESCRIPTION: Removes the deprecated (unset) cast operator in PHP 7.2+. Depending on usage context, it's replaced with either null assignment or the unset() function.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_182\n\nLANGUAGE: diff\nCODE:\n```\n-$different = (unset) $value;\n+$different = null;\n\n-$value = (unset) $value;\n+unset($value);\n```\n\n----------------------------------------\n\nTITLE: Adding static modifier to __set_state() methods in PHP 8.0\nDESCRIPTION: Adds static visibility to __set_state() methods to conform with PHP 8.0 requirements where this magic method must be static.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_221\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    public function __set_state($properties) {\n+    public static function __set_state($properties) {\n\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Simplifying Single Element in_array() Checks in PHP\nDESCRIPTION: This rule replaces in_array() calls with a single element to a direct comparison, which is more efficient and readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        if (in_array(strtolower($type), ['$this'], true)) {\n+        if (strtolower($type) === '$this') {\n            return strtolower($type);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Rector with Xdebug Integration\nDESCRIPTION: Command to run Rector with Xdebug support for interactive debugging sessions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector src/Controller --dry-run --xdebug\n```\n\n----------------------------------------\n\nTITLE: Avoiding Shell Wrapping with exec on Unix\nDESCRIPTION: Shows how to avoid the shell wrapper process on Unix by prepending 'exec' to the command. This allows signals to directly target the actual command rather than the shell.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('exec yes');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Fixing Rector Coding Standards\nDESCRIPTION: Command to automatically fix coding standard issues in the codebase.\nSOURCE: https://github.com/rectorphp/rector/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer fix-cs\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Cache Items\nDESCRIPTION: Example of storing multiple key-value pairs in the cache with a TTL using setMultiple() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cache->setMultiple(array('foo' => 1, 'bar' => 2), 60);\n```\n\n----------------------------------------\n\nTITLE: Adding Read Stream Event Listener with ReactPHP\nDESCRIPTION: Example of using the addReadStream() method to register a callback function that will be executed when a stream is ready to read. The callback has access to both the stream and a variable from outer scope.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$loop->addReadStream($stream, function ($stream) use ($name) {\n    echo $name . ' said: ' . fread($stream);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting __CLASS__ to self::class in PHP 5.5+\nDESCRIPTION: The ClassConstantToSelfClassRector changes the __CLASS__ magic constant to self::class in PHP 5.5+. This utilizes the newer class name resolution feature which provides better IDE support and type safety.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_141\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n    public function callOnMe()\n    {\n-       var_dump(__CLASS__);\n+       var_dump(self::class);\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Renaming Static Methods with RenameStaticMethodRector\nDESCRIPTION: This rule turns static method names to new ones. It can be configured to target specific static methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_241\n\nLANGUAGE: php\nCODE:\n```\n-SomeClass::oldStaticMethod();\n+AnotherExampleClass::newStaticMethod();\n```\n\n----------------------------------------\n\nTITLE: Creating an Async HTTP Server with ReactPHP Loop\nDESCRIPTION: A basic asynchronous HTTP server implementation using ReactPHP's event loop. It sets up a TCP server on port 8080, handles incoming connections asynchronously, and includes a periodic timer to monitor memory usage.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse React\\EventLoop\\Loop;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$server = stream_socket_server('tcp://127.0.0.1:8080');\nstream_set_blocking($server, false);\n\nLoop::addReadStream($server, function ($server) {\n    $conn = stream_socket_accept($server);\n    $data = \"HTTP/1.1 200 OK\\r\\nContent-Length: 3\\r\\n\\r\\nHi\\n\";\n    Loop::addWriteStream($conn, function ($conn) use (&$data) {\n        $written = fwrite($conn, $data);\n        if ($written === strlen($data)) {\n            fclose($conn);\n            Loop::removeWriteStream($conn);\n        } else {\n            $data = substr($data, $written);\n        }\n    });\n});\n\nLoop::addPeriodicTimer(5, function () {\n    $memory = memory_get_usage() / 1024;\n    $formatted = number_format($memory, 3).'K';\n    echo \"Current memory usage: {$formatted}\\n\";\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing in_array() Calls in PHP\nDESCRIPTION: This rule removes unnecessary array_values() calls inside in_array() functions, as in_array() already works with array values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n-in_array(\"key\", array_values($array), true);\n+in_array(\"key\", $array, true);\n```\n\n----------------------------------------\n\nTITLE: Signal Handling in PHP Event Loop\nDESCRIPTION: Demonstrates how to add a signal handler for CTRL-C (SIGINT) using the new LoopInterface methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$loop->addSignal(SIGINT, function () {\n    echo 'CTRL-C';\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Property from JMS Serializer Attribute in PHP\nDESCRIPTION: The TypedPropertyFromJMSSerializerAttributeTypeRector adds type declarations to properties based on JMS Serializer Type attributes. It extracts the type information from the attribute and converts it to a PHP type declaration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_326\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n final class SomeClass\n {\n     #[\\JMS\\Serializer\\Annotation\\Type('string')]\n-    private $name;\n+    private ?string $name = null;\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Rector for Symfony via Composer\nDESCRIPTION: Command to install rector/rector package as a development dependency.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-symfony/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require rector/rector --dev\n```\n\n----------------------------------------\n\nTITLE: Updating call_user_method to call_user_func (PHP 7.0)\nDESCRIPTION: Changes deprecated call_user_method()/call_user_method_array() functions to call_user_func()/call_user_func_array() for PHP 7.0 compatibility.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_149\n\nLANGUAGE: php\nCODE:\n```\n-call_user_method($method, $obj, \"arg1\", \"arg2\");\n+call_user_func(array(&$obj, \"method\"), \"arg1\", \"arg2\");\n```\n\n----------------------------------------\n\nTITLE: Shorthand for writing final data and ending a ReactPHP Stream (PHP)\nDESCRIPTION: Example showing how to use the end() method with data parameter as a shorthand for writing final data and then ending the stream. Both approaches shown are equivalent.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// shorter version\n$stream->end('bye');\n\n// same as longer version\n$stream->write('bye');\n$stream->end();\n```\n\n----------------------------------------\n\nTITLE: Using exec Prefix to Simplify Process Termination\nDESCRIPTION: Example showing how to simplify process termination by using the 'exec' prefix in the command, which avoids the wrapping shell and its inherited process pipes, making termination more straightforward.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('exec sleep 10');\n$process->start();\n\nLoop::addTimer(2.0, function () use ($process) {\n    $process->terminate();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicated Cases in Switch Statements in PHP\nDESCRIPTION: This rule removes duplicated case statements in switch blocks that have identical results, reducing code redundancy.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n         switch ($name) {\n              case 'clearHeader':\n                  return $this->modifyHeader($node, 'remove');\n              case 'clearAllHeaders':\n-                 return $this->modifyHeader($node, 'replace');\n              case 'clearRawHeaders':\n                  return $this->modifyHeader($node, 'replace');\n              case '...':\n                  return 5;\n         }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a ThroughStream with Data Transformation in PHP\nDESCRIPTION: Demonstrates how to create a ThroughStream with a callback function for data transformation. The example shows converting data to JSON and appending a newline character.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$through = new ThroughStream(function ($data) {\n    return json_encode($data) . PHP_EOL;\n});\n$through->on('data', $this->expectCallableOnceWith(\"[2, true]\\n\"));\n\n$through->write(array(2, true));\n```\n\n----------------------------------------\n\nTITLE: Using the then() Method on Promises in PHP\nDESCRIPTION: Transforms a promise's value by applying functions to the promise's fulfillment or rejection value. Returns a new promise for the transformed result.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$transformedPromise = $promise->then(callable $onFulfilled = null, callable $onRejected = null);\n```\n\n----------------------------------------\n\nTITLE: Resolving All DNS Records of Specific Types\nDESCRIPTION: Demonstrates how to resolve all record values for a domain with specific record types like A (IPv4) and AAAA (IPv6).\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$resolver->resolveAll('reactphp.org', Message::TYPE_A)->then(function ($ips) {\n    echo 'IPv4 addresses for reactphp.org ' . implode(', ', $ips) . PHP_EOL;\n});\n\n$resolver->resolveAll('reactphp.org', Message::TYPE_AAAA)->then(function ($ips) {\n    echo 'IPv6 addresses for reactphp.org ' . implode(', ', $ips) . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Signal Handler in PHP Event Loop\nDESCRIPTION: Shows how to add a signal handler to the event loop using addSignal(). The example demonstrates handling a user interrupt signal (SIGINT).\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$loop->addSignal(SIGINT, function (int $signal) {\n    echo 'Caught user interrupt signal' . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime Instantiation to Carbon with DateTimeInstanceToCarbonRector\nDESCRIPTION: This rule converts new DateTime() instances to equivalent Carbon static methods. The example shows converting 'today' to Carbon::today().\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n-$date = new \\DateTime('today');\n+$date = \\Carbon\\Carbon::today();\n```\n\n----------------------------------------\n\nTITLE: Basic Connection to Local Host in PHP\nDESCRIPTION: Shows how to connect to a localhost server using the Connector class, which now supports automatic resolution of localhost across all platforms via the updated DNS dependency.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$connector = new Connector($loop);\n$connector->connect('localhost:8080')->then(function ($connection) {\n    // …\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Property from Test Setup Method in PHP\nDESCRIPTION: The TypedPropertyFromStrictSetUpRector adds type declarations to properties in test cases based on assignments in the setUp() method. It determines property types from the values assigned during test setup.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_328\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n use PHPUnit\\Framework\\TestCase;\n\n final class SomeClass extends TestCase\n {\n-    private $value;\n+    private int $value;\n\n     public function setUp()\n     {\n         $this->value = 1000;\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Converting (real) type cast to (float) in PHP 7.4\nDESCRIPTION: Changes deprecated (real) type cast to (float) to comply with PHP 7.4 which removed the (real) type cast.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_207\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $number = (real) 5;\n+        $number = (float) 5;\n         $number = (float) 5;\n         $number = (double) 5;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Stopping the Event Loop in PHP\nDESCRIPTION: Shows how to explicitly stop a running event loop after a specified time interval using a timer. This is considered advanced usage and should be used with caution.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$loop->addTimer(3.0, function () use ($loop) {\n    $loop->stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Composer/PCRE's Regex Class with Result Objects\nDESCRIPTION: Examples of using the Regex class which provides a more verbose API returning result objects instead of using by-reference parameters.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Regex;\n\n// this is useful when you are just interested in knowing if something matched\n// as it returns a bool instead of int(1/0) for match\n$bool = Regex::isMatch('{fo+}', $string);\n\n$result = Regex::match('{fo+}', $string);\nif ($result->matched) { something($result->matches); }\n\n$result = Regex::matchWithOffsets('{fo+}', $string);\nif ($result->matched) { something($result->matches); }\n\n$result = Regex::matchAll('{fo+}', $string);\nif ($result->matched && $result->count > 3) { something($result->matches); }\n\n$newString = Regex::replace('{fo+}', 'bar', $string)->result;\n$newString = Regex::replaceCallback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string)->result;\n$newString = Regex::replaceCallbackArray(['{fo+}' => fn ($match) => strtoupper($match[0])], $string)->result;\n```\n\n----------------------------------------\n\nTITLE: Running React DNS Test Suite\nDESCRIPTION: Commands for installing dependencies and running the test suite, including options for excluding internet-dependent tests.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit --exclude-group internet\n```\n\n----------------------------------------\n\nTITLE: Reducing Always-False Conditions in PHP If Statements\nDESCRIPTION: Removes conditions that are always false in OR conditions using the ReduceAlwaysFalseIfOrRector rule. This simplifies conditional logic by eliminating checks that can never affect the outcome.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run(int $number)\n    {\n-        if (! is_int($number) || $number > 50) {\n+        if ($number > 50) {\n            return 'yes';\n        }\n\n        return 'no';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with catch() Method in PHP Promises\nDESCRIPTION: Demonstrates how to use type hints with catch() to handle only specific types of errors, allowing other types of errors to propagate automatically.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$promise\n    ->catch(function (\\RuntimeException $reason) {\n        // Only catch \\RuntimeException instances\n        // All other types of errors will propagate automatically\n    })\n    ->catch(function (\\Throwable $reason) {\n        // Catch other errors\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Method Visibility Same as Parent Class in PHP\nDESCRIPTION: Makes a method's visibility match its parent class method visibility using the MakeInheritedMethodVisibilitySameAsParentRector rule. This rule ensures consistent method access modifiers throughout the inheritance chain.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nclass ChildClass extends ParentClass\n{\n-    public function run()\n+    protected function run()\n    {\n    }\n}\n\nclass ParentClass\n{\n    protected function run()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Data Event in PHP Stream\nDESCRIPTION: This snippet demonstrates how to handle the 'data' event on a readable stream. The event is emitted whenever data is read from the stream, and the callback function receives the data as an argument.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('data', function ($data) {\n    echo $data;\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Process Stream Events in ReactPHP\nDESCRIPTION: Demonstrates how to work with the standard I/O streams of a child process. Shows handling of data, end, error, and close events for stdout, as well as writing to stdin.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process($command);\n$process->start();\n\n$process->stdout->on('data', function ($chunk) {\n    echo $chunk;\n});\n\n$process->stdout->on('end', function () {\n    echo 'ended';\n});\n\n$process->stdout->on('error', function (Exception $e) {\n    echo 'error: ' . $e->getMessage();\n});\n\n$process->stdout->on('close', function () {\n    echo 'closed';\n});\n\n$process->stdin->write($data);\n$process->stdin->end($data = null);\n// …\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Promise in PHP\nDESCRIPTION: The cancel() method notifies the creator of the promise that there is no further interest in the results of the operation. Has no effect on already settled promises.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$promise->cancel();\n```\n\n----------------------------------------\n\nTITLE: Wrapping Return Values in Arrays (PHP)\nDESCRIPTION: WrapReturnRector modifies method return values by wrapping them in arrays or other data structures. This helps standardize return types or prepare for API changes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_272\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function getItem()\n    {\n-        return 1;\n+        return [1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Attributes with RenameAttributeRector\nDESCRIPTION: This rule renames attribute class names. It can be configured to target specific attributes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_233\n\nLANGUAGE: php\nCODE:\n```\n-#[SimpleRoute()]\n+#[BasicRoute()]\n class SomeClass\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Splitting Grouped Properties in PHP\nDESCRIPTION: Separates grouped properties into individual declarations with their own docblocks using the SplitGroupedPropertiesRector rule. This improves code organization and documentation clarity.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    /**\n     * @var string\n     */\n-    public $isIt, $isIsThough;\n+    public $isIt;\n+\n+    /**\n+     * @var string\n+     */\n+    public $isIsThough;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Event Loop Instance in ReactPHP\nDESCRIPTION: This example demonstrates how to retrieve the current event loop instance using Loop::get() and verifies that it returns the same instance throughout the application lifecycle.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse React\\EventLoop\\Loop;\nuse React\\EventLoop\\LoopInterface;\n\n$loop = Loop::get();\n\nassert($loop instanceof LoopInterface);\nassert($loop === Loop::get());\n```\n\n----------------------------------------\n\nTITLE: Handling End Event in PHP Stream\nDESCRIPTION: This code shows how to handle the 'end' event on a readable stream. The event is emitted when the stream has successfully reached the end of the stream (EOF).\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('end', function () {\n    echo 'END';\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Process Output via Socket Redirection\nDESCRIPTION: Example demonstrating how to stream process output in real-time on Windows by using a socket server and redirecting the child process output to it. This approach uses a pipe to connect the process output to a helper that forwards data to a socket.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$server = new React\\Socket\\Server('127.0.0.1:0');\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->on('data', function ($chunk) {\n        echo $chunk;\n    });\n});\n\n$command = 'ping example.com | foobar ' . escapeshellarg($server->getAddress());\n$process = new Process($command, null, null, array());\n$process->start();\n\n$process->on('exit', function ($exitcode) use ($server) {\n    $server->close();\n    echo 'exit with ' . $exitcode . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Promise with an Exception in PHP\nDESCRIPTION: Demonstrates how to use the React\\Promise\\reject() function to create a rejected promise with a Throwable reason. The resulting promise implements the PromiseInterface and can be consumed like any other promise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\reject(new RuntimeException('Request failed'));\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NDJSON Encoder with Unicode Options\nDESCRIPTION: Shows how to initialize the Encoder with specific JSON encoding options to handle Unicode characters without escaping.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$ndjson = new Clue\\React\\NDJson\\Encoder($stdout, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n\n$ndjson->write('hello wörld');\n```\n\n----------------------------------------\n\nTITLE: Creating ReadableResourceStream from STDIN in PHP\nDESCRIPTION: Demonstrates how to create a ReadableResourceStream from STDIN and attach event listeners for 'data' and 'end' events. This example shows basic usage of the stream interface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$stream = new ReadableResourceStream(STDIN);\n$stream->on('data', function ($chunk) {\n    echo $chunk;\n});\n$stream->on('end', function () {\n    echo 'END';\n});\n```\n\n----------------------------------------\n\nTITLE: Piping Streams in PHP\nDESCRIPTION: Multiple examples of piping streams, including basic piping, self-piping for echo service, chaining pipes, and handling stream closure.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$source->pipe($dest);\n```\n\nLANGUAGE: php\nCODE:\n```\n$connection->pipe($connection);\n```\n\nLANGUAGE: php\nCODE:\n```\n$source->pipe($decodeGzip)->pipe($filterBadWords)->pipe($dest);\n```\n\nLANGUAGE: php\nCODE:\n```\n$source->pipe($dest, array('end' => false));\n```\n\nLANGUAGE: php\nCODE:\n```\n$source->pipe($dest);\n$source->on('close', function () use ($dest) {\n    $dest->end('BYE!');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$source->close();\n$source->pipe($dest); // NO-OP\n```\n\nLANGUAGE: php\nCODE:\n```\n$dest->close();\n$source->pipe($dest); // calls $source->pause()\n```\n\nLANGUAGE: php\nCODE:\n```\n$source->pipe($dest);\n$dest->close(); // calls $source->pause()\n```\n\n----------------------------------------\n\nTITLE: Removing getRuleDefinition Method\nDESCRIPTION: Demonstration of removing the previously required getRuleDefinition() method from custom rules, as it's no longer needed for local rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/UPGRADING.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Rector\\AbstractRector;\n-use Symplify\\RuleDocGenerator\\ValueObject\\CodeSample\\CodeSample;\n-use Symplify\\RuleDocGenerator\\ValueObject\\RuleDefinition;\n\n final class SimpleRector extends AbstractRector\n {\n-    public function getRuleDefinition(): RuleDefinition\n-    {\n-        return new RuleDefinition('// @todo fill the description', [\n-            new CodeSample(\n-                <<<'CODE_SAMPLE'\n-// @todo fill code before\nCODE_SAMPLE\n-                ,\n-                <<<'CODE_SAMPLE'\n-// @todo fill code after\nCODE_SAMPLE\n-            ),\n-        ]);\n-    }\n\n     // valuable code here\n }\n```\n\n----------------------------------------\n\nTITLE: Error Message Handling for Failed Connection Attempts in PHP\nDESCRIPTION: Demonstrates how to handle connection errors by catching exceptions and reporting their messages, showing how the library provides improved error details for connection failures.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$promise = $connector->connect('tls://example.com:443');\n$promise->then(function (ConnectionInterface $conn) use ($loop) {\n    // …\n}, function (Exception $e) {\n    echo $e->getMessage();\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Class Constants with RenameClassConstFetchRector\nDESCRIPTION: This rule replaces defined class constants in their calls with new ones. It can be configured to target specific constants.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_234\n\nLANGUAGE: php\nCODE:\n```\n-$value = SomeClass::OLD_CONSTANT;\n-$value = SomeClass::OTHER_OLD_CONSTANT;\n+$value = SomeClass::NEW_CONSTANT;\n+$value = DifferentClass::NEW_CONSTANT;\n```\n\n----------------------------------------\n\nTITLE: Using FunctionArgumentDefaultValueReplacerRector to Standardize Version Comparison\nDESCRIPTION: This rule streamlines operator arguments of version_compare function by replacing them with standardized forms. The example shows replacing 'gte' with 'ge'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n-version_compare(PHP_VERSION, '5.6', 'gte');\n+version_compare(PHP_VERSION, '5.6', 'ge');\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Resolver with Complete Config Object in PHP\nDESCRIPTION: Shows how to create a DNS resolver using a complete Config object, introduced in version 1.7.0. This approach supports fallback DNS servers when multiple servers are listed in the configuration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// old (still supported)\n$config = React\\Dns\\Config\\Config::loadSystemConfigBlocking();\n$server = $config->nameservers ? reset($config->nameservers) : '8.8.8.8';\n$resolver = $factory->create($server, $loop);\n\n// new\n$config = React\\Dns\\Config\\Config::loadSystemConfigBlocking();\nif (!$config->nameservers) {\n    $config->nameservers[] = '8.8.8.8';\n}\n$resolver = $factory->create($config, $loop);\n```\n\n----------------------------------------\n\nTITLE: Running React PHP Cache Tests\nDESCRIPTION: Commands for running the test suite for the React PHP Cache library. It shows how to install dependencies through Composer and then execute the test suite using PHPUnit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Removing Non-Existing @var Annotations in PHP\nDESCRIPTION: This rule removes @var annotations that reference variables not used in the corresponding code, improving docblock accuracy.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function get()\n     {\n-        /** @var Training[] $trainings */\n         return $this->getData();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Inline PHP Socket Forwarding Example\nDESCRIPTION: Example showing how to use inline PHP code to forward process output to a socket without requiring an external helper program. The code is passed directly to PHP via the -r parameter.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$code = '$s=stream_socket_client($argv[1]);do{fwrite($s,$d=fread(STDIN, 8192));}while(isset($d[0]));';\n$command = 'ping example.com | php -r ' . escapeshellarg($code) . ' ' . escapeshellarg($server->getAddress());\n$process = new Process($command, null, null, array());\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Control Structures in PHP\nDESCRIPTION: This rule removes if statements, foreach loops, and for loops that don't contain any code in their bodies as they don't perform any operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_96\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run($value)\n     {\n-        if ($value) {\n-        }\n-\n-        foreach ($values as $value) {\n-        }\n-\n         return $value;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Final Keyword from Constants in Final Classes in PHP\nDESCRIPTION: Removes the redundant final keyword from constants in classes already defined as final using the RemoveFinalFromConstRector rule. This eliminates unnecessary keywords when the class itself is already final.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n-    final public const NAME = 'value';\n+    public const NAME = 'value';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReadableResourceStream with Custom Chunk Size in PHP\nDESCRIPTION: Shows how to create a ReadableResourceStream with a custom read chunk size of 8192 bytes. This example demonstrates configuring the stream's buffer size.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$stream = new ReadableResourceStream(STDIN, null, 8192);\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version for Secure Connections in PHP\nDESCRIPTION: Demonstrates how to explicitly choose the TLS version for secure connections by setting the crypto_method context parameter, allowing specification of protocols like TLSv1.2.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// new: now supports 'crypto_method` context parameter for all classes\n$connector = new Connector($loop, array(\n    'tls' => array(\n        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: NDJSON Stream Control Methods\nDESCRIPTION: Demonstrates stream control methods for closing and piping NDJSON data.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->close();\n\n$ndjson->pipe($logger);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mixed Resolution and Rejection Forwarding in PHP with React Promise\nDESCRIPTION: This snippet shows how you can choose to propagate or not, similar to try/catch. It demonstrates how mixing resolutions and rejections still forwards handler results in a predictable way.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Handle the rejection, and don't propagate.\n        // This is like catch without a rethrow\n        return $x->getMessage() + 1;\n    })\n    ->then(function ($x) {\n        echo 'Mixed ' . $x; // 4\n    });\n\n$deferred->resolve(1);  // Prints \"Mixed 4\"\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/diff as a development dependency\nDESCRIPTION: Demonstrates how to add sebastian/diff as a development-time dependency using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev sebastian/diff\n```\n\n----------------------------------------\n\nTITLE: Changing Constant Fetch to Class Constant Fetch with ConstFetchToClassConstFetchRector\nDESCRIPTION: This rule changes constant fetch to class constant fetch.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_252\n\nLANGUAGE: php\nCODE:\n```\n-$x = CONTEXT_COURSE\n+$x = course::LEVEL\n```\n\n----------------------------------------\n\nTITLE: Using the Urlize Method\nDESCRIPTION: Generates a URL-friendly string from a text string by replacing spaces with hyphens and removing special characters.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->urlize('My first blog post'); // my-first-blog-post\n```\n\n----------------------------------------\n\nTITLE: Resolving Custom DNS Query Types in PHP\nDESCRIPTION: Illustrates how to use the resolveAll() method to support custom query types in the Resolver, a feature added in version 0.4.15. This example shows resolving IPv6 addresses for a domain.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$resolver->resolveAll('reactphp.org', Message::TYPE_AAAA)->then(function ($ips) {\n    echo 'IPv6 addresses for reactphp.org ' . implode(', ', $ips) . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Method Calls to Static Calls (PHP)\nDESCRIPTION: MethodCallToStaticCallRector transforms instance method calls to static method calls. This can be used when migrating from object-oriented to more functional or utility-based code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_260\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    private $anotherDependency;\n\n    public function __construct(AnotherDependency $anotherDependency)\n    {\n        $this->anotherDependency = $anotherDependency;\n    }\n\n    public function loadConfiguration()\n    {\n-        return $this->anotherDependency->process('value');\n+        return StaticCaller::anotherMethod('value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a ReactPHP Stream (PHP)\nDESCRIPTION: Example showing how to forcefully close a stream. Unlike end(), the close() method discards any buffered data and immediately terminates the stream.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$stream->close();\n```\n\n----------------------------------------\n\nTITLE: Removing References from Function Calls in PHP 5.4+\nDESCRIPTION: The RemoveReferenceFromCallRector removes the reference operator (&) from function and method calls in PHP 5.4+. This updates code to comply with modern PHP conventions where passing by reference in calls is deprecated.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_139\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run($one)\n     {\n-        return strlen(&$one);\n+        return strlen($one);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: NDJSON Decoder Error Handling\nDESCRIPTION: Shows how to handle errors and stream closure events in the NDJSON Decoder.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->on('error', function (Exception $error) {\n    // an error occured, stream will close next\n});\n\n$ndjson->on('end', function () {\n    // stream successfully ended, stream will close next\n});\n\n$ndjson->on('close', function () {\n    // stream closed\n    // possibly after an \"end\" event or due to an \"error\" event\n});\n```\n\n----------------------------------------\n\nTITLE: Using UdpTransportExecutor for Direct DNS Queries\nDESCRIPTION: Demonstrates advanced usage by directly querying IPv6 addresses using the UdpTransportExecutor class.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$executor = new UdpTransportExecutor('8.8.8.8:53');\n\n$executor->query(\n    new Query($name, Message::TYPE_AAAA, Message::CLASS_IN)\n)->then(function (Message $message) {\n    foreach ($message->answers as $answer) {\n        echo 'IPv6: ' . $answer->data . PHP_EOL;\n    }\n}, 'printf');\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Deferred Object in PHP\nDESCRIPTION: Rejects the promise returned by promise(), signalling that the deferred's computation failed. All consumers are notified by having their onRejected handlers called with the reason.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$deferred->reject(\\Throwable $reason);\n```\n\n----------------------------------------\n\nTITLE: Using Collection Assertions in PHP\nDESCRIPTION: Example of using the allIsInstanceOf method to validate that all elements in a collection are instances of a specific class. Collection assertions apply a check to every element in an array or Traversable object.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nAssert::allIsInstanceOf($employees, 'Acme\\Employee');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Messages with Webmozart Assert in PHP\nDESCRIPTION: Demonstrates how to use custom error messages with the Assert class. The placeholder %s is used to represent the tested value in the error message.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nAssert::string($path, 'The path is expected to be a string. Got: %s');\n```\n\n----------------------------------------\n\nTITLE: Replacing Function Calls with Static Method Calls (PHP)\nDESCRIPTION: FuncCallToStaticCallRector transforms specific function calls into static method calls on designated classes. This is useful for refactoring or migrating away from global functions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_256\n\nLANGUAGE: php\nCODE:\n```\n-view(\"...\", []);\n+SomeClass::render(\"...\", []);\n```\n\n----------------------------------------\n\nTITLE: Changing Array Dim Fetch to Method Call with ArrayDimFetchToMethodCallRector\nDESCRIPTION: This rule changes array dimension fetch to method call.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_250\n\nLANGUAGE: php\nCODE:\n```\n-$app['someService'];\n+$app->make('someService');\n```\n\n----------------------------------------\n\nTITLE: Converting hebrevc() to nl2br(hebrev()) in PHP 7.4\nDESCRIPTION: Transforms hebrevc() function call to nl2br(hebrev()) as hebrevc() is deprecated in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_202\n\nLANGUAGE: diff\nCODE:\n```\n-hebrevc($str);\n+nl2br(hebrev($str));\n```\n\n----------------------------------------\n\nTITLE: Installing CPU Core Counter Package with Composer\nDESCRIPTION: Command to install the fidry/cpu-core-counter package via Composer, which provides utilities to detect the number of CPU cores.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require fidry/cpu-core-counter\n```\n\n----------------------------------------\n\nTITLE: Converting compact() to Explicit Arrays with CompactToVariablesRector\nDESCRIPTION: This rule converts compact() function calls to explicit array creation with key-value pairs. This makes the code more explicit about which variables are being used.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n        $checkout = 'one';\n        $form = 'two';\n\n-        return compact('checkout', 'form');\n+        return ['checkout' => $checkout, 'form' => $form];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Pending DNS Resolution\nDESCRIPTION: Shows how to cancel a pending DNS resolution by cancelling the returned promise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$promise = $resolver->resolve('reactphp.org');\n\n$promise->cancel();\n```\n\n----------------------------------------\n\nTITLE: Replacing preg_replace with /e Modifier in PHP 5.5+\nDESCRIPTION: The PregReplaceEModifierRector converts preg_replace calls with /e modifier to preg_replace_callback in PHP 5.5+. This addresses the deprecation of the /e modifier which was removed in PHP 7.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_144\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run()\n     {\n-        $comment = preg_replace('~\\b(\\w)(\\w+)~e', '\"$1\".strtolower(\"$2\")', $comment);\n+        $comment = preg_replace_callback('~\\b(\\w)(\\w+)~', function ($matches) {\n+              return($matches[1].strtolower($matches[2]));\n+        }, $comment);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of XdebugHandler in PHP\nDESCRIPTION: Simple implementation example that creates an XdebugHandler instance with a prefix 'myapp', checks for Xdebug, and restarts the process if needed.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$xdebug = new XdebugHandler('myapp');\n$xdebug->check();\nunset($xdebug);\n```\n\n----------------------------------------\n\nTITLE: Using Composer/PCRE's Preg Class for Safe PCRE Operations\nDESCRIPTION: Examples of using the Preg class to perform the same regex operations as with native functions, but with better error handling via exceptions instead of null returns.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\nif (Preg::match('{fo+}', $string, $matches)) { ... }\nif (Preg::matchWithOffsets('{fo+}', $string, $matches)) { ... }\nif (Preg::matchAll('{fo+}', $string, $matches)) { ... }\n$newString = Preg::replace('{fo+}', 'bar', $string);\n$newString = Preg::replaceCallback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string);\n$newString = Preg::replaceCallbackArray(['{fo+}' => fn ($match) => strtoupper($match[0])], $string);\n$filtered = Preg::grep('{[a-z]}', $elements);\n$array = Preg::split('{[a-z]+}', $string);\n```\n\n----------------------------------------\n\nTITLE: Using Strict Group Matching Methods in Preg Class\nDESCRIPTION: Examples of using the matchStrictGroups and matchAllStrictGroups methods which ensure match groups are always present and non-nullable for type-safe code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\n// $matches is guaranteed to be an array of strings, if a subpattern does not match and produces a null it will throw\nif (Preg::matchStrictGroups('{fo+}', $string, $matches))\nif (Preg::matchAllStrictGroups('{fo+}', $string, $matches))\n```\n\n----------------------------------------\n\nTITLE: Customizing CPU Core Finders - Setting Custom Order\nDESCRIPTION: Example showing how to specify a custom order of CPU core finders, prioritizing CpuInfoFinder and excluding Nproc finder altogether.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Use CPUInfo first & don't use Nproc\n$finders = [\n    new CpuInfoFinder(),\n    new WindowsWmicFinder(),\n    new HwLogicalFinder(),\n];\n\n$cores = (new CpuCoreCounter($finders))->getCount();\n```\n\n----------------------------------------\n\nTITLE: Removing Null Tag Values in PHP DocBlocks\nDESCRIPTION: This rule removes @var, @param, and @return annotations with null values that don't provide meaningful information.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_109\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    /**\n-     * @return null\n-     */\n     public function foo()\n     {\n         return null;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Running CI Detector Test Suite in Shell\nDESCRIPTION: Command to run code style checks, static analysis, and unit tests for the CI Detector project using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/ondram/ci-detector/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncomposer all\n```\n\n----------------------------------------\n\nTITLE: Converting Property Assignment to Method Calls (PHP)\nDESCRIPTION: PropertyAssignToMethodCallRector transforms direct property assignments to method calls. This helps enforce encapsulation by using setter methods instead of direct property access.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_263\n\nLANGUAGE: php\nCODE:\n```\n$someObject = new SomeClass;\n-$someObject->oldProperty = false;\n+$someObject->newMethodCall(false);\n```\n\n----------------------------------------\n\nTITLE: Fixing Disallowed Short Ternary with DisallowedShortTernaryRuleFixerRector\nDESCRIPTION: This rule fixes PHPStan reports for strict type rule 'PHPStan\\Rules\\DisallowedConstructs\\DisallowedShortTernaryRule'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_247\n\nLANGUAGE: php\nCODE:\n```\n final class ShortTernaryArray\n {\n     public function run(array $array)\n     {\n-        return $array ?: 2;\n+        return $array !== [] ? $array : 2;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing Function Calls with Constants (PHP)\nDESCRIPTION: FuncCallToConstFetchRector transforms function calls to use predefined constants instead. For example, it changes php_sapi_name() to PHP_SAPI.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_253\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $value = php_sapi_name();\n+        $value = PHP_SAPI;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Timeout to UdpTransportExecutor\nDESCRIPTION: Shows how to enhance the UdpTransportExecutor with timeout functionality using the TimeoutExecutor wrapper.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$executor = new TimeoutExecutor(\n    new UdpTransportExecutor($nameserver),\n    3.0\n);\n```\n\n----------------------------------------\n\nTITLE: Using close() to interrupt end() operation in ReactPHP Streams (PHP)\nDESCRIPTION: Example showing how to use close() after calling end() to stop waiting for the stream to flush its final data. This is useful for imposing timeouts on flush operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$stream->end();\nLoop::addTimer(1.0, function () use ($stream) {\n    $stream->close();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Sets in Rector\nDESCRIPTION: Configuration example showing how to add Symfony rule sets using SymfonySetList class and configure container XML path.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-symfony/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\nuse Rector\\Symfony\\Set\\SymfonySetList;\n\nreturn RectorConfig::configure()\n    ->withSymfonyContainerXml(__DIR__ . '/var/cache/dev/App_KernelDevDebugContainer.xml')\n    ->withSets([\n        SymfonySetList::SYMFONY_62,\n        SymfonySetList::SYMFONY_CODE_QUALITY,\n        SymfonySetList::SYMFONY_CONSTRUCTOR_INJECTION,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Renaming Functions with RenameFunctionRector\nDESCRIPTION: This rule turns defined function calls into new ones. It can be configured to target specific functions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_238\n\nLANGUAGE: php\nCODE:\n```\n-view(\"...\", []);\n+Laravel\\Templating\\render(\"...\", []);\n```\n\n----------------------------------------\n\nTITLE: Creating EventEmitter Instance in PHP\nDESCRIPTION: Demonstrates how to create a new instance of the EventEmitter class from the Evenement namespace.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/evenement/evenement/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$emitter = new Evenement\\EventEmitter();\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Timer in PHP Event Loop\nDESCRIPTION: Demonstrates how to add a one-time timer to the event loop using addTimer(). The example shows two timers with different intervals, highlighting the non-blocking nature of the event loop.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$loop->addTimer(0.8, function () {\n    echo 'world!' . PHP_EOL;\n});\n\n$loop->addTimer(0.3, function () {\n    echo 'hello ';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Process with Socket Pair Descriptors (PHP 8+)\nDESCRIPTION: Alternative approach for Windows that uses socket pair descriptors instead of standard I/O pipes, available in PHP 8 and above. This allows non-blocking process I/O on Windows, though not all programs accept stdio sockets.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(\n    'ping example.com',\n    null,\n    null,\n    [\n        ['socket'],\n        ['socket'],\n        ['socket']\n    ]\n);\n$process->start();\n\n$process->stdout->on('data', function ($chunk) {\n    echo $chunk;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Private Class Constants\nDESCRIPTION: Removes private class constants that are not used anywhere in the code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_117\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    private const SOME_CONST = 'dead';\n-\n     public function run()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Array Parameter Type Based on Dim Fetch in PHP\nDESCRIPTION: The StrictArrayParamDimFetchRector adds the array type to parameters that are used with array access notation. It identifies when a parameter is accessed using square brackets and adds an array type hint.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_320\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n class SomeClass\n {\n-    public function resolve($item)\n+    public function resolve(array $item)\n     {\n         return $item['name'];\n     }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating from SocketClient to Socket Component in PHP\nDESCRIPTION: Shows the code changes required to migrate from the deprecated SocketClient component to the new Socket component. The main change is updating the namespace from React\\SocketClient to React\\Socket.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// old from SocketClient component and namespace\n$connector = new React\\SocketClient\\Connector($loop);\n$connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n    $connection->write('…');\n});\n\n// new\n$connector = new React\\Socket\\Connector($loop);\n$connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n    $connection->write('…');\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Boolean in Ternary Operator with BooleanInTernaryOperatorRuleFixerRector\nDESCRIPTION: This rule fixes PHPStan reports for strict type rule 'PHPStan\\Rules\\BooleansInConditions\\BooleanInTernaryOperatorRule'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_245\n\nLANGUAGE: php\nCODE:\n```\n final class ArrayCompare\n {\n     public function run(array $data)\n     {\n-        return $data ? 1 : 2;\n+        return $data !== [] ? 1 : 2;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using CoopExecutor with TcpTransportExecutor in PHP\nDESCRIPTION: Shows how to combine CoopExecutor with TimeoutExecutor and TcpTransportExecutor for efficient handling of concurrent DNS queries.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$executor = new CoopExecutor(\n    new TimeoutExecutor(\n        new TcpTransportExecutor($nameserver),\n        3.0\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: ThroughStream Basic Usage\nDESCRIPTION: Demonstrates basic usage of ThroughStream for passing data through with event handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$through = new ThroughStream();\n$through->on('data', $this->expectCallableOnceWith('hello'));\n\n$through->write('hello');\n```\n\n----------------------------------------\n\nTITLE: Configuring Rector with Sets for Doctrine (PHP 7.x)\nDESCRIPTION: This code shows how to configure Rector for PHP 7.x using the withSets() method and DoctrineSetList constants to apply Doctrine-specific rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-doctrine/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\nuse Rector\\Doctrine\\Set\\DoctrineSetList;\n\nreturn RectorConfig::configure()\n    ->withSets([\n        DoctrineSetList::DOCTRINE_CODE_QUALITY,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Connecting to a TCP Server using React\\Socket\\Connector in PHP\nDESCRIPTION: Demonstrates how to use the React\\Socket\\Connector class to establish a TCP connection to a remote server. The connector is created with a loop instance and returns a promise that resolves with a ConnectionInterface when connected.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$connector = new React\\Socket\\Connector($loop);\n$connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n    $connection->write('…');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic NDJSON Decoder Usage\nDESCRIPTION: Demonstrates how to use the Decoder class to parse NDJSON data from standard input stream.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$stdin = new React\\Stream\\ReadableResourceStream(STDIN);\n\n$ndjson = new Clue\\React\\NDJson\\Decoder($stdin);\n\n$ndjson->on('data', function ($data) {\n    // $data is a parsed element from the JSON stream\n    // line 1: $data = (object)array('name' => 'test', 'active' => true);\n    // line 2: $data = (object)array('name' => 'hello wörld', 'active' => true);\n    var_dump($data);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Signals to a Process in PHP\nDESCRIPTION: Demonstrates how to send a custom signal (SIGUSR1) to a running process using the terminate() method. This can be used to signal a process or forcefully terminate it depending on the signal sent.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$process->terminate(SIGUSR1);\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Match Methods in Preg Class\nDESCRIPTION: Examples of using the isMatch and isMatchAll methods from the Preg class, which return boolean values for better type safety.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\nif (Preg::isMatch('{fo+}', $string, $matches)) // bool\nif (Preg::isMatchAll('{fo+}', $string, $matches)) // bool\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Private Method Parameters\nDESCRIPTION: Removes unused parameters from private methods when they are not required by interface or parent class implementations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_118\n\nLANGUAGE: diff\nCODE:\n```\n class SomeClass\n {\n-    private function run($value, $value2)\n+    private function run($value)\n     {\n          $this->value = $value;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Pausing Stream Events in PHP\nDESCRIPTION: Example demonstrating how to pause a stream and verify that no data/end events are emitted while paused.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$stream->pause();\n\n$stream->on('data', assertShouldNeverCalled());\n$stream->on('end', assertShouldNeverCalled());\n```\n\n----------------------------------------\n\nTITLE: Windows Shell Command Example\nDESCRIPTION: Example demonstrating how to execute Windows shell built-in commands by explicitly using cmd /c as a prefix, since Process passes commands directly to CreateProcess without wrapping them in a shell by default.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('cmd /c echo hello', null, null, $pipes);\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Continue Statements at Loop End in PHP\nDESCRIPTION: This rule removes unnecessary continue statements at the end of loops since they don't affect the loop execution flow.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n while ($i < 10) {\n     ++$i;\n-    continue;\n }\n```\n\n----------------------------------------\n\nTITLE: Process with Empty Pipes for Exit Code Monitoring\nDESCRIPTION: Example of creating a Process with custom empty pipes when only the exit code matters. This approach works on Windows by omitting standard I/O pipes that would otherwise cause blocking issues.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('ping example.com', null, null, array());\n$process->start();\n\n$process->on('exit', function ($exitcode) {\n    echo 'exit with ' . $exitcode . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Public Method Parameters\nDESCRIPTION: Removes unused parameters from public methods in final classes without extends and interfaces.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_122\n\nLANGUAGE: diff\nCODE:\n```\n final class SomeClass\n {\n-    public function run($a, $b)\n+    public function run($a)\n     {\n         echo $a;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Rector with Prepared Sets for Doctrine (PHP 8+)\nDESCRIPTION: This code demonstrates how to configure Rector using the modern syntax with prepared sets for Doctrine code quality improvements. This approach is recommended for PHP 8 and above.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-doctrine/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\n\nreturn RectorConfig::configure()\n    ->withPreparedSets(doctrineCodeQuality: true);\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Loops in PHP\nDESCRIPTION: This rule eliminates loops that have no body and therefore perform no operations, simplifying the code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run($values)\n     {\n-        for ($i=1; $i<count($values); ++$i) {\n-        }\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Rector in PHP\nDESCRIPTION: Example configuration file (rector.php) showing how to register individual rules and rule sets for Rector to apply to your codebase.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\nuse Rector\\TypeDeclaration\\Rector\\Property\\TypedPropertyFromStrictConstructorRector;\n\nreturn RectorConfig::configure()\n    // register single rule\n    ->withRules([\n        TypedPropertyFromStrictConstructorRector::class\n    ])\n    // here we can define, what prepared sets of rules will be applied\n    ->withPreparedSets(\n        deadCode: true,\n        codeQuality: true\n    );\n```\n\n----------------------------------------\n\nTITLE: Adding Write Stream Event Listener with ReactPHP\nDESCRIPTION: Example of using the addWriteStream() method to register a callback function that will be executed when a stream is ready to write. The callback writes a greeting to the stream using a variable from outer scope.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$loop->addWriteStream($stream, function ($stream) use ($name) {\n    fwrite($stream, 'Hello ' . $name);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Xdebug in Sub-Processes\nDESCRIPTION: Example of how to temporarily enable Xdebug in a sub-process when using persistent settings, then restore the Xdebug-free environment afterward.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction SubProcessWithXdebug()\n{\n    $phpConfig = new Composer\\XdebugHandler\\PhpConfig();\n\n    # Set the environment to the original configuration\n    $phpConfig->useOriginal();\n\n    # run the process with Xdebug loaded\n    ...\n\n    # Restore Xdebug-free environment\n    $phpConfig->usePersistent();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cooperative DNS Executor\nDESCRIPTION: Shows how to create a cooperative executor that avoids sending duplicate queries by combining CoopExecutor with RetryExecutor and other executors.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$executor = new CoopExecutor(\n    new RetryExecutor(\n        new TimeoutExecutor(\n            new UdpTransportExecutor($nameserver),\n            3.0\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ReadableResourceStream from STDIN on Windows in PHP\nDESCRIPTION: Demonstrates that creating a ReadableResourceStream from STDIN on Windows will throw a RuntimeException due to lack of support for non-blocking mode on pipes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n// throws RuntimeException on Windows\n$stream = new ReadableResourceStream(STDIN);\n```\n\n----------------------------------------\n\nTITLE: Helper Script for Socket Forwarding\nDESCRIPTION: Example of a simple helper script that forwards standard input to a socket connection, useful for streaming process output to a socket server as shown in the previous example.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$socket = stream_socket_client($argv[1]);\ndo {\n    fwrite($socket, $data = fread(STDIN, 8192));\n} while (isset($data[0]));\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime Method Calls to Carbon with DateTimeMethodCallToCarbonRector\nDESCRIPTION: This rule converts DateTime object creation and method calls to Carbon's fluent interface. It replaces date manipulation with more readable Carbon methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function run()\n    {\n-        $date = (new \\DateTime('today +20 day'))->format('Y-m-d');\n+        $date = \\Carbon\\Carbon::today()->addDays(20)->format('Y-m-d')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling non-writable streams in ReactPHP (PHP)\nDESCRIPTION: Example showing how write operations on non-writable streams are ignored. Once a stream is closed or ended, it becomes non-writable and any write or end operations are no-ops.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nassert($stream->isWritable() === false);\n\n$stream->write('end'); // NO-OP\n$stream->end('end'); // NO-OP\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Item\nDESCRIPTION: Example of deleting an item from the cache using the delete() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cache->delete('foo');\n```\n\n----------------------------------------\n\nTITLE: Running the Event Loop in PHP\nDESCRIPTION: Demonstrates how to run the event loop until there are no more tasks to perform. This is typically the main entry point for event-driven applications.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$loop->run();\n```\n\n----------------------------------------\n\nTITLE: Checking Stream Readability in PHP\nDESCRIPTION: Example showing how to check if a stream is readable and verify that no data/end events are emitted when non-readable.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nassert($stream->isReadable() === false);\n\n$stream->on('data', assertNeverCalled());\n$stream->on('end', assertNeverCalled());\n```\n\n----------------------------------------\n\nTITLE: Using Rector's Node Debugging Helper\nDESCRIPTION: PHP code example showing how to use Rector's print_node() helper for debugging AST nodes during development of custom rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node\\Scalar\\String_;\n$node = new String_('hello world!');\n\n// prints node to string, as PHP code displays it\nprint_node($node);\n```\n\n----------------------------------------\n\nTITLE: Resolving a Domain to IPv4 Address with ReactPHP\nDESCRIPTION: Demonstrates using the resolve() method to fetch a single IPv4 address for a domain name.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$resolver->resolve('reactphp.org')->then(function ($ip) {\n    echo 'IP for reactphp.org is ' . $ip . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Default English Inflector\nDESCRIPTION: Creates a new instance of the Doctrine Inflector for English language using the InflectorFactory.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\n\n$inflector = InflectorFactory::create()->build();\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP PCRE Function Usage\nDESCRIPTION: Examples of how PHP's native preg_* functions are typically used, showing various regex pattern matching and replacement operations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (preg_match('{fo+}', $string, $matches)) { ... }\nif (preg_match('{fo+}', $string, $matches, PREG_OFFSET_CAPTURE)) { ... }\nif (preg_match_all('{fo+}', $string, $matches)) { ... }\n$newString = preg_replace('{fo+}', 'bar', $string);\n$newString = preg_replace_callback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string);\n$newString = preg_replace_callback_array(['{fo+}' => fn ($match) => strtoupper($match[0])], $string);\n$filtered = preg_grep('{[a-z]}', $elements);\n$array = preg_split('{[a-z]+}', $string);\n```\n\n----------------------------------------\n\nTITLE: Installing React Stream library via Composer\nDESCRIPTION: This command installs the latest supported version of the React Stream library using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require react/stream:^1.4\n```\n\n----------------------------------------\n\nTITLE: WritableResourceStream with Buffer Configuration\nDESCRIPTION: Demonstrates initializing WritableResourceStream with custom buffer size configuration.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$stream = new WritableResourceStream(STDOUT, null, 8192);\n```\n\n----------------------------------------\n\nTITLE: Generating strict unified diffs with StrictUnifiedDiffOutputBuilder\nDESCRIPTION: Demonstrates how to use StrictUnifiedDiffOutputBuilder to generate strict unified diffs compatible with patch and git apply.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\StrictUnifiedDiffOutputBuilder;\n\n$builder = new StrictUnifiedDiffOutputBuilder([\n    'collapseRanges'      => true, // ranges of length one are rendered with the trailing `,1`\n    'commonLineThreshold' => 6,    // number of same lines before ending a new hunk and creating a new one (if needed)\n    'contextLines'        => 3,    // like `diff:  -u, -U NUM, --unified[=NUM]`, for patch/git apply compatibility best to keep at least @ 3\n    'fromFile'            => '',\n    'fromFileDate'        => null,\n    'toFile'              => '',\n    'toFileDate'          => null,\n]);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Adding Newlines After Statements in PHP\nDESCRIPTION: Adds a new line after statements to improve code readability using the NewlineAfterStatementRector rule. This rule helps maintain a consistent and clean code structure.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function first()\n    {\n    }\n+\n    public function second()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Item Existence\nDESCRIPTION: Example of checking if an item exists in the cache using the has() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$cache\n    ->has('foo')\n    ->then('var_dump');\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR Logger Interface in PHP Class\nDESCRIPTION: Example showing how to implement a PSR-3 compliant logger in a PHP class. Demonstrates logger injection via constructor and usage for info and error logging, including exception handling.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/psr/log/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Psr\\Log\\LoggerInterface;\n\nclass Foo\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger = null)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething()\n    {\n        if ($this->logger) {\n            $this->logger->info('Doing work');\n        }\n           \n        try {\n            $this->doSomethingElse();\n        } catch (Exception $exception) {\n            $this->logger->error('Oh no!', array('exception' => $exception));\n        }\n\n        // do something useful\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Logic to DNS Executor\nDESCRIPTION: Demonstrates how to add retry capability to DNS queries by combining the RetryExecutor with TimeoutExecutor and UdpTransportExecutor.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$executor = new RetryExecutor(\n    new TimeoutExecutor(\n        new UdpTransportExecutor($nameserver),\n        3.0\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Stream Event Handler Update\nDESCRIPTION: Demonstrates the new pattern for adding stream event handlers using closure binding instead of loop argument.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// old ($loop gets passed by default)\n$loop->addReadStream($stream, function ($stream, $loop) {\n    $loop->removeReadStream($stream);\n});\n\n// already supported before: use closure binding as usual\n$loop->addReadStream($stream, function ($stream) use ($loop) {\n    $loop->removeReadStream($stream);\n});\n```\n\n----------------------------------------\n\nTITLE: Using FixedUriConnector for Preconfigured Connections in PHP\nDESCRIPTION: Demonstrates how to use the FixedUriConnector decorator to connect to a fixed, preconfigured URI (like a Unix domain socket) regardless of the destination specified in the connect call.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$connector = new FixedUriConnector(\n    'unix:///var/run/docker.sock',\n    new UnixConnector($loop)\n);\n\n// destination will be ignored, actually connects to Unix domain socket\n$promise = $connector->connect('localhost:80');\n```\n\n----------------------------------------\n\nTITLE: Configuring Sigchild Compatibility in ReactPHP\nDESCRIPTION: Example showing how to explicitly enable sigchild compatibility in version 0.6.0, which is not recommended by default but available as an advanced configuration option.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// advanced: not recommended by default\nProcess::setSigchildEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Stream behavior after calling end() in ReactPHP (PHP)\nDESCRIPTION: Example demonstrating that after calling end(), the stream becomes non-writable. Additional calls to write() or end() will have no effect.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$stream->end();\nassert($stream->isWritable() === false);\n\n$stream->write('nope'); // NO-OP\n$stream->end(); // NO-OP\n```\n\n----------------------------------------\n\nTITLE: Creating a Unix Domain Socket Server in PHP\nDESCRIPTION: Shows two methods for creating Unix domain socket servers: using the Server class with the unix:// URI scheme or using the specialized UnixServer class for advanced usage.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// new: Server now supports \"unix://\" scheme\n$server = new Server('unix:///tmp/server.sock', $loop);\n\n// new: advanced usage\n$server = new UnixServer('/tmp/server.sock', $loop);\n```\n\n----------------------------------------\n\nTITLE: Closing Streams in PHP\nDESCRIPTION: Example showing how to close a stream and verify its non-readable state after closure.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$stream->close();\nassert($stream->isReadable() === false);\n\n$stream->on('data', assertNeverCalled());\n$stream->on('end', assertNeverCalled());\n```\n\n----------------------------------------\n\nTITLE: Invalid WritableResourceStream Initialization\nDESCRIPTION: Shows how attempting to create a WritableResourceStream with an invalid resource throws an InvalidArgumentException.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// throws InvalidArgumentException\n$stream = new WritableResourceStream(false);\n```\n\n----------------------------------------\n\nTITLE: Adding Space Before New Assignments in PHP\nDESCRIPTION: Adds extra space before new assignments to improve code readability using the NewlineBeforeNewAssignSetRector rule. This rule enhances visual separation between different variable initializations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nfinal class SomeClass\n{\n    public function run()\n    {\n        $value = new Value;\n        $value->setValue(5);\n+\n        $value2 = new Value;\n        $value2->setValue(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Current EventLoop Instance in ReactPHP\nDESCRIPTION: Shows the transition from the deprecated Factory::create() method to the newer Loop::get() method for accessing the currently active event loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// deprecated\n$loop = React\\EventLoop\\Factory::create();\n\n// new\n$loop = React\\EventLoop\\Loop::get();\n```\n\n----------------------------------------\n\nTITLE: Replacing list(each()) Pattern in PHP 7.2\nDESCRIPTION: Replaces the deprecated each() function used with list() with key(), current(), and next() functions. The each() function was deprecated in PHP 7.2.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_177\n\nLANGUAGE: diff\nCODE:\n```\n-list($key, $callback) = each($callbacks);\n+$key = key($callbacks);\n+$callback = current($callbacks);\n+next($callbacks);\n```\n\n----------------------------------------\n\nTITLE: Resuming Stream Events in PHP\nDESCRIPTION: Example showing how to resume a paused stream after a timer delay.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$stream->pause();\n\nLoop::addTimer(1.0, function () use ($stream) {\n    $stream->resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Remote Address as URI in PHP\nDESCRIPTION: Shows the change in handling connection addresses, which are now URIs that include the scheme, simplifying parsing with parse_url.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n- $parts = parse_url('tcp://' . $conn->getRemoteAddress());\n+ $parts = parse_url($conn->getRemoteAddress());\n```\n\n----------------------------------------\n\nTITLE: Enabling Sigchild Compatibility in ReactPHP Process\nDESCRIPTION: Shows how to explicitly enable sigchild compatibility mode for PHP installations compiled with the --enable-sigchild option. This provides a workaround for reliable exit code retrieval when this option is enabled.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// advanced: not recommended by default\nProcess::setSigchildEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML with Custom Tags in PHP\nDESCRIPTION: Demonstrates how to parse YAML with custom tags using the PARSE_CUSTOM_TAGS flag. This returns a TaggedValue object containing the tag name and value.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('!foo bar', Yaml::PARSE_CUSTOM_TAGS);\n// returns TaggedValue('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Resolver with Default Loop in PHP\nDESCRIPTION: Demonstrates how to create a DNS resolver using the new default loop feature introduced in version 1.8.0. This simplifies usage by eliminating the need to explicitly pass a loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// old (still supported)\n$factory = new React\\Dns\\Resolver\\Factory();\n$resolver = $factory->create($config, $loop);\n\n// new (using default loop)\n$factory = new React\\Dns\\Resolver\\Factory();\n$resolver = $factory->create($config);\n```\n\n----------------------------------------\n\nTITLE: Installing ReactPHP Event Loop via Composer\nDESCRIPTION: Command to install the ReactPHP event-loop package using Composer. This installs the latest supported version that follows semantic versioning.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/event-loop:^1.5\n```\n\n----------------------------------------\n\nTITLE: Using SelectiveTransportExecutor for DNS Queries in PHP\nDESCRIPTION: Example of using SelectiveTransportExecutor to automatically choose between UDP and TCP transport for DNS queries based on message size.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$executor = new SelectiveTransportExecutor($udpExecutor, $tcpExecutor);\n\n$executor->query(\n    new Query($name, Message::TYPE_AAAA, Message::CLASS_IN)\n)->then(function (Message $message) {\n    foreach ($message->answers as $answer) {\n        echo 'IPv6: ' . $answer->data . PHP_EOL;\n    }\n}, 'printf');\n```\n\n----------------------------------------\n\nTITLE: Handling close event in ReactPHP Streams (PHP)\nDESCRIPTION: Example demonstrating how to listen for the 'close' event on a stream. This event is emitted once the stream terminates and should be emitted at most once.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('close', function () {\n    echo 'CLOSED';\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Function-Like Parameters with RenameFunctionLikeParamWithinCallLikeArgRector\nDESCRIPTION: This rule renames parameters within closures and arrow functions based on use with specified method calls.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_237\n\nLANGUAGE: php\nCODE:\n```\n-(new SomeClass)->process(function ($param) {});\n+(new SomeClass)->process(function ($parameter) {});\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Event Handler Syntax in PHP\nDESCRIPTION: Example of the updated event handler syntax in version 0.5.0, demonstrating how to handle 'data' events with consistent semantics. The new approach uses closure variables instead of passing the stream as a second parameter.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// old (inconsistent and not supported by all implementations)\n$stream->on('data', function ($data, $stream) {\n    // process $data\n});\n\n// new (consistent throughout the whole ecosystem)\n$stream->on('data', function ($data) use ($stream) {\n    // process $data\n});\n```\n\n----------------------------------------\n\nTITLE: Handling get_class() with Null Values in PHP 7.2\nDESCRIPTION: Handles get_class() calls that might receive null values, which is no longer allowed in PHP 7.2+. The transformation uses a ternary operator to check for null and return the class name instead.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_176\n\nLANGUAGE: diff\nCODE:\n```\n final class SomeClass\n {\n     public function getItem()\n     {\n         $value = null;\n-        return get_class($value);\n+        return $value !== null ? get_class($value) : self::class;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicated Array Keys in PHP\nDESCRIPTION: This rule removes duplicate keys in array definitions, keeping only the last value assigned to each key.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n $item = [\n-    1 => 'A',\n     1 => 'B'\n ];\n```\n\n----------------------------------------\n\nTITLE: Parsing Octal Numbers in YAML with 0o Prefix (PHP)\nDESCRIPTION: Shows the change in syntax for parsing octal numbers, moving from using a leading '0' to using '0o' prefix. This change was introduced in version 5.1.0 to make octal number parsing more explicit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('072');\n```\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('0o72');\n```\n\n----------------------------------------\n\nTITLE: Process with File Handles for Output Capture\nDESCRIPTION: Example using custom pipes with file handles instead of pipes to capture command output after execution. This approach uses temporary files to store output that can be read after the process completes.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('ping example.com', null, null, array(\n    array('file', 'nul', 'r'),\n    $stdout = tmpfile(),\n    array('file', 'nul', 'w')\n));\n$process->start();\n\n$process->on('exit', function ($exitcode) use ($stdout) {\n    echo 'exit with ' . $exitcode . PHP_EOL;\n\n    // rewind to start and then read full file (demo only, this is blocking).\n    // reading from shared file is only safe if you have some synchronization in place\n    // or after the child process has terminated.\n    rewind($stdout);\n    echo stream_get_contents($stdout);\n    fclose($stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original INI Files\nDESCRIPTION: Helper method to get an array of the original PHP INI file locations, which is useful in restarted processes where standard PHP functions would return incorrect values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$files = XdebugHandler::getAllIniFiles();\n\n# $files[0] always exists, it could be an empty string\n$loadedIni = array_shift($files);\n$scannedInis = $files;\n```\n\n----------------------------------------\n\nTITLE: Error Handling in NDJSON Encoder\nDESCRIPTION: Example of implementing error handling for the NDJSON Encoder using event listeners.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->on('error', function (Exception $error) {\n    // an error occured, stream will close next\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Test Environment\nDESCRIPTION: Commands for setting up the test environment for the ReactPHP Child Process library, including cloning the repository, installing dependencies, and running the test suite.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Pending resolveAll DNS Query\nDESCRIPTION: Shows how to cancel a pending resolveAll DNS query by cancelling the returned promise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$promise = $resolver->resolveAll('reactphp.org', Message::TYPE_AAAA);\n\n$promise->cancel();\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Cache Items\nDESCRIPTION: Example of deleting multiple cache items in a single operation using deleteMultiple() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$cache->deleteMultiple(array('foo', 'bar, 'baz'));\n```\n\n----------------------------------------\n\nTITLE: Fixing Boolean in Boolean Not with BooleanInBooleanNotRuleFixerRector\nDESCRIPTION: This rule fixes PHPStan reports for strict type rule 'PHPStan\\Rules\\BooleansInConditions\\BooleanInBooleanNotRule'.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_243\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n     public function run(string|null $name)\n     {\n-        if (! $name) {\n+        if ($name === null) {\n             return 'no name';\n         }\n\n         return 'name';\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Using DiffOnlyOutputBuilder for minimal diff output\nDESCRIPTION: Shows how to use the DiffOnlyOutputBuilder to output only the lines that differ in the diff.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\DiffOnlyOutputBuilder;\n\n$builder = new DiffOnlyOutputBuilder(\n    \"--- Original\\n+++ New\\n\"\n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Parameters in PHP 7.1\nDESCRIPTION: Removes extra parameters from function calls that don't accept them. This helps prevent strict parameter count errors in PHP 7.1+.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_174\n\nLANGUAGE: diff\nCODE:\n```\n-strlen(\"asdf\", 1);\n+strlen(\"asdf\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Singular and Plural Rules\nDESCRIPTION: Shows how to configure custom singular and plural rules using patterns, transformations, and substitutions to handle special cases.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\nuse Doctrine\\Inflector\\Rules\\Pattern;\nuse Doctrine\\Inflector\\Rules\\Patterns;\nuse Doctrine\\Inflector\\Rules\\Ruleset;\nuse Doctrine\\Inflector\\Rules\\Substitution;\nuse Doctrine\\Inflector\\Rules\\Substitutions;\nuse Doctrine\\Inflector\\Rules\\Transformation;\nuse Doctrine\\Inflector\\Rules\\Transformations;\nuse Doctrine\\Inflector\\Rules\\Word;\n\n$inflector = InflectorFactory::create()\n    ->withSingularRules(\n        new Ruleset(\n            new Transformations(\n                new Transformation(new Pattern('/^(bil)er$/i'), '\\\\1'),\n                new Transformation(new Pattern('/^(inflec|contribu)tors$/i'), '\\\\1ta')\n            ),\n            new Patterns(new Pattern('singulars')),\n            new Substitutions(new Substitution(new Word('spins'), new Word('spinor')))\n        )\n    )\n    ->withPluralRules(\n        new Ruleset(\n            new Transformations(\n                new Transformation(new Pattern('^(bil)er$'), '\\\\1'),\n                new Transformation(new Pattern('^(inflec|contribu)tors$'), '\\\\1ta')\n            ),\n            new Patterns(new Pattern('noflect'), new Pattern('abtuse')),\n            new Substitutions(\n                new Substitution(new Word('amaze'), new Word('amazable')),\n                new Substitution(new Word('phone'), new Word('phonezes'))\n            )\n        )\n    )\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Properly Escaping Backslashes in YAML Double-Quoted Strings\nDESCRIPTION: Demonstrates the correct way to escape backslash characters in double-quoted strings in YAML, which became required in version 2.8.0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclass: \"Foo\\Var\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: \"Foo\\\\Var\"\n```\n\n----------------------------------------\n\nTITLE: Getting Restart Settings for PHP Sub-processes\nDESCRIPTION: Static method to retrieve settings from a restarted process that can be used to configure PHP sub-processes with the same environment.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$settings = XdebugHandler::getRestartSettings();\n/**\n * $settings: array (if the current process was restarted,\n * or called with the settings from a previous restart), or null\n *\n *    'tmpIni'      => the temporary ini file used in the restart (string)\n *    'scannedInis' => if there were any scanned inis (bool)\n *    'scanDir'     => the original PHP_INI_SCAN_DIR value (false|string)\n *    'phprc'       => the original PHPRC value (false|string)\n *    'inis'        => the original inis from getAllIniFiles (array)\n *    'skipped'     => the skipped version from getSkippedVersion (string)\n */\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PHPDoc Parser in PHP\nDESCRIPTION: Example demonstrating how to set up and use the PHPDoc parser to parse a PHPDoc string and access its values. Shows initialization of the parser components and extraction of parameter tag values.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/phpstan/phpdoc-parser/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\ParamTagValueNode;\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocNode;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\IdentifierTypeNode;\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\nuse PHPStan\\PhpDocParser\\Parser\\TokenIterator;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\n\n// basic setup\n\n$config = new ParserConfig(usedAttributes: []);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n\n// parsing and reading a PHPDoc string\n\n$tokens = new TokenIterator($lexer->tokenize('/** @param Lorem $a */'));\n$phpDocNode = $phpDocParser->parse($tokens); // PhpDocNode\n$paramTags = $phpDocNode->getParamTagValues(); // ParamTagValueNode[]\necho $paramTags[0]->parameterName; // '$a'\necho $paramTags[0]->type; // IdentifierTypeNode - 'Lorem'\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Container for Testing\nDESCRIPTION: Example of creating a Symfony container file for testing purposes, demonstrating how to boot kernel and return container instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-symfony/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// tests/symfony-container.php\n\nuse App\\Kernel;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$appKernel = new Kernel('test', false);\n$appKernel->boot();\n\nreturn $appKernel->getContainer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony PHP Container and Routes Provider\nDESCRIPTION: Configuration for providing Symfony PHP container and registering routes provider service for rules like AddRouteAnnotationRector.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-symfony/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\nuse Rector\\Symfony\\Bridge\\Symfony\\Routing\\SymfonyRoutesProvider;\nuse Rector\\Symfony\\Configs\\Rector\\ClassMethod\\AddRouteAnnotationRector;\nuse Rector\\Symfony\\Contract\\Bridge\\Symfony\\Routing\\SymfonyRoutesProviderInterface;\n\nreturn RectorConfig::configure()\n    ->withSymfonyContainerPhp(__DIR__ . '/tests/symfony-container.php')\n    ->registerService(SymfonyRoutesProvider::class, SymfonyRoutesProviderInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Renaming Constants with RenameConstantRector\nDESCRIPTION: This rule replaces constants with new ones. It can be configured to target specific constants.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_236\n\nLANGUAGE: php\nCODE:\n```\n final class SomeClass\n {\n     public function run()\n     {\n-        return MYSQL_ASSOC;\n+        return MYSQLI_ASSOC;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: NDJSON Decoder with Custom Buffer Size\nDESCRIPTION: Example of initializing the Decoder with a custom maximum buffer size for handling long lines.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$ndjson = new Clue\\React\\NDJson\\Decoder($stdin, false, 512, 0, 64 * 1024);\n```\n\n----------------------------------------\n\nTITLE: Adding Interface by Trait with AddInterfaceByTraitRector\nDESCRIPTION: This rule adds an interface to a class based on the traits it uses.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_249\n\nLANGUAGE: php\nCODE:\n```\n-class SomeClass\n+class SomeClass implements SomeInterface\n {\n     use SomeTrait;\n }\n```\n\n----------------------------------------\n\nTITLE: Parsing a unified diff using the Parser class\nDESCRIPTION: Demonstrates how to use the Parser class to parse a unified diff into an object graph, using a Git diff as an example.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SebastianBergmann\\Diff\\Parser;\nuse SebastianBergmann\\Git;\n\n$git = new Git('/usr/local/src/money');\n\n$diff = $git->getDiff(\n  '948a1a07768d8edd10dcefa8315c1cbeffb31833',\n  'c07a373d2399f3e686234c4f7f088d635eb9641b'\n);\n\n$parser = new Parser;\n\nprint_r($parser->parse($diff));\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CpuCoreCounter in PHP\nDESCRIPTION: Demonstrates how to use the CpuCoreCounter class to get the number of CPU cores available for parallelization, handle exception cases, and use fallback values when core count detection fails.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Fidry\\CpuCoreCounter\\CpuCoreCounter;\nuse Fidry\\CpuCoreCounter\\NumberOfCpuCoreNotFound;\nuse Fidry\\CpuCoreCounter\\Finder\\DummyCpuCoreFinder;\n\n$counter = new CpuCoreCounter();\n\n// For knowing the number of cores you can use for launching parallel processes:\n$counter->getAvailableForParallelisation()->availableCpus;\n\n// Get the number of CPU cores (by default it will use the logical cores count):\ntry {\n    $counter->getCount();   // e.g. 8\n} catch (NumberOfCpuCoreNotFound) {\n    return 1;   // Fallback value\n}\n\n// An alternative form where we not want to catch the exception:\n\n$counter = new CpuCoreCounter([\n    ...CpuCoreCounter::getDefaultFinders(),\n    new DummyCpuCoreFinder(1),  // Fallback value\n]);\n\n// A type-safe alternative form:\n$counter->getCountWithFallback(1);\n\n// Note that the result is memoized.\n$counter->getCount();   // e.g. 8\n```\n\n----------------------------------------\n\nTITLE: Removing Null Property Initializations in PHP\nDESCRIPTION: This rule removes explicit null initializations for class properties since properties are already null by default if not initialized.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n class SunshineCommand extends ParentClassWithNewConstructor\n {\n-    private $myVar = null;\n+    private $myVar;\n }\n```\n\n----------------------------------------\n\nTITLE: Using PhpConfig for Sub-Process Configuration\nDESCRIPTION: Implementation of the PhpConfig helper class to configure PHP options for a sub-process, showing how to enable Xdebug in the new process.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\PhpConfig;\n\n$config = new PhpConfig;\n\n$options = $config->useOriginal();\n```\n\n----------------------------------------\n\nTITLE: Manually Constructing an Inflector\nDESCRIPTION: Demonstrates how to manually construct an Inflector with specific rule sets, rather than using the factory method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\CachedWordInflector;\nuse Doctrine\\Inflector\\RulesetInflector;\nuse Doctrine\\Inflector\\Rules\\English;\n\n$inflector = new Inflector(\n    new CachedWordInflector(new RulesetInflector(\n        English\\Rules::getSingularRuleset()\n    )),\n    new CachedWordInflector(new RulesetInflector(\n        English\\Rules::getPluralRuleset()\n    ))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a No-Operation Inflector\nDESCRIPTION: Demonstrates how to create an inflector that doesn't perform any operation, implementing the Null Object design pattern.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\Inflector;\nuse Doctrine\\Inflector\\NoopWordInflector;\n\n$inflector = new Inflector(new NoopWordInflector(), new NoopWordInflector());\n```\n\n----------------------------------------\n\nTITLE: Replacing restore_include_path() with ini_restore() in PHP 7.4\nDESCRIPTION: Changes restore_include_path() function call to ini_restore('include_path') as restore_include_path() is deprecated in PHP 7.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_209\n\nLANGUAGE: diff\nCODE:\n```\n-restore_include_path();\n+ini_restore('include_path');\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Rule Sets in Rector\nDESCRIPTION: PHP code example showing how to configure Rector to use PHPUnit rule sets. This snippet demonstrates importing the PHPUnitSetList class and applying the PHPUnit 9.0 rule set in the Rector configuration file.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-phpunit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\nuse Rector\\PHPUnit\\Set\\PHPUnitSetList;\n\nreturn RectorConfig::configure()\n    ->withSets([\n        PHPUnitSetList::PHPUNIT_90,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Removing Trait Usage with RemoveTraitUseRector\nDESCRIPTION: This rule removes the use of specified traits from classes. It can be configured to target specific traits.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_231\n\nLANGUAGE: php\nCODE:\n```\n class SomeClass\n {\n-    use SomeTrait;\n }\n```\n\n----------------------------------------\n\nTITLE: Executing All CPU Core Finders\nDESCRIPTION: Shell commands to execute all CPU core finders and display their results, useful for troubleshooting or comparing detection methods.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Execute all finders and display the result they found.\nmake execute                                     # From this repository\n./vendor/fidry/cpu-core-counter/bin/execute.php  # From the library\n```\n\n----------------------------------------\n\nTITLE: Creating an Inflector for a Specific Language\nDESCRIPTION: Creates an inflector for a specific language by using the createForLanguage method with a language constant.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\nuse Doctrine\\Inflector\\Language;\n\n$inflector = InflectorFactory::createForLanguage(Language::SPANISH)->build();\n```\n\n----------------------------------------\n\nTITLE: Using the Capitalize Method\nDESCRIPTION: Capitalizes words with configurable delimiters, extending PHP's ucwords functionality.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$string = 'top-o-the-morning to all_of_you!';\n\necho $inflector->capitalize($string); // Top-O-The-Morning To All_of_you!\n\necho $inflector->capitalize($string, '-_ '); // Top-O-The-Morning To All_Of_You!\n```\n\n----------------------------------------\n\nTITLE: Customizing CPU Core Finders - Removing a Specific Finder\nDESCRIPTION: Example showing how to customize the CPU core detection by filtering out specific finders, in this case removing the WindowsWmicFinder from the default set of finders.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Remove WindowsWmicFinder \n$finders = array_filter(\n    CpuCoreCounter::getDefaultFinders(),\n    static fn (CpuCoreFinder $finder) => !($finder instanceof WindowsWmicFinder)\n);\n\n$cores = (new CpuCoreCounter($finders))->getCount();\n```\n\n----------------------------------------\n\nTITLE: Using Default Loop with ChildProcess in ReactPHP\nDESCRIPTION: Example showing how to use the new default loop functionality introduced in version 0.6.3, which simplifies process creation by not requiring an explicit loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// old (still supported)\n$process = new React\\ChildProcess\\Process($command);\n$process->start($loop);\n\n// new (using default loop)\n$process = new React\\ChildProcess\\Process($command);\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Converting AST Back to PHP Code\nDESCRIPTION: Demonstrates how to convert a modified AST back into PHP code using the PrettyPrinter component, which handles code formatting and generation.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/nikic/php-parser/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);\n```\n\n----------------------------------------\n\nTITLE: Handling Close Event in PHP Stream\nDESCRIPTION: This code demonstrates how to handle the 'close' event on a stream. The event is emitted once the stream closes or terminates.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$stream->on('close', function () {\n    echo 'CLOSED';\n});\n```\n\n----------------------------------------\n\nTITLE: Using the finally() Method on Promises in PHP\nDESCRIPTION: Allows executing cleanup tasks in a promise chain. The handler is called when the promise is either fulfilled or rejected, with no arguments.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$newPromise = $promise->finally(callable $onFulfilledOrRejected);\n```\n\n----------------------------------------\n\nTITLE: Using the Singularize Method\nDESCRIPTION: Converts a plural word to its singular form using language-specific rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->singularize('browsers'); // browser\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP Constants in YAML\nDESCRIPTION: Demonstrates how to parse PHP constants in YAML files using the !php/const tag and the PARSE_CONSTANT flag.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('!php/const:PHP_INT_MAX', Yaml::PARSE_CONSTANT);\n```\n\n----------------------------------------\n\nTITLE: Removing Function Calls with RemoveFuncCallRector\nDESCRIPTION: This rule removes specified function calls from the code. It can be configured to target specific functions.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_229\n\nLANGUAGE: php\nCODE:\n```\n-$x = 'something';\n-var_dump($x);\n+$x = 'something';\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Deprecation Contracts Function in PHP\nDESCRIPTION: Example of using the trigger_deprecation() function to generate a deprecation notice. The function takes the package name, version, message template, and optional formatting parameters to create standardized deprecation messages.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/deprecation-contracts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntrigger_deprecation('symfony/blockchain', '8.9', 'Using \"%s\" is deprecated, use \"%s\" instead.', 'bitcoin', 'fabcoin');\n```\n\n----------------------------------------\n\nTITLE: Using the Tableize Method\nDESCRIPTION: Converts a camel case string to an underscore separated string, commonly used for database table names.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->tableize('ModelName'); // model_name\n```\n\n----------------------------------------\n\nTITLE: Using the Pluralize Method\nDESCRIPTION: Converts a singular word to its plural form using language-specific rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->pluralize('browser'); // browsers\n```\n\n----------------------------------------\n\nTITLE: Stream behavior after calling close() in ReactPHP (PHP)\nDESCRIPTION: Example demonstrating that after calling close(), the stream becomes non-writable. Any further calls to write() or end() have no effect.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$stream->close();\nassert($stream->isWritable() === false);\n\n$stream->write('nope'); // NO-OP\n$stream->end(); // NO-OP\n```\n\n----------------------------------------\n\nTITLE: Removing Interfaces from Classes with RemoveInterfacesRector\nDESCRIPTION: This rule removes the implementation of specified interfaces from classes. It can be configured to target specific interfaces.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_230\n\nLANGUAGE: php\nCODE:\n```\n-class SomeClass implements SomeInterface\n+class SomeClass\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit tests for React Stream library\nDESCRIPTION: These commands demonstrate how to install dependencies and run the test suite for the React Stream library using Composer and PHPUnit.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer install\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming a React\\Socket\\Server in PHP\nDESCRIPTION: Shows how to use the pause() and resume() methods to control the acceptance of new connections on a Server instance. The server is paused immediately and resumed after a 1-second delay using a timer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/socket/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$server = new Server(0, $loop);\n$server->pause();\n\n$loop->addTimer(1.0, function() use ($server) {\n    $server->resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React DNS Component via Composer\nDESCRIPTION: Command to install the React DNS library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/README.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/dns:^1.13\n```\n\n----------------------------------------\n\nTITLE: Instantiating Stream Objects with Default Loop in PHP\nDESCRIPTION: Shows how to use the simplified API that supports the default event loop, allowing developers to create stream objects without explicitly passing a loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// old (still supported)\n$stream = new ReadableResourceStream($resource, $loop);\n$stream = new WritabeResourceStream($resource, $loop);\n$stream = new DuplexResourceStream($resource, $loop);\n\n// new (using default loop)\n$stream = new ReadableResourceStream($resource);\n$stream = new WritabeResourceStream($resource);\n$stream = new DuplexResourceStream($resource);\n```\n\n----------------------------------------\n\nTITLE: NDJSON Decoder with Array Output\nDESCRIPTION: Shows how to configure the Decoder to emit JSON objects as associative arrays instead of stdClass objects.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$ndjson = new Clue\\React\\NDJson\\Decoder($stdin, true);\n\n$ndjson->on('data', function ($data) {\n    // JSON objects will be emitted as assoc arrays now\n});\n```\n\n----------------------------------------\n\nTITLE: Timer Loop Access Pattern Update\nDESCRIPTION: Shows the transition from using TimerInterface getLoop method to closure binding for accessing the loop instance.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// old (getLoop() called on timer instance)\n$loop->addTimer(0.1, function ($timer) {\n    $timer->getLoop()->stop();\n});\n\n// already supported before: use closure binding as usual\n$loop->addTimer(0.1, function () use ($loop) {\n    $loop->stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Format-Preserving Printer in PHPDoc Parser\nDESCRIPTION: Example showing how to modify an AST node and print it back while preserving the original format. Uses NodeTraverser with CloningVisitor to create a copy of the AST that can be safely modified.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/phpstan/phpdoc-parser/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PHPStan\\PhpDocParser\\Ast\\NodeTraverser;\nuse PHPStan\\PhpDocParser\\Ast\\NodeVisitor\\CloningVisitor;\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocNode;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\IdentifierTypeNode;\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\nuse PHPStan\\PhpDocParser\\Parser\\TokenIterator;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Printer\\Printer;\n\n// basic setup with enabled required lexer attributes\n\n$config = new ParserConfig(usedAttributes: ['lines' => true, 'indexes' => true, 'comments' => true]);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n\n$tokens = new TokenIterator($lexer->tokenize('/** @param Lorem $a */'));\n$phpDocNode = $phpDocParser->parse($tokens); // PhpDocNode\n\n$cloningTraverser = new NodeTraverser([new CloningVisitor()]);\n\n/** @var PhpDocNode $newPhpDocNode */\n[$newPhpDocNode] = $cloningTraverser->traverse([$phpDocNode]);\n\n// change something in $newPhpDocNode\n$newPhpDocNode->getParamTagValues()[0]->type = new IdentifierTypeNode('Ipsum');\n\n// print changed PHPDoc\n$printer = new Printer();\n$newPhpDoc = $printer->printFormatPreserving($newPhpDocNode, $phpDocNode, $tokens);\necho $newPhpDoc; // '/** @param Ipsum $a */'\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Interface Usage in PHP\nDESCRIPTION: Demonstrates the changes in promise interface usage between old and new versions, showing how multiple interfaces have been consolidated into a single PromiseInterface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// old (multiple interfaces may or may not be implemented)\nassert($promise instanceof PromiseInterface);\nassert(method_exists($promise, 'then'));\nif ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'otherwise')); }\nif ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'always')); }\nif ($promise instanceof CancellablePromiseInterface) { assert(method_exists($promise, 'cancel')); }\n\n// new (single PromiseInterface with all methods)\nassert($promise instanceof PromiseInterface);\nassert(method_exists($promise, 'then'));\nassert(method_exists($promise, 'catch'));\nassert(method_exists($promise, 'finally'));\nassert(method_exists($promise, 'cancel'));\n```\n\n----------------------------------------\n\nTITLE: Installing Rector Dependencies\nDESCRIPTION: Commands to install project dependencies and verify platform requirements using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\ncomposer check-platform-reqs\n```\n\n----------------------------------------\n\nTITLE: Soft-Closing a Process by Ending stdin Stream\nDESCRIPTION: Demonstrates how to gracefully terminate a process by closing its stdin pipe, which causes many command-line programs to terminate cleanly. This example shows this technique with a 'cat' process.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process('cat');\n$process->start();\n\nLoop::addTimer(2.0, function () use ($process) {\n    $process->stdin->end();\n});\n```\n\n----------------------------------------\n\nTITLE: Properly Quoting Non-String Keys in YAML\nDESCRIPTION: Shows the correct way to quote non-string keys in YAML mappings. In Symfony 4.0, non-string keys must be explicitly quoted to be parsed as strings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$yaml = <<<YAML\nnull: null key\ntrue: boolean true\n2.0: float key\nYAML;\n\nYaml::parse($yaml);\n```\n\nLANGUAGE: php\nCODE:\n```\n$yaml = <<<YAML\n\"null\": null key\n\"true\": boolean true\n\"2.0\": float key\nYAML;\n\nYaml::parse($yaml);\n```\n\n----------------------------------------\n\nTITLE: Initializing Parser Classes with Separate Parameters (PHP)\nDESCRIPTION: Example of initializing parser classes with separate arrays and boolean values in phpstan/phpdoc-parser 1.x.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/phpstan/phpdoc-parser/UPGRADING.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\n\n$usedAttributes = ['lines' => true, 'indexes' => true];\n\n$lexer = new Lexer();\n$constExprParser = new ConstExprParser(true, true, $usedAttributes);\n$typeParser = new TypeParser($constExprParser, true, $usedAttributes);\n$phpDocParser = new PhpDocParser($typeParser, $constExprParser, true, true, $usedAttributes);\n```\n\n----------------------------------------\n\nTITLE: Using the Camelize Method\nDESCRIPTION: Converts an underscore separated string to a camel case string with the first character lowercase.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->camelize('model_name'); // modelName\n```\n\n----------------------------------------\n\nTITLE: Installing PHPDoc Parser with Composer\nDESCRIPTION: Command to install the phpstan/phpdoc-parser library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/phpstan/phpdoc-parser/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require phpstan/phpdoc-parser\n```\n\n----------------------------------------\n\nTITLE: Using the Unaccent Method\nDESCRIPTION: Removes accents from characters in a string, converting accented characters to their non-accented equivalents.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->unaccent('año'); // ano\n```\n\n----------------------------------------\n\nTITLE: Employee Class with ID Validation using Webmozart Assert in PHP\nDESCRIPTION: Demonstrates the usage of Webmozart Assert in a PHP class constructor to validate the employee ID. It checks if the ID is an integer and greater than 0.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webmozart\\Assert\\Assert;\n\nclass Employee\n{\n    public function __construct($id)\n    {\n        Assert::integer($id, 'The employee ID must be an integer. Got: %s');\n        Assert::greaterThan($id, 0, 'The employee ID must be a positive integer. Got: %s');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Data Access Pattern Update\nDESCRIPTION: Demonstrates the transition from using TimerInterface getData/setData methods to closure binding for storing timer data.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// old (limited setData() and getData() only allows single variable)\n$name = 'Tester';\n$timer = $loop->addTimer(1.0, function ($timer) {\n    echo 'Hello ' . $timer->getData() . PHP_EOL;\n});\n$timer->setData($name);\n\n// already supported before: closure binding allows any number of variables\n$name = 'Tester';\n$loop->addTimer(1.0, function () use ($name) {\n    echo 'Hello ' . $name . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Refactoring Scope-Aware Rector Implementation - After\nDESCRIPTION: Updated implementation using AbstractRector with explicit scope fetching via ScopeFetcher when needed, replacing the previous AbstractScopeAwareRector approach.\nSOURCE: https://github.com/rectorphp/rector/blob/main/UPGRADING.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Rector\\AbstractRector;\nuse Rector\\PHPStan\\ScopeFetcher;\n\nfinal class SimpleRector extends AbstractRector\n{\n    public function refactor(Node $node): ?Node\n    {\n        if (...) {\n            // this allow to fetch scope only when needed\n            $scope = ScopeFetcher::fetch($node);\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Symfony Container XML Path\nDESCRIPTION: Configuration for providing Symfony container XML path to enable rules like StringFormTypeToClassRector.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-symfony/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Config\\RectorConfig;\n\nreturn RectorConfig::configure()\n    ->withSymfonyContainerXml(__DIR__ . '/var/cache/dev/App_KernelDevDebugContainer.xml');\n```\n\n----------------------------------------\n\nTITLE: Running Rector with Docker\nDESCRIPTION: Commands to build Docker image and run various development tasks in a container.\nSOURCE: https://github.com/rectorphp/rector/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Build the docker image\ndocker compose build --pull\n\n# Install dependencies\ndocker compose run --rm php composer install\n\n# Run the entire CI suite\ndocker compose run --rm php composer complete-check\n\n# Fix the coding standards\ndocker compose run --rm php composer fix-cs\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Cache Items\nDESCRIPTION: Example of retrieving multiple cache items in a single operation using getMultiple() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$cache->getMultiple(array('name', 'age'))->then(function (array $values) {\n    $name = $values['name'] ?? 'User';\n    $age = $values['age'] ?? 'n/a';\n\n    echo $name . ' is ' . $age . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping Empty PHP Arrays as YAML Sequences\nDESCRIPTION: Shows how to use the DUMP_EMPTY_ARRAY_AS_SEQUENCE flag to output empty PHP arrays as YAML sequences rather than mappings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nYaml::dump([], 0, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine Inflector with Composer\nDESCRIPTION: Command to install the Doctrine Inflector library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ composer require doctrine/inflector\n```\n\n----------------------------------------\n\nTITLE: Customizing YAML Parser Behavior with Bit Fields\nDESCRIPTION: Demonstrates how to combine multiple parser options using bit fields to customize the YAML parser's behavior when handling complex structures.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('{ \"foo\": \"bar\", \"fiz\": \"cat\" }', Yaml::PARSE_EXCEPTION_ON_INVALID_TYPE | Yaml::PARSE_OBJECT | Yaml::PARSE_OBJECT_FOR_MAP);\n```\n\n----------------------------------------\n\nTITLE: Installing Composer/PCRE via Composer\nDESCRIPTION: Command to install the latest version of the composer/pcre library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/pcre/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require composer/pcre\n```\n\n----------------------------------------\n\nTITLE: Configuring Rector Downgrade Rules\nDESCRIPTION: PHP configuration code to set up Rector for downgrading code to PHP 7.2 using DowngradeLevelSetList. Uses RectorConfig to define the downgrade set target.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-downgrade-php/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Set\\ValueObject\\DowngradeLevelSetList;\nuse Rector\\Config\\RectorConfig;\n\nreturn static function (RectorConfig $rectorConfig): void {\n    $rectorConfig->sets([\n        DowngradeLevelSetList::DOWN_TO_PHP_72\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing PSR Logger via Composer\nDESCRIPTION: Command to install the PSR logger interface package using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/psr/log/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/log\n```\n\n----------------------------------------\n\nTITLE: Timer Cancellation API Update\nDESCRIPTION: Shows the transition from old timer cancellation API to the new recommended approach using LoopInterface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// old (method invoked on timer instance)\n$timer->cancel();\n\n// already supported before: invoke method on loop instance\n$loop->cancelTimer($timer);\n```\n\n----------------------------------------\n\nTITLE: Installing Xdebug Handler with Composer\nDESCRIPTION: Command to install the latest version of composer/xdebug-handler via Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require composer/xdebug-handler\n```\n\n----------------------------------------\n\nTITLE: Creating ReadableResourceStream with Invalid Resource in PHP\nDESCRIPTION: Shows an example of trying to create a ReadableResourceStream with an invalid resource (false), which will throw an InvalidArgumentException.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n// throws InvalidArgumentException\n$stream = new ReadableResourceStream(false);\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Style Violations in Shell\nDESCRIPTION: Command to automatically fix code style violations in the CI Detector project using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/ondram/ci-detector/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncomposer fix\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Resolution and Rejection in PHP\nDESCRIPTION: Shows the changes in how promises are resolved and rejected, emphasizing the new requirement for arguments in both cases.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// old (arguments used to be optional)\n$promise = resolve();\n$promise = reject();\n\n// new (already supported before)\n$promise = resolve(null);\n$promise = reject(new RuntimeException());\n```\n\n----------------------------------------\n\nTITLE: Setting Write Chunk Size for WritableResourceStream in PHP\nDESCRIPTION: Shows how to create a WritableResourceStream with a specified maximum write chunk size to limit the number of bytes written at once.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$stream = new WritableResourceStream(STDOUT, $loop, null, 8192);\n```\n\n----------------------------------------\n\nTITLE: Installing Composer/Semver via Composer\nDESCRIPTION: Command to install the latest version of the Composer/Semver library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/semver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require composer/semver\n```\n\n----------------------------------------\n\nTITLE: Installing React Promise for Multiple PHP Versions\nDESCRIPTION: This bash command installs React Promise with support for multiple PHP versions, targeting versions 3, 2, and 1 of the library.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"react/promise:^3 || ^2 || ^1\"\n```\n\n----------------------------------------\n\nTITLE: Running Rector CI Checks\nDESCRIPTION: Command to run complete CI checks locally before submitting a pull request.\nSOURCE: https://github.com/rectorphp/rector/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer complete-check\n```\n\n----------------------------------------\n\nTITLE: Using the Classify Method\nDESCRIPTION: Converts an underscore separated string to a camel case string, commonly used for class names.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/doctrine/inflector/docs/en/index.rst#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->classify('model_name'); // ModelName\n```\n\n----------------------------------------\n\nTITLE: Parsing Timestamps as DateTime Objects in YAML\nDESCRIPTION: Shows how to parse YAML timestamps as PHP DateTime objects using the PARSE_DATETIME flag.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/symfony/yaml/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('2001-12-15 21:59:43.10 -5', Yaml::PARSE_DATETIME);\n```\n\n----------------------------------------\n\nTITLE: Installing Rector Package using Composer\nDESCRIPTION: Command to install the rector/rector package as a development dependency using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-downgrade-php/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require rector/rector --dev\n```\n\n----------------------------------------\n\nTITLE: Closing NDJSON Stream\nDESCRIPTION: Shows how to explicitly close an NDJSON stream using the close() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->close();\n```\n\n----------------------------------------\n\nTITLE: Installing Nette Utils via Composer\nDESCRIPTION: Command to install the Nette Utils package using Composer package manager. Compatible with PHP versions 8.0 to 8.4.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/nette/utils/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require nette/utils\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unhandled Promise Rejection in PHP\nDESCRIPTION: Illustrates how unhandled promise rejections are now reported by default, showing an example of an unhandled rejection.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Unhandled promise rejection with RuntimeException: Unhandled in example.php:2\nreject(new RuntimeException('Unhandled'));\n```\n\n----------------------------------------\n\nTITLE: Refactoring Scope-Aware Rector Implementation - Before\nDESCRIPTION: Example showing the old implementation using AbstractScopeAwareRector, which was removed in favor of AbstractRector with explicit scope fetching.\nSOURCE: https://github.com/rectorphp/rector/blob/main/UPGRADING.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Rector\\Rector\\AbstractScopeAwareRector;\n\nfinal class SimpleRector extends AbstractScopeAwareRector\n{\n    public function refactorWithScope(Node $node, Scope $scope): ?Node\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReactPHP Child Process via Composer\nDESCRIPTION: Command to install the ReactPHP Child Process library through Composer, which will install the latest supported version of the package.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/child-process:^0.6.6\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/diff with Composer\nDESCRIPTION: Shows how to install the sebastian/diff library as a project dependency using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sebastian/diff\n```\n\n----------------------------------------\n\nTITLE: Checking Skipped Xdebug Version\nDESCRIPTION: Helper method to get the version of Xdebug that was skipped during a restart, returning an empty string if no restart occurred.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/composer/xdebug-handler/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$version = XdebugHandler::getSkippedVersion();\n# $version: '3.1.1' (for example), or an empty string\n```\n\n----------------------------------------\n\nTITLE: Optimizing Ternary Condition Variable Assignment in PHP\nDESCRIPTION: Assigns the outcome of a ternary condition directly to a variable instead of using separate assignments in each branch using the TernaryConditionVariableAssignmentRector rule. This creates more concise and readable code.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_84\n\nLANGUAGE: php\nCODE:\n```\nfunction ternary($value)\n{\n-    $value ? $a = 1 : $a = 0;\n+    $a = $value ? 1 : 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Employee ID Examples with Webmozart Assert in PHP\nDESCRIPTION: Shows examples of creating Employee instances with invalid IDs, demonstrating the exceptions thrown by Webmozart Assert.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnew Employee('foobar');\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be an integer. Got: string\n\nnew Employee(-10);\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be a positive integer. Got: -10\n```\n\n----------------------------------------\n\nTITLE: Installing React PHP Cache via Composer\nDESCRIPTION: Commands for installing the React PHP Cache library through Composer. This installs the latest supported version of the library which follows SemVer versioning.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/README.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/cache:^1.2\n```\n\n----------------------------------------\n\nTITLE: Installing Webmozart Assert via Composer\nDESCRIPTION: Shows the command to install the Webmozart Assert library using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/webmozart/assert/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webmozart/assert\n```\n\n----------------------------------------\n\nTITLE: Setting Up ReactPHP Test Environment\nDESCRIPTION: Commands to set up and run the test suite for ReactPHP. First install all dependencies through Composer, then run the PHPUnit test suite.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/event-loop/README.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing React Promise via Composer\nDESCRIPTION: This bash command installs the latest supported version of React Promise from the current branch using Composer.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/promise:^3.2\n```\n\n----------------------------------------\n\nTITLE: Installing Rector with Composer\nDESCRIPTION: Command to install Rector as a development dependency in a PHP project using Composer. This command installs the main Rector package which already includes PHPUnit rules.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-phpunit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require rector/rector --dev\n```\n\n----------------------------------------\n\nTITLE: Default Process Creation with Standard I/O Pipes (PHP)\nDESCRIPTION: Example of attempting to create a Process instance with default pipes, which throws a LogicException on Windows platforms due to PHP's inability to access standard I/O pipes without blocking.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/child-process/README.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// throws LogicException on Windows\n$process = new Process('ping example.com');\n$process->start();\n```\n\n----------------------------------------\n\nTITLE: Sample NDJSON Data Format\nDESCRIPTION: Example showing the structure of NDJSON format with multiple JSON records separated by newlines.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":\"Alice\",\"age\":30,\"comment\":\"Yes, I like cheese\"}\n{\"name\":\"Bob\",\"age\":50,\"comment\":\"Hello\\nWorld!\"}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands to install dependencies and run the test suite for the NDJSON React library.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Changing Attribute Key to Class Constant Fetch with AttributeKeyToClassConstFetchRector\nDESCRIPTION: This rule replaces key values on specific attributes with class constants.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_251\n\nLANGUAGE: php\nCODE:\n```\n use Doctrine\\ORM\\Mapping\\Column;\n+use Doctrine\\DBAL\\Types\\Types;\n\n class SomeClass\n {\n-    #[Column(type: \"string\")]\n+    #[Column(type: Types::STRING)]\n     public $name;\n }\n```\n\n----------------------------------------\n\nTITLE: Installing via Composer\nDESCRIPTION: Command to install the NDJSON React library using Composer package manager.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require clue/ndjson-react:^1.3\n```\n\n----------------------------------------\n\nTITLE: Running React Promise Test Suite\nDESCRIPTION: These bash commands demonstrate how to clone the repository, install dependencies, and run the test suite for React Promise.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/promise/README.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\nvendor/bin/phpunit\nvendor/bin/phpstan\n```\n\n----------------------------------------\n\nTITLE: Running CPU Core Diagnostics with Make Command\nDESCRIPTION: Shell commands to run the diagnostics utility that shows details about what each CPU core finder discovers on the current system.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/fidry/cpu-core-counter/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Checks what each given finder will find on your system with details about the\n# information it had.\nmake diagnose                                     # From this repository\n./vendor/fidry/cpu-core-counter/bin/diagnose.php  # From the library\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: A markdown formatted changelog documenting the full version history of a React PHP cache component, including features, breaking changes, and improvements.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/cache/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 1.2.0 (2022-11-30)\n\n*   Feature: Support PHP 8.1 and PHP 8.2.\n    (#47 by @SimonFrings and #52 by @WyriHaximus)\n\n*   Minor documentation improvements.\n    (#48 by @SimonFrings and #51 by @nhedger)\n\n*   Update test suite and use GitHub actions for continuous integration (CI).\n    (#45 and #49 by @SimonFrings and #54 by @clue)\n\n## 1.1.0 (2020-09-18)\n\n*   Feature: Forward compatibility with react/promise 3.\n    (#39 by @WyriHaximus)\n\n*   Add `.gitattributes` to exclude dev files from exports.\n    (#40 by @reedy)\n\n*   Improve test suite, update to support PHP 8 and PHPUnit 9.3.\n    (#41 and #43 by @SimonFrings and #42 by @WyriHaximus)\n\n## 1.0.0 (2019-07-11)\n\n*   First stable LTS release, now following [SemVer](https://semver.org/).\n    We'd like to emphasize that this component is production ready and battle-tested.\n    We plan to support all long-term support (LTS) releases for at least 24 months,\n    so you have a rock-solid foundation to build on top of.\n\n>   Contains no other changes, so it's actually fully compatible with the v0.6.0 release.\n```\n\n----------------------------------------\n\nTITLE: Installing CI Detector via Composer\nDESCRIPTION: Command to install the CI Detector library using Composer package manager\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/ondram/ci-detector/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require ondram/ci-detector\n```\n\n----------------------------------------\n\nTITLE: Removing SetListInterface Implementation\nDESCRIPTION: Example showing how to update custom set lists by removing the deprecated SetListInterface.\nSOURCE: https://github.com/rectorphp/rector/blob/main/UPGRADING.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n-use Rector\\Set\\Contract\\SetListInterface;\n\n-final class YourSetList implements SetListInterface\n+final class YourSetList\n```\n\n----------------------------------------\n\nTITLE: Generating a diff using the Differ class\nDESCRIPTION: Illustrates how to use the Differ class to generate a textual representation of the difference between two strings.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/sebastian/diff/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Diff\\Differ;\n\n$differ = new Differ;\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit tests excluding internet-dependent tests\nDESCRIPTION: This command runs the PHPUnit test suite for the React Stream library, excluding tests that require an internet connection.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/stream/README.md#2025-04-16_snippet_32\n\nLANGUAGE: Bash\nCODE:\n```\nvendor/bin/phpunit --exclude-group internet\n```\n\n----------------------------------------\n\nTITLE: Resolving Localhost with PHP DNS Resolver\nDESCRIPTION: Example showing how to resolve localhost using the DNS resolver. The resolver returns a promise that resolves with the IP address.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/react/dns/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$resolver->resolve('localhost')->then(function ($ip) {\n    echo 'IP: ' . $ip;\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Rector Source Repository\nDESCRIPTION: Commands to fork and clone the rector-src repository to start contributing.\nSOURCE: https://github.com/rectorphp/rector/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your-name>/rector-src.git\ncd rector-src\n```\n\n----------------------------------------\n\nTITLE: Initializing NDJSON Encoder with Basic Usage\nDESCRIPTION: Demonstrates how to initialize and use the NDJSON Encoder with a writable stream to encode PHP arrays into NDJSON format.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$stdout = new React\\Stream\\WritableResourceStream(STDOUT);\n\n$ndjson = new Clue\\React\\NDJson\\Encoder($stdout);\n\n$ndjson->write(array('name' => 'test', 'active' => true));\n$ndjson->write(array('name' => 'hello wörld', 'active' => true));\n```\n\n----------------------------------------\n\nTITLE: Converting All setcookie() Parameters to Options Array in PHP 7.3\nDESCRIPTION: Converts all parameters of setcookie() to the corresponding options array format introduced in PHP 7.3.\nSOURCE: https://github.com/rectorphp/rector/blob/main/docs/rector_rules_overview.md#2025-04-16_snippet_194\n\nLANGUAGE: diff\nCODE:\n```\n-setcookie('name', $name, 0, '', '', true, true);\n+setcookie('name', $name, ['expires' => 0, 'path' => '', 'domain' => '', 'secure' => true, 'httponly' => true]);\n```\n\n----------------------------------------\n\nTITLE: Stream Close Event Handling\nDESCRIPTION: Shows how to handle stream closure events in the NDJSON Encoder.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->on('close', function () {\n    // stream closed\n    // possibly after an \"end\" event or due to an \"error\" event\n});\n```\n\n----------------------------------------\n\nTITLE: Running Rector CLI Command\nDESCRIPTION: Command to execute Rector from the vendor directory to perform the configured code transformations.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/rector/rector-downgrade-php/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/rector\n```\n\n----------------------------------------\n\nTITLE: Ending NDJSON Stream\nDESCRIPTION: Demonstrates how to properly end an NDJSON stream using the end() method.\nSOURCE: https://github.com/rectorphp/rector/blob/main/vendor/clue/ndjson-react/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$ndjson->end();\n```"
  }
]