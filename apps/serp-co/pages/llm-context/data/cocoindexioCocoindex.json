[
  {
    "owner": "cocoindex-io",
    "repo": "cocoindex",
    "content": "TITLE: Defining a Text Embedding Flow with CocoIndex - Python\nDESCRIPTION: Defines a CocoIndex flow named \"TextEmbedding\" that reads local Markdown files, splits document content into chunks, creates vector embeddings using a Sentence Transformer model, and stores the resulting vectors in a Postgres-backed index. Dependencies include the CocoIndex SDK, installed Python libraries, and a running Postgres database with pgvector. Key parameters include source file path, chunk size and overlap, model selection, and export configuration. The input is a directory of Markdown files and the output is a vector index; the flow is highly configurable for custom data and models.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\"TextEmbedding\")\ndef text_embedding_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\n    # Add a data source to read files from a directory\n    data_scope[\"documents\"] = flow_builder.add_source(cocoindex.sources.LocalFile(path=\"markdown_files\"))\n\n    # Add a collector for data to be exported to the vector index\n    doc_embeddings = data_scope.add_collector()\n\n    # Transform data of each document\n    with data_scope[\"documents\"].row() as doc:\n        # Split the document into chunks, put into `chunks` field\n        doc[\"chunks\"] = doc[\"content\"].transform(\n            cocoindex.functions.SplitRecursively(),\n            language=\"markdown\", chunk_size=2000, chunk_overlap=500)\n\n        # Transform data of each chunk\n        with doc[\"chunks\"].row() as chunk:\n            # Embed the chunk, put into `embedding` field\n            chunk[\"embedding\"] = chunk[\"text\"].transform(\n                cocoindex.functions.SentenceTransformerEmbed(\n                    model=\"sentence-transformers/all-MiniLM-L6-v2\"))\n\n            # Collect the chunk into the collector.\n            doc_embeddings.collect(filename=doc[\"filename\"], location=chunk[\"location\"],\n                                   text=chunk[\"text\"], embedding=chunk[\"embedding\"])\n\n    # Export collected data to a vector index.\n    doc_embeddings.export(\n        \"doc_embeddings\",\n        cocoindex.storages.Postgres(),\n        primary_key_fields=[\"filename\", \"location\"],\n        vector_indexes=[\n            cocoindex.VectorIndexDef(\n                field_name=\"embedding\",\n                metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])\n```\n\n----------------------------------------\n\nTITLE: Declaring a CocoIndex Flow using Decorator - CocoIndex Python\nDESCRIPTION: Demonstrates how to declare a CocoIndex flow definition by decorating a function with @cocoindex.flow_def. This registers the function as a flow definition, accepting FlowBuilder and DataScope as parameters. Flow logic should be defined within the function, with all fields added to the data_scope object. Required dependency: cocoindex package. Expected input: FlowBuilder and DataScope objects. Output: Registration of a flow definition within CocoIndex's internal flow registry; returns a Flow object when registered.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Text with SentenceTransformer in CocoIndex (Plaintext)\nDESCRIPTION: Explains the `SentenceTransformerEmbed` function, used to generate vector representations of text using a HuggingFace SentenceTransformer model. It requires the model name and accepts optional arguments for configuring the model constructor. The function processes a given input string and outputs a vector of float32 values, dimensioned by the transformer model selected. Prerequisites include installation of relevant transformer libraries, and the choice of model may affect output compatibility.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/functions.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSentenceTransformerEmbed embeds a text into a vector space using the SentenceTransformer library.\n\nThe spec takes the following fields:\n\n*   model (type: str, required): The name of the SentenceTransformer model to use.\n*   args (type: dict[str, Any], optional): Additional arguments to pass to the SentenceTransformer constructor. e.g. {\"trust_remote_code\": True}\n\nInput data:\n\n*   text (type: str, required): The text to embed.\n\nReturn type: vector[float32; N], where N is determined by the model\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL with pgvector\nDESCRIPTION: Installs and configures PostgreSQL 17 with pgvector extension, creates necessary user and database\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Update package lists\n!sudo apt-get update\n\n# Install PostgreSQL setup helper\n!sudo apt install -y postgresql-common\n\n# Automatically press Enter for the setup script\n!yes \"\" | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\n\n# Install PostgreSQL 17 and pgvector extension\n!sudo apt install -y postgresql-17 postgresql-17-pgvector\n\n# Start PostgreSQL service\n!sudo service postgresql start\n\n# Create user and database for cocoindex\n!sudo -u postgres psql -c \"CREATE USER cocoindex WITH PASSWORD 'cocoindex';\"\n!sudo -u postgres createdb cocoindex -O cocoindex\n\n# Enable the pgvector extension\n!sudo -u postgres psql -d cocoindex -c \"CREATE EXTENSION IF NOT EXISTS vector;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Executor Class for Specified Function in CocoIndex Python SDK\nDESCRIPTION: Shows how to implement an executor class for a function defined by a FunctionSpec, using the @cocoindex.op.executor_class() decorator. The executor maintains a reference to its spec, can optionally provide a prepare() method for one-time setup (such as loading ML models), and must implement __call__ to process each data input. This approach supports rich configuration and setup logic for complex operations.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/custom_function.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@cocoindex.op.executor_class(...)\nclass ComputeSomethingExecutor:\n    spec: ComputeSomething\n    ...\n\n    def prepare(self) -> None:\n        ...\n\n    def __call__(self, arg1: str, arg2: int | None = None) -> str:\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom FunctionSpec Class for CocoIndex in Python\nDESCRIPTION: This snippet illustrates how to define a custom FunctionSpec class by subclassing cocoindex.op.FunctionSpec. All fields in the class represent configurable parameters, must be serializable by the standard json module, and support instantiation similar to dataclasses. Use this pattern for functions that require configuration and preparation logic before execution.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/custom_function.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ComputeSomething(cocoindex.op.FunctionSpec):\n    \"\"\"\n    Documentation for the function.\n    \"\"\"\n    param1: str\n    param2: int | None = None\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Data via CocoIndex Flow (Python)\nDESCRIPTION: Defines a CocoIndex flow using the flow_def decorator. Inside the demo_flow function, a collector is instantiated and configured to export data to an external storage specified by DemoStorageSpec. Primary key and vector index fields are configured, with optional user-managed setup and target options. Dependencies include the cocoindex Python package and a supported storage backend. Parameters include name, target_spec, primary_key_fields, and vector_indexes. Output is the transmission of collected data to configured storage with managed indexing. Limitation: Must run at the flow's top level, not inside child scopes.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\n    ...\n    demo_collector = data_scope.add_collector()\n    ...\n    demo_collector.export(\n        \\\"demo_storage\\\", DemoStorageSpec(...),\n        primary_key_fields=[\\\"field1\\\"],\n        vector_indexes=[cocoindex.VectorIndexDef(\\\"field2\\\", cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a CocoIndex Flow - Python\nDESCRIPTION: Defines a new CocoIndex flow using the @cocoindex.flow_def decorator and creates a corresponding cocoindex.Flow object. This pattern is required before running or updating flows using either the CLI or SDK. The function takes a FlowBuilder and DataScope as parameters, which determine the flow logic and data boundaries. The snippet omits the specific flow logic (denoted by ...). Dependencies include the cocoindex library; it's expected this resides in a Python file such as main.py. Inputs: flow definition parameters. Outputs: registers flow and creates a Flow object.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\"DemoFlow\")\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Collecting Data with DataScope Collector and UUID Fields - CocoIndex Python\nDESCRIPTION: Illustrates the use of data_scope.add_collector() to create a collector, and collect method to gather per-row entries. The collector aggregates data such as 'filename' and 'summary', along with a UUID-generated id that is stable across unchanged inputs. Inputs: DataScope, collector, GeneratedField.UUID, per-row fields. Outputs: For each row in documents, a collected entry with specified content. Limitation: Only one UUID field may be present in collected fields.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    ...\\n    demo_collector = data_scope.add_collector()\\n    with data_scope[\\\"documents\\\"].row() as document:\\n        ...\\n        demo_collector.collect(id=cocoindex.GeneratedField.UUID,\\n                               filename=document[\\\"filename\\\"],\\n                               summary=document[\\\"summary\\\"])\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Triggering One-Time Flow Update from CLI - Shell\nDESCRIPTION: Invokes the cocoindex update command via the CLI to create or update data in the target storage for one-time synchronization. This operation reads source data and ensures the target is current at invocation time. It requires a Python script (main.py) properly set up with a registered flow and main entry point. No parameters are needed beyond the command; outputs are written to the storage as determined by the flow. Limitations: only runs up to current source state, not continuous.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython main.py cocoindex update\n\n```\n\n----------------------------------------\n\nTITLE: Embedding the Main Function with CocoIndex CLI in Python\nDESCRIPTION: This snippet demonstrates how to decorate a Python main function with the cocoindex.main_fn() decorator. When the script is executed with \\\"cocoindex\\\" as its first argument, the CocoIndex CLI takes control. The example assumes cocoindex is installed and does not require explicit CLI argument parsing within your script. Key parameters: you may customize the command trigger via the cocoindex_cmd argument on the decorator. Inputs are command-line arguments; outputs are handled by the CLI.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/cli.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport cocoindex\n\n@cocoindex.main_fn()\ndef main():\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Custom Function with CocoIndex Decorator in Python\nDESCRIPTION: This snippet demonstrates how to implement a simple custom function for CocoIndex by decorating a Python function with @cocoindex.op.function(). All arguments and the return type must be explicitly annotated to ensure CocoIndex understands data types. No additional class-based configuration is needed, making this pattern suitable for simple cases where no extra setup is required. Optional parameters for the decorator can be provided to control behavior such as caching.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/custom_function.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@cocoindex.op.function(...)\ndef compute_something(arg1: str, arg2: int | None = None) -> str:\n    \"\"\"\n    Documentation for the function.\n    \"\"\"\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up CocoIndex\nDESCRIPTION: Runs the setup process for CocoIndex using the main Python script. This initializes the necessary configurations and prepares the environment for indexing.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Running CocoIndex Main Application\nDESCRIPTION: This command runs the main CocoIndex application using the main.py script. It starts the core functionality of CocoIndex.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/pdf_embedding/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installs Cocoindex and python-dotenv packages using pip\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install cocoindex python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in Custom Function Decorators for CocoIndex Python SDK\nDESCRIPTION: This pair of snippets shows how to enable result caching and specify behavior versioning for both standalone functions and executor-based patterns using the cache and behavior_version parameters. When enabled, repeated function calls with identical inputs reuse cached results unless the behavior_version changes, at which point the cache is invalidated. This is especially useful for computationally intensive functions.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/custom_function.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@cocoindex.op.function(cache=True, behavior_version=1)\ndef compute_something(arg1: str, arg2: int | None = None) -> str:\n    ...\n\n```\n\nLANGUAGE: Python\nCODE:\n```\nclass ComputeSomething(cocoindex.op.FunctionSpec):\n    ...\n\n@cocoindex.op.executor_class(cache=True, behavior_version=1)\nclass ComputeSomethingExecutor:\n    spec: ComputeSomething\n\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting DataScope Fields - CocoIndex Python\nDESCRIPTION: Shows how to access and create new fields in a DataScope using the [] operator, add a 'documents' field from an imported source, and process its rows. For each row, demonstrates how to get and transform a 'content' field to produce a 'summary' field. Inputs: FlowBuilder, DataScope, DemoSourceSpec, DemoFunctionSpec. Outputs: Fields and transformations incorporated into scoped data. Cannot override existing fields.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n\\n    # Add \\\"documents\\\" to the top-level data scope.\\n    data_scope[\\\"documents\\\"] = flow_builder.add_source(DemoSourceSpec(...))\\n\\n    # Each row of \\\"documents\\\" is a child scope.\\n    with data_scope[\\\"documents\\\"].row() as document:\\n\\n        # Get \\\"content\\\" from the document scope, transform, and add \\\"summary\\\" to scope.\\n        document[\\\"summary\\\"] = field1_row[\\\"content\\\"].transform(DemoFunctionSpec(...))\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Text Embedding Flow\nDESCRIPTION: Implementation of the text embedding flow that handles file reading, chunking, and embedding generation\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\"TextEmbedding\")\ndef text_embedding_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\n    data_scope[\"documents\"] = flow_builder.add_source(\n        cocoindex.sources.LocalFile(path=\"markdown_files\"))\n\n    doc_embeddings = data_scope.add_collector()\n\n    with data_scope[\"documents\"].row() as doc:\n        doc[\"chunks\"] = doc[\"content\"].transform(\n            cocoindex.functions.SplitRecursively(),\n            language=\"markdown\", chunk_size=2000, chunk_overlap=500)\n\n        with doc[\"chunks\"].row() as chunk:\n            chunk[\"embedding\"] = chunk[\"text\"].transform(\n                cocoindex.functions.SentenceTransformerEmbed(\n                    model=\"sentence-transformers/all-MiniLM-L6-v2\"))\n\n            doc_embeddings.collect(filename=doc[\"filename\"], location=chunk[\"location\"],\n                                   text=chunk[\"text\"], embedding=chunk[\"embedding\"])\n\n    doc_embeddings.export(\n        \"doc_embeddings\",\n        cocoindex.storages.Postgres(),\n        primary_key_fields=[\"filename\", \"location\"],\n        vector_indexes=[\n            cocoindex.VectorIndexDef(\n                field_name=\"embedding\",\n                metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])\n```\n\n----------------------------------------\n\nTITLE: Setting up CocoIndex\nDESCRIPTION: Command to initialize and setup the CocoIndex environment\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs the project dependencies using pip in editable mode.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct Type in Python for CocoIndex\nDESCRIPTION: This code snippet demonstrates how to define a struct type in Python using a dataclass for use with CocoIndex. It creates an 'Order' class with three fields: order_id, name, and price, each annotated with its specific type.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/data_types.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Order:\n    order_id: str\n    name: str\n    price: float\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function\nDESCRIPTION: Main function implementation for handling user queries and displaying search results\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.main_fn()\ndef _main():\n    while True:\n        try:\n            query = input(\"Enter search query (or Enter to quit): \")\n            if query == '':\n                break\n            results, _ = query_handler.search(query, 10)\n            print(\"\\nSearch results:\")\n            for result in results:\n                print(f\"[{result.score:.3f}] {result.data['filename']}\")\n                print(f\"    {result.data['text']}\")\n                print(\"---\")\n            print()\n        except KeyboardInterrupt:\n            break\n\nif __name__ == \"__main__\":\n    _main()\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Command to connect to the CocoIndex PostgreSQL database using psql\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql postgres://cocoindex:cocoindex@localhost/cocoindex\n```\n\n----------------------------------------\n\nTITLE: Starting CocoInsight Server with Live Updates\nDESCRIPTION: Launches the CocoInsight server with live index updates enabled.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io -L\n```\n\n----------------------------------------\n\nTITLE: Importing Source Data with Refresh Interval - CocoIndex Python\nDESCRIPTION: Demonstrates using the refresh_interval argument with add_source to specify how often the source should be refreshed in live update mode. refresh_interval must be a datetime.timedelta object. The snippet shows setting one minute as the refresh interval. Required modules: datetime, cocoindex, and DemoSourceSpec. Inputs: Source spec and refresh interval. Outputs: Data source auto-refreshes at configured intervals.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    data_scope[\\\"documents\\\"] = flow_builder.add_source(\\n        DemoSourceSpec(...), refresh_interval=datetime.timedelta(minutes=1))\\n    ......\\n\n```\n\n----------------------------------------\n\nTITLE: Registering a CocoIndex Flow using add_flow_def Method - CocoIndex Python\nDESCRIPTION: Shows how to define and register a CocoIndex flow definition explicitly by passing a function to cocoindex.flow.add_flow_def. This approach allows dynamic naming or conditional registration. The flow definition must conform to the required interface (accepting FlowBuilder and DataScope). Prerequisite: cocoindex module import. Inputs: FlowBuilder and DataScope. The snippet binds a Flow object to demo_flow after registration. Limitations: Must manually handle flow name and registration.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef demo_flow_def(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    ...\\n\\n# Add the flow definition to the flow registry.\\ndemo_flow = cocoindex.flow.add_flow_def(\\\"DemoFlow\\\", demo_flow_def)\\n\n```\n\n----------------------------------------\n\nTITLE: Importing from Source with FlowBuilder.add_source - CocoIndex Python\nDESCRIPTION: Illustrates obtaining an external data source in a CocoIndex flow by assigning the result of flow_builder.add_source to a field in data_scope. The method requires a source spec argument and can only be used at the flow's top level. Dependencies: DemoSourceSpec and cocoindex. Inputs: Source spec; flow builder and top data_scope. Output: Creates a DataSlice referencing the imported data. Limitation: Actual data is only available at runtime.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    data_scope[\\\"documents\\\"] = flow_builder.add_source(DemoSourceSpec(...))\\n    ......\\n\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL with Docker Compose\nDESCRIPTION: Command to start a PostgreSQL database with pgvector extension using Docker Compose\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f <(curl -L https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/dev/postgres.yaml) up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cocoindex\nDESCRIPTION: Initializes the Cocoindex setup process.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex Dependencies - Bash\nDESCRIPTION: Installs Python dependencies for CocoIndex in editable mode using pip. Requires Python and pip to be installed. The '-e' flag enables development mode, allowing live code changes to reflect immediately when running locally. Run this from the project root directory where setup.py resides. Outputs installation progress and any errors encountered.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/code_embedding/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI LLM Integration in Python\nDESCRIPTION: Creates an LlmSpec configuration for using OpenAI's LLM API with CocoIndex. Requires OPENAI_API_KEY environment variable to be set.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ai/llm.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncocoindex.LlmSpec(\n    api_type=cocoindex.LlmApiType.OPENAI,\n    model=\"gpt-4o\",\n)\n```\n\n----------------------------------------\n\nTITLE: Managing FlowLiveUpdater Lifecycle - Python\nDESCRIPTION: Demonstrates manual lifecycle management for a FlowLiveUpdater instance. The code snippet shows creation from a flow object, custom user logic (omitted for brevity), stats reporting, abort, and async waiting for shutdown completion. This pattern is recommended for complex scenarios where user code interacts with the updater. Requires async context and cocoindex library. Inputs: flow instance. Outputs: stats (via update_stats()), safe shutdown.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmy_updater = cocoindex.FlowLiveUpdater(demo_flow)\n\n# Perform your own logic (e.g. a query loop).\n...\n\n# Print the update stats.\nprint(my_updater.update_stats())\n# Abort the updater.\nmy_updater.abort()\n# Wait for the updater to finish.\nawait my_updater.wait()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Embedding Function\nDESCRIPTION: Defines a function to convert text into embeddings using SentenceTransformer model\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef text_to_embedding(text: cocoindex.DataSlice) -> cocoindex.DataSlice:\n    \"\"\"\n    Embed the text using a SentenceTransformer model.\n    This is shared logic between indexing and querying.\n    \"\"\"\n    return text.transform(\n        cocoindex.functions.SentenceTransformerEmbed(\n            model=\"sentence-transformers/all-MiniLM-L6-v2\"))\n```\n\n----------------------------------------\n\nTITLE: Starting CocoInsight Server\nDESCRIPTION: Launches the CocoInsight server with configuration pointing to cocoindex.io.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Explicitly Initializing CocoIndex with Custom Settings in Python\nDESCRIPTION: Demonstrates manual initialization of the CocoIndex library using the init() function with custom settings. The database_url is explicitly specified via cocoindex.Settings, providing more flexibility for advanced configuration. Requires the 'cocoindex' Python package. Inputs include the settings object, particularly the database_url. Outputs depend on subsequent library usage. Environment variable support is optional in this pattern.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/initialization.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cocoindex\\n\\ndef main():\\n  ...\\n  cocoindex.init(cocoindex.Settings(database_url=\"postgres://cocoindex:cocoindex@localhost/cocoindex\"))\\n  ...\\n\\n...\\nif __name__ == \"__main__\":\\n  main()\n```\n\n----------------------------------------\n\nTITLE: Using FlowLiveUpdater as Async Context Manager - Python\nDESCRIPTION: Illustrates using FlowLiveUpdater in an async context manager to ensure proper resource cleanup and shutdown. When the block exits, the updater aborts and waits automatically. This method is ideal for concise, safe live update workflows. Requires Python async context (async with), and a demo_flow object. Outputs: update stats printed within context.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync with cocoindex.FlowLiveUpdater(demo_flow) as my_updater:\n    # Perform your own logic (e.g. a query loop).\n    ...\n    print(my_updater.update_stats())\n\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex Dependencies\nDESCRIPTION: This command installs the necessary dependencies for CocoIndex using pip. The -e flag installs the package in editable mode, which is useful for development.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/pdf_embedding/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model via Command Line\nDESCRIPTION: Command to pull and install an LLM model using Ollama's CLI tool\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ai/llm.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull llama3.2\n```\n\n----------------------------------------\n\nTITLE: Running CocoInsight server with Python\nDESCRIPTION: This command starts the CocoInsight server, connecting to a specified CocoIndex URL.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Row-wise Operation using row() Context Manager - CocoIndex Python\nDESCRIPTION: Demonstrates using the row() method to iterate over table-type data slices, with a context manager for each row. Allows per-row operations, such as transforming fields and adding results to the row scope. Dependencies: DataScope, DemoFunctionSpec, table1 with Table type. Input: DataScope and a data slice representing a table. Output: Field2 computed for each row based on transforming field1.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n  ...\\n  with data_scope[\\\"table1\\\"].row() as table1_row:\\n    # Children operations\\n    table1_row[\\\"field2\\\"] = table1_row[\\\"field1\\\"].transform(DemoFunctionSpec(...))\\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating and Dumping Flow Results via Python SDK - Python\nDESCRIPTION: Uses the evaluate_and_dump() method on the demo_flow object to run the transformation logic and dump the results to a directory, without updating the persistent storage. Takes an EvaluateAndDumpOptions dataclass which includes output_dir (required) and use_cache (optional). Requires cocoindex library and a registered flow; executes in a regular Python environment. Inputs: options dataclass. Outputs: files in the provided output directory.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndemo_flow.evaluate_and_dump(EvaluateAndDumpOptions(output_dir=\"./eval_output\"))\n\n```\n\n----------------------------------------\n\nTITLE: Running Main Application\nDESCRIPTION: Starts the main application that monitors Google Drive changes and updates the index.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Using FlowLiveUpdater as Sync Context Manager - Python\nDESCRIPTION: Shows FlowLiveUpdater used in a synchronous context manager setup (without 'async'), suitable for synchronous function bodies. When the context ends, the updater aborts and waits automatically. Requires an initialized demo_flow and the cocoindex library. Inputs: as above. Outputs: block-scoped updater with automatic cleanup.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith cocoindex.FlowLiveUpdater(demo_flow) as my_updater:\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Building Static Content with Docusaurus - Shell\nDESCRIPTION: Generates the static site files for deployment using 'yarn build'. Requires a working Docusaurus configuration and installed dependencies. No parameters needed. Output is written to the 'build' directory, containing all HTML, JS, and assets needed for static hosting. Useful before deploying or previewing the final site.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL\nDESCRIPTION: Command to set the PostgreSQL database URL environment variable\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport COCOINDEX_DATABASE_URL=\"postgresql://cocoindex:cocoindex@localhost:5432/cocoindex\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating a FlowLiveUpdater with Options - Python\nDESCRIPTION: Creates a FlowLiveUpdater instance from a cocoindex.Flow object to enable live updates, with optional configurations for live mode and stats printing. The FlowLiveUpdater provides a unified interface for both one-time and live updates. Optionally, takes a FlowLiveUpdaterOptions object (shown with print_stats=True) to enable periodic stats output. Requires flow and cocoindex library; typically part of an async workflow.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmy_updater = cocoindex.FlowLiveUpdater(\n    demo_flow, cocoindex.FlowLiveUpdaterOptions(print_stats=True))\n\n```\n\n----------------------------------------\n\nTITLE: Performing One-Time Flow Update using Python SDK - Python\nDESCRIPTION: Performs a one-time data transformation and update using the demo_flow cocoindex.Flow object via its async update() method. This ensures the target storage reflects the current source data at the time of execution. The snippet prints returned stats for inspection. Requires the flow object to be initialized and available. Inputs: none (uses flow setup). Outputs: update stats (structure depends on flow). Should be run in an async context.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstats = await demo_flow.update()\nprint(stats)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Entry to the CocoIndex Auth Registry (Python)\nDESCRIPTION: Creates an AuthEntry in the CocoIndex in-memory registry for authentication management. The cocoindex.add_auth_entry function registers a key and connection spec (here, Neo4jConnectionSpec), returning an AuthEntryReference object for use in flows and specs. Requires the cocoindex Python library and backend provider (Neo4j in this example). Inputs include a key string and a connection spec; output is a reusable reference object. Limitation: Auth keys must remain stable to ensure persistent backend identification.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_graph_conn = cocoindex.add_auth_entry(\n    \\\"my_graph_conn\\\",\n    cocoindex.storages.Neo4jConnectionSpec(\n            uri=\\\"bolt://localhost:7687\\\",\\n            user=\\\"neo4j\\\",\\n            password=\\\"cocoindex\\\",\\n    ))\n```\n\n----------------------------------------\n\nTITLE: Evaluating Flow via CLI without Persistence - Shell\nDESCRIPTION: Executes the cocoindex evaluate subcommand to run the flow's transformation logic and dump outputs to files, without mutating the target storage. Uses --output-dir to specify custom output folder. Helpful for debugging, testing, or exporting results. Requires flow registered and main entry in main.py. Inputs: CLI options. Outputs: files in specified directory.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython main.py cocoindex evaluate --output-dir ./eval_output\n\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Text Structure - Syntax Specification - BNF\nDESCRIPTION: This Backus-Naur Form (BNF) snippet defines the grammar for a JSON text, specifying that a JSON text consists of optional whitespace, followed by a value, followed by optional whitespace. It establishes the foundational parse rule for whole JSON documents, assuming that 'ws' and 'value' are defined elsewhere in the specification. Inputs must match this structure for valid JSON according to specifications; whitespace is treated as insignificant.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_0\n\nLANGUAGE: BNF\nCODE:\n```\nJSON-text = ws value ws\n```\n\n----------------------------------------\n\nTITLE: Referencing Auth Entry in a Storage Spec (Python, Object Reference)\nDESCRIPTION: Shows how to use a previously created AuthEntryReference (my_graph_conn) when building a storage spec for export. The connection field of the Neo4jRelationship spec accepts the AuthEntryReference object, ensuring credential reuse without exposing secrets. Requires prior auth entry registration and cocoindex framework. Input is a reference object; output is the included auth in the export specification.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndemo_collector.export(\n    \\\"MyGraph\\\",\n    cocoindex.storages.Neo4jRelationship(connection=my_graph_conn, ...)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CocoIndex via Main Function Decorator in Python\nDESCRIPTION: Wraps your main function with the @cocoindex.main_fn() decorator, providing automatic library initialization using environment variables or defaults. When executed, if the program is run with the cocoindex CLI, the CLI takes control, otherwise the user-defined main workflow is executed. No mandatory parameters. Inputs are indirectly provided through environment variables such as COCOINDEX_DATABASE_URL. Outputs are managed by the main function or CLI. Requires the 'cocoindex' Python package.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/initialization.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport cocoindex\\n\\n@cocoindex.main_fn()\\ndef main():\\n  ...\\n\\nif __name__ == \"__main__\":\\n  main()\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Value Examples\nDESCRIPTION: Three examples of simple JSON values representing the three primary data types: a string, a number, and a boolean. These demonstrate the simplest form of valid JSON data.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"Hello world!\"\n42\ntrue\n```\n\n----------------------------------------\n\nTITLE: Referencing Auth Entry in a Storage Spec (Python, Key String)\nDESCRIPTION: Demonstrates referencing an auth entry by key string using cocoindex.ref_auth_entry, instead of the reference object. Useful when only the key is known or when passing references across code boundaries. Requires cocoindex library; input is a string key; output is an auth reference for the storage spec.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndemo_collector.export(\n    \\\"MyGraph\\\",\n    cocoindex.storages.Neo4jRelationship(connection=cocoindex.ref_auth_entry(\\\"my_graph_conn\\\"), ...))\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama LLM Integration in Python\nDESCRIPTION: Creates an LlmSpec configuration for using Ollama's local LLM API with CocoIndex. Includes optional address configuration for custom endpoints.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ai/llm.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncocoindex.LlmSpec(\n    api_type=cocoindex.LlmApiType.OLLAMA,\n    model=\"llama3.2:latest\",\n    # Optional, use Ollama's default port (11434) on localhost if not specified\n    address=\"http://localhost:11434\",\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Object Example with Nested Structure\nDESCRIPTION: An example of a JSON object containing nested objects and arrays. This demonstrates a typical JSON structure with various data types including strings, numbers, booleans, and arrays.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"Image\": { \"Width\": 800, \"Height\": 600, \"Title\": \"View from 15th Floor\", \"Thumbnail\": { \"Url\": \"http://www.example.com/image/481989943\", \"Height\": 125, \"Width\": 100 }, \"Animated\" : false, \"IDs\": [116, 943, 234, 38793] } }\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structural Characters - Syntax Specification - BNF\nDESCRIPTION: This BNF block maps the six structural characters fundamental to JSON syntax to their respective ASCII codes and meanings. Each line specifies the whitespace-tolerant encoding for left/right square brackets, curly brackets, colon, and comma. These rules ensure JSON parsers correctly recognize and handle these structural characters with optional whitespace as per the specification.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_1\n\nLANGUAGE: BNF\nCODE:\n```\n| begin-array                            |  |  |  | = ws %x5B ws ; [ left square bracket  |\n|----------------------------------------|--|--|--|---------------------------------------|\n| begin-object                           |  |  |  | = ws %x7B ws ; { left curly bracket   |\n| end-array                              |  |  |  | = ws %x5D ws ; ] right square bracket |\n| end-object                             |  |  |  | = ws %x7D ws ; } right curly bracket  |\n| name-separator = ws %x3A ws ; : colon  |  |  |  |                                       |\n| value-separator = ws %x2C ws ; , comma |  |  |  |                                       |\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Array Structure in ABNF - Syntax Specification - ABNF\nDESCRIPTION: Describes the ABNF grammar for a JSON array. This snippet shows how arrays consist of zero or more values separated by commas, without imposing a type constraint on elements. Usage assumes familiarity with ABNF and JSON. Inputs are any valid JSON values, and the output is a well-formed JSON array.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_5\n\nLANGUAGE: ABNF\nCODE:\n```\narray = begin-array [ value *( value-separator value ) ] end-array\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Gemini LLM Integration in Python\nDESCRIPTION: Creates an LlmSpec configuration for using Google's Gemini LLM API with CocoIndex. Requires GEMINI_API_KEY environment variable to be set.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ai/llm.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncocoindex.LlmSpec(\n    api_type=cocoindex.LlmApiType.GEMINI,\n    model=\"gemini-2.0-flash\",\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Data to Qdrant Collection in Python\nDESCRIPTION: This snippet demonstrates how to export document embeddings to a Qdrant collection using CocoIndex. It specifies the collection name, gRPC URL, and API key for authentication.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/storages.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc_embeddings.export(\n    \"doc_embeddings\",\n    cocoindex.storages.Qdrant(\n        collection_name=\"cocoindex\",\n        grpc_url=\"https://xyz-example.cloud-region.cloud-provider.cloud.qdrant.io:6334/\",\n        api_key=\"<your-api-key-here>\",\n    ),\n    primary_key_fields=[\"id_field\"],\n    setup_by_user=True,\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Array Structure Definition\nDESCRIPTION: BNF grammar rules for JSON array structure including value separators.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_3\n\nLANGUAGE: bnf\nCODE:\n```\narray = begin-array [ value *( value-separator value ) ] end-array\n```\n\n----------------------------------------\n\nTITLE: JSON Object Structure Definition\nDESCRIPTION: BNF grammar rules for JSON object structure including member definitions and separators.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_2\n\nLANGUAGE: bnf\nCODE:\n```\nobject = begin-object [ member *( value-separator member ) ] end-object\nmember = string name-separator value\n```\n\n----------------------------------------\n\nTITLE: JSON Object Example with Nested Structure\nDESCRIPTION: Demonstrates a complex JSON object containing nested objects and arrays with various data types including numbers, strings, booleans and arrays.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"Image\": { \"Width\": 800, \"Height\": 600, \"Title\": \"View from 15th Floor\", \"Thumbnail\": { \"Url\": \"http://www.example.com/image/481989943\", \"Height\": 125, \"Width\": 100 }, \"Animated\" : false, \"IDs\": [116, 943, 234, 38793] } }\n```\n\n----------------------------------------\n\nTITLE: Defining Main Entry Point for CLI Access - Python\nDESCRIPTION: Defines the main entry point for the Python application to ensure CLI subcommands work. The @cocoindex.main_fn() decorator is required for binding the entry function; it allows invoking CLI commands such as update or evaluate via python main.py cocoindex <command>. The main() method should include additional logic as needed (here omitted by ...). Inclusion of the if __name__ == \"__main__\": boilerplate ensures the script executes correctly when run as the main module.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.main_fn()\ndef main():\n    ...\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Data via LLM with CocoIndex (Plaintext)\nDESCRIPTION: Covers the `ExtractByLlm` function, which leverages an LLM to extract structured data according to a provided output schema. It requires a detailed LLM specification and clear descriptions for output dataclasses, with optional instructions to optimize extraction accuracy. The function consumes input text and yields data matching the prescribed schema, relying on proper LLMSpec and type hints. Quality of extraction may degrade without sufficiently clear output_type field documentation or for complex/noisy source texts.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/functions.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nExtractByLlm extracts structured information from a text using specified LLM. The spec takes the following fields:\n\n*   llm_spec (type: cocoindex.LlmSpec, required): The specification of the LLM to use. See LLM Spec for more details.\n*   output_type (type: type, required): The type of the output. e.g. a dataclass type name. See Data Types for all supported data types. The LLM will output values that match the schema of the type.\n*   instruction (type: str, optional): Additional instruction for the LLM.\n\nDefinitions of the output_type is fed into LLM as guidance to generate the output.\nTo improve the quality of the extracted information, giving clear definitions for your dataclasses is especially important, e.g.\n\n*   Provide readable field names for your dataclasses.\n*   Provide reasonable docstrings for your dataclasses.\n*   For any optional fields, clearly annotate that they are optional, by SomeType | None or typing.Optional[SomeType].\n\nInput data:\n\n*   text (type: str, required): The text to extract information from.\n\nReturn type: As specified by the output_type field in the spec. The extracted information from the input text.\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variables for CocoIndex\nDESCRIPTION: Command to source a file containing environment variables for debugging purposes, enabling extra traces and development UI features.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/about/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n. ./.env.lib_debug\n```\n\n----------------------------------------\n\nTITLE: Transforming a DataSlice with transform() Method - CocoIndex Python\nDESCRIPTION: Shows the use of the transform() method to produce a new field based on an existing data slice. The snippet applies DemoFunctionSpec with additional positional and keyword arguments. Required types: DemoFunctionSpec and DataScope. Inputs: Existing DataSlice, function spec, and supplemental arguments. Outputs: A new field in the DataScope resulting from the transformation. Can be extended to multiple fields with different specs.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_def.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\\\"DemoFlow\\\")\\ndef demo_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\\n    ...\\n    data_scope[\\\"field2\\\"] = data_scope[\\\"field1\\\"].transform(\\n                               DemoFunctionSpec(...),\\n                               arg1, arg2, ..., key0=kwarg0, key1=kwarg1, ...)\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Maturin for CocoIndex Development\nDESCRIPTION: Command to install Maturin, a build system for Python packages with Rust extensions, which is required for building CocoIndex.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/about/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install maturin\n```\n\n----------------------------------------\n\nTITLE: Invoking the CocoIndex CLI Explicitly in Python\nDESCRIPTION: This snippet shows how to invoke the CocoIndex CLI directly from a Python script using cocoindex.cli.cli.main(args). This approach uses the underlying click.Group command infrastructure and enables passing in custom argument lists programmatically. The code assumes cocoindex is installed and imported correctly. The function expects an iterable of strings as input and launches the command-line interface accordingly.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/cli.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncocoindex.cli.cli.main(args)\n\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with CocoIndex (Plaintext)\nDESCRIPTION: Describes the `ParseJson` function, which takes a string of text and attempts to parse it into a JSON object. The only supported language is currently 'json', and an optional language parameter can be provided for extensibility. The function returns a deserialized JSON structure. Required input is the text to parse, and outputs are valid JSON; failed parsing should result in a relevant error. There are no external dependencies or additional configuration needed, but input must be well-formed JSON.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/functions.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nParseJson parses a given text to JSON.\n\nThe spec takes the following fields:\n\n*   text (type: str, required): The source text to parse.\n*   language (type: str, optional): The language of the source text.  Only json is supported now.  Default to json.\n\nReturn type: Json\n```\n\n----------------------------------------\n\nTITLE: Running CocoIndex CLI Subcommands from the Shell\nDESCRIPTION: This shell command showcases how to invoke the CocoIndex CLI with various subcommands from the command line. It demonstrates listing all flows and getting help for subcommands via python main.py cocoindex <subcommand>. The primary prerequisite is a Python script instrumented with the cocoindex.main_fn() wrapper, and the output will be CLI help text or subcommand results. No additional dependencies beyond Python and cocoindex are required.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/cli.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ python main.py cocoindex ls       # Run \"ls\" subcommand: list all flows\n\n```\n\nLANGUAGE: sh\nCODE:\n```\npython main.py cocoindex --help       # Show all subcommands\npython main.py cocoindex show --help  # Show usage of \"show\" subcommand\n\n```\n\n----------------------------------------\n\nTITLE: Splitting Documents Recursively with CocoIndex (Plaintext)\nDESCRIPTION: Details the `SplitRecursively` function, which divides large documents into smaller, manageable chunks without losing structural coherence. The function prefers splitting at high-level boundaries like sections and only resorts to finer splits like sentences if necessary. Required inputs include the text to split and chunk size; additional configuration allows setting chunk overlap and document language/type. Outputs are provided as a table listing each chunk and its location. The method is robust, working on both code and markdown, but structure awareness depends on supported language heuristics.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/functions.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSplitRecursively splits a document into chunks of a given size.\nIt tries to split at higher-level boundaries. If each chunk is still too large, it tries at the next level of boundaries.\nFor example, for a Markdown file, it identifies boundaries in this order: level-1 sections, level-2 sections, level-3 sections, paragraphs, sentences, etc.\n\nInput data:\n\n*   text (type: str, required): The text to split.\n*   chunk_size (type: int, required): The maximum size of each chunk, in bytes.\n*   chunk_overlap (type: int, optional): The maximum overlap size between adjacent chunks, in bytes.\n*   language (type: str, optional): The language of the document.\n    Can be a langauge name (e.g. Python, Javascript, Markdown) or a file extension (e.g. .py, .js, .md).\n    To see all supported language names and extensions, see the code.\n    If it's unspecified or the specified language is not supported, it will be treated as plain text.\n\nReturn type: Table, each row represents a chunk, with the following sub fields:\n\n*   location (type: range): The location of the chunk.\n*   text (type: str): The text of the chunk.\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaled Dot-Product Attention in LaTeX\nDESCRIPTION: Formula for computing the scaled dot-product attention, which is the core mechanism of the Transformer model. It takes queries Q, keys K, and values V as inputs and produces the attention output.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\text{Attention}(Q, K, V) = \\text{softmax}(\\frac{QK^T}{\\sqrt{d_k}})V\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Head Attention in LaTeX\nDESCRIPTION: Formulas for implementing multi-head attention, which allows the model to attend to information from different representation subspaces. It projects queries, keys, and values h times and performs attention in parallel.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{aligned} \\text{MultiHead}(Q, K, V) &= \\text{Concat}(\\text{head}_1, \\dots, \\text{head}_h) W^O \\\\ \\text{where } \\text{head}_i &= \\text{Attention}(QW_i^Q, KW_i^K, VW_i^V) \\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Implementing Position-wise Feed-Forward Networks in LaTeX\nDESCRIPTION: Formula for the position-wise feed-forward network used in each layer of the encoder and decoder. It consists of two linear transformations with a ReLU activation in between.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\text{FFN}(x) = \\max(0, xW_1 + b_1)W_2 + b_2\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex using pip - Bash\nDESCRIPTION: Installs the latest version of the CocoIndex library from PyPI using pip. This command is required as a first step for setting up any Python environment that will work with CocoIndex. Ensure that you are using Python 3.11 or newer, and that pip is available in the active environment. This command downloads and installs CocoIndex with all default dependencies.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U cocoindex\n```\n\n----------------------------------------\n\nTITLE: Starting Neo4j Database with Docker Compose\nDESCRIPTION: This bash command starts a Neo4j Enterprise instance for CocoIndex using a Docker Compose configuration. It pulls the configuration from the CocoIndex GitHub repository and starts the container in detached mode.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/ops/storages.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f <(curl -L https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/dev/neo4j.yaml) up -d\n```\n\n----------------------------------------\n\nTITLE: Bringing Up a Postgres Database with Docker Compose - Bash\nDESCRIPTION: Downloads and launches a PostgreSQL server (with pgvector extension) using Docker Compose based on a provided YAML configuration from the CocoIndex GitHub repository. This setup is required for running CocoIndex flows that interact with a vector database (embedding storage/retrieval). Dependencies include Docker and Docker Compose. Replace the YAML URL with a local file if you have a custom configuration. This command will start the container in detached mode.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f <(curl -L https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/dev/postgres.yaml) up -d\n```\n\n----------------------------------------\n\nTITLE: Learning Rate Calculation Formula in LaTeX for Transformer Model\nDESCRIPTION: Mathematical formula for the learning rate used in the Transformer model training. The rate increases linearly for the first warmup_steps and then decreases proportionally to the inverse square root of the step number.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n$$lrate = d_{\\text{model}}^{-0.5} \\cdot \\min(step\\_num^{-0.5}, step\\_num \\cdot warmup\\_steps^{-1.5}) \\tag{3}$$\n```\n\n----------------------------------------\n\nTITLE: Implementing Positional Encoding in LaTeX\nDESCRIPTION: Mathematical formulas for the positional encoding used in the Transformer model. It uses sine and cosine functions of different frequencies to inject information about the relative or absolute position of tokens in the sequence.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1706.03762v7.md#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nPE_{(pos,2i)} = \\sin(pos/10000^{2i/d_{\\text{model}}})\n```\n\nLANGUAGE: latex\nCODE:\n```\nPE_{(pos,2i+1)} = \\cos(pos/10000^{2i/d_{\\text{model}}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaled Dot-Product Attention in LaTeX\nDESCRIPTION: Mathematical formula for the scaled dot-product attention mechanism used in the Transformer model. It computes the attention function on a set of queries, keys, and values simultaneously.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1706.03762v7.md#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\text{Attention}(Q, K, V) = \\text{softmax}(\\frac{QK^T}{\\sqrt{d_k}})V \\tag{l}\n```\n\n----------------------------------------\n\nTITLE: Learning Rate Scheduling with Adam Optimizer in LaTeX Formula\nDESCRIPTION: This LaTeX snippet defines the learning rate schedule used for optimizing the Transformer model training with the Adam optimizer. The formula increases the learning rate linearly for the first 'warmup_steps', then decreases it proportionally to the inverse square root of the training step. Required variables include 'd_{model}' (model dimensionality), 'step_num' (current step), and 'warmup_steps'. This implementation is typically referenced in documentation and requires adaptation into code for execution.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1706.03762v7.md#_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\n$$lrate = d_{\\text{model}}^{-0.5} \\cdot \\min(step\\_num^{-0.5}, step\\_num \\cdot warmup\\_steps^{-1.5}) \\tag{3}$$\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex via pip\nDESCRIPTION: Command to install or upgrade CocoIndex using pip package manager\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U cocoindex\n```\n\n----------------------------------------\n\nTITLE: Querying Module Information\nDESCRIPTION: SQL query to retrieve filename, title, and module summary from the modules_info table\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT filename, module_info->'title' AS title, module_summary FROM modules_info;\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Database with Docker Compose\nDESCRIPTION: Command to initialize a PostgreSQL database with pgvector extension using Docker Compose configuration from CocoIndex repository\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f <(curl -L https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/dev/postgres.yaml) up -d\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex Dependencies\nDESCRIPTION: Command to install the CocoIndex package in development mode using pip\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Updating the Embedding Index - Python (CLI via Bash)\nDESCRIPTION: Updates the embedding index by running the CocoIndex update command from the CLI. Assumes prior setup and an accessible codebase to index. This operation parses code using Tree-sitter and updates the underlying Postgres data store. Outputs logs detailing the update process, including any errors or progress metrics.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/code_embedding/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: BERT vs. OpenAI GPT Training Configuration Differences\nDESCRIPTION: Comparison of training configurations between BERT and OpenAI GPT, highlighting key differences in training data, special tokens, batch size, and learning rate strategies that impact model performance.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1810.04805v2.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- GPT is trained on the BooksCorpus (800M words); BERT is trained on the BooksCorpus (800M words) and Wikipedia (2,500M words).\n- GPT uses a sentence separator ([SEP]) and classifier token ([CLS]) which are only introduced at fine-tuning time; BERT learns [SEP], [CLS] and sentence A/B embeddings during pre-training.\n- GPT was trained for 1M steps with a batch size of 32,000 words; BERT was trained for 1M steps with a batch size of 128,000 words.\n- GPT used the same learning rate of 5e-5 for all fine-tuning experiments; BERT chooses a task-specific fine-tuning learning rate which performs the best on the development set.\n```\n\n----------------------------------------\n\nTITLE: Triggering Live Flow Update from CLI - Shell\nDESCRIPTION: Runs the cocoindex update subcommand with the -L flag to enable live update mode from the shell. This causes the process to continuously capture source changes and update the target, provided at least one change capture mechanism is active. Aborts on user interrupt (e.g., Ctrl-C). Requires main.py to be properly configured with a flow and main entry. Inputs: none beyond entrypoint. Outputs: continuous updates to target storage.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/core/flow_methods.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython main.py cocoindex update -L\n\n```\n\n----------------------------------------\n\nTITLE: Starting CocoInsight Server\nDESCRIPTION: Command to start the CocoInsight server with configuration pointing to cocoindex.io\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object Structure - Syntax Specification - BNF\nDESCRIPTION: This snippet provides the grammar for JSON objects, indicating that an object starts with a left curly bracket, contains zero or more members (name/value pairs) separated by value-separators (commas), and ends with a right curly bracket. The 'member' rule details that each member is composed of a string (the name), a name separator (colon), and a value, establishing the required internal structure of JSON objects.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_4\n\nLANGUAGE: BNF\nCODE:\n```\nobject = begin-object [ member *( value-separator member ) ] end-object\nmember = string name-separator value\n```\n\n----------------------------------------\n\nTITLE: Setting up CocoIndex using Python\nDESCRIPTION: This command runs the setup process for CocoIndex using the main.py script.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Numbers - Syntax Specification - BNF\nDESCRIPTION: This comprehensive BNF fragment outlines the syntax rules for JSON numbers, including support for integers and floating-point representations. It defines the recursive structure for optional minus signs, integer and fraction parts, exponent notation with 'e' or 'E', and restricts the character set to digits, decimal points, and sign symbols as per JSON standards. Implementations are expected to reject values not matching these rules, such as those with leading zeros or unsupported numbers like Infinity.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_6\n\nLANGUAGE: BNF\nCODE:\n```\nnumber = [ minus ] int [ frac ] [ exp ]\ndecimal-point = %x2E ; .\ndigit1-9 = %x31-39 ; 1-9\ne = %x65 / %x45 ; e E\nexp = e [ minus / plus ] 1*DIGIT\nfrac = decimal-point 1*DIGIT\nint = zero / ( digit1-9 *DIGIT )\nminus = %x2D ;\nplus = %x2B ; +\nzero = %x30 ; 0\n```\n\n----------------------------------------\n\nTITLE: Setting Up CocoIndex Project - Python (CLI via Bash)\nDESCRIPTION: Initializes the CocoIndex project by invoking the 'setup' command through Python's CLI interface. Requires CocoIndex and its dependencies to be installed. The script configures the environment and prepares the indexing system for first-time use. Expects correct command syntax and access to any required configuration files or environment variables.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/code_embedding/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Object Examples - JSON\nDESCRIPTION: Shows a sample JSON object containing nested objects, arrays, numbers, booleans, and string values. Used to illustrate the structure and syntax of complex JSON objects per RFC 8259. No external dependencies or prerequisites are required, as the snippet is for demonstration—inputs and outputs are the textual JSON itself, usable with any JSON-compliant parser; key properties include nested members like 'Thumbnail' and 'IDs'.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"Image\": { \"Width\": 800, \"Height\": 600, \"Title\": \"View from 15th Floor\", \"Thumbnail\": { \"Url\": \"http://www.example.com/image/481989943\", \"Height\": 125, \"Width\": 100 }, \"Animated\" : false, \"IDs\": [116, 943, 234, 38793] } }\n```\n\n----------------------------------------\n\nTITLE: Serving CocoInsight with Custom Configuration - Python (CLI via Bash)\nDESCRIPTION: Starts the CocoInsight visualization server by specifying a configuration URL. Requires the CocoIndex environment and dependencies to be installed. This enables analysis and understanding of the RAG data pipeline via a web-based user interface. The '-c' flag specifies the server configuration path or URL.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/code_embedding/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Querying all relationships in Neo4j using Cypher\nDESCRIPTION: This Cypher query retrieves all relationships in the Neo4j graph database.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/README.md#_snippet_3\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH p=()-->() RETURN p\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Array of Objects - JSON\nDESCRIPTION: Provides a JSON array containing two object elements, each modeling an address description as per POSTAL or GEO standards. Each object includes keys such as precision, latitude, longitude, city, and country. This example demonstrates array usage and consistent internal schema in JSON arrays; it does not require execution dependencies—input/output is directly the JSON for use in applications or validation tools.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n[\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.7668,\n\"Longitude\": -122.3959,\n\"Address\": \"\",\n\"City\": \"SAN FRANCISCO\",\n\"State\": \"CA\",\n\"Zip\": \"94107\",\n\"Country\": \"US\"\n},\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.371991,\n\"Longitude\": -122.026020,\n\"Address\": \"\",\n\"City\": \"SUNNYVALE\",\n\"State\": \"CA\",\n\"Zip\": \"94085\",\n\"Country\": \"US\"\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container\nDESCRIPTION: Launches a Qdrant container with ports 6333 and 6334 exposed for vector database operations.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 6334:6334 -p 6333:6333 qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Updating Cocoindex\nDESCRIPTION: Updates the vector index with new data.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Number Structure in ABNF - Syntax Specification - ABNF\nDESCRIPTION: Outlines the ABNF rules for representing JSON numbers, supporting integer, floating point, and exponential forms. Dependencies include knowledge of decimal notation and IEEE-754 double precision. Key parameters address leading zeros, optional signs, decimals, and exponent formatting. Inputs are number literals; the output is a grammar-compliant numeric value.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_6\n\nLANGUAGE: ABNF\nCODE:\n```\nnumber = [ minus ] int [ frac ] [ exp ]\ndecimal-point = %x2E ; .\ndigit1-9 = %x31-39 ; 1-9\ne = %x65 / %x45 ; e E\nexp = e [ minus / plus ] 1*DIGIT\nfrac = decimal-point 1*DIGIT\nint = zero / ( digit1-9 *DIGIT )\nminus = %x2D ;\nplus = %x2B ; +\nzero = %x30 ; 0\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration\nDESCRIPTION: Creates a .env file by copying from the example template for configuring Google Drive credentials and folder IDs.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.exmaple .env\n$EDITOR .env\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Whitespace Handling - Syntax Specification - BNF\nDESCRIPTION: This BNF rule defines what is considered insignificant whitespace in JSON. The 'ws' (whitespace) rule matches any sequence of space, tab, line feed (newline), or carriage return characters and allows zero or more occurrences. This ensures JSON parsers can ignore such whitespace as specified.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_2\n\nLANGUAGE: BNF\nCODE:\n```\nws = *( %x20 / ; Space %x09 / ; Horizontal tab %x0A / ; Line feed or New line %x0D ) ; Carriage return\n```\n\n----------------------------------------\n\nTITLE: Setting Up CocoIndex\nDESCRIPTION: Initializes the CocoIndex system setup.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Text Grammar\nDESCRIPTION: Specification of the JSON text grammar, defining it as a value with optional whitespace on either side.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nJSON-text = ws value ws\n```\n\n----------------------------------------\n\nTITLE: Running CocoInsight Server\nDESCRIPTION: Launches the CocoInsight server, which provides insights into the RAG data pipeline. The server is configured to connect to the CocoIndex.io service for additional functionality.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Grammar Whitespace Characters\nDESCRIPTION: Specification of the whitespace characters allowed in JSON syntax, including space, horizontal tab, line feed, and carriage return with their hex values.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nws = *( %x20 / ; Space %x09 / ; Horizontal tab %x0A / ; Line feed or New line %x0D ) ; Carriage return\n```\n\n----------------------------------------\n\nTITLE: Updating CocoIndex\nDESCRIPTION: Updates the CocoIndex with new data or changes. This command should be run whenever there are modifications to the source files that need to be reflected in the index.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: Defining Query Handler\nDESCRIPTION: Setup of the query handler for semantic search using the embedded vectors\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_handler = cocoindex.query.SimpleSemanticsQueryHandler(\n    name=\"SemanticsSearch\",\n    flow=text_embedding_flow,\n    target_name=\"doc_embeddings\",\n    query_transform_flow=lambda text: text.transform(\n        cocoindex.functions.SentenceTransformerEmbed(\n            model=\"sentence-transformers/all-MiniLM-L6-v2\")),\n    default_similarity_metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)\n```\n\n----------------------------------------\n\nTITLE: Running CocoIndex Main Application\nDESCRIPTION: Executes the main CocoIndex application. This command starts the primary functionality of CocoIndex after setup and indexing are complete.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create and navigate to the project directory\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cocoindex-quickstart\ncd cocoindex-quickstart\n```\n\n----------------------------------------\n\nTITLE: Running CocoInsight Server\nDESCRIPTION: This command starts the CocoInsight server, which helps understand the RAG data pipeline. It connects to the CocoIndex.io service for analysis.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/pdf_embedding/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Defining Embedding Flow\nDESCRIPTION: Implements the main flow for processing documents and creating embeddings\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.flow_def(name=\"TextEmbedding\")\ndef text_embedding_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):\n    \"\"\"\n    Define a flow that embeds text into a vector database.\n    \"\"\"\n    data_scope[\"documents\"] = flow_builder.add_source(\n        cocoindex.sources.LocalFile(path=\"markdown_files\"))\n\n    doc_embeddings = data_scope.add_collector()\n\n    with data_scope[\"documents\"].row() as doc:\n        doc[\"chunks\"] = doc[\"content\"].transform(\n            cocoindex.functions.SplitRecursively(),\n            language=\"markdown\", chunk_size=2000, chunk_overlap=500)\n\n        with doc[\"chunks\"].row() as chunk:\n            chunk[\"embedding\"] = text_to_embedding(chunk[\"text\"])\n            doc_embeddings.collect(filename=doc[\"filename\"], location=chunk[\"location\"],\n                                   text=chunk[\"text\"], embedding=chunk[\"embedding\"])\n\n    doc_embeddings.export(\n        \"doc_embeddings\",\n        cocoindex.storages.Postgres(),\n        primary_key_fields=[\"filename\", \"location\"],\n        vector_indexes=[\n            cocoindex.VectorIndexDef(\n                field_name=\"embedding\",\n                metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])\n```\n\n----------------------------------------\n\nTITLE: Updating CocoIndex\nDESCRIPTION: This command updates the CocoIndex using the main.py script. It refreshes the index with any new or changed data.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/pdf_embedding/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration\nDESCRIPTION: Creates a .env file with PostgreSQL connection URL\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%%writefile .env\nCOCOINDEX_DATABASE_URL=\"postgresql://cocoindex:cocoindex@localhost:5432/cocoindex\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Markdown Files\nDESCRIPTION: Creates a directory and downloads sample markdown files for demonstration\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!mkdir -p markdown_files && \\\nwget -P markdown_files https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/examples/text_embedding/markdown_files/1706.03762v7.md && \\\nwget -P markdown_files https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/examples/text_embedding/markdown_files/1810.04805v2.md && \\\nwget -P markdown_files https://raw.githubusercontent.com/cocoindex-io/cocoindex/refs/heads/main/examples/text_embedding/markdown_files/rfc8259.md\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Creates a new collection named 'cocoindex' in Qdrant with a 384-dimensional vector space using Cosine similarity.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl  -X PUT \\\n  'http://localhost:6333/collections/cocoindex' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n  \"vectors\": {\n    \"text_embedding\": {\n      \"size\": 384,\n      \"distance\": \"Cosine\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality\nDESCRIPTION: Sets up query handling and implements the main search function with user interaction\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/Text_Embedding.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@cocoindex.main_fn()\ndef _run():\n    while True:\n        try:\n            query = input(\"Enter search query (or Enter to quit): \")\n            if query == '':\n                break\n            results, _ = query_handler.search(query, 10)\n            print(\"\\nSearch results:\")\n            for result in results:\n                print(f\"[{result.score:.3f}] {result.data['filename']}\")\n                print(f\"    {result.data['text']}\")\n                print(\"---\")\n            print()\n        except KeyboardInterrupt:\n            break\n\nif __name__ == \"__main__\":\n    load_dotenv(override=True)\n    _run()\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs the project dependencies in development mode using pip.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for CocoIndex Development\nDESCRIPTION: Commands to create and activate a Python virtual environment for CocoIndex development. Recommends using Python 3.12.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/about/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvirtualenv --python=$(which python3.12) .venv\n```\n\nLANGUAGE: bash\nCODE:\n```\n. .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Main Application\nDESCRIPTION: Executes the main application.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Importing CocoIndex Library\nDESCRIPTION: Basic import statement for the CocoIndex library\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cocoindex\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex Dependencies\nDESCRIPTION: Installs the required dependencies for CocoIndex using pip. This command installs the package in editable mode, which is useful for development.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing CocoIndex Package\nDESCRIPTION: Command to install the CocoIndex package using pip\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/getting_started/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U cocoindex\n```\n\n----------------------------------------\n\nTITLE: Starting CocoInsight Server\nDESCRIPTION: Launches the CocoInsight server connected to cocoindex.io.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/gdrive_text_embedding/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython main.py cocoindex server -c https://cocoindex.io\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for CocoIndex in Python\nDESCRIPTION: This command installs the CocoIndex package and its dependencies using pip in editable mode.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Value Types - Syntax Specification - BNF\nDESCRIPTION: This snippet specifies the allowable JSON value types and the exact encoding for the 'false', 'null', and 'true' literals using hexadecimal ASCII codes. It formally identifies 'object', 'array', 'number', and 'string' as valid values and constrains the permitted literal names. Any input JSON must conform to one of these definitions for values to be valid.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_3\n\nLANGUAGE: BNF\nCODE:\n```\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65 ; false\nnull = %x6e.75.6c.6c ; null\ntrue = %x74.72.75.65 ; true\n```\n\n----------------------------------------\n\nTITLE: Updating CocoIndex using Python\nDESCRIPTION: This command updates the CocoIndex using the main.py script.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: Defining BERT Model Parameters\nDESCRIPTION: This snippet defines the key parameters for two BERT model sizes: BERTBASE and BERTLARGE. It specifies the number of layers, hidden size, number of self-attention heads, and total parameters for each model.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1810.04805v2.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBERTBASE = {\n    \"L\": 12,  # number of layers\n    \"H\": 768,  # hidden size\n    \"A\": 12,  # number of self-attention heads\n    \"Total Parameters\": \"110M\"\n}\n\nBERTLARGE = {\n    \"L\": 24,\n    \"H\": 1024,\n    \"A\": 16,\n    \"Total Parameters\": \"340M\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Number Format Definition\nDESCRIPTION: BNF grammar rules for JSON number format including integer, fraction, and exponent components.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_4\n\nLANGUAGE: bnf\nCODE:\n```\nnumber = [ minus ] int [ frac ] [ exp ]\ndecimal-point = %x2E       ; .\ndigit1-9 = %x31-39        ; 1-9\ne = %x65 / %x45           ; e E\nexp = e [ minus / plus ] 1*DIGIT\nfrac = decimal-point 1*DIGIT\nint = zero / ( digit1-9 *DIGIT )\nminus = %x2D               ; -\nplus = %x2B                ; +\nzero = %x30                ; 0\n```\n\n----------------------------------------\n\nTITLE: Building CocoIndex Library with Maturin\nDESCRIPTION: Command to build the CocoIndex library in development mode using Maturin. Must be run from the root directory of the CocoIndex project.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/docs/about/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmaturin develop\n```\n\n----------------------------------------\n\nTITLE: Running the CocoIndex Application - Python (CLI via Bash)\nDESCRIPTION: Launches the CocoIndex application with the default configuration, assuming previous setup and index update steps are complete. This will start the main program, likely providing API or UI endpoints for code search and embedding queries. Users should ensure PostgreSQL is running and all configurations are properly set.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/code_embedding/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Site Using SSH - Shell\nDESCRIPTION: Deploys the built static site to the remote repository via SSH by setting 'USE_SSH=true' and running 'yarn deploy'. Prerequisites: SSH keys must be configured in your environment, and 'yarn build' should have been executed. No arguments are needed, but adapts to environments where SSH key-based authentication is preferred for deployment. Outputs deployment status and pushes to the remote branch.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Site with GitHub User Credentials - Shell\nDESCRIPTION: Runs deployment by specifying the GIT_USER environment variable with your GitHub username when executing 'yarn deploy'. Requires build artifacts to be generated with 'yarn build' and credentials set. Used for deploying when SSH is not configured—supports CI/CD environments and standard HTTPS-based GitHub authentication. Output is a built site deployed to the 'gh-pages' branch.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers (search engines and bots) to access all parts of the website. The 'User-agent: *' directive targets all crawlers, and the empty 'Disallow:' directive indicates no restrictions on what content can be crawled.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/static/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Docusaurus - Shell\nDESCRIPTION: Launches a local live-reload development server using 'yarn start', displaying the documentation website in a browser. Requires previously installed dependencies via 'yarn'. No arguments are needed. This command enables real-time preview of documentation changes. Output is a running local server, usually at http://localhost:3000.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn - Shell\nDESCRIPTION: Installs all project dependencies defined in the package.json by executing the 'yarn' command in the project root. Prerequisite: Yarn must be installed. No additional parameters are required. This command prepares the development environment for the Docusaurus site. Outputs dependency installation logs and creates a node_modules directory.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Grammar Structural Characters\nDESCRIPTION: Specification of the six structural characters used in JSON syntax including brackets, braces, colon, and comma, with their corresponding hex values.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| begin-array                            |  |  |  | = ws %x5B ws ; [ left square bracket  |\n|----------------------------------------|--|--|--|---------------------------------------|\n| begin-object                           |  |  |  | = ws %x7B ws ; { left curly bracket   |\n| end-array                              |  |  |  | = ws %x5D ws ; ] right square bracket |\n| end-object                             |  |  |  | = ws %x7D ws ; } right curly bracket  |\n| name-separator = ws %x3A ws ; : colon  |  |  |  |                                       |\n| value-separator = ws %x2C ws ; , comma |  |  |  |                                       |\n```\n\n----------------------------------------\n\nTITLE: Updating CocoIndex\nDESCRIPTION: Command to update the CocoIndex database with new data\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/manuals_llm_extraction/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex update\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Value Literals - JSON\nDESCRIPTION: Shows three standalone JSON value examples: a string, a number, and a boolean. These cases demonstrate that a valid JSON text may be a literal value, not just an object or array; no dependencies or contextual requirements apply. Inputs and outputs correspond to the raw value, parsed directly as string, number, or boolean by any conforming JSON implementation.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"Hello world!\"\n```\n\nLANGUAGE: JSON\nCODE:\n```\n42\n```\n\nLANGUAGE: JSON\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object Structure in ABNF - Syntax Specification - ABNF\nDESCRIPTION: Specifies the grammar for a JSON object using ABNF (Augmented Backus-Naur Form). The snippet defines the overall object structure, member specification, and the use of unique keys. Dependencies include understanding of ABNF and JSON grammar conventions. Inputs are name-value pairs; the output is a syntactically valid object. Care must be taken with member key uniqueness and delimiter placement.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_4\n\nLANGUAGE: ABNF\nCODE:\n```\nobject = begin-object [ member *( value-separator member ) ] end-object\nmember = string name-separator value\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Syntax and Escaping in ABNF - Syntax Specification - ABNF\nDESCRIPTION: Provides the ABNF grammar for JSON strings, including the specification of unescaped and escaped character sequences, valid control characters, and Unicode escapes. Dependency is ABNF and JSON string conventions. Inputs are Unicode character sequences; outputs are valid JSON strings as per escape and encoding rules. Constraints include mandatory escaping for certain characters and proper surrogate pair handling.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_7\n\nLANGUAGE: ABNF\nCODE:\n```\nstring = quotation-mark *char quotation-mark\nchar = unescaped / escape ( %x22 / ; \" quotation mark U+0022\n  %x5C / ; \\ reverse solidus U+005C\n  %x2F / ; / solidus U+002F\n  %x62 / ; b backspace U+0008\n  %x66 / ; f form feed U+000C\n  %x6E / ; n line feed U+000A\n  %x72 / ; r carriage return U+000D\n  %x74 / ; t tab U+0009\n  %x75 4HEXDIG ) ; uXXXX U+XXXX\nescape = %x5C ; \\\nquotation-mark = %x22 ; \"\nunescaped = %x20-21 / %x23-5B / %x5D-10FFFF\n```\n\n----------------------------------------\n\nTITLE: Setting Up CocoIndex\nDESCRIPTION: This command runs the setup process for CocoIndex using the main.py script. It prepares the environment for indexing.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/pdf_embedding/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py cocoindex setup\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Value Grammar\nDESCRIPTION: Specification of the JSON value grammar including literals (false, null, true) and their hex representations, as well as other valid JSON value types.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding_qdrant/markdown_files/rfc8259.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65 ; false\nnull = %x6e.75.6c.6c ; null\ntrue = %x74.72.75.65 ; true\n```\n\n----------------------------------------\n\nTITLE: JSON Basic Grammar Rules\nDESCRIPTION: Core grammatical rules for JSON text structure including whitespace and structural characters.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nJSON-text = ws value ws\n\nbegin-array = ws %x5B ws    ; [ left square bracket\nbegin-object = ws %x7B ws   ; { left curly bracket\nend-array = ws %x5D ws      ; ] right square bracket\nend-object = ws %x7D ws     ; } right curly bracket\nname-separator = ws %x3A ws  ; : colon\nvalue-separator = ws %x2C ws ; , comma\n\nws = *( %x20 /              ; Space\n       %x09 /              ; Horizontal tab\n       %x0A /              ; Line feed or New line\n       %x0D )              ; Carriage return\n```\n\n----------------------------------------\n\nTITLE: JSON Value Types Definition\nDESCRIPTION: BNF grammar rules for JSON value types including literals, objects, arrays, numbers, and strings.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65  ; false\nnull = %x6e.75.6c.6c      ; null\ntrue = %x74.72.75.65      ; true\n```\n\n----------------------------------------\n\nTITLE: JSON Array Example with Geographic Data\nDESCRIPTION: A JSON array containing two objects representing geographic location data. Each object contains properties for precision, coordinates, and address information demonstrating how structured data can be represented in JSON.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.7668,\n\"Longitude\": -122.3959,\n\"Address\": \"\",\n\"City\": \"SAN FRANCISCO\",\n\"State\": \"CA\",\n\"Zip\": \"94107\",\n\"Country\": \"US\"\n},\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.371991,\n\"Longitude\": -122.026020,\n\"Address\": \"\",\n\"City\": \"SUNNYVALE\",\n\"State\": \"CA\",\n\"Zip\": \"94085\",\n\"Country\": \"US\"\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Positional Encoding in LaTeX\nDESCRIPTION: Formulas for computing the positional encoding using sine and cosine functions. These encodings are added to input embeddings to provide information about token positions in the sequence.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nPE_{(pos,2i)} = \\sin(pos/10000^{2i/d_{\\text{model}}})\n```\n\nLANGUAGE: latex\nCODE:\n```\nPE_{(pos,2i+1)} = \\cos(pos/10000^{2i/d_{\\text{model}}})\n```\n\n----------------------------------------\n\nTITLE: Transformer Model Dimensions\nDESCRIPTION: Specification of the model's dimensional parameters, including the number of encoder/decoder layers and output dimension size used throughout the architecture.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nN = 6 identical layers\ndmodel = 512\n```\n\n----------------------------------------\n\nTITLE: Transformer Layer Normalization Formula\nDESCRIPTION: Mathematical formula showing how layer normalization is applied in the Transformer architecture using residual connections. The output of each sublayer is normalized using the LayerNorm function applied to the sum of the input and sublayer function.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/1706.03762v7.md#_snippet_0\n\nLANGUAGE: mathematical\nCODE:\n```\nLayerNorm(x + Sublayer(x))\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Head Attention in LaTeX\nDESCRIPTION: Mathematical formulas for multi-head attention in the Transformer model. It allows the model to jointly attend to information from different representation subspaces at different positions.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1706.03762v7.md#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{aligned} \\text{MultiHead}(Q, K, V) &= \\text{Concat}(\\text{head}_1, \\dots, \\text{head}_h) W^O \\\\ \\text{where } \\text{head}_i &= \\text{Attention}(QW_i^Q, KW_i^K, VW_i^V) \\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Array Structure - Syntax Specification - BNF\nDESCRIPTION: This BNF block prescribes the structure for JSON arrays: an array must begin with a left square bracket, contain zero or more values separated by commas (value-separators), and end with a right square bracket. This syntax allows for heterogeneous or empty arrays, and forms the basis for array validation in JSON parsing implementations.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/text_embedding/markdown_files/rfc8259.md#_snippet_5\n\nLANGUAGE: BNF\nCODE:\n```\narray = begin-array [ value *( value-separator value ) ] end-array\n```\n\n----------------------------------------\n\nTITLE: Implementing Position-wise Feed-Forward Networks in LaTeX\nDESCRIPTION: Mathematical formula for the position-wise feed-forward network used in each layer of the Transformer's encoder and decoder. It consists of two linear transformations with a ReLU activation in between.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1706.03762v7.md#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\text{FFN}(x) = \\max(0, xW_1 + b_1)W_2 + b_2 \\tag{2}\n```\n\n----------------------------------------\n\nTITLE: BERT Fine-tuning Hyperparameter Recommendations\nDESCRIPTION: Recommended hyperparameter ranges for fine-tuning BERT across various NLP tasks, including batch size, learning rate, and number of training epochs. These parameters work well for most tasks, with larger datasets being less sensitive to specific hyperparameter choices.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/1810.04805v2.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<sup>•</sup> Batch size: 16, 32\n\n• Learning rate (Adam): 5e-5, 3e-5, 2e-5\n\n• Number of epochs: 2, 3, 4\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Value Examples\nDESCRIPTION: Demonstrates three basic JSON value types: a string, a number, and a boolean.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"Hello world!\"\n42\ntrue\n```\n\n----------------------------------------\n\nTITLE: JSON Array of Location Objects\nDESCRIPTION: Shows an array containing two location objects with geographic coordinates and address information. Each object contains precise location data including latitude, longitude, and address details.\nSOURCE: https://github.com/cocoindex-io/cocoindex/blob/main/examples/docs_to_knowledge_graph/markdown_files/rfc8259.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.7668,\n\"Longitude\": -122.3959,\n\"Address\": \"\",\n\"City\": \"SAN FRANCISCO\",\n\"State\": \"CA\",\n\"Zip\": \"94107\",\n\"Country\": \"US\"\n},\n{\n\"precision\": \"zip\",\n\"Latitude\": 37.371991,\n\"Longitude\": -122.026020,\n\"Address\": \"\",\n\"City\": \"SUNNYVALE\",\n\"State\": \"CA\",\n\"Zip\": \"94085\",\n\"Country\": \"US\"\n}\n]\n```"
  }
]