[
  {
    "owner": "finbuckle",
    "repo": "finbuckle.website",
    "content": "TITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Demonstrates how to set up Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. It shows adding the services, configuring strategies and stores, and using the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. Configures host strategy for tenant identification and configuration store for tenant details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Services in ASP.NET Core\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services in an ASP.NET Core application. Shows how to add the MultiTenant services, configure host strategy, and add middleware to the application pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Multi-Tenant Authentication in ASP.NET Core\nDESCRIPTION: Demonstrates the basic setup of Finbuckle.MultiTenant with authentication services including cookie and OpenID Connect authentication. Shows the configuration of multi-tenant services with route strategy and per-tenant authentication.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Finbuckle.MultiTenant Services in ASP.NET Core\nDESCRIPTION: Basic setup for registering Finbuckle.MultiTenant services in an ASP.NET Core application. Shows how to add services, configure strategies and stores, and add the middleware to the request pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic setup for Finbuckle.MultiTenant in an ASP.NET Core application. It configures the service with host strategy for tenant identification and configuration store for tenant details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant Services in ASP.NET Core\nDESCRIPTION: Basic setup code for configuring Finbuckle.MultiTenant in an ASP.NET Core application. Demonstrates adding multi-tenant services with host strategy and configuration store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. It shows adding the MultiTenant services, configuring strategies and stores, and using the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic setup for Finbuckle.MultiTenant in an ASP.NET Core application, showing how to register the service, configure strategies and stores, and add the middleware to the request pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. It shows adding the services, configuring strategies and stores, and using the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Databases with Custom Tenant Info in Entity Framework Core\nDESCRIPTION: Demonstrates how to implement a separate database approach by creating a custom ITenantInfo implementation with a ConnectionString property and using it in the DbContext OnConfiguring method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   // AppTenantInfo is the app's custom implementation of ITenantInfo which \n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       // get the current tenant info at the time of construction\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       // use the connection string to connect to the per-tenant database\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example showing how to access the current tenant's information using the MultiTenantContext extension method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options\nDESCRIPTION: Comprehensive example showing various methods to configure per-tenant options including named options, post configuration, and ConfigureAll variants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenants in appsettings.json for Finbuckle.MultiTenant\nDESCRIPTION: This JSON configuration snippet shows how to set up tenant-specific authentication settings in the appsettings.json file. It includes default settings and individual tenant configurations for different authentication schemes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Info in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to set the current tenant information using an HttpContext extension method. It shows creating a new TenantInfo object, setting it, and optionally resetting the service provider scope.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant Services and Middleware\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. Configures host strategy for tenant identification and configuration store for tenant details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Identity DbContext in C#\nDESCRIPTION: Demonstrates how to configure a multi-tenant Identity database context by deriving from MultiTenantIdentityDbContext. This approach uses default entity types and configures all entities as multi-tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMultiTenantIdentityDbContext : MultiTenantIdentityDbContext\n{\n    // Custom configuration here\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant Information via HttpContext Extensions\nDESCRIPTION: Example showing how to retrieve tenant information using the GetMultiTenantContext extension method on HttpContext. This provides access to tenant ID, identifier, name, and custom properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiTenantDbContext in C#\nDESCRIPTION: Example of a BloggingDbContext class that derives from MultiTenantDbContext, showing constructor overloads for dependency injection and manual instantiation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to set up per-tenant authentication in an ASP.NET Core application using Finbuckle.MultiTenant. It includes adding authentication services, configuring Finbuckle.MultiTenant services, and setting up the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Authentication in Finbuckle.MultiTenant\nDESCRIPTION: This code snippet shows how to configure JWT token authentication on a per-tenant basis using Finbuckle.MultiTenant. It demonstrates setting a different recognized authority for token validation for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in a .NET Application\nDESCRIPTION: Basic setup for adding Finbuckle.MultiTenant services to a .NET application using builder pattern, including host strategy and configuration store, and adding the middleware to the request pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant in ASP.NET Core\nDESCRIPTION: This snippet shows how to access the current tenant information using HttpContext extension methods in an ASP.NET Core application. It demonstrates retrieving tenant details and setting a new tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic setup code for configuring Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. Demonstrates adding multi-tenant services with host strategy and configuration store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: This code shows how to set up Finbuckle.MultiTenant with per-tenant authentication. It configures cookie authentication and OpenID Connect, then adds multi-tenant services with route strategy, configuration store, and per-tenant authentication.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Information Manually with HttpContext Extension in ASP.NET Core\nDESCRIPTION: Example of using the HttpContext extension method TrySetTenantInfo<TTenantInfo>() to manually set the current tenant information and optionally reset the service provider scope.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Strategy in C#\nDESCRIPTION: Demonstrates configuring a Delegate Strategy that uses a provided function to determine the tenant. Shows examples with both async and non-async approaches for resolving tenant identifiers.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n    \n // or do it without async\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(context =>\n    {\n        var httpContext = context as HttpContext;\n        if (httpContext == null)\n            return null;\n        \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Defining ITenantInfo Interface in C#\nDESCRIPTION: The ITenantInfo interface defines properties for Id, Identifier, and Name, which are used to represent tenant information throughout the library and app.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITenantInfo\n{\n    string Id { get; }\n    string Identifier { get; }\n    string Name { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant in ASP.NET Core\nDESCRIPTION: This snippet shows how to access the current tenant information using HttpContext extension methods in an ASP.NET Core application. It demonstrates retrieving the TenantInfo object and accessing its properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example code showing how to access the current tenant's information using HttpContext extension methods. Demonstrates retrieving tenant ID, identifier, and name.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Authentication in ASP.NET Core\nDESCRIPTION: This snippet shows how to configure JWT token authentication on a per-tenant basis using Finbuckle.MultiTenant. It demonstrates setting a different authority for token validation for each tenant using per-tenant options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Authentication\nDESCRIPTION: Shows how to configure JWT token validation with different authorities per tenant using per-tenant options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Authentication Options\nDESCRIPTION: This snippet demonstrates how to configure JWT token validation with different authorities per tenant. It uses ConfigurePerTenant to set tenant-specific JWT bearer options based on properties from the TenantInfo object.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Authentication Cookies Per Tenant\nDESCRIPTION: Example of configuring cookie authentication options to give each tenant a unique cookie name. This enables maintaining separate sign-in sessions for different tenants within the same browser by using tenant-specific cookie names.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Interface and Class Definition: ITenantInfo and TenantInfo\nDESCRIPTION: Core interfaces and classes for tenant information handling. ITenantInfo defines required properties like Id, Identifier, and Name, while TenantInfo provides a basic implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITenantInfo\n{\n    string Id { get; set; }\n    string Identifier { get; set; }\n    string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication with Finbuckle.MultiTenant\nDESCRIPTION: Sets up basic authentication services with cookies and OpenID Connect, then configures Finbuckle.MultiTenant with route strategy, configuration store, and per-tenant authentication.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. Configures host strategy for tenant identification and configuration store for tenant details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Basic configuration of Finbuckle.MultiTenant in an ASP.NET Core application, including service registration, strategy and store setup, and middleware configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example showing how to access the current tenant's information from HttpContext using the GetMultiTenantContext extension method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options\nDESCRIPTION: Examples of various methods to configure per-tenant options including named options, post configuration, and all options variants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: ITenantInfo Interface Properties\nDESCRIPTION: Core interface properties that define tenant information including Id (unique identifier), Identifier (resolvable tenant reference), and Name (display name). The interface can be extended with custom properties as needed.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITenantInfo\n{\n    string Id { get; set; }\n    string Identifier { get; set; }\n    string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JWT Authority Per Tenant\nDESCRIPTION: Example of configuring JWT Bearer options per tenant using ConfigurePerTenant method. This allows each tenant to have a different recognized authority for token validation based on the tenant's JwtAuthority property.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Data in MultiTenantDbContext\nDESCRIPTION: Example of adding data to a MultiTenantDbContext, demonstrating automatic tenant association and exception handling for mismatched tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };;\nvar db = new BloggingDbContext(myTenantInfo, null);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n\n// Try to add the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Add(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example showing how to access the current tenant's information using the MultiTenantContext extension method in an ASP.NET Core application.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Code to access current tenant information from the HttpContext in an ASP.NET Core application. It retrieves the TenantInfo object and extracts tenant properties like Id, Identifier, and Name.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle MultiTenant Services in ASP.NET Core\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services and middleware in an ASP.NET Core application. Demonstrates adding MultiTenant services with host strategy and configuration store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Using MultiTenant Attribute for Entity Type Configuration\nDESCRIPTION: Shows how to use the [MultiTenant] attribute to designate entity types that should be isolated per-tenant, and how to implement a DbContext that respects this attribute.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// tenants will only see their own blog posts\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\n// roles will be the same for all tenants\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; } // this will be multi-tenant!\n    public DbSet<Roles> Roles { get; set; } // not multi-tenant!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Names for Multiple Sign-ins\nDESCRIPTION: This code configures tenant-specific cookie names to allow multiple tenant sign-ins simultaneously. By using unique cookie names based on tenant ID, users can maintain active sessions across multiple tenants in the same browser.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Using the MultiTenant Attribute with MultiTenantDbContext\nDESCRIPTION: Demonstrates how to use the [MultiTenant] attribute to designate entity types for per-tenant isolation when using the MultiTenantDbContext base class.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// tenants will only see their own blog posts\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\n// roles will be the same for all tenants\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; } // this will be multi-tenant!\n    public DbSet<Roles> Roles { get; set; } // not multi-tenant!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Cookies Per Tenant in Finbuckle.MultiTenant\nDESCRIPTION: This code snippet demonstrates how to configure separate cookies for each tenant in Finbuckle.MultiTenant. It uses per-tenant options to give each tenant's cookie a different name, allowing multiple tenant sign-ins to coexist.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: Demonstrates the basic setup of per-tenant authentication using Finbuckle.MultiTenant, including authentication services, cookie authentication, and OpenID Connect configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant.AspNetCore Package with .NET Core CLI\nDESCRIPTION: Command for installing the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Multi-tenant Entities in C#\nDESCRIPTION: Demonstrates how entity operations are validated against tenant information. Shows that attempting to modify or delete entities associated with a different tenant will throw a MultiTenantException.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };\nvar db = new BloggingDbContext(myTenantInfo);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n// Modify and attach the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Attach(myBlog);\nmyBlog.Title = \"My Changed Blog\";\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n\ndb.Blogs.Remove(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: Example showing how to add and configure Finbuckle.MultiTenant services and middleware in an ASP.NET Core application startup. This adds basic multi-tenant capabilities with host strategy and configuration store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...add app services\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for multiple tenants with different authentication settings. Defines default paths for login/logout and configures three tenants: MegaCorp with cookie authentication, and ACME and Initech with OpenID Connect authentication and different authorities.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Existing Query Filters with Multi-Tenant Filters\nDESCRIPTION: Demonstrates how to properly combine existing query filters (like soft delete) with multi-tenant query filters by calling IsMultiTenant after setting up the existing filter.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // set a global query filter, e.g. to support soft delete\n    builder.Entity<MyEntityType>().HasQueryFilter(p => !p.IsDeleted);\n\n    // configure an entity type to be multi-tenant (will merge with existing call to HasQueryFilter)\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiTenantContext<TTenantInfo> in C#\nDESCRIPTION: MultiTenantContext<TTenantInfo> contains information about the current tenant, including TenantInfo, StrategyInfo, and StoreInfo properties. It can be obtained through dependency injection or by calling GetMultiTenantContext() on HttpContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantContext<TTenantInfo> : IMultiTenantContext, IMultiTenantContext<TTenantInfo>\n    where TTenantInfo : ITenantInfo\n{\n    public TTenantInfo TenantInfo { get; }\n    public StrategyInfo StrategyInfo { get; }\n    public StoreInfo StoreInfo { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core Application\nDESCRIPTION: Basic setup for Finbuckle.MultiTenant in an ASP.NET Core application. This configuration uses the host strategy for tenant identification and the configuration store for tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant Info in ASP.NET Core\nDESCRIPTION: Shows how to retrieve the current tenant information using HttpContext extension methods. This snippet demonstrates checking for null, accessing tenant properties, and retrieving custom items.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant using HttpContext Extension Method\nDESCRIPTION: Example demonstrating how to access the current tenant information using the HttpContext extension method GetMultiTenantContext<TTenantInfo>(), which provides access to tenant ID, identifier, name, and custom properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Database Connections per Tenant in EF Core\nDESCRIPTION: Shows how to implement separate database connections for each tenant by extending ITenantInfo and configuring a database context. Uses IMultiTenantContextAccessor to access tenant-specific connection strings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   // AppTenantInfo is the app's custom implementation of ITenantInfo which \n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       // get the current tenant info at the time of construction\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       // use the connection string to connect to the per-tenant database\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Support with Fluent API\nDESCRIPTION: Shows how to use Entity Framework Core's fluent API to configure multi-tenant entity types and handle existing query filters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // set a global query filter, e.g. to support soft delete\n    builder.Entity<MyEntityType>().HasQueryFilter(p => !p.IsDeleted);\n\n    // configure an entity type to be multi-tenant (will merge with existing call to HasQueryFilter)\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiTenantContext<TTenantInfo> in C#\nDESCRIPTION: The MultiTenantContext<TTenantInfo> class contains information about the current tenant, including TenantInfo, StrategyInfo, and StoreInfo properties. It implements IMultiTenantContext and IMultiTenantContext<TTenantInfo> interfaces.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantContext<TTenantInfo> : IMultiTenantContext, IMultiTenantContext<TTenantInfo>\n    where TTenantInfo : ITenantInfo\n{\n    public TTenantInfo TenantInfo { get; set; }\n    public StrategyInfo StrategyInfo { get; set; }\n    public StoreInfo StoreInfo { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent API for Entity Type Multi-Tenant Configuration\nDESCRIPTION: Shows how to use the fluent API with the IsMultiTenant extension method to configure multi-tenant entity types in the OnModelCreating method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent API for MultiTenant Configuration\nDESCRIPTION: Demonstrates how to use the fluent API IsMultiTenant extension method to configure entity types as multi-tenant in the OnModelCreating method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure the EFCore store using WithEFCoreStore method. It specifies the database context and TenantInfo types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Token Validation in Finbuckle.MultiTenant\nDESCRIPTION: This code snippet shows how to configure JWT token validation on a per-tenant basis using Finbuckle.MultiTenant. It demonstrates setting a different recognized authority for token validation for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ITenantInfo Interface in C#\nDESCRIPTION: The ITenantInfo interface defines the core properties for tenant information, including Id, Identifier, and Name. This interface is central to the library's functionality for managing tenant data.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITenantInfo\n{\n    string Id { get; }\n    string Identifier { get; }\n    string Name { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: ITenantInfo Interface Properties\nDESCRIPTION: Core interface defining the essential properties for tenant identification. It includes Id (unique, immutable identifier), Identifier (resolvable tenant identifier), and Name (display name for the tenant).\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITenantInfo\n{\n    string Id { get; set; }\n    string Identifier { get; set; }\n    string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information from HttpContext in ASP.NET Core\nDESCRIPTION: Example of using the HttpContext extension method GetMultiTenantContext<TTenantInfo>() to access the current tenant information in an ASP.NET Core application.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiTenant DbContext\nDESCRIPTION: Example of implementing a BloggingDbContext that inherits from MultiTenantDbContext with proper constructor implementations for both dependency injection and manual instantiation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example showing how to access the current tenant's information using HttpContext extension methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BloggingDbContext with Multi-Tenant Support\nDESCRIPTION: Complete implementation of a multi-tenant DbContext derived from MultiTenantDbContext with constructor overloads.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Entities with Attributes\nDESCRIPTION: Demonstrates how to configure entity types for multi-tenant data isolation using the [MultiTenant] attribute and deriving from MultiTenantDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; }\n    public DbSet<Roles> Roles { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to the URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Options in ASP.NET Core Startup\nDESCRIPTION: Demonstrates how to configure options in the application startup using the Configure method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Bearer Authentication Options\nDESCRIPTION: Demonstrates how to configure JWT Bearer options on a per-tenant basis by using ConfigurePerTenant method to set a tenant-specific JWT authority.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom MultiTenant store using WithStore<TStore> method. It shows two approaches: using a templated method and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Defining Custom ITenantInfo in C#\nDESCRIPTION: Example of how to define a custom ITenantInfo interface with additional properties. This demonstrates extending the basic TenantInfo class to include custom data for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICustomTenantInfo : ITenantInfo\n{\n    string ConnectionString { get; set; }\n    // Add other custom properties as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating for Multi-Tenant Support\nDESCRIPTION: Override of OnModelCreating method to configure multi-tenant entity types using builder extensions and fluent API.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // If necessary call the base class method.\n    // Recommended to be called first.\n    base.OnModelCreating(builder);\n\n    // Configure all entity types marked with the [MultiTenant] data attribute\n    builder.ConfigureMultiTenant();\n\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant Information in ASP.NET Core\nDESCRIPTION: Example showing how to access information about the current tenant from HttpContext in an ASP.NET Core application.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to configure a Base Path Strategy using WithBasePathStrategy method. This strategy uses the first path segment to determine the tenant. It also shows an option to adjust ASP.NET Core Request.PathBase and Request.Path.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Database Connection Per Tenant in C#\nDESCRIPTION: Shows how to implement separate database connections for each tenant by extending ITenantInfo and configuring a custom DbContext. Uses IMultiTenantContextAccessor to access tenant-specific connection strings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for multiple tenants showing different authentication schemes, including cookie paths and OpenID Connect settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: This code demonstrates various methods to configure per-tenant options using Finbuckle.MultiTenant. It includes examples of ConfigurePerTenant, ConfigureAllPerTenant, and PostConfigurePerTenant methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Demonstrates how to configure the Route Strategy for tenant resolution. It shows two examples: one using the default route parameter name '__tenant__' and another setting a custom route parameter name. It also includes a note about placement when using UseRouting.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Generic Class Definition: MultiTenantContext\nDESCRIPTION: Generic class that contains information about the current tenant, including tenant info, strategy info, and store info. Used in dependency injection and accessible through HttpContext in ASP.NET Core.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantContext<TTenantInfo> : IMultiTenantContext, IMultiTenantContext<TTenantInfo>\n{\n    public TTenantInfo TenantInfo { get; }\n    public StrategyInfo StrategyInfo { get; }\n    public StoreInfo StoreInfo { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Bearer Token Authentication\nDESCRIPTION: Example of configuring per-tenant JWT Bearer token authentication using ConfigurePerTenant<>. This allows each tenant to have its own JWT Authority for token validation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Multi-tenant Data in C#\nDESCRIPTION: Demonstrates how tenant validation works when updating or deleting entities across different tenants. Shows how attempting to modify data associated with a different tenant throws a MultiTenantException.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };\nvar db = new BloggingDbContext(myTenantInfo);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n// Modify and attach the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Attach(myBlog);\nmyBlog.Title = \"My Changed Blog\";\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n\ndb.Blogs.Remove(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Example showing how to access per-tenant specific options in a controller through dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Configuration\nDESCRIPTION: Example of using the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Claim Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to configure a claim strategy that uses a claim to determine the tenant identifier. It shows both default and custom claim type configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection in ASP.NET Core\nDESCRIPTION: Demonstrates how to access configured options through dependency injection in a controller constructor.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Entity Multi-tenant Configuration\nDESCRIPTION: Shows two methods for configuring entity types as multi-tenant - using data attributes or fluent API configuration in OnModelCreating.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Identity.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Method 1: Using attribute\n[MultiTenant]\npublic class CustomUser : IdentityUser\n{\n    // ...\n}\n\n// Method 2: Using fluent API\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    builder.Entity<CustomUser>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Attribute in OnModelCreating\nDESCRIPTION: Shows how to configure a DbContext to respect the [MultiTenant] attribute by calling ConfigureMultiTenant in the OnModelCreating method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // not needed if database context derives from MultiTenantDbContext\n    builder.ConfigureMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Shows how to configure the Host Strategy for tenant resolution. It includes two examples: one using the default first domain segment check and another specifying a custom template pattern to check the second level domain segment.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Cookies Per Tenant\nDESCRIPTION: Demonstrates how to configure separate cookies per tenant using per-tenant options. This approach maintains existing tenant sign-ins when switching between requests by creating tenant-specific cookie names.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Entity Keys and Indexes\nDESCRIPTION: Example showing how to configure entity keys and indexes in a multi-tenant context using MultiTenantEntityTypeBuilder.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Demonstrates how to access per-tenant options in a controller using IOptionsMonitor<MyOptions>.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Entity Keys and Indexes in C#\nDESCRIPTION: Shows how to configure entity type keys and indexes to include the TenantId column using MultiTenantEntityTypeBuilder. Demonstrates adjusting existing keys and indexes for multi-tenant functionality.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in C# for Finbuckle.MultiTenant\nDESCRIPTION: Shows how to set up the Header Strategy for tenant resolution. It includes examples of using the default header key and specifying a custom header key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in C# for Finbuckle.MultiTenant\nDESCRIPTION: Demonstrates how to configure the Host Strategy for tenant resolution. It shows two examples: one using the default pattern and another with a custom pattern to check the second level domain segment.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in a Controller\nDESCRIPTION: This snippet illustrates how to access per-tenant options in a controller using dependency injection. The options values will be specific to the current tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Support in OnModelCreating\nDESCRIPTION: Demonstrates how to configure MultiTenant support in DbContext's OnModelCreating method for database contexts that don't inherit from MultiTenantDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // not needed if database context derives from MultiTenantDbContext\n    builder.ConfigureMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpContext Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure an HttpContext Strategy using WithHttpContextStrategy method. This strategy uses a delegate that takes an HttpContext parameter to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpContextStrategy(async httpContext =>\n    {\n         var identifier = httpContext.Request.Query[\"tenant\"];\n         \n         // query value will be empty if the value didn't exist in the request\n         if(identifier == string.Empty)\n             return null;\n         \n         return identifier;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Databases with Custom ITenantInfo in C#\nDESCRIPTION: Shows how to implement separate databases for each tenant by creating a custom ITenantInfo implementation with a ConnectionString property and using it in the DbContext's OnConfiguring method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   // AppTenantInfo is the app's custom implementation of ITenantInfo which \n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       // get the current tenant info at the time of construction\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       // use the connection string to connect to the per-tenant database\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure and register an EFCore store with MultiTenant services.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Shows how to access tenant-specific options values in a controller using dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SaveChanges Methods with Multi-Tenant Support\nDESCRIPTION: Implementation of SaveChanges and SaveChangesAsync methods with multi-tenant enforcement using extension methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override int SaveChanges(bool acceptAllChangesOnSuccess)\n{\n    this.EnforceMultiTenant();\n    return base.SaveChanges(acceptAllChangesOnSuccess);\n}\n\npublic override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess,\n    CancellationToken cancellationToken = default(CancellationToken))\n{\n    this.EnforceMultiTenant();\n    return await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure the Header Strategy for tenant resolution using HTTP headers. Includes both default configuration using '__tenant__' header and custom header key configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy in C#\nDESCRIPTION: Demonstrates configuring a Session Strategy that uses ASP.NET Core session to retrieve the tenant identifier. Shows both default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Shows how to register a custom store implementation using both templated and non-templated methods with service lifetime specification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication with Finbuckle.MultiTenant in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to set up per-tenant authentication using Finbuckle.MultiTenant in an ASP.NET Core application. It includes adding authentication services, configuring Finbuckle.MultiTenant services, and setting up the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy using WithStrategy method. It shows two approaches: using dependency injection and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to set up a route strategy that uses a route parameter to determine the tenant. It shows configuration with both default and custom route parameter names, and proper middleware ordering.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegate Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to use delegate strategy with both async lambda and typed context. This strategy uses a provided function to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n\n// or register with a typed lambda, HttpContext in this case\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy<HttpContext, TenantInfo>(httpContext =>\n    {      \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Identity Context Model Configuration\nDESCRIPTION: Shows the generic type parameters and customization options for MultiTenantIdentityDbContext. Demonstrates different base class options for varying levels of customization with Identity entity types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Basic usage with all defaults\nclass MyDbContext : MultiTenantIdentityDbContext\n\n// Custom user type\nclass MyDbContext : MultiTenantIdentityDbContext<TUser>\n\n// Custom user, role and key types\nclass MyDbContext : MultiTenantIdentityDbContext<TUser, TRole, TKey>\n\n// Fully custom types\nclass MyDbContext : MultiTenantIdentityDbContext<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>\n```\n\n----------------------------------------\n\nTITLE: Interface and Class Structure - ITenantInfo and TenantInfo\nDESCRIPTION: Defines the core tenant information interface and class structure. ITenantInfo specifies required properties like Id, Identifier, and Name, while TenantInfo provides a basic implementation. Custom implementations can extend these with additional properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/CoreConcepts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Id` - unique tenant identifier\\n* `Identifier` - resolvable tenant value\\n* `Name` - display name for the tenant\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Host Strategy for tenant resolution using domain segments. Shows both default configuration that uses the first domain segment and custom configuration with a specific template pattern.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure Claim Strategy that uses a claim to determine the tenant identifier. Examples show using both the default claim type and a custom claim type.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom MultiTenant store using WithStore method. It shows two approaches: using a templated method and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Customizing Identity Entity Types for Multi-tenancy in C#\nDESCRIPTION: Shows how to designate custom Identity entity types as multi-tenant using either the [MultiTenant] attribute or the IsMultiTenant fluent API method in OnModelCreating.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Identity.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class CustomUser : IdentityUser\n{\n    // Custom properties\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    builder.Entity<CustomUser>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenants in appsettings.json for Finbuckle.MultiTenant\nDESCRIPTION: This JSON configuration demonstrates how to set up tenant-specific authentication settings in the appsettings.json file. It includes configurations for different tenants with varying authentication schemes and OpenID Connect settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegate Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to use a delegate strategy with both async and non-async lambda functions to determine the tenant identifier. This strategy is flexible and can be used for testing or simple logic.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n    \n // or do it without async\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(context =>\n    {\n        var httpContext = context as HttpContext;\n        if (httpContext == null)\n            return null;\n        \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Demonstrates how to configure the Route Strategy for tenant resolution. It shows both default and custom route parameter configurations, as well as the correct placement of UseRouting and UseMultiTenant in the app pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Entity Framework Core Model Configuration\nDESCRIPTION: Example showing two approaches to configure an entity type as multi-tenant: using the [MultiTenant] attribute or the IsMultiTenant fluent API method. The configuration must occur after calling the base OnModelCreating method for Identity models.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Approach 1: Using attribute\n[MultiTenant]\npublic class CustomUser : IdentityUser\n{\n    // User properties\n}\n\n// Approach 2: Using fluent API in OnModelCreating\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    builder.Entity<CustomUser>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a Claim Strategy using WithClaimStrategy method. This strategy uses a claim to determine the tenant identifier. It demonstrates both default and custom claim type configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Host Strategy for tenant resolution using domain segments. Shows both default configuration and custom template pattern configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Strategy with Async and Sync Methods\nDESCRIPTION: Shows how to configure a Delegate Strategy that uses a provided function to determine the tenant. Examples demonstrate both async and sync implementations, including query parameter extraction from HttpContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n    \n // or do it without async\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(context =>\n    {\n        var httpContext = context as HttpContext;\n        if (httpContext == null)\n            return null;\n        \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Authentication in Finbuckle.MultiTenant\nDESCRIPTION: This code snippet demonstrates how to configure cookie authentication on a per-tenant basis using Finbuckle.MultiTenant. It shows how to set a unique cookie name for each tenant, allowing multiple tenant sign-ins to coexist.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Finbuckle.MultiTenant in ASP.NET Core Application\nDESCRIPTION: Basic setup of Finbuckle.MultiTenant services in an ASP.NET Core application, including host strategy and configuration store setup.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/GettingStarted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// add app services...\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()\n    .WithConfigurationStore();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// add other middleware...\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: Demonstrates various methods to configure per-tenant options using Finbuckle.MultiTenant extensions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tenant Information with HttpContext Extension Method\nDESCRIPTION: Example showing how to manually set the current tenant using the TrySetTenantInfo<TTenantInfo>() HttpContext extension method, with the option to reset the service provider scope to ensure services are resolved with the new tenant context.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates configuring a session strategy using WithSessionStrategy method. This strategy uses the ASP.NET Core session to retrieve the tenant identifier. It shows both default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information via HttpContext Extension\nDESCRIPTION: Example of retrieving tenant information using HttpContext extension methods. Shows how to access tenant properties like Id, Identifier, Name, and custom Items.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: MultiTenantContext Generic Class Structure\nDESCRIPTION: Describes the MultiTenantContext<TTenantInfo> class which holds current tenant information including tenant details, strategy information, and store information. Supports dependency injection and can be accessed through HttpContext in ASP.NET Core.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Implements `IMultiTenantContext` and `IMultiTenantContext<TTenantInfo>`\\n* Properties: TenantInfo, StrategyInfo, StoreInfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure Route Strategy that uses a route parameter to determine the tenant. Examples demonstrate using both the default route parameter name and a custom one, with middleware ordering considerations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Examples showing how to access options values through dependency injection in a controller constructor and using a service provider. This demonstrates standard options access patterns.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options\nDESCRIPTION: Demonstrates various methods for configuring per-tenant options including standard, named, and post-configuration approaches.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates configuring a delegate strategy using WithDelegateStrategy method. It shows two examples: one with an async lambda and another with a typed context parameter.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n\n// or register with a typed lambda, HttpContext in this case\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy<HttpContext, TenantInfo>(httpContext =>\n    {      \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in ASP.NET Core\nDESCRIPTION: Shows how to set up the Host Strategy for tenant resolution. It includes examples of using the default configuration and specifying a custom template pattern for more complex host matching scenarios.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Information Manually in ASP.NET Core\nDESCRIPTION: Example demonstrating how to manually set tenant information using the TrySetTenantInfo HttpContext extension method. It shows creating a new TenantInfo instance and optionally resetting the service provider scope.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure session strategy which uses ASP.NET Core session to retrieve the tenant identifier. It demonstrates both default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Info Manually in ASP.NET Core\nDESCRIPTION: Demonstrates how to manually set the current tenant information using an HttpContext extension method. It includes resetting the service provider scope and checking if the operation was successful.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context\nDESCRIPTION: Shows how to implement a database context for EFCore store by extending EFCoreStoreDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to set up a base path strategy that uses the first path segment to determine the tenant. It also demonstrates an option to adjust ASP.NET Core Request.PathBase and Request.Path variables.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: MultiTenant Configuration Store JSON Structure\nDESCRIPTION: JSON configuration structure for the Configuration Store showing defaults and tenant-specific settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to configure a Delegate Strategy using WithDelegateStrategy method. It shows two examples: one with an async lambda and another with a typed context parameter.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n\n// or register with a typed lambda, HttpContext in this case\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy<HttpContext, TenantInfo>(httpContext =>\n    {      \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Route Strategy for tenant resolution. It shows both default and custom route parameter configurations, as well as the correct placement of UseRouting and UseMultiTenant in the pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure the EFCore store using WithEFCoreStore method. It specifies the custom database context and TenantInfo types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiTenant DbContext\nDESCRIPTION: Example of a BloggingDbContext class inheriting from MultiTenantDbContext with constructor implementations for both dependency injection and manual instantiation scenarios.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to set up a session strategy that uses ASP.NET Core session to retrieve the tenant identifier. It demonstrates both default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tenant Information\nDESCRIPTION: Demonstrates how to manually set tenant information using HttpContext extension methods, including the option to reset the service provider scope.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy in C#\nDESCRIPTION: Shows how to configure a Claim Strategy that uses a claim to determine the tenant identifier. Demonstrates both default and custom claim type configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory MultiTenant Store\nDESCRIPTION: Shows how to configure an in-memory store with case sensitivity options and initial tenant data. Demonstrates both default and customized configuration approaches.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. This store uses ASP.NET Core's distributed cache mechanism and supports JSON serialization.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy for MultiTenant Resolution\nDESCRIPTION: Examples of configuring Route Strategy that uses a route parameter to determine the tenant. Can use the default parameter name '__tenant__' or a custom parameter name, and includes middleware ordering considerations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to configure a Session Strategy using WithSessionStrategy method. This strategy uses the ASP.NET Core session to retrieve the tenant identifier. It shows both default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Identity DbContext in C#\nDESCRIPTION: Demonstrates how to configure a multi-tenant Identity database context by deriving from MultiTenantIdentityDbContext and using the [MultiTenant] attribute or IsMultiTenant() method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMultiTenantIdentityDbContext : MultiTenantIdentityDbContext<CustomUser>\n{\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n        builder.Entity<CustomUser>().IsMultiTenant();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Path Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure base path strategy which uses the first path segment to determine the tenant. It also demonstrates how to adjust ASP.NET Core Request.PathBase and Request.Path variables.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Example showing how to access options through dependency injection in a controller and via service provider.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Example of accessing tenant-specific options in a controller through dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Names\nDESCRIPTION: Demonstrates how to configure separate authentication cookies per tenant using per-tenant options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpContext Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure an HttpContext strategy using WithHttpContextStrategy method. This strategy uses a delegate that takes an HttpContext parameter to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpContextStrategy(async httpContext =>\n    {\n         var identifier = httpContext.Request.Query[\"tenant\"];\n         \n         // query value will be empty if the value didn't exist in the request\n         if(identifier == string.Empty)\n             return null;\n         \n         return identifier;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: Basic setup for Finbuckle.MultiTenant with per-tenant authentication in an ASP.NET Core application. The example shows how to register authentication services, add Finbuckle.MultiTenant services, and configure the middleware pipeline.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining IMultiTenantStrategy Interface in C#\nDESCRIPTION: The IMultiTenantStrategy interface is used to implement custom strategies for determining and returning a tenant identifier string for the current request.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/CoreConcepts.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMultiTenantStrategy\n{\n    Task<string> GetIdentifierAsync(object context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiTenantDbContext in Custom DbContext\nDESCRIPTION: Shows how to implement the IMultiTenantDbContext interface on an existing DbContext class to enable multi-tenant functionality.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpContext Strategy for MultiTenant in C#\nDESCRIPTION: Illustrates how to configure HttpContext strategy which uses a delegate taking an HttpContext parameter to determine the tenant identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpContextStrategy(async httpContext =>\n    {\n         var identifier = httpContext.Request.Query[\"tenant\"];\n         \n         // query value will be empty if the value didn't exist in the request\n         if(identifier == string.Empty)\n             return null;\n         \n         return identifier;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Factory Creation of Multi-Tenant DbContext\nDESCRIPTION: Example of creating multi-tenant DbContext instances using factory methods for specific tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// create or otherwise obtain a tenant info instance\nusing var tenantInfo = new MyTenantInfo(...);\n\n// create a database context instance for the tenant\nusing var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo);\n\n// create a database context instance for the tenant with an instance of DbOptions<AppMultiTenantDbContext>\nvar tenantDbContextWithOptions = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo, \ndbOptions);\n\n// loop through a bunch of tenant instances\nforeach (var tenant in tenants)\n{\n    using var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenant);\n    // do something with the database context\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Options in Startup\nDESCRIPTION: Basic configuration of options in the application startup using WebApplication builder.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy in C#\nDESCRIPTION: Shows how to configure a Static Strategy that always uses the same identifier to resolve the tenant. This approach is useful for testing or providing a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Examples showing how to access options through dependency injection in a controller and via service provider.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates configuring a base path strategy using WithBasePathStrategy method. This strategy uses the first path segment to determine the tenant. It also shows an option to adjust ASP.NET Core Request.PathBase and Request.Path.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store DbContext in C#\nDESCRIPTION: Shows how to create a database context for the EFCore store by deriving from EFCoreStoreDbContext. This example uses an in-memory database, but it can be adapted for other database types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Store in C#\nDESCRIPTION: Shows how to set up and configure an in-memory store for MultiTenant. It includes options for case sensitivity and adding initial tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Overriding OnModelCreating in MultiTenantDbContext\nDESCRIPTION: Example of overriding OnModelCreating in a derived MultiTenantDbContext, showing how to set global query filters and call the base implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n...\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // set a global query filter, e.g. to support soft delete\n        modelBuilder.Entity<Post>().HasQueryFilter(p => !p.IsDeleted);\n        \n        // call the base library implementation AFTER the above\n        base.OnModelCreating(modelBuilder);\n    }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a static strategy that always uses the same identifier to resolve the tenant. This is useful for testing or setting a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Defining IMultiTenantStore Interface in C#\nDESCRIPTION: IMultiTenantStore is responsible for managing TenantInfo objects, including methods for adding, removing, updating, and retrieving tenant information based on a tenant string identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/CoreConcepts.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMultiTenantStore\n{\n    TenantInfo GetTenant(string identifier);\n    void AddTenant(TenantInfo tenantInfo);\n    void RemoveTenant(string identifier);\n    void UpdateTenant(TenantInfo tenantInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating for MultiTenant Context\nDESCRIPTION: Example showing how to properly override OnModelCreating in a multi-tenant context while preserving query filters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n...\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // set a global query filter, e.g. to support soft delete\n        modelBuilder.Entity<Post>().HasQueryFilter(p => !p.IsDeleted);\n        \n        // call the base library implementation AFTER the above\n        base.OnModelCreating(modelBuilder);\n    }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy in Finbuckle.MultiTenant\nDESCRIPTION: Demonstrates how to configure a Static Strategy which always uses the same identifier to resolve the tenant. This is useful for testing or resolving to a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Examples showing how to access options through dependency injection in a controller or via service provider.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to a URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a claim strategy using WithClaimStrategy method. This strategy uses a claim to determine the tenant identifier. It demonstrates both default and custom claim type configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Demonstrates how to set up a configuration store for MultiTenant. It shows both default configuration using the root configuration object and custom configuration with a different configuration path key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Overriding SaveChanges Methods for MultiTenant Enforcement\nDESCRIPTION: Shows how to override SaveChanges and SaveChangesAsync methods to enforce multi-tenant data isolation by calling EnforceMultiTenant before saving changes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override int SaveChanges(bool acceptAllChangesOnSuccess)\n{\n    this.EnforceMultiTenant();\n    return base.SaveChanges(acceptAllChangesOnSuccess);\n}\n\npublic override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess,\n    CancellationToken cancellationToken = default(CancellationToken))\n{\n    this.EnforceMultiTenant();\n    return await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a Static Strategy using WithStaticStrategy method. This strategy always uses the same identifier to resolve the tenant, useful for testing or fallback scenarios.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Defining IMultiTenantStrategy Interface in C#\nDESCRIPTION: IMultiTenantStrategy is responsible for determining and returning a tenant identifier string for the current request. Custom strategies can be implemented using this interface.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/CoreConcepts.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMultiTenantStrategy\n{\n    string GetIdentifier(object context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Illustrates the configuration of the Header Strategy for tenant resolution. It shows how to use the default header key and how to specify a custom header key for tenant identification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure the EFCore store with a custom database context.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. This store uses ASP.NET Core's distributed cache mechanism and can use Redis, SQL Server, NCache, or an in-memory implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Entity Keys and Indexes in C#\nDESCRIPTION: Shows how to configure entity type keys and indexes to include the TenantId column using MultiTenantEntityTypeBuilder methods in the OnModelCreating override.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy for MultiTenant in C#\nDESCRIPTION: Demonstrates how to configure claim strategy which uses a claim to determine the tenant identifier. It shows both default and custom claim type configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Entity Types with Attributes\nDESCRIPTION: Demonstrates how to use the [MultiTenant] attribute to designate entity types for per-tenant isolation in a shared database scenario.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// tenants will only see their own blog posts\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\n// roles will be the same for all tenants\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; } // this will be multi-tenant!\n    public DbSet<Roles> Roles { get; set; } // not multi-tenant!\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Data Operations with MultiTenant Context\nDESCRIPTION: Examples of adding, querying, and handling tenant-specific data operations with proper tenant isolation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };;\nvar db = new BloggingDbContext(myTenantInfo, null);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n\n// Try to add the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Add(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Identity Model - C#\nDESCRIPTION: Example of configuring a multi-tenant Identity model using data attributes or fluent API. Shows two approaches: using the [MultiTenant] attribute or the IsMultiTenant() method in OnModelCreating after calling the base implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class CustomIdentityUser : IdentityUser\n{\n    // Custom user properties\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    base.OnModelCreating(modelBuilder);\n    modelBuilder.Entity<CustomIdentityUser>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: MultiTenantContext Generic Class Structure\nDESCRIPTION: Context class that holds information about the current tenant, including the tenant info, strategy info, and store info. It implements IMultiTenantContext and IMultiTenantContext<TTenantInfo>.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantContext<TTenantInfo> : IMultiTenantContext<TTenantInfo>\n{\n    public TTenantInfo TenantInfo { get; set; }\n    public StrategyInfo StrategyInfo { get; set; }\n    public StoreInfo StoreInfo { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options Class in C#\nDESCRIPTION: Example of a simple options class that can be used with Finbuckle.MultiTenant for per-tenant configuration. The class defines two configurable integer properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore MultiTenant Store\nDESCRIPTION: Demonstrates how to configure the EFCore store with the appropriate database context and tenant info types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Store in C#\nDESCRIPTION: Shows how to configure an in-memory store for MultiTenant. It demonstrates both default case-insensitive configuration and custom configuration with case sensitivity and pre-added tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Remote Store in C#\nDESCRIPTION: Demonstrates different ways to configure the HTTP Remote Store including basic URL configuration, custom templating, HTTP client customization, and Polly integration for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining IMultiTenantStore Interface in C#\nDESCRIPTION: The IMultiTenantStore interface defines methods for adding, removing, updating, and retrieving TenantInfo objects based on a tenant string identifier.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/CoreConcepts.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMultiTenantStore\n{\n    Task<TenantInfo> TryGetAsync(string identifier);\n    Task<bool> TryAddAsync(TenantInfo tenantInfo);\n    Task<bool> TryRemoveAsync(string identifier);\n    Task<bool> TryUpdateAsync(TenantInfo tenantInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: Multiple examples of configuring per-tenant options using various ConfigurePerTenant methods. These methods allow options to be customized based on the current tenant's information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Identity Entity with Fluent API\nDESCRIPTION: Example showing how to mark an Identity entity as multi-tenant using the Fluent API IsMultiTenant() method in OnModelCreating. This should be called after the base class OnModelCreating method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Identity.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    base.OnModelCreating(modelBuilder);\n    modelBuilder.Entity<CustomIdentityUser>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenants in appsettings.json for Finbuckle.MultiTenant\nDESCRIPTION: This JSON configuration demonstrates how to set up tenant-specific authentication settings in the appsettings.json file. It includes settings for cookie paths, challenge schemes, and OpenID Connect parameters for different tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Creation of Multi-Tenant DbContext\nDESCRIPTION: Examples of creating multi-tenant database context instances using factory methods for specific scenarios.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// create or otherwise obtain a tenant info instance\nusing var tenantInfo = new MyTenantInfo(...);\n\n// create a database context instance for the tenant\nusing var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo);\n\n// create a database context instance for the tenant with an instance of DbOptions<AppMultiTenantDbContext>\nvar tenantDbContextWithOptions = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenantInfo, \ndbOptions);\n\n// loop through a bunch of tenant instances\nforeach (var tenant in tenants)\n{\n    using var tenantDbContext = MultiTenantDbContext.Create<AppMultiTenantDbContext, AppTenantInfo>(tenant);\n    // do something with the database context\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore MultiTenant Store\nDESCRIPTION: Demonstrates how to configure the EFCore MultiTenant store with a custom database context.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom MultiTenant store using WithStore<TStore> method. It shows two approaches: using a templated method and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant Info via HttpContext\nDESCRIPTION: Example of retrieving tenant information using HttpContext extension methods. Shows how to access tenant properties like Id, Identifier, Name, and custom Items.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Configuration\nDESCRIPTION: Example of using the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Configuration\nDESCRIPTION: Example of using the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: Examples of using the ConfigurePerTenant, ConfigureAllPerTenant, and PostConfigurePerTenant extension methods to set up tenant-specific options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: MultiTenant Identity DbContext Declaration\nDESCRIPTION: Example showing the various ways to declare a MultiTenant Identity DbContext with different generic parameters for customization. Shows progression from basic to fully customized implementations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Identity.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Basic implementation with all defaults\npublic class ApplicationDbContext : MultiTenantIdentityDbContext\n\n// Custom user type\npublic class ApplicationDbContext : MultiTenantIdentityDbContext<TUser>\n\n// Custom user, role, and key types\npublic class ApplicationDbContext : MultiTenantIdentityDbContext<TUser, TRole, TKey>\n\n// Fully customized implementation\npublic class ApplicationDbContext : MultiTenantIdentityDbContext<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in ASP.NET Core\nDESCRIPTION: Illustrates the configuration of the Header Strategy for tenant resolution. It shows how to use the default header key and how to specify a custom header key for tenant identification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom MultiTenant store using both templated and factory methods in the service configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context\nDESCRIPTION: Shows how to create a database context for the EFCore store by extending EFCoreStoreDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Shows how to configure a custom strategy implementation using WithStrategy<TStrategy> method with both type-based and factory-based approaches.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Options\nDESCRIPTION: Example of using the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiTenantDbContext Interface\nDESCRIPTION: Implementation of IMultiTenantDbContext interface in a custom DbContext class, defining required properties for tenant information and handling modes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy using WithStrategy method. It shows two approaches: using dependency injection and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Customizing Identity Model with MultiTenantIdentityDbContext in C#\nDESCRIPTION: Shows different ways to customize the Identity model using MultiTenantIdentityDbContext with various generic parameters for entity types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Identity.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Using default types\npublic class DefaultMultiTenantIdentityDbContext : MultiTenantIdentityDbContext\n{\n}\n\n// Custom user type\npublic class CustomUserMultiTenantIdentityDbContext : MultiTenantIdentityDbContext<CustomUser>\n{\n}\n\n// Custom user, role, and key types\npublic class FullyCustomMultiTenantIdentityDbContext : MultiTenantIdentityDbContext<CustomUser, CustomRole, Guid>\n{\n}\n\n// All custom types\npublic class CompletelyCustomMultiTenantIdentityDbContext : MultiTenantIdentityDbContext<CustomUser, CustomRole, Guid, CustomUserClaim, CustomUserRole, CustomUserLogin, CustomRoleClaim, CustomUserToken>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Demonstrates the configuration of the Header Strategy for tenant resolution. It shows two examples: one using the default header key '__tenant__' and another specifying a custom header key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context\nDESCRIPTION: Shows how to implement a database context for the EFCore MultiTenant store with InMemory database configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Options\nDESCRIPTION: Example showing how to use the OptionsBuilder API to configure per-tenant options with dependencies. This approach simplifies dependency injection while maintaining tenant-specific configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: Illustrates various methods to configure per-tenant options using Finbuckle.MultiTenant extensions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in Finbuckle.MultiTenant for ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Host Strategy in Finbuckle.MultiTenant. The strategy uses the request's host value to determine the tenant. It can be configured with or without a custom template pattern.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure a custom implementation of IMultiTenantStrategy using either a type or a factory method approach. The first example configures a strategy with a given type, while the second uses a factory method for more customization.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Shows how to register a custom store implementation using both templated and factory methods with service lifetime specification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in Finbuckle.MultiTenant (C#)\nDESCRIPTION: Shows how to set up the Host Strategy for tenant resolution. It includes examples of using the default configuration and specifying a custom template pattern for more complex host-based tenant identification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Demonstrates configuration store setup with default and custom configuration paths.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Shows the JSON structure for configuring tenants with defaults and custom properties in the configuration store.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MultiTenantContext in ASP.NET Core\nDESCRIPTION: Shows how to obtain the MultiTenantContext from the HttpContext in an ASP.NET Core application. This is useful for accessing tenant information within request processing.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar multiTenantContext = HttpContext.GetMultiTenantContext();\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Options Class in C#\nDESCRIPTION: Simple C# class definition for options with two integer properties that can be configured per tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection in ASP.NET Core\nDESCRIPTION: This snippet shows how to access options through dependency injection in a controller constructor. It uses IOptionsMonitor to retrieve the options values.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in Finbuckle.MultiTenant for ASP.NET Core\nDESCRIPTION: Shows how to set up the Header Strategy in Finbuckle.MultiTenant. This strategy uses an HTTP request header to determine the tenant identifier. It can be configured with the default header key or a custom one.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Example showing how to access per-tenant options in a controller. When using the per-tenant configuration, the injected options will automatically contain values specific to the current tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom store implementation using both templated and factory methods. Shows configuration within the application's service collection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Strategy for MultiTenant Resolution\nDESCRIPTION: Examples of configuring Claim Strategy that uses a claim value to determine the tenant identifier. Can use the default '__tenant__' claim type or a custom claim type specified in the configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Configuration Store\nDESCRIPTION: Examples of setting up a configuration-based store using default or custom configuration paths.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Shows the JSON structure for configuring tenants in the Configuration Store, including defaults and tenant-specific settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Names for Isolated Sign-In Sessions\nDESCRIPTION: Shows how to configure separate cookie names per tenant using ConfigurePerTenant method, allowing multiple tenant sign-ins to coexist in the same browser without replacing each other.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Tenant Authentication Settings\nDESCRIPTION: JSON configuration that specifies tenant-specific authentication settings including paths, challenge schemes, and OpenID Connect parameters with template paths using __tenant__ placeholders.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a static strategy that always uses the same identifier to resolve the tenant. This is useful for testing or resolving to a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Manually Setting TenantInfo in ASP.NET Core\nDESCRIPTION: Demonstrates how to manually set the current tenant information using the TrySetTenantInfo extension method on HttpContext. This is typically used in custom scenarios where automatic tenant resolution is not sufficient.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/CoreConcepts.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nHttpContext.TrySetTenantInfo(customTenantInfo);\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context in C#\nDESCRIPTION: Shows how to implement a database context for the EFCore store. The context derives from EFCoreStoreDbContext and configures an in-memory database.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy using WithStrategy method. It shows two approaches: one using dependency injection and another using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Entity Keys and Indexes\nDESCRIPTION: Example of configuring entity type with multi-tenant support and adjusting keys and indexes to include TenantId.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Configuration Store\nDESCRIPTION: Demonstrates configuration of a MultiTenant store using app configuration with custom path options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, a simple read-only store that returns a new tenant instance based on the given identifier without any additional settings. It's useful for testing or environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Defines the JSON structure for configuration store with defaults and tenant-specific settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for tenant settings including authentication properties. Defines three tenants with different challenge schemes, login paths and OpenID Connect settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy for MultiTenant Resolution\nDESCRIPTION: Example of configuring a Static Strategy that always uses the same identifier to resolve the tenant. This is useful for testing or fallback tenants and will always run last regardless of configuration order.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for multiple tenants with different authentication settings. Shows how to define tenant-specific properties like ChallengeScheme, login/logout paths, and OpenID Connect configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Configuration Store\nDESCRIPTION: Provides an example of the JSON configuration format used by the Configuration Store. It shows how to define defaults and individual tenant configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in ASP.NET Core\nDESCRIPTION: Examples of configuring a custom implementation of IMultiTenantStrategy. The first example uses dependency injection with parameters, while the second uses a factory method for more customization.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection in Controller\nDESCRIPTION: Shows how to inject and use IOptionsMonitor<MyOptions> in a controller constructor to access option values.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Examples of configuring Http Remote Store with different URL templates and HttpClient customization options. Shows basic usage, custom templating, message handler configuration, and Polly integration for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory MultiTenant Store\nDESCRIPTION: Shows how to configure an in-memory MultiTenant store with optional case sensitivity and initial tenant data.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating for Custom MultiTenant DbContext\nDESCRIPTION: Demonstrates how to override OnModelCreating in a custom DbContext to configure multi-tenant entity types using both attributes and fluent API.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // If necessary call the base class method.\n    // Recommended to be called first.\n    base.OnModelCreating(builder);\n\n    // Configure all entity types marked with the [MultiTenant] data attribute\n    builder.ConfigureMultiTenant();\n\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Strategy for MultiTenant Resolution\nDESCRIPTION: Examples of configuring a Delegate Strategy that uses a provided function to determine the tenant. This demonstrates both async and non-async implementations for custom tenant resolution logic.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n    \n // or do it without async\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(context =>\n    {\n        var httpContext = context as HttpContext;\n        if (httpContext == null)\n            return null;\n        \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating with MultiTenant Support\nDESCRIPTION: Example showing how to override OnModelCreating while preserving multi-tenant query filters by calling the base implementation last.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n...\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // set a global query filter, e.g. to support soft delete\n        modelBuilder.Entity<Post>().HasQueryFilter(p => !p.IsDeleted);\n        \n        // call the base library implementation AFTER the above\n        base.OnModelCreating(modelBuilder);\n    }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates different ways to configure the Http Remote Store including basic URL templating, custom HTTP client configuration, and Polly integration for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore MultiTenant Store\nDESCRIPTION: Demonstrates how to configure and register an EFCore-based store with the MultiTenant system.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Querying Data in MultiTenant Context\nDESCRIPTION: Examples of querying data in a multi-tenant context, including using IgnoreQueryFilters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Will only return \"My Blog\".\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlog = db.Blogs.First();\n\n// Will only return \"Your Blog\".\ndb = new BloggingDbContext(yourTenantInfo, null);\nvar tenantBlogs = db.Blogs.First(); \n\n// TenantBlogs will contain all blogs, regardless of tenant.\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlogs = db.Blogs.IgnoreQueryFilters().ToList(); \n```\n\n----------------------------------------\n\nTITLE: Registering Custom MultiTenant Store in C#\nDESCRIPTION: Demonstrates how to register a custom store implementation using both templated and non-templated methods with service lifetime specification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// register a custom store with the templated method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore<MyStore>(ServiceLifetime.Singleton, myParam1, myParam2)...\n\n// or register a custom store with the non-templated method which accepts a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStore(ServiceLifetime.Singleton, sp => new MyStore())...\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Strategy in C#\nDESCRIPTION: Demonstrates route strategy configuration with default and custom route parameters, including middleware ordering.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Querying MultiTenant Data\nDESCRIPTION: Examples of querying data with tenant isolation and using IgnoreQueryFilters to bypass tenant filtering.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Will only return \"My Blog\".\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlog = db.Blogs.First();\n\n// Will only return \"Your Blog\".\ndb = new BloggingDbContext(yourTenantInfo, null);\nvar tenantBlogs = db.Blogs.First(); \n\n// TenantBlogs will contain all blogs, regardless of tenant.\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlogs = db.Blogs.IgnoreQueryFilters().ToList(); \n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy for MultiTenant Resolution\nDESCRIPTION: Examples of configuring Session Strategy that uses ASP.NET Core session state to retrieve the tenant identifier. Can use the default session key '__tenant__' or a custom key specified in the configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiTenantDbContext Interface\nDESCRIPTION: Shows how to implement the IMultiTenantDbContext interface with required properties for multi-tenant functionality.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with optional sliding expiration for tenant data caching.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. The store uses ASP.NET Core's distributed cache mechanism and supports JSON serialization.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in ASP.NET Core\nDESCRIPTION: Shows how to set up the Header Strategy for tenant resolution using HTTP headers. Includes examples of using both default header key '__tenant__' and custom header key configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, a simple read-only store that returns a new tenant instance based on the given identifier. It's useful for testing or environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegate Strategy in C#\nDESCRIPTION: Shows how to implement delegate strategy using both async and non-async approaches for custom tenant resolution logic.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// use async logic to get the tenant identifier\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(async context =>\n    {\n        string? tenantIdentifier = await DoSomethingAsync(context);\n        return tenantIdentifier\n    })...\n    \n // or do it without async\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithDelegateStrategy(context =>\n    {\n        var httpContext = context as HttpContext;\n        if (httpContext == null)\n            return null;\n        \n        httpContext.Request.Query.TryGetValue(\"tenant\", out StringValues tenantIdentifier);\n        \n        if (tenantIdentifier is null)\n            return Task.FromValue<string?>(null);\n        \n        return Task.FromValue(tenantIdentifier.ToString());\n    })...\n```\n\n----------------------------------------\n\nTITLE: Querying Data in MultiTenantDbContext\nDESCRIPTION: Examples of querying data in a MultiTenantDbContext, showing tenant-specific queries and how to ignore query filters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Will only return \"My Blog\".\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlog = db.Blogs.First();\n\n// Will only return \"Your Blog\".\ndb = new BloggingDbContext(yourTenantInfo, null);\nvar tenantBlogs = db.Blogs.First(); \n\n// TenantBlogs will contain all blogs, regardless of tenant.\nvar db = new BloggingDbContext(myTenantInfo, null);\nvar tenantBlogs = db.Blogs.IgnoreQueryFilters().ToList(); \n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to a URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Strategy for MultiTenant in C#\nDESCRIPTION: Shows how to configure a static strategy that always uses the same identifier to resolve the tenant. This is useful for testing or setting a fallback tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without sliding expiration for tenant information caching.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Configuration Store\nDESCRIPTION: Shows how to set up a configuration-based store using default or custom configuration paths.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy in C#\nDESCRIPTION: Shows how to implement session strategy with default and custom session key configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API with Per-Tenant Configuration\nDESCRIPTION: Example demonstrating how to use the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. This store uses ASP.NET Core's distributed cache mechanism and supports Redis, SQL Server, NCache, or an in-memory implementation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant via .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant Package using .NET CLI\nDESCRIPTION: Commands to install the Finbuckle.MultiTenant.AspNetCore NuGet package via .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context\nDESCRIPTION: Shows how to implement a database context for EFCore store by extending EFCoreStoreDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Shows how to configure the Distributed Cache Store with and without a sliding expiration time. This store uses ASP.NET Core's distributed cache mechanism and supports JSON serialization.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure Base Path Strategy which uses the first path segment to determine the tenant. Includes optional configuration to adjust ASP.NET Core Request.PathBase and Request.Path for better compatibility with other middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring EFCore Store in C#\nDESCRIPTION: Demonstrates how to configure an EFCore store for MultiTenant. It uses the WithEFCoreStore method, specifying the database context and tenant info types.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// configure dbcontext `MultiTenantStoreDbContext`, which derives from `EFCoreStoreDbContext`\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithEFCoreStore<MultiTenantStoreDbContext,TenantInfo>()...\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Shows how to set up a configuration store using default or custom configuration paths.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Strategy in ASP.NET Core\nDESCRIPTION: Shows how to configure Session Strategy that uses ASP.NET Core session to retrieve the tenant identifier. Examples show using both the default session key and a custom session key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Strategies.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// check for default \"__tenant__\" as the session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy()...\n\n// or check for a custom session key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithSessionStrategy(\"my-tenant-session-key\")...\n```\n\n----------------------------------------\n\nTITLE: Basic Options Configuration in ASP.NET Core\nDESCRIPTION: Example of configuring options in ASP.NET Core application startup using standard Configure method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Installing the Finbuckle.MultiTenant EF Core Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to a project for Entity Framework Core integration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Defines the JSON structure for configuration store with defaults and tenant-specific settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, a simple read-only store that returns a new tenant instance based on the given identifier. It's useful for testing or environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: MultiTenantIdentityDbContext Usage\nDESCRIPTION: Shows various generic type parameter combinations for MultiTenantIdentityDbContext to customize the Identity model with multi-tenant support.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Identity.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppDbContext : MultiTenantIdentityDbContext<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>\n{\n    // Custom configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, which is a simple, read-only store that returns a new tenant instance based on the given identifier without any additional settings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory MultiTenant Store\nDESCRIPTION: Demonstrates configuration of an in-memory store with options for case sensitivity and initial tenant data.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Options in ASP.NET Core Startup\nDESCRIPTION: Shows how to configure options in the application's startup code using the Configure method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring OnModelCreating for Multi-Tenant Entities\nDESCRIPTION: Override of OnModelCreating method to configure multi-tenant entity types using ModelBuilder extensions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // If necessary call the base class method.\n    // Recommended to be called first.\n    base.OnModelCreating(builder);\n\n    // Configure all entity types marked with the [MultiTenant] data attribute\n    builder.ConfigureMultiTenant();\n\n    // Configure an entity type to be multi-tenant.\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Demonstrates how to set up a Configuration store for MultiTenant. It shows the default configuration and how to use a custom configuration path.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Shows the expected JSON structure for the Configuration store. It includes a Defaults section and a Tenants array with tenant-specific information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Type Configuration for Multi-tenant Identity\nDESCRIPTION: Shows two methods to configure an entity type as multi-tenant in ASP.NET Core Identity: using the [MultiTenant] attribute or the IsMultiTenant fluent API method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class CustomIdentityUser : IdentityUser\n{\n    // Custom properties\n}\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API for Per-Tenant Options in Finbuckle.MultiTenant\nDESCRIPTION: This code shows how to use the OptionsBuilder API to configure per-tenant options with dependencies in Finbuckle.MultiTenant. It supports up to four dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Store in C#\nDESCRIPTION: Shows how to configure an in-memory store for MultiTenant. It demonstrates both default case-insensitive configuration and custom configuration with case sensitivity and initial tenants.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates how to configure the Echo Store, a simple read-only store that returns a new tenant instance based on the given identifier. It's useful for testing or environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant-Specific Options in a Controller\nDESCRIPTION: Example showing how to access tenant-specific options through dependency injection in a controller.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates the basic configuration of Echo Store, a simple read-only store for testing or static tenant scenarios.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Store in C#\nDESCRIPTION: Demonstrates how to set up a configuration store for MultiTenant. It shows both default configuration using root configuration object and custom configuration with a different configuration path key.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// register to use the default root configuration and section name.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore()...\n    \n// or use a different configuration path key\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithConfigurationStore(\"customConfigurationPathKey)...\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant via .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Configuration Store JSON Structure\nDESCRIPTION: Shows the JSON structure for configuring a Configuration Store. It includes a Defaults section for shared properties and a Tenants array for individual tenant configurations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"default_connection_string\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"unique-id-0ff4daf\",\n        \"Identifier\": \"tenant-1\",\n        \"Name\": \"Tenant 1 Company Name\",\n        \"ACustomProperty\": \"VIP Customer\"\n      },\n      {\n        \"Id\": \"unique-id-ao41n44\",\n        \"Identifier\": \"tenant-2\",\n        \"Name\": \"Name of Tenant 2\",\n        \"ConnectionString\": \"tenant_specific_connection_string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Options\nDESCRIPTION: Various methods for configuring per-tenant options using ConfigurePerTenant and related extensions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// configure options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// or configure named options per tenant\nbuilder.Services.ConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// ConfigureAll options variant\nbuilder.Services.ConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\n// can also configure post options, named post options, and all post options variants\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigurePerTenant<MyOptions, TenantInfo>(\"scheme2\", (options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n\nbuilder.Services.PostConfigureAllPerTenant<MyOptions, TenantInfo>((options, tenantInfo) =>\n    {\n        options.MyOption1 = tenantInfo.Option1Value;\n        options.MyOption2 = tenantInfo.Option2Value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemory Store in C#\nDESCRIPTION: Demonstrates setting up an in-memory store with case sensitivity options and initial tenant configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy in C#\nDESCRIPTION: Shows how to configure a Base Path Strategy that uses the first path segment to determine the tenant. Includes an option to adjust ASP.NET Core Request.PathBase and Request.Path variables.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Options Class in C#\nDESCRIPTION: A basic C# class defining options properties that can be customized per tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy by calling WithStrategy after AddMultiTenant in the ConfigureServices method. Shows two approaches: using a type or using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository and building it from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Options in Startup\nDESCRIPTION: Basic configuration of options in the application startup using the Configure method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Example showing how to access options through dependency injection in a controller and service provider.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Demonstrates the configuration of Echo Store, a simple read-only store implementation for basic tenant identification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Using MultiTenant Attribute for Entity Isolation\nDESCRIPTION: Demonstrates how to use the [MultiTenant] attribute to designate entity types for per-tenant isolation in a shared database scenario.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class BlogPost\n{\n    ...\n}\n\npublic class Roles\n{\n    ...\n}\n\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public DbSet<BlogPost> BlogPosts { get; set; }\n    public DbSet<Roles> Roles { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SaveChanges Methods for Multi-Tenant Support\nDESCRIPTION: Implementation of SaveChanges and SaveChangesAsync methods with multi-tenant enforcement.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override int SaveChanges(bool acceptAllChangesOnSuccess)\n{\n    this.EnforceMultiTenant();\n    return base.SaveChanges(acceptAllChangesOnSuccess);\n}\n\npublic override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess,\n    CancellationToken cancellationToken = default(CancellationToken))\n{\n    this.EnforceMultiTenant();\n    return await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to the URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository and building it from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Options in Startup\nDESCRIPTION: Basic configuration of options in the application startup using WebApplication builder.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache Store in C#\nDESCRIPTION: Examples of configuring Distributed Cache Store with and without sliding expiration. The store uses ASP.NET Core's distributed cache mechanism and supports Redis, SQL Server, NCache, or in-memory implementations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default configuration with no sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore()...\n\n// or set a 5 minute sliding expiration.\nservices.AddMultiTenant<TenantInfo>()\n        .WithDistributedCacheStore(TimeSpan.FromMinutes(5));\n```\n\n----------------------------------------\n\nTITLE: Accessing Options via Dependency Injection\nDESCRIPTION: Example of accessing options through dependency injection in a controller constructor and service provider.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// access options via dependency injection in a class constructor\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n    \n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // same options regardless of the current tenant\n        _myOptions = optionsAccessor.Value;\n    }\n}\n\n// or with a service provider\nhttpContext.RequestServices.GetServices<IOptionsSnaption<MyOptions>();\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API for Per-Tenant Options\nDESCRIPTION: Shows how to use the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Compiling Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository and building the project from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Adding Data in MultiTenant Context\nDESCRIPTION: Example demonstrating how to add data in a multi-tenant context and handling tenant validation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };;\nvar db = new BloggingDbContext(myTenantInfo, null);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n\n// Try to add the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Add(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MultiTenant Strategy in C#\nDESCRIPTION: Demonstrates how to configure a custom implementation of IMultiTenantStrategy using WithStrategy<TStrategy> method. It shows two approaches: using dependency injection and using a factory method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Strategies.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// configure a strategy with a given type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy<MyStrategy>(myParam1, myParam2)...\n\n// or configure a strategy with a factory method\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStrategy(sp => new MyStrategy())...\n```\n\n----------------------------------------\n\nTITLE: Defining MultiTenantException Class in C#\nDESCRIPTION: MultiTenantException is thrown when a serious problem occurs within Finbuckle.MultiTenant. It usually wraps an underlying exception.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/CoreConcepts.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantException : Exception\n{\n    public MultiTenantException(string message, Exception innerException)\n        : base(message, innerException)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Store in C#\nDESCRIPTION: Example of configuring Echo Store, a simple read-only store that returns tenant instances based on identifiers without persistence. Ideal for testing and environments with static tenant information.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMultiTenant<TenantInfo>()\n    .WithEchoStore();\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in Controller\nDESCRIPTION: Example showing how to access tenant-specific options in a controller using dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Options Class in C#\nDESCRIPTION: Simple C# class definition for options with two integer properties that will be used for demonstrating per-tenant configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant.EntityFrameworkCore Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using dotnet CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Entity Keys and Indexes\nDESCRIPTION: Example of configuring multi-tenant entity keys and indexes in OnModelCreating, using MultiTenantEntityTypeBuilder methods.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // Configure an entity type to be multi-tenant, adjust the existing keys and indexes\n    var key = builder.Entity<Blog>().Metadata.GetKeys().First();\n    builder.Entity<MyEntityType>().IsMultiTenant().AdjustKey(key, builder).AdjustIndexes();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Claim Strategy in C#\nDESCRIPTION: Demonstrates configuration of claim strategy with default and custom claim type options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// check for a claim type __tenant__\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy()...\n\n// check for a custom claim type\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithClaimStrategy(\"MyClaimType\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiTenant Identity Entity with Data Attribute\nDESCRIPTION: Example showing how to mark an Identity entity as multi-tenant using the [MultiTenant] attribute. This is one approach to designate a customized entity type derived from IdentityUser as multi-tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Identity.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MultiTenant]\npublic class CustomIdentityUser : IdentityUser\n{\n    // Custom properties\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Data in MultiTenantDbContext\nDESCRIPTION: Examples of updating and deleting data in a MultiTenantDbContext, demonstrating tenant association checks and exception handling.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a blog for a tenant.\nBlog  myBlog = new Blog{ Title = \"My Blog\" };\nvar db = new BloggingDbContext(myTenantInfo);\ndb.Blogs.Add(myBlog));\ndb.SaveChanges();\n\n// Modify and attach the same blog to a different tenant.\ndb = new BloggingDbContext(yourTenantInfo, null);\ndb.Blogs.Attach(myBlog);\nmyBlog.Title = \"My Changed Blog\";\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n\ndb.Blogs.Remove(myBlog);\nawait db.SaveChangesAsync(); // Throws MultiTenantException.\n```\n\n----------------------------------------\n\nTITLE: Accessing Per-Tenant Options in a Controller\nDESCRIPTION: Shows how to access per-tenant options in a controller using dependency injection.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyController : Controller\n{\n    private readonly MyOptions _myOptions;\n\n    public MyController(IOptionsMonitor<MyOptions> optionsAccessor)\n    {\n        // _myOptions.MyOptions1 and .MyOptions2 will be specific to the current tenant.\n        _myOptions = optionsAccessor.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Options in ASP.NET Core Startup\nDESCRIPTION: This code demonstrates how to configure options in the application startup using the Configure method. It sets a default value for Option1.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiTenantDbContext Interface\nDESCRIPTION: Implementation of the IMultiTenantDbContext interface in a custom DbContext class, defining required properties for tenant information and behavior modes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle MultiTenant EF Core Package\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.EntityFrameworkCore NuGet package.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context in C#\nDESCRIPTION: Shows how to implement a database context for use with the EFCore store. The context derives from EFCoreStoreDbContext and configures an in-memory database.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Options Class in C#\nDESCRIPTION: This snippet shows how to create a simple options class with two properties. This class will be used to demonstrate per-tenant options configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown Document\nDESCRIPTION: A markdown formatted changelog detailing version updates, features, bug fixes, and breaking changes for the Finbuckle.MultiTenant library. Each version includes links to commits, issues, and comparisons between versions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/History.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Version History\n\n<!--_history-->\n## [9.1.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.1.0...v9.1.1) (2025-03-18)\n\n### Bug Fixes\n\n* fix cache store leaving orphan tenant on some update scenarios ([#946](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/946)) ([5edd9fe](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/5edd9fee3e59207b67884514322c8f115bf4a543))\n```\n\n----------------------------------------\n\nTITLE: Implementing BloggingDbContext with Multi-Tenant Support\nDESCRIPTION: Example implementation of a multi-tenant database context with constructor configurations and DbSet properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingDbContext : MultiTenantDbContext\n{\n    // these constructors are called when dependency injection is used\n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor) : base(multiTenantContextAccessor)\n    {\n    }\n    \n    public BloggingDbContext(IMultiTenantContextAccessor multiTenantContextAccessor, DbContextOptions<BloggingDbContext> options) :\n        base(multiTenantContextAccessor, options)\n    {\n    }\n    \n    // these constructors are useful for testing or other use cases where depdenency injection is not used\n    public BloggingDbContext(ITenantInfo tenantInfo) : base(tenantInfo) { }\n\n    public BloggingDbContext(ITenantInfo tenantInfo, DbContextOptions<BloggingDbContext> options) :\n        base(tenantInfo, options) { }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options Class in C#\nDESCRIPTION: Defines a simple options class with two properties to demonstrate per-tenant options configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant via .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Store in C#\nDESCRIPTION: Shows how to configure an in-memory store with case sensitivity options and initial tenant data.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// set up a case-insensitive in-memory store.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore()...\n\n// or make it case sensitive and/or add some tenants.\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithInMemoryStore(options =>\n    {\n        options.IsCaseSensitive = true;\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n        options.Tenants.Add(new TenantInfo{...});\n    })...\n```\n\n----------------------------------------\n\nTITLE: MultiTenantContext Generic Class\nDESCRIPTION: Context class that holds information about the current tenant, including the tenant info, strategy info, and store info. Used in dependency injection and accessible through HttpContext in ASP.NET Core applications.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/CoreConcepts.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantContext<TTenantInfo> : IMultiTenantContext, IMultiTenantContext<TTenantInfo>\n{\n    public TTenantInfo TenantInfo { get; }\n    public StrategyInfo StrategyInfo { get; }\n    public StoreInfo StoreInfo { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle MultiTenant Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/EFCore.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Options Class in C#\nDESCRIPTION: Simple C# class definition for options with two integer properties that can be configured per tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository from GitHub and building the project from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Using OptionsBuilder API for Per-Tenant Options\nDESCRIPTION: Demonstrates how to use the OptionsBuilder API to configure per-tenant options with dependencies.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// use OptionsBuilder API to configure per-tenant options with dependencies\nbuilder.Services.AddOptions<MyOptions>(\"optionalName\")\n    .ConfigurePerTenant<ExampleService, TenantInfo>(\n        (options, es, tenantInfo) =>\n            options.Property = DoSomethingWith(es, tenantInfo));\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Options Class in C#\nDESCRIPTION: Simple C# class definition for options with two integer properties that can be configured per tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository and building the project from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Database Connection Per Tenant\nDESCRIPTION: Shows how to implement separate database connections for each tenant by creating a custom ITenantInfo implementation and configuring the DbContext to use tenant-specific connection strings.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppTenantInfo : ITenantInfo\n{\n    public string Id { get; set; }\n    public string Identifier { get; set; }\n    public string Name { get; set; }\n    public string ConnectionString { get; set; }\n}\n\npublic class MyAppDbContext : DbContext\n{\n   private AppTenantInfo TenantInfo { get; set; }\n\n   public MyAppDbContext(IMultiTenantContextAccessor<AppTenantInfo> multiTenantContextAccessor)\n   {\n       TenantInfo = multiTenantContextAccessor.tenantInfo;\n   } \n\n   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n   {\n       optionsBuilder.UseSqlServer(TenantInfo.ConnectionString);\n   }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands for cloning the Finbuckle.MultiTenant repository and building it from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Release Notes Formatting in Markdown\nDESCRIPTION: Markdown formatted release notes showing version 8.1.2 changes, including a link to compare changes with previous version and bug fix details.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/WhatsNew.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.2](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v8.1.1...v8.1.2) (2025-04-09)\n\n### Bug Fixes\n\n* update dependencies ([#967](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/967)) ([e1af4a8](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/e1af4a84836c652e928fc7bf7e739757ee62f5c3))\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Options in ASP.NET Core\nDESCRIPTION: Example of configuring standard options in ASP.NET Core application startup. This shows the standard approach before implementing per-tenant options.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Options Class in C#\nDESCRIPTION: Demonstrates the creation of a basic options class with two integer properties.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Options.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOptions\n{\n    public int Option1 { get; set; }\n    public int Option2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Authentication in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure separate cookie authentication for each tenant using Finbuckle.MultiTenant. It sets a unique cookie name for each tenant, allowing multiple tenant sign-ins to coexist in the same browser.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands to clone the Finbuckle.MultiTenant repository and build it from source code.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Multi-Tenant DbContext\nDESCRIPTION: Shows how to implement IMultiTenantDbContext interface and configure the required save methods for multi-tenant functionality.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbContext : DbContext, IMultiTenantDbContext\n{\n    ...\n    public ITenantInfo TenantInfo { get; }\n    public TenantMismatchMode TenantMismatchMode { get; }\n    public TenantNotSetMode TenantNotSetMode { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Command sequence to clone the Finbuckle.MultiTenant repository from GitHub and build the project using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy in C#\nDESCRIPTION: Shows implementation of base path strategy with optional path base adjustment configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant via .NET Core CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Release Notes Section in Markdown\nDESCRIPTION: This snippet shows the structure of the release notes section, including the version comparison link, release date, and bullet points for changes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/WhatsNew.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.3](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.1.2...v9.1.3) (2025-04-09)\n\n### Bug Fixes\n\n* update dependencies ([#966](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/966)) ([eb95530](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/eb95530156f2554cafdb1d29521d724a75787dad))\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Options in ASP.NET Core\nDESCRIPTION: Example of setting up standard options in an ASP.NET Core application's startup configuration.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/Options.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.Configure<MyOptions>(options => options.Option1 = 1);\n        \n // ...rest of app code\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: Basic setup code for configuring per-tenant authentication in ASP.NET Core using Finbuckle.MultiTenant. This includes setting up authentication services with cookie and OpenID Connect, and configuring multi-tenant services with route strategy and per-tenant authentication.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Remote Store in C#\nDESCRIPTION: Demonstrates various ways to configure the Http Remote Store, including appending the identifier to the URL, templating the identifier into a custom location, modifying the underlying HttpClient, and adding Polly support for resilience.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Stores.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// append the identifier to the provided url\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/)...\n\n// or template the identifier into a custom location\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/{__tenant__}/getinfo)...\n\n// or modify the underlying `HttpClient` with a custom message handler and settings\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddHttpMessageHandler<MyCustomHeaderHandler>();\n        \n        httpClientBuilder.ConfigureHttpClient( client =>\n        {\n            client.Timeout = TimeSpan.FromSeconds(10);\n        });\n    });\n \n// or add Polly support\n// via https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHttpRemoteStore(\"https://remoteserver.com/\", httpClientBuilder =>\n    {\n        httpClientBuilder.AddTransientHttpErrorPolicy(policyBuilder => policyBuilder.RetryAsync(2));\n    });\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Number in Markdown\nDESCRIPTION: Uses HTML span tags within Markdown to dynamically display the version number. This allows for easier updating of version numbers across documentation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/WhatsNew.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# What's New in v<span class=\"_version\">8.0.0</span>\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant.AspNetCore via .NET Core CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Release Notes Section in Markdown\nDESCRIPTION: This snippet demonstrates the structure of release notes in Markdown format. It includes a link to the GitHub comparison, version number, date, and categorized changes (bug fixes in this case).\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/WhatsNew.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.1.0...v9.1.1) (2025-03-18)\n\n### Bug Fixes\n\n* fix cache store leaving orphan tenant on some update scenarios ([#946](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/946)) ([5edd9fe](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/5edd9fee3e59207b67884514322c8f115bf4a543))\n* update dependency versions ([#953](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/953)) ([67598c1](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/67598c1489a38e83be1ca0779addb334319d8e7a))\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant.EntityFrameworkCore Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Finbuckle.MultiTenant v9.1.0\nDESCRIPTION: Markdown formatted changelog documenting the features and bug fixes introduced in version 9.1.0, including references to GitHub issues and commits.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/WhatsNew.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.0.0...v9.1.0) (2025-03-12)\n\n### Features\n\n* add WithDelegateStrategy<TContext, TTenantInfo> ([#932](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/932)) ([a18a935](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a18a935ea397b4cbd9e52fdcee589212db9d0999))\n* add WithHttpContextStrategy ([#934](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/934)) ([e6aeb7c](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/e6aeb7c9c265d39eb4bec0d2be526f582f41f886))\n* better async pattern for class libraries ([#942](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/942)) ([8235462](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/82354625d24ced67228246885f9f326389209e9c))\n* improved perf for HostStrategy ([#936](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/936)) ([a70f7e0](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a70f7e0f47eaf180e5f64f1bba61cae59086251a))\n\n### Bug Fixes\n\n* added new analyzers and multiple fixes  ([#937](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/937)) ([9d9b1e4](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/9d9b1e416929ebbd795c0eef3361cca7d6d238ce))\n* MultiTenantDbContext.Create should have non nullable TenantInfo ([#916](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/916)) ([9df0527](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/9df0527841549e0dd6e2017cfff3ebc6f03b7e16))\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Strategy in C#\nDESCRIPTION: Demonstrates how to configure a static strategy that always uses the same identifier to resolve the tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithStaticStrategy(\"MyTenant\")\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant Package using .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter metadata for a blog post, including date, title, slug and tags array. This metadata helps with blog organization and SEO.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/blog/hello-again-world.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nDate: 2025-04-01\nTitle: Hello (again) World!\nSlug: hello-again-world\nTags: [dotnet, programming]\n---\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Configuration in appsettings.json\nDESCRIPTION: JSON configuration for multiple tenants specifying different authentication schemes, login paths, and OpenID Connect settings for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Finbuckle:MultiTenant:Stores:ConfigurationStore\": {\n    \"Defaults\": {\n      \"ConnectionString\": \"\",\n      \"CookieLoginPath\": \"/__tenant__/home/login\",\n      \"CookieLogoutPath\": \"/__tenant__/home/logout\"\n    },\n    \"Tenants\": [\n      {\n        \"Id\": \"93f330717e5d4f039cd05da312d559cc\",\n        \"Identifier\": \"megacorp\",\n        \"Name\": \"MegaCorp\",\n        \"ChallengeScheme\": \"Cookies\"\n      },\n      {\n        \"Id\": \"505c5c97f4e2442394610c673ac91f61\",\n        \"Identifier\": \"acme\",\n        \"Name\": \"ACME\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-acme.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"2lGONpJBwIqWuN2QDAmBbYGt0k0khwQB\",\n        \"OpenIdConnectClientSecret\": \"HWxQfz6U8GvPCSsvfH5U3uv6CzAeQSt8qHrc19_qEvUQhdsaJX9Dp-t9W-5SAj0m\"\n      },\n      {\n        \"Id\": \"4ee609d6da0342e682012232566cff0e\",\n        \"Identifier\": \"initech\",\n        \"Name\": \"Initech\",\n        \"ChallengeScheme\": \"OpenIdConnect\",\n        \"OpenIdConnectAuthority\": \"https://finbuckle-initech.us.auth0.com\",\n        \"OpenIdConnectClientId\": \"nmPF6VABNmzTISvtYLPenf08ARveQifZ\",\n        \"OpenIdConnectClientSecret\": \"WINWtT2WAhWYUOgGHsAPIUV-dAHs1X4qcU6Pv98HBrorlOB5OMKetnsR0Ov0LuVm\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Finbuckle MultiTenant Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to a project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/EFCore.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown link structure for the documentation navigation menu, including version reference and major feature sections.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">9.1.3</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle MultiTenant EF Core Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using dotnet CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Number in Markdown\nDESCRIPTION: This snippet demonstrates how to display a dynamic version number in a Markdown document using HTML span tags with a custom class.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/WhatsNew.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# What's New in v<span class=\"_version\">9.1.3</span>\n```\n\n----------------------------------------\n\nTITLE: Defining MultiTenantException Class in C#\nDESCRIPTION: The MultiTenantException class is a custom exception type thrown when serious problems occur within Finbuckle.MultiTenant. It typically wraps an underlying exception.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/CoreConcepts.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantException : Exception\n{\n    public MultiTenantException(string message, Exception innerException)\n        : base(message, innerException)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Finbuckle Documentation\nDESCRIPTION: A collection of markdown links defining the documentation structure and navigation paths for the Finbuckle website, including version information and major feature sections.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">9.1.2</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authentication in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to set up per-tenant authentication using Finbuckle.MultiTenant in an ASP.NET Core application. It includes adding authentication services, configuring Finbuckle.MultiTenant services, and setting up the middleware.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.3/Authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Finbuckle.MultiTenant;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n // ...add app services\n\n// add authentication services\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n       .AddCookie()\n       .AddOpenIdConnect();\n\n// add Finbuckle.MultiTenant services\nbuilder.Services.AddMultiTenant<TenantInfo>()\n       .WithRouteStrategy()\n       .WithConfigurationStore()\n       .WithPerTenantAuthentication();\n\nvar app = builder.Build();\n\n// add the Finbuckle.MultiTenant middleware\napp.UseMultiTenant();\n\n// ...add other middleware\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links Structure\nDESCRIPTION: A collection of markdown links organizing the documentation navigation structure, including version information and core documentation sections.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">9.0.0</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Documentation Index Links in Markdown\nDESCRIPTION: A collection of markdown links forming the navigation structure for Finbuckle documentation. Includes links to core concepts, configuration, multi-tenant strategies, authentication, and data management with EF Core and Identity.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">8.1.2</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: A structured changelog detailing version releases, features, bug fixes and other changes to the Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/History.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* make DecorateService public ([#671](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/671)) ([c9746d6](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/c9746d6655f2fa0130031885ebf9b4980a93c531)), closes [#668](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/668)\n\n## [6.11.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v6.10.0...v6.11.0) (2023-07-01)\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example of how to access the current tenant's information using the HttpContext extension method in an ASP.NET Core application.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Number in Markdown\nDESCRIPTION: This snippet shows how to display the version number dynamically using HTML span tags within a Markdown file. It's used to show the current version (9.1.1) in the document title and body.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/WhatsNew.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# What's New in v<span class=\"_version\">9.1.1</span>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Finbuckle.MultiTenant from Source\nDESCRIPTION: Commands to clone the Finbuckle.MultiTenant repository from GitHub and build the project using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/GettingStarted.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Finbuckle/Finbuckle.MultiTenant.git\n$ cd Finbuckle.MultiTenant\nCloning into 'Finbuckle.MultiTenant'...\n<output omitted>\n$ cd Finbuckle.MultiTenant\n$ dotnet build\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: Changelog entries documenting version releases, features, bug fixes and breaking changes for the Finbuckle.MultiTenant library.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/History.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [6.5.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v6.4.2...v6.5.0) (2021-11-08)\n\n### Features\n\n* add .NET 6 support ([#489](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/489)) ([a2d0416](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a2d041670bf7efb198b06a864bad0a4cfc490a0c))\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle.MultiTenant Package with .NET CLI\nDESCRIPTION: Command to install the Finbuckle.MultiTenant.AspNetCore NuGet package using the .NET Core CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/GettingStarted.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package Finbuckle.MultiTenant.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog Entry\nDESCRIPTION: Markdown formatted changelog entry showing version updates, features, bug fixes and breaking changes with commit references and links\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/History.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v9.0.0...v9.1.0) (2025-03-12)\n\n### Features\n\n* add WithDelegateStrategy<TContext, TTenantInfo> ([#932](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/932)) ([a18a935](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a18a935ea397b4cbd9e52fdcee589212db9d0999))\n* add WithHttpContextStrategy ([#934](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/934)) ([e6aeb7c](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/e6aeb7c9c265d39eb4bec0d2be526f582f41f886))\n* better async pattern for class libraries ([#942](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/942)) ([8235462](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/82354625d24ced67228246885f9f326389209e9c))\n* improved perf for HostStrategy ([#936](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/936)) ([a70f7e0](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a70f7e0f47eaf180e5f64f1bba61cae59086251a))\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for Finbuckle.MultiTenant using the .NET CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Finbuckle Documentation\nDESCRIPTION: Structured navigation links in Markdown format that outline the main documentation sections of the Finbuckle multi-tenant framework. Includes version information and links to core functionality documentation.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">9.1.0</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog Entry Format\nDESCRIPTION: Example format showing how version changes are documented with version number, date, breaking changes, features and bug fixes\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/History.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v8.0.0...v9.0.0) (2024-11-13)\n\n### ⚠ BREAKING CHANGES\n\n* `OnTenantResolved` and `OnTenantNotResolved` are no longer used. Use the `OnStrategyResolveCompleted`, `OnStoreResolveCompleted`, and `OnTenantResolveCompleted` events instead.\n* `MultiTenantDbContext` constructors accepting `ITenantInfo` removed, use `MultiTenantDbContext.Create` factory method instead.\n* net6.0 and net7.0 are no longer supported targets.\n* dotnet runtime specific dependencies now float to the latest patch version and are locked at release time with a NuGet lock file. This is a security mitigation and may break some builds not on the latest SDKs.\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Section\nDESCRIPTION: A Markdown-formatted section detailing the changes in version 8.0.0 of Finbuckle.MultiTenant. It includes links, lists of features, bug fixes, and breaking changes.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/WhatsNew.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v7.0.2...v8.0.0) (2024-10-12)\n\n### ⚠ BREAKING CHANGES\n\n* This commit brings the release into alignment with the new version policy. See #887 for details.\n* Included strategies for ASP.NET Core would throw an exception if the passed context was not an `HttpContext` type. Now they will return null indicating no identifier was found.\n\n### Features\n\n* add GetAllAsync() support for HttpRemoteStore ([#848](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/848)) ([4208149](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/4208149282eaee99e2c02a788a2653faaa24ef7a))\n* added the Echo Store. ([#807](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/807)) ([a3e5eee](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/a3e5eee64f0581c5f3d6abca7bb77cc56ef1d75c))\n* strategies return null on invalid context type ([#885](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/885)) ([9834575](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/9834575c957fb5bd314cf0970e54a29384026d02))\n\n### Bug Fixes\n\n* BasePathStrategy no longer breaks the strategy chain ([#884](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/884)) ([3263eff](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/3263effae4638656aab827b24094a8e575ae19a0))\n* prevent duplicate key annotation in AdjustKey() ([#883](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/883)) ([f75ba2c](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/f75ba2c678079d2e956bf7d32b8e5aee0159e72b))\n* removed unused parameter from WithPerTenantRemoteAuthenticationConvention ([#886](https://github.com/Finbuckle/Finbuckle.MultiTenant/issues/886)) ([dd17ab5](https://github.com/Finbuckle/Finbuckle.MultiTenant/commit/dd17ab51825ec94f4ecfe704f42c6b0457562d98))\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Information Manually with HttpContext Extension\nDESCRIPTION: Example demonstrating how to manually set tenant information using the TrySetTenantInfo extension method on HttpContext. This also shows how to reset the service provider to ensure scoped services use the new tenant context.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Box in Markdown\nDESCRIPTION: Utilizes a custom Markdown syntax to create an alert box, likely rendered as HTML in the final output. This alert informs users about the specific content of the page.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/WhatsNew.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::{.alert .alert-warning}\nThis page only lists release update details specific to v<span class=\"_version\">8.0.0</span>.  \nSee [History](History) for all release details.\n:::\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: Structured changelog documenting version history from 1.0.0 to 1.1.1, including links to version comparisons, bug fixes, and feature additions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/History.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.1.1](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.1.0...v1.1.1) (2018-05-22)\n\n### Changes\n\n- Fixed bug affecting per-tenant data isolation using a shared database\n- Added sample project for data isolation\n- Added new constructors for `MultiTenantDbContext` and `MultiTenantIdentityDbContext`\n\n## [1.1.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/compare/v1.0.0...v1.1.0) (2018-04-22)\n\n### Changes\n\n- Remote authentication support\n- Strategy improvements\n- Store improvements\n- Per-tenant options improvements\n- Logging support\n- Updated samples\n- Improved unit and integration tests\n- Switch to Apache 2.0 license\n\n## [1.0.0](https://github.com/Finbuckle/Finbuckle.MultiTenant/tree/v1.0.0) (2018-01-01)\n\n### Changes\n\n- Initial release\n<!--_history-->\n```\n\n----------------------------------------\n\nTITLE: Installing Finbuckle MultiTenant Package\nDESCRIPTION: Command to add the Finbuckle.MultiTenant.EntityFrameworkCore package to the project using dotnet CLI.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Finbuckle.MultiTenant.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Tenant in ASP.NET Core with HttpContext Extensions\nDESCRIPTION: Example showing how to access the current tenant information using the HttpContext extension methods. It demonstrates retrieving tenant properties like Id, Identifier, and Name from the TenantInfo object.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/ConfigurationAndUsage.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n  var tenantId = tenantInfo.Id;\n  var identifier = tenantInfo.Identifier;\n  var name = tenantInfo.Name;\n  var something = tenantInfo.Items[\"something\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant JWT Bearer Authentication\nDESCRIPTION: Example of configuring JWT bearer authentication options per tenant, allowing different token validation authorities for each tenant.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default JwtBearer authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<JwtBearerOptions, TenantInfo>(JwtBearerDefaults.AuthenticationScheme, (options, \ntenantInfo) =>\n    {\n        // assume tenants are configured with an authority string to use here.\n        options.Authority = tenantInfo.JwtAuthority;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Strategy in C#\nDESCRIPTION: Shows how to configure a Route Strategy that uses a route parameter to determine the tenant. Demonstrates both default and custom route parameter configurations and the correct middleware ordering.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/Strategies.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use the default route parameter name \"__tenant__\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy()...\n    \n// or set a different route parameter name of \"MyTenantRouteParam\"\nbuilder.Services.AddMultiTenant<TenantInfo>()\n  .WithRouteStrategy(\"MyTenantRouteParam\")...\n\n// UseRouting is optional in ASP.NET Core, but if needed place before UseMultiTenant when the route strategy used\napp.UseRouting();\napp.UseMultiTenant();\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Strategy in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure the Host Strategy for tenant resolution using domain segments. Shows both default configuration using first domain segment and custom pattern configuration using specific domain segments.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Strategies.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// check the first domain segment (e.g. subdomain)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy()...\n\n// check the second level domain segment (see 2nd example above)\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHostStrategy(\"*.__tenant__.?\")...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tenant Info\nDESCRIPTION: Demonstrates how to manually set tenant information using HttpContext extension methods, including the option to reset the service provider scope for scoped services.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/ConfigurationAndUsage.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newTenantInfo = new TenantInfo(...);\n\nif(HttpContext.TrySetTenantInfo(newTenantInfo, resetServiceProvider: true))\n{\n    // This will be the new tenant.\n    var tenant = HttpContext.GetMultiTenantContext().TenantInfo;\n\n    // This will regenerate the options class.\n    var optionsProvider = HttpContext.RequestServices.GetService<IOptions<MyScopedOptions>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Cookie Authentication\nDESCRIPTION: Shows how to configure separate authentication cookies per tenant to maintain multiple concurrent tenant sessions.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.0/Authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n        .WithConfigurationStore()\n        .WithRouteStrategy()\n        .WithPerTenantAuthentication()\n\n// WithPerTenantAuthentication, as shown above, is needed for this to work as intended.\n// Note the default cookie authentication scheme is used for the options name per AspNetCore defauls,\n// but you can use a custom authentication scheme name to scope the options or use ConfigureAllPerTenant\n// to impact all authentication schemes.\nbuilder.Services.ConfigurePerTenant<CookieAuthenticationOptions, TenantInfo>(CookieAuthenticationDefaults.AuthenticationScheme, (options, tenantInfo) =>\n  {\n    options.Cookie.Name = \"SignInCookie-\" + tenantInfo.Id;\n  });\n```\n\n----------------------------------------\n\nTITLE: Working with Existing Query Filters and MultiTenant Configuration\nDESCRIPTION: Shows how to correctly combine existing query filters with multi-tenant configuration by calling IsMultiTenant after setting up other query filters.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.0.0/EFCore.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    // set a global query filter, e.g. to support soft delete\n    builder.Entity<MyEntityType>().HasQueryFilter(p => !p.IsDeleted);\n\n    // configure an entity type to be multi-tenant (will merge with existing call to HasQueryFilter)\n    builder.Entity<MyEntityType>().IsMultiTenant();\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Structure in Markdown\nDESCRIPTION: A markdown-formatted navigation menu listing all major documentation sections of Finbuckle.Website, including links to configuration, multitenancy features, and integration guides.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">8.1.0</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Strategy in ASP.NET Core\nDESCRIPTION: Shows how to set up the Header Strategy for tenant resolution using HTTP headers. Includes examples of using both the default header key and a custom header key for tenant identification.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Strategies.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// check for header \"__tenant__\" value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy()...\n\n// or check for custom header value\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithHeaderStrategy(\"MyHeaderKey\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path Strategy for MultiTenant Resolution\nDESCRIPTION: Example of configuring Base Path Strategy that uses the first path segment to determine the tenant. Includes options for adjusting ASP.NET Core Request.PathBase and Request.Path variables.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/Strategies.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy()...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMultiTenant<TenantInfo>()\n    .WithBasePathStrategy(options =>\n    {\n          options.RebaseAspNetCorePathBase = true;\n    })...\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command for running the unit tests for the Finbuckle.MultiTenant project from the solution directory.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.0.0/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Accessing Tenant Information in ASP.NET Core\nDESCRIPTION: Example of how to access the current tenant information from HttpContext using the GetMultiTenantContext extension method.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.1/GettingStarted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantInfo = HttpContext.GetMultiTenantContext<TenantInfo>().TenantInfo;\n\nif(tenantInfo != null)\n{\n    var tenantId = tenantInfo.Id;\n    var identifier = tenantInfo.Identifier;\n    var name = tenantInfo.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to run the unit tests for the Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.0/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Implementing EFCore Store Database Context\nDESCRIPTION: Shows how to create a database context for the EFCore store by extending EFCoreStoreDbContext.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v8.1.2/Stores.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiTenantStoreDbContext : EFCoreStoreDbContext<TenantInfo>\n{\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n  {\n      // Use InMemory, but could be MsSql, Sqlite, MySql, etc...\n      optionsBuilder.UseInMemoryDatabase(\"EfCoreStoreSampleConnectionString\");\n      base.OnConfiguring(optionsBuilder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Finbuckle.MultiTenant Unit Tests\nDESCRIPTION: Command to execute the unit tests for the Finbuckle.MultiTenant project.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.2/GettingStarted.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test\n```\n\n----------------------------------------\n\nTITLE: Documentation Navigation Links in Markdown\nDESCRIPTION: A series of markdown links forming the navigation structure for Finbuckle's documentation, organized by topic from introduction to specific implementations.\nSOURCE: https://github.com/Finbuckle/Finbuckle.Website/blob/main/content/docs/v9.1.1/Index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Introduction](Introduction)\n\n[What's New in v<span class=\"_version\">9.1.1</span>](WhatsNew)\n\n[Version History](History)\n\n[Getting Started](GettingStarted)\n\n[Core Concepts](CoreConcepts)\n\n[Configuration and Usage](ConfigurationAndUsage)\n\n[MultiTenant Strategies](Strategies)\n\n[MultiTenant Stores](Stores)\n\n[Per-Tenant Options](Options)\n\n[Per-Tenant Authentication](Authentication)\n\n[Per-Tenant Data with EFCore](EFCore)\n\n[Per-Tenant Data with Identity](Identity)\n```"
  }
]