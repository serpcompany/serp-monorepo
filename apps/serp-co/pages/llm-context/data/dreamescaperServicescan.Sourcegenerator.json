[
  {
    "owner": "dreamescaper",
    "repo": "servicescan.sourcegenerator",
    "content": "TITLE: Creating a Basic Service Registration Method\nDESCRIPTION: Example of creating a partial method with GenerateServiceRegistrations attribute to scan for services that implement IMyService and register them with scoped lifetime.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class ServicesExtensions\n{\n    [GenerateServiceRegistrations(AssignableTo = typeof(IMyService), Lifetime = ServiceLifetime.Scoped)]\n    public static partial IServiceCollection AddServices(this IServiceCollection services);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Generated Service Registration Method\nDESCRIPTION: Example of how to use the generated service registration method in a service configuration.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddServices();\n```\n\n----------------------------------------\n\nTITLE: Registering Repositories by Name with Interface Discovery\nDESCRIPTION: Example of registering all classes with names ending in 'Repository' as their implemented interfaces with scoped lifetime, allowing for easy registration of repository implementations.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[GenerateServiceRegistrations(\n    TypeNameFilter = \"*Repository\",\n    AsImplementedInterfaces = true,\n    Lifetime = ServiceLifetime.Scoped)]\nprivate static partial IServiceCollection AddRepositories(this IServiceCollection services);\n```\n\n----------------------------------------\n\nTITLE: Registering MediatR Handlers with ServiceScan\nDESCRIPTION: Example of setting up MediatR in a project with automatic handler registration using ServiceScan. This adds both command and query handlers with transient lifetime.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddMediatR(this IServiceCollection services)\n{\n    return services\n        .AddTransient<IMediator, Mediator>()\n        .AddMediatRHandlers();\n}\n\n[GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler<>), Lifetime = ServiceLifetime.Transient)]\n[GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler<,>), Lifetime = ServiceLifetime.Transient)]\nprivate static partial IServiceCollection AddMediatRHandlers(this IServiceCollection services);\n```\n\n----------------------------------------\n\nTITLE: Registering AspNetCore Minimal API Endpoints with Custom Handler\nDESCRIPTION: Example of using a custom handler to automatically discover and map Minimal API endpoints. This pattern uses a static method on endpoints to define their routes.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IEndpoint\n{\n    abstract static void MapEndpoint(IEndpointRouteBuilder endpoints);\n}\n\npublic class HelloWorldEndpoint : IEndpoint\n{\n    public static void MapEndpoint(IEndpointRouteBuilder endpoints)\n    {\n        endpoints.MapGet(\"/\", () => \"Hello World!\");\n    }\n}\n\npublic static partial class ServiceCollectionExtensions\n{\n    [GenerateServiceRegistrations(AssignableTo = typeof(IEndpoint), CustomHandler = nameof(MapEndpoint))]\n    public static partial IEndpointRouteBuilder MapEndpoints(this IEndpointRouteBuilder endpoints);\n\n    private static void MapEndpoint<T>(IEndpointRouteBuilder endpoints) where T : IEndpoint\n    {\n        T.MapEndpoint(endpoints);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering FluentValidation Validators with AOT Compatibility\nDESCRIPTION: Example of registering all FluentValidation validators with singleton lifetime that is AOT-compatible, unlike the standard FluentValidation DI extensions.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[GenerateServiceRegistrations(AssignableTo = typeof(IValidator<>), Lifetime = ServiceLifetime.Singleton)]\npublic static partial IServiceCollection AddValidators(this IServiceCollection services);\n```\n\n----------------------------------------\n\nTITLE: Registering Options Types with Section Keys\nDESCRIPTION: Example of using a custom handler with attribute filtering to register Options types with their configuration sections. This allows automatic binding of configuration sections to option classes.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\npublic class OptionAttribute(string? section = null) : Attribute\n{\n    public string? Section { get; } = section;\n}\n\n[Option]\npublic record RootSection { }\n\n[Option(\"SectionOption\")]\npublic record SectionOption { }\n\npublic static partial class ServiceCollectionExtensions\n{\n    [GenerateServiceRegistrations(AttributeFilter = typeof(OptionAttribute), CustomHandler = nameof(AddOption))]\n    public static partial IServiceCollection AddOptions(this IServiceCollection services, IConfiguration configuration);\n\n    private static void AddOption<T>(IServiceCollection services, IConfiguration configuration) where T : class\n    {\n        var sectionKey = typeof(T).GetCustomAttribute<OptionAttribute>()?.Section;\n        var section = sectionKey is null ? configuration : configuration.GetSection(sectionKey);\n        services.Configure<T>(section);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Implementation for Service Registration\nDESCRIPTION: Example of the code that ServiceScan will generate for the partial method decorated with GenerateServiceRegistrations. It registers all implementations of IMyService with scoped lifetime.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class ServicesExtensions\n{\n    public static partial IServiceCollection AddServices(this IServiceCollection services)\n    {\n        return services\n            .AddScoped<IMyService, ServiceImplementation1>()\n            .AddScoped<IMyService, ServiceImplementation2>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ServiceScan.SourceGenerator via NuGet\nDESCRIPTION: Command to add the ServiceScan.SourceGenerator package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dreamescaper/servicescan.sourcegenerator/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package ServiceScan.SourceGenerator\n```"
  }
]