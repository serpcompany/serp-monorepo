[
  {
    "owner": "sebadob",
    "repo": "hiqlite",
    "content": "TITLE: Connecting to HiqLite via Remote Client (Rust)\nDESCRIPTION: This Rust code snippet demonstrates how to establish a remote connection to a HiqLite cluster using the `hiqlite::Client::remote()` function. This function allows a client to connect to a HiqLite instance through a proxy, enabling access to the cluster from outside the network where the nodes are directly accessible.  It relies on the `hiqlite` crate.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n\"hiqlite::Client::remote()\"\n```\n\n----------------------------------------\n\nTITLE: Defining HiqLite StatefulSet and Services\nDESCRIPTION: This YAML defines a Kubernetes StatefulSet for HiqLite, along with two services: a standard service for accessing the dashboard via NodePort, and a headless service for internal node communication. The StatefulSet manages the HiqLite pods, specifying the image, environment variables (using secrets), volume mounts, liveness probe, and resource requests.  The services enable external access and internal clustering.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite\n  namespace: hiqlite\nspec:\n  selector:\n    app: hiqlite\n  type: NodePort\n  ports:\n    - name: raft\n      protocol: TCP\n      port: 8100\n      targetPort: 8100\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite-headless\n  namespace: hiqlite\nspec:\n  clusterIP: None\n  selector:\n    app: hiqlite\n  ports:\n    - name: raft\n      protocol: TCP\n      port: 8100\n      targetPort: 8100\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: hiqlite\n  namespace: hiqlite\n  labels:\n    app: hiqlite\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hiqlite\n  serviceName: hiqlite-headless\n  template:\n    metadata:\n      labels:\n        app: hiqlite\n    spec:\n      containers:\n        - name: hiqlite\n          image: ghcr.io/sebadob/hiqlite:0.4.0\n          imagePullPolicy: Always\n          securityContext:\n            allowPrivilegeEscalation: false\n          ports:\n            - containerPort: 8100\n            - containerPort: 8200\n          env:\n            - name: HQL_SECRET_RAFT\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_RAFT\n            - name: HQL_SECRET_API\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_API\n            - name: HQL_S3_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_S3_KEY\n            - name: HQL_S3_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_S3_SECRET\n            - name: ENC_KEYS\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEYS\n            - name: ENC_KEY_ACTIVE\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEY_ACTIVE\n            - name: HQL_PASSWORD_DASHBOARD\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_PASSWORD_DASHBOARD\n          volumeMounts:\n            - mountPath: /app/config\n              subPath: config\n              name: hiqlite-config\n            - mountPath: /app/data\n              name: hiqlite-data\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              port: 8200\n              path: /health\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          resources:\n            requests:\n              memory: 32Mi\n              cpu: 100m\n      # add your image pull secrets name here in case you use a private container registry\n      #imagePullSecrets:\n      #  - name: harbor\n      volumes:\n        - name: hiqlite-config\n          configMap:\n            name: hiqlite-config\n  volumeClaimTemplates:\n    - metadata:\n        name: hiqlite-data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: 256Mi\n        # In case you want to specify the storage class.\n        # You should always(!) prefer local over some replicated abstraction layer.\n        # Hiqlite cares about replication itself already.\n        #storageClassName: local-path\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining HiqLite Proxy Service and Deployment\nDESCRIPTION: This YAML defines a Kubernetes Service and Deployment for a HiqLite proxy. The service exposes the proxy via a NodePort, enabling external access. The deployment manages the proxy pods, specifying the image, command to run the proxy, environment variables (using secrets), volume mounts, liveness probe, and resource requests. This allows remote clients to connect to the HiqLite cluster.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite-proxy\n  namespace: hiqlite\nspec:\n  type: NodePort\n  selector:\n    app: hiqlite-proxy\n  ports:\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n      nodePort: 30820\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hiqlite-proxy\n  namespace: hiqlite\n  labels:\n    app: hiqlite-proxy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hiqlite-proxy\n  template:\n    metadata:\n      labels:\n        app: hiqlite-proxy\n    spec:\n      containers:\n        - name: hiqlite-proxy\n          image: ghcr.io/sebadob/hiqlite:0.4.0\n          command: [ \\\"/app/hiqlite\\\", \\\"proxy\\\" ]\n          imagePullPolicy: Always\n          securityContext:\n            allowPrivilegeEscalation: false\n          ports:\n            - containerPort: 8100\n            - containerPort: 8200\n          env:\n            - name: HQL_SECRET_API\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_API\n            - name: ENC_KEYS\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEYS\n            - name: ENC_KEY_ACTIVE\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEY_ACTIVE\n            - name: HQL_PASSWORD_DASHBOARD\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_PASSWORD_DASHBOARD\n          volumeMounts:\n            - mountPath: /app/config\n              subPath: config\n              name: hiqlite-config\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              port: 8200\n              path: /ping\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          resources:\n            requests:\n              memory: 32Mi\n              cpu: 100m\n      # add your image pull secrets name here in case you use a private container registry\n      #imagePullSecrets:\n      #  - name: harbor\n      volumes:\n        - name: hiqlite-config\n          configMap:\n            name: hiqlite-config\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining HiqLite Configuration ConfigMap\nDESCRIPTION: This YAML defines a Kubernetes ConfigMap named `hiqlite-config` within the `hiqlite` namespace.  It contains configuration data for HiqLite, including node IDs, node addresses, logging settings, and S3 backup configurations. These environment variables control the runtime behavior of the HiqLite nodes.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hiqlite-config\n  namespace: hiqlite\ndata:\n  config: |-\n    HQL_NODE_ID_FROM=k8s\n\n    HQL_NODES=\" +\n    \"\\n    1 hiqlite-0.hiqlite-headless:8100 hiqlite-0.hiqlite-headless:8200\\n\" +\n    \"    2 hiqlite-1.hiqlite-headless:8100 hiqlite-1.hiqlite-headless:8200\\n\" +\n    \"    3 hiqlite-2.hiqlite-headless:8100 hiqlite-2.hiqlite-headless:8200\\n\" +\n    \"    \\n\n    HQL_LOG_STATEMENTS=false\n    HQL_LOGS_UNTIL_SNAPSHOT=10000\n    HQL_BACKUP_KEEP_DAYS=3\n\n    HQL_S3_URL=https://s3.example.com\n    HQL_S3_BUCKET=test\n    HQL_S3_REGION=example\n    HQL_S3_PATH_STYLE=true\n\n    HQL_INSECURE_COOKIE=true\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining HiqLite Secrets\nDESCRIPTION: This YAML defines a Kubernetes Secret named `hiqlite-secrets` within the `hiqlite` namespace. It stores sensitive information such as raft and API secrets, S3 credentials, encryption keys, and a hashed password for the HiqLite dashboard.  These secrets are used by the HiqLite pods to securely access resources and configure authentication.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: Secret\nmetadata:\n  name: hiqlite-secrets\n  namespace: hiqlite\ntype: Opaque\nstringData:\n  HQL_SECRET_RAFT: 123SuperMegaSafeRandomValue\n  HQL_SECRET_API: 123SuperMegaSafeRandomValue\n\n  HQL_S3_KEY: YourS3KeyId\n  HQL_S3_SECRET: YourS3Secret\n\n  ENC_KEYS: \" +\n  \"\\n  bVCyTsGaggVy5yqQ/UzluN29DZW41M3hTSkx6Y3NtZmRuQkR2TnJxUTYzcjQ=\\n  \"\n  ENC_KEY_ACTIVE: bVCyTsGaggVy5yqQ\n\n  # This is a base64 encoded Argon2ID hash for the password: 123SuperMegaSafe\n  HQL_PASSWORD_DASHBOARD: JGFyZ29uMmlkJHY9MTkkbT0xOTQ1Nix0PTIscD0xJGQ2RlJDYTBtaS9OUnkvL1RubmZNa0EkVzJMeTQrc1dxZ0FGd0RyQjBZKy9iWjBQUlZlOTdUMURwQkk5QUoxeW1wRQ==\n\"\n```\n\n----------------------------------------\n\nTITLE: Deploying HiQLite StatefulSet and Services in Kubernetes\nDESCRIPTION: YAML configuration for HiQLite StatefulSet deployment with associated Services for node communication.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite\n  namespace: hiqlite\nspec:\n  selector:\n    app: hiqlite\n  type: NodePort\n  ports:\n    - name: raft\n      protocol: TCP\n      port: 8100\n      targetPort: 8100\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite-headless\n  namespace: hiqlite\nspec:\n  clusterIP: None\n  selector:\n    app: hiqlite\n  ports:\n    - name: raft\n      protocol: TCP\n      port: 8100\n      targetPort: 8100\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: hiqlite\n  namespace: hiqlite\n  labels:\n    app: hiqlite\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hiqlite\n  serviceName: hiqlite-headless\n  template:\n    metadata:\n      labels:\n        app: hiqlite\n    spec:\n      containers:\n        - name: hiqlite\n          image: ghcr.io/sebadob/hiqlite:0.4.0\n          imagePullPolicy: Always\n          securityContext:\n            allowPrivilegeEscalation: false\n          ports:\n            - containerPort: 8100\n            - containerPort: 8200\n          env:\n            - name: HQL_SECRET_RAFT\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_RAFT\n            - name: HQL_SECRET_API\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_API\n            - name: HQL_S3_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_S3_KEY\n            - name: HQL_S3_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_S3_SECRET\n            - name: ENC_KEYS\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEYS\n            - name: ENC_KEY_ACTIVE\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEY_ACTIVE\n            - name: HQL_PASSWORD_DASHBOARD\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_PASSWORD_DASHBOARD\n          volumeMounts:\n            - mountPath: /app/config\n              subPath: config\n              name: hiqlite-config\n            - mountPath: /app/data\n              name: hiqlite-data\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              port: 8200\n              path: /health\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          resources:\n            requests:\n              memory: 32Mi\n              cpu: 100m\n      volumes:\n        - name: hiqlite-config\n          configMap:\n            name: hiqlite-config\n  volumeClaimTemplates:\n    - metadata:\n        name: hiqlite-data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: 256Mi\n```\n\n----------------------------------------\n\nTITLE: Configuring HiQLite Secrets in Kubernetes\nDESCRIPTION: YAML configuration for HiQLite Secrets containing encryption keys, API secrets, and S3 credentials.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hiqlite-secrets\n  namespace: hiqlite\ntype: Opaque\nstringData:\n  HQL_SECRET_RAFT: 123SuperMegaSafeRandomValue\n  HQL_SECRET_API: 123SuperMegaSafeRandomValue\n\n  HQL_S3_KEY: YourS3KeyId\n  HQL_S3_SECRET: YourS3Secret\n\n  ENC_KEYS: \"\n  bVCyTsGaggVy5yqQ/UzluN29DZW41M3hTSkx6Y3NtZmRuQkR2TnJxUTYzcjQ=\n  \"\n  ENC_KEY_ACTIVE: bVCyTsGaggVy5yqQ\n\n  HQL_PASSWORD_DASHBOARD: JGFyZ29uMmlkJHY9MTkkbT0xOTQ1Nix0PTIscD0xJGQ2RlJDYTBtaS9OUnkvL1RubmZNa0EkVzJMeTQrc1dxZ0FGd0RyQjBZKy9iWjBQUlZlOTdUMURwQkk5QUoxeW1wRQ==\n```\n\n----------------------------------------\n\nTITLE: Configuring HiQLite ConfigMap in Kubernetes\nDESCRIPTION: YAML configuration for HiQLite ConfigMap defining node setup, logging parameters, and S3 backup settings.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hiqlite-config\n  namespace: hiqlite\ndata:\n  config: |\n    HQL_NODE_ID_FROM=k8s\n\n    HQL_NODES=\"\n    1 hiqlite-0.hiqlite-headless:8100 hiqlite-0.hiqlite-headless:8200\n    2 hiqlite-1.hiqlite-headless:8100 hiqlite-1.hiqlite-headless:8200\n    3 hiqlite-2.hiqlite-headless:8100 hiqlite-2.hiqlite-headless:8200\n    \"\n\n    HQL_LOG_STATEMENTS=false\n    HQL_LOGS_UNTIL_SNAPSHOT=10000\n    HQL_BACKUP_KEEP_DAYS=3\n\n    HQL_S3_URL=https://s3.example.com\n    HQL_S3_BUCKET=test\n    HQL_S3_REGION=example\n    HQL_S3_PATH_STYLE=true\n\n    HQL_INSECURE_COOKIE=true\n```\n\n----------------------------------------\n\nTITLE: Configuring HiQLite Cache-Only Node in Rust\nDESCRIPTION: Sets up a single HiQLite node using configuration file parsing, specifically for cache-only mode. Demonstrates how to load node configuration from an external file and initialize a cache-only node.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/cache-only/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Example configuration for cache-only HiQLite node\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite PRAGMAs for Hiqlite\nDESCRIPTION: This snippet shows the default PRAGMA settings used in Hiqlite to optimize SQLite performance. It includes settings for journal mode, synchronization, page size, and other optimization parameters.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/ARCHITECTURE.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPRAGMA journal_mode=WAL;\nPRAGMA synchronous=OFF;\n\nPRAGMA page_size=4096;\nPRAGMA journal_size_limit=16384;\nPRAGMA wal_autocheckpoint=4000;\n\nPRAGMA auto_vacuum=INCREMENTAL;\nPRAGMA foreign_keys=ON;\nPRAGMA optimize=0x10002;\n```\n\n----------------------------------------\n\nTITLE: Installing Hiqlite Server Binary\nDESCRIPTION: Commands to install Hiqlite as a standalone server using cargo with the server feature enabled.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install hiqlite --features server\n```\n\n----------------------------------------\n\nTITLE: Installing HiQLite as a Standalone Server\nDESCRIPTION: Command to install HiQLite as a standalone server binary using Cargo. This enables running HiQLite as a separate service rather than embedding it in an application.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install hiqlite --features server\n```\n\n----------------------------------------\n\nTITLE: Starting HiQLite Server Node 1\nDESCRIPTION: Command to start the first node in a 3-node Raft cluster. This node (id 1) is responsible for inserting data in this example setup.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/walkthrough/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- server --node-id 1\n```\n\n----------------------------------------\n\nTITLE: Starting HiQLite Server Node 2\nDESCRIPTION: Command to start the second node in a 3-node Raft cluster. This node replicates data from node 1.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/walkthrough/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- server --node-id 2\n```\n\n----------------------------------------\n\nTITLE: Starting HiQLite Server Node 3\nDESCRIPTION: Command to start the third node in a 3-node Raft cluster. This node also replicates data from node 1.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/walkthrough/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- server --node-id 3\n```\n\n----------------------------------------\n\nTITLE: SQLite Basic Usage Documentation in Markdown\nDESCRIPTION: Documentation explaining basic SQLite integration with HiQLite, focusing on single node setup using configuration from file rather than programmatic configuration. The example excludes advanced features like cache, distributed locks, and listen/notify functionality.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/sqlite-only/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SQLite Only\n\nThis examples only uses the SQLite an no other features like cache, distributed locks or listen / notify.   \nIt will start a single node. For a full cluster start see the `walkthrough` example.\n\nThe `NodeConfig` will be parse from file instead of being created programmatically as shown in the `walkthrough`.\n```\n\n----------------------------------------\n\nTITLE: Basic Hiqlite Server Commands\nDESCRIPTION: Basic command line usage for the Hiqlite server binary including help and configuration generation.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhiqlite -h\nhiqlite generate-config -h\nhiqlite serve -h\n```\n\n----------------------------------------\n\nTITLE: Displaying HiQLite Command Line Help\nDESCRIPTION: Command to display the help information for the HiQLite command line interface after installation.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhiqlite -h\n```\n\n----------------------------------------\n\nTITLE: Running HiQLite in Single Node Mode\nDESCRIPTION: Command to run HiQLite in single node mode using cargo. This setup is simpler and doesn't require multiple terminals.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/walkthrough/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- single\n```\n\n----------------------------------------\n\nTITLE: Running Hiqlite Cluster Benchmark\nDESCRIPTION: Command for running performance benchmarks on a Hiqlite cluster with configurable concurrency levels. The -c parameter sets concurrency and -r specifies the number of operations.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- cluster -c 4 -r 10000\n```\n\n----------------------------------------\n\nTITLE: Running Hiqlite Benchmark Cluster in Rust\nDESCRIPTION: Command to run the Hiqlite benchmark example as a cluster with specified concurrency and number of operations.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- cluster -c 4 -r 10000\n```\n\n----------------------------------------\n\nTITLE: Running 3-Node Cluster Benchmark with High Concurrency and Snapshots\nDESCRIPTION: Executes a benchmark on a 3-node cluster with concurrency 64, 100000 inserts, and snapshot configuration using cargo in release mode.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/bench/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- cluster -c 64 -r 100000 -l 100000\n```\n\n----------------------------------------\n\nTITLE: Running 3-Node Cluster Benchmark with Medium Concurrency\nDESCRIPTION: Executes a benchmark on a 3-node cluster with concurrency 16 and 100000 inserts using cargo in release mode.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/bench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- cluster -c 16 -r 100000\n```\n\n----------------------------------------\n\nTITLE: Running 3-Node Cluster Benchmark with Low Concurrency\nDESCRIPTION: Executes a benchmark on a 3-node cluster with concurrency 2 and 10000 inserts using cargo in release mode.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- cluster -c 2 -r 10000\n```\n\n----------------------------------------\n\nTITLE: Running Single Node Benchmark with HiQLite\nDESCRIPTION: Executes a benchmark on a single node with concurrency 1 and 1000 inserts using cargo in release mode.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/examples/bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- single -c 1 -r 1000\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Hiqlite\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for running Hiqlite cluster.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/hiqlite/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create ns hiqlite\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Namespace for HiQLite\nDESCRIPTION: Kubernetes command to create a dedicated namespace called 'hiqlite' for deploying HiQLite in a Kubernetes cluster.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns hiqlite\n```\n\n----------------------------------------\n\nTITLE: Generating a HiQLite Configuration Template\nDESCRIPTION: Command to view help for generating a configuration template file that can be used to configure a HiQLite server.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhiqlite generate-config -h\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Starting a HiQLite Server\nDESCRIPTION: Command to display help information for the 'serve' command which starts a HiQLite server instance.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhiqlite serve -h\n```\n\n----------------------------------------\n\nTITLE: Deploying HiQLite Proxy in Kubernetes\nDESCRIPTION: YAML configuration for deploying a HiQLite proxy service to enable external cluster access.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: hiqlite-proxy\n  namespace: hiqlite\nspec:\n  type: NodePort\n  selector:\n    app: hiqlite-proxy\n  ports:\n    - name: api\n      protocol: TCP\n      port: 8200\n      targetPort: 8200\n      nodePort: 30820\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hiqlite-proxy\n  namespace: hiqlite\n  labels:\n    app: hiqlite-proxy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hiqlite-proxy\n  template:\n    metadata:\n      labels:\n        app: hiqlite-proxy\n    spec:\n      containers:\n        - name: hiqlite-proxy\n          image: ghcr.io/sebadob/hiqlite:0.4.0\n          command: [ \"/app/hiqlite\", \"proxy\" ]\n          imagePullPolicy: Always\n          securityContext:\n            allowPrivilegeEscalation: false\n          ports:\n            - containerPort: 8100\n            - containerPort: 8200\n          env:\n            - name: HQL_SECRET_API\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_SECRET_API\n            - name: ENC_KEYS\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEYS\n            - name: ENC_KEY_ACTIVE\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: ENC_KEY_ACTIVE\n            - name: HQL_PASSWORD_DASHBOARD\n              valueFrom:\n                secretKeyRef:\n                  name: hiqlite-secrets\n                  key: HQL_PASSWORD_DASHBOARD\n          volumeMounts:\n            - mountPath: /app/config\n              subPath: config\n              name: hiqlite-config\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              port: 8200\n              path: /ping\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          resources:\n            requests:\n              memory: 32Mi\n              cpu: 100m\n      volumes:\n        - name: hiqlite-config\n          configMap:\n            name: hiqlite-config\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Delay in Hiqlite\nDESCRIPTION: Sets an initial delay for health checks in Hiqlite to allow for cold-start of clusters. This configuration is optional and defaults to 30 seconds.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Configures the initial delay in seconds that should be applied\n# to `<API>/health` checks. During the first X seconds after node\n# start, health checks will always return true to solve a chicken\n# and egg problem when you want to cold-start a cluster while\n# relying on `readinessProbe` checks.\n# default: 30\nHQL_HEALTH_CHECK_DELAY_SECS=30\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Sync in Hiqlite\nDESCRIPTION: Sets the sync_immediate option for Hiqlite, which enables immediate flush and sync to disk after each Log Store Batch. This is rarely needed and can significantly impact performance.\nSOURCE: https://github.com/sebadob/hiqlite/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Enables immediate flush + sync to disk after each Log Store Batch.\n# The situations where you would need this are very rare, and you\n# should use it with care.\n#\n# The default is `false`, and a flush + sync will be done in 200ms\n# intervals. Even if the application should crash, the OS will take\n# care of flushing left-over buffers to disk and no data will get\n# lost. If something worse happens, you might lose the last 200ms \n# of commits (on that node, not the whole cluster). This is only\n# important to know for single instance deployments. HA nodes will\n# sync data from other cluster members after a restart anyway.\n#\n# The only situation where you might want to enable this option is\n# when you are on a host that might lose power out of nowhere, and\n# it has no backup battery, or when your OS / disk itself is unstable.\n#\n# `sync_immediate` will greatly reduce the write throughput and put\n# a lot more pressure on the disk. If you have lots of writes, it\n# can pretty quickly kill your SSD for instance.\n#HQL_SYNC_IMMEDIATE=false\n```"
  }
]