[
  {
    "owner": "sanic-org",
    "repo": "sanic-guide",
    "content": "TITLE: Creating a Hello World Application in Sanic\nDESCRIPTION: Basic example of a Sanic application that responds with \"Hello, world.\" when accessed at the root path. Demonstrates the core application setup, route decoration, and request handling.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/getting-started.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Request Class with Custom Context Object\nDESCRIPTION: This example demonstrates how to create a custom request class that generates a custom context object with specific properties. It shows the complete setup including custom configuration, application context, and request context with proper type annotations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\nclass Foo:\n    pass\n\nclass RequestContext:\n    foo: Foo\n\nclass CustomRequest(Request[Sanic[CustomConfig, Foo], RequestContext]):\n    @staticmethod\n    def make_context() -> RequestContext:\n        ctx = RequestContext()\n        ctx.foo = Foo()\n        return ctx\n\napp = Sanic(\n    \"test\", config=CustomConfig(), ctx=Foo(), request_class=CustomRequest\n)\n\n@app.get(\"/\")\nasync def handler(request: CustomRequest):\n    # Full access to typed:\n    # - custom application configuration object\n    # - custom application context object\n    # - custom request context object\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic and Extensions Separately\nDESCRIPTION: Alternative commands to install Sanic and Sanic Extensions as separate packages. This achieves the same result as the bundle installation but with explicit package specification.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/getting-started.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with pip\nDESCRIPTION: Command to install the Sanic web framework using pip package manager. Requires Python 3.8 or higher.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/getting-started.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive Class-Based View in Sanic\nDESCRIPTION: This example demonstrates a more complete class-based view in Sanic, implementing methods for GET, POST, PUT, PATCH, and DELETE HTTP requests. It shows both synchronous and asynchronous method definitions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import text\n\nclass SimpleView(HTTPMethodView):\n\n  def get(self, request):\n      return text(\"I am get method\")\n\n  # You can also use async syntax\n  async def post(self, request):\n      return text(\"I am post method\")\n\n  def put(self, request):\n      return text(\"I am put method\")\n\n  def patch(self, request):\n      return text(\"I am patch method\")\n\n  def delete(self, request):\n      return text(\"I am delete method\")\n\napp.add_route(SimpleView.as_view(), \"/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Application in Python\nDESCRIPTION: This snippet shows how to create a basic Sanic application instance. It demonstrates the minimal setup required to start a Sanic project.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/org/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTTP Response in Sanic (Python)\nDESCRIPTION: Demonstrates how to create a basic HTTP response using the HTTPResponse object in a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import HTTPResponse, Sanic\n\napp = Sanic(\"TestApp\")\n\n\n@app.route(\"\")\ndef handler(_):\n    return HTTPResponse()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Asynchronous Handler with Sanic Decorator in Python\nDESCRIPTION: This example shows how to create a simple asynchronous handler using Sanic's convenience decorator @app.get(). It also demonstrates the use of the text() function to generate a response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/handlers.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import text\n\n@app.get(\"/foo\")\nasync def foo_handler(request):\n    return text(\"I said foo!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Sanic Server in Python\nDESCRIPTION: This snippet demonstrates how to create a simple Sanic application with a single route. It includes the basic setup and a hello world endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sanic Application in Python\nDESCRIPTION: A simple Sanic application that sets up a web server with a single route returning a JSON response. This demonstrates the minimal code needed to create a functioning Sanic API endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic(__name__)\n\n@app.route(\"/\")\nasync def hello_world(request):\n    return json({\"hello\": \"world\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Route Decorators in Sanic\nDESCRIPTION: Examples of different route decorator patterns used in Sanic for defining endpoints.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/stairway\")\n...\n\n@app.get(\"/to\")\n...\n\n@app.post(\"/heaven\")\n...\n```\n\n----------------------------------------\n\nTITLE: Modifying Request and Response Objects in Sanic Middleware\nDESCRIPTION: Demonstrates how middleware can modify request context and response headers. Shows the order of execution between request middleware, route handler, and response middleware.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def add_key(request):\n    # Arbitrary data may be stored in request context:\n    request.ctx.foo = \"bar\"\n\n\n@app.on_response\nasync def custom_banner(request, response):\n    response.headers[\"Server\"] = \"Fake-Server\"\n\n\n@app.on_response\nasync def prevent_xss(request, response):\n    response.headers[\"x-xss-protection\"] = \"1; mode=block\"\n\n\n@app.get(\"/\")\nasync def index(request):\n    return text(request.ctx.foo)\n\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Development Mode (Debug + Auto Reload)\nDESCRIPTION: Commands to run Sanic in development mode, which combines debug mode with automatic reloading for a streamlined development experience. Added in v22.3.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -d\n```\n\n----------------------------------------\n\nTITLE: Using Request Context in Sanic Middleware\nDESCRIPTION: Demonstrates storing user information in request.ctx for access across middleware and handlers, commonly used for authentication.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def run_before_handler(request):\n    request.ctx.user = await fetch_user_by_token(request.token)\n\n@app.route('/hi')\nasync def hi_my_name_is(request):\n    return text(\"Hi, my name is {}\".format(request.ctx.user.name))\n```\n\n----------------------------------------\n\nTITLE: Autodiscovery Utility Function Implementation (Python)\nDESCRIPTION: This snippet defines the autodiscover function used to automatically find and register blueprints and listeners. It can handle both imported modules and string paths, with an option for recursive discovery.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/autodiscovery.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom glob import glob\nfrom importlib import import_module, util\nfrom inspect import getmembers\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import Union\n\nfrom sanic.blueprints import Blueprint\n\n\ndef autodiscover(\n    app, *module_names: Union[str, ModuleType], recursive: bool = False\n):\n    mod = app.__module__\n    blueprints = set()\n    _imported = set()\n\n    def _find_bps(module):\n        nonlocal blueprints\n\n        for _, member in getmembers(module):\n            if isinstance(member, Blueprint):\n                blueprints.add(member)\n\n    for module in module_names:\n        if isinstance(module, str):\n            module = import_module(module, mod)\n            _imported.add(module.__file__)\n        _find_bps(module)\n\n        if recursive:\n            base = Path(module.__file__).parent\n            for path in glob(f\"{base}/**/*.py\", recursive=True):\n                if path not in _imported:\n                    name = \"module\"\n                    if \"__init__\" in path:\n                        *_, name, __ = path.split(\"/\")\n                    spec = util.spec_from_file_location(name, path)\n                    specmod = util.module_from_spec(spec)\n                    _imported.add(path)\n                    spec.loader.exec_module(specmod)\n                    _find_bps(specmod)\n\n    for bp in blueprints:\n        app.blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Based Views with HTTPMethodView in Sanic\nDESCRIPTION: This snippet shows how to create a class-based view using HTTPMethodView in Sanic. It demonstrates defining methods for different HTTP verbs within a single class and how to add the route to the Sanic app.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\n\nclass FooBar(HTTPMethodView):\n    async def get(self, request):\n        ...\n        \n    async def post(self, request):\n        ...\n        \n    async def put(self, request):\n        ...\n\napp.add_route(FooBar.as_view(), \"/foobar\")\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Application Structure\nDESCRIPTION: A minimal Sanic application with a single route handler that returns a JSON response. This is what would be referenced by the CLI command.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/server.py\nfrom sanic import Sanic, Request, json\n\napp = Sanic(\"TestApp\")\n\n\n@app.get(\"/\")\nasync def handler(request: Request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Based Views in Sanic\nDESCRIPTION: This snippet shows how to create a class-based view in Sanic using HTTPMethodView. It demonstrates defining methods for different HTTP requests and how to add the view to a Sanic app route.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\n\nclass FooBar(HTTPMethodView):\n    async def get(self, request):\n        ...\n        \n    async def post(self, request):\n        ...\n        \n    async def put(self, request):\n        ...\n\napp.add_route(FooBar.as_view(), \"/foobar\")\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Sanic (Python)\nDESCRIPTION: Shows how to use the json() convenience method to return a JSON response, with options for custom JSON encoders.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import json\n\n@app.route(\"/\")\nasync def handler(request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Records with asyncpg in Sanic\nDESCRIPTION: This snippet shows how to stream database records to the client using Sanic's response streaming and asyncpg's asynchronous cursor. It iterates over database records and sends them one by one.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def index(request):\n    response = await request.respond()\n    conn = await asyncpg.connect(database='test')\n    async with conn.transaction():\n        async for record in conn.cursor('SELECT generate_series(0, 10)'):\n            await response.send(record[0])\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Sanic Application\nDESCRIPTION: A Dockerfile that uses the official Sanic image, sets up the working directory, copies the application files, installs dependencies, exposes port 8000, and runs the server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM sanicframework/sanic:3.8-latest\n\nWORKDIR /sanic\n\nCOPY . .\n\nRUN pip install -r requirements.txt\n\nEXPOSE 8000\n\nCMD [\"python\", \"server.py\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schemas\nDESCRIPTION: Examples of using the @openapi.response decorator to define response schemas for API endpoints, including status codes, content types, and descriptions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(200, str, \"This is endpoint returns a string\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(200, {\"text/plain\": str}, \"...\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(response=Response(UserProfile, description=\"...\"))\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(\n    response=Response(\n        {\n            \"application/json\": UserProfile,\n        },\n        description=\"...\",\n        status=201,\n    )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(200, UserProfile, \"...\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.response(\n    200,\n    {\n        \"application/json\": UserProfile,\n    },\n    \"Description...\",\n)\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Sanic Application\nDESCRIPTION: A Dockerfile that uses the official Sanic image, sets up the working directory, copies the application files, installs dependencies, exposes port 8000, and runs the server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM sanicframework/sanic:3.8-latest\n\nWORKDIR /sanic\n\nCOPY . .\n\nRUN pip install -r requirements.txt\n\nEXPOSE 8000\n\nCMD [\"python\", \"server.py\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Sanic Application\nDESCRIPTION: Creates a basic Sanic application instance with a custom name. This is typically done in a server.py file.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Request Body in Sanic\nDESCRIPTION: Shows how to access the raw bytes from a request body using the request.body property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -d '{\"foo\": \"bar\"}'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.body)\nb'{\"foo\": \"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Validation with Attrs in Sanic\nDESCRIPTION: Demonstrates how to use the @validate decorator to apply Attrs model validation to a Sanic POST route handler for JSON body data.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.post(\"/person\")\n@validate(json=Person)\nasync def handler(request, body: Person):\n    return json(attrs.asdict(body))\n```\n\n----------------------------------------\n\nTITLE: Waiting for Events in Background Tasks\nDESCRIPTION: Demonstrates how to wait for events in a background task to avoid blocking the main application flow. This pattern is useful for long-running event monitoring.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def wait_for_event(app):\n    while True:\n        print(\"> waiting\")\n        await app.event(\"foo.bar.baz\")\n        print(\"> event found\\n\")\n\n@app.after_server_start\nasync def after_server_start(app, loop):\n    app.add_task(wait_for_event(app))\n```\n\n----------------------------------------\n\nTITLE: Regex Route Pattern Matching\nDESCRIPTION: Advanced regex pattern matching examples for complex routing scenarios.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.route(r\"/image/<img_id:(?P<img_id>\\d+)\\.jpg>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Type Converters in Sanic Configuration (Python)\nDESCRIPTION: Demonstrates how to add custom type converters for configuration values in a Sanic application. This feature was added in Sanic v21.12.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(..., config=Config(converters=[UUID]))\n```\n\n----------------------------------------\n\nTITLE: Basic Request Validation with JSON Schema in Sanic\nDESCRIPTION: Demonstrates how to implement request validation using JSON Schema in Sanic. The code shows validating a POST request body against a predefined schema and returning an appropriate response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/validation.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\nfrom sanic.response import json\nimport jsonschema\n\n\ndef validate_json(schema):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            try:\n                jsonschema.validate(instance=request.json, schema=schema)\n            except jsonschema.exceptions.ValidationError as e:\n                return json({\"error\": e.message}, status=400)\n            response = await f(request, *args, **kwargs)\n            return response\n\n        return decorated_function\n\n    return decorator\n\n\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"email\": {\"type\": \"string\", \"format\": \"email\"},\n    },\n    \"required\": [\"email\"],\n}\n\n\n@app.route(\"/\")\n@validate_json(schema)\nasync def handler(request):\n    return json({\"status\": \"success\"})\n```\n\n----------------------------------------\n\nTITLE: Sanic Application Factory Pattern\nDESCRIPTION: Shows how to implement a factory function pattern for creating Sanic applications, which provides more flexibility in application initialization.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/app-loader.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsanic path.to.server:create_app --factory\n```\n\nLANGUAGE: python\nCODE:\n```\n# server.py\ndef create_app():\n    app = Sanic(\"TestApp\")\n\n    @app.get(\"/\")\n    async def handler(request: Request):\n        return json({\"foo\": \"bar\"})\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with Extensions Bundle\nDESCRIPTION: Command to install Sanic with the official extensions package which provides additional functionality like OpenAPI documentation, CORS protection, and dependency injection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/getting-started.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic[ext]\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Validation with Pydantic in Sanic\nDESCRIPTION: Shows how to use the @validate decorator to apply Pydantic model validation to a Sanic POST route handler for JSON body data.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.post(\"/person\")\n@validate(json=Person)\nasync def handler(request, body: Person):\n    return json(body.dict())\n```\n\n----------------------------------------\n\nTITLE: Running a Sanic Application\nDESCRIPTION: Command to start a Sanic server using the CLI. Unlike other frameworks, Sanic's packaged server is production-ready and not just for development purposes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/getting-started.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic server\n```\n\n----------------------------------------\n\nTITLE: Basic URL Generation with Sanic\nDESCRIPTION: Demonstrates how to generate URLs using app.url_for() and handle redirects based on handler method names.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\nasync def index(request):\n    # generate a URL for the endpoint `post_handler`\n    url = app.url_for('post_handler', post_id=5)\n\n    # Redirect to `/posts/5`\n    return redirect(url)\n\n@app.route('/posts/<post_id>')\nasync def post_handler(request, post_id):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Registering Request Middleware Function in Sanic\nDESCRIPTION: Shows how to register a middleware function that extracts user information from a request. The middleware is registered to run before the route handler using the register_middleware method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def extract_user(request):\n    request.ctx.user = await extract_user_from_request(request)\n\napp.register_middleware(extract_user, \"request\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Validation Sources in Sanic\nDESCRIPTION: Shows how to use the @validate decorator to apply validation to multiple sources (JSON body, query parameters, and form data) in a single route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@validate(\n    json=ModelA,\n    query=ModelB,\n    form=ModelC,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fully Annotated Handler in Python\nDESCRIPTION: This snippet shows how to create a fully annotated handler in Sanic, using type hints for the request parameter and return value. It demonstrates best practices for type annotations in Sanic handlers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/handlers.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import HTTPResponse, text\nfrom sanic.request import Request\n\n@app.get(\"/typed\")\nasync def typed_handler(request: Request) -> HTTPResponse:\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Streaming File Response in Sanic (Python)\nDESCRIPTION: Shows how to use file_stream() method to stream a large file (like a video) to the client.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import file_stream\n\n@app.route(\"/\")\nasync def handler(request):\n    return await file_stream(\"/path/to/whatever.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Request Context Objects\nDESCRIPTION: Demonstrates creating a custom request context object with type hints for better IDE support, a feature added in Sanic v23.6.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, Request\nfrom types import SimpleNamespace\n\nclass CustomRequest(Request):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.ctx.user_id = self.headers.get(\"X-User-ID\")\n\n    @staticmethod\n    def make_context() -> CustomContext:\n        return CustomContext()\n\n@dataclass\nclass CustomContext:\n    user_id: str = None\n```\n\n----------------------------------------\n\nTITLE: Running a Sanic Server from Command Line\nDESCRIPTION: This snippet shows the command to start a Sanic server and the typical output, including server information and loaded extensions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n[2023-01-31 12:34:56 +0000] [999996] [INFO] Sanic v22.12.0\n[2023-01-31 12:34:56 +0000] [999996] [INFO] Goin' Fast @ http://127.0.0.1:8000\n[2023-01-31 12:34:56 +0000] [999996] [INFO] mode: production, single worker\n[2023-01-31 12:34:56 +0000] [999996] [INFO] server: sanic, HTTP/1.1\n[2023-01-31 12:34:56 +0000] [999996] [INFO] python: 3.10.9\n[2023-01-31 12:34:56 +0000] [999996] [INFO] platform: SomeOS-9.8.7\n[2023-01-31 12:34:56 +0000] [999996] [INFO] packages: sanic-routing==22.8.0, sanic-testing==22.12.0, sanic-ext==22.12.0\n[2023-01-31 12:34:56 +0000] [999997] [INFO] Sanic Extensions:\n[2023-01-31 12:34:56 +0000] [999997] [INFO]   > injection [12 dependencies; 7 constants]\n[2023-01-31 12:34:56 +0000] [999997] [INFO]   > openapi [http://127.0.0.1:8000/docs]\n[2023-01-31 12:34:56 +0000] [999997] [INFO]   > http \n[2023-01-31 12:34:56 +0000] [999997] [INFO]   > templating [jinja2==3.1.2]\n[2023-01-31 12:34:56 +0000] [999997] [INFO] Starting worker [999997]\n```\n\n----------------------------------------\n\nTITLE: Sanic Project Directory Structure\nDESCRIPTION: Shows the basic directory structure for a Sanic Docker project with the essential files: requirements.txt, dockerfile, and server.py.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# /path/to/SanicDocker\nSanicDocker\n├── requirements.txt\n├── dockerfile\n└── server.py\n```\n\n----------------------------------------\n\nTITLE: Setting up the Sanic Server with Protected Routes\nDESCRIPTION: Main server file that initializes a Sanic application with a protected route. The server imports authentication decorator and login blueprint, and sets a secret key for JWT encryption.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/authentication.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\n\nfrom auth import protected\nfrom login import login\n\napp = Sanic(\"AuthApp\")\napp.config.SECRET = \"KEEP_IT_SECRET_KEEP_IT_SAFE\"\napp.blueprint(login)\n\n\n@app.get(\"/secret\")\n@protected\nasync def secret(request):\n    return text(\"To go fast, you must be fast.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Sanic App with Tortoise-ORM Integration\nDESCRIPTION: Setting up a Sanic application with Tortoise-ORM integration for database operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# ./main.py\n\nfrom models import Users\nfrom tortoise.contrib.sanic import register_tortoise\n\napp = Sanic(__name__)\n\n\nregister_tortoise(\n    app, db_url=\"mysql://root:root@localhost/test\", modules={\"models\": [\"models\"]}, generate_schemas=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Validation with @validate Decorator in Sanic\nDESCRIPTION: This snippet demonstrates how to use the @validate decorator to validate request parameters in a Sanic route handler. It checks for the presence and type of 'name' and 'age' parameters in the request.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/validation.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, json\nfrom sanic.views import HTTPMethodView\nfrom sanic_ext import validate, openapi\n\napp = Sanic(\"MyApp\")\n\n@app.post(\"/\")\n@validate(\n    json={\"name\": str, \"age\": int},\n)\nasync def handler(request, body):\n    return json({\"message\": f\"Hello, {body.name}. You are {body.age} years old.\"})\n```\n\n----------------------------------------\n\nTITLE: Sanic Project Directory Structure\nDESCRIPTION: Shows the basic directory structure for a Sanic Docker project with the essential files: requirements.txt, dockerfile, and server.py.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# /path/to/SanicDocker\nSanicDocker\n├── requirements.txt\n├── dockerfile\n└── server.py\n```\n\n----------------------------------------\n\nTITLE: Sanic Project Directory Structure\nDESCRIPTION: Shows the basic directory structure for a Sanic Docker project with the essential files: requirements.txt, dockerfile, and server.py.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# /path/to/SanicDocker\nSanicDocker\n├── requirements.txt\n├── dockerfile\n└── server.py\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Websocket Handler in Sanic\nDESCRIPTION: Shows how to implement a simple websocket handler that echoes messages back to the client. The handler uses a while loop to continuously send and receive messages through the websocket connection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/websockets.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    while True:\n        data = \"hello!\"\n        print(\"Sending: \" + data)\n        await ws.send(data)\n        data = await ws.recv()\n        print(\"Received: \" + data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Validation with @validate Decorator in Sanic\nDESCRIPTION: This snippet demonstrates how to use the @validate decorator to validate request parameters in a Sanic route handler. It checks for the presence and type of 'name' and 'age' parameters in the request.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/validation.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, json\nfrom sanic.views import HTTPMethodView\nfrom sanic_ext import validate, openapi\n\napp = Sanic(\"MyApp\")\n\n@app.post(\"/\")\n@validate(\n    json={\"name\": str, \"age\": int},\n)\nasync def handler(request, body):\n    return json({\"message\": f\"Hello, {body.name}. You are {body.age} years old.\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status in Sanic Response (Python)\nDESCRIPTION: Shows how to set a custom HTTP status code (201 in this case) when returning a JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/\")\nasync def create_new(request):\n    new_thing = await do_create(request)\n    return json({\"created\": True, \"id\": new_thing.thing_id}, status=201)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Error Response in Debug Mode\nDESCRIPTION: Shows the difference in JSON error responses when debug mode is enabled and disabled in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = True\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/exc -i\nHTTP/1.1 500 Internal Server Error\ncontent-length: 572\nconnection: keep-alive\ncontent-type: application/jso\n\n{\n  \"description\": \"Internal Server Error\",\n  \"status\": 500,\n  \"message\": \"That time when that thing broke that other thing? That happened.\",\n  \"path\": \"/exc\",\n  \"args\": {},\n  \"exceptions\": [\n    {\n      \"type\": \"ServerError\",\n      \"exception\": \"That time when that thing broke that other thing? That happened.\",\n      \"frames\": [\n        {\n          \"file\": \"/path/to/sanic/app.py\",\n          \"line\": 979,\n          \"name\": \"handle_request\",\n          \"src\": \"response = await response\"\n        },\n        {\n          \"file\": \"/path/to/server.py\",\n          \"line\": 16,\n          \"name\": \"handler\",\n          \"src\": \"do_something(cause_error=True)\"\n        },\n        {\n          \"file\": \"/path/to/something.py\",\n          \"line\": 9,\n          \"name\": \"do_something\",\n          \"src\": \"raise ServerError(\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = False\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/exc -i\nHTTP/1.1 500 Internal Server Error\ncontent-length: 129\nconnection: keep-alive\ncontent-type: application/json\n\n{\n  \"description\": \"Internal Server Error\",\n  \"status\": 500,\n  \"message\": \"That time when that thing broke that other thing? That happened.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Request Body in Sanic\nDESCRIPTION: Demonstrates how to access the parsed JSON object from a request body using the request.json property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -d '{\"foo\": \"bar\"}'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.json)\n{'foo': 'bar'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Sanic Application with CORS\nDESCRIPTION: Main application setup with route definition and registration of CORS-related listeners and middleware.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/cors.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\n\nfrom cors import add_cors_headers\nfrom options import setup_options\n\napp = Sanic(\"app\")\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\nasync def do_stuff(request):\n    return text(\"...\")\n\n\n# Add OPTIONS handlers to any route that is missing it\napp.register_listener(setup_options, \"before_server_start\")\n\n# Fill in CORS headers\napp.register_middleware(add_cors_headers, \"response\")\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Application\nDESCRIPTION: A simple Sanic application that responds with 'OK!' on the root endpoint. The server is configured to listen on all interfaces (0.0.0.0) and port 8000.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MySanicApp\")\n\n@app.get('/')\nasync def hello(request):\n    return text(\"OK!\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Application\nDESCRIPTION: A simple Sanic application that responds with 'OK!' on the root endpoint. The server is configured to listen on all interfaces (0.0.0.0) and port 8000.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MySanicApp\")\n\n@app.get('/')\nasync def hello(request):\n    return text(\"OK!\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Configuration in Sanic (Python)\nDESCRIPTION: Demonstrates how to set configuration values using dot notation and dictionary-style access in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.DB_NAME = \"appdb\"\napp.config[\"DB_USER\"] = \"appuser\"\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order in Sanic\nDESCRIPTION: Illustrates the order of middleware execution where request middleware runs in declaration order, but response middleware executes in reverse order. Includes console output showing the sequence.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def middleware_1(request):\n    print(\"middleware_1\")\n\n\n@app.on_request\nasync def middleware_2(request):\n    print(\"middleware_2\")\n\n\n@app.on_response\nasync def middleware_3(request, response):\n    print(\"middleware_3\")\n\n\n@app.on_response\nasync def middleware_4(request, response):\n    print(\"middleware_4\")\n    \n@app.get(\"/handler\")\nasync def handler(request):\n    print(\"~ handler ~\")\n    return text(\"Done.\")\n```\n\nLANGUAGE: bash\nCODE:\n```\nmiddleware_1\nmiddleware_2\n~ handler ~\nmiddleware_4\nmiddleware_3\n[INFO][127.0.0.1:44788]: GET http://localhost:8000/handler  200 5\n```\n\n----------------------------------------\n\nTITLE: Blueprint Group Middleware\nDESCRIPTION: Shows how to implement middleware for a group of Blueprints.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\"bp2\", url_prefix=\"/bp2\")\n\n@bp1.middleware(\"request\")\nasync def bp1_only_middleware(request):\n    print(\"applied on Blueprint : bp1 Only\")\n\n@bp1.route(\"/\")\nasync def bp1_route(request):\n    return text(\"bp1\")\n\n@bp2.route(\"/<param>\")\nasync def bp2_route(request, param):\n    return text(param)\n\ngroup = Blueprint.group(bp1, bp2)\n\n@group.middleware(\"request\")\nasync def group_middleware(request):\n    print(\"common middleware applied for both bp1 and bp2\")\n\n# Register Blueprint group under the app\napp.blueprint(group)\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a File\nDESCRIPTION: Demonstrates loading Sanic configuration from a file using the from_pyfile method. This is useful for external configuration files that can be modified without changing application code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/configuration.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.from_pyfile(\"path/to/config.py\")\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Handling\nDESCRIPTION: Examples of handling URL path parameters with type casting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/tag/<tag>\")\nasync def tag_handler(request, tag):\n    return text(\"Tag - {}\".format(tag))\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo/<foo_id:uuid>\")\nasync def uuid_handler(request, foo_id: UUID):\n    return text(\"UUID - {}\".format(foo_id))\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Bytes Response in Sanic (Python)\nDESCRIPTION: Demonstrates using the raw() method to send raw bytes without encoding the body.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import raw\n\n@app.route(\"/\")\nasync def handler(request):\n    return raw(b\"raw bytes\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handler in Sanic\nDESCRIPTION: Shows how to implement a custom exception handler for specific exceptions in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import NotFound\n\n@app.exception(NotFound, SomeCustomException)\nasync def ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n```\n\n----------------------------------------\n\nTITLE: Writing Synchronous Tests with Sanic Test Client\nDESCRIPTION: Example showing how to write a basic synchronous test using Sanic's test client. Demonstrates setting up a fixture with a test route and writing an assertion-based test.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/getting-started.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom sanic import Sanic, response\n\n\n@pytest.fixture\ndef app():\n    sanic_app = Sanic(\"TestSanic\")\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\ndef test_basic_test_client(app):\n    request, response = app.test_client.get(\"/\")\n\n    assert request.method.lower() == \"get\"\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Task in Sanic\nDESCRIPTION: Demonstrates how to add a background task to the current running loop in Sanic. The task will print a message after a 5-second delay.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def notify_server_started_after_five_seconds():\n    await asyncio.sleep(5)\n    print('Server successfully started!')\n\napp.add_task(notify_server_started_after_five_seconds())\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorator With Required Arguments in Sanic\nDESCRIPTION: Template for a decorator that always needs arguments when implemented. This pattern is useful when the decorator must be configured with parameters for each use.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(arg1, arg2):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Setting Sanic Configuration Values Programmatically\nDESCRIPTION: Shows how to programmatically set configuration values directly in a Sanic application instance using dictionary-style syntax. This approach is useful for simple cases or when configurations need to be set dynamically.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/configuration.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.KEEP_ALIVE_TIMEOUT = 75\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Sanic\nDESCRIPTION: Demonstrates two methods for setting custom response headers: directly in the route handler and using response middleware. Shows setting content-language and content-security-policy headers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(\"Done.\", headers={\"content-language\": \"en-US\"})\n\n@app.middleware(\"response\")\nasync def add_csp(request, response):\n    response.headers[\"content-security-policy\"] = \"default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';base-uri 'self';form-action 'self'\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Decorators\nDESCRIPTION: Examples of HTTP method-specific decorators for different request types.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.put('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.patch('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.delete('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.head('/test')\nasync def handler(request):\n    return empty()\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.options('/test')\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: CORS Headers Implementation\nDESCRIPTION: Implementation of CORS headers handling functions that add necessary Access-Control headers to responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/cors.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterable\n\n\ndef _add_cors_headers(response, methods: Iterable[str]) -> None:\n    allow_methods = list(set(methods))\n    if \"OPTIONS\" not in allow_methods:\n        allow_methods.append(\"OPTIONS\")\n    headers = {\n        \"Access-Control-Allow-Methods\": \",\".join(allow_methods),\n        \"Access-Control-Allow-Origin\": \"mydomain.com\",\n        \"Access-Control-Allow-Credentials\": \"true\",\n        \"Access-Control-Allow-Headers\": (\n            \"origin, content-type, accept, \"\n            \"authorization, x-xsrf-token, x-request-id\"\n        ),\n    }\n    response.headers.extend(headers)\n\n\ndef add_cors_headers(request, response):\n    if request.method != \"OPTIONS\":\n        methods = [method for method in request.route.methods]\n        _add_cors_headers(response, methods)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sanic Application in Python\nDESCRIPTION: This snippet shows how to create a simple Sanic application and define a route. It demonstrates the basic structure of a Sanic app and how to start the server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-testing/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Dependency Injection Signal\nDESCRIPTION: Configuration example showing how to change the dependency injection timing by modifying the injection signal from the default 'http.routing.after' to 'http.handler.before'.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.INJECTION_SIGNAL = \"http.handler.before\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error Handler Class\nDESCRIPTION: Example of creating a custom error handler class by subclassing Sanic's ErrorHandler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.handlers import ErrorHandler\n\nclass CustomErrorHandler(ErrorHandler):\n    def default(self, request, exception):\n        ''' handles errors that have no error handlers assigned '''\n        # You custom error handling logic...\n        return super().default(request, exception)\n\napp.error_handler = CustomErrorHandler()\n```\n\n----------------------------------------\n\nTITLE: Enabling Request Streaming with Decorator in Sanic\nDESCRIPTION: This example shows how to enable request streaming using a keyword argument in the route decorator. It allows reading the request body in chunks.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/stream\", stream=True)\nasync def handler(request):\n        ...\n        body = await request.stream.read()\n        ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Sanic Configuration Options Table in Markdown\nDESCRIPTION: A markdown table listing various configuration options for Sanic, including variable names, default values, and descriptions. It covers settings related to logging, auto-reloading, error handling, proxies, timeouts, and websockets.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| **Variable**              | **Default**      | **Description**                                                                                                                       |\n|---------------------------|------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| ACCESS_LOG                | True             | Disable or enable access log                                                                                                          |\n| AUTO_EXTEND               | True             | Control whether [Sanic Extensions](../../plugins/sanic-ext/getting-started.md) will load if it is in the existing virtual environment |\n| AUTO_RELOAD               | True             | Control whether the application will automatically reload when a file changes                                                         |\n| EVENT_AUTOREGISTER        | True             | When `True` using the `app.event()` method on a non-existing signal will automatically create it and not raise an exception           |\n| FALLBACK_ERROR_FORMAT     | html             | Format of error response if an exception is not caught and handled                                                                    |\n| FORWARDED_FOR_HEADER      | X-Forwarded-For  | The name of \"X-Forwarded-For\" HTTP header that contains client and proxy ip                                                           |\n| FORWARDED_SECRET          | None             | Used to securely identify a specific proxy server (see below)                                                                         |\n| GRACEFUL_SHUTDOWN_TIMEOUT | 15.0             | How long to wait to force close non-idle connection (sec)                                                                             |\n| INSPECTOR                 | False            | Whether to enable the Inspector                                                                                                       |\n| INSPECTOR_HOST            | localhost        | The host for the Inspector                                                                                                            |\n| INSPECTOR_PORT            | 6457             | The port for the Inspector                                                                                                            |\n| INSPECTOR_TLS_KEY         | -                | The TLS key for the Inspector                                                                                                         |\n| INSPECTOR_TLS_CERT        | -                | The TLS certificate for the Inspector                                                                                                 |\n| INSPECTOR_API_KEY         | -                | The API key for the Inspector                                                                                                         |\n| KEEP_ALIVE_TIMEOUT        | 120              | How long to hold a TCP connection open (sec)                                                                                          |\n| KEEP_ALIVE                | True             | Disables keep-alive when False                                                                                                        |\n| MOTD                      | True             | Whether to display the MOTD (message of the day) at startup                                                                           |\n| MOTD_DISPLAY              | {}               | Key/value pairs to display additional, arbitrary data in the MOTD                                                                     |\n| NOISY_EXCEPTIONS          | False            | Force all `quiet` exceptions to be logged                                                                                             |\n| PROXIES_COUNT             | None             | The number of proxy servers in front of the app (e.g. nginx; see below)                                                               |\n| REAL_IP_HEADER            | None             | The name of \"X-Real-IP\" HTTP header that contains real client ip                                                                      |\n| REGISTER                  | True             | Whether the app registry should be enabled                                                                                            |\n| REQUEST_BUFFER_SIZE       | 65536            | Request buffer size before request is paused, default is 64 Kib                                                                       |\n| REQUEST_ID_HEADER         | X-Request-ID     | The name of \"X-Request-ID\" HTTP header that contains request/correlation ID                                                           |\n| REQUEST_MAX_SIZE          | 100000000        | How big a request may be (bytes), default is 100 megabytes                                                                            |\n| REQUEST_MAX_HEADER_SIZE   | 8192            | How big a request header may be (bytes), default is 8192 bytes                                                                         |\n| REQUEST_TIMEOUT           | 60               | How long a request can take to arrive (sec)                                                                                           |\n| RESPONSE_TIMEOUT          | 60               | How long a response can take to process (sec)                                                                                         |\n| USE_UVLOOP                | True             | Whether to override the loop policy to use `uvloop`. Supported only with `app.run`.                                                   |\n| WEBSOCKET_MAX_SIZE        | 2^20             | Maximum size for incoming messages (bytes)                                                                                            |\n| WEBSOCKET_PING_INTERVAL   | 20               | A Ping frame is sent every ping_interval seconds.                                                                                     |\n| WEBSOCKET_PING_TIMEOUT    | 20               | Connection is closed when Pong is not received after ping_timeout seconds                                                             |\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Synchronous and Asynchronous Handlers in Python\nDESCRIPTION: This snippet demonstrates how to create both synchronous and asynchronous handlers in Sanic. Handlers are functions that take a Request instance as an argument and return an HTTPResponse instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/handlers.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef i_am_a_handler(request):\n    return HTTPResponse()\n\nasync def i_am_ALSO_a_handler(request):\n    return HTTPResponse()\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Specification Metadata in Sanic\nDESCRIPTION: This code demonstrates how to change the metadata of the OpenAPI specification using the `describe` method. It sets the API title, version, and adds a multi-line description using Markdown.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/basic.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textwrap import dedent\n\napp.ext.openapi.describe(\n    \"Testing API\",\n    version=\"1.2.3\",\n    description=dedent(\n        \"\"\"\n        # Info\n        This is a description. It is a good place to add some _extra_ doccumentation.\n\n        **MARKDOWN** is supported.\n        \"\"\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Modern Application Context Setup\nDESCRIPTION: Shows the correct way to attach objects to Sanic application context from version 21.3 onwards using the ctx attribute.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Sanic\nDESCRIPTION: Demonstrates different methods for accessing query parameters using request.args and request.query_args, with examples of handling multiple values for the same key.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8000\\?key1\\=val1\\&key2\\=val2\\&key1\\=val3\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.args)\n{'key1': ['val1', 'val3'], 'key2': ['val2']}\n\n>>> print(request.args.get(\"key1\"))\nval1\n\n>>> print(request.args.getlist(\"key1\"))\n['val1', 'val3']\n\n>>> print(request.query_args)\n[('key1', 'val1'), ('key2', 'val2'), ('key1', 'val3')]\n\n>>> print(request.query_string)\nkey1=val1&key2=val2&key1=val3\n```\n\n----------------------------------------\n\nTITLE: Service Injection with Low-Level API\nDESCRIPTION: Demonstrates injecting services using the lower-level add_dependency API with a database connection example.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n\n@app.before_server_start\nasync def setup_db(app, _):\n    app.ctx.db_conn = FakeConnection()\n    app.ext.add_dependency(FakeConnection, get_db)\n\n\ndef get_db(request: Request):\n    return request.app.ctx.db_conn\n\n\n\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Complete Nginx configuration for proxying requests to Sanic, including SSL, HTTP/2, WebSocket support, and static file serving.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/nginx.md#2025-04-10_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n# Files managed by Certbot\nssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n# Sanic service\nupstream example.com {\n  keepalive 100;\n  server 127.0.0.1:8001;\n  #server unix:/tmp//sanic.sock;\n}\n\nserver {\n  server_name example.com;\n  listen 443 ssl http2 default_server;\n  listen [::]:443 ssl http2 default_server;\n  # Serve static files if found, otherwise proxy to Sanic\n  location / {\n    root /srv/sanicexample/static;\n    try_files $uri @sanic;\n  }\n  location @sanic {\n    proxy_pass http://$server_name;\n    # Allow fast streaming HTTP/1.1 pipes (keep-alive, unbuffered)\n    proxy_http_version 1.1;\n    proxy_request_buffering off;\n    proxy_buffering off;\n    proxy_set_header forwarded by=\\\"_$hostname\\\";$for_addr;proto=$scheme;host=\\\"$http_host\\\";\n    # Allow websockets and keep-alive (avoid connection: close)\n    proxy_set_header connection \"upgrade\";\n    proxy_set_header upgrade $http_upgrade;\n  }\n}\n\n# Redirect WWW to no-WWW\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2;\n  server_name ~^www\\.(.*)$;\n  return 308 $scheme://$1$request_uri;\n}\n\n# Redirect all HTTP to HTTPS with no-WWW\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n  server_name ~^(?:www\\.)?(.*)$;\n  return 308 https://$1$request_uri;\n}\n\n# Forwarded for= client IP address formatting\nmap $remote_addr $for_addr {\n  ~^[0-9.]+$          \"for=$remote_addr\";        # IPv4 client address\n  ~^[0-9A-Fa-f:.]+$   \"for=\\\"[$remote_addr]\\\"\";  # IPv6 bracketed and quoted\n  default             \"for=unknown\";             # Unix socket\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Signal Handling in Sanic\nDESCRIPTION: Example showing how to register a signal handler for user registration and how to dispatch that signal from a route handler. This demonstrates the basic signal pattern in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"user.registration.created\")\nasync def send_registration_email(**context):\n    await send_email(context[\"email\"], template=\"registration\")\n\n@app.post(\"/register\")\nasync def handle_registration(request):\n    await do_registration(request)\n    await request.app.dispatch(\n        \"user.registration.created\",\n        context={\"email\": request.json.email}\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket Routes in Sanic\nDESCRIPTION: Shows how to create a websocket route using the add_websocket_route method. The handler accepts a request and websocket object, enabling bidirectional communication through the websocket connection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request, ws):\n    messgage = \"Start\"\n    while True:\n        await ws.send(message)\n        message = ws.recv()\n\n\napp.add_websocket_route(handler, \"/test\")\n```\n\n----------------------------------------\n\nTITLE: Using Request Middleware Decorator in Sanic\nDESCRIPTION: Demonstrates how to use the @app.middleware decorator to register a function as request middleware that extracts user information before the route handler is executed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware(\"request\")\nasync def extract_user(request):\n    request.ctx.user = await extract_user_from_request(request)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Sanic\nDESCRIPTION: This code shows how to use request/response middleware and server lifecycle events in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/README.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def add_key(request):\n    request.ctx.foo = \"bar\"\n\n@app.on_response\nasync def custom_banner(request, response):\n    response.headers[\"X-Foo\"] = request.ctx.foo\n\n@app.before_server_start\nasync def setup_db(app):\n    app.ctx.db_pool = await db_setup()\n\n@app.after_server_stop\nasync def setup_db(app):\n    await app.ctx.db_pool.shutdown()\n\n@app.signal(\"http.lifecycle.complete\")  # built-in\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n\n@app.signal(\"something.happened.ohmy\")  # custom\nasync def my_signal_handler():\n    print(\"something happened\")\n\nawait app.dispatch(\"something.happened.ohmy\")\n```\n\n----------------------------------------\n\nTITLE: Defining Default Exception Messages in Sanic\nDESCRIPTION: Demonstrates how to define a default exception message for custom exceptions derived from SanicException in Sanic v21.9. This feature helps maintain consistency in exception messages.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TeaError(SanicException):\n    message = \"Tempest in a teapot\"\n\n\nraise TeaError\n```\n\n----------------------------------------\n\nTITLE: Using Typed Path Parameters in Sanic Routes (Python)\nDESCRIPTION: Demonstrates how to use typed path parameters in Sanic routes, with automatic type conversion.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo/<foo_id:uuid>\")\nasync def uuid_handler(request, foo_id: UUID):\n    return text(\"UUID - {}\".format(foo_id))\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with CLI\nDESCRIPTION: The primary method to run Sanic applications using the command-line interface, pointing to a module that contains a Sanic app instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Basic Sanic Application in Python\nDESCRIPTION: Creates a simple Sanic application and runs it using the built-in server. This is the most basic way to start a Sanic app.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# server.py\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Mode in Sanic Application\nDESCRIPTION: Shows how to run a Sanic application in development mode with debugging and auto-reload enabled, which is the recommended approach for development environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.run(debug=True, auto_reload=True)\n```\n\n----------------------------------------\n\nTITLE: Service Injection using Low-Level API in Sanic\nDESCRIPTION: Illustrates how to inject a service (database connection) using the low-level add_dependency API. It creates a FakeConnection object and injects it into the request handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/injection.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n\n@app.before_server_start\nasync def setup_db(app, _):\n    app.ctx.db_conn = FakeConnection()\n    app.ext.add_dependency(FakeConnection, get_db)\n\n\ndef get_db(request: Request):\n    return request.app.ctx.db_conn\n\n\n\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Decorators in Sanic\nDESCRIPTION: Demonstrates how to create and use a custom decorator that adds authentication to Sanic route handlers. The decorator checks for an auth header and returns an unauthorized response if the header is missing.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/decorators.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            is_authorized = check_request_for_authorization_status(request)\n\n            if is_authorized:\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                return json({\"status\": \"not_authorized\"}, 403)\n\n        return decorated_function\n\n    return decorator\n\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({\"status\": \"authorized\"})\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Sanic with Nginx\nDESCRIPTION: Docker Compose YAML file that defines a multi-container setup with a Sanic application and Nginx. The configuration maps ports, configures volumes for Nginx, and sets up networking between containers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nversion: \"3\"\n\nservices:\n  mysanic:\n    image: my-sanic-image\n    ports:\n      - \"8000:8000\"\n    restart: always\n\n  mynginx:\n    image: nginx:1.13.6-alpine\n    ports:\n      - \"80:80\"\n    depends_on:\n      - mysanic\n    volumes:\n      - ./mysanic.conf:/etc/nginx/conf.d/mysanic.conf\n    restart: always\n\nnetworks:\n  default:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Sanic Routes (Python)\nDESCRIPTION: Shows how to use path parameters in Sanic routes and pass them as keyword arguments to the handler function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/tag/<tag>\")\nasync def tag_handler(request, tag):\n    return text(\"Tag - {}\".format(tag))\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Production Mode without Debug\nDESCRIPTION: This command runs a Sanic application with debug mode disabled for better performance in production environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application in Production Mode\nDESCRIPTION: Demonstrates how to run a Sanic application in production mode with default settings, which is the recommended approach for deployment environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Returning Empty Response in Sanic (Python)\nDESCRIPTION: Demonstrates using the empty() method to respond with an empty message as defined by RFC 2616.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import empty\n\n@app.route(\"/\")\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Accessing General Request Headers in Sanic\nDESCRIPTION: Demonstrates different methods for accessing request headers, including case-insensitive access, single value retrieval with .get() and .getone(), and multi-value retrieval with .getall(). Shows how to list all headers with .items().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"foo_weakref\": request.headers[\"foo\"],\n            \"foo_get\": request.headers.get(\"Foo\"),\n            \"foo_getone\": request.headers.getone(\"FOO\"),\n            \"foo_getall\": request.headers.getall(\"fOo\"),\n            \"all\": list(request.headers.items()),\n        }\n    )\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:9999/headers -H \"Foo: one\" -H \"FOO: two\"|jq\n{\n  \"foo_weakref\": \"one\",\n  \"foo_get\": \"one\",\n  \"foo_getone\": \"one\",\n  \"foo_getall\": [\n    \"one\",\n    \"two\"\n  ],\n  \"all\": [\n    [\n      \"host\",\n      \"localhost:9999\"\n    ],\n    [\n      \"user-agent\",\n      \"curl/7.76.1\"\n    ],\n    [\n      \"accept\",\n      \"*/*\"\n    ],\n    [\n      \"foo\",\n      \"one\"\n    ],\n    [\n      \"foo\",\n      \"two\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Catchall Exception Handler in Sanic\nDESCRIPTION: Demonstrates how to implement a catchall exception handler in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.exception(Exception)\nasync def catch_anything(request, exception):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Sanic Application Initialization in Python\nDESCRIPTION: Shows an advanced way of initializing Sanic applications by separating the prepare and serve steps, allowing for more complex setups like binding to multiple ports.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app1.prepare(host='0.0.0.0', port=9990)\n    app1.prepare(host='0.0.0.0', port=9991)\n    app2.prepare(host='0.0.0.0', port=5555)\n    Sanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.delete decorator to define a route for DELETE requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.delete('/test')\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Phases of Middleware in Sanic\nDESCRIPTION: Shows how to register middleware for both request and response phases in a single function using the middleware decorator, enabling pre and post-processing of the request lifecycle.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware(\"request\")\nasync def middleware3(request):\n    logger.info(\"before request\")\n\n@app.middleware(\"response\")\nasync def middleware3(request, response):\n    logger.info(\"after request\")\n    return response\n```\n\n----------------------------------------\n\nTITLE: Generating Different Response Types in Sanic\nDESCRIPTION: This snippet demonstrates various ways to generate responses in Sanic, including JSON, plain text, and HTML responses. It also shows how to set custom headers and status codes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/request-id-logging.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import response\n\n@app.route(\"/json\")\ndef json_response(request):\n    return response.json({\"message\": \"Hello, world!\"})\n\n@app.route(\"/text\")\ndef text_response(request):\n    return response.text(\"Hello, world!\")\n\n@app.route(\"/html\")\ndef html_response(request):\n    return response.html(\"<h1>Hello, world!</h1>\")\n\n@app.route(\"/custom\")\ndef custom_response(request):\n    return response.HTTPResponse(\n        \"Hello, world!\",\n        status=201,\n        headers={\"X-Served-By\": \"Sanic\"}\n    )\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response in Sanic (Production Mode)\nDESCRIPTION: Shows the structure of a JSON error response in production mode, including description, status, message, and context.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"I'm a teapot\",\n  \"status\": 418,\n  \"message\": \"Sorry Adam, I cannot make you coffee\",\n  \"context\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Parameters in Request Middleware with Example\nDESCRIPTION: Shows how to modify request.match_info in middleware to convert URL slugs from hyphenated format to underscore format. Includes a cURL example showing the result.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\ndef convert_slug_to_underscore(request: Request):\n    request.match_info[\"slug\"] = request.match_info[\"slug\"].replace(\"-\", \"_\")\n\n\n@app.get(\"/<slug:slug>\")\nasync def handler(request, slug):\n    return text(slug)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:9999/foo-bar-baz\nfoo_bar_baz\n```\n\n----------------------------------------\n\nTITLE: Updating Sanic Configuration with Dictionary (Python)\nDESCRIPTION: Shows how to use the update() method to set multiple configuration values at once using a dictionary in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n```\n\n----------------------------------------\n\nTITLE: Writing Cookies in Sanic Response\nDESCRIPTION: Shows how to set cookies on a response object using the CookieJar instance. Demonstrates setting a cookie with domain and httponly parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/cookies.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"There's a cookie up in this response\")\n    response.add_cookie(\n        \"test\",\n        \"It worked!\",\n        domain=\".yummy-yummy-cookie.com\",\n        httponly=True\n    )\n    return response\n```\n\n----------------------------------------\n\nTITLE: Defining PUT Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.put decorator to define a route for PUT requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.put('/test')\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Writing Cookies in Sanic Response\nDESCRIPTION: Shows how to set cookies on a response object using the CookieJar instance. Demonstrates setting a cookie with domain and httponly parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/cookies.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"There's a cookie up in this response\")\n    response.add_cookie(\n        \"test\",\n        \"It worked!\",\n        domain=\".yummy-yummy-cookie.com\",\n        httponly=True\n    )\n    return response\n```\n\n----------------------------------------\n\nTITLE: Adding Signals to Blueprints in Sanic\nDESCRIPTION: Demonstrates how to declare signals on blueprints instead of the main application. This allows for more modular organization of signal handlers across different components.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"foo\")\n\n@bp.signal(\"something.happened.ohmy\")\nasync def my_signal_handler():\n    print(\"something happened\")\n```\n\n----------------------------------------\n\nTITLE: Adding Summaries to Endpoints\nDESCRIPTION: Example of using the @openapi.summary decorator to add a brief summary for an API endpoint in the OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@openapi.summary(\"This is an endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Auto-injecting App Instance into Background Tasks\nDESCRIPTION: Demonstration of how Sanic automatically injects the app instance as an argument to background tasks, allowing direct access to the app object within the task.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def auto_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(auto_inject)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sanic Application Lifecycle\nDESCRIPTION: Mermaid sequence diagram showing the flow of listener events in a Sanic application from startup to shutdown.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/listeners.md#2025-04-10_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nautonumber\nparticipant Process\nparticipant Worker\nparticipant Listener\nparticipant Handler\nNote over Process: sanic server.app\nloop\n    Process->>Listener: @app.main_process_start\n    Listener->>Handler: Invoke event handler\nend\nProcess->>Worker: Run workers\nloop Start each worker\n    loop\n        Worker->>Listener: @app.before_server_start\n        Listener->>Handler: Invoke event handler\n    end\n    Note over Worker: Server status: started\n    loop\n        Worker->>Listener: @app.after_server_start\n        Listener->>Handler: Invoke event handler\n    end\n    Note over Worker: Server status: ready\nend\nProcess->>Worker: Graceful shutdown\nloop Stop each worker\n    loop\n        Worker->>Listener: @app.before_server_stop\n        Listener->>Handler: Invoke event handler\n    end\n    Note over Worker: Server status: stopped\n    loop\n        Worker->>Listener: @app.after_server_stop\n        Listener->>Handler: Invoke event handler\n    end\n    Note over Worker: Server status: closed\nend\nloop\n    Process->>Listener: @app.main_process_stop\n    Listener->>Handler: Invoke event handler\nend\nNote over Process: exit\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero Downtime Restarts\nDESCRIPTION: Example of using the multiplexer to implement zero-downtime worker restarts.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.m.restart(zero_downtime=True)\n```\n\n----------------------------------------\n\nTITLE: Using Route Decorator with Multiple HTTP Methods in Sanic (Python)\nDESCRIPTION: Demonstrates using the @app.route decorator to define a route that handles multiple HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/test', methods=[\"POST\", \"PUT\"])\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Request-ID Response Headers with Middleware\nDESCRIPTION: Shows how to set X-Request-ID response headers using the on_response middleware. Demonstrates accessing the automatically generated request ID and returning it in both the response body and headers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(str(request.id))\n\n@app.on_response\nasync def add_request_id_header(request, response):\n    response.headers[\"X-Request-ID\"] = request.id\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -i\nHTTP/1.1 200 OK\nX-Request-ID: 805a958e-9906-4e7a-8fe0-cbe83590431b\ncontent-length: 36\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\n805a958e-9906-4e7a-8fe0-cbe83590431b\n```\n\n----------------------------------------\n\nTITLE: Implementing a Websocket Handler in Sanic\nDESCRIPTION: Shows how to create a websocket handler that echoes back client messages. It demonstrates the use of the send() and recv() methods on the websocket object.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/websockets.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/feed\")\nasync def feed(request, ws):\n    while True:\n        data = \"hello!\"\n        print(\"Sending: \" + data)\n        await ws.send(data)\n        data = await ws.recv()\n        print(\"Received: \" + data)\n```\n\n----------------------------------------\n\nTITLE: Instantiating ReusableClient in Python\nDESCRIPTION: Demonstrates how to instantiate the ReusableClient, which allows control over the lifecycle of the application. This client stands up an instance of the application for multiple requests.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing.reusable import ReusableClient\n\nclient = ReusableClient(app)\n```\n\n----------------------------------------\n\nTITLE: Importing Common Exception Types in Sanic\nDESCRIPTION: Demonstrates importing common HTTP exception classes directly from the Sanic root module, which is a new feature that simplifies exception handling.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import NotFound, Unauthorized, BadRequest, ServerError\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Signals in Sanic\nDESCRIPTION: Shows how to attach a handler to a built-in Sanic signal. Built-in signals provide hooks into the request and server lifecycles, offering more opportunities for custom functionality.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"http.lifecycle.complete\")\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n```\n\n----------------------------------------\n\nTITLE: Sanic Hello World with Extensions (v21.12+)\nDESCRIPTION: A basic Sanic application that demonstrates the automatic setup of Sanic Extensions (v21.12+). No additional configuration is required if Sanic Extensions is installed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/getting-started.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Adding Routes Programmatically in Sanic (Python)\nDESCRIPTION: Demonstrates how to add routes programmatically using app.add_route() method in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    return text(\"OK\")\n\n\napp.add_route(handler, \"/test\")\n```\n\n----------------------------------------\n\nTITLE: Avoiding Common Mistakes in Sanic Application Initialization\nDESCRIPTION: Demonstrates a common mistake of putting too much logic inside the __main__ block and provides a correct alternative using __mp_main__ for worker processes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom my.other.module import bp\n\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__mp_main__\":\n    app.blueprint(bp)\nelif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to Individual Methods in Sanic Class-Based Views\nDESCRIPTION: This snippet shows how to apply decorators to individual methods in a Sanic class-based view. It demonstrates decorating specific methods while leaving others undecorated.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithSomeDecorator(HTTPMethodView):\n\n    @staticmethod\n    @some_decorator_here\n    def get(request, name):\n        return text(\"Hello I have a decorator\")\n\n    def post(self, request, name):\n        return text(\"Hello I do not have any decorators\")\n\n    @some_decorator_here\n    def patch(self, request, name):\n        return text(\"Hello I have a decorator\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Generic Typed Sanic Application\nDESCRIPTION: Demonstrates basic usage of the new generic typing system for Sanic applications, showing type revelation of the default Config and SimpleNamespace types.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\napp = Sanic(\"test\")\nreveal_type(app)  # N: Revealed type is \"sanic.app.Sanic[sanic.config.Config, types.SimpleNamespace]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Streaming in Sanic\nDESCRIPTION: This example demonstrates how to stream content to the client using Sanic's response streaming feature. It sends content in chunks and optionally ends the stream explicitly.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def test(request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n\n    # Optionally, you can explicitly end the stream by calling:\n    await response.eof()\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Class-Based Views in Sanic\nDESCRIPTION: This example shows how to generate a URL for a class-based view in Sanic. It demonstrates defining a route, creating a class-based view, and generating a URL for that view using app.url_for().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef index(request):\n    url = app.url_for(\"SpecialClassView\")\n    return redirect(url)\n\n\nclass SpecialClassView(HTTPMethodView):\n    def get(self, request):\n        return text(\"Hello from the Special Class View!\")\n\n\napp.add_route(SpecialClassView.as_view(), \"/special_class_view\")\n```\n\n----------------------------------------\n\nTITLE: Defining Security Schemes in Sanic OpenAPI\nDESCRIPTION: Examples of adding different types of security schemes including API key, HTTP Bearer/Basic auth, and OAuth2. Shows configuration for various authentication methods supported by OpenAPI specification.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/security.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.ext.openapi.add_security_scheme(\"api_key\", \"apiKey\")\napp.ext.openapi.add_security_scheme(\n    \"token\",\n    \"http\",\n    scheme=\"bearer\",\n    bearer_format=\"JWT\",\n)\napp.ext.openapi.add_security_scheme(\"token2\", \"http\")\napp.ext.openapi.add_security_scheme(\n    \"oldschool\",\n    \"http\",\n    scheme=\"basic\",\n)\napp.ext.openapi.add_security_scheme(\n    \"oa2\",\n    \"oauth2\",\n    flows={\n        \"implicit\": {\n            \"authorizationUrl\": \"http://example.com/auth\",\n            \"scopes\": {\n                \"on:two\": \"something\",\n                \"three:four\": \"something else\",\n                \"threefour\": \"something else...\",\n            },\n        }\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Handler with Sleep in Sanic\nDESCRIPTION: Example of an asynchronous handler that uses asyncio.sleep() to simulate processing time without blocking the event loop, allowing much higher throughput for concurrent requests.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/handlers.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/async\")\nasync def async_handler(request):\n    await asyncio.sleep(0.1)\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Sanic Instance\nDESCRIPTION: Demonstrates how to retrieve the only registered Sanic instance without specifying its name.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSanic(\"My only app\")\n\napp = Sanic.get_app()\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Sanic Python\nDESCRIPTION: This snippet demonstrates different ways to delete cookies in Sanic. It shows how to explicitly delete cookies, set cookies to expire immediately, and set cookies with a short lifespan using the max-age attribute.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/cookies.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"Time to eat some cookies muahaha\")\n\n    # This cookie will be set to expire in 0 seconds\n    del response.cookies[\"kill_me\"]\n\n    # This cookie will self destruct in 5 seconds\n    response.cookies[\"short_life\"] = \"Glad to be here\"\n    response.cookies[\"short_life\"][\"max-age\"] = 5\n    del response.cookies[\"favorite_color\"]\n\n    # This cookie will remain unchanged\n    response.cookies[\"favorite_color\"] = \"blue\"\n    response.cookies[\"favorite_color\"] = \"pink\"\n    del response.cookies[\"favorite_color\"]\n\n    return response\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Reloading in Sanic\nDESCRIPTION: Command line options to enable automatic reloading in Sanic. This will restart the application automatically when Python files are changed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --reload\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -r\n```\n\n----------------------------------------\n\nTITLE: Example Output from Custom Serializer in Sanic\nDESCRIPTION: Sample cURL command and response output showing the formatted JSON returned by the custom serializer, including the request ID, action name, and message content.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/convenience.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl\nlocalhost: 8000 / eat_cookies - X\nPOST\n{\n    \"request_id\": \"ef81c45b-235c-46dd-9dbd-b550f8fa77f9\",\n    \"action\": \"eat_cookies\",\n    \"message\": \"This is a message\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Sanic Proxy\nDESCRIPTION: Nginx configuration file that sets up a reverse proxy to forward requests from port 80 to the Sanic application running on port 8000 in the mysanic container.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n    location / {\n      proxy_pass http://mysanic:8000/;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection upgrade;\n      proxy_set_header Accept-Encoding gzip;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Sanic Exception\nDESCRIPTION: Demonstrates how to add context information to a Sanic exception.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Response Handler with Route Decorator in Sanic\nDESCRIPTION: Example of using the @app.get() decorator to attach a handler to a route endpoint. The handler returns a text response using Sanic's text() function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/handlers.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import text\n\n@app.get(\"/foo\")\nasync def foo_handler(request):\n    return text(\"I said foo!\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Application Settings\nDESCRIPTION: Shows different methods to configure Sanic application settings using dot notation and dictionary style updates.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic('myapp')\n\napp.config.DB_NAME = 'appdb'\napp.config['DB_USER'] = 'appuser'\n\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n```\n\n----------------------------------------\n\nTITLE: Handling Query Strings in Sanic\nDESCRIPTION: This example shows how to handle query string parameters in a Sanic route. It demonstrates accessing single and multiple values from the query string.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/request-id-logging.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic(\"My Hello, world app\")\n\n@app.route(\"/\")\nasync def test(request):\n    return json({\"hello\": \"world\", \"query_string\": request.query_string})\n\n@app.route(\"/tag/<tag>\")\nasync def tag_handler(request, tag):\n    return json({\"request_args\": request.args, \"url_arg\": tag})\n```\n\n----------------------------------------\n\nTITLE: Inspector HTTP Usage\nDESCRIPTION: Shows how to access the Inspector via HTTP endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:6457\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Single Process Mode\nDESCRIPTION: Shows three ways to run Sanic in single process mode: via command line, using run(), or with prepare() and serve_single(). Single process mode disables the Manager and process-based features.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --single-process\n```\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run(single_process=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.prepare(single_process=True)\n    Sanic.serve_single()\n```\n\n----------------------------------------\n\nTITLE: Complete Listener Implementation Example\nDESCRIPTION: Comprehensive example showing implementation of multiple listeners with their execution order demonstration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/listeners.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.listener(\"before_server_start\")\nasync def listener_1(app, loop):\n    print(\"listener_1\")\n\n@app.before_server_start\nasync def listener_2(app, loop):\n    print(\"listener_2\")\n\n@app.listener(\"after_server_start\")\nasync def listener_3(app, loop):\n    print(\"listener_3\")\n\n@app.after_server_start\nasync def listener_4(app, loop):\n    print(\"listener_4\")\n\n@app.listener(\"before_server_stop\")\nasync def listener_5(app, loop):\n    print(\"listener_5\")\n\n@app.before_server_stop\nasync def listener_6(app, loop):\n    print(\"listener_6\")\n\n@app.listener(\"after_server_stop\")\nasync def listener_7(app, loop):\n    print(\"listener_7\")\n\n@app.after_server_stop\nasync def listener_8(app, loop):\n    print(\"listener_8\")\n```\n\nLANGUAGE: bash\nCODE:\n```\n[pid: 1000000] [INFO] Goin' Fast @ http://127.0.0.1:9999\n[pid: 1000000] [INFO] listener_0\n[pid: 1111111] [INFO] listener_1\n[pid: 1111111] [INFO] listener_2\n[pid: 1111111] [INFO] listener_3\n[pid: 1111111] [INFO] listener_4\n[pid: 1111111] [INFO] Starting worker [1111111]\n[pid: 1222222] [INFO] listener_1\n[pid: 1222222] [INFO] listener_2\n[pid: 1222222] [INFO] listener_3\n[pid: 1222222] [INFO] listener_4\n[pid: 1222222] [INFO] Starting worker [1222222]\n[pid: 1111111] [INFO] Stopping worker [1111111]\n[pid: 1222222] [INFO] Stopping worker [1222222]\n[pid: 1222222] [INFO] listener_6\n[pid: 1222222] [INFO] listener_5\n[pid: 1222222] [INFO] listener_8\n[pid: 1222222] [INFO] listener_7\n[pid: 1111111] [INFO] listener_6\n[pid: 1111111] [INFO] listener_5\n[pid: 1111111] [INFO] listener_8\n[pid: 1111111] [INFO] listener_7\n[pid: 1000000] [INFO] listener_9\n[pid: 1000000] [INFO] Server Stopped\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Sanic\nDESCRIPTION: Shell command to build a Docker image named 'my-sanic-image' from the current directory's Dockerfile.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t my-sanic-image .\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanic Logger Configuration (Python)\nDESCRIPTION: This code snippet shows how to use a custom logging configuration in a Sanic application. It demonstrates initializing the Sanic app with a custom log_config and running the server with access logging disabled.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/logging.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic('logging_example', log_config=LOGGING_CONFIG)\n\nif __name__ == \"__main__\":\n  app.run(access_log=False)\n```\n\n----------------------------------------\n\nTITLE: Using Route Context in Sanic\nDESCRIPTION: Demonstrates how to add context to routes using ctx_ prefixed keyword arguments. This context can be accessed in middleware or handlers to apply conditional logic based on route properties.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/1\", ctx_label=\"something\")\nasync def handler1(request):\n    ...\n\n@app.get(\"/2\", ctx_label=\"something\")\nasync def handler2(request):\n    ...\n\n@app.get(\"/99\")\nasync def handler99(request):\n    ...\n\n@app.on_request\nasync def do_something(request):\n    if request.route.ctx.label == \"something\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.patch decorator to define a route for PATCH requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.patch('/test')\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Blueprint Versioning in Sanic\nDESCRIPTION: Shows how to apply a version number to an entire blueprint in Sanic, which affects all routes within that blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/versioning.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"test\", url_prefix=\"/foo\", version=1)\n\n# /v1/foo/html\n@bp.route(\"/html\")\ndef handle_request(request):\n    return response.html(\"<p>Hello world!</p>\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Query Values URL Generation\nDESCRIPTION: Demonstrates generating URLs with multiple values for a single query parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nassert app.url_for(\n    \"post_handler\",\n    post_id=5,\n    arg_one=[\"one\", \"two\"],\n) == \"/posts/5?arg_one=one&arg_one=two\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Attrs Model for Validation in Python\nDESCRIPTION: Creates an Attrs model 'Person' with 'name' and 'age' fields for request body validation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@attrs.define\nclass Person:\n    name: str\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxied Sanic Response\nDESCRIPTION: Expected output when accessing the Sanic application through Nginx proxy at http://localhost:80.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nOK!\n```\n\n----------------------------------------\n\nTITLE: Named Static Routes in Sanic\nDESCRIPTION: Shows how to create a named static route for easier reference and URL generation. Named static routes allow for more maintainable code when generating URLs for static resources.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napp.static(\n    \"/user/uploads\",\n    \"/path/to/uploads\",\n    name=\"uploads\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Exception Message with Context in Sanic\nDESCRIPTION: Shows how to define a custom exception with a dynamic message that incorporates additional context provided when the exception is raised.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Accessing X-Request-ID Headers in Sanic\nDESCRIPTION: Shows how to access the X-Request-ID header through request.id. This property provides convenient access to request tracking identifiers sent in the header.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(request.id)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 \\\n    -H \"X-Request-ID: ABCDEF12345679\"\nABCDEF12345679\n```\n\n----------------------------------------\n\nTITLE: Creating Sanic App with Mayim Extension\nDESCRIPTION: Setting up a Sanic application with Mayim extension and defining a custom executor for database operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sanic import Sanic, Request, json\nfrom sanic_ext import Extend\nfrom mayim.executor import PostgresExecutor\nfrom mayim.extensions import SanicMayimExtension\nfrom models import Country\n\n\nclass CountryExecutor(PostgresExecutor):\n    async def select_all_countries(\n        self, limit: int = 4, offset: int = 0\n    ) -> list[Country]:\n        ...\n\n\napp = Sanic(\"Test\")\nExtend.register(\n    SanicMayimExtension(\n        executors=[CountryExecutor],\n        dsn=\"postgres://...\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Static Files in Sanic\nDESCRIPTION: Demonstrates how to generate URLs for static files using the url_for method with named static routes. This example shows retrieving URLs for static files with different names.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>> > app.url_for(\n    \"static\",\n    name=\"static\",\n    filename=\"file.txt\",\n)\n'/static/file.txt'\n\n​```python\n>> > app.url_for(\n    \"static\",\n    name=\"uploads\",\n    filename=\"image.png\",\n)\n'/user/uploads/image.png'\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Login Endpoint in Sanic\nDESCRIPTION: Login blueprint that creates a JWT token endpoint. This module generates JWT tokens using the app's secret key when a POST request is made to the /login endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/authentication.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nfrom sanic import Blueprint, text\n\nlogin = Blueprint(\"login\", url_prefix=\"/login\")\n\n\n@login.post(\"/\")\nasync def do_login(request):\n    token = jwt.encode({}, request.app.config.SECRET)\n    return text(token)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Factory Pattern\nDESCRIPTION: Three different ways to run a Sanic application that uses the factory pattern, including explicit and implicit factory declaration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:create_app --factory\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic \"server:create_app()\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:create_app\n```\n\n----------------------------------------\n\nTITLE: Serving a Single Static File in Sanic\nDESCRIPTION: Demonstrates how to serve a single static file, such as an index.html file, from a specific location. This is useful for serving specific files at particular routes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_23\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/\", \"/path/to/index.html\")\n```\n\n----------------------------------------\n\nTITLE: Using Signal Events Enum in Sanic\nDESCRIPTION: Shows how to use the Signal Events Enum to register a handler for a specific event in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.HTTP_LIFECYCLE_BEGIN)\nasync def connection_opened(conn_info):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Background Task Before Sanic App Runs\nDESCRIPTION: Shows how to add a background task before the Sanic app starts running. This method creates the task for each subprocess.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def slow_work(...):\n   ...\n\napp = Sanic(...)\napp.add_task(slow_work) # Note: we are passing the callable and not coroutine object `slow_work(...)`\napp.run(...)\n```\n\n----------------------------------------\n\nTITLE: Defining POST Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.post decorator to define a route for POST requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/test')\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Raising an Exception with Extra Data\nDESCRIPTION: Example of raising a SanicException with extra contextual data.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Directories for Automatic Reloading\nDESCRIPTION: Commands to specify additional directories for Sanic's automatic reloader to monitor. Useful for reloading when template files or other non-Python assets change.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --reload --reload-dir=/path/to/templates\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -r -R /path/to/one -R /path/to/two\n```\n\n----------------------------------------\n\nTITLE: Serving Static Directory in Sanic\nDESCRIPTION: Shows how to serve static files from a directory using Sanic's static method. This maps a URL path to a directory location for serving static content.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_22\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/static\", \"/path/to/directory\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Environment Variable Loading in Sanic (Python)\nDESCRIPTION: Demonstrates how to disable the loading of configuration from environment variables in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(__name__, load_env=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Descriptions with Markdown\nDESCRIPTION: Example of using the @openapi.description decorator to add a detailed, markdown-formatted description to an API endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@openapi.description(\n    \"\"\"This is a **description**.\n\n## You can use `markdown`\n\n- And\n- make\n- lists.\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible Decorator in Sanic\nDESCRIPTION: Creates a decorator that can be used with or without arguments. It uses keyword-only arguments for easier implementation and demonstrates handling both regular and async responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(maybe_func=None, *, arg1=None, arg2=None):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator(maybe_func) if maybe_func else decorator\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Exception Message with Extra in Sanic\nDESCRIPTION: Shows how to create a custom exception with a dynamic message using the extra parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Registering SQLAlchemy Middleware in Sanic\nDESCRIPTION: Implementation of Sanic middleware to manage SQLAlchemy async sessions for each request.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom contextvars import ContextVar\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\n_sessionmaker = sessionmaker(bind, AsyncSession, expire_on_commit=False)\n\n_base_model_session_ctx = ContextVar(\"session\")\n\n@app.middleware(\"request\")\nasync def inject_session(request):\n    request.ctx.session = _sessionmaker()\n    request.ctx.session_ctx_token = _base_model_session_ctx.set(request.ctx.session)\n\n\n@app.middleware(\"response\")\nasync def close_session(request, response):\n    if hasattr(request.ctx, \"session_ctx_token\"):\n        _base_model_session_ctx.reset(request.ctx.session_ctx_token)\n        await request.ctx.session.close()\n```\n\n----------------------------------------\n\nTITLE: Using TLS-enabled Inspector\nDESCRIPTION: Demonstrates how to interact with TLS-enabled Inspector via CLI and HTTP.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect --secure --host=<somewhere>\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://<somewhere>:6457\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Sanic Request Handler\nDESCRIPTION: Demonstrates how to access cookies from the request object using the cookies dictionary. Shows usage of the .get() method to retrieve a single cookie value.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/cookies.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    test_cookie = request.cookies.get(\"test\")\n    return text(f\"Test cookie: {test_cookie}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Routes Programmatically\nDESCRIPTION: Demonstrates how to add routes programmatically using app.add_route() method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    return text(\"OK\")\n\napp.add_route(handler, \"/test\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Slashes for Blueprint Groups in Sanic\nDESCRIPTION: Demonstrates how to set strict slash matching for blueprint groups. The configuration cascades down to all blueprints in the group, but can be overridden by individual blueprint settings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(name=\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\n    name=\"bp1\",\n    url_prefix=\"/bp2\",\n    strict_slashes=False,\n)\n# This will enforce strict slashes check on the routes\n# under bp1 but ignore bp2 as that has an explicitly\n# set the strict slashes check to false\ngroup = Blueprint.group([bp1, bp2], strict_slashes=True)\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Sanic Request Handler\nDESCRIPTION: Demonstrates how to access cookies from the request object using the cookies dictionary. Shows usage of the .get() method to retrieve a single cookie value.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/cookies.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    test_cookie = request.cookies.get(\"test\")\n    return text(f\"Test cookie: {test_cookie}\")\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Dictionary (Python)\nDESCRIPTION: Shows how to load configuration values from a dictionary using the update_config method in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.update_config({\"A\": 1, \"B\": 2})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Decorators in Sanic View Handler\nDESCRIPTION: Demonstrates the use of multiple decorators in a Sanic view handler for authorization, parameter validation, and user injection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/orders\")\n@authorized(\"view_order\")\n@validate_list_params()\n@inject_user()\nasync def get_order_details(request, params, user):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Raising a Sanic Exception with Additional Context\nDESCRIPTION: Demonstrates how to raise a custom Sanic exception with additional context that will be included in the error response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Accessing Worker State Information\nDESCRIPTION: Example of accessing current worker state information through the multiplexer.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def print_state(request: Request):\n    print(request.app.m.name)\n    print(request.app.m.pid)\n    print(request.app.m.state)\n```\n\n----------------------------------------\n\nTITLE: Returning File Response in Sanic (Python)\nDESCRIPTION: Demonstrates using the file() method to return a file response, with options for specifying mime type and filename.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import file\n\n@app.route(\"/\")\nasync def handler(request):\n    return await file(\"/path/to/whatever.png\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Slashes for Blueprint Routes in Sanic\nDESCRIPTION: Shows how to configure strict slash matching for all routes within a Blueprint. This setting can also be overridden at the individual route level within the blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# 为蓝图所属的路由启用严格匹配模式\nbp = Blueprint(__file__, strict_slashes=True)\n\n\n@bp.get(\"/bp/get\", strict_slashes=False)\ndef handler(request):\n    return text(\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Server with Uvicorn Worker\nDESCRIPTION: This code example shows how to configure the Sanic server to use Uvicorn as the worker class. It sets various parameters such as host, port, workers, and specific Uvicorn settings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/server-choice.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.run(\n    host='0.0.0.0',\n    port=1337,\n    workers=4,\n    fast=True,\n    worker_class=\"uvicorn\",\n    access_log=True,\n    unix_socket=None,\n)\n```\n\n----------------------------------------\n\nTITLE: Object Extraction from Request in Sanic Dependency Injection\nDESCRIPTION: Demonstrates how to extract and preprocess data from a request using dependency injection. It creates a UserProfile object based on request data and a simulated database query.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/injection.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n    name: str\n\n\n@dataclass\nclass UserProfile:\n    user: User\n    age: int = field(default=0)\n    email: str = field(default=\"\")\n\n    def __json__(self):\n        return ujson.dumps(\n            {\n                \"name\": self.user.name,\n                \"age\": self.age,\n                \"email\": self.email,\n            }\n        )\n\n\nasync def fake_request_to_db(body):\n    today = date.today()\n    email = f'{body[\"name\"]}@something.com'.lower()\n    difference = today - date.fromisoformat(body[\"birthday\"])\n    age = int(difference.days / 365)\n    return UserProfile(\n        User(body[\"name\"]),\n        age=age,\n        email=email,\n    )\n\n\nasync def compile_profile(request: Request):\n    await request.receive_body()\n    profile = await fake_request_to_db(request.json)\n    return profile\n\n\napp.ext.add_dependency(UserProfile, compile_profile)\n\n\n@app.patch(\"/profile\")\nasync def update_profile(request, profile: UserProfile):\n    return json(profile)\n```\n\n----------------------------------------\n\nTITLE: HTML Generation Using html5tagger in Sanic\nDESCRIPTION: Demonstrates creating HTML documents programmatically using the html5tagger package, which is now included with Sanic. The example shows how to build a complete HTML page with tables, links, and formatting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom html5tagger import Document\nfrom sanic import Request, Sanic, html\n\napp = Sanic(\"TestApp\")\n\n\n@app.get(\"/\")\nasync def handler(request: Request):\n    doc = Document(\"My Website\")\n    doc.h1(\"Hello, world.\")\n    with doc.table(id=\"data\"):\n        doc.tr.th(\"First\").th(\"Second\").th(\"Third\")\n        doc.tr.td(1).td(2).td(3)\n    doc.p(class_=\"text\")(\"A paragraph with \")\n    doc.a(href=\"/files\")(\"a link\")(\" and \").em(\"formatting\")\n    return html(doc)\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>My Website</title>\n<h1>Hello, world.</h1>\n<table id=data>\n    <tr>\n        <th>First\n        <th>Second\n        <th>Third\n    <tr>\n        <td>1\n        <td>2\n        <td>3\n</table>\n<p class=text>\n    A paragraph with <a href=\"/files\">a link</a> and <em>formatting</em>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class in Python for Sanic\nDESCRIPTION: Demonstrates how to create a custom exception class that inherits from SanicException, setting a status code and a static message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Context Queue\nDESCRIPTION: Example of creating a shared Queue object in the main process and attaching it to the shared context.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Sanic Class-Based Views\nDESCRIPTION: This snippet shows how to use path parameters in a Sanic class-based view. It demonstrates defining a method that accepts a path parameter and how to add the view to a route with a parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NameView(HTTPMethodView):\n\n  def get(self, request, name):\n    return text(\"Hello {}\".format(name))\n\napp.add_route(NameView.as_view(), \"/<name>\")\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Class-Based Views in Sanic\nDESCRIPTION: This snippet shows how to generate URLs for class-based views in Sanic. It demonstrates creating a route that redirects to a class-based view using the url_for method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef index(request):\n    url = app.url_for(\"SpecialClassView\")\n    return redirect(url)\n\n\nclass SpecialClassView(HTTPMethodView):\n    def get(self, request):\n        return text(\"Hello from the Special Class View!\")\n\n\napp.add_route(SpecialClassView.as_view(), \"/special_class_view\")\n```\n\n----------------------------------------\n\nTITLE: Maximizing Worker Processes in Sanic\nDESCRIPTION: Shows how to run a Sanic application with the maximum allowed number of worker processes using the fast parameter, which optimizes for performance in multi-core environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.run(fast=True)\n```\n\n----------------------------------------\n\nTITLE: Returning Plain Text Response in Sanic (Python)\nDESCRIPTION: Shows how to use the text() convenience method to return a plain text response with UTF-8 encoding.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import text\n\n@app.route(\"/\")\nasync def handler(request):\n    return text(\"Hi 😎\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiprocessing Queue\nDESCRIPTION: Shows how to properly create and use multiprocessing synchronization primitives with the new early start method setting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with Sanic Application\nDESCRIPTION: Shows how to create and use a custom configuration object that subclasses sanic.config.Config with a Sanic application instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CustomConfig(Config):\n    ...\n\nconfig = CustomConfig()\napp = Sanic(\"custom\", config=config)\nassert isinstance(app.config, CustomConfig)\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Redirects in Sanic (Python)\nDESCRIPTION: This snippet demonstrates how to set up static redirects in a Sanic application. It uses a dictionary to define redirects, creates a custom function to handle redirects, and sets up routes for both redirects and static files.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/static-redirects.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n### SETUP ###\nimport typing\nimport sanic, sanic.response\n\n# Create the Sanic app\napp = sanic.Sanic(__name__)\n\n# This dictionary represents your \"static\"\n# redirects. For example, these values\n# could be pulled from a configuration file.\nREDIRECTS = {\n    '/':'/hello_world',                     # Redirect '/' to '/hello_world'\n    '/hello_world':'/hello_world.html'      # Redirect '/hello_world' to 'hello_world.html'\n}\n\n# This function will return another function\n# that will return the configured value\n# regardless of the arguments passed to it.\ndef get_static_function(value:typing.Any) -> typing.Callable[..., typing.Any]:\n    return lambda *_, **__: value\n\n### ROUTING ###\n# Iterate through the redirects\nfor src, dest in REDIRECTS.items():                            \n    # Create the redirect response object         \n    response:sanic.HTTPResponse = sanic.response.redirect(dest)\n\n    # Create the handler function. Typically,\n    # only a sanic.Request object is passed\n    # to the function. This object will be \n    # ignored.\n    handler = get_static_function(response)\n\n    # Route the src path to the handler\n    app.route(src)(handler)\n\n# Route some file and client resources\napp.static('/files/', 'files')\napp.static('/', 'client')\n\n### RUN ###\nif __name__ == '__main__':\n    app.run(\n        '127.0.0.1',\n        10000\n    )\n```\n\n----------------------------------------\n\nTITLE: Route Method Specification\nDESCRIPTION: Shows how to specify HTTP methods for a route using the methods parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.add_route(\n    handler,\n    '/test',\n    methods=[\"POST\", \"PUT\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to All Methods in Class-Based Views with Sanic\nDESCRIPTION: This snippet shows how to apply decorators to all methods in a class-based view using Sanic. It demonstrates using the 'decorators' class variable to specify decorators that will be applied to all HTTP methods in the view.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithDecorator(HTTPMethodView):\n  decorators = [some_decorator_here]\n\n  def get(self, request, name):\n    return text(\"Hello I have a decorator\")\n\n  def post(self, request, name):\n    return text(\"Hello I also have a decorator\")\n\napp.add_route(ViewWithDecorator.as_view(), \"/url\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Reload Directories\nDESCRIPTION: Shows how to configure Sanic to watch additional directories for file changes when using debug or auto-reload features.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsanic ... --reload-dir=/path/to/foo --reload-dir=/path/to/bar\n```\n\n----------------------------------------\n\nTITLE: Creating Named Background Task in Sanic\nDESCRIPTION: Demonstrates how to create a named background task in Sanic for easier tracking and management. This feature is available in Python 3.8 and above.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(slow_work, name=\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Blueprint Configuration with Strict Slashes in Sanic\nDESCRIPTION: Demonstrates how to create and configure blueprints in Sanic with strict slashes settings. Shows both single blueprint creation and group configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(__file__, strict_slashes=True)\n\n@bp.get(\"/bp/get\", strict_slashes=False)\ndef handler(request):\n    return text(\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Named Static Route Configuration in Sanic\nDESCRIPTION: Demonstrates how to create a named static route for serving files from a specific directory.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.static(\n    \"/user/uploads\",\n    \"/path/to/uploads\",\n    name=\"uploads\",\n)\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Response in Sanic (Python)\nDESCRIPTION: Demonstrates using the html() convenience method to return an HTML document response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import html\n\n@app.route(\"/\")\nasync def handler(request):\n    return html('<!DOCTYPE html><html lang=\"en\"><meta charset=\"UTF-8\"><div>Hi 😎</div>')\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Streaming with HTTPMethodView in Sanic\nDESCRIPTION: This snippet demonstrates how to enable request streaming on an endpoint using the @stream decorator with an HTTPMethodView. It reads the request body in chunks and concatenates them.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import stream\n\nclass SimpleView(HTTPMethodView):\n    @stream\n    async def post(self, request):\n        result = \"\"\n        while True:\n            body = await request.stream.read()\n            if body is None:\n                break\n            result += body.decode(\"utf-8\")\n        return text(result)\n```\n\n----------------------------------------\n\nTITLE: Starting Docker and Sanic Server\nDESCRIPTION: Commands to start the Docker container and run the Sanic application on port 9999.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/mounting.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n$ sanic server.app --port=9999 --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Development Server in Python\nDESCRIPTION: Demonstrates how to run the built-in Sanic development server. This server is suitable for development and debugging purposes but not recommended for production use.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/server-choice.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.run(host=\"0.0.0.0\", port=8000, debug=True)\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication with cURL Commands\nDESCRIPTION: A series of curl commands demonstrating the JWT authentication flow. Shows unauthorized access, token acquisition, successful access with a valid token, and failed access with an invalid token.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/authentication.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:9999/secret -i\nHTTP/1.1 401 Unauthorized\ncontent-length: 21\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nYou are unauthorized.\n\n$ curl localhost:9999/login -X POST                                                                                                                                                                               7 ↵\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE\n\n$ curl localhost:9999/secret -i -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE\"\nHTTP/1.1 200 OK\ncontent-length: 29\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nTo go fast, you must be fast.\n\n$ curl localhost:9999/secret -i -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.BAD\"                                        \nHTTP/1.1 401 Unauthorized\ncontent-length: 21\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nYou are unauthorized.\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tasks in Sanic (Python 3.8+)\nDESCRIPTION: Example of creating a named task in Sanic, which allows for later reference and management of the task.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(slow_work, name=\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for Sanic Application\nDESCRIPTION: Shell command to build a Docker image from the Dockerfile in the current directory, tagging it as 'my-sanic-image'.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t my-sanic-image .\n```\n\n----------------------------------------\n\nTITLE: Creating a Blueprint with a Listener (Python)\nDESCRIPTION: This snippet demonstrates how to create a Sanic blueprint with an after_server_start listener. It's an example of a component that would be autodiscovered by the main application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/autodiscovery.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Blueprint\nfrom sanic.log import logger\n\nlevel1 = Blueprint(\"level1\")\n\n\n@level1.after_server_start\ndef print_something(app, loop):\n    logger.debug(\"something @ level1\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Versioning in Sanic\nDESCRIPTION: Demonstrates how to add version numbers directly to individual routes in Sanic. This allows for different versions of the same endpoint to coexist.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/versioning.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /v1/text\n@app.route(\"/text\", version=1)\ndef handle_request(request):\n    return response.text(\"Hello world! Version 1\")\n\n# /v2/text\n@app.route(\"/text\", version=2)\ndef handle_request(request):\n    return response.text(\"Hello world! Version 2\")\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Decorators for Class-Based Views\nDESCRIPTION: Demonstrates how to use the @staticmethod decorator with Sanic class-based views. This approach shows organizing related routes within a class structure while maintaining HTTP method handlers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/decorators.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserHandler:\n    @staticmethod\n    @app.get(\"/user/<user_id:int>\")\n    async def get_user(request, user_id):\n        ...\n\n    @staticmethod\n    @app.post(\"/user\")\n    async def create_user(request):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Hybrid Approach for Rendering Jinja Templates in Sanic\nDESCRIPTION: Demonstrates a hybrid approach using both a decorator and the render function. This method combines performance benefits with flexibility in response creation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\n\n@app.get(\"/\")\n@app.ext.template(\"foo.html\")\nasync def handler(request: Request):\n    return await render(context={\"seq\": [\"five\", \"six\"]}, status=400)\n```\n\n----------------------------------------\n\nTITLE: File Extension Path Parameter Implementation\nDESCRIPTION: Shows usage of the new file extension path parameter type for handling dynamic file routes. Demonstrates basic and advanced pattern matching for file extensions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<filename:ext>\")\nasync def handler(request, filename, ext):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<filename=int:ext=jpg>\")\nasync def handler(request, filename, ext):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Sanic Project Structure in Python\nDESCRIPTION: This code block illustrates the recommended directory structure for a Sanic project. It shows the main application file, configuration directory, and other essential components.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/org/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_sanic_app/\n├── app.py\n├── config/\n│   ├── development.py\n│   ├── production.py\n│   └── staging.py\n├── models/\n├── routes/\n├── services/\n├── static/\n└── templates/\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Python File (Python)\nDESCRIPTION: Shows how to load configuration values from a Python file using the update_config method in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# my_config.py\nA = 1\nB = 2\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> app.update_config(\"/path/to/my_config.py\")\n>>> print(app.config.A)\n1\n```\n\n----------------------------------------\n\nTITLE: Event Naming Pattern in Sanic Signals\nDESCRIPTION: Shows the required pattern for event names in Sanic signals. Events must have three parts in a namespace.reference.action format.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnamespace.reference.action\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Sanic\nDESCRIPTION: Demonstrates two methods for cookie deletion: using delete_cookie() for immediate expiration and setting a short max_age for timed expiration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/cookies.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"Time to eat some cookies muahaha\")\n\n    # This cookie will be set to expire in 0 seconds\n    response.delete_cookie(\"eat_me\")\n\n    # This cookie will self destruct in 5 seconds\n    response.add_cookie(\"fast_bake\", \"Be quick!\", max_age=5)\n\n    return response\n```\n\n----------------------------------------\n\nTITLE: Purging Completed or Cancelled Tasks\nDESCRIPTION: Example of using app.purge_tasks() to clean up completed or cancelled tasks from the app.tasks registry.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in Sanic Decorators\nDESCRIPTION: Shows how to use request.ctx in custom decorators to share data between decorators and handlers. The example allows for injecting information into the request object that can be accessed later.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/decorators.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef extract_user(request):\n    request.ctx.user = get_user_by_token(request.token)\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json(request.ctx.user)\n```\n\n----------------------------------------\n\nTITLE: Rendering Jinja Template as Return Object in Sanic\nDESCRIPTION: Shows how to render a Jinja template by returning an HTTPResponse object. This method allows for more customization of the response, including headers and cookies.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\n\n@app.get(\"/alt\")\nasync def handler(request: Request):\n    return await render(\n        \"foo.html\", context={\"seq\": [\"three\", \"four\"]}, status=400\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Echo Handler with Iteration\nDESCRIPTION: Demonstrates how to use the new iterable WebSocket object to handle WebSocket messages\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/ws\")\nasync def ws_echo_handler(request: Request, ws: Websocket):\n    async for msg in ws:\n        await ws.send(msg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Slashes for Specific Routes in Sanic\nDESCRIPTION: Demonstrates how to override the strict slash matching configuration for a specific route. This allows for customizing the slash matching behavior on individual endpoints.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# 为指定的路由启用严格匹配模式\n@app.get(\"/get\", strict_slashes=False)\ndef handler(request):\n    return text(\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Strict Slashes Configuration\nDESCRIPTION: Shows various ways to configure strict slash matching at different levels of the application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# provide default strict_slashes value for all routes\napp = Sanic(__file__, strict_slashes=True)\n\n# overwrite strict_slashes value for specific route\n@app.get(\"/get\", strict_slashes=False)\ndef handler(request):\n    return text(\"OK\")\n\n# it also works for blueprints\nbp = Blueprint(__file__, strict_slashes=True)\n\n@bp.get(\"/bp/get\", strict_slashes=False)\ndef handler(request):\n    return text(\"OK\")\n\nbp1 = Blueprint(name=\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\n    name=\"bp2\",\n    url_prefix=\"/bp2\",\n    strict_slashes=False,\n)\n\n# This will enforce strict slashes check on the routes\n# under bp1 but ignore bp2 as that has an explicitly\n# set the strict slashes check to false\ngroup = Blueprint.group([bp1, bp2], strict_slashes=True)\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-TRACE Endpoints in Sanic Extensions\nDESCRIPTION: This snippet demonstrates how to enable automatic creation of TRACE endpoints using Sanic Extensions' Config class.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Extend, Config\n\napp.extend(config=Config(http_auto_trace=True))\n```\n\n----------------------------------------\n\nTITLE: WebSocket Route Decorator\nDESCRIPTION: Demonstrates WebSocket route definition using the decorator syntax.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/test\")\nasync def handler(request, ws):\n    message = \"Start\"\n    while True:\n        await ws.send(message)\n        message = await ws.recv()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronous Handler with Simulated Processing Time in Python\nDESCRIPTION: This snippet shows a synchronous handler that uses time.sleep() to simulate processing time. It demonstrates how blocking operations can affect performance in a synchronous context.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/handlers.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/sync\")\ndef sync_handler(request):\n    time.sleep(0.1)\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Multiple Workers\nDESCRIPTION: Command to run Sanic with multiple worker processes to handle higher traffic loads. This example specifies 4 worker processes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --workers=4\n```\n\n----------------------------------------\n\nTITLE: Rendering Jinja Template with Sanic Decorator\nDESCRIPTION: Demonstrates using a Sanic decorator to pre-load and render a Jinja template file. This method is optimal for performance as templates are predefined at startup.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@app.ext.template(\"foo.html\")\nasync def handler(request: Request):\n    return {\"seq\": [\"one\", \"two\"]}\n```\n\n----------------------------------------\n\nTITLE: Using Signal Event Auto-Registration\nDESCRIPTION: Demonstrates how to use the auto-registration feature for signal events, which allows awaiting any signal event even if it hasn't been previously defined.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"do.something.start\")\nasync def signal_handler():\n    await do_something()\n    await app.dispatch(\"do.something.complete\")\n\n# somethere else in your app:\nawait app.event(\"do.something.complete\")\n```\n\n----------------------------------------\n\nTITLE: Running an HTTP Redirect Server Alongside Main HTTPS Server in Sanic\nDESCRIPTION: Code that starts an HTTP redirect server from within the main Sanic application. This approach allows managing both servers from the same process and ensures proper shutdown of the redirect server when the main app stops.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# app == Your main application\n# redirect == Your http_redir application\n@app.before_server_start\nasync def start(app, _):\n    app.ctx.redirect = await redirect.create_server(\n        port=80, return_asyncio_server=True\n    )\n    app.add_task(runner(redirect, app.ctx.redirect))\n\n\n@app.before_server_stop\nasync def stop(app, _):\n    await app.ctx.redirect.close()\n\n\nasync def runner(app, app_server):\n    app.is_running = True\n    try:\n        app.signalize()\n        app.finalize()\n        await app_server.serve_forever()\n    finally:\n        app.is_running = False\n        app.is_stopping = True\n```\n\n----------------------------------------\n\nTITLE: WebSocket Route Decorator\nDESCRIPTION: Demonstrates WebSocket route definition using the decorator syntax.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/test\")\nasync def handler(request, ws):\n    message = \"Start\"\n    while True:\n        await ws.send(message)\n        message = await ws.recv()\n```\n\n----------------------------------------\n\nTITLE: Using Sanic Inspector from Command Line\nDESCRIPTION: This snippet shows how to use the Sanic Inspector to check on running applications and issue commands like scaling workers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/README.md#2025-04-10_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect\n\nsanic inspect scale 4\n```\n\n----------------------------------------\n\nTITLE: HTTP to HTTPS Redirection Server\nDESCRIPTION: Implements a redirection server to handle HTTP to HTTPS redirects while supporting ACME certificate verification.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, exceptions, response\n\napp = Sanic(\"http_redir\")\n\n# Serve ACME/certbot files without HTTPS, for certificate renewals\napp.static(\"/.well-known\", \"/var/www/.well-known\", resource_type=\"dir\")\n\n@app.exception(exceptions.NotFound, exceptions.MethodNotSupported)\ndef redirect_everything_else(request, exception):\n    server, path = request.server_name, request.path\n    if server and path.startswith(\"/\"):\n        return response.redirect(f\"https://{server}{path}\", status=308)\n    return response.text(\"Bad Request. Please use HTTPS!\", status=400)\n```\n\n----------------------------------------\n\nTITLE: Advanced SSL Configuration with Dictionary\nDESCRIPTION: Shows how to configure SSL using a dictionary with explicit certificate and key paths, including optional password for encrypted keys.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nssl = {\n    \"cert\": \"/path/to/fullchain.pem\",\n    \"key\": \"/path/to/privkey.pem\",\n    \"password\": \"for encrypted privkey file\",   # Optional\n}\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Custom SSL Context Configuration\nDESCRIPTION: Demonstrates setting up a custom SSL context for more granular control over security settings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(\"certs/fullchain.pem\", \"certs/privkey.pem\")\n\napp.run(host=\"0.0.0.0\", port=8443, ssl=context)\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Documentation\nDESCRIPTION: Examples of using the @openapi.exclude decorator to exclude either a specific route or an entire Blueprint from OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@openapi.exclude()\n```\n\nLANGUAGE: python\nCODE:\n```\nopenapi.exclude(bp=some_blueprint)\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Methods as Enum Values\nDESCRIPTION: Shows how to use the new HTTPMethod enum for defining route methods, which can be used interchangeably with strings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, HTTPMethod\n\n@app.route(\"/\", methods=[\"post\", \"PUT\", HTTPMethod.PATCH])\nasync def handler(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced SSL Configuration with Dictionary\nDESCRIPTION: Shows how to configure SSL using a dictionary with explicit certificate and key paths, including optional password for encrypted keys.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nssl = {\n    \"cert\": \"/path/to/fullchain.pem\",\n    \"key\": \"/path/to/privkey.pem\",\n    \"password\": \"for encrypted privkey file\",   # Optional\n}\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Multiple Named Static Routes in Sanic\nDESCRIPTION: Shows best practice for setting up multiple static routes with distinct names to avoid potential bugs. Named static routes are recommended when defining multiple static file locations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_26\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/user/uploads\", \"/path/to/uploads\", name=\"uploads\")\napp.static(\"/user/profile\", \"/path/to/profile\", name=\"profile_pics\")\n```\n\n----------------------------------------\n\nTITLE: Integrated HTTP Redirect Server\nDESCRIPTION: Shows how to integrate HTTP redirect server within the main application using lifecycle hooks.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def start(app, _):\n    app.ctx.redirect = await redirect.create_server(\n        port=80, return_asyncio_server=True\n    )\n    app.add_task(runner(redirect, app.ctx.redirect))\n\n\n@app.before_server_stop\nasync def stop(app, _):\n    await app.ctx.redirect.close()\n\n\nasync def runner(app, app_server):\n    app.is_running = True\n    try:\n        app.signalize()\n        app.finalize()\n        app.state.is_started = True\n        await app_server.serve_forever()\n    finally:\n        app.is_running = False\n        app.is_stopping = True\n```\n\n----------------------------------------\n\nTITLE: Customizing Environment Variable Prefix in Sanic (Bash and Python)\nDESCRIPTION: Shows how to change the prefix for environment variables that Sanic recognizes for configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export MYAPP_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> app = Sanic(__name__, env_prefix='MYAPP_')\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Decorators with Sanic Routes\nDESCRIPTION: Demonstrates how to apply OpenAPI decorators to a Sanic route handler. The Sanic route decorator should be the outermost decorator, followed by one or more OpenAPI decorators.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import openapi\n\n\n@app.get(\"/path/to/<something>\")\n@openapi.summary(\"This is a summary\")\n@openapi.description(\"This is a description\")\nasync def handler(request, something: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Request with Request.get_current()\nDESCRIPTION: Python code demonstrating the new API for retrieving the current request when outside of a request handler, similar to how Sanic.get_app() works for applications.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request\n\nRequest.get_current()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Background Task in Sanic\nDESCRIPTION: Shows how to retrieve a previously created named task using the get_task method in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask = app.get_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Sanic\nDESCRIPTION: This snippet shows how to handle validation errors in Sanic by creating a custom error handler. It catches ValidationError exceptions and returns a JSON response with error details.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/validation.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import SanicException\nfrom sanic_ext.exceptions import ValidationError\n\n@app.exception(ValidationError)\nasync def validation_error(request, exc):\n    return json({\"error\": str(exc)}), 400\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler in Sanic\nDESCRIPTION: Shows how to implement a custom error handler by subclassing Sanic's default ErrorHandler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.handlers import ErrorHandler\n\nclass CustomErrorHandler(ErrorHandler):\n    def default(self, request: Request, exception: Exception) -> HTTPResponse:\n        ''' handles errors that have no error handlers assigned '''\n        # You custom error handling logic...\n        status_code = getattr(exception, \"status_code\", 500)\n        return json({\n          \"error\": str(exception),\n          \"foo\": \"bar\"\n        }, status=status_code)\n\napp.error_handler = CustomErrorHandler()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sanic Application from Registry\nDESCRIPTION: Demonstrates how to retrieve a Sanic instance from the application registry using the app name.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\napp = Sanic(\"my_awesome_server\")\n\n# ./path/to/somewhere_else.py\nfrom sanic import Sanic\n\napp = Sanic.get_app(\"my_awesome_server\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Signal with Decorator in Sanic\nDESCRIPTION: Demonstrates the more convenient decorator approach to register a signal handler. This method is more concise and follows a pattern similar to route registration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"something.happened.ohmy\")\nasync def my_signal_handler():\n    print(\"something happened\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Application for OpenAPI Documentation\nDESCRIPTION: This snippet shows the basic setup for a Sanic application. With Sanic Extensions, this is all that's needed to automatically generate OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/basic.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\napp = Sanic(\"MyApp\")\n\n# Add all of your views\n```\n\n----------------------------------------\n\nTITLE: Legacy Cookie Setting Pattern in Sanic\nDESCRIPTION: Shows the old, unintuitive way of setting cookies and their attributes in Sanic responses, which has been deprecated in favor of a more convenient method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"There's a cookie up in this response\")\nresponse.cookies[\"test\"] = \"It worked!\"\nresponse.cookies[\"test\"][\"domain\"] = \".yummy-yummy-cookie.com\"\nresponse.cookies[\"test\"][\"httponly\"] = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Server with Custom Worker Class\nDESCRIPTION: This snippet demonstrates how to configure the Sanic server with a custom worker class. It shows setting the worker class to 'uvicorn' and specifying the number of workers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/server-choice.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.run(host='0.0.0.0', port=1337, workers=4, fast=True)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Listeners Implementation\nDESCRIPTION: Shows how to add server lifecycle listeners to a Blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@bp.listener(\"before_server_start\")\nasync def before_server_start(app, loop):\n    ...\n\n@bp.listener(\"after_server_stop\")\nasync def after_server_stop(app, loop):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing a Typed Application Instance in Request Handlers\nDESCRIPTION: This example shows how to create a custom request type to access a fully typed application instance in request handlers. It uses type aliases to specify the application type in the request type annotation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request\nfrom myapp.types import MyApp\nfrom types import SimpleNamespace\n\ndef add_routes(app: MyApp):\n    @app.get(\"/\")\n    async def handler(request: Request[MyApp, SimpleNamespace]):\n        # do something with your fully typed app instance\n        results = await request.app.ctx.db.query(\"SELECT * FROM foo\")\n```\n\n----------------------------------------\n\nTITLE: Using Signal Event Enum in Sanic\nDESCRIPTION: Demonstrates using the Event enum for built-in signals, which provides better IDE support and prevents typos when referring to signal names. Added in Sanic v21.12.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.HTTP_LIFECYCLE_COMPLETE)\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI YAML to Docstrings in Sanic\nDESCRIPTION: This example shows how to add valid OpenAPI YAML to a function's docstring for more detailed API documentation. The YAML is introduced with an 'openapi:' line and can include operation ID, tags, parameters, and responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    Now we will add some more details\n\n    openapi:\n    ---\n    operationId: fooDots\n    tags:\n      - one\n      - two\n    parameters:\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        required: false\n        schema:\n          type: integer\n          format: int32\n    responses:\n      '200':\n        description: Just some dots\n    \"\"\"\n    return text(\"...\")\n```\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/foo\": {\n    \"get\": {\n      \"operationId\": \"fooDots\",\n      \"summary\": \"This is a simple foo handler\",\n      \"description\": \"Now we will add some more details\",\n      \"tags\": [\n        \"one\",\n        \"two\"\n      ],\n      \"parameters\": [\n        {\n          \"name\": \"limit\",\n          \"in\": \"query\",\n          \"description\": \"How many items to return at one time (max 100)\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      ],\n      \"responses\": {\n        \"200\": {\n          \"description\": \"Just some dots\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in Request Objects\nDESCRIPTION: Shows three different ways to access cookies in request objects: using the get method, accessing as a property, and retrieving multiple values with getlist.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrequest.cookies.get(\"foo\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest.cookies.foo\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest.cookies.getlist(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Nginx server configuration that sets up a reverse proxy to forward requests from /api/ path to the Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/mounting.md#2025-04-10_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n# conf\nserver {\n    listen 80;\n\n    # Computed data service\n    location /api/ {\n        proxy_pass http://<YOUR IP ADDRESS>:9999/;\n        proxy_set_header Host example.com;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Server with Autodiscovery (Bash)\nDESCRIPTION: This bash command activates a Python virtual environment and runs the Sanic server in debug mode, which will use the autodiscovery setup defined in the server.py file.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/autodiscovery.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n. ./.venv/bin/activate # activate the python venv which sanic is installed in\nsanic sever -d # run this in the directory containing server.py\n```\n\n----------------------------------------\n\nTITLE: Working with Host Headers and URL Construction in Sanic\nDESCRIPTION: Shows how to access effective host information and use it for dynamic URL construction. Demonstrates how server configuration affects the host value and URL generation even when the client makes requests to a different host.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.config.SERVER_NAME = \"https://example.com\"\n\n@app.route(\"/hosts\", name=\"foo\")\nasync def handler(request):\n    return json(\n        {\n            \"effective host\": request.host,\n            \"host header\": request.headers.get(\"host\"),\n            \"forwarded host\": request.forwarded.get(\"host\"),\n            \"you are here\": request.url_for(\"foo\"),\n        }\n    )\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000/hosts\n{\n  \"effective host\": \"example.com\",\n  \"host header\": \"localhost:8000\",\n  \"forwarded host\": null,\n  \"you are here\": \"https://example.com/hosts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Event Parameters in Sanic Signals\nDESCRIPTION: Demonstrates how to use dynamic parameters in signal event names, similar to path parameters in routes. This allows extracting values from the event name into handler parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def signal_handler(thing):\n    print(f\"[signal_handler] {thing=}\")\n\n@app.get(\"/\")\nasync def trigger(request):\n    await app.dispatch(\"foo.bar.baz\")\n    return response.text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation from Docstrings in Sanic\nDESCRIPTION: This snippet demonstrates how a function's docstring is used to create the summary and description in the auto-generated API documentation. The first line becomes the summary, and the rest becomes the description.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    It is helpful to know that you could also use **markdown** inside your\n    docstrings.\n\n    - one\n    - two\n    - three\"\"\"\n    return text(\">>>\")\n```\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/foo\": {\n    \"get\": {\n      \"summary\": \"This is a simple foo handler\",\n      \"description\": \"It is helpful to know that you could also use **markdown** inside your<br>docstrings.<br><br>- one<br>- two<br>- three\",\n      \"responses\": {\n        \"default\": {\n          \"description\": \"OK\"\n        }\n      },\n      \"operationId\": \"get_handler\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raising Server Error with Custom Headers\nDESCRIPTION: Shows how to raise a ServerError exception with custom headers, demonstrating the more consistent and powerful exception handling in Sanic 23.3.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nraise ServerError(headers={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Types in Sanic\nDESCRIPTION: Lists and describes the different parameter types available for route parameters in Sanic. These types allow for automatic type conversion and validation of URL parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# string\n# Matches any non-slash text, the default type if none is specified\napp.route(\"/path/to/<name>\")\napp.route(\"/path/to/<name:string>\")\n\n# int\n# Matches any integer\napp.route(\"/path/to/<page:int>\")\n\n# number\n# Matches any number; float or integer\napp.route(\"/path/to/<weight:number>\")\n\n# alpha\n# Matches alphanumeric characters\napp.route(\"/path/to/<name:alpha>\")\n\n# path\n# Matches anything, including slashes, up until the next slash or end of path\napp.route(\"/path/to/<filename:path>\")\n\n# uuid\n# Matches a valid UUID string\napp.route(\"/path/to/<uuid:uuid>\")\n\n# regex\n# Matches based upon a custom regex pattern\napp.route(\"/path/to/<param:regex([a-z]{3})>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Mayim Dependencies for Sanic\nDESCRIPTION: Installation commands for Sanic extension and Mayim with PostgreSQL support.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install sanic-ext\npip install mayim[postgres]\n```\n\n----------------------------------------\n\nTITLE: Waiting for Events in Sanic Signals\nDESCRIPTION: Shows how to wait for a signal event to be triggered. This enables creating event-driven coordination between different parts of an application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait app.event(\"foo.bar.baz\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Logger in Sanic\nDESCRIPTION: This snippet shows how to enable the background logger in Sanic. By default, the background logger is disabled, and you need to explicitly opt-in by setting the LOGGING configuration to True.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/logger.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.LOGGING = True\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-domain Configuration with Name Restrictions\nDESCRIPTION: Demonstrates how to configure TLS with specific domain name restrictions and fallback prevention.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nssl = [\n    None,  # No fallback if names do not match!\n    {\n        \"cert\": \"certs/example.com/fullchain.pem\",\n        \"key\": \"certs/example.com/privkey.pem\",\n        \"names\": [\"example.com\", \"*.bigcorp.test\"],\n    }\n]\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Route-Level CORS Override in Sanic\nDESCRIPTION: Shows how to override app-wide CORS settings for a specific route using the @sanic_ext.cors() decorator. This example sets a different origin for a particular endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/cors.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import cors\n\napp.config.CORS_ORIGINS = \"https://foo.com\"\n\n\n@app.get(\"/\", host=\"bar.com\")\n@cors(origins=\"https://bar.com\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Inspector\nDESCRIPTION: Shows how to configure TLS encryption for the Inspector in production environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_TLS_CERT = \"/path/to/cert.pem\"\napp.config.INSPECTOR_TLS_KEY = \"/path/to/key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with TLS Support\nDESCRIPTION: This snippet shows how to start a Sanic server with TLS support using command line arguments for certificate and key files.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --cert=/path/to/bundle.crt --key=/path/to/privkey.pem\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Listener (Python)\nDESCRIPTION: This snippet shows how to define a global listener for the Sanic application. It retrieves the app instance and attaches an after_server_start listener to it.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/autodiscovery.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.log import logger\n\napp = Sanic.get_app(\"auto\")\n\n\n@app.after_server_start\ndef print_something(app, loop):\n    logger.debug(\"something\")\n```\n\n----------------------------------------\n\nTITLE: Using str and float Path Parameter Types in Sanic Routes\nDESCRIPTION: Example of using the new string and float path parameter types instead of the deprecated string and number types. This pattern should be used for route parameters going forward.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/<foo:str>/<bar:float>\")\nasync def handler(request, foo: str, bar: float):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Correct Generic Type Usage in Sanic Dependency Injection\nDESCRIPTION: Example showing the correct way to use generic types with explicit type definition for dependency injection. Creates a singleton instance and properly registers it with the specific type.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom sanic import Sanic, text\n\nT = typing.TypeVar(\"T\")\n\n\nclass Test(typing.Generic[T]):\n    test: T\n\n\napp = Sanic(\"testapp\")\n_singleton = Test()\napp.ext.add_dependency(Test[str], lambda: _singleton)\n\n\n@app.get(\"/\")\ndef test(request, test: Test[str]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using SSL Context for Advanced TLS Configuration in Sanic\nDESCRIPTION: Shows how to create and configure an SSL context for more control over security settings like cipher algorithms. This approach allows customizing which security algorithms are permitted.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(\"certs/fullchain.pem\", \"certs/privkey.pem\")\n\napp.run(host=\"0.0.0.0\", port=8443, ssl=context)\n```\n\n----------------------------------------\n\nTITLE: URL Generation with Query Parameters\nDESCRIPTION: Shows how to generate URLs with query parameters using arbitrary keyword arguments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nassert app.url_for(\n    \"post_handler\",\n    post_id=5,\n    arg_one=\"one\",\n    arg_two=\"two\",\n) == \"/posts/5?arg_one=one&arg_two=two\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy ORM Models\nDESCRIPTION: Example of defining SQLAlchemy ORM models for Person and Car entities with relationships.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom sqlalchemy import INTEGER, Column, ForeignKey, String\nfrom sqlalchemy.orm import declarative_base, relationship\n\nBase = declarative_base()\n\n\nclass BaseModel(Base):\n    __abstract__ = True\n    id = Column(INTEGER(), primary_key=True)\n\n\nclass Person(BaseModel):\n    __tablename__ = \"person\"\n    name = Column(String())\n    cars = relationship(\"Car\")\n\n    def to_dict(self):\n        return {\"name\": self.name, \"cars\": [{\"brand\": car.brand} for car in self.cars]}\n\n\nclass Car(BaseModel):\n    __tablename__ = \"car\"\n\n    brand = Column(String())\n    user_id = Column(ForeignKey(\"person.id\"))\n    user = relationship(\"Person\", back_populates=\"cars\")\n```\n\n----------------------------------------\n\nTITLE: Using Slug Path Parameter Type in Sanic Routes\nDESCRIPTION: Example of defining a route with the new slug path parameter type, which must consist of lowercase letters or digits and may contain hyphens that aren't the first character.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/articles/<article_slug:slug>\")\nasync def article(request, article_slug: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Generic Type Usage in Sanic Dependency Injection\nDESCRIPTION: Example demonstrating incorrect usage of generic types in Sanic's dependency injection system. Shows why directly using Test[str] without proper definition fails.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom sanic import Sanic, text\n\nT = typing.TypeVar(\"T\")\n\n\nclass Test(typing.Generic[T]):\n    test: T\n\n\napp = Sanic(\"testapp\")\napp.ext.dependency(Test())\n\n\n@app.get(\"/\")\ndef test(request, test: Test[str]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Automatic TLS in Debug Mode (CLI)\nDESCRIPTION: Command line instruction to start a Sanic server with automatic TLS certificate generation in debug mode. This feature works with either mkcert or trustme packages.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --auto-tls --debug\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Sanic (Python)\nDESCRIPTION: Shows how to use the redirect() method to send a 302 response for client redirection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import redirect\n\n@app.route(\"/\")\nasync def handler(request):\n    return redirect(\"/login\")\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration with Environment Variables (Bash and Python)\nDESCRIPTION: Demonstrates how to use environment variables in the path when loading configuration from a file in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ export my_path=\"/path/to\"\n```\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(\"${my_path}/my_config.py\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Universal Exception Handler\nDESCRIPTION: Example of using the new universal exception signal handler for catching all server exceptions using the signal decorator pattern.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.SERVER_LIFECYCLE_EXCEPTION)\nasync def catch_any_exception(app: Sanic, exception: Exception):\n    app.ctx.my_error_reporter_utility.error(exception)\n```\n\n----------------------------------------\n\nTITLE: Accessing IP Addresses in Request Objects\nDESCRIPTION: Demonstrates the different ways to access IP address information from a request, including the new client_ip accessor that provides an \"unwrapped\" version of IPv6 addresses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"request.ip\": request.ip,\n            \"request.conn_info.client\": request.conn_info.client,\n            \"request.conn_info.client_ip\": request.conn_info.client_ip,\n        }\n    )\n\n\napp.run(sock=my_ipv6_sock)\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Constructor Injection\nDESCRIPTION: Shows how to inject dependencies without requiring the Request object, useful for services or database connections.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Alpha:\n    ...\n\n\nclass Beta:\n    def __init__(self, alpha: Alpha) -> None:\n        self.alpha = alpha\n\napp.ext.add_dependency(Alpha)\napp.ext.add_dependency(Beta)\n\n@app.get(\"/beta\")\nasync def handler(request: Request, beta: Beta):\n    assert isinstance(beta.alpha, Alpha)\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code with Fixed Serializer in Sanic\nDESCRIPTION: Using the @serializer decorator with a specified HTTP status code (202) for a POST route. This allows for standardized response formatting with custom status codes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/convenience.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n\n@app.post(\"/\")\n@serializer(text, status=202)\nasync def create_something(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Force Creating Non-Existing Sanic Application\nDESCRIPTION: Shows how to force create a new Sanic instance when retrieving a non-existing application from the registry.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/app.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic.get_app(\n    \"non-existing\",\n    force_create=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible Decorator With Optional Arguments in Sanic\nDESCRIPTION: Template for a decorator that can be used both with and without arguments. This pattern provides maximum flexibility in how the decorator can be applied.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(maybe_func=None, *, arg1=None, arg2=None):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator(maybe_func) if maybe_func else decorator\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Cookies in Sanic Python\nDESCRIPTION: Illustrates the correct way to access request cookies in Sanic v24.3 and later. The __getitem__ method will return a list of values, while get and getlist methods provide backwards compatibility.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nassert request.cookies[\"foo\"] == [\"bar\"]\nassert request.cookies.get(\"foo\") == \"bar\"\nassert request.cookies.getlist(\"foo\") == [\"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context Object with Sanic Application\nDESCRIPTION: Demonstrates how to provide a custom context object to a Sanic application, which can be any object with no restrictions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomContext:\n    ...\n\nctx = CustomContext()\napp = Sanic(\"custom\", ctx=ctx)\nassert isinstance(app.ctx, CustomContext)\n```\n\n----------------------------------------\n\nTITLE: Advanced Dependency Injection with Person Class\nDESCRIPTION: Demonstrates complex dependency injection with multiple objects and custom constructors. Uses PersonID and Person classes with async create method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass PersonID:\n    person_id: int\n\n\n@dataclass\nclass Person:\n    person_id: PersonID\n    name: str\n    age: int\n\n    @classmethod\n    async def create(cls, request: Request, person_id: int):\n        return cls(person_id=PersonID(person_id), name=\"noname\", age=111)\n\n\n\napp.ext.add_dependency(Person, Person.create)\napp.ext.add_dependency(PersonID)\n\n@app.get(\"/person/<person_id:int>\")\nasync def person_details(\n    request: Request, person_id: PersonID, person: Person\n):\n    return text(f\"{person_id}\\n{person}\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Pydantic Models with OpenAPI Schema\nDESCRIPTION: Example showing how to use Pydantic models with OpenAPI schema generation by passing the model's schema output to the body definition and using validation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, json\nfrom sanic_ext import validate, openapi\nfrom pydantic import BaseModel, Field\n\nclass Test(BaseModel):\n    foo: str = Field(description=\"Foo Description\", example=\"FOOO\")\n    bar: str = \"test\"\n\n\napp = Sanic(\"test\")\n\n@app.get(\"/\")\n@openapi.definition(\n    body={'application/json': Test.schema()},\n)\n@validate(json=Test)\nasync def get(request):\n    return json({})\n```\n\n----------------------------------------\n\nTITLE: Basic Route Definition in Sanic\nDESCRIPTION: Shows how to define a basic HTTP route in Sanic using the @app.route decorator. This example creates a route at '/' that responds to GET requests with a plain text message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.route(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Blueprint Static File Handling\nDESCRIPTION: Demonstrates how to serve static files through a Blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"bp\", url_prefix=\"/bp\")\nbp.static(\"/web/path\", \"/folder/to/serve\")\nbp.static(\"/web/path\", \"/folder/to/server\", name=\"uploads\")\n```\n\n----------------------------------------\n\nTITLE: Defining Tortoise-ORM Model\nDESCRIPTION: Example of defining a Tortoise-ORM model for the Users entity.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom tortoise import Model, fields\n\n\nclass Users(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(50)\n\n    def __str__(self):\n        return f\"I am {self.name}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Loads Function\nDESCRIPTION: Shows how to specify a custom JSON loads function when instantiating a Sanic app\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom json import loads\n\nSanic(\"Test\", loads=loads)\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Error Format in Sanic\nDESCRIPTION: Shows how to explicitly control the exception format for a specific route in Sanic v21.9. This is part of the smarter 'auto' exception formatting feature.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", error_format=\"json\")\nasync def handler(request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Accessing Sanic Health Monitor Diagnostics Endpoint\nDESCRIPTION: This snippet demonstrates the output of the diagnostics endpoint for the Sanic health monitor. It shows the worker state information including PIDs, start times, and restart information.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/health-monitor.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8000/__health__\n{\n    'Sanic-Main': {'pid': 99997},\n    'Sanic-Server-0-0': {\n        'server': True,\n        'state': 'ACKED',\n        'pid': 9999,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 2,\n        'restart_at': datetime.datetime(2022, 10, 1, 0, 0, 12, 861332, tzinfo=datetime.timezone.utc)\n    },\n    'Sanic-Reloader-0': {\n        'server': False,\n        'state': 'STARTED',\n        'pid': 99998,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model Class for OpenAPI Schema\nDESCRIPTION: Example of a simple model class used for OpenAPI schema generation. This shows how a basic typed class structure can be used to define the schema for request bodies and responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserProfile:\n    name: str\n    age: int\n    email: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Reload Process Listener\nDESCRIPTION: Example showing how to implement reload process and main process start listeners in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/listeners.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.reload_process_start\nasync def reload_start(*_):\n    print(\">>>>>> reload_start <<<<<<\")\n\n\n@app.main_process_start\nasync def main_start(*_):\n    print(\">>>>>> main_start <<<<<<\")\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Sanic\nDESCRIPTION: Systemd unit file configuration for running the Sanic application as a service with automatic restart capabilities.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/nginx.md#2025-04-10_snippet_4\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Sanic Example\n\n[Service]\nDynamicUser=Yes\nWorkingDirectory=/srv/sanicservice\nEnvironment=SANIC_PROXY_SECRET=_hostname\nExecStart=sanic proxied_example --port 8001 --fast\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JSON Loads Function\nDESCRIPTION: Demonstrates how to set a custom JSON loads function globally for a Sanic application, using orjson as an example for better performance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import loads\n\napp = Sanic(\"Test\", loads=loads)\n```\n\n----------------------------------------\n\nTITLE: Accessing Accept Header in Sanic Request\nDESCRIPTION: Shows how to access and use the parsed Accept header from a request object in Sanic v21.9. This new feature provides easy access to the client's content-type preferences.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(request.accept)\n# [\"*/*\"]\n\n\"text/plain\" in request.accept\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Sanic Extension\nDESCRIPTION: Simple example showing how to register a custom extension using Extend.register method introduced in Sanic v22.9.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/custom.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Extend, Extension\n\nclass MyCustomExtension(Extension):\n    ...\n\nExtend.register(MyCustomExtension())\n```\n\n----------------------------------------\n\nTITLE: Using Body Decorator for Request Bodies\nDESCRIPTION: Multiple examples of using the @openapi.body decorator to define request body schemas in different formats, including direct model references, dictionaries, and RequestBody objects.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body(UserProfile)\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body({\"application/json\": UserProfile})\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body(RequestBody({\"application/json\": UserProfile}))\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body({\"content\": UserProfile})\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body(RequestBody(UserProfile))\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body({\"application/json\": {\"description\": ...}})\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with pip\nDESCRIPTION: This snippet shows how to install Sanic using pip, the Python package installer. It demonstrates installing Sanic with and without optional dependencies.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic\n\n# To include optional dependencies\npip install \"sanic[ext]\"\n```\n\n----------------------------------------\n\nTITLE: Auto-injecting App into Background Task\nDESCRIPTION: Shows how Sanic automatically injects the app instance into a background task when it's added using app.add_task().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def auto_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(auto_inject)\n```\n\n----------------------------------------\n\nTITLE: Registering Listener Function\nDESCRIPTION: Basic example of registering a listener function for database setup using register_listener method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/listeners.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def setup_db(app):\n    app.ctx.db = await db_setup()\n\napp.register_listener(setup_db, \"before_server_start\")\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP/3 Server in Python\nDESCRIPTION: Python code to start a Sanic application with HTTP/3 support. This requires TLS and the aioquic package to be installed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.run(version=3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Context in Sanic\nDESCRIPTION: Demonstrates the proper way to set properties on a Sanic application using the ctx object, as direct property assignment is no longer allowed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Example Output of Custom Serializer in Sanic\nDESCRIPTION: Shows the expected JSON output when using the custom serializer implemented in the previous example. This demonstrates how a simple string return is transformed into a structured JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n$ curl localhost:8000/eat_cookies -X POST\n{\n  \"request_id\": \"ef81c45b-235c-46dd-9dbd-b550f8fa77f9\",\n  \"action\": \"eat_cookies\",\n  \"message\": \"This is a message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Endpoints as Deprecated\nDESCRIPTION: Examples of using the @openapi.deprecated decorator to mark an API endpoint as deprecated in the OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@openapi.deprecated()\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.deprecated\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sanic Application\nDESCRIPTION: This code snippet demonstrates how to create a simple Sanic application with a single route. It includes importing Sanic, creating an app instance, defining a route handler, and running the server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP/3 Server via CLI\nDESCRIPTION: Command line options to start a Sanic server with HTTP/3 support. HTTP/3 runs over UDP instead of TCP and requires the aioquic package to be installed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --http=3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app -3\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Automatic TLS in Debug Mode (Python)\nDESCRIPTION: Python code to start a Sanic application with automatic TLS certificate generation in debug mode. This feature enables https://localhost for local development environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.run(debug=True, auto_tls=True)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Streaming Response Pattern in Sanic\nDESCRIPTION: Shows the deprecated method of creating streaming responses that will be removed in v22.6. This pattern uses the stream() function with a streaming function callback.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    return stream(sample_streaming_fn, content_type=\"text/csv\")\n```\n\n----------------------------------------\n\nTITLE: Adding Status Codes to Serializer in Sanic Route\nDESCRIPTION: Shows how to include a status code when using the serializer decorator on a Sanic route. This example sets a 202 status code for a POST request.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n@app.post(\"/\")\n@serializer(text, status=202)\nasync def create_something(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining TRACE and CONNECT Routes in Sanic Extensions\nDESCRIPTION: This code shows how to define routes for TRACE and CONNECT methods using Sanic Extensions, which are not allowed in vanilla Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods=[\"trace\", \"connect\"])\nasync def handler(_):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Setting Sanic Configuration via Environment Variables (Bash)\nDESCRIPTION: Demonstrates how to set Sanic configuration values using environment variables with the SANIC_ prefix.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export SANIC_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanic Logger Configuration (Python)\nDESCRIPTION: Shows how to use a custom logging configuration in Sanic. It demonstrates passing a custom log_config to the Sanic application and disabling access logging for performance reasons.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/best-practices/logging.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic('logging_example', log_config=LOGGING_CONFIG)\n\nif __name__ == \"__main__\":\n  app.run(access_log=False)\n```\n\n----------------------------------------\n\nTITLE: Routing Websocket Handlers in Sanic\nDESCRIPTION: Demonstrates two methods of routing websocket handlers in Sanic: using add_websocket_route() and using a decorator. Both methods achieve the same result of connecting a websocket handler to a specific route.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/websockets.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\nasync def feed(request: Request, ws: Websocket):\n    pass\n\napp.add_websocket_route(feed, \"/feed\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory Application Pattern in Sanic\nDESCRIPTION: Example of implementing the factory pattern for a Sanic application, which is a function that returns a Sanic instance. This can now be launched using the --factory flag in the CLI.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Blueprint, Sanic, text\n\nbp = Blueprint(__file__)\n\n@bp.get(\"/\")\nasync def handler(request):\n    return text(\"😎\")\n\ndef create_app() -> Sanic:\n    app = Sanic(__file__)\n    app.blueprint(bp)\n    return app\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response in Sanic (Development Mode)\nDESCRIPTION: Illustrates the detailed JSON error response in development mode, including extra information and stack trace.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"I'm a teapot\",\n  \"status\": 418,\n  \"message\": \"Sorry Adam, I cannot make you coffee\",\n  \"context\": {\n    \"foo\": \"bar\"\n  },\n  \"extra\": {\n    \"name\": \"Adam\",\n    \"more\": \"lines\",\n    \"complex\": {\n      \"one\": \"two\"\n    }\n  },\n  \"path\": \"/\",\n  \"args\": {},\n  \"exceptions\": [\n    {\n      \"type\": \"TeapotError\",\n      \"exception\": \"Sorry Adam, I cannot make you coffee\",\n      \"frames\": [\n        {\n          \"file\": \"handle_request\",\n          \"line\": 83,\n          \"name\": \"handle_request\",\n          \"src\": \"\"\n        },\n        {\n          \"file\": \"/tmp/p.py\",\n          \"line\": 17,\n          \"name\": \"handler\",\n          \"src\": \"raise TeapotError(\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Extension with Keyword Arguments\nDESCRIPTION: Demonstrates manually extending Sanic app with configuration using keyword arguments in lowercase.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/configuration.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.extend(oas_url_prefix=\"/apidocs\")\n```\n\n----------------------------------------\n\nTITLE: Excluding Docstrings from Documentation in Sanic\nDESCRIPTION: Shows how to exclude certain docstrings from documentation generation using the @openapi.no_autodoc decorator.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\n@openapi.no_autodoc\nasync def handler(request, something: str):\n    \"\"\"This is a docstring about internal info only. Do not parse it.\n    \"\"\"\n    return text(\"...\")\n```\n\n----------------------------------------\n\nTITLE: Routing Websocket Handlers in Sanic\nDESCRIPTION: Demonstrates two methods of routing websocket handlers in Sanic: using add_websocket_route() and using a decorator. Both methods achieve the same result of connecting a websocket handler to a specific route.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/websockets.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\nasync def feed(request: Request, ws: Websocket):\n    pass\n\napp.add_websocket_route(feed, \"/feed\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Decorators in Sanic (Python)\nDESCRIPTION: Examples of using different decorators to define routes in Sanic for various HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/stairway\")\n\n...\n\n@app.get(\"/to\")\n\n...\n\n@app.post(\"/heaven\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Attaching HTTPMethodView to Routes - Option 1\nDESCRIPTION: Shows the traditional way of attaching an HTTPMethodView-based class to a route using the as_view() method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass DummyView(HTTPMethodView):\n    ...\n\napp.add_route(DummyView.as_view(), \"/dummy\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Serializer in Sanic Route\nDESCRIPTION: Demonstrates how to use a fixed serializer decorator on a Sanic route to predefine the response format. The example shows a text serializer applied to a route that returns a greeting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n@app.get(\"/<name>\")\n@serializer(text)\nasync def hello_world(request, name: str):\n    if name.isnumeric():\n        return \"hello \" * int(name)\n    return f\"Hello, {name}\"\n```\n\n----------------------------------------\n\nTITLE: Managing Background Tasks in Sanic\nDESCRIPTION: Demonstrates how to add, retrieve, and cancel named background tasks in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(dummy, name=\"dummy_task\")\ntask = app.get_task(\"dummy_task\")\n\napp.cancel_task(\"dummy_task\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Name Prefixing\nDESCRIPTION: Demonstrates the new blueprint group name prefixing feature for handling route name uniqueness in nested blueprints.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\"bp2\", url_prefix=\"/bp2\")\n\nbp1.add_route(lambda _: ..., \"/\", name=\"route1\")\nbp2.add_route(lambda _: ..., \"/\", name=\"route2\")\n\ngroup_a = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-a\", name_prefix=\"group-a\"\n)\ngroup_b = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-b\", name_prefix=\"group-b\"\n)\n\napp = Sanic(\"TestApp\")\napp.blueprint(group_a)\napp.blueprint(group_b)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Serializer in Sanic Route\nDESCRIPTION: Demonstrates how to use a fixed serializer decorator on a Sanic route to predefine the response format. The example shows a text serializer applied to a route that returns a greeting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n@app.get(\"/<name>\")\n@serializer(text)\nasync def hello_world(request, name: str):\n    if name.isnumeric():\n        return \"hello \" * int(name)\n    return f\"Hello, {name}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple HTTP Methods for a Route in Sanic (Python)\nDESCRIPTION: Shows how to define a route that responds to multiple HTTP methods using the methods parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.add_route(\n    handler,\n    '/test',\n    methods=[\"POST\", \"PUT\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple HTTP Methods for a Route in Sanic (Python)\nDESCRIPTION: Shows how to define a route that responds to multiple HTTP methods using the methods parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.add_route(\n    handler,\n    '/test',\n    methods=[\"POST\", \"PUT\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Simultaneous HTTP/3 and HTTP/1.1 Servers in Python\nDESCRIPTION: Python code to prepare and serve a Sanic application with multiple HTTP protocol versions running simultaneously using the application multi-serve feature.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.prepre(version=3)\napp.prepre(version=1)\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with Config Object\nDESCRIPTION: Demonstrates how to extend a Sanic application using the Config object from sanic_ext, which provides better type annotations for IDE development compared to other configuration methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\nfrom sanic_ext import Config\n\napp = Sanic(\"MyApp\")\napp.extend(config=Config(oas_url_prefix=\"/apidocs\"))\n```\n\n----------------------------------------\n\nTITLE: Attaching HTTPMethodView to Routes - Option 2\nDESCRIPTION: Demonstrates the new attach method for connecting an HTTPMethodView-based class to a route in a more concise way.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass DummyView(HTTPMethodView):\n    ...\n\nDummyView.attach(app, \"/\")\n```\n\n----------------------------------------\n\nTITLE: Disabling uvloop in Sanic Configuration\nDESCRIPTION: Shows how to disable the use of uvloop in Sanic through a configuration setting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napp.config.USE_UVLOOP = False\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Exception Reporter\nDESCRIPTION: Shows the simplified decorator syntax for exception reporting using the new @app.report_exception decorator.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.report_exception\nasync def catch_any_exception(app: Sanic, exception: Exception):\n    print(\"Caught exception:\", exception)\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-based Middleware in Sanic\nDESCRIPTION: Demonstrates how to implement middleware using a class-based approach in Sanic. The class defines process_request and process_response methods that get executed during the request lifecycle.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleMiddleware:\n    async def process_request(self, request):\n        logger.info(\"before request\")\n\n    async def process_response(self, request, response):\n        logger.info(\"after request\")\n        return response\n```\n\n----------------------------------------\n\nTITLE: Route Decorator with Methods\nDESCRIPTION: Example of using route decorator with specific HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/test', methods=[\"POST\", \"PUT\"])\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Setting Global JSON Encoder in Sanic (Python)\nDESCRIPTION: Shows how to set a custom JSON encoder globally for a Sanic application during initialization.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import dumps\n\napp = Sanic(..., dumps=dumps)\n```\n\n----------------------------------------\n\nTITLE: Attaching HTTPMethodView to Routes - Option 3\nDESCRIPTION: Shows how to attach an HTTPMethodView to a route directly in the class definition using the new __init_subclass__ approach.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass DummyView(HTTPMethodView, attach=app, uri=\"/\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Empty String Path Parameter Handling\nDESCRIPTION: Demonstrates the new behavior for handling empty strings in path parameters using the strorempty parameter type.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<foo:strorempty>\")\nasync def handler(request, foo):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Response Cookies in Sanic Python\nDESCRIPTION: Shows the recommended way to set response cookies in Sanic v24.3 and later. Instead of using dict-like operations, the add_cookie method should be used to set cookie properties.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresp = HTTPResponse()\nresp.add_cookie(\"foo\", \"bar\", httponly=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Pattern in Sanic using Function-based Approach\nDESCRIPTION: Shows how to implement middleware in Sanic using a function-based approach. The middleware function receives request and response parameters, with handlers arranged in a pipeline that processes requests sequentially.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def middleware1(request, response):\n    logger.info(\"before request\")\n    await response\n    logger.info(\"after request\")\n\nasync def middleware2(request, response):\n    logger.info(\"before request2\")\n    await response\n    logger.info(\"after request2\")\n```\n\n----------------------------------------\n\nTITLE: Using Version Prefix with Blueprint Groups in Sanic\nDESCRIPTION: Demonstrates a more practical use of version_prefix with Blueprint groups in Sanic. This example shows how to group all '/api' routes under a single BlueprintGroup with custom versioning.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/versioning.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# /v1/my/path\napp = Sanic(__name__)\nv2ip = Blueprint(\"v2ip\", url_prefix=\"/ip\", version=2)\napi = Blueprint.group(v2ip, version_prefix=\"/api/version\")\n\n# /api/version2/ip\n@v2ip.get(\"/\")\nasync def handler(request):\n    return text(request.ip)\n\napp.blueprint(api)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Versioning\nDESCRIPTION: Demonstrates how to implement API versioning using Blueprints.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nauth1 = Blueprint(\"auth\", url_prefix=\"/auth\", version=1)\nauth2 = Blueprint(\"auth\", url_prefix=\"/auth\", version=2)\n```\n\n----------------------------------------\n\nTITLE: Extracting Authorization Tokens in Sanic\nDESCRIPTION: Demonstrates how to access authentication tokens from the Authorization header. Sanic automatically extracts Token and Bearer prefixed values to request.token.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/headers.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(request.token)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 \\\n    -H \"Authorization: Token ABCDEF12345679\"\nABCDEF12345679\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 \\\n    -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n----------------------------------------\n\nTITLE: Attaching HTTPMethodView from Another File\nDESCRIPTION: Shows how to attach an HTTPMethodView to a route from a separate file by using the get_app() method to retrieve the Sanic application instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, HTTPMethodView\n\nclass DummyView(HTTPMethodView, attach=Sanic.get_app(), uri=\"/\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reloader Process Event Listeners\nDESCRIPTION: Implementation of new reloader process event listeners for handling reload start and stop events.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.reload_process_start\nasync def reload_start(*_):\n    print(\">>>>>> reload_start <<<<<<\")\n\n\n@app.reload_process_stop\nasync def reload_stop(*_):\n    print(\">>>>>> reload_stop <<<<<<\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SSL Context Loader in Sanic\nDESCRIPTION: Shows how to create a custom CertLoader subclass that gives direct control over creating the SSLContext object used by the Sanic server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.loader import CertLoader\n\n\nclass MyCertLoader(CertLoader):\n    def load(self, app: Sanic) -> SSLContext:\n        . . .\n\n\napp = Sanic(. . ., certloader_class=MyCertLoader)\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Blueprint Group Versioning in Sanic\nDESCRIPTION: Demonstrates how to use blueprint groups for managing versioned blueprints in Sanic. It explains the versioning hierarchy and shows how to apply versions at different levels.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/versioning.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.blueprints import Blueprint\nfrom sanic.response import json\n\nbp1 = Blueprint(\n    name=\"blueprint-1\",\n    url_prefix=\"/bp1\",\n    version=1.25,\n)\nbp2 = Blueprint(\n    name=\"blueprint-2\",\n    url_prefix=\"/bp2\",\n)\n\ngroup = Blueprint.group(\n    [bp1, bp2],\n    url_prefix=\"/bp-group\",\n    version=\"v2\",\n)\n\n# GET /v1.25/bp-group/bp1/endpoint-1\n@bp1.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp1(request):\n    return json({\"Source\": \"blueprint-1/endpoint-1\"})\n\n# GET /v2/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-1\"})\n\n# GET /v1/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-2\", version=1)\nasync def handle_endpoint_2_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-2\"})\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a Python Module\nDESCRIPTION: Demonstrates how to load Sanic configuration from a Python module. The module should contain configuration values as uppercase constants, and is loaded using the from_object method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/configuration.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.from_object(\"path.to.config.object\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic as a Module\nDESCRIPTION: Alternative method to run Sanic applications by calling it directly as a Python module using the python -m command.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m sanic server.app --host=0.0.0.0 --port=1337 --workers=4\n```\n\n----------------------------------------\n\nTITLE: Running Sanic as a Module\nDESCRIPTION: Alternative method to run Sanic applications by calling it directly as a Python module using the python -m command.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m sanic server.app --host=0.0.0.0 --port=1337 --workers=4\n```\n\n----------------------------------------\n\nTITLE: Route Definition with Non-ASCII Parameters\nDESCRIPTION: Example of defining a route that handles non-ASCII URL parameters with explicit unquoting enabled.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.3.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/overload/<param>\", methods=[\"GET\"], unquote=True)\nasync def handler2(request, param):\n    return text(\"OK2 \" + param)\n\nrequest, response = app.test_client.get(\"/overload/您好\")\nassert response.text == \"OK2 您好\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control Headers with file() Response Helper\nDESCRIPTION: Example of using the improved file response helper API to set Cache-Control headers with parameters for last_modified, max_age, and no_store.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfile(\n    ...,\n    last_modified=...,\n    max_age=...,\n    no_store=...,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Prefixes in Sanic\nDESCRIPTION: Shows how to set a host-prefixed cookie using the new cookie API, which automatically handles the __Host- prefix syntax while allowing transparent access to the cookie value.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse.cookies.add_cookie(\"foo\", \"bar\", host_prefix=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Prefix in Sanic Routes\nDESCRIPTION: Shows how to use the version_prefix parameter to customize the version segment in the URI path. This example demonstrates adding an 'api' prefix to the version.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/versioning.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /v1/my/path\napp.route(\"/my/path\", version=1, version_prefix=\"/api/v\")\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Extensions with Sanic\nDESCRIPTION: Command to install Sanic with Extensions using pip. This is the recommended method for installing Sanic Extensions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/getting-started.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic[ext]\n```\n\n----------------------------------------\n\nTITLE: Route Parameters in Sanic\nDESCRIPTION: Shows how to define routes with path parameters in Sanic. This example demonstrates capturing URL parameters to make routes dynamic, allowing for variable parts in the URL path.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/tag/<tag>\")\nasync def tag_handler(request, tag):\n    return text(f\"Tag - {tag}\")\n\n@app.route(\"/foo/<foo_id:uuid>\")\nasync def uuid_handler(request, foo_id):\n    return text(f\"UUID - {foo_id}\")\n\n@app.route(\"/number/<integer_arg:int>\")\nasync def integer_handler(request, integer_arg):\n    return text(f\"Integer - {integer_arg}\")\n\n@app.route(\"/number/<number_arg:number>\")\nasync def number_handler(request, number_arg):\n    return text(f\"Number - {number_arg}\")\n\n@app.route(\"/alpha/<string_arg:alpha>\")\nasync def alpha_handler(request, string_arg):\n    return text(f\"Alpha - {string_arg}\")\n\n@app.route(\"/path/<path:path>\")\nasync def path_handler(request, path):\n    return text(f\"Path - {path}\")\n\n@app.route(\"/regex/<regex([^/]+):value>\")\nasync def regex_handler(request, value):\n    return text(f\"Value - {value}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logging in Sanic (Python)\nDESCRIPTION: This snippet demonstrates how to set up basic logging in a Sanic application. It includes creating a route that logs a message and running the server with debug and access logging enabled.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/logging.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.log import logger\nfrom sanic.response import text\n\napp = Sanic('logging_example')\n\n@app.route('/')\nasync def test(request):\n    logger.info('Here is your log')\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n  app.run(debug=True, access_log=True)\n```\n\n----------------------------------------\n\nTITLE: Defining a Dataclass Model for Validation in Python\nDESCRIPTION: Creates a simple dataclass model 'SearchParams' with a single string field 'q' for search query validation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass SearchParams:\n    q: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Context Queue in Sanic Workers\nDESCRIPTION: Shows how to share a Queue object between worker processes using the shared_ctx feature in the main_process_start listener\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecation Warning Filter in Sanic\nDESCRIPTION: Sets the deprecation warning filter level for Sanic using standard library warning filter values. The default value is 'once'. This can be configured through the app config property DEPRECATION_FILTER.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEPRECATION_FILTER = \"ignore\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching Blueprint Signals in Sanic\nDESCRIPTION: Demonstrates that dispatching from a blueprint only triggers handlers defined on that blueprint, not application-level handlers. This allows for more isolated event handling.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nawait bp.dispatch(\"foo.bar.baz\")\nassert app_counter == 1\nassert bp_counter == 2\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Extensions Standalone\nDESCRIPTION: Command to install Sanic Extensions by itself using pip, without installing Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/getting-started.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Copying Blueprints with Version Control\nDESCRIPTION: Shows how to copy a Blueprint to create a new version while maintaining the same routes but with different versions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nv1 = Blueprint(\"Version1\", version=1)\n\n@v1.route(\"/something\")\ndef something(request):\n    pass\n\nv2 = v1.copy(\"Version2\", version=2)\n\napp.blueprint(v1)\napp.blueprint(v2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Validation with Dataclasses in Sanic\nDESCRIPTION: Demonstrates how to use the @validate decorator to apply dataclass validation to a Sanic route handler for query parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/validation.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.route(\"/search\")\n@validate(query=SearchParams)\nasync def handler(request, query: SearchParams):\n    return json(asdict(query))\n```\n\n----------------------------------------\n\nTITLE: Managing Arbitrary Processes in Sanic\nDESCRIPTION: Shows how to register and manage arbitrary processes using the main_process_ready listener\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n    app.manager.manage(\"MyProcess\", my_process, {\"foo\": \"bar\"})\n#   app.manager.manage(<name>, <callable>, <kwargs>)\n```\n\n----------------------------------------\n\nTITLE: Optional Loop Argument in Listeners\nDESCRIPTION: Shows the new flexibility in listener implementations where the loop argument is now optional.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def without(app):\n    ...\n\n@app.before_server_start\nasync def with(app, loop):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Sanic\nDESCRIPTION: Demonstrates how to dispatch an event that will execute handlers and resolve any waiting tasks. The example shows a dynamic parameter being passed to the handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def foo_bar(thing):\n    print(f\"{thing=}\")\n\nawait app.dispatch(\"foo.bar.baz\")\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Configuration Object\nDESCRIPTION: Uses the type-annotated Config object from sanic_ext for better IDE support during development.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/configuration.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Config\n\napp = Sanic(\"MyApp\")\napp.extend(config=Config(oas_url_prefix=\"/apidocs\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Application with Environment Variables\nDESCRIPTION: This example demonstrates loading Sanic configuration from environment variables using the load_env_vars method. It shows how to include or exclude specific prefixes and match patterns using regular expressions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/configuration.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.load_env_vars(prefix=\"SANIC_\", include=None, exclude=None)\n```\n\n----------------------------------------\n\nTITLE: File Streaming with Custom Headers in Sanic\nDESCRIPTION: This example demonstrates how to use Sanic's file_stream function to stream a large file. It sets custom headers including Content-Disposition and Content-Type.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/mp4\")\nasync def handler_file_stream(request):\n    return await response.file_stream(\n        \"/path/to/sample.mp4\",\n        chunk_size=1024,\n        mime_type=\"application/metalink4+xml\",\n        headers={\n            \"Content-Disposition\": 'Attachment; filename=\"nicer_name.meta4\"',\n            \"Content-Type\": \"application/metalink4+xml\",\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering Jinja Template from String in Sanic\nDESCRIPTION: Illustrates how to render a Jinja template from a string instead of a file. This is useful when templates need to be dynamically generated or stored in code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\nfrom textwrap import dedent\n\n@app.get(\"/\")\nasync def handler(request):\n    template = dedent(\"\"\"\n        <!DOCTYPE html>\n        <html lang=\"en\">\n\n            <head>\n                <title>My Webpage</title>\n            </head>\n\n            <body>\n                <h1>Hello, world!!!!</h1>\n                <ul>\n                    {% for item in seq %}\n                    <li>{{ item }}</li>\n                    {% endfor %}\n                </ul>\n            </body>\n\n        </html>\n    \"\"\")\n    return await render(\n        template_source=template,\n        context={\"seq\": [\"three\", \"four\"]},\n        app=app,\n    )\n```\n\n----------------------------------------\n\nTITLE: Request-Based Profile Injection\nDESCRIPTION: Complex example showing how to use request data to create and inject user profiles with database integration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n    name: str\n\n\n@dataclass\nclass UserProfile:\n    user: User\n    age: int = field(default=0)\n    email: str = field(default=\"\")\n\n    def __json__(self):\n        return ujson.dumps(\n            {\n                \"name\": self.user.name,\n                \"age\": self.age,\n                \"email\": self.email,\n            }\n        )\n\n\nasync def fake_request_to_db(body):\n    today = date.today()\n    email = f'{body[\"name\"]}@something.com'.lower()\n    difference = today - date.fromisoformat(body[\"birthday\"])\n    age = int(difference.days / 365)\n    return UserProfile(\n        User(body[\"name\"]),\n        age=age,\n        email=email,\n    )\n\n\nasync def compile_profile(request: Request):\n    await request.receive_body()\n    profile = await fake_request_to_db(request.json)\n    return profile\n\n\napp.ext.add_dependency(UserProfile, compile_profile)\n\n\n@app.patch(\"/profile\")\nasync def update_profile(request, profile: UserProfile):\n    return json(profile)\n```\n\n----------------------------------------\n\nTITLE: Current Recommended Streaming Response Pattern in Sanic\nDESCRIPTION: Demonstrates the current recommended approach for creating streaming responses using request.respond() and response.send() methods instead of the deprecated stream() function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Adding Signals with Conditions in Sanic\nDESCRIPTION: Shows how to add signals with conditions using both the method and decorator approaches. Conditions allow for more specific targeting of when handlers should be executed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def my_signal_handler1():\n    print(\"something happened\")\n\napp.add_signal(\n    my_signal_handler,\n    \"something.happened.ohmy1\",\n    conditions={\"some_condition\": \"value\"}\n)\n\n@app.signal(\"something.happened.ohmy2\", conditions={\"some_condition\": \"value\"})\nasync def my_signal_handler2():\n    print(\"something happened\")\n```\n\n----------------------------------------\n\nTITLE: Static Directory Configuration in Sanic\nDESCRIPTION: Configures a static directory route in Sanic for serving static files from a specified path.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/static\", \"/path/to/directory\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading a Configuration Class in Sanic\nDESCRIPTION: Shows how to define a custom configuration class and load it into a Sanic application using update_config. This approach allows for structured organization of configuration values.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfig:\n    A = 1\n    B = 2\n\napp.update_config(MyConfig)\n```\n\n----------------------------------------\n\nTITLE: Securing All Endpoints in Sanic OpenAPI\nDESCRIPTION: Examples of applying security schemes globally to all endpoints in a Sanic application using the secured() method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/security.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.ext.openapi.secured()\napp.ext.openapi.secured(\"token\")\n```\n\n----------------------------------------\n\nTITLE: Service Injection with High-Level API\nDESCRIPTION: Shows how to inject services using the higher-level dependency API, which is preferred for application-wide services.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n\n@app.before_server_start\nasync def setup_db(app, _):\n    db_conn = FakeConnection()\n    app.ext.dependency(db_conn)\n\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\n----------------------------------------\n\nTITLE: Starting a Simple Server with Sanic CLI\nDESCRIPTION: Shows how to use the new --simple flag to serve a directory as a simple web server that looks for an index.html file at the root.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic ./path/to/dir --simple\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Middleware Decorators in Sanic\nDESCRIPTION: Demonstrates the preferred shorthand decorators @app.on_request and @app.on_response for adding middleware. These methods provide better IDE autocomplete support.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def extract_user(request):\n    ...\n\n@app.on_response\nasync def prevent_xss(request, response):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Maximum Workers\nDESCRIPTION: Using the '--fast' option to automatically run Sanic with the maximum number of workers based on system constraints for optimal CPU performance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --fast\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Request Objects in Sanic\nDESCRIPTION: Demonstrates subclassing the Sanic Request class to add custom functionality, such as automatically parsing a custom header.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, Request\n\nclass CustomRequest(Request):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.user_id = self.headers.get(\"X-User-ID\")\n\napp = Sanic(\"Example\", request_class=CustomRequest)\n```\n\n----------------------------------------\n\nTITLE: Worker Process Management Commands\nDESCRIPTION: Examples of various worker management commands using the multiplexer for termination and restart operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# shutdown the entire application and all processes\napp.m.name.terminate()\n\n# restart the current worker only\napp.m.name.restart()\n\n# restart specific workers only (comma delimited)\napp.m.name.restart(\"Sanic-Server-4-0,Sanic-Server-7-0\")\n\n# restart ALL workers\napp.m.name.restart(all_workers=True)  # Available v22.12+\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Logic in Sanic\nDESCRIPTION: This example demonstrates how to implement custom validation logic in Sanic using a function. It validates that the 'name' parameter is not empty and the 'age' is between 0 and 120.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/validation.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef validate_person(value):\n    if not value.name:\n        raise ValidationError(\"Name cannot be empty\")\n    if not 0 <= value.age <= 120:\n        raise ValidationError(\"Age must be between 0 and 120\")\n    return value\n\n@app.post(\"/person\")\n@validate(json=validate_person)\nasync def create_person(request, body):\n    return json({\"message\": f\"Created person: {body.name}, {body.age} years old\"})\n```\n\n----------------------------------------\n\nTITLE: Adding External Documentation Links\nDESCRIPTION: Examples of using the @openapi.document decorator to add links to external documentation for an API endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@openapi.document(\"http://example.com/docs\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.document(ExternalDocumentation(\"http://example.com/more\"))\n```\n\n----------------------------------------\n\nTITLE: Excluding Docstrings from API Documentation in Sanic\nDESCRIPTION: This snippet demonstrates how to exclude a function's docstring from being used in the API documentation. It uses the @openapi.no_autodoc decorator to disable auto-documentation for a specific handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\n@openapi.no_autodoc\nasync def handler(request, something: str):\n    \"\"\"This is a docstring about internal info only. Do not parse it.\n    \"\"\"\n    return text(\"...\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Logic in Sanic\nDESCRIPTION: This example demonstrates how to implement custom validation logic in Sanic using a function. It validates that the 'name' parameter is not empty and the 'age' is between 0 and 120.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/validation.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef validate_person(value):\n    if not value.name:\n        raise ValidationError(\"Name cannot be empty\")\n    if not 0 <= value.age <= 120:\n        raise ValidationError(\"Age must be between 0 and 120\")\n    return value\n\n@app.post(\"/person\")\n@validate(json=validate_person)\nasync def create_person(request, body):\n    return json({\"message\": f\"Created person: {body.name}, {body.age} years old\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Middleware Priority in Sanic\nDESCRIPTION: Shows how to control middleware execution order by setting priority. Higher priority values cause middleware to execute earlier relative to others. The default priority is 0.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def low_priority(request):\n    ...\n\n@app.on_request(priority=99)\nasync def high_priority(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Gunicorn and Uvicorn Worker\nDESCRIPTION: Demonstrates how to run a Sanic application using Gunicorn with the Uvicorn worker class for ASGI support.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ngunicorn myapp:app --bind 0.0.0.0:1337 --worker-class uvicorn.workers.UvicornWorker\n```\n\n----------------------------------------\n\nTITLE: Constructor Equivalent Example\nDESCRIPTION: Shows the equivalent constructor call for the IceCream class dependency injection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nflavor = IceCream(flavor=\"chocolate\")\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection with IceCream Class\nDESCRIPTION: Demonstrates basic dependency injection by recasting a path parameter into an IceCream dataclass. Shows how to use app.ext.add_dependency for simple type conversion.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/injection.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass IceCream:\n    flavor: str\n\n    def __str__(self) -> str:\n        return f\"{self.flavor.title()} (Yum!)\"\n\n\napp.ext.add_dependency(IceCream)\n\n\n@app.get(\"/<flavor:str>\")\nasync def ice_cream(request, flavor: IceCream):\n    return text(f\"You chose: {flavor}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Operation IDs\nDESCRIPTION: Example of using the @openapi.operation decorator to set a custom operation ID for an API endpoint in the OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@openapi.operation(\"doNothing\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Middleware in Sanic\nDESCRIPTION: Shows how to create response middleware that adds security headers to prevent XSS attacks. Response middleware receives both request and response objects as arguments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware('response')\nasync def prevent_xss(request, response):\n    response.headers[\"x-xss-protection\"] = \"1; mode=block\"\n```\n\n----------------------------------------\n\nTITLE: OPTIONS Request Handler Setup\nDESCRIPTION: Implementation of automatic OPTIONS request handling for routes, including route compilation and handler setup.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/cors.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\nfrom typing import Dict, FrozenSet\n\nfrom sanic import Sanic, response\nfrom sanic.router import Route\n\nfrom cors import _add_cors_headers\n\n\ndef _compile_routes_needing_options(\n    routes: Dict[str, Route]\n) -> Dict[str, FrozenSet]:\n    needs_options = defaultdict(list)\n    # This is 21.12 and later. You will need to change this for older versions.\n    for route in routes.values():\n        if \"OPTIONS\" not in route.methods:\n            needs_options[route.uri].extend(route.methods)\n\n    return {\n        uri: frozenset(methods) for uri, methods in dict(needs_options).items()\n    }\n\n\ndef _options_wrapper(handler, methods):\n    def wrapped_handler(request, *args, **kwargs):\n        nonlocal methods\n        return handler(request, methods)\n\n    return wrapped_handler\n\n\nasync def options_handler(request, methods) -> response.HTTPResponse:\n    resp = response.empty()\n    _add_cors_headers(resp, methods)\n    return resp\n\n\ndef setup_options(app: Sanic, _):\n    app.router.reset()\n    needs_options = _compile_routes_needing_options(app.router.routes_all)\n    for uri, methods in needs_options.items():\n        app.add_route(\n            _options_wrapper(options_handler, methods),\n            uri,\n            methods=[\"OPTIONS\"],\n        )\n    app.router.finalize()\n```\n\n----------------------------------------\n\nTITLE: Implementing Priority-based Middleware in Sanic\nDESCRIPTION: Example of defining middleware with different execution priorities using the priority parameter\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def low_priority(_):\n    ...\n\n@app.on_request(priority=10)\nasync def high_priority(_):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Explicitly Injecting App Instance into Background Tasks\nDESCRIPTION: Example showing how to explicitly pass the app instance to a background task rather than relying on Sanic's automatic injection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def explicit_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(explicit_inject(app))\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Health Monitor in Python\nDESCRIPTION: This snippet shows how to enable the health monitor feature in Sanic. It requires setting the HEALTH configuration option to True.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/health-monitor.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.HEALTH = True\n```\n\n----------------------------------------\n\nTITLE: Basic TLS Configuration in Sanic\nDESCRIPTION: Demonstrates how to start Sanic with TLS certificates using both command line and Python code approaches.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo sanic myserver:app -H :: -p 443 \\\n  --tls /etc/letsencrypt/live/example.com/\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(\"::\", 443, ssl=\"/etc/letsencrypt/live/example.com/\")\n```\n\n----------------------------------------\n\nTITLE: Tagging Endpoints for Organization\nDESCRIPTION: Examples of using the @openapi.tag decorator to add tags to API endpoints for organizational purposes in the OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@openapi.tag(\"foo\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.tag(\"foo\", Tag(\"bar\"))\n```\n\n----------------------------------------\n\nTITLE: Basic TLS Configuration in Sanic\nDESCRIPTION: Demonstrates how to start Sanic with TLS certificates using both command line and Python code approaches.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo sanic myserver:app -H :: -p 443 \\\n  --tls /etc/letsencrypt/live/example.com/\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(\"::\", 443, ssl=\"/etc/letsencrypt/live/example.com/\")\n```\n\n----------------------------------------\n\nTITLE: Connection Context Usage Example\nDESCRIPTION: Demonstrates using connection-level context to maintain state across multiple requests in a keep-alive connection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.3.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def increment_foo(request):\n    if not hasattr(request.conn_info.ctx, \"foo\"):\n        request.conn_info.ctx.foo = 0\n    request.conn_info.ctx.foo += 1\n\n@app.get(\"/\")\nasync def count_foo(request):\n    return text(f\"request.conn_info.ctx.foo={request.conn_info.ctx.foo}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a GET Route for Auto-HEAD Response in Sanic\nDESCRIPTION: Code example showing how to define a GET route which Sanic Extension will automatically make available for HEAD requests. This allows clients to retrieve header information without the response body.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Using API Key Authentication\nDESCRIPTION: Demonstrates how to use API key authentication with Inspector via CLI and HTTP.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect --api-key=Super-Secret-200\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:6457  -H \"Authorization: Bearer Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMonitor Extension in Sanic\nDESCRIPTION: Example of creating a custom monitoring extension that tracks monitored endpoints. The extension implements required name and startup methods, along with optional label and included methods to control its behavior based on configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/custom.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic, json\nfrom sanic_ext import Extend, Extension\n\napp = Sanic(__name__)\napp.config.MONITOR = True\n\n\nclass AutoMonitor(Extension):\n    name = \"automonitor\"\n\n    def startup(self, bootstrap) -> None:\n        if self.included():\n            self.app.before_server_start(self.ensure_monitor_set)\n            self.app.on_request(self.monitor)\n\n    @staticmethod\n    async def monitor(request: Request):\n        if request.route and request.route.ctx.monitor:\n            print(\"....\")\n\n    @staticmethod\n    async def ensure_monitor_set(app: Sanic):\n        for route in app.router.routes:\n            if not hasattr(route.ctx, \"monitor\"):\n                route.ctx.monitor = False\n\n    def label(self):\n        has_monitor = [\n            route\n            for route in self.app.router.routes\n            if getattr(route.ctx, \"monitor\", None)\n        ]\n        return f\"{len(has_monitor)} endpoint(s)\"\n\n    def included(self):\n        return self.app.config.MONITOR\n\n\nExtend.register(AutoMonitor)\n\n\n@app.get(\"/\", ctx_monitor=True)\nasync def handler(request: Request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Template for Sanic and Jinja\nDESCRIPTION: An example HTML template file (foo.html) that demonstrates basic Jinja syntax for use with Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n    <head>\n        <title>My Webpage</title>\n    </head>\n\n    <body>\n        <h1>Hello, world!!!!</h1>\n        <ul>\n            {% for item in seq %}\n            <li>{{ item }}</li>\n            {% endfor %}\n        </ul>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sending POST and GET Requests to Sanic API using cURL\nDESCRIPTION: This snippet demonstrates how to send a POST request to create users and a GET request to retrieve a specific user from a Sanic API. The POST request sends JSON data to '/user' endpoint, while the GET request fetches user data from '/user/1' endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location --request POST 'http://127.0.0.1:8000/user'\n{\"users\":[\"I am foo\", \"I am bar\"]}\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location --request GET 'http://127.0.0.1:8000/user/1'\n{\"user\": \"I am foo\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Keep-Alive Timeout in Sanic\nDESCRIPTION: This code configures the keep-alive timeout for the Sanic server. It sets how long an idle keep-alive connection will be kept open. The example shows setting it to 5 minutes (300 seconds).\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.config.KEEP_ALIVE_TIMEOUT = 300\napp.run(keep_alive_timeout=300)\n```\n\n----------------------------------------\n\nTITLE: Using Shared Context in Request Handler\nDESCRIPTION: Demonstration of accessing shared context objects within a request handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.get(\"\")\nasync def handler(request):\n    request.app.shared_ctx.queue.put(1)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Route Context Configuration\nDESCRIPTION: Shows how to add context to routes using ctx_ prefix in route definition.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/1\", ctx_label=\"something\")\nasync def handler1(request):\n    ...\n\n@app.get(\"/2\", ctx_label=\"something\")\nasync def handler2(request):\n    ...\n\n@app.get(\"/99\")\nasync def handler99(request):\n    ...\n\n@app.on_request\nasync def do_something(request):\n    if request.route.ctx.label == \"something\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Proxied Sanic Application\nDESCRIPTION: A simple Sanic application that displays connection information including the client's remote address and forwarded headers. This demonstrates how Sanic handles proxy information passed from Caddy.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/caddy.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"proxied_example\")\n\n@app.get(\"/\")\ndef index(request):\n    # This should display external (public) addresses:\n    return text(\n        f\"{request.remote_addr} connected to {request.url_for('index')}\\n\"\n        f\"Forwarded: {request.forwarded}\\n\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-asyncio for Async Testing\nDESCRIPTION: Command to install the pytest-asyncio plugin required for async testing.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/getting-started.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-asyncio\n```\n\n----------------------------------------\n\nTITLE: Registering Routes with Tortoise-ORM in Sanic\nDESCRIPTION: Example of registering route handlers using Tortoise-ORM for database operations in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ./main.py\n\nfrom models import Users\nfrom sanic import Sanic, response\n\n\n@app.route(\"/user\")\nasync def list_all(request):\n    users = await Users.all()\n    return response.json({\"users\": [str(user) for user in users]})\n\n\n@app.route(\"/user/<pk:int>\")\nasync def get_user(request, pk):\n    user = await Users.query(pk=pk)\n    return response.json({\"user\": str(user)})\n\nif __name__ == \"__main__\":\n    app.run(port=5000)\n```\n\n----------------------------------------\n\nTITLE: Using Sanic Built-in Configuration Defaults\nDESCRIPTION: Shows the default configuration values that are set by Sanic automatically. These control core framework behavior and can be overridden as needed.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"ACCESS_LOG\": True,\n    \"AUTO_EXTEND\": True,\n    \"AUTO_RELOAD\": False,\n    \"EVENT_AUTOREGISTER\": True,\n    \"FALLBACK_ERROR_FORMAT\": \"html\",\n    \"FORWARDED_FOR_HEADER\": \"X-Forwarded-For\",\n    \"FORWARDED_SECRET\": None,\n    \"GRACEFUL_SHUTDOWN_TIMEOUT\": 15.0,\n    \"KEEP_ALIVE_TIMEOUT\": 5,\n    \"KEEP_ALIVE\": True,\n    \"LISTENER_BACKLOG\": 100,\n    \"MOTD\": True,\n    \"MOTD_DISPLAY\": {},\n    \"NOISY_EXCEPTIONS\": False,\n    \"PROXIES_COUNT\": None,\n    \"REAL_IP_HEADER\": None,\n    \"REQUEST_BUFFER_SIZE\": 65536,\n    \"REQUEST_ID_HEADER\": \"X-Request-ID\",\n    \"REQUEST_MAX_SIZE\": 100000000,\n    \"REQUEST_TIMEOUT\": 60,\n    \"RESPONSE_TIMEOUT\": 60,\n    \"WEBSOCKET_MAX_SIZE\": 2 ** 20,\n    \"WEBSOCKET_PING_INTERVAL\": 20,\n    \"WEBSOCKET_PING_TIMEOUT\": 20,\n    \"WEBSOCKET_READ_LIMIT\": 2 ** 16,\n    \"WEBSOCKET_WRITE_LIMIT\": 2 ** 16,\n    \"OAS_UI_DEFAULT\": None,\n    \"OAS_UI_REDOC\": \"/docs/redoc\",\n    \"OAS_UI_RAPIDOC\": \"/docs/rapidoc\",\n    \"OAS_UI_SWAGGER\": \"/docs/swagger\",\n    \"OAS_UI_SWAGGER_JS_URL\": \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\",\n    \"OAS_UI_SWAGGER_CSS_URL\": \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\",\n    \"OAS_UI_REDOC_JS_URL\": \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    \"OAS_UI_RAPIDOC_JS_URL\": \"https://cdn.jsdelivr.net/npm/rapidoc@latest/dist/rapidoc-min.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Dynamic Events with Wildcards\nDESCRIPTION: Shows how to wait for any action in a dynamic event path using wildcards. This allows responding to a range of related events with a single handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\n\n...\n\nawait app.event(\"foo.bar.*\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanic Server Configuration in Python\nDESCRIPTION: Shows how to customize the Sanic server configuration by specifying host, port, and disabling access logs for improved performance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# server.py\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=1337, access_log=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer in Sanic Route\nDESCRIPTION: Demonstrates how to create and use a custom serializer function with the @serializer decorator in Sanic. The custom function returns a JSON response with request ID, action, and message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef message(retval, request, action, status):\n    return json(\n        {\n            \"request_id\": str(request.id),\n            \"action\": action,\n            \"message\": retval,\n        },\n        status=status,\n    )\n\n\n@app.post(\"/<action>\")\n@serializer(message)\nasync def do_action(request, action: str):\n    return \"This is a message\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Decorator in Sanic\nDESCRIPTION: Creates a decorator that checks user authorization for specific endpoints. It wraps the handler function, inspects the request for client authorization status, and sends appropriate responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom sanic.response import json\n\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            # run some method that checks the request\n            # for the client's authorization status\n            is_authorized = await check_request_for_authorization_status(request)\n\n            if is_authorized:\n                # the user is authorized.\n                # run the handler method and return the response\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                # the user is not authorized.\n                return json({\"status\": \"not_authorized\"}, 403)\n        return decorated_function\n    return decorator\n\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({\"status\": \"authorized\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Mayim ORM\nDESCRIPTION: Example of defining Pydantic models for City and Country entities to be used with Mayim ORM.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom pydantic import BaseModel\n\n\nclass City(BaseModel):\n    id: int\n    name: str\n    district: str\n    population: int\n\n\nclass Country(BaseModel):\n    code: str\n    name: str\n    continent: str\n    region: str\n    capital: City\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Generation with Certbot\nDESCRIPTION: Command to generate SSL certificates using Certbot for domain verification.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/nginx.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncertbot -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Signals on Blueprints in Sanic\nDESCRIPTION: Demonstrates how to define signal handlers on both the application and a blueprint, showing how application and blueprint scopes interact.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"bp\")\n\napp_counter = 0\nbp_counter = 0\n\n@app.signal(\"foo.bar.baz\")\ndef app_signal():\n    nonlocal app_counter\n    app_counter += 1\n\n@bp.signal(\"foo.bar.baz\")\ndef bp_signal():\n    nonlocal bp_counter\n    bp_counter += 1\n```\n\n----------------------------------------\n\nTITLE: WebSocket Route Definition\nDESCRIPTION: Shows how to define WebSocket routes using the add_websocket_route method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/routing.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request, ws):\n    message = \"Start\"\n    while True:\n        await ws.send(message)\n        message = await ws.recv()\n\napp.add_websocket_route(handler, \"/test\")\n```\n\n----------------------------------------\n\nTITLE: Raising Custom Exception with Extra and Context in Sanic\nDESCRIPTION: Demonstrates how to raise a custom exception with extra and context parameters for additional information.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(extra={\"foo\": \"bar\"}, context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Enabling Request Counting in Sanic Application\nDESCRIPTION: Shows how to enable automatic request counting per worker process in a Sanic application by using the CountedRequest class from sanic_ext.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import CountedRequest\n\napp = Sanic(..., request_class=CountedRequest)\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorator with Arguments in Sanic\nDESCRIPTION: Creates a decorator that always requires arguments. It demonstrates how to wrap a function and handle both regular and async responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(arg1, arg2):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Application with Custom Server Name\nDESCRIPTION: Sets up a Sanic application with a custom server name and creates a route handler that returns its external URL. The application is configured to run under the /api path.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/mounting.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom sanic import Sanic, text\n\napp = Sanic(\"app\")\napp.config.SERVER_NAME = \"example.com/api\"\n\n\n@app.route(\"/foo\")\ndef handler(request):\n    url = app.url_for(\"handler\", _external=True)\n    return text(f\"URL: {url}\")\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Proxying Sanic Application\nDESCRIPTION: Nginx configuration file that sets up a reverse proxy to the Sanic application. It listens on port 80 and forwards requests to the Sanic container at 'mysanic:8000', preserving important headers like Upgrade for WebSocket support.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n    location / {\n      proxy_pass http://mysanic:8000/;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection upgrade;\n      proxy_set_header Accept-Encoding gzip;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local TLS Certificate Creator in Sanic\nDESCRIPTION: Python code to configure which tool Sanic should use for generating local development TLS certificates. Options include 'auto', 'mkcert', or 'trustme'.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.config.LOCAL_CERT_CREATOR = \"auto\"\napp.config.LOCAL_CERT_CREATOR = \"mkcert\"\napp.config.LOCAL_CERT_CREATOR = \"trustme\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logs in Sanic for Performance Boost\nDESCRIPTION: This command runs a Sanic application with access logs disabled to improve performance. For production environments that still need access logs, using Nginx as a proxy is recommended.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --no-access-logs\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Count in Sanic Route Handler\nDESCRIPTION: Demonstrates how to access the number of requests served during the lifetime of a worker process in a Sanic route handler using the CountedRequest class.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/convenience.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request: CountedRequest):\n    return json({\"count\": request.count})\n```\n\n----------------------------------------\n\nTITLE: Raising a NotFound Exception in a Login Route\nDESCRIPTION: Example of raising a NotFound exception in a login route when a user is not found.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import exceptions\n\n@app.route(\"/login\")\nasync def login(request):\n    user = await some_login_func(request)\n    if not user:\n        raise exceptions.NotFound(\n            f\"Could not find user with username={request.json.username}\"\n        )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Basic Route Decorators in Sanic\nDESCRIPTION: Shows the standard way to create route handlers in Sanic using the @app.route() decorator. The example demonstrates how to define a simple GET endpoint that returns a JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/decorators.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Autodiscovery in Sanic Application (Python)\nDESCRIPTION: This snippet shows the main server file that uses autodiscovery to register blueprints and listeners. It imports the necessary modules and uses a custom autodiscover function to set up the application components.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/autodiscovery.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import empty\n\nimport blueprints\nfrom utility import autodiscover\n\napp = Sanic(\"auto\", register=True)\nautodiscover(\n    app,\n    blueprints,\n    \"parent.child\",\n    \"listeners.something\",\n    recursive=True,\n)\n\napp.route(\"/\")(lambda _: empty())\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic TLS Certificates for Development\nDESCRIPTION: Command to run Sanic with automatic TLS certificate generation for development. This allows testing with HTTPS locally. Feature added in v22.6.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --auto-tls --debug\n```\n\n----------------------------------------\n\nTITLE: Creating an Authorization Decorator for Sanic Routes\nDESCRIPTION: A complete example of an authorization decorator that checks if a user is authorized to access an endpoint, returning the response or a 403 status based on authorization status.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom sanic.response import json\n\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            # run some method that checks the request\n            # for the client's authorization status\n            is_authorized = await check_request_for_authorization_status(request)\n\n            if is_authorized:\n                # the user is authorized.\n                # run the handler method and return the response\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                # the user is not authorized.\n                return json({\"status\": \"not_authorized\"}, 403)\n        return decorated_function\n    return decorator\n\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({\"status\": \"authorized\"})\n```\n\n----------------------------------------\n\nTITLE: Defining HEAD Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.head decorator to define a route for HEAD requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.head('/test')\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Using TestManager for SanicTestClient in Python\nDESCRIPTION: Demonstrates the use of TestManager, a convenience object that sets up both SanicTestClient and SanicASGITestClient. This approach simplifies the setup process for testing.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing import TestManager\n\nmgr = TestManager(app)\napp.test_client.get(\"/path/to/endpoint\")\n# or\nmgr.test_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception with Default Message\nDESCRIPTION: Example of creating a custom exception class with a default message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomError(SanicException):\n    message = \"Something bad happened\"\n\nraise CustomError\n# もしくは\nraise CustomError(\"Override the default message with something else\")\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication\nDESCRIPTION: Shows how to set up API key authentication for the Inspector.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_API_KEY = \"Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application with Uvicorn\nDESCRIPTION: This code snippet shows how to run a Sanic application using Uvicorn as the server. It demonstrates the command-line syntax for starting Uvicorn with a Sanic application and specifies the host, port, and number of workers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/server-choice.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn myapp:app --host 0.0.0.0 --port 1337 --workers 4\n```\n\n----------------------------------------\n\nTITLE: Regex Path Parameters in Sanic\nDESCRIPTION: Demonstrates how to define route parameters using regular expressions for more complex pattern matching. This allows creating routes with custom validation patterns.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/foo/<foo_id:regex([^/]+)>\")\nasync def regex_handler(request, foo_id):\n    return text(f\"Regex - {foo_id}\")\n```\n\n----------------------------------------\n\nTITLE: Registering Response Middleware in a Sanic Application\nDESCRIPTION: Demonstrates how to register middleware that operates on the response phase using the middleware decorator with 'request' and 'response' parameters, allowing modification of the response after handler execution.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware(\"response\")\nasync def middleware2(request, response):\n    logger.info(\"after request\")\n    return response\n```\n\n----------------------------------------\n\nTITLE: Using Marshmallow for Request Validation in Sanic\nDESCRIPTION: This example shows how to use the Marshmallow library for more advanced request validation in Sanic. It defines a schema for user data and uses it to validate and deserialize incoming JSON data.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/validation.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom marshmallow import Schema, fields\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic(\"MyApp\")\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True)\n    email = fields.Email(required=True)\n    age = fields.Int(required=False)\n\n@app.post(\"/user\")\nasync def create_user(request):\n    schema = UserSchema()\n    try:\n        result = schema.load(request.json)\n    except ValidationError as err:\n        return json(err.messages, status=400)\n\n    # Process the validated data\n    # ...\n\n    return json({\"msg\": \"User created\", \"user\": result})\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Configuration in Python\nDESCRIPTION: Demonstrates setting configuration values on a Sanic application using dot notation or dictionary-style access. This is the fundamental way to configure Sanic applications programmatically.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.DB_NAME = \"appdb\"\napp.config[\"DB_USER\"] = \"appuser\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Inspector via Flag\nDESCRIPTION: Shows how to enable the Sanic Inspector by setting a flag during application initialization.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"TestApp\", inspector=True)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Handler with Simulated Processing Time in Python\nDESCRIPTION: This example demonstrates an asynchronous handler using asyncio.sleep() to simulate processing time. It showcases the performance benefits of using asynchronous operations in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/handlers.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/async\")\nasync def async_handler(request):\n    await asyncio.sleep(0.1)\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: 实现自定义授权装饰器的 Sanic 示例\nDESCRIPTION: 这个示例提供了一个完整的自定义授权装饰器实现。装饰器检查请求的授权状态，并根据结果允许访问或返回未授权错误。同时展示了如何在路由处理函数中使用该装饰器。\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/best-practices/decorators.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom sanic.response import json\n\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            # run some method that checks the request\n            # for the client's authorization status\n            is_authorized = await check_request_for_authorization_status(request)\n\n            if is_authorized:\n                # the user is authorized.\n                # run the handler method and return the response\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                # the user is not authorized.\n                return json({\"status\": \"not_authorized\"}, 403)\n        return decorated_function\n    return decorator\n\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({\"status\": \"authorized\"})\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja2 for Sanic Extensions\nDESCRIPTION: Command to install Jinja2, which is required for templating with Sanic Extensions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/templating.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Jinja2\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters in Sanic Routes\nDESCRIPTION: Shows how path parameters extracted from URL patterns are injected as keyword arguments into handler functions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/tag/<tag>')\nasync def tag_handler(request, tag):\n    return text(\"Tag - {}\".format(tag))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception with Dynamic Message in Sanic\nDESCRIPTION: Shows how to implement a custom exception with a dynamic message that uses extra context provided when raising the exception, allowing for more personalized error messages.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Environment Variables\nDESCRIPTION: Demonstrates how environment variables with the SANIC_ prefix are automatically loaded into the application's configuration. This example shows setting a REQUEST_TIMEOUT value via environment variable.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export SANIC_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment\nDESCRIPTION: Shell command to start the Docker Compose environment defined in docker-compose.yml in detached mode, which will launch both the Sanic application and Nginx containers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-serve Applications in Sanic\nDESCRIPTION: Demonstrates how to run multiple Sanic applications concurrently on different ports using the new multi-serve API. Shows preparation of multiple apps and ports before serving.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"One\")\napp2 = Sanic(\"Two\")\n\napp.prepare(port=9999)\napp.prepare(port=9998)\napp.prepare(port=9997)\napp2.prepare(port=8888)\napp2.prepare(port=8887)\n\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Decorators with Sanic Route Handlers\nDESCRIPTION: Example of a Sanic view handler with several decorators for authorization, parameter validation, and user injection, demonstrating how decorators can create modular functionality.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/orders\")\n@authorized(\"view_order\")\n@validate_list_params()\n@inject_user()\nasync def get_order_details(request, params, user):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Caddy Configuration with Static File Serving\nDESCRIPTION: A more advanced Caddyfile configuration that serves static files directly from Caddy before proxying to Sanic. This improves performance by offloading static file serving to Caddy.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/caddy.md#2025-04-10_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\napp.example.com {\n    # Look for static files first, proxy to Sanic if not found\n    route {\n        file_server {\n            root /srv/sanicexample/static\n            precompress br                     # brotli your large scripts and styles\n            pass_thru\n        }\n        reverse_proxy unix//tmp/sanic.socket   # sanic --unix /tmp/sanic.socket\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Properties with ctx in Sanic\nDESCRIPTION: Shows how to properly add properties to a Sanic application using the ctx attribute instead of directly attaching to the app object, which is now enforced in version 21.12.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Disabling Environment Variable Loading in Sanic\nDESCRIPTION: Shows how to completely disable the loading of configuration from environment variables when initializing a Sanic application. This is useful when you want to control configuration exclusively through code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(__name__, load_env=False)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Docker Container\nDESCRIPTION: Shell command to run a Docker container named 'mysanic' from the 'my-sanic-image' image, mapping port 8000 and running in detached mode.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/docker.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name mysanic -p 8000:8000 -d my-sanic-image\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception with Status Code\nDESCRIPTION: Example of creating a custom exception class with a predefined status code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n# もしくは\nraise TeapotError(status_code=400)\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Decorator With Required Arguments\nDESCRIPTION: Example showing how to apply a decorator that requires arguments to a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar(1, 2)\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks Before App Initialization\nDESCRIPTION: Example of adding background tasks before calling app.run(). This approach passes the callable rather than the coroutine object, which ensures the task runs on each worker.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def slow_work():\n   ...\n   \nasync def even_slower(num):\n   ...\n\napp = Sanic(...)\napp.add_task(slow_work) # Note: we are passing the callable and not coroutine object ...\napp.add_task(even_slower(10)) # ... or we can call the function and pass the coroutine.\napp.run(...)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Debug Mode via Command Line\nDESCRIPTION: Command to start a Sanic server with debug mode enabled. This increases verbosity and disables runtime optimizations to help during development.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/development.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1234 --debug\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Sanic and Nginx\nDESCRIPTION: Shell command to start the services defined in the docker-compose.yml file in detached mode. This launches both the Sanic application container and the Nginx reverse proxy container.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating a Sanic Configuration File\nDESCRIPTION: Example of a Python configuration file that can be loaded into a Sanic application. Configuration files allow you to separate configuration from your application code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# my_config.py\nA = 1\nB = 2\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Class (Python)\nDESCRIPTION: Demonstrates how to load configuration values from a custom class using the update_config method in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfig:\n    A = 1\n    B = 2\n\napp.update_config(MyConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception Handler\nDESCRIPTION: Example of creating a custom exception handler for specific exception types.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import NotFound\n\n@app.exception(NotFound, SomeCustomException)\nasync def ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n```\n\n----------------------------------------\n\nTITLE: Auto-index Configuration for Static File Serving\nDESCRIPTION: Configures a static directory handler to automatically serve an index.html file when the directory root is requested, simplifying static site hosting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/assets/\", \"/path/to/some/dir\", index=\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Using Connection Context for Shared State Across Requests\nDESCRIPTION: Shows how to use connection context to maintain state across multiple requests from the same client using a shared connection.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def increment_foo(request):\n    if not hasattr(request.conn_info.ctx, \"foo\"):\n        request.conn_info.ctx.foo = 0\n    request.conn_info.ctx.foo += 1\n\n@app.get(\"/\")\nasync def count_foo(request):\n    return text(f\"request.conn_info.ctx.foo={request.conn_info.ctx.foo}\")\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 localhost:8000 localhost:8000\nrequest.conn_info.ctx.foo=1\nrequest.conn_info.ctx.foo=2\nrequest.conn_info.ctx.foo=3\n```\n\n----------------------------------------\n\nTITLE: Server Response for Sanic Endpoint\nDESCRIPTION: The expected response from the Sanic server when accessing the root endpoint, simply displaying 'OK!' to confirm the server is working correctly.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nOK!\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a Dictionary in Sanic\nDESCRIPTION: Demonstrates how to use update_config to load configuration values directly from a Python dictionary. This is useful for programmatically generated configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp.update_config({\"A\": 1, \"B\": 2})\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy Configuration for Sanic\nDESCRIPTION: A simple Caddyfile configuration that sets up a reverse proxy for a Sanic application. This is equivalent to the one-line command above but in a configuration file format.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/caddy.md#2025-04-10_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n    reverse_proxy localhost:8001\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Error Format for a Route\nDESCRIPTION: Example of specifying the error format for a specific route.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.request(\"/\", error_format=\"text\")\nasync def handler(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple HTTP Methods with Function-Based Views in Python\nDESCRIPTION: This snippet demonstrates the traditional approach of handling multiple HTTP methods using separate functions or a single function with conditional logic. It highlights the potential maintenance issues with this approach.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def foo_get(request):\n    ...\n\n@app.post(\"/foo\")\nasync def foo_post(request):\n    ...\n\n@app.put(\"/foo\")\nasync def foo_put(request):\n    ...\n\n@app.route(\"/bar\", methods=[\"GET\", \"POST\", \"PATCH\"])\nasync def bar(request):\n    if request.method == \"GET\":\n        ...\n    elif request.method == \"POST\":\n        ...\n    elif request.method == \"PATCH\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with Dictionary\nDESCRIPTION: Demonstrates how to extend a Sanic application with custom configuration for Sanic Extensions using a dictionary approach, which is optional when using Sanic Extensions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.extend(config={\"oas_url_prefix\": \"/apidocs\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Tasks in Sanic\nDESCRIPTION: Example showing how to retrieve a previously created named task using the app.get_task() method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask = app.get_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Logging in Sanic (Python)\nDESCRIPTION: A simple example of setting up basic logging in a Sanic application. It demonstrates how to use the default logging configuration and access the logger within a route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/best-practices/logging.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.log import logger\nfrom sanic.response import text\n\napp = Sanic('logging_example')\n\n@app.route('/')\nasync def test(request):\n    logger.info('Here is your log')\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n  app.run(debug=True, access_log=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Type Converters for Sanic Configuration\nDESCRIPTION: Shows how to add custom type converters for configuration values in Sanic. This feature was introduced in v21.12 and allows for converting values to additional types like UUID.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(..., config=Config(converters=[UUID]))\n```\n\n----------------------------------------\n\nTITLE: Running a Proxied Sanic Application\nDESCRIPTION: Command to run the Sanic application with proxy support enabled. The SANIC_PROXIES_COUNT environment variable tells Sanic to trust the X-Forwarded-* headers from Caddy.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/caddy.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSANIC_PROXIES_COUNT=1 sanic proxied_example --port 8001\n```\n\n----------------------------------------\n\nTITLE: Raising a SanicException with Custom Status Code\nDESCRIPTION: Example of raising a SanicException with a custom status code in a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import SanicException\n\n@app.route(\"/youshallnotpass\")\nasync def no_no(request):\n        raise SanicException(\"Something went wrong.\", status_code=501)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Methods for a Route in Sanic Python\nDESCRIPTION: This snippet shows how to define a route that responds to multiple HTTP methods in Sanic. It demonstrates the use of the @app.route decorator with multiple methods specified.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-testing/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/home\", methods=[\"GET\", \"POST\"])\nasync def home(request):\n    if request.method == \"POST\":\n        return text(\"You POSTed to the home page\")\n    return text(\"Hello, home page!\")\n```\n\n----------------------------------------\n\nTITLE: Copying Blueprints in Sanic\nDESCRIPTION: Demonstrates how to copy a blueprint to create a new instance with all attached routes and middleware in Sanic v21.9. This new feature allows for more flexible blueprint composition.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nv1 = Blueprint(\"Version1\", version=1)\n\n@v1.route(\"/something\")\ndef something(request):\n    pass\n\nv2 = v1.copy(\"Version2\", version=2)\n\napp.blueprint(v1)\napp.blueprint(v2)\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Routes in Sanic (Python)\nDESCRIPTION: Shows how to use app.url_for() to generate URLs for routes dynamically, including handling of query parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\nasync def index(request):\n    # generate a URL for the endpoint `post_handler`\n    url = app.url_for('post_handler', post_id=5)\n\n    # Redirect to `/posts/5`\n    return redirect(url)\n\n\n@app.route('/posts/<post_id>')\nasync def post_handler(request, post_id):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Gunicorn in Python\nDESCRIPTION: Demonstrates how to use Gunicorn with Sanic workers for production deployment. This setup allows for better process management and scaling capabilities.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/server-choice.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngunicorn myapp:app --worker-class sanic.worker.GunicornWorker\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sanic Application Using AppLoader\nDESCRIPTION: Advanced implementation using AppLoader to create dynamic Sanic instances across worker processes, with customizable application names and endpoint attachment.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/app-loader.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom functools import partial\n\nfrom sanic import Request, Sanic, json\nfrom sanic.worker.loader import AppLoader\n\n\ndef attach_endpoints(app: Sanic):\n    @app.get(\"/\")\n    async def handler(request: Request):\n        return json({\"app_name\": request.app.name})\n\n\ndef create_app(app_name: str) -> Sanic:\n    app = Sanic(app_name)\n    attach_endpoints(app)\n    return app\n\n\nif __name__ == \"__main__\":\n    app_name = sys.argv[-1]\n    loader = AppLoader(factory=partial(create_app, app_name))\n    app = loader.load()\n    app.prepare(port=9999, dev=True)\n    Sanic.serve(primary=app, app_loader=loader)\n```\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/server.py MyTestAppName\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Context in Different Sanic Handlers\nDESCRIPTION: Demonstrates how to access the shared Queue object from different request handlers and middleware\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.9.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_starts\nasync def before_server_starts(app):\n    assert isinstance(app.shared_ctx.queue, Queue)\n\n@app.on_request\nasync def on_request(request):\n    assert isinstance(request.app.shared_ctx.queue, Queue)\n\n@app.get(\"/\")\nasync def handler(request):\n    assert isinstance(request.app.shared_ctx.queue, Queue)\n```\n\n----------------------------------------\n\nTITLE: Basic Docstring Documentation in Sanic\nDESCRIPTION: Shows how Sanic parses function docstrings to generate API documentation, using the first line as summary and remaining content as description. The example demonstrates markdown support in docstrings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    It is helpful to know that you could also use **markdown** inside your\n    docstrings.\n\n    - one\n    - two\n    - three\"\"\"\n    return text(\">>>\")\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/foo\": {\n      \"get\": {\n        \"summary\": \"This is a simple foo handler\",\n        \"description\": \"It is helpful to know that you could also use **markdown** inside your<br>docstrings.<br><br>- one<br>- two<br>- three\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"operationId\": \"get_handler\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in Sanic\nDESCRIPTION: This snippet shows how to set the request timeout in Sanic. It demonstrates setting both the request_timeout and request_timeout_config parameters to control how long the server will wait for the entire request to be received.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.REQUEST_TIMEOUT = 60\napp.run(request_timeout=60)\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy Dependencies for Sanic\nDESCRIPTION: Installation commands for SQLAlchemy and aiomysql to support async operations with Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -U sqlalchemy\npip install -U aiomysql\n```\n\n----------------------------------------\n\nTITLE: Customizing Route Names in Sanic (Python)\nDESCRIPTION: Demonstrates how to customize route names using the 'name' parameter when defining routes, and how to use these custom names with url_for().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/get\", name=\"get_handler\")\ndef handler(request):\n    return text(\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple TLS Certificates for Different Domains in Sanic\nDESCRIPTION: Demonstrates how to configure Sanic to use different certificates based on the hostname the client is connecting to. This allows serving multiple domains with their own certificates from a single server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nssl = [\"certs/example.com/\", \"certs/bigcorp.test/\"]\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic myserver:app\n    --tls certs/example.com/\n    --tls certs/bigcorp.test/\n    --tls-strict-host\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception with Static Message in Sanic\nDESCRIPTION: Creates a custom TeapotError exception with a static message and status code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\n----------------------------------------\n\nTITLE: Simplified Websocket Handler Loop in Sanic\nDESCRIPTION: Demonstrates a more concise way to implement a websocket handler using a for loop to iterate over the Websocket object. This method was introduced in Sanic v22.9 and simplifies the message handling process.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/websockets.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    async for msg in ws:\n        await ws.send(msg)\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenAPI YAML Documentation in Sanic\nDESCRIPTION: Demonstrates how to extend API documentation using OpenAPI YAML within docstrings, including operation ID, tags, parameters, and response definitions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/autodoc.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    Now we will add some more details\n\n    openapi:\n    ---\n    operationId: fooDots\n    tags:\n      - one\n      - two\n    parameters:\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        required: false\n        schema:\n          type: integer\n          format: int32\n    responses:\n      '200':\n        description: Just some dots\n    \"\"\"\n    return text(\"...\")\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/foo\": {\n      \"get\": {\n        \"operationId\": \"fooDots\",\n        \"summary\": \"This is a simple foo handler\",\n        \"description\": \"Now we will add some more details\",\n        \"tags\": [\n          \"one\",\n          \"two\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Just some dots\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Websocket Decorator in Sanic\nDESCRIPTION: Demonstrates how to implement a websocket route using Sanic's websocket decorator. This approach provides a cleaner syntax for defining websocket endpoints while maintaining the same functionality.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/test\")\nasync def handler(request, ws):\n    messgage = \"Start\"\n    while True:\n        await ws.send(message)\n        message = ws.recv()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronous Handler with Sleep in Sanic\nDESCRIPTION: Example of a synchronous handler that uses time.sleep() to simulate processing time. This approach is less efficient as it blocks the event loop during execution.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/handlers.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/sync\")\ndef sync_handler(request):\n    time.sleep(0.1)\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Domain Name Restrictions in Sanic\nDESCRIPTION: Shows how to restrict TLS connections to specific domain names by providing a dictionary with certificate details and a list of allowed domain names. This example allows connections only to example.com and subdomains of bigcorp.test.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nssl = [\n    None,  # No fallback if names do not match!\n    {\n        \"cert\": \"certs/example.com/fullchain.pem\",\n        \"key\": \"certs/example.com/privkey.pem\",\n        \"names\": [\"example.com\", \"*.bigcorp.test\"],\n    }\n]\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Fallback Error Format in Sanic\nDESCRIPTION: Configures Sanic to automatically choose the appropriate fallback error format.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Settings in Sanic\nDESCRIPTION: Shows the default configuration settings for websockets in Sanic. These settings control the maximum size of websocket messages, ping interval, and ping timeout.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/websockets.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.config.WEBSOCKET_MAX_SIZE = 2 ** 20\napp.config.WEBSOCKET_PING_INTERVAL = 20\napp.config.WEBSOCKET_PING_TIMEOUT = 20\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI UI Options in Sanic Extensions\nDESCRIPTION: This table lists the configuration options for customizing the OpenAPI UI in Sanic Extensions. It includes options for enabling/disabling specific HTTP methods, customizing HTML templates, setting default UI, and configuring URI paths for various components.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/ui.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Key**                    | **Type**        | **Default**         | **Desctiption**                                              |\n| -------------------------- | --------------- | ------------------- | ------------------------------------------------------------ |\n| `OAS_IGNORE_HEAD`          | `bool`          | `True`              | Whether to display `HEAD` endpoints.                         |\n| `OAS_IGNORE_OPTIONS`       | `bool`          | `True`              | Whether to display `OPTIONS` endpoints.                      |\n| `OAS_PATH_TO_REDOC_HTML`   | `Optional[str]` | `None`              | Path to HTML to override the default Redoc HTML              |\n| `OAS_PATH_TO_SWAGGER_HTML` | `Optional[str]` | `None`              | Path to HTML to override the default Swagger HTML            |\n| `OAS_UI_DEFAULT`           | `Optional[str]` | `\"redoc\"`           | Can be set to `redoc` or `swagger`. Controls which UI to display on the base route. If set to `None`, then the base route will not be setup. |\n| `OAS_UI_REDOC`             | `bool`          | `True`              | Whether to enable Redoc UI.                                  |\n| `OAS_UI_SWAGGER`           | `bool`          | `True`              | Whether to enable Swagger UI.                                |\n| `OAS_URI_TO_CONFIG`        | `str`           | `\"/openapi-config\"` | URI path to the OpenAPI config used by Swagger               |\n| `OAS_URI_TO_JSON`          | `str`           | `\"/openapi.json\"`   | URI path to the JSON document.                               |\n| `OAS_URI_TO_REDOC`         | `str`           | `\"/redoc\"`          | URI path to Redoc.                                           |\n| `OAS_URI_TO_SWAGGER`       | `str`           | `\"/swagger\"`        | URI path to Swagger.                                         |\n| `OAS_URL_PREFIX`           | `str`           | `\"/docs\"`           | URL prefix to use for the Blueprint for OpenAPI docs.        |\n```\n\n----------------------------------------\n\nTITLE: Configuring Noisy Exceptions in Sanic\nDESCRIPTION: Demonstrates how to enable noisy exceptions in Sanic, which forces all exceptions to be logged regardless of their 'quiet' property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\napp.config.NOISY_EXCEPTIONS = True\n```\n\n----------------------------------------\n\nTITLE: Using Current Request Getter in Sanic\nDESCRIPTION: Shows how to access the current request from locations where it's not directly available, such as in logging formatters, using Request.get_current().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom sanic import Request, Sanic, json\nfrom sanic.exceptions import SanicException\nfrom sanic.log import LOGGING_CONFIG_DEFAULTS\n\nLOGGING_FORMAT = (\n    \"%(asctime)s - (%(name)s)[%(levelname)s][%(host)s]: \"\n    \"%(request_id)s %(request)s %(message)s %(status)d %(byte)d\"\n)\n\nold_factory = logging.getLogRecordFactory()\n\n\ndef record_factory(*args, **kwargs):\n    record = old_factory(*args, **kwargs)\n    record.request_id = \"\"\n\n    try:\n        request = Request.get_current()\n    except SanicException:\n        ...\n    else:\n        record.request_id = str(request.id)\n\n    return record\n\n\nlogging.setLogRecordFactory(record_factory)\n\nLOGGING_CONFIG_DEFAULTS[\"formatters\"][\"access\"][\"format\"] = LOGGING_FORMAT\n\napp = Sanic(\"Example\", log_config=LOGGING_CONFIG_DEFAULTS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Response Handlers in Python with Sanic\nDESCRIPTION: Examples of both synchronous and asynchronous response handlers in Sanic. These handlers accept a request parameter and return an HTTPResponse instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/handlers.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef i_am_a_handler(request):\n    return HTTPResponse()\n\nasync def i_am_ALSO_a_handler(request):\n    return HTTPResponse()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rules in Sanic using Python\nDESCRIPTION: Demonstrates how to create and use custom validation rules in a Sanic application. It defines a custom validator for checking if a string is in uppercase.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/validation.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom sanic_validation import validate_json\n\napp = Sanic(__name__)\n\ndef is_uppercase(field, value, error):\n    if not value.isupper():\n        error(field, \"Must be uppercase\")\n\n@app.route(\"/\")\n@validate_json({\"name\": {\"type\": \"string\", \"required\": True, \"validator\": is_uppercase}})\nasync def hello(request):\n    return json({\"hello\": request.json[\"name\"]})\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Fallback Error Format in Sanic\nDESCRIPTION: Sets the fallback error format to JSON for Sanic application responses.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"json\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Simple Server from Command Line\nDESCRIPTION: Demonstrates how to use Sanic's Simple Server to serve static files from a directory, with options for auto-reloading.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsanic ./path/to/dir --simple\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic ./path/to/dir --simple --reload --reload-dir=./path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception with Default Message in Python\nDESCRIPTION: Demonstrates how to create a custom exception class with a default message in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomError(SanicException):\n    message = \"Something bad happened\"\n\nraise CustomError\n# or\nraise CustomError(\"Override the default message with something else\")\n```\n\n----------------------------------------\n\nTITLE: Explicitly Injecting App into Background Task\nDESCRIPTION: Demonstrates how to explicitly pass the app instance to a background task when adding it to Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def explicit_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(explicit_inject(app))\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Sanic\nDESCRIPTION: Demonstrates how to access configuration values from a Sanic application using dot notation and dictionary-style syntax.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_settings = {\n    \"DB_HOST\": app.config.DB_HOST,\n    \"DB_NAME\": app.config[\"DB_NAME\"],\n    \"DB_USER\": app.config.get(\"DB_USER\", \"default_user\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handler Using add() Method in Sanic\nDESCRIPTION: Shows how to add an error handler using the add() method of the error_handler in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def server_error_handler(request, exception):\n    return text(\"Oops, server error\", status=500)\n\napp.error_handler.add(Exception, server_error_handler)\n```\n\n----------------------------------------\n\nTITLE: Sanic CLI Help Output\nDESCRIPTION: The complete help output from the Sanic CLI command, showing all available options and arguments for running Sanic applications.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ sanic --help\n\n   ▄███ █████ ██      ▄█▄      ██       █   █   ▄██████████\n  ██                 █   █     █ ██     █   █  ██\n   ▀███████ ███▄    ▀     █    █   ██   ▄   █  ██\n               ██  █████████   █     ██ █   █  ▄▄\n  ████ ████████▀  █         █  █       ██   █   ▀██ ███████\n\n\n To start running a Sanic application, provide a path to the module, where\n app is a Sanic() instance:\n\n     $ sanic path.to.server:app\n\n Or, a path to a callable that returns a Sanic() instance:\n\n     $ sanic path.to.factory:create_app --factory\n\n Or, a path to a directory to run as a simple HTTP server:\n\n     $ sanic ./path/to/static --simple\n\nRequired\n========\n  Positional:\n    module              Path to your Sanic app. Example: path.to.server:app\n                        If running a Simple Server, path to directory to serve. Example: ./\n\nOptional\n========\n  General:\n    -h, --help          show this help message and exit\n    --version           show program's version number and exit\n\n  Application:\n    --factory           Treat app as an application factory, i.e. a () -> <Sanic app> callable\n    -s, --simple        Run Sanic as a Simple Server, and serve the contents of a directory\n                        (module arg should be a path)\n    --inspect           Inspect the state of a running instance, human readable\n    --inspect-raw       Inspect the state of a running instance, JSON output\n    --trigger-reload    Trigger worker processes to reload\n    --trigger-shutdown  Trigger all processes to shutdown\n\n  HTTP version:\n    --http {1,3}        Which HTTP version to use: HTTP/1.1 or HTTP/3. Value should\n                        be either 1, or 3. [default 1]\n    -1                  Run Sanic server using HTTP/1.1\n    -3                  Run Sanic server using HTTP/3\n\n  Socket binding:\n    -H HOST, --host HOST\n                        Host address [default 127.0.0.1]\n    -p PORT, --port PORT\n                        Port to serve on [default 8000]\n    -u UNIX, --unix UNIX\n                        location of unix socket\n\n  TLS certificate:\n    --cert CERT         Location of fullchain.pem, bundle.crt or equivalent\n    --key KEY           Location of privkey.pem or equivalent .key file\n    --tls DIR           TLS certificate folder with fullchain.pem and privkey.pem\n                        May be specified multiple times to choose multiple certificates\n    --tls-strict-host   Only allow clients that send an SNI matching server certs\n\n  Worker:\n    -w WORKERS, --workers WORKERS\n                        Number of worker processes [default 1]\n    --fast              Set the number of workers to max allowed\n    --single-process    Do not use multiprocessing, run server in a single process\n    --legacy            Use the legacy server manager\n    --access-logs       Display access logs\n    --no-access-logs    No display access logs\n\n  Development:\n    --debug             Run the server in debug mode\n    -r, --reload, --auto-reload\n                        Watch source directory for file changes and reload on changes\n    -R PATH, --reload-dir PATH\n                        Extra directories to watch and reload on changes\n    -d, --dev           debug + auto reload\n    --auto-tls          Create a temporary TLS certificate for local development (requires mkcert or trustme)\n\n  Output:\n    --coffee            Uhm, coffee?\n    --no-coffee         No uhm, coffee?\n    --motd              Show the startup display\n    --no-motd           No show the startup display\n    -v, --verbosity     Control logging noise, eg. -vv or --verbosity=2 [default 0]\n    --noisy-exceptions  Output stack traces for all exceptions\n    --no-noisy-exceptions\n                        No output stack traces for all exceptions\n```\n\n----------------------------------------\n\nTITLE: Raising an Exception with Context\nDESCRIPTION: Example of raising a SanicException with additional context information.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Encoder in Sanic (Python)\nDESCRIPTION: Demonstrates how to use a custom JSON encoder (orjson in this case) for JSON responses in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/response.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import dumps\n\njson({\"foo\": \"bar\"}, dumps=dumps)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Named Tasks in Sanic\nDESCRIPTION: Example demonstrating how to cancel a named task using the app.cancel_task() method, which must be awaited.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait app.cancel_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer Function in Sanic\nDESCRIPTION: Creating and using a custom serializer function with the @serializer decorator. The custom function adds request ID and action data to the response payload, returning a JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/convenience.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef message(retval, request, action, status):\n    return json(\n        {\n            \"request_id\": str(request.id),\n            \"action\": action,\n            \"message\": retval,\n        },\n        status=status,\n    )\n\n\n@app.post(\"/<action>\")\n@serializer(message)\nasync def do_action(request, action: str):\n    return \"This is a message\"\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Environment Variables\nDESCRIPTION: Shows how to load configuration values from environment variables into a Sanic application. This is useful for containerized applications and following the 12-factor app methodology.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.config.FEATURES_ENABLED = os.environ.get(\"FEATURES_ENABLED\", True)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Data to Sanic Exception\nDESCRIPTION: Shows how to add extra data to a Sanic exception using the extra parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Managing WebSocket Tasks in Sanic\nDESCRIPTION: Demonstrates a pattern for managing background tasks with WebSockets in Sanic, including creating, cancelling, and purging tasks.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def receiver(ws):\n    while True:\n        message = await ws.recv()\n        if not message:\n            break\n        print(f\"Received: {message}\")\n\n@app.websocket(\"/feed\")\nasync def feed(request, ws):\n    task_name = f\"receiver:{request.id}\"\n    request.app.add_task(receiver(ws), name=task_name)\n    try:\n        while True:\n            await request.app.event(\"my.custom.event\")\n            await ws.send(\"A message\")\n    finally:\n        # 当 websocket 关闭连接的时候，我们可以清除所有的任务。\n        await request.app.cancel_task(task_name)\n        request.app.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Custom Inspector Implementation\nDESCRIPTION: Demonstrates how to create a custom Inspector by subclassing the Inspector class and adding custom methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import json\nfrom sanic.worker.inspector import Inspector\n\n\nclass MyInspector(Inspector):\n    async def something(self, *args, **kwargs):\n        print(args)\n        print(kwargs)\n\n\napp = Sanic(\"TestApp\", inspector_class=MyInspector, inspector=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a Python Class\nDESCRIPTION: Demonstrates loading configuration from a Python class into a Sanic application. This approach provides structure and organization to configuration values.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BaseConfig:\n    TESTING = False\n    DEBUG = False\n\n\nclass DevConfig(BaseConfig):\n    DEBUG = True\n\n\nclass TestConfig(BaseConfig):\n    TESTING = True\n\n\napp.config.from_object(DevConfig)\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a Python Dictionary\nDESCRIPTION: Shows how to load configuration parameters into a Sanic application from a Python dictionary. This method can be useful when configuration is constructed dynamically or comes from an external source.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/configuration.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncfg = {\n    \"KEEP_ALIVE_TIMEOUT\": 75,\n    \"STRICT_SLASHES\": False,\n}\napp.config.update(cfg)\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration Using from_object Method\nDESCRIPTION: Shows how to load configuration values from a Python object or module into a Sanic application using the from_object method. This allows for structured configuration management.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport myapp.default_settings\napp.config.from_object(myapp.default_settings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Noisy Exceptions in Sanic\nDESCRIPTION: Shows how to configure Sanic to log all exceptions regardless of the quiet property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.config.NOISY_EXCEPTIONS = True\n```\n\n----------------------------------------\n\nTITLE: Alternative HTTP Method Route Decorators in Sanic\nDESCRIPTION: Demonstrates using HTTP method-specific decorators in Sanic, which is an alternative to using the methods parameter. These decorators create routes that respond only to specific HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.post(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.put(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.delete(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.patch(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.head(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n\n@app.options(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Custom Inspector CLI Usage\nDESCRIPTION: Shows how to use custom Inspector methods via CLI with various parameter types.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect something one two three --four --no-five --six=6\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Task in Sanic\nDESCRIPTION: Example of creating a simple background task that runs after the Sanic server starts, using app.add_task() to schedule an async function that waits 5 seconds before printing a message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def notify_server_started_after_five_seconds():\n    await asyncio.sleep(5)\n    print('Server successfully started!')\n\napp.add_task(notify_server_started_after_five_seconds())\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application from Command Line\nDESCRIPTION: Demonstrates how to execute a Sanic application from the command line by running the Python script containing app.run().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Service Injection using High-Level API in Sanic\nDESCRIPTION: Demonstrates how to inject a service (database connection) using the high-level dependency API. It creates a FakeConnection object and injects it directly into the request handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/injection.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n\n@app.before_server_start\nasync def setup_db(app, _):\n    db_conn = FakeConnection()\n    app.ext.dependency(db_conn)\n\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple HTTP Methods with HTTPMethodView in Sanic\nDESCRIPTION: This snippet provides a comprehensive example of implementing various HTTP methods (GET, POST, PUT, PATCH, DELETE) using a class-based view in Sanic. It shows how to define each method and add the route to the Sanic app.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import text\n\nclass SimpleView(HTTPMethodView):\n\n  def get(self, request):\n      return text(\"I am get method\")\n\n  # You can also use async syntax\n  async def post(self, request):\n      return text(\"I am post method\")\n\n  def put(self, request):\n      return text(\"I am put method\")\n\n  def patch(self, request):\n      return text(\"I am patch method\")\n\n  def delete(self, request):\n      return text(\"I am delete method\")\n\napp.add_route(SimpleView.as_view(), \"/\")\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of Flexible Decorator With and Without Arguments\nDESCRIPTION: Examples showing how to apply a flexible decorator both with and without arguments to Sanic route handlers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar(arg1=1, arg2=2)\nasync def handler(request: Request):\n    return text(\"hi\")\n\n@app.get(\"/\")\n@foobar\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Environment Variable Prefix for Sanic Configuration\nDESCRIPTION: Shows how to change the prefix Sanic looks for when loading configuration from environment variables. This allows you to use a custom prefix like MYAPP_ instead of the default SANIC_.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export MYAPP_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> app = Sanic(__name__, load_env='MYAPP_')\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Long-Running Process for Sanic\nDESCRIPTION: Implements a custom process that can be managed by Sanic. The process runs in a loop and handles KeyboardInterrupt to properly respond to shutdown signals.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\n\ndef my_process(foo):\n    try:\n        while True:\n            sleep(1)\n    except KeyboardInterrupt:\n        print(\"done\")\n```\n\n----------------------------------------\n\nTITLE: Request Match Info Modification Example\nDESCRIPTION: Shows how to modify request match_info in middleware using a conversion function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.3.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\ndef convert_to_snake_case(request):\n    request.match_info = to_snake(request.match_info)\n```\n\n----------------------------------------\n\nTITLE: Additional Constructor for Dependency Injection in Sanic\nDESCRIPTION: Shows how to use a custom constructor for dependency injection. It injects two objects (PersonID and Person) and uses a class method as a constructor.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/injection.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass PersonID:\n    person_id: int\n\n\n@dataclass\nclass Person:\n    person_id: PersonID\n    name: str\n    age: int\n\n    @classmethod\n    async def create(cls, request: Request, person_id: int):\n        return cls(person_id=PersonID(person_id), name=\"noname\", age=111)\n\n\n\napp.ext.add_dependency(Person, Person.create)\napp.ext.add_dependency(PersonID)\n\n@app.get(\"/person/<person_id:int>\")\nasync def person_details(\n    request: Request, person_id: PersonID, person: Person\n):\n    return text(f\"{person_id}\\n{person}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Slashes Matching at Application Level in Sanic\nDESCRIPTION: Shows how to enable strict slash matching for all routes in a Sanic application. When strict_slashes is enabled, the router will strictly match trailing slashes in URL paths.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# 为应用程序下所有的路由都启用严格匹配模式\napp = Sanic(__file__, strict_slashes=True)\n```\n\n----------------------------------------\n\nTITLE: Complex Blueprint Composition\nDESCRIPTION: Shows advanced Blueprint composition with multiple groups and routes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(__name__)\nblueprint_1 = Blueprint(\"blueprint_1\", url_prefix=\"/bp1\")\nblueprint_2 = Blueprint(\"blueprint_2\", url_prefix=\"/bp2\")\ngroup = Blueprint.group(\n    blueprint_1,\n    blueprint_2,\n    version=1,\n    version_prefix=\"/api/v\",\n    url_prefix=\"/grouped\",\n    strict_slashes=True,\n)\nprimary = Blueprint.group(group, url_prefix=\"/primary\")\n\n\n@blueprint_1.route(\"/\")\ndef blueprint_1_default_route(request):\n    return text(\"BP1_OK\")\n\n\n@blueprint_2.route(\"/\")\ndef blueprint_2_default_route(request):\n    return text(\"BP2_OK\")\n\n\napp.blueprint(group)\napp.blueprint(primary)\napp.blueprint(blueprint_1)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Nginx\nDESCRIPTION: Docker Compose configuration that sets up an Nginx container with port mapping and volume binding for the configuration file.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/mounting.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# docker-compose.yml\nversion: \"3.7\"\nservices:\n  app:\n    image: nginx:alpine\n    ports:\n      - 80:80\n    volumes:\n      - type: bind\n        source: ./conf\n        target: /etc/nginx/conf.d/default.conf\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process with Sanic Manager\nDESCRIPTION: Demonstrates how to register a custom process with Sanic's process manager using the main_process_ready event listener. This allows Sanic to manage the lifecycle of the custom process.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n#   app.manager.manage(<name>, <callable>, <kwargs>)\n    app.manager.manage(\"MyProcess\", my_process, {\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Accessing Headers as Properties in Sanic\nDESCRIPTION: Demonstrates how to access request headers as properties using lowercase names with underscores instead of hyphens, making header access more intuitive.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrequest.headers.host\nrequest.headers.user_agent\nrequest.headers.x_request_id\n```\n\n----------------------------------------\n\nTITLE: Passing Context to Signal Handlers in Sanic\nDESCRIPTION: Shows how to pass additional context data to signal handlers when dispatching an event. This allows providing extra information needed by the handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/signals.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"user.registration.created\")\nasync def send_registration_email(**context):\n    print(context)\n\nawait app.dispatch(\n    \"user.registration.created\",\n    context={\"hello\": \"world\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Request Validation in Sanic using Python\nDESCRIPTION: Demonstrates how to set up basic request validation in a Sanic application using the Sanic-Validation library. It defines validation rules for different request parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/validation.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom sanic_validation import validate_json\n\napp = Sanic(__name__)\n\n@app.route(\"/\")\n@validate_json({\"name\": {\"type\": \"string\", \"required\": True, \"empty\": False},\n               \"age\": {\"type\": \"integer\", \"required\": True, \"min\": 18}})\nasync def hello(request):\n    return json({\"hello\": request.json[\"name\"]})\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Cancelling Named Background Task in Sanic\nDESCRIPTION: Demonstrates how to cancel a named background task in Sanic using the cancel_task method. This operation is asynchronous and requires the await keyword.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait app.cancel_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Blueprint Exception Handling\nDESCRIPTION: Shows how to implement exception handlers specific to a Blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@bp.exception(NotFound)\ndef ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Hello World Page\nDESCRIPTION: This HTML snippet defines the structure of the 'Hello World' page. It includes meta tags for proper rendering, links to a CSS file, and contains a simple div with the 'Hello world!' text.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/static-redirects.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<link rel=\"stylesheet\" href=\"/hello_world.css\">\n<body>\n    <div id='hello_world'>\n        Hello world!\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Sanic App with SQLAlchemy Async Engine\nDESCRIPTION: Setting up a Sanic application with SQLAlchemy's async engine for MySQL database connections.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sanic import Sanic\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\napp = Sanic(\"my_app\")\n\nbind = create_async_engine(\"mysql+aiomysql://root:root@localhost/test\", echo=True)\n```\n\n----------------------------------------\n\nTITLE: Required Import Statements for Sanic Decorators\nDESCRIPTION: Essential imports needed for creating decorators in Sanic, including functools.wraps to preserve function metadata and inspect.isawaitable to handle both regular and async functions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/decorators.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inspect import isawaitable\nfrom functools import wraps\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic-Validation Library in Python\nDESCRIPTION: Shows how to install the Sanic-Validation library using pip. This library is used for request validation in Sanic applications.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/validation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic-validation\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Docker Container\nDESCRIPTION: Shell command to run a Docker container from the previously built image. The container is named 'mysanic', runs in detached mode, and maps port 8000 from the container to port 8000 on the host.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name mysanic -p 8000:8000 -d my-sanic-image\n```\n\n----------------------------------------\n\nTITLE: Late Registration of Blueprint Routes\nDESCRIPTION: Demonstrates how routes can be added to a Blueprint after it has been registered with the application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.blueprint(bp)\n\n@bp.route(\"/\")\nasync def bp_root(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Registering Routes with Mayim Executor\nDESCRIPTION: Example of registering a route handler using Mayim's executor for database operations in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request: Request, executor: CountryExecutor):\n    countries = await executor.select_all_countries()\n    return json({\"countries\": [country.dict() for country in co\n```\n\n----------------------------------------\n\nTITLE: Registering Routes with SQLAlchemy in Sanic\nDESCRIPTION: Example of registering route handlers using SQLAlchemy for database operations in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import selectinload\nfrom sanic.response import json\n\nfrom models import Car, Person\n\n\n@app.post(\"/user\")\nasync def create_user(request):\n    session = request.ctx.session\n    async with session.begin():\n        car = Car(brand=\"Tesla\")\n        person = Person(name=\"foo\", cars=[car])\n        session.add_all([person])\n    return json(person.to_dict())\n\n\n@app.get(\"/user/<pk:int>\")\nasync def get_user(request, pk):\n    session = request.ctx.session\n    async with session.begin():\n        stmt = select(Person).where(Person.id == pk).options(selectinload(Person.cars))\n        result = await session.execute(stmt)\n        person = result.scalar()\n\n    if not person:\n        return json({})\n\n    return json(person.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Sanic Hello World with Extensions (v21.9 - Deprecated)\nDESCRIPTION: A basic Sanic application that demonstrates the setup of Sanic Extensions for version 21.9 (deprecated). It shows how to manually instantiate Extensions using the Extend class.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/getting-started.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\nfrom sanic_ext import Extend\n\napp = Sanic(\"MyHelloWorldApp\")\nExtend(app)\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Inspector Host and Port\nDESCRIPTION: Sets the host and port for the Inspector's HTTP service. These configuration values control where the Inspector service will be accessible.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_HOST =  \"localhost\"\napp.config.INSPECTOR_PORT =  6457\n```\n\n----------------------------------------\n\nTITLE: Running a Sanic Application in Docker Container\nDESCRIPTION: Command to run a Sanic application in a Docker container, mapping container port 8000 to host port 8000.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/docker.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8000:8000 my-sanic-app\n```\n\n----------------------------------------\n\nTITLE: Deprecated Streaming Response Method in Sanic\nDESCRIPTION: Demonstrates the deprecated streaming response method that will be removed in v22.6. This implementation uses the old stream functionality with a custom streaming function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    return stream(sample_streaming_fn, content_type=\"text/csv\")\n```\n\n----------------------------------------\n\nTITLE: Registering Blueprint with Sanic Application\nDESCRIPTION: Shows how to register a previously created Blueprint with a Sanic application instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom my_blueprint import bp\n\napp = Sanic(__name__)\napp.blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Writing SQL Query for Mayim\nDESCRIPTION: SQL query to select all countries with their capital cities, demonstrating Mayim's SQL-first approach.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/orm.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- ./queries/select_all_countries.sql\nSELECT country.code,\n    country.name,\n    country.continent,\n    country.region,\n    (\n        SELECT row_to_json(q)\n        FROM (\n                SELECT city.id,\n                    city.name,\n                    city.district,\n                    city.population\n            ) q\n    ) capital\nFROM country\n    JOIN city ON country.capital = city.id\nORDER BY country.name ASC\nLIMIT $limit OFFSET $offset;\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Hello World Page\nDESCRIPTION: This CSS snippet defines the styling for the 'Hello World' page. It sets up the layout, colors, and background image for the page, creating a visually appealing design for the simple 'Hello world!' message.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/static-redirects.md#2025-04-10_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#hello_world {\n    width: 1000px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 100px;\n\n    padding: 100px;\n    color: aqua;\n    text-align: center;\n    font-size: 100px;\n    font-family: monospace;\n\n    background-color: rgba(0, 0, 0, 0.75);\n\n    border-radius: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.75);\n}\n\nbody {\n    background-image: url(\"/files/lake.jpg\");\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: Sanic Application Factory Pattern\nDESCRIPTION: Example of a Sanic application using the factory pattern, where a function returns a Sanic instance rather than using a global variable.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\ndef create_app() -> Sanic:\n    app = Sanic(\"MyApp\")\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File in Sanic\nDESCRIPTION: Demonstrates loading configuration values from an external Python file using the update_config method. This approach helps maintain separation between code and configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> app.update_config(\"/path/to/my_config.py\")\n>>> print(app.config.A)\n1\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Sanic Exceptions\nDESCRIPTION: Demonstrates how to add contextual information to exceptions, which will be included in the error response and can be used by clients to understand and handle the error.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt Certificate Request Command\nDESCRIPTION: Command for requesting SSL certificates from Let's Encrypt using certbot with ECDSA keys.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --key-type ecdsa --preferred-chain \"ISRG Root X1\" -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Blueprint in Sanic Python\nDESCRIPTION: Demonstrates how to create a basic Blueprint with a root route handler that returns JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/blueprints.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import json\nfrom sanic import Blueprint\n\nbp = Blueprint(\"my_blueprint\")\n\n@bp.route(\"/\")\nasync def bp_root(request):\n    return json({\"my\": \"blueprint\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Acknowledgement Timeout\nDESCRIPTION: Setting the worker acknowledgement timeout threshold for longer startup times. Value is in 0.1s increments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.manager import WorkerManager\n\nWorkerManager.THRESHOLD = 600\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt Certificate Request Command\nDESCRIPTION: Command for requesting SSL certificates from Let's Encrypt using certbot with ECDSA keys.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/tls.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --key-type ecdsa --preferred-chain \"ISRG Root X1\" -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Inspector via Config\nDESCRIPTION: Demonstrates enabling the Sanic Inspector through configuration settings after application initialization.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"TestApp\")\napp.config.INSPECTOR = True\n```\n\n----------------------------------------\n\nTITLE: Using Custom Request Objects in Handlers\nDESCRIPTION: Shows how to access custom attributes added to a custom request class within route handlers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request: CustomRequest):\n    return text(f\"User ID: {request.user_id}\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Request Objects in Handlers\nDESCRIPTION: Shows how to access custom attributes added to a custom request class within route handlers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/request.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request: CustomRequest):\n    return text(f\"User ID: {request.user_id}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-All Exception Handler\nDESCRIPTION: Example of creating a catch-all exception handler for any exception type.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.exception(Exception)\nasync def catch_anything(request, exception):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Managing Background Tasks in Sanic\nDESCRIPTION: Shows how to create, retrieve, and cancel named background tasks in Sanic applications, which allows for better control and management of asynchronous operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(dummy, name=\"dummy_task\")\ntask = app.get_task(\"dummy_task\")\n\napp.cancel_task(\"dummy_task\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Sanic Calendar Version Format\nDESCRIPTION: Shows the pattern used for Sanic's calendar versioning (calver) which follows a YY.MM.MICRO format where YY is the year, MM is the month, and MICRO is an incremental patch version starting at 0.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/org/policies.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYY.MM.MICRO\n```\n\n----------------------------------------\n\nTITLE: Using Sanic Test Client in Python\nDESCRIPTION: Shows how to use the Sanic Test Client for running tests. This method doesn't actually spin up a server, making it ideal for unit testing Sanic applications.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/server-choice.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequest, response = app.test_client.get(\"/\")\n```\n\n----------------------------------------\n\nTITLE: Custom Type Casting for Environment Variables in Sanic\nDESCRIPTION: Demonstrates how to add custom type converters for environment variables in Sanic configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(..., config=Config(converters=[UUID]))\n```\n\n----------------------------------------\n\nTITLE: Instantiating SanicTestClient in Python\nDESCRIPTION: Shows how to manually instantiate the SanicTestClient for more control over the testing process. This approach allows for custom configuration of the test client.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing.testing import SanicTestClient\n\ntest_client = SanicTestClient(app)\ntest_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Sanic Decorators\nDESCRIPTION: Imports necessary modules for implementing decorators in Sanic, including 'isawaitable' for handling both regular and async functions, and 'wraps' for preserving function metadata.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inspect import isawaitable\nfrom functools import wraps\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/2 in Sanic\nDESCRIPTION: This code shows how to enable HTTP/2 support in Sanic. It sets the h2 parameter to True when running the server, allowing it to use the HTTP/2 protocol for improved performance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/README.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.run(h2=True)\n```\n\n----------------------------------------\n\nTITLE: Using SanicTestClient in Python\nDESCRIPTION: Demonstrates how to use the regular SanicTestClient for testing Sanic applications. This client runs an actual version of the Sanic Server on the local network for each test.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.test_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorator without Arguments in Sanic\nDESCRIPTION: Creates a decorator that doesn't take any arguments. It demonstrates how to wrap a function and handle both regular and async responses without the need for calling the decorator.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/decorators.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(func):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator(func)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Server with Multiple TLS Certificates\nDESCRIPTION: Demonstrates how to configure a Sanic server to use multiple TLS certificates for different domains.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_20\n\nLANGUAGE: python\nCODE:\n```\napp.run(\n    ssl=[\n        \"/etc/letsencrypt/live/example.com/\",\n        \"/etc/letsencrypt/live/mysite.example/\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Managing WebSocket Tasks with Named Tasks\nDESCRIPTION: Comprehensive example showing a practical pattern for using named tasks with WebSockets, including task creation, cancellation, and cleanup.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/tasks.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def receiver(ws):\n    while True:\n        message = await ws.recv()\n        if not message:\n            break\n        print(f\"Received: {message}\")\n\n@app.websocket(\"/feed\")\nasync def feed(request, ws):\n    task_name = f\"receiver:{request.id}\"\n    request.app.add_task(receiver(ws), name=task_name)\n    try:\n        while True:\n            await request.app.event(\"my.custom.event\")\n            await ws.send(\"A message\")\n    finally:\n        # When the websocket closes, let's cleanup the task\n        await request.app.cancel_task(task_name)\n        request.app.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Single Process Mode\nDESCRIPTION: Command to run Sanic in single process mode, which disables auto-reload and the worker manager but can be useful in certain environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --single-process\n```\n\n----------------------------------------\n\nTITLE: Single Static File Configuration in Sanic\nDESCRIPTION: Sets up a route for serving a single static file in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/\", \"/path/to/index.html\")\n```\n\n----------------------------------------\n\nTITLE: Defining Route with HTTP Methods in Sanic\nDESCRIPTION: Shows how to create a route that explicitly declares which HTTP methods it accepts. This example creates a route that accepts both GET and POST requests.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a File\nDESCRIPTION: Demonstrates loading configuration values from a Python file using the from_pyfile method. This is useful for managing configuration in separate deployment-specific files.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.config.from_pyfile(\"/etc/myapp/config.py\")\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to All Methods in Sanic Class-Based Views\nDESCRIPTION: This example demonstrates how to apply decorators to all methods in a Sanic class-based view using the decorators class variable. The decorator will be applied to all HTTP methods in the view.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithDecorator(HTTPMethodView):\n  decorators = [some_decorator_here]\n\n  def get(self, request, name):\n    return text(\"Hello I have a decorator\")\n\n  def post(self, request, name):\n    return text(\"Hello I also have a decorator\")\n\napp.add_route(ViewWithDecorator.as_view(), \"/url\")\n```\n\n----------------------------------------\n\nTITLE: Using eof() Method for Inline Streaming Responses\nDESCRIPTION: Demonstrates the new eof() method for inline streaming responses, which should be called once the final data has been pushed to the client to properly terminate the response stream.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def test(request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n    await response.eof()\n    return response\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Sanic Exception\nDESCRIPTION: Demonstrates how to set custom headers when raising a Sanic exception.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyException(SanicException):\n    headers = {\n      \"X-Foo\": \"bar\"\n    }\n\nraise MyException\n# or\nraise InvalidUsage(\"blah blah\", headers={\n    \"X-Foo\": \"bar\"\n})\n```\n\n----------------------------------------\n\nTITLE: Blueprint Group Configuration in Sanic\nDESCRIPTION: Shows how to create and configure multiple blueprints with different settings and group them together with shared configurations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(name=\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\n    name=\"bp2\",\n    url_prefix=\"/bp2\",\n    strict_slashes=False,\n)\n\n# This will enforce strict slashes check on the routes\n# under bp1 but ignore bp2 as that has an explicitly\n# set the strict slashes check to false\ngroup = Blueprint.group([bp1, bp2], strict_slashes=True)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header - Testing Section\nDESCRIPTION: A markdown header indicating the testing documentation section of the Sanic guide.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-testing/testing.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Testing\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Setup in Sanic\nDESCRIPTION: Shows how to access and set basic configuration values in a Sanic application instance. Demonstrates the dict-like interface of the Sanic app's config attribute.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.DB_NAME = \"appdb\"\napp.config[\"DB_USER\"] = \"appuser\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple HTTP Methods on Single Endpoint in Python\nDESCRIPTION: This snippet demonstrates two approaches to handling multiple HTTP methods on a single endpoint: using separate route decorators and a single route with method checking. Both approaches are shown to illustrate poor design practices.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/class-based-views.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def foo_get(request):\n    ...\n\n@app.post(\"/foo\")\nasync def foo_post(request):\n    ...\n\n@app.put(\"/foo\")\nasync def foo_put(request):\n    ...\n\n@app.route(\"/bar\", methods=[\"GET\", \"POST\", \"PATCH\"])\nasync def bar(request):\n    if request.method == \"GET\":\n        ...\n    elif request.method == \"POST\":\n        ...\n    elif request.method == \"PATCH\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Disconnections in Python\nDESCRIPTION: Demonstrates how to catch a CancelledError when a user closes a WebSocket connection in Sanic v21.9. This new functionality is part of the websocket handling overhaul.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/\")\nasync def handler(request, ws):\n    try:\n        while True:\n            await asyncio.sleep(0.25)\n    except asyncio.CancelledError:\n        print(\"User closed connection\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Annotated Handler in Sanic\nDESCRIPTION: Example of a handler with complete type annotations for both the request parameter and return value, using Sanic's Request and HTTPResponse types.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/handlers.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import HTTPResponse, text\nfrom sanic.request import Request\n\n@app.get(\"/typed\")\nasync def typed_handler(request: Request) -> HTTPResponse:\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Starting Sanic with HTTP/3 Support\nDESCRIPTION: Shows different ways to start a Sanic server with HTTP/3 support, including command-line options and Python code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --http=3\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app -3\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(version=3)\n```\n\n----------------------------------------\n\nTITLE: Using Version Prefix in Sanic Routes\nDESCRIPTION: Shows how to use the version_prefix parameter to customize the URL structure for versioned routes in Sanic. This example demonstrates mounting versioned routes under an '/api' path.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/versioning.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /v1/my/path\napp.route(\"/my/path\", version=1, version_prefix=\"/api/v\")\n```\n\n----------------------------------------\n\nTITLE: Raising NotFound Exception in Sanic Login Route\nDESCRIPTION: Shows how to raise a NotFound exception in a Sanic login route when a user is not found.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import exceptions\n\n@app.route(\"/login\")\nasync def login(request):\n    user = await some_login_func(request)\n    if not user:\n        raise exceptions.NotFound(\n            f\"Could not find user with username={request.json.username}\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Sanic using Python\nDESCRIPTION: Shows how to handle validation errors in a Sanic application. It defines a custom error handler for validation errors to return a formatted JSON response.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/validation.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom sanic_validation import validate_json\n\napp = Sanic(__name__)\n\n@app.exception(ValidationError)\ndef validation_error(request, exception):\n    return json({\"error\": str(exception)}, status=400)\n\n@app.route(\"/\")\n@validate_json({\"name\": {\"type\": \"string\", \"required\": True, \"empty\": False}})\nasync def hello(request):\n    return json({\"hello\": request.json[\"name\"]})\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to Individual Methods in Class-Based Views with Sanic\nDESCRIPTION: This snippet demonstrates how to apply decorators to individual methods in a class-based view using Sanic. It shows decorating specific methods while leaving others undecorated.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithSomeDecorator(HTTPMethodView):\n\n    @staticmethod\n    @some_decorator_here\n    def get(request, name):\n        return text(\"Hello I have a decorator\")\n\n    def post(self, request, name):\n        return text(\"Hello I don\"t have any decorators\")\n\n    @some_decorator_here\n    def patch(self, request, name):\n        return text(\"Hello I have a decorator\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Sanic Inspector CLI Help\nDESCRIPTION: Shows the new CLI interface for the Sanic Inspector, which is now an HTTP server. It includes options for host, port, security, and API key authentication.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.12.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic inspect --help                             \n\n  ▄███ █████ ██      ▄█▄      ██       █   █   ▄██████████\n ██                 █   █     █ ██     █   █  ██\n  ▀███████ ███▄    ▀     █    █   ██   ▄   █  ██\n              ██  █████████   █     ██ █   █  ▄▄\n ████ ████████▀  █         █  █       ██   █   ▀██ ███████\n\nOptional\n========\n  General:\n    -h, --help                      show this help message and exit\n    --host HOST, -H HOST            Inspector host address [default 127.0.0.1]\n    --port PORT, -p PORT            Inspector port [default 6457]\n    --secure, -s                    Whether to access the Inspector via TLS encryption\n    --api-key API_KEY, -k API_KEY   Inspector authentication key\n    --raw                           Whether to output the raw response information\n\n  Subcommands:\n    Run one or none of the below subcommands. Using inspect without a subcommand will fetch general information about the state of the application instance.\n    \n    Or, you can optionally follow inspect with a subcommand. If you have created a custom Inspector instance, then you can run custom commands. See https://sanic.dev/en/guide/deployment/inspector.html for more details.\n\n    {reload,shutdown,scale,<custom>}\n        reload                      Trigger a reload of the server workers\n        shutdown                    Shutdown the application and all processes\n        scale                       Scale the number of workers\n        <custom>                    Run a custom command\n```\n\n----------------------------------------\n\nTITLE: Early Response from Middleware in Sanic\nDESCRIPTION: Demonstrates how middleware can return an HTTPResponse to stop request processing and return immediately. This prevents the route handler from executing and halts further middleware processing.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/basics/middleware.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def halt_request(request):\n    return text(\"I halted the request\")\n\n@app.on_response\nasync def halt_response(request, response):\n    return text(\"I halted the response\")\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code for Sanic Exception\nDESCRIPTION: Shows how to create a custom exception with a predefined status code and message in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n# or\nraise TeapotError(status_code=400)\n```\n\n----------------------------------------\n\nTITLE: Requesting Let's Encrypt Certificates with Certbot for Sanic HTTPS\nDESCRIPTION: Command to obtain free TLS certificates from Let's Encrypt using certbot. This example requests ECDSA certificates for multiple domains with a preferred certificate chain for optimal performance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo certbot certonly --key-type ecdsa --preferred-chain \"ISRG Root X1\" -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Streaming with add_route() in Sanic\nDESCRIPTION: This snippet illustrates how to enable request streaming using the add_route() method. It sets up a route with streaming enabled for POST requests.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/advanced/streaming.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbp.add_route(\n    bp_handler,\n    \"/bp_stream\",\n    methods=[\"POST\"],\n    stream=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for Sanic Inspector Authentication\nDESCRIPTION: Shows how to set an API key in the Sanic application configuration to control access to the remote Inspector.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.12.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_API_KEY = \"Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.get decorator to define a route for GET requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/test')\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Multiple HTTP Versions\nDESCRIPTION: Demonstrates how to run Sanic with both HTTP/3 and HTTP/1.1 simultaneously using command-line options and Python code.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --http=3 --http=1\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app -3 -1\n```\n\nLANGUAGE: python\nCODE:\n```\napp.prepare(version=3)\napp.prepare(version=1)\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Reporting Handler in Sanic\nDESCRIPTION: Sets up an error reporting handler using Sanic's report_exception signal for logging or external reporting.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@app.report_exception\nasync def catch_any_exception(app: Sanic, exception: Exception):\n    print(\"Caught exception:\", exception)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with TLS Certificate from Command Line or Python Code\nDESCRIPTION: Shows how to run a Sanic application with HTTPS by specifying a certificate directory. The certificate files should be named 'fullchain.pem' and 'privkey.pem' and stored in the specified folder.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/how-to/tls.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo sanic myserver:app -H :: -p 443 \\\n  --tls /etc/letsencrypt/live/example.com/\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(\"::\", 443, ssl=\"/etc/letsencrypt/live/example.com/\")\n```\n\n----------------------------------------\n\nTITLE: IPv6 Address Formatting in Response\nDESCRIPTION: Shows the output of the IP address accessor methods when using IPv6, demonstrating how client_ip provides the unwrapped version of the address.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://\\[::1\\]:8000\n{\n  \"request.ip\": \"::1\",\n  \"request.conn_info.client\": \"[::1]\",\n  \"request.conn_info.client_ip\": \"::1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSONResponse for Dynamic JSON Updates\nDESCRIPTION: Demonstrates the new JSONResponse class, which allows for convenient updating of JSON response bodies after creation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.12.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresp = json({\"foo\": \"bar\"})\nresp.update({\"another\": \"value\"})\n```\n\n----------------------------------------\n\nTITLE: Improved Cookie Setting Method in Sanic\nDESCRIPTION: Demonstrates the new, more convenient method for adding cookies to responses with attributes set directly as keyword arguments, making the code more readable and intuitive.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"There's a cookie up in this response\")\nresponse.add_cookie(\n    \"test\",\n    \"It worked!\",\n    domain=\".yummy-yummy-cookie.com\",\n    httponly=True\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Caddy Reverse Proxy Command\nDESCRIPTION: A one-line command to run Caddy as a reverse proxy for a Sanic application. This command automatically handles TLS certificates, HTTP-to-HTTPS redirects, and WebSocket support.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/caddy.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to :8001\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a Class Instance in Sanic\nDESCRIPTION: Demonstrates loading configuration from an instantiated class object using update_config. This allows for more dynamic configuration generation before loading.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(MyConfig())\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with Application Config\nDESCRIPTION: Shows an alternative approach to configure Sanic Extensions by setting properties directly on the application config object, which achieves the same result as the dictionary method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.12.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\n----------------------------------------\n\nTITLE: Running Simultaneous HTTP/3 and HTTP/1.1 Servers via CLI\nDESCRIPTION: Command line options to start multiple Sanic servers with different HTTP protocol versions running simultaneously using the multi-serve feature.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.6.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --http=3 --http=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app -3 -1\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Sanic Inspector\nDESCRIPTION: Demonstrates how to secure the Sanic Inspector with TLS encryption by specifying the paths to the certificate and key files in the application configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.12.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_TLS_CERT = \"/path/to/cert.pem\"\napp.config.INSPECTOR_TLS_KEY = \"/path/to/key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with ASGI Servers\nDESCRIPTION: Shows how to run Sanic applications using ASGI-compliant servers like Uvicorn and Hypercorn.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/running.md#2025-04-10_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nuvicorn myapp:app\n```\n\nLANGUAGE: sh\nCODE:\n```\nhypercorn myapp:app\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Instantiated Class (Python)\nDESCRIPTION: Shows how to load configuration values from an instantiated custom class using the update_config method in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/configuration.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(MyConfig())\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Sanic Configuration Paths\nDESCRIPTION: Shows how to use environment variables in the path when loading configuration files with update_config. This provides flexibility in specifying configuration file locations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ export my_path=\"/path/to\"\n```\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(\"${my_path}/my_config.py\")\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Config Setting\nDESCRIPTION: Simple example of setting a configuration value directly on the Sanic app instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/configuration.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Cookies in Sanic\nDESCRIPTION: Shows how to create partitioned cookies in Sanic, which implements the Partitioned cookie attribute for enhanced privacy.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse.cookies.add_cookie(. . ., partitioned=True)\n```\n\n----------------------------------------\n\nTITLE: Basic CORS Implementation in Sanic\nDESCRIPTION: Demonstrates how to enable basic CORS protection in a Sanic application using Sanic Extensions. It sets the CORS_ORIGINS configuration and creates a simple endpoint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/cors.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\nfrom sanic_ext import Extend\n\napp = Sanic(__name__)\napp.config.CORS_ORIGINS = \"http://foobar.com,http://bar.com\"\nExtend(app)\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Management Commands\nDESCRIPTION: Commands for managing the Sanic service using systemd, including reload, start, and enable operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/nginx.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl start sanicexample\nsystemctl enable sanicexample\n```\n\n----------------------------------------\n\nTITLE: Creating a Contextual Exception with Dynamic Message\nDESCRIPTION: Example of creating a custom exception with a dynamic message using the extra property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Running a Sanic Server\nDESCRIPTION: This snippet shows how to run a Sanic server using the app.run() method. It demonstrates setting the host and port for the server to listen on.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Using ReusableClient with Context Manager in Python\nDESCRIPTION: Shows how to use the ReusableClient within a context manager to control the server lifecycle. This approach allows for multiple requests to the same running instance of the server.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing.reusable import ReusableClient\n\ndef test_multiple_endpoints_on_same_server(app):\n    client = ReusableClient(app)\n    with client:\n        _, response = client.get(\"/path/to/1\")\n        assert response.status == 200\n\n        _, response = client.get(\"/path/to/2\")\n        assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: CLI Factory Argument Injection\nDESCRIPTION: Shows how CLI arguments are automatically injected into application factory functions when using the factory pattern.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v22.3.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(args):\n    app = Sanic(\"MyApp\")\n    print(args)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application with Gunicorn\nDESCRIPTION: This snippet demonstrates how to run a Sanic application using Gunicorn as the server. It shows the command-line syntax for starting Gunicorn with a Sanic application and specifies worker class and number of workers.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/server-choice.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn myapp:app --bind 0.0.0.0:1337 --worker-class sanic.worker.GunicornWorker --workers 4\n```\n\n----------------------------------------\n\nTITLE: Route Context Configuration in Sanic\nDESCRIPTION: Shows how to use route context with custom labels for request handling and middleware operations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/routing.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/1\", ctx_label=\"something\")\nasync def handler1(request):\n    ...\n\n@app.get(\"/2\", ctx_label=\"something\")\nasync def handler2(request):\n    ...\n\n@app.get(\"/99\")\nasync def handler99(request):\n    ...\n\n@app.on_request\nasync def do_something(request):\n    if request.route.ctx.label == \"something\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Sanic Basics\nDESCRIPTION: Simple markdown heading that introduces the basics section of the Sanic documentation\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/basics/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Basics\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Testing with pip\nDESCRIPTION: Command to install the Sanic Testing package from PyPI.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/getting-started.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic-testing\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Middleware in a Sanic Application\nDESCRIPTION: Shows how to register a simple middleware function with a Sanic application using the middleware decorator, which applies the middleware to all routes in the application.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware\nasync def middleware1(request):\n    logger.info(\"before request\")\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Sanic Version with pip\nDESCRIPTION: Commands to install and pin Sanic v20.12 LTS version for compatibility with legacy features.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.3.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"sanic>=20.12,<20.13\"\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Group Versioning in Sanic\nDESCRIPTION: Demonstrates versioning for Blueprint groups in Sanic. It shows how versioning can be applied at different levels (route, blueprint, group) and how more specific versions override general ones.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/versioning.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.blueprints import Blueprint\nfrom sanic.response import json\n\nbp1 = Blueprint(\n    name=\"blueprint-1\",\n    url_prefix=\"/bp1\",\n    version=1.25,\n)\nbp2 = Blueprint(\n    name=\"blueprint-2\",\n    url_prefix=\"/bp2\",\n)\n\ngroup = Blueprint.group(\n    [bp1, bp2],\n    url_prefix=\"/bp-group\",\n    version=\"v2\",\n)\n\n# GET /v1.25/bp-group/bp1/endpoint-1\n@bp1.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp1(request):\n    return json({\"Source\": \"blueprint-1/endpoint-1\"})\n\n# GET /v2/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-1\"})\n\n# GET /v1/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-2\", version=1)\nasync def handle_endpoint_2_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-2\"})\n```\n\n----------------------------------------\n\nTITLE: Inspector CLI Usage\nDESCRIPTION: Shows the basic CLI command for using the Sanic Inspector.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/inspector.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect\n```\n\n----------------------------------------\n\nTITLE: Adding an Error Handler Programmatically\nDESCRIPTION: Example of adding an error handler programmatically using app.error_handler.add().\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def server_error_handler(request, exception):\n    return text(\"Oops, server error\", status=500)\n\napp.error_handler.add(Exception, server_error_handler)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Sanic with Nginx\nDESCRIPTION: Docker Compose file that orchestrates two services: the Sanic application and Nginx as a reverse proxy. It configures networking, port mapping, container dependencies, and volume mounting for the Nginx configuration file.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/docker.md#2025-04-10_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nversion: \"3\"\n\nservices:\n  mysanic:\n    image: my-sanic-image\n    ports:\n      - \"8000:8000\"\n    restart: always\n\n  mynginx:\n    image: nginx:1.13.6-alpine\n    ports:\n      - \"80:80\"\n    depends_on:\n      - mysanic\n    volumes:\n      - ./mysanic.conf:/etc/nginx/conf.d/mysanic.conf\n    restart: always\n\nnetworks:\n  default:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data in Sanic\nDESCRIPTION: This snippet demonstrates how to access various types of request data in a Sanic handler, including query string parameters, JSON payload, and form data.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/how-to/request-id-logging.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\n\nclass DemoView(HTTPMethodView):\n    async def get(self, request):\n        # Query string parameters\n        name = request.args.get(\"name\")\n        # JSON payload\n        data = request.json\n        # Form data\n        form_data = request.form\n        # Raw body\n        raw = request.body\n\n        return json({\"received\": True, \"message\": \"OK\", \"data\": data})\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Handlers in Sanic\nDESCRIPTION: Example showing how to use the new signals API with handler definition, event waiting, and dispatch functionality.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.3.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def signal_handler(thing, **kwargs):\n    print(f\"[signal_handler] {thing=}\", kwargs)\n\nasync def wait_for_event(app):\n    while True:\n        print(\"> waiting\")\n        await app.event(\"foo.bar.*\")\n        print(\"> event found\\n\")\n\n@app.after_server_start\nasync def after_server_start(app, loop):\n    app.add_task(wait_for_event(app))\n\n@app.get(\"/\")\nasync def trigger(request):\n    await app.dispatch(\"foo.bar.baz\")\n    return response.text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Alternative Streaming Response Implementation in Sanic\nDESCRIPTION: Shows the recommended alternative approach to streaming responses using the request.respond method, which should be used instead of the deprecated stream method.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Section Header\nDESCRIPTION: Markdown header indicating the beginning of Kubernetes documentation section.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/kubernetes.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Kubernetes\n```\n\n----------------------------------------\n\nTITLE: Configuring Noisy Exceptions\nDESCRIPTION: Example of configuring Sanic to log all exceptions, ignoring the quiet property.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.config.NOISY_EXCEPTIONS = True\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Sanic Server Configuration\nDESCRIPTION: Markdown heading that introduces the topic of choosing a server in Sanic framework documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/deployment/server-choice.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Choosing a server\n```\n\n----------------------------------------\n\nTITLE: Purging Completed Tasks in Sanic\nDESCRIPTION: Shows how to remove all completed or cancelled tasks from the app.tasks attribute in Sanic to prevent memory buildup.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/tasks.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Running a Factory Application with the Sanic CLI\nDESCRIPTION: Shows how to run a Sanic application using the factory pattern from the command line with the new --factory flag.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.6.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to:create_app --factory \n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serializers in Sanic\nDESCRIPTION: This example demonstrates how to create a custom serializer class in Sanic. It includes methods for serializing different data types and shows how to use the serializer with Sanic's json_dumps function.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/serialization.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import json\n\nclass CustomSerializer:\n    def __init__(self):\n        self.serializers = {}\n\n    def register(self, cls, func):\n        self.serializers[cls] = func\n        return func\n\n    def __call__(self, obj):\n        for cls, func in self.serializers.items():\n            if isinstance(obj, cls):\n                return func(obj)\n        raise TypeError(f\"Type {type(obj)} not serializable\")\n\nserializer = CustomSerializer()\n\n@serializer.register(datetime)\ndef serialize_datetime(obj):\n    return obj.isoformat()\n\n@serializer.register(Decimal)\ndef serialize_decimal(obj):\n    return float(obj)\n\ndata = {\n    \"name\": \"Sanic\",\n    \"date\": datetime.now(),\n    \"price\": Decimal(\"10.5\")\n}\n\njson_string = json.dumps(data, default=serializer)\nprint(json_string)\n```\n\n----------------------------------------\n\nTITLE: Raising SanicException with Custom Status Code in Python\nDESCRIPTION: Demonstrates how to raise a SanicException with a custom status code in a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/best-practices/exceptions.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import SanicException\n\n@app.route(\"/youshallnotpass\")\nasync def no_no(request):\n        raise SanicException(\"Something went wrong.\", status_code=501)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception with Default Message in Sanic\nDESCRIPTION: Demonstrates how to create a custom exception class with a static default message that will be used when the exception is raised without additional parameters.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations for Path Parameters in Sanic\nDESCRIPTION: Illustrates how to use Python type annotations to control path parameter types in Sanic v21.9. This new feature simplifies route definitions by inferring types from function signatures.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/<one>/<two>/<three>\")\ndef handler(request: Request, one: int, two: float, three: UUID):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Manager Startup Threshold\nDESCRIPTION: Example of modifying the worker startup threshold to allow more time for initialization. The threshold value is specified in 0.1s increments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.manager import WorkerManager\n\nWorkerManager.THRESHOLD = 100  # Value is in 0.1s\n```\n\n----------------------------------------\n\nTITLE: Setting Sanic Process Start Method\nDESCRIPTION: Configuration to modify the process start method from the default 'spawn' to alternative methods like 'fork'.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Static Resource Type in Sanic\nDESCRIPTION: Shows how to explicitly specify whether a static resource is a file or directory in Sanic v21.9. This new feature provides more control over static resource handling.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v21.9.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstatic(\"/\", \"/path/to/some/file\", resource_type=\"file\")\n```\n\n----------------------------------------\n\nTITLE: Enabling the Sanic Inspector in Python\nDESCRIPTION: Sets the configuration flag to enable Sanic's Inspector feature, which allows CLI commands to interact with a running Sanic instance.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/deployment/manager.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR = True\n```\n\n----------------------------------------\n\nTITLE: Defining TRACE Route in Sanic\nDESCRIPTION: This code shows how to define a TRACE route in Sanic using the @app.route decorator. TRACE endpoints are not automatically created by default.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods=[\"trace\"])\nasync def handler(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directory Browser View in Sanic\nDESCRIPTION: Sets up a static file handler with directory browsing capability enabled, allowing users to view and navigate directory contents through a web interface.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/uploads/\", \"/path/to/dir/\", directory_view=True)\n```\n\n----------------------------------------\n\nTITLE: Sanic CLI Application Launch Commands\nDESCRIPTION: Shows four different methods to launch a Sanic application from the command line, including targeting an app instance, using a factory pattern, serving a static directory, or using a module with an 'app' variable.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.module:app          # global app instance\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.module:create_app   # factory pattern\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic ./path/to/directory/        # simple serve\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.module              # module with app instance\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Route Names in Sanic Python\nDESCRIPTION: Demonstrates the correct way to handle duplicate route names in Sanic v23.3 and later. Instead of using implicit naming, which is no longer allowed, explicit names should be provided for each route.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.3.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"SomeApp\")\n\n@app.get(\"/\", name=\"root\")\n@app.get(\"/foo\", name=\"foo\")\nasync def handler(request: Request):\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Typed Sanic Application\nDESCRIPTION: Shows how to create custom typed configurations for Sanic applications with custom Config, Request context, and handler implementations.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/guide/release-notes/v23.6.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\nclass Foo:\n    pass\n\nclass RequestContext:\n    foo: Foo\n\nclass CustomRequest(Request[Sanic[CustomConfig, Foo], RequestContext]):\n    @staticmethod\n    def make_context() -> RequestContext:\n        ctx = RequestContext()\n        ctx.foo = Foo()\n        return ctx\n\napp = Sanic(\n    \"test\", config=CustomConfig(), ctx=Foo(), request_class=CustomRequest\n)\n\n@app.get(\"/\")\nasync def handler(request: CustomRequest):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Manual Extension with Dictionary Config\nDESCRIPTION: Shows how to extend Sanic app using a dictionary for configuration settings.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/configuration.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.extend(config={\"oas_url_prefix\": \"/apidocs\"})\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route for Auto HEAD Endpoint in Sanic\nDESCRIPTION: This snippet shows how to define a GET route in Sanic, which automatically enables HEAD responses due to Sanic Extensions' default behavior.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route for Auto OPTIONS Endpoint in Sanic\nDESCRIPTION: This snippet demonstrates defining a GET route in Sanic, which automatically enables OPTIONS responses due to Sanic Extensions' default behavior.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/http/methods.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Definition Decorator\nDESCRIPTION: Example of using the omnibus @openapi.definition decorator to define multiple aspects of an API endpoint in a single decorator. This includes body, summary, tag, and response definitions.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@openapi.definition(\n    body=RequestBody(UserProfile, required=True),\n    summary=\"User profile update\",\n    tag=\"one\",\n    response=[Success, Response(Failure, status=400)],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Routes\nDESCRIPTION: Examples of using the @openapi.parameter decorator to define parameters for API endpoints, specifying name, schema, location, and other attributes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@openapi.parameter(\"thing\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.parameter(parameter=Parameter(\"foobar\", deprecated=True))\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.parameter(\"Authorization\", str, \"header\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.parameter(\"thing\", required=True, allowEmptyValue=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Security Requirements to Endpoints\nDESCRIPTION: Examples of using the @openapi.secured decorator to add security requirements to API endpoints in the OpenAPI documentation.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/decorators.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@openapi.secured()\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.secured(\"foo\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.secured(\"token1\", \"token2\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.secured({\"my_api_key\": []})\n```\n\nLANGUAGE: python\nCODE:\n```\n@openapi.secured(my_api_key=[])\n```\n\n----------------------------------------\n\nTITLE: Securing Specific Routes in Sanic OpenAPI\nDESCRIPTION: Demonstrates different methods of applying security schemes to specific routes using decorators and docstrings. Shows both @openapi.secured and @openapi.definition approaches.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-ext/openapi/security.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/one\")\nasync def handler1(request):\n    \"\"\"\n    openapi:\n    ---\n    security:\n        - foo: []\n    \"\"\"\n\n\n@app.route(\"/two\")\n@openapi.secured(\"foo\")\n@openapi.secured({\"bar\": []})\n@openapi.secured(baz=[])\nasync def handler2(request):\n    ...\n\n\n@app.route(\"/three\")\n@openapi.definition(secured=\"foo\")\n@openapi.definition(secured={\"bar\": []})\nasync def handler3(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using SanicASGITestClient in Python\nDESCRIPTION: Shows how to use the SanicASGITestClient, which uses the httpx library to execute Sanic as an ASGI application. This client does not spin up a server for each request.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/clients.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait app.asgi_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Writing Asynchronous Tests with Sanic ASGI Client\nDESCRIPTION: Example showing how to write an asynchronous test using Sanic's ASGI client. Demonstrates using pytest-asyncio decorator and async/await syntax.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/en/plugins/sanic-testing/getting-started.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom sanic import Sanic, response\n\n@pytest.fixture\ndef app():\n    sanic_app = Sanic(__name__)\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\n@pytest.mark.asyncio\nasync def test_basic_asgi_client(app):\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.method.lower() == \"get\"\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint-Level Versioning in Sanic\nDESCRIPTION: Shows how to apply versioning to an entire Blueprint in Sanic. This version number is applied to all routes within the Blueprint.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/versioning.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"test\", url_prefix=\"/foo\", version=1)\n\n# /v1/foo/html\n@bp.route(\"/html\")\ndef handle_request(request):\n    return response.html(\"<p>Hello world!</p>\")\n```\n\n----------------------------------------\n\nTITLE: Routing Websocket Handlers in Sanic\nDESCRIPTION: Demonstrates two methods of routing websocket handlers in Sanic: using add_websocket_route() method and using the @app.websocket decorator.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/advanced/websockets.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def feed(request, ws):\n    pass\n\napp.add_websocket_route(feed, \"/feed\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/feed\")\nasync def feed(request, ws):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Silent Exception\nDESCRIPTION: Example of creating a custom exception that suppresses logging output.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/best-practices/exceptions.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SilentError(SanicException):\n    message = \"Something happened, but not shown in logs\"\n    quiet = True\n\nraise SilentError\n# もしくは\nraise InvalidUsage(\"blah blah\", quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Updating Sanic Configuration with Dictionary in Python\nDESCRIPTION: Shows how to update multiple configuration values at once using the update() method with a dictionary. This is useful when you need to set several related configuration values simultaneously.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/guide/deployment/configuration.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection Implementation in Sanic\nDESCRIPTION: Demonstrates a simple use case of dependency injection by recasting a value. It shows how to inject an IceCream object based on a path parameter.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/injection.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass IceCream:\n    flavor: str\n\n    def __str__(self) -> str:\n        return f\"{self.flavor.title()} (Yum!)\"\n\n\napp.ext.add_dependency(IceCream)\n\n\n@app.get(\"/<flavor:str>\")\nasync def ice_cream(request, flavor: IceCream):\n    return text(f\"You chose: {flavor}\")\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from Environment Variable\nDESCRIPTION: Shows how to load configuration from an environment variable that points to a Python module. This is useful for switching between different configuration environments.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# bash\n# export MYAPP_SETTINGS=myapp.config.DevConfig\n\napp.config.from_envvar(\"MYAPP_SETTINGS\")\n```\n\n----------------------------------------\n\nTITLE: Loading Sanic Configuration from a Dictionary\nDESCRIPTION: Shows how to load configuration from a Python dictionary using the update method. This allows for programmatic configuration changes.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/ja/plugins/sanic-ext/openapi/README.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndb_config = {\n    \"DB_NAME\": \"appdb\",\n    \"DB_USER\": \"appuser\",\n    \"DB_HOST\": \"localhost\",\n}\napp.config.update(db_config)\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Class-Based Views with Sanic\nDESCRIPTION: This snippet demonstrates how to handle path parameters in a class-based view using Sanic. It shows defining a method that accepts a path parameter and how to add the route with a parameter to the Sanic app.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NameView(HTTPMethodView):\n\n  def get(self, request, name):\n    return text(\"Hello {}\".format(name))\n\napp.add_route(NameView.as_view(), \"/<name>\")\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Class-Based Views with Sanic\nDESCRIPTION: This snippet demonstrates how to handle path parameters in a class-based view using Sanic. It shows defining a method that accepts a path parameter and how to add the route with a parameter to the Sanic app.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/advanced/class-based-views.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NameView(HTTPMethodView):\n\n  def get(self, request, name):\n    return text(\"Hello {}\".format(name))\n\napp.add_route(NameView.as_view(), \"/<name>\")\n```\n\n----------------------------------------\n\nTITLE: Defining OPTIONS Route with Decorator in Sanic (Python)\nDESCRIPTION: Example of using the @app.options decorator to define a route for OPTIONS requests in Sanic.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.options('/test')\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Handling Request Body in DELETE Method in Sanic (Python)\nDESCRIPTION: Demonstrates two methods to handle request body in DELETE method: using ignore_body parameter and manually receiving the body.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/basics/routing.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/path\", ignore_body=False)\nasync def handler(_):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/path\")\nasync def handler(request: Request):\n    await request.receive_body()\n```\n\n----------------------------------------\n\nTITLE: 使用多个装饰器组合的 Sanic 视图函数\nDESCRIPTION: 这个示例展示了如何在 Sanic 视图函数上组合使用多个装饰器，包括路由定义、授权检查、参数验证和用户注入。\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/best-practices/decorators.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/orders\")\n@authorized(\"view_order\")\n@validate_list_params()\n@inject_user()\nasync def get_order_details(request, params, user):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Class-based Middleware in Sanic with Custom Dispatch\nDESCRIPTION: Shows an advanced class-based middleware pattern in Sanic that overrides the __call__ method to handle both the request and response phases in a single method, providing full control over the middleware execution flow.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/how-to/ipv6.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleMiddleware:\n    async def __call__(self, request, handler):\n        logger.info(\"before request\")\n        response = await handler(request)\n        logger.info(\"after request\")\n        return response\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with Extensions Support\nDESCRIPTION: Shows two methods for installing Sanic with Extensions support: using the extras syntax or installing packages separately.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sanic[ext]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sanic sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with Dictionary Method\nDESCRIPTION: Demonstrates how to configure Sanic Extensions by passing a dictionary to the extend method, which is optional but allows customization of extension behavior.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.extend(config={\"oas_url_prefix\": \"/apidocs\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with App Config\nDESCRIPTION: Shows an alternative method to configure Sanic Extensions by setting values directly on the app.config object, which is optional but provides the same functionality.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions with Config Object\nDESCRIPTION: Demonstrates configuring Sanic Extensions using the explicit Config object, which provides better type hints and IDE support for extension configuration.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/guide/release-notes/v21.12.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\nfrom sanic_ext import Config\n\napp = Sanic(\"MyApp\")\napp.extend(config=Config(oas_url_prefix=\"/apidocs\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Timeout in Sanic\nDESCRIPTION: This snippet demonstrates how to set the response timeout in Sanic. It controls how long the server will wait for the response to be sent back to the client after the request has been fully received.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.config.RESPONSE_TIMEOUT = 60\napp.run(response_timeout=60)\n```\n\n----------------------------------------\n\nTITLE: Handling POST Requests in Sanic Python\nDESCRIPTION: This code snippet demonstrates how to handle POST requests in Sanic. It shows how to access form data and JSON data from the request object.\nSOURCE: https://github.com/sanic-org/sanic-guide/blob/main/src/zh/plugins/sanic-testing/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/submit\")\nasync def submit_form(request):\n    # Access form data\n    username = request.form.get('username')\n    # Access JSON data\n    data = request.json\n    return text(f\"Received: {username}, {data}\")\n```"
  }
]