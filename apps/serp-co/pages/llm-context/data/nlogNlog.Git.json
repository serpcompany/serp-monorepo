[
  {
    "owner": "nlog",
    "repo": "nlog.git",
    "content": "TITLE: Using WithProperty and SetProperty on Logger in C#\nDESCRIPTION: New methods added to the Logger class for setting properties. These methods allow for adding custom properties to log messages.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nlogger.WithProperty(\"CustomProperty\", \"Value\").Info(\"Log message\");\nlogger.SetProperty(\"AnotherProperty\", \"AnotherValue\");\n```\n\n----------------------------------------\n\nTITLE: Dynamic Layout Renderer in Log Level Filters\nDESCRIPTION: Example showing dynamic layout renderer usage in log level filtering configuration, allowing for runtime adjustment of logging levels.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n${when}\n```\n\n----------------------------------------\n\nTITLE: Object Path Layout Renderer\nDESCRIPTION: Example of using the object-path layout renderer to access nested property values of objects like exceptions.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n${object-path} / ${exception:objectpath=PropertyName}\n```\n\n----------------------------------------\n\nTITLE: Using EventProperties with ObjectPath in NLog Configuration\nDESCRIPTION: Added support for ObjectPath in the EventProperties layout renderer. This allows for rendering nested properties in log messages.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n${EventProperties:Item=NestedObject:ObjectPath=Property1.SubProperty}\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Property in NLog Layout Renderers\nDESCRIPTION: Added support for truncating log message content using the truncate property in layout renderers.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n${message:truncate=80}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Renderer in XML\nDESCRIPTION: Example of the local-ip layout renderer with caching configuration in NLog XML format. Demonstrates how to set caching duration for the renderer output.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n${local-ip:cachedSeconds=60}\n```\n\n----------------------------------------\n\nTITLE: Enabling NLog AutoReload Config Monitor using Fluent Configuration API\nDESCRIPTION: Code snippet that demonstrates how to register and enable the AutoReload Config Monitor for NLog.config XML files. This setup allows NLog to automatically detect and apply configuration changes without requiring application restart.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.AutoReloadConfig/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupMonitorForAutoReload().LoadConfigurationFromFile();\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoFlush for ConsoleTarget in NLog\nDESCRIPTION: Added AutoFlush property to ConsoleTarget and ColoredConsoleTarget for improved flushing behavior.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<target xsi:type=\"Console\" name=\"console\" autoFlush=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Registering NLog ConcurrentFile Extension via C# Fluent API\nDESCRIPTION: C# code example demonstrating how to register the ConcurrentFileTarget programmatically using NLog's fluent configuration API. This approach can be used as an alternative to XML configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.ConcurrentFile/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.ConcurrentFileTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Database Target using Fluent Configuration API in C#\nDESCRIPTION: This C# code demonstrates how to register the NLog.Database extension using the fluent configuration API. This method allows for programmatic registration of the DatabaseTarget as an alternative to XML configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Database/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.DatabaseTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Mail Target Extension via Code\nDESCRIPTION: C# code using the fluent configuration API to programmatically register the Mail Target extension. Alternative approach to XML configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Mail/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.MailTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog RegEx Replace Extension using Fluent Configuration API\nDESCRIPTION: This code demonstrates how to register the NLog RegEx Replace extension programmatically using the fluent configuration API. This method is an alternative to XML configuration and allows for runtime registration of the layout renderer.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.RegEx/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterLayoutRenderer<NLog.LayoutRenderers.Wrappers.RegexReplaceLayoutRendererWrapper>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Network Target Extension using Fluent Configuration API in C#\nDESCRIPTION: This C# code demonstrates how to register the NLog.Targets.NetworkTarget using the fluent configuration API. This method allows for programmatic registration of the extension as an alternative to XML configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Network/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.NetworkTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering OutputDebugString Target using Fluent Configuration API\nDESCRIPTION: This C# code demonstrates how to register the OutputDebugString target using NLog's fluent configuration API. This method allows for programmatic registration of the target as an alternative to XML configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.OutputDebugString/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.OutputDebugStringTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering WebService Extension Programmatically with C#\nDESCRIPTION: C# code using the fluent configuration API to register the WebService target extension programmatically. This alternative approach registers the WebServiceTarget directly in code.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.WebService/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.WebServiceTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Trace Target Using Fluent Configuration API\nDESCRIPTION: C# code snippet demonstrating how to programmatically register the Trace target using NLog's fluent configuration API.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Trace/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.TraceTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Registry LayoutRenderer in C# Code\nDESCRIPTION: C# code example demonstrating how to register the Registry LayoutRenderer using NLog's fluent configuration API in code rather than through the XML configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.WindowsRegistry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterLayoutRenderer<NLog.LayoutRenderers.RegistryLayoutRenderer>();\n});\n```\n\n----------------------------------------\n\nTITLE: Using SplitAndTrimTokens Method in C#\nDESCRIPTION: New method added to StringHelpers class for efficient string splitting and trimming without allocating an object array.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar tokens = StringHelpers.SplitAndTrimTokens(inputString, ',');\n```\n\n----------------------------------------\n\nTITLE: Registering NLog ConcurrentFile Extension via XML Configuration\nDESCRIPTION: XML configuration example showing how to register the NLog.Targets.ConcurrentFile extension in the NLog.config file. This is necessary for NLog to recognize the 'File' type-alias when loading from the configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.ConcurrentFile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Targets.ConcurrentFile\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Database Extension in XML Configuration\nDESCRIPTION: This XML snippet shows how to register the NLog.Database extension in the NLog.config file. This registration is necessary for NLog to recognize the 'database' type-alias when loading from the configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Database/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Database\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Mail Target Extension via XML Configuration\nDESCRIPTION: XML configuration to register the Mail Target extension in NLog.config file. This enables NLog to recognize the 'Mail' type-alias when loading from configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Mail/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Targets.Mail\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog RegEx Replace Extension in XML Configuration\nDESCRIPTION: This snippet shows how to register the NLog RegEx Replace extension in the NLog.config file. This step is necessary for NLog to recognize the 'regex-replace' type-alias when loading from the configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.RegEx/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.RegEx\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Network Target Extension in XML Configuration\nDESCRIPTION: This XML snippet shows how to register the NLog.Targets.Network extension in the NLog.config file. This is necessary for NLog to recognize the 'Network' type-alias when loading from the configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Network/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Targets.Network\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering OutputDebugString Target in NLog.config\nDESCRIPTION: This XML snippet shows how to register the OutputDebugString target extension in the NLog.config file. This is necessary for NLog to recognize the 'OutputDebugString' type-alias when loading from the configuration file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.OutputDebugString/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.OutputDebugString\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering WebService Extension in NLog.config XML\nDESCRIPTION: XML configuration to register the WebService target extension in NLog.config file. This is required for NLog to recognize the 'WebService' type-alias when loading from configuration.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.WebService/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Targets.WebService\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Trace Extension via XML Configuration\nDESCRIPTION: XML configuration snippet showing how to register the Trace target extension in NLog.config file using the extensions element.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.Targets.Trace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.Targets.Trace\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog Registry LayoutRenderer in XML Configuration\nDESCRIPTION: XML configuration snippet that shows how to register the Windows Registry extension in NLog.config file to enable the 'registry' type-alias for use in layout renderers.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.WindowsRegistry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.WindowsRegistry\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Building NLog Project on Multiple Target Frameworks\nDESCRIPTION: Lists the target frameworks used for NLog development, including .NET Framework versions and .NET Standard versions as defined in the nlog.csproj file.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/README-developers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- net46;net45;net35;netstandard1.3;netstandard1.5;netstandard2.0 (see nlog.csproj)\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Documentation Steps\nDESCRIPTION: Step-by-step instructions for generating NLog API documentation, including updating copyright year, building docs, copying to destination, and cleaning up unnecessary files.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/tools/SandcastleDocs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Perhaps update the year. Search for `2004-` for in [NLog.shfbproj](NLog.shfbproj).\n2. Run [BuildDoc.cmd](BuildDoc.cmd)\n3. Copy the Doc folder to the documentation folder of nlog.github.io\n4. Remove unneeded files: .config, .aspx. .php, WebKI.xml, WebTOC.xml and LastBuild.log\n```\n\n----------------------------------------\n\nTITLE: Reference to Build and Test Scripts\nDESCRIPTION: References the PowerShell scripts used for building and testing the NLog project on both Windows and Linux platforms.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/README-developers.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n(see build.ps1 + run-tests.ps1)\n```\n\n----------------------------------------\n\nTITLE: NLog Changelog Entry\nDESCRIPTION: Markdown formatted changelog entries listing pull requests and changes for NLog version history\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 3.2.1 (2015/03/26)\n- [#600](https://github.com/nlog/nlog/pull/600) Looks good (@kichristensen)\n- [#645](https://github.com/nlog/nlog/pull/645) Stacktrace broken fix 321 (@304NotModified)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version history entry showing changes, features and fixes in NLog release versions. Includes PR references and contributor names.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 4.4.9\n\n**Features**\n - [#2090](https://github.com/nlog/nlog/pull/2090) ${log4jxmlevent} - Added IncludeAllProperties option (@snakefoot) \n - [#2090](https://github.com/nlog/nlog/pull/2090) Log4JXmlEvent Layout - Added IncludeAllProperties, IncludeMdlc and IncludeMdc option (@snakefoot)\n\n**Fixes**\n - [#2090](https://github.com/nlog/nlog/pull/2090) Log4JXmlEvent Layout - Fixed bug with empty nlog:properties (@snakefoot)\n - [#2093](https://github.com/nlog/nlog/pull/2093) Fixed bug to logging by day of week (@RussianDragon)\n - [#2095](https://github.com/nlog/nlog/pull/2095) Fix: include ignoreErrors attribute not working for non-existent file (@304NotModified, @ghills)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Markdown formatted changelog entries documenting NLog version updates, including pull request references and contributor names\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 4.1.0 (2015/08/30)\n- [#884](https://github.com/nlog/nlog/pull/884) Changes at MDLC to support .Net 4.0 and .Net 4.5\n- [#881](https://github.com/nlog/nlog/pull/881) Change GitHub for Windows to GitHub Desktop\n...\n```\n\n----------------------------------------\n\nTITLE: NLog Changelog Entry Formatting\nDESCRIPTION: Standard format for NLog changelog entries showing version number, date, and bulleted list of changes with PR links.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 4.5-rc01 (2017/11/23)\n- [#2414](https://github.com/nlog/nlog/pull/2414) Revert breaking change of NestedDiagnosticsLogicalContext.Pop() (@304NotModified)\n- [#2415](https://github.com/nlog/nlog/pull/2415) NetStandard15 - Moved dependency System.Xml.XmlSerializer to NLog.Wcf (@snakefoot)\n```\n\n----------------------------------------\n\nTITLE: Organizing Changelog Sections in Markdown\nDESCRIPTION: This snippet shows how to structure different sections of a changelog entry using Markdown, including Features, Fixes, Improvements, and Other.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n**Features**\n- [Feature 1]\n- [Feature 2]\n\n**Fixes**\n- [Fix 1]\n- [Fix 2]\n\n**Improvements**\n- [Improvement 1]\n- [Improvement 2]\n\n**Other**\n- [Other change]\n```\n\n----------------------------------------\n\nTITLE: Formatting Version Header in Markdown\nDESCRIPTION: This snippet demonstrates how to format a version header in Markdown, including the version number and release date.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 4.3.5 (2016/06/13)\n```\n\n----------------------------------------\n\nTITLE: Registering NLog EventLog Extension via XML Configuration\nDESCRIPTION: XML configuration snippet showing how to register the EventLog target extension in NLog.config file to enable the 'eventlog' type-alias\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.WindowsEventLog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <add assembly=\"NLog.WindowsEventLog\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Registering NLog EventLog Extension via Fluent API\nDESCRIPTION: C# code demonstrating how to programmatically register the EventLog target using NLog's fluent configuration API\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/src/NLog.WindowsEventLog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Setup().SetupExtensions(ext => {\n   ext.RegisterTarget<NLog.Targets.EventLogTarget>();\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issue Link in Markdown\nDESCRIPTION: This snippet shows how to create a link to a GitHub issue or pull request using Markdown syntax. It includes the issue number and title.\nSOURCE: https://github.com/nlog/nlog.git/blob/dev/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[#1471](https://github.com/nlog/nlog/pull/1471) Add else option to ${when} (@304NotModified)\n```"
  }
]