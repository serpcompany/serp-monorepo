[
  {
    "owner": "nerves-project",
    "repo": "nerves",
    "content": "TITLE: Creating a New Nerves Project\nDESCRIPTION: This command creates a new Nerves project named 'hello_nerves' using the mix nerves.new project generator.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix nerves.new hello_nerves\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Dependencies with Homebrew\nDESCRIPTION: Commands to install required system dependencies on MacOS using Homebrew package manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install fwup squashfs coreutils xz pkg-config\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Nerves Example Project\nDESCRIPTION: These commands clone the Nerves examples repository, set the target to Raspberry Pi Zero, and build the 'blinky' example project.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nerves-project/nerves_examples\nexport MIX_TARGET=rpi0\ncd nerves_examples/blinky\nmix do deps.get, firmware, firmware.burn\n```\n\n----------------------------------------\n\nTITLE: Starting Serial Communication over USB Gadget Mode in Bash\nDESCRIPTION: Command to initiate serial communication with a Nerves device using the picocom terminal emulator over a USB gadget mode connection. It sets the baud rate to 115200 and connects to the virtual serial device.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npicocom -b 115200 /dev/ttyUSB0\n```\n\n----------------------------------------\n\nTITLE: Connecting via SSH in Bash\nDESCRIPTION: Command to establish an SSH connection to a Nerves device using the 'nerves.local' hostname. This is used for connecting to the device over a network or USB gadget mode connection.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nssh nerves.local\n```\n\n----------------------------------------\n\nTITLE: Creating Nerves Firmware Bundle\nDESCRIPTION: These commands show how to create a Nerves firmware bundle, which contains a minimal Linux platform and the application packaged as an OTP release.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix firmware\n```\n\nLANGUAGE: bash\nCODE:\n```\nMIX_TARGET=rpi0 mix firmware\n```\n\n----------------------------------------\n\nTITLE: Running Linux shell commands with cmd in Nerves\nDESCRIPTION: Demonstrates using the cmd helper to run Linux shell commands from within IEx. This example shows how to list files in the root directory with the ls command.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> cmd(\"ip route\")\ndefault via 192.168.99.1 dev wlan0  metric 20\ndefault via 100.101.32.77 dev wwan0  metric 30\n100.101.32.72/29 dev wwan0 scope link  src 100.101.32.76  metric 30\n192.168.99.0/24 dev wlan0 scope link  src 192.168.99.81  metric 20\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Custom Nerves System in Bash\nDESCRIPTION: These commands set the MIX_TARGET environment variable to the custom system, fetch dependencies, and build firmware using the custom Nerves system. The initial build will take longer (15-30 minutes) as it compiles the entire system.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/projects/your_project\nexport MIX_TARGET=custom_rpi3\nmix deps.get\nmix firmware\n```\n\n----------------------------------------\n\nTITLE: Starting the Nerves System Shell with Mix\nDESCRIPTION: Command to launch the Nerves system shell for customizing a Nerves system. This provides access to Buildroot configuration tools within a containerized environment.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ mix nerves.system.shell\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Nerves Project in Bash\nDESCRIPTION: This sequence of commands sets the target device, fetches dependencies, cross-compiles the project, and burns the resulting firmware to an SD card.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MIX_TARGET=rpi3\nmix deps.get      # Fetch the dependencies\nmix firmware      # Cross-compile dependencies and create a .fw file\nmix firmware.burn # Burn firmware to an inserted SD card\n```\n\n----------------------------------------\n\nTITLE: Manual Firmware Update Commands in Elixir\nDESCRIPTION: Commands to manually apply a firmware update using fwup and reboot the system. Requires a firmware file to be present at '/data/known_good.fw'.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> cmd(\"fwup -i /data/known_good.fw --apply --task upgrade \" <>\n  \"--no-unmount -d #{Nerves.Runtime.KV.get(\\\"nerves_fw_devpath\\\")}\")\niex> reboot\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Nerves System Build\nDESCRIPTION: Installs required system packages for building Nerves systems on Debian/Ubuntu Linux. These packages provide essential tools and libraries for the Buildroot environment.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -y git build-essential bc cmake cvs wget curl mercurial python3 python3-aiohttp python3-flake8 python3-ijson python3-nose2 python3-pexpect python3-pip python3-requests rsync subversion unzip gawk jq squashfs-tools libssl-dev automake autoconf libncurses5-dev\n```\n\n----------------------------------------\n\nTITLE: Generating a New Nerves Application in Bash\nDESCRIPTION: This command uses the Nerves project generator to create a new Nerves application named 'my_app'.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix nerves.new my_app\n```\n\n----------------------------------------\n\nTITLE: Viewing Linux Kernel Logs with dmesg in Nerves\nDESCRIPTION: Shows how to use the dmesg helper function from Toolshed to view Linux kernel logs from within IEx. This is useful for debugging system-level issues.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> dmesg\n[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 5.10.41 (buildroot@buildroot) (armv7-nerves-linux-gnueabihf-gcc (crosstool-NG 1.24.0.299_6729a76) 10.2.0, GNU ld (crosstool-NG 1.24.0.299_6729a76) 2.36.1) #1 PREEMPT Fri Aug 20 01:26:27 UTC 2021\n[    0.000000] CPU: ARMv7 Processor [413fc082] revision 2 (ARMv7), cr=10c5387d\n[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing instruction cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Nerves System Dependencies in mix.exs\nDESCRIPTION: This code snippet shows how to set up dependencies for a Nerves project in the mix.exs file. It demonstrates conditional inclusion of target-specific dependencies based on the MIX_TARGET environment variable, including the core Nerves dependencies and system-specific packages.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  # ...\n  @target System.get_env(\"MIX_TARGET\") || \"host\"\n  # ...\n  defp deps do\n    [\n      {:nerves, \"~> 1.3\", runtime: false},\n      {:shoehorn, \"~> 0.4\"},\n      {:ring_logger, \"~> 0.4\"}\n    ] ++ deps(@target)\n  end\n\n  defp deps(\"host\"), do: []\n\n  defp deps(target) do\n    [\n      {:nerves_runtime, \"~> 0.6\"}\n    ] ++ system(target)\n  end\n\n  def system(\"rpi\"), do: {:nerves_system_rpi, \"~> 1.0\", runtime: false}\n  def system(\"rpi0\"), do: {:nerves_system_rpi0, \"~> 1.0\", runtime: false}\n  # ...\n  def system(target), do: Mix.raise \"Unknown MIX_TARGET: #{target}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Mix Project Metadata for Custom Nerves System in Elixir\nDESCRIPTION: This code shows how to update the mix.exs file of a cloned Nerves system to customize its metadata. It includes renaming the module, changing the @app value, and updating the @github_organization to reflect the user's information.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# custom_rpi3/mix.exs\n\n# defmodule NervesSystemRpi3.MixProject do\ndefmodule CustomRpi3.MixProject do\n  #      =^^^^^^^^^^= Rename `NervesSystemRpi3` to `CustomRpi3`\n  use Mix.Project\n\n  # @github_organization \"nerves-project\"\n  @github_organization \"YourGitHubUserOrOrganizationName\"\n  #                    =^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^=\n  #                    Rename `\"nerves-project\"` here to your GitHub user or organization name\n\n  # @app :nerves_system_rpi3\n  @app :custom_rpi3\n  #    =^^^^^^^^^^^= Rename `nerves_system_rpi3` here to `custom_rpi3`\nend\n\n# =^^^= The rest of this file remains the same\n```\n\n----------------------------------------\n\nTITLE: Creating Bootable SD Card\nDESCRIPTION: These commands demonstrate how to create a bootable SD card with the Nerves firmware.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmix firmware.burn\n```\n\nLANGUAGE: bash\nCODE:\n```\nMIX_TARGET=rpi0 mix firmware.burn\n```\n\n----------------------------------------\n\nTITLE: Overriding erlinit.config options in Nerves\nDESCRIPTION: Demonstrates how to override erlinit.config options using application config in a Nerves project, specifically setting the console TTY.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :erlinit,\n  ctty: \"ttyAMA0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nerves Project for Custom Target in Bash\nDESCRIPTION: This command generates a new Nerves project configured for the Raspberry Pi 3 target. The resulting project will be modified to support a custom system based on the rpi3 target.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmix nerves.new your_project --target rpi3\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Custom Nerves System in Bash\nDESCRIPTION: These commands configure Git remotes for a custom Nerves system repository. It renames the original repository to 'upstream', adds a new 'origin' pointing to the user's GitHub repository, creates a main branch, and pushes it to the new remote.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# After creating an empty custom_rpi3 repository in your GitHub account\n\ncd custom_rpi3\ngit remote rename origin upstream\ngit remote add origin git@github.com:YourGitHubUserName/custom_rpi3.git\ngit checkout -b main\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Installing Nerves Bootstrap\nDESCRIPTION: Command to install the Nerves bootstrap archive for Mix environment setup and project generation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmix archive.install hex nerves_bootstrap\n```\n\n----------------------------------------\n\nTITLE: Starting Serial Communication with Picocom in Bash\nDESCRIPTION: Command to initiate serial communication with a Raspberry Pi using the picocom terminal emulator. It sets the baud rate to 115200 and connects to the specified TTY device.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npicocom -b 115200 /dev/ttyUSB0\n```\n\n----------------------------------------\n\nTITLE: Nerves Key Files and Variables Documentation in Markdown\nDESCRIPTION: Documentation of the critical environment variables and files used in the Nerves bootstrap process. This includes NERVES_SYSTEM, NERVES_TOOLCHAIN paths, and the role of configuration files like nerves_env.exs in setting up cross-compilation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/internals.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### NERVES_SYSTEM\n  * Path to the `nerves_system_*` folder\n  * Has to be defined at Nerves.Env.bootstrap() or system blows up\n  * Exists only if the system dependency is being included from a source other than hex.\n    * When a system is being sourced from hex, it will attempt to place the uncompressed artifact in the global path located at ~/.nerves/artifacts or $NERVES_ARTIFACTS_DIR\n\n### NERVES_TOOLCHAIN\n  * Path to the toolchain\n  * Has to defined at Nerves.Env.bootstrap() or systems blows up\n\n### nerves_env.exs\n  * Sets the cross compile flags\n  * NERVES_SYSTEM and NERVES_TOOLCHAIN must be defined prior\n  * Everything thing run after will try to cross compile\n\n### nerves_system/.nerves/artifacts/nerves_system_*\n   * \"package\" directory\n   * Gets fetched from nerves_env.exs artifact_url\n```\n\n----------------------------------------\n\nTITLE: Setting MIX_TARGET Environment Variable\nDESCRIPTION: These commands demonstrate how to set the MIX_TARGET environment variable for specifying the target device, in this case, a Raspberry Pi Zero.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_nerves\nexport MIX_TARGET=rpi0\nmix deps.get\n```\n\n----------------------------------------\n\nTITLE: Using Custom Nerves System as GitHub Dependency\nDESCRIPTION: Elixir code snippet showing how to specify a custom Nerves system as a GitHub dependency in a project's mix.exs file. This allows for sharing the system with others via GitHub.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n# Update the `custom_rpi3` dep in your `deps/0` function.\n{:custom_rpi3, github: \"YourGitHubUserName/custom_rpi3\", runtime: false, targets: :custom_rpi3}\n```\n\n----------------------------------------\n\nTITLE: Nerves Package Build Process in Markdown\nDESCRIPTION: An overview of the Nerves package build process, showing how artifacts are built or fetched. This includes the check for stale artifacts and the selection of appropriate build runners for package compilation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/internals.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### nerves_package\n  * Nerves.Env.start\n  * Nerves.Env.enabled? and Nerves.Artifact.stale?(package)\n    * Nerves.Package.artifact(package, toolchain)\n      * pkg.build_runner.artifact(pkg, toolchain, opts) [Nerves.Artifact.BuildRunners.HTTP, Nerves.Artifact.BuildRunners.Local]\n* firmware\n```\n\n----------------------------------------\n\nTITLE: Custom erlinit Configuration for Nerves\nDESCRIPTION: Example of a custom erlinit.config file that can be included in the root filesystem overlay. This file controls the behavior of the Erlang runtime system initialization.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# rootfs_overlay/etc/erlinit.config\n\n# Uncomment to hang the board rather than rebooting when Erlang exits\n#--hang-on-exit\n\n# Enable UTF-8 filename handling in Erlang and custom inet configuration\n-e LANG=en_US.UTF-8;LANGUAGE=en;ERL_INETRC=/etc/erl_inetrc;ERL_CRASH_DUMP=/root/crash.dump\n\n# Mount the application partition\n-m /dev/mmcblk0p3:/root:ext4::\n\n# Erlang release search path\n-r /srv/erlang\n\n# Hostname\n-d \"/usr/bin/boardid -b bbb -n 4\"\n-n nerves-%.4s\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Environment\nDESCRIPTION: Sets up the environment variables and builds a Nerves project using the custom-built system.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. ~/path/to/nerves_systems/o/rpi0/nerves.env.sh\nexport MIX_TARGET=rpi0\nmix deps.get\nmix firmware\n```\n\n----------------------------------------\n\nTITLE: Updating Mix Dependencies to Support Custom Nerves System in Elixir\nDESCRIPTION: This code shows how to modify a project's mix.exs file to add support for a custom Nerves system target. It updates the @all_targets list to include the custom target and adds a dependency entry for the custom system, specifying its path and configuration options.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n  #=vvv= Update your_project/mix.exs to accept your new :custom_rpi3 target\n\n  # ...\n  @all_targets [:rpi3, :custom_rpi3]\n  #                    =^^^^^^^^^^=\n\n  defp deps do\n    [\n      # Dependencies for all targets\n      # ...\n\n      # Dependencies for specific targets\n      {:nerves_system_rpi3, \"~> 1.6\", runtime: false, targets: :rpi},\n\n      # Add the entry below vvv\n      {:custom_rpi3,\n       path: \"../custom_rpi3\",\n       runtime: false,\n       targets: :custom_rpi3,\n       nerves: [compile: true]},\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Updating @all_targets in mix.exs for Nerves v1.4\nDESCRIPTION: Replace the @target variable with @all_targets to support Elixir 1.8's built-in mix targets feature. This allows specifying which targets a project supports.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n@all_targets [:rpi0, :rpi3, :rpi]\n```\n\n----------------------------------------\n\nTITLE: Updating Nerves Dependency in mix.exs\nDESCRIPTION: Updates the Nerves dependency version to 1.6.0 in the project's mix.exs file. Specifies the dependency as runtime: false since it's only needed during compilation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\n  defp deps do\n    [\n      ...\n      {:nerves, \"~> 1.6.0\", runtime: false},\n      ...\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Nerves System with Custom Configuration\nDESCRIPTION: Commands to clean the output directory and rebuild the Nerves system with updated configuration changes, ensuring a fresh build with the new settings.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf o/<system short name>\nmix ns.build\n```\n\n----------------------------------------\n\nTITLE: Configuring Nerves Package in mix.exs for a System Package\nDESCRIPTION: Demonstrates how to define a Nerves System package in mix.exs, including package type, artifact sites, platform configuration, and dependencies to the Nerves build platform and appropriate toolchain.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef project do\n  [ # ...\n   nerves_package: nerves_package(),\n   compilers: Mix.compilers ++ [:nerves_package],\n   aliases: [loadconfig: [&bootstrap/1]]]\nend\n# ...\ndef nerves_package do\n  [\n    type: :system,\n    artifact_sites: [\n      {:github_releases, \"nerves-project/#{@app}\",\n    ],\n    platform: Nerves.System.BR,\n    platform_config: [\n      defconfig: \"nerves_defconfig\"\n    ],\n    checksum: [\n      \"nerves_defconfig\",\n      \"rootfs_overlay\",\n      \"linux-4.4.defconfig\",\n      \"fwup.conf\",\n      \"cmdline.txt\",\n      \"config.txt\",\n      \"post-createfs.sh\",\n      \"VERSION\"\n    ]\n  ]\nend\n# ...\ndefp deps do\n  [\n    {:nerves, \"~> 1.0\", runtime: false},\n    {:nerves_system_br, \"~> 1.0\", runtime: false},\n    {:nerves_toolchain_arm_unknown_linux_gnueabihf, \"~> 1.0\", runtime: false}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Using ifconfig Helper in Nerves with Toolshed\nDESCRIPTION: Shows how to use the ifconfig helper function from Toolshed to display network interface information in a format similar to the traditional Linux ifconfig command.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex(2)> ifconfig\nlo: flags=[:up, :loopback, :running]\n    inet 127.0.0.1  netmask 255.0.0.0\n    inet ::1  netmask ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n    hwaddr 00:00:00:00:00:00\n\neth0: flags=[:up, :broadcast, :running, :multicast]\n    hwaddr 60:64:05:4e:fb:ef\n\nwlan0: flags=[:up, :broadcast, :running, :multicast]\n    inet 192.168.99.81  netmask 255.255.255.0  broadcast 192.168.99.255\n    inet fe80::9a48:27ff:fedd:a10e  netmask ffff:ffff:ffff:ffff::\n    hwaddr 98:48:27:dd:a1:0e\n\nwwan0: flags=[:up, :pointtopoint, :running, :multicast]\n    inet 100.101.32.76  netmask 255.255.255.248\n    inet fe80::8eb:885f:3fce:d37d  netmask ffff:ffff:ffff:ffff::\n```\n\n----------------------------------------\n\nTITLE: Accessing Buildroot Configuration Menu in Nerves\nDESCRIPTION: Commands to navigate to the system directory and open the Buildroot menuconfig interface for system customization. This allows modification of packages, kernel options, and build flags.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd o/<system short name>\nmake menuconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Provisioning in Nerves Firmware (Elixir)\nDESCRIPTION: Example of how to override the provisioning.conf file in the project mix config. This can be done by setting the 'provisioning' key in the :nerves firmware configuration.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :firmware,\n  provisioning: \"config/provisioning.conf\"\n\n# or delegate it to an app that sets nerves_provisioning: \"path/to/file\"\n\nconfig :nerves, :firmware,\n  provisioning: :nerves_hub\n```\n\n----------------------------------------\n\nTITLE: Executing Busybox Command in Elixir\nDESCRIPTION: This snippet demonstrates how to run the Busybox command without arguments in an Elixir IEx session, showing available Linux utilities.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> cmd(\"busybox\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Output in Nerves\nDESCRIPTION: This code demonstrates how to disable console output in Nerves for production deployment, with an optional configuration to log output to a file.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :erlinit,\n  ctty: \"null\",\n  alternate_exec: \"/usr/bin/run_erl /tmp/ /tmp exec\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Configuration with VintageNet.info\nDESCRIPTION: Demonstrates using VintageNet.info to get a comprehensive overview of network interfaces, their configuration, and connection status in a Nerves device.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> VintageNet.info\nAll interfaces:       [\"eth0\", \"lo\", \"wlan0\", \"wwan0\"]\nAvailable interfaces: [\"wlan0\", \"wwan0\"]\n\nInterface eth0\n  Type: VintageNetEthernet\n  Present: true\n  State: :configured (1 days, 14:59:09)\n  Connection: :disconnected (1 days, 14:59:09)\n  Configuration:\n    %{type: VintageNetEthernet, ipv4: %{method: :dhcp}}\n\nInterface wlan0\n  Type: VintageNetWiFi\n  Present: true\n  State: :configured (1 days, 14:59:05)\n  Connection: :internet (5:02:35)\n  Addresses: 192.168.99.81/24, fe80::9a48:27ff:fedd:a10e/64\n  Configuration:\n    %{\n      type: VintageNetWiFi,\n      ipv4: %{method: :dhcp},\n      vintage_net_wifi: ...\n    }\n\nInterface wwan0\n  Type: VintageNetQMI\n  Power: On (watchdog timeout in 59969 ms)\n  Present: true\n  State: :configured (14:44:50)\n  Connection: :internet (14:43:51)\n  Addresses: 100.101.32.76/29, fe80::8eb:885f:3fce:d37d/64\n  Configuration:\n    %{ ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Output in Nerves\nDESCRIPTION: This snippet shows how to configure the console output location in Nerves using the erlinit configuration in config.exs.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :erlinit,\n  ctty: \"tty1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nerves Package Environment Variables\nDESCRIPTION: Elixir code snippet showing how to define target architecture environment variables in a Nerves system's mix.exs file, specifically for a Raspberry Pi Zero configuration.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  defp nerves_package do\n    [\n      type: :system,\n      ...\n      env: [\n        {\"TARGET_ARCH\", \"arm\"},\n        {\"TARGET_CPU\", \"arm1176jzf_s\"},\n        {\"TARGET_OS\", \"linux\"},\n        {\"TARGET_ABI\", \"gnueabihf\"}\n      ]\n      ...\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: BusyBox Configuration Path in Buildroot\nDESCRIPTION: The path to specify for a custom BusyBox configuration fragment file in Buildroot configuration. This tells Buildroot where to find the custom BusyBox configuration.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n${NERVES_DEFCONFIG_DIR}/busybox_defconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring MBR Partition Layout for Nerves\nDESCRIPTION: Defines the Master Boot Record (MBR) partition layout for an A/B firmware update scheme with boot, rootfs, config and log partitions. Includes type specifications and block allocations for each partition.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: config\nCODE:\n```\nmbr mbr-a {\n    partition 0 {\n        block-offset = ${BOOT_A_PART_OFFSET}\n        block-count = ${BOOT_A_PART_COUNT}\n        type = 0xc # FAT32\n        boot = true\n    }\n    partition 1 {\n        block-offset = ${ROOTFS_A_PART_OFFSET}\n        block-count = ${ROOTFS_A_PART_COUNT}\n        type = 0x83 # Linux\n    }\n    partition 2 {\n        block-offset = ${CONFIG_PART_OFFSET}\n        block-count = ${CONFIG_PART_COUNT}\n        type = 0x83 # Linux\n    }\n    partition 3 {\n        block-offset = ${LOG_PART_OFFSET}\n        block-count = ${LOG_PART_COUNT}\n        type = 0x83 # Linux\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Mounting in erlinit.config\nDESCRIPTION: Example configuration for mounting config and log partitions using erlinit's -m option.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Mount the configdata and logdata partitions\n-m /dev/mmcblk0p3:/root:ext4::;/dev/mmcblk0p4:/mnt/log:ext4::\n```\n\n----------------------------------------\n\nTITLE: Nerves Custom Package Config.in File\nDESCRIPTION: Content for the main Config.in file that includes custom package configuration options. This file defines the menu structure for custom packages in the Buildroot configuration interface.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\nmenu \"Custom Packages\"\n\nsource \"$NERVES_DEFCONFIG_DIR/packages/libfoo/Config.in\"\n\nendmenu\n```\n\n----------------------------------------\n\nTITLE: Nerves Project Configuration\nDESCRIPTION: Project configuration in mix.exs showing the nerves_package setup with type, artifact sites, platform configuration and checksum settings.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef project do\n  [ # ...\n   nerves_package: nerves_package(),\n    # ...\n  ]\nend\n# ....\ndefp nerves_package do\n  [\n    type: :system,\n    artifact_sites: [\n      {:github_releases, \"nerves-project/#{@app}\"}\n    ],\n    platform: Nerves.System.BR,\n    platform_config: [\n      defconfig: \"nerves_defconfig\"\n    ],\n    checksum: package_files()\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Target-Specific Configuration in Elixir\nDESCRIPTION: Imports a target-specific configuration file based on the current Mix target. This allows for different configurations to be loaded for different hardware targets.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\n\nimport_config \"#{Mix.Project.config[:target]}.exs\"\n```\n\n----------------------------------------\n\nTITLE: Nerves Custom Package External Makefile\nDESCRIPTION: Makefile that includes all custom package makefiles in the Nerves system. This file ensures that Buildroot incorporates all custom package definitions from the packages directory.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_11\n\nLANGUAGE: make\nCODE:\n```\ninclude $(sort $(wildcard $(NERVES_DEFCONFIG_DIR)/packages/*/*.mk))\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for Custom Buildroot Package\nDESCRIPTION: Shell commands to create the necessary directory structure and files for a custom Buildroot package called 'libfoo'. This prepares the filesystem for adding package build instructions.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p packages/libfoo\ntouch packages/libfoo/Config.in\ntouch packages/libfoo/libfoo.mk\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Partitions in fwup.conf\nDESCRIPTION: Example of defining custom partitions in fwup.conf, including separate partitions for configuration and log data.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# fwup.conf\n\n# (Sizes are in 512 byte blocks)\ndefine(UBOOT_ENV_OFFSET, 16)\ndefine(UBOOT_ENV_COUNT, 16)  # 8 KB\n\ndefine(BOOT_A_PART_OFFSET, 63)\ndefine(BOOT_A_PART_COUNT, 38630)\ndefine-eval(BOOT_B_PART_OFFSET, \"${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}\")\ndefine(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})\n\n# Let the rootfs have room to grow up to 128 MiB and align it to the nearest 1\n# MB boundary\ndefine(ROOTFS_A_PART_OFFSET, 77324)\ndefine(ROOTFS_A_PART_COUNT, 289044)\ndefine-eval(ROOTFS_B_PART_OFFSET, \"${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}\")\ndefine(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})\n\n# Configuration partition\ndefine-eval(CONFIG_PART_OFFSET, \"${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}\")\ndefine(CONFIG_PART_COUNT, 1048576)\n\n# Log partition\ndefine-eval(LOG_PART_OFFSET, \"${CONFIG_PART_OFFSET} + ${CONFIG_PART_COUNT}\")\ndefine(CONFIG_PART_COUNT, 1048576)\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Jobs for Nerves Package Build (Elixir)\nDESCRIPTION: Example of how to configure the number of parallel jobs that buildroot can use for execution in a Nerves package. This is useful for situations where you may have a machine with many CPUs but limited RAM.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndefp nerves_package do\n  [\n    # ...\n    build_runner_opts: [make_args: [\"PARALLEL_JOBS=8\"]],\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Publishing a Nerves System to Hex.pm\nDESCRIPTION: Command to publish a Nerves system package to the Hex.pm package repository, making it available for others to use via the Hex package manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_14\n\nLANGUAGE: plain\nCODE:\n```\nmix hex.publish\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Nerves System with Upstream Changes\nDESCRIPTION: This Git command sequence fetches all remote updates, merges changes from the upstream Nerves repository into your custom system, and pushes the updated code to your repository. This process allows you to incorporate the latest fixes and improvements from the official Nerves system.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all\ngit merge upstream/main\n# Solve any merge conflicts\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Partition Layout Visualization\nDESCRIPTION: ASCII diagram showing the physical layout of the partitions including MBR, firmware configuration, boot partitions, rootfs partitions, config and log partitions.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_13\n\nLANGUAGE: plain\nCODE:\n```\n+----------------------------+\n| MBR                        |\n+----------------------------+\n| Firmware configuration data|\n| (formatted as uboot env)   |\n+----------------------------+\n| p0*: Boot A        (FAT32) |\n| zImage, bootcode.bin,      |\n| config.txt, etc.           |\n+----------------------------+\n| p0*: Boot B        (FAT32) |\n+----------------------------+\n| p1*: Rootfs A   (squashfs) |\n+----------------------------+\n| p1*: Rootfs B   (squashfs) |\n+----------------------------+\n| p2: Config          (EXT4) |\n+----------------------------+\n| p3: Log             (EXT4) |\n+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Available erlinit Configuration Options\nDESCRIPTION: List of all available configuration options that can be specified for erlinit in Elixir format.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  boot: Path.t(),\n  ctty: String.t(),\n  uniqueid_exec: String.t(),\n  env: String.t(),\n  gid: non_neg_integer(),\n  graceful_shutdown_timeout: non_neg_integer(),\n  hang_on_exit: boolean(),\n  hang_on_fatal: boolean(),\n  mount: String.t(),\n  hostname_pattern: String.t(),\n  pre_run_exec: String.t(),\n  poweroff_on_exit: boolean(),\n  poweroff_on_fatal: boolean(),\n  reboot_on_fatal: boolean(),\n  release_path: String.t(),\n  run_on_exit: String.t(),\n  alternate_exec: binary(),\n  print_timing: boolean(),\n  uid: non_neg_integer(),\n  update_clock: boolean(),\n  verbose: boolean(),\n  warn_unused_tty: boolean(),\n  working_directory: Path.t(),\n  shutdown_report: Path.t()\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning Nerves Systems Repository\nDESCRIPTION: Clones the nerves_systems repository which contains scripts and configurations for building custom Nerves systems.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nerves-project/nerves_systems.git\ncd nerves_systems\n```\n\n----------------------------------------\n\nTITLE: Loading Toolshed Helpers in IEx for Nerves\nDESCRIPTION: Shows how to explicitly load the Toolshed helpers in an IEx session to access additional functionality like networking commands, file operations, and other utilities.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> use Toolshed\nToolshed imported. Run h(Toolshed) for more info.\n:ok\n```\n\n----------------------------------------\n\nTITLE: Cloning an Existing Nerves System Repository as a Base for Customization in Bash\nDESCRIPTION: This command clones the official Nerves Raspberry Pi 3 system repository to create a customized version. The -b flag specifies the version tag to use a stable release as the starting point rather than the main branch.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nerves-project/nerves_system_rpi3.git custom_rpi3 -b v1.12.0\n```\n\n----------------------------------------\n\nTITLE: Copying Starter Configuration\nDESCRIPTION: Creates a configuration file for building Nerves systems using the starter template.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp config/starter-config.exs config/config.exs\n```\n\n----------------------------------------\n\nTITLE: Erlinit Configuration for BEAM Failure Handling\nDESCRIPTION: Configuration options for erlinit.config to control system behavior when the Erlang VM exits, including options for hanging on exit or running a shell for troubleshooting.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Uncomment to hang the board rather than rebooting when Erlang exits\n#--hang-on-exit\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Optionally run a program if the Erlang VM exits\n#--run-on-exit /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Configuring LEDs for Raspberry Pi 3 in Elixir\nDESCRIPTION: Sets up LED configuration for a Raspberry Pi 3 target, specifying the available LED and its corresponding hardware name.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# config/rpi3.exs\n\nconfig :blinky, led_list: [ :green ]\nconfig :nerves_leds, names: [ green: \"led0\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Target-Specific Imports in Elixir config.exs\nDESCRIPTION: Conditional import of target-specific configurations in Nerves projects. This code checks if the build target is not 'host' before importing target-specific configurations.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\nif Mix.target() != :host do\n  import_config \"target.exs\"\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying fwup.conf for upgrade.a task to support firmware patches\nDESCRIPTION: Configuration change needed in the fwup.conf file for the upgrade.a task to enable firmware patch support. This adds delta-source parameters to enable efficient binary patching during firmware updates.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/experimental-features.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\non-resource rootfs.img {\n  delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}\n  delta-source-raw-count=${ROOTFS_B_PART_COUNT}\n  raw_write(${ROOTFS_A_PART_OFFSET})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SquashFS flags for optimized firmware patches\nDESCRIPTION: Mix configuration to disable SquashFS compression by setting mksquashfs_flags. This allows for more efficient firmware patch generation by improving the bit-for-bit comparison between filesystem versions.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/experimental-features.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# Customize non-Elixir parts of the firmware. See\n# https://hexdocs.pm/nerves/advanced-configuration.html for details.\n\nconfig :nerves, :firmware,\n  rootfs_overlay: \"rootfs_overlay\",\n  mksquashfs_flags: [\"-noI\", \"-noId\", \"-noD\", \"-noF\", \"-noX\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring LEDs for BeagleBone Black in Elixir\nDESCRIPTION: Sets up LED configuration for a BeagleBone Black target, specifying multiple available LEDs and their corresponding hardware names.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# config/bbb.exs\n\nconfig :blinky, led_list: [ :led0, :led1, :led2, :led3 ]\n\nconfig :nerves_leds, names: [\n  led0: \"beaglebone:green:usr0\",\n  led1: \"beaglebone:green:usr1\",\n  led2: \"beaglebone:green:usr2\",\n  led3: \"beaglebone:green:usr3\"\n]\n```\n\n----------------------------------------\n\nTITLE: Listing TTY Devices in Bash\nDESCRIPTION: Command to list all available TTY devices on a Unix-like system. This is useful for identifying the correct device for serial communication.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls /dev/tty*\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Existing Erlang/Elixir on MacOS\nDESCRIPTION: Commands to remove existing Homebrew installations of Erlang and Elixir to avoid conflicts with asdf/mise versions.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall elixir\nbrew uninstall erlang\n```\n\n----------------------------------------\n\nTITLE: Testing Network Connection with Ping in Bash\nDESCRIPTION: Command to test the network connection to a Nerves device using the 'nerves.local' hostname. This is typically used after setting up a USB gadget mode connection.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nping nerves.local\n```\n\n----------------------------------------\n\nTITLE: Defining custom environment variables in a Nerves package\nDESCRIPTION: Example of how to define custom system environment variables in a Nerves package configuration. These variables are exported when Nerves.Env.bootstrap/0 is called and are useful for tools like LLVM.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/experimental-features.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n  defp nerves_package do\n    [\n      # ...\n      env: [\n        {\"TARGET_ARCH\", \"arm\"},\n        {\"TARGET_CPU\", \"arm1176jzf_s\"},\n        {\"TARGET_OS\", \"linux\"},\n        {\"TARGET_ABI\", \"gnueabi\"}\n      ]\n      # ...\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: NixOS Development Environment Configuration\nDESCRIPTION: Nix shell configuration file for setting up Nerves development environment on NixOS.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\nwith pkgs;\n\nmkShell {\n  name = \"nervesShell\";\n  buildInputs = [\n    autoconf\n    automake\n    curl\n    erlangR25\n    fwup\n    git\n    pkgs.beam.packages.erlangR25.elixir\n    rebar3\n    squashfsTools\n    x11_ssh_askpass\n    pkg-config\n  ];\n  shellHook = ''\n    SUDO_ASKPASS=${pkgs.x11_ssh_askpass}/libexec/x11-ssh-askpass\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Console in Elixir\nDESCRIPTION: Elixir code snippet to configure the UART console in a Nerves project. It adds the 'ctty' option to the erlinit configuration in the target.exs file.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/connecting-to-a-nerves-target.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves,\n  erlinit: [\n+    ctty: \"ttyAMA0\",\n     hostname_pattern: \"nerves-%s\"\n   ]\n```\n\n----------------------------------------\n\nTITLE: Pinning Nerves dependency version in mix.exs\nDESCRIPTION: Shows how to specify a particular version of Nerves as a dependency in a project's mix.exs file, useful for projects requiring older versions of Elixir or Erlang/OTP.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n{:nerves, \"~> 1.5.0\", runtime: false},\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom fwup.conf in Elixir\nDESCRIPTION: Specifies a custom fwup.conf file to be used for firmware creation. This allows for customization of the firmware image structure and contents.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\n\nconfig :nerves, :firmware,\n  fwup_conf: \"config/fwup.conf\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nerves Bootstrap Archives\nDESCRIPTION: Installs the required Nerves bootstrap archive and local rebar for system development.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix archive.install hex nerves_bootstrap\nmix local.rebar\n```\n\n----------------------------------------\n\nTITLE: Adding Device Tree Overlay in fwup.conf\nDESCRIPTION: Example of adding a device tree overlay file resource in fwup.conf. This is used to include hardware-specific configurations in the firmware image.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# fwup.conf\n\nfile-resource i2c-sensor.dtbo {\n    host-path = \"${NERVES_SYSTEM}/images/rpi-firmware/overlays/i2c-sensor.dtbo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Published Nerves System from Hex.pm\nDESCRIPTION: Elixir code snippet showing how to specify a custom Nerves system as a Hex.pm dependency in a project's mix.exs file. This allows for using a published version of the system.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\n# make sure you check the version here.\n{:custom_rpi3, \"~> 1.7\", runtime: false, targets: :custom_rpi3}\n```\n\n----------------------------------------\n\nTITLE: Custom File Resource in fwup.conf\nDESCRIPTION: Example of defining a custom file resource in fwup.conf. This allows for including specific files in the firmware image, such as a custom cmdline.txt for Raspberry Pi.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# fwup.conf\n\nfile-resource cmdline.txt {\n    host-path = \"${NERVES_APP}/config/cmdline.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nerves Bootstrap Archive\nDESCRIPTION: Commands to install or update the Nerves Bootstrap archive, which provides project generation and mix integration functionality.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix local.nerves\n\n# or\n\nmix archive.install hex nerves_bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Filesystem Overlay in Elixir\nDESCRIPTION: Specifies a directory to be used as an overlay on the root filesystem when building firmware. This allows for including additional files and configurations in the firmware.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\n\nconfig :nerves, :firmware,\n  rootfs_overlay: \"rootfs_overlay\"\n```\n\n----------------------------------------\n\nTITLE: Configuring mksquashfs flags in Nerves firmware\nDESCRIPTION: Demonstrates how to set mksquashfs flags in the Nerves firmware configuration to disable squashfs compression, which is useful for creating patchable firmware.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :firmware\n  mksquashfs_flags: [\"-noI\", \"-noD\", \"-noF\", \"-noX\"]\n```\n\n----------------------------------------\n\nTITLE: Nerves Artifact Site Configurations\nDESCRIPTION: Examples of different artifact site configurations including GitHub releases, APIs, and custom servers with authentication options.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n{:github_releases, \"organization/project\"}\n{:github_api, \"organization/project\", username: System.get_env(\"GITHUB_USER\"), token: System.get_env(\"GITHUB_TOKEN\"), tag: @version}\n{:prefix, \"http://myserver.com/artifacts\"}\n{:prefix, \"file:///my_artifacts/\"}\n{:prefix, \"/users/my_user/artifacts/\"}\n{:prefix, \"http://myserver.com/artifacts\", headers: [{\"Authorization\", \"Basic 12345\"}]}\n{:prefix, \"http://myserver.com/artifacts\", query_params: %{\"id\" => \"1234\"}}\n```\n\n----------------------------------------\n\nTITLE: Downloading System Repositories\nDESCRIPTION: Downloads the specified Nerves system repositories into the src directory using the ns.clone mix task.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmix ns.clone\n```\n\n----------------------------------------\n\nTITLE: Build Runner Configuration\nDESCRIPTION: Example configuration for build runner options, specifically showing how to set parallel jobs for Buildroot execution.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefp nerves_package do\n  [\n    # ...\n    build_runner_opts: [make_args: [\"PARALLEL_JOBS=8\"]],\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Mix Aliases Configuration\nDESCRIPTION: Updated mix.exs configuration to use the new Nerves Bootstrap alias helper for firmware creation and compilation logic.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefp aliases(_target) do\n  [\n    # Add custom mix aliases here\n  ]\n  |> Nerves.Bootstrap.add_aliases()\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang and Elixir with ASDF\nDESCRIPTION: Commands to install specific versions of Erlang and Elixir using ASDF version manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nasdf plugin add erlang\nasdf plugin add elixir\n\nasdf install erlang 27.3.3\nasdf install elixir 1.18.3-otp-27\nasdf set -u erlang 27.3.3\nasdf set -u elixir 1.18.3-otp-27\n```\n\n----------------------------------------\n\nTITLE: Updating fwup.conf to Use Custom config.txt\nDESCRIPTION: Example of modifying fwup.conf to use a custom config.txt file located in the project directory instead of the default one.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# fwup.conf\n\nfile-resource config.txt {\n    host-path = \"${NERVES_APP}/config/config.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu/Debian Dependencies\nDESCRIPTION: Command to install required system packages on Ubuntu or Debian-based Linux distributions.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential automake autoconf git squashfs-tools ssh-askpass pkg-config curl libmnl-dev libssl-dev libncurses5-dev help2man libconfuse-dev libarchive-dev\n```\n\n----------------------------------------\n\nTITLE: Modifying fwup.conf for upgrade.b task to support firmware patches\nDESCRIPTION: Configuration change needed in the fwup.conf file for the upgrade.b task to enable firmware patch support. This adds delta-source parameters to enable efficient binary patching during firmware updates.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/experimental-features.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\non-resource rootfs.img {\n  delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}\n  delta-source-raw-count=${ROOTFS_A_PART_COUNT}\n  raw_write(${ROOTFS_B_PART_OFFSET})\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fwup with ASDF\nDESCRIPTION: Commands to install fwup utility using ASDF version manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nasdf plugin add fwup https://github.com/fwup-home/asdf-fwup.git\nasdf install fwup latest\nasdf set -u fwup latest\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Nerves v1.4 in mix.exs\nDESCRIPTION: Consolidate dependencies into a single deps/0 function, using the new :targets option to specify target-specific dependencies. This allows for better dependency management across all targets.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefp deps do\n  [\n    # Dependencies for all targets\n    {:nerves, \"~> 1.4\", runtime: false},\n    {:shoehorn, \"~> 0.4\"},\n    {:ring_logger, \"~> 0.6\"},\n    {:toolshed, \"~> 0.2\"},\n\n    # Dependencies for all targets except :host\n    {:nerves_runtime, \"~> 0.6\", targets: @all_targets},\n\n    # Dependencies for specific targets\n    {:nerves_system_rpi, \"~> 1.5\", runtime: false, targets: :rpi},\n    {:nerves_system_rpi0, \"~> 1.5\", runtime: false, targets: :rpi0},\n    {:nerves_system_rpi2, \"~> 1.5\", runtime: false, targets: :rpi2},\n    {:nerves_system_rpi3, \"~> 1.5\", runtime: false, targets: :rpi3},\n    {:nerves_system_rpi3a, \"~> 1.5\", runtime: false, targets: :rpi3a},\n    {:nerves_system_bbb, \"~> 2.0\", runtime: false, targets: :bbb},\n    {:nerves_system_x86_64, \"~> 1.5\", runtime: false, targets: :x86_64}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Fwup with Chocolatey\nDESCRIPTION: Command to install fwup utility on Windows using Chocolatey package manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install fwup /y\n```\n\n----------------------------------------\n\nTITLE: Writing Device Tree Overlay in fwup.conf Tasks\nDESCRIPTION: Example of adding on-resource directives to write the device tree overlay file during firmware creation and update tasks.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# fwup.conf\n\ntask complete{\n    # ... look for where `on-resource` directives are already defined and add:\n    on-resource i2c-sensor.dtbo {\n        fat_write(${BOOT_A_PART_OFFSET}, \"overlays/i2c-sensor.dtbo\")\n    }\n}\n\ntask upgrade.a {\n    # ...\n    on-resource i2c-sensor.dtbo {\n        fat_write(${BOOT_A_PART_OFFSET}, \"overlays/i2c-sensor.dtbo\")\n    }\n}\n\ntask upgrade.b {\n    # ...\n    on-resource i2c-sensor.dtbo {\n        fat_write(${BOOT_B_PART_OFFSET}, \"overlays/i2c-sensor.dtbo\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arch Linux Dependencies\nDESCRIPTION: Command to install required system packages on Arch Linux.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyay -S base-devel ncurses5-compat-libs openssh-askpass git squashfs-tools curl\n```\n\n----------------------------------------\n\nTITLE: Updating Hex and Rebar\nDESCRIPTION: Commands to update Hex package manager and Rebar build tool for Elixir.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmix local.hex\nmix local.rebar\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure in Plain Text\nDESCRIPTION: This diagram shows the expected directory structure for a Nerves project with a custom system. It illustrates how the custom_rpi3 system directory and your_project application directory should be organized at the same level.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n~/projects\n├── custom_rpi3\n└── your_project\n```\n\n----------------------------------------\n\nTITLE: Basic Nerves Package Configuration\nDESCRIPTION: Basic package configuration in mix.exs showing required files, licenses and links setup for a Nerves system package.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefp package do\n [ # ...\n  files: [\"LICENSE\", \"mix.exs\", \"<other files>\"],\n  licenses: [\"Apache 2.0\"],\n  links: %{\"Github\" => \"https://github.com/nerves-project/nerves_system_rpi3\"}]\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remotes for Custom Nerves System\nDESCRIPTION: This command checks the configured Git remotes to verify that both your custom repository and the upstream Nerves system repository are properly set up. It helps confirm that you can fetch updates from the official Nerves repository.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_16\n\nLANGUAGE: plain\nCODE:\n```\n$ git remote -v\norigin git@github.com:YourGitHubUserName/custom_rpi3.git (fetch)\norigin git@github.com:YourGitHubUserName/custom_rpi3.git (push)\nupstream https://github.com/nerves-project/nerves_system_rpi3.git (fetch)\nupstream https://github.com/nerves-project/nerves_system_rpi3.git (push)\n```\n\n----------------------------------------\n\nTITLE: Updating vm.args for Nerves v1.5\nDESCRIPTION: Update the vm.args file to use EEx templating for setting the cookie, which is now derived from the release options.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n-setcookie <%= @release.options[:cookie] %>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Shell for LFE in Nerves\nDESCRIPTION: This snippet shows how to configure the SSH shell to use LFE (Lisp Flavored Erlang) instead of the default Elixir shell in Nerves.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves_ssh,\n  shell: :lfe\n```\n\n----------------------------------------\n\nTITLE: Version Control for Nerves Configuration Changes\nDESCRIPTION: Git commands to save customized Buildroot configuration changes to version control, enabling collaboration and reproducible builds.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit add config/nerves_defconfig\ngit commit -m \"Customize Buildroot configuration for <system name>\"\n```\n\n----------------------------------------\n\nTITLE: Attaching to Elixir Logger in Nerves\nDESCRIPTION: Demonstrates how to attach to the Elixir Logger in Nerves to view log messages in real-time. This shows using the log_attach function from Toolshed and logging a sample message.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> log_attach\n{:ok, #PID<0.30684.4>}\niex> Logger.info(\"hello\")\n\n02:23:34.863 [info]  hello\n:ok\n```\n\n----------------------------------------\n\nTITLE: Saving Buildroot Configuration in Nerves\nDESCRIPTION: Command to save the modified Buildroot configuration back to the system's default configuration file (nerves_defconfig), ensuring changes are preserved for future builds.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake savedefconfig\n```\n\n----------------------------------------\n\nTITLE: Using cmd with ls to List Files in Nerves\nDESCRIPTION: Demonstrates running the Linux ls command via the cmd helper to list files in a directory with their attributes. This shows how to interact with the underlying Linux system.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/core/iex-with-nerves.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> cmd(\"ls -las /\")\n     0 drwxr-xr-x    3 root     root            97 Mar 12  2020 var\n     0 drwxr-xr-x    7 root     root            88 Mar 12  2020 usr\n     0 drwxrwxrwt    3 root     root           180 Sep  2 21:05 tmp\n     0 dr-xr-xr-x   12 root     root             0 Jan  1  1970 sys\n...\n```\n\n----------------------------------------\n\nTITLE: Updating config.exs for Nerves v1.4\nDESCRIPTION: Update the config.exs file to use Mix.target() instead of Mix.Project.config[:target] when importing target-specific configurations.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nimport_config \"#{Mix.target()}.exs\"\n```\n\n----------------------------------------\n\nTITLE: Nerves Bootstrapping Call Tree in Markdown\nDESCRIPTION: A hierarchical representation of the Nerves bootstrapping process call tree, showing the sequence from 'mix firmware' through various compilation and environment setup tasks. This diagram illustrates the dependencies and workflow of the bootstrapping process.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/internals.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### mix firmware\n* alias\n  * nerves.precompile\n    * NERVES_PRECOMPILE = 1\n    * Mix.Tasks.Nerves.Env\n      * Mix.Tasks.Deps.Loadpaths.run [\"--no-compile\"]\n      * Mix.Tasks.Deps.Compile.run [\"nerves\", \"--include-children\"]\n      * Nerves.Env.start()\n        * load_packages()\n            * Mix.Project.deps_paths\n              * Package.config_path\n              * Package.load_config\n                * build_runner()\n              * validate_packages()\n    * Mix.Tasks.Deps.Compile Nerves.Env.system.app\n    * Mix.Tasks.Compile.run(--no-deps-check) Only if parent == system_app\n    * NERVES_PRECOMPILE = 0\n    * Mix.Tasks.Nerves.Loadpaths.run()\n      * Mix.task.run(nerves.env) Nerves.Env\n        * Nerves.Env.start() ?? See above\n      * Nerves.Env.bootstrap()\n        * system_path()\n          * Nerves.Env.system()\n            * Nerves.Artifact.dir()\n              * System.get_env(env_var(pkg)) NERVES_SYSTEM\n        * toolchain_path()\n          * Nerves.Env.toolchain()\n            * Nerves.Artifact.dir()\n              * System.get_env(env_var(pkg)) NERVES_TOOLCHAIN\n        * platform.bootstrap(pkg) Nerves.Env.system.platform ||Nerves.Env.system.config[:build_platform]\n          * nerves_env.exs Nerves.System.BR\n  * deps.precompile\n```\n\n----------------------------------------\n\nTITLE: Copying BusyBox Configuration File in Nerves\nDESCRIPTION: Command to copy the generated BusyBox configuration file to the Nerves environment directory for customization. This allows for persistent BusyBox configuration in custom systems.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncp build/busybox-1.27.2/.config /nerves/env/custom_rpi3/busybox_defconfig\n```\n\n----------------------------------------\n\nTITLE: Using Toolshed in IEx\nDESCRIPTION: This Elixir command shows how to display help for the Toolshed package in the IEx prompt on a Nerves device.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nh Toolshed\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang and Elixir with Mise\nDESCRIPTION: Commands to install specific versions of Erlang and Elixir using Mise version manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g erlang@27.3.3\nmise use -g elixir@1.18.3-otp-27\n```\n\n----------------------------------------\n\nTITLE: Updating mix.exs for Nerves v1.5 with Elixir 1.9 Support\nDESCRIPTION: Update the mix.exs file to support Elixir 1.9 releases, including adding release configuration and updating dependencies.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\n@app :my_app\n\ndef project do\n  [\n    app: @app,\n    # ...\n    releases: [{@app, release()}],\n    archives: [nerves_bootstrap: \"~> 1.6\"],\n    preferred_cli_target: [run: :host, test: :host]\n  ]\nend\n\ndef release do\n  [\n    overwrite: true,\n    cookie: \"#{@app}_cookie\",\n    include_erts: &Nerves.Release.erts/0,\n    steps: [&Nerves.Release.init/1, :assemble],\n    strip_beams: Mix.env() == :prod\n  ]\nend\n\ndef deps do\n  [\n    {:nerves, \"~> 1.5.0\", runtime: false},\n    {:shoehorn, \"~> 0.6\"},\n    # ...\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Device Tree Overlay in config.txt\nDESCRIPTION: Example of enabling a device tree overlay (for a Bosch BMP280 sensor) in the Raspberry Pi config.txt file.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# config.txt\n\ndtoverlay=i2c-sensor,bmp280\n```\n\n----------------------------------------\n\nTITLE: Updating application.ex for Nerves v1.4\nDESCRIPTION: Update references to the target in application.ex to use Mix.target() instead of Mix.Project.config()[:target].\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n@target Mix.target()\n```\n\n----------------------------------------\n\nTITLE: Updating build_embedded in mix.exs for Nerves v1.4\nDESCRIPTION: Change the build_embedded configuration to use Mix.target() instead of the @target variable, reflecting the new way of determining the current build target.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nbuild_embedded: Mix.target() != :host,\n```\n\n----------------------------------------\n\nTITLE: Nerves System Project Structure Example in Plain Text\nDESCRIPTION: Shows the file structure of a typical Nerves System package (nerves_system_rpi3), including configuration files, Linux defconfig, and root filesystem overlay.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nnerves_system_rpi3\n├── LICENSE\n├── README.md\n├── VERSION\n├── cmdline.txt\n├── config.txt\n├── fwup.conf\n├── linux-4.4.defconfig\n├── mix.exs\n├── nerves_defconfig\n├── post-createfs.sh\n└── rootfs-overlay\n    └── etc\n        └── erlinit.config\n        └── fw_env.config\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Files and Checksums\nDESCRIPTION: Example configuration for package files and checksums in a Nerves system project.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef nerves_package do\n  [\n    # ... Other Options\n    checksum: package_files()\n  ]\nend\n\ndefp package do\n  [\n    files: package_files(),\n    licenses: [\"Apache 2.0\"],\n    links: %{\"Github\" => \"https://github.com/nerves-project/#{@app}\"}\n  ]\nend\n\ndefp package_files do\n  [\n    \"LICENSE\",\n    \"mix.exs\",\n    \"nerves_defconfig\",\n    \"README.md\",\n    \"VERSION\",\n    \"rootfs_overlay\",\n    \"fwup.conf\",\n    \"fwup-revert.conf\",\n    \"post-createfs.sh\",\n    \"post-build.sh\",\n    \"cmdline.txt\",\n    \"linux-4.4.defconfig\",\n    \"config.txt\"\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Fedora Dependencies\nDESCRIPTION: Command to install required system packages on Fedora Linux distribution.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/introduction/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install @development-tools automake autoconf git squashfs-tools openssh-askpass pkgconf-pkg-config curl libmnl-devel openssl-devel ncurses-devel help2man libconfuse-devel libarchive-devel\n```\n\n----------------------------------------\n\nTITLE: Updating Distillery Plugin Configuration\nDESCRIPTION: Changes required in rel/config.exs to update the bootloader plugin to shoehorn.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nplugin Bootloader.Plugin\n\n# or\n\nplugin Bootloader\n\n# Changes to\n\nplugin Shoehorn\n```\n\n----------------------------------------\n\nTITLE: Updating Release Configuration\nDESCRIPTION: Changes required in rel/config.exs when updating from v1.0 to v1.3 to use Nerves as a distillery plugin.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nrelease :my_app do\n  set version: current_version(:my_app)\n  plugin Shoehorn\n  if System.get_env(\"NERVES_SYSTEM\") do\n    set dev_mode: false\n    set include_src: false\n    set include_erts: System.get_env(\"ERL_LIB_DIR\")\n    set include_system_libs: System.get_env(\"ERL_SYSTEM_LIB_DIR\")\n    set vm_args: \"rel/vm.args\"\n  end\nend\n\n# Changes to\n\nrelease :my_app do\n  set version: current_version(:my_app)\n  plugin Shoehorn\n  plugin Nerves\nend\n```\n\n----------------------------------------\n\nTITLE: View Zig Target Options\nDESCRIPTION: Shell command to display available target options in Zig for cross-compilation configuration.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzig targets | less\n```\n\n----------------------------------------\n\nTITLE: Setting source_date_epoch for reproducible builds\nDESCRIPTION: Configuration to set the SOURCE_DATE_EPOCH date for reproducible builds, which helps with firmware patch generation by preventing timestamp modifications from affecting the output.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/experimental-features.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# Set the SOURCE_DATE_EPOCH date for reproducible builds.\n# See https://reproducible-builds.org/docs/source-date-epoch/ for more information\n\nconfig :nerves, source_date_epoch: \"1596027629\"\n```\n\n----------------------------------------\n\nTITLE: Compatibility Table for nerves_system_rpi3a\nDESCRIPTION: HTML table containing version compatibility information for the Raspberry Pi 3A Nerves system, showing the relationships between different components across system versions from 1.10.0 to 1.28.1.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<details><summary>nerves_system_rpi3a</summary><table><thead><tr><th>rpi3a</th><th>Erlang/OTP</th><th>Nerves</th><th>Nerves System BR</th><th>Buildroot</th><th>Linux</th></tr></thead><tbody><tr><td>1.28.1</td><td>27.0.1</td><td>~> 1.11</td><td>1.28.3</td><td>2024.05.2</td><td>6.6</td></tr>...\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Interface to Merge Upstream Nerves System Changes\nDESCRIPTION: This URL format allows you to use GitHub's web interface to compare and merge changes from the official Nerves repository into your custom system. It provides a visual way to review differences and handle the update process.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/customizing-systems.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/YourGitHubUserName/custom_rpi3/compare/main...nerves-project:main?expand=1\n```\n\n----------------------------------------\n\nTITLE: Building Nerves Systems\nDESCRIPTION: Initiates the build process for all configured Nerves systems using the ns.build mix task.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/building-sytems.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmix ns.build\n```\n\n----------------------------------------\n\nTITLE: Updating Shoehorn Configuration\nDESCRIPTION: Configuration updates in config/config.exs when migrating from bootloader to shoehorn.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :bootloader,\n  init: [:nerves_runtime],\n  app: :my_app\n\n# Changes to\n\nconfig :shoehorn,\n  init: [:nerves_runtime],\n  app: :my_app\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-processing Script in Mix Config\nDESCRIPTION: Configuration example for adding a post-processing script to sign or modify the root filesystem during firmware generation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves,\n  firmware: [\n    post_processing_script: Path.expand(\"./scripts/sign.sh\")\n  ]\n```\n\n----------------------------------------\n\nTITLE: Migrating Bootloader to Shoehorn Dependencies\nDESCRIPTION: Updates to dependency configuration in mix.exs when migrating from bootloader to shoehorn.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/updating-projects.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:bootloader, \"~> 0.1\"}\n\n# Changes to\n\n{:shoehorn, \"~> 0.2\"}\n```\n\n----------------------------------------\n\nTITLE: Forcing Compilation of Nerves System Package (Elixir)\nDESCRIPTION: Example of how to force compilation of a Nerves system package by adding a :nerves option in the top-level project configuration.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n{:nerves_system_rpi0, \"~> 1.0-rc\", nerves: [compile: true]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Sites for Nerves Package (Elixir)\nDESCRIPTION: Examples of how to specify artifact sites in the nerves_package config. This includes using GitHub releases and custom server locations for fetching artifacts.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nartifact_sites: [\n  {:github_releases, \"organization/project\"}\n]\n\nartifact_sites: [\n  {:prefix, \"/path/to/artifacts\"}\n  {:prefix, \"https://my_bucket.s3-east.amazonaws.com/artifacts\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Publishing to Hex Package Manager\nDESCRIPTION: Command used to publish the Nerves package to the Hex package manager.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmix hex.publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Nerves release in rel/config.exs\nDESCRIPTION: Shows the updated configuration for a Nerves release in the rel/config.exs file, including the use of Shoehorn and Nerves plugins.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nrelease :my_app do\n  set version: current_version(:my_app)\n  plugin Shoehorn\n  plugin Nerves\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Release Tags in Git\nDESCRIPTION: Example version tag formats used in Nerves releases, showing the pattern for version numbers with and without development designation.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvX.Y.Z\n```\n\nLANGUAGE: text\nCODE:\n```\n0.5.1-dev\n```\n\nLANGUAGE: text\nCODE:\n```\n0.6.0-dev\n```\n\n----------------------------------------\n\nTITLE: ELF Binary Format Error Example\nDESCRIPTION: Example error output showing mismatch between host and target compiled libraries in the release\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nGot:\nELF 64-bit LSB relocatable, x86-64, version 1\n\nIf binary, expecting:\nELF 32-bit LSB executable, ARM, EABI5 version 1, interpreter /lib/ld-linux.so.3, for GNU/Linux 4.1.39\n```\n\n----------------------------------------\n\nTITLE: Distillery Plugin Error Message\nDESCRIPTION: Error message from Nerves Distillery plugin failure\nSOURCE: https://github.com/nerves-project/nerves/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nPlugin failed: no function clause matching in IO.chardata_to_string/1\n```\n\n----------------------------------------\n\nTITLE: RPI2 Version Compatibility Table in Markdown\nDESCRIPTION: HTML table showing version compatibility between RPI2 Nerves system components including Erlang/OTP, Nerves framework, Buildroot, and Linux kernel versions across multiple releases.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/systems.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<details><summary>nerves_system_rpi2</summary><table><thead><tr><th>rpi2</th><th>Erlang/OTP</th><th>Nerves</th><th>Nerves System BR</th><th>Buildroot</th><th>Linux</th></tr></thead><tbody><tr><td>1.28.1</td><td>27.0.1</td><td>~> 1.11</td><td>1.28.3</td><td>2024.05.2</td><td>6.6</td></tr></tbody></table></details>\n```\n\n----------------------------------------\n\nTITLE: Overriding erlinit Configuration in Mix Config\nDESCRIPTION: Example of overriding erlinit configuration options through Mix config, specifically setting the ctty option.\nSOURCE: https://github.com/nerves-project/nerves/blob/main/guides/advanced/advanced-configuration.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :nerves, :erlinit,\n  ctty: \"ttyAMA0\"\n```"
  }
]