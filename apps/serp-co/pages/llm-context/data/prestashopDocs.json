[
  {
    "owner": "prestashop",
    "repo": "docs",
    "content": "TITLE: Building SQL Query with PrestaShop DBQuery Class\nDESCRIPTION: Example demonstrating how to construct a SQL query using the DBQuery class to select CMS content with language joining. Shows common query building methods like select, from, innerJoin, where, and orderBy.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/dbquery.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$sql = new DbQuery();\n$sql->select('*');\n$sql->from('cms', 'c');\n$sql->innerJoin('cms_lang', 'l', 'c.id_cms = l.id_cms AND l.id_lang = '.(int)$id_lang);\n$sql->where('c.active = 1');\n$sql->orderBy('position');\nreturn Db::getInstance()->executeS($sql);\n```\n\n----------------------------------------\n\nTITLE: Declaring the Module Class - PrestaShop Module Base (PHP)\nDESCRIPTION: This code block declares the main module class in PascalCase and extends the PrestaShop Module base class. It must reside in a PHP file named after the module's technical name. Class inheritance enables access to PrestaShop's core module functionalities. The _PS_VERSION_ check is included as a prerequisite security step.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nif (!defined('_PS_VERSION_')) {\\n    exit;\\n}\\n\\nclass MyModule extends Module\\n{\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Product in PrestaShop using XML\nDESCRIPTION: This snippet shows how to create a Product by sending a POST request to the PrestaShop Webservices. It includes various product details such as manufacturer, supplier, category, price, and multilingual content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<product>\n    <id_manufacturer><![CDATA[1]]></id_manufacturer>\n    <id_supplier><![CDATA[1]]></id_supplier>\n    <id_category_default><![CDATA[1]]></id_category_default>\n    <new><![CDATA[1]]></new>\n    <id_default_combination><![CDATA[1]]></id_default_combination>\n    <id_tax_rules_group><![CDATA[1]]></id_tax_rules_group>\n    <type><![CDATA[1]]></type>\n    <id_shop_default><![CDATA[1]]></id_shop_default>\n    <reference><![CDATA[123456]]></reference>\n    <supplier_reference><![CDATA[ABCDEF]]></supplier_reference>\n    <ean13><![CDATA[1231231231231]]></ean13>\n    <state><![CDATA[1]]></state>\n    <product_type><![CDATA[standard]]></product_type>\n    <price><![CDATA[123.45]]></price>\n    <unit_price><![CDATA[123.45]]></unit_price>\n    <active><![CDATA[1]]></active>\n    <meta_description>\n        <language id=\"1\"><![CDATA[Description]]></language>\n    </meta_description>\n    <meta_keywords>\n        <language id=\"1\"><![CDATA[Keywords]]></language>\n    </meta_keywords>\n    <meta_title>\n        <language id=\"1\"><![CDATA[My Title for SEO]]></language>\n    </meta_title>\n    <link_rewrite>\n        <language id=\"1\"><![CDATA[awesome-product]]></language>\n    </link_rewrite>\n    <name>\n        <language id=\"1\"><![CDATA[My awesome Product]]></language>\n    </name>\n    <description>\n        <language id=\"1\"><![CDATA[Description]]></language>\n    </description>\n    <description_short>\n        <language id=\"1\"><![CDATA[Short description]]></language>\n    </description_short>\n    <associations>\n        <categories>\n            <category>\n                <id><![CDATA[1]]></id>\n            </category>\n        </categories>\n    </associations>\n</product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for PrestaShop Module - JSON\nDESCRIPTION: This snippet shows a sample composer.json configuration for a PrestaShop module. It describes the package metadata, PHP requirement, and three autoload strategies: psr-4 namespaces for modern PHP classes, classmap for legacy or non-namespaced classes, and a configuration section to set preferred installation and disable PrestaShop core autoloader overriding. Dependencies: Composer (installed in your environment) and PHP >=5.6.0. The snippet is expected to be placed at the module root. Inputs are module meta information; output is a valid configuration that enables Composer's autoloading and dependency management. The file must use valid JSON syntax and be kept updated with module details and dependencies.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/composer.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"<your name>/<module name>\",\n    \"description\": \"<module description>\",\n    \"authors\": [\n        {\n            \"name\": \"<your name>\",\n            \"email\": \"<your email>\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.6.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"<YourNamespace>\\\\\": \"src/\"\n        },\n        \"classmap\": [\n            \"<file>.php\",\n            \"classes/\"\n        ],\n        \"exclude-from-classmap\": []\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"prepend-autoloader\": false\n    },\n    \"type\": \"prestashop-module\",\n    \"author\": \"<???>\",\n    \"license\": \"<???>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Route Mapping for PrestaShop < 1.7.5 (PHP)\nDESCRIPTION: Shows how to manually update the `Link` class in PrestaShop versions prior to 1.7.5 to handle basic Symfony route generation. This involves adding entries to an array within the `getAdminLink` method to map legacy controller names to their corresponding migrated Symfony route names. This method only supports a one-to-one mapping between a legacy controller and a single route.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    // classes/Link.php, in getAdminLink()\n    $routes = array(\n        'AdminModulesSf' => 'admin_module_manage',\n        'AdminStockManagement' => 'admin_stock_overview',\n        //...\n        'LegacyController' => 'migrated_route',\n    );\n```\n\n----------------------------------------\n\nTITLE: Managing Configuration with PrestaShop PHP Webservice Library\nDESCRIPTION: Complete PHP implementation to manage PrestaShop configuration using the Webservice library. This script checks if a configuration exists, then either creates or updates it based on its presence. It handles both cases and includes error handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once('./vendor/autoload.php');\n\ntry {\n    $webServiceUrl = 'http://example.com/';\n    $webServiceKey = 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT';\n    $webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false);\n\n    $configurationName = 'PS_MULTISHOP_FEATURE_ACTIVE';\n    $configurationValue = 1;\n\n    // Start by checking if the configuration is present and get its ID\n    $xml = $webService->get([\n        'resource' => 'configurations',\n        'filter[name]' => '['. $configurationName . ']',\n    ]);\n\n    $configurationId = null;\n    if ($xml->configurations->configuration->count() > 0) {\n        $configurationId = (int) $xml->configurations->configuration[0]->attributes()['id'];\n    }\n\n    // Get the base XML, either a blank one or the existing one\n    if (null === $configurationId) {\n        $configurationXml = $webService->get(['url' => $webServiceUrl . 'api/configurations?schema=blank']);    \n    } else {\n        $configurationXml = $webService->get([\n            'resource' => 'configurations',\n            'id' => $configurationId,\n        ]);    \n    }\n\n    // Update values\n    $configurationXml->configuration[0]->name = $configurationName;\n    $configurationXml->configuration[0]->value = $configurationValue;\n} catch (PrestaShopWebserviceException $e) {\n    echo 'Error:' . $e->getMessage() . PHP_EOL;\n}\n\n// Either create new configuration or update it\nif (null === $configurationId) {\n    try {\n        $webService->add([\n            'resource' => 'configurations',\n            'postXml' => $configurationXml->asXML(),\n        ]);\n        echo 'Successfully created configuration ' . $configurationName . ' = ' . $configurationValue . PHP_EOL;\n    } catch (PrestaShopWebserviceException $e) {\n        echo 'Error while adding the configuration:' . $e->getMessage() . PHP_EOL;\n    }\n} else {\n    try {\n        $webService->edit([\n            'resource' => 'configurations',\n            'id' => $configurationId,\n            'putXml' => $configurationXml->asXML(),\n        ]);\n        echo 'Successfully updated configuration ' . $configurationName . ' = ' . $configurationValue . PHP_EOL;\n    } catch (PrestaShopWebserviceException $e) {\n        echo 'Error while updating the configuration:' . $e->getMessage() . PHP_EOL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form Builder in Controller Actions in PHP\nDESCRIPTION: Example of how to use the Form Builder in controller actions for creating and editing contacts, including rendering the form in a template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function createAction($contactId)\n{\n    $contactFormBuilder = $this->get('prestashop.core.form.identifiable_object.builder.contact_form_builder');\n    $contactForm = $contactFormBuilder->getForm();\n\n    return $this->render('@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/create.html.twig', [\n        'contactForm' => $contactForm->createView(),\n    ]);\n}\n\npublic function editAction($contactId)\n{\n    $contactFormBuilder = $this->get('prestashop.core.form.identifiable_object.builder.contact_form_builder');\n    $contactForm = $contactFormBuilder->getFormFor($contactId);\n\n    return $this->render('@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/edit.html.twig', [\n        'contactForm' => $contactForm->createView(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PrestaShop Version Constant - PrestaShop Module Initialization (PHP)\nDESCRIPTION: This snippet ensures the module file is loaded only within the PrestaShop context by verifying the _PS_VERSION_ constant. If the constant is not defined, the file halts execution to prevent unauthorized direct access. This security pattern is required at the start of every PrestaShop module's PHP entry file, and no closing PHP tag is used by convention.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nif (!defined('_PS_VERSION_')) {\\n    exit;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Starting a PrestaShop Container with Docker Run (Bash)\nDESCRIPTION: Shows the `docker run` command to start the PrestaShop container. It uses the `prestashop/prestashop:latest` image, names the container `some-prestashop`, connects it to the `prestashop-net` network, maps the host's port 8080 to the container's port 80 (`-p 8080:80`), and runs it in detached mode (`-d`). This container relies on the previously started MySQL container (`some-mysql`) being available on the same network.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -ti --name some-prestashop --network prestashop-net -p 8080:80 -d prestashop/prestashop:latest\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Entity for PrestaShop Webservice in PHP\nDESCRIPTION: Defines a PHP class representing a new entity (Article) for use in PrestaShop, inheriting from ObjectModel and specifying public properties and the required static $definition for ORM mapping and multi-language support. The snippet includes a mandatory $webserviceParameters array, detailing what fields will be exposed to the API, the names for single and multiple object responses, and related configurations. Requires PrestaShop's ObjectModel inheritance, access to the module file system, and manual creation of required tables during installation; exposes entity fields for CRUD via the webservice.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/webservice/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/src/Entity/Article.php\n\nclass Article extends ObjectModel\n{\n    public $title;\n    public $type;\n    public $content;\n    public $meta_title;\n\n    public $date_add;\n    public $date_upd;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = array(\n        'table' => 'article',\n        'primary' => 'id_article',\n        'multilang' => true,\n        'fields' => array(\n            'type' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => true, 'size' => 255),\n            'date_add' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n            'date_upd' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n\n            // Lang fields\n            'title' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => true, 'size' => 255),\n            'content' => array('type' => self::TYPE_HTML, 'lang' => true, 'validate' => 'isCleanHtml', 'size' => 4000),\n            'meta_title' => array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isCleanHtml', 'size' => 255)\n        )\n    );\n\n    protected $webserviceParameters = array(\n      'objectNodeName' => 'article',\n      'objectsNodeName' => 'articles',\n      'fields' => array(\n          'title' => array('required' => true),\n          'type' => array('required' => true),\n          'content' => array(),\n          'meta_title' => array(),\n        )\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in a PrestaShop Module Main Class with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the trans() method in a module main class, which extends PrestaShop's Module base class. No dependencies beyond the PrestaShop core are required; $this->trans() takes the text to translate, an optional parameters array, and the appropriate translation domain. Inputs are wording strings, optional replacement values, and domain, while outputs are translated (or default) strings for module displayName and description. The approach expects that the module is correctly named and registered; translation domain must match file naming convention for compatibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// file: mymodule.php\\n\\nclass MyModule extends Module\\n{\\n    public function __construct()\\n    {\\n        $this->version = '1.0.0';\\n        $this->author = 'Me';\\n        $this->displayName = $this->trans('My module', [], 'Modules.Mymodule.Mymodule');\\n        $this->description = $this->trans('Description of my module. Made by: %author%, Current Version: %version%', ['%version%' => $this->version ,'%author%' => $this->author], 'Modules.Mymodule.Mymodule');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Symfony Form Type in PHP\nDESCRIPTION: This PHP code defines the `DemoConfigurationFormType` class, which builds the module's configuration form using the Symfony Form component. It extends `TranslatorAwareType` for translation capabilities and adds a single text field named `config_text` using `TextType`. Labels and help text are provided using the translation system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoSymfonyFormSimple\\Form;\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\TranslatorAwareType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass DemoConfigurationFormType extends TranslatorAwareType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('config_text', TextType::class, [\n                'label' => $this->trans('Configuration text', 'Modules.Demosymfonyformsimple.Admin'),\n                'help' => $this->trans('Maximum 32 characters', 'Modules.Demosymfonyformsimple.Admin'),\n            ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MoneyWithSuffixType in Symfony Form\nDESCRIPTION: Example showing how to add a MoneyWithSuffixType field to a Symfony form. The field is configured with EUR currency and a tax exclusion suffix. Requires Symfony Form component and PrestaShopBundle.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/money-with-suffix.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\MoneyWithSuffixType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('price', MoneyWithSuffixType::class, [\n                'currency' => 'EUR',\n                'suffix' => '(tax excl.)',\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Service Class in PHP\nDESCRIPTION: Example of creating a custom service class with dependency injection using the Symfony TranslatorInterface. The service provides functionality to translate custom messages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/src/YourService.php\nnamespace YourCompany\\YourModule;\n\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass YourService {\n    /** @var TranslatorInterface */\n    private $translator;\n\n    /** @var string */\n    private $customMessage;\n\n    /**\n     * @param string $customMessage\n     */\n    public function __construct(\n        TranslatorInterface $translator,\n        $customMessage\n    ) {\n        $this->translator = $translator;\n        $this->customMessage = $customMessage;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTranslatedCustomMessage() {\n        return $this->translator->trans($this->customMessage, [], 'Modules.YourModule');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Parameters for GetOrderForViewing Query (PHP)\nDESCRIPTION: Defines the parameters required when instantiating the `GetOrderForViewing` query. It needs an integer order ID (`$orderId`) and accepts an optional string for product sorting (`$productsSorting`), defaulting to ascending ('ASC').\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-for-viewing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<ul> <li>`$int $orderId`</li>  <li>`$string $productsSorting = &#039;ASC&#039;`</li> </ul>\n```\n\n----------------------------------------\n\nTITLE: Assign Display and Warning Strings with Translation - PrestaShop Module Text Localization (PHP)\nDESCRIPTION: These lines use PrestaShop's translation utility to set the module's visible name, description, uninstall confirmation, and an optional warning. Translation functions ensure all user-facing strings are localizable. The warning is only set if the configuration variable MYMODULE_NAME is not found, providing runtime feedback for missing prerequisites.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->displayName = $this->trans('My module', [], 'Modules.Mymodule.Admin');\\n$this->description = $this->trans('Description of my module.', [], 'Modules.Mymodule.Admin');\\n\\n$this->confirmUninstall = $this->trans('Are you sure you want to uninstall?', [], 'Modules.Mymodule.Admin');\\n\\nif (!Configuration::get('MYMODULE_NAME')) {\\n    $this->warning = $this->trans('No name provided.', [], 'Modules.Mymodule.Admin');\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing getContent() Method for Configuration Page in PHP\nDESCRIPTION: This code snippet demonstrates how to implement the getContent() method in a PrestaShop module to handle form submission and display the configuration page. It includes form validation, value updating, and error/confirmation message display.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getContent()\n{\n    $output = '';\n\n    // this part is executed only when the form is submitted\n    if (Tools::isSubmit('submit' . $this->name)) {\n        // retrieve the value set by the user\n        $configValue = (string) Tools::getValue('MYMODULE_CONFIG');\n\n        // check that the value is valid\n        if (empty($configValue) || !Validate::isGenericName($configValue)) {\n            // invalid value, show an error\n            $output = $this->displayError($this->l('Invalid Configuration value'));\n        } else {\n            // value is ok, update it and display a confirmation message\n            Configuration::updateValue('MYMODULE_CONFIG', $configValue);\n            $output = $this->displayConfirmation($this->l('Settings updated'));\n        }\n    }\n\n    // display any message, then the form\n    return $output . $this->displayForm();\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Class for PrestaShop with Hooks (PHP)\nDESCRIPTION: This snippet details the implementation of the DemoViewOrderHooks class in PrestaShop, which extends the core Module class. It defines the module's attributes and handles its installation and uninstallation. Utilizing InstallerFactory's create method, it delegates installation responsibilities to the Installer class. Dependencies: PrestaShop framework, InstallerFactory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/module-base.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * Author  - PrestaShop SA and Contributors\n * License - Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Install\\InstallerFactory;\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\nclass DemoViewOrderHooks extends Module\n{\n    public function __construct()\n    {\n        $this->name = 'demovieworderhooks';\n        $this->author = 'PrestaShop';\n        $this->version = '1.0.0';\n        $this->ps_versions_compliancy = ['min' => '1.7.7.0', 'max' => _PS_VERSION_];\n\n        parent::__construct();\n\n        $this->displayName = $this->l('Demo view order hooks');\n        $this->description = $this->l('Demonstration of new hooks in PrestaShop 1.7.7 order view page');\n    }\n\n    public function install()\n    {\n        if (!parent::install()) {\n            return false;\n        }\n\n        $installer = InstallerFactory::create();\n\n        return $installer->install($this);\n    }\n\n    public function uninstall()\n    {\n        $installer = InstallerFactory::create();\n\n        return $installer->uninstall() && parent::uninstall();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translating Static and Parameterized Strings in Module PHP – PrestaShop – PHP\nDESCRIPTION: Presents best practices for using the trans() function in module PHP code to allow wordings to be discovered and translated by PrestaShop's system. Shows correct usage with literals and placeholder replacements, and demonstrates patterns that prevent detection such as passing variables or dynamic expressions. Key points: always use literal values, supply an array for replacements, and set the translation domain; avoid aliasing or indirect calls.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// literal values will work\n$this->trans('Some wording', [], 'Modules.Mymodule.Something');\n\n// dynamic content can be injected using placeholders & replacements\n$this->trans('Some wording with %foo%', ['%foo%' => $dynamicContent], 'Modules.Mymodule.Bar');\n\n// this won't work, the interpreter will ignore variables\n$wording = 'Some wording';\n$domain = 'Modules.Mymodule.Foo';\n$this->trans($wording, [], $domain);\n\n// this will yield unexpected results\n$this->trans('Some '. $var . ' wording', [], 'Modules.Mymodule.Foo');\n\n// dynamic behavior, like aliasing the trans() function, won't work well either\nfunction translate($wording) {\n   $this->trans($wording, [], 'Modules.Mymodule.Foo');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tools Class by Extending Core Tools in PHP\nDESCRIPTION: Example of extending a core PrestaShop class (Tools) to add additional functionality while retaining access to the parent class methods. This approach is recommended over overriding core classes directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/overrides.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyCustomTools extends Tools\n{\n    /**\n     * Adding a new method for the example\n     */\n    public static function array_pluck(array $data, 'property')\n    {\n        // [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Columns using PrestaShop in PHP\nDESCRIPTION: This PHP snippet showcases how to define a grid and its columns in a PrestaShop module using PrestaShop Core classes. It includes the creation of bulk action, data, and action columns with configurable options such as field names and row actions like a delete link. The file demonstrates utilizing predefined column types within a custom grid definition class extending AbstractGridDefinitionFactory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// /modules/my-module/src/Grid/MyGridDefinitionFactory.php\nnamespace MyModule\\Grid;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn;\n\n/**\n * How to define the Grid's columns?\n * You can adapt this example or look at the existing ones\n * in PrestaShop's Core.\n */\nclass MyGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    /**\n     * {@inheritdoc}\n     */\n    protected function getColumns()\n    {\n        return (new ColumnCollection())\n            ->add(\n                (new BulkActionColumn('delete_stuff'))\n                ->setOptions([\n                    'bulk_field' => 'id_stuff',\n                ])\n            )\n            ->add(\n                (new DataColumn('id_stuff'))\n                ->setName('ID')\n                ->setOptions([\n                    'field' => 'id_stuff',\n                ])\n            )\n            ->add(\n                (new ActionColumn('actions'))\n                ->setName('Actions')\n                ->setOptions([\n                    'actions' => (new RowActionCollection())\n                    ->add(\n                        (new LinkRowAction('delete'))\n                        ->setIcon('delete')\n                        ->setOptions([\n                            'route' => 'delete_stuff',\n                            'route_param_name' => 'stuffId',\n                            'route_param_field' => 'id_stuff',\n                            'confirm_message' => 'Delete selected item?',\n                        ])\n                    ),\n                ])\n            )\n        ;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing a PrestaShop Cron Task via Command Line (Bash)\nDESCRIPTION: Demonstrates the command-line execution of the PHP trigger script (`cron.php`) designed to invoke a PrestaShop front controller configured for cron tasks. Running this command executes the PHP script, which in turn bootstraps PrestaShop and runs the specified controller's logic, printing the output ('hello') to the console.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ php modules/examplemodule/cron.php \nhello\n```\n\n----------------------------------------\n\nTITLE: Loading and Updating an ObjectModel Instance\nDESCRIPTION: Shows how to load an existing ObjectModel entity from the database using its ID, modify its properties, and save the changes back to the database.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$id = 2; // id of the object in database\n$cms = new Cms($id); \n$cms->position = 3;\n...\n$cms->save();\n```\n\n----------------------------------------\n\nTITLE: Checking Module Configuration in PrestaShop Backend\nDESCRIPTION: This PHP snippet demonstrates how to restrict loading of JavaScript or template files to specific module configuration pages in the PrestaShop backend. It uses the Tools::getValue() method to check the current configuration page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/good-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif (Tools::getValue('configure') === $this->name) {\n  // code\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration for PrestaShop and MySQL (YAML)\nDESCRIPTION: Provides a full `docker-compose.yml` configuration file defining two services: `mysql` (using version 5.7) and `prestashop` (using the latest image). It sets up networking (`prestashop_network`), persistent volumes (`dbdata`, `psdata`), environment variables for database connection and PrestaShop settings, maps port 8080 to the container's port 80, and mounts local directories for custom modules and themes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  mysql:\n    container_name: some-mysql\n    image: mysql:5.7\n    restart: unless-stopped\n    environment:\n      MYSQL_ROOT_PASSWORD: admin\n      MYSQL_DATABASE: prestashop\n    networks:\n      - prestashop_network\n    volumes:\n      - dbdata:/var/lib/mysql\n  prestashop:\n    container_name: prestashop\n    image: prestashop/prestashop:latest\n    restart: unless-stopped\n    depends_on:\n      - mysql\n    ports:\n      - 8080:80\n    environment:\n      DB_SERVER: some-mysql\n      DB_NAME: prestashop\n      DB_USER: root\n      DB_PASSWD: admin\n      PS_FOLDER_ADMIN: admin4577\n      PS_FOLDER_INSTALL: install4577\n    networks:\n      - prestashop_network\n    volumes:\n      - type: bind\n        source: ./modules/testModule # local path to the module\n        target: /var/www/html/modules/testModule # path to be mounted in the container\n      - type: bind\n        source: ./themes/myTheme # local path to the theme\n        target:  /var/www/html/themes/myTheme # path to be mounted in the container\n      - psdata:/var/www/html\nnetworks:\n  prestashop_network:\nvolumes:\n  psdata:\n  dbdata:\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Row Action Template in Twig\nDESCRIPTION: This Twig template snippet shows how to render a custom Row Action in the PrestaShop Grid. It creates a link with the action name and uses the provided route and parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-row-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Row/my_specific.html.twig #}\n\n{# This button should be used with LinkRowActionExtension grid extension in Javascript #}\n\n<a class=\"{{ class }}\"\n   href=\"{{ path(action.options.route, action.options.route_params ) }}\"\n>\n    {{ action.name }}\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Product Form Modifier in a Module\nDESCRIPTION: Shows how to create a ProductFormModifier class that can modify forms, particularly useful in modules to add, modify, or remove form elements. This pattern allows for clean extension of core forms.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PrestaShop\\Module\\DemoProductForm\\Form\\Modifier;\n[...]\n\nfinal class ProductFormModifier\n{\n    public function __construct(\n        private readonly TranslatorInterface $translator,\n        private readonly FormBuilderModifier $formBuilderModifier\n    ) {\n    }\n\n    public function modify(\n        ?ProductId $productId,\n        FormBuilderInterface $productFormBuilder\n    ): void {\n        [...]        \n    }\n\n```\n\n----------------------------------------\n\nTITLE: Module Constructor and Metadata Assignment - PrestaShop Module Class (PHP)\nDESCRIPTION: This snippet defines the constructor for the module's main class, configuring essential metadata and compatibility parameters on instantiation. It sets the module's technical name, category tab, version, author, required PrestaShop version bounds, and Bootstrap usage. It also sets localized display name, description, uninstall confirmation, and an optional warning message if a configuration value is missing. Calls to parent::__construct() and translation method usage are required in this sequence. This code makes the module visible and manageable from the PrestaShop back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nif (!defined('_PS_VERSION_')) {\\n    exit;\\n}\\n\\nclass MyModule extends Module\\n{\\n    public function __construct()\\n    {\\n        $this->name = 'mymodule';\\n        $this->tab = 'front_office_features';\\n        $this->version = '1.0.0';\\n        $this->author = 'Firstname Lastname';\\n        $this->need_instance = 0;\\n        $this->ps_versions_compliancy = [\\n            'min' => '1.7.0.0',\\n            'max' => '8.99.99',\\n        ];\\n        $this->bootstrap = true;\\n\\n        parent::__construct();\\n\\n        $this->displayName = $this->trans('My module', [], 'Modules.Mymodule.Admin');\\n        $this->description = $this->trans('Description of my module.', [], 'Modules.Mymodule.Admin');\\n\\n        $this->confirmUninstall = $this->trans('Are you sure you want to uninstall?', [], 'Modules.Mymodule.Admin');\\n\\n        if (!Configuration::get('MYMODULE_NAME')) {\\n            $this->warning = $this->trans('No name provided', [], 'Modules.Mymodule.Admin');\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Hook in Smarty Templates - PrestaShop Smarty\nDESCRIPTION: These code snippets demonstrate how to invoke a hook within PrestaShop's Smarty (.tpl) templates. The {hook h='hookName'} syntax calls the specified hook, while {hook h='hookName' mod='modulename'} restricts execution to a given module. These require the PrestaShop environment and its Smarty extensions. Input: hook name (and optionally module name); Output: rendered hook content. Limited to use within PrestaShop template files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h='hookName'}\n```\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h='hookName' mod='modulename'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Widget Interface Methods in PHP\nDESCRIPTION: The two mandatory methods that must be implemented when a module implements the WidgetInterface. renderWidget() returns the generated view and getWidgetVariables() returns variables to assign to Smarty.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function renderWidget($hookName, array $configuration);\npublic function getWidgetVariables($hookName, array $configuration);\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of Customer Reward System using actionValidateOrder Hook\nDESCRIPTION: A complete example module that rewards customers on their nth order using the actionValidateOrder hook. It checks if the customer meets reward criteria and creates a reward cart rule when conditions are met.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateOrder.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyModuleRewardCustomerWhenOrder extends Module \n{\n    public function install()\n    {\n        return parent::install() && $this->registerHook('actionValidateOrder');\n    }\n\n    public function hookActionValidateOrder($params)\n    {\n        $orderObject = $params['order'];\n        $customerObject = $params['customer'];\n        $hasValidParams = Validate::isLoadedObject($orderObject) && Validate::isLoadedObject($customerObject);\n        if ($hasValidParams && !$this->customerAlreadyRewarded((int) $customerObject->id)) {\n            $hasConfiguredState = in_array((int) $orderObject->getCurrentState(), $this->getConfuredOrdersStatesIds());\n            $hasCustomerRequiredNbrOfTheOrderToReward = $this->getCustomerValidOrdersNbr((int) $customerObject->id) == $this->getRequiredNbrOfTheOrderToReward();\n            if ($hasConfiguredState && $hasCustomerRequiredNbrOfTheOrderToReward) {\n                $customerReward = $this->createCustomerReward($customerObject, $orderObject);\n                if (Validate::isLoadedObject($customerReward)) {\n                    $this->setAlreadyRewarded($customerObject);\n                    $this->notifyCustomer($customerObject, $customerReward);\n            \n                    // of course don't forget to log if something fails here :)\n                }\n            }\n        }\n    }\n\n    protected function customerAlreadyRewarded(int $idCustomer): bool\n    {\n        // check if customer already rewarded\n    }\n\n    protected setAlreadyRewarded(): void\n    {\n        // set customer was rewarded\n    }\n\n    protected function getConfuredOrdersStatesIds(): array\n    {\n        // return array with configured states ids in your module\n    }\n\n    protected function getCustomerValidOrdersNbr(int $idCustomer): int\n    {\n        // return number of total order valid by customer\n    }\n\n    protected function getRequiredNbrOfTheOrderToReward(): int\n    {\n        // return configured number of orders required to reward the customer\n    }\n\n    protected function createCustomerReward(Customer $customer, Order $order): ?CartRule\n    {\n        // generate customer cart rule (according to the order amount for example)\n    }\n\n    protected function notifyCustomer(Customer $customer, CartRule $cartRule): bool\n    {\n        // notify the customer \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding FrontController Class in PrestaShop\nDESCRIPTION: Example of a class override that adds a new Smarty variable to the header template. This demonstrates how to extend a core controller class while adding new functionality and preserving the parent behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/overrides.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/*\n * With this override, you have a new Smarty variable called \"currentController\" available in header.tpl\n * This allows you to use a different header if you are on a product page, category page or home.\n */\nclass FrontController extends FrontControllerCore {\n    public function initHeader()\n    {\n        self::$smarty->assign('currentController', get_class($this));\n        return parent::initHeader();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Webservice Resource Hook in PrestaShop Module (PHP)\nDESCRIPTION: Implements the hookAddWebserviceResources method, which must be registered in the module to provide the new resource (articles) to the PrestaShop API. Returns a configuration array describing the resource, the associated class, and optionally forbidden HTTP methods for the API. Requires registration of the addWebserviceResources hook and the existence of the Article class; integrates with PrestaShop's module system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/webservice/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function hookAddWebserviceResources($params)\n{\n    return [\n      'articles' => [\n          'description' => 'Blog articles', // The description for those who access to this resource through WS\n          'class' => 'Article', // The classname of your Entity\n          'forbidden_method' => array('DELETE') // Optional, if you want to forbid some methods\n      ]\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Decorated Controller Output in PHP Decorator\nDESCRIPTION: Example PHP code within the `indexAction` of a decorator controller (`DemoController`) demonstrating how to modify the output of the decorated controller. It first calls the original `indexAction`, then fetches a custom service, uses it to modify the original output (`injectMyData`), and finally returns the modified result.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    public function indexAction(CmsPageCategoryFilters $categoryFilters, CmsPageFilters $cmsFilters, Request $request)\n    {\n        $output = $this->decoratedController->indexAction($categoryFilters, $cmsFilters, $request);\n\n        $myService = $this->getMyPaymentService();\n        $output = $this->injectMyData($myService, $output);\n\n        return $output;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Repository with Doctrine DBAL (PHP)\nDESCRIPTION: This PHP code defines a `ProductRepository` class within the `Foo\\Repository` namespace. It utilizes Doctrine DBAL (`Doctrine\\DBAL\\Connection`) to interact directly with the database for improved performance. The `findAllbyLangId` method constructs and executes a raw SQL query to fetch all products associated with a specific language ID, bypassing the PrestaShop Object Model.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Repository/ProductRepository.php\nnamespace Foo\\Repository;\n\nuse Doctrine\\DBAL\\Connection;\n\nclass ProductRepository\n{\n    /**\n     * @var Connection the Database connection.\n     */\n    private $connection;\n\n    /**\n     * @var string the Database prefix.\n     */\n    private $databasePrefix;\n\n    public function __construct(Connection $connection, $databasePrefix)\n    {\n        $this->connection = $connection;\n        $this->databasePrefix = $databasePrefix;\n    }\n\n    /**\n     * @param int $langId the lang id\n     * @return array the list of products\n     */\n    public function findAllbyLangId(int $langId)\n    {\n        $prefix = $this->databasePrefix;\n        $productTable = \"${prefix}product\";\n        $productLangTable = \"${prefix}product_lang\";\n\n        $query = \"SELECT p.* FROM ${productTable} p LEFT JOIN ${productLangTable} pl ON (p.`id_product` = pl.`id_product`) WHERE pl.`id_lang` = :langId\";\n        $statement = $this->connection->prepare($query);\n        $statement->bindValue('langId', $langId);\n        $statement->execute();\n\n        return $statement->fetchAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Injected Translator in Custom Module Classes with PrestaShop PHP\nDESCRIPTION: Here, a custom PHP module class receives a Translator instance via its constructor and stores it as a property. This enables calling $this->translator->trans() with the text, replacement parameters, and domain. Required dependencies are a Translator object compliant with PrestaShop's interfaces, and the class must be instantiated with it. Inputs are text, replacements, and translation domain; output is the translated string, e.g., assigned to a property. Good practice is demonstrated by dependency injection rather than static access.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nclass CustomModuleClass \\n{\\n    private $translator;\\n    \\n    public function __construct(Translator $translator)\\n    {\\n        $this->translator = $translator\\n    }\\n    \\n    public function foo()\\n    {\\n        $this->text = $this->translator->trans('My text to translate', [], 'Modules.Mymodule.Custommoduleclass');\\n    }\\n}\\n\\n// from within the module: \\n$customModuleClass = new _NAMESPACE_\\\\CustomModuleClass($this->getTranslator());\n```\n\n----------------------------------------\n\nTITLE: Assigning Variables to Smarty in a PrestaShop Front Controller (PHP)\nDESCRIPTION: Demonstrates how to pass data from a PHP front controller to its corresponding Smarty template within the `initContent` method. It uses `$this->context->smarty->assign()` to make variables like `paymentId` (retrieved from GET parameters using `Tools::getValue`) and `paymentStatus` available within the template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function initContent()\n{\n  // In the template, we need the vars paymentId & paymentStatus to be defined\n  $this->context->smarty->assign(\n    array(\n      'paymentId' => Tools::getValue('id'), // Retrieved from GET vars\n      'paymentStatus' => [...],\n    ));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Exchange Rate with PrestaShop Value Objects in PHP\nDESCRIPTION: This code snippet demonstrates the use of the ExchangeRate Value Object in the PrestaShop framework. It showcases how ExchangeRate validates its value, ensuring it is greater than zero, thus preventing invalid exchange rate values from being instantiated. Dependencies include the PrestaShop Core Domain Currency namespace, and the code is intended to instantiate new ExchangeRate objects with valid values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/value_objects.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\ExchangeRate;\n\n// ExchangeRate has VO has rules to protect.\n// In this case, ExchangeRate validates that it\\'s value cannot be 0 or less.\n// If we were to create ExchangeRate with value of -1,\n// then CurrencyConstraintException would be thrown.\n\n$exchangeRate = new ExchangeRate(-1); // throws exception, because exchange rate value is not within boundaries\n\n// However, if ExchangeRate value is within allowed boundaries,\n// then it will successfully produce us new instance of ExchangeRate.\n\n$exchangeRate = new ExchangeRate(1.25); // this would work, since 1.25 is a valid exchange rate value\n\n```\n\n----------------------------------------\n\nTITLE: Securing PrestaShop Module Directories (PHP)\nDESCRIPTION: This snippet prevents direct access to module files by setting HTTP headers and redirecting to the parent directory. It is used to secure the module's root by adding it to an `index.php` file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nheader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\nheader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\nheader('Location: ../');\nexit;\n```\n\n----------------------------------------\n\nTITLE: Defining the Base Module Class in PHP\nDESCRIPTION: This PHP code snippet defines the main class for the `DemoSymfonyFormSimple` PrestaShop module. It extends the base `Module` class and sets essential properties like name, author, version, display name, description, and PrestaShop version compatibility. It utilizes the translation system for display name and description.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\n\nclass DemoSymfonyFormSimple extends Module\n{\n    public function __construct()\n    {\n        $this->name = 'demosymfonyformsimple';\n        $this->author = 'PrestaShop';\n        $this->version = '1.0.0';\n        $this->need_instance = 0;\n\n        $this->bootstrap = true;\n        parent::__construct();\n\n        $this->displayName = $this->trans('Demo of the Symfony-based configuration form', [], 'Modules.Demosymfonyformsimple.Admin');\n        $this->description = $this->trans(\n            'Module demonstrates a simple module\\'s configuration page made with Symfony.',\n            [],\n            'Modules.Demosymfonyformsimple.Admin'\n        );\n\n        $this->ps_versions_compliancy = ['min' => '8.0.0', 'max' => '8.99.99'];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductBasicInformationCommand Class in PHP\nDESCRIPTION: This snippet defines the UpdateProductBasicInformationCommand class in the PrestaShop core domain. It is used to update basic properties of a product and requires a product ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-basic-information-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductBasicInformationCommand\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks in PrestaShop Module Installation\nDESCRIPTION: This PHP code snippet shows how to register hooks during the module installation process. It registers the displayLeftColumn, actionFrontControllerSetMedia, and displayRightColumn hooks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/displaying-content-in-front-office.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function install()\n{\n    if (Shop::isFeatureActive()) {\n        Shop::setContext(Shop::CONTEXT_ALL);\n    }\n\n    return parent::install() &&\n        $this->registerHook('displayLeftColumn') &&\n        $this->registerHook('actionFrontControllerSetMedia') &&\n        $this->registerHook('displayRightColumn') &&\n        Configuration::updateValue('MYMODULE_NAME', 'my module');\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Controller Structure\nDESCRIPTION: Illustrates the backend controller hierarchy including both legacy and Symfony-based controllers, showing AdminController and FrameworkBundleAdminController as base classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nAdminController\n  └─ ModuleAdminController\n\nFrameworkBundleAdminController\n  └─ ApiController\n```\n\n----------------------------------------\n\nTITLE: Integrating Vue App in PrestaShop Template (Smarty/TPL)\nDESCRIPTION: A PrestaShop Smarty template file (`app.tpl`) located in `modules/[module_name]/views/templates/admin/`. It includes a `div` with the ID `app` which serves as the mounting point for the Vue application. It also includes the compiled JavaScript files (`chunk-vendors.js` and `app.js`) using script tags. The paths to these scripts are expected to be assigned via Smarty variables (`$chunkVendor`, `$pathApp`). Using `registerJavascript()` is the recommended way to add scripts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: tpl\nCODE:\n```\n<link href=\"{$pathApp|escape:'htmlall':'UTF-8'}\" rel=preload as=script>\n\n<div id=\"app\"></div>\n<script src=\"{$chunkVendor|escape:'htmlall':'UTF-8'}\"></script>\n<script src=\"{$pathApp|escape:'htmlall':'UTF-8'}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route for Symfony Form Controller in YAML\nDESCRIPTION: This YAML snippet defines a route for the configuration controller, specifying the path, HTTP methods, controller reference, and legacy parameters needed for PrestaShop's tab system integration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\ndemo_configuration_form_simple:\n  path: /demosymfonyformsimple/configuration\n  methods: [GET, POST]\n  defaults:\n    _controller: 'PrestaShop\\Module\\DemoSymfonyFormSimple\\Controller\\DemoConfigurationController::index'\n    # Needed to work with tab system\n    _legacy_controller: AdminDemoSymfonyFormSimple\n    _legacy_link: AdminDemoSymfonyFormSimple\n```\n\n----------------------------------------\n\nTITLE: Twig Template for Vue.js Integration\nDESCRIPTION: Template structure for integrating Vue.js with PrestaShop admin layout, including asset loading and data passing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends '@PrestaShop/Admin/layout.html.twig' %}\n{% trans_default_domain \"Module.YourModule.Admin\" %}\n\n{% block stylesheets %}\n  <link rel=\"stylesheet\" href=\"https:/static.example.com/dummy/an-external-stylesheet-example.css\" type=\"text/css\" media=\"all\">\n  <link rel=\"stylesheet\" href=\"{{ asset('../modules/yourmodule/views/css/app.css') }}\" type=\"text/css\" media=\"all\">\n{% endblock %}\n\n{% block content %}\n  <div id=\"app\"></div>\n{% endblock %}\n\n{% block javascripts %}\n    {{ parent() }}\n\n    <script>\n      var yourModule = {{ yourModule|json_encode|raw }}\n    </script>\n\n    <script src=\"https://static.example.com/dummy/an-external-javascript-example.js\"></script>\n    \n    <script src=\"{{ asset('../modules/your-module/views/js/chunk-vendors.js') }}\" async defer></script>\n    <script src=\"{{ asset('../modules/your-module/views/js/app.js') }}\" async defer></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using displayAdminProductsExtra Hook for Backwards Compatibility (PHP)\nDESCRIPTION: This PHP snippet shows implementing the displayAdminProductsExtra hook to provide backward compatibility for extensions in PrestaShop 8.1.0+. It creates a custom tab using a Symfony/Twig template, passing a CustomProduct instance to the template engine. All dependencies, including the CustomProduct class and twig service, must be available for rendering. The function expects form context in $params and outputs rendered HTML. Used only for legacy support; not recommended for new modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function hookDisplayAdminProductsExtra(array $params): string\n{\n    $productId = $params['id_product'];\n    $customProduct = new CustomProduct($productId);\n\n    /** @var EngineInterface $twig */\n    $twig = $this->get('twig');\n\n    return $twig->render('@Modules/demoproductform/views/templates/admin/extra_module.html.twig', [\n        'customProduct' => $customProduct,\n    ]);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks During Module Installation - PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how to register hooks within the install() method of a PrestaShop module. The registerHook method attaches the module to predefined hook locations (e.g., 'displayHeader', 'displayFooter'), allowing it to respond to related events. This code requires the Module class and must be placed within a custom module class; it is typically run during module setup. Input: None directly; Output: the module is registered to the listed hooks. The '// [...]' indicates additional installation steps.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    // [...]\n\n    $this->registerHook('displayHeader');\n    $this->registerHook('displayFooter');\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Price with `formatPrice()` (EUR) in PHP\nDESCRIPTION: Shows how to use the `formatPrice()` method from the current Locale object within the PrestaShop Context. It formats a floating-point number (1234.56) as a price using the 'EUR' currency code within an 'en-US' locale context, prepending the currency symbol. Requires the PrestaShop `Context` and relevant currency specifications.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/locale.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$price = 1234.56;\\n\\nvar_dump(Context::getContext()->getCurrentLocale()->formatPrice($price, 'EUR'));\\n// string(10) \"€1,234.56\"\n```\n\n----------------------------------------\n\nTITLE: Module Translation in Controllers\nDESCRIPTION: Demonstrates how to translate strings in module controllers using the module instance via $this->module property.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyModuleFrontController extends ModuleFrontController\n{\n    public function initContent()\n    {\n        $this->title = $this->module->l('My module title');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal PrestaShop Module Front Controller in PHP\nDESCRIPTION: This snippet shows the basic structure for a front controller within a PrestaShop module. It defines a class `ChequeValidationModuleFrontController` located in `modules/cheque/controllers/front/validation.php`, adhering to PrestaShop's naming convention (`<ModuleClassName><FileName>ModuleFrontController`) and extending the core `ModuleFrontController` class. This is the minimum requirement for PrestaShop to recognize and load the controller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * <ModuleClassName> => Cheque\n * <FileName> => validation.php\n * Format expected: <ModuleClassName><FileName>ModuleFrontController\n */\nclass ChequeValidationModuleFrontController extends ModuleFrontController\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling the Parent Constructor - PrestaShop Module Base Initialization (PHP)\nDESCRIPTION: This single line ensures that the base PrestaShop Module class constructor is executed, initializing critical system properties and internal logistics. It must follow assignment of the name property and occur before any translation or UI string setup calls.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nparent::__construct();\\n\n```\n\n----------------------------------------\n\nTITLE: Registering Hook for Customer Grid Definition Modification in PHP\nDESCRIPTION: This snippet shows how to register a hook to modify the Customer grid definition in PrestaShop. It demonstrates accessing the grid definition and columns collection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hookActionCustomerGridDefinitionModifier(array $params)\n{\n    /** @var GridDefinitionInterface $definition */\n    $definition = $params['definition'];\n\n    /** @var ColumnCollection */\n    $columns = $definition->getColumns();\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Wordings in PrestaShop Twig Template Files\nDESCRIPTION: This Twig code demonstrates the use of the |trans filter to translate strings in template files. The first argument is a parameters array for replacement, and the second is the translation domain. No dependencies except the PrestaShop Twig environment are needed. Inputs are literals or keys for translation, replacements, and the domain; output is the translated string injected into HTML. Limitations are that this filter is available only in compatible PrestaShop environments (Twig enabled).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# file: something.twig #}\\n\\n{{ 'Welcome to this page!'|trans({}, 'Modules.Mymodule.Admin') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Hello %username%!'|trans({'%username%': 'John'}, 'Modules.Mymodule.Admin') }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Twig Template in PrestaShop Module (PHP)\nDESCRIPTION: This method renders a Twig template with given parameters. It retrieves the Twig environment from the service container and uses it to render the specified template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Render a twig template.\n */\nprivate function render(string $template, array $params = []): string\n{\n    /** @var Twig_Environment $twig */\n    $twig = $this->get('twig');\n\n    return $twig->render($template, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hook::exec() Function in PHP\nDESCRIPTION: The main function for dispatching hooks in PrestaShop. It takes various parameters including the hook name, arguments to pass to subscribers, and options for controlling return values and execution behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/dispatching-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n    string $hookName,\n    array $arguments, \n    ?int $moduleId = null, \n    bool $returnArray = false, \n    bool $checkExceptions = true, \n    bool $usePush = false, \n    int $shopId = null, \n    bool $chain = false\n): mixed \n```\n\n----------------------------------------\n\nTITLE: Adding TypeaheadProductCollectionType Field to Symfony Form (PHP)\nDESCRIPTION: This snippet demonstrates how to add a 'related_products' form field to a Symfony form using the TypeaheadProductCollectionType class from PrestaShop. It configures the field to use a remote URL for product search, specifies how product IDs and names are mapped, provides a placeholder and custom template, and sets required and label options. Dependencies include Symfony FormBuilder, PrestaShop's TypeaheadProductCollectionType, and the translator service. The input is a form builder instance, and the output is a Symfony form with an enhanced autocomplete field for product selection. The remote_url parameter must return JSON results for the typeahead search functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/typeahead-product-collection-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('related_products', TypeaheadProductCollectionType::class, [\n    'remote_url' => $this->context->getLegacyAdminLink('AdminProducts', true, ['ajax' => 1, 'action' => 'productsList', 'forceJson' => 1, 'disableCombination' => 1, 'exclude_packs' => 0, 'excludeVirtuals' => 0, 'limit' => 20]) . '&q=%QUERY',\n    'mapping_value' => 'id',\n    'mapping_name' => 'name',\n    'placeholder' => $this->translator->trans('Search and add a related product', [], 'Admin.Catalog.Help'),\n    'template_collection' => '<span class=\"label\">%s</span><i class=\"material-icons delete\">clear</i>',\n    'required' => false,\n    'label' => $this->translator->trans('Accessories', [], 'Admin.Catalog.Feature'),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining GetCartForViewing Query Class in PHP\nDESCRIPTION: This snippet defines the GetCartForViewing query class in the PrestaShop core domain. It is used to retrieve cart information for viewing in the Back Office. The query takes a cart ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-viewing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Query\\GetCartForViewing\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Data Provider in PHP\nDESCRIPTION: Example of creating a ContactFormDataProvider class that implements the FormDataProviderInterface. It retrieves data for editing existing contacts and provides default data for creating new ones.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider;\n\nuse Contact;\n\nfinal class ContactFormDataProvider implements FormDataProviderInterface\n{\n    public function getData($contactId)\n    {\n        $contactObjectModel = new Contact($contactId);\n        \n        if (empty($contactObjectModel->id)) {\n            throw new PrestaShopObjectNotFoundException('Object not found');\n        }\n\n        return [\n            'title' => $contactObjectModel->name,\n        ];\n    }\n\n    public function getDefaultData()\n    {\n        return [\n            'title' => 'service',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Module Description in PHP\nDESCRIPTION: Provides a description for the module that will be displayed in module listings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->description = \"This module does great things with your shop.\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server Block for PrestaShop\nDESCRIPTION: Complete Nginx server block configuration for hosting a PrestaShop application. Includes SSL setup, logging, URL rewrites for images and API, security measures, and PHP-FPM integration. Requires customization of paths, domain names, and SSL certificate locations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/nginx.md#2025-04-22_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # IPv4.\n    listen 80;\n    listen 443 ssl http2;\n\n    # IPv6.\n    # listen [::]:80;\n    # listen [::]:443 ssl http2;\n\n    # [EDIT] Your domain name(s) go here.\n    server_name example.com www.example.com;\n\n    # [EDIT] Path to your domain Nginx logs.\n    # more details: https://docs.nginx.com/nginx/admin-guide/monitoring/logging/#setting-up-the-access-log\n    access_log /var/log/nginx/example.com-access.log combined;\n    # more details: https://nginx.org/en/docs/ngx_core_module.html?#error_log\n    error_log /var/log/nginx/example.com-error.log info;\n\n    # [EDIT] Path to your SSL certificates (take a look at Certbot https://certbot.eff.org).\n    ssl_certificate /etc/ssl/fullchain.pem;\n    ssl_certificate_key /etc/ssl/privkey.pem;\n\n    # [EDIT] Path to your PrestaShop directory.\n    root /path/to/prestashop;\n\n    index index.php;\n\n    # This should match the `post_max_size` and/or `upload_max_filesize` settings\n    # in your php.ini.\n    client_max_body_size 16M;\n\n    # Redirect 404 errors to PrestaShop.\n    error_page 404 /index.php?controller=404;\n\n    # HSTS (Force clients to interact with your website using HTTPS only).\n    # For enhanced security, register your site here: https://hstspreload.org/.\n    # WARNING: Don't use this if your site is not fully on HTTPS!\n    # add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains\" preload; always;\n\n    # XSS Protection\n    # add_header X-XSS-Protection \"1; mode=block\";\n\n    # Clickjacking\n    # add_header X-Frame-Options \"SAMEORIGIN\";\n\n    # X-Content Type Options\n    # add_header X-Content-Type-Options nosniff;\n\n    # Secure Cookie\n    # add_header Set-Cookie \"Path=/; HttpOnly; Secure\";\n\n\n    # [EDIT] If you are using multiple languages.\n    # rewrite ^/fr$ /fr/ redirect;\n    # rewrite ^/fr/(.*) /$1;\n    # Watch out: if you encounter issues with a quick view or shopping cart, you might want to use a different rule:\n    # rewrite '^/((?!js|qq)[a-z]{2})/(.*)' /index.php?isolang=$1&$args last;\n    # see: https://github.com/PrestaShop/PrestaShop/issues/14921#issuecomment-948932833\n\n    # Images.\n    rewrite ^/(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$1$2.jpg last;\n    rewrite ^/(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$1$2$3.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$1$2$3$4.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$4/$1$2$3$4$5.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$4/$5/$1$2$3$4$5$6.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$1$2$3$4$5$6$7.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$1$2$3$4$5$6$7$8.jpg last;\n    rewrite ^/(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(-[\\w-]+)?/.+\\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$8/$1$2$3$4$5$6$7$8$9.jpg last;\n    rewrite ^/c/([\\w.-]+)/.+\\.jpg$ /img/c/$1.jpg last;\n\n    # AlphaImageLoader for IE and FancyBox.\n    rewrite ^images_ie/?([^/]+)\\.(gif|jpe?g|png)$ js/jquery/plugins/fancybox/images/$1.$2 last;\n\n    # Web service API.\n    rewrite ^/api/?(.*)$ /webservice/dispatcher.php?url=$1 last;\n\n    # Installation sandbox.\n    rewrite ^(/install(?:-dev)?/sandbox)/.* /$1/test.php last;\n\n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n\n    # [EDIT] Replace 'admin-dev' in this block with the name of your admin directory.\n    location /admin-dev/ {\n        try_files $uri $uri/ /admin-dev/index.php$is_args$args;\n    }\n\n\n    # .htaccess, .DS_Store, .htpasswd, etc.\n    location ~ /\\.(?!well-known) {\n        deny all;\n    }\n\n    # Source code directories.\n    location ~ ^/(app|bin|cache|classes|config|controllers|docs|localization|override|src|tests|tools|translations|var|vendor)/ {\n        deny all;\n    }\n\n    # vendor in modules directory.\n    location ~ ^/modules/.*/vendor/ {\n        deny all;\n    }\n\n    # Prevent exposing other sensitive files.\n    location ~ \\.(log|tpl|twig|sass|yml)$ {\n        deny all;\n    }\n\n    # Prevent injection of PHP files.\n    location /img {\n        location ~ \\.php$ { deny all; }\n    }\n\n    location /upload {\n        location ~ \\.php$ { deny all; }\n    }\n\n    location ~ [^/]\\.php(/|$) {\n        # Split $uri to $fastcgi_script_name and $fastcgi_path_info.\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n\n        # Ensure that the requested PHP script exists before passing it\n        # to the PHP-FPM.\n        try_files $fastcgi_script_name =404;\n\n        # Environment variables for PHP.\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $request_filename;\n\n        fastcgi_index index.php;\n\n        fastcgi_keep_conn on;\n        fastcgi_read_timeout 30s;\n        fastcgi_send_timeout 30s;\n\n        # Uncomment these in case of long loading or 502/504 errors.\n        # fastcgi_buffer_size 256k;\n        # fastcgi_buffers 256 16k;\n        # fastcgi_busy_buffers_size 256k;\n\n        # [EDIT] Connection to PHP-FPM unix domain socket.\n        fastcgi_pass unix:/var/run/php/php-fpm.sock;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Native Form Handler Service in YAML\nDESCRIPTION: This YAML configuration registers PrestaShop's built-in `Core\\Form\\Handler` class as the form handler service for this specific configuration form. It injects necessary dependencies: the form factory (`@form.factory`), the hook dispatcher (`@prestashop.core.hook.dispatcher`), the custom form data provider (`@prestashop.module.demosymfonyformsimple.form.demo_configuration_text_form_data_provider`), the FQCN of the form type (`DemoConfigurationFormType`), and a hook name (`DemoConfiguration`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\n  prestashop.module.demosymfonyformsimple.form.demo_configuration_text_form_data_handler:\n    class: 'PrestaShop\\PrestaShop\\Core\\Form\\Handler'\n    arguments:\n      - '@form.factory'\n      - '@prestashop.core.hook.dispatcher'\n      - '@prestashop.module.demosymfonyformsimple.form.demo_configuration_text_form_data_provider'\n      - 'PrestaShop\\Module\\DemoSymfonyFormSimple\\Form\\DemoConfigurationFormType'\n      - 'DemoConfiguration'\n\n```\n\n----------------------------------------\n\nTITLE: Implementing List Action in ManufacturerController (PHP)\nDESCRIPTION: This snippet shows how to implement the list action in a controller. It uses the ManufacturerFilters class to automatically handle filter persistence and retrieval, and renders the grid using a Twig template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ManufacturerController extends FrameworkBundleAdminController\n{\n    ...\n    /**\n     * Show manufacturers listing page.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     * @param ManufacturerFilters $manufacturerFilters\n     *\n     * @return Response\n     */\n    public function indexAction(\n        Request $request,\n        ManufacturerFilters $manufacturerFilters\n    ) {\n        $manufacturerGridFactory = $this->get('prestashop.core.grid.grid_factory.manufacturer');\n        $manufacturerGrid = $manufacturerGridFactory->getGrid($manufacturerFilters);\n\n        return $this->render('@PrestaShop/Admin/Sell/Catalog/Manufacturer/index.html.twig', [\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($request->attributes->get('_legacy_controller')),\n            'manufacturerGrid' => $this->presentGrid($manufacturerGrid),\n        ]);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Search Controller Route (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the routing for the common search controller. It specifies the controller, grid definition factory service, and redirection route.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# your-module/config/routes.yml\nadmin_addresses_search:\n  path: /\n  methods: [POST]\n  defaults:\n    _controller: PrestaShopBundle:Admin\\Common:searchGrid\n    gridDefinitionFactoryServiceId: prestashop.core.grid.definition.factory.address\n    redirectRoute: admin_addresses_index\n    _legacy_controller: AdminAddresses\n    _legacy_link: AdminAddresses:submitFilteraddress\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveAllAssociatedProductCategoriesHandler in PHP\nDESCRIPTION: This snippet shows the implementation of the RemoveAllAssociatedProductCategoriesHandler class, which handles the RemoveAllAssociatedProductCategoriesCommand. It implements the RemoveAllAssociatedProductCategoriesHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-product-categories-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\RemoveAllAssociatedProductCategoriesHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Decorator Controller in PHP\nDESCRIPTION: PHP class `DemoController` extending `FrameworkBundleAdminController` and implementing the decorator pattern. It accepts the original `CmsPageController` (the decorated service) via constructor injection and stores it. The `indexAction` method simply delegates the call to the corresponding method on the injected decorated controller, returning its result.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule\\Controller;\n\nuse PrestaShop\\PrestaShop\\Core\\Search\\Filters\\CmsPageCategoryFilters;\nuse PrestaShop\\PrestaShop\\Core\\Search\\Filters\\CmsPageFilters;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass DemoController extends FrameworkBundleAdminController\n{\n    /**\n     * @var CmsPageController\n     */\n    private $decoratedController;\n\n    public function __construct(CmsPageController $decoratedController)\n    {\n        $this->decoratedController = $decoratedController;\n    }\n\n    public function indexAction(CmsPageCategoryFilters $categoryFilters, CmsPageFilters $cmsFilters, Request $request)\n    {\n        return $this->decoratedController->indexAction($categoryFilters, $cmsFilters, $request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeaheadProductPackCollectionType Field in PrestaShop PHP\nDESCRIPTION: This PHP code snippet demonstrates how to add and configure the `TypeaheadProductPackCollectionType` field within a Symfony form builder (`$builder`) in a PrestaShop context. It sets up the remote URL for AJAX product searches using `getLegacyAdminLink`, defines the mapping for product ID ('id') and display name ('name'), specifies placeholder text via the translator service, provides an HTML template (`template_collection`) for displaying selected items, marks the field as not required, and sets the field label.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/typeahead-product-pack-collection-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('inputPackItems', TypeaheadProductPackCollectionType::class, [\n    'remote_url' => $this->context->getLegacyAdminLink('AdminProducts', true, ['ajax' => 1, 'action' => 'productsList', 'forceJson' => 1, 'excludeVirtuals' => 1, 'limit' => 20]) . '&q=%QUERY',\n    'mapping_value' => 'id',\n    'mapping_name' => 'name',\n    'placeholder' => $this->translator->trans('Search for a product', [], 'Admin.Catalog.Help'),\n    'template_collection' => '\n        <h4>%s</h4>\n        <div class=\"ref\">REF: %s</div>\n        <div class=\"quantity text-md-right\">x%s</div>\n        <button type=\"button\" class=\"btn btn-danger btn-sm delete\"><i class=\"material-icons\">delete</i></button>\n    ',\n    'required' => false,\n    'label' => $this->translator->trans('Add products to your pack', [], 'Admin.Catalog.Feature'),\n])\n```\n\n----------------------------------------\n\nTITLE: Registering and Implementing a Hook in a PrestaShop Module (PHP)\nDESCRIPTION: This PHP snippet shows the basic structure of a PrestaShop module file (`foo.php`). It demonstrates registering the `displayDashboardToolbarIcons` hook during the module's installation (`install` method) and implementing the corresponding hook method (`hookDisplayDashboardToolbarIcons`). The hook implementation includes a check to ensure it runs only within a Symfony context and on the specific `admin_product_catalog` route.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// foo.php\n\n/* ... */\n\n/**\n * Module installation.\n *\n * @return bool Success of the installation\n */\npublic function install()\n{\n    return parent::install() && $this->registerHook('displayDashboardToolbarIcons');\n}\n\n/**\n * Add an \"XML export\" action in Product Catalog page.\n *\n * @return bool Success of the installation\n */\npublic function hookDisplayDashboardToolbarIcons($hookParams)\n{\n  if ($this->isSymfonyContext() && $hookParams['route'] === 'admin_product_catalog') {\n      // to be continued\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing uploadImage Method in PHP for PrestaShop\nDESCRIPTION: This private method handles the actual image upload process. It retrieves the uploader service and the uploaded file, then calls the upload method if a file is present.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @param array $params\n */\nprivate function uploadImage(array $params): void\n{\n    /** @var ImageUploaderInterface $supplierExtraImageUploader */\n    $supplierExtraImageUploader = $this->get(\n        'prestashop.module.demoextendsymfonyform.uploader.supplier_extra_image_uploader'\n    );\n\n    /** @var UploadedFile $uploadedFile */\n    $uploadedFile = $params['form_data']['upload_image_file'];\n\n    if ($uploadedFile instanceof UploadedFile) {\n        $supplierExtraImageUploader->upload($params['id'], $uploadedFile);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Widget Module Implementation Example in PHP\nDESCRIPTION: A full example of a PrestaShop module implementing the WidgetInterface with all required methods. Shows constructor setup, widget rendering, and variable assignment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\nclass MyModule extends Module implements WidgetInterface\n{\n    public function __construct()\n    {\n        $this->name = 'mymodule';\n        $this->tab = 'front_office_features';\n        $this->version = '1.0.0';\n        $this->author = 'Firstname Lastname';\n        $this->need_instance = 0;\n        $this->ps_versions_compliancy = [\n            'min' => '1.7',\n            'max' => _PS_VERSION_\n        ];\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->l('My module');\n        $this->description = $this->l('Description of my module.');\n\n        $this->confirmUninstall = $this->l('Are you sure you want to uninstall?');\n    }\n\n    public function renderWidget($hookName, array $configuration) \n    {\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n\n        return $this->fetch('module:'.$this->name.'/views/templates/widget/mymodule.tpl');\n    }\n \n    public function getWidgetVariables($hookName , array $configuration)\n    {\n        $myParamKey = $configuration['my_param_key'] ?? null;\n        \n        return [\n            'my_var1' => 'my_var1_value',\n            'my_var2' => 'my_var2_value',\n            'my_var_n' => 'my_var_n_value',\n            'my_dynamic_var_by_param' => $this->getMyDynamicVarByParamKey($myParamKey),\n        ];\n    }\n    \n    public function getMyDynamicVarByParamKey(string $paramKey)\n    {\n        if($paramKey === 'my_param_value') {\n           return 'my_dynamic_var_by_my_param_value';\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Hook Dispatch in a Symfony Controller - PrestaShop PHP\nDESCRIPTION: This snippet illustrates the method signature for dispatching a hook in a PrestaShop Symfony controller. The protected dispatchHook method, inherited from FrameworkBundleAdminController, takes the hook name and an associative array of parameters. Developers should override or call this method in their controller classes. Required: extending FrameworkBundleAdminController. Input: hook name string and parameters array; Output: hook result. The body is omitted as presence is for demonstration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function dispatchHook($hookName, array $parameters);\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Instance Loading in PHP\nDESCRIPTION: Determines whether to load the module's class when displaying the \"Modules\" page in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->need_instance = 1;\n```\n\n----------------------------------------\n\nTITLE: Issuing Partial Refunds with PrestaShop Domain Command PHP\nDESCRIPTION: This PHP code defines the IssuePartialRefundCommand for processing partial refunds on orders within the PrestaShop framework. It requires order identifiers, refund details, and options for handling product restocking, credit slips, voucher generation, and refund amounts. Dependencies include the PrestaShop Domain command and handler interfaces. Key parameters include orderId (int), orderDetailRefunds (array), shippingCostRefundAmount (string), restockRefundedProducts (bool), generateCreditSlip (bool), generateVoucher (bool), voucherRefundType (int), and voucherRefundAmount (nullable string). The expected input is a fully specified set of constructor parameters, and the command is handled by IssuePartialRefundHandler, with no return value (void). Limitations include needing valid order and refund data, and the process depends on correct implementation of handler classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-partial-refund-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\IssuePartialRefundCommand\n// Issues partial refund for given order.\n// Constructor parameters:\n//   $int $orderId\n//   $array $orderDetailRefunds\n//   $string $shippingCostRefundAmount\n//   $bool $restockRefundedProducts\n//   $bool $generateCreditSlip\n//   $bool $generateVoucher\n//   $int $voucherRefundType\n//   $?string $voucherRefundAmount = NULL\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\IssuePartialRefundHandler\n//   Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\IssuePartialRefundHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Getting Row Count from Result\nDESCRIPTION: Shows how to get the number of rows from the last result set using numRows().\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$db->numRows();\n```\n\n----------------------------------------\n\nTITLE: Linking to PrestaShop Secure File Reader Route in Template - HTML\nDESCRIPTION: This snippet demonstrates how to securely link to user-uploaded files in a PrestaShop back office template by referencing the 'admin_common_secured_file_image_reader' route. Instead of exposing the file path directly, the template uses the 'path' helper to construct a link that passes the filename as a parameter to the secure controller. This ensures the file is served with the appropriate content-type and download behavior, helping prevent code execution or browser processing of malicious files.\n\nThis method depends on PrestaShop 8.1.6 or later, and specifically on the secure controller being properly registered. The primary parameter is 'fileName', which takes the value of the uploaded file to read. The controller restricts how different file types are served (inline for images, attachment for other types) and customizations may require decorating the underlying service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/read_uploaded_files_securely.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ path('admin_common_secured_file_image_reader', { 'fileName': message.attachmentFile }) }}\" target=\"_blank\">\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters and Tagging Services Automatically by Interface - YAML\nDESCRIPTION: Defines Symfony service configuration that autowires parameters by tag, automatically tagging all services implementing a given interface. The _defaults section ensures autowiring and binds the $elements constructor parameter to all instances tagged test_module.instance_of.instance_of_tagged. The _instanceof section applies this tag to all services implementing the specified interface. Requires Symfony service configuration support and correct namespace mapping.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    bind:\n      $elements: !tagged test_module.instance_of.instance_of_tagged\n\n  _instanceof:\n    TestModule\\InstanceofConditionals\\Collection\\ElementInterface:\n      tags: [ test_module.instance_of.instance_of_tagged ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Services via Symfony Container (PrestaShop - PHP)\nDESCRIPTION: This PHP snippet shows another way to retrieve services inside a controller class in PrestaShop by directly accessing the Symfony service container with $this->container. The demoAction retrieves the 'doctrine.cache' service to use it in the controller's logic before rendering a Twig view. This is an alternative to using explicit dependency injection in the constructor.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// modules/your-module/src/Controller/DemoController.php\\n\\nnamespace MyModule\\Controller;\\n\\nuse Doctrine\\Common\\Cache\\CacheProvider;\\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\\n\\nclass DemoController extends FrameworkBundleAdminController\\n{\\n    public function demoAction()\\n    {\\n        // you can also retrieve services directly from the container\\n        $cache = $this->container->get('doctrine.cache');\\n        \\n        return $this->render('@Modules/your-module/templates/admin/demo.html.twig');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Override in PrestaShop Module\nDESCRIPTION: Simple example showing how to override a PrestaShop back office template by extending the original template and replacing a specific block. This demonstrates overriding the product catalog filters with a 'Hello world!' message.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/admin-views.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends '@!PrestaShop/Admin/Product/CatalogPage/catalog.html.twig' %}\n\n{% block product_catalog_filters %}\n  Hello world!\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Creation with CQRS Command\nDESCRIPTION: Example showing how to handle object creation and retrieve the newly created object's ID using CQRS command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function create(array $data)\n{\n    $addContactCommand = new AddContactCommand(\n        $data['title'],\n        $data['is_messages_saving_enabled']\n    );\n    \n    $contactId = $this->commandBus->handle($addContactCommand);\n    \n    return $contactId->getValue();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CategoryChoiceTreeType in PHP Form Builder\nDESCRIPTION: Example showing how to implement CategoryChoiceTreeType in a custom Symfony form type. Demonstrates adding a category selection tree with the ability to disable specific categories through the disabled_values option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/category-choice-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\CategoryChoiceTreeType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n   public function buildForm(FormBuilderInterface $builder, array $options)\n   {\n        // you can disable some categories selection in choice tree\n        $disabledCategories = [\n            2, // category id\n        ];\n        $builder\n            ->add('category_id', CategoryChoiceTreeType::class, [\n                'disabled_values' => $disabledCategories,\n            ])\n        ;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Errors in PrestaShop Product Forms Using PHP\nDESCRIPTION: This PHP snippet explains how to handle and display form validation errors in the PrestaShop product form by appending errors to a controller's error array. It includes returning a JSON response if errors exist. Dependencies include PrestaShop's Context and Controller classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/forms/admin-forms.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// add error\nContext::getContext()->controller->errors['step6_myfield'] = [$this->l('Syntax error in field')];\n\n// return error \nif (Context::getContext()->controller->errors) {\n    http_response_code(400);\n    die(json_encode(Context::getContext()->controller->errors));\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying UpdateProductStockAvailableHandler Class in PHP\nDESCRIPTION: Specifies the fully qualified name for the `UpdateProductStockAvailableHandler` class, located within the PrestaShop Adapter layer. This class is responsible for processing the `UpdateProductStockAvailableCommand` and executing the necessary logic to update the product's stock.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\Stock\\CommandHandler\\UpdateProductStockAvailableHandler`\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a PrestaShopCollection in PHP\nDESCRIPTION: Demonstrates how to create a PrestaShopCollection, filter it, and iterate through the results. This example creates a collection of Product objects, filters for on-sale products, orders them by reference, and limits the result to 100 items.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShopCollection;\n\n$productCollection = (new PrestaShopCollection('Product'))\n    ->where('on_sale', '=', true)\n    ->orderBy('reference', 'desc')\n    ->setPageSize(100);\n\nif (count($productCollection) > 0) {\n    foreach ($productCollection as $product) {\n        // do something with your product\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Template Folder Structure in Twig\nDESCRIPTION: Shows the folder structure of Grid-related Twig templates in PrestaShop, including actions, blocks, and columns.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/customize-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGrid\n├── Actions\n│   ├── Bulk\n│   ├── Grid\n│   └── Row\n├── Blocks\n│   ├── bulk_actions.html.twig\n│   ├── bulk_actions_select_all.html.twig\n│   ├── EmptyState\n│   ├── grid_actions.html.twig\n│   ├── pagination.html.twig\n│   ├── Table\n│   └── table.html.twig\n├── Columns\n│   ├── Content\n│   └── Header\n├── grid.html.twig\n└── grid_panel.html.twig\n```\n\n----------------------------------------\n\nTITLE: Adding Product Images Using cURL\nDESCRIPTION: PHP example using cURL to upload a new product image through the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$urlImage = 'http://example.com/api/images/products/10/';\n$key  = 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT';\n\n//Here you set the path to the image you need to upload\n$image_path = '/path/to/the/image.jpg';\n$image_mime = 'image/jpg';\n\n$args['image'] = new CurlFile($image_path, $image_mime);\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_HEADER, 1);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLINFO_HEADER_OUT, 1);\ncurl_setopt($ch, CURLOPT_URL, $urlImage);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_USERPWD, $key.':');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $args);\n$result = curl_exec($ch);\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n\nif (200 == $httpCode) {\n    echo 'Product image was successfully created.';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PrestaShop Module Installer Class in PHP\nDESCRIPTION: This snippet defines an `Installer` class within the module's namespace. It handles the module's installation and uninstallation logic. The `install` method registers necessary hooks (`actionSupplierFormBuilderModifier`, `actionAfterCreateSupplierFormHandler`, `actionAfterUpdateSupplierFormHandler`) and calls a private method `installDatabase` to create a custom database table (`supplier_extra_image`). The `uninstall` method calls `uninstallDatabase` to remove the table. Helper methods `executeQueries` and `registerHooks` encapsulate the database operations and hook registration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Install;\n\nuse Db;\nuse Module;\n\n/**\n * Class Installer\n * @package PrestaShop\\Module\\DemoExtendSymfonyForm\\Install\n */\nclass Installer\n{\n    /**\n     * Module's installation entry point.\n     *\n     * @param Module $module\n     *\n     * @return bool\n     */\n    public function install(Module $module): bool\n    {\n        if (!$this->registerHooks($module)) {\n            return false;\n        }\n\n        if (!$this->installDatabase()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Module's uninstallation entry point.\n     *\n     * @return bool\n     */\n    public function uninstall(): bool\n    {\n        return $this->uninstallDatabase();\n    }\n\n    /**\n     * Install the database modifications required for this module.\n     *\n     * @return bool\n     */\n    private function installDatabase(): bool\n    {\n        $queries = [\n            'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'supplier_extra_image` (\n              `id_extra_image` int(11) NOT NULL AUTO_INCREMENT,\n              `id_supplier` int(11) NOT NULL,\n              `image_name` varchar(64) NOT NULL,\n              PRIMARY KEY (`id_extra_image`)\n            ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;',\n        ];\n\n        return $this->executeQueries($queries);\n    }\n\n    /**\n     * Uninstall database modifications.\n     *\n     * @return bool\n     */\n    private function uninstallDatabase(): bool\n    {\n        $queries = [\n            'DROP TABLE IF EXISTS `'._DB_PREFIX_.'supplier_extra_image`',\n        ];\n\n        return $this->executeQueries($queries);\n    }\n\n    /**\n     * Register hooks for the module.\n     *\n     * @param Module $module\n     *\n     * @return bool\n     */\n    private function registerHooks(Module $module): bool\n    {\n        $hooks = [\n            'actionSupplierFormBuilderModifier',\n            'actionAfterCreateSupplierFormHandler',\n            'actionAfterUpdateSupplierFormHandler',\n        ];\n\n        return (bool) $module->registerHook($hooks);\n    }\n\n    /**\n     * A helper that executes multiple database queries.\n     *\n     * @param array $queries\n     *\n     * @return bool\n     */\n    private function executeQueries(array $queries): bool\n    {\n        foreach ($queries as $query) {\n            if (!Db::getInstance()->execute($query)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding DeltaQuantityType Field to a Symfony Form Builder (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to add a `DeltaQuantityType` field named 'delta_quantity' to a Symfony form builder (`$builder`). It configures the field with options like `required`, `label`, `disabling_switch`, `disabling_switch_event`, and a `disabled_value` callback function to determine if the field should be disabled based on related data ('quantity' and 'delta'). The input data represents the initial quantity, but the submitted value will be the delta change.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/delta-quantity-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n$builder->add('delta_quantity', DeltaQuantityType::class, [\n    'required' => false,\n    'label' => $this->trans('Edit quantity', 'Admin.Catalog.Feature'),\n    'disabling_switch' => true,\n    'disabling_switch_event' => 'combinationSwitchDeltaQuantity',\n    'disabled_value' => function (?array $data) {\n        return empty($data['quantity']) && empty($data['delta']);\n    },\n])\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Module Version in PHP\nDESCRIPTION: Specifies the version number for the module, which is displayed in the modules list. It's recommended to follow Semantic Versioning.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->version = '1.0.5';\n```\n\n----------------------------------------\n\nTITLE: Modifying Combination Form Structure using CombinationFormModifier - PrestaShop (PHP)\nDESCRIPTION: This PHP class demonstrates a canonical approach to modifying the combination form using a CombinationFormModifier. The modify() method adds a custom field to the form by calling addCustomField, which inserts a TextType field with various UI and data options. Dependencies include CustomCombination, FormBuilderInterface, and the formBuilderModifier service. Parameters are the CombinationId and form builder interface. The code expects to operate within PrestaShop's admin form building context and requires proper service injection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// [...]\nclass CombinationFormModifier\n{\n    // [...]\n\n    /**\n     * @param CombinationId|null $combinationId\n     * @param FormBuilderInterface $combinationFormBuilder\n     */\n    public function modify(\n        ?CombinationId $combinationId,\n        FormBuilderInterface $combinationFormBuilder\n    ): void {\n        $idValue = $combinationId ? $combinationId->getValue() : null;\n        $customCombination = new CustomCombination($idValue);\n        $this->addCustomField($customCombination, $combinationFormBuilder);\n    }\n\n    /**\n     * @param CustomCombination $customCombination\n     * @param FormBuilderInterface $combinationFormBuilder\n     *\n     * @see demoproductform::hook\n     */\n    private function addCustomField(CustomCombination $customCombination, FormBuilderInterface $combinationFormBuilder): void\n    {\n        $this->formBuilderModifier->addAfter(\n            $combinationFormBuilder,\n            'references',\n            'demo_module_custom_field',\n            TextType::class,\n            [\n                'label' => $this->translator->trans('Demo custom field', [], 'Modules.Demoproductform.Admin'),\n                'label_attr' => [\n                    'title' => 'h2',\n                    'class' => 'text-info',\n                ],\n                'attr' => [\n                    'placeholder' => $this->translator->trans('Your example text here', [], 'Modules.Demoproductform.Admin'),\n                ],\n                'data' => $customCombination->custom_field,\n                'empty_data' => '',\n                'form_theme' => '@PrestaShop/Admin/TwigTemplateForm/prestashop_ui_kit_base.html.twig',\n            ]\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Product URL with getProductLink()\nDESCRIPTION: Demonstrates how to get a product URL with proper HTTP scheme and URL rewriting (if enabled) using Link component through Context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/link.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// obtain $context from a controller or from a module with: \n$context = $this->context;\n\n// or from anywhere else:\n$context = Context::getContext();\n\n// get your product instance (from ObjectModel in this example)\n$product = new Product(123);\n\n// get your product URL\n$link = $context->link->getProductLink($product);\n```\n\n----------------------------------------\n\nTITLE: Updating Employee Notification Last Element - PrestaShop Command - PHP\nDESCRIPTION: This PHP code snippet defines a command class, UpdateEmployeeNotificationLastElementCommand, responsible for recording the last notification element of a specific type that an employee has seen in PrestaShop. It requires a string type parameter in the constructor to specify the notification type. The command is handled by UpdateEmployeeNotificationLastElementHandler, implementing the corresponding interface. The expected usage is to dispatch this command in command-bus architecture; it returns void and relies on proper handler registration in the dependency injection container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/notification/_partials/update-employee-notification-last-element-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace PrestaShop\\PrestaShop\\Core\\Domain\\Notification\\Command;\n\n/**\n * Updates the last notification element from a given type seen by the employee\n */\nclass UpdateEmployeeNotificationLastElementCommand\n{\n    /**\n     * @var string\n     */\n    private $type;\n\n    /**\n     * @param string $type\n     */\n    public function __construct($type)\n    {\n        $this->type = $type;\n    }\n\n    /**\n     * @return string\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using PSR-4 Namespace in Controller (PrestaShop - PHP)\nDESCRIPTION: This PHP snippet demonstrates how to set up PSR-4 namespacing for your PrestaShop module's controller. It specifies the correct namespace and imports the base Admin controller. This is necessary for PSR-4 autoloading in conjunction with the composer.json autoload configuration. The code does not include method implementations, focusing on structure and namespaces.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// modules/your-module/src/Controller/DemoController.php\\n\\nnamespace MyModule\\Controller;\\n\\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\n```\n\n----------------------------------------\n\nTITLE: Declaring the CustomTabType Form Type Service - PrestaShop (YAML)\nDESCRIPTION: This YAML configuration registers the CustomTabType form type as a Symfony form service. It defines the service class, inheritance, visibility, argument injection from a data provider, and tagging as form.type. This allows the type to be used within back office product forms where custom tabs are required. Place this in config.yml or appropriate service configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n    DemoNewHooks\\Form\\Type\\CustomTabType:\n        class: DemoNewHooks\\Form\\Type\\CustomTabType\n        parent: 'form.type.translatable.aware'\n        public: true\n        arguments:\n            - '@=service(\"prestashop.adapter.data_provider.currency\").getDefaultCurrency()'\n        tags:\n            - { name: form.type }\n\n```\n\n----------------------------------------\n\nTITLE: Adding TextWithLengthCounterType to a PrestaShop Form (PHP)\nDESCRIPTION: Demonstrates how to include the TextWithLengthCounterType field within a Symfony form class in a PrestaShop context. It uses the `add` method of the `FormBuilderInterface` to define a field named `meta_title`, configures its maximum length using the `max_length` option, and specifies the custom form type class. This type requires corresponding JavaScript to function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/text-with-length-counter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\TextWithLengthCounterType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('meta_title', TextWithLengthCounterType::class, [\n            'max_length' => 255,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with the {url} Smarty Helper\nDESCRIPTION: Provides examples of using the `{url}` Smarty helper to generate various URLs within PrestaShop templates. It shows generating URLs for an 'address' entity using different parameter formats and generating a URL for a Symfony route ('sf' entity) with specific parameters. It utilizes the `Link` component internally.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: smarty\nCODE:\n```\n  {url entity=address id=$id_address}\n  {url entity=address params=['id_address' => $id_address]}\n  {url entity=address id=$id_address params=['delete' => 1]}\n  {url entity='sf' route='admin_module_manage' sf-params=['foo' => 'bar']}\n```\n\n----------------------------------------\n\nTITLE: Creating an Offline PaymentOption in a PrestaShop Module (PHP)\nDESCRIPTION: Example PHP code demonstrating the instantiation and configuration of a `PaymentOption` object for an offline payment method within a PrestaShop payment module. It sets the module name, call-to-action text, action URL for validation using `getModuleLink`, fetches additional information from a Smarty template (`paymentOptionOffline.tpl`), and specifies the logo path using `Media::getMediaPath`. Requires the `PaymentOption` class, module context (`$this->context`), and potentially the `Media` class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/payment/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// create a PaymentOption of type Offline\n$offlineOption = new PaymentOption();\n$offlineOption->setModuleName($this->name);\n$offlineOption->setCallToActionText($this->l('Pay offline'));\n$offlineOption->setAction($this->context->link->getModuleLink($this->name, 'validation', ['option' => 'offline'], true));\n$offlineOption->setAdditionalInformation($this->context->smarty->fetch('module:paymentexample/views/templates/front/paymentOptionOffline.tpl'));\n$offlineOption->setLogo(Media::getMediaPath(_PS_MODULE_DIR_ . $this->name . '/views/img/option/offline.png'));\n```\n\n----------------------------------------\n\nTITLE: Removing Filters from Customer Grid in PHP\nDESCRIPTION: This snippet shows how to remove filters associated with removed columns from the Customer grid in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/** @var FilterCollection $filters */\n$filters = $definition->getFilters();\n\n$filters->remove('social_title')\n    ->remove('active')\n    ->remove('optin')\n;\n```\n\n----------------------------------------\n\nTITLE: Modifying Combination Subform via actionCombinationFormFormBuilderModifier Hook - PrestaShop Module Hook (PHP)\nDESCRIPTION: This PHP snippet demonstrates implementing the hookActionCombinationFormFormBuilderModifier hook in a PrestaShop module to modify the product combination form. The hook receives form parameters, retrieves a CombinationFormModifier service, constructs a CombinationId if available, and applies the modification to the form builder. Dependencies include the CombinationFormModifier class and a properly declared service. Expected input is the array of form parameters; the output is the modified form. This must be registered as a hook in your module install.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Hook that modifies the combination form structure.\n *\n * @param array $params\n */\npublic function hookActionCombinationFormFormBuilderModifier(array $params): void\n{\n    /** @var CombinationFormModifier $productFormModifier */\n    $productFormModifier = $this->get(CombinationFormModifier::class);\n    $combinationId = isset($params['id']) ? new CombinationId((int) $params['id']) : null;\n\n    $productFormModifier->modify($combinationId, $params['form_builder']);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Module Instance Variable Assignment - PrestaShop Module Properties (PHP)\nDESCRIPTION: These lines set core module properties such as name, tab, version, and author within the constructor. Each property specifies internal identification, UI grouping, semantic version, and author display. These assignments are required for integration into the PrestaShop modules list and catalog.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->name = 'mymodule';\\n$this->tab = 'front_office_features';\\n$this->version = '1.0.0';\\n$this->author = 'Firstname Lastname';\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Row Action Class in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom Row Action class in PHP for PrestaShop. It extends the AbstractRowAction class and defines the action type and configuration options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-row-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// modules/mymodule/src/Grid/Action/Type/\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\AbstractRowAction;\n\n/**\n * It extends AbstractRowAction,\n * but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\RowActionInterface \n * if for some reason you want to avoid using the abstract class\n */ \nfinal class MySpecificRowAction extends AbstractRowAction\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function getType()\n    {\n        return 'my_specific';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function configureOptions(OptionsResolver $resolver)\n    {\n        /**\n         * options passed to the resolver will be available in the Grid Row action\n         * and also in the template responsible of rendering the action.\n         */\n        $resolver\n            ->setRequired([\n                'route',\n            ])\n            ->setDefaults([\n                'route_params' => [],\n            ])\n            ->setAllowedTypes('route', 'string')\n            ->setAllowedTypes('route_params', 'array');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DoctrineQueryBuilderInterface for Product Grid in PHP\nDESCRIPTION: This code snippet shows how to implement the DoctrineQueryBuilderInterface for a product grid. It includes methods for building search and count queries, as well as a base query for common operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Query\\AbstractDoctrineQueryBuilder;\nuse Doctrine\\DBAL\\Connection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteriaInterface;\n\nfinal class ProductQueryBuilder extends AbstractDoctrineQueryBuilder\n{\n    /**\n     * @var int\n     */\n    private $contextLangId;\n\n    /**\n     * @var int\n     */\n    private $contextShopId;\n\n    /**\n     * @param Connection $connection\n     * @param string $dbPrefix\n     * @param int $contextLangId\n     * @param int $contextShopId\n     */\n    public function __construct(Connection $connection, $dbPrefix, $contextLangId, $contextShopId)\n    {\n        parent::__construct($connection, $dbPrefix);\n\n        $this->contextLangId = $contextLangId;\n        $this->contextShopId = $contextShopId;\n    }\n\n    // Get Search query builder returns a QueryBuilder that is used to fetch filtered, sorted and paginated data from the database.\n    // This query builder is also used to get the SQL query that was executed.\n    public function getSearchQueryBuilder(SearchCriteriaInterface $searchCriteria)\n    {\n        $qb = $this->getBaseQuery();\n        $qb->select('p.id_product, p.reference, pl.name')\n            ->orderBy(\n                $searchCriteria->getOrderBy(),\n                $searchCriteria->getOrderWay()\n            )\n            ->setFirstResult($searchCriteria->getOffset())\n            ->setMaxResults($searchCriteria->getLimit());\n    \n        foreach ($searchCriteria->getFilters() as $filterName => $filterValue) {\n            if ('id_product' === $filterName) {\n                $qb->andWhere(\"p.id_product = :$filterName\");\n                $qb->setParameter($filterName, $filterValue);\n\n                continue;\n            }\n\n            $qb->andWhere(\"$filterName LIKE :$filterName\");\n            $qb->setParameter($filterName, '%'.$filterValue.'%');\n        }\n\n        return $qb;\n    }\n    \n    // Get Count query builder that is used to get the total count of all records (products)\n    public function getCountQueryBuilder(SearchCriteriaInterface $searchCriteria)\n    {\n        $qb = $this->getBaseQuery();\n        $qb->select('COUNT(p.id_product)');\n\n        return $qb;\n    }\n    \n    // Base query can be used for both Search and Count query builders\n    private function getBaseQuery()\n    {\n        return $this->connection\n            ->createQueryBuilder()\n            ->from($this->dbPrefix.'product', 'p')\n            ->leftJoin(\n                'p',\n                $this->dbPrefix.'product_lang',\n                'pl',\n                'p.id_product = pl.id_product AND pl.id_lang = :context_lang_id AND pl.id_shop = :context_shop_id'\n            )\n            ->setParameter('context_lang_id', $this->contextLangId)\n            ->setParameter('context_shop_id', $this->contextShopId)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ProductFormModifier Service via YAML for Autowiring - PrestaShop (YAML)\nDESCRIPTION: This YAML snippet declares the ProductFormModifier class as a Symfony service, enabling autowiring and making it publicly accessible. It injects the form.form_builder_modifier service as an argument. This configuration is required for ProductFormModifier to be resolved via dependency injection, allowing the corresponding PHP code to retrieve and use it. Place this block in your module's config/services.yml.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n    DemoNewHooks\\Form\\Modifier\\ProductFormModifier:\n        autowire: true\n        public: true\n        arguments:\n            $formBuilderModifier: '@form.form_builder_modifier'\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tab to Product Form Builder in PHP\nDESCRIPTION: Example code showing how to add a custom tab to the product form builder using NavigationTabType. The code modifies the FormBuilder by adding a new CustomTabType after the 'pricing' section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/navigation-tab-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->formBuilderModifier->addAfter(\n    $productFormBuilder,\n    'pricing',\n    'custom_tab',\n    CustomTabType::class,\n    [\n        'data' => [\n            'custom_price' => $customProduct->custom_price,\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating PrestaShopCollection in PHP\nDESCRIPTION: Illustrates how to paginate a PrestaShopCollection using setPageSize() and setPageNumber() methods. This example retrieves the second page of a collection with 100 items per page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$productCollection = (new PrestaShopCollection('Product'))\n    ->setPageSize(100) // will get only 100 items\n    ->setPageNumber(2); // but from page 2, equivalent to offset=(pageNumber - 1) * page_size. \n```\n\n----------------------------------------\n\nTITLE: Creating a Smarty Template for PrestaShop Module Display\nDESCRIPTION: This HTML snippet shows a Smarty template file for displaying the module content in the front office. It includes conditional statements and translation functions specific to PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/displaying-content-in-front-office.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Block mymodule -->\n<div id=\"mymodule_block_home\" class=\"block\">\n  <h4>{l s='Welcome!' mod='mymodule'}</h4>\n  <div class=\"block_content\">\n    <p>Hello,\n           {if isset($my_module_name) && $my_module_name}\n               {$my_module_name}\n           {else}\n               World\n           {/if}\n           !\n    </p>\n    <ul>\n      <li><a href=\"{$my_module_link}\" title=\"Click this link\">Click me!</a></li>\n    </ul>\n  </div>\n</div>\n<!-- /Block mymodule -->\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in a PrestaShop Symfony Controller using PHP\nDESCRIPTION: This snippet shows PrestaShop Symfony controller translation, where the $this->trans() method is called with the text and translation domain. Because of Symfony's API, the argument order differs (domain before parameters). It requires a Symfony-based controller extending FrameworkBundleAdminController; input is the text and domain, output is a translated string for use in controller properties or responses. Injection of replacement parameters is optional and may be provided as an array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace PrestaShop\\Module\\MyModule;\\n\\nclass SomeAdminController extends FrameworkBundleAdminController\\n{\\n    public function someAction()\\n    {\\n        $this->text = $this->trans('Some text being translated', 'Modules.Mymodule.Admin', []);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EditableCustomer Return Type in PHP\nDESCRIPTION: This code snippet defines the return type of the GetCustomerForEditing query. The EditableCustomer class likely contains the customer information retrieved for editing purposes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\EditableCustomer\n```\n\n----------------------------------------\n\nTITLE: Extending Product Listing Template in Smarty\nDESCRIPTION: This snippet demonstrates how to create a base product listing template that can be extended by other templates. It defines blocks for the content, product list header, and product list itself.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n{extends file=$layout}\n\n{block name='content'}\n  <section id=\"main\">\n\n    {block name='product_list_header'}\n      <h2 class=\"h2\">{$listing.label}</h2>\n    {/block}\n\n    {block name='product_list'}\n      {include file='catalog/_partials/products.tpl' listing=$listing}\n    {/block}\n\n  </section>\n{/block}\n```\n\n----------------------------------------\n\nTITLE: Initializing TextWithLengthCounter JavaScript Component (JS)\nDESCRIPTION: Explains how to enable the client-side functionality for TextWithLengthCounterType inputs. It imports the necessary `TextWithLengthCounter` component from its path within the admin theme and creates a new instance. This instantiation automatically finds and initializes the length counter behavior for all corresponding form elements present on the page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/text-with-length-counter.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n    import TextWithLengthCounter from \"admin-dev/themes/new-theme/js/components/form/text-with-length-counter\";\n\n    // enables length counter for all TextWithLengthCounterType inputs on the page\n    new TextWithLengthCounter();\n\n```\n\n----------------------------------------\n\nTITLE: Issuing Return Product Command in PrestaShop (PHP)\nDESCRIPTION: Defines and documents the usage of the IssueReturnProductCommand for initiating a product return in an order context within PrestaShop. Requires constructor parameters such as order ID, an array of order detail refunds, booleans for restocking, shipping cost refunds, credit slip and voucher generation, and a voucher refund type integer. Utilizes the PrestaShop Adapter Order CommandHandler, and expects no output (void return type); interactors should ensure that dependent handler classes and interfaces are available.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-return-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\IssueReturnProductCommand\n// Issues return product for given order.\n\n// Constructor parameters:\n//   int $orderId\n//   array $orderDetailRefunds\n//   bool $restockRefundedProducts\n//   bool $refundShippingCost\n//   bool $generateCreditSlip\n//   bool $generateVoucher\n//   int $voucherRefundType\n//\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\IssueReturnProductHandler\n//   Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\IssueReturnProductHandlerInterface\n//\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Data Provider in PHP\nDESCRIPTION: This PHP code defines the `DemoConfigurationTextFormDataProvider` class. It implements `FormDataProviderInterface` and acts as a bridge between the Symfony form and the data configuration logic. It uses the injected `DataConfigurationInterface` (our `DemoConfigurationTextDataConfiguration` service) to fetch initial form data (`getData`) and to persist submitted data (`setData`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoSymfonyFormSimple\\Form;\n\nuse PrestaShop\\PrestaShop\\Core\\Configuration\\DataConfigurationInterface;\nuse PrestaShop\\PrestaShop\\Core\\Form\\FormDataProviderInterface;\n\n/**\n * Provider is responsible for providing form data, in this case, it is returned from the configuration component.\n *\n * Class DemoConfigurationTextFormDataProvider\n */\nclass DemoConfigurationTextFormDataProvider implements FormDataProviderInterface\n{\n    /**\n     * @var DataConfigurationInterface\n     */\n    private $demoConfigurationTextDataConfiguration;\n\n    public function __construct(DataConfigurationInterface $demoConfigurationTextDataConfiguration)\n    {\n        $this->demoConfigurationTextDataConfiguration = $demoConfigurationTextDataConfiguration;\n    }\n\n    public function getData(): array\n    {\n        return $this->demoConfigurationTextDataConfiguration->getConfiguration();\n    }\n\n    public function setData(array $data): array\n    {\n        return $this->demoConfigurationTextDataConfiguration->updateConfiguration($data);\n    }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid in Controller and Template\nDESCRIPTION: These snippets show how to use the Grid Factory in a controller to create a grid, and how to render it in a Twig template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ProductController extends FrameworkBundleAdminController\n{\n    /**\n     * @return Response\n     */\n    public function indexAction()\n    {\n        $searchCriteria = ...\n    \n        $productGridFactory = $this->get('prestashop.core.grid.product_grid_factory');\n        $productGrid = $productGridFactory->getGrid($searchCriteria);\n        \n        return $this->render('@PrestaShop/Admin/Product/products.html.twig', [\n            // $this->presentGrid() is a helper method provided by FrameworkBundleAdminController\n            'productsGrid' => $this->presentGrid($productGrid),\n        ]);\n    }\n}\n```\n\nLANGUAGE: Twig\nCODE:\n```\n{# @PrestaShop/Admin/Product/products.html.twig #}\n\n{% include '@PrestaShop/Admin/Common/Grid/grid_panel.html.twig' with {'grid': productsGrid} %}\n```\n\n----------------------------------------\n\nTITLE: Generating a PrestaShop Module Front Controller URL Example (PHP)\nDESCRIPTION: Provides a practical example of using `Link::getModuleLink` to generate a URL for the 'validation' controller of the 'cheque' module, passing 'idPayment' as a parameter. It accesses the `Link` object through the global `Context` and demonstrates the resulting URL structure both with and without URL rewriting enabled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nContext::getContext()->link->getModuleLink('cheque', 'validation', array('idPayment' => 1337));\n\n```\n\n----------------------------------------\n\nTITLE: Defining Row Actions for Category Grid in PHP\nDESCRIPTION: This snippet demonstrates how to define Row Actions (View, Edit, Delete) for the Category Grid in PrestaShop. It shows the creation of a RowActionCollection and the addition of LinkRowAction and SubmitRowAction objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-row-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php // src/Core/Grid/Definition/Factory/CategoryGridDefinitionFactory.php\n\nfinal class CategoryGridDefinitionFactory extends AbstractFilterableGridDefinitionFactory\n{\n    // ...\n\n    /**\n     * @return RowActionCollection\n     */\n    private function getRowActions()\n    {\n        return (new RowActionCollection())\n            ->add(\n                (new LinkRowAction('view'))\n                ->setName($this->trans('View', [], 'Admin.Actions'))\n                ->setIcon('zoom_in')\n                ->setOptions([\n                    'route' => 'admin_categories_index',\n                    'route_param_name' => 'categoryId',\n                    'route_param_field' => 'id_category',\n                    'accessibility_checker' => $this->categoryForViewAccessibilityChecker,\n                    // Thanks to this option a click on the row will have the same effect as this action\n                    'clickable_row' => true,\n                ])\n            )\n            ->add(\n                (new LinkRowAction('edit'))\n                ->setName($this->trans('Edit', [], 'Admin.Actions'))\n                ->setIcon('edit')\n                ->setOptions([\n                    'route' => 'admin_categories_edit',\n                    'route_param_name' => 'categoryId',\n                    'route_param_field' => 'id_category',\n                    // A grid usually has only one click action, categories are a special case because the view\n                    // action may be filtered via the accessibility_checker option, in which case the edit action\n                    // will be used The order is important then as the first row action is used by default\n                    'clickable_row' => true,\n                ])\n            )\n            ->add((new SubmitRowAction('delete'))\n                ->setName($this->trans('Delete', [], 'Admin.Actions'))\n                ->setIcon('delete')\n                ->setOptions([\n                    'method' => 'DELETE',\n                    'route' => 'admin_categories_delete',\n                    'route_param_name' => 'categoryId',\n                    'route_param_field' => 'id_category',\n                    'confirm_message' => $this->trans(\n                        'Delete selected item?',\n                        [],\n                        'Admin.Notifications.Warning'\n                    ),\n                ])\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Handler for Customer Viewing - PrestaShop PHP\nDESCRIPTION: This snippet references the handler class responsible for implementing the business logic for the GetCustomerForViewing query in PHP. It uses dependency injection to receive the query object and returns a ViewableCustomer instance. The handler must implement the GetCustomerForViewingHandlerInterface to ensure proper contract adherence and compatibility within the PrestaShop system. The handler typically orchestrates data retrieval and transformation for back office presentation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-viewing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\QueryHandler\\GetCustomerForViewingHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing EditEmployeeHandler Class in PHP\nDESCRIPTION: This snippet shows the handler class for the EditEmployeeCommand. It implements the EditEmployeeHandlerInterface and is responsible for processing the edit employee command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/edit-employee-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\CommandHandler\\EditEmployeeHandler\n```\n\n----------------------------------------\n\nTITLE: Full Example: Adding APE Number to Customer Grid in PHP\nDESCRIPTION: This comprehensive example demonstrates adding an APE number column to the customer grid, including the definition modifier, query builder modifier, and filter configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinitionInterface;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\CustomerGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\Filter;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n    public function hookActionCustomerGridDefinitionModifier(array $params)\n    {\n        $definition = $params['definition'];\n\n        // Add the column\n        $columns = $definition->getColumns();\n        $columns->addAfter('id_customer', \n            (new DataColumn('ape'))\n            ->setName('Account #')\n            ->setOptions([\n                'field' => 'ape'\n            ])\n        );\n\n        # Add the filter\n        $filters = $definition->getFilters();\n        $filters->add(\n            (new Filter('ape', TextType::class))\n            ->setTypeOptions([\n                'required' => false,\n                'attr' => [\n                    'placeholder' => 'APE #',\n                ],\n            ])\n            ->setAssociatedColumn('ape')\n        );\n    }\n\n    public function hookActionCustomerGridQueryBuilderModifier(array $params)\n    {\n        // Add ape to the search\n        $searchQueryBuilder = $params['search_query_builder'];\n        $searchQueryBuilder->addSelect('c.ape as ape');\n        $searchCriteria = $params['search_criteria'];\n\n        # Adding the filter to the query\n        foreach ($searchCriteria->getFilters() as $filterName => $filterValue) {\n            if ('ape' === $filterName) {\n                $searchQueryBuilder->andWhere('c.ape = :ape');\n                $searchQueryBuilder->setParameter('ape', $filterValue);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form Field with Smarty\nDESCRIPTION: Uses the `{form_field}` Smarty function to render a single form field consistently. It expects a `$field` variable containing the field's definition as an array. The actual markup is defined in `_partials/form-fields.tpl`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n  {form_field field=$field}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Data in PrestaShop\nDESCRIPTION: Shows how to retrieve a value from the Cookie component in PrestaShop using a key.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cookie = $this->context->cookie;\n$myCookieValue = $cookie->mycookie;\n```\n\n----------------------------------------\n\nTITLE: Adding Translatable Form Field Using TranslateType in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to add a translatable field to a Symfony form within the PrestaShop framework using the TranslateType form class. It specifies various options such as the field type (FormType\\TextType), available locales, display preferences (e.g., tabs visibility), and translation labels using the translator service. Dependencies include PrestaShop's TranslateType, FormType\\TextType, and a translator with an available $locales array. The expected input is a multidimensional field supporting all specified locales; output is a form element rendering language tabs for entry. Tabs can be hidden, and the field can be marked as optional or required.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/translate-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('custom_value', TranslateType::class, [\n    'type' => FormType\\TextType::class,\n    'options' => [],\n    'locales' => $this->locales,\n    'hideTabs' => true,\n    'required' => false,\n    'label' => $this->translator->trans('OR Customized value', [], 'Admin.Catalog.Feature'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Data Handling in PHP\nDESCRIPTION: This PHP code defines the `DemoConfigurationTextDataConfiguration` class, responsible for interacting with PrestaShop's configuration system. It implements `DataConfigurationInterface`, providing methods to retrieve (`getConfiguration`) and update (`updateConfiguration`) configuration values. It maps the form field `config_text` to the database key `DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE` and includes basic validation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoSymfonyFormSimple\\Form;\n\nuse PrestaShop\\PrestaShop\\Core\\Configuration\\DataConfigurationInterface;\nuse PrestaShop\\PrestaShop\\Core\\ConfigurationInterface;\n\n/**\n * Configuration is used to save data to configuration table and retrieve from it.\n */\nfinal class DemoConfigurationTextDataConfiguration implements DataConfigurationInterface\n{\n    public const DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE = 'DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE';\n    public const CONFIG_MAXLENGTH = 32;\n\n    /**\n     * @var ConfigurationInterface\n     */\n    private $configuration;\n\n    public function __construct(ConfigurationInterface $configuration)\n    {\n        $this->configuration = $configuration;\n    }\n\n    public function getConfiguration(): array\n    {\n        $return = [];\n\n        $return['config_text'] = $this->configuration->get(static::DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE);\n\n        return $return;\n    }\n\n    public function updateConfiguration(array $configuration): array\n    {\n        $errors = [];\n\n        if ($this->validateConfiguration($configuration)) {\n            if (strlen($configuration['config_text']) <= static::CONFIG_MAXLENGTH) {\n                $this->configuration->set(static::DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE, $configuration['config_text']);\n            } else {\n                $errors[] = 'DEMO_SYMFONY_FORM_SIMPLE_TEXT_TYPE value is too long';\n            }\n        }\n\n        /* Errors are returned here. */\n        return $errors;\n    }\n\n    /**\n     * Ensure the parameters passed are valid.\n     *\n     * @return bool Returns true if no exception are thrown\n     */\n    public function validateConfiguration(array $configuration): bool\n    {\n        return isset($configuration['config_text']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Custom Templates in PrestaShop PHP Controller\nDESCRIPTION: This snippet shows how to use Mail::send() with a custom email template path in a PrestaShop module. It demonstrates specifying the template location and includes additional parameters for attachments and SMTP mode.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/mail.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodulemycontrollerModuleFrontController extends ModuleFrontController\n{\n\n    public function initContent()\n    {\n        parent::initContent();\n        Mail::Send(\n            (int)(Configuration::get('PS_LANG_DEFAULT')), // defaut language id\n            'contact', // email template file to be use\n            ' Module Installation', // email subject\n            array(\n                '{email}' => Configuration::get('PS_SHOP_EMAIL'), // sender email address\n                '{message}' => 'Hello world' // email content\n            ),\n            Configuration::get('PS_SHOP_EMAIL'), // receiver email address\n            NULL, //receiver name\n            NULL, //from email address\n            NULL,  //from name\n            NULL, //file attachment\n            NULL, //mode smtp\n            _PS_MODULE_DIR_ . 'yourmodulename/mails' //custom template path\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Form Types Reference Table\nDESCRIPTION: Markdown table listing all available PrestaShop form types with their namespaces and descriptions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Form type name | Namespace | Description |\n| --- | --- | --- |\n| [`AccordionType`](accordion-type) | PrestaShopBundle\\Form\\Admin\\Type | This form type is used as a container of sub forms, each sub form will be rendered as a part of an accordion. |\n| [`AmountCurrencyType`](amount-currency) | PrestaShopBundle\\Form\\Admin\\Type | Amount with currency: combination of a `NumberType` input and a `ChoiceType` input (for currency selection). |\n```\n\n----------------------------------------\n\nTITLE: Saving Store-Specific Images in PrestaShop Module\nDESCRIPTION: Example showing how to save uploaded images with store-specific naming conventions in a PrestaShop module. Handles different store contexts (store or store group) and saves images with appropriate suffixes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/multistore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nConfiguration::updateValue(\n    'BLOCKADVERT_IMG_EXT',\n    substr($_FILES['adv_img']['name'], strrpos($_FILES['adv_img']['name'], '.') + 1)\n);\n                 \n$this->adv_imgname = 'advertising';\n\nif (Shop::getContext() == Shop::CONTEXT_GROUP) {\n    $this->adv_imgname = 'advertising' . '-g' . (int)$this->context->shop->getContextShopGroupID();\n}\nelseif (Shop::getContext() == Shop::CONTEXT_SHOP) {\n    $this->adv_imgname = 'advertising' . '-s' . (int)$this->context->shop->getContextShopID();\n}\n\nif (!move_uploaded_file(\n    $_FILES['adv_img']['tmp_name'],\n    _PS_MODULE_DIR_.$this->name.'/' . $this->adv_imgname . '.' . Configuration::get('BLOCKADVERT_IMG_EXT'))\n) {\n    $errors .= $this->l('File upload error.');\n}\n```\n\n----------------------------------------\n\nTITLE: Translating in Smarty Templates\nDESCRIPTION: Shows how to use the 'l' macro for translations in Smarty template files. Includes examples of basic translation and using placeholders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>{l s='This product is no longer available.' d='Shop.Notifications.Error'}</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>{l s='List of products by supplier %s' sprintf=[$supplier.name] d='Shop.Theme.Catalog'}</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>{l s='There are %products_count% items in your cart.' sprintf=['%products_count%' => $cart.products_count] d='Shop.Theme.Checkout'}</div>\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductUpdate Hook in PrestaShop Core\nDESCRIPTION: This code demonstrates how the actionProductUpdate hook is called in the core PrestaShop system after a product has been updated. It passes the product ID and the product object as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductUpdate', ['id_product' => (int) $product->id, 'product' => $product])\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in a PrestaShop Module Front Controller using PHP\nDESCRIPTION: In this PHP snippet, the front controller of a PrestaShop module accesses and uses the translator via $this->module->getTranslator()->trans(). The code demonstrates how to provide a translation domain for frontend contexts. Prerequisites are a module controller class extending ModuleFrontController and a module instance attached. Inputs include wording strings, optional parameters, and the translation domain; outputs are translated titles for page use. The translation function must be available from the module instance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// file: controllers/front/something.php\\n\\nclass MyModuleSomethingModuleFrontController extends ModuleFrontController\\n{\\n    public function initContent()\\n    {\\n        $this->title = $this->module->getTranslator()->trans('My module title', [], 'Modules.Mymodule.Something');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Number with `formatNumber()` in PHP\nDESCRIPTION: Demonstrates using the `formatNumber()` method from the current Locale object within the PrestaShop Context. It formats a floating-point number (1234.56) according to the 'en-US' locale's number specification, returning a string representation. Depends on the PrestaShop `Context` being initialized.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/locale.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$number = 1234.56;\\n\\nvar_dump(Context::getContext()->getCurrentLocale()->formatNumber($number));\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Actions in PrestaShop PHP\nDESCRIPTION: Demonstrates how to add Grid actions to the Customer grid in PrestaShop. It shows the use of GridActionCollection and various action types like LinkGridAction and SimpleGridAction.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-grid-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php // src/Core/Grid/Definition/Factory/CustomerGridDefinitionFactory.php\n\nfinal class CustomerGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    // ...\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getGridActions()\n    {\n        return (new GridActionCollection())\n            ->add(\n                (new LinkGridAction('import'))\n                ->setName($this->trans('Import', [], 'Admin.Actions'))\n                ->setIcon('cloud_upload')\n                ->setOptions([\n                    'route' => 'admin_import',\n                    'route_params' => [\n                        'import_type' => 'customers',\n                    ],\n                ])\n            )\n            ->add(\n                (new LinkGridAction('export'))\n                ->setName($this->trans('Export', [], 'Admin.Actions'))\n                ->setIcon('cloud_download')\n                ->setOptions([\n                    'route' => 'admin_customers_export',\n                ])\n            )\n            ->add(\n                (new SimpleGridAction('common_refresh_list'))\n                ->setName($this->trans('Refresh list', [], 'Admin.Advparameters.Feature'))\n                ->setIcon('refresh')\n            )\n            ->add(\n                (new SimpleGridAction('common_show_query'))\n                ->setName($this->trans('Show SQL query', [], 'Admin.Actions'))\n                ->setIcon('code')\n            )\n            ->add(\n                (new SimpleGridAction('common_export_sql_manager'))\n                ->setName($this->trans('Export to SQL Manager', [], 'Admin.Actions'))\n                ->setIcon('storage')\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddProductToCartCommand Constructor Parameters (PHP/Pseudo-code)\nDESCRIPTION: Lists the parameters required by the AddProductToCartCommand constructor, including their PHP types and default values. Parameters are `$cartId` (int), `$productId` (int), `$quantity` (int), optional `$combinationId` (?int, default NULL), and optional `$customizationsByFieldIds` (array, default empty array).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-product-to-cart-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<ul> <li>`$int $cartId`</li>  <li>`$int $productId`</li>  <li>`$int $quantity`</li>  <li>`$?int $combinationId = NULL`</li>  <li>`$array $customizationsByFieldIds = array (\\n)`</li> </ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Fields with FormField Class in PHP\nDESCRIPTION: The PHP code snippet demonstrates how to utilize the FormField class in PrestaShop 1.7 to configure various form fields. Each field type is represented by methods such as setName, setType, setRequired, setLabel, and more, allowing developers to specify the field's characteristics. Dependencies include the FormField class and PrestaShop's translation mechanism. Inputs are form field configurations, and the output is a PHP array of configured fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/forms/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // Standard text field\n    (new FormField)\n        ->setName('first_name')\n        ->setType('text')\n        ->setRequired(true)\n        ->setValue(\"John\")\n        ->setMaxLength(\"128\")\n        ->setLabel($this->trans('Your first name')),\n        \n    // File field\n    (new FormField)\n        ->setName('file_upload')\n        ->setType('file')\n        ->setLabel($this->l('Upload a document')),\n        \n    // Select field\n    (new FormField)\n        ->setName('select_field')\n        ->setType('select')\n        ->setAvailableValues(['key' => 'value 1', 'key2' => 'value2'])\n        ->setLabel($this->l('Select type')),\n        \n    // Country select field (like select but add a 'js js-country' class)\n    (new FormField)\n        ->setName('country_field')\n        ->setType('countrySelect')\n        ->setAvailableValues(['key' => 'value 1', 'key2' => 'value2'])\n        ->setLabel($this->l('Country select')),\n        \n    // Checkbox field\n    (new FormField)\n        ->setName('checkbox_field')\n        ->setType('checkbox')\n        ->setValue(1)\n        ->setLabel($this->l('Checkbox type')),\n        \n    // Radio buttons field\n    (new FormField)\n        ->setName('radio_field')\n        ->setType('radio-buttons')\n        ->setAvailableValues(['key' => 'value 1', 'key2' => 'value2'])\n        ->setLabel($this->l('Radio buttons type')),\n        \n    // Date field\n    (new FormField)\n        ->setName('date_field')\n        ->setType('date')\n        ->setLabel($this->l('Date')),\n        \n    // Birthday field\n    (new FormField)\n        ->setName('birthday_field')\n        ->setType('birthday')\n        ->setLabel($this->l('Birthday')),\n        \n    // Password field\n    (new FormField)\n        ->setName('password_field')\n        ->setType('password')\n        ->setLabel($this->l('Password')),\n        \n    // Email field\n    (new FormField)\n        ->setName('email_field')\n        ->setType('email')\n        ->setLabel($this->l('Email type')),\n        \n    // Phone field\n    (new FormField)\n        ->setName('phone_field')\n        ->setType('phone')\n        ->setLabel($this->l('Phone type')),\n        \n    // Hidden field\n    (new FormField)\n        ->setName('hidden_field')\n        ->setType('hidden')\n        ->setValue('My hidden value')\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Module Environment Compatibility - PrestaShop Versioning (PHP)\nDESCRIPTION: This snippet configures module compatibility and behavior by setting need_instance, supported PrestaShop version range, and Bootstrap template usage. Proper setting ensures the module is loaded when needed, prevents incompatibility with unsupported versions, and signals the use of Bootstrap in templating.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->need_instance = 0;\\n$this->ps_versions_compliancy = [\\n    'min' => '1.7.0.0',\\n    'max' => '8.99.99'\\n];\\n$this->bootstrap = true;\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Filterable Grid Definition (PHP)\nDESCRIPTION: This snippet demonstrates how to create a filterable grid definition by extending AbstractFilterableGridDefinitionFactory. This approach simplifies the implementation by allowing the use of the common search controller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class AddressGridDefinitionFactory extends AbstractFilterableGridDefinitionFactory\n{\n    const GRID_ID = 'address';\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getId()\n    {\n        return self::GRID_ID;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Registered Services from the Module File and Hooks - PHP\nDESCRIPTION: Illustrates calls to custom services from within a PrestaShop module class, distinguishing between usages in admin or front controller contexts (getContent vs. hooks). The appropriate service (admin/front) is chosen based on the execution environment, requiring correct configuration in config/admin/services.yml or config/front/services.yml. This pattern ensures modular interaction with services based on runtime context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/yourmodule.php\nclass yourmodule {\n    public function getContent()\n    {\n        ...\n        // The controller here is the ADMIN one so only admin services are accessible\n        $yourService = $this->get('your_company.your_module.admin.your_service');\n        ...\n    }\n\n    public function hookDisplayFooterProduct($params)\n    {\n        ...\n        // The controller here is the FRONT one so only front services are accessible\n        $yourService = $this->get('your_company.your_module.front.your_service');\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Controller or Module (PHP)\nDESCRIPTION: Demonstrates how to access the Context object from within a Controller or Module subclass in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/context.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->context\n```\n\n----------------------------------------\n\nTITLE: Declaring SetProductShopsCommand with Handler Reference in PrestaShop PHP\nDESCRIPTION: This command class represents an operation to set shop associations for a specific product within PrestaShop. It requires three constructor parameters: an integer product ID, an integer source shop ID, and an array of shop IDs, all strictly typed. The command is handled by the SetProductShopsHandler class, which implements the SetProductShopsHandlerInterface. The command returns void, indicating it performs actions without returning data; prerequisites include PrestaShop core domain knowledge and adherence to the command pattern. Inputs: productId, sourceShopId, shopIds. Output: None (void).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-shops-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Shop\\Command\\SetProductShopsCommand`\n```\n\n----------------------------------------\n\nTITLE: Using Service in Controller\nDESCRIPTION: Example of using the custom service in a PrestaShop admin controller to render a template with translated message.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/src/Controller/DemoController.php\nnamespace YourCompany\\YourModule\\Controller;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\n\nclass DemoController extends FrameworkBundleAdminController\n{\n    public function demoAction()\n    {\n        $yourService = $this->get('your_company.your_module.your_service');\n\n        return $this->render('@Modules/yourmodule/templates/admin/demo.html.twig', [\n            'customMessage' => $yourService->getTranslatedCustomMessage(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Admin Order Action Buttons in PrestaShop via PHP Hook\nDESCRIPTION: This PHP snippet demonstrates how to implement the hookActionGetAdminOrderButtons hook in a PrestaShop module class to add new action buttons to the admin order page's buttons bar. It requires PrestaShop core classes, specifically ActionsBarButton and ActionsBarButtonsCollection, and uses Symfony's router service for generating URLs to specific controller actions. The snippet expects an array of parameters, including the order ID and an ActionsBarButtonsCollection; it creates and adds four distinct buttons, each with customized labels and destinations. Proper route generation and dependency management are essential prerequisites, and usage of PHP namespaces is advised for better code maintenance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/additional-action-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * Add buttons to main buttons bar\n     */\n    public function hookActionGetAdminOrderButtons(array $params)\n    {\n        $order = new Order($params['id_order']);\n\n        /** @var \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router */\n        $router = $this->get('router');\n\n        /** @var \\PrestaShop\\PrestaShop\\Core\\Action\\ActionsBarButtonsCollection $bar */\n        $bar = $params['actions_bar_buttons_collection'];\n\n        $viewCustomerUrl = $router->generate('admin_customers_view', ['customerId'=> (int)$order->id_customer]);\n        $bar->add(\n            new \\PrestaShop\\PrestaShop\\Core\\Action\\ActionsBarButton(\n                'btn-secondary', ['href' => $viewCustomerUrl], 'View customer'\n            )\n        );\n        $bar->add(\n            new \\PrestaShop\\PrestaShop\\Core\\Action\\ActionsBarButton(\n                'btn-info', ['href' => 'https://www.prestashop-project.org/'], 'Go to prestashop'\n            )\n        );\n        $bar->add(\n            new \\PrestaShop\\PrestaShop\\Core\\Action\\ActionsBarButton(\n                'btn-dark', ['href' => 'https://github.com/PrestaShop/example-modules/tree/8.x/demovieworderhooks'], 'Go to GitHub'\n            )\n        );\n        $createAnOrderUrl = $router->generate('admin_orders_create');\n        $bar->add(\n            new \\PrestaShop\\PrestaShop\\Core\\Action\\ActionsBarButton(\n                'btn-link', ['href' => $createAnOrderUrl], 'Create an order'\n            )\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Symfony Controller Data Transfer to Vue.js\nDESCRIPTION: Shows how to pass data from a Symfony controller to Vue.js through a Twig template in PrestaShop's admin interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Module\\YourModule\\Controller\\Admin;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\n\nclass YourControllerNameController extends FrameworkBundleAdminController\n{\n    public function demoAction()\n    {\n        return $this->render('@Modules/yourmodule/views/templates/admin/demo.html.twig', [\n            'yourModule' => [\n                'keyA' => 'valueA',\n                'keyB' => 'valueB',\n            ]\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Back-office Controller URIs (PrestaShop - PHP)\nDESCRIPTION: This PHP function shows how to generate a full URI for a module admin controller's route using the Symfony router from within the main module class. It retrieves the router service from the SymfonyContainer, then calls generate with the specific route name. This is necessary as secure URIs are required for back-office controllers, including token handling. The method must be called with the correct route name as registered in the routing file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    <?php\\n    # modules/my-module/my-module.php\\n\\n    use PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\\n\\n    class MyModule extends Module\\n    {\\n        protected function generateControllerURI()\\n        {\\n               $router = SymfonyContainer::getInstance()->get('router');\\n\\n               return $router->generate('my_route_name');\\n        }\\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Filters in ManufacturerGridDefinitionFactory (PHP)\nDESCRIPTION: This snippet shows how to add filters to a grid definition by extending AbstractGridDefinitionFactory and implementing the getFilters method. It demonstrates adding various filter types like TextType and YesAndNoChoiceType.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class ManufacturerGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    const GRID_ID = 'manufacturer';\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getId()\n    {\n        return self::GRID_ID;\n    }\n\n    ...\n    /**\n    * {@inheritdoc}\n    */\n    protected function getFilters()\n    {\n        return (new FilterCollection())\n            ->add((new Filter('id_manufacturer', TextType::class))\n                ->setTypeOptions([\n                    'required' => false,\n                    'attr' => [\n                        'placeholder' => $this->trans('Search ID', [], 'Admin.Actions'),\n                    ],\n                ])\n                ->setAssociatedColumn('id_manufacturer')\n            )\n            ->add((new Filter('name', TextType::class))\n                ->setTypeOptions([\n                    'required' => false,\n                    'attr' => [\n                        'placeholder' => $this->trans('Search name', [], 'Admin.Actions'),\n                    ],\n                ])\n                ->setAssociatedColumn('name')\n            )\n            ->add((new Filter('active', YesAndNoChoiceType::class))\n                ->setAssociatedColumn('active')\n            )\n            ->add((new Filter('actions', SearchAndResetType::class))\n                ->setAssociatedColumn('actions')\n                ->setTypeOptions([\n                    'reset_route' => 'admin_common_reset_search_by_filter_id',\n                    'reset_route_params' => [\n                        'filterId' => self::GRID_ID,\n                    ],\n                    'redirect_route' => 'admin_manufacturers_index',\n                ])\n            )\n        ;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an ElementInterface for Service Tagging - PHP\nDESCRIPTION: Defines the ElementInterface to enable interface-based tagging and autowiring in Symfony service configuration. This is a key abstraction used in PrestaShop module service YAML files to automatically tag and inject service classes based on their interface. No dependencies are required beyond standard PHP and correct project structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace TestModule\\InstanceofConditionals\\Collection;\n\ninterface ElementInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Combination Command Class Path\nDESCRIPTION: Fully qualified namespace path for the UpdateCombinationFromListingCommand class used for updating product combinations from listing interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-from-listing-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationFromListingCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Data Factory and Query Builder in YAML\nDESCRIPTION: This YAML configuration registers the ProductQueryBuilder service and configures the DoctrineGridDataFactory to use it for the product grid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# Register ProductQueryBuilder\nprestashop.core.grid.query.product_query_builder:\n    class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Query\\ProductQueryBuilder'\n    parent: 'prestashop.core.grid.abstract_query_builder'\n    arguments:\n        - \"@=service('prestashop.adapter.legacy.context').getContext().language.id\"\n        - \"@=service('prestashop.adapter.legacy.context').getContext().shop.id\"\n    public: true\n    \n# Configure our Grid Data factory to use the query builder that we registered above\nprestashop.core.grid.data.factory.product_data_factory:\n    class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\DoctrineGridDataFactory'\n    arguments:\n        - '@prestashop.core.grid.query.product_query_builder' # service id of our query builder\n        - '@prestashop.core.hook.dispatcher' # every doctrine query builder needs the hook dispatcher\n        - '@prestashop.core.grid.query.doctrine_query_parser' # parser to get the raw SQL query\n        - 'products' # this should match your grid id, in our case it's \"products\"\n```\n\n----------------------------------------\n\nTITLE: Using Injected Translator in Custom Service\nDESCRIPTION: Demonstrates how to use the injected Translator service within a custom service class to perform translations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// SomeService.php\n\n$this->translator->trans('This product is no longer available.', [], 'Shop.Notifications.Error');\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Connection in PrestaShop\nDESCRIPTION: Shows how to establish a database connection using the Db singleton class. Returns a database instance that can be reused across the application.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Db $db */\n$db = \\Db::getInstance();\n```\n\n----------------------------------------\n\nTITLE: Enabling New Translation System in PrestaShop Modules – PHP\nDESCRIPTION: Defines the isUsingNewTranslationSystem() method that modules implement to opt-in to PrestaShop's new translation interface. When this method returns true on the module class, PrestaShop treats the module as compatible with the advanced translation export and management tools. No external dependencies beyond PrestaShop; the method has no parameters and signals feature usage.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function isUsingNewTranslationSystem()\n{\n    return true;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating ProductFormModifier for Product Form Extension - PrestaShop (PHP)\nDESCRIPTION: Defines a ProductFormModifier class intended to extend the product form builder. The constructor receives the FormBuilderModifier dependency. The modify() method is currently a stub intended for implementing modifications to the product form for a given product ID. This class must be registered as a service and used via hookActionProductFormBuilderModifier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace DemoNewHooks\\Form\\Modifier;\n\nuse PrestaShopBundle\\Form\\FormBuilderModifier;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nfinal class ProductFormModifier\n{\n    /**\n     * @var FormBuilderModifier\n     */\n    private $formBuilderModifier;\n\n    /**\n     * @param FormBuilderModifier $formBuilderModifier\n     */\n    public function __construct(\n        FormBuilderModifier $formBuilderModifier\n    ) {\n        $this->formBuilderModifier = $formBuilderModifier;\n    }\n\n    /**\n     * @param int|null $productId\n     * @param FormBuilderInterface $productFormBuilder\n     */\n    public function modify(\n        int $productId,\n        FormBuilderInterface $productFormBuilder\n    ): void {\n        \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in PrestaShop JavaScript\nDESCRIPTION: Shows how to listen for a custom event emitted by the prestashop object and process the event data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/javascript-events/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof prestashop !== 'undefined') {\n  prestashop.on(\n    'myEventName',\n    function (event) {\n      var eventDatas = {};\n      if (event && event.reason) {\n        eventDatas = {\n          my_data_1: event.reason.myData1,\n          my_data_2: event.reason.myData2\n        };\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Filters in a PrestaShop Module using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to define filters for a PrestaShop Grid within a custom module. It extends AbstractGridDefinitionFactory and uses the getFilters method to return a FilterCollection. Filters for 'id_category', 'name', 'description' (using TextType), 'active' (using YesAndNoChoiceType), and 'actions' (using SearchAndResetType) are added, each associated with a specific column and configured with type options like placeholders, required status, and reset/redirect routes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/filter-types-reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// /modules/my-module/src/Grid/MyGridDefinitionFactory.php\nnamespace MyModule\\Grid;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\Filter;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\FilterCollection;\nuse PrestaShopBundle\\Form\\Admin\\Type\\SearchAndResetType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\YesAndNoChoiceType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n/**\n * How to define the Grid filters?\n * You can adapt this example or look at the existing ones\n * in PrestaShop Core.\n */\nclass MyGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n        /**\n         * {@inheritdoc}\n         */\n        protected function getFilters()\n        {\n            return (new FilterCollection())\n                ->add(\n                    (new Filter('id_category', TextType::class))\n                        ->setAssociatedColumn('id_category')\n                        ->setTypeOptions([\n                            'required' => false,\n                            'attr' => [\n                                'placeholder' => $this->trans('Search ID', [], 'Admin.Actions'),\n                            ],\n                        ])\n                )\n                ->add(\n                    (new Filter('name', TextType::class))\n                        ->setAssociatedColumn('name')\n                        ->setTypeOptions([\n                            'required' => false,\n                            'attr' => [\n                                'placeholder' => $this->trans('Search name', [], 'Admin.Actions'),\n                            ],\n                        ])\n                )\n                ->add(\n                    (new Filter('description', TextType::class))\n                        ->setAssociatedColumn('description')\n                        ->setTypeOptions([\n                            'required' => false,\n                            'attr' => [\n                                'placeholder' => $this->trans('Search description', [], 'Admin.Actions'),\n                            ],\n                        ])\n                )\n                ->add(\n                    (new Filter('active', YesAndNoChoiceType::class))\n                        ->setAssociatedColumn('active')\n                )\n                ->add(\n                    (new Filter('actions', SearchAndResetType::class))\n                        ->setAssociatedColumn('actions')\n                        ->setTypeOptions([\n                            'reset_route' => 'admin_common_reset_search_by_filter_id',\n                            'reset_route_params' => [\n                                'filterId' => self::GRID_ID,\n                            ],\n                            'redirect_route' => 'admin_monitorings_index',\n                        ])\n                );\n        }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class Strings from an Array with Smarty\nDESCRIPTION: Shows how to use the `classnames` Smarty modifier. It takes an array (like the `$body_classes` example) where keys are class names and values are booleans. It outputs a space-separated string containing only the class names whose corresponding value is true. Each class name is also processed by the `classname` modifier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_14\n\nLANGUAGE: smarty\nCODE:\n```\n  <body class=\"{$page.body_classes|classnames}\">\n```\n\n----------------------------------------\n\nTITLE: Defining the Query Handler Interface - PrestaShop PHP\nDESCRIPTION: This PHP interface defines the contract to be fulfilled by any handler processing GetCustomerForViewing queries in PrestaShop. Implementers must provide logic to retrieve and return ViewableCustomer objects, ensuring type safety and consistency. This pattern enforces separation of concerns and eases the testing and substitution of handlers during PrestaShop's domain operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-viewing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler\\GetCustomerForViewingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing a PrestaShop Front Controller for Cron Tasks (PHP)\nDESCRIPTION: Provides a template for using a ModuleFrontController as a cron job handler, especially useful for older PrestaShop versions or as an alternative to Symfony commands. The controller disables authentication (`$auth = false`), overrides the `display` method to set `$ajax = 1` (preventing template rendering), checks if the execution context is CLI using `Tools::isPHPCLI()`, and outputs results using `$this->ajaxRender()`. It resides in `modules/examplemodule/controllers/front/cron.php`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ExampleModuleCronModuleFrontController extends ModuleFrontController\n{\n    /** @var bool If set to true, will be redirected to authentication page */\n    public $auth = false;\n\n    /** @var bool */\n    public $ajax;\n\n    public function display()\n    {\n        $this->ajax = 1;\n\n        if (!Tools::isPHPCLI()) {\n            $this->ajaxRender('Forbidden call.');\n        }\n\n        // Additional token checks\n\n        // ...\n\n        $this->ajaxRender(\"hello\\n\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Registered Services in Legacy Controllers - PHP\nDESCRIPTION: Demonstrates how to access custom-registered services from a legacy front office controller by using $this->get(). The service must be registered in config/front/services.yml and follows the naming conventions your_company.your_module.front.your_service. This pattern is essential for bridging modern service definitions with legacy PrestaShop controller classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/controllers/front/Demo.php\nclass YourModuleDemoModuleFrontController extends ModuleFrontController {\n    public function display()\n    {\n        ...\n        $yourService = $this->get('your_company.your_module.front.your_service');\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony Controller with AdminSecurity Annotation\nDESCRIPTION: Example of a Symfony controller implementation for PrestaShop with security annotations and routing configuration. Shows how to implement controller actions with proper security checks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// yourmodule/src/Controller/Admin/Improve/Design\n\nnamespace PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design;\n\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\n// (...)\n\n/**\n * Class LinkBlockController.\n *\n * @ModuleActivated(moduleName=\"ps_linklist\", redirectRoute=\"admin_module_manage\")\n */\nclass LinkBlockController extends FrameworkBundleAdminController\n{\n    /**\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function listAction(Request $request)\n    {\n        // (...)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Module's Admin Controller in PrestaShop\nDESCRIPTION: Example of overriding a module's admin controller by extending it and adding the 'Override' suffix. This shows how to modify or add methods to a module's controller without changing the original module files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/overrides.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AdminBlockListingControllerOverride extends AdminBlockListingController\n{\n\tpublic function displayAjaxSaveColor()\n\t{\n\t\t//This is just an example\n                $color1 = \"red\";\n        \t$color2 = Tools::getValue('color2');\n        \t$result = false;\n\n        \tif (!empty($color1) && !empty($color2)) {\n           \t $result = Configuration::updateValue('PSR_ICON_COLOR', $color1)\n                \t&& Configuration::updateValue('PSR_TEXT_COLOR', $color2);\n        \t}\n\n        \t// Response\n        \t$this->ajaxRenderJson($result ? 'success' : 'error');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Input Field in HTML for PrestaShop\nDESCRIPTION: This simple HTML snippet shows how to create an input text field with a specific ID and name attribute within a PrestaShop product form. No additional dependencies are required.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/forms/admin-forms.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"form_step6_myfield\" name=\"whatever\" />\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer Resource via PrestaShop Webservice in PHP\nDESCRIPTION: This snippet shows how to update an existing customer resource using the PrestaShop webservice. It modifies the firstname and lastname fields of the retrieved customer XML, then uses the edit() method to submit the changes back to the API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/update-resource.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$customerFields = $xml->customer->children();\n$customerFields->firstname = 'John';\n$customerFields->lastname = 'DOE';\n\n$updatedXml = $webService->edit([\n    'resource' => 'customers',\n    'id' => (int) $customerFields->id,\n    'putXml' => $xml->asXML(),\n]);\n$customerFields = $updatedXml->customer->children();\necho 'Customer updated with ID ' . $customerFields->id . PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring ColorColumn (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to create an instance of the `ColorColumn` type for a PrestaShop Grid. It initializes the column with the ID 'color', sets its name, and configures the required options: `field` (the data field to display) and `color_field` (the field containing the hex color value). Finally, it adds the configured column to a `ColumnCollection`. Requires the `ColorColumn` and `ColumnCollection` classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/color.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\ColorColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$colorColumn = new ColorColumn('color');\n$colorColumn->setName('color');\n$colorColumn->setOptions([\n     'field' => 'color',\n     'color_field' => 'color'\n]);\n\n$columns = new ColumnCollection();\n$columns->add($colorColumn);\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Mail::send() in PrestaShop PHP Controller\nDESCRIPTION: This snippet demonstrates how to use the Mail::send() method in a PrestaShop module's front controller to send an email. It includes setting the language, template, subject, content, and recipient details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/mail.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodulemycontrollerModuleFrontController extends ModuleFrontController\n{\n\n    public function initContent()\n    {\n        parent::initContent();\n        Mail::Send(\n            (int)(Configuration::get('PS_LANG_DEFAULT')), // defaut language id\n            'contact', // email template file to be use\n            ' Module Installation', // email subject\n            array(\n                '{email}' => Configuration::get('PS_SHOP_EMAIL'), // sender email address\n                '{message}' => 'Hello world' // email content\n            ),\n            Configuration::get('PS_SHOP_EMAIL'), // receiver email address\n            NULL, //receiver name\n            NULL, //from email address\n            NULL  //from name\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Implementing Hook in PHP Module\nDESCRIPTION: Demonstrates how to create, register, and execute a custom hook within a PHP module, including method implementation and hook registration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/hooks/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create the function for the MyCustomHook hook public function\nMyCustomHook($params) { // method body }\n\n// Register the MyCustomHook hook\nHook::register('MyCustomHook');\n\n// Call it from PHP\nHook::exec('MyCustomHook');\n```\n\n----------------------------------------\n\nTITLE: Service Decoration Example\nDESCRIPTION: Example of service decoration pattern implementation showing how to modify existing service behavior while maintaining access to the original service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/src/YourService.php\nnamespace YourCompany\\YourModule;\n\nclass YourService {\n\n    private $decoratedService;\n\n    /**\n     * @param DecoratedService $decoratedService\n     */\n    public function __construct($decoratedService)\n    {\n        $this->decoratedService = $decoratedService;\n    }\n\n    /**\n     * We want to modify the behavior of the function getTranslatedCustomMessage\n     * without replacing the whole DecoratedService implementation\n     *\n     * @return string\n     */\n    public function getTranslatedCustomMessage() {\n\n        $unmodifiedOutput = $this->decoratedService->getTranslatedCustomMessage();\n\n        $modifiedOutput = $this->modifyTheOutput($unmodifiedOutput);\n\n        return $modifiedOutput;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Grid Action in PrestaShop PHP\nDESCRIPTION: Demonstrates how to create a custom Grid action type in PrestaShop. It extends AbstractGridAction and configures options using OptionsResolver.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-grid-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/mymodule/src/Grid/Action/Type/\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\AbstractGridAction;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n/**\n * It extends AbstractGridAction,\n * but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\GridActionInterface \n * if for some reason you want to avoid using the abstract class\n */ \nfinal class MySpecificAction extends AbstractGridAction\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function getType()\n    {\n        return 'my_specific';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function configureOptions(OptionsResolver $resolver)\n    {\n        /**\n         * options passed to the resolver will be available in the Grid action\n         * and also in the template responsible of rendering the action.\n         */\n        $resolver\n            ->setRequired([\n                'route',\n            ])\n            ->setDefaults([\n                'route_params' => [],\n            ])\n            ->setAllowedTypes('route', 'string')\n            ->setAllowedTypes('route_params', 'array');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters and Manually Tagging Services - YAML\nDESCRIPTION: Shows how to bind constructor arguments by a manual service tag and explicitly tag a service in Symfony YAML configuration. The _defaults section applies autowiring and binds the $elements parameter to all services tagged test_module.instance_of.manually_tagged. The Element class is registered and manually tagged for injection. This method is useful when only specific classes should be injected for a parameter. Requires Symfony and correct module structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    autowire: true\n    bind:\n      $elements: !tagged test_module.instance_of.manually_tagged\n\n  TestModule\\InstanceofConditionals\\Collection\\Element:\n    class: TestModule\\InstanceofConditionals\\Collection\\Element\n    tags: [ test_module.instance_of.manually_tagged ]\n```\n\n----------------------------------------\n\nTITLE: Enforcing SSL (HTTPS) for a PrestaShop Front Controller (PHP)\nDESCRIPTION: Explains how to ensure that a specific front controller is always accessed over HTTPS, provided SSL is enabled for the shop. Setting the public property `$ssl` to `true` within the controller class definition triggers an automatic redirect to the HTTPS version of the URL if accessed via HTTP.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic $ssl = true;\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Customer Form with Symfony Form Builder in PHP\nDESCRIPTION: Adds a new SwitchType form field to the customer form in PrestaShop, allowing customer reviews. Requires Symfony FormBuilderInterface and PrestaShopBundle Form components. It updates form data with the 'is_allowed_for_review' field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// modules/ps_democqrshooksusage/ps_democqrshooksusage.php\n\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse PrestaShopBundle\\Form\\Admin\\Type\\SwitchType;\n\nclass Ps_DemoCQRSHooksUsage extends Module\n{\n    \n    // ...\n\n    public function hookActionCustomerFormBuilderModifier(array $params)\n    {\n        /** @var FormBuilderInterface $formBuilder */\n        $formBuilder = $params['form_builder'];\n        $formBuilder->add('is_allowed_for_review', SwitchType::class, [\n            'label' => $this->getTranslator()->trans('Allow reviews', [], 'Modules.Ps_DemoCQRSHooksUsage'),\n            'required' => false,\n        ]);\n\n        $customerId = $params['id'];\n\n        $params['data']['is_allowed_for_review'] = $this->getIsAllowedForReview($customerId);\n\n        $formBuilder->setData($params['data']);\n    }\n\n    private function getIsAllowedForReview($customerId)\n    {\n        // implement your data retrieval logic here\n\n        return true;\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom field to SEO tab (8.1.0+)\nDESCRIPTION: Example of adding a custom field to the SEO tab in PrestaShop 8.1.0 and later versions using the actionProductFormBuilderModifier hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nuse DemoNewHooks\\Form\\Modifier\\ProductFormModifier;\n\nclass DemoNewHooks extends Module\n{\n    public function __construct()\n    {\n        // [...]\n    }\n\n    /**\n     * @return bool\n     */\n    public function install()\n    {\n        return parent::install() && $this->registerHook(['actionProductFormBuilderModifier']);\n    }\n    \n    /**\n     * Modify product form builder\n     *\n     * @param array $params\n     */\n    public function hookActionProductFormBuilderModifier(array $params): void\n    {\n        /** @var ProductFormModifier $productFormModifier */\n        $productFormModifier = $this->get(ProductFormModifier::class);\n        $productId = (int) $params['id'];\n\n        $productFormModifier->modify($productId, $params['form_builder']);\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    DemoNewHooks\\Form\\Modifier\\ProductFormModifier:\n        autowire: true\n        public: true\n        arguments:\n            $formBuilderModifier: '@form.form_builder_modifier'\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace DemoNewHooks\\Form\\Modifier;\n\nuse PrestaShopBundle\\Form\\FormBuilderModifier;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nfinal class ProductFormModifier\n{\n    /**\n     * @var FormBuilderModifier\n     */\n    private $formBuilderModifier;\n\n    /**\n     * @param FormBuilderModifier $formBuilderModifier\n     */\n    public function __construct(\n        FormBuilderModifier $formBuilderModifier\n    ) {\n        $this->formBuilderModifier = $formBuilderModifier;\n    }\n\n    /**\n     * @param int|null $productId\n     * @param FormBuilderInterface $productFormBuilder\n     */\n    public function modify(\n        int $productId,\n        FormBuilderInterface $productFormBuilder\n    ): void {\n     \n        $seoTabFormBuilder = $productFormBuilder->get('seo');\n        $this->formBuilderModifier->addAfter(\n            $seoTabFormBuilder, // the tab\n            'tags', // the input/form from which to insert after/before\n            'demo_module_custom_field', // your field name\n            TextType::class, // your field type\n            [\n                'label' => 'SEO Special Field', // you can remove the label if you dont need it by passing 'label' => false\n                'label_attr' => [ // customize label with any HTML attribute\n                    'title' => 'h2',\n                    'class' => 'text-info',\n                ],\n                'attr' => [\n                    'placeholder' => 'SEO Special field',\n                ],\n                // this is just an example, but in real case scenario, you could have some data provider class to handle more complex cases\n                'data' => \"\",\n                'empty_data' => '',\n                'form_theme' => '@PrestaShop/Admin/TwigTemplateForm/prestashop_ui_kit_base.html.twig',\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameters for UpdateCombinationSuppliersCommand in PHP\nDESCRIPTION: Lists the constructor parameters for the `UpdateCombinationSuppliersCommand`. It requires an integer `$combinationId` identifying the product combination and an array `$combinationSuppliers` containing the supplier details to be associated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-suppliers-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $combinationId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$array $combinationSuppliers`\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in PrestaShop PHP Configuration\nDESCRIPTION: This snippet shows how to enable debug mode in PrestaShop by modifying the _PS_MODE_DEV_ constant in the defines.inc.php file. Enabling debug mode allows developers to see server error messages and debugging code.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/configuration/configuring-prestashop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine('_PS_MODE_DEV_', true);\n```\n\n----------------------------------------\n\nTITLE: Custom Grid Action Template in PrestaShop Twig\nDESCRIPTION: Shows the Twig template for rendering a custom Grid action in PrestaShop. It creates a link with an optional icon and the action name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-grid-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Grid/my_specific.html.twig #}\n\n<a id=\"{{ '%s_grid_action_%s'|format(grid.id, action.id) }}\" href=\"{{ path(action.options.route, action.options.route_params) }}\" class=\"dropdown-item\">\n  {% if action.icon is not empty %}\n    <i class=\"material-icons\">{{ action.icon }}</i>\n  {% endif %}\n  {{ action.name }}\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Supplier in PrestaShop using XML\nDESCRIPTION: This snippet shows how to create a Supplier by sending a POST request to the PrestaShop Webservices. It includes the minimum required field 'name' for the Supplier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <supplier>\n        <name>ACMESupplier</name>\n    </supplier>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Overriding a Module's Main Class in PrestaShop\nDESCRIPTION: Example of overriding a module's main class by extending it and adding the 'Override' suffix. This demonstrates how to modify the behavior of a module's hook implementation without modifying the original module files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/overrides.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass BlockUserInfoOverride extends BlockUserInfo\n{\n\tpublic function hookDisplayNav($params)\n\t{\n                 // This is only an example, please do not use HTML here :-)\n\t\treturn '<div class=\"header_user_info\"><a>Test</a></div>';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CommandHandler Interface in PrestaShop PHP\nDESCRIPTION: This snippet shows the required structure for a CommandHandler interface in PrestaShop's CQRS implementation. It mandates a single public method named `handle` that accepts a specific Command object (e.g., `NameOfTheCommand`) as its only argument. According to the CQRS principles outlined, this handler executes the command, should not return anything on success (except potentially when creating entities), and should throw a typed Exception on failure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/cqrs.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function handle(NameOfTheCommand $command);\n```\n\n----------------------------------------\n\nTITLE: Example PrestaShop 1.7 Module Directory Structure\nDESCRIPTION: Illustrates the typical folder and file layout for a PrestaShop 1.7 module named 'mymodule'. It shows the standard organization for configuration, controllers, overrides, source code (including Controllers and Entities), translations, upgrades, vendor libraries, views (CSS, images, JS, templates), the configuration cache file, module logo, and the main module PHP file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-file-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmymodule\n├── config\n│   ├── admin\n│   │    └── services.yml\n│   ├── front\n│   │   └── services.yml\n│   └── services.yml\n├── controllers\n├── override\n├── src\n│   ├── Controller\n│   └── Entity\n├── translations\n├── upgrade\n├── vendor\n├── views\n│   ├── css\n│   ├── img\n│   ├── js\n│   └── templates\n├── config.xml\n├── logo.png\n└── mymodule.php\n```\n\n----------------------------------------\n\nTITLE: Initiating Grid Drag-and-Drop Positions with PositionExtension - JavaScript\nDESCRIPTION: Shows how to attach the PositionExtension to PrestaShop grid components to enable drag-and-drop positioning of rows on the frontend. Imports the Grid and PositionExtension JavaScript modules and, on page load, initializes PositionExtension for each grid div with the 'js-grid' class. Requires jQuery and PrestaShop component modules to be loaded. Operates on all grids present in the document, enabling client-side manipulation for position updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/position.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Grid from '../../components/grid/grid';\\nimport PositionExtension from \"../../components/grid/extension/position-extension\";\\n\\nconst $ = window.$;\\n\\n$(() => {\\n  let gridDivs = document.querySelectorAll('.js-grid');\\n  gridDivs.forEach((gridDiv) => {\\n      const grid = new Grid(gridDiv.dataset.gridId);\\n      grid.addExtension(new PositionExtension());\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SearchAndResetType Filter to PrestaShop Grid in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a filter named 'actions' to a PrestaShop Grid using the `SearchAndResetType` FormType. It associates the filter with the 'actions' column and configures type options, including the routes for resetting the search ('reset_route') and redirecting after reset ('redirect_route'), along with necessary route parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/search-and-reset-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n->add(\n    (new Filter('actions', SearchAndResetType::class))\n        ->setAssociatedColumn('actions')\n        ->setTypeOptions([\n            'reset_route' => 'admin_common_reset_search_by_filter_id',\n            'reset_route_params' => [\n                'filterId' => self::GRID_ID,\n            ],\n            'redirect_route' => 'admin_addresses_index',\n        ])\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Returning a Basic CsvResponse in PHP\nDESCRIPTION: Demonstrates the basic creation of a CsvResponse object with headers and data, which returns a StreamedResponse.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($lines);\n```\n\n----------------------------------------\n\nTITLE: Extending Customer Grid Query Builder\nDESCRIPTION: Implementation of hookActionCustomerGridQueryBuilderModifier to modify the SQL query for fetching customer grid data with custom fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionCustomerGridQueryBuilderModifier(array $params)\n{\n    /** @var QueryBuilder $searchQueryBuilder */\n    $searchQueryBuilder = $params['search_query_builder'];\n\n    /** @var CustomerFilters $searchCriteria */\n    $searchCriteria = $params['search_criteria'];\n\n    $searchQueryBuilder->addSelect(\n        'IF(dcur.`is_allowed_for_review` IS NULL,0,dcur.`is_allowed_for_review`) AS `is_allowed_for_review`'\n    );\n\n    $searchQueryBuilder->leftJoin(\n        'c',\n        '`' . pSQL(_DB_PREFIX_) . 'democqrshooksusage_reviewer`',\n        'dcur',\n        'dcur.`id_customer` = c.`id_customer`'\n    );\n\n    if ('is_allowed_for_review' === $searchCriteria->getOrderBy()) {\n        $searchQueryBuilder->orderBy('dcur.`is_allowed_for_review`', $searchCriteria->getOrderWay());\n    }\n\n    foreach ($searchCriteria->getFilters() as $filterName => $filterValue) {\n        if ('is_allowed_for_review' === $filterName) {\n            $searchQueryBuilder->andWhere('dcur.`is_allowed_for_review` = :is_allowed_for_review');\n            $searchQueryBuilder->setParameter('is_allowed_for_review', $filterValue);\n\n            if (!$filterValue) {\n                $searchQueryBuilder->orWhere('dcur.`is_allowed_for_review` IS NULL');\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Viewable Customer Data - PrestaShop PHP\nDESCRIPTION: This PHP snippet describes the return type of the GetCustomerForViewing query, which is a ViewableCustomer object. It encapsulates all fields and properties required for displaying customer information in the Back Office. Consumers of this object should refer to the provided fields and methods for rendering customer detail pages. Correct object construction, including all dependencies and required fields, is essential for reliable operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-viewing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\ViewableCustomer\n```\n\n----------------------------------------\n\nTITLE: Executing actionCartSummary Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates invoking the 'actionCartSummary' hook using PrestaShop's Hook::exec method. It passes a $summary variable as a parameter, expects this hook to notify all modules listening for the 'actionCartSummary' event, and optionally returns the results. Dependencies include PrestaShop core classes and an initialized context where $summary is previously defined. This code is typically used in the Cart class in the front office to extend or modify cart summary behavior via addons.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCartSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCartSummary', $summary, null, true)\n```\n\n----------------------------------------\n\nTITLE: Defining Text Input Form Elements with HelperForm (PHP)\nDESCRIPTION: This snippet demonstrates how to set up a standard text input field in PrestaShop's HelperForm using a PHP associative array. Dependencies include the HelperForm class and proper context for localization. Required parameters such as 'type', 'label', 'name', 'class', and 'required' are specified, and 'desc' provides field-level help. The main input for this configuration is the array itself; the output is a rendered <input> element as part of the form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'type'     => 'text',                             // This is a regular <input> tag.\n  'label'    => $this->l('Name'),                   // The <label> for this <input> tag.\n  'name'     => 'name',                             // The content of the 'id' attribute of the <input> tag.\n  'class'    => 'lg',                                // The content of the 'class' attribute of the <input> tag. To set the size of the element, use these: sm, md, lg, xl, or xxl.\n  'required' => true,                               // If set to true, this option must be set.\n  'desc'     => $this->l('Please enter your name.') // A help text, displayed right next to the <input> tag.\n),\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Price Using Command Pattern - PrestaShop - PHP\nDESCRIPTION: Illustrates the use of the AddSpecificPriceCommand class to apply a specific price to a product in PrestaShop via a command pattern. Requires PrestaShop core classes: AddSpecificPriceCommand, handler interfaces, and value objects, all within the PrestaShop PHP ecosystem. Key parameters include product ID, reduction type/value, inclusion of tax, fixed price, minimum quantity, and the date range for the price; the operation returns a SpecificPriceId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/add-specific-price-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\`PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Product\\\\SpecificPrice\\\\Command\\\\AddSpecificPriceCommand\\`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Handler class:\n\\`PrestaShop\\\\PrestaShop\\\\Adapter\\\\Product\\\\SpecificPrice\\\\CommandHandler\\\\AddSpecificPriceHandler\\`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Implements interface:\n\\`PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Product\\\\SpecificPrice\\\\CommandHandler\\\\AddSpecificPriceHandlerInterface\\`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Return type:\n\\`PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Product\\\\SpecificPrice\\\\ValueObject\\\\SpecificPriceId\\`\n```\n\n----------------------------------------\n\nTITLE: Setting Chunk Size Limit for CSV Export in PHP\nDESCRIPTION: Demonstrates how to modify the default chunk size limit (5000) for data retrieval when using a callback function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($dataCallback)\n    ->setLimit(1000);\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Configuration Controller in PHP for PrestaShop Module\nDESCRIPTION: This snippet shows how to implement a Configuration Controller class that extends FrameworkBundleAdminController to handle form submissions, display success/error messages, and render the configuration form template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoSymfonyFormSimple\\Controller;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DemoConfigurationController extends FrameworkBundleAdminController\n{\n    public function index(Request $request): Response\n    {\n        $textFormDataHandler = $this->get('prestashop.module.demosymfonyformsimple.form.demo_configuration_text_form_data_handler');\n\n        $textForm = $textFormDataHandler->getForm();\n        $textForm->handleRequest($request);\n\n        if ($textForm->isSubmitted() && $textForm->isValid()) {\n            /** You can return array of errors in form handler and they can be displayed to user with flashErrors */\n            $errors = $textFormDataHandler->save($textForm->getData());\n\n            if (empty($errors)) {\n                $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('demo_configuration_form_simple');\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        return $this->render('@Modules/demosymfonyformsimple/views/templates/admin/form.html.twig', [\n            'demoConfigurationForm' => $textForm->createView()\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building KPI Row in Controller Action - PHP\nDESCRIPTION: This PHP snippet demonstrates how to build a KPI row in a PrestaShop controller action. The code retrieves a KPI row factory service, builds the KPI row, and assigns it to a Twig template for rendering. It requires setting up the corresponding KPI row factory service beforehand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/kpi-blocks.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\npublic function showSettingsAction(Request $request)\\n{\\n    // Create the KPI row factory service\\n    $kpiRowFactory = $this->get('prestashop.core.kpi_row.factory.your_page');\\n\\n    return [\\n        // Assign the built KPI row to the view\\n        'kpiRow' => $kpiRowFactory->build(),\\n        ...\\n    ];\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Row Action to Customer Grid via Module in PHP\nDESCRIPTION: This code snippet shows how to add a custom Row Action (Subscribe) to the Customer Grid using a PrestaShop module. It demonstrates the use of the actionCustomerGridDefinitionModifier hook to modify the grid definition.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-row-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// modules/mymodule/mymodule.php\n\nclass Mymodule extends Module\n{\n    // ...\n\n    /**\n     * Use hook to add Row action for subscribing customer to newsletter\n     */\n    public function hookActionCustomerGridDefinitionModifier(array $params)\n    {\n        /** @var \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition */\n        $gridDefinition = $params['definition'];\n\n        $gridDefinition->getGridActions()\n            ->add((new SubmitRowAction('subscribe'))\n                ->setName($this->trans('Subscribe', [], 'Admin.Actions'))\n                ->setIcon('mail')\n                ->setOptions([\n                    'route' => 'admin_customer_subscribe',\n                    'route_param_name' => 'customerId',\n                    'route_param_field' => 'id_customer',\n                    'confirm_message' => $this->trans(\n                        'Subscribe to newsletter?',\n                        [],\n                        'Admin.Notifications.Warning'\n                    ),\n                ])\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing actionListMailThemes Hook in PHP for Custom Email Layouts\nDESCRIPTION: This PHP class defines a PrestaShop module that adds custom email layouts to the classic and modern themes. It implements the actionListMailThemes hook to register the layouts, and includes methods for installation, uninstallation, enabling, and disabling the module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-a-layout-from-module.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\Layout;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface;\n\nclass MyEmailThemeModule extends Module \n{\n    public function install() \n    {\n        return parent::install()\n            // This class constant contains 'actionListMailThemes'\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function uninstall() \n    {\n        return parent::uninstall()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function enable() \n    {\n        return parent::enable()\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function disable() \n    {\n        return parent::disable()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    /**\n     * @param array $hookParams\n     */\n    public function hookActionListMailThemes(array $hookParams)\n    {\n        if (!isset($hookParams['mailThemes'])) {\n            return;\n        }\n\n        /** @var ThemeCollectionInterface $themes */\n        $themes = $hookParams['mailThemes'];\n\n        /** @var ThemeInterface $theme */\n        foreach ($themes as $theme) {\n            if (!in_array($theme->getName(), ['classic', 'modern'])) {\n                continue;\n            }\n\n            // Add a layout to each theme (don't forget to specify the module name)\n            $theme->getLayouts()->add(new Layout(\n                'custom_template',\n                __DIR__ . '/mails/layouts/custom_' . $theme->getName() . '_layout.html.twig',\n                '',\n                $this->name\n            ));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Install Method in PrestaShop Module (PHP)\nDESCRIPTION: This snippet shows a basic implementation of the `install()` method in a PrestaShop module, which calls the parent install method. It demonstrates how to extend functionality by checking if the Multistore feature is active and setting configuration values. Dependencies include the Shop and Configuration classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    return parent::install();\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    if (Shop::isFeatureActive()) {\n        Shop::setContext(Shop::CONTEXT_ALL);\n    }\n\n   return (\n        parent::install() \n        && Configuration::updateValue('MYMODULE_NAME', 'my module')\n    ); \n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Initialization for PrestaShop Form Components\nDESCRIPTION: This JavaScript snippet initializes PrestaShop's form components such as TranslatableField, TinyMCEEditor, and ChoiceTree. It's required for proper functioning of certain form types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n$(document).ready(function () {\n    // Learn more about components in documentation\n    // https://devdocs.prestashop.com/8/development/components/global-components/\n    window.prestashop.component.initComponents(\n        [\n            'TranslatableField',\n            'TinyMCEEditor',\n            'TranslatableInput',\n            'GeneratableInput',\n            'TextWithLengthCounter',\n        ],\n    );\n\n    window.prestashop.instance.generatableInput.attachOn('.js-generator-btn');\n    new window.prestashop.component.ChoiceTree('#form_category_choice_tree_type');\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring DataColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an instance of `DataColumn` for a field named 'id_product'. It utilizes the `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn` and `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection` classes. The example sets the column's display name to 'ID' using `setName()` and configures the required 'field' option within `setOptions()` before adding the configured column to a `ColumnCollection`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/data.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$dataColumn = new DataColumn('id_product');\n$dataColumn->setName('ID');\n$dataColumn->setOptions([\n     'field' => 'id_product',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($dataColumn);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid Definition Factory in PHP for PrestaShop Module\nDESCRIPTION: This code defines a custom grid definition factory for a PrestaShop module. It extends AbstractGridDefinitionFactory and implements methods to define grid actions and columns. The class includes bulk delete action and individual row actions like edit and delete.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/actions-reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// /modules/my-module/src/Grid/MyGridDefinitionFactory.php\nnamespace MyModule\\Grid;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\GridActionCollection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Type\\SubmitGridAction;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\SubmitRowAction;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n/**\n * How to define the Grid's actions?\n * You can adapt this example or look at the existing ones\n * in PrestaShop's Core.\n */\nclass MyGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    /**\n     * {@inheritdoc}\n     */\n    protected function getGridActions()\n    {\n        return (new GridActionCollection())\n            ->add(\n                (new SubmitGridAction('delete_all_email_logs'))\n                ->setName('Erase all')\n                ->setIcon('delete')\n                ->setOptions([\n                    'submit_route' => 'admin_logs_delete_all',\n                    'confirm_message' => 'Are you sure?',\n                ])\n            )\n        ;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getColumns()\n    {\n        return (new ColumnCollection())\n            ->add(\n                (new ActionColumn('actions'))\n                ->setName($this->trans('Actions', [], 'Admin.Global'))\n                ->setOptions([\n                    'actions' => (new RowActionCollection())\n                    ->add(\n                        (new LinkRowAction('edit'))\n                        ->setName('Edit')\n                        ->setIcon('edit')\n                        ->setOptions([\n                            'route' => 'edit_stuff',\n                            'route_param_name' => 'stuffId',\n                            'route_param_field' => 'stuffId',\n                            // A click on the row will have the same effect as this action\n                            'clickable_row' => true,\n                        ])\n                    )\n                    ->add(\n                        (new SubmitRowAction('delete'))\n                        ->setName('Delete')\n                        ->setIcon('delete')\n                        ->setOptions([\n                            'confirm_message' => 'Delete selected item?',\n                            'route' => 'delete_stuff',\n                            'route_param_name' => 'stuffId',\n                            'route_param_field' => 'stuffId',\n                        ])\n                    )\n                ])\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Translation Domain and Strings in Twig Templates – PrestaShop – Twig\nDESCRIPTION: Shows how to use the trans_default_domain directive in a Twig template to set the default translation domain for all contained strings. The example demonstrates translating strings via the trans filter, ensuring correct domain association. Suitable for PrestaShop modules using Twig templates, requires no parameters except the domain, and is effective on a per-file basis.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% trans_default_domain 'Modules.Mymodule.Foo' %}\n{{ 'Hello world'|trans }}\n{{ 'Something else'|trans }}\n```\n\n----------------------------------------\n\nTITLE: Extending Customer Grid Definition with Toggle Column\nDESCRIPTION: Implementation of hookActionCustomerGridDefinitionModifier to add a new toggle column and filter to the customer grid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionCustomerGridDefinitionModifier(array $params)\n{\n    /** @var GridDefinitionInterface $definition */\n    $definition = $params['definition'];\n\n    $translator = $this->getTranslator();\n\n    $definition\n        ->getColumns()\n        ->addAfter(\n            'optin',\n            (new ToggleColumn('is_allowed_for_review'))\n                ->setName($translator->trans('Allowed for review', [], 'Modules.Ps_DemoCQRSHooksUsage'))\n                ->setOptions([\n                    'field' => 'is_allowed_for_review',\n                    'primary_field' => 'id_customer',\n                    'route' => 'ps_democqrshooksusage_toggle_is_allowed_for_review',\n                    'route_param_name' => 'customerId',\n                ])\n        )\n    ;\n\n    $definition->getFilters()->add(\n        (new Filter('is_allowed_for_review', YesAndNoChoiceType::class))\n        ->setAssociatedColumn('is_allowed_for_review')\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Configuration Data in PrestaShop\nDESCRIPTION: Method to store configuration data in PrestaShop. It takes a key, value, and optional shop constraint. Returns true if successful, false otherwise.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration->set(string $key, mixed $value, ShopConstraint $shopConstraint = null): bool\n```\n\n----------------------------------------\n\nTITLE: Example Usage of $link->getAdminLink with Legacy Routes (PHP)\nDESCRIPTION: Provides various examples demonstrating how the `$link->getAdminLink` method generates URLs based on the provided parameters and the underlying Symfony route configuration (including `_legacy_link` mappings). It shows how different ways of specifying actions ('action' parameter vs. action name as parameter key) are resolved to the correct route or fall back if the action hasn't been migrated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    $link = New Link();\n\n    //These calls will return /preferences\n    $link->getAdminLink('AdminPaymentPreferences'); \n    $link->getAdminLink('AdminPaymentPreferences', true, ['action' => 'list']);\n    $link->getAdminLink('AdminPaymentPreferences', true, [], ['action' => 'index']);\n\n    //These calls will return /preferences/update\n    $link->getAdminLink('AdminPaymentPreferences', true, [], ['action' => 'update']);\n    $link->getAdminLink('AdminPaymentPreferences', true, [], ['update' => true]); =>\n    $link->getAdminLink('AdminPaymentPreferences', true, [], ['update' => '']); =>\n    \n    //This call will return ?controller=AdminPaymentPreferences&action=export\n    //because the export action has not been migrated yet\n    $link->getAdminLink('AdminPaymentPreferences', true, [], ['action' => 'export']);\n```\n\n----------------------------------------\n\nTITLE: Adding and Positioning New Column in Grid in PHP\nDESCRIPTION: This code demonstrates how to add a new column to a grid and position it after an existing column in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$newColumn = new DataColumn('example') ...\n$columns->addAfter('name', $newColumn);\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form Update with CQRS Command\nDESCRIPTION: Extended ContactFormDataHandler implementation showing how to use EditContactCommand for updating contact information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler;\n\nuse PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Command\\EditContactCommand;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Exception\\ContactException;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\ValueObject\\ContactId;\n\nfinal class ContactFormDataHandler implements FormDataHandlerInterface\n{\n    /**\n     * @var CommandBusInterface\n     */\n    private $commandBus;\n\n    /**\n     * @param CommandBusInterface $commandBus\n     */\n    public function __construct(CommandBusInterface $commandBus)\n    {\n        $this->commandBus = $commandBus;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @throws ContactException\n     */\n    public function update($id, array $data)\n    {\n        $editContactCommand = (new EditContactCommand((int) $id))\n            ->setLocalisedTitles($data['title'])\n            ->setEmail($data['email'])\n            ->setIsMessagesSavingEnabled($data['is_messages_saving_enabled'])\n            ->setLocalisedDescription($data['description'])\n            ->setShopAssociation(is_array($data['shop_association']) ? $data['shop_association'] : [])\n        ;\n\n        $this->commandBus->handle($editContactCommand);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Selection Field with Typeahead - PrestaShop PHP\nDESCRIPTION: This code snippet demonstrates how to add a customer selection field in a form using the TypeaheadCustomerCollectionType class in PrestaShop. It relies on Symfony's form builder and router to generate a URL for asynchronously searching customers. Key options include 'remote_url' for AJAX queries, 'mapping_value' for identifying selected customers, and 'mapping_name' for the display label. A template is used for rendering the selected customer display, with the label optionally translated using PrestaShop’s translator service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/typeahead-customer-collection-type.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add(\n    'sp_id_customer',\n    TypeaheadCustomerCollectionType::class,\n    [\n        // \"%QUERY\" is appended to url in order to avoid \"%\" sign being encoded into \"%25\",\n        // it used as a placeholder to replace with actual query in JS\n        'remote_url' => $this->router->generate('admin_customers_search', ['sf2' => 1]) . '&customer_search=%QUERY',\n        'mapping_value' => 'id_customer',\n        'mapping_name' => 'fullname_and_email',\n        'placeholder' => $this->translator->trans('All customers', [], 'Admin.Global'),\n        'template_collection' => '<div class=\"media-body\"><div class=\"label\">%s</div><i class=\"material-icons delete\">clear</i></div>',\n        'limit' => 1,\n        'required' => false,\n        'label' => $this->translator->trans('Add customer', [], 'Admin.Catalog.Feature'),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Translated Entities using Doctrine in PHP for PrestaShop\nDESCRIPTION: This code demonstrates how to create translated entities using Doctrine's entity manager. It creates Quote and QuoteLang entities for multiple languages based on provided fixture data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/doctrine/how-to-handle-multi-lang-doctrine-entity.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\Module\\DemoDoctrine\\Entity\\Quote;\nuse PrestaShop\\Module\\DemoDoctrine\\Entity\\QuoteLang;\nuse PrestaShopBundle\\Entity\\Lang;\n\n$container = $this->getContainer();\n\n$langRepository = $container->get('prestashop.core.admin.lang.repository');\n$languages = $langRepository->findAll();\n\n$entityManager = $container->get('doctrine.orm.default_entity_manager');\n\n$quotesData = [\n    // ... fixture data ...\n];\n\nforeach ($quotesData as $quoteData) {\n    $quote = new Quote();\n    $quote->setAuthor($quoteData['author']);\n\n    foreach ($languages as $language) {\n        $quoteLang = new QuoteLang();\n        $quoteLang->setLang($language);\n        if (isset($quoteData['quotes'][$language->getIsoCode()])) {\n            $quoteLang->setContent($quoteData['quotes'][$language->getIsoCode()]);\n        } else {\n            $quoteLang->setContent($quoteData['quotes']['en']);\n        }\n        $quote->addQuoteLang($quoteLang);\n    }\n\n    $entityManager->persist($quote);\n}\n\n$entityManager->flush();\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation for Displaying Order Signature\nDESCRIPTION: Hook method that displays customer signature information in the admin order view. It retrieves the signature data using the repository, formats it with the presenter, and renders it using a Twig template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n     * Displays customer's signature.\n     */\n    public function hookDisplayAdminOrderSide(array $params)\n    {\n        /** @var OrderSignatureRepository $signatureRepository */\n        $signatureRepository = $this->get(\n            'prestashop.module.demovieworderhooks.repository.order_signature_repository'\n        );\n\n        /** @var OrderSignaturePresenter $signaturePresenter */\n        $signaturePresenter = $this->get(\n            'prestashop.module.demovieworderhooks.presenter.order_signature_presenter'\n        );\n\n        $signature = $signatureRepository->findOneByOrderId($params['id_order']);\n\n        if (!$signature) {\n            return '';\n        }\n\n        return $this->render($this->getModuleTemplatePath() . 'customer_signature.html.twig', [\n            'signature' => $signaturePresenter->present($signature, (int) $this->context->language->id),\n        ]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Hooking a Form Modifier into the Product Form\nDESCRIPTION: Implementation of the actionProductFormBuilderModifier hook that connects a FormModifier to the Product form. This hook allows modules to modify forms when they are being built.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    $this->registerHook('actionProductFormBuilderModifier');\n}\n\npublic function hookActionProductFormBuilderModifier(array $params): void\n{\n    /** @var ProductFormModifier $productFormModifier */\n    $productFormModifier = $this->get(ProductFormModifier::class);\n    $productId = isset($params['id']) ? new ProductId((int) $params['id']) : null;\n\n    $productFormModifier->modify($productId, $params['form_builder']);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching the action<FormName>FormDataProviderDefaultData Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how the `action<FormName>FormDataProviderDefaultData` hook is dispatched using `dispatchWithParameters` within the `FormBuilder` class. It passes the default form data (`$data`) and options (`$options`) by reference, enabling modules hooked into this action to modify them before the form data provider uses them. The specific hook name is dynamically generated based on the form name obtained via `$this->getFormName()`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<FormName>FormDataProviderDefaultData.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            'action' . $this->camelize($this->getFormName()) . 'FormDataProviderDefaultData',\n            [\n                'data' => &$data,\n                'options' => &$options,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining AddCustomerCommand Class Path in PHP\nDESCRIPTION: Namespace declaration for the AddCustomerCommand class in PrestaShop's core domain, which is responsible for adding new customers to the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/add-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\AddCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionColumn with LinkRowAction - PrestaShop - PHP\nDESCRIPTION: This PHP snippet demonstrates how to create and configure an ActionColumn in a PrestaShop Grid, assign a LinkRowAction for deleting rows, and add the configured column to a ColumnCollection. The code depends on classes from the PrestaShop Grid component (ActionColumn, ColumnCollection, LinkRowAction). Key parameters include the action name, icon, routing information, and confirmation message, allowing for user interaction with individual grid items. Inputs include route details and the mail identifier; the output is an updated column collection with row-level actions. It assumes the PrestaShop Core Grid library is installed and properly autoloaded.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Column\\\\Type\\\\Common\\\\ActionColumn;\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Column\\\\ColumnCollection;\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Action\\\\Row\\\\Type\\\\LinkRowAction;\\n\\n$actionColumn = new ActionColumn('actions');\\n$actionColumn->setName('Actions');\\n$actionColumn->setOptions([\\n     'actions' => [\\n        ->add((new LinkRowAction('delete'))\\n            ->setIcon('delete')\\n            ->setOptions([\\n                'route' => 'admin_custom_route',\\n                'route_param_name' => 'mailId',\\n                'route_param_field' => 'id_mail',\\n                'confirm_message' => 'Delete selected item?',\\n            ])\\n        )\\n     ],\\n]);\\n\\n$columns = new ColumnCollection();\\n$columns->add($actionColumn);\n```\n\n----------------------------------------\n\nTITLE: Parsing Multilingual Product Data in XML Response\nDESCRIPTION: Example of XML output for a product with multilingual fields. Shows how language-specific data is structured within the XML response, including product name and description in multiple languages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/multilang-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product>\n        <id><![CDATA[19]]></id>\n        <id_manufacturer xlink:href=\"http://local.prestashop-develop/api/manufacturers/1\"><![CDATA[1]]></id_manufacturer>\n        <id_supplier><![CDATA[0]]></id_supplier>\n        <id_category_default xlink:href=\"http://local.prestashop-develop/api/categories/8\"><![CDATA[8]]></id_category_default>\n        ...\n        <name>\n            <language id=\"1\" xlink:href=\"http://local.prestashop-develop/api/languages/1\"><![CDATA[Customizable mug]]></language>\n            <language id=\"2\" xlink:href=\"http://local.prestashop-develop/api/languages/2\"><![CDATA[Mug personnalisable]]></language>\n        </name>\n        <description>\n            <language id=\"1\" xlink:href=\"http://local.prestashop-develop/api/languages/1\"><![CDATA[<p><span style=\"font-size:10pt;font-style:normal;\"><span style=\"font-size:10pt;font-style:normal;\">Customize your mug with the text of your choice. A mood, a message, a quote... It's up to you! Maximum number of characters:</span><span style=\"font-size:10pt;font-style:normal;\"> ---</span></span></p>]]></language>\n            <language id=\"2\" xlink:href=\"http://local.prestashop-develop/api/languages/2\"><![CDATA[<p><span style=\"font-size:10pt;font-style:normal;\">Personnalisez votre mug avec le texte de votre choix. Une humeur, un message, une citation... À vous de choisir ! Nombre maximum de caractères : --- Diamètre : 8,2cm / Hauteur : 9,5cm / Poids : 0.43kg. Passe au lave-vaisselle.</span></p>]]></language>\n        </description>\n        ...\n    </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Definition in PrestaShop using PHP\nDESCRIPTION: Defines a grid ID, translatable name, and data columns using PrestaShop's AbstractGridDefinitionFactory. The factory method leverages the translator for easy localization of grid names and manages structural setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn;\n\nfinal class ProductGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    protected function getId()\n    {\n        return 'products';\n    }\n\n    protected function getName()\n    {\n        return $this->trans('Products', [], 'Admin.Advparameters.Feature');\n    }\n\n    protected function getColumns()\n    {\n        return (new ColumnCollection())\n            ->add((new DataColumn('id_product'))\n                ->setName($this->trans('ID', [], 'Admin.Global'))\n                ->setOptions([\n                    'field' => 'id_product',\n                ])\n            )\n            ->add((new DataColumn('reference'))\n                ->setName($this->trans('Reference', [], 'Admin.Advparameters.Feature'))\n                ->setOptions([\n                    'field' => 'reference',\n                ])\n            )\n            ->add((new DataColumn('name'))\n                ->setName($this->trans('Name', [], 'Admin.Advparameters.Feature'))\n                ->setOptions([\n                    'field' => 'name',\n                ])\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Symfony Route Configuration in PrestaShop YAML\nDESCRIPTION: Example of a YAML configuration file (`orders.yml`) mapping the `/sell/orders/orders/` path to the `PrestaShopBundle:Admin/Sell/Order/Order:index` controller action in PrestaShop's Symfony routing. It also includes `_legacy_controller` and `_legacy_link` parameters for backward compatibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/orders/orders.yml\nadmin_orders_index:\n  path: /sell/orders/orders/\n  methods: [GET]\n  defaults:\n    _controller: PrestaShopBundle:Admin/Sell/Order/Order:index\n    _legacy_controller: AdminOrders\n    _legacy_link: AdminOrders\n```\n\n----------------------------------------\n\nTITLE: Creating a PrestaShop Webservice Client\nDESCRIPTION: PHP code showing how to instantiate a PrestaShopWebservice object with the store URL, authentication key, and debug mode parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Hooks in PrestaShop Module Installation\nDESCRIPTION: This snippet shows how a PrestaShop module can subscribe to multiple hooks at once during installation by passing an array of hook names to the registerHook() method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/subscribing-to-hook.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Somemodule extends Module\n{\n    const AVAILABLE_HOOKS = [\n        'registerGDPRConsent',\n        'displayProductAdditionalInfo',\n    ]; \n\n    public function install()\n    {\n        return (\n            parent::install()\n            && $this->registerHook(self::AVAILABLE_HOOKS)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Data to XML and Saving File using Symfony Components (PHP)\nDESCRIPTION: This PHP snippet, part of the `hookDisplayDashboardToolbarIcons` method, demonstrates using Symfony components within a PrestaShop module. It retrieves products using the `product_repository` service. Then, it uses the `serializer` service (`$this->get('serializer')`) to convert the product array into an XML string with specific formatting options. Finally, it uses the `filesystem` service (`$this->get('filesystem')`) to write the generated XML content to a file named `products.xml` in the PrestaShop upload directory (`_PS_UPLOAD_DIR_`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// foo.php\n\n/* ... */\n/**\n * Creates an XML file with list of products in \"upload\" folder.\n *\n * @return bool Success of the installation\n */\npublic function hookDisplayDashboardToolbarIcons($hookParams)\n{\n    if ($this->isSymfonyContext() && $hookParams['route'] === 'admin_product_catalog') {\n        $products = $this->get('product_repository')->findAllByLangId(1);\n\n        $productsXml = $this->get('serializer')->serialize(\n            $products,\n            'xml',\n            [\n                'xml_root_node_name' => 'products',\n                'xml_format_output' => true,\n            ]\n        );\n        $this->get('filesystem')->dumpFile(_PS_UPLOAD_DIR_ . 'products.xml', $productsXml);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Resource to PrestaShop Webservice\nDESCRIPTION: Example of implementing the hookAddWebserviceResources to add a custom ObjectModel (reassuranceClass) to PrestaShop's webservice API. The hook registers the resource with specific permissions and methods.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/external-services.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Add an entity in the Webservice\n *\n * @param array $params All existing resources from the core\n * @return array New resources\n */\npublic function hookAddWebserviceResources($params)\n{\n    return array(\n        'reassurance' => array(\n            'description' => 'Module Reassurance example',\n            'class' => 'reassuranceClass',\n            'forbidden_method' => array('PUT', 'POST', 'DELETE')),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Fields Provider in PrestaShop Import\nDESCRIPTION: This snippet demonstrates how the CustomerFieldsProvider class builds and returns a collection of EntityField objects for the Customer entity. Each field represents a customer attribute that can be imported, such as ID, email, name, etc.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/EntityField/Provider/CustomerFieldsProvider.php\n\nfinal class CustomerFieldsProvider implements EntityFieldsProviderInterface\n{\n    public function getCollection()\n    {\n        $fields = [\n            new EntityField('id', $this->trans('ID', 'Admin.Global')),\n            new EntityField('active', $this->trans('Active  (0/1)')),\n            new EntityField('id_gender', $this->trans('Titles ID (Mr = 1, Ms = 2, else 0)')),\n            new EntityField('email', $this->trans('Email', 'Admin.Global'), '', true),\n            new EntityField('passwd', $this->trans('Password', 'Admin.Global'), '', true),\n            new EntityField('birthday', $this->trans('Birth date (yyyy-mm-dd)')),\n            new EntityField('lastname', $this->trans('Last name', 'Admin.Global'), '', true),\n            new EntityField('firstname', $this->trans('First name', 'Admin.Global'), '', true),\n            new EntityField('newsletter', $this->trans('Newsletter (0/1)')),\n            new EntityField('optin', $this->trans('Partner offers (0/1)')),\n            new EntityField('date_add', $this->trans('Registration date (yyyy-mm-dd)')),\n            new EntityField('group', $this->trans('Groups (x,y,z...)')),\n            new EntityField('id_default_group', $this->trans('Default group ID')),\n            new EntityField(\n                'id_shop',\n                $this->trans('ID / Name of shop'),\n                $this->trans('Ignore this field if you don\\'t use the Multistore tool. If you leave this field empty, the default shop will be used.', 'Admin.Advparameters.Help')\n            ),\n        ];\n\n        return EntityFieldCollection::createFromArray($fields);\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Instance in PrestaShop Controllers and Modules\nDESCRIPTION: Demonstrates how to obtain a Cookie instance from a Controller or Module subclass using the Context object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->context\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Value Data for Editing with PrestaShop Query (PHP)\nDESCRIPTION: This PHP code outlines the process to retrieve a feature value by its ID, enabling its editing in PrestaShop. It depends on PrestaShop\\PrestaShop\\Core\\Domain\\Feature\\Query\\GetFeatureValueForEditing, and its handler, PrestaShop\\PrestaShop\\Adapter\\Feature\\QueryHandler\\GetFeatureValueForEditingHandler, which implements the corresponding interface. The key parameter is the integer $featureValueId provided in the constructor, and the process yields an EditableFeatureValue result. This implementation is constrained to contexts where the feature ID is known and valid within the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/get-feature-value-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\Query\\GetFeatureValueForEditing\n\n```\n\n----------------------------------------\n\nTITLE: Implementing QuoteRepository in PHP for PrestaShop Doctrine Module\nDESCRIPTION: This code defines the QuoteRepository class, which extends EntityRepository and provides a custom method for fetching quotes with optional language filtering using Doctrine's QueryBuilder.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/doctrine/how-to-handle-multi-lang-doctrine-entity.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoDoctrine\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\n\nclass QuoteRepository extends EntityRepository\n{\n    public function getQuotes(int $langId = 0): array\n    {\n        $qb = $this->createQueryBuilder('q')\n            ->addSelect('q')\n            ->addSelect('ql')\n            ->leftJoin('q.quoteLangs', 'ql');\n\n        if (0 !== $langId) {\n            $qb\n                ->andWhere('ql.lang = :langId')\n                ->setParameter('langId', $langId);\n        }\n\n        return $qb->getQuery()->getResult();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring LinkColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates creating a new LinkColumn instance named 'name_link'. It sets the column's display name to 'Name' and configures its behavior using the setOptions method. The 'field' option specifies 'name' as the data source, 'route' sets the link target to 'admin_category_edit', 'route_param_name' defines the route parameter as 'categoryId', and 'route_param_field' indicates that the 'id_category' field from the data record should be used as the value for the route parameter. Finally, the configured LinkColumn is added to a ColumnCollection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/link.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\LinkColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$linkColumn = new LinkColumn('name_link');\n$linkColumn->setName('Name');\n$linkColumn->setOptions([\n     'field' => 'name',\n     'route' => 'admin_category_edit',\n     'route_param_name' => 'categoryId',\n     'route_param_field' => 'id_category',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($linkColumn);\n```\n\n----------------------------------------\n\nTITLE: Adding Timestamp Fields to an ObjectModel\nDESCRIPTION: Example of how to implement timestamp tracking (creation and update dates) for an ObjectModel entity by defining appropriate properties and adding them to the definition array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Cms extends ObjectModel\n{\n    [...]\n    public $date_add;\n    public $date_upd;\n\n    public static $definition = [\n        [...]\n        'fields' => array(\n            [...]\n            'date_add' => ['type' => self::TYPE_DATE, 'shop' => true, 'validate' => 'isDate'],\n            'date_upd' => ['type' => self::TYPE_DATE, 'shop' => true, 'validate' => 'isDate']\n        )\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Module-Aware Template Include in PrestaShop 1.7\nDESCRIPTION: Improved method for including template files in PrestaShop 1.7 that follows proper override rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: smarty\nCODE:\n```\n{include file='module:MODULE_NAME/views/templates/front/included-template.tpl'}\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminProductsControllerDeleteBefore Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the 'actionAdminProductsControllerDeleteBefore' hook is dispatched in the ProductController. It passes parameters using the dispatchWithParameters method, allowing modules to perform actions before a product is deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDeleteBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDeleteBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Overriding Symfony Form Templates in HTML\nDESCRIPTION: This HTML snippet provides an example of how to override and customize form templates for the PrestaShop Back Office using Symfony templates. It focuses on rendering different upload quota fields in a user-friendly card layout.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/forms/admin-forms.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% block administration_form_upload_quota %}\n    <div class=\"col\">\n        <div class=\"card\">\n            <h3 class=\"card-header\">\n                <i class=\"material-icons\">file_upload</i> {{ 'Upload quota'|trans }}\n            </h3>\n            <div class=\"card-block\">\n                <div class=\"card-text\">\n                    <div class=\"form-group\">\n                        {{ ps.label_with_help(('Maximum size for attached files'|trans), ('Set the maximum size allowed for attachment files (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_ATTACHMENT_MAXIMUM_SIZE'|configuration}, 'Admin.Advparameters.Help'))) }}\n                        {{ form_errors(uploadQuotaForm.max_size_attached_files) }}\n                        {{ form_widget(uploadQuotaForm.max_size_attached_files) }}\n                    </div>\n                    <div class=\"form-group\">\n                        {{ ps.label_with_help(('Maximum size for a downloadable product'|trans), ('Define the upload limit for a downloadable product (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_FILE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }}\n                        {{ form_errors(uploadQuotaForm.max_size_downloadable_product) }}\n                        {{ form_widget(uploadQuotaForm.max_size_downloadable_product) }}\n                    </div>\n                    <div class=\"form-group\">\n                        {{ ps.label_with_help((\"Maximum size for a product's image\"|trans), ('Define the upload limit for an image (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_IMAGE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }}\n                        {{ form_errors(uploadQuotaForm.max_size_product_image) }}\n                        {{ form_widget(uploadQuotaForm.max_size_product_image) }}\n                    </div>\n\n                    {# Do what you need to do, I'm really bad at designing pages ^o^ #}\n                    <div class=\"form-group\">\n                        {{ form_label(uploadQuotaForm.description) }}\n                        {{ form_widget(uploadQuotaForm.description) }}\n                        {{ form_errors(uploadQuotaForm.description) }}\n                    </div>\n                    {{ form_rest(uploadQuotaForm) }}\n                </div>\n            </div>\n            <div class=\"card-footer\">\n                <div class=\"d-flex justify-content-end\">\n                    <button class=\"btn btn-primary\">{{ 'Save'|trans({}, 'Admin.Actions') }}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Importing Form Data Handler Interface in PHP\nDESCRIPTION: Example of importing the FormDataHandlerInterface when using it outside the core namespace.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\FormDataHandlerInterface;\n```\n\n----------------------------------------\n\nTITLE: Extending Customer Form Post Actions with Hooks in PHP\nDESCRIPTION: Handles saving and updating the state of 'is_allowed_for_review' in PrestaShop customer forms post-create and update. It uses action hooks to trigger review status updates. No external dependencies are required besides PrestaShop's hooks API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\npublic function hookActionAfterUpdateCustomerFormHandler(array $params)\n{\n    $this->updateCustomerReviewStatus($params);\n}\n\npublic function hookActionAfterCreateCustomerFormHandler(array $params)\n{\n    $this->updateCustomerReviewStatus($params);\n}\n\nprivate function updateCustomerReviewStatus(array $params)\n{\n    $customerId = $params['id'];\n    /** @var array $customerFormData */\n    $customerFormData = $params['form_data'];\n    $isAllowedForReview = (bool) $customerFormData['is_allowed_for_review'];\n    \n    // implement review status saving here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Orders with OrderRepository in PHP\nDESCRIPTION: Method that retrieves customer orders by ID, with the ability to exclude specific order IDs. It uses PrestaShop's legacy classes and returns an OrderCollection object with relevant order data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function getCustomerOrders(int $customerId, array $excludeOrderIds = []): OrderCollection\n    {\n        $orders = PrestaShopOrder::getCustomerOrders($customerId);\n        $ordersCollection = new OrderCollection();\n\n        foreach ($orders as $order) {\n            if (in_array($order['id_order'], $excludeOrderIds)) {\n                continue;\n            }\n\n            $ordersCollection->add(new Order(\n                (int) $order['id_order'],\n                $order['reference'],\n                (int) $order['current_state'],\n                new DateTimeImmutable($order['date_add'])\n            ));\n        }\n\n        return $ordersCollection;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using actionProductFormBuilderModifier Hook - PrestaShop Module Example (PHP)\nDESCRIPTION: This module class snippet handles registering and processing the actionProductFormBuilderModifier hook, which is used to alter the product form in the back office. The install function ensures the hook is registered. The main method, hookActionProductFormBuilderModifier, retrieves a ProductFormModifier service and delegates modification of the form. It expects parameters in an array with at least 'id' and 'form_builder' keys. Proper service injection via get() is required.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nuse DemoNewHooks\\Form\\Modifier\\ProductFormModifier;\n\nclass DemoNewHooks extends Module\n{\n    public function __construct()\n    {\n        // [...]\n    }\n\n    /**\n     * @return bool\n     */\n    public function install()\n    {\n        return parent::install() && $this->registerHook(['actionProductFormBuilderModifier']);\n    }\n    \n    /**\n     * Modify product form builder\n     *\n     * @param array $params\n     */\n    public function hookActionProductFormBuilderModifier(array $params): void\n    {\n        /** @var ProductFormModifier $productFormModifier */\n        $productFormModifier = $this->get(ProductFormModifier::class);\n        $productId = (int) $params['id'];\n\n        $productFormModifier->modify($productId, $params['form_builder']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a QueryHandler Interface with Return Type in PrestaShop PHP\nDESCRIPTION: This snippet illustrates the standard interface for a QueryHandler within PrestaShop's CQRS framework. It must define a single public method `handle`, which takes a specific Query object (e.g., `NameOfTheQuery`) as input. Unlike CommandHandlers, this method must have a defined return type (`TypeOfReturn`) indicating the structure of the data retrieved by the query. It should return a typed object on success and throw a typed Exception on failure. PHPDoc is used to further clarify the parameters and return type.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/cqrs.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param NameOfTheQuery $query\n *\n * @return TypeOfReturn\n */\npublic function handle(NameOfTheQuery $query): TypeOfReturn;\n```\n\n----------------------------------------\n\nTITLE: Defining a Collection Class for Module Service Injection - PHP\nDESCRIPTION: Implements a Collection class with a constructor that takes an iterable of elements and adds each to an internal array. Designed to be used as a Symfony service in PrestaShop modules with autowiring and tagged injections. The key parameter is the injected $elements, which should consist of service instances matching the tag or interface, and the output is an instantiated Collection with those elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace TestModule\\InstanceofConditionals\\Collection;\n\nclass Collection\n{\n    private $elements = [];\n\n    public function __construct(iterable $elements)\n    {\n        foreach ($elements as $element) {\n            $this->addElement($element);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook Callback Methods - PrestaShop PHP\nDESCRIPTION: This PHP snippet shows sample implementations of hook callback methods within a PrestaShop module. Each method corresponds to a registered hook (e.g., 'displayHeader', 'displayFooter', 'actionOtherHook') and receives a single array parameter '$params' with contextual information. These methods must be public, non-static, and named 'hook' plus the hook name. No external dependencies other than PrestaShop's module base class are needed. Input: array of parameters; Output: any content/actions defined by the module developer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function hookDisplayHeader(array $params)\n{\n    // Your code.\n}\n\npublic function hookDisplayFooter(array $params)\n{\n    // Your code.\n}\n\npublic function hookActionOtherHook(array $params)\n{\n    // Your code.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Module Tab with Single Language Label (PHP)\nDESCRIPTION: Demonstrates how to define a back-office menu tab within a PrestaShop module's main class using the `$tabs` public property. This example sets a single, non-translatable label ('Merchant Expertise') using the 'name' key, specifies the target legacy controller class ('AdminGamification') via 'class_name', sets visibility to true, and assigns it to the 'ShopParameters' parent menu using 'parent_class_name'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodule extends Module\n{\n    public $tabs = [\n        [\n            'name' => 'Merchant Expertise', // One name for all langs\n            'class_name' => 'AdminGamification',\n            'visible' => true,\n            'parent_class_name' => 'ShopParameters',\n        ],\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Actions via Module in PrestaShop PHP\nDESCRIPTION: Shows how to add a new Grid action to an existing grid using a PrestaShop module. It demonstrates hooking into the grid definition modifier and adding a new LinkGridAction.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-grid-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/mymodule/mymodule.php\n\nclass Mymodule extends Module\n{\n    // ...\n\n    /**\n     * Use hook to add Grid action for subscribing multiple customers to newsletter\n     */\n    public function hookActionCustomerGridDefinitionModifier(array $params)\n    {\n        /** @var \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition */\n        $gridDefinition = $params['definition'];\n\n        $gridDefinition->getGridActions()\n            ->add(\n                (new LinkGridAction('new_action'))\n                    ->setName($this->trans('New action', [], 'MyModule.Admin.Actions'))\n                    ->setIcon('add_circle') // icon from https://materializecss.com/icons.html by default\n                    ->setOptions([\n                        'route' => 'my_module_specific_route',\n                    ])\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorating a PrestaShop Core Controller Service (Manual Wiring) using YAML\nDESCRIPTION: YAML configuration in `services.yml` demonstrating service decoration. It defines a `custom_controller` service (`MyModule\\Controller\\DemoController`) that decorates the Core `PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController`. The original controller instance is explicitly injected as an argument using the special `@custom_controller.inner` notation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/services.yml\n  custom_controller:\n    class: MyModule\\Controller\\DemoController\n    decorates: PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController\n    arguments: ['@custom_controller.inner']\n```\n\n----------------------------------------\n\nTITLE: Rendering a Hook in Twig Templates - PrestaShop Twig\nDESCRIPTION: This Twig snippet showcases how to render a hook in PrestaShop's twig-based theme templates. The renderHook function is called with the hook name and optionally additional parameters as a second argument. This is valid only within PrestaShop's twig environment. Input: hook name string and params dictionary; Output: rendered hook response. Limitations: must use PrestaShop's version of Twig, and params object must be properly structured.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderHook('hookName', { params }) }}\n```\n\n----------------------------------------\n\nTITLE: Registering Grid Definition Factory as Service in YAML\nDESCRIPTION: Registers a custom grid definition factory as a service in PrestaShop, marking the service as public. This configuration snippet shows how to link the factory implementation to PrestaShop's core grid system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nprestashop.core.grid.definition.factory.product_grid_definition_factory:\n    class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ProductGridDefinitionFactory'\n    parent: 'prestashop.core.grid.definition.factory.abstract_grid_definition'\n    public: true\n```\n\n----------------------------------------\n\nTITLE: Twig Template Rendering Method in PHP\nDESCRIPTION: Helper method that uses Twig to render a template with provided parameters. This simplifies template rendering throughout the module by providing a consistent interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n     * Render a twig template.\n     */\n    private function render(string $template, array $params = []): string\n    {\n        /** @var Twig_Environment $twig */\n        $twig = $this->get('twig');\n\n        return $twig->render($template, $params);\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing PrestaShop Module via CLI (Shell)\nDESCRIPTION: Commands are provided to install and uninstall a PrestaShop module using the Symfony Console. These commands require access to the project directory and use the `prestashop:module` directive.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/console prestashop:module install mymodule\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/console prestashop:module uninstall mymodule\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Values in Multistore Context using PHP\nDESCRIPTION: This PHP code demonstrates how to use the AbstractMultistoreConfiguration class to update configuration values while respecting the multistore context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/configuration-forms/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * This class loads and saves data configuration for the Maintenance page.\n */\nclass MaintenanceConfiguration extends AbstractMultistoreConfiguration\n{\n\n    // .... data loading doesn't change\n\n\n    /**\n     * {@inheritdoc}\n     */\n    public function updateConfiguration(array $configurationInputValues)\n    {\n        $shopConstraint = $this->getShopConstraint();\n\n        // note that $configurationInputValues is an associative array where keys are field names and values are field values, it's the data coming from the form\n\n        $this->updateConfigurationValue('PS_SHOP_ENABLE', 'enable_shop', $configurationInputValues, $shopConstraint);\n        $this->updateConfigurationValue('PS_MAINTENANCE_IP', 'maintenance_ip', $configurationInputValues, $shopConstraint);\n        $this->updateConfigurationValue('PS_MAINTENANCE_TEXT', 'maintenance_text', $configurationInputValues, $shopConstraint, ['html' => true]);\n\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Debug Mode Command Class Reference\nDESCRIPTION: Command class used to toggle the debug mode in PrestaShop. Takes a boolean parameter to enable or disable debug mode and returns void. Handled by SwitchDebugModeHandler which implements SwitchDebugModeHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/configuration/_partials/switch-debug-mode-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Configuration\\Command\\SwitchDebugModeCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Configuration\\CommandHandler\\SwitchDebugModeHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Configuration\\CommandHandler\\SwitchDebugModeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Unregistering Assets in PrestaShop Modules\nDESCRIPTION: Shows how to unregister JavaScript and CSS assets in both front controllers and modules using unregisterJavascript and unregisterStylesheet methods. Each method requires the unique ID of the asset to be removed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// In a front controller\npublic function setMedia()\n{\n    parent::setMedia();\n\n    $this->unregisterJavascript('the-identifier');\n}\n\n// In a module class\npublic function hookActionFrontControllerSetMedia($params)\n{\n  $this->context->controller->unregisterJavascript('the-identifier');\n}\n```\n\n----------------------------------------\n\nTITLE: Calling displayNavFullWidth Hook in PHP\nDESCRIPTION: This snippet shows how to call the displayNavFullWidth hook in a PrestaShop theme template. The hook is used to display a full-width navigation menu at the top of pages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayNavFullWidth.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayNavFullWidth'}\n```\n\n----------------------------------------\n\nTITLE: Manual Tab Installation in PrestaShop Module\nDESCRIPTION: PHP class implementing manual tab installation and uninstallation for a PrestaShop module. Includes methods for install, uninstall, enable, and disable operations with tab management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Language;\n\nclass Example_module_mailtheme extends Module\n{\n    public function install()\n    {\n        return parent::install()\n            && $this->installTab()\n        ;\n    }\n\n    public function uninstall()\n    {\n        return parent::uninstall()\n            && $this->uninstallTab()\n        ;\n    }\n\n    public function enable($force_all = false)\n    {\n        return parent::enable($force_all)\n            && $this->installTab()\n        ;\n    }\n\n    public function disable($force_all = false)\n    {\n        return parent::disable($force_all)\n            && $this->uninstallTab()\n        ;\n    }\n\n    private function installTab()\n    {\n        $tabId = (int) Tab::getIdFromClassName('MyModuleDemoController');\n        if (!$tabId) {\n            $tabId = null;\n        }\n\n        $tab = new Tab($tabId);\n        $tab->active = 1;\n        $tab->class_name = 'MyModuleDemoController';\n        // Only since 1.7.7, you can define a route name\n        $tab->route_name = 'admin_my_symfony_routing';\n        $tab->name = array();\n        foreach (Language::getLanguages() as $lang) {\n            $tab->name[$lang['id_lang']] = $this->trans('My Module Demo', array(), 'Modules.MyModule.Admin', $lang['locale']);\n        }\n        $tab->id_parent = (int) Tab::getIdFromClassName('ShopParameters');\n        $tab->module = $this->name;\n\n        return $tab->save();\n    }\n\n    private function uninstallTab()\n    {\n        $tabId = (int) Tab::getIdFromClassName('MyModuleDemoController');\n        if (!$tabId) {\n            return true;\n        }\n\n        $tab = new Tab($tabId);\n\n        return $tab->delete();\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding TextWithRecommendedLengthType with Validation to a Symfony Form Field in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a multilingual input field for meta descriptions to a Symfony form in the PrestaShop environment, using TextWithRecommendedLengthType to provide both a recommended length counter and maximum character validation. Dependencies include Symfony form components, PrestaShop's custom form types (TextWithRecommendedLengthType, TranslatableType), and constraints such as Length and TypedRegex. Key parameters include 'recommended_length' to suggest an ideal input size and 'maxlength' for enforcing input limits. The expected input is the translated meta description; outputs are validated and length-constrained data for form processing. Limitations include contextual dependencies on class constants and translation services.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/text-with-recommended-length-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('meta_description', TranslatableType::class, [\n    'label' => $this->trans('Meta description', 'Admin.Global'),\n    'type' => TextWithRecommendedLengthType::class,\n    'help' => $invalidCharsText,\n    'required' => false,\n    'options' => [\n        'recommended_length' => self::RECOMMENDED_DESCRIPTION_LENGTH,\n        'attr' => [\n            'maxlength' => self::META_DESCRIPTION_MAX_CHARS,\n        ],\n        'constraints' => [\n            new TypedRegex([\n                'type' => 'generic_name',\n            ]),\n            new Length([\n                'max' => self::META_DESCRIPTION_MAX_CHARS,\n                'maxMessage' => $this->trans(\n                    'This field cannot be longer than %limit% characters',\n                    'Admin.Notifications.Error',\n                    ['%limit%' => self::META_DESCRIPTION_MAX_CHARS]\n                ),\n            ]),\n        ],\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Editing Customer Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This PHP command object encapsulates the logic required to edit an existing customer address. It relies on core PrestaShop command handling and requires the customer address ID and updated data as input. The operation validates new information and persists changes; errors are returned if validation fails or address does not exist.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// EditCustomerAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for editing a customer address\n */\nclass EditCustomerAddressCommand\n{\n    private $addressId;\n    private $addressData;\n\n    public function __construct($addressId, array $addressData)\n    {\n        $this->addressId = $addressId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling the actionDispatcherBefore Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet triggers the 'actionDispatcherBefore' hook by calling the method 'dispatchWithParameters' with the hook name constant and an associated array of parameters. The provided parameter 'controller_type' indicates the type of controller being dispatched. Dependencies include the PrestaShop hook dispatcher system and the correct definition of self::DISPATCHER_BEFORE_ACTION. Expected input is a string identifier for the hook and an associative array of parameters; outputs are hook event propagation within the PrestaShop core. This is primarily for developers extending PrestaShop controller behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDispatcherBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(self::DISPATCHER_BEFORE_ACTION, [\n            'controller_type' => $controllerType,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Meta Command Handler Implementation\nDESCRIPTION: The handler class for the AddMetaCommand which implements the AddMetaHandlerInterface. This handler processes the command and performs the actual meta entity creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/add-meta-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Meta\\CommandHandler\\AddMetaHandler\n```\n\n----------------------------------------\n\nTITLE: Module Installation Handling with Database Setup (PHP)\nDESCRIPTION: This code snippet demonstrates the Installer class, which manages the installation and uninstallation processes of a PrestaShop module. It performs hook registration, database setup, and fixture installation, using the PrestaShop DbCore class for database interactions due to limited Doctrine support. Dependencies include the FixtureInstaller class. Expected outcome is successful installation/uninstallation of module with database table 'order_signature'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/module-base.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * Author  - PrestaShop SA and Contributors\n * License - Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Install;\n\nuse Db;\nuse Module;\n\n/**\n * Class responsible for modifications needed during installation/uninstallation of the module.\n */\nclass Installer\n{\n    /**\n     * @var FixturesInstaller\n     */\n    private $fixturesInstaller;\n\n    public function __construct(FixturesInstaller $fixturesInstaller)\n    {\n        $this->fixturesInstaller = $fixturesInstaller;\n    }\n\n    /**\n     * Module's installation entry point.\n     *\n     * @param Module $module\n     *\n     * @return bool\n     */\n    public function install(Module $module): bool\n    {\n        if (!$this->registerHooks($module)) {\n            return false;\n        }\n\n        if (!$this->installDatabase()) {\n            return false;\n        }\n\n        $this->fixturesInstaller->install();\n\n        return true;\n    }\n\n    /**\n     * Module's uninstallation entry point.\n     *\n     * @return bool\n     */\n    public function uninstall(): bool\n    {\n        return $this->uninstallDatabase();\n    }\n\n    /**\n     * Install the database modifications required for this module.\n     *\n     * @return bool\n     */\n    private function installDatabase(): bool\n    {\n        $queries = [\n            'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'order_signature` (\n              `id_signature` int(11) NOT NULL AUTO_INCREMENT,\n              `id_order` int(11) NOT NULL,\n              `filename` varchar(64) NOT NULL,\n              PRIMARY KEY (`id_signature`),\n              UNIQUE KEY (`id_order`)\n            ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;',\n        ];\n\n        return $this->executeQueries($queries);\n    }\n\n    /**\n     * Uninstall database modifications.\n     *\n     * @return bool\n     */\n    private function uninstallDatabase(): bool\n    {\n        $queries = [\n            'DROP TABLE IF EXISTS `'._DB_PREFIX_.'order_signature`',\n        ];\n\n        return $this->executeQueries($queries);\n    }\n\n    /**\n     * Register hooks for the module.\n     *\n     * @param Module $module\n     *\n     * @return bool\n     */\n    private function registerHooks(Module $module): bool\n    {\n        // Hooks available in the order view page.\n        $hooks = [\n            'displayBackOfficeOrderActions',\n            'displayAdminOrderTabLink',\n            'displayAdminOrderTabContent',\n            'displayAdminOrderMain',\n            'displayAdminOrderSide',\n            'displayAdminOrder',\n            'displayAdminOrderTop',\n            'actionGetAdminOrderButtons',\n        ];\n\n        return (bool) $module->registerHook($hooks);\n    }\n\n    /**\n     * A helper that executes multiple database queries.\n     *\n     * @param array $queries\n     *\n     * @return bool\n     */\n    private function executeQueries(array $queries): bool\n    {\n        foreach ($queries as $query) {\n            if (!Db::getInstance()->execute($query)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Main Module File with Webservice & Database Setup in PrestaShop (PHP)\nDESCRIPTION: Presents a complete PHP main module class for PrestaShop, including construction, hook registration, and database table creation for the new Article entity. The install method ensures hooks are registered and tables are created; installDB constructs SQL CREATE TABLE statements for core and language tables, using PrestaShop constants and property definitions from the Article entity. Also shows the definition of hookAddWebserviceResources, aligning with module best practices; requires PrestaShop core classes and directory structure and expects secure configuration of entity name and database settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/webservice/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nrequire_once _PS_MODULE_DIR_ . 'wsarticle/src/Entity/Article.php';\n\nclass WsArticle extends Module\n{\n    public function __construct()\n    {\n        $this->name = 'wsarticle';\n        $this->tab = 'front_office_features';\n        $this->version = '1.0.0';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->secure_key = Tools::encrypt($this->name);\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->getTranslator()->trans('Extend WS demo module', array(), 'Modules.Wsarticle.Admin');\n    }\n\n    public function install()\n    {\n        return parent::install() &&\n            $this->installDB() && // Create tables in the DB\n            $this->registerHook('addWebserviceResources'); // Register the module to the hook\n    }\n\n    public function installDB()\n    {\n        $sql = 'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.Article::$definition['table'].'` (\n            `id_article` int(10) unsigned NOT NULL AUTO_INCREMENT,\n            `type` varchar(255),\n            `date_add` datetime NOT NULL,\n            `date_upd` datetime NOT NULL,\n            PRIMARY KEY  (`id_article`)\n        ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci';\n\n        $sql_lang = 'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.Article::$definition['table'].'_lang` (\n            `id_article` int(10) unsigned NOT NULL,\n            `id_lang` int(10) unsigned NOT NULL,\n            `title` varchar(255),\n            `content` text NOT NULL,\n            `meta_title` varchar(255) NOT NULL,\n            PRIMARY KEY  (`id_article`, `id_lang`)\n        ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci';\n\n        if (Db::getInstance()->execute($sql) && Db::getInstance()->execute($sql_lang)) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public function hookAddWebserviceResources($params)\n    {\n        return [\n            'articles' => array(\n                'description' => 'Blog articles', // The description for those who access to this resource through WS\n                'class' => 'Article', // The classname of your Entity\n                'forbidden_method' => array('DELETE') // Optional, if you want to forbid some methods\n            )\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submit in PHP Controller\nDESCRIPTION: PHP code snippet demonstrating how to handle form submission in a PrestaShop controller, including form validation and error handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/settings-forms.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$form = $this->get('prestashop.adapter.performance.form_handler')->getForm();\n$form->handleRequest($request);\n\nif ($form->isSubmitted()) {\n    $data = $form->getData();\n    $saveErrors = $this->get('prestashop.adapter.performance.form_handler')->save($data);\n    \n    if (0 === count($saveErrors)) {\n        $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\n        return $this->redirectToRoute('admin_performance');\n    }\n    \n    $this->flashErrors($saveErrors);\n}\n\nreturn $this->redirectToRoute('admin_performance');\n```\n\n----------------------------------------\n\nTITLE: Generating Module Controller URLs with getModuleLink()\nDESCRIPTION: Demonstrates how to generate URLs for module controllers with various parameters using the Link component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/link.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// get your module's default controller URL\n$link = $context->link->getModuleLink('mymodulename');\n\n// get your module's specific controller URL\n$link = $context->link->getModuleLink('mymodulename', 'controllerName');\n\n// get your module's specific controller URL with params\n$params = [\n    'id_item' => 2,\n    'action' => 'showTodo'\n];\n$link = $context->link->getModuleLink('mymodulename', 'controllerName', $params);\n```\n\n----------------------------------------\n\nTITLE: Implementing ManufacturerFilters Class (PHP)\nDESCRIPTION: This snippet shows how to create a Filters class for manufacturers. It defines default filter values and sorting options, which are used to initialize the grid's state.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ManufacturerGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Search\\Filters;\n\n/**\n * Class ManufacturerFilters is responsible for providing filter values for manufacturer grid.\n */\nfinal class ManufacturerFilters extends Filters\n{\n    /** @var string */\n    protected $filterId = ManufacturerGridDefinitionFactory::GRID_ID;\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getDefaults()\n    {\n        return [\n            'limit' => 10,\n            'offset' => 0,\n            'orderBy' => 'name',\n            'sortOrder' => 'asc',\n            'filters' => [],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Forms with HelperForm in a Native Module (PHP)\nDESCRIPTION: This snippet shows an implementation of the 'renderForm()' protected method in a PrestaShop module, which prepares the form definition array, instantiates HelperForm, and generates the form's HTML using 'generateForm'. It assumes prior definition of the form array and references additional settings required. Inputs are module configuration arrays; output is rendered HTML for administration interfaces. Dependencies include HelperForm and a valid module context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return string\n*/\nprotected function renderForm()\n{\n   $form = [\n      // ... form declaration as described on this page\n      // refer to https://github.com/PrestaShop/contactform/blob/v4.4.1/contactform.php#L120-L189\n      // for complete implementation\n   ];\n\n   $helper = new HelperForm();\n   // HelperForm settings, refer to https://github.com/PrestaShop/contactform/blob/v4.4.1/contactform.php#L190-L201\n   // for complete implementation\n\n   return $helper->generateForm([$form]);\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Command Handler Implementation\nDESCRIPTION: Handler class implementation path that processes the EditCurrencyCommand, including the interface it implements\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/edit-currency-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\EditOfficialCurrencyHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Product Status Feature Test in Gherkin\nDESCRIPTION: A Behat feature file demonstrating how to test product status updates in the Back Office. Shows the standard Given-When-Then structure for testing product enable/disable functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Update product status from BO (Back Office)\n  As an employee I must be able to update product status (enable/disable)\n\n  Scenario: I update standard product status\n    Given I add product \"product1\" with following information:\n      | name[en-US] | Values list poster nr. 1 (paper) |\n      | type        | standard                         |\n    And product product1 type should be standard\n    And product \"product1\" should be disabled\n    When I enable product \"product1\"\n    Then product \"product1\" should be enabled\n    When I disable product \"product1\"\n    Then product \"product1\" should be disabled\n```\n\n----------------------------------------\n\nTITLE: Defining PrestaShop Version Compatibility in PHP\nDESCRIPTION: Specifies the compatible PrestaShop versions for this module. PrestaShop will refuse installation if the shop version is outside this range.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->ps_versions_compliancy = [\n    'min' => '1.6',\n    'max' => '1.7.6.2',\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Customer Grid Query Builder in PHP\nDESCRIPTION: This code demonstrates how to modify the query builder for the Customer grid to add a count of orders for each customer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hookActionCustomerGridQueryBuilderModifier(array $params)\n{\n    $searchQueryBuilder = $params['search_query_builder'];\n\n    $searchQueryBuilder->addSelect('COUNT(o.id_order) as nb_orders')\n        ->from(_DB_PREFIX_.'orders o')\n    ;\n\n    $countQueryBuilder = $params['count_query_builder'];\n\n    // So the pagination and the number of customers\n    // retrieved will be right.\n    $countQueryBuilder->addSelect('COUNT(o.id_order) as nb_orders')\n        ->from(_DB_PREFIX_.'orders o')\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Test for Symfony Controllers in PrestaShop\nDESCRIPTION: This example demonstrates how to create a functional test for a Symfony controller by extending the PrestaShop WebTestCase class. The test method makes a GET request to a generated route and verifies if the response is successful. This approach follows PrestaShop's recommended testing pattern for Symfony controllers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-symfony-controller-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Tests\\Functional\\Foo;\n\nuse Tests\\Integration\\PrestaShopBundle\\Test\\WebTestCase;\n\nclass BarTest extends WebTestCase\n{\n    public function testSomeAction()\n    {\n        $url = this->router->generate('route_name');\n        $this->client->request('GET', $url);\n        \n        $response = $this->client->getResponse();\n        \n        self::assertTrue($response->isSuccessful());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multilingual ObjectModel Definition in PHP\nDESCRIPTION: Demonstrates how to configure an ObjectModel for multilingual support by setting the multilang flag and declaring translatable fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic static $definition = [\n    ...\n    'multilang' => true,\n    ...\n```\n\nLANGUAGE: php\nCODE:\n```\n'fields' => array(\n    ...\n    'meta_description' => [\n        ...\n        'lang' => true,\n        ...\n    ],\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Controller Actions (Symfony Routing - YAML)\nDESCRIPTION: This YAML route definition file maps an HTTP GET request (to path your-module/demo) to the demoAction method of the module controller. The _controller attribute defines the fully qualified class and method reference using the double colon syntax. The file must be located in the module's config directory. Correct routing is required for the controller to be accessible through the PrestaShop admin back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/routes.yml\\nyour_route_name:\\n    path: your-module/demo\\n    methods: [GET]\\n    defaults:\\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\n```\n\n----------------------------------------\n\nTITLE: Executing a PrestaShop Hook for Delivery Price by Weight (PHP)\nDESCRIPTION: This snippet demonstrates how to call the actionDeliveryPriceByWeight hook using PrestaShop's Hook::exec method inside the Carrier.php core class. It passes the carrier ID, total order weight, and zone ID to hooked modules, enabling them to influence or react to delivery pricing logic. Requires PrestaShop core environment and Hook class; expects an associative array as input and is intended for module extensibility points within the PrestaShop framework.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDeliveryPriceByWeight.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionDeliveryPriceByWeight', ['id_carrier' => $id_carrier, 'total_weight' => $total_weight, 'id_zone' => $id_zone])\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Form with HelperForm in PHP for PrestaShop\nDESCRIPTION: This code snippet shows how to create a configuration form using HelperForm in a PrestaShop module. It defines the form structure, sets up HelperForm properties, and generates the HTML for the form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function displayForm()\n{\n    // Init Fields form array\n    $form = [\n        'form' => [\n            'legend' => [\n                'title' => $this->l('Settings'),\n            ],\n            'input' => [\n                [\n                    'type' => 'text',\n                    'label' => $this->l('Configuration value'),\n                    'name' => 'MYMODULE_CONFIG',\n                    'size' => 20,\n                    'required' => true,\n                ],\n            ],\n            'submit' => [\n                'title' => $this->l('Save'),\n                'class' => 'btn btn-default pull-right',\n            ],\n        ],\n    ];\n\n    $helper = new HelperForm();\n\n    // Module, token and currentIndex\n    $helper->table = $this->table;\n    $helper->name_controller = $this->name;\n    $helper->token = Tools::getAdminTokenLite('AdminModules');\n    $helper->currentIndex = AdminController::$currentIndex . '&' . http_build_query(['configure' => $this->name]);\n    $helper->submit_action = 'submit' . $this->name;\n\n    // Default language\n    $helper->default_form_language = (int) Configuration::get('PS_LANG_DEFAULT');\n\n    // Load current value into the form\n    $helper->fields_value['MYMODULE_CONFIG'] = Tools::getValue('MYMODULE_CONFIG', Configuration::get('MYMODULE_CONFIG'));\n\n    return $helper->generateForm([$form]);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Positions in a Controller Action (PHP)\nDESCRIPTION: This PHP controller method processes position update requests in the context of a PrestaShop grid. It retrieves data from the request, validates and constructs PositionUpdate objects, and performs updates using GridPositionUpdater. The action provides user feedback and manages errors, integrating with PrestaShop's admin UI. Dependencies include service injection, input validation, and adherence to PrestaShop and Symfony conventions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design;\\n\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate;\\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\\nuse PrestaShopBundle\\Security\\Annotation\\ModuleActivated;\\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\\nuse Symfony\\Component\\HttpFoundation\\Request;\\nuse Symfony\\Component\\HttpFoundation\\Response;\\n\\n/**\\n * Class LinkBlockController.\\n *\\n * @ModuleActivated(moduleName=\"ps_linklist\", redirectRoute=\"admin_module_manage\")\\n */\\nclass LinkBlockController extends FrameworkBundleAdminController {\\n    /**\\n     * @AdminSecurity(\"is_granted('update', request.get('_legacy_controller'))\", message=\"Access denied.\")\\n     *\\n     * @param Request $request\\n     * @param int $hookId\\n     *\\n     * @throws \\Exception\\n     *\\n     * @return RedirectResponse\\n     */\\n    public function updatePositionsAction(Request $request, $hookId)\\n    {\\n        $positionsData = [\\n            'positions' => $request->request->get('positions', null),\\n            'parentId' => $hookId,\\n        ];\\n\\n        /** @var PositionDefinition $positionDefinition */\\n        $positionDefinition = $this->get('prestashop.module.link_block.grid.position_definition');\\n        /** @var PositionUpdateFactory $positionUpdateFactory */\\n        $positionUpdateFactory = $this->get('prestashop.core.grid.position.position_update_factory');\\n        try {\\n            /** @var PositionUpdate $positionUpdate */\\n            $positionUpdate = $positionUpdateFactory->buildPositionUpdate($positionsData, $positionDefinition);\\n        } catch (PositionDataException $e) {\\n            $errors = [$e->toArray()];\\n            $this->flashErrors($errors);\\n\\n            return $this->redirectToRoute('admin_link_block_list');\\n        }\\n\\n        /** @var GridPositionUpdaterInterface $updater */\\n        $updater = $this->get('prestashop.core.grid.position.doctrine_grid_position_updater');\\n        try {\\n            $updater->update($positionUpdate);\\n            $this->clearModuleCache();\\n            $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\\n        } catch (PositionUpdateException $e) {\\n            $errors = [$e->toArray()];\\n            $this->flashErrors($errors);\\n        }\\n\\n        return $this->redirectToRoute('admin_link_block_list');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Tab Registration in Module Constructor\nDESCRIPTION: PHP implementation of automatic tab registration using the $tabs property in a PrestaShop module constructor. Includes multilingual support and route configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// yourmodule/ps_linklist.php\nuse Language;\n\nclass Ps_Linklist extends Module\n{\n    public function __construct() {\n        // ...\n        $tabNames = [];\n        foreach (Language::getLanguages(true) as $lang) {\n            $tabNames[$lang['locale']] = $this->trans('Link List', array(), 'Modules.Linklist.Admin', $lang['locale']);\n        }\n        $this->tabs = [\n            [\n                'route_name' => 'admin_link_block_list',\n                'class_name' => 'AdminLinkWidget',\n                'visible' => true,\n                'name' => $tabNames,\n                'parent_class_name' => 'AdminParentThemes',\n                'wording' => 'Link List',\n                'wording_domain' => 'Modules.Linklist.Admin'\n            ],\n        ];\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPickerType in OrderStateType Form\nDESCRIPTION: Example of adding a required color picker field to a form builder in PrestaShop. This snippet shows how to integrate the ColorPickerType into an OrderStateType form configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/color-picker-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('color', ColorPickerType::class, [\n    'required' => true,\n])\n```\n\n----------------------------------------\n\nTITLE: OrderSignaturePresenter Implementation in PHP\nDESCRIPTION: Class responsible for presenting order signature data in a format ready for display. It takes a signature entity and language ID, fetches additional order and customer data, and returns an array with formatted information including the path to the signature image.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Presenter;\n\nuse Gender;\nuse Order;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Entity\\OrderSignature;\n\nclass OrderSignaturePresenter\n{\n    /**\n     * @var string\n     */\n    private $signatureImgDir;\n\n    public function __construct(string $signatureImgDir)\n    {\n        $this->signatureImgDir = $signatureImgDir;\n    }\n\n    public function present(OrderSignature $signature, int $languageId): array\n    {\n        $order = new Order($signature->getOrderId());\n        $customer = $order->getCustomer();\n        $gender = new Gender($customer->id_gender, $languageId);\n\n        return [\n            'firstName' => $customer->firstname,\n            'lastName' => $customer->lastname,\n            'gender' => $gender->name,\n            'imagePath' => $this->signatureImgDir.$signature->getFilename()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Notifications in PHP Front Controller\nDESCRIPTION: This PHP snippet shows how to add a custom success message and redirect the customer with notifications in a PrestaShop front controller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->success[] = $this->l('Information successfully updated.');\n$this->redirectWithNotifications($this->getCurrentURL());\n```\n\n----------------------------------------\n\nTITLE: Rendering a Translated String in PrestaShop Email Template using Twig - Twig\nDESCRIPTION: This Twig snippet shows how to output a translated string in a PrestaShop email template, leveraging the 'trans' filter with context parameters. Dependencies include Twig and the PrestaShop translation domain ('EmailsBody'). The key parameter is 'locale', which determines the target language of the translation. The output is an HTML table row displaying the translated title string, with the translation evaluated at render time and HTML output left intentionally raw. Designed for use inside an email layout, the snippet requires surrounding PrestaShop translation infrastructure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/mail-templates/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n  <table width=\"100%\">\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"title\">{{ 'This is a translated string'|trans({}, 'EmailsBody', locale)|raw }}</span>\n        </font>\n      </td>\n    </tr>\n  </table>\n\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Repository Service in a Module Hook (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to access and use the custom `ProductRepository` service (defined in `services.yml`) within the `hookDisplayDashboardToolbarIcons` method of the PrestaShop module (`foo.php`). It retrieves the service from the container using `$this->get('product_repository')`, calls the `findAllByLangId` method to fetch products, and then uses `dump()` to output the results to the debug toolbar for verification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// foo.php\n\n/* ... */\n/**\n * Get the list of products for a specific lang.\n */\npublic function hookDisplayDashboardToolbarIcons($hookParams)\n{\n    if ($this->isSymfonyContext() && $hookParams['route'] === 'admin_product_catalog') {\n        $products = $this->get('product_repository')->findAllByLangId(1);\n        dump($products);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Form Template in Twig/HTML\nDESCRIPTION: This HTML code snippet, written using the Twig templating engine, defines the structure for rendering the module's configuration form in the PrestaShop back office. It extends the standard admin layout (`@PrestaShop/Admin/layout.html.twig`), uses Twig form helper functions (`form_start`, `form_widget`, `form_end`) to render the form associated with the `demoConfigurationForm` variable (passed from the controller), and includes standard card layout elements with translated titles and a save button.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% extends '@PrestaShop/Admin/layout.html.twig' %}\n\n{% block content %}\n  {{ form_start(demoConfigurationForm) }}\n  <div class=\"card\">\n    <h3 class=\"card-header\">\n      <i class=\"material-icons\">settings</i> {{ 'Text form types'|trans({}, 'Modules.Demosymfonyformsimple.Admin') }}\n    </h3>\n    <div class=\"card-body\">\n      <div class=\"form-wrapper\">\n        {{ form_widget(demoConfigurationForm) }}\n      </div>\n    </div>\n    <div class=\"card-footer\">\n      <div class=\"d-flex justify-content-end\">\n        <button class=\"btn btn-primary float-right\" id=\"save-button\">\n          {{ 'Save'|trans({}, 'Admin.Actions') }}\n        </button>\n      </div>\n    </div>\n  </div>\n  {{ form_end(demoConfigurationForm) }}\n{% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Theme Properties in YAML\nDESCRIPTION: This snippet demonstrates how to define basic theme properties including name, display name, version, author information, and compatibility settings in the theme.yml file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  name: mysupertheme # The name must match the directory name\n  display_name: My Super Theme\n  version: 1.0.0\n  author:\n    name: \"John Doe\"\n    email: \"pub@prestashop.com\"\n    url: \"https://www.prestashop-project.org\"\n  meta:\n    compatibility:\n        from: 8.0\n        to: ~\n    available_layouts:\n      layout-full-width:\n        name: Full width layout\n        description: Ideal for product pages to maximize picture size\n      layout-left-side-column:\n        name: One small left column\n        description: Great for CMS pages to show advertisements on the side\n```\n\n----------------------------------------\n\nTITLE: Calling a Hook in a Controller (Legacy) - PrestaShop PHP\nDESCRIPTION: This PHP code demonstrates how to execute a hook from within a legacy PrestaShop controller. It assigns the output of Hook::exec('displayLeftColumn') to the Smarty template variable HOOK_LEFT_COLUMN, thereby rendering hook content in the designated template location. The code assumes access to $this->context->smarty and the Hook class. Input: none except the hook name; Output: the evaluated hook output assigned to a template variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->context->smarty->assign(\n    'HOOK_LEFT_COLUMN',\n    Hook::exec('displayLeftColumn')\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks in PrestaShop Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to register hooks to modify a PrestaShop administration page form by adding and validating a new field. It utilizes PrestaShop's hook system and Symfony Form component, requiring dependencies on PrestaShop and Symfony Form classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/forms/admin-forms.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n# /modules/module_name/module_name.php\n\npublic function hookActionAdministrationPageForm(&$hookParams)\n{\n    $formBuilder = $hookParams['form_builder'];\n    $uploadQuotaForm = $formBuilder->get('upload_quota');\n    $uploadQuotaForm->add(\n        'description', \n        TextType::class, \n        [\n            'data' => 'A description',\n            'label' => 'Description'\n        ]\n    );\n}\n\npublic function hookActionAdministrationPageSave(&$hookParams)\n{\n    // retrieve and validate the data\n    dump($hookParams['form_data']['upload_quota']['description']);\n\n    // if the data is invalid, populate `errors` array\n    dump($hookParams['errors']);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Actions to Grid Definition in PHP\nDESCRIPTION: This snippet demonstrates how to add bulk actions (Enable, Disable, Delete) to a Customer grid definition using the BulkActionCollection in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-bulk-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php // src/Core/Grid/Definition/Factory/CustomerGridDefinitionFactory.php\n\nfinal class CustomerGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    // ...\n\n    protected function getBulkActions()\n    {\n        return (new BulkActionCollection())\n            ->add(\n                (new SubmitBulkAction('enable_selection'))\n                ->setName($this->trans('Enable selection', [], 'Admin.Actions'))\n                ->setOptions([\n                    'submit_route' => 'admin_customers_enable_bulk',\n                ])\n            )\n            ->add(\n                (new SubmitBulkAction('disable_selection'))\n                ->setName($this->trans('Disable selection', [], 'Admin.Actions'))\n                ->setOptions([\n                    'submit_route' => 'admin_customers_disable_bulk',\n                ])\n            )\n            ->add((new DeleteCustomersBulkAction('delete_selection'))\n                ->setName($this->trans('Delete selected', [], 'Admin.Actions'))\n                ->setOptions([\n                    'customers_bulk_delete_route' => 'admin_customers_delete_bulk',\n                ])\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hook Callback in PrestaShop Module\nDESCRIPTION: This example illustrates how to implement a callback function for a subscribed hook in a PrestaShop module. It shows the naming convention for the callback and how it's called when the hook is dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/subscribing-to-hook.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Somemodule extends Module\n{\n    public function install()\n    {\n        return parent::install() && $this->registerHook('registerGDPRConsent');\n    }\n\n    public function hookRegisterGDPRConsent($parameters)\n    {\n    \t// This is where you can modify/alter the behavior of PrestaShop.\n    \t// The content of $parameters will depend on what is sent when the hook is dispatched.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EntitySearchInputType in Product Description Form\nDESCRIPTION: Example showing how to add related products search functionality to a form using EntitySearchInputType. The implementation includes configuration for remote URL searching, minimum search length, filtering, and placeholder text. The form field allows searching and associating related products while excluding the current product ID from results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/entity-search-input-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('related_products', EntitySearchInputType::class, [\n    'label' => $this->trans('Related products', 'Admin.Catalog.Feature'),\n    'label_tag_name' => 'h3',\n    'entry_type' => RelatedProductType::class,\n    'entry_options' => [\n        'block_prefix' => 'related_product',\n    ],\n    'remote_url' => $this->router->generate('admin_products_v2_search_associations', [\n        'languageCode' => $this->employeeIsoCode,\n        'query' => '__QUERY__',\n    ]),\n    'min_length' => 3,\n    'filtered_identities' => $productId > 0 ? [$productId] : [],\n    'placeholder' => $this->trans('Search product', 'Admin.Catalog.Help'),\n])\n```\n\n----------------------------------------\n\nTITLE: Using AddressSettings Constants for Validation in PHP\nDESCRIPTION: Example of using constants from an AddressSettings class for validation rules. This approach is recommended for simple validations where a full value object is not necessary.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/validation/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Address extends ObjectModel\n{\n    // ...\n    public $address1;\n    // ...\n    public static $definition = [\n        'fields' => [\n            'address1' => ['type' => self::TYPE_STRING, 'validate' => 'isAddress', 'required' => true, 'size' => AddressSettings::MAX_ADDRESS_LENGTH],\n            // ...\n        ],\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer List with PrestaShopWebservice::get in PHP\nDESCRIPTION: This snippet demonstrates how to use the PrestaShopWebservice class to retrieve a list of all customers. It initializes the webservice with the store URL and authentication key, then makes a request using the 'get' method with 'customers' as the resource parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/listing-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n \n    // call to retrieve all customers\n    $xml = $webService->get(['resource' => 'customers']);\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filter with ProfileChoiceType in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a filter to an employee grid using ProfileChoiceType. It sets the filter type options, indicating that the 'profile' field is not required and associates it with a column. Dependencies include PrestaShop Grid and ProfileChoiceType class. The main parameters include 'profile', ProfileChoiceType::class', and configuration options such as 'required'. Outputs are directly related to grid filtering functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/profile-choice-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n->add(\n    (new Filter('profile', ProfileChoiceType::class))\n        ->setTypeOptions([\n            'required' => false,\n        ])\n        ->setAssociatedColumn('profile')\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming a DTO Returned by a Query Handler in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use an implementation of the `GetCustomerForEditingHandlerInterface`. It calls the `handle` method with a query object (`$query`) and receives an `EditableCustomer` DTO (`$editableCustomer`). It then accesses the customer's first name using the DTO's getter method (`getFirstName()`), highlighting the benefit of not needing to check for the existence of the data key, as the DTO guarantees its structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/data-transfer-objects.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\EditableCustomer;\n\n/** EditableCustomer $editableCustomer */\n$editableCustomer = $handler->handle($query);\n\n// You don't need to add additional assertions to see if customer's first name exists\n// as DTO explicity provides you it via getter method.\n$editableCustomer->getFirstName();\n```\n\n----------------------------------------\n\nTITLE: Configuring PositionColumn in PrestaShop Grid - PHP\nDESCRIPTION: Demonstrates how to instantiate and configure the PositionColumn type for a PrestaShop grid using PHP. Includes setting required options such as id_field, position_field, update_route, update_method, and record_route_params. The snippet relies on classes from PrestaShop\\Core\\Grid\\Column, and must be used within a context where grid columns are defined. Expects field names from the corresponding database or record set. Outputs a fully-configured PositionColumn added to a ColumnCollection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/position.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\PositionColumn;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\\n\\n$positionColumn = new PositionColumn('position');\\n$positionColumn->setName('Position');\\n$positionColumn->setOptions([\\n     'id_field' => 'id_link_block',\\n     'position_field' => 'position',\\n     'update_route' => 'admin_link_block_update_positions',\\n     'update_method' => 'POST',\\n     'record_route_params' => [\\n         'id_hook' => 'hookId',\\n     ],\\n]);\\n\\n$columns = new ColumnCollection();\\n$columns->add($positionColumn);\n```\n\n----------------------------------------\n\nTITLE: Adding a Translatable Choice Field with TranslatableChoiceType (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to add a translatable choice field to a Symfony form builder in PrestaShop using TranslatableChoiceType. It configures a template field with a hint (including translation capabilities), required status, available choices, and custom row attributes. Required dependencies include Symfony Form and PrestaShop's TranslatableChoiceType class. Key parameters are the available templates in 'choices', translation hints through 'hint', and any relevant attributes in 'row_attr'. Input is the form builder object, and output is a form field capable of multilingual choice selection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/translatable-choice-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('template', TranslatableChoiceType::class, [\n    'hint' => sprintf(\n        '%s<br>%s',\n        $this->trans('Only letters, numbers and underscores (\"_\") are allowed.', 'Admin.Shopparameters.Help'),\n        $this->trans('Email template for both .html and .txt.', 'Admin.Shopparameters.Help')\n    ),\n    'required' => false,\n    'choices' => $this->templates,\n    'row_attr' => $this->templateAttributes,\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Full HTML Layout Structure in Smarty\nDESCRIPTION: This snippet demonstrates a typical PrestaShop layout file written in Smarty. It includes the basic HTML structure with blocks for head, header, content, footer, and other key page elements. The layout uses hooks and includes partial templates for modular structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/templates-layouts.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n<!doctype html>\n<html lang=\"{$language.iso_code}\">\n\n<head>\n  {block name='head'}\n    {include file='_partials/head.tpl'}\n  {/block}\n</head>\n\n<body id=\"{$page.page_name}\" class=\"{$page.body_classes|classnames}\">\n\n  {hook h='displayAfterBodyOpeningTag'}\n\n  <main>\n\n    <header id=\"header\">\n      {block name='header'}\n        {include file='_partials/header.tpl'}\n      {/block}\n    </header>\n\n    <section id=\"wrapper\">\n      <div class=\"container\">\n\n        {block name='breadcrumb'}\n          {include file='_partials/breadcrumb.tpl'}\n        {/block}\n\n        {block name=\"left_column\"}\n          <div id=\"left-column\">\n            {if $page.page_name == 'product'}\n              {hook h='displayLeftColumnProduct'}\n            {else}\n              {hook h=\"displayLeftColumn\"}\n            {/if}\n          </div>\n        {/block}\n\n        {block name=\"content_wrapper\"}\n          <div id=\"content-wrapper\">\n            {block name=\"content\"}\n              <p>Hello world! This is HTML5 Boilerplate.</p>\n            {/block}\n          </div>\n        {/block}\n\n      </div>\n    </section>\n\n    <footer id=\"footer\">\n      {block name=\"footer\"}\n        {include file=\"_partials/footer.tpl\"}\n      {/block}\n    </footer>\n\n  </main>\n\n  {hook h='displayBeforeBodyClosingTag'}\n\n  {block name='javascript_bottom'}\n    {include file=\"_partials/javascript.tpl\" javascript=$javascript.bottom}\n  {/block}\n\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining OrderSignature Entity in PHP for PrestaShop\nDESCRIPTION: Creates an OrderSignature entity class using Doctrine ORM annotations. It maps to the order_signature table and is associated with the OrderSignatureRepository.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Table()\n * @ORM\\Entity(repositoryClass=\"PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository\")\n */\nclass OrderSignature\n{\n    /**\n     * @var int|null\n     *\n     * @ORM\\Id\n     * @ORM\\Column(name=\"id_signature\", type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @var int\n     *\n     * @ORM\\Column(name=\"id_order\", type=\"integer\")\n     */\n    private $orderId;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(name=\"filename\", type=\"string\")\n     */\n    private $filename;\n\n    // Getters and setters...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cart ID Constructor Parameter (PHP)\nDESCRIPTION: Represents the integer Cart ID (`$cartId`) required by the `EditCartAddressCommand` constructor. This identifies the specific cart whose address needs editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $cartId`\n```\n\n----------------------------------------\n\nTITLE: Extending CarrierModule in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how to define a custom carrier module by extending the PrestaShop CarrierModule class instead of the generic Module class. This is a foundational requirement for creating a shipping module in PrestaShop. No external dependencies beyond the PrestaShop module system are needed. The class must implement specific methods for shipping computation to function correctly as a carrier module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/carrier/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyOwnCarrier extends CarrierModule\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PHP\nDESCRIPTION: Demonstrates how to execute a custom hook from a PHP file using the Hook::exec() method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/hooks/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nHook::exec('MyCustomHook');\n```\n\n----------------------------------------\n\nTITLE: Invoking displayShoppingCart Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayShoppingCart hook within a PrestaShop theme template. The hook allows for the insertion of additional action buttons in the shopping cart interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayShoppingCart.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayShoppingCart'}\n```\n\n----------------------------------------\n\nTITLE: Defining a Domain-Specific Exception Class in PrestaShop (PHP)\nDESCRIPTION: Defines a custom exception class, CannotEditCategoryException, for the Category domain. It inherits from CategoryException (which itself extends the generic DomainException), allowing developers to signal a specific failure when editing a category fails. No parameters or dependencies are present besides PHP's exception hierarchy; the exception is thrown and caught as part of domain-level logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/domain-exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Category\\\\Exception;\\n\\n/**\\n * Class CannotEditCategoryException is thrown when editing category fails.\\n */\\nclass CannotEditCategoryException extends CategoryException\\n{\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Reduction Field in PrestaShop Form - PHP\nDESCRIPTION: This snippet shows how to add a 'reduction' field to a form using the PriceReductionType. It includes constraints to validate reduction values, ensuring percentages stay within an allowed range and amounts are not negative, with error messages translatable to different languages. This requires the Reduction constraint and a translator for error messages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/price-reduction-type.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('reduction', PriceReductionType::class, [\n    'constraints' => [\n        new Reduction([\n            'invalidPercentageValueMessage' => $this->translator->trans(\n                'Reduction value \"%value%\" is invalid. Allowed values from 0 to %max%',\n                ['%max%' => ReductionVO::MAX_ALLOWED_PERCENTAGE . '%'],\n                'Admin.Notifications.Error'\n            ),\n            'invalidAmountValueMessage' => $this->translator->trans(\n                'Reduction value \"%value%\" is invalid. Value cannot be negative',\n                [],\n                'Admin.Notifications.Error'\n            ),\n        ]),\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating API Access Key Programmatically in PHP\nDESCRIPTION: Code for creating a new API access key by instantiating the WebserviceKey class. This creates the authentication credentials required to access the API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/creating-access.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$apiAccess = new WebserviceKey();\n$apiAccess->key = 'GENERATE_A_COMPLEX_VALUE_WITH_32_CHARACTERS';\n$apiAccess->save();\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Attribute in PrestaShop\nDESCRIPTION: In this XML snippet, a new product attribute is created using a POST request to the /api/product_options endpoint. The attribute can be configured as a select or radio type, or as a color group if it represents a swatch. Necessary to control product variations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product_option>\n        <is_color_group><![CDATA[0]]></is_color_group>\n        <group_type><![CDATA[select]]></group_type>\n        <name>\n            <language id=\"1\"><![CDATA[{{attribute_name}}]]></language>\n        </name>\n        <public_name>\n            <language id=\"1\"><![CDATA[{{attribute_name}}]]></language>\n        </public_name>\n    </product_option>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Enabling Symfony Serializer Component in PrestaShop (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to enable the Symfony Serializer component within the main PrestaShop application configuration file (`app/config/services.yml`). This might be necessary for certain PrestaShop versions (like 1.7.3) where the serializer is not enabled by default. Enabling it makes the `serializer` service available in the container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# app/config/services.yml\nservices:\n\n# Enables the serializer\n\nframework:\n    serializer: { enable_annotations: true }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results from PrestaShopCollection in PHP\nDESCRIPTION: Illustrates various methods to access items in a PrestaShopCollection, including getting the first and last items, accessing by index, iterating with foreach, and counting the collection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$productCollection = new PrestaShopCollection('Product');\n\n$firstProduct = $productCollection->getFirst();\n$lastProduct = $productCollection->getLast();\n\n// you can access items in the collection by index, like in a regular array (this class implements ArrayAccess). The index starts at 0\n$thirdProduct = $productCollection[2]; \n\n// The collection is also iterable (the class implements Iterator): \nforeach ($productCollection as $product) {\n\n}\n\n// Or you can use the count() function (the class implements Countable):\ncount($productCollection);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Email Layout Template with Variables in Twig\nDESCRIPTION: This Twig template extends the modern email theme layout and adds a custom message variable. It demonstrates how to create a customizable email template that can be populated with variables from a module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-layout-variables-from-module.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# modules/my_email_theme_module/mails/layout/customizable_modern_layout.html.twig #}\n{% extends '@MailThemes/modern/components/layout.html.twig' %}\n\n{% block content %}\n  <table width=\"100%\">\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"title\">{{ 'This is an example mail template from my module for modern theme'|trans({}, 'EmailsBody', locale)|raw }}</span>\n        </font>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"subtitle\">{{ customMessage }}</span>\n        </font>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"space_footer\">&nbsp;</td>\n    </tr>\n  </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Currency Command Handler Interface\nDESCRIPTION: Interface definition that the EditCurrencyCommand handler implements\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/edit-currency-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\EditCurrencyHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PSR-4 Autoload Configuration for Module (Composer - JSON)\nDESCRIPTION: This JSON code block sets the composer autoload rules for the module code, enabling PSR-4 autoloading of controllers and other classes under the MyModule\\\\Controller namespace. The autoload field maps the namespace to the filesystem directory, and other metadata describe the module. After updates, running 'composer dumpautoload' is required. This file is necessary for automatic class loading in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"you/your-module\",\\n  \"description\": \"...\",\\n  \"autoload\": {\\n    \"psr-4\": {\\n      \"MyModule\\\\\\\\Controller\\\\\\\\\": \"src/Controller/\"\\n    }\\n  },\\n  \"config\": {\\n      \"prepend-autoloader\": false\\n  },\\n  \"type\": \"prestashop-module\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Static Strings in Smarty Templates – PrestaShop – Smarty\nDESCRIPTION: Demonstrates how to use the {l} Smarty tag in a .tpl file to mark strings for translation in PrestaShop. The example specifies the text to translate via the 's' parameter and defines its translation domain with 'd'. This allows the string to be detected by the translation interface and translated at runtime; no external dependencies are required beyond PrestaShop's templating system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_5\n\nLANGUAGE: smarty\nCODE:\n```\n{* file: somefile.tpl *}\n\n{l s='Welcome to this page!' d='Modules.Mymodule.Somefile'}\n```\n\n----------------------------------------\n\nTITLE: Dispatching FormBuilderModifier Hook with Dynamic Event Name - PrestaShop PHP\nDESCRIPTION: This code snippet demonstrates how the PrestaShop Core dispatches the dynamic 'action<FormName>FormBuilderModifier' hook using the hookDispatcher. It constructs the event name at runtime by camelizing the formBuilder name and passes an associative array with key parameters by reference: 'form_builder', 'data', 'options', and 'id'. This enables modules to modify form builder data and the form building process. Dependencies include the PrestaShop hookDispatcher and a properly instantiated formBuilder object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<FormName>FormBuilderModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->hookDispatcher->dispatchWithParameters('action' . $this->camelize($formBuilder->getName()) . 'FormBuilderModifier', [\n    'form_builder' => $formBuilder,\n    'data' => &$data,\n    'options' => &$options,\n    'id' => $id\n]);\n```\n\n----------------------------------------\n\nTITLE: Forcing Maintenance Mode for a PrestaShop Front Controller (PHP)\nDESCRIPTION: Demonstrates how to make a specific front controller display the shop's maintenance page, even if the shop is globally active. This is done by setting the protected property `$maintenance` to `true` within the controller class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected $maintenance = true;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring IconButtonType Form Button in PrestaShop PHP\nDESCRIPTION: Example showing how to add an IconButtonType button to a form builder. The button includes a material icon, label text, and routing configuration. It demonstrates setting up a catalog link button with custom styling and navigation attributes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/icon-button-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('catalog', IconButtonType::class, [\n    'label' => $this->trans('Go to catalog', 'Admin.Catalog.Feature'),\n    'type' => 'link',\n    'icon' => 'arrow_back_ios',\n    'attr' => [\n        'class' => 'btn-outline-secondary border-white go-to-catalog-button',\n        'href' => $this->router->generate('admin_products_v2_index', ['offset' => 'last', 'limit' => 'last']),\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Executing DisplayBackOfficeHeader Hook in PHP\nDESCRIPTION: This snippet shows how the displaybackOfficeHeader hook is called in PrestaShop's core. It is executed in the header of the admin panel and doesn't return an array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBackOfficeHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displaybackOfficeHeader')\n```\n\n----------------------------------------\n\nTITLE: Manually Initializing/Overriding a Global Component in JavaScript\nDESCRIPTION: Illustrates how to manually override a standard global component ('TranslatableField') with a custom implementation (`MyCustomTranslatableField`) after the initial components are ready. It listens for the 'PSComponentsInitiated' event and then replaces both the component constructor and its existing instance within the `window.prestashop.component` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/global-components.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nEventEmitter.on('PSComponentsInitiated', () => {\n  window.prestashop.component.TranslatableField = MyCustomTranslatableField;\n\n  if (window.prestashop.component.instance.translatableField) {\n    window.prestashop.component.instance.translatableField = new window.prestashop.component.TranslatableField();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hooks Using HookDispatcher in PHP\nDESCRIPTION: This snippet shows how to dispatch hooks from a non-controller class using the HookDispatcher service in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShopBundle\\Service\\Hook\\HookEvent;\nuse PrestaShop\\PrestaShop\\Core\\Hook\\HookDispatcher;\n\n$hookEvent = new HookEvent();\n$this->hookDispacher->dispatchWithParameters($eventName, $parameters);\n```\n\n----------------------------------------\n\nTITLE: Importing Core JavaScript Components in PrestaShop\nDESCRIPTION: Shows correct and incorrect ways to import Core JavaScript components using static paths in PrestaShop. When importing, the file extension should be omitted from the import path.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/import-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Incorrect\nimport AutoCompletSearch from '../../../../admin-dev/themes/new-theme/js/components/auto-complete-search.js'\nimport AutoCompletSearch from '../../../../admin-dev/themes/new-theme/js/components/auto-complete-search.ts'\n\n// Correct\nimport AutoCompletSearch from '../../../../admin-dev/themes/new-theme/js/components/auto-complete-search'\n```\n\n----------------------------------------\n\nTITLE: Accessing Import Entity Types in PrestaShop\nDESCRIPTION: This code snippet shows the Entity class that defines constants for all available import types in PrestaShop. These constants represent different business entities that can be imported like categories, products, customers, etc.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/Entity.php\n\nfinal class Entity\n{\n    const TYPE_CATEGORIES = 0;\n    const TYPE_PRODUCTS = 1;\n    const TYPE_COMBINATIONS = 2;\n    const TYPE_CUSTOMERS = 3;\n    const TYPE_ADDRESSES = 4;\n    const TYPE_MANUFACTURERS = 5;\n    const TYPE_SUPPLIERS = 6;\n    const TYPE_ALIAS = 7;\n    const TYPE_STORE_CONTACTS = 8;\n    \n    <...>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Generation in PHP for PrestaShop\nDESCRIPTION: This PHP class defines a PrestaShop module that generates custom PDFs. It leverages the PrestaShop framework and requires dependencies such as the Order class and PDFGenerator class. Key functions include generating PDF content, headers, and footers using Smarty templates, and rendering the PDF document. The module requires PrestaShop version 1.7 or higher.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nclass MyCustomPdfGenerator extends Module\n{\n    public function __construct()\n    {\n        $this->name = 'mycustompdfgenerator';\n        $this->tab = 'front_office_features';\n        $this->version = '1.0.0';\n        $this->author = 'Firstname Lastname';\n        $this->need_instance = 0;\n        $this->ps_versions_compliancy = [\n            'min' => '1.7',\n            'max' => _PS_VERSION_\n        ];\n        $this->bootstrap = true;\n        parent::__construct();\n        $this->displayName = $this->l('My module');\n        $this->description = $this->l('Description of my module.');\n        $this->confirmUninstall = $this->l('Are you sure you want to uninstall?');\n    }\n    \n   \n    public function generatePDF(array $params): void\n    {\n        $myOrderObject = new Order((int) $params['id_order']);\n       \n        $myCustomSlipVarsForPdfContent = $this->myContentDatasPresenter($myOrderObject);\n        $myCustomSlipVarsForPdfFooter  = $this->myFooterDatasPresenter($myOrderObject);\n        $myCustomSlipVarsForPdfHeader  = $this->myHeaderDatasPresenter($myOrderObject);\n        $pdfGen = new PDFGenerator(false, 'P');\n        $pdfGen->setFontForLang(Context::getContext()->language->iso_code);\n        $pdfGen->startPageGroup();\n        $pdfGen->createHeader($this->getHeader($myCustomSlipVarsForPdfHeader));\n        $pdfGen->createFooter($this->getFooter($myCustomSlipVarsForPdfFooter));\n        $pdfGen->createContent($this->getPdfContent($myCustomSlipVarsForPdfContent));\n        $pdfGen->writePage();\n        $pdfGen->render('my_custom_pdf.pdf', 'D');\n   }\n   \n   /**\n     * Returns the template's HTML content.\n     *\n     * @return string HTML content\n     */\n    public function getPdfContent(array $myCustomSlipVarsForPdfContent): string\n    {\n        $this->context->smarty->assign($myCustomSlipVarsForPdfContent);\n\n        $tpls = array(\n            'style_tab'     => $this->context->smarty->fetch(__DIR__.'/pdf/delivery-slip.style-tab.tpl'),\n            'addresses_tab' => $this->context->smarty->fetch(__DIR__.'/pdf/delivery-slip.addresses-tab.tpl'),\n            'product_tab'   => $this->context->smarty->fetch(__DIR__.'/pdf/delivery-slip.product-tab.tpl'),\n        );\n        $this->context->smarty->assign($tpls);\n\n        return $this->context->smarty->fetch(__DIR__.'/pdf/delivery-slip.tpl');\n    }\n\n   /**\n     * Returns the template's HTML footer.\n     *\n     * @return string HTML footer\n     */\n    public function getFooter(array $myCustomSlipVarsForPdfFooter): string\n    {\n        $this->context->smarty->assign($myCustomSlipVarsForPdfFooter);\n        return $this->context->smarty->fetch(__DIR__.'/pdf/footer.tpl');\n    }\n\n    /**\n     * Returns the template's HTML header.\n     *\n     * @return string HTML header\n     */\n    public function getHeader(array $myCustomSlipVarsForPdfHeader): string\n    {\n        $this->context->smarty->assign($myCustomSlipVarsForPdfHeader);\n        return $this->context->smarty->fetch(__DIR__.'/pdf/header.tpl');\n    }\n   \n   \n   /**\n   * Format your order data here for pdf content : ['tpl_var_name'=>'tpl_value']\n   *\n   * @return array\n   */\n   public function myContentDatasPresenter(Order $myOrderObject): array\n   {\n     // TODO : implement it \n   }\n   \n   /**\n   * Format your order data here for pdf footer : ['tpl_var_name'=>'tpl_value']\n   *\n   * @return array\n   */\n   public function myFooterDatasPresenter(Order $myOrderObject): array\n   {\n     // TODO : implement it \n   }\n   \n   /**\n   * Format your order data here for pdf header : ['tpl_var_name'=>'tpl_value']\n   *\n   * @return array\n   */\n   public function myHeaderDatasPresenter(Order $myOrderObject): array\n   {\n     // TODO : implement it \n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Customer Resource via PrestaShop Webservice in PHP\nDESCRIPTION: This snippet demonstrates how to connect to the PrestaShop webservice and retrieve an existing customer resource by ID. It uses the PrestaShopWebservice class to make a GET request for a specific customer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/update-resource.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n \n    // call to retrieve customer with ID 2\n    $xml = $webService->get([\n        'resource' => 'customers',\n        'id' => 2, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else\n    ]);\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ShopChoiceTreeType to a Symfony Form (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to define a custom Symfony form type (`SomeType`) that includes a field for shop association using PrestaShop's `ShopChoiceTreeType`. The `buildForm` method adds a field named 'shop_association' configured with this specific type, allowing users to select shops from a hierarchical tree.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/shop-choice-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\ShopChoiceTreeType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('shop_association', ShopChoiceTreeType::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Computing Shipping Cost Based on Cart and Products in PrestaShop (PHP)\nDESCRIPTION: This snippet shows how to call the getPackageShippingCost method of a PrestaShop carrier module to calculate shipping costs based on the cart and associated products. Dependencies include a valid module instance and PrestaShop cart and products objects. Parameters are $cart (the cart instance), $shipping_cost (current cost), and $products (list of products). Returns a float for the computed shipping cost.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/carrier/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$shipping_cost = $module->getPackageShippingCost($cart, $shipping_cost, $products);\n```\n\n----------------------------------------\n\nTITLE: Accessing Registered Services in Legacy Admin Controllers - PHP\nDESCRIPTION: Shows access to custom-registered services in a legacy admin controller (without namespace) via $this->get(). The service reference must be defined in config/admin/services.yml. This approach allows legacy admin pages to leverage modern service definitions and doctrine integration. No external dependencies required beyond module registration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/yourmodule/controllers/admin/demo.php\n// Legacy controllers have no namespace\nclass YourModuleDemoModuleAdminController extends ModuleAdminController {\n    public function display()\n    {\n        ...\n        $yourService = $this->get('your_company.your_module.admin.your_service');\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Yes/No Choice Field to Symfony Form - PrestaShop - PHP\nDESCRIPTION: This PHP code demonstrates how to add the YesAndNoChoiceType field to a Symfony form within PrestaShop. It requires the PrestaShopBundle and the Symfony Form component, specifically AbstractType and FormBuilderInterface. The yesandnochoicetype field is configured with explicit choices mapping 'Yes' to true and 'No' to false. Inputs are taken during form building, and this setup produces a select input for end users to pick between Yes and No, suitable for binary options within an admin form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/yes-and-no-choice.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\YesAndNoChoiceType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('yesandnochoicetype', YesAndNoChoiceType::class, [\n            'choices' => [\n                'Yes' => true,\n                'No' => false,\n            ],\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ChoiceCategoriesTreeType for Product Categories Selection in PHP\nDESCRIPTION: This code snippet demonstrates how to add a category tree selector to a form builder. It uses the ChoiceCategoriesTreeType class to create a multi-select interface for associating categories with a product, with translation support for the label.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/choice-category-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('categories', ChoiceCategoriesTreeType::class, [\n    'label' => $this->translator->trans('Associated categories', [], 'Admin.Catalog.Feature'),\n    'list' => $this->nested_categories,\n    'valid_list' => $this->categories,\n    'multiple' => true,\n])\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring EmployeeNameWithAvatarColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an instance of `EmployeeNameWithAvatarColumn`, set its display name, configure the required `field` option to specify the data source for the employee's name, and add the configured column to a `ColumnCollection`. It depends on the `EmployeeNameWithAvatarColumn` and `ColumnCollection` classes from the PrestaShop Core.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/employee-name-with-avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Employee\\EmployeeNameWithAvatarColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$employeeColumn = new EmployeeNameWithAvatarColumn('employee');\n$employeeColumn->setName('Employee');\n$employeeColumn->setOptions([\n     'field' => 'employee',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($employeeColumn);\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Action in ManufacturerController (PHP)\nDESCRIPTION: This snippet demonstrates how to implement a custom search action in a controller. It uses the ResponseBuilder service to handle the search request and generate an appropriate response.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ManufacturerGridDefinitionFactory;\nuse PrestaShopBundle\\Service\\Grid\\ResponseBuilder;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\n\nclass ManufacturerController extends FrameworkBundleAdminController\n{\n    ...\n    /**\n     * Provides filters functionality\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function searchAction(Request $request)\n    {\n        /** @var ResponseBuilder $responseBuilder */\n        $responseBuilder = $this->get('prestashop.bundle.grid.response_builder');\n\n        return $responseBuilder->buildSearchResponse(\n            $this->get('prestashop.core.grid.definition.factory.manufacturer'),\n            $request,\n            ManufacturerGridDefinitionFactory::GRID_ID,\n            'admin_manufacturers_index'\n        );\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks and Module Attachments in YAML\nDESCRIPTION: This snippet shows how to create custom hooks and attach modules to specific hooks when the theme is enabled, including advanced hook configuration patterns.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  global_settings:\n    hooks:\n      custom_hooks:\n        - name: displayFooterBefore\n          title: displayFooterBefore\n          description: Add a widget area above the footer\n      modules_to_hook:\n        displayHeaderTop:\n          # displayHeaderTop will have exactly the following\n          # modules hooked to it, in the specified order.\n          # Each module in this list will be unhooked\n          # from all other display hooks it is hooked to.\n          - blocklanguages\n          - blockcurrencies\n          - blockuserinfo\n        displayHeaderMiddle:\n          # displayHeaderMiddle will have whatever is currently hooked to it\n          # kept hooked to it, and blocksearch will be appended\n          # to the list (or moved to the end if already hooked there).\n          - ~\n          - blocksearch\n        displayHeaderBottom:\n          # displayHeaderBottom will have blocktopmenu and blockcart\n          # prepended to it.\n          - blocktopmenu\n          - blockcart\n          - ~\n        displayFooter:\n          - blocknewsletter\n        displayLeftColumn:\n          # blockcategories is hooked on all pages on displayLeftColumn\n          - blockcategories\n          # blocktags is hooked on displayLeftColumn on all pages\n          # except \"category\" and \"index\"\n          - blocktags:\n              except_pages:\n                - category\n                - index\n```\n\n----------------------------------------\n\nTITLE: Using CustomContentType in CmsPageType Form\nDESCRIPTION: Example showing how to implement CustomContentType in a form builder to create an SEO preview section. Uses template rendering and includes custom data for CMS URL preview.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/custom-content-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('seo_preview', CustomContentType::class, [\n    'label' => $this->trans('SEO preview', 'Admin.Global'),\n    'help' => $this->trans('Here is a preview of how your page will appear in search engine results.', 'Admin.Global'),\n    'template' => '@PrestaShop/Admin/Improve/Design/Cms/Blocks/seo_preview.html.twig',\n    'data' => [\n        'cms_url' => $options['cms_preview_url'],\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing SupplierExtraImageUploader Class in PHP for PrestaShop\nDESCRIPTION: This class handles the uploading of supplier extra images in PrestaShop. It includes methods for creating temporary images, resizing, deleting old images, and checking image upload constraints.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass SupplierExtraImageUploader implements ImageUploaderInterface\n{\n    /** @var SupplierExtraImageRepository */\n    private $supplierExtraImageRepository;\n\n    /**\n     * @param SupplierExtraImageRepository $supplierExtraImageRepository\n     */\n    public function __construct(SupplierExtraImageRepository $supplierExtraImageRepository)\n    {\n        $this->supplierExtraImageRepository = $supplierExtraImageRepository;\n    }\n\n    /**\n     * @param int $supplierId\n     * @param UploadedFile $image\n     */\n    public function upload($supplierId, UploadedFile $image)\n    {\n        $this->checkImageIsAllowedForUpload($image);\n        $tempImageName = $this->createTemporaryImage($image);\n        $this->deleteOldImage($supplierId);\n\n        $originalImageName = $image->getClientOriginalName();\n        $destination = _PS_SUPP_IMG_DIR_ . $originalImageName;\n        $this->uploadFromTemp($tempImageName, $destination);\n        $this->supplierExtraImageRepository->upsertSupplierImageName($supplierId, $originalImageName);\n    }\n\n    // ... (other methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OrderSignatureRepository in PHP for PrestaShop\nDESCRIPTION: Defines a custom OrderSignatureRepository class extending Doctrine's EntityRepository to interact with the order_signature table. It includes a method to find a signature by order ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\n\nclass OrderSignatureRepository extends EntityRepository\n{\n    /**\n     * @param int $orderId\n     *\n     * @return object|null\n     */\n    public function findOneByOrderId(int $orderId)\n    {\n        return $this->findOneBy(['orderId' => $orderId]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetLastEmptyCustomerCart Query Class in PHP\nDESCRIPTION: This snippet defines the GetLastEmptyCustomerCart query class in the PrestaShop Core Domain. It requires a customerId parameter and is handled by GetLastEmptyCustomerCartHandler, returning a CartId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-last-empty-customer-cart.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Query\\GetLastEmptyCustomerCart\n```\n\n----------------------------------------\n\nTITLE: Detailed Customer XML Data Structure\nDESCRIPTION: Example of the XML structure returned when fetching details of a specific customer, showing all available fields and their values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/retrieve-resource.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <customer>\n        <id><![CDATA[2]]></id>\n        <id_default_group xlink:href=\"http://example.com/api/groups/3\"><![CDATA[3]]></id_default_group>\n        <id_lang xlink:href=\"http://example.com/api/languages/1\"><![CDATA[1]]></id_lang>\n        <newsletter_date_add><![CDATA[2013-12-13 08:19:15]]></newsletter_date_add>\n        <ip_registration_newsletter></ip_registration_newsletter>\n        <last_passwd_gen><![CDATA[2020-04-09 13:31:19]]></last_passwd_gen>\n        <secure_key><![CDATA[86b9ae3ec67dd49122e3a574fc131af4]]></secure_key>\n        <deleted><![CDATA[0]]></deleted>\n        <passwd><![CDATA[33bdf9cf5657bf97149906b83ea3c6ed]]></passwd>\n        <lastname><![CDATA[DOE]]></lastname>\n        <firstname><![CDATA[John]]></firstname>\n        <email><![CDATA[pub@prestashop.com]]></email>\n        <id_gender><![CDATA[1]]></id_gender>\n        <birthday><![CDATA[1970-01-15]]></birthday>\n        <newsletter><![CDATA[1]]></newsletter>\n        <optin><![CDATA[1]]></optin>\n        <website></website>\n        <company></company>\n        <siret></siret>\n        <ape></ape>\n        <outstanding_allow_amount><![CDATA[0.000000]]></outstanding_allow_amount>\n        <show_public_prices><![CDATA[0]]></show_public_prices>\n        <id_risk><![CDATA[0]]></id_risk>\n        <max_payment_days><![CDATA[0]]></max_payment_days>\n        <active><![CDATA[1]]></active>\n        <note></note>\n        <is_guest><![CDATA[0]]></is_guest>\n        <id_shop><![CDATA[1]]></id_shop>\n        <id_shop_group><![CDATA[1]]></id_shop_group>\n        <date_add><![CDATA[2020-04-09 19:31:19]]></date_add>\n        <date_upd><![CDATA[2020-04-09 19:31:19]]></date_upd>\n        <reset_password_token></reset_password_token>\n        <reset_password_validity><![CDATA[0000-00-00 00:00:00]]></reset_password_validity>\n        <associations>\n            <groups nodeType=\"group\" api=\"groups\">\n                <group xlink:href=\"http://example.com/api/groups/3\">\n                    <id><![CDATA[3]]></id>\n                </group>\n            </groups>\n        </associations>\n    </customer>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Performing Basic CQRS Cancellation in PrestaShop\nDESCRIPTION: Example showing the two-step process of performing cancellation actions using CQRS pattern in PrestaShop. It demonstrates instantiating a command and handling it through the command bus.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/view-order/refunds/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\CancelOrderProductCommand;\n\n// Instantiate the corresponding command\n$command = new CancelOrderProductCommand(\n    $cancelledProducts,\n    $orderId\n);\n\n// Give it to the command bus\n$this->commandBus->handle($command);\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminOrderMainBottom Hook in Twig Template\nDESCRIPTION: Demonstrates how to render the displayAdminOrderMainBottom hook in a Twig template. The hook is passed the current order ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderMainBottom.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrderMainBottom', {'id_order': orderForViewing.id}) }}\n```\n\n----------------------------------------\n\nTITLE: Defining QuoteLang Entity in PHP for PrestaShop Doctrine Module\nDESCRIPTION: This code defines the QuoteLang entity class, which represents the translatable fields of a Quote. It includes relationships with the parent Quote and the Lang entity, allowing for multilingual content association.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/doctrine/how-to-handle-multi-lang-doctrine-entity.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoDoctrine\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse PrestaShopBundle\\Entity\\Lang;\n\n/**\n * @ORM\\Table()\n * @ORM\\Entity()\n */\nclass QuoteLang\n{\n    /**\n     * @var Quote\n     * @ORM\\Id\n     * @ORM\\ManyToOne(targetEntity=\"PrestaShop\\Module\\DemoDoctrine\\Entity\\Quote\", inversedBy=\"quoteLangs\")\n     * @ORM\\JoinColumn(name=\"id_quote\", referencedColumnName=\"id_quote\", nullable=false)\n     */\n    private $quote;\n\n    /**\n     * @var Lang\n     * @ORM\\Id\n     * @ORM\\ManyToOne(targetEntity=\"PrestaShopBundle\\Entity\\Lang\")\n     * @ORM\\JoinColumn(name=\"id_lang\", referencedColumnName=\"id_lang\", nullable=false, onDelete=\"CASCADE\")\n     */\n    private $lang;\n\n    /**\n     * @var string\n     * @ORM\\Column(name=\"content\", type=\"string\", nullable=false)\n     */\n    private $content;\n\n    // Getters and setters...\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Weight Range XML Schema\nDESCRIPTION: XML schema template for weight range resources in PrestaShop. Includes fields for ID, carrier ID, and weight range delimiters. Used for API requests and responses when working with weight ranges.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/weight_ranges.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <weight_range>\n    <id><![CDATA[]]></id>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <delimiter1><![CDATA[]]></delimiter1>\n    <delimiter2><![CDATA[]]></delimiter2>\n  </weight_range>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Implementing the actionBuildMailLayoutVariables Hook in PHP\nDESCRIPTION: This PHP code demonstrates how to implement a PrestaShop module that adds custom variables to email templates. It registers and handles the actionBuildMailLayoutVariables hook to provide values for the customMessage variable used in the Twig template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-layout-variables-from-module.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutVariablesBuilderInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface;\n\nclass MyEmailThemeModule extends Module \n{\n    public function install() \n    {\n        return parent::install()\n            // This class constant contains 'actionBuildMailLayoutVariables'\n            && $this->registerHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK)\n        ;\n    }\n    \n    public function uninstall() \n    {\n        return parent::uninstall()\n            && $this->unregisterHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK)\n        ;        \n    }\n    \n    public function enable() \n    {\n        return parent::enable()\n            && $this->registerHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK)\n        ;\n    }\n    \n    public function disable() \n    {\n        return parent::disable()\n            && $this->unregisterHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK)\n        ;        \n    }\n    \n    /**\n     * @param array $hookParams\n     */\n    public function hookActionBuildMailLayoutVariables(array $hookParams)\n    {\n        if (!isset($hookParams['mailLayout'])) {\n            return;\n        }\n\n        /** @var LayoutInterface $mailLayout */\n        $mailLayout = $hookParams['mailLayout'];\n        if ($mailLayout->getModuleName() != $this->name || $mailLayout->getName() != 'customizable_modern_layout') {\n            return;\n        }\n\n        $hookParams['mailLayoutVariables']['customMessage'] = 'My custom message';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Symfony Form using Twig Form Theme\nDESCRIPTION: This snippet demonstrates how to render a Symfony form using a custom Twig Form Theme. It allows rendering all form inputs with a single block, simplifying the template code.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_widget(form) }}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Customer Data with PrestaShopWebservice\nDESCRIPTION: PHP code demonstrating how to use the PrestaShopWebservice class to retrieve details of a specific customer by ID. It shows error handling and the structure of the API request.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/retrieve-resource.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n \n    // call to retrieve customer with ID 2\n    $xml = $webService->get([\n        'resource' => 'customers',\n        'id' => 2, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else\n    ]);\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Facet Class Reference\nDESCRIPTION: Core facet class that represents a collection of filters combined with logical operators\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/faceted-search/inside-faceted-search-module.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Product\\Search\\Facet\n```\n\n----------------------------------------\n\nTITLE: Installing Data Fixtures in PrestaShop Module (PHP)\nDESCRIPTION: This snippet defines the FixturesInstaller class, which is responsible for handling the data fixtures of the module. It uses the PrestaShop Db class to interact with the database, inserting order signatures for all orders within a specified date range. Key functions include the constructor and install method that execute the data insertion logic. Prerequisite: PrestaShop module and database access.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/module-base.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Install;\n\nuse Db;\nuse Order;\n\n/**\n * Installs data fixtures for the module.\n */\nclass FixturesInstaller\n{\n    /**\n     * @var Db\n     */\n    private $db;\n\n    public function __construct(Db $db)\n    {\n        $this->db = $db;\n    }\n\n    public function install(): void\n    {\n        $orderIds = Order::getOrdersIdByDate('2000-01-01', '2100-01-01');\n\n        foreach ($orderIds as $orderId) {\n            $this->insertSignature($orderId);\n        }\n    }\n\n    private function insertSignature(int $orderId): void\n    {\n        $this->db->insert('order_signature', [\n            'id_order' => $orderId,\n            'filename' => 'john_doe.png',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerForEditing Query Class in PHP\nDESCRIPTION: This code snippet defines the GetCustomerForEditing query class in the PrestaShop Core Domain. It is used to retrieve customer information for editing purposes. The query takes a customer ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerForEditing\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Console Command as a Service (YAML)\nDESCRIPTION: YAML configuration snippet for `your-module/config/services.yml`. It registers the `ExportCommand` class as a service within the Symfony Dependency Injection container used by PrestaShop. Applying the `console.command` tag makes the command discoverable and executable via the `./bin/console` script.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# your-module/config/services.yml\nservices:\n    your_company.your_module.export_command:\n        class: YourCompany\\YourModule\\Command\\ExportCommand\n        tags:\n            - { name: 'console.command' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for a PrestaShop Module\nDESCRIPTION: This JSON snippet configures Composer autoloading for a PrestaShop module named 'demovieworderhooks'. It specifies the module's namespace and the source directory, adhering to the PSR-4 autoloading standard. Ensure Composer is installed and run 'composer install' followed by 'composer dump-autoload' to generate the autoload files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/module-base.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"prestashop/demovieworderhooks\",\n    \"authors\": [\n        {\n            \"name\": \"Name Surname\",\n            \"email\": \"author@email.com\"\n        }\n    ],\n    \"autoload\": {\n      \"psr-4\": {\n        \"PrestaShop\\\\Module\\\\DemoViewOrderHooks\\\\\": \"src/\"\n      },\n      \"config\": {\n        \"prepend-autoloader\": false\n      },\n      \"type\": \"prestashop-module\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Set Required Address Fields Command Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for setting required fields for a new address within the PrestaShop Core Domain. This command encapsulates the data needed for the operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/set-required-fields-for-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\SetRequiredFieldsForAddressCommand\n```\n\n----------------------------------------\n\nTITLE: Formatting a Price with `formatPrice()` (GBP) in PHP\nDESCRIPTION: Illustrates using the `formatPrice()` method from the current Locale object within the PrestaShop Context. It formats a floating-point number (1234.56) as a price using the 'GBP' currency code within an 'en-US' locale context, prepending the currency symbol. Depends on the PrestaShop `Context` and relevant currency specifications being available.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/locale.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$price = 1234.56;\\n\\nvar_dump(Context::getContext()->getCurrentLocale()->formatPrice($price, 'GBP'));\\n// string(10) \"£1,234.56\"\n```\n\n----------------------------------------\n\nTITLE: Creating Installer Objects via Factory Pattern (PHP)\nDESCRIPTION: This snippet implements the InstallerFactory class, following the factory design pattern to create Installer objects. It ensures that objects are created without specifying their exact class, promoting flexibility and maintenance. The primary method 'create' returns a new Installer instance using Db's singleton instance and FixturesInstaller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/module-base.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * Author  - PrestaShop SA and Contributors\n * License - Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Install;\n\nuse Db;\n\nclass InstallerFactory\n{\n    public static function create(): Installer\n    {\n        return new Installer(\n            new FixturesInstaller(Db::getInstance())\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing EmailType in Employee Form with Validation\nDESCRIPTION: Example showing how to add an email field to a form builder with validation constraints including not blank, length limits, and email format validation. Used within the EmployeeType form configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/email-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('email', EmailType::class, [\n    'constraints' => [\n        $this->getNotBlankConstraint(),\n        $this->getLengthConstraint(EmployeeEmail::MAX_LENGTH),\n        new Email([\n            'message' => $this->trans('This field is invalid', [], 'Admin.Notifications.Error'),\n        ]),\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring HtmlColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an instance of `HtmlColumn` for a PrestaShop grid. It initializes the column with an identifier ('description'), sets its display name using `setName()`, and configures the data source field using `setOptions(['field' => 'description'])`. Finally, it adds the configured column to a `ColumnCollection`. This column type renders raw HTML and requires careful handling to prevent XSS vulnerabilities, as noted in the surrounding documentation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/html.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\HtmlColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$htmlColumn = new HtmlColumn('description');\n$htmlColumn->setName('Description');\n$htmlColumn->setOptions([\n     'field' => 'description',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($htmlColumn);\n```\n\n----------------------------------------\n\nTITLE: Using Grid Data Factory in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the configured Grid Data factory to retrieve sorted, paginated, and filtered data for the product grid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$searchCriteria = ...\n\n/** PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\GridDataFactoryInterface $productGridDataFactory */\n$productGridDataFactory = $container->get('prestashop.core.grid.data.factory.product_data_factory');\n$productGridData = $productDataFactory->getData($searchCriteria);\n\n$productGridData->getRecords(); // returns RecordCollection that contains products data\n$productGridData->getRecordsTotal(); // returns the total count of products\n$productGridData->getQuery(); // get the last executed query that was used to get RecordCollection\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Feature in PrestaShop\nDESCRIPTION: This XML snippet is used to create a new product feature in PrestaShop by sending a POST request to the /api/product_features endpoint. The user must replace {{feature_name}} with the desired feature name. This setup is necessary for categorizing and filtering products based on custom features.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product_feature>\n        <name>\n            <language id=\"1\"><![CDATA[{{feature_name}}]]></language>\n        </name>\n    </product_feature>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Options Array from PrestaShop Data (PHP)\nDESCRIPTION: This snippet generates an options array at runtime by querying PrestaShop's Gender class. It loops through available genders for the current context language and constructs an array with 'id' and 'name' keys, suitable for use as options in select or checkbox elements. Requires access to Gender model and Context singleton. Returns a fully populated options array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$options = array();\nforeach (Gender::getGenders((int)Context::getContext()->language->id) as $gender)\n{\n  $options[] = array(\n    \"id\" => (int)$gender->id,\n    \"name\" => $gender->name\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CustomTabType to ProductFormBuilder modify() Method - PrestaShop (PHP)\nDESCRIPTION: This PHP code demonstrates how to inject a new custom tab (CustomTabType) into the product form builder using the formBuilderModifier's addAfter method. It is to be implemented in ProductFormModifier::modify. Assumes the existence of a CustomProduct class with a 'custom_price' property. The method takes product ID and the form builder interface as inputs and adds the custom tab after the 'pricing' field. Requires previously declared services and form types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param int|null $productId\n * @param FormBuilderInterface $productFormBuilder\n */\npublic function modify(\n    int $productId,\n    FormBuilderInterface $productFormBuilder\n): void {\n    \n    $idValue = $productId ? $productId->getValue() : null;\n    $customProduct = new CustomProduct($idValue);\n\n    $this->formBuilderModifier->addAfter(\n        $productFormBuilder,\n        'pricing',\n        'custom_tab',\n        CustomTabType::class,\n        [\n            'data' => [\n                'custom_price' => $customProduct->custom_price,\n            ],\n        ]\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing hookActionAfterUpdateSupplierFormHandler in PHP for PrestaShop\nDESCRIPTION: This hook method is called after updating a supplier form. It triggers the image upload process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @param array $params\n */\npublic function hookActionAfterUpdateSupplierFormHandler(array $params)\n{\n    $this->uploadImage($params);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getOrderShippingCost in a PrestaShop Carrier Module (PHP)\nDESCRIPTION: This snippet provides an implementation for the getOrderShippingCost method, which calculates shipping costs for orders. It uses configuration values to verify the carrier and determine if overcost should be applied. Returns a float for valid carriers, or false for unknown or disabled carriers. Depends on the PrestaShop Configuration class and proper carrier ID setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/carrier/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getOrderShippingCost($params, $shipping_cost)\n{\n  if (\n        $this->id_carrier === (int)(Configuration::get('MYCARRIER_CARRIER_ID'))\n        && Configuration::get('MYCARRIER_OVERCOST') > 1\n    ) {\n        return (float)(Configuration::get('MYCARRIER1_OVERCOST'));\n    }\n    return false; // carrier is not known\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Grid QueryBuilder Modifier Hook in PrestaShop PHP\nDESCRIPTION: This PHP code snippet demonstrates how to dispatch a PrestaShop hook named 'action<DefinitionId>GridQueryBuilderModifier'. It modifies query builders for grid data based on search criteria. Dependencies include the hook dispatcher and relevant grid components. The parameters passed are 'search_query_builder', 'count_query_builder', and 'search_criteria', which affect the data retrieval process. The output is primarily the modified behavior of the query builders within the PrestaShop grid system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<DefinitionId>GridQueryBuilderModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->hookDispatcher->dispatchWithParameters('action' . Container::camelize($this->gridId) . 'GridQueryBuilderModifier', [\n    'search_query_builder' => $searchQueryBuilder,\n    'count_query_builder' => $countQueryBuilder,\n    'search_criteria' => $searchCriteria,\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Global Component in JavaScript\nDESCRIPTION: Demonstrates how to add a custom component (`MyCustomComponent`) to the global `window.prestashop.component` object, making it available for use elsewhere. It registers the component constructor and creates an instance within the `PSComponentsInitiated` event listener.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/global-components.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nEventEmitter.on('PSComponentsInitiated', () => {\n  window.prestashop.component.MyCustomComponent = MyCustomComponent;\n  window.prestashop.component.instance.myCustomComponent = new window.prestashop.component.MyCustomComponent();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form Data Handler in PHP\nDESCRIPTION: Example of a ContactFormDataHandler class that implements FormDataHandlerInterface to create and update Contact objects using PrestaShop's ObjectModel pattern.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler;\n\nfinal class ContactFormDataHandler implements FormDataHandlerInterface\n{\n    /**\n     * Create object from form data.\n     *\n     * @param array $data\n     *\n     * @return mixed\n     */\n    public function create(array $data)\n    {\n        $contactObjectModel = new Contact();\n        // add data to object model\n        // ...\n        $contactObjectModel->save();\n\n        return $contactObjectModel->id;\n    }\n\n    /**\n     * Update object with form data.\n     *\n     * @param int $id\n     * @param array $data\n     */\n    public function update($id, array $data)\n    {\n        $contactObjectModel = new Contact(id);\n        // update data to object model\n        // ...\n        $contactObjectModel->update();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a PositionUpdate with the Factory (PHP)\nDESCRIPTION: This PHP snippet demonstrates creating a PositionUpdate using PositionUpdateFactory, with positions data provided in an expected structure. Handling of PositionDataException ensures that any invalid input is captured and displayed as flash errors. Required dependencies include the appropriate Symfony services and correctly structured input data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException;\\n\\n$positionsData = [\\n    'positions' => [\\n        [\\n            'rowId' => 12,\\n            'oldPosition' => 0,\\n            'newPosition' => 1,\\n        ],\\n        [\\n            'rowId' => 15,\\n            'oldPosition' => 5,\\n            'newPosition' => 3,\\n        ]\\n    ],\\n    'parentId' => $categoryId,\\n];\\n\\n/** @var PositionDefinition $positionDefinition */\\n$positionDefinition = $this->get('prestashop.product.grid.position_definition');\\n\\n/** @var PositionUpdateFactory $positionUpdateFactory */\\n$positionUpdateFactory = $this->get('prestashop.core.grid.position.position_update_factory');\\n\\ntry {\\n    /** @var PositionUpdate $positionUpdate */\\n    $positionUpdate = $positionUpdateFactory->buildPositionUpdate($positionsData, $positionDefinition);\\n} catch (PositionDataException $e) {\\n    //An exception is thrown if the input data doesn't respect the expected format\\n    $errors = [$e->toArray()];\\n    $this->flashErrors($errors);\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a New ObjectModel Instance\nDESCRIPTION: Demonstrates how to create a new instance of an ObjectModel-managed entity, set property values, and save it to the database.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$cms = new Cms();\n$cms->position = 2;\n...\n$cms->save();\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Handler Interface Returning a DTO in PHP\nDESCRIPTION: This PHP interface, `GetCustomerForEditingHandlerInterface`, defines a contract for handlers responsible for retrieving customer data for editing. The `handle` method is specified to accept a `GetCustomerForEditing` query and is explicitly declared to return an `EditableCustomer` DTO. This enforces that any implementation must return structured customer data, improving type safety and predictability.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/data-transfer-objects.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler;\n\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\EditableCustomer;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerForEditing;\n\ninterface GetCustomerForEditingHandlerInterface\n{\n    /**\n     * @param GetCustomerForEditing $query\n     *\n     * Handler returns EditableCustomer DTO instead of unstructured array,\n     * thus allowing developer to know exactly what data can be accessed.\n     *\n     * @return EditableCustomer\n     */\n    public function handle(GetCustomerForEditing $query);\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Directory Tree Structure\nDESCRIPTION: Shows the complete root-level directory structure of a PrestaShop installation, displaying all main folders in the project hierarchy.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/file-structure/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── admin\n├── app\n├── bin\n├── cache\n├── classes\n├── config\n├── controllers\n├── docs\n├── download\n├── img\n├── install\n├── js\n├── localization\n├── mails\n├── modules\n├── override\n├── pdf\n├── src\n├── templates\n├── tests\n├── tests-legacy\n├── themes\n├── tools\n├── translations\n├── travis-scripts\n├── upload\n├── var\n├── vendor\n└── webservice\n```\n\n----------------------------------------\n\nTITLE: Configuring Webservice Parameters in PrestaShop PHP Entity\nDESCRIPTION: Highlights configuration samples for the mandatory $webserviceParameters in the custom Article entity, which define the API node names for single and multiple objects, and specify the fields exposed through the webservice. These array snippets are directly included within the entity definition, showing how to properly configure webservice exposure for new resources. Requires preceding declaration of entity and ObjectModel extension.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/webservice/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'objectsNodeName' => 'articles'\n```\n\nLANGUAGE: php\nCODE:\n```\n'objectNodeName' => 'articles'\n```\n\nLANGUAGE: php\nCODE:\n```\n'fields' => array()\n```\n\n----------------------------------------\n\nTITLE: Signature for Generating Module Front Controller URLs in PrestaShop (PHP)\nDESCRIPTION: Shows the method signature for `Link::getModuleLink`, a static method used to generate URLs pointing to a specific module's front controller. It takes the module's technical name, the controller's filename (without extension), and an optional array of parameters as input. This method automatically handles URL rewriting and HTTP/HTTPS context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function Link::getModuleLink($module, $controller, array $params = array());\n\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Hook from Smarty Template\nDESCRIPTION: Example of how to dispatch a hook from within a Smarty template. This snippet shows how to call the 'displayProductPriceBlock' hook and pass product data and type parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/dispatching-hook.md#2025-04-22_snippet_2\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h='displayProductPriceBlock' product=$product type=\"unit_price\"}\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for Order Carrier Resource in PrestaShop\nDESCRIPTION: This XML template shows the structure for the order_carrier resource in PrestaShop API. It includes all available fields such as id, id_order, id_carrier, weight, shipping costs, tracking number, and date information. This template can be used as a starting point for API operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_carriers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_carrier>\n    <id><![CDATA[]]></id>\n    <id_order><![CDATA[]]></id_order>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <id_order_invoice><![CDATA[]]></id_order_invoice>\n    <weight><![CDATA[]]></weight>\n    <shipping_cost_tax_excl><![CDATA[]]></shipping_cost_tax_excl>\n    <shipping_cost_tax_incl><![CDATA[]]></shipping_cost_tax_incl>\n    <tracking_number><![CDATA[]]></tracking_number>\n    <date_add><![CDATA[]]></date_add>\n  </order_carrier>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Module Translation in Custom Classes\nDESCRIPTION: Shows how to implement translations in custom module classes by passing the module instance through the constructor.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CustomModuleClass \n{\n    private $module;\n    \n    public function __construct(Module $module)\n    {\n        $this->module = $module;\n    }\n    \n    public function foo()\n    {\n        $this->text = $this->module->l('My text to translate');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Syntax and Standards Checks with GitHub Actions YAML\nDESCRIPTION: This YAML configuration sets up GitHub Actions to run PHP syntax checks and coding standards checks on various PHP versions (5.6, 7.2, 7.3). It utilizes actions such as `actions/checkout`, `prestashop/github-action-php-lint`, and `prestashopcorp/github-action-php-cs-fixer` to automate these processes, ensuring that only compliant code is pushed to production. Key dependencies include actions/cache for caching and vendors for enabling faster subsequent builds.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/ci-cd.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: PHP tests\non: [push, pull_request]\njobs:\n  php-linter:\n    name: PHP Syntax check 5.6|7.2|7.3\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2.0.0\n\n      - name: PHP syntax checker 5.6\n        uses: prestashop/github-action-php-lint/5.6@master\n\n      - name: PHP syntax checker 7.2\n        uses: prestashop/github-action-php-lint/7.2@master\n\n      - name: PHP syntax checker 7.3\n        uses: prestashop/github-action-php-lint/7.3@master\n\n  php-cs-fixer:\n    name: PHP-CS-Fixer\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2.0.0\n\n      - name: Run PHP-CS-Fixer\n        uses: prestashopcorp/github-action-php-cs-fixer@master\n\n  phpstan:\n    name: PHPStan\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        presta-versions: ['1.7.0.3', 'latest']\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2.0.0\n\n      - name: Cache vendor folder\n        uses: actions/cache@v1\n        with:\n          path: vendor\n          key: php-${{ hashFiles('composer.lock') }}\n\n      - name: Cache composer folder\n        uses: actions/cache@v1\n        with:\n          path: ~/.composer/cache\n          key: php-composer-cache\n\n      - run: composer install\n\n      - name: Pull PrestaShop files (Tag ${{ matrix.presta-versions }})\n        run: docker run -tid --rm -v ps-volume:/var/www/html --name temp-ps prestashop/prestashop:${{ matrix.presta-versions }}\n\n      - name : Run PHPStan\n        run: docker run --rm --volumes-from temp-ps -v $PWD:/web/module -e _PS_ROOT_DIR_=/var/www/html --workdir=/web/module phpstan/phpstan:0.12 analyse --configuration=/web/module/tests/phpstan/phpstan.neon\n\n  header-stamp:\n    name: Check license headers\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Cache vendor folder\n        uses: actions/cache@v1\n        with:\n          path: vendor\n          key: php-${{ hashFiles('composer.lock') }}\n\n      - name: Cache composer folder\n        uses: actions/cache@v1\n        with:\n          path: ~/.composer/cache\n          key: php-composer-cache\n\n      - run: composer install\n\n      - name: Run Header Stamp in Dry Run mode\n        run: php vendor/bin/header-stamp --license=vendor/prestashop/header-stamp/assets/afl.txt --exclude=vendor,tests,_dev --dry-run\n```\n\n----------------------------------------\n\nTITLE: Dispatching the action<LegacyControllerName>ListingFieldsModifier Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how the dynamic action hook `action<LegacyControllerName>ListingFieldsModifier` is dispatched using the `dispatchWithParameters` method within the `HelperListBridge` class. It passes an associative array where keys represent parts of a database query or listing configuration, and values are references (`&`) to the corresponding properties of the `$helperListConfiguration` object. This allows modules listening to this hook to modify the `select`, `join`, `where`, `group_by`, `order_by`, `order_way`, and `fields` directly before the list is rendered.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<LegacyControllerName>ListingFieldsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('action' . $helperListConfiguration->legacyControllerName . 'ListingFieldsModifier', [\n            'select' => &$helperListConfiguration->select,\n            'join' => &$helperListConfiguration->join,\n            'where' => &$helperListConfiguration->where,\n            'group_by' => &$helperListConfiguration->group,\n            'order_by' => &$helperListConfiguration->orderBy,\n            'order_way' => &$helperListConfiguration->orderWay,\n            'fields' => &$helperListConfiguration->fieldsList,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Adding Order from Back Office using Command Pattern - PrestaShop - PHP\nDESCRIPTION: This PHP code snippet outlines the command class AddOrderFromBackOfficeCommand, which encapsulates the logic for adding a new order from the PrestaShop back office for a specified cart. It requires dependencies such as the cart ID, employee ID, a message for the order, the payment module name, and the desired order state ID as constructor parameters. The command is processed by a designated handler (AddOrderFromBackOfficeHandler) implementing a related interface, and returns an OrderId value object indicating the newly created order. Inputs must be properly typed, and command-handler structure must be implemented as per PrestaShop's architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/add-order-from-back-office-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\AddOrderFromBackOfficeCommand`\n_Adds new order from given cart._\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $cartId`</li>  <li>`$int $employeeId`</li>  <li>`$string $orderMessage`</li>  <li>`$string $paymentModuleName`</li>  <li>`$int $orderStateId`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\AddOrderFromBackOfficeHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\AddOrderFromBackOfficeHandlerInterface`</li>  |\n| **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Order\\ValueObject\\OrderId`  |\n```\n\n----------------------------------------\n\nTITLE: Using PrestaShop Webservice Library with Composer Autoloading\nDESCRIPTION: PHP code showing how to use the PrestaShop webservice library with Composer's autoloading mechanism.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once('./vendor/autoload.php');\n\n$webService = new PrestaShopWebservice(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading and Metadata in JSON\nDESCRIPTION: This JSON snippet represents the `composer.json` file for the module. It defines metadata like the module name, description, license, and authors. Crucially, it configures PSR-4 autoloading, mapping the `PrestaShop\\Module\\DemoSymfonyFormSimple\\` namespace to the `src/` directory, specifies the required PHP version, and sets the project type as `prestashop-module`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"prestashop/demosymfonyformsimple\",\n  \"description\": \"PrestaShop - Settings Form Examples\",\n  \"license\": \"AFL-3.0\",\n  \"authors\": [\n    {\n      \"name\": \"PrestaShop Core Team\"\n    }\n  ],\n  \"autoload\": {\n    \"psr-4\": {\n      \"PrestaShop\\\\Module\\\\DemoSymfonyFormSimple\\\\\": \"src/\"\n    }\n  },\n  \"require\": {\n    \"php\": \">=7.1.0\"\n  },\n  \"config\": {\n    \"preferred-install\": \"dist\",\n    \"prepend-autoloader\": false\n  },\n  \"type\": \"prestashop-module\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Filter Form Factory in YAML\nDESCRIPTION: YAML configuration for defining the category filter form factory decorator and using it in the grid factory. This setup replaces the default form factory with the custom one.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/custom-form-factory.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# your-module/config/services.yml\n    # Define form factory decorator\n    prestashop.core.grid.filter.category_form_factory:\n        class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\CategoryFilterFormFactory'\n        arguments:\n            - '@prestashop.core.grid.filter.form_factory'\n            - '@router'\n            - '@request_stack'\n\n    # Use the decorator in the grid factory instead of the default one\n    prestashop.core.grid.factory.category:\n        class: 'PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory'\n        arguments:\n            - '@prestashop.core.grid.definition.factory.category'\n            - '@prestashop.core.grid.data.factory.category_decorator'\n            - '@prestashop.core.grid.filter.category_form_factory'\n            - '@prestashop.core.hook.dispatcher'\n```\n\n----------------------------------------\n\nTITLE: Defining the Return Type for GetOrderPreview Query in PrestaShop PHP\nDESCRIPTION: Specifies the fully qualified class name for the object returned upon successful execution of the GetOrderPreview query handler. The `OrderPreview` object encapsulates the preview data for the requested order.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-preview.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\QueryResult\\OrderPreview\n```\n\n----------------------------------------\n\nTITLE: Parsing Customer IDs from PrestaShop API Response in PHP\nDESCRIPTION: This snippet shows how to iterate through the returned XML object to extract each customer's ID. It accesses the children elements of the 'customers' node and retrieves the 'id' attribute from each customer element.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/listing-resources.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$resources = $xml->customers->children();\nforeach ($resources as $resource) {\n    $attributes = $resource->attributes();\n    $resourceId = $attributes['id'];\n    // From there you could, for example, use th resource ID to call the webservice to get its details\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking DisplayExpressCheckout Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayExpressCheckout hook within a PrestaShop theme template. It's typically used in the cart-detailed-actions.tpl file to display express checkout options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayExpressCheckout.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayExpressCheckout'}\n```\n\n----------------------------------------\n\nTITLE: Executing displayCarrierExtraContent Hook in PHP\nDESCRIPTION: Hook execution code that allows modules to add extra content for a specific carrier. The hook passes the carrier object as a parameter and is executed only for the module related to that carrier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCarrierExtraContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayCarrierExtraContent', ['carrier' => $carrier], $moduleId)\n```\n\n----------------------------------------\n\nTITLE: Registering the Form Data Provider Service in YAML\nDESCRIPTION: This YAML snippet registers the `DemoConfigurationTextFormDataProvider` class as a Symfony service. It defines the service ID and injects the previously defined `DemoConfigurationTextDataConfiguration` service (`@prestashop.module.demosymfonyformsimple.form.demo_configuration_text_data_configuration`) as a constructor argument.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n  prestashop.module.demosymfonyformsimple.form.demo_configuration_text_form_data_provider:\n    class: 'PrestaShop\\Module\\DemoSymfonyFormSimple\\Form\\DemoConfigurationTextFormDataProvider'\n    arguments:\n      - '@prestashop.module.demosymfonyformsimple.form.demo_configuration_text_data_configuration'\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FormDataProviderData Hook for Product Forms\nDESCRIPTION: Example of registering and implementing the actionProductFormDataProviderData hook. This hook allows modules to provide or modify values sent to forms when they are being populated with data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    $this->registerHook('actionProductFormDataProviderData');\n}\n\npublic function hookActionProductFormDataProviderData(array $params): void\n{\n    // change value of fields in $params[\"data\"]\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Supply Order History XML Schema\nDESCRIPTION: Blank XML schema template for supply order history entries in PrestaShop. Contains fields for ID, supply order ID, employee information, state ID, and timestamp.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/supply_order_histories.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supply_order_history>\n    <id><![CDATA[]]></id>\n    <id_supply_order><![CDATA[]]></id_supply_order>\n    <id_employee><![CDATA[]]></id_employee>\n    <id_state><![CDATA[]]></id_state>\n    <employee_firstname><![CDATA[]]></employee_firstname>\n    <employee_lastname><![CDATA[]]></employee_lastname>\n    <date_add><![CDATA[]]></date_add>\n  </supply_order_history>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Remapping a Core Route to a Module Controller using YAML\nDESCRIPTION: YAML configuration within a module's `routes.yml` file that overrides the `admin_orders_index` route. It redirects requests for the `/sell/orders/orders/` path to the `demoAction` method of `MyModule\\Controller\\DemoController`, disabling the default module prefix using `_disable_module_prefix: true` (available from PS 1.7.7.0).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/routes.yml\nadmin_orders_index:\n    path: /sell/orders/orders/\n    methods: [GET]\n    defaults:\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\n      _disable_module_prefix: true\n```\n\n----------------------------------------\n\nTITLE: Using EditMetaCommand Class in PrestaShop Core Domain\nDESCRIPTION: The EditMetaCommand class is used for editing meta information in PrestaShop. It requires a meta ID as a constructor parameter and is handled by the EditMetaHandler class which implements the EditMetaHandlerInterface. The command doesn't return any value (void).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/edit-meta-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\Command\\EditMetaCommand\n```\n\n----------------------------------------\n\nTITLE: Initializing GeneratableInput JavaScript Component\nDESCRIPTION: JavaScript implementation for enabling the random value generation functionality. Shows how to initialize the GeneratableInput component and attach it to a button with proper data attributes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/generatable-text.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport GeneratableInput from \"admin-dev/themes/new-theme/js/components/generatable-input\";\n\n// initiate the component\nconst generatableInput = new GeneratableInput();\n\n// attach the component to button which should be targeted to generate random value on click.\ngeneratableInput.attachOn('.js-generator-btn');\n\n// note that the button is required to have 2 data-* attributes to define input target and value length.\n// for example:\n\n *    <button class=\"js-generator-btn\"\n *      data-target-input-id=\"my-input-id\"\n *      data-generated-value-length=\"16\"\n *    > Generate!\n *    </button>\n```\n\n----------------------------------------\n\nTITLE: Detecting Controller in BO Page with PrestaShop PHP\nDESCRIPTION: This PHP snippet uses PrestaShop's Tools class to determine if the current Back Office page is an admin order page by checking the controller's value. It is crucial for filtering executions since the hook used can be triggered on any BO page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/hook-tips.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ('AdminOrders' === Tools::getValue('controller')) {\n    // now we know we are only applying changes to admin order pages,\n    // but we aren't yet sure if it's a order create or order view page\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for External Payment Scenario (Mermaid)\nDESCRIPTION: Mermaid sequence diagram illustrating the workflow for an External payment method. Shows the customer being redirected to the Payment Service Provider (PSP) using the `$action` parameter. The PSP handles the payment form and redirects the customer back to the store. PrestaShop displays a confirmation, and typically receives a server-to-server webhook from the PSP to update the payment/order status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/payment/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Customer->>PrestaShop instance: Select an External payment method\n    PrestaShop instance->>External Payment service provider (PSP): Uses $action parameter to redirect to the PSP\n    External Payment service provider (PSP)-->>External Payment service provider (PSP): Handles payment form\n    External Payment service provider (PSP)->>PrestaShop instance: Redirects the customer back to the store\n    PrestaShop instance->>Customer: Returns a confirmation page\n    External Payment service provider (PSP)-->>PrestaShop instance: Usually send a webhook to the Store to give Server to server information about the payment\n    PrestaShop instance-->>PrestaShop instance: Updates payment status / order status\n```\n\n----------------------------------------\n\nTITLE: Moving Existing Column in Grid in PHP\nDESCRIPTION: This snippet shows how to move an existing column to a new position in a PrestaShop grid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$columns->move('name', 2);\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerForEditingHandler Class in PHP\nDESCRIPTION: This code snippet defines the handler class for the GetCustomerForEditing query. It implements the GetCustomerForEditingHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\QueryHandler\\GetCustomerForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Managing Order Shipping Details in PrestaShop\nDESCRIPTION: Demonstrates how to access and modify order-specific shipping details like tracking numbers using the OrderCarrier class. Shows both retrieval and updating of tracking information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/shipping.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// From an Order ID you have\n$order = new Order($orderId);\n$orderCarrier = new OrderCarrier($order->getIdOrderCarrier());\n\n// 1- Get tracking number\n$trackingNumber = $orderCarrier->tracking_number;\n\n// 2- Set tracking number\n$orderCarrier->tracking_number = 'ABDC00F';\n$orderCarrier->save();\n```\n\n----------------------------------------\n\nTITLE: Defining the Definition Model Structure\nDESCRIPTION: Example of the initial structure of an ObjectModel definition array, showing the main components: table name, primary key, multilanguage setting, and fields array declaration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static $definition = [\n    'table' => 'cms',\n    'primary' => 'id_cms',\n    'multilang' => true,\n    'fields' => array(\n```\n\n----------------------------------------\n\nTITLE: Querying Product Customization Fields - PrestaShop Domain - PHP\nDESCRIPTION: This code snippet, documented as `PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Customization\\Query\\GetProductCustomizationFields`, represents a query class for retrieving product customization fields for a specified product and shop context in PrestaShop. It requires the product ID and a shop constraint as constructor parameters, is handled by a specific handler class, and returns an array of CustomizationField results. Dependencies include PrestaShop's Domain Product Customization classes, and use is constrained to environments aware of its command-query separation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-customization-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Customization\\Query\\GetProductCustomizationFields\n_Gets product customization fields_\n\n| Query details              |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $productId`</li>  <li>`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Product\\Customization\\QueryHandler\\GetProductCustomizationFieldsHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Customization\\QueryHandler\\GetProductCustomizationFieldsHandlerInterface`</li>  |\n| **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Customization\\QueryResult\\CustomizationField[]`  |\n```\n\n----------------------------------------\n\nTITLE: Complete DemoViewOrderHooks Module Class in PHP\nDESCRIPTION: Main module class for the DemoViewOrderHooks module, including constructor, installation methods, and hook implementations. It demonstrates how to implement hooks for the order view page in PrestaShop 1.7.7.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License version 3.0\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0\n */\n\ndeclare(strict_types=1);\n\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Collection\\OrderCollection;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Install\\InstallerFactory;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Presenter\\OrderSignaturePresenter;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderRepository;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository;\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\n// need it because InstallerFactory is not autoloaded during the install\nrequire_once __DIR__.'/vendor/autoload.php';\n\nclass DemoViewOrderHooks extends Module\n{\n    public function __construct()\n    {\n        $this->name = 'demovieworderhooks';\n        $this->author = 'PrestaShop';\n        $this->version = '1.0.0';\n        $this->ps_versions_compliancy = ['min' => '1.7.7.0', 'max' => _PS_VERSION_];\n\n        parent::__construct();\n\n        $this->displayName = $this->l('Demo view order hooks');\n        $this->description = $this->l('Demonstration of new hooks in PrestaShop 1.7.7 order view page');\n    }\n\n    public function install()\n    {\n        if (!parent::install()) {\n            return false;\n        }\n\n        $installer = InstallerFactory::create();\n\n        return $installer->install($this);\n    }\n\n    public function uninstall()\n    {\n        $installer = InstallerFactory::create();\n\n        return $installer->uninstall() && parent::uninstall();\n    }\n\n    /**\n     * Displays customer's signature.\n     */\n    public function hookDisplayBackOfficeOrderActions(array $params)\n    {\n        /** @var OrderSignatureRepository $signatureRepository */\n```\n\n----------------------------------------\n\nTITLE: Executing filterCmsCategoryContent Hook in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how PrestaShop uses the Hook::exec() function to invoke the filterCmsCategoryContent hook, allowing developers to modify or filter a CMS category object before content page category data is fetched. The primary dependency is PrestaShop's Hook class with the exec method, and it expects an array containing 'object' (typically a CMS category variable) along with several optional parameters (module ID, array return flag, exception checking, push usage, shop ID, and chain flag). It returns the potentially modified content or result of the hook chain, and the mechanism is extensible by third-party modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterCmsCategoryContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'filterCmsCategoryContent',\n                ['object' => $cmsCategoryVar],\n                $id_module = null,\n                $array_return = false,\n                $check_exceptions = true,\n                $use_push = false,\n                $id_shop = null,\n                $chain = true\n            )\n```\n\n----------------------------------------\n\nTITLE: Updating Multi-language Product Fields in PrestaShop\nDESCRIPTION: The snippet demonstrates how to update multi-language fields of a product using a PATCH request on the PrestaShop API. It includes translating various fields such as meta descriptions, keywords, and names into multiple languages, identified by language IDs. This requires a multi-language setup in PrestaShop and an accessible API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product>\n        <id><![CDATA[{{id}}]]></id>\n        <meta_description>\n            <language id=\"1\"><![CDATA[Meta English description]]></language>\n            <language id=\"2\"><![CDATA[Description meta en français]]></language>\n        </meta_description>\n        <meta_keywords>\n            <language id=\"1\"><![CDATA[EN keyworkds]]></language>\n            <language id=\"2\"><![CDATA[Mots clés FR]]></language>\n        </meta_keywords>\n        <meta_title>    \n            <language id=\"1\"><![CDATA[English Title]]></language>\n            <language id=\"2\"><![CDATA[Titre en Francais]]></language>\n        </meta_title>\n        <link_rewrite>\n            <language id=\"1\"><![CDATA[english-title]]></language>\n            <language id=\"2\"><![CDATA[titre-francais]]></language>\n        </link_rewrite>\n        <name>\n            <language id=\"1\"><![CDATA[Product name]]></language>\n            <language id=\"2\"><![CDATA[Nom du produit]]></language>\n        </name>\n        <description>\n            <language id=\"1\"><![CDATA[English Description]]></language>\n            <language id=\"2\"><![CDATA[Description en français]]></language>\n        </description>\n        <description_short>\n            <language id=\"1\"><![CDATA[Short English description]]></language>\n            <language id=\"2\"><![CDATA[Description courte en français]]></language>\n        </description_short>\n    </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Disabling Back Office Token Protection in Apache Configuration\nDESCRIPTION: This Apache configuration snippet demonstrates how to disable the back office token protection in PrestaShop using an environment variable. This can be useful for development or testing purposes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/configuration/configuring-prestashop.md#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nSetEnv _TOKEN_ disabled\n```\n\n----------------------------------------\n\nTITLE: Setting the Template for HTML Output in a PrestaShop Front Controller (PHP)\nDESCRIPTION: Illustrates how to specify the Smarty template file for rendering HTML content within the `initContent` method of a PrestaShop front controller. After assigning variables using `$this->context->smarty->assign()`, it calls `$this->setTemplate()` with the module-specific template path (`module:cheque/views/templates/front/validation.tpl`). PrestaShop resolves this path relative to the module's `views/templates/front/` directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function initContent()\n{\n  // In the template, we need the vars paymentId & paymentStatus to be defined\n  $this->context->smarty->assign(\n    array(\n      'paymentId' => Tools::getValue('id'), // Retrieved from GET vars\n      'paymentStatus' => [...],\n    ));\n\n  // Will use the file modules/cheque/views/templates/front/validation.tpl\n  $this->setTemplate('module:cheque/views/templates/front/validation.tpl');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Widget Directly in Smarty Templates\nDESCRIPTION: Smarty syntax for calling widget functionality directly by module name. Includes examples of both generic calls and calls with specific hook names.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_3\n\nLANGUAGE: smarty\nCODE:\n```\n<!-- Generic call -->\n{widget name='<module_name>'}\n\n<!-- Call with a hook name -->\n{widget name='<module_name>' hook='<hook_name>'}\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO Meta Tags in PrestaShop 1.7 Theme Head\nDESCRIPTION: This snippet shows how to implement SEO-related meta tags in the head section of a PrestaShop 1.7 theme. It includes title, description, keywords, robots meta, and canonical link. The code uses Smarty blocks to allow easy redefinition of SEO elements in templates that extend this layout.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/head.md#2025-04-22_snippet_1\n\nLANGUAGE: smarty\nCODE:\n```\n  {block name='head_seo'}\n\n    <title>{block name='head_seo_title'}{$page.meta.title}{/block}</title>\n    <meta name=\"description\" content=\"{block name='head_seo_description'}{$page.meta.description}{/block}\">\n    <meta name=\"keywords\" content=\"{block name='head_seo_keywords'}{$page.meta.keywords}{/block}\">\n\n    {if $page.meta.robots !== 'index'}\n      <meta name=\"robots\" content=\"{$page.meta.robots}\">\n    {/if}\n\n    {if $page.canonical}\n      <link rel=\"canonical\" href=\"{$page.canonical}\">\n    {/if}\n\n  {/block}\n```\n\n----------------------------------------\n\nTITLE: Implemented Behat Step for Removing Carrier Handling Costs in PHP\nDESCRIPTION: Fully implemented PHP code for the new Behat step that removes handling costs from a specified carrier. It checks for the carrier's existence, fetches it, and disables the handling cost.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Given the carrier :carrierName has no handling costs\n */\npublic function carrierHasNoHandlingCosts($carrierName)\n{\n    // check a carrier with this name exists\n    $this->checkCarrierWithNameExists($carrierName);\n    // fetch the carrier\n    $carrier = $this->carriers[$carrierName];\n\n    // disable handling cost\n    $carrier->shipping_handling = false;\n    $carrier->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Embedded Payment Scenario (Mermaid)\nDESCRIPTION: Mermaid sequence diagram illustrating the workflow for an Embedded payment method. PrestaShop uses the `$form` parameter to display the PSP's form directly on the checkout page. The customer submits this form, potentially interacting directly with the PSP via JavaScript. PrestaShop creates the order and returns a confirmation page. A server-to-server webhook is often used for final payment status updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/payment/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Customer->>PrestaShop instance: Select an Embedded payment method\n    PrestaShop instance->>PrestaShop instance: Uses $form parameter to build to the PSP form\n    Customer->>External Payment service provider (PSP): Submits the PSP embedded form within the PrestaShop checkout page\n    External Payment service provider (PSP)-->>External Payment service provider (PSP): Handles payment form\n    PrestaShop instance-->>PrestaShop instance: Creates the Order\n    PrestaShop instance->>Customer: Returns a confirmation page\n    External Payment service provider (PSP)-->>PrestaShop instance: Usually send a webhook to the Store to give Server to server information about the payment\n    PrestaShop instance-->>PrestaShop instance: Updates payment status / order status\n```\n\n----------------------------------------\n\nTITLE: Executing Admin Login Controller Reset Hook in PHP\nDESCRIPTION: Hook execution code that runs after admin login controller reset initialization. Passes the controller instance and employee object as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerResetAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                        'actionAdminLoginControllerResetAfter',\n                        [\n                            'controller' => $this,\n                            'employee' => $employee,\n                        ]\n                    )\n```\n\n----------------------------------------\n\nTITLE: Removing Columns from Customer Grid in PHP\nDESCRIPTION: This code demonstrates how to remove specific columns from the Customer grid in PrestaShop using the columns collection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/** @var ColumnCollection */\n$columns = $definition->getColumns();\n$columns->remove('social_title')\n    ->remove('active')\n    ->remove('optin')\n;\n```\n\n----------------------------------------\n\nTITLE: Listening for Component Initialization Event in JavaScript\nDESCRIPTION: Demonstrates how to use the `EventEmitter` (from the 'events' package) to listen for the 'PSComponentsInitiated' event. This event signifies that the core PrestaShop JavaScript components exposed via `window.prestashop.component` have been initialized and are ready for interaction.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/global-components.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nEventEmitter.on('PSComponentsInitiated', () => {\n  [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a SubmitBulkAction to a PrestaShop Grid Definition in PHP\nDESCRIPTION: This PHP code demonstrates how to define bulk actions for a PrestaShop grid by extending `AbstractGridDefinitionFactory`. It overrides the `getBulkActions` method to return a `BulkActionCollection` containing a `SubmitBulkAction` configured with the identifier 'enable_selection', the display name 'Enable selection', and the target route 'submit_stuff'. This allows users to select multiple rows in the grid and trigger a submission to the specified route.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/bulk-actions-reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// /modules/my-module/src/Grid/MyGridDefinitionFactory.php\nnamespace MyModule\\Grid;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\Type\\SubmitBulkAction;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\BulkActionCollection;\n\n/**\n * How to define the Grid's bulk actions?\n * You can adapt this example or look at the existing ones\n * in PrestaShop's Core.\n */\nclass MyGridDefinitionFactory extends AbstractGridDefinitionFactory\n{\n    /**\n     * {@inheritdoc}\n     */\n    protected function getBulkActions()\n    {\n        return (new BulkActionCollection())\n            ->add(\n                (new SubmitBulkAction('enable_selection'))\n                ->setName('Enable selection')\n                ->setOptions([\n                    'submit_route' => 'submit_stuff',\n                ])\n            )\n        ;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring HelperList Fields in PHP\nDESCRIPTION: Demonstrates how to declare fields for a HelperList, including various optional parameters for customizing the appearance and behavior of each column.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->fields_list = array(\n  'country' => array(                              // First column.\n    'title' => $this->l('Country'),                // Column name.\n    'width' => 100,                                // Column width. At least one field should be set to 'auto' in order to grow with window size.\n    ['align'] => {'left', 'center', 'right'},      // Content position inside the column (default 'left', optional).\n    ['type'] => {'select', 'bool', 'date',         // Column format.\n      'datetime', 'decimal', 'float', 'percent',\n      'editable', 'price'},\n    ['list'] => $this->countries_array,            // For type == select only. Content for the select drop down filter list (optional).\n    ['filter_key'] => 'cl\\!id_country'),           // Define a custom filter key to be used by the filter SQL request\n                                                   // (optional, default uses the array key name, i.e. 'country').\n    ['orderby'] => {true, false},                  // If true, list will be alphabetically ordered using this column values (optional, default false).\n    ['search'] => {true, false},                   // If true, this column will have a search field (optional, default true).\n    ['image'] => 's',                              // If set, an image will be displayed in this field located in the '/img' subfolder defined as value here (optional).\n    ['image_id'] => 3,                             // If 'image' is set and if 'image_id' is set, it will be used as the image filename,\n                                                   // else the record item id will be used (optional)\n    ['icon'] => array(                              // If set, an icon will be displayed with icon key matching the field value.\n      0 => 'disabled.gif',                         // Used in combination with type == bool (optional).\n      1 => 'enabled.gif',\n      'default' => 'disabled.gif'\n    ),\n    ['active'] => 'status',                        // If set, the field will be replaced by a clickable boolean switch for the item field (i.e. 'status').\n                                                   // An icon will display the current status.\n    ['activeVisu'] => 'new_window',                // If set, the field will be replaced by an icon depending on the boolean value\n                                                   // of the field specified (i.e. 'new_window') (optional).\n    ['callback'] => 'getOrderTotalUsingTaxCalculationMethod', // If set, the return value of the defined method call\n                                                              //  will be used as the field content (optional).\n    ['callback_object'] => $cart,                  // If set in combination with 'callback', the method will be called from the provided object\n                                                   // instead of the current controller (optional).\n    ['prefix'] => '0x',                            // If set, it will be displayed before the field value (optional).\n    ['suffix'] => 'kg',                            // If set, it will be displayed after the field value (optional).\n    ['currency'] => {true, false},                 // If set and type == price, the currency displayed\n                                                   // will use the item currency and not the default currency (optional).\n    ['maxlength'] => 90,                           // If set, the field value will be truncated if it has more characters than the numeric value set (optional).\n    ['position'] => 'position',                    // If set to position, the field will display arrows\n                                                   // and be drag and droppable, which will update position in db (optional).\n    ['tmpTableFilter'] => {true, false},           // If set to true, the WHERE clause used to filter results\n                                                   // will use the $_tmpTableFilter variable (optional, default false).\n    ['havingFilter'] => {true, false},             // If set to true, the WHERE clause used to filter results\n                                                   // will use the $_filterHaving variable (optional, default false).\n    ['filter_type'] => {'int', 'bool', 'decimal'}, // Specify the value format when used in the filter where clause.\n                                                   // Useful when \"filter_type\" is different from \"type\" (i.e. type == select) (optional).\n    ['color'] => 'color',                          // If set, the field value will appear inside a colored element.\n                                                   // The color used is the \"color\" index of the record and is in HTML name or hexadecimal format (optional).\n    ['hint'] => $this->l('This is the quantity available in the current shop/group.'), // The hint will appear on column name hover (optional).\n    ['ajax'] => {true, false}                        // if the type is bool, you use ajax\n ),\n  'another_field' => array(                        // Second column.\n    ...\n  ),\n  'another_field' => array(                        // Third column.\n    ...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dynamic Grid Filter Form Modifier Hook with PrestaShop Core in PHP\nDESCRIPTION: This snippet dispatches a dynamically constructed hook named 'action<DefinitionId>GridFilterFormModifier' using PrestaShop's hookDispatcher. It leverages the Container::camelize method to generate the specific hook name from a grid definition's ID, and passes the filter form builder as the parameter. Dependencies include PrestaShop core classes (hookDispatcher, Container, and definition objects), and the expected input is a definition object and form builder. The output is the triggering of the corresponding hook with relevant parameters for further customization or extension by modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<DefinitionId>GridFilterFormModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->hookDispatcher->dispatchWithParameters('action' . Container::camelize($definition->getId()) . 'GridFilterFormModifier', [\n    'filter_form_builder' => $formBuilder,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ToggleColumn in PrestaShop Grid - PHP\nDESCRIPTION: This PHP code demonstrates how to add a ToggleColumn to a PrestaShop grid using core classes. It illustrates instantiating the ToggleColumn component, setting its display name, and specifying required configuration options such as the field to display, the primary field, the route, and the route parameter name. The snippet then adds the configured ToggleColumn to a new ColumnCollection, preparing it for use in a grid. Dependencies include PrestaShop's grid core classes (ToggleColumn and ColumnCollection) and a manually loaded JavaScript extension for toggle functionality. Inputs are field and routing configuration parameters. The output is a grid column capable of displaying booleans as togglable icons; the toggling action only activates if the required JS extension is loaded.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Column\\\\Type\\\\Common\\\\ToggleColumn;\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Column\\\\ColumnCollection;\\n\\n$toggleColumn = new ToggleColumn('active');\\n$toggleColumn->setName('Enabled');\\n$toggleColumn->setOptions([\\n     'field' => 'active',\\n     'primary_field' => 'id_customer',\\n     'route' => 'admin_customers_toggle_status',\\n     'route_param_name' => 'customerId',\\n]);\\n\\n$columns = new ColumnCollection();\\n$columns->add($toggleColumn);\n```\n\n----------------------------------------\n\nTITLE: Registering Form Data Provider as a Service in YAML\nDESCRIPTION: YAML configuration for registering the ContactFormDataProvider as a service in PrestaShop's dependency injection container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nprestashop.core.form.identifiable_object.data_provider.contact_form_data_provider:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider\\ContactFormDataProvider'\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook Methods in PrestaShop Module\nDESCRIPTION: This PHP code snippet demonstrates the implementation of hook methods for displayLeftColumn, displayRightColumn, and actionFrontControllerSetMedia. It assigns Smarty variables and registers CSS and JavaScript files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/displaying-content-in-front-office.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    public function hookDisplayLeftColumn($params)\n    {\n        $this->context->smarty->assign([\n            'my_module_name' => Configuration::get('MYMODULE_NAME'),\n            'my_module_link' => $this->context->link->getModuleLink('mymodule', 'display')\n        ]);\n\n        return $this->display(__FILE__, 'mymodule.tpl');\n    }\n\n    public function hookDisplayRightColumn($params)\n    {\n        return $this->hookDisplayLeftColumn($params);\n    }\n\n    public function hookActionFrontControllerSetMedia()\n    {\n        $this->context->controller->registerStylesheet(\n            'mymodule-style',\n            'modules/' . $this->name . '/views/css/mymodule.css',\n            [\n                'media' => 'all',\n                'priority' => 1000,\n            ]\n        );\n\n        $this->context->controller->registerJavascript(\n            'mymodule-javascript',\n            'modules/' . $this->name . '/views/js/mymodule.js',\n            [\n                'position' => 'bottom',\n                'priority' => 1000,\n            ]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Runtime Configuration Factory in PHP\nDESCRIPTION: Factory class for building ImportRuntimeConfig objects from Symfony Request objects. Handles runtime settings like validation mode, offset, limits and shared data between steps.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/Configuration/ImportRuntimeConfigFactory.php\n\nfinal class ImportRuntimeConfigFactory implements ImportRuntimeConfigFactoryInterface\n{\n    public function buildFromRequest(Request $request)\n    {\n        $sharedData = $request->request->get('crossStepsVars', []);\n\n        return new ImportRuntimeConfig(\n            $request->request->getBoolean('validateOnly'),\n            $request->request->getInt('offset'),\n            $request->request->getInt('limit'),\n            json_decode($sharedData, true),\n            $request->request->get('type_value', [])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying the Upload Logos Command Handler Interface in PrestaShop (PHP)\nDESCRIPTION: This snippet defines the interface that the `UploadLogosHandler` implements. This contract ensures that any handler for the `UploadLogosCommand` adheres to a specific structure and method signature, promoting consistency within the PrestaShop Core domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/upload-logos-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\CommandHandler\\UploadLogosHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining a Translatable Module Tab using Wording System (PHP, PS 1.7.8+)\nDESCRIPTION: Illustrates defining a module tab for PrestaShop 1.7.8+ using the `wording` and `wording_domain` properties to leverage the built-in translation system. The 'name' property serves as a fallback if the translation for the key specified in 'wording' within the 'wording_domain' is unavailable. Requires PrestaShop 1.7.8 or newer for these keys to be effective.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodule extends Module\n{\n    public $tabs = [\n        [\n            'name' => 'Merchant Expertise', // Fallback when the translation is unavailable\n            'class_name' => 'AdminGamification',\n            'parent_class_name' => 'ShopParameters',\n            'wording' => 'Merchant Expertise', // Translation key\n            'wording_domain' => 'Modules.Gamification.Admin', // Translation domain\n        ],\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for displayOrderConfirmation Hook in PHP\nDESCRIPTION: This snippet defines the parameters passed to the displayOrderConfirmation hook. It includes an 'order' object of type Order.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderConfirmation.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\narray(\n  'order' => (object) Order\n);\n```\n\n----------------------------------------\n\nTITLE: Executing actionAttributeCombinationDelete Hook in PHP\nDESCRIPTION: Hook execution when deleting a product attribute combination. Passes the ID of the product attribute being deleted as a parameter to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeCombinationDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeCombinationDelete', ['id_product_attribute' => (int) $this->id])\n```\n\n----------------------------------------\n\nTITLE: Updating Product Image with PrestaShop Domain Command (PHP)\nDESCRIPTION: Demonstrates the definition and structure of the UpdateProductImageCommand within the PrestaShop framework for updating product images. Requires PrestaShop core domain and adapter namespaces and depends on specific value objects. Accepts an image ID (int) and a ShopConstraint object as constructor parameters, and should be handled by the UpdateProductImageHandler. No value is returned, and the command is intended for use with the domain command-handler system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Command\\UpdateProductImageCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing AmountCurrencyType in OrderPaymentType Form\nDESCRIPTION: Example showing how to add an AmountCurrencyType field to a form builder with validation constraints and currency options. The field requires a positive amount and uses shop-specific currency choices.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/amount-currency.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder\n   ->add('amount_currency', AmountCurrencyType::class, [\n        'amount_constraints' => [\n            new NotNull(),\n            new GreaterThan([\n                'value' => 0,\n                'message' => $this->translator->trans(\n                    'Invalid value: the payment must be a positive amount.', [], 'Admin.Notifications.Error'\n                ),\n            ]),\n        ],\n        'currencies' => $this->currencySymbolByIdChoiceProvider->getChoices([\n            'id_shop' => $this->contextShopId,\n        ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for PrestaShop Configuration\nDESCRIPTION: This XML snippet provides a blank schema for PrestaShop configuration data. It includes fields for id, value, name, shop group ID, shop ID, and date fields. The schema is designed to be used as a template for configuration entries in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/configurations.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <configuration>\n    <id><![CDATA[]]></id>\n    <value><![CDATA[]]></value>\n    <name><![CDATA[]]></name>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_shop><![CDATA[]]></id_shop>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n  </configuration>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store Using PrestaShop Command Pattern - PHP\nDESCRIPTION: This snippet references the DeleteStoreCommand class from the PrestaShop Core Domain, designed to encapsulate the intent to delete a store entity. It is executed via the DeleteStoreHandler, which implements the DeleteStoreHandlerInterface, enforcing the command/handler separation and type safety. The command's constructor expects an integer store ID, with no return value upon successful execution; users must ensure that the corresponding handler and domain modeling are available in their PrestaShop installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/delete-store-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Store\\Command\\DeleteStoreCommand`\n```\n\n----------------------------------------\n\nTITLE: Executing Hooks in PrestaShop PHP\nDESCRIPTION: This snippet demonstrates the execution of a hook in PrestaShop to modify controller options. It utilizes the Hook::exec() method to dynamically invoke the 'action<Controller>OptionsModifier' hook based on the current controller name. Dependencies include the PrestaShop framework and its Hook class. Input parameters like 'options' and 'option_vars' are modified and passed by reference, enabling the extension of controller functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<Controller>OptionsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . $this->controller_name . 'OptionsModifier', [\n            'options' => &$this->fields_options,\n            'option_vars' => &$this->tpl_option_vars,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Legacy Context in PrestaShop CLI Command\nDESCRIPTION: Example of implementing a custom CLI command that uses the LegacyContextLoader to initialize the required context for legacy PrestaShop components. The loadGenericContext() method sets up necessary Context properties including fake Employee and Controller instances.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/context-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMyCustomCommand extends ContainerAwareCommand\n{\n\n    protected function configure()\n    {\n        $this->setName('my-custom-command');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $this->getContainer()->get('prestashop.adapter.legacy_context_loader')->loadGenericContext();\n        \n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Service Configuration in YAML\nDESCRIPTION: YAML configuration for registering a new service in the Symfony container with dependencies and arguments.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  _defaults:\n    public: true\n\n  your_company.your_module.your_service:\n    class: YourCompany\\YourModule\\YourService\n    arguments:\n      - \"@translator\"\n      - \"My custom message\"\n```\n\n----------------------------------------\n\nTITLE: Adding a New Language with Domain Command - PrestaShop PHP\nDESCRIPTION: This snippet references the AddLanguageCommand class in PrestaShop, which represents a domain command for adding a new language. It requires several parameters, including language name, ISO code, IETF tag, date formats, image paths, RTL status, activation state, and associated shops. The command is handled by AddLanguageHandler and returns a LanguageId value object upon successful execution. It is used within a command bus architecture and depends on PrestaShop's core and adapter namespaces; users must ensure these classes and interfaces are autoloaded and correctly namespaced.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/add-language-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\AddLanguageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\n// Adds new language with given data\n// Constructor parameters:\n//   $string $name\n//   $string $isoCode\n//   $string $tagIETF\n//   $string $shortDateFormat\n//   $string $fullDateFormat\n//   $string $flagImagePath\n//   $string $noPictureImagePath\n//   $bool $isRtl\n//   $bool $isActive\n//   $array $shopAssociation\n// Handler class:\nPrestaShop\\PrestaShop\\Adapter\\Language\\CommandHandler\\AddLanguageHandler\n// Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Language\\CommandHandler\\AddLanguageHandlerInterface\n// Return type: PrestaShop\\PrestaShop\\Core\\Domain\\Language\\ValueObject\\LanguageId\n```\n\n----------------------------------------\n\nTITLE: Adding SwitchType to Symfony Form\nDESCRIPTION: This code snippet demonstrates how to add a SwitchType to a Symfony form in a PrestaShop module. It configures the SwitchType to display ON/OFF choices. The form requires Symfony\\Component\\Form\\AbstractType and PrestaShopBundle\\Form\\Admin\\Type\\SwitchType. The switch allows customization of choices while handling boolean values. Ensure Symfony framework is set up prior to integration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/switch.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\SwitchType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('switch', SwitchType::class, [\n            // Customized choices with ON/OFF instead of Yes/No\n            'choices' => [\n                'ON' => true,\n                'OFF' => false,\n            ],\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Widget Templates Inline with Smarty\nDESCRIPTION: Uses the `{widget_block}` function to display content from a widget ('ps_linklist') while simultaneously overriding its default template markup directly within the calling template. This avoids modifying the module's original template file (`ps_linklist/views/templates/hook/linkblock.tpl`) but couples the theme tightly to the module's data structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_10\n\nLANGUAGE: smarty\nCODE:\n```\n  {widget_block name=\"ps_linklist\"}\n    {foreach $linkBlocks as $linkBlock}\n      <ul>\n        {foreach $linkBlock.links as $link}\n          <li>\n              <h4><a href=\"{$link.url}\">{$link.title}</a></h4>\n              <p>{$link.description}</p>\n          </li>\n        {/foreach}\n      </ul>\n    {/foreach}\n  {/widget_block}\n```\n\n----------------------------------------\n\nTITLE: Creating a XML Export Download Link Template in Twig\nDESCRIPTION: This Twig template renders a download link button for the exported XML file in the PrestaShop admin interface. It includes a material icon and utilizes the translation system to display localized text.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# in Foo/views/download_link.twig #}\n<a id=\"desc-product-export\" class=\"dropdown-item\" href=\"{{ filepath }}\" target=\"_blank\">\n    <i class=\"material-icons\">cloud</i>{{ \"Export XML\"|trans({}, 'Module.Foo') }}\n</a>\n```\n\n----------------------------------------\n\nTITLE: Query Class Definition in PrestaShop CMS Module\nDESCRIPTION: Defines a query class that retrieves the name of a CMS page category for use in listing displays. The query is handled by GetCmsPageCategoryNameForListingHandler and returns a string value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-category-name-for-listing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Query\\GetCmsPageCategoryNameForListing\n```\n\n----------------------------------------\n\nTITLE: Translating in Legacy Controllers\nDESCRIPTION: Shows how to use the trans() helper method in legacy controllers to translate wordings. This method is available directly in the controller context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// legacy controllers\n$this->trans('This product is no longer available.', [], 'Shop.Notifications.Error');\n```\n\n----------------------------------------\n\nTITLE: Executing 'actionCustomerAccountAdd' Hook in PrestaShop Core (PHP)\nDESCRIPTION: This PHP code calls the PrestaShop hook 'actionCustomerAccountAdd' using the static Hook::exec() method. It passes an array with 'newCustomer' referencing the newly created Customer object, signaling successful account creation. No external dependencies are required besides the PrestaShop core; the key parameter is the 'newCustomer', and any registered hook listeners will process this event. Intended for integration and extension within PrestaShop modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerAccountAdd.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionCustomerAccountAdd', [\\n                'newCustomer' => $customer,\\n            ])\n```\n\n----------------------------------------\n\nTITLE: Using AddCountryCommand in PrestaShop's Core Domain Country Module\nDESCRIPTION: The AddCountryCommand class allows adding new countries to PrestaShop with specified parameters including localized names, ISO code, call prefix, currency settings, and various country-specific configurations. It returns a CountryId value object and is processed by the AddCountryHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/country/_partials/add-country-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Country\\Command\\AddCountryCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonCollectionType in PrestaShop Form Builder\nDESCRIPTION: Example showing how to add a ButtonCollectionType to a form builder with edit and delete action buttons. The implementation includes button configurations with icons, tooltips, and modal confirmation dialogs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/button-collection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('actions', ButtonCollectionType::class, [\n    'buttons' => [\n        'edit' => [\n            'type' => IconButtonType::class,\n            'options' => [\n                'icon' => 'mode_edit',\n                'attr' => [\n                    'class' => 'edit-combination-item tooltip-link',\n                    'data-toggle' => 'pstooltip',\n                    'data-original-title' => $this->trans('Edit', 'Admin.Actions'),\n                ],\n            ],\n        ],\n        'delete' => [\n            'type' => IconButtonType::class,\n            'options' => [\n                'icon' => 'delete',\n                'attr' => [\n                    'class' => 'delete-combination-item tooltip-link',\n                    'data-modal-title' => $this->trans('Delete item', 'Admin.Notifications.Warning'),\n                    'data-modal-message' => $this->trans('Delete selected item?', 'Admin.Notifications.Warning'),\n                    'data-modal-apply' => $this->trans('Delete', 'Admin.Actions'),\n                    'data-modal-cancel' => $this->trans('Cancel', 'Admin.Actions'),\n                    'data-toggle' => 'pstooltip',\n                    'data-original-title' => $this->trans('Delete', 'Admin.Actions'),\n                ],\n            ],\n        ],\n    ],\n    'label' => $this->trans('Actions', 'Admin.Global'),\n    'attr' => [\n        'class' => 'combination-row-actions',\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Injecting Translator Service in Custom Classes\nDESCRIPTION: Demonstrates how to inject the Translator service into a custom class using dependency injection. This allows translation functionality outside of controllers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// SomeService.php\n\nnamespace PrestaShop\\PrestaShop\\Core\\Foo\\Bar;\n\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass SomeService\n{\n    private $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid in Twig Template\nDESCRIPTION: This Twig snippet shows how to include the grid panel in the template and add necessary JavaScript files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% block content %}\n  <div class=\"row justify-content-center\">\n    <div class=\"col-lg-12\">\n      {% include '@PrestaShop/Admin/Common/Grid/grid_panel.html.twig' with {'grid': taxGrid} %}\n    </div>\n  </div>\n{% endblock %}\n\n{% block javascripts %}\n  {{ parent() }}\n\n  <script src=\"{{ asset('themes/default/js/bundle/pagination.js') }}\"></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Triggering actionCategoryDelete Hook - PrestaShop PHP\nDESCRIPTION: This snippet calls the 'actionCategoryDelete' hook in PrestaShop using the Hook::exec method. The hook is supplied with an array containing the deleted category object and any deleted children. This allows modules to perform additional operations or cleanup when a category is deleted. No external dependencies are required except PrestaShop's core classes, and the parameters passed are the current category instance ('$this') and the related deleted children ('$deletedChildren').\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCategoryDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionCategoryDelete', ['category' => $this, 'deleted_children' => $deletedChildren])\n```\n\n----------------------------------------\n\nTITLE: Invoking PrestaShop Hooks with Smarty\nDESCRIPTION: Demonstrates using the `{hook}` Smarty function to execute PrestaShop hooks. The first example shows a basic hook invocation. The second example executes a hook specifically for the 'mysupermodule'. The third example executes a hook while excluding 'foreveralone' and 'derpmodule'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h=\"displayBeforeSomething\"}\n```\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h=\"displayBeforeSomething\" mod=\"mysupermodule\"}\n```\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h=\"displayBeforeSomething\" excl=\"foreveralone,derpmodule\"}\n```\n\n----------------------------------------\n\nTITLE: Running the Development Watch Script (Shell)\nDESCRIPTION: Executes the `dev` script defined in `package.json`. This command compiles the Vue.js application into the configured PrestaShop module's `views/` directory and continuously watches the source files in `_dev/` for changes, recompiling automatically.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Instance in PrestaShop General Code\nDESCRIPTION: Shows how to get a Cookie instance from anywhere in the PrestaShop codebase using the Context object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContext::getContext()\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Customer Information - PrestaShop PHP\nDESCRIPTION: This PHP snippet represents the GetCustomerForViewing query, which encapsulates the process for requesting detailed customer information suitable for display in the PrestaShop Back Office. Dependencies include the PrestaShop core domain and adapter namespaces, as well as the related handler interface. The key parameter is an integer customer ID, and the expected output is an instance of ViewableCustomer containing customer data. The pattern relies on defining a query, an associated handler class, and a clearly defined result object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-viewing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerForViewing\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Hook\nDESCRIPTION: The code snippet demonstrates calling the 'actionEmailAddAfterContent' hook using PrestaShop's Hook API. This occurs after fetching the mail template, allowing additional content to be added. Dependencies include the PrestaShop framework and the existence of the 'Hook' class. Key parameters are 'template', 'template_html', and 'template_txt', which represent the mail templates. Expected input includes language ID and templates, while the output is the execution result of all subscribed functions to this hook. The function handles the potential modification of template content in HTML and text formats.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionEmailAddAfterContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionEmailAddAfterContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            )\n```\n\n----------------------------------------\n\nTITLE: Adding NumberMinMaxFilterType to a Symfony Form (PHP)\nDESCRIPTION: This PHP snippet illustrates how to add the custom NumberMinMaxFilterType field to a Symfony form within the PrestaShop framework. The form includes separate min and max value fields with customized placeholders using translation. Dependencies: Symfony Forms, PrestaShopBundle, and relevant translation service. The snippet expects $this->trans to provide translated labels for 'Min' and 'Max'; both arrays for min_field_options and max_field_options can accept any NumberType options. Output is a form with two float input fields representing a value range. No additional JS is required.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/number-min-max-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\NumberMinMaxFilterType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('mumberminmaxtype', NumberMinMaxFilterType::class, [\n            'min_field_options' => [\n                'attr' => [\n                    'placeholder'=> $this->trans('Min', [], 'Admin.Global')\n                ]\n            ],\n            'max_field_options' => [\n                'attr' => [\n                    'placeholder'=> $this->trans('Max', [], 'Admin.Global')\n                ]\n            ],\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Catching Domain Exceptions in a Controller (PrestaShop, PHP)\nDESCRIPTION: Shows how a controller method, editAction, handles domain-level exceptions such as CategoryException. The controller attempts to handle a GetCategoryForEditing query, and on exception, adds a flash error message suitable for the specific exception. The dependencies include a query bus and error message providers; expected input is a category ID and a request object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/domain-exceptions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// src/PrestaShopBundle/Controller/Admin/Sell/Catalog/CategoryController.php\\n\\npublic function editAction($categoryId, Request $request)\\n{\\n    try {\\n        $editableCategory = $this->getQueryBus()->handle(new GetCategoryForEditing((int) $categoryId));\\n    } catch (CategoryException $e) {\\n        // Catching all exceptions from category domain\\n        // and showing a specific error message for every exception type.\\n        $this->addFlash('error', $this->getErrorMessageForException($e, $this->getErrorMessages()));\\n    }\\n\\n    // ...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Cart Product Removal Command Class Structure - PHP\nDESCRIPTION: Command class structure for removing products from cart with support for combinations and customizations. Requires cart ID and product ID, with optional combination and customization IDs. Returns void and is handled by RemoveProductFromCartHandler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/remove-product-from-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\RemoveProductFromCartCommand\n```\n\n----------------------------------------\n\nTITLE: Registering Assets Without a Front Controller in PrestaShop\nDESCRIPTION: Demonstrates how to register assets in a standard module using the actionFrontControllerSetMedia hook. This approach allows registering assets on specific pages or globally, with various configuration options like media type, position, inline loading, and versioning.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionFrontControllerSetMedia($params)\n{\n    // Only on the product page\n    // You could also check if the current controller is an instance of the one you want to target\n    if ('product' instanceof $this->context->controller->php_self) {\n        $this->context->controller->registerStylesheet(\n            'module-'.$this->name.'-style',\n            'modules/'.$this->name.'/css/modulename.css',\n            [\n              'media' => 'all',\n              'priority' => 200,\n            ]\n        );\n\n        $this->context->controller->registerJavascript(\n            'module-'.$this->name.'-simple-lib',\n            'modules/'.$this->name.'/js/lib/simple-lib.js',\n            [\n              'priority' => 200,\n              'attributes' => 'async',\n            ]\n        );\n    }\n\n    // On every page\n    $this->context->controller->registerJavascript(\n        'module-'.$this->name.'-js',\n        'modules/'.$this->name.'/ga.js',\n        [\n          'position' => 'head',\n          'inline' => true,\n          'priority' => 10,\n          'version' => 'release-2021-10'\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MaterialChoiceTreeType in PHP Form\nDESCRIPTION: Example of how to implement MaterialChoiceTreeType in a custom Symfony form type. Shows configuration of the choices tree with nested categories and customizable options for values, labels, and children nodes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-choice-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n    \nuse PrestaShopBundle\\Form\\Admin\\Type\\MaterialChoiceTreeType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('categories', MaterialChoiceTreeType::class, [\n                'choices_tree' => [\n                    'id' => 1, // choice_value option refers this key\n                    'name' => 'Home', //choice_label option refers this key\n                    'children' => [ // choice_children refers this key\n                        'id' => 2,\n                        'name' => 'Example',\n                        'children' => [\n                            'id' => 3,\n                            'name' => 'Example child',\n                        ],\n                    ],\n                ],\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TranslatableType to a Symfony Form\nDESCRIPTION: This snippet demonstrates how to include the TranslatableType in a Symfony form to allow input fields to support multiple languages. It requires Symfony and PrestaShop components to extend abstract form types, and you should specify the type of input you wish to be translatable, such as a TextareaType.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/translatable.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\nuse PrestaShopBundle\\Form\\Admin\\Type\\TranslatableType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('description', TranslatableType::class, [\n            // we'll have text area that is translatable\n            'type' => TextareaType::class,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Database Rows\nDESCRIPTION: Demonstrates how to update existing database rows with new values including proper value escaping and conditions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/** @var bool $result */\n$result = $db->update('db_table', array(\n    'value' => pSQL($value),\n    'date_upd' => date('Y-m-d H:i:s'),\n), 'id_table = 10', 1, true);\n```\n\n----------------------------------------\n\nTITLE: Extending Email Template Layout in Twig\nDESCRIPTION: This Twig code extends the core order confirmation email template and adds a custom block with a thank you message and a review link. It demonstrates how to use Twig's inheritance and block features to modify existing email layouts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/extend-a-layout-from-module.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends '@MailThemes/modern/core/order_conf.html.twig' %}\n\n{% block content %}\n  {{ parent() }}\n  <table width=\"100%\">\n    <tr>\n      <td align=\"center\" class=\"titleblock\" style=\"border-collapse: collapse; mso-table-lspace: 0pt; mso-table-rspace: 0pt; direction: ltr; font-size: 0px; padding: 0 50px; text-align: center; vertical-align: top;\">\n        <div  style=\"font-family:Open sans, arial, sans-serif;font-size:14px;line-height:25px;text-align:left;color:#555454;\">\n          {{ 'Thank you for purchasing this product on our store. Feel free to leave us a review if you are happy of this product:'|trans({}, 'EmailsBody', locale)|raw }}\n          <a href=\"{shop_url}/post_review\">{{ 'Post a review'|trans({}, 'EmailsBody', locale)|raw }}</a>\n        </font>\n      </td>\n    </tr>\n  </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows\nDESCRIPTION: Shows how to insert multiple rows at once using a single INSERT command for better performance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$now = date('Y-m-d H:i:s');\n/** @var bool $result */\n$result = $db->insert(\n    'db_table',\n    [\n        [\n            'name' => 'John Doe',\n            'email' => 'john.doe@email.com',\n            'date_add' => $now,\n        ],\n        [\n            'name' => 'Jane Doe',\n            'email' => 'jane.doe@email.com',\n            'date_add' => $now,\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Repository as a Symfony Service (YAML)\nDESCRIPTION: This YAML configuration snippet defines the `ProductRepository` class as a service within the Symfony container for a PrestaShop module (`foo`). It's placed in `modules/foo/config/services.yml`. The service `product_repository` is configured with its class `Foo\\Repository\\ProductRepository` and receives the Doctrine DBAL connection service (`@doctrine.dbal.default_connection`) and the database prefix parameter (`%database_prefix%`) as constructor arguments. It is marked as `public: true` to ensure accessibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/foo/config/services.yml\n\nservices:\n    product_repository:\n        class: Foo\\Repository\\ProductRepository\n        arguments: ['@doctrine.dbal.default_connection', '%database_prefix%']\n        public: true\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Blank XML Schema Template\nDESCRIPTION: Comprehensive XML schema template for PrestaShop products that includes all possible fields and associations. The schema defines product attributes, multilingual content, pricing, stock information, and relationships with other entities like categories, images, and combinations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/products.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product>\n    <id><![CDATA[]]></id>\n    <id_manufacturer><![CDATA[]]></id_manufacturer>\n    <id_supplier><![CDATA[]]></id_supplier>\n    <id_category_default><![CDATA[]]></id_category_default>\n    <new><![CDATA[]]></new>\n    <cache_default_attribute><![CDATA[]]></cache_default_attribute>\n    <id_default_image><![CDATA[]]></id_default_image>\n    <id_default_combination><![CDATA[]]></id_default_combination>\n    <id_tax_rules_group><![CDATA[]]></id_tax_rules_group>\n    <position_in_category><![CDATA[]]></position_in_category>\n    <type><![CDATA[]]></type>\n    <id_shop_default><![CDATA[]]></id_shop_default>\n    <reference><![CDATA[]]></reference>\n    <supplier_reference><![CDATA[]]></supplier_reference>\n    <location><![CDATA[]]></location>\n    <width><![CDATA[]]></width>\n    <height><![CDATA[]]></height>\n    <depth><![CDATA[]]></depth>\n    <weight><![CDATA[]]></weight>\n    <quantity_discount><![CDATA[]]></quantity_discount>\n    <ean13><![CDATA[]]></ean13>\n    <isbn><![CDATA[]]></isbn>\n    <upc><![CDATA[]]></upc>\n    <mpn><![CDATA[]]></mpn>\n    <cache_is_pack><![CDATA[]]></cache_is_pack>\n    <cache_has_attachments><![CDATA[]]></cache_has_attachments>\n    <is_virtual><![CDATA[]]></is_virtual>\n    <state><![CDATA[]]></state>\n    <additional_delivery_times><![CDATA[]]></additional_delivery_times>\n    <delivery_in_stock>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </delivery_in_stock>\n    <delivery_out_stock>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </delivery_out_stock>\n    <on_sale><![CDATA[]]></on_sale>\n    <online_only><![CDATA[]]></online_only>\n    <ecotax><![CDATA[]]></ecotax>\n    <minimal_quantity><![CDATA[]]></minimal_quantity>\n    <low_stock_threshold><![CDATA[]]></low_stock_threshold>\n    <low_stock_alert><![CDATA[]]></low_stock_alert>\n    <price><![CDATA[]]></price>\n    <wholesale_price><![CDATA[]]></wholesale_price>\n    <unity><![CDATA[]]></unity>\n    <unit_price_ratio><![CDATA[]]></unit_price_ratio>\n    <additional_shipping_cost><![CDATA[]]></additional_shipping_cost>\n    <customizable><![CDATA[]]></customizable>\n    <text_fields><![CDATA[]]></text_fields>\n    <uploadable_files><![CDATA[]]></uploadable_files>\n    <active><![CDATA[]]></active>\n    <redirect_type><![CDATA[]]></redirect_type>\n    <id_type_redirected><![CDATA[]]></id_type_redirected>\n    <available_for_order><![CDATA[]]></available_for_order>\n    <available_date><![CDATA[]]></available_date>\n    <show_condition><![CDATA[]]></show_condition>\n    <condition><![CDATA[]]></condition>\n    <show_price><![CDATA[]]></show_price>\n    <indexed><![CDATA[]]></indexed>\n    <visibility><![CDATA[]]></visibility>\n    <advanced_stock_management><![CDATA[]]></advanced_stock_management>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <pack_stock_type><![CDATA[]]></pack_stock_type>\n    <meta_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_description>\n    <meta_keywords>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_keywords>\n    <meta_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_title>\n    <link_rewrite>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </link_rewrite>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n    <description_short>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description_short>\n    <available_now>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </available_now>\n    <available_later>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </available_later>\n    <associations>\n      <categories>\n        <category>\n          <id><![CDATA[]]></id>\n        </category>\n      </categories>\n      <images>\n        <image>\n          <id><![CDATA[]]></id>\n        </image>\n      </images>\n      <combinations>\n        <combination>\n          <id><![CDATA[]]></id>\n        </combination>\n      </combinations>\n      <product_option_values>\n        <product_option_value>\n          <id><![CDATA[]]></id>\n        </product_option_value>\n      </product_option_values>\n      <product_features>\n        <product_feature>\n          <id><![CDATA[]]></id>\n          <id_feature_value><![CDATA[]]></id_feature_value>\n        </product_feature>\n      </product_features>\n      <tags>\n        <tag>\n          <id><![CDATA[]]></id>\n        </tag>\n      </tags>\n      <stock_availables>\n        <stock_available>\n          <id><![CDATA[]]></id>\n          <id_product_attribute><![CDATA[]]></id_product_attribute>\n        </stock_available>\n      </stock_availables>\n      <attachments>\n        <attachment>\n          <id><![CDATA[]]></id>\n        </attachment>\n      </attachments>\n      <accessories>\n        <product>\n          <id><![CDATA[]]></id>\n        </product>\n      </accessories>\n      <product_bundle>\n        <product>\n          <id><![CDATA[]]></id>\n          <id_product_attribute><![CDATA[]]></id_product_attribute>\n          <quantity><![CDATA[]]></quantity>\n        </product>\n      </product_bundle>\n    </associations>\n  </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Extending the Global Grid Component in JavaScript\nDESCRIPTION: Shows how to instantiate the globally available Grid component using `window.prestashop.component.Grid` and add an extension (e.g., `ColumnTogglingExtension`) from `window.prestashop.component.GridExtensions`. This allows developers to enhance the functionality of grids within their modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/global-components.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst grid = new window.prestashop.component.Grid(gridId);\ngrid.addExtension(new window.prestashop.component.GridExtensions.ColumnTogglingExtension());\n```\n\n----------------------------------------\n\nTITLE: Building DataRowCollection from Import File in PrestaShop\nDESCRIPTION: This code snippet shows the DataRowCollectionFactory implementation that reads data from a file and converts it into a collection of DataRow objects. It processes the file row by row until reaching the optional maximum row limit.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/File/DataRow/Factory/DataRowCollectionFactory.php\n\nfinal class DataRowCollectionFactory implements DataRowCollectionFactoryInterface\n{\n    // ...\n\n    public function buildFromFile(SplFileInfo $file, $maxRowsInCollection = null)\n    {\n        $dataRowCollection = new DataRowCollection();\n        $rowIndex = 0;\n\n        foreach ($this->fileReader->read($file) as $dataRow) {\n            if (null !== $maxRowsInCollection && $rowIndex >= $maxRowsInCollection) {\n                break;\n            }\n\n            $dataRowCollection->addDataRow($dataRow);\n            ++$rowIndex;\n        }\n\n        return $dataRowCollection;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductPriceCalculation Hook in Product Price Calculation\nDESCRIPTION: This snippet shows how the actionProductPriceCalculation hook is called in the priceCalculation method to allow modules to override the product price calculation. It passes numerous parameters including shop, product, customer, quantity and pricing data, with some parameters passed by reference to allow modification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductPriceCalculation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductPriceCalculation', [\n    'id_shop' => $id_shop,\n    'id_product' => $id_product,\n    'id_product_attribute' => $id_product_attribute,\n    'id_customization' => $id_customization,\n    'id_country' => $id_country,\n    'id_state' => $id_state,\n    'zip_code' => $zipcode,\n    'id_currency' => $id_currency,\n    'id_group' => $id_group,\n    'id_cart' => $id_cart,\n    'id_customer' => $id_customer,\n    'use_customer_price' => $use_customer_price,\n    'quantity' => $quantity,\n    'real_quantity' => $real_quantity,\n    'use_tax' => $use_tax,\n    'decimals' => $decimals,\n    'only_reduc' => $only_reduc,\n    'use_reduc' => $use_reduc,\n    'with_ecotax' => $with_ecotax,\n    'specific_price' => &$specific_price,\n    'use_group_reduction' => $use_group_reduction,\n    'address' => $address,\n    'context' => $context,\n    'specific_price_reduction' => &$specific_price_reduction,\n    'price' => &$price,\n]);\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for PrestaShop Combination Resource\nDESCRIPTION: This XML schema template provides the structure for creating or updating product combinations in PrestaShop through the API. It includes all available fields such as product ID, location, pricing information, stock details, and associations with product options and images.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/combinations.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <combination>\n    <id><![CDATA[]]></id>\n    <id_product><![CDATA[]]></id_product>\n    <location><![CDATA[]]></location>\n    <ean13><![CDATA[]]></ean13>\n    <isbn><![CDATA[]]></isbn>\n    <upc><![CDATA[]]></upc>\n    <mpn><![CDATA[]]></mpn>\n    <quantity><![CDATA[]]></quantity>\n    <reference><![CDATA[]]></reference>\n    <supplier_reference><![CDATA[]]></supplier_reference>\n    <wholesale_price><![CDATA[]]></wholesale_price>\n    <price><![CDATA[]]></price>\n    <ecotax><![CDATA[]]></ecotax>\n    <weight><![CDATA[]]></weight>\n    <unit_price_impact><![CDATA[]]></unit_price_impact>\n    <minimal_quantity><![CDATA[]]></minimal_quantity>\n    <low_stock_threshold><![CDATA[]]></low_stock_threshold>\n    <low_stock_alert><![CDATA[]]></low_stock_alert>\n    <default_on><![CDATA[]]></default_on>\n    <available_date><![CDATA[]]></available_date>\n    <associations>\n      <product_option_values>\n        <product_option_value>\n          <id><![CDATA[]]></id>\n        </product_option_value>\n      </product_option_values>\n      <images>\n        <image>\n          <id><![CDATA[]]></id>\n        </image>\n      </images>\n    </associations>\n  </combination>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Globally for PHP 5.x Compatible Projects - Bash\nDESCRIPTION: Installs PHPStan as a global Composer package to bypass local project PHP version restrictions, suitable for projects needing PHP 5.x compatibility. Assumes the user has Composer installed and global Composer binaries available in their PATH. After installation, PHPStan can be called globally rather than as a local dependency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer global require phpstan/phpstan\n```\n\n----------------------------------------\n\nTITLE: ObjectModel Lifecycle Hook Example in PHP\nDESCRIPTION: Shows how to implement a lifecycle hook to log product deletion events.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Product;\n// In a module\n\npublic function hookActionObjectProductDeleteAfter(Product $product)\n{\n    PrestaShopLogger::addLog(\n        sprintf('Product with id %s was deleted with success', $product->id_product)\n    );    \n}\n```\n\n----------------------------------------\n\nTITLE: Generating Symfony URLs using Link::getUrlSmarty (PHP)\nDESCRIPTION: Demonstrates using the static method `Link::getUrlSmarty` to generate URLs for Symfony routes. The 'entity' parameter is set to 'sf', and the 'route' parameter specifies the target Symfony route name. Route arguments can be passed via the 'sf-params' array. This method is available since PrestaShop 1.7.0.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Link;\n\n// Generate url with Symfony route\n$symfonyUrl = Link::getUrlSmarty(array('entity' => 'sf', 'route' => 'admin_product_catalog'));\n\n// Generate url with Symfony route and arguments\n$symfonyUrl = Link::getUrlSmarty(array(\n    'entity' => 'sf',\n    'route' => 'admin_product_unit_action',\n    'sf-params' => array(\n        'action' => 'delete',\n        'id' => 42,\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Generating Symfony Admin URLs using $link->getAdminLink (PHP)\nDESCRIPTION: Illustrates how to generate URLs for Symfony routes within the admin context using the `getAdminLink` method on a `Link` object instance. The target Symfony route is specified using the 'route' key within the parameters array. Route arguments are passed as additional key-value pairs in the same array. This approach is available since PrestaShop 1.7.5.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Context;\n\n$link = Context::getContext()->link;\n\n// Generate url with Symfony route (first argument is the legacy controller, even though it should be ignored)\n$symfonyUrl = $link->getAdminLink('AdminProducts', true, array('route' => 'admin_product_catalog'));\n\n// Generate url with Symfony route and arguments\n$symfonyUrl = $link->getAdminLink('AdminProducts', true, array(\n    'route' => 'admin_product_unit_action',\n    'action' => 'delete',\n    'id' => 42,\n));\n```\n\n----------------------------------------\n\nTITLE: Registering a Controller Service Using YAML (Symfony Services - YAML)\nDESCRIPTION: This YAML snippet illustrates how to register the controller as a service in the Symfony dependency injection container for PrestaShop. The service name must match the controller class namespace, and dependencies are injected listing service references as arguments. The service definition enables automatic construction and injection when the controller is instantiated by PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  # The name of the service must match the full namespace class\\n  MyModule\\Controller\\DemoController:\\n    class: MyModule\\Controller\\DemoController\\n    arguments:\\n      - '@doctrine.cache.provider'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Product Combination using PrestaShop Command - PHP\nDESCRIPTION: This PHP code demonstrates how to instantiate the DeleteCombinationCommand with the required combination ID and an optional ShopConstraint value object. The command is handled by DeleteCombinationHandler, which implements the DeleteCombinationHandlerInterface. The constructor parameters ensure only valid IDs and shop constraints are accepted; the return type is void. Dependencies include the PrestaShop core domain classes and the Adapter handler logic. Inputs: combination ID (int), shop constraint object; Output: operation has no direct return value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-combination-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\`PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Product\\\\Combination\\\\Command\\\\DeleteCombinationCommand\\`\n```\n\n----------------------------------------\n\nTITLE: Legacy PHP Translation Example\nDESCRIPTION: Example of translation usage in legacy PHP controller code.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/templating-with-twig.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// legacy controller\n$this->trans('Before activating the webservice, you must be sure to: ', array(), 'Admin.Advparameters.Help');\n```\n\n----------------------------------------\n\nTITLE: Registering the Data Configuration Service in YAML\nDESCRIPTION: This YAML configuration registers the `DemoConfigurationTextDataConfiguration` class as a Symfony service. It defines the service ID and injects the PrestaShop configuration adapter (`@prestashop.adapter.legacy.configuration`) as a constructor argument, enabling the class to interact with the configuration storage.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\n  prestashop.module.demosymfonyformsimple.form.demo_configuration_text_data_configuration:\n    class: PrestaShop\\Module\\DemoSymfonyFormSimple\\Form\\DemoConfigurationTextDataConfiguration\n    arguments: ['@prestashop.adapter.legacy.configuration']\n\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks in Module Installation in PHP\nDESCRIPTION: This snippet shows how to register the necessary hooks for grid modification during the module installation process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/modify-grid-in-module.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function install() {\n    return parent::install() &&\n        $this->registerHook('actionCustomerGridDefinitionModifier') &&\n        $this->registerHook('actionCustomerGridQueryBuilderModifier');\n}\n```\n\n----------------------------------------\n\nTITLE: Using displayReassurance Hook in PrestaShop Templates\nDESCRIPTION: This code snippet shows how to call the displayReassurance hook within PrestaShop templates. This hook is typically used to display reassurance elements such as security badges, delivery information, or return policies to boost customer confidence.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayReassurance.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayReassurance'}\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for filterCategoryContent Hook in PHP\nDESCRIPTION: Shows the array structure passed to the filterCategoryContent hook, containing the Category object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterCategoryContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n    'object' => (object) Category object\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Form Data Provider Service in YAML\nDESCRIPTION: YAML configuration for injecting QueryBus into the ContactFormDataProvider service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_provider.yml\n\nprestashop.core.form.identifiable_object.data_provider.contact_form_data_provider:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider\\ContactFormDataProvider'\n  arguments:\n    - '@prestashop.core.query_bus'\n```\n\n----------------------------------------\n\nTITLE: Sending Data from PHP to Vue.js using Media::addJsDef\nDESCRIPTION: Demonstrates how to pass data from PHP to Vue.js using PrestaShop's Media::addJsDef method for making data available in the window context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMedia::addJsDef([\n    'myVueJsModuleRouteToSomeAction' => $this->context->link->getAdminLink(\n        'AdminAjaxMyVueJsModule',\n        true,\n        [],\n        [\n            'action' => 'RouteToSomeAction',\n            'ajax' => 1,\n        ]\n    ),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Hook in YAML Format for PrestaShop Documentation\nDESCRIPTION: This YAML structure defines the metadata for a PrestaShop hook within the documentation system. It includes hook details such as title, description, origin, file locations, and various hook properties that enable the hookDescriptor shortcode to generate HTML documentation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nTitle: string #name of the hook\nhidden: boolean[true] #must be true\nhookTitle: string #title for the description\ndescription: string #description sentence\norigin: string #core, module or theme\nfiles:\n    -\n        theme: string #theme name only if origin=theme\n        module: string #module name only if origin=module\n        url: string #url of the file on github\n        file: string #path of the file\nlocations:\n    - string #back office, front office or both\ntype: string #action or display\nhookAliases:\n    - string #old hook name or alias\narray_return: boolean #true or false if the hook has an `$array_return` parameter set to `true`\ncheck_exceptions: boolean #true or false if the hook has a `$check_exceptions` parameter set to `false`\nchain: boolean #true or false if the hook has a `$chain` parameter set to `true` \n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Form in Twig Template\nDESCRIPTION: Twig template code for rendering a PrestaShop form using custom form helpers and the PrestaShop UI Kit theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/settings-forms.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_start(logsByEmailForm) }}\n<div class=\"col-md-12\">\n  <div class=\"col\">\n    <div class=\"card\">\n      <h3 class=\"card-header\">\n        <i class=\"material-icons\">business_center</i> {{ 'Logs by email'|trans }}\n      </h3>\n      <div class=\"card-block\">\n        <div class=\"card-text\">\n          <div class=\"form-group row\">\n          {{ ps.label_with_help(('Minimum severity level'|trans), ('Enter \"5\" if you do not want to receive any emails.'|trans({}, 'Admin.Advparameters.Feature')), 'col-sm-2') }}\n            <div class=\"col-sm-8\">\n              {{ form_errors(logsByEmailForm.severity_level) }}\n              {{ form_widget(logsByEmailForm.severity_level) }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <button class=\"btn btn-primary\">{{ 'Save'|trans({}, 'Admin.Actions') }}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{{ form_end(logsByEmailForm) }}\n```\n\n----------------------------------------\n\nTITLE: Overriding a PrestaShop Core Controller Service using YAML\nDESCRIPTION: Example `services.yml` configuration for a module that overrides the Core service definition for `PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController`. It replaces the Core controller class with the module's `MyModule\\Controller\\DemoController`. This method is generally discouraged as it completely replaces core functionality and may cause issues with future updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/services.yml\n  'PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController':\n    class: MyModule\\Controller\\DemoController\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TinyMCE Configuration in JavaScript\nDESCRIPTION: To modify the TinyMCE configuration in PrestaShop, create a global object named 'defaultTinyMceConfig' in a JavaScript file that you add through the actionAdminControllerSetMedia hook. This configuration will be merged with the default configuration using Object.assign.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/tinymce.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.defaultTinyMceConfig = {\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Input Elements with HelperForm (PHP)\nDESCRIPTION: This snippet details the structure of a checkbox input configuration for PrestaShop's HelperForm. It includes 'type', 'label', 'desc', 'name', and a 'values' sub-array that mirrors the select input pattern for bulk data and an 'expand' sub-array for UI control when displaying numerous checkboxes. All dependencies are internal (no external libraries required); input is the definition array and options data; output is multiple checkbox input elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'type'    => 'checkbox',                   // This is an <input type=\"checkbox\"> tag.\n  'label'   => $this->l('Options'),          // The <label> for this <input> tag.\n  'desc'    => $this->l('Choose options.'),  // A help text, displayed right next to the <input> tag.\n  'name'    => 'options',                    // The content of the 'id' attribute of the <input> tag.\n  'values'  => array(\n    'query' => $options,                     // $options contains the data itself.\n    'id'    => 'id_option',                  // The value of the 'id' key must be the same as the key\n                                             // for the 'value' attribute of the <option> tag in each $options sub-array.\n    'name'  => 'name'                        // The value of the 'name' key must be the same as the key\n                                             // for the text content of the <option> tag in each $options sub-array.\n  'expand' => array(                         // You can hide the checkboxes when there are too many.\n                                             \n    'print_total' => count($options),        // A button appears with the number of options it hides.\n    'default' => 'show',                     // 'show' will show by default, whereas 'hide' will do the opposite.\n    'show' => array('text' => $this->l('show'), 'icon' => 'plus-sign-alt'),\n    'hide' => array('text' => $this->l('hide'), 'icon' => 'minus-sign-alt')\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: CMS Category Query Handler Implementation\nDESCRIPTION: Handler class that implements the interface for processing CMS page category name queries. Responsible for retrieving and returning the category name as a string.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-category-name-for-listing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\QueryHandler\\GetCmsPageCategoryNameForListingHandler\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Routes in YAML\nDESCRIPTION: YAML configuration for setting up a module route with legacy controller support. Defines the path, HTTP methods, and maps the route to a controller action.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nyour_route_name:\n    path: your-module/demo\n    methods: [GET]\n    defaults:\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\n      _legacy_controller: 'MyModuleDemoController'\n      _legacy_link: 'MyModuleDemoController'\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Product File using PrestaShop Domain Command - PHP\nDESCRIPTION: Defines the AddVirtualProductFileCommand class for PrestaShop, which allows adding a downloadable file to a virtual product. This follows domain-command patterns and requires product ID, file path, display name, and optional parameters: access days, download times limit, and expiration date (all types as specified). The corresponding handler executes the command, and a VirtualProductFileId value object is returned. This mechanism presupposes adherence to the command-handler architecture of PrestaShop and requires the related command interface and handler implementation for execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/add-virtual-product-file-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\VirtualProductFile\\Command\\AddVirtualProductFileCommand\n// Adds downloadable file for virtual product\n// Constructor parameters:\n//   int $productId\n//   string $filePath\n//   string $displayName\n//   ?int $accessDays = NULL\n//   ?int $downloadTimesLimit = NULL\n//   ?DateTimeInterface $expirationDate = NULL\n// Handler:\n//   PrestaShop\\PrestaShop\\Adapter\\Product\\VirtualProduct\\CommandHandler\\AddVirtualProductFileHandler\n// Implements:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Product\\VirtualProductFile\\CommandHandler\\AddVirtualProductFileHandlerInterface\n// Return type:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Product\\VirtualProductFile\\ValueObject\\VirtualProductFileId\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how to execute the 'actionGetProductPropertiesBefore' hook using the PrestaShop framework's Hook class. This hook is typically called to allow modifications or enhancements to product properties before they are processed. Dependencies include the 'Hook' class from PrestaShop's core. Key parameters include 'id_lang' for language specification, 'product' which references the product row, and 'context' which provides execution context information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetProductPropertiesBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionGetProductPropertiesBefore', [\n            'id_lang' => $id_lang,\n            'product' => &$row,\n            'context' => $context,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Routes with Legacy Mapping (YAML)\nDESCRIPTION: Example YAML configuration for defining Symfony routes in PrestaShop. It shows how to map routes to controllers and specify legacy controller names (`_legacy_controller`) and legacy link formats (`_legacy_link`) to ensure backward compatibility and proper URL generation via methods like `getAdminLink`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadmin_payment_preferences:\n    path: /preferences\n    methods: [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:index\n        _legacy_controller: AdminPaymentPreferences\n        _legacy_link: AdminPaymentPreferences\n\nadmin_payment_preferences_process:\n    path: /preferences/update\n    methods: [POST]\n    defaults:\n        _controller: PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:processForm\n        _legacy_controller: AdminPaymentPreferences\n        _legacy_link: AdminPaymentPreferences:update\n```\n\n----------------------------------------\n\nTITLE: Command Usage Example - PrestaShop Schema Update\nDESCRIPTION: Command identifier for updating PrestaShop database schema without applying foreign key constraints. Located in src/PrestaShopBundle/Command/UpdateSchemaCommand.php.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-schema-update-without-foreign.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nprestashop:schema:update-without-foreign\n```\n\n----------------------------------------\n\nTITLE: Executing actionObject<ClassName>AddBefore Hook in PrestaShop Core\nDESCRIPTION: This snippet shows how the actionObject<ClassName>AddBefore hook is executed in PrestaShop's ObjectModel class. It runs before an object is added to the database and passes the current object instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>AddBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'AddBefore', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function with CsvResponse for Chunked Exports in PHP\nDESCRIPTION: Shows how to use a callback function with CsvResponse to handle large data exports through chunking.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($dataCallback);\n```\n\n----------------------------------------\n\nTITLE: Updating Product Details with PrestaShop Command - PHP\nDESCRIPTION: This snippet references the UpdateProductDetailsCommand class in PrestaShop, designed for updating specific product details. It has a constructor requiring a product ID and works in conjunction with the UpdateProductDetailsHandler, which implements the corresponding handler interface. The expected use is to create a command object using a product integer ID and dispatch it through the command bus to trigger the update; there is no return value (void).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-details-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductDetailsCommand`\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Controller with Standard Actions in PHP\nDESCRIPTION: This snippet demonstrates the implementation of a CustomerController class with standard actions following PrestaShop naming conventions. It includes methods for index, edit, delete, and custom actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/naming-conventions/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// CustomerController.php\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer;\n\n// Controller name is prefixed with Customer in singular form\nclass CustomerController\n{\n    // Index page which is opened when\n    // user clicks \"Improve > Sell > Customers\" in side menu.\n    // It shows list of customers and KPIs.\n    public function indexAction()\n    {\n    }\n\n    // Customer Edit page which is opened when\n    // user clicks \"Edit\" action on selected customer.\n    // It shows customer form with data that can be edited.\n    public function editAction($customerId, Request $request)\n    {\n    }\n\n    // Deletes given customer.\n    // Does not show page, but returns flash message with redirect instead.\n    public function deleteAction($customerId, Request $request)\n    {\n    }\n\n    // Transforms guest customer (customer without password)\n    // to customer with password.\n    // Does not show page, but returns flash message with redirect instead.\n    public function transformGuestToCustomerAction($customerId, Request $request)\n    {\n    }\n\n    // Saves private note for customer, that can only be seen by admin in Back Office.\n    // Does not show page, but returns flash message with redirect instead.\n    public function savePrivateNoteAction($customerId, Request $request)\n    {\n    }\n\n    // Toggle the status of given customer.\n    // Does not show page, but returns flash message with redirect instead.\n    public function toggleStatusAction($customerId)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling displayProductAdditionalInfo Hook in Smarty Templates\nDESCRIPTION: This code snippet demonstrates how to call the displayProductAdditionalInfo hook in Smarty template files. The hook is passed the product object as a parameter to allow modules to display additional product information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductAdditionalInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayProductAdditionalInfo' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Deleting Product from Order Using PrestaShop Command (PHP)\nDESCRIPTION: This code snippet refers to the PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\Command\\DeleteProductFromOrderCommand class, which encapsulates the action of deleting a product from a specific order. To construct this command, you must provide the integer order ID and order detail ID. The command is processed by PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\DeleteProductFromOrderHandler and implements the DeleteProductFromOrderHandlerInterface. Inputs required are the order ID and the order detail ID. This command returns void and requires PrestaShop's domain architecture with appropriate handler and interface implementations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/delete-product-from-order-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\Command\\DeleteProductFromOrderCommand\n```\n\n----------------------------------------\n\nTITLE: Declaring Supplier Extra Image Uploader Class in PHP\nDESCRIPTION: This snippet begins the definition of a `SupplierExtraImageUploader` class. It includes the namespace declaration and imports necessary exception classes from PrestaShop's Core Image Uploader component (`ImageOptimizationException`, `ImageUploadException`, `MemoryLimitException`, `UploadedImageConstraintException`). This suggests the class will handle the actual process of uploading and potentially optimizing the supplier's extra image, managing potential errors during the process. The class body itself is not shown in this snippet.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Uploader;\n\nuse PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity\\SupplierExtraImage;\nuse PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository\\SupplierExtraImageRepository;\nuse PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\ImageOptimizationException;\nuse PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\ImageUploadException;\nuse PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\MemoryLimitException;\nuse PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\UploadedImageConstraintException;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Supplier with PrestaShop Command\nDESCRIPTION: The `AddSupplierCommand` class is part of the PrestaShop system used to create new suppliers. It requires several parameters including the supplier's name, address, and country ID, among others. The handler class that processes this command is `AddSupplierHandler`, which must conform to the `AddSupplierHandlerInterface`. The command results in the creation of a `SupplierId` value object, indicating a successful addition. Dependencies include the PrestaShop Core and Adapter namespaces.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/add-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\AddSupplierCommand\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"PrestaShop\\PrestaShop\\Adapter\\Supplier\\CommandHandler\\AddSupplierHandler\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\ValueObject\\SupplierId\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FormattedTextareaType in PrestaShop Form Builder\nDESCRIPTION: Example showing how to add a FormattedTextareaType field to a custom form type class. The field integrates TinyMCE editor with configurable autoload and character limit options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/formatted-textarea.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\FormattedTextareaType;\n\nclass CustomType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add(\n                'test_text_field',\n                FormattedTextareaType::class\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing a Domain Exception in a Command Handler (PrestaShop, PHP)\nDESCRIPTION: Demonstrates the usage of CannotEditCategoryException within the updateCategoryFromCommandData method of a command handler. If the category update operation fails, the method throws a domain-specific exception, providing a detailed error message. The method requires a Category instance and an EditCategoryCommand; it signals update failures via exception rather than return codes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/domain-exceptions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// src/Adapter/Category/CommandHandler/EditCategoryHandler.php\\n\\nprivate function updateCategoryFromCommandData(Category $category, EditCategoryCommand $command)\\n{\\n    // ... \\n    \\n    if (false === $category->update()) {\\n        throw new CannotEditCategoryException(\\n            sprintf('Failed to edit Category with id \"%s\".', $category->id)\\n        );\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Populating Options Array for Select Inputs (PHP)\nDESCRIPTION: This example illustrates how to create a static options array that can be supplied to select or checkbox elements in PrestaShop form definitions. The array must contain sub-arrays, each with keys matching those specified in the field declaration ('id_option' for value, 'name' for display text). This is intended to be provided to the 'query' field in form element configurations. The result enables rendering options in dropdowns or checkboxes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$options = array(\n  array(\n    'id_option' => 1,       // The value of the 'value' attribute of the <option> tag.\n    'name' => 'Method 1'    // The value of the text content of the  <option> tag.\n  ),\n  array(\n    'id_option' => 2,\n    'name' => 'Method 2'\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for actionValidateOrderAfter Hook in PHP\nDESCRIPTION: Defines the structure of parameters passed to the actionValidateOrderAfter hook, including cart, order, orders array, customer, currency, and order status objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateOrderAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    [\n        'cart' => (Cart|null) $contextCart,\n        'order' => (Order|null) $order,\n        'orders' => (array) $orderList,\n        'customer' => (Customer) $contextCustomer,\n        'currency' => (Currency) $contextCurrency,\n        'orderStatus' => (OrderState) $orderState,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wording in Smarty Template for PrestaShop Theme Translation\nDESCRIPTION: This snippet demonstrates how to add a translatable text string in a PrestaShop theme's Smarty template file. The 's' parameter contains the text to be translated, while 'd' specifies the domain which should include your theme name with a capital first letter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/theme-translation.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n{l s='Read more' d='Shop.Yourthemename'}\n```\n\n----------------------------------------\n\nTITLE: Executing a Dynamic Post-Action Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how a dynamic action hook is executed in PrestaShop using `Hook::exec`. The hook name is constructed dynamically using the controller's class name (`get_class($this)`) and the current action (`$this->action`), prefixed with 'action' and suffixed with 'After'. It passes the controller instance (`$this`) and a return value (`$return`) as parameters to any modules listening to this specific hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<ClassName><Action>After.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . get_class($this) . ucfirst($this->action) . 'After', ['controller' => $this, 'return' => $return]);\n```\n\n----------------------------------------\n\nTITLE: Querying Attachment Information with PrestaShop Domain Query Object in PHP\nDESCRIPTION: This snippet demonstrates the core instantiation and usage of the GetAttachmentInformationList query object to fetch attachments information filtered by language in a PrestaShop context. It requires the integer language ID as a constructor parameter. Processing of this query is handled by the designated handler class which implements a specific interface, and the expected output is an array of AttachmentInformation objects. This is central for querying multilingual attachments and follows PrestaShop's CQRS model; external dependencies include proper PrestaShop module context, and subject to authentication and permissions management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attachment/_partials/get-attachment-information-list.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// PrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\Query\\GetAttachmentInformationList\n// _Query providing attachments information_\n//\n// Constructor parameters:\n//     int $languageId\n// Handler class:\n//     PrestaShop\\PrestaShop\\Adapter\\Attachment\\QueryHandler\\GetAttachmentInformationListHandler\n//     Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\QueryHandler\\GetAttachmentsForListingHandlerInterface\n// Return type:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\QueryResult\\AttachmentInformation[]\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MultipleChoiceTable JavaScript Component\nDESCRIPTION: Shows how to initialize the required JavaScript component for the MaterialMultipleChoiceTableType to enable its interactive functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-multiple-choice-table.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MultipleChoiceTable from 'admin-dev/themes/new-theme/js/components/multiple-choice-table';\n\n// enable the component\nnew MultipleChoiceTable();\n```\n\n----------------------------------------\n\nTITLE: Extending MultistoreConfigurationType in PHP\nDESCRIPTION: This snippet shows how to make a Symfony form type compatible with multistore configuration by implementing the getParent() method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/configuration-forms/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n    /**\n     * {@inheritdoc}\n     *\n     * @see MultistoreConfigurationTypeExtension\n     */\n    public function getParent(): string\n    {\n        return MultistoreConfigurationType::class;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Language Doctrine Entity in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet defines a Doctrine ORM entity 'Quote' for PrestaShop modules, supporting multilingual content through a one-to-many relationship with a 'QuoteLang' entity. Dependencies include Doctrine ORM, PrestaShop module architecture, and correct namespace autoloading. Key fields include the author name (not translated), a collection of translations, and creation/update timestamps managed via lifecycle callbacks. Expected input involves entity instantiation and persistence, with outputs as retrieved and translated quote data; limitations include the need for manual handling of translation entities and reliance on the Doctrine ecosystem.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/doctrine/how-to-handle-multi-lang-doctrine-entity.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n/**\\n * Copyright since 2007 PrestaShop SA and Contributors\\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\\n *\\n * NOTICE OF LICENSE\\n *\\n * This source file is subject to the Academic Free License version 3.0\\n * that is bundled with this package in the file LICENSE.md.\\n * It is also available through the world-wide-web at this URL:\\n * https://opensource.org/licenses/AFL-3.0\\n * If you did not receive a copy of the license and are unable to\\n * obtain it through the world-wide-web, please send an email\\n * to license@prestashop.com so we can send you a copy immediately.\\n *\\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\\n * @copyright Since 2007 PrestaShop SA and Contributors\\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0\\n */\\ndeclare(strict_types=1);\\n\\nnamespace PrestaShop\\Module\\DemoDoctrine\\Entity;\\n\\nuse DateTime;\\nuse Doctrine\\Common\\Collections\\ArrayCollection;\\nuse Doctrine\\ORM\\Mapping as ORM;\\n\\n/**\\n * @ORM\\Table()\\n * @ORM\\Entity(repositoryClass=\"PrestaShop\\\\Module\\\\DemoDoctrine\\\\Repository\\\\QuoteRepository\")\\n * @ORM\\HasLifecycleCallbacks\\n */\\nclass Quote\\n{\\n    /**\\n     * @var int\\n     *\\n     * @ORM\\Id\\n     * @ORM\\Column(name=\"id_quote\", type=\"integer\")\\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\\n     */\\n    private $id;\\n\\n    /**\\n     * @var string\\n     *\\n     * @ORM\\Column(name=\"author\", type=\"string\", length=255)\\n     */\\n    private $author;\\n\\n    /**\\n     * @ORM\\OneToMany(targetEntity=\"PrestaShop\\\\Module\\\\DemoDoctrine\\\\Entity\\\\QuoteLang\", cascade={\"persist\", \"remove\"}, mappedBy=\"quote\")\\n     */\\n    private $quoteLangs;\\n\\n    /**\\n     * @var DateTime\\n     *\\n     * @ORM\\Column(name=\"date_add\", type=\"datetime\")\\n     */\\n    private $dateAdd;\\n\\n    /**\\n     * @var DateTime\\n     *\\n     * @ORM\\Column(name=\"date_upd\", type=\"datetime\")\\n     */\\n    private $dateUpd;\\n\\n    public function __construct()\\n    {\\n        $this->quoteLangs = new ArrayCollection();\\n    }\\n\\n    /**\\n     * @return int\\n     */\\n    public function getId(): int\\n    {\\n        return $this->id;\\n    }\\n\\n    /**\\n     * @return ArrayCollection\\n     */\\n    public function getQuoteLangs(): ArrayCollection\\n    {\\n        return $this->quoteLangs;\\n    }\\n\\n    /**\\n     * @param int $langId\\n     * @return QuoteLang|null\\n     */\\n    public function getQuoteLangByLangId(int $langId): ?QuoteLang\\n    {\\n        foreach ($this->quoteLangs as $quoteLang) {\\n            if ($langId === $quoteLang->getLang()->getId()) {\\n                return $quoteLang;\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    /**\\n     * @param QuoteLang $quoteLang\\n     * @return $this\\n     */\\n    public function addQuoteLang(QuoteLang $quoteLang): self\\n    {\\n        $quoteLang->setQuote($this);\\n        $this->quoteLangs->add($quoteLang);\\n\\n        return $this;\\n    }\\n\\n    /**\\n     * @return string\\n     */\\n    public function getQuoteContent(): string\\n    {\\n        if ($this->quoteLangs->count() <= 0) {\\n            return '';\\n        }\\n\\n        $quoteLang = $this->quoteLangs->first();\\n\\n        return $quoteLang->getContent();\\n    }\\n\\n    /**\\n     * @return string\\n     */\\n    public function getAuthor(): string\\n    {\\n        return $this->author;\\n    }\\n\\n    /**\\n     * @param string $author\\n     * @return $this\\n     */\\n    public function setAuthor(string $author): self\\n    {\\n        $this->author = $author;\\n\\n        return $this;\\n    }\\n\\n    /**\\n     * Set dateAdd.\\n     *\\n     * @param DateTime $dateAdd\\n     *\\n     * @return $this\\n     */\\n    public function setDateAdd(DateTime $dateAdd): self\\n    {\\n        $this->dateAdd = $dateAdd;\\n\\n        return $this;\\n    }\\n\\n    /**\\n     * Get dateAdd.\\n     *\\n     * @return DateTime\\n     */\\n    public function getDateAdd(): DateTime\\n    {\\n        return $this->dateAdd;\\n    }\\n\\n    /**\\n     * Set dateUpd.\\n     *\\n     * @param DateTime $dateUpd\\n     *\\n     * @return $this\\n     */\\n    public function setDateUpd(DateTime $dateUpd): self\\n    {\\n        $this->dateUpd = $dateUpd;\\n\\n        return $this;\\n    }\\n\\n    /**\\n     * Get dateUpd.\\n     *\\n     * @return DateTime\\n     */\\n    public function getDateUpd(): DateTime\\n    {\\n        return $this->dateUpd;\\n    }\\n\\n    /**\\n     * Now we tell doctrine that before we persist or update we call the updatedTimestamps() function.\\n     *\\n     * @ORM\\PrePersist\\n     * @ORM\\PreUpdate\\n     */\\n    public function updatedTimestamps(): void\\n    {\\n        $this->setDateUpd(new DateTime());\\n\\n        if ($this->getDateAdd() == null) {\\n            $this->setDateAdd(new DateTime());\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Product Query Helper Method in PHP\nDESCRIPTION: A helper method demonstrating how to retrieve product data using the shared storage pattern and query bus. Shows proper implementation of data access in Behat tests.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getProductForEditing(string $reference): ProductForEditing\n{\n    $productId = $this->getSharedStorage()->get($reference);\n\n    return $this->getQueryBus()->handle(new GetProductForEditing(\n        $productId\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Translating in Symfony-based Controllers\nDESCRIPTION: Illustrates the use of the trans() method in Symfony-based controllers (FrameworkBundleAdminController). Note that the order of arguments is different from legacy controllers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Symfony-based controllers (FrameworkBundleAdminController)\n$this->trans('This product is no longer available.', 'Shop.Notifications.Error', []);\n```\n\n----------------------------------------\n\nTITLE: Specifying void Return Type for Command Handler in PHP\nDESCRIPTION: Indicates that the handler responsible for executing the `UpdateProductStockAvailableCommand` does not return any value (`void`). This is typical for commands in a CQRS pattern where the focus is on performing an action rather than retrieving data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Defining Radio Button Elements with HelperForm (PHP)\nDESCRIPTION: This configuration builds radio input fields in a PrestaShop form. It uses 'type', 'label', 'desc', 'name', 'class', 'required', 'is_bool', and a 'values' sub-array for the actual buttons. Boolean options are styled with the 't' CSS class; if 'is_bool' is false, more than two buttons can be supported. Input is an array with all configuration details; output is one or more <input type=\"radio\"> elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'type'      => 'radio',                               // This is an <input type=\"checkbox\"> tag.\n  'label'     => $this->l('Enable this option'),        // The <label> for this <input> tag.\n  'desc'      => $this->l('Are you a customer too?'),   // A help text, displayed right next to the <input> tag.\n  'name'      => 'active',                              // The content of the 'id' attribute of the <input> tag.\n  'required'  => true,                                  // If set to true, this option must be set.\n  'class'     => 't',                                   // The content of the 'class' attribute of the <label> tag for the <input> tag.\n  'is_bool'   => true,                                  // If set to true, this means you want to display a yes/no or true/false option.\n                                                        // The CSS styling will therefore use green mark for the option value '1', and a red mark for value '2'.\n                                                        // If set to false, this means there can be more than two radio buttons,\n                                                        // and the option label text will be displayed instead of marks.\n  'values'    => array(                                 // $values contains the data itself.\n    array(\n      'id'    => 'active_on',                           // The content of the 'id' attribute of the <input> tag, and of the 'for' attribute for the <label> tag.\n      'value' => 1,                                     // The content of the 'value' attribute of the <input> tag.   \n      'label' => $this->l('Enabled')                    // The <label> for this radio button.\n    ),\n    array(\n      'id'    => 'active_off',\n      'value' => 0,\n      'label' => $this->l('Disabled')\n    )\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for displayAdminOrderSide Hook - PHP\nDESCRIPTION: Defines the parameter structure passed to the displayAdminOrderSide hook. Contains a single parameter 'id_order' which is the integer ID of the order being viewed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderSide.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Executing deleteProductAttribute Hook in PHP\nDESCRIPTION: This snippet demonstrates how the deleteProductAttribute hook is called in PrestaShop. It passes the product attribute ID, product ID, and a flag indicating whether all attributes should be deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/deleteProductAttribute.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'deleteProductAttribute',\n            [\n                'id_product_attribute' => $id_product_attribute,\n                'id_product' => $this->id,\n                'deleteAllAttributes' => false,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Select (Dropdown) Elements with HelperForm (PHP)\nDESCRIPTION: This snippet shows how to create a select (dropdown) field for module forms using PrestaShop's HelperForm. It requires an array with 'type', 'label', 'desc', 'name', 'required', and an 'options' sub-array specifying data source, id, and name keys. Options should be generated as an array of arrays, provided either statically or dynamically (e.g., from PrestaShop data). Inputs include the configuration array and an options dataset (see related code); output is a <select> element within the rendered form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'type' => 'select',                              // This is a <select> tag.\n  'label' => $this->l('Shipping method:'),         // The <label> for this <select> tag.\n  'desc' => $this->l('Choose a shipping method'),  // A help text, displayed right next to the <select> tag.\n  'name' => 'shipping_method',                     // The content of the 'id' attribute of the <select> tag.\n  'required' => true,                              // If set to true, this option must be set.\n  'options' => array(\n    'query' => $options,                           // $options contains the data itself.\n    'id' => 'id_option',                           // The value of the 'id' key must be the same as the key for 'value' attribute of the <option> tag in each $options sub-array.\n    'name' => 'name'                               // The value of the 'name' key must be the same as the key for the text content of the <option> tag in each $options sub-array.\n  )\n),\n```\n\n----------------------------------------\n\nTITLE: AddUnofficialCurrencyHandlerInterface in PHP\nDESCRIPTION: This is the interface implemented by the AddUnofficialCurrencyHandler. It defines the contract for handlers that process the AddUnofficialCurrencyCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/add-unofficial-currency-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\AddUnofficialCurrencyHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining GetMetaForEditing Query Class in PrestaShop Core\nDESCRIPTION: This class is responsible for providing the required data for GetMetaForEditingHandler to return meta data. It takes a meta ID as a constructor parameter and is handled by the GetMetaForEditingHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/get-meta-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\Query\\GetMetaForEditing\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Offline Payment Scenario (Mermaid)\nDESCRIPTION: Mermaid sequence diagram illustrating the workflow for an Offline payment method in PrestaShop. Shows customer selecting the method, PrestaShop using the `$action` parameter to redirect internally, creating the order, and returning a confirmation page to the customer. This represents the simplest flow, often used for methods like bank wire or cheque.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/payment/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Customer->>PrestaShop instance: Select an Offline payment method\n    PrestaShop instance-->>PrestaShop instance: Uses $action parameter to redirect to a controller and create the Order\n    PrestaShop instance->>Customer: Returns a confirmation page\n```\n\n----------------------------------------\n\nTITLE: Storing Configuration Data in PrestaShop 8 Using Backward Compatible Method\nDESCRIPTION: This method stores configuration data using a key-value pair. It supports scalar types and arrays for multilanguage values. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/backward-compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nConfiguration::updateValue(string $key, mixed $value): bool\n```\n\n----------------------------------------\n\nTITLE: Registering a Form Type Service in YAML\nDESCRIPTION: This YAML snippet demonstrates how to register the `DemoConfigurationFormType` class as a Symfony service within the module's `config/services.yml` file. It assigns a service ID, specifies the parent service for translation awareness, marks it as public, and tags it with `form.type` so Symfony's form factory can recognize it.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  _defaults:\n    public: true\n\n  # Demo configuration text form\n  prestashop.module.demosymfonyformsimple.form.type.demo_configuration_text:\n    class: 'PrestaShop\\Module\\DemoSymfonyFormSimple\\Form\\DemoConfigurationFormType'\n    parent: 'form.type.translatable.aware'\n    public: true\n    tags:\n      - { name: form.type }\n\n```\n\n----------------------------------------\n\nTITLE: Querying Combination for Editing with PrestaShop Domain Query - PHP\nDESCRIPTION: This PHP snippet describes a domain query class `GetCombinationForEditing` within PrestaShop, responsible for retrieving detailed data of a product combination for editing. It requires the combination ID (integer) and a `ShopConstraint` object for multi-shop context as constructor parameters. This query is handled by `GetCombinationForEditingHandler`, which implements `GetCombinationForEditingHandlerInterface`, and it returns a `CombinationForEditing` query result object. The approach cleanly separates the domain query logic from data handling, and fits into PrestaShop's modular, testable architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-combination-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Query\\GetCombinationForEditing\n// _Query which provides combination for editing_\n\n// | Query details              |    |\n// | -------------------------- | -- |\n// | **Constructor parameters** | <ul> <li>`$int $combinationId`</li>  <li>`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`</li> </ul> |\n// | **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\QueryHandler\\GetCombinationForEditingHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\QueryHandler\\GetCombinationForEditingHandlerInterface`</li>  |\n// | **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\QueryResult\\CombinationForEditing`  |\n```\n\n----------------------------------------\n\nTITLE: Implementing actionModifyFrontendSitemap Hook in PrestaShop Module\nDESCRIPTION: This example demonstrates how to implement the actionModifyFrontendSitemap hook in a PrestaShop module. It adds a custom URL to the 'pages' group of the sitemap and removes the 'categories' group.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModifyFrontendSitemap.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionModifyFrontendSitemap($params)\n{\n    $customUrls = [\n        [\n            'id' => 'custom-url-1',\n            'label' => 'Custom URL',\n            'url' => 'https://prestashop-project.org',\n        ]\n    ];\n\n    $params['urls']['pages']['links'] = array_merge($params['urls']['pages']['links'], $customUrls); // add custom urls to pages group\n    unset($params['urls']['categories']); // hide categories\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Services Using Common YAML Imports - YAML\nDESCRIPTION: Defines shared service configuration in a common YAML file for use across both admin and front environments. The example provides a public service with an injected dependency and demonstrates how to reuse this configuration by including it from multiple YAML files (services.yml, admin/services.yml, front/services.yml) via the imports directive. Ensures DRY configurations and simplifies maintenance, requiring Symfony service YAML structure and proper file placement.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# yourmodule/config/common.yml\nservices:\n  _defaults:\n    public: true\n\n  your_company.your_module.common.open_service:\n    class: YourCompany\\YourModule\\YourService\n    arguments:\n      - '@your_company.your_module.common.open_dependency'\n\n  your_company.your_module.common.open_dependency:\n    class: YourCompany\\YourModule\\YourServiceDependency'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# yourmodule/config/services.yml\nimports:\n    - { resource: ./common.yml }\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# yourmodule/config/admin/services.yml\nimports:\n    - { resource: ../common.yml }\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# yourmodule/config/front/services.yml\nimports:\n    - { resource: ../common.yml }\n```\n\n----------------------------------------\n\nTITLE: Translating in Twig Templates\nDESCRIPTION: Shows how to use the 'trans' filter for translations in Twig template files. Includes examples of basic translation and using named placeholders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<div>{{ 'This product is no longer available.'|trans({}, 'Shop.Notifications.Error') }}</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div>{{ 'There are %products_count% items in your cart.'|trans({'%products_count%': cart.products_count}, 'Shop.Theme.Checkout') }}</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact Data Query Class in PrestaShop PHP\nDESCRIPTION: Class GetContactForEditing handles querying contact entity data. It accepts a contact ID as a constructor parameter and returns EditableContact data through its handler implementation. The handler class implements GetContactForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/contact/_partials/get-contact-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Query\\GetContactForEditing\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Image Command - PrestaShop PHP\nDESCRIPTION: This PHP snippet represents the DeleteProductImageCommand, part of PrestaShop’s Core Domain for Product Images. It is constructed with an integer image ID, and its handler class is DeleteProductImageHandler, which implements the corresponding handler interface. The command encapsulates the necessary data to request a product image deletion and returns void. This command is intended to be dispatched to its handler, which performs the actual deletion; thus, proper instantiation of the command and the command bus infrastructure are prerequisites. The imageId parameter identifies the image to be deleted. The command pattern facilitates maintainability and separation of concerns.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-product-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Command\\DeleteProductImageCommand\n```\n\n----------------------------------------\n\nTITLE: Using AddStateCommand in PrestaShop for State Creation\nDESCRIPTION: The AddStateCommand class creates a state with the provided data. It requires country ID, zone ID, name, ISO code, and active status as constructor parameters. The command is handled by AddStateHandler which implements AddStateHandlerInterface, and returns a StateId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/add-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\AddStateCommand\n```\n\n----------------------------------------\n\nTITLE: Executing Product Search Query Hook in PHP\nDESCRIPTION: Hook execution code that runs after the product search query. It provides access to both the original query and its results for potential modification or logging purposes. This hook is called from ProductListingFrontController.php.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductSearchProviderRunQueryAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductSearchProviderRunQueryAfter', [\n            'query' => $query,\n            'result' => $result,\n        ])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Volume Persistence Configuration\nDESCRIPTION: Docker Compose configuration for persisting PrestaShop installation data using volumes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprestashop:\n    container_name: prestashop\n    ...\n    volumes:\n      - psdata:/var/www/html\n...\nvolumes:\n  psdata:\n```\n\n----------------------------------------\n\nTITLE: Displaying Template from AdminModuleController (PHP)\nDESCRIPTION: PHP code snippet for the `initContent` method within a PrestaShop `AdminModuleController`. It assigns the paths to the compiled Vue.js JavaScript files (`app.js`, `chunk-vendors.js`) to Smarty variables (`pathApp`, `chunkVendor`). It then fetches the content of the `app.tpl` template and assigns it to the controller's content, effectively rendering the Vue application placeholder and scripts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function initContent()\n{\n  $this->context->smarty->assign([\n      'pathApp' => $this->module->getPathUri() . 'views/js/app.js',\n      'chunkVendor' => $this->module->getPathUri() . 'views/js/chunk-vendors.js',\n  ]);\n  $this->content = $this->context->smarty->fetch('module:modulename//views/templates/admin/app.tpl');\n  parent::initContent();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the displayProductActions Hook in PrestaShop Themes (PHP)\nDESCRIPTION: This code shows how to call the displayProductActions hook in a theme template. The hook allows additional actions to be triggered near the add to cart button on product pages, passing the current product as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductActions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayProductActions' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Executing actionPresentProduct Hook in PrestaShop\nDESCRIPTION: This snippet shows how the actionPresentProduct hook is executed in PrestaShop. It passes the presentedProduct array by reference, allowing modules to modify the product data before it's presented to the user in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentProduct.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentProduct',\n            ['presentedProduct' => &$productLazyArray]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Product Duplication Command - PrestaShop Domain - PHP\nDESCRIPTION: This PHP snippet details the 'BulkDuplicateProductCommand', a domain-level command for initiating duplication of multiple products within a specific shop context. Dependencies include PrestaShop domain entities such as the ShopConstraint value object. The constructor parameters accept an array of product IDs and a ShopConstraint instance. The operation is handled via the BulkDuplicateProductHandler class, which must implement the BulkDuplicateProductHandlerInterface. The expected output is an array of ProductId objects, corresponding to the newly duplicated products. This pattern ensures batch processing within PrestaShop's modular architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/bulk-duplicate-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\BulkDuplicateProductCommand`\n_Deletes multiple products_\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$array $productIds`</li>  <li>`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\BulkDuplicateProductHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\BulkDuplicateProductHandlerInterface`</li>  |\n| **Return type** |  `array&lt;ProductId&gt;`  |\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL SELECT Query\nDESCRIPTION: Shows how to execute a raw SQL SELECT query and retrieve results as an array of arrays. Includes proper table prefix usage for PrestaShop compatibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request = 'SELECT `id_table` FROM `' . _DB_PREFIX_ . 'some_table` ...';\n\n/** @var array $result */\n$result = $db->executeS($request);\n```\n\n----------------------------------------\n\nTITLE: Registering Services with Fully-Qualified Class Names in YAML\nDESCRIPTION: This YAML configuration shows how to register services in PrestaShop using fully-qualified class names as service IDs. It includes an example of correct and incorrect service declaration syntax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/naming-conventions/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # service id follows fully-qualified class name\n  prestashop.core.payment.payment_option_form_decorator:\n    class: 'PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOptionFormDecorator'\n\n  # Good\n  foo_bar:\n      class: 'Foo\\Bar'\n      arguments:\n        - 'baz'\n  # Wrong\n  wrong_foo_bar:\n      class: 'Foo\\Bar'\n      arguments:\n        $baz: 'baz'\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Theme Module in PrestaShop\nDESCRIPTION: A complete module class implementation that demonstrates how to add a custom email theme to PrestaShop. The code handles module installation, uninstallation, enabling, disabling, and implements the actionListMailThemes hook to register a new email theme using FolderThemeScanner.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-a-theme-from-module.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\Layout;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\FolderThemeScanner;\n\nclass MyEmailThemeModule extends Module \n{\n    public function install() \n    {\n        return parent::install()\n            // This class constant contains 'actionListMailThemes'\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function uninstall() \n    {\n        return parent::uninstall()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function enable()\n    {\n        return parent::enable()\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function disable() \n    {\n        return parent::disable()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    /**\n     * @param array $hookParams\n     */\n    public function hookActionListMailThemes(array $hookParams)\n    {\n        if (!isset($hookParams['mailThemes'])) {\n            return;\n        }\n\n        /** @var ThemeCollectionInterface $themes */\n        $themes = $hookParams['mailThemes'];\n\n        $scanner = new FolderThemeScanner();\n        $darkTheme = $scanner->scan(__DIR__.'/mails/themes/dark_modern');\n        if (null !== $darkTheme && $darkTheme->getLayouts()->count() > 0) {\n            $themes->add($darkTheme);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the additionalCustomerFormFields Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the additionalCustomerFormFields hook is executed in PrestaShop. It passes the current fields array by reference, allowing modules to add additional form fields to the customer registration form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/additionalCustomerFormFields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('additionalCustomerFormFields', ['fields' => &$format], null, true)\n```\n\n----------------------------------------\n\nTITLE: Rendering List with HelperList in PHP\nDESCRIPTION: This snippet demonstrates the implementation of the renderList() method in a PrestaShop module. It declares fields for the list, creates an instance of HelperList, retrieves data, and generates the list HTML. Dependencies include the ps_emailsubscription module and references to specific lines in the source code for detailed settings and implementations. Input includes subscriber data, and the output is the generated HTML for the list.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function renderList()\n{\n    $fields_list = [\n      // ... fields list declaration, refer to https://github.com/PrestaShop/ps_emailsubscription/blob/v2.7.1/ps_emailsubscription.php#L257-L297\n      // for complete implementation\n    ];\n\n    // ...\n\n    $helper_list = new HelperList();\n    // HelperList settings, refer to https://github.com/PrestaShop/ps_emailsubscription/blob/v2.7.1/ps_emailsubscription.php#L303-L317\n    // for complete implementation\n\n    /* Retrieve list data */\n    $subscribers = $this->getSubscribers();\n\n    // paginate results, refer to https://github.com/PrestaShop/ps_emailsubscription/blob/v2.7.1/ps_emailsubscription.php#L321-L326\n    // for complete implementation\n\n    return $helper_list->generateList($subscribers, $fields_list);\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Registering a Custom Hook - PrestaShop PHP\nDESCRIPTION: This PHP code sample shows two approaches for adding a custom hook in PrestaShop. The first creates a Hook instance and manually sets its properties (name, title, description, position) before calling add(); the comment suggests checking for hook existence using Hook::getIdByName. The second approach relies on registerHook, which creates the hook if it doesn't exist. Dependencies: Hook class, PrestaShop module context. Input: hook property values or a hook name string; Output: hook registration in the database and plugging of current module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$hook = new Hook();\n$hook->name = 'displayAtSpecificPlace';\n$hook->title = 'The name of your hook';\n$hook->description = 'This is a custom hook!';\n$hook->position = 1;\n$hook->add(); // return true on success\n\nYou can check if hook exists before this with Hook::getIdByName('hook_name')\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->registerHook('displayAtSpecificPlace');\n```\n\n----------------------------------------\n\nTITLE: Deleting Attachment Command Using PrestaShop Domain Command PHP\nDESCRIPTION: This command is designed to delete an attachment by accepting an integer Attachment ID as a constructor parameter. Dependencies include PrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\CommandHandler\\DeleteAttachmentHandler, implementing DeleteAttachmentHandlerInterface. The command returns void, and is used with PrestaShop's command bus architecture for decoupling business logic and execution. Key parameters: integer $attachmentId; input must be a valid attachment ID, and improper use may fail silently if not handled by the appropriate handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attachment/_partials/delete-attachment-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\Command\\DeleteAttachmentCommand\n// _Delete attachment command is responsible for deleting Attachment_\n// | Command details            |    |\n// | -------------------------- | -- |\n// | **Constructor parameters** | <ul> <li>`$int $attachmentId`</li> </ul> |\n// | **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Attachment\\CommandHandler\\DeleteAttachmentHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Attachment\\CommandHandler\\DeleteAttachmentHandlerInterface`</li>  |\n// | **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: Accessing Context from Anywhere (PHP)\nDESCRIPTION: Shows how to retrieve the Context instance from any part of the PrestaShop application using a static method call.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/context.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nContext::getContext()\n```\n\n----------------------------------------\n\nTITLE: PHP Strict Typing Implementation\nDESCRIPTION: Example showing how to implement strict typing in a PHP class with proper type declarations\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/coding-standards/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** 2007-2020 PrestaShop SA and Contributors... */\n\ndeclare(strict_types=1);\n\nnamespace Foo\\Bar;\n\nclass MyClass\n{\n    public function doStuff(string $foo, array $bar): void\n    {\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Building PrestaShop Module Artifacts with GitHub Actions YAML\nDESCRIPTION: This YAML configuration in GitHub Actions is responsible for building JS dependencies, installing PHP dependencies, cleaning up project files, and creating artifacts. It uses `actions/checkout` for source code management, `PrestaShopCorp/github-action-build-js` for JS build steps, and `actions/upload-artifact` to package the project for deployment. The configuration ensures prep-ready deployment artifacts by removing development-only files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/ci-cd.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\non: [push, pull_request]\n\njobs:\n  deploy:\n    name: build dependencies & create artifact\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2.0.0\n\n      - name: Build JS dependencies\n        uses: PrestaShopCorp/github-action-build-js/12@v1.0\n        with:\n          cmd: yarn\n          path: ./_dev\n\n      - name: Install composer dependencies\n        run: composer install --no-dev -o\n\n      - name: Clean-up project\n        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0\n\n      - name: Create & upload artifact\n        uses: actions/upload-artifact@v1\n        with:\n          name: ${{ github.event.repository.name }}\n          path: ../\n```\n\n----------------------------------------\n\nTITLE: Modifying Supplier Form via Hook in PHP\nDESCRIPTION: This snippet implements the `hookActionSupplierFormBuilderModifier` method within the main module class. This hook allows modification of the Supplier form's Symfony Form Builder instance (`$params['form_builder']`). It retrieves the `SupplierExtraImageRepository` from the service container, gets the translator service, and adds a new field named `upload_image_file` of type `FileType` for image uploads. If an image already exists for the supplier (checked via the repository and file system), it adds another field `image_file` of type `CustomContentType`, rendering a Twig template (`@Modules/demoextendsymfonyform2/src/View/upload_image.html.twig`) to display the image preview and potentially a delete button.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @param array $params\n     */\n    public function hookActionSupplierFormBuilderModifier(array $params)\n    {\n        /** @var SupplierExtraImageRepository $supplierExtraImageRepository */\n        $supplierExtraImageRepository = $this->get(\n            'prestashop.module.demoextendsymfonyform.repository.supplier_extra_image_repository'\n        );\n\n        $translator = $this->getTranslator();\n        /** @var FormBuilderInterface $formBuilder */\n        $formBuilder = $params['form_builder'];\n        // we add to the Symfony form an `upload_image_file` field that will be used by BO user to upload image files\n        $formBuilder\n            ->add('upload_image_file', FileType::class, [\n                'label' => $translator->trans('Upload image file', [], 'Modules.DemoExtendSymfonyForm'),\n                'required' => false,\n            ]);\n\n        /** @var SupplierExtraImage $supplierExtraImage */\n        $supplierExtraImage = $supplierExtraImageRepository->findOneBy(['supplierId' => $params['id']]);\n        if ($supplierExtraImage && file_exists(_PS_SUPP_IMG_DIR_ . $supplierExtraImage->getImageName())) {\n            // When an image is already registered for this supplier, we add to the Symfony an\n            // 'image_file' to provide a preview input to BO user and also provide a \"delete button\"\n            $formBuilder\n                ->add('image_file', CustomContentType::class, [\n                    'required' => false,\n                    'template' => '@Modules/demoextendsymfonyform2/src/View/upload_image.html.twig',\n                    'data' => [\n                        'supplierId' => $params['id'],\n                        'imageUrl' => self::SUPPLIER_EXTRA_IMAGE_PATH . $supplierExtraImage->getImageName(),\n                    ],\n                ]);\n        }\n\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for PrestaShop Admin Controllers\nDESCRIPTION: Shows the recommended directory structure for organizing admin controllers in PrestaShop by functional sections.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nController/\n└── Admin\n    ├── Configure\n    │   ├── AdvancedParameters\n    │   └── ShopParameters\n    ├── Improve\n    │   ├── Design\n    │   ├── International\n    │   ├── Modules\n    │   ├── Payment\n    │   └── Shipping\n    └── Sell\n        ├── Catalog\n        ├── Customers\n        ├── CustomerService\n        ├── Orders\n        └── Stats\n```\n\n----------------------------------------\n\nTITLE: Fetching Shop Configuration Values with ShopConstraint in PHP\nDESCRIPTION: This code demonstrates how to retrieve shop-specific configuration values in a multistore context using the legacy configuration adapter service and ShopConstraint value object. It shows how to instantiate ShopConstraint with shop and shop group IDs to fetch configuration values for specific shops.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/shops-configuration/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint;\n\nclass MyController\n{\n    // ...\n\n    public function myAction()\n    {\n        // ...\n\n        // Get the legacy configuration adapter service\n        $configuration = $container->get('prestashop.adapter.legacy.configuration');\n\n        // Instantiate a ShopConstraint value object\n        $shopConstraint = new ShopConstraint(\n            (int) $order->id_shop,\n            (int) $order->id_shop_group\n        );\n\n        // Get the needed configuration value, passing your ShopConstraint object as a third parameter\n        $roundType = (int) $configuration->get('PS_ROUND_TYPE', null, $shopConstraint);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Module Widgets with Smarty\nDESCRIPTION: Demonstrates using the `{widget}` function to explicitly display content from a PrestaShop module (widget) within a template. The first example displays the 'ps_contactinfo' widget. The second example displays the same widget but specifies the 'displayFooter' hook context, potentially altering its behavior or output.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_9\n\nLANGUAGE: smarty\nCODE:\n```\n  <div id=\"sidebar\">\n    {widget name=\"ps_contactinfo\"}\n  </div>\n```\n\nLANGUAGE: smarty\nCODE:\n```\n  <div id=\"footer\">\n    {widget name=\"ps_contactinfo\" hook=\"displayFooter\"}\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Product Cover Image Using actionGetProductPropertiesAfter Hook in PHP\nDESCRIPTION: Demonstrates how to modify the default product cover image by using the actionGetProductPropertiesAfter hook to display the first combination image instead of the default cover image. This is particularly useful when needing to match displayed images with current search criteria.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/product.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Here is an example where we use the first combination image instead of the default cover image,\n * this is useful when you want to display an image matching your current research for example.\n */\npublic function hookActionGetProductPropertiesAfter($params) {\n    $product = $params['product'];\n    $productInstance = new Product($product['id_product']);\n    $productAttributeId = $product['id_product_attribute'];\n    $combinationImages = $productInstance->getCombinationImages($params['id_lang']);\n    if (empty($combinationImages) || empty($combinationImages[$productAttributeId])) {\n        return;\n    }\n\n    // Update cover image ID to use the first image of the product combination\n    $attributesImages = $combinationImages[$productAttributeId];\n    if (isset($attributesImages[0]['id_image'])) {\n        $params['product']['cover_image_id'] = $attributesImages[0]['id_image'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Symfony Feature Version Table\nDESCRIPTION: A markdown table showing the Symfony features introduced in each PrestaShop version from 1.7.3 to 1.7.7, including templating, services, forms, controllers, and database management capabilities.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/symfony.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version  | Symfony features                                               |\n|----------|----------------------------------------------------------------|\n| 1.7.3    | [Twig templates][1] and [Services][2]                          |\n| 1.7.4    | [Configuration Forms][3] and [Console commands][4]             |\n| 1.7.5    | [Modern controllers and Security][5]                           |\n| 1.7.6    | [Doctrine ORM][6] and [Entity forms][7]                        |\n| 1.7.7    | [Controllers as services][8]                     |\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sub-Template with Smarty\nDESCRIPTION: Uses the `{render}` Smarty function to include and render another template file (`customer/_partials/login-form.tpl`). It also passes the `$login_form` variable from the current scope into the rendered template's scope, which is necessary for rendering forms like customer login or checkout.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: smarty\nCODE:\n```\n  {render file=\"customer/_partials/login-form.tpl\" ui=$login_form}\n```\n\n----------------------------------------\n\nTITLE: Adding Shop Restriction Checkbox in PrestaShop PHP\nDESCRIPTION: This snippet demonstrates how to add a ShopRestrictionCheckboxType to a form builder in PrestaShop. It specifies attributes such as 'is_allowed_to_display' to control the display condition and 'data-shop-restriction-target' to set the form context. It requires PrestaShop and its form builder classes as dependencies.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/shop-restriction-checkbox-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add($form->getName() . $suffix, ShopRestrictionCheckboxType::class, [\n    'attr' => [\n        'is_allowed_to_display' => $isAllowedToDisplay,\n        'data-shop-restriction-target' => $form->getName(),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining EditCatalogPriceRuleCommand Class in PHP\nDESCRIPTION: This code snippet defines the EditCatalogPriceRuleCommand class, which is used to edit catalog price rules. It takes a catalogPriceRuleId as a constructor parameter and is handled by the EditCatalogPriceRuleHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/edit-catalog-price-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Command\\EditCatalogPriceRuleCommand\n```\n\n----------------------------------------\n\nTITLE: Identifying the AddProductImageCommand Class in PHP\nDESCRIPTION: This shows the fully qualified class name for the AddProductImageCommand in PrestaShop. This command object is used within the CQRS pattern to represent the intention of adding a new image to a product. It requires the product ID (int $productId), the image file's pathname (string $pathName), and shop constraints (ShopConstraint $shopConstraint) during instantiation. It is processed by the AddProductImageHandler, which implements AddProductImageHandlerInterface and returns the ImageId of the newly created image.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/add-product-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Command\\AddProductImageCommand`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\Image\\CommandHandler\\AddProductImageHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\CommandHandler\\AddProductImageHandlerInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\ValueObject\\ImageId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint`\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hook in PrestaShop PHP Controller\nDESCRIPTION: This snippet calls the 'actionAdminAdminShopParametersMetaControllerPostProcessBefore' hook within a PrestaShop controller using the dispatchHook function. It passes an associative array containing the 'controller' object to provide context for hooked functions. To function correctly, it requires PrestaShop's core libraries and context to be properly loaded. Inputs include the hook name and context array, while output depends on the registered hooked modules' logic. It's intended to allow pre-processing or validation before handling form submissions in admin shop parameter meta configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminAdminShopParametersMetaControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminAdminShopParametersMetaControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Avoiding Assertions with PrestaShop Value Objects in PHP\nDESCRIPTION: This snippet illustrates how a method within MyService avoids additional assertions for the ExchangeRate parameter due to its inherent validity guaranteed by being a Value Object. The method depends on the PrestaShop Core Domain Currency namespace and demonstrates how to trust the integrity of ExchangeRate objects created elsewhere in the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/value_objects.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\ExchangeRate;\n\nclass MyService\n{\n    // ...\n\n    public function calculate(ExchangeRate $rate)\n    {\n        // you don\\'t need to make additional assertions here (e.g. null !== $rate)\n        // since you can trust that ExchangeRate contains valid value\n        // as it was created somewhere in the system.\n\n        // ... do some calculation with $rate\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Radio and Choice Fields with PrestaShop Forms\nDESCRIPTION: This PHP code snippet shows how to use the RadioWithChoiceChildrenType class to add a combination of radio and choice fields to a form in PrestaShop. It involves specifying options such as 'radio_name', 'radio_label', and 'child_choice', which define the identification, label, and available values for the radio elements, respectively. Dependencies include the PrestaShop framework and the specific context where the form is used.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/radio-with-choice-children-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('themes_selectors', RadioWithChoiceChildrenType::class, [\n    'radio_name' => 'themes_type',\n    'radio_label' => $this->trans('Theme translations', 'Admin.International.Feature'),\n    'required' => false,\n    'label' => null,\n    'child_choice' => [\n        'name' => 'selected_value',\n        'empty' => $this->trans('Select a theme', 'Admin.International.Feature'),\n        'choices' => $this->excludeDefaultThemeFromChoices($this->themeChoices),\n        'label' => false,\n        'multiple' => false,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing GeneratableTextType in PHP Form\nDESCRIPTION: Example showing how to add a GeneratableTextType field to a custom form type. The example demonstrates setting the generated value length option to 16 characters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/generatable-text.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\GeneratableTextType;\n\nclass CustomType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('key', GeneratableTextType::class, [\n                'generated_value_length' => 16,\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multistore Configuration Key to Form Field in PHP\nDESCRIPTION: This code demonstrates how to add the multistore_configuration_key option to a form field, enabling multistore functionality for that field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/configuration-forms/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass MyFormType extends TranslatorAwareType\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add(\n                'my_field',\n                SwitchType::class,\n                [\n                    'required' => true,\n                    // Here we add the multistore_configuration_key option with the configuration key it is linked to.\n                    'multistore_configuration_key' => 'THE_CONFIGURATION_KEY',\n                    // ...\n                ]\n            )\n        // ...\n```\n\n----------------------------------------\n\nTITLE: Hook Parameters for actionValidateOrder in PrestaShop\nDESCRIPTION: Details the parameters passed to the actionValidateOrder hook, which includes cart, order, customer, currency, and orderStatus objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'cart' => (object) Cart,\n  'order' => (object) Order,\n  'customer' => (object) Customer,\n  'currency' => (object) Currency,\n  'orderStatus' => (object) OrderState\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing ChoiceTable JavaScript Component\nDESCRIPTION: JavaScript code required to initialize the ChoiceTable component that manages checkbox selections in the MaterialChoiceTableType form field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-choice-table.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChoiceTable from 'admin-dev/themes/new-theme/js/components/choice-table';\n\n// initiate the component.\nnew ChoiceTable();\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid Definition in PHP\nDESCRIPTION: Demonstrates how to retrieve a grid definition factory from the service container and access its attributes like columns, name, and ID. This snippet is useful for directly manipulating grid definitions within the application.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$productsGridDefinitionFactory = $container->get('prestashop.core.grid.definition.factory.product_grid_definition_factory');\n$productsGridDefinition = $productsGridDefinitionFactory->getDefinition();\n\n// you can access all information that was defined\n$productsGridDefinition->getColumns(); // collection of defined columns\n$productsGridDefinition->getName(); // \"Products\"\n$productsGridDefinition->getId(); // \"products\"\n\n```\n\n----------------------------------------\n\nTITLE: Loading Entity Class File in PrestaShop Module (PHP)\nDESCRIPTION: Demonstrates the require_once statement necessary to load the Article entity class at the beginning of the main module file, unless using a Composer autoloader. This is crucial to ensure the entity is available for webservice registration and use within the module's PHP context. Requires the entity file to exist in the given path within the module directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/webservice/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once _PS_MODULE_DIR_ . 'wsarticle/src/Entity/Article.php';\n```\n\n----------------------------------------\n\nTITLE: Defining a PositionDefinition Service in PrestaShop (YAML)\nDESCRIPTION: This YAML example defines a Symfony service for PositionDefinition, making it reusable across the application without code duplication. The service can be injected wherever needed, and its arguments match those required by the PositionDefinition class. This approach helps maintain consistency and simplifies dependency management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  _defaults:\\n    public: true\\n\\n  prestashop.product.grid.position_definition:\\n    class: 'PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Position\\\\PositionDefinition'\\n    arguments:\\n      - 'product'\\n      - 'id_product'\\n      - 'position'\\n      - 'id_category_default'\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing KPI Rows with Hooks - PHP\nDESCRIPTION: This PHP code demonstrates how to modify an existing KPI row in PrestaShop using hooks. A dynamic hook allows alteration of a KPI row's list by accessing its parameters. Example operations include removing and adding KPIs. The code must be implemented in a module for proper execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/kpi-blocks.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// we are in a module\\npublic function hookActionFooKpiRowModifier(array $params)\\n{\\n    var_dump($params['kpis']); // access the complete list\\n\\n    unset($params['kpis'][0]); // remove the first item\\n\\n    $params['kpis'][] = new YourOwnKpi(...);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom PrestaShop Console Command (PHP)\nDESCRIPTION: Example PHP class `ExportCommand` located in `your-module/src/Command/ExportCommand.php`. It extends `Symfony\\Component\\Console\\Command\\Command` to create a custom console command. The `configure()` method sets the command name (e.g., 'your-module:export') used to invoke it, and the `execute()` method contains the core logic to be run when the command is executed. Requires the Symfony Console component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// your-module/src/Command/ExportCommand.php\nnamespace YourCompany\\YourModule\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass ExportCommand extends Command\n{\n    protected function configure()\n    {\n        // The name of the command (the part after \"bin/console\")\n        $this->setName('your-module:export');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        // Here your business logic.\n        $output->write('Export done!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Hook from Twig Template\nDESCRIPTION: Example of how to dispatch a hook from within a Twig template. This snippet shows how to call the 'displayAdminProductsMainStepLeftColumnMiddle' hook and pass a product ID parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/dispatching-hook.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsMainStepLeftColumnMiddle', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Defining SendCartToCustomerCommand Class in PHP\nDESCRIPTION: This snippet defines the SendCartToCustomerCommand class in the PrestaShop core domain. It takes a cart ID as a constructor parameter and is handled by the SendCartToCustomerHandler class. The command returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/send-cart-to-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\SendCartToCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Calling a Widget via Hook in Smarty\nDESCRIPTION: Smarty template code showing how to trigger a widget using the traditional hook syntax with the hook helper function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_2\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h='<hook_name>'}\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Template for Custom HTML Column\nDESCRIPTION: Defines a Twig template for rendering the custom HTML column. This template creates an anchor tag containing the value of the specified field from the record.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/create-custom-column-type.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"#\">{{ record[column.options.field] }}</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Manufacturer Deletion in PrestaShop Core Domain\nDESCRIPTION: The DeleteManufacturerCommand class accepts a manufacturer ID and is used to delete a manufacturer. It's handled by DeleteManufacturerHandler which implements DeleteManufacturerHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/delete-manufacturer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\DeleteManufacturerCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Manufacturer\\CommandHandler\\DeleteManufacturerHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\CommandHandler\\DeleteManufacturerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with PrestaShop Webservice\nDESCRIPTION: PHP code example showing how to implement error handling using try-catch blocks when making requests to the PrestaShop webservice.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n\n    // call to retrieve all customers\n    $xml = $webService->get(['resource' => 'customers']);\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for GetCustomerCarts Query in PHP for PrestaShop\nDESCRIPTION: This code snippet specifies the handler class for the GetCustomerCarts query. The handler implements the GetCustomerCartsHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-carts.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\QueryHandler\\GetCustomerCartsHandler\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Inside a PrestaShop Container (Bash)\nDESCRIPTION: Provides examples of commands that can be run after entering the PrestaShop container's shell using `docker exec -ti`. It shows how to use the PrestaShop Symfony console to enable a module (`php bin/console prestashop:module enable xxx`) and how to tail the development log file interactively (`tail -f var/logs/dev.log`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module enable xxx # enables the module xxx\ntail -f var/logs/dev.log # tail in interactive mode the dev.log file\n# you can use all other commands you may need\n```\n\n----------------------------------------\n\nTITLE: Transform Guest To Customer Command Class Definition\nDESCRIPTION: Core command class responsible for transforming a guest customer (customer without password) into a registered customer account. Takes a customer ID as constructor parameter and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/transform-guest-to-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\TransformGuestToCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Generating Content with renderList in PHP\nDESCRIPTION: This snippet shows the usage of the getContent() method, where the previously defined renderList() method is invoked. It appends the generated list HTML to an internal HTML string and returns it. This method relies on renderList() functioning correctly to provide the expected output.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @return string\n   */\npublic function getContent()\n{\n   // ...\n   $this->_html .= $this->renderList();\n   // ...\n   return $this->_html;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleCartRuleStatusCommand Class in PHP\nDESCRIPTION: This code snippet defines the ToggleCartRuleStatusCommand class in the PrestaShop Core Domain. It is used to toggle the status of a cart rule. The command takes a cart rule ID and the expected status as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/toggle-cart-rule-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Command\\ToggleCartRuleStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Core Implementation of actionValidateOrder Hook in PrestaShop\nDESCRIPTION: Shows how the actionValidateOrder hook is executed in the PaymentModule.php core file, passing the context cart, order, customer, currency, and order status objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateOrder.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionValidateOrder', [\n                'cart' => $this->context->cart,\n                'order' => $order,\n                'customer' => $this->context->customer,\n                'currency' => $this->context->currency,\n                'orderStatus' => $order_status,\n            ])\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAdminLoginControllerResetBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminLoginControllerResetBefore hook is called in the core PrestaShop code. It passes the controller instance and relevant reset information like token value, employee ID, email, password, and confirmation data to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerResetBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminLoginControllerResetBefore',\n            [\n                'controller' => $this,\n                'reset_token_value' => $reset_token_value,\n                'id_employee' => $id_employee,\n                'reset_email' => $reset_email,\n                'reset_password' => $reset_password,\n                'reset_confirm' => $reset_confirm,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Running PHP-CS-Fixer for Coding Standards\nDESCRIPTION: Demonstrates using the PHP-CS-Fixer tool to fix or report PHP coding standards issues. It is run using a Composer-installed binary and can report issues without fixing them using `--dry-run`. Requires prestashop/php-dev-tools and friendsofphp/php-cs-fixer installed via Composer. Outputs the checked files and their status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/basic-checks.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"php vendor/bin/php-cs-fixer fix [--dry-run]\"\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates the execution of the `actionMailAlterMessageBeforeSend` hook in the PrestaShop platform. It allows developers to modify the email message before it is sent. The `message` parameter passed by reference allows direct manipulation. Dependencies include the PrestaShop hook management system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionMailAlterMessageBeforeSend.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionMailAlterMessageBeforeSend', [\n                'message' => &$message,\n            ])\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductFeatureValues Query Class in PHP for PrestaShop\nDESCRIPTION: This code snippet defines the GetProductFeatureValues query class in PrestaShop's core domain. It is used to retrieve feature values associated with a product. The query takes a product ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-feature-values.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\Query\\GetProductFeatureValues\n```\n\n----------------------------------------\n\nTITLE: Using the Custom PDF Generation Module\nDESCRIPTION: Shows how to instantiate and utilize the custom PDF generator module in PrestaShop. The code snippet demonstrates fetching the module instance and calling the `generatePDF` method with an order ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$myModuleOrderPdfGenerator = Module::getInstanceByName('mycustompdfgenerator');\n$myModuleOrderPdfGenerator->generatePDF([\n   'id_order'=>666\n ]);\n\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference for Customer Message Command\nDESCRIPTION: Command class definition that handles adding messages to customers related to orders. Takes orderId, message content, and privacy flag as constructor parameters. Returns void and is handled by AddOrderCustomerMessageHandler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-message/_partials/add-order-customer-message-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerMessage\\Command\\AddOrderCustomerMessageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\AddOrderCustomerMessageHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerMessage\\CommandHandler\\AddOrderCustomerMessageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Editing Cart Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This command object enables updates to a cart-related address in the PrestaShop domain. It depends on the PrestaShop command bus and expects the cart identifier along with new address details as input. The command is executed within the context of a shopping cart, ensuring address updates affect the correct entity. Outputs include status of the edit or errors if cart/address validation fails.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// EditCartAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Cart\\Command;\n\n/**\n * Command for editing the cart address\n */\nclass EditCartAddressCommand\n{\n    private $cartId;\n    private $addressData;\n\n    public function __construct($cartId, array $addressData)\n    {\n        $this->cartId = $cartId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building the Initial Vue Project (Shell)\nDESCRIPTION: Navigates into the newly created `_dev` project directory and runs the default build command defined in the project's `package.json`. This compiles the standalone Vue application.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd _dev\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Resource Schema Synopsis in PrestaShop API\nDESCRIPTION: Example response of a schema synopsis for an address resource, showing field names, format requirements, and validation rules for each property of the address object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <address>\n        <id_customer format=\"isNullOrUnsignedId\"></id_customer>\n        <id_manufacturer format=\"isNullOrUnsignedId\"></id_manufacturer>\n        <id_supplier format=\"isNullOrUnsignedId\"></id_supplier>\n        <id_warehouse format=\"isNullOrUnsignedId\"></id_warehouse>\n        <id_country required=\"true\" format=\"isUnsignedId\"></id_country>\n        <id_state format=\"isNullOrUnsignedId\"></id_state>\n        <alias required=\"true\" maxSize=\"32\" format=\"isGenericName\"></alias>\n        <company maxSize=\"255\" format=\"isGenericName\"></company>\n        <lastname required=\"true\" maxSize=\"255\" format=\"isName\"></lastname>\n        <firstname required=\"true\" maxSize=\"255\" format=\"isName\"></firstname>\n        <vat_number format=\"isGenericName\"></vat_number>\n        <address1 required=\"true\" maxSize=\"128\" format=\"isAddress\"></address1>\n        <address2 maxSize=\"128\" format=\"isAddress\"></address2>\n        <postcode maxSize=\"12\" format=\"isPostCode\"></postcode>\n        <city required=\"true\" maxSize=\"64\" format=\"isCityName\"></city>\n        <other maxSize=\"300\" format=\"isMessage\"></other>\n        <phone maxSize=\"32\" format=\"isPhoneNumber\"></phone>\n        <phone_mobile maxSize=\"32\" format=\"isPhoneNumber\"></phone_mobile>\n        <dni maxSize=\"16\" format=\"isDniLite\"></dni>\n        <deleted format=\"isBool\"></deleted>\n        <date_add format=\"isDate\"></date_add>\n        <date_upd format=\"isDate\"></date_upd>\n    </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateRangeType in a Symfony Form Type for PrestaShop\nDESCRIPTION: This code example demonstrates how to add a date range picker to a custom Symfony form type in PrestaShop. The DateRangeType creates two date picker fields named 'date_add_from' and 'date_add_to' that work together as a range selector.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/date-range.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\DateRangeType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        // this will render a date range picker with 2 DatePickerTypes\n        // named 'date_add_from' and 'date_add_to'\n        $builder->add('date_add', DateRangeType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PrestaShop JavaScript\nDESCRIPTION: Demonstrates how to trigger a custom event using the prestashop object with additional data payload.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/javascript-events/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprestashop.emit(\n  'myEventName',\n  {\n    myData1: 1,\n    myData2: 3\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Calling displayPaymentReturn Hook in OrderConfirmationController\nDESCRIPTION: This code executes the displayPaymentReturn hook in the front office, passing the order object and module ID as parameters. This hook is typically used to display custom content on the order confirmation page after payment has been processed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPaymentReturn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayPaymentReturn', ['order' => $order], $this->id_module)\n```\n\n----------------------------------------\n\nTITLE: Identifying the AddOrderStateCommand Class in PrestaShop (PHP)\nDESCRIPTION: This snippet shows the fully qualified class name for the command used to add a new order state in PrestaShop. This command object encapsulates all the necessary data (like localized names, color, various boolean flags for behavior like logging, invoicing, visibility, email sending, PDF generation, shipping status, payment status, and delivery status, plus localized email templates) required to create an order state. It is processed by the `AddOrderStateHandler` and returns an `OrderStateId` upon successful creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-state/_partials/add-order-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderState\\Command\\AddOrderStateCommand`\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Permissions for API Key in PHP\nDESCRIPTION: Code for assigning resource permissions to an API key. This example grants full access to customer and order resources by setting permissions for all HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/creating-access.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$permissions = [\n  'customers' => ['GET' => 1, 'POST' => 1, 'PUT' => 1, 'PATCH' => 1, 'DELETE' => 1, 'HEAD' => 1],\n  'orders' => ['GET' => 1, 'POST' => 1, 'PUT' => 1, 'PATCH' => 1, 'DELETE' => 1, 'HEAD' => 1],\n];\n\nWebserviceKey::setPermissionForAccount($apiAccess->id, $permissions);\n```\n\n----------------------------------------\n\nTITLE: Executing the actionPaymentConfirmation Hook in PHP\nDESCRIPTION: Shows how the actionPaymentConfirmation hook is executed in PrestaShop core. It passes the order ID as a parameter and is configured to run in the context of the order's shop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPaymentConfirmation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPaymentConfirmation', ['id_order' => (int) $order->id], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Creating a Callback Function for Chunked Data Export in PHP\nDESCRIPTION: Demonstrates creating a callback function that retrieves data in chunks for processing large datasets efficiently.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$dataCallback = function ($offset, $limit){\n    $data = $myRepository->getData($offset, $limit);\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up PHP Testing and Deployment with GitLab YAML\nDESCRIPTION: This GitLab CI configuration involves multiple stages including tests, build, and deploy for PHP-based PrestaShop modules. It conducts tests using various PHP versions, installs required dependencies, and sets up the environment for artifact release. By leveraging reusable scripts and PHP images, it ensures that modules are tested and packaged efficiently for deployment. JS dependencies are also managed separately by specific job provisions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/ci-cd.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - tests\n  - build\n  - deploy\n\n.before_script_php_template: &before_script_php\n  before_script:\n    - apt-get update && apt-get install wget git zip unzip -y\n    - wget https://composer.github.io/installer.sig -O - -q | tr -d '\\n' > installer.sig\n    - php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n    - php -r \"if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\n    - php composer-setup.php\n    - php -r \"unlink('composer-setup.php'); unlink('installer.sig');\"\n\ntest:php-5.6:\n  <<: *before_script_php\n  image: php:5.6\n  stage: tests\n  script:\n  - find . -type f -name '*.php' ! -path \"./vendor/*\" ! -path \"./tests/*\" -exec php -l -n {} \\; | (! grep -v \"No syntax errors detected\")\n\ntest:php-7.2:\n  <<: *before_script_php\n  image: php:7.2\n  stage: tests\n  script:\n  - find . -type f -name '*.php' ! -path \"./vendor/*\" ! -path \"./tests/*\" -exec php -l -n {} \\; | (! grep -v \"No syntax errors detected\")\n\nphp-cs-fixer-7-2:\n  <<: *before_script_php\n  image: php:7.2\n  stage: tests\n  script: |\n    php composer.phar install --dev\n    php -d memory_limit=-1 vendor/bin/php-cs-fixer fix --dry-run --diff --using-cache=no --diff-format udiff\n\nphpstan-php-7-2:\n  <<: *before_script_php\n  variables:\n    _PS_ROOT_DIR_: /var/www/html/\n  image: prestashop/prestashop:1.7-7.2-apache\n  stage: tests\n  script: |\n    php composer.phar install --dev\n    php composer.phar global require phpstan/phpstan-shim:0.12\n    ln -s /builds/ps-addons/$CI_PROJECT_NAME /var/www/html/modules/$CI_PROJECT_NAME\n    php -d memory_limit=-1 ~/.composer/vendor/bin/phpstan analyse --configuration=/var/www/html/modules/$CI_PROJECT_NAME/tests/phpstan/phpstan.neon\n\nbefore-deploy:\n  image: node:10.16\n  stage: build\n  artifacts:\n    untracked: true\n  script:\n    - npm install\n    - npm run build\n\ndeploy-artifact-release:\n  <<: *before_script_php\n  image: php:7.2\n  stage: deploy\n  script: |\n    php composer.phar install --no-dev -o\n    rm -rf node_modules\n    rm -rf _dev\n    rm -f .browserlistrc\n    rm -f .eslintrc.js\n    rm -f .postcssrc.js\n    rm -f babel.config.js\n    rm -f vue.config.js\n    rm -f .package.json\n    rm -f .package-lock.json\n    rm -f .php_cs.dist\n    rm -f .gitlab-ci.yml\n    rm -f .editorconfig\n    rm -f Makefile\n    rm -f docker-compose.yml\n    rm -rf .git\n    rm -f .gitignore\n    rm -rf tests\n    rm -f composer.phar\n    mkdir ../module\n    mv * ../module\n    mkdir $CI_PROJECT_NAME\n    mv ../module/* $CI_PROJECT_NAME\n\n  artifacts:\n    name: $CI_PROJECT_NAME\n    paths:\n    - $CI_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Implementing Module getContent Method for Controller Redirection\nDESCRIPTION: This PHP method redirects users to the module's configuration page by generating the route URL and using Tools::redirectAdmin to perform the redirection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/adding-configuration-page-modern.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n  public function getContent()\n  {\n      $route = $this->get('router')->generate('demo_configuration_form_simple');\n      Tools::redirectAdmin($route);\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing Hook Action Form Modifier in PrestaShop PHP\nDESCRIPTION: The purpose of this code snippet is to execute the 'action&lt;Controller&gt;FormModifier' hook within a PrestaShop PHP environment. It allows the modification of controller forms. The snippet shows how to call the hook with parameters such as 'object', 'fields', 'fields_value', and 'form_vars' that can reference or modify specific form elements. No external dependencies are required. Expected inputs include the current form object and associated details, which can be manipulated or read depending on requirement.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<Controller>FormModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . $this->controller_name . 'FormModifier', [\n                'object' => &$this->object,\n                'fields' => &$this->fields_form,\n                'fields_value' => &$fields_value,\n                'form_vars' => &$this->tpl_form_vars,\n            ])\n```\n\n----------------------------------------\n\nTITLE: Calling displayCartModalContent Hook in PrestaShop\nDESCRIPTION: This snippet shows how to call the displayCartModalContent hook in a PrestaShop theme template. The hook is called with the product object as a parameter to display content in the add-to-cart modal window.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCartModalContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCartModalContent' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Adding a Customer Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This PHP command object facilitates the creation of a new customer address in the PrestaShop domain model. Dependencies include the PrestaShop core's command bus and associated address value objects. Key parameters cover all relevant address fields such as the customer identifier, physical address data, and optional company information. Inputs are validated upstream; after execution, the command returns the new address identifier. Proper usage relies on domain boundaries and ensures encapsulation of address creation logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// AddCustomerAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for adding a customer address\n */\nclass AddCustomerAddressCommand\n{\n    private $customerId;\n    private $addressData;\n    // ...other properties\n\n    public function __construct($customerId, array $addressData)\n    {\n        $this->customerId = $customerId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Main PrestaShop Module Class in PHP\nDESCRIPTION: This snippet defines the main class `DemoExtendSymfonyForm2` for a PrestaShop module. It extends the base `Module` class, sets essential properties like name, author, version, and PrestaShop compatibility. It also includes basic setup like PSR-4 autoloading via Composer and defines a constant for the image path. The constructor sets the display name and description, indicating the module's purpose is to demonstrate adding an image upload to a Symfony form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// since this module is compatible with PS 1.7.7 and later, we\n// can use PHP7 strict types because PHP5 support has been dropped for PS 1.7.7\ndeclare(strict_types=1);\n\n// use statements\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n// needed as use Composer to autoload this module\nrequire_once __DIR__.'/vendor/autoload.php';\n\n/**\n * Class demoextendsymfonyform\n */\nclass DemoExtendSymfonyForm2 extends Module\n{\n    private const SUPPLIER_EXTRA_IMAGE_PATH = '/img/su/';\n\n    public function __construct()\n    {\n        $this->name = 'demoextendsymfonyform2';\n        $this->author = 'PrestaShop';\n        $this->version = '1.0.0';\n        $this->ps_versions_compliancy = ['min' => '1.7.7.0', 'max' => _PS_VERSION_];\n\n        parent::__construct();\n\n        $this->displayName = $this->l('Demo Symfony Forms #2');\n        $this->description = $this->l(\n            'Demonstration of how to add an image upload field inside the Symfony form'\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Module Display Name in PHP\nDESCRIPTION: Sets the module name that will be displayed in module listings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->displayName = \"My wonderful module\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Process Controller Action in PHP\nDESCRIPTION: Controller action that handles import process execution through AJAX requests, configuring and running the import operation in batches.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/ImportController.php\n\npublic function processImportAction(Request $request)\n{\n    $importer = $this->get('prestashop.core.import.importer');\n    $importConfigFactory = $this->get('prestashop.core.import.config_factory');\n    $runtimeConfigFactory = $this->get('prestashop.core.import.runtime_config_factory');\n    $importHandlerFinder = $this->get('prestashop.adapter.import.handler_finder');\n    \n    // Building the configuration objects\n    $importConfig = $importConfigFactory->buildFromRequest($request);\n    $runtimeConfig = $runtimeConfigFactory->buildFromRequest($request);\n    \n    // Running the import process\n    $importer->import(\n        $importConfig,\n        $runtimeConfig,\n        $importHandlerFinder->find($importConfig->getEntityType()) // Finding import handler\n    );\n    \n    return $this->json($runtimeConfig->toArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateCustomerThreadStatusHandler in PHP\nDESCRIPTION: This snippet shows the handler class for the UpdateCustomerThreadStatusCommand. It implements the UpdateCustomerThreadStatusHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/update-customer-thread-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\UpdateCustomerThreadStatusHandler\n```\n\n----------------------------------------\n\nTITLE: Defining the ObjectModel's Definition Array\nDESCRIPTION: Comprehensive example of how to define the static $definition array for an ObjectModel, which specifies the table structure, primary key, multilanguage support, and field definitions including types and validation rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Example from the CMS model (CMSCore)\n */\npublic static $definition = [\n    'table' => 'cms',\n    'primary' => 'id_cms',\n    'multilang' => true,\n    'fields' => array(\n        'id_cms_category'  => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'],\n        'position'         => ['type' => self::TYPE_INT],\n        'active'           => ['type' => self::TYPE_BOOL],\n\n        // Language fields\n        'meta_description' => [\n            'type' => self::TYPE_STRING,\n            'lang' => true,\n            'validate' => 'isGenericName',\n            'size' => 255\n        ],\n        'meta_keywords'    => [\n            'type' => self::TYPE_STRING,\n            'lang' => true,\n            'validate' => 'isGenericName',\n            'size' => 255\n        ],\n        'meta_title'       => [\n            'type' => self::TYPE_STRING,\n            'lang' => true,\n            'validate' => 'isGenericName',\n            'required' => true,\n            'size' => 128\n        ],\n        'link_rewrite'     => [\n            'type' => self::TYPE_STRING,\n            'lang' => true,\n            'validate' => 'isLinkRewrite',\n            'required' => true,\n            'size' => 128\n        ],\n        'content'          => [\n            'type' => self::TYPE_HTML,\n            'lang' => true,\n            'validate' => 'isString',\n            'size' => 3999999999999\n        ],\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Domain Command in PrestaShop (PHP)\nDESCRIPTION: This code snippet references the DeleteProductCommand class used to delete products within PrestaShop's core domain. It requires the product ID and a ShopConstraint object as parameters to its constructor. The command is handled by DeleteProductHandler, which implements the DeleteProductHandlerInterface. The command returns void, signifying its action-only intent, and is essential for domain-driven deletion logic within PrestaShop modules. Dependencies include the domain command and relevant value object classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\DeleteProductCommand\n```\n\n----------------------------------------\n\nTITLE: Defining TransformationInterface in PHP\nDESCRIPTION: Interface definition for TransformationInterface in PrestaShop, specifying methods for applying transformations to email templates, getting the template type, and setting the language.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/apply-transformation-from-module.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation;\n\ninterface TransformationInterface\n{\n    /**\n     * @param string $templateContent\n     * @param array $templateVariables\n     *\n     * @return string\n     */\n    public function apply($templateContent, array $templateVariables);\n\n    /**\n     * Returns the type of templates this transformation is associated with,\n     * either html or txt, so that the renderer knows if it has to be applied\n     * or not\n     *\n     * @return string\n     */\n    public function getType();\n\n    /**\n     * @param LanguageInterface $language\n     *\n     * @return $this\n     */\n    public function setLanguage(LanguageInterface $language);\n}\n```\n\n----------------------------------------\n\nTITLE: Command Class Definition for Adding CMS Page Categories\nDESCRIPTION: Class definition for AddCmsPageCategoryCommand that handles the creation of CMS page categories. Takes localized name and URL, parent ID, and display status as constructor parameters. Returns a CmsPageCategoryId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/add-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\AddCmsPageCategoryCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\CommandHandler\\AddCmsPageCategoryHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\CommandHandler\\AddCmsPageCategoryHandlerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\ValueObject\\CmsPageCategoryId\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelatedProductsCommand Class in PHP\nDESCRIPTION: This snippet defines the SetRelatedProductsCommand class in the PrestaShop core domain. It is used to set related products for a specific product. The command takes a product ID and an array of related product IDs as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-related-products-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\SetRelatedProductsCommand\n```\n\n----------------------------------------\n\nTITLE: Fetching Images Using PrestaShop Webservice\nDESCRIPTION: PHP code example showing how to retrieve image information using the PrestaShop webservice library.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n\n    $xml = $webService->get(['resource' => 'images/products']);\n    $imageTypes = $xml->image_types->children();\n    $images = $xml->images->children();\n} catch (PrestaShopWebserviceException $e) {\n    echo 'Error:' . $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LogSeverityChoiceType in PHP Form Builder\nDESCRIPTION: Example showing how to add a LogSeverityChoiceType field to a form builder with translations and help text. The field allows selecting minimum severity level for log alerts with a 'None' placeholder option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/log-severity-choice-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('logs_by_email', LogSeverityChoiceType::class, [\n    'placeholder' => $this->trans(\n        'None',\n        'Admin.Global'\n    ),\n    'label' => $this->trans(\n        'Minimum severity level',\n        'Admin.Advparameters.Feature'\n    ),\n    'help' => $this->trans(\n        'Click on \"None\" to disable log alerts by email or enter the recipients of these emails in the following field.',\n        'Admin.Advparameters.Help'\n    ),\n])\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for GetCustomerCarts Query in PHP for PrestaShop\nDESCRIPTION: This code snippet specifies the return type for the GetCustomerCarts query. It returns an array of CartSummary objects, which contain summarized information about customer carts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-carts.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\CartSummary[]\n```\n\n----------------------------------------\n\nTITLE: Executing actionBuildFrontEndObject Hook in PHP\nDESCRIPTION: Hook execution code that allows modification of the 'prestashop' JavaScript object. The hook passes a reference to the object, allowing hooks to modify it directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionBuildFrontEndObject.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionBuildFrontEndObject', [\n            'obj' => &$object,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Defining the EditWebserviceKeyCommand and its Handler in PrestaShop (PHP)\nDESCRIPTION: This snippet details the `EditWebserviceKeyCommand` class, used for editing webservice keys in PrestaShop. The command requires an integer `$webserviceKeyId` during instantiation. Its execution is handled by the `EditWebserviceKeyHandler` class, which adheres to the `EditWebserviceKeyHandlerInterface`. The command handler returns `void` upon completion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/webservice/_partials/edit-webservice-key-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Webservice\\Command\\EditWebserviceKeyCommand`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$int $webserviceKeyId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Webservice\\CommandHandler\\EditWebserviceKeyHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Webservice\\CommandHandler\\EditWebserviceKeyHandlerInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Dispatching Performance Controller Hook in PrestaShop\nDESCRIPTION: This snippet shows how the Performance Controller dispatches a hook before executing post-processing operations. The hook name is dynamically constructed with the specific operation name, and the controller instance is passed as a parameter to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminAdvancedParametersPerformanceControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminAdvancedParametersPerformanceControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: GetDatabaseTablesList Query Return Type\nDESCRIPTION: The return type of the GetDatabaseTablesList query, which is a DatabaseTablesList object containing all database tables from the PrestaShop database.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-database-tables-list.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\DatabaseTablesList\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Unit Test Class in PHP for PrestaShop\nDESCRIPTION: This snippet demonstrates how to create a basic unit test class for PrestaShop. It shows the proper namespace, use statement for PHPUnit's TestCase, and the class declaration extending TestCase.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-create-your-own-unit-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Tests\\Unit\\Foo;\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass BarTest extends TestCase\n{\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing displayRightColumnProduct Hook in PrestaShop Themes\nDESCRIPTION: Shows how the displayRightColumnProduct hook is called within PrestaShop theme templates. This hook allows adding new elements to the right column of product pages and was formerly known as 'extraRight'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayRightColumnProduct.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayRightColumnProduct'}\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Product List Updates with JavaScript in PrestaShop\nDESCRIPTION: This code snippet demonstrates how to handle AJAX updates for product listing pages in PrestaShop. It listens for the 'updateProductList' event and replaces DOM elements with newly rendered content received from the server, ensuring the product list updates without page refresh.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/listing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from 'jquery';\nimport prestashop from 'prestashop';\nimport 'velocity-animate';\n\n$(document).ready(() => {\n  prestashop.on('updateProductList', (data) => {\n    updateProductListDOM(data);\n  });\n});\n\nfunction updateProductListDOM (data) {\n  $('#search_filters').replaceWith(data.rendered_facets);\n  $('#js-active-search-filters').replaceWith(data.rendered_active_filters);\n  $('#js-product-list-top').replaceWith(data.rendered_products_top);\n  $('#js-product-list').replaceWith(data.rendered_products);\n  $('#js-product-list-bottom').replaceWith(data.rendered_products_bottom);\n}\n```\n\n----------------------------------------\n\nTITLE: Module Class Implementation in PHP\nDESCRIPTION: Complete module class showing installation and moduleRoutes hook implementation with two custom routes\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyModuleAddingRoutes extends Module \n{\n    public function install()\n    {\n        return parent::install() && $this->registerHook('moduleRoutes');\n    }\n\n    public function hookModuleRoutes()\n    {\n        return [\n          'module-mymoduleaddingroutes-list' => [\n            'rule' => 'mymoduleaddingroutes/list',\n            'keywords' => [],\n            'controller' => 'list',\n            'params' => [\n                'fc' => 'module',\n                'module' => 'mymoduleaddingroutes'\n            ]\n          ],\n          'module-mymoduleaddingroutes-show' => [\n            'rule' => 'mymoduleaddingroutes/show/{id}/{slug}',\n            'keywords' => [\n              'id' => [\n                'regexp' => '[0-9]*',\n                'param' => 'id'\n              ],\n              'slug' => [\n                'regexp' => '.*',\n                'param' => 'slug'\n              ]\n            ],\n            'controller' => 'show',\n            'params' => [\n                'fc' => 'module',\n                'module' => 'mymoduleaddingroutes'\n            ]\n          ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript and CSS Assets using Make\nDESCRIPTION: Compiles JavaScript and CSS assets using NPM and Webpack via a Make command. This requires NodeJS (v14.x or recommended v16.x) and NPM to be installed. The command should be run from the root directory of the PrestaShop project (`/path/to/prestashop`). It compiles assets for both the back office and front office. This step is necessary for the development version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/prestashop\nmake assets\n```\n\n----------------------------------------\n\nTITLE: Enabling Sortable Header in HelperList PHP\nDESCRIPTION: Demonstrates how to enable a sortable and searchable header in HelperList by disabling the simple_header option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$helper->simple_header = false;\n```\n\n----------------------------------------\n\nTITLE: Querying Manufacturer Information - PrestaShop CQRS - PHP\nDESCRIPTION: This snippet describes a PHP query class used to retrieve a manufacturer's information for viewing within the PrestaShop framework. It relies on constructor parameters for the manufacturer and language IDs. The handler class processes the query and returns a ViewableManufacturer object. Dependencies include the relevant PrestaShop Domain and Adapter classes, with strict typing and CQRS patterns enforced. Inputs are manufacturer and language IDs; output is a structured viewable manufacturer object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/get-manufacturer-for-viewing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Query\\GetManufacturerForViewing\n-- Purpose: Get manufacturer information for viewing\n\n// Constructor parameters:\n//   int $manufacturerId\n//   int $languageId\n\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Manufacturer\\QueryHandler\\GetManufacturerForViewingHandler\n//     Implements:\n//       PrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\QueryHandler\\GetManufacturerForViewingHandlerInterface\n\n// Return type:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\QueryResult\\ViewableManufacturer\n```\n\n----------------------------------------\n\nTITLE: Customizing Invoice Styling with Smarty Templates - PrestaShop - Smarty\nDESCRIPTION: This snippet demonstrates how to customize the look and feel of PrestaShop's invoice PDFs by defining color and size variables inside the overridden Smarty template (`invoice.style-tab.tpl`) within your theme's pdf directory. The variables affect header colors, borders, text font sizes, product row backgrounds, and table paddings. No external dependencies are required apart from PrestaShop's standard theme and Smarty engine. The template expects to be placed at `themes/your-theme/pdf/invoice.style-tab.tpl` and impacts style when generating invoices.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_0\n\nLANGUAGE: Smarty\nCODE:\n```\n{* /themes/your-theme/pdf/invoice.style-tab.tpl *}\n{assign var=color_header value=\"#25B9D7\"}\n{assign var=color_border value=\"#3ED2F0\"}\n{assign var=color_border_lighter value=\"#DFF5F9\"}\n{assign var=color_line_even value=\"#FAFBFC\"}\n{assign var=color_line_odd value=\"#6C868E\"}\n{assign var=font_size_text value=\"12pt\"}\n{assign var=font_size_header value=\"12pt\"}\n{assign var=font_size_product value=\"12pt\"}\n{assign var=height_header value=\"25px\"}\n{assign var=table_padding value=\"7px\"}\n\n```\n\n----------------------------------------\n\nTITLE: CMS Page Command Class Definition - PHP\nDESCRIPTION: Command class for adding new CMS pages in PrestaShop. Accepts parameters for page content, metadata, and display settings. Returns CmsPageId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/add-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\AddCmsPageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\AddCmsPageHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\AddCmsPageHandlerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\ValueObject\\CmsPageId\n```\n\n----------------------------------------\n\nTITLE: Querying Associated Suppliers with PrestaShop Domain Query - PHP\nDESCRIPTION: This documentation describes the use of the GetAssociatedSuppliers domain query class in PrestaShop to retrieve all suppliers associated with a specific product and to identify its default supplier. The query requires an integer product ID as a constructor parameter. The handler responsible for processing this query is GetAssociatedSuppliersHandler, which implements the GetAssociatedSuppliersHandlerInterface. The handler returns an AssociatedSuppliers result object upon execution. The setup assumes that PrestaShop's domain query/handler infrastructure is available and configured. No explicit code sample for a callable method is provided; implementation details must follow the PrestaShop Domain-Driven Design conventions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-associated-suppliers.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\Query\\GetAssociatedSuppliers\n_Provides the list of suppliers associated to a product, and its default supllier._\n\n| Query details              |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $productId`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Product\\Supplier\\QueryHandler\\GetAssociatedSuppliersHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\QueryHandler\\GetAssociatedSuppliersHandlerInterface`</li>  |\n| **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\QueryResult\\AssociatedSuppliers`  |\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Order Return States using PrestaShop Command - PHP\nDESCRIPTION: The snippet describes the usage of the BulkDeleteOrderReturnStateCommand class in PrestaShop, which allows developers to delete multiple order return states at once. It requires an array of order return state IDs as constructor input and is processed by the BulkDeleteOrderReturnStateHandler, implementing the BulkDeleteOrderReturnStateHandlerInterface. The command acts within PrestaShop's Core\\Domain architecture, leveraging dependency injection and separation of concerns. No return value is expected (void); dependencies include PrestaShop's command bus and associated handler classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return-state/_partials/bulk-delete-order-return-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderReturnState\\Command\\BulkDeleteOrderReturnStateCommand`\n_Deletes order return statuses in bulk action_\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$array $orderReturnStateIds`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\OrderReturnState\\CommandHandler\\BulkDeleteOrderReturnStateHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\OrderReturnState\\CommandHandler\\BulkDeleteOrderReturnStateHandlerInterface`</li>  |\n| **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: Example Output of the {url} Smarty Helper\nDESCRIPTION: Shows the resulting HTML/URL strings generated by the corresponding `{url}` Smarty helper examples. This demonstrates how the helper constructs URLs including domain, path, query parameters, and handles URL rewriting based on the provided entity and parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n  http://prestashop.ps/it/address?id_address=3\n  http://prestashop.ps/it/address?id_address=3\n  http://prestashop.ps/it/address?id_address=3&delete=1\n  http://prestashop.ps/it/admin/module/manage\n```\n\n----------------------------------------\n\nTITLE: Implementing FormDataProviderDefaultData Hook for Product Forms\nDESCRIPTION: Example of registering and implementing the actionProductFormDataProviderDefaultData hook. This hook allows modules to provide or modify default values sent to forms.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    $this->registerHook('actionProductFormDataProviderDefaultData');\n}\n\npublic function hookActionProductFormDataProviderDefaultData(array $params): void\n{\n    // define default values for fields in $params[\"data\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Translated Text for JavaScript in Smarty\nDESCRIPTION: Shows how to use the `{l}` function combined with the `escape` modifier to safely insert translated text containing special characters (like quotes) into JavaScript code. The `escape:\"javascript\"` modifier ensures proper escaping.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: smarty\nCODE:\n```\n<script type=\"text/javascript\">\n  var thisIsAString = '{l|escape:\"javascript\" s=\"Don't do this at home\" d=\"Modules.Mymodule\"}';\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Header for JSON Output\nDESCRIPTION: Example of an HTTP request using Authorization header with Base64 encoded API key and requesting JSON output format instead of the default XML.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/ HTTP/1.1\nHost: example.com\nOutput-Format: JSON\nAuthorization: Basic VUNDTExROU4yQVJTSFdDWExUNzRLVUtTU0szNEJGS1g6\n```\n\n----------------------------------------\n\nTITLE: Using UpdateProductQuantityInCartCommand in PrestaShop PHP\nDESCRIPTION: The UpdateProductQuantityInCartCommand is used to update product quantity in a cart. It requires cart ID, product ID, and quantity parameters, with optional combination ID and customization ID. The quantity provided must include gift products. The command is handled by UpdateProductQuantityInCartHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-product-quantity-in-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\UpdateProductQuantityInCartCommand\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Registration in Theme YAML\nDESCRIPTION: Example of registering CSS and JavaScript assets in a theme's theme.yml file. Shows how to add product-specific CSS and global/product JavaScript files with various options like priority and positioning.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  css:\n    product:\n      - id: product-extra-style\n        path: assets/css/product.css\n        media: all\n        priority: 100\n  js:\n    all:\n      - id: this-cool-lib\n        path: assets/js/external-lib.js\n        priority: 30\n        position: bottom\n    product:\n      - id: product-custom-lib\n        path: assets/js/product.js\n        priority: 200\n        attribute: async\n```\n\n----------------------------------------\n\nTITLE: Declaring Options in HelperOptions for PrestaShop Configuration Forms in PHP\nDESCRIPTION: This snippet demonstrates the complete structure for declaring configuration options in the fields_options array, including all possible fields and their descriptions. It shows how to define fieldsets, fields, and various configuration options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->fields_options = [\n  'general' => [\n    'title' => $this->l('Carrier options'),                      // The title of the fieldset. If missing, default is 'Options'.\n    'top' => $this->l('Text to display before the fieldset'),    // This text is display right above the first. Rarely used.\n    'image' => 'url to icon',                                    // If missing, will use the default icon for the tab.\n    'description' => $this->l('Display as description'),         // Displays an informational box above the fields.\n    'info' => $this->l('Display as info'),                       // Displays an unstyled text above the fields.\n    'fields' => [                                                // The various option fields.\n      'PS_CARRIER_DEFAULT' => [                                  // The array is named after the option's ID. It must be the\n                                                                 // same name as the value stored in the ps_configuration table.\n        'title' => $this->l('Default carrier:'),                 // The name of the option.\n        'desc' => $this->l('The default carrier used in shop'),  // The description of the option.\n        'cast' => 'intval',                                      // Using this option, you can cast the variable's content\n                                                                 // into a known value. You can use boolval, floatval, intval\n                                                                 // or strval depending on value type you want to receive.\n        'validation' => 'isInt',                                 // Validate the field with method of Validate class\n        'type' => {'text', 'hidden', 'select', 'bool', 'radio',  // The kind of input field you want to use.\n          'checkbox', 'password', 'textarea', 'file', 'textLang',\n          'textareaLang', 'selectLang'},\n        'autoload_rte' => 'true'                                 // Display a TinyMCE editor for textarea field only\n        'suffix' => 'kg',                                        // Display after the field (ie. currency).\n                                                                 // For text fields or password fields only.\n        'identifier' => 'id_carrier',                            // The unique ID for the form.\n        'list' => [list do display as options],             // For select field only.\n        'empty_message' => $this->module->l('Display if list is empty'), // For select field only\n        'cols' => 40,                                            // For textarea fields only.\n        'rows' => 5,                                             // For textarea fields only.\n        'thumb' => 'url to thumb image',                         // For file fields only.\n        'is_invisible' => {true, false}                          // Disable the field depending on shop context.\n      ],\n      'another_field' => [\n        ...\n      ],\n    ],\n    'submit' => [\n      'title' => $this->module->l('Save'),\n    ],\n  ],\n  'another fieldset' => ...\n];\n```\n\n----------------------------------------\n\nTITLE: Executing filterSupplierContent Hook in PHP\nDESCRIPTION: This code snippet shows how to execute the 'filterSupplierContent' hook in PrestaShop. It is invoked with various parameters such as 'object', 'id_module', 'array_return', and others which manage exception checks and shop identification. The primary purpose is to trigger modifications in the supplier content before fetching. It relies on the PrestaShop Hook class and assumes proper module and PrestaShop configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterSupplierContent.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec(\n            'filterSupplierContent',\n            ['object' => $supplierVar],\n            $id_module = null,\n            $array_return = false,\n            $check_exceptions = true,\n            $use_push = false,\n            $id_shop = null,\n            $chain = true\n        )\n```\n\n----------------------------------------\n\nTITLE: Invoking Dynamic Hook for Listing Results Modification in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how to programmatically invoke a PrestaShop hook named 'action<Controller>ListingResultsModifier' within an AdminController class. It uses the Hook::exec static method to call the hook, dynamically constructing the hook name based on the current controller and passing references to the listing array ('_list') and its total ('_listTotal') so that other modules can modify them. Required dependencies include the PrestaShop core Hook class and a controller context; the key parameters are passed by reference, enabling modification of the original data. Inputs are the controller context and associated listing data. Outputs are potentially modified versions of the provided list. This approach assumes standard PrestaShop module and hook structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<Controller>ListingResultsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . $this->controller_name . 'ListingResultsModifier', [\n            'list' => &$this->_list,\n            'list_total' => &$this->_listTotal,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Implementing a BadgeColumn in PrestaShop Grid using PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the BadgeColumn class in PrestaShop to display a badge for a specific field in a grid. Dependencies include PrestaShop's Grid system and require the BadgeColumn and ColumnCollection classes. The snippet creates a BadgeColumn for 'total_spent' field, sets necessary options like field name and badge type, and adds it to a ColumnCollection. This allows for a customizable grid display in PrestaShop's back-office environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/badge.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BadgeColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$badgeColumn = new BadgeColumn('total_spent');\n$badgeColumn->setName('Sales');\n$badgeColumn->setOptions([\n     'field' => 'total_spent',\n     'badge_type' => 'success',\n     'empty_value' => '--',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($badgeColumn);\n\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Handler Interface (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and interface name that the `DeleteTaxRulesGroupHandler` implements. This interface defines the contract for handling the tax rules group deletion command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/delete-tax-rules-group-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\TaxRulesGroup\\CommandHandler\\DeleteTaxRulesGroupHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Trigger Script for a PrestaShop Cron Front Controller (PHP)\nDESCRIPTION: This script acts as an entry point to execute a front controller (`ExampleModuleCronModuleFrontController`) from the command line. It manually sets the required `$_GET` parameters (`fc`, `module`, `controller`) to simulate a web request targeting the specific cron controller and then includes PrestaShop's main `index.php` to initialize the application context and dispatch the request to the controller. This file (`cron.php`) is placed within the module's root directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_GET['fc'] = 'module';\n$_GET['module'] = 'examplemodule';\n$_GET['controller'] = 'cron';\n\nrequire_once dirname(__FILE__) . '/../../index.php';\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating Carrier Details in PrestaShop\nDESCRIPTION: Shows how to instantiate and update a carrier object using the Carrier class. This example demonstrates creating a carrier instance from an ID and saving changes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/shipping.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// From the carrier ID stored in the var $carrierId\n\n$carrier = new \\Carrier($carrierId);\n\n// Apply changes to the $carrier object, then save.\n$carrier->save();\n```\n\n----------------------------------------\n\nTITLE: Implementation of actionUpdateQuantity Hook in PrestaShop Core\nDESCRIPTION: Shows how the actionUpdateQuantity hook is executed in the PrestaShop core. The hook is called when a product quantity is updated, passing product ID, product attribute ID, quantity, and shop ID as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionUpdateQuantity.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                    'actionUpdateQuantity',\n                                [\n                                    'id_product' => $id_product,\n                                    'id_product_attribute' => 0,\n                                    'quantity' => $product_quantity,\n                                    'id_shop' => $id_shop,\n                                ]\n                )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Database Row\nDESCRIPTION: Demonstrates how to fetch only the first row of a query result using getRow(). Automatically adds LIMIT 1 to the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request = 'SELECT `id_table` FROM `' . _DB_PREFIX_ . 'some_table` ...';\n\n/** @var array $result */\n$result = $db->getRow($request);\n```\n\n----------------------------------------\n\nTITLE: Installing PrestaShop PHP Dependencies using Composer\nDESCRIPTION: Navigates into the cloned PrestaShop project directory (`/path/to/prestashop`) and then executes `composer install` to download and install all required PHP libraries and dependencies defined in the `composer.json` file. Requires Composer to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_localhost.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/prestashop\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Overriding Product List Header for Category Page in Smarty\nDESCRIPTION: This snippet shows how to extend the base product listing template and override the product_list_header block to customize it for a category page, adding a category name, cover image, and description.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: smarty\nCODE:\n```\n{extends file='catalog/listing/product-list.tpl'}\n\n{block name='product_list_header'}\n\n  <h1>{$category.name}</h1>\n  <div class=\"category-cover\">\n    <img src=\"{$category.image.large.url}\" alt=\"{$category.image.legend}\">\n  </div>\n  <div id=\"category-description\">{$category.description nofilter}</div>\n\n{/block}\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleUnRegisterHookAfter Hook in PrestaShop\nDESCRIPTION: This snippet demonstrates how the actionModuleUnRegisterHookAfter hook is called in PrestaShop core. The hook is triggered after a module unregisters from a hook, passing the module instance and hook name as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleUnRegisterHookAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionModuleUnRegisterHookAfter',\n            [\n                'object' => $module_instance,\n                'hook_name' => $hook_name,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing actionFeatureValueSave Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet shows the execution of the `actionFeatureValueSave` hook using the static `Hook::exec` method within PrestaShop's core. It is called after a feature value is saved, passing the hook name and an array containing the saved `id_feature_value` as context. This allows modules to react to the saving event.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFeatureValueSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec('actionFeatureValueSave', ['id_feature_value' => $this->id])\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring BulkActionColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an instance of `BulkActionColumn`, set its name (typically empty for this type), configure the essential `bulk_field` option to specify which data field identifies the record for the checkbox value (here, 'id_product'), and add the configured column to a `ColumnCollection`. This setup allows adding bulk action checkboxes to a PrestaShop Grid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/bulk-action.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$bulkActionColumn = new BulkActionColumn('bulk_action');\n$bulkActionColumn->setName(''); // it is common to set an empty name for bulk action columns\n$bulkActionColumn->setOptions([\n     'bulk_field' => 'id_product',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($bulkActionColumn);\n```\n\n----------------------------------------\n\nTITLE: Implementing displayCMSPrintButton Hook in PrestaShop Themes\nDESCRIPTION: Hook implementation to display a print button on CMS pages. Used in both Classic and Hummingbird themes to render a print functionality button in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCMSPrintButton.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCMSPrintButton'}\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Supply Order Detail in PrestaShop\nDESCRIPTION: This XML snippet provides a blank schema for the Supply_order_detail entity in PrestaShop. It includes all the fields defined in the resource table, wrapped in CDATA sections for data integrity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/supply_order_details.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supply_order_detail>\n    <id><![CDATA[]]></id>\n    <id_supply_order><![CDATA[]]></id_supply_order>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <reference><![CDATA[]]></reference>\n    <supplier_reference><![CDATA[]]></supplier_reference>\n    <name><![CDATA[]]></name>\n    <ean13><![CDATA[]]></ean13>\n    <isbn><![CDATA[]]></isbn>\n    <upc><![CDATA[]]></upc>\n    <mpn><![CDATA[]]></mpn>\n    <exchange_rate><![CDATA[]]></exchange_rate>\n    <unit_price_te><![CDATA[]]></unit_price_te>\n    <quantity_expected><![CDATA[]]></quantity_expected>\n    <quantity_received><![CDATA[]]></quantity_received>\n    <price_te><![CDATA[]]></price_te>\n    <discount_rate><![CDATA[]]></discount_rate>\n    <discount_value_te><![CDATA[]]></discount_value_te>\n    <price_with_discount_te><![CDATA[]]></price_with_discount_te>\n    <tax_rate><![CDATA[]]></tax_rate>\n    <tax_value><![CDATA[]]></tax_value>\n    <price_ti><![CDATA[]]></price_ti>\n    <tax_value_with_order_discount><![CDATA[]]></tax_value_with_order_discount>\n    <price_with_order_discount_te><![CDATA[]]></price_with_order_discount_te>\n  </supply_order_detail>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Implementation of actionValidateStepComplete Hook in CheckoutDeliveryStep\nDESCRIPTION: This snippet demonstrates how the actionValidateStepComplete hook is called in the CheckoutDeliveryStep class. It passes the delivery step name, request parameters, and completion status as parameters, while targeting the specific module handling the delivery option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateStepComplete.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionValidateStepComplete',\n            [\n                'step_name' => 'delivery',\n                'request_params' => $requestParams,\n                'completed' => &$isComplete,\n            ],\n            Module::getModuleIdByName($currentDeliveryOption['external_module_name'])\n        )\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Titles via Command Pattern - PrestaShop PHP\nDESCRIPTION: This snippet represents the BulkDeleteTitleCommand class for deleting multiple Title entities at once in PrestaShop. It requires an array of title IDs as the constructor parameter, which will be handled by BulkDeleteTitleHandler or any class implementing the BulkDeleteTitleHandlerInterface. The handler logic is expected to process the IDs and delete the respective records. The operation returns void, and this class is intended to be used within the command bus pattern of PrestaShop. There are no outputs beyond the side effect of deletion, and error handling should be managed by the handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/title/_partials/bulk-delete-title-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace PrestaShop\\PrestaShop\\Core\\Domain\\Title\\Command;\n\n/**\n * Deletes states on bulk action\n */\nclass BulkDeleteTitleCommand\n{\n    /**\n     * @var array\n     */\n    private $titleIds;\n\n    /**\n     * @param array $titleIds\n     */\n    public function __construct(array $titleIds)\n    {\n        $this->titleIds = $titleIds;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTitleIds()\n    {\n        return $this->titleIds;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing filterProductSearch Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to execute the 'filterProductSearch' hook in PrestaShop. The hook is used to modify search product results and passes the 'searchVariables' array by reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterProductSearch.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('filterProductSearch', ['searchVariables' => &$searchVariables])\n```\n\n----------------------------------------\n\nTITLE: Identifying the ResendOrderEmailCommand Class in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the `ResendOrderEmailCommand`. This command class encapsulates the data required (order ID, order status ID, order history ID) to trigger the resending of an order email. It is processed by a corresponding handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/resend-order-email-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\ResendOrderEmailCommand`\n```\n\n----------------------------------------\n\nTITLE: Translating Wordings in PHP Files\nDESCRIPTION: Demonstrates how to use the Translator service to translate wordings in PHP files. The trans() method is used with three arguments: the wording to translate, an array of replacements, and the translation domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho $translator->trans('This product is no longer available.', [], 'Shop.Notifications.Error');\n```\n\n----------------------------------------\n\nTITLE: Executing actionCartSave Hook in PrestaShop PHP\nDESCRIPTION: This snippet demonstrates how to invoke the 'actionCartSave' hook using PrestaShop's Hook::exec method in PHP. The code triggers the hook whenever a cart is saved (i.e., when a product is added or the cart content changes), passing the current Cart object as a parameter. It depends on PrestaShop's core classes, particularly the Hook class and the Cart instance; the key array parameter 'cart' provides hook listeners with the cart data for further processing or extension.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCartSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCartSave', ['cart' => $this])\n```\n\n----------------------------------------\n\nTITLE: Running Behat Integration Tests in PrestaShop\nDESCRIPTION: Executes the Behat integration test suite using a Composer command. This command uses a specific configuration for Behat integration tests.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-execute-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer integration-behaviour-tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Caching in Nginx\nDESCRIPTION: This snippet shows how to set up browser caching for static assets in Nginx. It sets an expiration time of 1 month and adds a Cache-Control header for public caching.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/nginx.md#2025-04-22_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~* \\.(?:css|eot|gif|ico|jpe?g|otf|png|ttf|woff2?)$ {\n    expires 1M;\n    add_header Cache-Control \"public\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Query Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the GetCurrencyForEditing query class in PrestaShop core domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Query\\GetCurrencyForEditing\n```\n\n----------------------------------------\n\nTITLE: Restricting PrestaShop Front Controller Access to Logged-In Customers (PHP)\nDESCRIPTION: Shows how to configure a PrestaShop front controller to require users to be logged in. Setting the public property `$auth` to `true` and `$guestAllowed` to `false` within the controller class definition automatically redirects unauthenticated users to the login page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic $auth = true;\npublic $guestAllowed = false;\n\n```\n\n----------------------------------------\n\nTITLE: Complete Example YAML Configuration File for PrestaShop Module CLI Configuration\nDESCRIPTION: A comprehensive example of a `self_config.yml` file showcasing various configuration options available through the PrestaShop Module Self Configurator feature. It includes updating and deleting configuration values, executing SQL scripts, copying local files, downloading files from URLs, and executing a PHP script with parameters. Paths are relative to this configuration file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# This file is an example of data configuration which can be applied to a module\n# Paths are relative to the config file!\n\n# Update data in Configuration table\nconfiguration:\n    update:\n        # Option 1: having a pair key/value\n        PAYPAL_SANDBOX: 1\n        PAYPAL_API_CARD: 0\n        # Option 2: use \"value\" subkey. Will allow to use addtionnal keys later\n        PAYPAL_SANDBOX_2:\n            value: 1\n    delete:\n        - \"PAYPAL_ONBOARDING\"\n\n# Execute sql files\nsql:\n    - \"sql/default-config.sql\"\n\n# Copy files\nfiles:\n    - source: \"../source/file.txt\"\n      dest: \"docs/file.txt\"\n      \n    - source: \"https://www.prestashop.com\"\n      dest: \"webpage.html\"\n\n# Execute php script\nphp:\n    - file: \"ConfigurationScript.php\"\n      params:\n        - myParam1: 1\n        - oneArrayParam:\n            - \"value1\"\n            - \"value2\"\n            - withSpecificKey: \"value3\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDeleteAfter Hook in PHP\nDESCRIPTION: This code shows how the actionAdminDeleteAfter hook is dispatched in the ProductController with parameters. The hook is triggered after an item is deleted in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDeleteAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDeleteAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCustomerOrders Query Class Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetCustomerOrders` query class within the PrestaShop Core Domain structure. This class represents the query used to fetch summarized orders for a given customer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-orders.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerOrders`\n```\n\n----------------------------------------\n\nTITLE: Querying Product Specific Prices in PrestaShop PHP\nDESCRIPTION: Class path definition for retrieving editable specific prices list. The query accepts product ID, optional limit, offset, and filters parameters. Returns a SpecificPriceListForEditing object through its handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-editable-specific-prices-list.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\Query\\GetEditableSpecificPricesList\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\SpecificPrice\\QueryHandler\\GetEditableSpecificPricesListHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\QueryHandler\\GetEditableSpecificPricesListHandlerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\QueryResult\\SpecificPriceListForEditing\n```\n\n----------------------------------------\n\nTITLE: Email Route Configuration Example\nDESCRIPTION: Example showing equivalent route configurations for the email management page with different action notations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nadmin_emails:\n    path: /emails\n    methods: [GET]\n    defaults:\n        _controller: 'PrestaShopBundle:Admin\\Configure\\AdvancedParameters\\Email:index'\n        _legacy_controller: AdminEmails\n        _legacy_link:\n            - AdminEmails\n            - AdminEmails:index\n            - AdminEmails:list\n```\n\n----------------------------------------\n\nTITLE: Installing PrestaShop Dev Tools and Initializing PHPStan Configuration - Bash\nDESCRIPTION: Sets up PrestaShop-specific PHPStan environment by installing 'prestashop/php-dev-tools' and initializing its configuration. This command sequence first installs development dependencies, then uses the provided initialization script to create necessary config files (typically under tests/phpstan/). Requires Composer and PHP to be available.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\ncomposer require --dev prestashop/php-dev-tools\n\n# Set up configuration files\nphp vendor/bin/prestashop-coding-standards phpstan:init\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderEdited Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionOrderEdited hook is called in the core PrestaShop code. It uses the Hook::exec method to trigger the hook with the order object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderEdited.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderEdited', ['order' => $order])\n```\n\n----------------------------------------\n\nTITLE: Executing Pre-Action Hooks with Hook::exec in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how PrestaShop dynamically executes a hook prior to performing a controller action. It constructs the hook name using the current controller's class and action name, then invokes Hook::exec with an associative array containing the controller instance. Dependencies include the PrestaShop framework and the Hook class, with the expectation that '$action' and '$this' refer to the current action and controller. Modules listening to this hook can perform custom logic before a controller action is processed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<ClassName><Action>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . get_class($this) . ucfirst($this->action) . 'Before', ['controller' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Hook Generation in PrestaShop PDF Templates\nDESCRIPTION: Code from HTMLTemplate.php that dynamically generates the hook name based on the template class name. It assigns the hook execution result to the HOOK_DISPLAY_PDF Smarty variable, providing access to the object being rendered and a Smarty instance that doesn't escape HTML.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPDF<Template>.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$template = ucfirst(str_replace('HTMLTemplate', '', get_class($this)));\n$hook_name = 'displayPDF' . $template;\n\n$this->smarty->assign([\n    'HOOK_DISPLAY_PDF' => Hook::exec(\n        $hook_name,\n        [\n            'object' => $object,\n            // The smarty instance is a clone that does NOT escape HTML\n            'smarty' => $this->smarty,\n        ]\n    ),\n]);\n```\n\n----------------------------------------\n\nTITLE: Querying Required Customer Fields in PrestaShop PHP\nDESCRIPTION: Query class implementation that retrieves the list of required fields for customer registration. The query has no constructor parameters and is handled by GetRequiredFieldsForCustomerHandler, returning an array of strings representing the required field names.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-required-fields-for-customer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetRequiredFieldsForCustomer\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\QueryHandler\\GetRequiredFieldsForCustomerHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler\\GetRequiredFieldsForCustomerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Customer Bulk Delete Command Structure\nDESCRIPTION: Command class for deleting multiple customer records. Takes an array of customer IDs and deletion method as constructor parameters. Returns void and is handled by BulkDeleteCustomerHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/bulk-delete-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\BulkDeleteCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Basic HelperOptions in PrestaShop\nDESCRIPTION: Example of the simplified HTML code that is generated by the basic HelperOptions declaration. It shows the form structure with fieldset, radio buttons, and text input that corresponds to the PHP configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"_form\" name=\"_form\">\n  <fieldset>\n    <legend>Parameters</legend>\n \n    <div>\n      <labe>Choose one</label>\n      <div>\n        <label><img alt=\"Yes\" src=\"../img/admin/enabled.gif\" title=\"Yes\" /></label>\n        <input type=\"radio\" value=\"1\" />\n        <label>Yes</label>\n        <label><img alt=\"No\" src=\"../img/admin/disabled.gif\" title=\"No\" /></label>\n        <input type=\"radio\" value=\"0\" checked=\"checked\" />\n        <label>No</label>\n        <p>Choose between Yes and No.</p>\n      </div>\n    </div>\n \n    <div class=\"clear\"></div>\n \n    <div>\n      <label>Add some text</label>\n      <div>\n        <input type=\"text\" value=\"\" />\n        <p>This is where you can add some text</p>\n      </div>\n    </div>\n  </fieldset>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using GetCartForOrderCreation Query in PrestaShop Core Domain\nDESCRIPTION: Query class for retrieving cart information needed for order creation. It requires a cart ID as constructor parameter and returns a CartForOrderCreation object with the necessary cart data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-order-creation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Query\\GetCartForOrderCreation\n```\n\n----------------------------------------\n\nTITLE: Complete Grid Extension Setup in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the complete setup for adding multiple grid extensions to the tax page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Grid from '@components/grid/grid';\nimport SortingExtension from '@components/grid/extension/sorting-extension';\nimport FiltersResetExtension from '@components/grid/extension/filters-reset-extension';\nimport ReloadListActionExtension from '@components/grid/extension/reload-list-extension';\nimport ColumnTogglingExtension from '@components/grid/extension/column-toggling-extension';\nimport SubmitRowActionExtension from '@components/grid/extension/action/row/submit-row-action-extension';\nimport SubmitBulkExtension from '@components/grid/extension/submit-bulk-action-extension';\nimport BulkActionCheckboxExtension from '@components/grid/extension/bulk-action-checkbox-extension';\nimport ExportToSqlManagerExtension from '@components/grid/extension/export-to-sql-manager-extension';\n\nconst {$} = window;\n\n$(() => {\n  const taxGrid = new Grid('tax');\n\n  taxGrid.addExtension(new ExportToSqlManagerExtension());\n  taxGrid.addExtension(new ReloadListActionExtension());\n  taxGrid.addExtension(new SortingExtension());\n  taxGrid.addExtension(new FiltersResetExtension());\n  taxGrid.addExtension(new ColumnTogglingExtension());\n  taxGrid.addExtension(new SubmitRowActionExtension());\n  taxGrid.addExtension(new SubmitBulkExtension());\n  taxGrid.addExtension(new BulkActionCheckboxExtension());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Category in PrestaShop using XML\nDESCRIPTION: This snippet demonstrates how to create a Category by sending a POST request to the PrestaShop Webservices. It includes fields for name, link rewrite, description, active status, and parent category ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<category>\n    <name>\n        <language id=\"1\"><![CDATA[Category demo]]></language>\n    </name>\n    <link_rewrite>\n        <language id=\"1\"><![CDATA[category-demo]]></language>\n    </link_rewrite>\n    <description>\n        <language id=\"1\"><![CDATA[my awesome category description]]></language>\n    </description>\n    <active>1</active>\n    <id_parent>1</id_parent>\n</category>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Adding a NumberType with Unit Label in Symfony Form - PHP\nDESCRIPTION: This PHP snippet demonstrates extending a Symfony form by adding a NumberType field enriched with a 'unit' parameter, using the UnitTypeExtension. The code is intended for Symfony form classes, allowing developers to create inputs that display units (like 'kg') next to numeric fields. It relies on Symfony's Form component and requires proper installation of the related form extension; 'FormBuilderInterface' must be imported as a dependency. Key parameters include 'unit' (unit label to display), 'required' (input requirement), and 'empty_data' (default value when empty). The input expects numeric values and will display 'kg' as the appended unit in the rendered form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/unit-type-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType;\n\nclass SomeType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add('weight', NumberType::class, [\n                'unit' => 'kg',\n                'required' => false,\n                'empty_data' => '0',\n            ])\n        ;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Specific Module Widget with Parameters in Smarty\nDESCRIPTION: Example of calling a widget in a Smarty template with a specific module name and passing a custom parameter that will be available in the configuration array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_6\n\nLANGUAGE: smarty\nCODE:\n```\n{widget name='mymodule' my_param_key='my_param_value'}\n```\n\n----------------------------------------\n\nTITLE: Security Annotation Example for PrestaShop Admin Controller\nDESCRIPTION: Demonstrates how to implement security checks using AdminSecurity annotation in a controller action. Shows permission validation for CRUD operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\n\nclass SomeController extends FrameworkBundleAdminController\n{\n    /**\n     * @AdminSecurity(\n     *     \"is_granted(['read', 'update', 'create', 'delete'], request.get('_legacy_controller'))\",\n     *     message=\"You do not have permission to update this.\",\n     *     redirectRoute=\"some_route_name\"\n     * )\n     *\n     */\n    public function fooAction(Request $request) { \n        // action code\n    }\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Strings for CSS Class Names with Smarty\nDESCRIPTION: Demonstrates the `classname` Smarty modifier. It takes a string, converts it to lowercase, transliterates non-ASCII characters, replaces non-alphanumerical characters with single dashes, and collapses multiple consecutive dashes, making the string suitable for use as a CSS class name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_11\n\nLANGUAGE: smarty\nCODE:\n```\n  {assign var=attr value='Hérè-Is_a-Clàssnåme--@#$$ˆ*(&-----'}\n  {$attr|classname}\n```\n\n----------------------------------------\n\nTITLE: Implementation of actionSearch Hook in PrestaShop Core\nDESCRIPTION: Shows how the actionSearch hook is called in the PrestaShop core code. It passes the search query string and result count, with a note about 'expr' being deprecated since version 1.7.x.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSearch.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionSearch', [\n            'searched_query' => $queryString,\n            'total' => $count,\n\n            // deprecated since 1.7.x\n            'expr' => $queryString,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Connecting to Read-Only Slave Database\nDESCRIPTION: Demonstrates how to connect to a read-only slave database server for SELECT queries when MySQL replication is configured.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db = \\Db::getInstance(_PS_USE_SQL_SLAVE_);\n```\n\n----------------------------------------\n\nTITLE: Exporting a PrestaShop Theme via Command Line\nDESCRIPTION: Command to export the current theme using the PrestaShop console. This exports the theme directory with all files, dependencies specified in theme.yml, and theme translations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/distribution/exporting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:theme:export THEME_DIRECTORY_NAME\n```\n\n----------------------------------------\n\nTITLE: Regenerating Composer Autoload Files\nDESCRIPTION: Command to regenerate Composer's autoload files after updating the autoload configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Executing Terms and Conditions Hook in PrestaShop\nDESCRIPTION: Hook execution for terms and conditions in PrestaShop's front office. The hook is executed with no parameters and expects an array return value. It's called from the core system through the Hook::exec method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/termsAndConditions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('termsAndConditions', [], null, true)\n```\n\n----------------------------------------\n\nTITLE: Implementing hookActionAfterCreateSupplierFormHandler in PHP for PrestaShop\nDESCRIPTION: This hook method is called after creating a supplier form. It triggers the image upload process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @param array $params\n */\npublic function hookActionAfterCreateSupplierFormHandler(array $params)\n{\n    $this->uploadImage($params);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Products with PrestaShop Domain Command - PHP\nDESCRIPTION: This PHP snippet illustrates the interface and constructor details for the BulkDeleteProductCommand used in PrestaShop to delete multiple products at once. It requires an array of product IDs and a ShopConstraint object, ensuring operations can be scoped to a specific shop context. The command is handled via the BulkDeleteProductHandler implementing its associated interface, and expects no return value upon execution. Ensure PrestaShop core components and domain classes are included in your environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/bulk-delete-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\BulkDeleteProductCommand\n// Deletes multiple products\n// Constructor parameters:\n//   - array $productIds\n//   - PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\BulkDeleteProductHandler\n//   Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\BulkDeleteProductHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Duplication Hook in PrestaShop PHP\nDESCRIPTION: Shows the dispatch call for the actionAdminProductsControllerDuplicateBefore hook with parameters. This hook is triggered in the ProductController before a product is duplicated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDuplicateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Category URL with getCategoryLink()\nDESCRIPTION: Shows how to get a category URL with proper HTTP scheme and URL rewriting using the Link component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/link.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// get your category instance (from ObjectModel in this example)\n$category = new Category(123);\n\n// get your category URL\n$link = $context->link->getCategoryLink($category);\n```\n\n----------------------------------------\n\nTITLE: Initializing ChoiceTree JavaScript Component\nDESCRIPTION: JavaScript implementation for enabling and controlling the ChoiceTree component. Demonstrates initialization, enabling auto-check for children, and methods for enabling/disabling all inputs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-choice-tree.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChoiceTree from 'admin-dev/themes/new-theme/js/components/form/choice-tree';\n\n// initiate the component by providing your tree selector\nnew ChoiceTree('.js-tree-selector-example');\n\n// you can enable auto checking children elements\nChoiceTree.enableAutoCheckChildren();\n\n// you can also enable or disable all inputs\nChoiceTree.enableAllInputs(); //enable\nChoiceTree.disableAllInputs(); //disable\n```\n\n----------------------------------------\n\nTITLE: Creating New Configuration via XML API\nDESCRIPTION: XML request to create a new configuration entry in PrestaShop, setting PS_MULTISHOP_FEATURE_ACTIVE to 1 (true). This is used when the configuration does not yet exist in the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <configuration>\n        <value>1</value>\n        <name>PS_MULTISHOP_FEATURE_ACTIVE</name>\n    </configuration>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Translation File Structure for Module Distribution – PrestaShop\nDESCRIPTION: Represents the recommended filesystem layout for storing and distributing exported translation dictionaries in PrestaShop modules. Each language gets its own subfolder (e.g., fr-FR, en-US) containing .xlf files named by domain and locale. Ensures PrestaShop can detect and install translations during module installation; applies to PrestaShop 1.7.8 and above.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_10\n\nLANGUAGE: \nCODE:\n```\n.\n└── mymodule/\n    └── translations/\n        ├── fr-FR/\n        │   ├── ModulesMymoduleFoo.fr-FR.xlf\n        │   └── ModulesMymoduleBar.fr-FR.xlf\n        └── en-US/\n            ├── ModulesMymoduleFoo.en-US.xlf\n            └── ModulesMymoduleBar.en-US.xlf\n```\n\n----------------------------------------\n\nTITLE: Defining the GetOrderForViewing Query Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the query responsible for fetching order details for the Back Office view in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-for-viewing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Query\\GetOrderForViewing\n```\n\n----------------------------------------\n\nTITLE: Dispatching the action<DefinitionId>GridDefinitionModifier Hook in PHP\nDESCRIPTION: This PHP snippet demonstrates the core dispatch mechanism for the `action<DefinitionId>GridDefinitionModifier` hook within PrestaShop's `AbstractGridDefinitionFactory`. It uses the `hookDispatcher` service to trigger the hook, dynamically constructing the hook name using the grid definition's ID (e.g., `actionProductGridDefinitionModifier`). The grid definition object (`$definition`) is passed as data to any modules listening to this hook, allowing them to modify the definition before it's finalized.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<DefinitionId>GridDefinitionModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->hookDispatcher->dispatchWithParameters('action' . Container::camelize($definition->getId()) . 'GridDefinitionModifier', [\n    'definition' => $definition,\n]);\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Carrier XML Schema Template\nDESCRIPTION: Blank XML schema template for creating or updating carrier configurations in PrestaShop. Includes all available carrier fields with CDATA sections and multi-language support for delay information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/carriers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <carrier>\n    <id><![CDATA[]]></id>\n    <deleted><![CDATA[]]></deleted>\n    <is_module><![CDATA[]]></is_module>\n    <id_tax_rules_group><![CDATA[]]></id_tax_rules_group>\n    <id_reference><![CDATA[]]></id_reference>\n    <name><![CDATA[]]></name>\n    <active><![CDATA[]]></active>\n    <is_free><![CDATA[]]></is_free>\n    <url><![CDATA[]]></url>\n    <shipping_handling><![CDATA[]]></shipping_handling>\n    <shipping_external><![CDATA[]]></shipping_external>\n    <range_behavior><![CDATA[]]></range_behavior>\n    <shipping_method><![CDATA[]]></shipping_method>\n    <max_width><![CDATA[]]></max_width>\n    <max_height><![CDATA[]]></max_height>\n    <max_depth><![CDATA[]]></max_depth>\n    <max_weight><![CDATA[]]></max_weight>\n    <grade><![CDATA[]]></grade>\n    <external_module_name><![CDATA[]]></external_module_name>\n    <need_range><![CDATA[]]></need_range>\n    <position><![CDATA[]]></position>\n    <delay>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </delay>\n  </carrier>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Behat Configuration in YAML\nDESCRIPTION: Configuration file showing how to map feature files with their corresponding context classes and define test suites\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n    suites:\n        customer:\n            paths:\n                - %paths.base%/Features/Scenario/Customer\n            contexts:\n                - Tests\\Integration\\Behaviour\\Features\\Context\\CommonFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\CustomerManagerFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\Domain\\CustomerFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\CustomerFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\Configuration\\CommonConfigurationFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Transform\\StringToBoolTransformContext\n        category:\n            paths:\n                - %paths.base%/Features/Scenario/Category\n            contexts:\n                - Tests\\Integration\\Behaviour\\Features\\Context\\CommonFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\CategoryFeatureContext\n                - Tests\\Integration\\Behaviour\\Features\\Context\\Domain\\CategoryFeatureContext\n```\n\n----------------------------------------\n\nTITLE: Additional MySQL Performance Parameters\nDESCRIPTION: Supplementary MySQL configuration options to enhance performance by disabling monitoring features and optimizing memory tables. These settings reduce overhead and improve performance for specific query types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nperformance_schema = OFF\nmax_heap_table_size = 32M\ntmp_table_size = 32M\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Data for Editing with PrestaShop Domain Query - PHP\nDESCRIPTION: This documentation describes the GetFeatureForEditing query class used to retrieve feature data for editing in PrestaShop. The query is constructed with an integer feature ID, and is processed by the GetFeatureForEditingHandler, which fulfills the GetFeatureForEditingHandlerInterface. The result is returned as an EditableFeature object, containing all necessary details for editing. Typical use involves passing a valid feature ID to the query, and depends on the core PrestaShop domain and query handler interfaces.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/get-feature-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\Query\\GetFeatureForEditing\n// Retrieves feature data for editing\n\n// Constructor parameters:\n//   int $featureId\n\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Feature\\QueryHandler\\GetFeatureForEditingHandler\n//     Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Feature\\QueryHandler\\GetFeatureForEditingHandlerInterface\n\n// Return type:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Feature\\QueryResult\\EditableFeature\n```\n\n----------------------------------------\n\nTITLE: Defining ForwardCustomerThreadCommand Class in PHP\nDESCRIPTION: This snippet defines the ForwardCustomerThreadCommand class in the PrestaShop Core Domain CustomerService namespace. The command is used to forward customer threads.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/forward-customer-thread-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Command\\ForwardCustomerThreadCommand\n```\n\n----------------------------------------\n\nTITLE: Toggling Tax Status with ToggleTaxStatusCommand - PHP\nDESCRIPTION: This code snippet defines the ToggleTaxStatusCommand, used to enable or disable a tax by its ID in PrestaShop. It requires two parameters: an integer tax ID and a boolean representing the expected status (enabled or disabled). It is handled by the ToggleTaxStatusHandler implementing the ToggleTaxStatusHandlerInterface, follows the command-handler pattern, and returns void. Designed for use in PrestaShop's domain logic, with no return aside from side effects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/toggle-tax-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tax\\Command\\ToggleTaxStatusCommand\n// Toggles tax status\n// Constructor parameters:\n//   int $taxId\n//   bool $expectedStatus\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Tax\\CommandHandler\\ToggleTaxStatusHandler\n//   Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\CommandHandler\\ToggleTaxStatusHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderSlipAdd Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionOrderSlipAdd hook is called in the original file. It uses the Hook::exec method to execute the hook with the order, product list, and quantity list as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderSlipAdd.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderSlipAdd', [\n                'order' => $order,\n                'productList' => $orderRefundSummary->getProductRefunds(),\n                'qtyList' => $fullQuantityList,\n            ], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Calling DisplayDashboardToolbarTopMenu Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the DisplayDashboardToolbarTopMenu hook in a PrestaShop template file. The hook is used to launch modules when a page with a dashboard is displayed, allowing for the addition of new elements in the back office top menu.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayDashboardToolbarTopMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayDashboardToolbarTopMenu'}\n```\n\n----------------------------------------\n\nTITLE: Updating Stock Available in PrestaShop using XML\nDESCRIPTION: This snippet demonstrates how to update the Stock Available for a product by sending a PATCH request to the PrestaShop Webservices. It includes the stock available ID and the new quantity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <stock_available>\n        <id><![CDATA[67]]></id>\n        <quantity><![CDATA[10]]></quantity>\n    </stock_available>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Symfony Router in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet shows how to use Symfony's router service within a PrestaShop module to generate a URL for viewing a customer in the back office. It assumes access to a Router instance and a valid Order object, extracting the customer ID for route parameterization. The resulting URL string can be used as a target for buttons or links in the admin interface. Dependency on the Symfony FrameworkBundle is required.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/additional-action-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$viewCustomerUrl = $router->generate('admin_customers_view', ['customerId'=> (int)$order->id_customer]);\n```\n\n----------------------------------------\n\nTITLE: Creating Search Criteria for a Grid in PHP\nDESCRIPTION: Illustrates how to manually construct a SearchCriteria object in PrestaShop, specifying filters, sorting, offset, and limit. This code demonstrates managing grid data without using default components.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria;\n\n$filters = [\n    'id_product' => 4,\n    'name' => 'mug',\n];\n\n$searchCriteria = new SearchCriteria(\n    $filters,\n    'id_product',\n    'asc',\n    0,\n    10\n);\n\n$searchCriteria->getFilters();  // $filters array\n$searchCriteria->getOrderBy();  // \"id_product\"\n$searchCriteria->getOrderWay(); // \"asc\"\n$searchCriteria->getOffset();   // 0\n$searchCriteria->getLimit();    // 10\n\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationPricesCommand Class in PHP\nDESCRIPTION: This snippet defines the UpdateCombinationPricesCommand class in the PrestaShop core domain. It takes a combinationId as a constructor parameter and is handled by the UpdateCombinationPricesHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-prices-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationPricesCommand\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Data Existence in PrestaShop\nDESCRIPTION: Method to check if configuration data exists for a given key. Takes a key and optional shop constraint. Returns true if the data exists, false otherwise.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration->has(string $key, ShopConstraint $shopConstraint = null): bool\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Backup Commands\nDESCRIPTION: Commands for backing up PrestaShop MySQL database using mysqldump utility. Includes basic and advanced versions with additional parameters for complete backup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/backup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump yourdbname > dump.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump --host=<IP_or_hostname> --user=<user> --password --single-transaction --create-options --extended-insert --complete-insert yourdbname > dump.sql\n```\n\n----------------------------------------\n\nTITLE: Defining SetProductTagsCommand Class in PHP\nDESCRIPTION: This snippet defines the SetProductTagsCommand class used to update product tags in specified languages. It requires a product ID and an array of localized tags as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-tags-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\SetProductTagsCommand\n```\n\n----------------------------------------\n\nTITLE: Identifying the BulkDeleteSearchEngineHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and class name for the `BulkDeleteSearchEngineHandler`. This class resides in the Adapter layer and is responsible for processing the `BulkDeleteSearchEngineCommand` and executing the logic for bulk deleting search engines.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/bulk-delete-search-engine-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\SearchEngine\\CommandHandler\\BulkDeleteSearchEngineHandler`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Data in PrestaShop\nDESCRIPTION: Method to retrieve configuration data for a given key. Returns the data if it exists, or a default value (null by default) if not found.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration->get(string $key, mixed $default = null): mixed\n```\n\n----------------------------------------\n\nTITLE: Defining SetSuppliersCommand Class in PHP for PrestaShop Product Supplier Management\nDESCRIPTION: This code snippet defines the SetSuppliersCommand class used to assign suppliers to a product in PrestaShop. It is part of the Core Domain for Product Supplier management. The command works for products with or without combinations and only defines associations, not content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-suppliers-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\Command\\SetSuppliersCommand\n```\n\n----------------------------------------\n\nTITLE: Referencing the UpdateProductDetailsHandler for Command Handling - PHP\nDESCRIPTION: This snippet shows the fully-qualified handler class responsible for processing UpdateProductDetailsCommand within PrestaShop. The handler must implement the UpdateProductDetailsHandlerInterface, ensuring consistent method signatures and behavior. Integration requires the command to be passed to this handler by the command bus; there are no explicit return values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-details-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductDetailsHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing the actionFrontControllerInitBefore Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how the `actionFrontControllerInitBefore` hook is executed using `Hook::exec()`. It passes the current front controller instance (`$this`) as a parameter, allowing hooked modules to access controller properties and methods before its full initialization. This occurs within the `classes/controller/FrontController.php` file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerInitBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionFrontControllerInitBefore',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Mode Type to Pagination for CSV Export in PHP\nDESCRIPTION: Shows how to set the mode type to MODE_PAGINATION, the default mode where offset represents page numbers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n->setModeType(CsvResponse::MODE_PAGINATION)\n```\n\n----------------------------------------\n\nTITLE: Generating Page URLs with getPageLink()\nDESCRIPTION: Shows how to generate URLs for various shop pages with parameters using the Link component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/link.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// get the cart link\n$link = $context->link->getPageLink('cart');\n\n// get the cart link to delete the product with id=1 and product attribute=101;\n$idProduct = 1;\n$idProductAttribute = 101;\n\n$params = [\n    'delete' => 1,\n    'id_product' => $idProduct,\n    'id_product_attribute' => $idProductAttribute,\n];\n\n$link = $context->link->getPageLink('cart', true, null, $params,false);\n```\n\n----------------------------------------\n\nTITLE: Enabling TranslatableInput in JavaScript\nDESCRIPTION: This snippet shows how to enable the TranslatableInput component in JavaScript to toggle between different locales in a multi-language form. It imports the necessary component from PrestaShop's JavaScript library and initializes it to activate language switching functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/translatable.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport TranslatableInput from \"admin-dev/themes/new-theme/js/components/translatable-input\";\n\n// enable togging of different locales\nnew TranslatableInput();\n```\n\n----------------------------------------\n\nTITLE: Adding PHPMyAdmin Service to Docker Compose (YAML)\nDESCRIPTION: Defines a `phpmyadmin` service configuration block to be added to an existing `docker-compose.yml` file. It uses the official `phpmyadmin/phpmyadmin` image, links to the `mysql` service (`some-mysql`), sets necessary environment variables for database connection (host, port, user, password, arbitrary server access), configures automatic restart, maps host port 8081 to container port 80, and connects it to the `prestashop_network`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n...\n    phpmyadmin:\n      image: phpmyadmin/phpmyadmin\n      container_name: phpmyadmin\n      links:\n        - mysql\n      environment:\n        PMA_HOST: some-mysql\n        PMA_PORT: 3306\n        PMA_ARBITRARY: 1\n        PMA_USER: root\n        PMA_PASSWORD: admin\n      restart: unless-stopped\n      ports:\n        - 8081:80\n      networks:\n        - prestashop_network\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Search Query Class Definition\nDESCRIPTION: Core query class for searching products by search phrase. Accepts search phrase, results limit, ISO code and optional order ID as constructor parameters. Handled by SearchProductsHandler and returns an array of FoundProduct objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-products.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Query\\SearchProducts\n```\n\n----------------------------------------\n\nTITLE: Implementing Element as an ElementInterface - PHP\nDESCRIPTION: Provides a concrete Element class that implements ElementInterface, suitable for being tagged and autowired as a service in the PrestaShop module configuration. This enables the use of _instanceof section in service YAMLs to apply tags automatically based on the implemented interface. Depends upon the ElementInterface being available in the namespace.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace TestModule\\InstanceofConditionals\\Collection;\n\nclass Element implements ElementInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAuthentication Hook in CustomerLoginForm\nDESCRIPTION: This code snippet shows how the actionAuthentication hook is executed in the core PrestaShop codebase after a customer successfully logs in. The hook passes the customer object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAuthentication.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAuthentication', ['customer' => $this->context->customer])\n```\n\n----------------------------------------\n\nTITLE: Defining the PrestaShop DuplicateProductCommand in PHP\nDESCRIPTION: Specifies the `DuplicateProductCommand` class within the PrestaShop Core Domain, which encapsulates the data needed to duplicate a product. The command takes an integer product ID and a `ShopConstraint` object as constructor parameters. It is processed by the `DuplicateProductHandler`, which implements `DuplicateProductHandlerInterface`, and returns a `ProductId` value object upon successful duplication.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/duplicate-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\DuplicateProductCommand`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Constructor parameters:\n`$int $productId`\n`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Handler class:\n`PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\DuplicateProductHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Handler implements:\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\DuplicateProductHandlerInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\n// Return type:\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\ValueObject\\ProductId`\n```\n\n----------------------------------------\n\nTITLE: PHP Class Deprecation Example\nDESCRIPTION: Example demonstrating how to properly deprecate a class and its methods following Symfony conventions\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/coding-standards/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace PrestaShop\\Awesome\\Path;\n\n@trigger_error(\n    sprintf(\n        '%s is deprecated since version 8.0 and will be removed in the next major version.',\n        MyClass::class\n    ),\n    E_USER_DEPRECATED\n);\n\n/**\n * @deprecated Since 8.0 and will be removed in the next major.\n */\nclass MyClass\n{\n    /**\n     * @deprecated Since 8.0, use AnotherClass::someNewMethod() instead.\n     */\n    public function someOldMethod()\n    {\n        @trigger_error(\n            sprintf(\n                '%s is deprecated since version 8.0. Use %s instead.',\n                __METHOD__,\n                AnotherClass::class . '::someNewMethod()'\n            ),\n            E_USER_DEPRECATED\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ChangePasswordControl in JavaScript\nDESCRIPTION: JavaScript implementation for enabling the password change functionality. Configures the component with necessary selectors for form elements including password generation, validation, and strength indicators.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/change-password.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChangePasswordControl from 'admin-dev/themes/new-theme/js/components/form/change-password-control';\n\n// This component requires many css selectors for targeting.\n// These css attributes names depends on you, but it should be placed on correct elements to work properly.\nnew ChangePasswordControl(\n    '.js-change-password-block', // parent element in which other 'ChangePasswordType' inputs are rendered.\n    '.js-change-password', // button which shows the whole form on click and is hidden afterwards.\n    '.js-change-password-cancel', // button which cancels the form and shows 'change-password' button again.\n    '.js-generate-password-button', // button which generates new password on click.\n    '.js-old-password', // input of old password.\n    '.js-new-password', // input of new password.\n    '.js-password-confirm', // new password confirmation input.\n    '.js-generated_password', // input in which the new generated password should be displayed.\n    '.js-password-strength' // element in which password strength feedback should be displayed.\n);\n```\n\n----------------------------------------\n\nTITLE: Executing GDPR Customer Deletion Hook with PrestaShop PHP\nDESCRIPTION: This PHP code snippet triggers the PrestaShop hook named 'actionDeleteGDPRCustomer' via the static method Hook::exec. It passes the $customer object (or array) and the module ID ($module['id_module']) as arguments, allowing any module or component listening to this hook to process GDPR customer deletion logic. The snippet requires PrestaShop's core environment and typically runs within a module service class. Inputs include the target customer data and contextually relevant module identifier; outputs and effects depend on attached hook listeners and may include customer data erasure, logging, or communication to third parties.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDeleteGDPRCustomer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionDeleteGDPRCustomer', $customer, $module['id_module'])\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductSupplierOptions Query Class in PHP\nDESCRIPTION: This code snippet defines the GetProductSupplierOptions query class in the PrestaShop Core Domain. It is used to retrieve product supplier options and requires a product ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-supplier-options.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\Query\\GetProductSupplierOptions\n```\n\n----------------------------------------\n\nTITLE: Legacy Controller Example URL\nDESCRIPTION: Example URL showing how help content is fetched for the Products admin page in French for PrestaShop version 1.7.1.2 using the legacy API endpoint.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/back-office-help-sidebar.md#2025-04-22_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nhttps://help.prestashop.local/api/?request=getHelp%3DAdminProducts%26version%3D1.7.1.2%26language%3Dfr\n```\n\n----------------------------------------\n\nTITLE: Setting Module Author in PHP\nDESCRIPTION: Sets the author attribute for a PrestaShop module. This string is displayed as-is in the PrestaShop modules list.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->author = \"Some Company\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Multilingual Fields in PHP\nDESCRIPTION: Shows how to access and update multilingual fields using array syntax and language-specific loading.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$cms->meta_title[1] = \"My awesome title\";\n$cms->meta_title[2] = \"Mon fabuleux titre\";\n$cms->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$cms = new Cms($cms_id, $lang_id);\n$cms->meta_title = \"Mon fabuleux titre\";\n$cms->save();\n```\n\n----------------------------------------\n\nTITLE: Basic HelperList Declaration in PHP\nDESCRIPTION: Shows a basic implementation of HelperList, including setting up fields, actions, and other essential properties.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprivate function initList()\n{\n    $this->fields_list = array(\n        'id_category' => array(\n            'title' => $this->l('Id'),\n            'width' => 140,\n            'type' => 'text',\n        ),\n        'name' => array(\n            'title' => $this->l('Name'),\n            'width' => 140,\n            'type' => 'text',\n        ),\n    );\n    $helper = new HelperList();\n     \n    $helper->shopLinkType = '';\n     \n    $helper->simple_header = true;\n     \n    // Actions to be displayed in the \"Actions\" column\n    $helper->actions = array('edit', 'delete', 'view');\n     \n    $helper->identifier = 'id_category';\n    $helper->show_toolbar = true;\n    $helper->title = 'HelperList';\n    $helper->table = $this->name.'_categories';\n     \n    $helper->token = Tools::getAdminTokenLite('AdminModules');\n    $helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;\n    return $helper;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Debug Status in PrestaShop CLI\nDESCRIPTION: Command to check the current debug mode status in PrestaShop without modifying it.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-debug.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console prestashop:debug\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP Environment\nDESCRIPTION: This PHP snippet demonstrates the invocation of a PrestaShop hook named 'actionGetProductPropertiesAfterUnitPrice'. It executes the hook after product properties are defined. Key parameters include language ID, product reference, and context. This snippet has no external dependencies and operates within the PrestaShop environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetProductPropertiesAfterUnitPrice.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionGetProductPropertiesAfterUnitPrice', [\n            'id_lang' => $id_lang,\n            'product' => &$row,\n            'context' => $context,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAdminOrder Hook in Twig Template\nDESCRIPTION: Demonstrates how the hook is called in the PrestaShop core template. The hook receives the order ID from the orderForViewing object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrder.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrder', {'id_order': orderForViewing.id}) }}\n```\n\n----------------------------------------\n\nTITLE: Payment Options Parameters Structure in PHP\nDESCRIPTION: Defines the parameter structure for the actionPresentPaymentOptions hook, which receives a reference to the paymentOptions array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentPaymentOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    [\n        'paymentOptions' => (array) &$paymentOptions,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Executing Product Search Hook in PrestaShop\nDESCRIPTION: Hook execution code that runs before ProductSearchProviderInterface::RunQuery(). It allows modification of SQL queries before they are executed in the product search system. Takes a query parameter containing the search query object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductSearchProviderRunQueryBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductSearchProviderRunQueryBefore', [\n            'query' => $query,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows Count\nDESCRIPTION: Demonstrates how to get the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$db->Affected_Rows();\n```\n\n----------------------------------------\n\nTITLE: Calling DisplayFooterProduct Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayFooterProduct hook in a PrestaShop theme template. It passes the product and category objects as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFooterProduct.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayFooterProduct' product=$product category=$category}\n```\n\n----------------------------------------\n\nTITLE: Resetting PrestaShop Theme Layouts Command Definition in PHP\nDESCRIPTION: Defines the ResetThemeLayoutsCommand class to reset theme page layouts to default values in PrestaShop. It requires a ThemeName value object as a parameter to specify which theme's layouts need resetting. The operation is executed by ResetThemeLayoutsHandler implementing the appropriate handler interface. The command returns no value (void).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/theme/_partials/reset-theme-layouts-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Theme\\\\Command\\\\ResetThemeLayoutsCommand\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionGetAdminOrderButtons Hook in PrestaShop - PHP\nDESCRIPTION: This PHP code demonstrates how PrestaShop dispatches the 'actionGetAdminOrderButtons' hook within the OrderController. It provides the controller instance, current order ID, and the pre-constructed actions bar buttons collection. Dependencies include the PrestaShop core hook dispatcher and the relevant objects passed in the array. The dispatch allows modules to modify or add buttons to the admin order action bar, and requires all keys and object instances to be valid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetAdminOrderButtons.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\\n                'actionGetAdminOrderButtons',\\n                [\\n                    'controller' => $this,\\n                    'id_order' => $orderId,\\n                    'actions_bar_buttons_collection' => $back officeOrderButtons,\\n                ]\\n            )\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Field Structure in PHP\nDESCRIPTION: Provides an example PHP array structure representing a form field's definition. This array is intended to be passed to the `{form_field}` Smarty function. It includes properties like name, type, required status, label, value, available options, and errors.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $field = [\n    'name' => 'user_email',\n    'type' => 'email',\n    'required' => 1,\n    'label' => 'Email',\n    'value' => null,\n    'availableValues' => [],\n    'errors' => [],\n  ];\n```\n\n----------------------------------------\n\nTITLE: Updating Module Permissions via Command Class - PrestaShop PHP\nDESCRIPTION: This snippet provides the class signature for the UpdateModulePermissionsCommand used in PrestaShop's domain-driven architecture to update module permissions of a specific employee profile. The command requires four parameters: integer profile ID, integer module ID, string permission, and boolean isActive to specify the permission state. It is handled by the UpdateModulePermissionsHandler which implements the respective handler interface, and its execution does not return any value (void). Prerequisites include the PrestaShop Core Domain and Adapter namespaces and adherence to the Command-Handler pattern.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/profile/_partials/update-module-permissions-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Profile\\Permission\\Command\\UpdateModulePermissionsCommand\n```\n\n----------------------------------------\n\nTITLE: Invoking displayAdminOptions Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to call the displayAdminOptions hook in a PrestaShop template. It's typically used in the back office to allow modules to add content to the admin options page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminOptions'}\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Rendering in PDF Invoice Template - PrestaShop - Smarty\nDESCRIPTION: This snippet shows a Smarty template modification to display a birthday message in the invoice PDF if the `is_birthday` property is set on the order invoice object. It leverages a language helper function to provide localized output. This code assumes a preceding PHP hook has correctly set `is_birthday` and should be included in `themes/your-theme/pdf/invoice.note-tab.tpl`. No external dependencies are needed beyond the PrestaShop and Smarty environments.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_2\n\nLANGUAGE: Smarty\nCODE:\n```\n{* ... keep the content ... *}\n{if $order_invoice->is_birthday}\n    <tr>\n        <td colspan=\"12\">\n            {l s='Happy Birthday !' d='Modules.YourModule.Pdf' pdf='true'}\n        </td>\n    </tr>\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Attribute Value in PrestaShop\nDESCRIPTION: The snippet provides XML configuration for creating product attribute values in PrestaShop. A POST request is sent to /api/product_option_values. This expands the product's variations by assigning values to the defined attributes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product_option_value>\n        <id_attribute_group><![CDATA[{{id_product_attribute}}]]></id_attribute_group>\n        <name>\n            <language id=\"1\"><![CDATA[{{attribute_value_name}}]]></language>\n        </name>\n    </product_option_value>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Creating a Manufacturer in PrestaShop using XML\nDESCRIPTION: This snippet demonstrates how to create a Manufacturer by sending a POST request to the PrestaShop Webservices. It includes the minimum required field 'name' for the Manufacturer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <manufacturer>\n        <name>ACMEManufacturer</name>\n    </manufacturer>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PHP Realpath Cache Configuration\nDESCRIPTION: PHP configuration to optimize file system access by caching file paths. This reduces the number of system calls needed to check file existence, which is particularly important when using network storage solutions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[PHP]\nrealpath_cache_size = 4096K\nrealpath_cache_ttl = 600\n```\n\n----------------------------------------\n\nTITLE: Specifying ForwardCustomerThreadHandler Class in PHP\nDESCRIPTION: This snippet defines the handler class for the ForwardCustomerThreadCommand. The handler implements the ForwardCustomerThreadHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/forward-customer-thread-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\ForwardCustomerThreadHandler\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Attribute via PrestaShop Command - PHP\nDESCRIPTION: This code snippet defines the usage of the DeleteAttributeCommand class in PrestaShop, responsible for deleting a product attribute by its ID. It requires the attribute ID as an integer provided to the constructor. The command is processed by DeleteAttributeHandler, which implements PrestaShop's DeleteAttributeHandlerInterface. No value is returned upon execution; ensure that the given attribute ID exists or is properly validated by the handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-attribute-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\Attribute\\Command\\DeleteAttributeCommand\n```\n\n----------------------------------------\n\nTITLE: Executing filterHtmlContent Hook in PHP\nDESCRIPTION: This snippet shows how the filterHtmlContent hook is called in PrestaShop. It filters HTML content before rendering a page, passing the content type, HTML fields, and the presented object as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterHtmlContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'filterHtmlContent',\n                [\n                    'type' => $type,\n                    'htmlFields' => $htmlFields,\n                    'object' => $presentedObject,\n                ],\n                null,\n                false,\n                true,\n                false,\n                null,\n                true\n            )\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminProductsPriceStepBottom Hook in Twig Template\nDESCRIPTION: Demonstrates how to render the displayAdminProductsPriceStepBottom hook in the pricing panel template. The hook accepts a product ID parameter and is used to display additional content at the bottom of the product price configuration section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsPriceStepBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsPriceStepBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Handler Implementation for Adding Products to Orders\nDESCRIPTION: The AddProductToOrderHandler implements the AddProductToOrderHandlerInterface to process the command for adding products to orders. This handler takes the command and executes the business logic required to add the product.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/add-product-to-order-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\AddProductToOrderHandler\n```\n\n----------------------------------------\n\nTITLE: Executing displayAfterCarrier Hook in PHP\nDESCRIPTION: This snippet shows how the displayAfterCarrier hook is called in the CheckoutDeliveryStep class. It passes the current cart object as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAfterCarrier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayAfterCarrier', ['cart' => $this->getCheckoutSession()->getCart()])\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateProductSuppliersCommand in PrestaShop\nDESCRIPTION: The UpdateProductSuppliersCommand is used to update product suppliers in PrestaShop. It requires a product ID and an array of product suppliers as constructor parameters. The command is handled by UpdateProductSuppliersHandler which implements UpdateProductSuppliersHandlerInterface and returns an array of ProductSupplierAssociation objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-suppliers-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\Command\\UpdateProductSuppliersCommand\n```\n\n----------------------------------------\n\nTITLE: PHP OPCache Configuration for PrestaShop\nDESCRIPTION: OPCache settings to store compiled PHP bytecode in memory, significantly improving performance by avoiding repeated file parsing and compilation. These settings define memory allocation and cache management parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[opcache]\nopcache.enable=1\nopcache.enable_cli=0\nopcache.memory_consumption=256\nopcache.interned_strings_buffer=32\nopcache.max_accelerated_files=16229\nopcache.max_wasted_percentage=10\nopcache.revalidate_freq=10\nopcache.fast_shutdown=1\nopcache.enable_file_override=0\nopcache.max_file_size=0\n```\n\n----------------------------------------\n\nTITLE: Editing Search Engine Data Using PrestaShop Command - PHP\nDESCRIPTION: This PHP code snippet refers to the EditSearchEngineCommand class, designed to modify an existing search engine record in PrestaShop using provided data. The constructor requires an integer representing the search engine’s ID, and the command is handled by the EditSearchEngineHandler class, which implements the corresponding interface for consistent application logic. The command pattern is used here to decouple editing logic from application interaction; inputs include the search engine ID and edit data, and there is no explicit return value as the operation is void. Dependencies include the PrestaShop Framework and adherence to core domain boundaries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/edit-search-engine-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\Command\\EditSearchEngineCommand\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Row into Database\nDESCRIPTION: Demonstrates how to insert a single row into a database table using the insert() method with proper value escaping.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/** @var bool $result */\n$result = $db->insert('db_table', [\n    'id_lang' => (int) $lang,\n    'value' => pSQL($value),\n    'date_upd' => date('Y-m-d H:i:s'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Constructing ProductCondition Value Object in PHP\nDESCRIPTION: Example of using a value object (ProductCondition) in a command constructor for validation. The value object throws a ProductConstraintException if an invalid value is provided.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/validation/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnew UpdateProductOptionsCommand(\n    //...\n    ProductCondition::from($condition)\n    //...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateProductDetailsHandlerInterface in PrestaShop - PHP\nDESCRIPTION: This snippet documents the required interface for handlers that wish to process UpdateProductDetailsCommand. It enforces structure for the handler logic, so that any implementing class provides consistent update behavior. Usage depends on implementing its contract in the handler and ensuring proper registration in PrestaShop's command bus setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-details-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductDetailsHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Executing the actionExportGDPRData Hook in PHP\nDESCRIPTION: This PHP snippet demonstrates how the 'actionExportGDPRData' hook is triggered using the static 'exec' method of the PrestaShop 'Hook' class. It passes the customer data (likely an object or array represented by `$customer`) and the specific module's ID (`$module['id_module']`) as parameters, allowing modules registered to this hook to perform actions related to exporting GDPR data for that customer and module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionExportGDPRData.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionExportGDPRData', $customer, $module['id_module'])\n```\n\n----------------------------------------\n\nTITLE: Toggling Bulk Tax Status with Command Pattern - PrestaShop - PHP\nDESCRIPTION: This code snippet declares a domain command in PHP for toggling the enabled/disabled status of multiple tax records within PrestaShop via a bulk action. It requires an array of tax IDs and a boolean indicating the desired status, and is handled by a class implementing the BulkToggleTaxStatusHandlerInterface. The command is constructed to support the Command-Handler pattern, promoting separation of concerns and testability. The expected output is a void result; dependencies include PrestaShop's core command and handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/bulk-toggle-tax-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tax\\Command\\BulkToggleTaxStatusCommand\n// Toggles taxes status on bulk action\n// Constructor parameters: $array $taxIds, $bool $expectedStatus\n// Handler: PrestaShop\\PrestaShop\\Adapter\\Tax\\CommandHandler\\BulkToggleTaxStatusHandler\n// Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\CommandHandler\\BulkToggleTaxStatusHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Product Combinations - PrestaShop Command Object - PHP\nDESCRIPTION: This snippet references the BulkDeleteCombinationCommand class from PrestaShop, used to batch delete product combinations for a specific product. It requires the product ID (int), an array of combination IDs, and a ShopConstraint object as constructor parameters. This command is handled by BulkDeleteCombinationHandler, returns void, and implements a handler interface, following PrestaShop's CQRS architecture for domain-driven operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/bulk-delete-combination-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\BulkDeleteCombinationCommand`\n_Deletes multiple combinations_\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $productId`</li>  <li>`$array $combinationIds`</li>  <li>`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\BulkDeleteCombinationHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\BulkDeleteCombinationHandlerInterface`</li>  |\n| **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: Implementing Translatable ChoiceType Form Fields in PHP\nDESCRIPTION: Example of creating a Symfony ChoiceType form field with translatable options. The choices are defined as literal strings, and the choice_translation_domain parameter specifies the translation domain for all choices.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-tips.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShopBundle\\Form\\Admin\\Type\\TranslatorAwareType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\n\nclass SomeFormType extends TranslatorAwareType\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('a_select_box', ChoiceType::class, [\n                'required' => false,\n                'label' => $this->trans('This is a select box', 'Admin.Catalog.Feature'),\n                'choices' => [\n                    'First option' => 0,\n                    'Second option' => 1,\n                    'Third option' => 2,\n                ],\n                'choice_translation_domain' => 'Admin.Some.Domain',\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Email Layout for Classic Theme in Twig\nDESCRIPTION: This Twig template extends the classic theme's layout and adds a custom content block for emails. It includes a title and space footer, demonstrating how to create a custom email layout for the classic theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-a-layout-from-module.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# modules/my_email_theme_module/mails/layouts/custom_classic_layout.html.twig #}\n\n{# You can use the theme layout (if present) to extend it easily #}\n{% extends '@MailThemes/classic/components/layout.html.twig' %}\n\n{% block content %}\n  <tr>\n    <td align=\"center\" class=\"titleblock\">\n      <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n        <span class=\"title\">{{ 'This is an example mail template from my module for classic theme'|trans({}, 'EmailsBody', locale)|raw }}</span>\n      </font>\n    </td>\n  </tr>\n  <tr>\n    <td class=\"space_footer\">&nbsp;</td>\n  </tr>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests via Composer Binary - Bash\nDESCRIPTION: Executes unit tests in the 'tests' folder with PHPUnit as installed via Composer. Assumes test classes are located in the tests/ directory and PHPUnit is present at the vendor location. Output indicates status, number of tests run, durations, and assertion count.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp vendor/bin/phpunit tests\n```\n\n----------------------------------------\n\nTITLE: Displaying Template from Module's getContent Hook (PHP)\nDESCRIPTION: PHP code snippet for the `getContent` method within the main PrestaShop module class (`[module_name].php`). This method is typically used for the module's configuration page. Similar to the controller method, it assigns the paths to the compiled Vue.js JavaScript files to Smarty variables and returns the rendered content of the `app.tpl` template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getContent()\n{\n  $this->context->smarty->assign([\n      'pathApp' => $this->getPathUri() . 'views/js/app.js',\n      'chunkVendor' => $this->getPathUri() . 'views/js/chunk-vendors.js',\n  ]);\n\n  return $this->context->smarty->fetch('module:modulename/views/templates/admin/app.tpl');\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Address using PrestaShop Command Pattern in PHP\nDESCRIPTION: Encapsulates the logic for deleting an address entity within the PrestaShop domain using the Command-Handler pattern. The DeleteAddressCommand is constructed with an integer address ID, which identifies the address to remove. Its execution is handled by the DeleteAddressHandler class, which implements the corresponding handler interface. No value is returned (void), and the command enforces dependency on the associated handler and interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/delete-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\DeleteAddressCommand\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for PrestaShop Contact Resource\nDESCRIPTION: Provides an empty XML template for creating or updating a contact in PrestaShop. The schema includes fields for contact ID, email, customer service status, and multilingual name and description fields for different language versions (indicated by language IDs).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/contacts.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <contact>\n    <id><![CDATA[]]></id>\n    <email><![CDATA[]]></email>\n    <customer_service><![CDATA[]]></customer_service>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n  </contact>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with SQL in PrestaShop Modules\nDESCRIPTION: These SQL snippets show best practices for creating and dropping tables in PrestaShop modules. They use 'IF NOT EXISTS' and 'IF EXISTS' clauses to avoid SQL errors during module installation or uninstallation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/good-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for PrestaShop\nDESCRIPTION: Basic docker-compose.yml configuration that sets up a PrestaShop container with MySQL database. Defines network configuration and basic environment variables for database connection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  mysql:\n    container_name: some-mysql\n    image: mysql:5.7\n    restart: unless-stopped\n    environment:\n      MYSQL_ROOT_PASSWORD: admin\n      MYSQL_DATABASE: prestashop\n    networks:\n      - prestashop_network\n  prestashop:\n    container_name: prestashop\n    image: prestashop/prestashop:latest\n    restart: unless-stopped\n    depends_on:\n      - mysql\n    ports:\n      - 8080:80\n    environment:\n      DB_SERVER: some-mysql\n      DB_NAME: prestashop\n      DB_USER: root\n      DB_PASSWD: admin\n    networks:\n      - prestashop_network\nnetworks:\n    prestashop_network:\n```\n\n----------------------------------------\n\nTITLE: Setting Recursive Write Permissions for PrestaShop Directories\nDESCRIPTION: Sets recursive write permissions (`+w`) for specific PrestaShop directories required by the application during installation and runtime. This command uses `chmod` and should be executed from the PrestaShop root directory. It ensures the web server can write to configuration, cache, logs, images, themes, modules, and other necessary folders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod -R +w admin-dev/autoupgrade app/config var/logs cache config download img log mails modules override themes translations upload var\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAdminLoginControllerLoginAfter Hook in PHP\nDESCRIPTION: This code shows how the hook is called in the AdminLoginController after successful login. It passes the controller object, employee context, and redirect URL as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerLoginAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                    'actionAdminLoginControllerLoginAfter',\n                    [\n                        'controller' => $this,\n                        'employee' => $this->context->employee,\n                        'redirect' => $url,\n                    ]\n                )\n```\n\n----------------------------------------\n\nTITLE: Dispatching PrestaShop Order Preferences Controller Hook\nDESCRIPTION: Code snippet showing how the hook is dispatched before order preferences controller post processing. The hook accepts the controller instance as a parameter and is called with a dynamic hook name suffix.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShopParametersOrderPreferencesControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminShopParametersOrderPreferencesControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hooks in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to dispatch a hook using the `dispatchWithParameters` function, dynamically generating the hook name with `Container::camelize($definition->getId())` and passing a reference to a `presentedGrid` object. This allows alterations or extensions to grid presentations defined by the `definition` variable. There are no clear prerequisites or dependencies specified in the snippet, but the code suggests that it operates within a broader framework requiring certain objects and methods to be defined.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<DefinitionId>GridPresenterModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('action' . Container::camelize($definition->getId()) . 'GridPresenterModifier', [\n            'presented_grid' => &$presentedGrid,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Filter Form Factory in PHP\nDESCRIPTION: This class decorates the original filter factory to add custom submit action for category grids. It handles parent category management, specific search URL, and dynamic redirection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/custom-form-factory.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Class CategoryFilterFormFactory decorates original filter factory to add custom submit action.\n */\nfinal class CategoryFilterFormFactory implements GridFilterFormFactoryInterface\n{\n    /**\n     * @var GridFilterFormFactoryInterface\n     */\n    private $formFactory;\n\n    /**\n     * @var UrlGeneratorInterface\n     */\n    private $urlGenerator;\n\n    /**\n     * @var RequestStack\n     */\n    private $requestStack;\n\n    /**\n     * @param GridFilterFormFactoryInterface $formFactory\n     * @param UrlGeneratorInterface $urlGenerator\n     * @param RequestStack $requestStack\n     */\n    public function __construct(\n        GridFilterFormFactoryInterface $formFactory,\n        UrlGeneratorInterface $urlGenerator,\n        RequestStack $requestStack\n    ) {\n        $this->formFactory = $formFactory;\n        $this->urlGenerator = $urlGenerator;\n        $this->requestStack = $requestStack;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function create(GridDefinitionInterface $definition)\n    {\n        // Use the default factory to build the form like usual\n        $categoryFilterForm = $this->formFactory->create($definition);\n\n        // Create a new empty form that will be used as an empty shell\n        $newCategoryFormBuilder = $categoryFilterForm->getConfig()->getFormFactory()->createNamedBuilder(\n            $definition->getId(),\n            FormType::class\n        );\n\n        // Adds all the form types in the new form\n        /** @var FormInterface $categoryFormItem */\n        foreach ($categoryFilterForm as $categoryFormItem) {\n            $newCategoryFormBuilder->add(\n                $categoryFormItem->getName(),\n                get_class($categoryFormItem->getConfig()->getType()->getInnerType()),\n                $categoryFormItem->getConfig()->getOptions()\n            );\n        }\n\n        $queryParams = [];\n\n        if (null !== ($request = $this->requestStack->getCurrentRequest())\n            && $request->query->has('id_category')\n        ) {\n            $queryParams['id_category'] = $request->query->get('id_category');\n        }\n\n        // Set the specific action in the new form\n        $newCategoryFormBuilder->setAction(\n            $this->urlGenerator->generate('admin_categories_search', $queryParams)\n        );\n\n        return $newCategoryFormBuilder->getForm();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Customer Resource via PrestaShop Webservice API in PHP\nDESCRIPTION: This snippet shows how to create a new customer resource using the PrestaShop Webservice API. It retrieves a blank schema, fills it with customer data, and uses the add() method to create the new resource. The code also handles potential exceptions and displays the ID of the newly created customer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/create-resource.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n\n    // call to retrieve the blank schema\n    $blankXml = $webService->get(['url' => 'http://example.com/api/customers?schema=blank']);\n    \n    // get the entity\n    $customerFields = $blankXml->customer->children();\n    \n    // edit entity fields\n    $customerFields->firstname = 'John';\n    $customerFields->lastname = 'DOE';\n    $customerFields->email = 'john.doe@unknown.com';\n    $customerFields->passwd = 'password1234';\n\n    // send entity to webservice\n    $createdXml = $webService->add([\n        'resource' => 'customers',\n        'postXml' => $blankXml->asXML(),\n    ]);\n    $newCustomerFields = $createdXml->customer->children();\n    echo 'Customer created with ID ' . $newCustomerFields->id . PHP_EOL;\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies using Composer or Make\nDESCRIPTION: Installs the required PHP libraries for PrestaShop listed in the `composer.json` file. This command must be run from the root directory of the PrestaShop project (`/path/to/prestashop`). It requires Composer to be installed. Alternatively, if Make is available and configured in the project, `make composer` can achieve the same result. This step is necessary for the development version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/prestashop\ncomposer install\n# or alternatively:\nmake composer\n```\n\n----------------------------------------\n\nTITLE: Executing DisplayOrderDetail Hook in PHP\nDESCRIPTION: Shows how the displayOrderDetail hook is executed in the origin file, passing the order object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderDetail.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayOrderDetail', ['order' => $order])\n```\n\n----------------------------------------\n\nTITLE: Defining GetEmployeeEmailById Query Class in PHP\nDESCRIPTION: This snippet defines the GetEmployeeEmailById query class in the PrestaShop Core Domain. It takes an employee ID as a constructor parameter and is handled by the GetEmployeeEmailByIdHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-email-by-id.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Query\\GetEmployeeEmailById\n```\n\n----------------------------------------\n\nTITLE: Executing actionCartUpdateQuantityBefore Hook in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how the `actionCartUpdateQuantityBefore` hook is executed within PrestaShop core. It uses the static `exec` method of the `Hook` class, passing the hook name and a data array (`$data`) containing context information as arguments. This allows modules registered to this hook to react before a cart's product quantity is modified.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCartUpdateQuantityBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCartUpdateQuantityBefore', $data)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Development\nDESCRIPTION: Creates a new local Git branch named \"add-emoticons-support\" and switches the working directory to this new branch. This is a standard Git practice to isolate development work for a new feature or bug fix before potentially merging it into the main codebase via a pull request. Requires Git to be installed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_localhost.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b \"add-emoticons-support\"\n```\n\n----------------------------------------\n\nTITLE: Defining a CustomTabType With a Money Input for Product Customization - PrestaShop (PHP)\nDESCRIPTION: This PHP class defines CustomTabType, a custom Symfony-like form type extending TranslatorAwareType. It constructs a MoneyType field with label, currency, and validation constraints, suitable for a custom tab on the product form. Dependencies are on the TranslatorInterface, Currency object, and Symfony validator constraints. Parameters include translator, locales, and defaultCurrency, injected as constructor arguments. The buildForm method builds the form fields, while configureOptions sets default options. Intended for use by registering as a Symfony form.type service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoProductForm\\Form\\Type;\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\TranslatorAwareType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\MoneyType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Translation\\TranslatorInterface;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Constraints\\PositiveOrZero;\nuse Symfony\\Component\\Validator\\Constraints\\Type;\n\nclass CustomTabType extends TranslatorAwareType\n{\n    /**\n     * @var \\Currency\n     */\n    private $defaultCurrency;\n\n    /**\n     * @param TranslatorInterface $translator\n     * @param array $locales\n     * @param \\Currency $defaultCurrency\n     */\n    public function __construct(\n        TranslatorInterface $translator,\n        array $locales,\n        \\Currency $defaultCurrency\n    ) {\n        parent::__construct($translator, $locales);\n        $this->defaultCurrency = $defaultCurrency;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        parent::buildForm($builder, $options);\n        $builder\n            ->add('custom_price', MoneyType::class, [\n                'label' => $this->trans('My custom price', 'Modules.Demoproductform.Admin'),\n                'label_tag_name' => 'h3',\n                'currency' => $this->defaultCurrency->iso_code,\n                'required' => false,\n                'constraints' => [\n                    new NotBlank(),\n                    new Type(['type' => 'float']),\n                    new PositiveOrZero(),\n                ],\n            ])\n        ;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        parent::configureOptions($resolver);\n\n        $resolver\n            ->setDefaults([\n                'label' => $this->trans('Customization', 'Modules.Demoproductform.Admin'),\n            ])\n        ;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending Parent Theme's Template in Smarty\nDESCRIPTION: Demonstrates how to extend a template from the parent theme using the 'parent:' prefix in the file path, which explicitly indicates that the template to extend is from the parent theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/parent-child-feature.md#2025-04-22_snippet_3\n\nLANGUAGE: smarty\nCODE:\n```\n  {extends file='parent:catalog/listing/category.tpl'}\n```\n\n----------------------------------------\n\nTITLE: CSS Fix for Bootstrap Conflicts in MultiShop\nDESCRIPTION: CSS solution to hide native multistore module activation panel when Bootstrap is disabled to prevent visual regressions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  /** Hide native multistore module activation panel, because of visual regressions on non-bootstrap content */\n  #content.nobootstrap div.bootstrap.panel {\n    display: none;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating Product Price in Cart - PrestaShop PHP Command\nDESCRIPTION: This PHP snippet refers to the UpdateProductPriceInCartCommand class, which is used to update the price of a specific product (optionally, a combination) in a given cart in PrestaShop. Required dependencies include correct instantiation with integer cart, product, and combination IDs, and a float price value. The command is handled by the UpdateProductPriceInCartHandler class, which implements the related handler interface, and does not return a value. Input parameters are cartId, productId, combinationId, and price; there are no return values, and potential limitations include PrestaShop environment dependency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-product-price-in-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\UpdateProductPriceInCartCommand\n```\n\n----------------------------------------\n\nTITLE: Defining SearchProductsForAssociation Query in PHP\nDESCRIPTION: This code snippet defines the SearchProductsForAssociation query class in PrestaShop's Core Domain. It specifies the constructor parameters, including phrase, languageId, shopId, and an optional limit. The query is handled by SearchProductsForAssociationHandler and returns an array of ProductForAssociation objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-products-for-association.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Query\\SearchProductsForAssociation\n```\n\n----------------------------------------\n\nTITLE: Declaring ForwardCustomerThreadHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the ForwardCustomerThreadHandler implements, which is part of the command pattern implementation in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/forward-customer-thread-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\ForwardCustomerThreadHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Dispatching PrestaShop Shipping Preferences Hook in PHP\nDESCRIPTION: Hook dispatch implementation that runs before processing the Handling form in shipping preferences. Passes the controller instance as a parameter to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShippingPreferencesControllerPostProcessHandlingBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminShippingPreferencesControllerPostProcessHandlingBefore',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleMailAlertSendCustomer Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionModuleMailAlertSendCustomer hook is executed in PrestaShop. It passes product information, a product link, customer data, and the product object as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleMailAlertSendCustomer.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n    'actionModuleMailAlertSendCustomer',\n    [\n        'product' => $product_name,\n        'link' => $product_link,\n        'customer' => $customer,\n        'product_obj' => $product,\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Hook Execution in CategoryController.php\nDESCRIPTION: Shows how the filterCategoryContent hook is called in the CategoryController.php file with various parameters including the Category object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterCategoryContent.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'filterCategoryContent',\n            ['object' => $categoryVar],\n            $id_module = null,\n            $array_return = false,\n            $check_exceptions = true,\n            $use_push = false,\n            $id_shop = null,\n            $chain = true\n        )\n```\n\n----------------------------------------\n\nTITLE: Displaying PrestaShop License Update Command\nDESCRIPTION: Shows the command name used to update license headers across PrestaShop project files. The command is implemented in UpdateLicensesCommand.php located in the PrestaShopBundle/Command directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-licenses-update.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nprestashop:licenses:update\n```\n\n----------------------------------------\n\nTITLE: Implementing hookDisplayDashboardToolbarIcons for XML Export in PHP\nDESCRIPTION: This PHP hook function exports products to XML format using the serializer service and renders a download link using Twig. It fetches products, serializes them to XML, saves the file, and returns a rendered Twig template with the download link.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Make products export in XML.\n *\n * @param $params array\n */\npublic function hookDisplayDashboardToolbarIcons($params)\n{\n    if ($this->isSymfonyContext() && $params['route'] === 'admin_product_catalog') {\n        $products = $this->get('product_repository')->findAllByLangId(1);\n\n        $productsXml = $this->get('serializer')->serialize(\n            $products,\n            'xml',\n            [\n                'xml_root_node_name' => 'products',\n                'xml_format_output' => true,\n            ]\n        );\n        $this->get('filesystem')->dumpFile(_PS_UPLOAD_DIR_ . 'products.xml', $productsXml);\n\n        return $this->get('twig')->render('@Modules/Foo/views/download_link.twig', [\n            'filepath' => _PS_BASE_URL_ . '/upload/' . 'products.xml',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Delete Tax Rules Group Command (PrestaShop Command Pattern, PHP)\nDESCRIPTION: Defines the BulkDeleteTaxRulesGroupCommand, responsible for encapsulating the IDs of tax rules groups targeted for bulk deletion in PrestaShop. The command is constructed with an array of taxRulesGroupIds and is processed by a dedicated handler implementing the BulkDeleteTaxRulesGroupHandlerInterface. It does not return a value (void), but initiates the deletion process for specified group IDs; proper instantiation requires the array of IDs and integration with the related handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/bulk-delete-tax-rules-group-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\TaxRulesGroup\\Command\\BulkDeleteTaxRulesGroupCommand\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllCustomizationFieldsFromProductCommand Class in PHP\nDESCRIPTION: This code snippet defines the RemoveAllCustomizationFieldsFromProductCommand class in the PrestaShop core domain. It takes a product ID as a constructor parameter and is handled by the RemoveAllCustomizationFieldsFromProductHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-customization-fields-from-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Customization\\Command\\RemoveAllCustomizationFieldsFromProductCommand\n```\n\n----------------------------------------\n\nTITLE: Defining PositionDefinition Manually in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how to manually instantiate a PositionDefinition, which encapsulates information about how entities are ordered within a specific table. It requires specifying the table name, id field, position field, and an optional parent id field. This object is crucial for later computing and updating entity positions via PrestaShop's grid component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition;\\n    \\n$positionDefinition = new PositionDefinition(\\n    'product',\\n    'id_product',\\n    'position',\\n    'id_category_default'\\n);\n```\n\n----------------------------------------\n\nTITLE: Backing up PrestaShop Files with SCP Command\nDESCRIPTION: Command to securely copy PrestaShop files from a remote server to local machine using SCP protocol. Requires SSH access and appropriate user permissions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/backup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscp -r user@host:/var/www/prestashop_folder_path /local_path_for_backup/\n```\n\n----------------------------------------\n\nTITLE: Querying Combinations with PrestaShop Handler in PHP\nDESCRIPTION: The snippet describes the use of a query and handler for searching product combinations for association in PrestaShop. It requires the PrestaShop framework and related query and handler classes. The constructor accepts parameters like phrase, language ID, shop ID, filters, and an optional limit. It returns an array of CombinationForAssociation query results, constrained by the PrestaShop domain model.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-combinations-for-association.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Query\\SearchCombinationsForAssociation\n```\n\n----------------------------------------\n\nTITLE: Defining Doctrine Repository for Supplier Extra Image in PHP\nDESCRIPTION: This snippet defines the `SupplierExtraImageRepository` class, extending Doctrine's `EntityRepository`. This class is responsible for data access logic related to the `SupplierExtraImage` entity. It includes an `upsertSupplierImageName` method to create or update an image record for a given supplier ID and image name, and a `deleteExtraImage` method to remove a specific `SupplierExtraImage` entity instance. Both methods use the Doctrine Entity Manager (`$this->getEntityManager()`) to persist changes to the database.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\nuse PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity\\SupplierExtraImage;\n\n/**\n * Class SupplierExtraImageRepository\n * @package PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository\n */\nclass SupplierExtraImageRepository extends EntityRepository\n{\n    /**\n     * @param $supplierId\n     * @param $imageName\n     */\n    public function upsertSupplierImageName($supplierId, $imageName)\n    {\n        /** @var SupplierExtraImage $supplierExtraImage */\n        $supplierExtraImage = $this->findOneBy(['supplierId' => $supplierId]);\n        if (!$supplierExtraImage) {\n            $supplierExtraImage = new SupplierExtraImage();\n            $supplierExtraImage->setSupplierId($supplierId);\n        }\n        $supplierExtraImage->setImageName($imageName);\n\n        $em = $this->getEntityManager();\n        $em->persist($supplierExtraImage);\n        $em->flush();\n    }\n\n    /**\n     * @param SupplierExtraImage $supplierExtraImage\n     */\n    public function deleteExtraImage(SupplierExtraImage $supplierExtraImage)\n    {\n        $em = $this->getEntityManager();\n        if ($supplierExtraImage) {\n            $em->remove($supplierExtraImage);\n            $em->flush();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tools Class Methods in PHP\nDESCRIPTION: Demonstrates how to use methods from both the custom class and its parent after extending a core class. This shows how custom and core functionality can be used together after extension.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/overrides.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nMyCustomTools::array_pluck($data, 'id');\nMyCustomTools::getValue('userId'); // Defined in Tools\nMyCustomTools::getShopDomain(); // Defined in Tools\n```\n\n----------------------------------------\n\nTITLE: Configuring .well-known Directory Access in Nginx\nDESCRIPTION: This snippet demonstrates how to configure Nginx to allow access to the .well-known directory while blocking access to other hidden files. It also sets the default content type for files in the .well-known directory to plain text.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/nginx.md#2025-04-22_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\n# .htaccess, .DS_Store, .htpasswd, etc., but keep .well-known available\nlocation ~* /\\.(?!well-known\\/) {\n    deny all;\n}\n\n# files in .well-known should be served as plain text.\nlocation ~* ^/\\.well-known\\/ {\n    default_type text/plain;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing actionWishlistAddProduct Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionWishlistAddProduct hook is called in the blockwishlist module. It passes information about the wishlist, customer, product, and product attribute to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionWishlistAddProduct.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionWishlistAddProduct', [\n            'idWishlist' => $idWishList,\n            'customerId' => $this->context->customer->id,\n            'idProduct' => $id_product,\n            'idProductAttribute' => $id_product_attribute,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectUpdateBefore Hook in PrestaShop PHP\nDESCRIPTION: This code snippet shows how the actionObjectUpdateBefore hook is executed in PrestaShop's core. It is called before an object is updated, passing the object itself as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectUpdateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectUpdateBefore', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Defining shopConstraint Parameter for Command Constructor in PHP\nDESCRIPTION: Declares the `$shopConstraint` parameter, an instance of `PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint`, required by the `UpdateProductStockAvailableCommand` constructor. This parameter specifies the shop context (e.g., specific shop or group of shops) for which the stock update should apply.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`$PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint`\n```\n\n----------------------------------------\n\nTITLE: Building a Form with TextPreviewType in PrestaShop\nDESCRIPTION: This PHP code snippet demonstrates how to use TextPreviewType within a form builder to display a non-editable text. It requires the PrestaShop\\PrestaShopBundle\\Form\\Admin\\Type namespace and is part of PrestaShop UI components. 'fullname_and_email' is added to the form with options that influence its display, notably 'block_prefix' for customization.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/text-preview-type.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('fullname_and_email', TextPreviewType::class, [\n    'label' => false,\n    'block_prefix' => 'searched_customer_fullname_and_email',\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack for PrestaShop Theme Development\nDESCRIPTION: Steps to install and run Webpack for compiling theme assets in PrestaShop. This includes installing Node.js, setting up npm dependencies, and running build commands to compile assets either once or in watch mode for development.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/webpack.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Including Stylesheets and JavaScript in PrestaShop 1.7 Theme Head\nDESCRIPTION: This snippet demonstrates how to include stylesheets and JavaScript files in the head section of a PrestaShop 1.7 theme. It uses Smarty blocks and includes partial templates for better asset management and features like async loading for JavaScript and automatic inlining for CSS.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/head.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n  {block name='stylesheets'}\n    {include file=\"_partials/stylesheets.tpl\" stylesheets=$stylesheets}\n  {/block}\n\n  {block name='javascript_head'}\n    {include file=\"_partials/javascript.tpl\" javascript=$javascript.head vars=$js_custom_vars}\n  {/block}\n```\n\n----------------------------------------\n\nTITLE: Scheduling PrestaShop Search Index Refresh via Cron (Bash)\nDESCRIPTION: This bash command demonstrates how to set up a crontab entry to automatically trigger a full reindex of the PrestaShop product search index daily at 6:00 AM. It uses `curl` to send a GET request to the `AdminSearch` controller with specific parameters (`action=searchCron`, `ajax=1`, `full=1`) and requires a valid admin token. The domain, admin directory (`admin-xxx`), and token (`xxxxxxxx`) must be replaced with actual values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/products-lifecycle/search-index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# crontab\n# triggers a reindex everyday at 6:00AM\n0 6 * * * curl https://domain.tld/admin-xxx/index.php?controller=AdminSearch&action=searchCron&ajax=1&full=1&token=xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Using Shop Context Adapter in PHP\nDESCRIPTION: Shows common functions of the shop context adapter that help determine the current shop context, retrieve shop IDs, and get information about available shops. This adapter is accessed via the service container with the identifier 'prestashop.adapter.shop.context'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/shop-context/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Get the shop context adapter from the service container\n$shopContext = $this->get('prestashop.adapter.shop.context');\n\n// Get a list of all active shops\n$shopList = $shopContext->getShops(false, true);\n\n// Is the current context a group of shops?\n$isShopGroupContext = $shopContext->isShopGroupContext();\n\n// Is the current context a single shop?\n$isSingleShopContext = $shopContext->isSingleShopContext();\n\n// Is \"all shops\" context\n$isAllShopContext = $shopContext->isAllContext();\n\n// Get a list of IDs for all shops belonging to the current context (useful is the current context is a group) \n$shopList = $shopContext->getContextListShopID();\n\n// Get the id of the shop in the current context (useful if the current context is a single shop)\n$currentIdShop = $shopContext->getContextShopID();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTML Column Type in PHP\nDESCRIPTION: Creates a new HtmlColumn class extending AbstractColumn to define a custom column type for displaying HTML content in PrestaShop grids. It sets up the column type and configures options for the field and clickable properties.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/create-custom-column-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PrestaShop\\Module\\Yourcoolmodule\\Core\\Grid\\Column\\Type;\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\AbstractColumn;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nfinal class HtmlColumn extends AbstractColumn\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function getType()\n    {\n        return 'customhtml';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function configureOptions(OptionsResolver $resolver)\n    {\n        parent::configureOptions($resolver);\n\n        $resolver\n            ->setRequired([\n                'field',\n            ])\n            ->setDefaults([\n                'clickable' => false,\n            ])\n            ->setAllowedTypes('field', 'string')\n            ->setAllowedTypes('clickable', 'bool');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Currency XML Schema for PrestaShop API\nDESCRIPTION: This XML schema represents the structure of a Currency entity in PrestaShop. It includes various fields such as id, names, symbol, iso_code, and other currency-related properties. The schema supports multilingual content for certain fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/currencies.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <currency>\n    <id><![CDATA[]]></id>\n    <names>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </names>\n    <name><![CDATA[]]></name>\n    <symbol>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </symbol>\n    <iso_code><![CDATA[]]></iso_code>\n    <numeric_iso_code><![CDATA[]]></numeric_iso_code>\n    <precision><![CDATA[]]></precision>\n    <conversion_rate><![CDATA[]]></conversion_rate>\n    <deleted><![CDATA[]]></deleted>\n    <active><![CDATA[]]></active>\n    <unofficial><![CDATA[]]></unofficial>\n    <modified><![CDATA[]]></modified>\n    <pattern>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </pattern>\n  </currency>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Factory in YAML\nDESCRIPTION: This YAML configuration sets up the GridFactory service for the product grid, combining the previously defined grid definition and data factory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n# Configure Grid factory to use services we have implemented\nprestashop.core.grid.product_grid_factory:\n    class: 'PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory'\n    arguments:\n        - '@prestashop.core.grid.definition.factory.product_grid_definition_factory' # our definition factory\n        - '@prestashop.core.grid.data.factory.product_data_factory'              # our data factory\n        - '@prestashop.core.grid.filter.form_factory'                            # core service needed by grid factory\n        - '@prestashop.core.hook.dispatcher'                                     # core service needed by grid factory\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderReturn Hook in PHP\nDESCRIPTION: This snippet demonstrates how to execute the actionOrderReturn hook using the Hook::exec method. It passes an array with the 'orderReturn' object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderReturn.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderReturn', ['orderReturn' => $orderReturn])\n```\n\n----------------------------------------\n\nTITLE: Customer Edit Command Class Path\nDESCRIPTION: Fully qualified namespace path for the EditCustomerCommand class that handles customer data modification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/edit-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\EditCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Product Tags Handler Class Path\nDESCRIPTION: Fully qualified namespace path for the handler class that implements the tag removal functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-product-tags-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\RemoveAllProductTagsHandler\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies for PrestaShop CLI Installation\nDESCRIPTION: If deploying PrestaShop from source, Composer dependencies must be installed first using this command from the project's root directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/install-from-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Supply Order XML Schema\nDESCRIPTION: A blank XML schema template for the supply_order resource in PrestaShop. This schema includes all fields required for creating or updating supply orders, including supplier details, order information, pricing, and associations with supply order details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/supply_orders.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supply_order>\n    <id><![CDATA[]]></id>\n    <id_supplier><![CDATA[]]></id_supplier>\n    <id_lang><![CDATA[]]></id_lang>\n    <id_warehouse><![CDATA[]]></id_warehouse>\n    <id_supply_order_state><![CDATA[]]></id_supply_order_state>\n    <id_currency><![CDATA[]]></id_currency>\n    <supplier_name><![CDATA[]]></supplier_name>\n    <reference><![CDATA[]]></reference>\n    <date_delivery_expected><![CDATA[]]></date_delivery_expected>\n    <total_te><![CDATA[]]></total_te>\n    <total_with_discount_te><![CDATA[]]></total_with_discount_te>\n    <total_ti><![CDATA[]]></total_ti>\n    <total_tax><![CDATA[]]></total_tax>\n    <discount_rate><![CDATA[]]></discount_rate>\n    <discount_value_te><![CDATA[]]></discount_value_te>\n    <is_template><![CDATA[]]></is_template>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <associations>\n      <supply_order_details>\n        <supply_order_detail>\n          <id><![CDATA[]]></id>\n          <id_product><![CDATA[]]></id_product>\n          <id_product_attribute><![CDATA[]]></id_product_attribute>\n          <supplier_reference><![CDATA[]]></supplier_reference>\n          <product_name><![CDATA[]]></product_name>\n        </supply_order_detail>\n      </supply_order_details>\n    </associations>\n  </supply_order>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Associating Feature Value to Product in PrestaShop\nDESCRIPTION: This XML code snippet shows how to associate a feature value with a product in PrestaShop. The /api/products endpoint is used in conjunction, and the IDs for both the feature and feature value must be correctly inserted. This allows products to be enriched with predefined properties for improved classification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product>\n        [...]\n\t<associations>\n            <product_features>\n                <product_feature>\n                    <id><![CDATA[{{id_feature}}]]></id>\n                    <id_feature_value><![CDATA[{{id_feature_value}}]]></id_feature_value>\n                </product_feature>\n            </product_features>\n        </associations>\n        [...]\n    </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Enabling Gzip Compression in Nginx Configuration\nDESCRIPTION: This snippet demonstrates how to enable and configure Gzip compression in Nginx. It includes settings for compression level, minimum length, and file types to compress. Note that enabling Gzip compression may pose security risks when using SSL.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/nginx.md#2025-04-22_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n\n    gzip on;\n    gzip_disable \"msie6\";\n\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/geo+json\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rdf+xml\n        application/rss+xml\n        application/x-javascript\n        application/xhtml+xml\n        application/xml\n        font/eot\n        font/otf\n        font/ttf\n        image/svg+xml\n        text/css\n        text/javascript\n        text/plain\n        text/xml;\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers for Static Assets in Apache\nDESCRIPTION: This configuration block sets Cache-Control headers for static assets like images, CSS, and web fonts. It instructs browsers to cache these files for a maximum of 30 days (2592000 seconds).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_headers.c>\n <FilesMatch \"\\.(ico|jpe?g|png|gif|css|woff2)$\">\n   Header set Cache-Control \"max-age=2592000, public\"\n </FilesMatch>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to call the 'actionLoggerLogMessage' hook in PrestaShop. It executes the hook with parameters such as 'message', 'level', and 'isLogged'. 'isLogged' is determined by comparing 'level' with a predefined threshold 'this->level'. This hook is utilized to perform additional actions when a log message is generated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionLoggerLogMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec(\n    'actionLoggerLogMessage',\n    [\n        'message' => $message,\n        'level' => $level,\n        'isLogged' => $level >= $this->level,\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminAdvancedParametersPerformanceControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This code snippet shows how the hook is dispatched in the Performance Controller. It passes the controller instance as a parameter to the hook, allowing modules to access the controller context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminAdvancedParametersPerformanceControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminAdvancedParametersPerformanceControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Executing actionObject<ClassName>DeleteAfter Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the 'actionObject<ClassName>DeleteAfter' hook is called within PrestaShop's ObjectModel class. It executes the hook after an object is deleted, passing the object itself as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>DeleteAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'DeleteAfter', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Customer Sessions with Command Pattern - PrestaShop - PHP\nDESCRIPTION: Defines a command class used to trigger the bulk deletion of customer sessions within PrestaShop. The class accepts an array of session IDs in its constructor and relies on a handler class (BulkDeleteCustomerSessionsHandler) to execute the action. There are no return values (void return); this command is part of the CQRS pattern, and must be paired with the designated handler which implements the required interface. Prerequisite: familiarity with PrestaShop's command bus architecture, and the handler's registration within the service container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/bulk-delete-customer-sessions-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Security\\Command\\BulkDeleteCustomerSessionsCommand\n// Deletes customer sessions in bulk action\n\n// Constructor parameter: array $sessionIds\n// Handler class: PrestaShop\\PrestaShop\\Adapter\\Security\\CommandHandler\\BulkDeleteCustomerSessionsHandler\n// Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Security\\CommandHandler\\BulkDeleteCustomerSessionsHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Value from Database\nDESCRIPTION: Shows how to retrieve a single value from a database query without processing multiple arrays.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = 'SELECT `count(\\'sales\\')` FROM `' . _DB_PREFIX_ . 'some_table` ...';\n\n/** @var string|false $salesCount */\n$salesCount = $db->getValue($request);\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminInternationalGeolocationControllerPostProcess<HookName>Before Hook in PHP\nDESCRIPTION: This code snippet shows how the hook is dispatched within the GeolocationController. It passes the current controller instance as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminInternationalGeolocationControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndispatchHook(\n            'actionAdminInternationalGeolocationControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Headers for CSV Columns in PHP\nDESCRIPTION: Shows how to define headers for the CSV columns using an associative array that maps data keys to column titles.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$headersData = [\n    \"name\" => \"Product name\",\n    \"brand\" => \"Product brand\",\n    \"price\" => \"Product price\"\n];\n```\n\n----------------------------------------\n\nTITLE: Executing a Dynamic Admin Action Hook in PHP\nDESCRIPTION: This PHP code snippet demonstrates how the `actionAdmin<Action>Before` hook is executed within a PrestaShop AdminController. It uses the static `Hook::exec` method. The hook name is dynamically constructed by concatenating 'actionAdmin', the capitalized name of the current controller action (`ucfirst($this->action)`), and 'Before'. The current controller instance (`$this`) is passed as an associative array to the hook listeners under the key 'controller', allowing modules to access controller properties and methods.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdmin<Action>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec('actionAdmin' . ucfirst($this->action) . 'Before', ['controller' => $this]);\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookie Object in PrestaShop\nDESCRIPTION: Illustrates how to access the Cookie object from a Context instance in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$context->cookie\n```\n\n----------------------------------------\n\nTITLE: Modern Twig Template Example\nDESCRIPTION: Equivalent template using Twig syntax, demonstrating the migration of employee avatar and name display.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/templating-with-twig.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<span class=\"employee_avatar_small\">\n    <img class=\"img\" alt=\"{{ employee.name }}\" src=\"{{ employee.image }}\" />\n</span>\n{{ employee.name }}\n```\n\n----------------------------------------\n\nTITLE: Implementing displayNewsletterRegistration Hook in PrestaShop\nDESCRIPTION: Basic hook implementation for displaying newsletter registration functionality in PrestaShop front office. This hook is used to render newsletter subscription forms and related content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayNewsletterRegistration.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayNewsletterRegistration'}\n```\n\n----------------------------------------\n\nTITLE: Using UpdateCartLanguageCommand in PrestaShop for Cart Language Updates\nDESCRIPTION: This command is used to update the language of a specific cart. It requires the cart ID and the new language ID as constructor parameters. The command is handled by UpdateCartLanguageHandler which implements UpdateCartLanguageHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-cart-language-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\UpdateCartLanguageCommand\n```\n\n----------------------------------------\n\nTITLE: EditCurrencyCommand Class Path Declaration\nDESCRIPTION: Namespace and class path declaration for the EditCurrencyCommand class in PrestaShop's currency management system\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/edit-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\EditCurrencyCommand\n```\n\n----------------------------------------\n\nTITLE: Defining a Module Tab with Explicit Language Translations (PHP, PS < 1.7.8)\nDESCRIPTION: Shows an alternative method for defining translatable tab labels, necessary for PrestaShop versions before 1.7.8 or as a fallback. Translations are provided directly as an associative array within the 'name' key, keyed by language ISO codes (e.g., 'en', 'fr'). The first entry ('en' in this example) acts as a fallback if the user's specific language isn't defined in the array. `wording` and `wording_domain` keys are included but will be ignored in versions prior to 1.7.8.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodule extends Module\n{\n    public $tabs = [\n        [\n            'name' => [\n                'en' => 'Merchant Expertise', // Fallback value\n                'fr' => 'Expertise PrestaShop',\n                ...\n            ],\n            'class_name' => 'AdminGamification',\n            'parent_class_name' => 'ShopParameters',\n            'wording' => 'Merchant Expertise', // Ignored in PS < 1.7.8\n            'wording_domain' => 'Modules.Gamification.Admin', // Ignored in PS < 1.7.8\n        ],\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminShopParametersProductPreferencesControllerPostProcessBefore Hook in PHP\nDESCRIPTION: Example of how the hook is called within the ProductPreferencesController. This hook passes the controller instance as a parameter and is triggered before processing form submission.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShopParametersProductPreferencesControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminShopParametersProductPreferencesControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Executing displayHome Hook in PrestaShop\nDESCRIPTION: Core implementation of the displayHome hook execution in PrestaShop's front office. This hook allows modules to add new content elements to the homepage through the Hook::exec() method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayHome.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayHome')\n```\n\n----------------------------------------\n\nTITLE: Radio Button Configuration in HelperOptions for PrestaShop\nDESCRIPTION: Example of defining a radio button configuration field in HelperOptions. It shows how to set up choices with values and labels for radio button options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'MY_CONFIG_KEY' => [\n    'type' => 'radio',\n    'title' => $this->module->l('My config title'),\n    'validation' => 'isInt',\n    'choices' => [\n        'myconfigvalue1' => $this->module->l('My value 1'),\n        'myconfigvalue2' => $this->module->l('My value 2'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Executing actionPresentModule Hook in PrestaShop\nDESCRIPTION: Hook execution code that allows modification of module presentation data. The hook passes a reference to the presentedModule result array which can be modified by hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentModule.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentModule',\n            ['presentedModule' => &$result]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining EditEmployeeCommand Class in PHP\nDESCRIPTION: This snippet defines the EditEmployeeCommand class used for editing employee data. It takes an employee ID as a constructor parameter and is handled by the EditEmployeeHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/edit-employee-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Command\\EditEmployeeCommand\n```\n\n----------------------------------------\n\nTITLE: Optimizing PHP Configuration for PrestaShop\nDESCRIPTION: Essential PHP configuration settings for production environments to improve PrestaShop performance. These settings adjust timezone, session behavior, memory limits, execution time, and input parameters to optimize performance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Date]\ndate.timezone = UTC\n\n[Session]\nsession.auto_start = Off\n\n[PHP]\nshort_open_tag = Off\ndisplay_errors = Off\n\nmagic_quotes_gpc = off\n; Increase this value if you are able to do it\nmemory_limit = 512M\nmax_execution_time = 300\nmax_input_time = 300\nupload_max_filesize = 20M\npost_max_size = 22M\n; Increase this value if you work with products with a lot of combinations\nmax_input_vars = 20000\nallow_url_fopen = on\n```\n\n----------------------------------------\n\nTITLE: Deleting Manufacturers in Bulk with Command Pattern - PrestaShop - PHP\nDESCRIPTION: Defines the BulkDeleteManufacturerCommand class to enable batch deletion of manufacturers by passing an array of manufacturer IDs into its constructor. This command is handled by BulkDeleteManufacturerHandler through an interface-based architecture. The process requires PrestaShop Core Domain components and expects a PHP array of IDs as input; no value is returned from execution. Intended for developer-driven batch operations with error handling managed by the handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/bulk-delete-manufacturer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\BulkDeleteManufacturerCommand`\n// Deletes manufacturers in bulk action\n\n// Constructor parameters:\n//   $manufacturerIds (array): IDs of manufacturers to delete\n// Handler class: PrestaShop\\PrestaShop\\Adapter\\Manufacturer\\CommandHandler\\BulkDeleteManufacturerHandler\n//   Implements PrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\CommandHandler\\BulkDeleteManufacturerHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form Data Provider with QueryBus\nDESCRIPTION: Basic implementation of ContactFormDataProvider showing QueryBus injection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider;\n\nuse PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface;\n\nfinal class ContactFormDataProvider implements FormDataProviderInterface\n{\n    /**\n     * @var CommandBusInterface\n     */\n    private $queryBus;\n\n    /**\n     * @param CommandBusInterface $queryBus\n     */\n    public function __construct(CommandBusInterface $queryBus)\n    {\n        $this->queryBus = $queryBus;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Module Hooks for Customer Grid and Form\nDESCRIPTION: Registration of hooks needed to extend customer grid and forms during module installation. Includes hooks for grid definition, query building, and form handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function install()\n{\n    return parent::install() &&\n        $this->registerHook('actionCustomerGridDefinitionModifier') &&\n        $this->registerHook('actionCustomerGridQueryBuilderModifier') &&\n        $this->registerHook('actionCustomerFormBuilderModifier') &&\n        $this->registerHook('actionAfterCreateCustomerFormHandler') &&\n        $this->registerHook('actionAfterUpdateCustomerFormHandler') &&\n        $this->installTables()\n    ;\n```\n\n----------------------------------------\n\nTITLE: Referencing the UpdateProductStockInformationCommand Class in PrestaShop\nDESCRIPTION: This shows the fully qualified class path to the UpdateProductStockInformationCommand class which is used to update a given product's stock information in PrestaShop's core domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-information-command.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Stock\\Command\\UpdateProductStockInformationCommand\n```\n\n----------------------------------------\n\nTITLE: Executing Mail Hook in PHP\nDESCRIPTION: This snippet demonstrates the execution of the 'actionGetExtraMailTemplateVars' hook within the PrestaShop mail class. The purpose is to allow modification of mail template variables through external modules. It requires the PrestaShop Hook system as a dependency. Key parameters are the template, template variables, and language identifier. Expected output is the modified extraTemplateVars. One limitation is its dependence on the accurate implementation in registered hooks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetExtraMailTemplateVars.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionGetExtraMailTemplateVars',\n                [\n                    'template' => $template,\n                    'template_vars' => $templateVars,\n                    'extra_template_vars' => &$extraTemplateVars,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            )\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectProductInCartDeleteAfter Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the 'actionObjectProductInCartDeleteAfter' hook is called in PrestaShop. It is executed after a product is removed from a cart, allowing for custom actions or processing to occur at this point.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectProductInCartDeleteAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectProductInCartDeleteAfter', $data)\n```\n\n----------------------------------------\n\nTITLE: Handler Interface for Adding Products to Orders\nDESCRIPTION: The interface that must be implemented by handlers that process the AddProductToOrderCommand. It defines the contract for handling the addition of products to existing orders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/add-product-to-order-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\CommandHandler\\AddProductToOrderHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Handling Carrier ID Changes with the actionCarrierUpdate Hook in PrestaShop (PHP)\nDESCRIPTION: This code implements the hookActionCarrierUpdate method to synchronize stored carrier IDs whenever a carrier is duplicated or changed in the PrestaShop back office. It checks if the old carrier ID matches a stored configuration value and updates it if necessary. Dependencies: PrestaShop Configuration class and proper hook registration. Parameters: $params array containing old and new carrier information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/carrier/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionCarrierUpdate($params)\n{\n    $id_carrier_old = (int) $params['id_carrier'];\n    $id_carrier_new = (int) $params['carrier']->id;\n    if ($id_carrier_old === (int) Configuration::get('MYCARRIER_CARRIER_ID')) {\n        Configuration::updateValue('MYCARRIER_CARRIER_ID', $id_carrier_new);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logging for Specific Files in Nginx\nDESCRIPTION: This snippet demonstrates how to disable access logging for specific files like favicon.ico and robots.txt in Nginx. It uses exact match location blocks for efficiency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/nginx.md#2025-04-22_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation = /favicon.ico {\n    access_log off;\n    log_not_found off;\n}\n\nlocation = /robots.txt {\n    access_log off;\n    log_not_found off;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Column Type in Grid Definition Factory\nDESCRIPTION: Demonstrates how to use the newly created HtmlColumn type in a grid definition factory. It adds a new column to the grid with specific options and translations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/create-custom-column-type.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShop\\Module\\Yourcoolmodule\\Core\\Grid\\Column\\Type\\HtmlColumn;\n\n->add(\n    (new HtmlColumn('some_column'))\n        ->setName($this->trans('Print voucher', [], 'Modules.Yourcoolmodule.Admin'))\n        ->setOptions([\n            'field' => 'identifier_column'\n        ])\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid Component in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and initialize the Grid component for the tax page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n### 1. import the grid component\nimport Grid from '@components/grid/grid';\n\nconst {$} = window;\n\n$(() => {\n### 2. initialize the grid component by providing grid id\n  const taxGrid = new Grid('tax');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AddCategoryCommand Class in PHP for PrestaShop\nDESCRIPTION: The AddCategoryCommand class is responsible for adding a new category in PrestaShop. It takes localized names, link rewrites, active status, and parent category ID as constructor parameters. The command is handled by AddCategoryHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/add-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\AddCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Command Usage Documentation\nDESCRIPTION: Command definition showing path, arguments and purpose for appending hooks to SQL upgrade files. Takes ps-version and autoupgrade-path as required arguments.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-update-sql-upgrade-file-hooks-listing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `prestashop:update:sql-upgrade-file-hooks-listing`\n\n## Informations\n\n* Path: `src/PrestaShopBundle/Command/AppendHooksListForSqlUpgradeFileCommand.php`\n* Arguments:\n  * `ps-version`: PrestaShop version for which the SQL upgrade file will be searched\n  * `autoupgrade-path`: Path to the autoupgrade module path which contains the upgrade scripts\n\n## Description\n\nThis command aims to add SQL to the SQL upgrade file which contains hook insert operations.\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Blank XML Schema\nDESCRIPTION: A template XML schema for creating content in PrestaShop's Content Management System. The schema includes fields for content metadata, SEO information, and multilingual content with support for multiple languages (shown with language IDs 1 and 2).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/content_management_system.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <content>\n    <id><![CDATA[]]></id>\n    <id_cms_category><![CDATA[]]></id_cms_category>\n    <position><![CDATA[]]></position>\n    <indexation><![CDATA[]]></indexation>\n    <active><![CDATA[]]></active>\n    <meta_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_description>\n    <meta_keywords>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_keywords>\n    <meta_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_title>\n    <head_seo_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </head_seo_title>\n    <link_rewrite>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </link_rewrite>\n    <content>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </content>\n  </content>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Data in PrestaShop 8 Using Backward Compatible Method\nDESCRIPTION: This method retrieves configuration data for a given key. Returns the data if it exists, or NULL otherwise.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/backward-compatibility.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nConfiguration::get(string $key): mixed\n```\n\n----------------------------------------\n\nTITLE: Creating URL List for Siege Benchmark in PrestaShop\nDESCRIPTION: This snippet shows a sample list of URLs to be used for benchmarking a PrestaShop shop with Siege. It includes various pages like the homepage, cart, best sellers, product pages, and search results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/front-office.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8080/\nhttp://localhost:8080/panier\nhttp://localhost:8080/meilleures-ventes\nhttp://localhost:8080/nouveaux-produits\nhttp://localhost:8080/promotions\nhttp://localhost:8080/men/1-1-hummingbird-printed-t-shirt.html#/1-taille-s/8-couleur-blanc\nhttp://localhost:8080/accessories/3-mug-the-best-is-yet-to-come.html\nhttp://localhost:8080/3-clothes\nhttp://localhost:8080/6-accessories\nhttp://localhost:8080/3-clothes?q=Prix-€-28-34\nhttp://localhost:8080/magasins\nhttp://localhost:8080/fournisseur\nhttp://localhost:8080/recherche?controller=search&s=sweater\nhttp://localhost:8080/2-accueil\n```\n\n----------------------------------------\n\nTITLE: Executing actionDispatcher Hook in PrestaShop PHP\nDESCRIPTION: This snippet shows how PrestaShop's Dispatcher class executes the 'actionDispatcher' hook, enabling modules to hook into front office request handling. The method 'Hook::exec' is called, passing the hook name and a parameters array, which may include request context and other details for modules to act upon. Dependency on PrestaShop's Hook system is required; the snippet outputs no direct result but triggers registered module callbacks for this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDispatcher.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionDispatcher', $params_hook_action_dispatcher)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Category in PrestaShop Back Office\nDESCRIPTION: Defines the section where this module will appear in PrestaShop's back office modules list.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->tab = 'front_office_features';\n```\n\n----------------------------------------\n\nTITLE: Implementing ImagePreviewType in PrestaShop Form\nDESCRIPTION: Example showing how to add an image preview field to a form builder. The code sets up a cover thumbnail field without a label using ImagePreviewType class. This creates a hidden input that can display an image without allowing direct user editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/image-preview-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('cover_thumbnail', ImagePreviewType::class, [\n    'label' => false,\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionOrderStatusPostUpdate Hook in PHP\nDESCRIPTION: This snippet defines the structure of the parameters passed to the actionOrderStatusPostUpdate hook. It includes the new and old order statuses as OrderState objects, and the order ID as an integer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderStatusPostUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'newOrderStatus' => (object) OrderState,\n  'oldOrderStatus' => (object) OrderState,\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductCoverage Hook in PHP\nDESCRIPTION: Example of how the actionProductCoverage hook is executed in PrestaShop. The hook passes product ID, product attribute ID, and warehouse information as parameters to handle product coverage functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductCoverage.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionProductCoverage',\n                    [\n                        'id_product' => $id_product,\n                        'id_product_attribute' => $id_product_attribute,\n                        'warehouse' => $warehouse,\n                    ]\n            )\n```\n\n----------------------------------------\n\nTITLE: Calling displayMyAccountBlock Hook in PrestaShop Theme\nDESCRIPTION: Example of how to call the displayMyAccountBlock hook within a PrestaShop theme template file. This hook is used to display the My Account block in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayMyAccountBlock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayMyAccountBlock'}\n```\n\n----------------------------------------\n\nTITLE: Using DeleteLanguageCommand Class in PrestaShop Core Domain (PHP)\nDESCRIPTION: The DeleteLanguageCommand is used to delete languages in PrestaShop. It requires a language ID parameter in its constructor and returns void when executed. The command is handled by DeleteLanguageHandler which implements DeleteLanguageHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/delete-language-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\DeleteLanguageCommand\n```\n\n----------------------------------------\n\nTITLE: Defining AddContactCommand Class in PHP for PrestaShop Contact Management\nDESCRIPTION: The AddContactCommand class is used to add contact data in PrestaShop. It requires localized titles and a flag for message saving. The command is handled by AddContactHandler and returns a ContactId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/contact/_partials/add-contact-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Command\\AddContactCommand\n```\n\n----------------------------------------\n\nTITLE: Initializing IpInput JavaScript Component\nDESCRIPTION: Demonstrates how to import and initialize the IpInput JavaScript component which enables automatic IP address insertion functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/ip-address.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport IpInput from 'admin-dev/themes/new-theme/js/maintenance-page/ip-input';\n\n// initialize the component\nIpInput.init();\n```\n\n----------------------------------------\n\nTITLE: Executing actionUpdateLangAfter Hook in PHP\nDESCRIPTION: Hook execution code that runs after a language update operation. Takes a language object parameter to provide context about the updated language.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionUpdateLangAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionUpdateLangAfter', ['lang' => $language])\n```\n\n----------------------------------------\n\nTITLE: Warning Notice for Secure Key Usage in PrestaShop\nDESCRIPTION: This snippet is a Markdown notice cautioning against using the secure_key for custom module authentication, advising to use a separate identification token instead.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/users.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% notice warning %}}\nIf your module needs to be able to authenticate users without using login and password, please do not use the secure_key but your own identification token. The secure_key must remain a data internal to PrestaShop. Consider it a private key, not to be shared, but that can be used to validate a public key.\n{{% /notice %}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Bootstrap for Module in PHP\nDESCRIPTION: Indicates that the module's template files are built with PrestaShop 1.6+ bootstrap tools. This affects how PrestaShop handles the configuration screen template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->bootstrap = true;\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Request Entities in PrestaShop Core Domain\nDESCRIPTION: The AddSqlRequestCommand creates new SqlRequest entities with provided name and SQL query. It's handled by AddSqlRequestHandler which implements AddSqlRequestHandlerInterface and returns a SqlRequestId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/add-sql-request-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Command\\AddSqlRequestCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing BulkToggleCurrenciesStatus Command in PHP\nDESCRIPTION: Command class for toggling the status of multiple currencies simultaneously. Takes an array of currency IDs and expected status boolean as constructor parameters. Returns void and is handled by BulkToggleCurrenciesStatusHandler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/bulk-toggle-currencies-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\BulkToggleCurrenciesStatusCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\BulkToggleCurrenciesStatusHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\BulkToggleCurrenciesStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Resource from PrestaShop API\nDESCRIPTION: Example of the XML response when retrieving a specific address resource. The response contains all details of the address including customer information, location data, and timestamps.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <address>\n        <id><![CDATA[1]]></id>\n        <id_customer xlink:href=\"http://example.com/api/customers/1\"><![CDATA[1]]></id_customer>\n        <id_manufacturer><![CDATA[0]]></id_manufacturer>\n        <id_supplier><![CDATA[0]]></id_supplier>\n        <id_warehouse><![CDATA[0]]></id_warehouse>\n        <id_country xlink:href=\"http://example.com/api/countries/8\"><![CDATA[8]]></id_country>\n        <id_state><![CDATA[0]]></id_state>\n        <alias><![CDATA[Mon adresse]]></alias>\n        <company><![CDATA[My Company]]></company>\n        <lastname><![CDATA[DOE]]></lastname>\n        <firstname><![CDATA[John]]></firstname>\n        <vat_number></vat_number>\n        <address1><![CDATA[16, Main street]]></address1>\n        <address2><![CDATA[2nd floor]]></address2>\n        <postcode><![CDATA[75002]]></postcode>\n        <city><![CDATA[Paris ]]></city>\n        <other></other>\n        <phone><![CDATA[0102030405]]></phone>\n        <phone_mobile></phone_mobile>\n        <dni></dni>\n        <deleted><![CDATA[0]]></deleted>\n        <date_add><![CDATA[2019-01-15 22:46:55]]></date_add>\n        <date_upd><![CDATA[2019-01-15 22:46:55]]></date_upd>\n    </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Executing actionFrontControllerInitAfter Hook in PrestaShop FrontController PHP\nDESCRIPTION: This PHP snippet demonstrates how the `actionFrontControllerInitAfter` hook is executed using the `Hook::exec` method within PrestaShop's `FrontController`. It passes the current controller instance (`$this`) in the parameters array, enabling hooked modules to access controller properties and methods after initialization. This hook allows performing actions right after any front office controller is set up.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerInitAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec(\n            'actionFrontControllerInitAfter',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n```\n\n----------------------------------------\n\nTITLE: Using ToggleManufacturerStatusCommand Class in PrestaShop Core\nDESCRIPTION: The ToggleManufacturerStatusCommand class toggles a manufacturer's status. It requires a manufacturer ID and the expected status to set. The command is handled by ToggleManufacturerStatusHandler which implements the ToggleManufacturerStatusHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/toggle-manufacturer-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\ToggleManufacturerStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Update Assistant CLI using PHP\nDESCRIPTION: The 'bin/console' serves as the main entry point for executing Update Assistant CLI commands. Executing it without parameters lists all available commands and options. This setup maximizes compatibility with CI/CD systems by executing commands such as version checks or backups.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console\n\nUsage:\n\tcommand [options] [arguments]\n\t\nOptions:\n\t-h, --help                            Display this help message\n\t-q, --quiet                           Do not output any message\n\t-V, --version                         Display this application version\n\t--ansi                                Force ANSI output\n\t--no-ansi                             Disable ANSI output\n\t-n, --no-interaction                  Do not ask any interactive question\n\t-v|vv|vvv, --verbose                  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n\thelp                                  Displays help for a command\n\tlist                                  List commands\nbackup\n\tbackup:create                         Create backup.\n\tbackup:list                           List existing backups.\n\tbackup:restore                        Restore your store.\n\tbackup:delete                         Remove a backup not anymore needed.\nupdate\n\tupdate:check-new-version              Display the version the store can update to.\n\tupdate:check-requirements             Check all prerequisites for an update.\n\tupdate:start                          Update your store.\n```\n\n----------------------------------------\n\nTITLE: Enabling Customers in Bulk - PrestaShop PHP\nDESCRIPTION: The `BulkEnableCustomerCommand` is used to toggle the enabled status of multiple customers. It requires an array of customer IDs and interfaces with the `BulkEnableCustomerHandler` to execute the action. The command ensures that all specified customers are enabled as a batch operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/bulk-enable-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\nnamespace PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Customer\\\\Command;\\n\\nuse PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Customer\\\\CommandHandler\\\\BulkEnableCustomerHandlerInterface;\\n\\n/**\\n * Enables customers in bulk action.\\n */\\nclass BulkEnableCustomerCommand\\n{\\n    /**\\n     * @var array\\n     */\\n    private $customerIds;\\n\\n    /**\\n     * Constructor.\\n     *\\n     * @param array $customerIds\\n     */\\n    public function __construct(array $customerIds)\\n    {\\n        $this->customerIds = $customerIds;\\n    }\\n\\n    /**\\n     * Get CustomerIds.\\n     *\\n     * @return array\\n     */\\n    public function getCustomerIds()\\n    {\\n        return $this->customerIds;\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring .htaccess Rules for Extended Image Support in PrestaShop\nDESCRIPTION: Extended .htaccess rewrite rules to support more than 9,999,999 images in PrestaShop. These rules handle URL rewriting for product images based on numerical IDs, allowing for proper image path resolution beyond the default limitation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/image.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nRewriteCond %{HTTP_HOST} ^www.my-domain.com$\nRewriteRule ^0([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/0/$1/$2/$3/$4/$5/$6/$7/0$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^1([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/1/$1/$2/$3/$4/$5/$6/$7/1$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^2([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/2/$1/$2/$3/$4/$5/$6/$7/2$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^3([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/3/$1/$2/$3/$4/$5/$6/$7/3$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^4([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/4/$1/$2/$3/$4/$5/$6/$7/4$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^5([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/5/$1/$2/$3/$4/$5/$6/$7/5$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^6([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/6/$1/$2/$3/$4/$5/$6/$7/6$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^7([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/7/$1/$2/$3/$4/$5/$6/$7/7$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^8([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/8/$1/$2/$3/$4/$5/$6/$7/8$1$2$3$4$5$6$7$8$9.jpg [L]\nRewriteRule ^9([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/9/$1/$2/$3/$4/$5/$6/$7/9$1$2$3$4$5$6$7$8$9.jpg [L]\n```\n\n----------------------------------------\n\nTITLE: Parameters for actionValidateStepComplete Hook in PHP\nDESCRIPTION: This code snippet shows the parameters array passed to the actionValidateStepComplete hook during the delivery step of checkout. It includes the step name, request parameters, and a reference to the completion status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateStepComplete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    <?php\n    array(\n      'step_name' => 'delivery',\n      'request_params' => $requestParams,\n      'completed' => &$isComplete,\n    );\n```\n\n----------------------------------------\n\nTITLE: Calling displayCartModalFooter Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayCartModalFooter hook in a PrestaShop template. It passes the current product as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCartModalFooter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCartModalFooter' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameter for DeleteCarrierCommand in PrestaShop PHP\nDESCRIPTION: Indicates the constructor parameter required for the `DeleteCarrierCommand`. An integer representing the unique identifier (`$carrierId`) of the carrier to be deleted must be provided when instantiating this command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/carrier/_partials/delete-carrier-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$int $carrierId\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Start Parameter for CSV Export in PHP\nDESCRIPTION: Demonstrates how to manually set the starting point for data retrieval in a chunked CSV export.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($dataCallback)\n    ->setStart($start)\n    ->setLimit($limit)\n```\n\n----------------------------------------\n\nTITLE: Specifying the UpdateCombinationDetailsCommand Constructor Parameter (PHP)\nDESCRIPTION: Defines the necessary parameter for the `UpdateCombinationDetailsCommand` constructor. It requires an integer representing the `$combinationId` of the product combination to be updated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-details-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $combinationId`\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderProductCommand Class in PrestaShop Order Domain\nDESCRIPTION: This defines the fully qualified class name for the CancelOrderProductCommand which is responsible for cancelling order products. It resides in the Core Domain Order Command namespace.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/cancel-order-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\CancelOrderProductCommand\n```\n\n----------------------------------------\n\nTITLE: Using DeleteCategoryCommand in PrestaShop Core\nDESCRIPTION: The DeleteCategoryCommand class is used to delete a specified category. It requires a category ID and deletion mode, and is handled by the DeleteCategoryHandler class which implements the DeleteCategoryHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/delete-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\DeleteCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Updated Behat Scenario with New Step for Free Shipping in YAML\nDESCRIPTION: Complete Behat scenario in YAML format, including the newly added step for removing carrier handling costs. This scenario tests the behavior of a free shipping voucher in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nScenario: With free shipping voucher, there is no shipping fees\n  # Start with an empty cart\n  Given I have an empty default cart\n  # We need a product\n  And there is a product in the catalog named \"product1\" with a price of 50.0 and 1000 items in stock\n  # We define the standard PrestaShop localisation tree: zone > country > state > address\n  And there is a zone named \"North America\"\n  And there is a country named \"country1\" and iso code \"US\" in zone \"North America\"\n  And there is a state named \"state1\" with iso code \"TEST-1\" in country\"country1\" and zone \"North America\"\n  And there is an address named \"address1\" with postcode \"1\" in state \"state1\"\n  # We need a carrier with shipping fees\n  Given there is a carrier named \"carrier1\"\n  Given the carrier \"carrier1\" has no handling costs\n  And carrier \"carrier1\" applies shipping fees of 5.0 in zone \"North America\" for price between 0 and 150\n  # Create the voucher\n  Given there is a cart rule named \"free4behat\" that applies no discount with priority 4, quantity of 1000 and quantity per user 1000\n  And cart rule \"free4behat\" offers free shipping\n  And cart rule \"free4behat\" has a discount code \"free4behat\"\n  When I add 1 items of product \"product1\" in my cart\n  # 55 because product = 50 € + 5 € (carrier shipping fees)\n  Then my cart total should be 55.0 tax excluded\n  When I use the discount \"free4behat\"\n  Then my cart total should be 50.0 tax included\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation in Twig Template\nDESCRIPTION: Shows how the displayAdminOrderSideBottom hook is rendered in the PrestaShop admin order view template, passing the order ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderSideBottom.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrderSideBottom', {'id_order': orderForViewing.id}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Review Controller\nDESCRIPTION: Implementation of controller to handle toggle actions for the customer review status column.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace DemoCQRSHooksUsage\\Controller\\Admin;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\n\nclass CustomerReviewController extends FrameworkBundleAdminController\n{\n    public function toggleIsAllowedForReviewAction($customerId)\n    {\n        //  updating reviewer state can be handled here\n        return $this->redirectToRoute('admin_customers_index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Form Modifier as a Service in Symfony\nDESCRIPTION: Service definition for a FormModifier in YAML, making it available for dependency injection. This enables the modifier to be autowired and accessed through the container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    PrestaShop\\Module\\DemoProductForm\\Form\\Modifier\\ProductFormModifier:\n        autowire: true\n        public: true\n        arguments:\n            $formBuilderModifier: '@form.form_builder_modifier'\n```\n\n----------------------------------------\n\nTITLE: Dispatching PrestaShop Form Update Hook in PHP\nDESCRIPTION: Code showing how the actionBeforeUpdate hook is dispatched with form data parameters. The hook name is dynamically generated using the camelized form name. It passes the form data by reference and the form ID as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionBeforeUpdate<FormName>FormHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionBeforeUpdate' . Container::camelize($form->getName()) . 'FormHandler', [\n            'form_data' => &$data,\n            'id' => $id,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Executing actionAttributeDelete Hook in PHP\nDESCRIPTION: This code snippet shows how the actionAttributeDelete hook is executed in PrestaShop when deleting an attribute. The hook passes the ID of the attribute being deleted as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeDelete', ['id_attribute' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: AddUnofficialCurrencyCommand Class Definition in PHP\nDESCRIPTION: This class is used to add an alternative currency in PrestaShop. It takes an ISO code, exchange rate, and enabled status as constructor parameters. The command is handled by AddUnofficialCurrencyHandler and returns a CurrencyId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/add-unofficial-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\AddUnofficialCurrencyCommand\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Language Restriction in PrestaShop\nDESCRIPTION: Complex SQL query example demonstrating how to join product tables with both shop and language restrictions for multilingual multistore setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/multistore.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT wp.`id_product`\n FROM `' . _DB_PREFIX_ . 'wishlist_product` wp\n LEFT JOIN `' . _DB_PREFIX_ . 'product` p ON p.`id_product` = wp.`id_product`\n ' . Shop::addSqlAssociation('product', 'p') . '\n LEFT JOIN `' . _DB_PREFIX_ . 'product_lang` pl ON pl.`id_product` = wp.`id_product`' . Shop::addSqlRestrictionOnLang('pl') . '\n WHERE pl.`id_lang` = ' . (int) $id_lang;\n```\n\n----------------------------------------\n\nTITLE: Handling Cart Product Price Update - PrestaShop PHP Handler\nDESCRIPTION: The UpdateProductPriceInCartHandler class is responsible for handling the command that updates the product's price in a cart. It implements the UpdateProductPriceInCartHandlerInterface, ensuring conformity to PrestaShop's domain command handling pattern. It receives parameters from the command instance and applies business logic for price updates, with no return value. Dependencies include adherence to PrestaShop's handler structure and correct implementation of the required interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-product-price-in-cart-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\UpdateProductPriceInCartHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\CommandHandler\\UpdateProductPriceInCartHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Creating Shop and Shop URL in PrestaShop\nDESCRIPTION: PHP script demonstrating how to create a new shop and its corresponding URL using PrestaShop's web service API. The script checks for existing shops, creates a new shop with basic configuration, and sets up the shop URL.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-multishop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once('./vendor/autoload.php');\n\n$webServiceUrl = 'http://example.com/';\n$webServiceKey = 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT';\n$webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false);\n\n// Check shop presence\n$shopName = 'Additional shop';\n$searchedShop = $webService->get(['resource' => 'shops', 'filter[name]' => $shopName]);\n$shopId = null;\nif ($searchedShop->shops->shop->count() > 0) {\n    $shopId = (int) $searchedShop->shops->shop[0]->attributes()['id'];\n    echo 'Shop already exists' . PHP_EOL;\n    die(1);\n}\n\n// Create shop\n$blankXml = $webService->get(['url' => $webServiceUrl . 'api/shops?schema=blank']);\n$shopXml = $blankXml->shop[0];\n$shopXml->name = 'Additional shop';\n$shopXml->id_shop_group = 1;\n$shopXml->id_category = 2;\n$shopXml->theme_name = 'classic';\n$shopXml->active = 1;\n\n$createdShop = $webService->add(['resource' => 'shops', 'postXml' => $blankXml->asXML()]);\n$shopId = (int) $createdShop->shop->id;\necho 'Successfully created shop ' . $shopId . PHP_EOL;\n\n// Create shop url\n$blankXml = $webService->get(['url' => $webServiceUrl . 'api/shop_urls?schema=blank']);\n$shopUrlXml = $blankXml->shop_url[0];\n$shopUrlXml->id_shop = $shopId;\n$shopUrlXml->active = 1;\n$shopUrlXml->main = 1;\n$shopUrlXml->domain = 'example.com';\n$shopUrlXml->domain_ssl = 'example.com';\n$shopUrlXml->physical_uri = '/';\n$shopUrlXml->virtual_uri = '/additional';\n\n$createdShopUrl = $webService->add(['resource' => 'shop_urls', 'postXml' => $blankXml->asXML()]);\n$shopUrlId = (int) $createdShopUrl->shop_url->id;\necho 'Successfully created shop url ' . $shopUrlId . PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Implementing displayBeforeBodyClosingTag Hook in PrestaShop Templates\nDESCRIPTION: Hook call placed at the end of the page template to load modals or other content before the closing body tag. This hook is used in both classic and hummingbird themes for front office display.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBeforeBodyClosingTag.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayBeforeBodyClosingTag'}\n```\n\n----------------------------------------\n\nTITLE: Defining Doctrine Entity for Supplier Extra Image in PHP\nDESCRIPTION: This snippet defines the `SupplierExtraImage` class as a Doctrine ORM entity. It maps the class to the `ps_supplier_extra_image` database table (prefix handled by PrestaShop/Doctrine configuration). It includes properties (`id`, `supplierId`, `imageName`) with Doctrine ORM annotations (`@ORM\\Column`, `@ORM\\Id`, `@ORM\\GeneratedValue`) specifying their types and constraints. Standard getter and setter methods are provided for each property, allowing interaction with the entity's data. It also links to the `SupplierExtraImageRepository` for data access logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Table()\n * @ORM\\Entity(repositoryClass=\"PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository\\SupplierExtraImageRepository\")\n */\nclass SupplierExtraImage\n{\n    /**\n     * @var int\n     *\n     * @ORM\\Id\n     * @ORM\\Column(name=\"id_extra_image\", type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n\n    /**\n     * @ORM\\Column(name=\"id_supplier\", type=\"integer\")\n     */\n    private $supplierId;\n\n    /**\n     * @var string\n     *\n     * @ORM\\Column(type=\"string\")\n     */\n    private $imageName;\n\n    /**\n     * @return int\n     */\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param int $id\n     */\n    public function setId(int $id): void\n    {\n        $this->id = $id;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getSupplierId()\n    {\n        return $this->supplierId;\n    }\n\n    /**\n     * @param mixed $supplierId\n     */\n    public function setSupplierId($supplierId): void\n    {\n        $this->supplierId = $supplierId;\n    }\n\n    /**\n     * @return string\n     */\n    public function getImageName(): string\n    {\n        return $this->imageName;\n    }\n\n    /**\n     * @param string $imageName\n     */\n    public function setImageName(string $imageName): void\n    {\n        $this->imageName = $imageName;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blank Schema via PrestaShop Webservice API in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a blank schema for a customer resource using the PrestaShop Webservice API. It initializes the webservice connection and uses the get() method to fetch the blank schema.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/create-resource.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    // creating webservice access\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n \n    // call to retrieve the blank schema\n    $blankXml = $webService->get(['url' => 'http://example.com/api/customers?schema=blank']);\n} catch (PrestaShopWebserviceException $ex) {\n    // Shows a message related to the error\n    echo 'Other error: <br />' . $ex->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PrestaShop to Production Mode\nDESCRIPTION: PHP code snippet to set PrestaShop to production mode by modifying the _PS_MODE_DEV_ constant. This disables development features that can impact performance, such as template compilation and debugging information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nif (!defined('_PS_MODE_DEV_')) {\n    define('_PS_MODE_DEV_', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Hook::exec() Usage in PHP\nDESCRIPTION: A practical example of dispatching the 'actionModifyZoning' hook with an address ID parameter. The returned value will contain the concatenated results from all subscriber callbacks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/dispatching-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$id = Hook::exec('actionModifyZoning', ['address_id' => $addressID]);\n```\n\n----------------------------------------\n\nTITLE: Executing displayOrderConfirmation Hook in PHP\nDESCRIPTION: This snippet demonstrates how the displayOrderConfirmation hook is called in the origin file. It uses the Hook::exec method to execute the hook, passing the order object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderConfirmation.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('displayOrderConfirmation', ['order' => $order])\n```\n\n----------------------------------------\n\nTITLE: Handler Implementation for Language Editing in PrestaShop\nDESCRIPTION: This represents the handler class that processes language edit operations. It implements the EditLanguageHandlerInterface and is responsible for executing the logic when an EditLanguageCommand is dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/edit-language-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Language\\CommandHandler\\EditLanguageHandler\n```\n\n----------------------------------------\n\nTITLE: Executing actionModifyFrontendSitemap Hook in PrestaShop\nDESCRIPTION: This snippet shows how the actionModifyFrontendSitemap hook is called in the core PrestaShop code. It passes the sitemap URLs as a reference parameter, allowing modules to modify the sitemap structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModifyFrontendSitemap.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n    'actionModifyFrontendSitemap',\n    ['urls' => &$sitemapUrls],\n    null,\n    false,\n    true,\n    false,\n    null,\n    true\n);\n```\n\n----------------------------------------\n\nTITLE: Bulk Toggle Cart Rule Status Handler Specification – PrestaShop Adapter – PHP\nDESCRIPTION: Specifies the handler class (BulkToggleCartRuleStatusHandler) and interface (BulkToggleCartRuleStatusHandlerInterface) responsible for processing the bulk toggle command. This relationship follows the PrestaShop command/handler pattern (CQRS), where a handler receives the command with required parameters and applies business logic. Handlers require dependency injection of relevant repositories or services; expected input is an array of cart rule IDs and a boolean, with no return value. Usage presumes a properly configured PrestaShop installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/bulk-toggle-cart-rule-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CartRule\\CommandHandler\\BulkToggleCartRuleStatusHandler\n// Implements:\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\CommandHandler\\BulkToggleCartRuleStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Extensions for PrestaShop\nDESCRIPTION: Essential PHP configuration settings in php.ini file for PrestaShop functionality. Enables MySQL and GD extensions, and configures URL fopen settings for payment processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/system-requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nextension = php_mysql.dll\nextension = php_gd2.dll\nallow_url_fopen = On\nallow_url_include = Off\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Examples in PHP\nDESCRIPTION: Examples demonstrating how to filter API results using various operators\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/additional-list-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'customers',\n    'filter[id]'  => '[1|5]'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'customers',\n    'filter[id]'  => '[1,10]'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'customers',\n    'filter[firstname]' => '[John]'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'manufacturers',\n    'filter[name]' => '[appl]%'\n];\n```\n\n----------------------------------------\n\nTITLE: Executing dashboardZoneOne Hook in AdminDashboardController\nDESCRIPTION: This snippet shows how the dashboardZoneOne hook is called in the AdminDashboardController. It passes parameters to modules that might be listening to this hook to render content in the first zone of the dashboard.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/dashboardZoneOne.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('dashboardZoneOne', $params)\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameter for Required Address Fields (PHP)\nDESCRIPTION: Shows the constructor parameter for the `SetRequiredFieldsForAddressCommand`. It accepts an array `$requiredFields` which contains the list of fields that must be provided when creating a new address. This parameter is essential for initializing the command object with the necessary data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/set-required-fields-for-address-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$array $requiredFields\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: This snippet demonstrates how to execute the 'actionDownloadAttachment' hook in PrestaShop. The hook is used to handle the process of downloading an attachment in the front office. The `attachment` parameter is passed by reference, allowing direct manipulation of the attachment data. This is part of the core PrestaShop functionality and does not require additional dependencies, but knowledge of the PrestaShop context is essential.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDownloadAttachment.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionDownloadAttachment', ['attachment' => &$attachment])\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Templates\nDESCRIPTION: Advanced example showing how to handle variable interpolation in translated strings using sprintf functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_5\n\nLANGUAGE: smarty\nCODE:\n```\n{if !isset($my_module_name) || !$my_module_name}\n  {capture name='my_module_tempvar'}{l s='World' mod='mymodule'}{/capture}\n  {assign var='my_module_name' value=$smarty.capture.my_module_tempvar}\n{/if}\n{l s='Hello %s!' sprintf=[$my_module_name] mod='mymodule'}\n```\n\n----------------------------------------\n\nTITLE: Demo Mode Restriction Example in PrestaShop Controller\nDESCRIPTION: Shows how to implement demo mode restrictions using DemoRestricted annotation to limit functionality when demo mode is enabled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\n\n/**\n * @DemoRestricted(\"route_to_be_redirected\",\n *     message=\"You can't do this when demo mode is enabled.\",\n *     domain=\"Admin.Global\"\n * )\n *\n */\npublic function fooAction(Request $request) {\n    // do something here  \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Template Variables in PrestaShop FrontController.php\nDESCRIPTION: This code snippet shows how PrestaShop sets up global variables that are available to all Smarty templates in the front office. These variables include cart information, currency data, customer details, language settings, page data, shop information, and various URLs and configuration values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/variables.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$templateVars = [\n    'cart' => $this->cart_presenter->present($cart),\n    'currency' => $this->getTemplateVarCurrency(),\n    'customer' => $this->getTemplateVarCustomer(),\n    'language' => $this->objectPresenter->present($this->context->language),\n    'page' => $this->getTemplateVarPage(),\n    'shop' => $this->getTemplateVarShop(),\n    'core_js_public_path' => $this->getCoreJsPublicPath(),\n    'urls' => $this->getTemplateVarUrls(),\n    'configuration' => $this->getTemplateVarConfiguration(),\n    'field_required' => $this->context->customer->validateFieldsRequiredDatabase(),\n    'breadcrumb' => $this->getBreadcrumb(),\n    'link' => $this->context->link,\n    'time' => time(),\n    'static_token' => Tools::getToken(false),\n    'token' => Tools::getToken(),\n    'debug' => _PS_MODE_DEV_,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Form in PrestaShop PHP Controller\nDESCRIPTION: This snippet demonstrates how to configure a legacy form in a PrestaShop controller. It sets up a form for configuring log email settings, including field definitions and submission options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$this->fields_options = array(\n    'general' => array(\n        'title' => $this->trans('Logs by email', array(), 'Admin.Advparameters.Feature'),\n        'icon' => 'icon-envelope',\n        'fields' => array(\n            'PS_LOGS_BY_EMAIL' => array(\n                'title' => $this->trans('Minimum severity level', array(), 'Admin.Advparameters.Feature'),\n                'hint' => $this->trans('Enter \"5\" if you do not want to receive any emails.', array(), 'Admin.Advparameters.Help'),\n                'cast' => 'intval',\n                'type' => 'text',\n            ),\n        ),\n        'submit' => array('title' => $this->trans('Save', array(), 'Admin.Actions')),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Entry Point for Tax Page\nDESCRIPTION: This JavaScript snippet shows how to add an entry point for the tax page in the Webpack configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: {\n    ### adding taxes page entry point\n    tax: './js/pages/tax',\n  },\n  output: {\n    path: path.resolve(__dirname, '../public'),\n    filename: '[name].bundle.js',\n  }, \n```\n\n----------------------------------------\n\nTITLE: Deleting Database Rows\nDESCRIPTION: Shows how to delete rows from a database table with conditions and limits.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/** @var bool $result */\n$result = $db->delete('db_table', 'id_table = 10');\n```\n\n----------------------------------------\n\nTITLE: Executing actionControllerInitBefore Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet demonstrates how the `actionControllerInitBefore` hook is executed within the PrestaShop core, specifically in `classes/controller/Controller.php`. It uses the static `Hook::exec` method to trigger the hook, passing the hook name and an associative array containing the current controller instance (`$this`) as parameters. This allows modules to intervene before the controller's main initialization process begins.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionControllerInitBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec(\n            'actionControllerInitBefore',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n```\n\n----------------------------------------\n\nTITLE: Calling displayWrapperBottom Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayWrapperBottom hook in a PrestaShop theme template. The hook allows for inserting content at the bottom of the main wrapper section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayWrapperBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayWrapperBottom'}\n```\n\n----------------------------------------\n\nTITLE: Translating Text in Smarty Templates\nDESCRIPTION: Illustrates the use of the `{l}` Smarty function for translating text within templates. The first example uses the modern translation system with a domain. The second example shows translation with placeholder replacement using `sprintf`. The third example demonstrates the legacy translation system using the `mod` parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: smarty\nCODE:\n```\n{l s=\"This is a text\" d=\"Admin.Shipping.Feature\"}\n```\n\nLANGUAGE: smarty\nCODE:\n```\n{l s=\"This is a text with a %s\" d=\"Admin.Shipping.Feature\" sprintf=[$replacement]}\n```\n\nLANGUAGE: smarty\nCODE:\n```\n{l s=\"This is a legacy text\" mod=\"somemodule\"}\n```\n\n----------------------------------------\n\nTITLE: Storing Multilanguage Configuration Data in PrestaShop 8\nDESCRIPTION: This code snippet demonstrates how to store configuration data in multiple languages using an array indexed by language ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/backward-compatibility.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n[\n    123 => 'Value in some language',\n    456 => 'Value in some other language',\n]\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Country Blank XML Schema\nDESCRIPTION: A blank XML schema template for the Country resource in PrestaShop. This template can be used for API requests or responses when working with country data, showing all available fields including multilanguage name support.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/countries.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <country>\n    <id><![CDATA[]]></id>\n    <id_zone><![CDATA[]]></id_zone>\n    <id_currency><![CDATA[]]></id_currency>\n    <call_prefix><![CDATA[]]></call_prefix>\n    <iso_code><![CDATA[]]></iso_code>\n    <active><![CDATA[]]></active>\n    <contains_states><![CDATA[]]></contains_states>\n    <need_identification_number><![CDATA[]]></need_identification_number>\n    <need_zip_code><![CDATA[]]></need_zip_code>\n    <zip_code_format><![CDATA[]]></zip_code_format>\n    <display_tax_label><![CDATA[]]></display_tax_label>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </country>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Executing sendMailAlterTemplateVars Hook in PHP\nDESCRIPTION: This snippet shows how the sendMailAlterTemplateVars hook is called within the Mail class. It passes the template name and template variables to the hook, allowing modules to modify the template variables before an email is sent.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/sendMailAlterTemplateVars.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'sendMailAlterTemplateVars',\n            [\n                'template' => $template,\n                'template_vars' => &$templateVars,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining the IssueStandardRefundCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for initiating a standard refund process for a given order in PrestaShop. This command encapsulates the necessary data for the refund operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-standard-refund-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\IssueStandardRefundCommand\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Query Class Path\nDESCRIPTION: Fully qualified namespace path for the query class that handles CMS page category parent ID retrieval.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-parent-category-id-for-redirection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Query\\GetCmsPageParentCategoryIdForRedirection\n```\n\n----------------------------------------\n\nTITLE: Adapting Theme to RTL Languages via PrestaShop Domain Command - PHP\nDESCRIPTION: Defines the AdaptThemeToRTLLanguagesCommand class used to adapt a theme to RTL languages in PrestaShop. This command must be constructed with a ThemeName value object, which specifies the theme to be processed. The command is handled by AdaptThemeToRTLLanguagesHandler, implementing the corresponding handler interface, and it is expected to return void. This snippet is typically used within PrestaShop's CQRS architecture for theme customization processes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/theme/_partials/adapt-theme-to-rtllanguages-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Theme\\Command\\AdaptThemeToRTLLanguagesCommand\n// Class AdaptThemeToRTLLanguagesCommand adapts given theme to RTL languages.\n\n// Constructor parameters:\n//   $PrestaShop\\PrestaShop\\Core\\Domain\\Theme\\ValueObject\\ThemeName $themeName\n\n// Handler class:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Theme\\CommandHandler\\AdaptThemeToRTLLanguagesHandler\n//   Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Theme\\CommandHandler\\AdaptThemeToRTLLanguagesHandlerInterface\n\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveAllCustomizationFieldsFromProductHandler in PHP\nDESCRIPTION: This code snippet shows the handler class for the RemoveAllCustomizationFieldsFromProductCommand. It implements the RemoveAllCustomizationFieldsFromProductHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-customization-fields-from-product-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Customization\\CommandHandler\\RemoveAllCustomizationFieldsFromProductHandler\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAdminLoginControllerBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminLoginControllerBefore hook is called in the AdminLoginController.php file. The hook passes the controller instance as a parameter to all hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminLoginControllerBefore',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Backing up PrestaShop Files with Rsync Command\nDESCRIPTION: Command to synchronize PrestaShop files from remote server to local machine using rsync with archive mode and compression. Requires SSH access.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/backup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrsync -avz user@host:/var/www/prestashop_folder_path /local_path_for_backup/\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: The code snippet illustrates the execution of the productSearchProvider hook using the Hook::exec method in PHP. This is part of the PrestaShop codebase, used to trigger custom actions registered under the productSearchProvider hook with a provided query parameter. The snippet assumes that an environment capable of running PrestaShop code is in place, with proper configuration of hooks within the system. The key parameter is the 'query', which is passed to the hook for further processing. This approach allows for the extension and customization of product search functionality within the PrestaShop platform.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/productSearchProvider.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec(\n            'productSearchProvider',\n            ['query' => $query],\n            null,\n            true\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing ToggleCartRuleStatusHandler in PHP\nDESCRIPTION: This code snippet shows the handler class for the ToggleCartRuleStatusCommand. It implements the ToggleCartRuleStatusHandlerInterface and is responsible for executing the toggle action.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/toggle-cart-rule-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CartRule\\CommandHandler\\ToggleCartRuleStatusHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Image Types in YAML\nDESCRIPTION: This snippet demonstrates how to define image types with their dimensions and scope, which will replace existing image types when the theme is enabled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  global_settings:\n    image_types:\n      cart_default:\n        width: 80\n        height: 80\n        scope: [products]\n      small_default:\n        width: 125\n        height: 125\n        scope: [products, categories, manufacturers, suppliers]\n      medium_default:\n        width: 300\n        height: 300\n        scope: [products, categories, manufacturers, suppliers]\n      large_default:\n        width: 500\n        height: 500\n        scope: [products]\n      home_default:\n        width: 250\n        height: 250\n        scope: [products]\n      category_default:\n        width: 960\n        height: 350\n        scope: [categories]\n      product_listing:\n        width: 220\n        height: 220\n        scope: [products, categories, manufacturers, suppliers]\n      large_banner:\n        width: 960\n        height: 400\n        scope: [categories]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerThreadStatusCommand Class in PHP\nDESCRIPTION: This snippet defines the UpdateCustomerThreadStatusCommand class in the PrestaShop core domain for customer service. It takes a customer thread ID and a new status as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/update-customer-thread-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Command\\UpdateCustomerThreadStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Transform Guest To Customer Handler Implementation\nDESCRIPTION: Handler class that implements the business logic for transforming guest accounts to customer accounts in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/transform-guest-to-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\TransformGuestToCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Pack Product Removal Command Class\nDESCRIPTION: Command class responsible for removing all products from a specified pack. Takes a pack ID as constructor parameter and returns void. The command is handled by RemoveAllProductsFromPackHandler which implements RemoveAllProductsFromPackHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-products-from-pack-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Pack\\Command\\RemoveAllProductsFromPackCommand\n```\n\n----------------------------------------\n\nTITLE: Partial Object Updates in PHP\nDESCRIPTION: Demonstrates how to perform partial updates on an ObjectModel by specifying which fields to update.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$cms = new Cms(2); \n$cms->position = 4;\n$cms->active = 0;\n$cms->setFieldsToUpdate([\"position\" => true]);\n$cms->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$cms = new Cms(2); \n$cms->meta_title[1] = \"My awesome title\";\n$cms->meta_title[2] = \"Mon fabuleux titre\";\n$cms->setFieldsToUpdate(\n    [\n        \"meta_title\" => [\n            1 => true,\n            2 => false\n        ]\n    ]\n);\n$cms->save();\n```\n\n----------------------------------------\n\nTITLE: Executing the actionGetAlternativeSearchPanels Hook in PHP\nDESCRIPTION: This snippet shows how the 'actionGetAlternativeSearchPanels' hook is called within PrestaShop's core code using the static `Hook::exec` method. It passes the previously defined search panels (`$searchPanels`) and the searched expression (`$searchedExpression`) as parameters. The fourth argument `true` indicates that the hook expects modules to return an array, which will likely contain definitions for new search panels.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetAlternativeSearchPanels.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionGetAlternativeSearchPanels',\n            [\n                'previous_search_panels' => $searchPanels,\n                'bo_query' => $searchedExpression,\n            ],\n            null,\n            true\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleRegisterHookBefore Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionModuleRegisterHookBefore hook is executed in PrestaShop. It passes the module instance and hook name as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleRegisterHookBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionModuleRegisterHookBefore',\n                [\n                    'object' => $module_instance,\n                    'hook_name' => $hook_name,\n                ]\n            )\n```\n\n----------------------------------------\n\nTITLE: Defining AddFeatureCommand Class in PHP\nDESCRIPTION: The AddFeatureCommand class is part of the PrestaShop Core Domain and is used to add new features. It requires localized names and optional shop associations as constructor parameters. The command is handled by AddFeatureHandler and returns a FeatureId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/add-feature-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\Command\\AddFeatureCommand\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Dependencies in PHP\nDESCRIPTION: Lists other modules that this module depends on. PrestaShop checks these dependencies during installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->dependencies = ['ps_googleanalytics', 'productcomments'];\n```\n\n----------------------------------------\n\nTITLE: Product List JavaScript Components\nDESCRIPTION: TypeScript/JavaScript components handling product list rendering and pagination functionality on the order view page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/view-order/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nadmin-dev/themes/new-theme/js/pages/order/view/order-view-page.ts\nadmin-dev/themes/new-theme/js/pages/order/view/order-product-renderer.ts\nadmin-dev/themes/new-theme/js/pages/order/message/order-view-page-messages-handler.ts\n```\n\n----------------------------------------\n\nTITLE: Querying Multilingual Product Data in PrestaShop API\nDESCRIPTION: Examples of API calls to retrieve product data with specific language filters. Shows how to use the 'language' parameter to get translations for single languages, multiple languages, or language ranges.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/multilang-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n/api/products/19?language=3\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n/api/products/19?language=[1|5]\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n/api/products/19?language=[2,5]\n```\n\n----------------------------------------\n\nTITLE: Manual Loading of PrestaShop Webservice Library\nDESCRIPTION: PHP code demonstrating how to manually include the PrestaShop webservice library file when not using Composer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('./PSWebServiceLibrary.php');\n\n$webService = new PrestaShopWebservice(...);\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Class for DeleteCarrierCommand in PrestaShop PHP\nDESCRIPTION: Specifies the handler class responsible for processing the `DeleteCarrierCommand`. This class contains the logic to actually perform the carrier deletion based on the provided command object. It implements the `DeleteCarrierHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/carrier/_partials/delete-carrier-command.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Carrier\\CommandHandler\\DeleteCarrierHandler\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Carrier\\CommandHandler\\DeleteCarrierHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Format for Ajax Response in JavaScript\nDESCRIPTION: Demonstrates the expected JSON format for Ajax responses when using the table's structure or a custom structure in HelperList.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Using table's structure\n{\n  use_parent_structure: true,  // Optional.\n  data:                        // Here is the SQL result.\n  [\n    {field_name: 'value'}\n  ],\n  fields_display:              // $fieldsDisplay attribute for the AdminController.\n}\n\n// Using custom structure\n{\n    use_parent_structure: false,\n    data: '<p>My HTML content</p>'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network (Bash)\nDESCRIPTION: Illustrates the command to create a user-defined bridge network in Docker named `prestashop-net`. This network is required to allow communication between the PrestaShop and MySQL containers when running them without Docker Compose.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create prestashop-net\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zone via PrestaShop Command Pattern in PHP\nDESCRIPTION: This snippet highlights the DeleteZoneCommand class, which accepts a zoneId as a constructor parameter to identify the zone to be deleted. The command is handled by DeleteZoneHandler, implementing the DeleteZoneHandlerInterface, following the command-handler pattern in PrestaShop. No value is returned as the operation is void; the handler manages the deletion logic and relevant side effects. Dependencies include the PrestaShop domain zone classes and the handler implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/zone/_partials/delete-zone-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Zone\\Command\\DeleteZoneCommand`\n```\n\n----------------------------------------\n\nTITLE: Executing actionPasswordRenew Hook in PrestaShop Password Controller\nDESCRIPTION: This code executes the actionPasswordRenew hook when a customer resets their password. It passes the customer object and the new password as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPasswordRenew.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPasswordRenew', ['customer' => $customer, 'password' => $password])\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for DeleteSpecificPrice Command Handler in PrestaShop PHP\nDESCRIPTION: This indicates that the handler for the `DeleteSpecificPriceCommand` does not return any value upon successful execution. Its purpose is solely to perform the deletion action (a side effect).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-specific-price-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Implementing displayFooter Hook in PrestaShop Theme\nDESCRIPTION: Basic implementation of the displayFooter hook in a PrestaShop template. This hook allows modules to display new content blocks in the footer section of the storefront.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFooter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayFooter'}\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshExchangeRatesCommand Class in PHP\nDESCRIPTION: This code snippet defines the RefreshExchangeRatesCommand class within the PrestaShop core domain for currency operations. The class is used to initiate the refresh of exchange rates. It has no constructor parameters and is handled by the RefreshExchangeRatesHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/refresh-exchange-rates-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\RefreshExchangeRatesCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-store ObjectModel in PHP\nDESCRIPTION: Shows how to enable multi-store support for an ObjectModel and associate objects with stores.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic static $definition = [\n    ...\n    'multishop' => true,\n    ...\n```\n\nLANGUAGE: php\nCODE:\n```\n$cms->associateTo(1); // associates the object to the store #1\n...\n$cms->associateTo([1, 2, 4]); // associates the object to the stores #1, #2 and #4\n```\n\n----------------------------------------\n\nTITLE: Using MultistoreFeature Adapter in PHP\nDESCRIPTION: Demonstrates how to use the multistore feature adapter to check if multistore is enabled or used, and how to enable or disable the feature. The adapter is accessed via the service container with the identifier 'prestashop.adapter.feature.multistore'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/shop-context/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Get the multistore feature adapter from the service container\n$multistoreFeature = $this->get('prestashop.adapter.feature.multistore');\n\n// Is the multistore feature enabled?\n$isMultistoreEnabled = $multistoreFeature->isActive();\n\n// This will check that multistore is enabled AND that there are at least two active shops\n$isMultistoreUsed = $multistoreFeature->isUsed();\n\n// Disable / enable multistore feature\n$multistoreFeature->disable();\n$multistoreFeature->enable();\n\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Adding Product Images\nDESCRIPTION: HTML form example for uploading a new product image through the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form enctype=\"multipart/form-data\" method=\"POST\" action=\"http://ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT@example.com/api/images/products/1\">\n  <fieldset>\n    <legend>Add image for products No 1</legend>\n    <input type=\"file\" name=\"image\">\n    <input type=\"submit\" value=\"Execute\">\n  </fieldset>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for PrestaShop Customization Field\nDESCRIPTION: This XML schema defines the structure for a customization field in PrestaShop. It includes elements for ID, product ID, type, required status, module status, deletion status, and multilingual name fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_customization_fields.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <customization_field>\n    <id><![CDATA[]]></id>\n    <id_product><![CDATA[]]></id_product>\n    <type><![CDATA[]]></type>\n    <required><![CDATA[]]></required>\n    <is_module><![CDATA[]]></is_module>\n    <is_deleted><![CDATA[]]></is_deleted>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </customization_field>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining the GetAttributeGroupList Handler Interface Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetAttributeGroupListHandlerInterface` within the PrestaShop Core Domain. This interface defines the contract that the `GetAttributeGroupListHandler` class must implement.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-attribute-group-list.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\QueryHandler\\GetAttributeGroupListHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Implementing the displayAdminNavBarBeforeEnd Hook in Smarty Templates\nDESCRIPTION: The hook is called at the end of the navigation bar template in the PrestaShop back office. It allows modules to insert content before the end of the navigation bar component.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminNavBarBeforeEnd.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminNavBarBeforeEnd'}\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Data in PrestaShop 8 Using Backward Compatible Method\nDESCRIPTION: This method deletes configuration data for a given key across all shops. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/backward-compatibility.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nConfiguration::deleteByName(string $key)\n```\n\n----------------------------------------\n\nTITLE: Importing Themes in PrestaShop PHP\nDESCRIPTION: The ImportThemeCommand class is designed to import themes into PrestaShop from a provided source. It requires a ThemeImportSource object as a constructor parameter and utilizes the ImportThemeHandler class which implements the ImportThemeHandlerInterface for handling the command. It does not return a value as its return type is void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/theme/_partials/import-theme-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Theme\\Command\\ImportThemeCommand`\n```\n\n----------------------------------------\n\nTITLE: Using ChangeOrderCurrencyCommand Class in PrestaShop Order System (PHP)\nDESCRIPTION: The ChangeOrderCurrencyCommand accepts an order ID and new currency ID to change an order's currency. It's handled by the ChangeOrderCurrencyHandler which implements the ChangeOrderCurrencyHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/change-order-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\ChangeOrderCurrencyCommand\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation in Twig Template\nDESCRIPTION: Shows how the displayAdminGridTableAfter hook is called in the template file. It demonstrates the hook invocation with the grid object and controller information passed as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminGridTableAfter.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminGridTableAfter', {\n      'grid': grid,\n      'legacy_controller': app.request.attributes.get('_legacy_controller'),\n      'controller': app.request.attributes.get('_controller')\n    })\n}}\n```\n\n----------------------------------------\n\nTITLE: Executing 'actionModuleUninstallBefore' Hook in PrestaShop PHP\nDESCRIPTION: This code snippet shows how the 'actionModuleUninstallBefore' hook is executed in PrestaShop. It passes the current module object as a parameter to allow other modules or core code to perform actions before the module is uninstalled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleUninstallBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionModuleUninstallBefore', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Editing Order Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This PHP command allows for modifications to an address linked with an order. It interfaces with PrestaShop's command bus, requiring the order address ID and new data parameters. On execution, it persists the update and returns confirmation or errors as necessary, depending on input validation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// EditOrderAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Order\\Command;\n\n/**\n * Command for editing an order address\n */\nclass EditOrderAddressCommand\n{\n    private $addressId;\n    private $addressData;\n\n    public function __construct($addressId, array $addressData)\n    {\n        $this->addressId = $addressId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing PrestaShop API Root Response in XML\nDESCRIPTION: Example of the XML response when accessing the root API endpoint (/api/). Shows the available resources and their associated permissions for the authenticated access token.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <api shopName=\"Prestashop\">\n        <addresses xlink:href=\"http://example.com/api/addresses\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            <description xlink:href=\"http://example.com/api/addresses\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            The Customer, Brand and Customer addresses</description>\n            <schema xlink:href=\"http://example.com/api/addresses?schema=blank\" type=\"blank\"/>\n            <schema xlink:href=\"http://example.com/api/addresses?schema=synopsis\" type=\"synopsis\"/>\n        </addresses>\n    </api>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Query Handler Class Path\nDESCRIPTION: Fully qualified namespace path for the handler class that implements the query processing logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-parent-category-id-for-redirection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\QueryHandler\\GetCmsPageParentCategoryIdForRedirectionHandler\n```\n\n----------------------------------------\n\nTITLE: Determining Page Context Pre-1.7.7.0 Using Query Parameters in PrestaShop PHP\nDESCRIPTION: For PrestaShop versions below 1.7.7.0, this snippet checks if the order page is in create or view mode using query parameters. It's necessary since the order page has not yet migrated to Symfony and relies on these parameters for context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/hook-tips.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (Tools::getValue('addorder')) {\n    // this way we know this is order create page\n}\n\nif (Tools::getValue('vieworder')) {\n    // this way we know this is order view page\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerForEditingHandlerInterface in PHP\nDESCRIPTION: This code snippet defines the interface that the GetCustomerForEditingHandler must implement. It ensures that the handler class adheres to the required contract for processing the GetCustomerForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler\\GetCustomerForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying AddProductToCartCommand Return Type (PHP)\nDESCRIPTION: Indicates the return type of the handler processing the AddProductToCartCommand, which is `void` in PHP, meaning it does not return a value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-product-to-cart-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nvoid\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis via Docker - Bash\nDESCRIPTION: Runs PHPStan static analysis using the official Docker image, allowing execution regardless of local PHP or Composer configuration. Assumes Docker is installed and available, and that project files are accessible in the container. Options passed in brackets are placeholders to be replaced as needed (e.g., volume mounts, working directory).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm [...] phpstan/phpstan analyse \n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Write Query\nDESCRIPTION: Shows how to execute a raw SQL write query (INSERT, UPDATE, etc) with proper table prefix handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/db.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request = 'INSERT INTO `' . _DB_PREFIX_ . 'some_table` (`id_table`) VALUES (10)';\n\n/** @var bool $result */\n$result = $db->execute($request);\n```\n\n----------------------------------------\n\nTITLE: Defining EditEmployeeHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface implemented by the EditEmployeeHandler class. It defines the contract for handling edit employee commands in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/edit-employee-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\CommandHandler\\EditEmployeeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying ToggleCurrencyStatusHandler in PHP\nDESCRIPTION: This snippet specifies the handler class for the ToggleCurrencyStatusCommand. It implements the ToggleCurrencyStatusHandlerInterface and is responsible for executing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/toggle-currency-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\ToggleCurrencyStatusHandler\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration File for PrestaShop Development\nDESCRIPTION: Example of a TypeScript configuration file (tsconfig.json) for PrestaShop development. This configuration includes path aliases, compiler options, and type roots needed for proper TypeScript integration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/import-js.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"outDir\": \"./public/\",\n    \"noImplicitAny\": true,\n    \"module\": \"es6\",\n    \"target\": \"es5\",\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"allowJs\": true,\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@app/*\": [\"js/app/*\"],\n      \"@js/*\": [\"js/*\"],\n      \"@pages/*\": [\"js/pages/*\"],\n      \"@components/*\": [\"js/components/*\"],\n      \"@scss/*\": [\"scss/*\"],\n      \"@node_modules/*\": [\"node_modules/*\"],\n      \"@vue/*\": [\"js/vue/*\"],\n      \"@PSTypes/*\": [\"js/types/*\"]\n    },\n    \"typeRoots\": [\"js/types\", \"node_modules/@types\"]\n  },\n  \"ts-node\": {\n    \"compilerOptions\": {\n      \"module\": \"commonjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of PrestaShop Classic Theme\nDESCRIPTION: This code snippet shows the folder hierarchy and file organization of the Classic theme in PrestaShop. It illustrates the standard directory structure that serves as a reference for theme developers, including development files, assets, configuration, modules, plugins, and templates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-organization.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  .\n  ├── CONTRIBUTING.md\n  ├── README.md\n  ├── _dev\n  │   ├── css\n  │   │   └── ...\n  │   ├── js\n  │   │   └── ...\n  │   ├── package.json\n  │   └── webpack.config.js\n  ├── assets\n  │   ├── css\n  │   │   ├── ...\n  │   ├── img\n  │   │   └── ...\n  │   └── js\n  │       └── ...\n  ├── composer.json\n  ├── config\n  │   └── theme.yml\n  ├── modules\n  │   └── ...\n  ├── plugins\n  │   └── ...\n  ├── preview.png\n  └── templates\n      ├── _partials\n      │   └── ...\n      ├── catalog\n      │   ├── _partials\n      │   │   └── ...\n      │   ├── listing\n      │   │   └── ...\n      │   └── ...\n      ├── checkout\n      │   ├── _partials\n      │   │   └── ...\n      │   └── ...\n      ├── cms\n      │   ├── _partials\n      │   │   └── ...\n      │   └── ...\n      ├── contact.tpl\n      ├── customer\n      │   ├── _partials\n      │   │   └── ...\n      │   └── ...\n      ├── errors\n      │   ├── ...\n      │   └── static\n      │       └── ...\n      ├── index.tpl\n      ├── layouts\n      │   ├── layout-both-columns.tpl\n      │   ├── layout-content-only.tpl\n      │   ├── layout-error.tpl\n      │   ├── layout-full-width.tpl\n      │   ├── layout-left-side-column.tpl\n      │   └── layout-right-side-column.tpl\n      ├── page.tpl\n      └── wrapper.tpl\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllFeatureValuesFromProductCommand Class in PHP\nDESCRIPTION: This snippet defines the RemoveAllFeatureValuesFromProductCommand class in the PrestaShop core domain. It takes a product ID as a constructor parameter and is handled by the RemoveAllFeatureValuesFromProductHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-feature-values-from-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\Command\\RemoveAllFeatureValuesFromProductCommand\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: This code snippet demonstrates the execution of the `actionGetIDZoneByAddressID` hook in PrestaShop. It is used to retrieve the ID of a zone based on the provided address ID. The snippet is found within the Address.php class. No specific dependencies are mentioned, but it requires PrestaShop's hook system to be in place. The key parameter is 'id_address', which is used to identify the address. The output is expected to be the zone ID associated with this address. It is a core part of PrestaShop's hook execution system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetIDZoneByAddressID.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionGetIDZoneByAddressID', ['id_address' => $id_address])\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the UpdateCombinationStockHandler implements. It defines the contract for handling UpdateCombinationStockCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationStockHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: XML Schema for PrestaShop Cart Rule Resource\nDESCRIPTION: This XML schema template represents the structure for cart rules in PrestaShop. It includes all available fields for the cart_rule resource with empty CDATA sections to be populated when creating or updating a cart rule via the API. The schema supports multilingual values for the name field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/cart_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <cart_rule>\n    <id><![CDATA[]]></id>\n    <id_customer><![CDATA[]]></id_customer>\n    <date_from><![CDATA[]]></date_from>\n    <date_to><![CDATA[]]></date_to>\n    <description><![CDATA[]]></description>\n    <quantity><![CDATA[]]></quantity>\n    <quantity_per_user><![CDATA[]]></quantity_per_user>\n    <priority><![CDATA[]]></priority>\n    <partial_use><![CDATA[]]></partial_use>\n    <code><![CDATA[]]></code>\n    <minimum_amount><![CDATA[]]></minimum_amount>\n    <minimum_amount_tax><![CDATA[]]></minimum_amount_tax>\n    <minimum_amount_currency><![CDATA[]]></minimum_amount_currency>\n    <minimum_amount_shipping><![CDATA[]]></minimum_amount_shipping>\n    <country_restriction><![CDATA[]]></country_restriction>\n    <carrier_restriction><![CDATA[]]></carrier_restriction>\n    <group_restriction><![CDATA[]]></group_restriction>\n    <cart_rule_restriction><![CDATA[]]></cart_rule_restriction>\n    <product_restriction><![CDATA[]]></product_restriction>\n    <shop_restriction><![CDATA[]]></shop_restriction>\n    <free_shipping><![CDATA[]]></free_shipping>\n    <reduction_percent><![CDATA[]]></reduction_percent>\n    <reduction_amount><![CDATA[]]></reduction_amount>\n    <reduction_tax><![CDATA[]]></reduction_tax>\n    <reduction_currency><![CDATA[]]></reduction_currency>\n    <reduction_product><![CDATA[]]></reduction_product>\n    <reduction_exclude_special><![CDATA[]]></reduction_exclude_special>\n    <gift_product><![CDATA[]]></gift_product>\n    <gift_product_attribute><![CDATA[]]></gift_product_attribute>\n    <highlight><![CDATA[]]></highlight>\n    <active><![CDATA[]]></active>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </cart_rule>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Return Type for GetOrderForViewing Query (PHP)\nDESCRIPTION: Specifies the object type returned by the `GetOrderForViewing` query handler. The result is an instance of `OrderForViewing`, containing the detailed order data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-for-viewing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\QueryResult\\OrderForViewing\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminMetaSave Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the actionAdminMetaSave hook is dispatched in PrestaShop core after meta configuration is saved. The hook uses parameters but doesn't specify any return values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMetaSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionAdminMetaSave')\n```\n\n----------------------------------------\n\nTITLE: Specifying Constructor Parameter for UpdateProductPricesCommand in PHP\nDESCRIPTION: Defines the constructor parameter for the `UpdateProductPricesCommand`. It requires an integer `$productId` to identify the specific product whose prices are to be updated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-prices-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $productId`\n```\n\n----------------------------------------\n\nTITLE: PHP Product Search Query Class\nDESCRIPTION: Class that holds search query information including category ID, sort order, pagination, and results per page\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/faceted-search/inside-faceted-search-module.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Product\\Search\\ProductSearchQuery\n```\n\n----------------------------------------\n\nTITLE: Executing filterCmsContent Hook in PrestaShop CMS Controller\nDESCRIPTION: Implementation of the filterCmsContent hook which is called before fetching CMS content pages. The hook accepts a CMS object parameter and supports module filtering with various execution options including chain execution and shop-specific processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterCmsContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'filterCmsContent',\n                ['object' => $cmsVar],\n                $id_module = null,\n                $array_return = false,\n                $check_exceptions = true,\n                $use_push = false,\n                $id_shop = null,\n                $chain = true\n            )\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Attachment Entity via CQRS Pattern - PrestaShop PHP\nDESCRIPTION: This snippet summarizes the GetAttachment query and its associated metadata in PrestaShop. It documents the constructor that accepts an integer attachment ID, the corresponding handler implementing the interface, and the expected result type. Dependencies include the domain query class, handler, and result object; the typical input is an attachment ID, and the output is an Attachment result instance. Applies to PrestaShop's domain-driven design and CQRS implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attachment/_partials/get-attachment.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Query details              |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $attachmentId`</li> </ul> |\n| **Handler class**          | `PrestaShop\\\\PrestaShop\\\\Adapter\\\\Attachment\\\\QueryHandler\\\\GetAttachmentHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Attachment\\\\QueryHandler\\\\GetAttachmentHandlerInterface`</li>  |\n| **Return type** |  `PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Attachment\\\\QueryResult\\\\Attachment`  |\n```\n\n----------------------------------------\n\nTITLE: Defining SetCombinationImagesCommand Class in PrestaShop Domain (PHP)\nDESCRIPTION: This snippet describes the SetCombinationImagesCommand PHP class from the PrestaShop Core Domain layer, responsible for linking a specific product combination ID with an array of image IDs. It requires the constructor parameters $combinationId (int) and $imageIds (array), and is expected to be handled by a corresponding handler class that implements SetCombinationImagesHandlerInterface. The command returns void and is part of a command-handler structure, setting up a decoupled process for updating combination image associations in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-combination-images-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\SetCombinationImagesCommand\n\n// Constructor parameters:\n//   int $combinationId\n//   array $imageIds\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\SetCombinationImagesHandler\n//   Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\SetCombinationImagesHandlerInterface\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: Adding Tax with PrestaShop PHP\nDESCRIPTION: The AddTaxCommand is responsible for defining a command to add a new tax in the PrestaShop system. Its constructor requires parameters: an array of localized names ($localizedNames), a float for the tax rate ($rate), and a boolean to set the enabled status ($enabled). The command is handled by the AddTaxHandler class that implements the AddTaxHandlerInterface, and it does not return any value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/add-tax-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\Command\\AddTaxCommand`\n_Adds new tax_\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$array $localizedNames`</li>  <li>`$float $rate`</li>  <li>`$bool $enabled`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Tax\\CommandHandler\\AddTaxHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\CommandHandler\\AddTaxHandlerInterface`</li>  |\n| **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Shop Association in PrestaShop\nDESCRIPTION: SQL query example showing how to join product tables with proper shop association using Shop::addSqlAssociation().\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/multistore.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT wp.`id_product`\n FROM `' . _DB_PREFIX_ . 'wishlist_product` wp\n LEFT JOIN `' . _DB_PREFIX_ . 'product` p ON p.`id_product` = wp.`id_product`\n ' . Shop::addSqlAssociation('product', 'p');\n```\n\n----------------------------------------\n\nTITLE: Output of `formatNumber()` for 'en-US' Locale\nDESCRIPTION: Shows the expected output when `formatNumber()` is called with 1234.56 in an 'en-US' locale context. The output is a string representation generated by `var_dump`, showing the type, length, and formatted value with a comma as the thousands separator and a period as the decimal separator.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/locale.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nstring(8) \"1,234.56\"\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Routing Directory Structure\nDESCRIPTION: Shows the directory structure organization for routing configuration files in PrestaShop, including admin and API routes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.\n├── admin\n│   ├── _common.yml\n│   ├── configure\n│   │   ├── advanced_parameters\n│   │   ├── _configure.yml\n│   │   └── shop_parameters\n│   ├── improve\n│   │   ├── design\n│   │   ├── _improve.yml\n│   │   ├── international\n│   │   ├── modules\n│   │   ├── payment\n│   │   └── shipping\n│   ├── _security.yml\n│   ├── _errors.yml\n│   └── sell\n│       ├── catalog\n│       ├── orders\n│       ├── _sell.yml\n│       └── stocks.yml\n├── admin.yml\n├── api\n│   ├── attributes.yml\n│   ├── categories.yml\n│   ├── features.yml\n│   ├── i18n.yml\n│   ├── improve\n│   │   └── design\n│   ├── manufacturers.yml\n│   ├── stock_movements.yml\n│   ├── stocks.yml\n│   ├── suppliers.yml\n│   └── translations.yml\n└── api.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Filename for CSV Export in PHP\nDESCRIPTION: Shows how to set a specific filename for the CSV export using the setFilename method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($lines)\n    ->setFilename(\"my_awesome_export.csv\");\n```\n\n----------------------------------------\n\nTITLE: Defining CreateEmptyCustomerCartCommand Class in PHP\nDESCRIPTION: This code snippet defines the CreateEmptyCustomerCartCommand class in the PrestaShop core domain. It takes a customer ID as a constructor parameter and is handled by the CreateEmptyCustomerCartHandler class. The command returns a CartId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/create-empty-customer-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\CreateEmptyCustomerCartCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing displayModuleConfigureExtraButtons Hook in PrestaShop Templates\nDESCRIPTION: This code demonstrates how to call the displayModuleConfigureExtraButtons hook in a PrestaShop template file. The hook passes the module_name variable to allow for module-specific customization of the toolbar.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayModuleConfigureExtraButtons.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h=\"displayModuleConfigureExtraButtons\" module_name=$module_name}\n```\n\n----------------------------------------\n\nTITLE: Executing actionOverrideEmployeeImage Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionOverrideEmployeeImage hook is called in PrestaShop. It passes the employee object and a reference to the imageUrl variable, allowing for modification of the employee image URL.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOverrideEmployeeImage.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionOverrideEmployeeImage',\n            [\n                'employee' => $this,\n                'imageUrl' => &$imageUrl,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Up PrestaShop Production Environment\nDESCRIPTION: Shell commands to configure a PrestaShop installation for production use, including environment variables and cache clearing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nexport SYMFONY_ENV=prod\nexport SYMFONY_DEBUG=0\ncomposer dump-autoload --optimize\nphp bin/console cache:clear --env=prod --no-debug\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateProductPricesCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for updating product price information within the PrestaShop Core domain. This command encapsulates the data needed for the update operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-prices-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductPricesCommand`\n```\n\n----------------------------------------\n\nTITLE: Executing the actionFilterDeliveryOptionList Hook in PrestaShop Core (PHP)\nDESCRIPTION: This code shows the invocation of the `actionFilterDeliveryOptionList` hook within the PrestaShop core (specifically mentioned as being in `classes/Cart.php`) using `Hook::exec`. The delivery option list array (`$delivery_option_list`) is passed by reference (`&`) to allow hooked modules to modify it directly before it's used.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFilterDeliveryOptionList.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n    'actionFilterDeliveryOptionList',\n    [\n        'delivery_option_list' => &$delivery_option_list,\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Zones with PrestaShop Command Pattern - PHP\nDESCRIPTION: Defines the BulkDeleteZoneCommand for performing bulk deletion of zone entities in PrestaShop via the command pattern. Depends on an integer array of zone IDs as the constructor parameter; requires PrestaShop\\PrestaShop\\Adapter\\Zone\\CommandHandler\\BulkDeleteZoneHandler to process the command, which implements BulkDeleteZoneHandlerInterface. No output is returned (void); only modifies system state by deleting zones. Intended for use within PrestaShop's command bus events and handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/zone/_partials/bulk-delete-zone-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Zone\\Command\\BulkDeleteZoneCommand\n_Deletes zones on bulk action_\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$array $zoneIds`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Zone\\CommandHandler\\BulkDeleteZoneHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Zone\\CommandHandler\\BulkDeleteZoneHandlerInterface`</li>  |\n| **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: Executing actionFrontControllerSetVariables Hook in FrontController (PHP)\nDESCRIPTION: This snippet shows how the `actionFrontControllerSetVariables` hook is invoked within the PrestaShop core's `FrontController`. It uses the static `Hook::exec` method, passing the hook name and an array containing the `templateVars` array by reference. This allows hooked modules to modify the `templateVars` array directly. The `true` argument signifies that the hook expects array returns from implementations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerSetVariables.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionFrontControllerSetVariables',\n            [\n                'templateVars' => &$templateVars,\n            ],\n            null,\n            true\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Handler Class for GetOrderForViewing Query (PHP)\nDESCRIPTION: Identifies the handler class (`GetOrderForViewingHandler`) responsible for executing the `GetOrderForViewing` query. This handler implements the `GetOrderForViewingHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-for-viewing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\QueryHandler\\GetOrderForViewingHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nImplements: \\n<ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\QueryHandler\\GetOrderForViewingHandlerInterface`</li>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Mail Layout Variables Hook in PHP\nDESCRIPTION: Core implementation showing how the actionBuildMailLayoutVariables hook is dispatched with mail layout parameters. The hook allows modifying variables used for email layout rendering by passing the mail layout object and variables by reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionBuildMailLayoutVariables.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK,\n            [\n                'mailLayout' => $mailLayout,\n                'mailLayoutVariables' => &$mailLayoutVariables,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing DisplayHeader Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to execute the displayHeader hook in PrestaShop. The hook is called to add additional elements to the head section of HTML pages in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayHeader')\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectDeleteAfter Hook in PHP\nDESCRIPTION: This code snippet shows how the actionObjectDeleteAfter hook is executed in PrestaShop. The hook is triggered after an object is deleted and passes the deleted object as a parameter in an array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectDeleteAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectDeleteAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Defining the GetAttributeGroupList Handler Class Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetAttributeGroupListHandler` class within the PrestaShop Adapter layer. This class is responsible for executing the `GetAttributeGroupList` query and retrieving the data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-attribute-group-list.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\AttributeGroup\\QueryHandler\\GetAttributeGroupListHandler`\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hook for Listing Email Themes – PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how PrestaShop's ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK is dispatched with the 'mailThemes' parameter, enabling modules to respond by adding or removing available email themes and their layouts. No external dependencies are required besides PrestaShop's standard hook and event infrastructure; the key input is an associative array with the key 'mailThemes' and its value is expected to be a collection of mail theme objects. The snippet is used within PrestaShop's core to notify modules of available email themes. Output is determined by listeners to this hook and not by this dispatch itself.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionListMailThemes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK,\n            ['mailThemes' => $mailThemes]\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Route (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the routing for the search action in the manufacturers grid. It specifies the controller, method, and legacy information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# your-module/config/routes.yml\nadmin_manufacturers_search:\n  path: /\n  methods: POST\n  defaults:\n    _controller: 'PrestaShopBundle:Admin/Sell/Catalog/Manufacturer:search'\n    _legacy_controller: AdminManufacturers\n    _legacy_link: AdminManufacturers:submitFiltermanufacturer\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayCheckoutSummaryTop Hook in PrestaShop\nDESCRIPTION: Hook call to display new elements at the top of the cart summary section. This hook is used in the front office and doesn't return an array or check for exceptions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCheckoutSummaryTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCheckoutSummaryTop'}\n```\n\n----------------------------------------\n\nTITLE: Product Suppliers Handler Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the command handler class and its interface that implements the product suppliers update functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-suppliers-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Supplier\\CommandHandler\\SetProductSuppliersHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Build/Dev Scripts in package.json (JSON)\nDESCRIPTION: Defines custom npm scripts within the module's `_dev/package.json` file. The `build` script compiles the application without cleaning the output directory first. The `lint` script runs the linter with auto-fixing. The `dev` script runs a development build, also without cleaning, enables development mode, and watches for file changes to trigger recompilation automatically.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"build\": \"vue-cli-service build --no-clean\",\n    \"lint\": \"vue-cli-service lint --fix\",\n    \"dev\": \"vue-cli-service build --no-clean --mode development --watch\",\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectProductCommentValidateAfter Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionObjectProductCommentValidateAfter hook is called within the ProductComment module. It passes the current object as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectProductCommentValidateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectProductCommentValidateAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Physical Quantity Calculation Formula\nDESCRIPTION: Formula showing the relationship between physical quantity, available quantity, and reserved quantity in PrestaShop stock management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/stock.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nphysical_quantity = available_quantity + reserved_quantity;\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Address for Editing with PrestaShop Query Object (PHP)\nDESCRIPTION: This query object retrieves a customer's address for editing, providing all current address data in a form suitable for modification. It depends on PrestaShop's query bus and requires the customer address ID. Outputs include a structured array or DTO with address details, or an error if the address does not exist.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// GetCustomerAddressForEditing.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Query;\n\n/**\n * Query for retrieving customer address for editing\n */\nclass GetCustomerAddressForEditing\n{\n    private $addressId;\n\n    public function __construct($addressId)\n    {\n        $this->addressId = $addressId;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customer Edit Handler Interface Path\nDESCRIPTION: Interface implemented by the EditCustomerHandler for handling customer edit operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/edit-customer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\CommandHandler\\EditCustomerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing actionAttributeGroupDelete Hook in PHP\nDESCRIPTION: This snippet shows how the hook is called when an attribute group is deleted. It passes the ID of the deleted attribute group as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeGroupDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeGroupDelete', ['id_attribute_group' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Handler Interface (PHP)\nDESCRIPTION: This is the fully qualified name of the interface that the `EditCartAddressHandler` implements. It defines the contract for handling the `EditCartAddressCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\CommandHandler\\EditCartAddressHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining GetSpecificPriceForEditingHandlerInterface in PHP\nDESCRIPTION: This code snippet defines the interface that the GetSpecificPriceForEditingHandler must implement. It ensures that the handler provides the necessary methods to process the GetSpecificPriceForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-specific-price-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\QueryHandler\\GetSpecificPriceForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining AddRootCategoryCommand Class in PHP for PrestaShop\nDESCRIPTION: This class is part of PrestaShop's core domain for categories. It handles the addition of a new root category. The class requires an array for name, an array for link rewrite, and a boolean for active status as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/add-root-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\AddRootCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductStatusHandler Class (PHP)\nDESCRIPTION: This snippet shows the fully qualified class name (FQCN) for the handler responsible for processing the `UpdateProductStatusCommand` in PrestaShop's Adapter layer. This handler contains the logic to actually update the product status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductStatusHandler`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Upload Logos Command Handler Class in PrestaShop (PHP)\nDESCRIPTION: This snippet specifies the handler class responsible for processing the `UploadLogosCommand`. Located in the Adapter layer, this class contains the logic to execute the logo upload based on the data provided in the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/upload-logos-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Shop\\CommandHandler\\UploadLogosHandler`\n```\n\n----------------------------------------\n\nTITLE: Checkbox Configuration in HelperOptions for PrestaShop\nDESCRIPTION: Example of defining a checkbox configuration field in HelperOptions. It demonstrates how to set up multiple checkbox options with values and labels.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'MY_CONFIG_KEY' => [\n    'type' => 'checkbox',\n    'title' => $this->module->l('My config title'),\n    'validation' => 'isInt',\n    'choices' => [\n        'myconfigvalue1' => $this->module->l('My value 1'),\n        'myconfigvalue2' => $this->module->l('My value 2'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Executing actionObject<ClassName>UpdateBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionObject<ClassName>UpdateBefore hook is executed in the PrestaShop core. It is called before updating an object, passing the object itself as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>UpdateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'UpdateBefore', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Configuration Factory in PHP\nDESCRIPTION: Factory class for building ImportConfig objects from Symfony Request objects. Handles import settings like separators, language, truncation flags and other import parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/Configuration/ImportConfigFactory.php\n\nfinal class ImportConfigFactory implements ImportConfigFactoryInterface\n{\n    public function buildFromRequest(Request $request)\n    {\n        $separator = $request->request->get(\n            'separator',\n            $request->getSession()->get('separator', ImportSettings::DEFAULT_SEPARATOR)\n        );\n\n        $multivalueSeparator = $request->request->get(\n            'multiple_value_separator',\n            $request->getSession()->get('multiple_value_separator', ImportSettings::DEFAULT_MULTIVALUE_SEPARATOR)\n        );\n\n        return new ImportConfig(\n            $request->request->get('csv', $request->getSession()->get('csv')),\n            $request->request->getInt('entity', $request->getSession()->get('entity', 0)),\n            $request->request->get('iso_lang', $request->getSession()->get('iso_lang')),\n            $separator,\n            $multivalueSeparator,\n            $request->request->getBoolean('truncate', $request->getSession()->get('truncate', false)),\n            $request->request->getBoolean('regenerate', $request->getSession()->get('regenerate', false)),\n            $request->request->getBoolean('match_ref', $request->getSession()->get('match_ref', false)),\n            $request->request->getBoolean('forceIDs', $request->getSession()->get('forceIDs', false)),\n            $request->request->getBoolean('sendemail', $request->getSession()->get('sendemail', true)),\n            $request->request->getInt('skip', 0)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllFeatureValuesFromProductHandlerInterface in PHP\nDESCRIPTION: This snippet defines the interface that the RemoveAllFeatureValuesFromProductHandler implements. It is part of the PrestaShop core domain for product feature value command handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-feature-values-from-product-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\CommandHandler\\RemoveAllFeatureValuesFromProductHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Message XML Schema Template\nDESCRIPTION: Blank XML schema template for PrestaShop message resources. Includes fields for cart ID, order ID, customer ID, employee ID, message content, privacy flag, and date added.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/messages.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <message>\n    <id><![CDATA[]]></id>\n    <id_cart><![CDATA[]]></id_cart>\n    <id_order><![CDATA[]]></id_order>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_employee><![CDATA[]]></id_employee>\n    <message><![CDATA[]]></message>\n    <private><![CDATA[]]></private>\n    <date_add><![CDATA[]]></date_add>\n  </message>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining Form Data Provider Interface in PHP\nDESCRIPTION: Interface definition for Form Data Providers in PrestaShop, responsible for retrieving and saving form data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/settings-forms.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form;\n\ninterface FormDataProviderInterface\n{\n    /**\n     * @return array the form data as an associative array\n     */\n    public function getData();\n\n    /**\n     * Persists form Data in Database and Filesystem.\n     *\n     * @param array $data\n     * @return array $errors if data can't persisted an array of errors messages\n     * @throws UndefinedOptionsException\n     */\n    public function setData(array $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching the ActionAdminShopParametersOrderPreferencesControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This code snippet shows how the hook is dispatched within the PrestaShop core. The controller instance is passed as a parameter in the hook's data array, allowing modules to access and potentially modify the controller's behavior before form processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShopParametersOrderPreferencesControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminShopParametersOrderPreferencesControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Identifying Handler Class and Interface for EditOrderAddressCommand in PHP\nDESCRIPTION: Identifies the handler class `PrestaShop\\PrestaShop\\Adapter\\Address\\CommandHandler\\EditOrderAddressHandler` responsible for processing the `EditOrderAddressCommand`. It also specifies the interface `PrestaShop\\PrestaShop\\Core\\Domain\\Address\\CommandHandler\\EditOrderAddressHandlerInterface` that the handler implements, shown within HTML.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-order-address-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Address\\CommandHandler\\EditOrderAddressHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\CommandHandler\\EditOrderAddressHandlerInterface`</li>\n```\n\n----------------------------------------\n\nTITLE: Using DeleteCategoryCoverImageCommand in PrestaShop Category Management\nDESCRIPTION: The DeleteCategoryCoverImageCommand accepts a category ID and is handled by DeleteCategoryCoverImageHandler. It implements the DeleteCategoryCoverImageHandlerInterface and returns void after deleting the category cover image.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/delete-category-cover-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\DeleteCategoryCoverImageCommand\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Store XML Schema Template\nDESCRIPTION: Blank XML schema template for the Store resource in PrestaShop. Shows the complete structure with all available fields including multilingual fields (indicated by language nodes). The schema uses CDATA sections for field values and includes core store information like location, contact details, and metadata.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/stores.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <store>\n    <id><![CDATA[]]></id>\n    <id_country><![CDATA[]]></id_country>\n    <id_state><![CDATA[]]></id_state>\n    <hours>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </hours>\n    <postcode><![CDATA[]]></postcode>\n    <city><![CDATA[]]></city>\n    <latitude><![CDATA[]]></latitude>\n    <longitude><![CDATA[]]></longitude>\n    <phone><![CDATA[]]></phone>\n    <fax><![CDATA[]]></fax>\n    <email><![CDATA[]]></email>\n    <active><![CDATA[]]></active>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <address1>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </address1>\n    <address2>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </address2>\n    <note>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </note>\n  </store>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Querying Product Status in PrestaShop PHP\nDESCRIPTION: Core query class that retrieves the enabled/disabled status of a product. Takes a product ID as input and returns a boolean value indicating the product's status. The query is handled by GetProductIsEnabledHandler which implements GetProductIsEnabledHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-is-enabled.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Query\\GetProductIsEnabled\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\QueryHandler\\GetProductIsEnabledHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\QueryHandler\\GetProductIsEnabledHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing displayPaymentTop Hook in Smarty Template\nDESCRIPTION: Hook call implemented in payment.tpl template files to display content at the top of the payment page. This hook has the alias 'paymentTop' and is used in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPaymentTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayPaymentTop'}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderProductHandler Class in PrestaShop Order Domain\nDESCRIPTION: This defines the handler class that processes the CancelOrderProductCommand. It implements the CancelOrderProductHandlerInterface from the Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/cancel-order-product-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\CancelOrderProductHandler\n```\n\n----------------------------------------\n\nTITLE: Referencing DeleteSupplierCommand Class in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the command responsible for initiating the deletion of a supplier in PrestaShop's core domain layer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\DeleteSupplierCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing displayRightColumn Hook in PrestaShop Theme\nDESCRIPTION: This snippet shows how to call the displayRightColumn hook in a PrestaShop theme template. The hook is used to display new elements in the right-hand column of a page and has an alias of extraRight.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayRightColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayRightColumn'}\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateInvoiceNoteHandler Class Path (PHP)\nDESCRIPTION: This snippet specifies the fully qualified class name for the handler responsible for processing the `UpdateInvoiceNoteCommand`. This handler contains the logic to actually update the invoice note in the system and implements the `UpdateInvoiceNoteHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-invoice-note-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\UpdateInvoiceNoteHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectDeleteBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionObjectDeleteBefore hook is executed in PrestaShop. It is called before an object is deleted, passing the object itself as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectDeleteBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectDeleteBefore', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Implementing CMS Page Category Bulk Deletion Command in PHP\nDESCRIPTION: Command class that handles bulk deletion of CMS page categories. Accepts an array of category IDs as constructor parameter and returns void. The command is handled by BulkDeleteCmsPageCategoryHandler which implements BulkDeleteCmsPageCategoryHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/bulk-delete-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\BulkDeleteCmsPageCategoryCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\CommandHandler\\BulkDeleteCmsPageCategoryHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\CommandHandler\\BulkDeleteCmsPageCategoryHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing displayOverrideTemplate Hook (PrestaShop <8.1)\nDESCRIPTION: Hook execution for overriding template in PrestaShop versions before 8.1. Takes controller instance, template file, ID and locale as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOverrideTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n  'displayOverrideTemplate',\n  [\n    'controller' => $this,\n    'template_file' => $template,\n    'id' => $params['id'],\n    'locale' => $locale,\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying Handler Class for DeleteSpecificPriceCommand in PrestaShop PHP\nDESCRIPTION: This snippet provides the fully qualified name of the `DeleteSpecificPriceHandler` class. This class, located in the Adapter layer, contains the logic to execute the deletion of a specific price when the `DeleteSpecificPriceCommand` is dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-specific-price-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\SpecificPrice\\CommandHandler\\DeleteSpecificPriceHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing overrideMinimalPurchasePrice Hook in PHP\nDESCRIPTION: This snippet demonstrates how to execute the 'overrideMinimalPurchasePrice' hook in PHP used in PrestaShop. It updates a reference to the 'minimalPurchase' variable. No external dependencies are explicitly mentioned, but it relies on the PrestaShop Hook system. The key parameter is 'minimalPurchase', which is passed by reference. The hook is expected to modify this value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/overrideMinimalPurchasePrice.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('overrideMinimalPurchasePrice', [\n            'minimalPurchase' => &$minimalPurchase,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Dispatching the ActionProductAdd Hook in PrestaShop\nDESCRIPTION: This snippet shows how the actionProductAdd hook is dispatched in PrestaShop with parameters including the old product ID, new product ID, and the product object. This hook is called after a product is created or duplicated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductAdd.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            'actionProductAdd',\n            ['id_product_old' => $oldProductId, 'id_product' => $newProductId, 'product' => $newProduct]\n        )\n```\n\n----------------------------------------\n\nTITLE: Listing Commands with Symfony in PHP\nDESCRIPTION: The 'list' command displays all available commands within the Update Assistant CLI. This utilizes Symfony console capabilities to provide a structured command overview, essential for users to identify possible actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console list\n\nAvailable commands:\n\thelp                                  Displays help for a command\n\tlist                                  List commands\nbackup\n\tbackup:create                         Create backup.\n\tbackup:list                           List existing backups.\n\tbackup:restore                        Restore your store.\n\tbackup:delete                         Remove a backup not anymore needed.\nupdate\n\tupdate:check-new-version              Display the version the store can update to.\n\tupdate:check-requirements             Check all prerequisites for an update.\n\tupdate:start                          Update your store.\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleEmployeeStatusHandler Class in PHP\nDESCRIPTION: This snippet shows the namespace and class name for the handler of ToggleEmployeeStatusCommand. It implements the ToggleEmployeeStatusHandlerInterface and is responsible for executing the toggle employee status action.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/toggle-employee-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\CommandHandler\\ToggleEmployeeStatusHandler\n```\n\n----------------------------------------\n\nTITLE: Executing Hooks in PrestaShop PHP\nDESCRIPTION: This PHP code snippet is part of the PrestaShop framework and demonstrates the execution of the 'actionHtaccessCreate' hook. This hook is called after the .htaccess file is created, allowing developers to extend or customize functionality at this specific point in the process. The snippet assumes that the PrestaShop environment is properly set up and that the \\'Hook\\' class is available for execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionHtaccessCreate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionHtaccessCreate')\n```\n\n----------------------------------------\n\nTITLE: Calling the displayWrapperTop Hook in PrestaShop Templates\nDESCRIPTION: This code snippet shows how to call the displayWrapperTop hook within a Smarty template. This hook is used to display new elements at the top of the main wrapper section in PrestaShop's front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayWrapperTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayWrapperTop'}\n```\n\n----------------------------------------\n\nTITLE: ObjectModel Class Method Signatures and Definition (PHP)\nDESCRIPTION: Provides signatures and one full definition for key methods of the PrestaShop `ObjectModel` class. Methods include object construction (`__construct`), saving (`save`), duplication (`duplicateObject`), deletion (`delete`, `deleteSelection`, `softDelete`), status toggling (`toggleStatus`), shop association (`associateTo`), and specifying fields for update (`setFieldsToUpdate`). Descriptions are based on PHPDoc comments, indicating parameters, return types, and potential exceptions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Builds the object.\n *\n * @param int|null $id if specified, loads and existing object from DB (optional)\n * @param int|null $id_lang required if object is multilingual (optional)\n * @param int|null $id_shop ID shop for objects with multishop tables\n * @param TranslatorComponent|null $translator\n *\n * @throws PrestaShopDatabaseException\n * @throws PrestaShopException\n */\npublic function __construct($id = null, $id_lang = null, $id_shop = null, $translator = null)\n\n/**\n * Saves current object to database (add or update).\n *\n * @param bool $null_values\n * @param bool $auto_date\n *\n * @return bool Insertion result\n *\n * @throws PrestaShopException\n */\npublic function save($null_values = false, $auto_date = true)\n\n/**\n * Takes current object ID, gets its values from database,\n * saves them in a new row and loads newly saved values as a new object.\n *\n * @return ObjectModel|false\n *\n * @throws PrestaShopDatabaseException\n */\npublic function duplicateObject()\n\n/**\n * Deletes current object from database.\n *\n * @return bool True if delete was successful\n *\n * @throws PrestaShopException\n */\npublic function delete()\n\n/**\n * Deletes multiple objects from the database at once.\n *\n * @param array $ids array of objects IDs\n *\n * @return bool\n */\npublic function deleteSelection($ids)\n\n/**\n * Does a soft delete on current object, using the \"deleted\" field in DB\n * If the model object has no \"deleted\" property or no \"deleted\" definition field it will throw an exception\n *\n * @return bool\n *\n * @throws PrestaShopDatabaseException\n * @throws PrestaShopException\n */\npublic function softDelete()\n\n/**\n * Toggles object status in database.\n *\n * @return bool Update result\n *\n * @throws PrestaShopException\n */\npublic function toggleStatus()\n\n/**\n * This function associate an item to its context.\n *\n * @param int|array $id_shops\n *\n * @return bool|void\n *\n * @throws PrestaShopDatabaseException\n */\npublic function associateTo($id_shops)\n\n/**\n * Set a list of specific fields to update\n * array(field1 => true, field2 => false,\n * langfield1 => array(1 => true, 2 => false)).\n *\n * @since 1.5.0.1\n *\n * @param array<string, bool|array<int, bool>>|null $fields\n */\npublic function setFieldsToUpdate(?array $fields)\n{\n    $this->update_fields = $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Signature Twig Template for Order View\nDESCRIPTION: Twig template that extends the base card template to display customer signature information. It shows the customer's name with gender and their signature image in a centered layout.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% extends '@Modules/demovieworderhooks/views/templates/admin/card.html.twig' %}\n\n{% block card_title %}\n  {{ 'Signature'|trans }}\n{% endblock %}\n\n{% block card_body %}\n  <div class=\"col-lg\">\n    <div class=\"display-4 text-center\">\n      {{ signature.gender }} {{ signature.firstName }} {{ signature.lastName }}\n    </div>\n    <div class=\"text-center\">\n      <img src=\"{{ signature.imagePath }}\" alt=\"\">\n    </div>\n  </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Add Employee Command Initialization in PHP\nDESCRIPTION: This PHP code snippet describes the `AddEmployeeCommand` class which is used to add a new employee in PrestaShop. The constructor of this class requires parameters such as the employee's first name, last name, email, password, and additional configurations. The pattern follows a command-handler approach, with `AddEmployeeHandler` implementing the handling logic. Upon successful execution, it returns an `EmployeeId` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/add-employee-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Command\\AddEmployeeCommand\\n_Adds new employee with given data_\\n\\n| Command details            |    |\\n| -------------------------- | -- |\\n| **Constructor parameters** | <ul> <li>`$string $firstName`</li>  <li>`$string $lastName`</li>  <li>`$string $email`</li>  <li>`$string $plainPassword`</li>  <li>`$int $defaultPageId`</li>  <li>`$int $languageId`</li>  <li>`$bool $active`</li>  <li>`$int $profileId`</li>  <li>`$array $shopAssociation`</li>  <li>`$bool $hasEnabledGravatar`</li>  <li>`$int $minLength`</li>  <li>`$int $maxLength`</li>  <li>`$int $minScore`</li> </ul> |\\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\CommandHandler\\AddEmployeeHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Employee\\CommandHandler\\AddEmployeeHandlerInterface`</li>  |\\n| **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Employee\\ValueObject\\EmployeeId`  |\\n\n```\n\n----------------------------------------\n\nTITLE: Editing Manufacturer Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This command object is used for modifying an existing manufacturer address within PrestaShop. It requires the manufacturer address ID and new address data, and interacts with the command handling system. It validates information and returns either a success/failure status or throws an error if the manufacturer or address is invalid.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// EditManufacturerAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for editing a manufacturer address\n */\nclass EditManufacturerAddressCommand\n{\n    private $addressId;\n    private $addressData;\n\n    public function __construct($addressId, array $addressData)\n    {\n        $this->addressId = $addressId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing ActionObjectAddAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionObjectAddAfter hook is called in PrestaShop's ObjectModel class. It is executed after an object is added, passing the newly created object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectAddAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectAddAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Registering Hook in Theme YAML Configuration\nDESCRIPTION: Example of registering a custom hook in the theme.yml configuration file, including hook name, title, and description.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/hooks/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_settings:\n  hooks:\n    custom_hooks:\n      - name: displayFooterBefore\n        title: displayFooterBefore\n        description: Add a widget area above the footer\n```\n\n----------------------------------------\n\nTITLE: Defining SearchCartRules Query Class in PHP\nDESCRIPTION: Defines the SearchCartRules query class in the PrestaShop Core Domain. This query is used to search for cart rules based on a search phrase.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/search-cart-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Query\\SearchCartRules\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCustomerThreadCommand Class in PHP\nDESCRIPTION: The DeleteCustomerThreadCommand class is part of PrestaShop's Core Domain for CustomerService. It takes a customer thread ID as a constructor parameter and is handled by the DeleteCustomerThreadHandler class. The command's execution returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/delete-customer-thread-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Command\\DeleteCustomerThreadCommand\n```\n\n----------------------------------------\n\nTITLE: Currency Deletion Handler Class Path\nDESCRIPTION: The namespace path for the DeleteCurrencyHandler class that implements the deletion interface\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/delete-currency-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\DeleteCurrencyHandler\n```\n\n----------------------------------------\n\nTITLE: Executing Hook with PrestaShop PHP\nDESCRIPTION: The code snippet demonstrates the execution of the 'actionCustomerAddGroups' hook within the PrestaShop framework. It is located in the Customer.php class file and requires the PrestaShop Hook class as a dependency. The snippet passes parameters for 'id_customer' and 'groups', which represent the ID of the customer and the groups the customer belongs to, respectively. It is used to trigger additional actions when a customer is added to groups in the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerAddGroups.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCustomerAddGroups', ['id_customer' => $this->id, 'groups' => $groups])\n```\n\n----------------------------------------\n\nTITLE: Customer Deletion Handler Interface Path\nDESCRIPTION: The interface that must be implemented by the delete customer command handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/delete-customer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\CommandHandler\\DeleteCustomerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying GetSpecificPriceForEditing Handler Class in PHP\nDESCRIPTION: This code snippet specifies the handler class for the GetSpecificPriceForEditing query. The handler implements the GetSpecificPriceForEditingHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-specific-price-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\SpecificPrice\\QueryHandler\\GetSpecificPriceForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Search Error Response Schema in XML\nDESCRIPTION: Sample XML schema showing the structure of an error response from the PrestaShop search API when required parameters are missing. Demonstrates how errors are formatted with code and message elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/search.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <errors>\n    <error>\n      <code><![CDATA[100]]></code>\n      <message><![CDATA[You have to set both the 'language' and 'query' parameters to get a result]]></message>\n    </error>\n  </errors>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Loading Store-Specific Images in PrestaShop\nDESCRIPTION: Code demonstrating how to load the correct image version based on the current store context, checking for store-specific and group-specific image variants.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/multistore.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->adv_imgname = 'advertising';\n\nif (\n    (Shop::getContext() == Shop::CONTEXT_GROUP  || Shop::getContext() == Shop::CONTEXT_SHOP)\n    && file_exists(\n        _PS_MODULE_DIR_ . $this->name . '/' . $this->adv_imgname . '-g'\n        . $this->context->shop->getContextShopGroupID() . '.'\n        . Configuration::get('BLOCKADVERT_IMG_EXT')\n    )\n) {\n    $this->adv_imgname .= '-g'.$this->context->shop->getContextShopGroupID();\n}\nif (\n    Shop::getContext() == Shop::CONTEXT_SHOP\n    && file_exists(\n        _PS_MODULE_DIR_ . $this->name . '/' . $this->adv_imgname . '-s'\n        . $this->context->shop->getContextShopID() . '.' \n        . Configuration::get('BLOCKADVERT_IMG_EXT')\n    )\n) {\n    $this->adv_imgname .= '-s'.$this->context->shop->getContextShopID();\n}\n$this->adv_img = Tools::getMediaServer($this->name)\n    . _MODULE_DIR_ . $this->name . '/' . $this->adv_imgname . '.' \n    . Configuration::get('BLOCKADVERT_IMG_EXT');\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCustomerThreadHandlerInterface in PHP\nDESCRIPTION: The DeleteCustomerThreadHandlerInterface is implemented by the DeleteCustomerThreadHandler class. It defines the contract for handling DeleteCustomerThreadCommand instances in PrestaShop's customer service module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/delete-customer-thread-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\DeleteCustomerThreadHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchCartRulesHandler in PHP\nDESCRIPTION: Specifies the handler class for the SearchCartRules query. This handler implements the SearchCartRulesHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/search-cart-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CartRule\\QueryHandler\\SearchCartRulesHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\QueryHandler\\SearchCartRulesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Remote CDN Asset Registration in Theme YAML\nDESCRIPTION: Example of registering external CSS and JavaScript assets from a CDN in a theme's theme.yml file. Demonstrates how to include remote resources with appropriate server configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  css:\n    all:\n      - id: custom-cdn-css\n        path: //cdn-url.com/external-lib.css\n        media: all\n        priority: 200\n        server: remote\n  js:\n    all:\n      - id: custom-cdn-js\n        path: //cdn-url.com/external-lib.js\n        priority: 200\n        server: remote\n```\n\n----------------------------------------\n\nTITLE: Accessing Customer Fields from XML Response\nDESCRIPTION: PHP code showing how to parse the XML response and access individual customer fields. It demonstrates looping through all fields and accessing specific fields directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/retrieve-resource.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$customerFields = $xml->customer->children();\n$firstName = $customerFields->firstname;\n$lastName = $customerFields->lastname;\necho 'Details for '. $firstName . ' ' . $lastName . PHP_EOL . PHP_EOL;\nforeach ($customerFields as $key => $value) {\n    echo $key . ': ' . $value . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Mail Layout Transformations Hook - PrestaShop PHP\nDESCRIPTION: This PHP code snippet demonstrates how the actionGetMailLayoutTransformations hook is dispatched within the PrestaShop mail template renderer. It sends an array of parameters including 'mailLayout', 'templateType', and 'layoutTransformations' via the dispatchWithParameters function. Dependencies include the MailTemplateRendererInterface and knowledge of hook dispatching in PrestaShop; expected usage is within the context of extending or modifying email layout transformations. Inputs are mail layout configurations, and outputs are processed transformation interfaces applicable to the email template. No direct exception handling or chain propagation is performed in this dispatch.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetMailLayoutTransformations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS,\n            [\n                'mailLayout' => $mailLayout,\n                'templateType' => $templateType,\n                'layoutTransformations' => $templateTransformations,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveCartRuleFromCartCommand Class in PHP\nDESCRIPTION: This code snippet defines the RemoveCartRuleFromCartCommand class in the PrestaShop core domain. It is used to remove a given cart rule from a cart. The command takes two integer parameters: cartId and cartRuleId.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/remove-cart-rule-from-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\RemoveCartRuleFromCartCommand\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for UpdateProductBasicInformationCommand in PHP\nDESCRIPTION: This snippet specifies the handler class for the UpdateProductBasicInformationCommand. The handler implements the UpdateProductBasicInformationHandlerInterface and is responsible for processing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-basic-information-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductBasicInformationHandler\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductBasicInformationHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Order History Blank XML Schema Template\nDESCRIPTION: This XML schema template represents the structure for order history entries in PrestaShop. It includes fields for ID, employee ID, order state ID, order ID, and date added. This template can be used as a starting point for creating or manipulating order history records via the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_histories.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_history>\n    <id><![CDATA[]]></id>\n    <id_employee><![CDATA[]]></id_employee>\n    <id_order_state><![CDATA[]]></id_order_state>\n    <id_order><![CDATA[]]></id_order>\n    <date_add><![CDATA[]]></date_add>\n  </order_history>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Executing actionFeatureDelete Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how the `actionFeatureDelete` hook is executed within the PrestaShop core, specifically in the `classes/Feature.php` file. It uses the static `exec` method of the `Hook` class, passing the hook name 'actionFeatureDelete' and an associative array containing the 'id_feature' of the feature currently being deleted (`$this->id`). This allows modules or other parts of the system to react to the deletion event.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFeatureDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec('actionFeatureDelete', ['id_feature' => $this->id])\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for displayAdminGridTableBefore Hook in PHP\nDESCRIPTION: Defines the parameters array passed to the displayAdminGridTableBefore hook. It includes the Grid object, controller string, and legacy_controller string.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminGridTableBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'grid' = Grid $grid,\n  'controller' => (string) $controller\n  'legacy_controller' => (string) $legacyController\n);\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCartDeliverySettingsCommand Class in PHP\nDESCRIPTION: This code snippet defines the UpdateCartDeliverySettingsCommand class in the PrestaShop Core Domain. It includes parameters for cart ID, free shipping allowance, gift options, recycled packaging, and gift message.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-cart-delivery-settings-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\UpdateCartDeliverySettingsCommand\n```\n\n----------------------------------------\n\nTITLE: Defining BulkDeleteCurrenciesCommand Class in PHP\nDESCRIPTION: This snippet defines the BulkDeleteCurrenciesCommand class used for bulk deletion of currencies. It accepts an array of currency IDs as a constructor parameter. The command is handled by BulkDeleteCurrenciesHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/bulk-delete-currencies-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\BulkDeleteCurrenciesCommand\n```\n\n----------------------------------------\n\nTITLE: Defining Image Types Schema in XML for PrestaShop API\nDESCRIPTION: This XML schema defines the structure for image types in the PrestaShop API. It includes various image categories such as general, products, categories, manufacturers, suppliers, stores, and customizations. Each type specifies allowed HTTP methods and supported MIME types for uploads.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/images.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <image_types>\n    <general xlink:href=\"http://ps-develop.localhost/api/images/general\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <products xlink:href=\"http://ps-develop.localhost/api/images/products\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <categories xlink:href=\"http://ps-develop.localhost/api/images/categories\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <manufacturers xlink:href=\"http://ps-develop.localhost/api/images/manufacturers\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <suppliers xlink:href=\"http://ps-develop.localhost/api/images/suppliers\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <stores xlink:href=\"http://ps-develop.localhost/api/images/stores\" get=\"true\" put=\"false\" post=\"false\" patch=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n    <customizations xlink:href=\"http://ps-develop.localhost/api/images/customizations\" get=\"true\" put=\"false\" patch=\"false\" post=\"false\" delete=\"false\" head=\"true\" upload_allowed_mimetypes=\"image/gif, image/jpg, image/jpeg, image/pjpeg, image/png, image/x-png\"/>\n  </image_types>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Identifying UpdateProductStockAvailableCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified name for the `UpdateProductStockAvailableCommand` class within the PrestaShop Core Domain. This command is responsible for initiating the update of product stock properties managed by the `StockAvailable` entity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Stock\\Command\\UpdateProductStockAvailableCommand`\n```\n\n----------------------------------------\n\nTITLE: Removing All Associated Product Attachments - PrestaShop PHP Command\nDESCRIPTION: Defines a command for disassociating all attachments from a specified product in PrestaShop's domain logic. Requires a single constructor parameter, the integer product ID, and is handled by a designated CommandHandler class that implements the handler interface. No return value is produced; the side effect is the detachment of all relevant product-attachment associations. Intended for use within the Command-Handler architecture of PrestaShop modules; dependencies include PrestaShop's DDD abstraction and the specified command handler. Limitation: Only operates on the product identified by the provided ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-product-attachments-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Attachment\\Command\\RemoveAllAssociatedProductAttachmentsCommand\n// Removes all product-attachment associations for provided product\n\n// Constructor parameters:\n//    int $productId\n\n// Handler class:\n//    PrestaShop\\PrestaShop\\Adapter\\Product\\Attachment\\CommandHandler\\RemoveAllAssociatedProductAttachmentsHandler\n//    Implements:\n//      PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Attachment\\CommandHandler\\RemoveAllAssociatedProductAttachmentsHandlerInterface\n\n// Returns:\n//    void\n```\n\n----------------------------------------\n\nTITLE: Building Custom Tab Form with Price Field in PHP\nDESCRIPTION: Implementation of a custom tab form type that adds a money type field with validation constraints. The form includes custom price field with currency support and various validation rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/navigation-tab-type.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options)\n{\n    parent::buildForm($builder, $options);\n    $builder\n        ->add('custom_price', MoneyType::class, [\n            'label' => $this->trans('My custom price', 'Modules.Demoproductform.Admin'),\n            'label_tag_name' => 'h3',\n            'currency' => $this->defaultCurrency->iso_code,\n            'required' => false,\n            'constraints' => [\n                new NotBlank(),\n                new Type(['type' => 'float']),\n                new PositiveOrZero(),\n            ],\n        ])\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL User and Granting Privileges\nDESCRIPTION: Creates a new MySQL user named 'prestashopuser' accessible from 'hostname' (often 'localhost' or '127.0.0.1') with the specified password 'somepassword'. It then grants all privileges on the 'prestashop' database to this new user. Replace 'hostname' and 'somepassword' with appropriate values. This command should be executed after connecting to the MySQL server.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> CREATE USER \"prestashopuser\"@\"hostname\" IDENTIFIED BY \"somepassword\";\n> GRANT ALL PRIVILEGES ON prestashop.* TO \"prestashopuser\"@\"hostname\";\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis in PHP 7+ Environment - Bash\nDESCRIPTION: Executes PHPStan analysis for a PrestaShop module, setting the required _PS_ROOT_DIR_ environment variable to point to the PrestaShop root directory. The command uses the local project's phpstan binary and specifies the module-specific configuration file. Requires PHPStan installed in the project, and PrestaShop codebase accessible at the provided path.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n_PS_ROOT_DIR_=/var/www/html vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon\n```\n\n----------------------------------------\n\nTITLE: Generating an AJAX URL for a PrestaShop Module Front Controller (PHP)\nDESCRIPTION: Illustrates how to generate a URL specifically for making an AJAX request to a module's front controller using `Link::getModuleLink`. This is achieved by adding an 'ajax' key with the value 'true' to the parameters array, which appends `&ajax=true` to the generated URL.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/front-controllers.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nContext::getContext()->link->getModuleLink('cheque', 'validation', array('idPayment' => 1337, 'ajax'=>true));\n\n```\n\n----------------------------------------\n\nTITLE: Defining GetCreditSlipIdsByDateRange Query Class in PHP\nDESCRIPTION: This snippet defines the GetCreditSlipIdsByDateRange query class in PrestaShop's Core Domain. It takes two DateTime parameters for the date range and returns an array of CreditSlipId objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/credit-slip/_partials/get-credit-slip-ids-by-date-range.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CreditSlip\\Query\\GetCreditSlipIdsByDateRange\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Standard Components in JavaScript (jQuery)\nDESCRIPTION: Shows how to initialize a specific set of standard PrestaShop components ('TranslatableField', 'TinyMCEEditor', 'TranslatableInput') using the `initComponents` method on the global `window.prestashop.component` object. This is typically done within a jQuery `$(document).ready` function to ensure the DOM is loaded.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/global-components.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$(document).ready(function() {\n  window.prestashop.component.initComponents([\n    'TranslatableField',\n    'TinyMCEEditor',\n    'TranslatableInput',\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAdminListAfter Hook in PrestaShop Template\nDESCRIPTION: Hook implementation allowing modules to add content after admin lists in the PrestaShop back office. This hook is called in the list footer template and doesn't return any values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminListAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminListAfter'}\n```\n\n----------------------------------------\n\nTITLE: Defining the Command Handler Return Type (PHP)\nDESCRIPTION: Specifies the return type of the command handler method that processes the `DeleteTaxRulesGroupCommand`. A `void` return type indicates that the handler does not return any value upon successful execution of the deletion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/delete-tax-rules-group-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Rendering Empty Category Message Hook in PHP/Twig\nDESCRIPTION: Example of how the displayEmptyModuleCategoryExtraMessage hook is called in a template, passing the category name as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayEmptyModuleCategoryExtraMessage.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayEmptyModuleCategoryExtraMessage', {'category_name': category.name}) }}\n```\n\n----------------------------------------\n\nTITLE: Handler Class for UpdateProductStockInformationCommand\nDESCRIPTION: The fully qualified class path to the handler that processes the UpdateProductStockInformationCommand, along with the interface it implements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-information-command.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Stock\\CommandHandler\\UpdateProductStockInformationHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionOrderReturn Hook in PHP\nDESCRIPTION: This snippet shows the structure of the parameters passed to the actionOrderReturn hook. It includes an 'orderReturn' object of type OrderReturn.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderReturn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'orderReturn' => (object) OrderReturn\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Customer Disable Command - PHP\nDESCRIPTION: Command class that handles bulk customer disable operations. Takes an array of customer IDs as constructor parameter and returns void. Implemented by BulkDisableCustomerHandler which follows the command handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/bulk-disable-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\BulkDisableCustomerCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\BulkDisableCustomerHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\CommandHandler\\BulkDisableCustomerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Invoking displayCheckoutBeforeConfirmation Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayCheckoutBeforeConfirmation hook in a PrestaShop theme template. The hook allows displaying custom content at the end of the checkout process, before the final confirmation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCheckoutBeforeConfirmation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCheckoutBeforeConfirmation'}\n```\n\n----------------------------------------\n\nTITLE: Transform Guest To Customer Handler Interface\nDESCRIPTION: Interface defining the contract for handlers that transform guest accounts to customer accounts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/transform-guest-to-customer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\CommandHandler\\TransformGuestToCustomerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Specific Price Rule in PrestaShop\nDESCRIPTION: This XML snippet provides a blank schema for the specific_price_rule entity in PrestaShop. It includes all the fields associated with a specific price rule, such as shop ID, country ID, currency ID, group ID, name, quantity, price, reduction, and date range.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/specific_price_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <specific_price_rule>\n    <id><![CDATA[]]></id>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_country><![CDATA[]]></id_country>\n    <id_currency><![CDATA[]]></id_currency>\n    <id_group><![CDATA[]]></id_group>\n    <name><![CDATA[]]></name>\n    <from_quantity><![CDATA[]]></from_quantity>\n    <price><![CDATA[]]></price>\n    <reduction><![CDATA[]]></reduction>\n    <reduction_tax><![CDATA[]]></reduction_tax>\n    <reduction_type><![CDATA[]]></reduction_type>\n    <from><![CDATA[]]></from>\n    <to><![CDATA[]]></to>\n  </specific_price_rule>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomMessageColorTransformation in PHP\nDESCRIPTION: Custom transformation class that changes the color of <span> tags with the 'subtitle' class in email templates. It uses DOMCrawler to manipulate the HTML content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/apply-transformation-from-module.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\Module\\MyEmailThemeModule\\MailTemplate\\Transformation;\n\nuse PrestaShop\\PrestaShop\\Core\\Exception\\InvalidArgumentException;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation\\AbstractTransformation;\nuse Symfony\\Component\\DomCrawler\\Crawler;\nuse DOMElement;\n\n/**\n * Class CustomMessageColorTransformation adds the custom color to all spans\n * with class subtitle.\n */\nclass CustomMessageColorTransformation extends AbstractTransformation\n{\n    /** @var string */\n    private $customColor;\n\n    /**\n     * @param string $customColor\n     * @throws InvalidArgumentException\n     */\n    public function __construct($customColor)\n    {\n        parent::__construct(MailTemplateInterface::HTML_TYPE);\n        $this->customColor = $customColor;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function apply($templateContent, array $templateVariables)\n    {\n        $crawler = new Crawler($templateContent);\n        $customSpans = $crawler->filter('span[class=\"subtitle\"]');\n        /** @var DOMElement $customSpan */\n        foreach ($customSpans as $customSpan) {\n            $customSpan->setAttribute('style', sprintf('color: %s;', $this->customColor));\n        }\n\n        return $crawler->html();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ajax Requests in AdminController PHP\nDESCRIPTION: Shows how to handle Ajax requests in an AdminController for HelperList, including retrieving the row ID and returning JSON data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function ajaxProcess()\n{\n  $query = 'SELECT * FROM mytable';\n  echo Tools::jsonEncode(array(\n    'data'=> Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($query),\n    'fields_display' => $this->fieldsDisplay\n  ));\n  die();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleEmployeeStatusHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the ToggleEmployeeStatusHandler implements. It defines the contract for handling the toggle employee status command in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/toggle-employee-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\CommandHandler\\ToggleEmployeeStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing ActionOnImageCutAfter Hook in PHP\nDESCRIPTION: This code shows how the actionOnImageCutAfter hook is called from the core ImageManager class after an image operation. It provides the destination file path and file type as parameters to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOnImageCutAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOnImageCutAfter', ['dst_file' => $dstFile, 'file_type' => $fileType])\n```\n\n----------------------------------------\n\nTITLE: Legacy Frontend Controller Structure\nDESCRIPTION: Shows the inheritance hierarchy for PrestaShop's frontend controllers, where FrontController is the base class and ModuleFrontController extends it for module-specific implementations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nFrontController\n  └─ ModuleFrontController\n```\n\n----------------------------------------\n\nTITLE: Grid Blocks Template Structure in Twig\nDESCRIPTION: Shows the structure of Grid blocks templates, including bulk actions, empty states, and table-related templates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/customize-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nBlocks\n├── bulk_actions.html.twig\n├── bulk_actions_select_all.html.twig\n├── EmptyState\n│   ├── _default.html.twig\n│   └── supplier.html.twig\n├── grid_actions.html.twig\n├── pagination.html.twig\n├── Table\n│   ├── empty_row.html.twig\n│   ├── filters_row.html.twig\n│   └── headers_row.html.twig\n└── table.html.twig\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionOrderEdited Hook in PHP\nDESCRIPTION: This snippet shows the parameter structure for the actionOrderEdited hook. It passes an array containing the Order object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderEdited.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray( 'order' => (object) Order\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Markdown Content in PrestaShop Documentation\nDESCRIPTION: CSS styles for customizing documentation appearance, including list spacing and deprecation notice formatting\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* condensed lists in this article */\n#body-inner li, #body-inner li ul, li p { margin-bottom: 0.2rem}\n/* deprecation indicators */\n#body-inner depre {font-size: 85%; color: #666; font-style: italic; vertical-align: middle }\n#body-inner depre::before {content: ' – '}\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: This snippet demonstrates how to execute the 'actionControllerInitAfter' hook in PrestaShop. The hook is executed in the `Controller.php` file after initializing all controllers, allowing additional actions to be performed. Key parameters include the executing context, denoted by the 'controller' key, which passes the current controller instance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionControllerInitAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec(\n            'actionControllerInitAfter',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Identifying Delete Specific Price Command Class in PrestaShop PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the `DeleteSpecificPriceCommand` within the PrestaShop core domain. This command encapsulates the data required to delete a specific price, identified by its ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-specific-price-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\Command\\DeleteSpecificPriceCommand`\n```\n\n----------------------------------------\n\nTITLE: Identifying the IssueStandardRefundHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the handler responsible for processing the `IssueStandardRefundCommand`. This class contains the logic to execute the standard refund based on the command's data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-standard-refund-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\IssueStandardRefundHandler\n```\n\n----------------------------------------\n\nTITLE: Defining the ToggleStoreStatusCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command responsible for toggling the status of a store in PrestaShop. This command encapsulates the intent to change a store's active status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/toggle-store-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Store\\Command\\ToggleStoreStatusCommand`\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Query Handler Interface\nDESCRIPTION: Interface that defines the contract for handling product editing queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\QueryHandler\\GetProductForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Query Handler Class\nDESCRIPTION: Handler class implementation that processes the GetProductForEditing query. Implements the GetProductForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\QueryHandler\\GetProductForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Specifying EditableEmployee Return Type in PHP\nDESCRIPTION: This code snippet specifies the return type of the GetEmployeeForEditing query. The query returns an EditableEmployee object containing the employee information for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\QueryResult\\EditableEmployee\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler for GetTaxForEditing Query in PHP\nDESCRIPTION: Specifies the handler class responsible for processing the GetTaxForEditing query. This class contains the logic to fetch the tax data based on the provided tax ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/get-tax-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Tax\\QueryHandler\\GetTaxForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Default Parameters for the {url} Smarty Helper in PHP\nDESCRIPTION: Illustrates the default parameters used by the `{url}` Smarty helper, represented as a PHP array. These defaults include language ID, shop ID, alias, SSL usage, protocol relativity, anchor inclusion, and extra parameters. These can be overridden when calling the `{url}` function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$default = [\n    'id_lang' => $context->language->id,\n    'id_shop' => null,\n    'alias' => null,\n    'ssl' => null,\n    'relative_protocol' => true,\n    'with_id_in_anchor' => false,\n    'extra_params' => [],\n    'add_anchor' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAttributeSave Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the actionAttributeSave hook is called in the ProductAttribute class when an attribute is saved. It passes the attribute ID as a parameter to allow hook subscribers to access the saved attribute data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeSave', ['id_attribute' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: PositionUpdateFactory Service Configuration in YAML\nDESCRIPTION: This YAML snippet shows how the PositionUpdateFactory service is set up in PrestaShop, specifying the expected input keys for position updates. This configuration allows customization of input formats by altering the service's argument list. The service must be defined in the proper Symfony service file to be auto-wired and available for injection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  # In src/PrestaShopBundle/Resources/config/services/core/grid.yml\\n  ...\\n  # Grid position updater\\n  prestashop.core.grid.position.position_update_factory:\\n    class: 'PrestaShop\\\\PrestaShop\\\\Core\\\\Grid\\\\Position\\\\PositionUpdateFactory'\\n    arguments:\\n      - 'positions'\\n      - 'rowId'\\n      - 'oldPosition'\\n      - 'newPosition'\\n      - 'parentId'\n```\n\n----------------------------------------\n\nTITLE: Setting Product Images Handler Class Path in PHP\nDESCRIPTION: Full namespace path for the handler class that implements the command functionality. Implements SetProductImagesForAllShopHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-images-for-all-shop-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Image\\CommandHandler\\SetProductImagesForAllShopHandler\n```\n\n----------------------------------------\n\nTITLE: Executing Customer Form Validation Hook in PHP\nDESCRIPTION: This snippet demonstrates how the 'validateCustomerFormFields' hook is called in PrestaShop. It is executed to validate additional fields sent by modules during customer registration. The hook passes the form fields and expects an array return.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/validateCustomerFormFields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('validateCustomerFormFields', ['fields' => $formFields], $moduleId, true)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hook in PrestaShop Admin Controller - PHP\nDESCRIPTION: The code snippet demonstrates dispatching a hook in PrestaShop's Admin Improve Shipping Preferences Controller. It calls the 'actionAdminShippingPreferencesControllerPostProcessCarrierOptionsBefore' hook during the post-process phase, passing the controller as a parameter. The dispatchHook function is used for triggering actions that can be intercepted by modules hooked to this event. No external dependencies are required, and the snippet operates within the constraints of PrestaShop's core platform.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShippingPreferencesControllerPostProcessCarrierOptionsBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminShippingPreferencesControllerPostProcessCarrierOptionsBefore',\n                ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Hook Execution Call in PHP\nDESCRIPTION: Shows how the hook is executed in the core code, passing the current form instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateCustomerAddressForm.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionValidateCustomerAddressForm', ['form' => $this])\n```\n\n----------------------------------------\n\nTITLE: Referencing UpdateCartCarrierCommand Class in PrestaShop\nDESCRIPTION: The fully qualified class name for the command that updates a cart's carrier (delivery option) in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-cart-carrier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\UpdateCartCarrierCommand`\n```\n\n----------------------------------------\n\nTITLE: Enabling PrestaShop Webservice Programmatically in PHP\nDESCRIPTION: Code snippet for enabling the PrestaShop webservice API by updating the configuration value. The webservice feature is disabled by default and needs to be switched on before first use.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/creating-access.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nConfiguration::updateValue('PS_WEBSERVICE', 1);\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Supplier XML Schema Template\nDESCRIPTION: Blank XML schema template for creating or updating supplier data in PrestaShop. Includes all available fields with support for multilingual content through language nodes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/suppliers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supplier>\n    <id><![CDATA[]]></id>\n    <link_rewrite><![CDATA[]]></link_rewrite>\n    <name><![CDATA[]]></name>\n    <active><![CDATA[]]></active>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n    <meta_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_title>\n    <meta_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_description>\n    <meta_keywords>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_keywords>\n  </supplier>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Declaring the EditTaxCommand Class in PrestaShop PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the `EditTaxCommand`. This command is used within the PrestaShop Core domain to represent the action of editing an existing tax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/edit-tax-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\Command\\EditTaxCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for SearchCartRules in PHP\nDESCRIPTION: Specifies the return type for the SearchCartRules query, which is an array of FoundCartRule objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/search-cart-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\QueryResult\\FoundCartRule[]\n```\n\n----------------------------------------\n\nTITLE: Adding a Manufacturer Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This command object enables the addition of a new manufacturer address, encapsulating address details specific to manufacturers in PrestaShop. It requires references to PrestaShop's core command infrastructure and appropriate manufacturer identification. Expected inputs include manufacturer ID and address-related parameters; successful execution returns the newly created address ID. Designed for use with the command bus and maintains domain integrity by validating manufacturer context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// AddManufacturerAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for adding a manufacturer address\n */\nclass AddManufacturerAddressCommand\n{\n    private $manufacturerId;\n    private $addressData;\n\n    public function __construct($manufacturerId, array $addressData)\n    {\n        $this->manufacturerId = $manufacturerId;\n        $this->addressData = $addressData;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectProductInCartDeleteBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionObjectProductInCartDeleteBefore hook is called in PrestaShop. It is executed before a product is removed from a cart, allowing developers to perform actions or modify data at this point.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectProductInCartDeleteBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectProductInCartDeleteBefore', $data, null, true)\n```\n\n----------------------------------------\n\nTITLE: Accessing the PrestaShop Console\nDESCRIPTION: This command executes the PrestaShop console interface from the project's root directory using the `bin/console` script. It allows users to interact with PrestaShop via the command line and run available built-in or custom commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console\n```\n\n----------------------------------------\n\nTITLE: Defining the Constructor Parameter for ToggleStateStatusCommand in PrestaShop PHP\nDESCRIPTION: This snippet defines the constructor parameter for the `ToggleStateStatusCommand`. It requires an integer `$stateId`, representing the unique identifier of the state whose status needs to be toggled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/toggle-state-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $stateId`\n```\n\n----------------------------------------\n\nTITLE: Adding a Zone Filter with ZoneChoiceType in PrestaShop Symfony Form - PHP\nDESCRIPTION: This snippet illustrates how to add a filter for zones to a FilterCollection in a PrestaShop Symfony form, using the ZoneChoiceType. It demonstrates the instantiation and configuration of a Filter object, setting its type to ZoneChoiceType, passing required options (such as making the field optional), and associating the filter with the 'zone_name' column. Dependencies include PrestaShop's FilterCollection, Filter, and ZoneChoiceType classes, all found in the PrestaShop PHP codebase. Inputs are filter and form option arrays; outputs are an updated filter collection usable in grid definitions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/zone-choice-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn (new FilterCollection())    \n    ->add(\n        (new Filter('id_zone', ZoneChoiceType::class))\n        ->setTypeOptions([\n            'required' => false,\n        ])\n        ->setAssociatedColumn('zone_name')\n    )\n```\n\n----------------------------------------\n\nTITLE: Bulk Toggling Module Status Command - PrestaShop - PHP\nDESCRIPTION: Declares the BulkToggleModuleStatusCommand class, which encapsulates a command to enable or disable multiple modules collectively via the PrestaShop domain layer. The class accepts an array of module identifiers and a boolean indicating the expected status as constructor parameters. This command is handled by BulkToggleModuleStatusHandler and returns void; it forms part of a CQRS-based module system and adheres to a strict handler interface specification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/module/_partials/bulk-toggle-module-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Module\\Command\\BulkToggleModuleStatusCommand\n// _Bulk toggles module status_\n// Constructor parameters: array $modules, bool $expectedStatus\n// Handler class: PrestaShop\\PrestaShop\\Adapter\\Module\\CommandHandler\\BulkToggleModuleStatusHandler\n// Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Module\\CommandHandler\\BulkToggleModuleStatusHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Setting Mode Type to Offset for CSV Export in PHP\nDESCRIPTION: Shows how to set the mode type to MODE_OFFSET, where the offset increases by the limit with each iteration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n->setModeType(CsvResponse::MODE_OFFSET)\n```\n\n----------------------------------------\n\nTITLE: Defining Address Type Constructor Parameter (PHP)\nDESCRIPTION: Represents the string address type (`$addressType`) required by the `EditCartAddressCommand` constructor. This specifies whether the delivery or invoice address (or potentially others) is being edited.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`$string $addressType`\n```\n\n----------------------------------------\n\nTITLE: Calling displayFeatureValueForm Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayFeatureValueForm hook in a PrestaShop template. It passes the feature value ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFeatureValueForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h=\"displayFeatureValueForm\" id_feature_value=$feature_value->id|intval}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormHandler Hook in PHP\nDESCRIPTION: Example implementation of a FormHandler hook that processes combination form data after update. The hook receives form data parameters and can access the combination ID from the submitted data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function hookActionAfterUpdateCombinationFormFormHandler(array $params): void\n{\n    $combinationId = $params['form_data']['id'];\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Actions Column in HelperList PHP\nDESCRIPTION: Shows how to add an 'Actions' column to the HelperList with edit, delete, and view options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$helper->actions = array('edit', 'delete', 'view');\n```\n\n----------------------------------------\n\nTITLE: Identifying the BulkDeleteSearchEngineCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and class name for the `BulkDeleteSearchEngineCommand` within the PrestaShop framework. This command class represents the intention to delete multiple search engine records.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/bulk-delete-search-engine-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\Command\\BulkDeleteSearchEngineCommand`\n```\n\n----------------------------------------\n\nTITLE: Linking User Uploaded Files Directly in PrestaShop Template - HTML\nDESCRIPTION: This snippet demonstrates a traditional approach to referencing user-uploaded files in PrestaShop back office templates by linking directly to the path of the file (e.g., an uploaded image). The anchor element uses the variable 'message.attachmentFile' as the target, without any secure routing or content-type enforcement. Using this direct method can pose security risks if files contain malicious content, as files will be served as-is by the web server.\n\nNo special dependencies are required for this usage. The key input is 'message.attachmentFile', which should be a relative or absolute path to the uploaded resource. This approach is not recommended for untrusted files due to the risk of unintended browser behavior or script execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/read_uploaded_files_securely.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ message.attachmentFile }}\" target=\"_blank\">\n```\n\n----------------------------------------\n\nTITLE: Configuring PrestaShop 8 Documentation Front Matter in YAML\nDESCRIPTION: This snippet defines the YAML front matter configuration for PrestaShop 8 documentation page. It includes version identifiers, GitHub path, menu titles, and search configuration for Algolia DocSearch integration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: PrestaShop 8 Documentation\nmenuTitle: PrestaShop 8\nversionId: \"8\"            # this should match the physical directory in devdocs-site\nversionGithubPath: \"8.x\"  # this should match the branch name in github\nversionMeta: Current        # only one version can be current!\nchapter: true\nhookListUrl: \"/8/modules/concepts/hooks/list-of-hooks\"  # this allows for dynamic hook results in algolia's docsearch\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Value Command Class in PrestaShop\nDESCRIPTION: The AddFeatureValueCommand is used to add predefined feature values in PrestaShop, rather than custom values assigned to specific products. It requires a feature ID and an array of localized values as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/add-feature-value-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\Command\\AddFeatureValueCommand\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationCommand Class in PHP for PrestaShop\nDESCRIPTION: This code snippet defines the UpdateCombinationCommand class used for updating general combination data in PrestaShop. It specifies the class namespace, constructor parameters, and notes that it's designed for single-call persistence of general combination data, not for handling combination relations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationCommand\n```\n\n----------------------------------------\n\nTITLE: Calling displayPersonalInformationTop Hook in PrestaShop Checkout\nDESCRIPTION: This snippet shows how to call the displayPersonalInformationTop hook in a Smarty template. The hook is used to display custom content above the personal information section during checkout, passing the customer object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPersonalInformationTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayPersonalInformationTop' customer=$customer}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in PrestaShop CLI\nDESCRIPTION: Command to enable debug mode in PrestaShop from the command line.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-debug.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console prestashop:debug on\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Sort Hook in PrestaShop Controller\nDESCRIPTION: Shows how the actionAdminProductsControllerSortAfter hook is dispatched in the ProductController with parameters. This hook is triggered after product sorting operations in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerSortAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerSortAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Calling displayCustomerAccount Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayCustomerAccount hook in a PHP template file. The hook is used to display additional elements on the customer account page in the PrestaShop front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCustomerAccount.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCustomerAccount'}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Product Attributes Using PrestaShop Command Pattern (PHP)\nDESCRIPTION: Defines a PHP command class for batching deletion of product attributes in PrestaShop. The command receives an array of attribute IDs via its constructor and is processed by a handler implementing BulkDeleteAttributeHandlerInterface. Dependencies include PrestaShop's Command and Handler architecture, and input is a PHP array of attribute IDs, while the command itself returns void. The handler performs the deletion logic and must be registered within PrestaShop's dependency injection system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/bulk-delete-attribute-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\Attribute\\Command\\BulkDeleteAttributeCommand\n// Deletes attributes in bulk action\n// Constructor parameters:\n//     array $attributeIds\n// Handler class:\n//     PrestaShop\\PrestaShop\\Adapter\\Attribute\\CommandHandler\\BulkDeleteAttributeHandler\n// Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\Attribute\\CommandHandler\\BulkDeleteAttributeHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Removing Related Products Command Class Reference - PHP\nDESCRIPTION: Command class that handles removing all related products from a specified product. Takes a product ID as constructor parameter and returns void. The command is handled by RemoveAllRelatedProductsHandler which implements RemoveAllRelatedProductsHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-related-products-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\RemoveAllRelatedProductsCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\RemoveAllRelatedProductsHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\RemoveAllRelatedProductsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Tags Handler Interface Path\nDESCRIPTION: Fully qualified namespace path for the interface that the handler implements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-product-tags-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\RemoveAllProductTagsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attribute Groups Handler Interface Path\nDESCRIPTION: Fully qualified namespace path for the interface that defines the contract for handling product attribute group queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-attribute-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\QueryHandler\\GetProductAttributeGroupsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Including AddFeatureValueCommand Documentation Partial in Markdown\nDESCRIPTION: This snippet uses the Hugo include-md shortcode to import the AddFeatureValueCommand documentation from a modular markdown partial. It follows the same structure as other command inclusions and serves to document the behavior and interface of the AddFeatureValueCommand in the PrestaShop Feature domain. Dependencies include the Hugo static site generator and the referenced markdown file. There are no configurable parameters, and the expected output is the inline expansion of the included file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/add-feature-value-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Calling a Widget Directly in PHP\nDESCRIPTION: PHP method for directly calling a module's widget functionality using the Hook::coreRenderWidget method with module instance, hook name, and parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nHook::coreRenderWidget(Module $module, $hook_name, $params);\n```\n\n----------------------------------------\n\nTITLE: Using the prestashop:linter:security-annotation command with its available actions\nDESCRIPTION: The command provides two actions: 'list' for displaying all routes with their associated permissions, and 'find-missing' for identifying routes that lack security annotations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-linter-security-annotation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `prestashop:linter:security-annotation`\n\n## Informations\n\n* Path: `src/PrestaShopBundle/Command/SecurityAnnotationLinterCommand.php`\n* Arguments:\n  * `action`: Action to perform, must be one of: `list` and `find-missing`\n\n## Description\n\nThis command aims to check if Back Office controller routes have configured Security annotations.\n\nTwo options are available: Listing and Finding Missing.\n\n### Listing\nThis option aims to list all routes, and their related permissions.\n\n### Finding missing\nThis option aims to find routes with missing security annotations.\n```\n\n----------------------------------------\n\nTITLE: Currency Query Handler Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the GetCurrencyForEditingHandler class that implements the query handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\QueryHandler\\GetCurrencyForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Escaping Translated Strings in JavaScript\nDESCRIPTION: Demonstrates how to assign a translated string to a variable and escape it for use in JavaScript within Smarty templates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{assign var='translatedString' value={l s='Text containing single quote' d='Modules.Mymodule.Shop'}}\n<script>var text='{$translatedString|escape:'javascript'}';</script>\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization Header in PHP\nDESCRIPTION: PHP code to generate a base64 encoded authorization key from an API key for use in request headers. The authorization key is created by encoding the API key followed by a colon.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-access.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$apiKey = `UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX`;\n$authorizationKey = base64_encode($apiKey . ':'); // VUNDTExROU4yQVJTSFdDWExUNzRLVUtTU0szNEJGS1g6\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionBeforeCreate<FormName>FormHandler Hook in PHP\nDESCRIPTION: This code snippet shows how the actionBeforeCreate<FormName>FormHandler hook is called in the FormHandler class. It dispatches the hook with the form data as a parameter, allowing for modification of the data before form creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionBeforeCreate<FormName>FormHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            'actionBeforeCreate' . Container::camelize($form->getName()) . 'FormHandler', [\n                'form_data' => &$data,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Registering and Applying Email Transformations in PrestaShop Module\nDESCRIPTION: Module class implementation showing how to register the actionGetMailLayoutTransformations hook and apply the CustomMessageColorTransformation to email templates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/apply-transformation-from-module.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateRendererInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation\\TransformationCollectionInterface;\nuse PrestaShop\\Module\\MyEmailThemeModule\\MailTemplate\\Transformation\\CustomMessageColorTransformation;\n\nclass MyEmailThemeModule extends Module \n{\n   public function install() \n   {\n        return parent::install()\n            // This class constant contains 'actionGetMailLayoutTransformations'\n            && $this->registerHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS)\n        ;\n    }\n    \n    public function uninstall() \n    {\n        return parent::uninstall()\n            && $this->unregisterHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS)\n        ;        \n    }\n    \n    public function enable() \n    {\n        return parent::enable()\n            && $this->registerHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS)\n        ;\n    }\n    \n    public function disable() \n    {\n        return parent::disable()\n            && $this->unregisterHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS)\n        ;        \n    }\n    \n    /**\n     * @param array $hookParams\n     */\n    public function hookActionGetMailLayoutTransformations(array $hookParams)\n    {\n        if (!isset($hookParams['templateType']) ||\n            MailTemplateInterface::HTML_TYPE !== $hookParams['templateType'] ||\n            !isset($hookParams['mailLayout']) ||\n            !isset($hookParams['layoutTransformations'])) {\n            return;\n        }\n\n        /** @var LayoutInterface $mailLayout */\n        $mailLayout = $hookParams['mailLayout'];\n        if ($mailLayout->getModuleName() != $this->name) {\n            return;\n        }\n\n        /** @var TransformationCollectionInterface $transformations */\n        $transformations = $hookParams['layoutTransformations'];\n        $transformations->add(new CustomMessageColorTransformation('#FF0000'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Handler Interface Path in PHP\nDESCRIPTION: Interface path that defines the contract for catalog price rule deletion handler implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/delete-catalog-price-rule-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\CommandHandler\\DeleteCatalogPriceRuleHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing displayProductPriceBlock Hook in PHP\nDESCRIPTION: Example of how to call the displayProductPriceBlock hook in PrestaShop templates. The hook accepts product data and displays unit price information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductPriceBlock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayProductPriceBlock' product=$product type=\"unit_price\"}\n```\n\n----------------------------------------\n\nTITLE: Executing Invoice Formatting Hook in PrestaShop PHP\nDESCRIPTION: This PHP code snippet shows how to trigger the 'actionInvoiceNumberFormatted' hook using the Hook::exec method within the PrestaShop OrderInvoice class. It passes the current instance, language ID, shop ID, and the invoice number, all as parameters accessible to hooked modules. This requires PrestaShop's Hook class and follows the core's dependency injection and module interaction patterns. Inputs include the current order invoice object, language/shop IDs, and the invoice number; the expected outcome is that all hooked listeners process or modify the invoice number formatting accordingly. Listeners must be registered for the 'actionInvoiceNumberFormatted' event to receive these parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionInvoiceNumberFormatted.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionInvoiceNumberFormatted', [\n            get_class($this) => $this,\n            'id_lang' => (int) $id_lang,\n            'id_shop' => (int) $id_shop,\n            'number' => (int) $this->number,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation in Twig Template\nDESCRIPTION: Shows how the displayAdminCustomers hook is rendered in the view template, passing the customer ID from the customerInformation object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminCustomers.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminCustomers', {'id_customer': customerInformation.customerId.value}) }}\n```\n\n----------------------------------------\n\nTITLE: Identifying the ToggleStoreStatusHandler Class in PHP\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command handler responsible for executing the logic to toggle the store status. This handler processes the `ToggleStoreStatusCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/toggle-store-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Store\\CommandHandler\\ToggleStoreStatusHandler`\n```\n\n----------------------------------------\n\nTITLE: Identifying the GetHookStatus Query Class\nDESCRIPTION: Specifies the fully qualified namespace for the `GetHookStatus` query class within the PrestaShop Core Domain. This class represents the query used to fetch the status of a hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/hook/_partials/get-hook-status.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Hook\\Query\\GetHookStatus`\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Order Payment XML Schema Template\nDESCRIPTION: Blank XML schema template for order payment operations in PrestaShop. Contains all available fields including payment details, transaction information, and card data. Used for creating or updating order payment records via the API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_payments.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_payment>\n    <id><![CDATA[]]></id>\n    <order_reference><![CDATA[]]></order_reference>\n    <id_currency><![CDATA[]]></id_currency>\n    <amount><![CDATA[]]></amount>\n    <payment_method><![CDATA[]]></payment_method>\n    <conversion_rate><![CDATA[]]></conversion_rate>\n    <transaction_id><![CDATA[]]></transaction_id>\n    <card_number><![CDATA[]]></card_number>\n    <card_brand><![CDATA[]]></card_brand>\n    <card_expiration><![CDATA[]]></card_expiration>\n    <card_holder><![CDATA[]]></card_holder>\n    <date_add><![CDATA[]]></date_add>\n  </order_payment>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Using AddSpecificPriceCommand in PrestaShop Core Domain\nDESCRIPTION: The AddSpecificPriceCommand is used to create specific prices for products in PrestaShop. It requires parameters like productId, reductionType, reductionValue, tax inclusion flag, price, and quantity threshold. The command is handled by AddSpecificPriceHandler and returns a SpecificPriceId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/specific-price/_partials/add-specific-price-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SpecificPrice\\Command\\AddSpecificPriceCommand\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Exchange Rate in PrestaShop (PHP)\nDESCRIPTION: This code snippet defines the GetCurrencyExchangeRate query class in PrestaShop. It is used to retrieve the exchange rate for a currency compared to the shop's default currency. The query takes an ISO code as a constructor parameter and is handled by the GetCurrencyExchangeRateHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-exchange-rate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Query\\GetCurrencyExchangeRate\n```\n\n----------------------------------------\n\nTITLE: Identifying AddProductToCartHandler Interface (PHP)\nDESCRIPTION: Specifies the fully qualified interface name implemented by the AddProductToCartHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-product-to-cart-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\CommandHandler\\AddProductToCartHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Handler Service in YAML\nDESCRIPTION: Service configuration for setting up a form handler using PrestaShop's default implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n#src/PrestaShopBundle/Resources/config/services/core/form/form_handler.yml\n\nprestashop.core.form.identifiable_object.handler.contact_form_handler:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Handler\\FormHandler'\n  factory: 'prestashop.core.form.identifiable_object.handler.form_handler_factory:create'\n  arguments:\n    - '@prestashop.core.form.identifiable_object.data_handler.contact_form_data_handler'\n```\n\n----------------------------------------\n\nTITLE: Applying License Headers with Header-Stamp\nDESCRIPTION: Commands to install and use Header-Stamp for applying or updating license headers in files. Template AFL licenses are used, with directories like 'vendor', 'tests', and '_dev' excluded. Requires prestashop/php-dev-tools and prestashop/header-stamp installed via Composer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/basic-checks.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"# Install header-stamp\\ncomposer require --dev prestashop/php-dev-tools\\ncomposer require --dev prestashop/header-stamp\\n\\n# Apply header block\\nphp vendor/bin/header-stamp --license=vendor/prestashop/header-stamp/assets/afl.txt --exclude=vendor,tests,_dev\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"php vendor/bin/header-stamp --license=vendor/prestashop/header-stamp/assets/afl.txt --exclude=vendor,tests,_dev --dry-run\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Hooks in Twig Templates\nDESCRIPTION: This code demonstrates how to render hooks directly in Twig templates, allowing for dynamic content insertion while maintaining compatibility with future PrestaShop versions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{{ renderhook(\n    'hookName',\n    {\n        'param1': 'value1',\n        'param2': 'value2'\n    }\n) }}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Return Type (PHP)\nDESCRIPTION: This is the fully qualified name of the Value Object class returned by the `EditCartAddressHandler` upon successful execution. It typically contains the ID (`AddressId`) of the newly created address resulting from the edit operation (as editing involves duplication).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\ValueObject\\AddressId`\n```\n\n----------------------------------------\n\nTITLE: Configuring Quote Repository Service in YAML for PrestaShop Doctrine Module\nDESCRIPTION: This YAML configuration defines a service for the QuoteRepository, allowing easy access to the repository through the service container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/doctrine/how-to-handle-multi-lang-doctrine-entity.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    prestashop.module.demodoctrine.repository.quote_repository:\n        class: PrestaShop\\Module\\DemoDoctrine\\Repository\\QuoteRepository\n        factory: ['@doctrine.orm.default_entity_manager', getRepository]\n        arguments:\n            - PrestaShop\\Module\\DemoDoctrine\\Entity\\Quote\n```\n\n----------------------------------------\n\nTITLE: Loading Headers Module in Apache httpd\nDESCRIPTION: This snippet demonstrates how to load the headers module in Apache httpd. The headers module is required for setting custom HTTP headers, which is useful for configuring browser caching.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule headers_module modules/mod_headers.so\n```\n\n----------------------------------------\n\nTITLE: Executing Customer Update Hook with PrestaShop Hook System in PHP\nDESCRIPTION: This PHP snippet demonstrates how PrestaShop's hook system is utilized to execute the actionCustomerBeforeUpdateGroup hook. It triggers custom behaviors before updating a customer's groups by calling Hook::exec with the hook name and an associative array containing the customer ID (id_customer) and the list of associated groups (groups). Required dependencies include the PrestaShop core Hook class and appropriate context for $this->id and $list. Inputs are the current customer instance and updated groups; outputs depend on registered hook listeners. This snippet assumes the PrestaShop framework is initialized and does not manage hook results directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerBeforeUpdateGroup.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCustomerBeforeUpdateGroup', ['id_customer' => $this->id, 'groups' => $list])\n```\n\n----------------------------------------\n\nTITLE: Running Filtered PHPUnit Tests in PrestaShop\nDESCRIPTION: This command shows how to run specific test methods within a test class using the filter option with debugging enabled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-execute-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit --debug -c tests/Unit/phpunit.xml tests/Unit/PrestaShopBundle/Command/ConfigCommandTest.php --filter testSet\n```\n\n----------------------------------------\n\nTITLE: GetCartRuleForEditing Query Class Definition - PHP\nDESCRIPTION: Query class responsible for retrieving cart rule data for editing in the PrestaShop Back Office. Takes a cart rule ID as input and returns an EditableCartRule object through its handler implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/get-cart-rule-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Query\\GetCartRuleForEditing\n```\n\n----------------------------------------\n\nTITLE: Executing addWebserviceResources Hook in PHP\nDESCRIPTION: Hook execution code that allows adding additional webservice resources. The hook passes the current resources array and expects modifications to be returned. It's called from the WebserviceRequest controller with true for array return and false for exceptions check.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/addWebserviceResources.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('addWebserviceResources', ['resources' => $resources], null, true, false)\n```\n\n----------------------------------------\n\nTITLE: Using DeleteManufacturerLogoImageCommand in PHP\nDESCRIPTION: Command class that handles deleting a manufacturer's logo image. It requires a manufacturer ID as constructor parameter and returns void when executed by its handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/delete-manufacturer-logo-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\DeleteManufacturerLogoImageCommand\n```\n\n----------------------------------------\n\nTITLE: Importing the CsvResponse Component in PHP\nDESCRIPTION: Shows how to import the CsvResponse component using PHP's use statement.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShopBundle\\Component\\CsvResponse;\n```\n\n----------------------------------------\n\nTITLE: Implementing the ToggleStoreStatusHandlerInterface in PHP\nDESCRIPTION: Specifies the interface that the `ToggleStoreStatusHandler` implements. This ensures the handler adheres to the required contract for handling the toggle store status command, promoting consistency and testability.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/toggle-store-status-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Store\\CommandHandler\\ToggleStoreStatusHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionProductActivation Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the actionProductActivation hook is dispatched in PrestaShop. The hook is triggered when a product's activation status changes, and passes the product ID, product object, and activation status as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductActivation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionProductActivation', ['id_product' => (int) $product->id, 'product' => $product, 'activated' => $activate])\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Updating Category Images\nDESCRIPTION: HTML form example for updating an existing category image through the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"http://ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT@example.com/api/images/categories/2\" method=\"POST\" enctype=\"multipart/form-data\">\n  <fieldset>\n    <legend>Update category image 2</legend>\n    <input name=\"ps_method\" value=\"PUT\" type=\"hidden\">\n    <input name=\"image\" type=\"file\">\n    <input value=\"Execute\" type=\"submit\">\n  </fieldset>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with Combinations in PrestaShop\nDESCRIPTION: This snippet guides on creating a product with combinations in PrestaShop using a POST request to the /api/products endpoint. The user needs to modify the <product_type> to 'combinations'. This process is suitable for products that require variations like sizes and colors, which are managed using attributes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product>\n        <id_manufacturer><![CDATA[1]]></id_manufacturer>\n        <id_supplier><![CDATA[1]]></id_supplier>\n        <id_category_default><![CDATA[1]]></id_category_default>\n        <new><![CDATA[1]]></new>\n        <id_default_combination><![CDATA[1]]></id_default_combination>\n        <id_tax_rules_group><![CDATA[1]]></id_tax_rules_group>\n        <type><![CDATA[1]]></type>\n        <id_shop_default><![CDATA[1]]></id_shop_default>\n        <reference><![CDATA[123456]]></reference>\n        <supplier_reference><![CDATA[ABCDEF]]></supplier_reference>\n        <ean13><![CDATA[1231231231231]]></ean13>\n        <state><![CDATA[1]]></state>\n        <product_type><![CDATA[combinations]]></product_type>\n        <price><![CDATA[123.45]]></price>\n        <unit_price><![CDATA[123.45]]></unit_price>\n        <active><![CDATA[1]]></active>\n        <meta_description>\n            <language id=\"1\"><![CDATA[Description]]></language>\n        </meta_description>\n        <meta_keywords>\n            <language id=\"1\"><![CDATA[Keywords]]></language>\n        </meta_keywords>\n        <meta_title>\n            <language id=\"1\"><![CDATA[My Title for SEO]]></language>\n        </meta_title>\n        <link_rewrite>\n            <language id=\"1\"><![CDATA[awesome-product]]></language>\n        </link_rewrite>\n        <name>\n            <language id=\"1\"><![CDATA[My awesome Product with combinations]]></language>\n        </name>\n        <description>\n            <language id=\"1\"><![CDATA[Description]]></language>\n        </description>\n        <description_short>\n            <language id=\"1\"><![CDATA[Short description]]></language>\n        </description_short>\n        <associations>\n            <categories>\n                <category>\n                    <id><![CDATA[1]]></id>\n                </category>\n            </categories>\n        </associations>\n    </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Adding Search Engine Command with Handler - PrestaShop - PHP\nDESCRIPTION: This code snippet documents the use of the AddSearchEngineCommand class and its command handler for adding a new search engine in PrestaShop. It lists constructor parameters ($server and $queryKey), the handler class responsible for processing the command, the interface implemented, and the return value class. Usage requires the related domain and adapter dependencies from PrestaShop, and parameters must be provided as strings representing the server and query key. On execution, it returns an instance of SearchEngineId. This pattern is extensible for other command-handler tasks within PrestaShop's domain layer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/add-search-engine-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// AddSearchEngineCommand instantiates a command to add a search engine in PrestaShop\n// Constructor parameters:\n//   $server (string)   : The server address or name\n//   $queryKey (string) : The query key for the search engine\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\SearchEngine\\CommandHandler\\AddSearchEngineHandler\n// Implements:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\CommandHandler\\AddSearchEngineHandlerInterface\n// Return type:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\ValueObject\\SearchEngineId\n\n// Example instantiation (not provided in content):\n// $command = new AddSearchEngineCommand($server, $queryKey);\n\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockCommand Class in PHP\nDESCRIPTION: This snippet defines the UpdateCombinationStockCommand class in the PrestaShop core domain. It is used to update combination stock information and requires a combinationId as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationStockCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Expiration Rules for Different File Types in Apache\nDESCRIPTION: This configuration block sets up expiration rules for various file types. It defines custom MIME types, sets a default expiration time, and specifies different expiration times for images and fonts. It also prevents caching of PHP scripts unless they explicitly send cache headers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_5\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_expires.c>\n  AddType application/x-font-woff .woff\n  AddType image/svg+xml .svg\n\n  ExpiresActive On\n\n  ExpiresDefault \"access plus 7200 seconds\"\n  ExpiresByType image/jpg \"access plus 1 month\"\n  ExpiresByType image/jpeg \"access plus 1 month\"\n  ExpiresByType image/gif \"access plus 1 month\"\n  ExpiresByType image/png \"access plus 1 month\"\n  ExpiresByType image/x-icon \"access plus 1 month\"\n  ExpiresByType application/x-font-woff \"access plus 1 month\"\n  <FilesMatch \\.php$>\n    # Do not allow PHP scripts to be cached unless they explicitly send cache headers themselves.\n    ExpiresActive Off\n  </FilesMatch>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCustomerOrdersHandler Class Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetCustomerOrdersHandler` class within the PrestaShop Adapter layer. This class is responsible for processing the `GetCustomerOrders` query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-orders.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Customer\\QueryHandler\\GetCustomerOrdersHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing displayCustomization Hook in PrestaShop\nDESCRIPTION: Implementation of the displayCustomization hook execution in PrestaShop's Product class. The hook passes customization data and module ID as parameters to allow modules to modify or display customization-related content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCustomization.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayCustomization', ['customization' => $row], (int) $row['id_module'])\n```\n\n----------------------------------------\n\nTITLE: Listing Backups with Symfony in PHP\nDESCRIPTION: The 'backup:list' command provides a list of available backups. The command is executed through the Symfony console framework and requires the domain directory to focus or filter the relevant backups for listing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:list help\n\nbackup:list: list all available backups for the store\n\nUsage: backup:list [ADMIN_DIR] \nwith [ADMIN_DIR] the PrestaShop admin directory\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:list admin123\n------------------+---------------+-----------------------------------------+\n| Date            | Version       | File name                               |\n+-----------------+---------------+-----------------------------------------+\n| 15/07/2024 8:00 | 8.1.6         | autoupgrade_save_8.1.6_15/07/2024_8:00  |\n| 14/07/2024 8:00 | 8.1.5         | autoupgrade_save_8.1.5_14/07/2024_8:00  |\n```\n\n----------------------------------------\n\nTITLE: Hook Execution Implementation in PrestaShop\nDESCRIPTION: Shows how the hook is executed in the core code, demonstrating the parameter passing and hook configuration options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminOrdersTrackingNumberUpdate.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAdminOrdersTrackingNumberUpdate', [\n                    'order' => $order,\n                    'customer' => $customer,\n                    'carrier' => $carrier,\n                ], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Identifying the Interface Implemented by GetOrderPreviewHandler in PrestaShop PHP\nDESCRIPTION: Specifies the fully qualified interface name (`GetOrderPreviewHandlerInterface`) that the `GetOrderPreviewHandler` class implements. This interface defines the contract and expected methods for handling the order preview query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-preview.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\QueryHandler\\GetOrderPreviewHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductStatusCommand Constructor Parameters (PHP)\nDESCRIPTION: Specifies the constructor parameters for `UpdateProductStatusCommand`: an integer `$productId` to identify the product and a boolean `$enable` to set the desired status (enabled/disabled). Note: `$int` and `$bool` likely represent standard `int` and `bool` types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $productId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$bool $enable`\n```\n\n----------------------------------------\n\nTITLE: GetReferenceCurrency Query Class Path\nDESCRIPTION: The fully qualified namespace path for the GetReferenceCurrency query class that retrieves reference currency data from CLDR database.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-reference-currency.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Query\\GetReferenceCurrency\n```\n\n----------------------------------------\n\nTITLE: Specific Price Priority Handler Class Path - PHP\nDESCRIPTION: Fully qualified class path for the handler that implements the specific price priority command. Returns void and implements a corresponding handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-specific-price-priority-for-product-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\SpecificPrice\\CommandHandler\\SetSpecificPricePriorityForProductHandler\n```\n\n----------------------------------------\n\nTITLE: Executing actionAttributeGroupSave Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the actionAttributeGroupSave hook is executed in PrestaShop when an attribute group is saved. It passes the ID of the attribute group as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeGroupSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeGroupSave', ['id_attribute_group' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer List XML Structure\nDESCRIPTION: Example of the XML structure returned when fetching a list of customers, showing how each customer has a unique ID that can be used for detailed retrieval.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/retrieve-resource.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <customers>\n        <customer id=\"1\" xlink:href=\"http://example.com/api/customers/1\"/>\n        <customer id=\"2\" xlink:href=\"http://example.com/api/customers/2\"/>\n    </customers>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockAvailableHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface implemented by the UpdateCombinationStockAvailableHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-available-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationStockAvailableHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with Code Coverage in PrestaShop\nDESCRIPTION: This command demonstrates how to run PHPUnit tests with code coverage reporting enabled using Xdebug.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-execute-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nXDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text -c tests/Unit/phpunit.xml tests/Unit/PrestaShopBundle/Command/ConfigCommandTest.php\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderStatusUpdate Hook in PrestaShop Core\nDESCRIPTION: This snippet demonstrates how the actionOrderStatusUpdate hook is called in the PrestaShop core. It uses the Hook::exec method to trigger the hook, passing the new and old order statuses, order ID, and additional parameters for hook execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderStatusUpdate.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderStatusUpdate', [\n    'newOrderStatus' => $new_os,\n    'oldOrderStatus' => $old_os,\n    'id_order' => (int) $order->id,\n], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Executing filterProductContent Hook in ProductController\nDESCRIPTION: This code shows how the filterProductContent hook is called in the ProductController. The hook passes the product template object to subscribers and allows them to modify the product data before it's displayed on the front office product page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterProductContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'filterProductContent',\n                ['object' => $product_for_template],\n                null,\n                false,\n                true,\n                false,\n                null,\n                true\n            )\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminProductsExtra Hook in Product Page\nDESCRIPTION: Code snippet showing how the displayAdminProductsExtra hook is called in the product page template. The hook receives the product ID as a parameter and renders additional content in the Extra tab.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsExtra.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{% set hooks = renderhooksarray('displayAdminProductsExtra', { 'id_product': id_product }) %}\n```\n\n----------------------------------------\n\nTITLE: Executing additionalCustomerAddressFields Hook in PHP\nDESCRIPTION: Hook execution code that allows modules to add custom fields to the customer address form. The hook passes a reference to the fields array that can be modified by hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/additionalCustomerAddressFields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('additionalCustomerAddressFields', ['fields' => &$format], null, true)\n```\n\n----------------------------------------\n\nTITLE: Executing actionObject<ClassName>DeleteBefore Hook in PHP\nDESCRIPTION: The hook is executed before deleting an object in the ObjectModel class. It passes the current object instance to the hook handlers via the 'object' parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>DeleteBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'DeleteBefore', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Querying Required Fields for Address with PrestaShop Query Object (PHP)\nDESCRIPTION: This query object fetches the list of currently required address fields in the PrestaShop Address domain. It is called via the query bus and returns a list of required field names. No input parameters are mandatory, and output is an array of field strings; used primarily for validation UI and API integration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// GetRequiredFieldsForAddress.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Query;\n\n/**\n * Query for getting required address fields\n */\nclass GetRequiredFieldsForAddress\n{\n    public function __construct()\n    {\n        // No parameters\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing BulkDeleteAttributeHandlerInterface (PHP)\nDESCRIPTION: Specifies the fully qualified interface name that the `BulkDeleteAttributeHandler` implements, defining the contract for bulk attribute deletion handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attribute-group/_partials/bulk-delete-attribute-command.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\AttributeGroup\\Attribute\\CommandHandler\\BulkDeleteAttributeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining GetEmployeeForEditingHandlerInterface in PHP\nDESCRIPTION: This code snippet defines the interface that the GetEmployeeForEditingHandler must implement. It ensures that the handler provides the necessary methods to process the GetEmployeeForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\QueryHandler\\GetEmployeeForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCustomerAddressForEditing Query (PHP)\nDESCRIPTION: This defines the `GetCustomerAddressForEditing` query class within the PrestaShop Core Domain. Its purpose is to fetch a specific customer address identified by `$addressId` for editing purposes. The query is processed by the `GetCustomerAddressForEditingHandler` (which implements `GetCustomerAddressForEditingHandlerInterface`) and returns an `EditableCustomerAddress` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/get-customer-address-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\Query\\GetCustomerAddressForEditing`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n| Query details              |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$int $addressId`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Address\\QueryHandler\\GetCustomerAddressForEditingHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\QueryHandler\\GetCustomerAddressForEditingHandlerInterface`</li>  |\n| **Return type** |  `PrestaShop\\PrestaShop\\Core\\Domain\\Address\\QueryResult\\EditableCustomerAddress`  |\n```\n\n----------------------------------------\n\nTITLE: System Information Route Configuration\nDESCRIPTION: Example of a route configuration for the System Information page, showing legacy controller mapping and path definition.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nadmin_system_information:\n    path: system_information\n    methods: [GET]\n    defaults:\n        _controller: 'PrestaShopBundle\\Controller\\Admin\\AdvancedParameters\\SystemInformationController::indexAction'\n        _legacy_controller: AdminInformation\n        _legacy_link: AdminInformation\n```\n\n----------------------------------------\n\nTITLE: Defining GetCatalogPriceRuleForEditing Query in PHP\nDESCRIPTION: This code snippet defines the GetCatalogPriceRuleForEditing query class in the PrestaShop core domain. It takes a catalogPriceRuleId as a constructor parameter and is handled by the GetCatalogPriceRuleForEditingHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/get-catalog-price-rule-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Query\\GetCatalogPriceRuleForEditing\n```\n\n----------------------------------------\n\nTITLE: Implementing MaterialMultipleChoiceTableType in PHP Form Type\nDESCRIPTION: Shows how to create a custom form type class that implements MaterialMultipleChoiceTableType with group restrictions. Demonstrates configuration of table choices, multiple choice columns, and their respective options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-multiple-choice-table.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n    \nuse PrestaShopBundle\\Form\\Admin\\Type\\MaterialMultipleChoiceTableType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('group_restrictions', MaterialMultipleChoiceTableType::class, [\n                'label' => 'Group restrictions',\n                'choices' => [ //these choices are rendered as the first column of the table that represents a row name\n                    'Visitor' => 1,\n                    'Guest' => 2,\n                    'Customer' => 3,\n                ],\n                'multiple_choices' => [\n                    //This will be rendered as a first selections column\n                    [\n                        'name' => 'bank_transfer',\n                        'label' => 'Bank transfer',\n                        'multiple' => true,\n                        'choices' => [ //choice list of this column\n                            'Visitor' => 1,\n                            'Guest' => 2,\n                            'Customer' => 3,\n                        ],\n                    ],\n                    //This will be rendered as second selections column\n                    [\n                        'name' => 'check_payment',\n                        'label' => 'Payments by check',\n                        'multiple' => true,\n                        'choices' => [ //choice list of this column\n                            'Visitor' => 1,\n                            'Guest' => 2,\n                            'Customer' => 3,\n                        ],\n                    ]\n                ],\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductStatusCommand Class (PHP)\nDESCRIPTION: This snippet represents the fully qualified class name (FQCN) for the command used to encapsulate the data required for updating a product's status in PrestaShop's Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductStatusCommand`\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create and switch to a new feature branch\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b \"add-emoticons-support\"\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for GetCustomerCarts Query Handler in PHP for PrestaShop\nDESCRIPTION: This code snippet defines the interface that the GetCustomerCarts query handler must implement. It ensures that the handler provides the necessary methods to process the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-carts.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler\\GetCustomerCartsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: EditManufacturerHandler Implementation in PrestaShop\nDESCRIPTION: The handler class for the EditManufacturerCommand which processes the command to edit manufacturer data. This handler implements the EditManufacturerHandlerInterface to ensure proper contract implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/edit-manufacturer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Manufacturer\\CommandHandler\\EditManufacturerHandler\n```\n\n----------------------------------------\n\nTITLE: GetCategoriesTree Query Implementation in PrestaShop PHP\nDESCRIPTION: This query provides a hierarchical category tree list where each category holds its child categories. It requires languageId and shopId parameters and returns an array of CategoryForTree objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/get-categories-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Query\\GetCategoriesTree\n```\n\n----------------------------------------\n\nTITLE: Display Parameter Examples in PHP\nDESCRIPTION: Examples showing how to use the display parameter to specify which fields to return in the API response\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/additional-list-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'products',\n    'display'  => 'full'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'carriers',\n    'display'  => '[id]'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'configurations',\n    'display'  => '[name,value]'\n];\n```\n\n----------------------------------------\n\nTITLE: Specifying GetEmployeeForEditingHandler Class in PHP\nDESCRIPTION: This code snippet specifies the handler class for the GetEmployeeForEditing query. The handler implements the GetEmployeeForEditingHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\QueryHandler\\GetEmployeeForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Calling displayGDPRConsent Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayGDPRConsent hook in a PrestaShop template. It passes the id_module parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayGDPRConsent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayGDPRConsent' id_module=$id_module}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler for GetOrderPreview Query in PrestaShop PHP\nDESCRIPTION: Specifies the fully qualified class name for the handler responsible for processing the GetOrderPreview query. This handler (`GetOrderPreviewHandler`) resides in the Adapter layer and contains the logic to fetch the order preview data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\QueryHandler\\GetOrderPreviewHandler\n```\n\n----------------------------------------\n\nTITLE: RelationshipsType Fields Structure\nDESCRIPTION: Table defining the fields, types and commands for product relationships management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Field type                       | Description            | CQRS Commands |\n|:-------|:---------------------------------|:-----------------------|---------------|\n| `features` | `CollectionType` [`ProductFeature`] | List of sub forms for product *Feature* entity | `AddProductFeatureCommand` `UpdateProductFeatureCommand` `RemoveProductFeatureCommand` |\n| `id_manufacturer` | `ChoiceType` | **One** of the `ManufacturerCore` | `UpdateProductManufacturerCommand` |\n| `related_products` | `TypeaheadProductCollectionType` | List of related products | `AddRelatedProductCommand` `RemoveRelatedProductCommand` |\n```\n\n----------------------------------------\n\nTITLE: PrestaShop SpecificPrice Handler Implementation\nDESCRIPTION: The handler class for the AddSpecificPriceCommand implements the AddSpecificPriceHandlerInterface and is responsible for processing the command to create specific prices in the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/specific-price/_partials/add-specific-price-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\SpecificPrice\\CommandHandler\\AddSpecificPriceHandler\n```\n\n----------------------------------------\n\nTITLE: Twig Template Translation Domain Setup\nDESCRIPTION: Example of setting up a default translation domain in Twig templates. The trans_default_domain directive sets the domain for the entire file, allowing simplified translation syntax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-tips.md#2025-04-22_snippet_2\n\nLANGUAGE: Twig\nCODE:\n```\n{% trans_default_domain 'Admin.Catalog.Feature' %}\n{{ 'Hello world'|trans }}\n{{ 'Something else'|trans }}\n```\n\n----------------------------------------\n\nTITLE: Styling Deprecation Indicators in CSS\nDESCRIPTION: CSS styles for formatting deprecation notices and condensing lists in the documentation page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.1.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#body-inner li, #body-inner li ul, li p { margin-bottom: 0.2rem}\n#body-inner depre {font-size: 85%; color: #666; font-style: italic; vertical-align: middle }\n#body-inner depre::before {content: ' – '}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchProductCombinations Query Class in PHP\nDESCRIPTION: This code snippet defines the SearchProductCombinations query class in PrestaShop's Core Domain. It includes constructor parameters for productId, languageId, shopConstraint, searchPhrase, and limit.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-product-combinations.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Query\\SearchProductCombinations\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleInstallBefore Hook in PrestaShop PHP\nDESCRIPTION: This code snippet demonstrates how the actionModuleInstallBefore hook is executed in PrestaShop. It's called before a module is installed, passing the current module object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleInstallBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionModuleInstallBefore', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDeactivateBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminDeactivateBefore hook is dispatched in the ProductController. It uses the dispatchWithParameters method to trigger the hook with specific parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDeactivateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDeactivateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Module Override Directory Structure PrestaShop 1.7\nDESCRIPTION: Illustrates the simplified directory structure for overriding module assets and templates in PrestaShop 1.7.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n└── modules\n    ├── css\n    │   ├── external-lib.css\n    │   └── style.css\n    ├── js\n    │   └── app.js\n    └── views\n        └── templates\n            └── front\n                ├── included-template.tpl\n                └── moduledemo.tpl\n\n6 directories, 5 files\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for displayAdminOrderMainBottom Hook in PHP\nDESCRIPTION: Shows the parameter structure passed to the displayAdminOrderMainBottom hook. The hook receives an array containing the order ID as its parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderMainBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Executing actionFrontControllerSetMedia Hook Using PrestaShop Hook System in PHP\nDESCRIPTION: This PHP snippet demonstrates the use of PrestaShop's Hook system to invoke the 'actionFrontControllerSetMedia' hook from core code, specifically in 'FrontController.php'. This method ('Hook::exec') is used to broadcast an event so external modules can add or modify front office media resources. No additional parameters are provided to the hook in this context. Dependencies include PrestaShop's core Hook class. The input is the hook name and parameters array (empty here); expected outputs depend on registered hook listeners. No direct result is expected; the method is fire-and-forget, designed for extensibility rather than direct data acquisition.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerSetMedia.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionFrontControllerSetMedia', [])\n```\n\n----------------------------------------\n\nTITLE: Using AddCurrencyCommand Class for Adding Official Currencies in PrestaShop\nDESCRIPTION: The AddCurrencyCommand class is used to add an official currency in PrestaShop. It requires an ISO code, exchange rate, and enabled status as constructor parameters. The command is handled by AddOfficialCurrencyHandler and returns a CurrencyId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/add-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\AddCurrencyCommand\n```\n\n----------------------------------------\n\nTITLE: Identifying the Delete Search Engine Command Class in PHP\nDESCRIPTION: This snippet specifies the fully qualified namespace and class name for the `DeleteSearchEngineCommand` within the PrestaShop Core Domain. This command encapsulates the request to delete a specific search engine identified by its ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/delete-search-engine-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\Command\\DeleteSearchEngineCommand`\n```\n\n----------------------------------------\n\nTITLE: Creating Order DTO in PHP for PrestaShop\nDESCRIPTION: Defines a Data Transfer Object (DTO) for Order information, encapsulating order details such as ID, reference, state, and date.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\DTO;\n\nuse DateTimeImmutable;\n\nfinal class Order\n{\n    private $orderId;\n    private $reference;\n    private $orderStateId;\n    private $orderDate;\n\n    public function __construct(int $orderId, string $reference, int $orderStateId, DateTimeImmutable $orderDate)\n    {\n        $this->orderId = $orderId;\n        $this->reference = $reference;\n        $this->orderStateId = $orderStateId;\n        $this->orderDate = $orderDate;\n    }\n\n    // Getters...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GetCartForViewing Query Handler in PHP\nDESCRIPTION: This snippet specifies the handler class for the GetCartForViewing query. The handler implements the GetCartForViewingHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-viewing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\QueryHandler\\GetCartForViewingHandler\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductStatusHandlerInterface (PHP)\nDESCRIPTION: Specifies the interface implemented by the `UpdateProductStatusHandler`. This interface defines the contract (e.g., the `handle` method) for handling product status updates within PrestaShop's Core Domain, ensuring consistency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-status-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductStatusHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining Import Handler Interface in PHP\nDESCRIPTION: Interface defining the core methods required for implementing import handlers including setup, row processing and teardown operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/Handler/ImportHandlerInterface.php\n\ninterface ImportHandlerInterface\n{\n    /**\n     * Executed before import process is started.\n     */\n    public function setUp(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig);\n\n    /**\n     * Imports one data row.\n     */\n    public function importRow(\n        ImportConfigInterface $importConfig,\n        ImportRuntimeConfigInterface $runtimeConfig,\n        DataRowInterface $dataRow\n    );\n\n    /**\n     * Executed when the import process is completed.\n     */\n    public function tearDown(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig);\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Array Parameters to PHP Scripts via YAML for PrestaShop Modules\nDESCRIPTION: YAML configuration showing how to pass a complex array parameter (`oneArrayParam`) to a PHP script via the `params` key. The array contains both indexed string values and an associative key-value pair, which will be available within the `$params` array in the script's `run` method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nphp:\n    - file: \"ConfigurationScript.php\"\n      params:\n        - oneArrayParam:\n            - \"value1\"\n            - \"value2\"\n            - withSpecificKey: \"value3\"\n```\n\n----------------------------------------\n\nTITLE: Defining PrestaShop DeleteAttributeCommand Class\nDESCRIPTION: Specifies the fully qualified namespace for the `DeleteAttributeCommand` class within the PrestaShop core domain structure. This command encapsulates the data required to delete an attribute.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attribute-group/_partials/delete-attribute-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\AttributeGroup\\Attribute\\Command\\DeleteAttributeCommand`\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring SeverityLevelColumn in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create and configure a `SeverityLevelColumn` for a PrestaShop Grid. It initializes the column, sets its display name, and configures options using `setOptions`. The `field` option specifies the data record field ('severity') to use for the level, and `with_message` is set to true to display associated messages. Finally, the configured column is added to a `ColumnCollection`. Requires the `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Status\\SeverityLevelColumn` and `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection` classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/severity-level.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Status\\SeverityLevelColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$severityColumn = new SeverityLevelColumn('severity');\n$severityColumn->setName('Severity (1-4)');\n$severityColumn->setOptions([\n     'field' => 'severity',\n     'with_message' => true,    // enable severity messages\n]);\n\n$columns = new ColumnCollection();\n$columns->add($severityColumn);\n```\n\n----------------------------------------\n\nTITLE: Disabling Token in Apache Configuration\nDESCRIPTION: Apache configuration snippet to disable token generation in PrestaShop back-office URLs for benchmarking purposes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSetEnv _TOKEN_ disabled\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateCombinationDetailsCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command used to initiate the update of product combination details within the PrestaShop Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-details-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationDetailsCommand`\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderHistoryAddAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionOrderHistoryAddAfter hook is called in PrestaShop. It's executed after an order history entry is added, passing the order history object and using the order's shop ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderHistoryAddAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderHistoryAddAfter', ['order_history' => $this], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Executing dashboardZoneTwo Hook in PrestaShop\nDESCRIPTION: Demonstrates the hook execution call for dashboardZoneTwo in the admin dashboard context. The hook accepts parameters passed through the $params variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/dashboardZoneTwo.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('dashboardZoneTwo', $params)\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminProductsMainStepRightColumnBottom Hook in Product Page Template\nDESCRIPTION: This code shows how the hook is called in the essentials.html.twig template. It passes the product ID as a parameter to allow modules to reference the specific product being edited.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsMainStepRightColumnBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsMainStepRightColumnBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleInstallAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionModuleInstallAfter hook is executed in PrestaShop. It passes the current object as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleInstallAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionModuleInstallAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Interface for Language Edit Command Handler in PrestaShop\nDESCRIPTION: This is the interface that the EditLanguageHandler implements, defining the contract for handling language edit operations in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/edit-language-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\CommandHandler\\EditLanguageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: CMS Page Deletion Command Class Reference\nDESCRIPTION: Core command class for deleting CMS pages in PrestaShop. Takes a CMS page ID as constructor parameter and returns void. The command is handled by DeleteCmsPageHandler which implements DeleteCmsPageHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/delete-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\DeleteCmsPageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\DeleteCmsPageHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\DeleteCmsPageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Generic Route Configuration Template\nDESCRIPTION: Template showing the standard structure for defining routes in PrestaShop, including legacy controller and action mappings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/modern/controller-routing.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroute_name:\n    path: some/url\n    methods: [GET]\n    defaults:\n        _controller: 'PrestaShopBundle\\Controller\\Path\\To\\ControllerClass::{actionName}Action'\n        _legacy_controller: LegacyController\n        _legacy_link: {LegacyController}:{actionName}\n        \n# In some cases several controllers/actions are managed by the same migrated controller\n# You have the possibility to set an array as _legacy_link thus preventing you from defining alias routes\nother_route_name:\n    path: some/other/url\n    methods: [GET]\n    defaults:\n        _controller: 'PrestaShopBundle\\Controller\\Path\\To\\Other\\ControllerClass::{actionName}Action'\n        _legacy_controller: LegacyController\n        _legacy_link:\n            - {LegacyController}:{actionName}\n            - {LegacyController}:{aliasActionName}\n```\n\n----------------------------------------\n\nTITLE: Handler Interface for GetCartForOrderCreation Query\nDESCRIPTION: Interface that the handler class implements, defining the contract for processing the GetCartForOrderCreation query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-order-creation.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\QueryHandler\\GetCartForOrderCreationHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Back Office Cart Creation Flow\nDESCRIPTION: Flowchart illustrating the cart creation process in the back office, including options for new cart creation and using existing carts or orders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/orders-lifecycle/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A{{Select Customer}}-->|Create new Cart|E{{Cart: creation}}-->G\n   A-->|Use existing Cart|B{{Select existing Cart}}-->F\n   A-->|Create new Cart from Order|C{{Select existing Order}}-->D{{Cart: creation from Order content}}-->G{{Associate Cart to Customer}}-->F(Cart: associated to Customer)\n```\n\n----------------------------------------\n\nTITLE: Querying Catalog Price Rules for Products in PrestaShop Core Domain\nDESCRIPTION: This class retrieves a list of catalog price rules applicable to a specific product. It requires a product ID and language ID, with optional pagination parameters (limit and offset). The query is handled by GetCatalogPriceRuleListForProductHandler and returns a CatalogPriceRuleList object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/get-catalog-price-rule-list-for-product.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Query\\GetCatalogPriceRuleListForProduct\n```\n\n----------------------------------------\n\nTITLE: Integrating renderForm() Output in getContent() (PHP)\nDESCRIPTION: This code represents how a PrestaShop module's 'getContent()' method can call its 'renderForm()' to compose and return the resulting HTML for admin display. It assumes that 'renderForm()' correctly returns a valid HTML string. The dependency is the existing module with both methods implemented; inputs are implicit (admin page load), and output is the generated HTML for module configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperform.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return string\n   */\npublic function getContent()\n{\n   // ...\n   $html .= $this->renderForm();\n   // ...\n   return $html;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing actionFrontControllerSetVariables Hook in a Module (PHP)\nDESCRIPTION: This snippet provides an example implementation of the `hookActionFrontControllerSetVariables` method within a PrestaShop module. The function should return an associative array where keys are the desired variable names and values are their corresponding data. These variables become accessible in Front Office JavaScript (`prestashop.modules.your_module_name.your_variable_name`) and Smarty templates (`{$modules.your_module_name.your_variable_name}`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerSetVariables.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    <?php\n    public function hookActionFrontControllerSetVariables()\n    {\n        return [\n            'your_variable_name' => 'Your variable value',\n        ];\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining ReplyToCustomerThreadHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the ReplyToCustomerThreadHandler implements. It defines the contract for handling replies to customer threads in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/reply-to-customer-thread-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\ReplyToCustomerThreadHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: XML Formatting for API Requests\nDESCRIPTION: Examples of correct and incorrect XML formatting when submitting data to the PrestaShop API. Proper formatting avoids line breaks and whitespace inside XML tags to prevent breaking resources.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<id>{id}</id>\n```\n\n----------------------------------------\n\nTITLE: Defining GetCreditSlipIdsByDateRangeHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the GetCreditSlipIdsByDateRangeHandler implements. It defines the contract for handling the GetCreditSlipIdsByDateRange query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/credit-slip/_partials/get-credit-slip-ids-by-date-range.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CreditSlip\\QueryHandler\\GetCreditSlipIdsByDateRangeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Example Output of the `classnames` Smarty Modifier\nDESCRIPTION: Displays the resulting HTML `<body>` tag generated by applying the `classnames` modifier to the example `$page.body_classes` array. It includes only the classes marked as `true` in the input array, sanitized and space-separated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n  <body class=\"lang-fr country-fr currency-eur layout-full-width page-index\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications in Smarty Template\nDESCRIPTION: This snippet shows how to implement notifications as a partial template file in the 'Classic' Theme. It iterates through different types of notifications (error, warning, success, info) and displays them with appropriate styling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n<aside id=\"notifications\">\n\n  {if $notifications.error}\n    {block name='notifications_error'}\n      <article class=\"notification notification-danger\" role=\"alert\" data-alert=\"danger\">\n        <ul>\n          {foreach $notifications.error as $notif}\n            <li>{$notif nofilter}</li>\n          {/foreach}\n        </ul>\n      </article>\n    {/block}\n  {/if}\n\n  {if $notifications.warning}\n    {block name='notifications_warning'}\n      <article class=\"notification notification-warning\" role=\"alert\" data-alert=\"warning\">\n        <ul>\n          {foreach $notifications.warning as $notif}\n            <li>{$notif nofilter}</li>\n          {/foreach}\n        </ul>\n      </article>\n    {/block}\n  {/if}\n\n  {if $notifications.success}\n    {block name='notifications_success'}\n      <article class=\"notification notification-success\" role=\"alert\" data-alert=\"success\">\n        <ul>\n          {foreach $notifications.success as $notif}\n            <li>{$notif nofilter}</li>\n          {/foreach}\n        </ul>\n      </article>\n    {/block}\n  {/if}\n\n  {if $notifications.info}\n    {block name='notifications_info'}\n      <article class=\"notification notification-info\" role=\"alert\" data-alert=\"info\">\n        <ul>\n          {foreach $notifications.info as $notif}\n            <li>{$notif nofilter}</li>\n          {/foreach}\n        </ul>\n      </article>\n    {/block}\n  {/if}\n\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Defining GetAttributeGroupList Query Constructor Parameter (PHP)\nDESCRIPTION: Defines the constructor parameter `$withAttributes` for the `GetAttributeGroupList` query. It is a boolean (`bool`) flag that determines whether the query should return associated attributes along with the attribute groups.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-attribute-group-list.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n`$bool $withAttributes`\n```\n\n----------------------------------------\n\nTITLE: Disabling PrestaShop Webservice Programmatically in PHP\nDESCRIPTION: Code snippet for disabling the PrestaShop webservice API by updating the configuration value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/creating-access.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nConfiguration::updateValue('PS_WEBSERVICE', 0);\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for GetEmployeeEmailById Query in PHP\nDESCRIPTION: This snippet specifies the handler class for the GetEmployeeEmailById query. The handler implements the GetEmployeeEmailByIdHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-email-by-id.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\QueryHandler\\GetEmployeeEmailByIdHandler\n```\n\n----------------------------------------\n\nTITLE: Using AddPaymentCommand in PrestaShop Order Payment System\nDESCRIPTION: The AddPaymentCommand is used to add payment information to a given order. It requires order ID, payment date, method, amount, currency ID, employee ID, and optional parameters like order invoice ID and transaction ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/add-payment-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Payment\\Command\\AddPaymentCommand\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Country Required Fields Query Class Path\nDESCRIPTION: Fully qualified namespace path for the GetCountryRequiredFields query class that handles retrieving country-specific required fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/country/_partials/get-country-required-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Country\\Query\\GetCountryRequiredFields\n```\n\n----------------------------------------\n\nTITLE: Parsing Multilingual Product Data in JSON Response\nDESCRIPTION: Example of JSON output for a product with multilingual fields. Demonstrates how language-specific data is structured within the JSON response, including product name and description in multiple languages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/multilang-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"product\": {\n        \"id\": 19,\n        \"id_manufacturer\": \"1\",\n        ...\n        \"name\": [\n            {\n                \"id\": \"1\",\n                \"value\": \"Customizable mug\"\n            },\n            {\n                \"id\": \"2\",\n                \"value\": \"Mug personnalisable\"\n            }\n        ],\n        \"description\": [\n            {\n                \"id\": \"1\",\n                \"value\": \"<p><span style=\\\"font-size:10pt;font-style:normal;\\\"><span style=\\\"font-size:10pt;font-style:normal;\\\">Customize your mug with the text of your choice. A mood, a message, a quote... It's up to you! Maximum number of characters:</span><span style=\\\"font-size:10pt;font-style:normal;\\\"> ---</span></span></p>\"\n            },\n            {\n                \"id\": \"2\",\n                \"value\": \"<p><span style=\\\"font-size:10pt;font-style:normal;\\\">Personnalisez votre mug avec le texte de votre choix. Une humeur, un message, une citation... À vous de choisir ! Nombre maximum de caractères : --- Diamètre : 8,2cm / Hauteur : 9,5cm / Poids : 0.43kg. Passe au lave-vaisselle.</span></p>\"\n            }\n        ],\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling UpdateTabStatusByClassName Command in PHP\nDESCRIPTION: This snippet describes a handler class in PHP for the command to update tab status given a class name. It implements a specific interface ensuring adherence to the contract and processes the UpdateTabStatusByClassNameCommand in the adapter layer. The command returns no value, adhering to a void return type.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tab/_partials/update-tab-status-by-class-name-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Tab\\CommandHandler\\UpdateTabStatusByClassNameHandler\n```\n\n----------------------------------------\n\nTITLE: HTTP Query Parameter Options for PrestaShop Webservice\nDESCRIPTION: Examples of query parameter formats for filtering, sorting, and limiting API results. Includes parameters for output format selection, HTTP method override, language selection, and multishop functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/cheat-sheet.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\noutput_format=XML\nps_method=GET\nlanguage=[3|5]\nfilter[field]=[1|5]\nfilter[field]=[Jo]%\nsort=[field1_ASC,field2_DESC]\nlimit=10\nid_shop=1\n```\n\n----------------------------------------\n\nTITLE: Illustrating Mail Theme Directory Structure in Bash\nDESCRIPTION: Demonstrates the standard folder organization for a PrestaShop mail theme (using 'modern' as an example) located within the `mails/themes/` directory. It highlights the conventional placement for assets, reusable components (like `footer.html.twig`), core transactional email layouts (e.g., `account.html.twig`, `account.txt.twig`), and module-specific layouts grouped by module name (e.g., `followup`, `ps_emailalerts`). This structure is used by the `FolderThemeCatalog` to discover themes and layouts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/mail-templates/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n...\n├── mails\n|   ├── themes\n|   |   ├── modern\n|   |   |   ├── assets                          # Contains the assets used in your layouts (optional)\n|   |   |   ├── components                      # Contains block parts or base layouts for your email theme (optional)\n|   |   |   |   ├── footer.html.twig\n|   |   |   |   ├── layout.html.twig\n|   |   |   ├── core                            # Contains layouts for Core transactional mails\n|   |   |   |   ├── account.html.twig           # HTML layout for \"account\" transactional mail\n|   |   |   |   ├── account.txt.twig            # TXT layout for \"account\" transactional mail\n|   |   |   |   ├── bankwire.html.twig          # HTML layout for \"bankwire\" transactional mail\n|   |   |   |   ├── cheque.txt.twig             # TXT layout for \"cheque\" transactional mail\n|   |   |   |   ├── contact.html.twig           # HTML layout for \"contact\" transactional mail\n|   |   |   ├── modules                         # Contains layouts specific to a given module\n|   |   |   |   ├── followup                    # Module name\n|   |   |   |   |   ├── followup_1.html.twig\n|   |   |   |   |   ├── followup_2.html.twig\n|   |   |   |   ├── ps_emailalerts              # Module name\n|   |   |   |   |   ├── new_order.html.twig\n|   |   |   |   |   ├── followup_2.html.twig\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Blank Stock Movement Schema - PrestaShop XML\nDESCRIPTION: This XML snippet serves as a template for a blank stock movement resource in the PrestaShop API. It specifies all expected fields with their default empty CDATA content, including nested multilingual product names. No dependencies are required to interpret the schema, but it is intended for use within PrestaShop's stock movement endpoints. Inputs and outputs should conform to this structure for creating or updating stock movement data; fields left blank should be replaced with appropriate values corresponding to the inventory transaction being documented.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/stock_movements.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n  <stock_mvt>\\n    <id><![CDATA[]]></id>\\n    <id_product><![CDATA[]]></id_product>\\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\\n    <id_warehouse><![CDATA[]]></id_warehouse>\\n    <id_currency><![CDATA[]]></id_currency>\\n    <management_type><![CDATA[]]></management_type>\\n    <id_employee><![CDATA[]]></id_employee>\\n    <id_stock><![CDATA[]]></id_stock>\\n    <id_stock_mvt_reason><![CDATA[]]></id_stock_mvt_reason>\\n    <id_order><![CDATA[]]></id_order>\\n    <id_supply_order><![CDATA[]]></id_supply_order>\\n    <product_name>\\n      <language id=\\\"1\\\"><![CDATA[]]></language>\\n      <language id=\\\"2\\\"><![CDATA[]]></language>\\n    </product_name>\\n    <ean13><![CDATA[]]></ean13>\\n    <upc><![CDATA[]]></upc>\\n    <reference><![CDATA[]]></reference>\\n    <mpn><![CDATA[]]></mpn>\\n    <physical_quantity><![CDATA[]]></physical_quantity>\\n    <sign><![CDATA[]]></sign>\\n    <last_wa><![CDATA[]]></last_wa>\\n    <current_wa><![CDATA[]]></current_wa>\\n    <price_te><![CDATA[]]></price_te>\\n    <date_add><![CDATA[]]></date_add>\\n  </stock_mvt>\\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Toggle Object Status in PHP\nDESCRIPTION: Shows how to toggle the active status of an ObjectModel instance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$id = 2;\n$cms = new Cms($id); \n$cms->toggleStatus();\n```\n\n----------------------------------------\n\nTITLE: Tagging Specific Features for Filtered Execution\nDESCRIPTION: Demonstrates how to tag a specific feature to run it individually using the --tags filter in Behat command line\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n@add\nFeature: Add basic product from Back Office (BO)\n  As a BO user\n  I need to be able to add new product with basic information from the BO\n```\n\n----------------------------------------\n\nTITLE: Calling displayCMSDisputeInformation Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to call the displayCMSDisputeInformation hook in a PrestaShop theme template. It is typically used in the CMS page template to display additional dispute information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCMSDisputeInformation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCMSDisputeInformation'}\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectAddBefore Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionObjectAddBefore hook is called within PrestaShop. It executes the hook and passes the current object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectAddBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectAddBefore', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Customer Message XML Schema Template\nDESCRIPTION: XML schema template for customer message data structure in PrestaShop. Includes fields for employee ID, customer thread ID, IP address, message content, file attachments, user agent details, privacy settings, timestamps, and read status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/customer_messages.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <customer_message>\n    <id><![CDATA[]]></id>\n    <id_employee><![CDATA[]]></id_employee>\n    <id_customer_thread><![CDATA[]]></id_customer_thread>\n    <ip_address><![CDATA[]]></ip_address>\n    <message><![CDATA[]]></message>\n    <file_name><![CDATA[]]></file_name>\n    <user_agent><![CDATA[]]></user_agent>\n    <private><![CDATA[]]></private>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <read><![CDATA[]]></read>\n  </customer_message>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDeactivateAfter Hook in ProductController\nDESCRIPTION: This code snippet shows how the actionAdminDeactivateAfter hook is dispatched in the ProductController.php file. The hook is triggered after deactivating an item, passing hookEventParameters to registered hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDeactivateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDeactivateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Identifying the DeleteEmployeeSessionCommand Class in PHP\nDESCRIPTION: This snippet shows the fully qualified class name for the `DeleteEmployeeSessionCommand`. This class acts as a command object within the PrestaShop Core domain, encapsulating the request to delete an employee session identified by a specific ID. It requires an integer session ID (`$sessionId`) during instantiation and is processed by the `DeleteEmployeeSessionHandler`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/delete-employee-session-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Security\\Command\\DeleteEmployeeSessionCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Value Handler Interface in PrestaShop\nDESCRIPTION: Interface implemented by the AddFeatureValueHandler, defining the contract for handlers that can process AddFeatureValueCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/add-feature-value-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\CommandHandler\\AddFeatureValueHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing moduleRoutes Hook in PHP\nDESCRIPTION: Core hook execution to retrieve module routes with shop ID parameter\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('moduleRoutes', ['id_shop' => $id_shop], null, true, false)\n```\n\n----------------------------------------\n\nTITLE: Identifying the Toggle State Status Command Class in PrestaShop PHP\nDESCRIPTION: This snippet shows the fully qualified class name for the command responsible for initiating the toggle action for a state's status within the PrestaShop Core Domain layer. It encapsulates the data needed for this operation, specifically the state ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/toggle-state-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\ToggleStateStatusCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining SendCartToCustomerHandlerInterface in PHP\nDESCRIPTION: This snippet defines the interface that the SendCartToCustomerHandler implements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/send-cart-to-customer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\CommandHandler\\SendCartToCustomerHanlderInterface\n```\n\n----------------------------------------\n\nTITLE: Field Definition Example in ObjectModel\nDESCRIPTION: Shows how to define a single field in the ObjectModel's definition array, including type, language support, validation rule, and size constraints.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'meta_description' => [\n    'type' => self::TYPE_STRING,\n    'lang' => true,\n    'validate' => 'isGenericName',\n    'size' => 255\n],\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Handler Path\nDESCRIPTION: Full namespace path for the handler class that processes the CMS page editing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-page-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\QueryHandler\\GetCmsPageForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAttributeCombinationSave hook in PrestaShop\nDESCRIPTION: This code shows how the actionAttributeCombinationSave hook is executed when a product attribute combination is saved. It passes the ID of the product attribute and an array of attribute IDs to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAttributeCombinationSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAttributeCombinationSave', ['id_product_attribute' => (int) $this->id, 'id_attributes' => $idsAttribute])\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductsPositionsHandlerInterface (PHP)\nDESCRIPTION: Specifies the fully qualified name of the interface that the `UpdateProductsPositionsHandler` implements. This interface defines the contract and expected methods for handling the update of product positions command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-products-positions-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductsPositionsHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Executing displayInvoiceLegalFreeText Hook in PHP\nDESCRIPTION: This code snippet shows how the displayInvoiceLegalFreeText hook is executed in the HTMLTemplateInvoice class. It passes the current order object as a parameter to allow modules to modify the legal free text on PDF invoices.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayInvoiceLegalFreeText.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayInvoiceLegalFreeText', ['order' => $this->order])\n```\n\n----------------------------------------\n\nTITLE: Executing displayAdminStatsModules Hook in PrestaShop\nDESCRIPTION: Hook execution code that triggers the displayAdminStatsModules hook in the admin statistics controller. The hook is called with empty parameters array and the module instance ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminStatsModules.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayAdminStatsModules', [], $module_instance->id)\n```\n\n----------------------------------------\n\nTITLE: Calling displayAttributeForm Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayAttributeForm hook in a PrestaShop template. The hook is used to add fields to the 'attribute value' form in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAttributeForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h=\"displayAttributeForm\" id_attribute=$form_id}\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectAttributeAddBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionObjectAttributeAddBefore hook is called in the PrestaShop core. It is executed before adding an attribute object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectAttributeAddBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectAttributeAddBefore')\n```\n\n----------------------------------------\n\nTITLE: Meta Command Return Type\nDESCRIPTION: The return type of the AddMetaCommand handler, which is a MetaId value object that represents the ID of the newly created meta entity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/add-meta-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\ValueObject\\MetaId\n```\n\n----------------------------------------\n\nTITLE: Defining the Constructor Parameter for DeleteSearchEngineCommand in PHP\nDESCRIPTION: This snippet shows the constructor parameter required for the `DeleteSearchEngineCommand`. It expects an integer `$searchEngineId` which uniquely identifies the search engine to be deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/delete-search-engine-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $searchEngineId`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Handler Class (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and class name for the handler responsible for processing the `DeleteTaxRulesGroupCommand`. This class contains the business logic for deleting the tax rules group.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/delete-tax-rules-group-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\TaxRulesGroup\\CommandHandler\\DeleteTaxRulesGroupHandler`\n```\n\n----------------------------------------\n\nTITLE: Currency Query Return Type - PHP\nDESCRIPTION: Return type class path for the currency query result, representing an editable currency entity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\QueryResult\\EditableCurrency\n```\n\n----------------------------------------\n\nTITLE: Defining Importer Interface in PHP\nDESCRIPTION: Interface defining the core import method that processes import configurations using a specified import handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/import/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Core/Import/ImporterInterface.php\n\ninterface ImporterInterface\n{\n    /**\n     * Process the import.\n     */\n    public function import(\n        ImportConfigInterface $importConfig,\n        ImportRuntimeConfigInterface $runtimeConfig,\n        ImportHandlerInterface $importHandler\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition for EditUnofficialCurrencyCommand\nDESCRIPTION: Command class for editing unofficial currencies in PrestaShop. Takes a currency ID as constructor parameter and is handled by EditUnofficialCurrencyHandler which implements EditUnofficialCurrencyHandlerInterface. Returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/edit-unofficial-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\EditUnofficialCurrencyCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\EditUnofficialCurrencyHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\EditUnofficialCurrencyHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Granular Exception Handling in Controller Actions (PrestaShop, PHP)\nDESCRIPTION: Expands on controller logic by illustrating multiple catch blocks for different domain-specific exceptions. The editAction method catches both CannotEditCategoryException and CategoryNotFoundException, allowing for precise feedback and alternative flows depending on error type. This pattern relies on exception type hierarchy and is best used where specific responses for each failure scenario improve user experience or debugging.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/domain-exceptions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\npublic function editAction($categoryId, Request $request)\\n{\\n    try {\\n        $editableCategory = $this->getQueryBus()->handle(new GetCategoryForEditing((int) $categoryId));\\n    } catch (CannotEditCategoryException $e) {\\n        // Here we handle the case when category cannot be edited, like display a specific error message and suggestions to fix it.\\n        $this->addFlash('error', 'Something went wrong when editing category.');\\n    } catch (CategoryNotFoundException $e) {\\n        // Here we can do specific actions if the user is trying to edit a category that cannot be found, like redirect to category listing.\\n        $this->addFlash('error', 'Category cannot be found!');\\n    }\\n\\n    // ...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying EditableOrderReturnState Query Result Type (PHP)\nDESCRIPTION: Defines the `EditableOrderReturnState` class within the PrestaShop Core Domain's QueryResult namespace. This class represents the data structure returned by the handler when the `GetOrderReturnStateForEditing` query is successfully processed, containing the information needed for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return-state/_partials/get-order-return-state-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderReturnState\\QueryResult\\EditableOrderReturnState`\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect and Build Options using YAML Front Matter\nDESCRIPTION: This YAML block defines front matter for a static site generator. It sets the layout to 'redirect', specifies the target redirect URL (a GitHub README section for the autoupgrade module), and includes build instructions (`list: never`, `showOnHomepage: true`) likely influencing how the page appears in site navigation or listings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/upgrade-module/channels.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirect\nredirect: https://github.com/PrestaShop/autoupgrade?tab=readme-ov-file#channels\n_build:\n    list: never\n    showOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining GetOrderReturnStateForEditing Query Handler Interface (PHP)\nDESCRIPTION: Specifies the `GetOrderReturnStateForEditingHandlerInterface` within the PrestaShop Core Domain. This interface defines the contract that must be implemented by any handler responsible for processing the `GetOrderReturnStateForEditing` query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return-state/_partials/get-order-return-state-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderReturnState\\QueryHandler\\GetOrderReturnStateForEditingHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Listing IssueStandardRefundCommand Constructor Parameters (PHP)\nDESCRIPTION: Details the constructor parameters for `IssueStandardRefundCommand`. It requires the order ID (`$orderId`), an array of details for the items being refunded (`$orderDetailRefunds`), flags for refunding shipping (`$refundShippingCost`), generating a credit slip (`$generateCreditSlip`), generating a voucher (`$generateVoucher`), and the type of voucher refund (`$voucherRefundType`). These parameters configure the standard refund operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-standard-refund-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$int $orderId\n```\n\nLANGUAGE: php\nCODE:\n```\n$array $orderDetailRefunds\n```\n\nLANGUAGE: php\nCODE:\n```\n$bool $refundShippingCost\n```\n\nLANGUAGE: php\nCODE:\n```\n$bool $generateCreditSlip\n```\n\nLANGUAGE: php\nCODE:\n```\n$bool $generateVoucher\n```\n\nLANGUAGE: php\nCODE:\n```\n$int $voucherRefundType\n```\n\n----------------------------------------\n\nTITLE: Defining the GetOrderMessageForEditing Query Class Name in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace for the `GetOrderMessageForEditing` query class within the PrestaShop Core Domain. This class is designed to retrieve the necessary data for editing a specific order message, identified by its `$orderMessageId` provided during instantiation. The query is processed by the `PrestaShop\\PrestaShop\\Adapter\\OrderMessage\\QueryHandler\\GetOrderMessageForEditingHandler` and returns a `PrestaShop\\PrestaShop\\Core\\Domain\\OrderMessage\\QueryResult\\EditableOrderMessage` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-message/_partials/get-order-message-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderMessage\\Query\\GetOrderMessageForEditing`\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for Order Cart Rule in PrestaShop\nDESCRIPTION: This XML snippet represents the blank schema for an order_cart_rule in PrestaShop. It includes all the fields associated with an order cart rule, such as ID, order ID, cart rule ID, order invoice ID, name, value, tax-exclusive value, free shipping status, and deletion status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_cart_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_cart_rule>\n    <id><![CDATA[]]></id>\n    <id_order><![CDATA[]]></id_order>\n    <id_cart_rule><![CDATA[]]></id_cart_rule>\n    <id_order_invoice><![CDATA[]]></id_order_invoice>\n    <name><![CDATA[]]></name>\n    <value><![CDATA[]]></value>\n    <value_tax_excl><![CDATA[]]></value_tax_excl>\n    <free_shipping><![CDATA[]]></free_shipping>\n    <deleted><![CDATA[]]></deleted>\n  </order_cart_rule>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Query Class Definition\nDESCRIPTION: PHP class specification for retrieving product data for editing. Takes product ID, shop constraint, and display language ID as constructor parameters. Returns ProductForEditing result object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Query\\GetProductForEditing\n```\n\n----------------------------------------\n\nTITLE: Calling the displayTop Hook in PrestaShop Templates\nDESCRIPTION: This snippet shows how to invoke the displayTop hook in a Smarty template. The hook displays additional elements at the top of pages in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayTop'}\n```\n\n----------------------------------------\n\nTITLE: Executing Order Return Presentation Hook in PHP\nDESCRIPTION: Hook execution code that triggers before an order return is presented. The hook passes a reference to the order return array that can be modified by hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentOrderReturn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentOrderReturn',\n            ['presentedOrderReturn' => &$orderReturnLazyArray]\n        )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing Configuration via XML API\nDESCRIPTION: XML response showing a successful configuration lookup where the requested configuration exists. It includes the unique ID (411), current value (1), and name of the configuration parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <configurations>\n        <configuration>\n            <id><![CDATA[411]]></id>\n            <value><![CDATA[1]]></value>\n            <name><![CDATA[PS_MULTISHOP_FEATURE_ACTIVE]]></name>\n        </configuration>\n    </configurations>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Meta Command Class Reference\nDESCRIPTION: The AddMetaCommand class is responsible for saving meta entities data. It requires a string parameter $pageName in the constructor and is handled by the AddMetaHandler class, returning a MetaId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/add-meta-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\Command\\AddMetaCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Route in YAML\nDESCRIPTION: YAML configuration for the toggle action route used by the customer review controller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nps_democqrshooksusage_toggle_is_allowed_for_review:\n  path: demo-cqrs-hook-usage/{customerId}/toggle-is-allowed-for-review\n  methods: [POST]\n  defaults:\n    _controller: 'DemoCQRSHooksUsage\\Controller\\Admin\\CustomerReviewController::toggleIsAllowedForReviewAction'\n  requirements:\n    customerId: \\d+\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Commands Structure\nDESCRIPTION: Lists the available commands for managing CMS page categories including add, bulk delete, bulk enable/disable, delete, edit and toggle status commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### CmsPageCategory Commands\n\n- AddCmsPageCategoryCommand\n- BulkDeleteCmsPageCategoryCommand\n- BulkDisableCmsPageCategoryCommand\n- BulkEnableCmsPageCategoryCommand\n- DeleteCmsPageCategoryCommand\n- EditCmsPageCategoryCommand\n- ToggleCmsPageCategoryStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration for Specific Shop in PrestaShop\nDESCRIPTION: Example of setting a configuration value for a specific shop using ShopConstraint. This demonstrates how to work with multistore contexts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// set a value for shop 12 only\n$configuration->set(\n    'SOME_SETTING',\n    'some value',\n    ShopConstraint::shopId(12)\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching hooks in Symfony controllers with HookDispatcher\nDESCRIPTION: This snippet demonstrates how to dispatch hooks in Symfony-powered PrestaShop controllers using the HookDispatcher service. It shows how to pass parameters to the hook using an associative array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/symfony-bridge.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->hookDispatcher->dispatchWithParameters(\"actionModifyForm\", ['form_builder' => $formBuilder]);\n```\n\n----------------------------------------\n\nTITLE: Handler Implementation for GetCartForOrderCreation Query\nDESCRIPTION: The handler class that processes the GetCartForOrderCreation query, implementing the corresponding handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-order-creation.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\QueryHandler\\GetCartForOrderCreationHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Shop URL Blank Schema XML Template\nDESCRIPTION: XML schema template for shop_url resource showing the structure of data fields including shop ID, active status, domain settings, and URI paths. Used as a base template for API requests and responses.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/shop_urls.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <shop_url>\n    <id><![CDATA[]]></id>\n    <id_shop><![CDATA[]]></id_shop>\n    <active><![CDATA[]]></active>\n    <main><![CDATA[]]></main>\n    <domain><![CDATA[]]></domain>\n    <domain_ssl><![CDATA[]]></domain_ssl>\n    <physical_uri><![CDATA[]]></physical_uri>\n    <virtual_uri><![CDATA[]]></virtual_uri>\n  </shop_url>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Deactivation Hook in PrestaShop Controller\nDESCRIPTION: Hook dispatch call made after product deactivation in the admin product controller. The hook passes product-related parameters through hookEventParameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDeactivateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Executing actionAdminControllerInitAfter Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionAdminControllerInitAfter hook is called in the PrestaShop core. It is executed after the initialization of all admin controllers and passes the current controller instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminControllerInitAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminControllerInitAfter',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: EditManufacturerHandlerInterface in PrestaShop Core Domain\nDESCRIPTION: Interface that defines the contract for handling the EditManufacturerCommand. The handler must implement this interface to be recognized by the command bus system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/edit-manufacturer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\CommandHandler\\EditManufacturerHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Pack Product Removal Handler Path\nDESCRIPTION: Handler class path that processes the remove all products command. Implements the RemoveAllProductsFromPackHandlerInterface to ensure proper contract implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-products-from-pack-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Pack\\CommandHandler\\RemoveAllProductsFromPackHandler\n```\n\n----------------------------------------\n\nTITLE: Grid Columns Template Structure in Twig\nDESCRIPTION: Displays the structure of Grid columns templates, including content and header templates for various column types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/customize-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nColumns\n├── Content\n│   ├── action.html.twig\n│   ├── badge.html.twig\n│   ├── bulk_action.html.twig\n│   ├── category_position.html.twig\n│   ├── data.html.twig\n│   ├── date_time.html.twig\n│   ├── employee_name_with_avatar.html.twig\n│   ├── image.html.twig\n│   ├── link.html.twig\n│   ├── position_handle.html.twig\n│   ├── position.html.twig\n│   ├── severity_level.html.twig\n│   └── toggle.html.twig\n└── Header\n    └── Content\n        ├── action.html.twig\n        ├── default.html.twig\n        └── position_handle.html.twig\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple CMS Pages Command Class in PrestaShop\nDESCRIPTION: Command class that handles bulk enabling of CMS pages. Takes an array of CMS page IDs as constructor parameter and returns void. The command is handled by BulkEnableCmsPageHandler class which implements BulkEnableCmsPageHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-enable-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\BulkEnableCmsPageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\BulkEnableCmsPageHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\BulkEnableCmsPageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Querying Required Fields for Address in PrestaShop (PHP)\nDESCRIPTION: This snippet references the definition and handling of the GetRequiredFieldsForAddress query in PrestaShop, used to retrieve an array of strings that specify which address fields are mandatory. The designated handler class is GetRequiredFieldsForAddressHandler, which implements the corresponding interface. No constructor parameters are expected, and the returned value is always a string array representing required fields. This logic presumes an established PrestaShop Domain-Driven Design project structure with relevant Query/Handler class availability.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/get-required-fields-for-address.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\Query\\GetRequiredFieldsForAddress`\n_Gets fields that are required for address_\n\n| Query details              |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul></ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Address\\QueryHandler\\GetRequiredFieldsForAddressHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\QueryHandler\\GetRequiredFieldsForAddressHandlerInterface`</li>  |\n| **Return type** |  `string[]`  |\n```\n\n----------------------------------------\n\nTITLE: Exporting Product Data with Custom SQL - PrestaShop Database - SQL\nDESCRIPTION: This SQL query selects all columns from the 'ps_product' table and the associated language-specific fields from the 'ps_product_lang' table, filtered for the first language and first shop. This is intended for use in exporting product details along with localized information. Requires access to the PrestaShop MySQL database with appropriate permissions and assumes a standard database schema. The key parameters are 'id_lang' and 'id_shop', which should match the target language and store. Outputs a result set suitable for export in CSV for migration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT p.*, pl.* FROM `ps_product` p JOIN `ps_product_lang` pl ON p.id_product = pl.id_product AND pl.id_lang = 1 AND pl.id_shop = 1 GROUP BY pl.id_product\n```\n\n----------------------------------------\n\nTITLE: Adding a Legacy-to-Standard Locale Mapping\nDESCRIPTION: Example of adding a key/value pair to the app/Resources/legacy-to-standard-locales.json file. The key is the ISO code based on ISO-639-1 standard, and the value is the corresponding locale.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/localization-packs.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"da\": \"da-DK\"\n```\n\n----------------------------------------\n\nTITLE: Building All PrestaShop Assets\nDESCRIPTION: Commands to rebuild all PrestaShop assets at once from the project root directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/compile-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tools/assets/build.sh\n# or alternatively\nmake assets\n```\n\n----------------------------------------\n\nTITLE: Disabling Module Route Prefix (Symfony Routing - YAML)\nDESCRIPTION: This YAML snippet shows how to define a controller route in PrestaShop with the default '/modules' prefix disabled. By adding the _disable_module_prefix: true line to the route defaults, the route becomes directly accessible at the specified path, not under the /modules prefix. This is useful in cases where a custom routing scheme is needed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/routes.yml\\nyour_route_name:\\n    path: your-module/demo\\n    methods: [GET]\\n    defaults:\\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\\n      _disable_module_prefix: true\n```\n\n----------------------------------------\n\nTITLE: Dispatching PrestaShop Hook via dispatchHook - PHP\nDESCRIPTION: This PHP code snippet shows how the 'actionAdminAdministrationControllerPostProcessBefore' hook is dispatched in the PrestaShop administration controller before any form processing occurs. The snippet uses the dispatchHook function, passing the hook name and an array containing the controller instance as a parameter. This allows addons and modules to execute logic prior to built-in settings processing; prerequisites include PrestaShop's event system and context where the controller variable is instantiated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminAdministrationControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminAdministrationControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductsPositionsHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified name of the handler class that processes the `UpdateProductsPositionsCommand`. This handler contains the logic to actually update the product positions based on the provided command data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-products-positions-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductsPositionsHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing Newsletter Registration Hook in PHP\nDESCRIPTION: Hook execution code that runs before newsletter registration processing. Passes email address, action type, and hook error reference as parameters to subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionNewsletterRegistrationBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionNewsletterRegistrationBefore',\n            [\n                'hookName' => $hookName,\n                'email' => $_POST['email'],\n                'action' => $_POST['action'],\n                'hookError' => &$hookError,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Hook Execution for Shop Data Duplication in PHP\nDESCRIPTION: Shows the actual implementation of the hook execution, passing the old and new shop IDs as parameters along with the module ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionShopDataDuplication.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionShopDataDuplication', [\n                        'old_id_shop' => (int) $old_id,\n                        'new_id_shop' => (int) $this->id,\n                    ], $m['id_module'])\n```\n\n----------------------------------------\n\nTITLE: Executing Dynamic Hook with Fields Reference in PrestaShop AdminController (PHP)\nDESCRIPTION: This snippet dynamically calls the action<Controller>ListingFieldsModifier hook within the AdminController, passing the fields list by reference to allow external modules to alter it. Requires the PrestaShop core, a properly set controller context, and registered hook listeners. The 'fields' parameter refers to an array representing the columns or properties displayed in a Back Office listing. Outputs any modifications to the fields list, enabling extendable admin UI customization. Must be executed in a proper PrestaShop controller context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<Controller>ListingFieldsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('action' . $this->controller_name . 'ListingFieldsModifier', [\n            'fields' => &$this->fields_list,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Executing actionClearCompileCache Hook with Hook::exec in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how the 'actionClearCompileCache' hook is executed by calling Hook::exec('actionClearCompileCache'). It is used internally within PrestaShop to notify modules and core components whenever the Smarty template engine's compile cache is being cleared. The key parameter is the hook name (a string), and the snippet requires the PrestaShop core environment with the Hook class loaded; it produces no direct output but triggers subscribed hook listeners. There are no external inputs or outputs, and it is primarily intended for internal cache-clearing events.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionClearCompileCache.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionClearCompileCache')\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for GetLastEmptyCustomerCart Query in PHP\nDESCRIPTION: This snippet specifies the handler class for the GetLastEmptyCustomerCart query. The handler implements the GetLastEmptyCustomerCartHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-last-empty-customer-cart.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\QueryHandler\\GetLastEmptyCustomerCartHandler\n```\n\n----------------------------------------\n\nTITLE: Defining EditOrderAddressCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified class name for the command used to edit an order address in PrestaShop. This command encapsulates the data needed for the edit operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-order-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\EditOrderAddressCommand`\n```\n\n----------------------------------------\n\nTITLE: Identifying the ToggleTaxRulesGroupStatusHandlerInterface (PHP)\nDESCRIPTION: Reference to the `ToggleTaxRulesGroupStatusHandlerInterface`, an interface implemented by the `SetTaxRulesGroupStatusHandler`. This interface defines the contract for handlers that toggle the status of tax rule groups within the PrestaShop domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/set-tax-rules-group-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\TaxRulesGroup\\CommandHandler\\ToggleTaxRulesGroupStatusHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining GetOrderReturnStateForEditing Query Class (PHP)\nDESCRIPTION: Specifies the fully qualified name of the `GetOrderReturnStateForEditing` query class within the PrestaShop Core Domain. This query encapsulates the request to fetch data for editing a specific order return state, identified by an ID passed to its constructor.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return-state/_partials/get-order-return-state-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderReturnState\\Query\\GetOrderReturnStateForEditing`\n```\n\n----------------------------------------\n\nTITLE: Cart XML Schema Structure for PrestaShop API\nDESCRIPTION: This XML schema defines the structure for cart data in the PrestaShop API. It includes all available fields such as address IDs, currency, customer information, and cart content through associations. This template can be used as a starting point when creating or updating carts via the API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/carts.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <cart>\n    <id><![CDATA[]]></id>\n    <id_address_delivery><![CDATA[]]></id_address_delivery>\n    <id_address_invoice><![CDATA[]]></id_address_invoice>\n    <id_currency><![CDATA[]]></id_currency>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_guest><![CDATA[]]></id_guest>\n    <id_lang><![CDATA[]]></id_lang>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <recyclable><![CDATA[]]></recyclable>\n    <gift><![CDATA[]]></gift>\n    <gift_message><![CDATA[]]></gift_message>\n    <mobile_theme><![CDATA[]]></mobile_theme>\n    <delivery_option><![CDATA[]]></delivery_option>\n    <secure_key><![CDATA[]]></secure_key>\n    <allow_seperated_package><![CDATA[]]></allow_seperated_package>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <associations>\n      <cart_rows>\n        <cart_row>\n          <id_product><![CDATA[]]></id_product>\n          <id_product_attribute><![CDATA[]]></id_product_attribute>\n          <id_address_delivery><![CDATA[]]></id_address_delivery>\n          <id_customization><![CDATA[]]></id_customization>\n          <quantity><![CDATA[]]></quantity>\n        </cart_row>\n      </cart_rows>\n    </associations>\n  </cart>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminMaintenanceControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminMaintenanceControllerPostProcessBefore hook is dispatched in the MaintenanceController. The hook is called before the post-processing of the maintenance controller, passing the controller instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMaintenanceControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminMaintenanceControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Building Data Array for CSV Export in PHP\nDESCRIPTION: Demonstrates how to structure data as an array of associative arrays where each line represents a row in the CSV file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$lines = [\n    [\"name\" => \"My product A\", \"brand\" => \"Brand 1\", \"price\" => 2204, \"ignored_data\" => \"abcd\"],\n    [\"name\" => \"My product B\", \"brand\" => \"Brand 2\", \"price\" => 1399, \"ignored_data\" => \"efgh\"],\n    [\"name\" => \"My product C\", \"brand\" => \"Brand 3\", \"price\" => 687, \"ignored_data\" => \"ijkl\"]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for PrestaShop Category\nDESCRIPTION: This XML schema represents the structure of a category in PrestaShop. It includes fields for basic category information, multilingual content, and associations with other categories and products.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/categories.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <category>\n    <id><![CDATA[]]></id>\n    <id_parent><![CDATA[]]></id_parent>\n    <active><![CDATA[]]></active>\n    <id_shop_default><![CDATA[]]></id_shop_default>\n    <is_root_category><![CDATA[]]></is_root_category>\n    <position><![CDATA[]]></position>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <link_rewrite>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </link_rewrite>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n    <meta_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_title>\n    <meta_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_description>\n    <meta_keywords>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_keywords>\n    <associations>\n      <categories>\n        <category>\n          <id><![CDATA[]]></id>\n        </category>\n      </categories>\n      <products>\n        <product>\n          <id><![CDATA[]]></id>\n        </product>\n      </products>\n    </associations>\n  </category>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerServiceSignatureHandlerInterface in PHP\nDESCRIPTION: This snippet defines the interface that the GetCustomerServiceSignatureHandler must implement. It ensures that the handler provides the necessary methods to process the GetCustomerServiceSignature query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/get-customer-service-signature.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\QueryHandler\\GetCustomerServiceSignatureHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring Translator Service Injection\nDESCRIPTION: Shows how to configure the dependency injection container to inject the Translator service into a custom service using YAML configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/using-the-translator.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# services.yml\n\nprestashop.core.foo.bar.some_service:\n    class: 'PrestaShop\\PrestaShop\\Core\\Foo\\Bar\\SomeService'\n    arguments:\n        - '@translator'\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshExchangeRatesHandlerInterface in PHP\nDESCRIPTION: This code snippet shows the interface that the RefreshExchangeRatesHandler implements. This interface defines the contract for handling the refresh of exchange rates in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/refresh-exchange-rates-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\RefreshExchangeRatesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Decorating a PrestaShop Core Controller Service (Autowiring) using YAML\nDESCRIPTION: Alternative YAML configuration in `services.yml` for service decoration using Symfony's autowiring. It defines `custom_controller` (`MyModule\\Controller\\DemoController`) to decorate the Core `PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController`, relying on autowiring to automatically inject dependencies, including the decorated service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/override-decorate-controller.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/services.yml\n  custom_controller:\n    autowire: true\n    class: MyModule\\Controller\\DemoController\n    decorates: PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController\n```\n\n----------------------------------------\n\nTITLE: Running PrestaShop Test Suite\nDESCRIPTION: Docker command to execute the complete PrestaShop test suite\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec prestashop-git composer test-all\n```\n\n----------------------------------------\n\nTITLE: GetCategoriesTree Handler Implementation in PrestaShop PHP\nDESCRIPTION: The handler class that processes the GetCategoriesTree query. It implements the GetCategoriesTreeHandlerInterface and returns the structured category tree.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/get-categories-tree.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Category\\QueryHandler\\GetCategoriesTreeHandler\n```\n\n----------------------------------------\n\nTITLE: Creating an Info Block using Hugo Shortcode\nDESCRIPTION: Illustrates the creation of an 'info' notice block via the `notice` Hugo shortcode. The comments (`/* */`) within the shortcode syntax are likely specific to this documentation display and should be removed for live use (`{{% notice info %}} ... {{% /notice %}}`). The enclosed text is displayed within the styled info block.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/notice.md#2025-04-22_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{%/* notice info */%}}\nThis is pretty important, you should pay attention.\n{{%/* /notice */%}}\n```\n\n----------------------------------------\n\nTITLE: Hook Parameters Structure in PHP\nDESCRIPTION: Demonstrates the parameter structure passed to the actionValidateCustomerAddressForm hook, containing a CustomerAddressForm object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateCustomerAddressForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'form' => (object) CustomerAddressForm\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductInOrderCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command used to update a product within an order in PrestaShop. This command encapsulates the data needed for the update operation, including order ID, order detail ID, prices, quantity, and optional invoice ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-product-in-order-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\Command\\UpdateProductInOrderCommand\n```\n\n----------------------------------------\n\nTITLE: Cloning PrestaShop Webservice Postman Examples Repository\nDESCRIPTION: This command clones the PrestaShop Webservice Postman examples repository to the local machine. It provides a collection of sample API requests for testing the PrestaShop Webservice.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-webservice-postman.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:PrestaShop/webservice-postman-examples.git\n```\n\n----------------------------------------\n\nTITLE: Order Detail Blank XML Schema for PrestaShop API\nDESCRIPTION: A template XML schema for the Order_detail resource in PrestaShop's API. This schema includes all available fields for order details, including order information, product details, pricing, tax data, and associated elements. It can be used as a starting point for API requests or as a reference for expected response structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_details.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_detail>\n    <id><![CDATA[]]></id>\n    <id_order><![CDATA[]]></id_order>\n    <product_id><![CDATA[]]></product_id>\n    <product_attribute_id><![CDATA[]]></product_attribute_id>\n    <product_quantity_reinjected><![CDATA[]]></product_quantity_reinjected>\n    <group_reduction><![CDATA[]]></group_reduction>\n    <discount_quantity_applied><![CDATA[]]></discount_quantity_applied>\n    <download_hash><![CDATA[]]></download_hash>\n    <download_deadline><![CDATA[]]></download_deadline>\n    <id_order_invoice><![CDATA[]]></id_order_invoice>\n    <id_warehouse><![CDATA[]]></id_warehouse>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_customization><![CDATA[]]></id_customization>\n    <product_name><![CDATA[]]></product_name>\n    <product_quantity><![CDATA[]]></product_quantity>\n    <product_quantity_in_stock><![CDATA[]]></product_quantity_in_stock>\n    <product_quantity_return><![CDATA[]]></product_quantity_return>\n    <product_quantity_refunded><![CDATA[]]></product_quantity_refunded>\n    <product_price><![CDATA[]]></product_price>\n    <reduction_percent><![CDATA[]]></reduction_percent>\n    <reduction_amount><![CDATA[]]></reduction_amount>\n    <reduction_amount_tax_incl><![CDATA[]]></reduction_amount_tax_incl>\n    <reduction_amount_tax_excl><![CDATA[]]></reduction_amount_tax_excl>\n    <product_quantity_discount><![CDATA[]]></product_quantity_discount>\n    <product_ean13><![CDATA[]]></product_ean13>\n    <product_isbn><![CDATA[]]></product_isbn>\n    <product_upc><![CDATA[]]></product_upc>\n    <product_mpn><![CDATA[]]></product_mpn>\n    <product_reference><![CDATA[]]></product_reference>\n    <product_supplier_reference><![CDATA[]]></product_supplier_reference>\n    <product_weight><![CDATA[]]></product_weight>\n    <tax_computation_method><![CDATA[]]></tax_computation_method>\n    <id_tax_rules_group><![CDATA[]]></id_tax_rules_group>\n    <ecotax><![CDATA[]]></ecotax>\n    <ecotax_tax_rate><![CDATA[]]></ecotax_tax_rate>\n    <download_nb><![CDATA[]]></download_nb>\n    <unit_price_tax_incl><![CDATA[]]></unit_price_tax_incl>\n    <unit_price_tax_excl><![CDATA[]]></unit_price_tax_excl>\n    <total_price_tax_incl><![CDATA[]]></total_price_tax_incl>\n    <total_price_tax_excl><![CDATA[]]></total_price_tax_excl>\n    <total_shipping_price_tax_excl><![CDATA[]]></total_shipping_price_tax_excl>\n    <total_shipping_price_tax_incl><![CDATA[]]></total_shipping_price_tax_incl>\n    <purchase_supplier_price><![CDATA[]]></purchase_supplier_price>\n    <original_product_price><![CDATA[]]></original_product_price>\n    <original_wholesale_price><![CDATA[]]></original_wholesale_price>\n    <total_refunded_tax_excl><![CDATA[]]></total_refunded_tax_excl>\n    <total_refunded_tax_incl><![CDATA[]]></total_refunded_tax_incl>\n    <associations>\n      <taxes>\n        <tax>\n          <id><![CDATA[]]></id>\n        </tax>\n      </taxes>\n    </associations>\n  </order_detail>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: GetMetaForEditing Handler Interface Path\nDESCRIPTION: The interface that the handler class implements, defining the contract for processing the GetMetaForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/get-meta-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\QueryHandler\\GetMetaForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing Hooks in PrestaShop - PHP\nDESCRIPTION: This code snippet calls the 'actionFeatureSave' hook in PrestaShop's core 'Feature.php'. It aims at executing custom actions when a feature attribute is saved. The hook is executed with an array consisting of 'id_feature' as a parameter, enabling event subscribers to access it. There are no complex exceptions or chains as detailed in the hook's description settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFeatureSave.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionFeatureSave', ['id_feature' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Class for UpdateProductPricesCommand in PHP\nDESCRIPTION: Specifies the fully qualified class name for the handler (`UpdateProductPricesHandler`) responsible for processing the `UpdateProductPricesCommand`. This handler resides in the Adapter layer and contains the logic to execute the price update.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-prices-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductPricesHandler`\n```\n\n----------------------------------------\n\nTITLE: Example Output of Development Build (Text)\nDESCRIPTION: Shows the expected terminal output after successfully running the `npm run dev` command. It indicates successful compilation, lists the generated JavaScript chunk files (`chunk-vendors.js`, `app.js`) and their sizes, and confirms the output directory (`../views/`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ npm run dev\n\n[...]\n\n DONE  Compiled successfully in 2679ms                                                                                                                                19:17:27\n\n  File                            Size                                                                 Gzipped\n\n  ../views/js/chunk-vendors.js    121.79 KiB                                                           44.16 KiB\n  ../views/js/app.js              5.41 KiB                                                             1.94 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The ../views directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n```\n\n----------------------------------------\n\nTITLE: XML Response for Specific Price Query in PrestaShop API\nDESCRIPTION: This XML snippet shows the structure of the API response when querying for a specific price. It includes the custom price field 'my_price' within the product node.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/specific-price.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product>\n        <id><![CDATA[2]]></id>\n        ...\n        <my_price><![CDATA[34.460000]]></my_price>\n        ...\n    </product>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Handler Class for Cart Carrier Updates\nDESCRIPTION: The fully qualified class name for the handler responsible for processing the UpdateCartCarrierCommand, along with its interface implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-cart-carrier-command.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\UpdateCartCarrierHandler`\n```\n\n----------------------------------------\n\nTITLE: Loading Expires Module in Apache httpd\nDESCRIPTION: This snippet shows how to load the expires module in Apache httpd. The expires module is used to set expiration dates on various types of files, which helps with browser caching.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule expires_module modules/mod_expires.so\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache VirtualHost with mod_php\nDESCRIPTION: Basic Apache virtual host configuration for PrestaShop using mod_php or PHP-CGI. Includes SSL configuration options, directory permissions, and log file settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/httpd.md#2025-04-22_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80> # or 443 for SSL support\n\n    ServerName example.com\n\n    # SSLEngine on\n    # SSLCertificateFile /etc/apache2/ssl/example.crt\n    # SSLCertificateKeyFile /etc/apache2/ssl/example.key\n\n    DocumentRoot /path/to/prestashop\n    <Directory /path/to/prestashop>\n        # enable the .htaccess rewrites\n        AllowOverride All\n        Options -Indexes\n        Require all granted\n        \n        # Disable back office token\n        # SetEnv _TOKEN_ disabled\n    </Directory>\n\n    ErrorLog /var/log/apache2/prestashop.error.log\n    CustomLog /var/log/apache2/prestashop.access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: GetCartRuleForEditing Handler Class Path - PHP\nDESCRIPTION: Handler class that implements the query interface and processes the GetCartRuleForEditing query to retrieve cart rule data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/get-cart-rule-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CartRule\\QueryHandler\\GetCartRuleForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Product Option Values in PrestaShop\nDESCRIPTION: This XML snippet presents a blank schema for the product_option_value resource in PrestaShop. It includes fields for id, id_attribute_group, color, position, and multilingual name entries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_option_values.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product_option_value>\n    <id><![CDATA[]]></id>\n    <id_attribute_group><![CDATA[]]></id_attribute_group>\n    <color><![CDATA[]]></color>\n    <position><![CDATA[]]></position>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </product_option_value>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Parameters for Customer Account Creation (PrestaShop, PHP)\nDESCRIPTION: This PHP code snippet shows the expected parameter array supplied to the 'actionCustomerAccountAdd' hook. The array includes a 'newCustomer' key referencing a Customer object instance. Module developers can use this structure to implement their own hook listeners and access customer data. There are no external dependencies beyond PrestaShop's core classes; the input is an associative array, and the output is determined by hook listeners.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerAccountAdd.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\narray(\\n  'newCustomer' => (object) Customer object\\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the GetOrderPreview Query Class in PrestaShop PHP\nDESCRIPTION: Specifies the fully qualified class name for the GetOrderPreview query within the PrestaShop Core Domain. This class represents the request to retrieve an order preview.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Query\\GetOrderPreview\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attachments Handler Interface Path\nDESCRIPTION: Full namespace path for the interface that defines the contract for attachment command handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-attachments-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Attachment\\CommandHandler\\SetAssociatedProductAttachmentsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductInOrderHandlerInterface in PHP\nDESCRIPTION: Specifies the fully qualified namespace and interface name that the `UpdateProductInOrderHandler` implements. This interface defines the contract and expected methods for any class handling the `UpdateProductInOrderCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-product-in-order-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\CommandHandler\\UpdateProductInOrderHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing actionSubmitAccountBefore Hook in PHP\nDESCRIPTION: This code snippet shows how the actionSubmitAccountBefore hook is called in the RegistrationController. The hook is executed before submitting a customer account, allowing for modification of account data or additional validation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSubmitAccountBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionSubmitAccountBefore', [], null, true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache VirtualHost with PHP-FPM\nDESCRIPTION: Advanced Apache virtual host configuration for PrestaShop using PHP-FPM with FastCGI. Includes PHP file handling, SSL options, and directory settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/httpd.md#2025-04-22_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80> # or 443 for SSL support\n\n    ServerName example.com\n\n    # SSLEngine on\n    # SSLCertificateFile /etc/apache2/ssl/example.crt\n    # SSLCertificateKeyFile /etc/apache2/ssl/example.key\n\n    # Uncomment the following line to force Apache to pass the Authorization\n    # header to PHP: required for \"basic_auth\" under PHP-FPM and FastCGI\n    #\n    # SetEnvIfNoCase ^Authorization$ \"(.+)\" HTTP_AUTHORIZATION=$1\n\n    # For Apache 2.4 or higher\n    # Using SetHandler avoids issues with using ProxyPassMatch in combination\n    # with mod_rewrite or mod_autoindex\n    <FilesMatch \\.php$>\n        # SetHandler proxy:fcgi://127.0.0.1:9000\n        SetHandler proxy:unix:/var/run/php/php8.1-fpm.sock|fcgi://dummy\n    </FilesMatch>\n\n    DocumentRoot /path/to/prestashop\n    <Directory /path/to/prestashop>\n        # enable the .htaccess rewrites\n        AllowOverride All\n        Options +Indexes\n        Require all granted\n        \n        # Disable back office token\n        # SetEnv _TOKEN_ disabled\n    </Directory>\n\n    ErrorLog /var/log/apache2/prestashop.error.log\n    CustomLog /var/log/apache2/prestashop.access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Disabling PrestaShop Profiler\nDESCRIPTION: PHP code to disable the PrestaShop profiler by setting the _PS_DEBUG_PROFILING_ constant to false. The profiler collects performance data that is useful during development but creates overhead in production environments.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nif (!defined('_PS_DEBUG_PROFILING_')) {\n    define('_PS_DEBUG_PROFILING_', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing actionAfterLoadRoutes Hook in PrestaShop Dispatcher\nDESCRIPTION: Code that executes the actionAfterLoadRoutes hook after routes are loaded in the Dispatcher class. It passes the dispatcher instance and shop ID as parameters. The id_shop parameter was added in version 8.1.5.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAfterLoadRoutes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAfterLoadRoutes', ['dispatcher' => $this, 'id_shop' => $id_shop]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for EditTaxCommand Handler in PrestaShop PHP\nDESCRIPTION: This snippet indicates the return type of the handler associated with the `EditTaxCommand`. The `void` type signifies that the handler does not return any value upon successful completion of the tax editing process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/edit-tax-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Hook Definition in ProductExtraContentFinder\nDESCRIPTION: Definition of the hook name and expected class instances in the core ProductExtraContentFinder class. This defines what the hook expects in terms of return values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductExtraContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected $hookName = 'displayProductExtraContent';\nprotected $expectedInstanceClasses = ['PrestaShop\\PrestaShop\\Core\\Product\\ProductExtraContent'];\n```\n\n----------------------------------------\n\nTITLE: PHP Translation Function Usage Examples\nDESCRIPTION: Examples of correct and incorrect ways to use the trans() function in PHP. Only literal strings are properly detected by the translation tools, while variables and dynamic content should be handled using placeholders.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-tips.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// literal values will work\n$this->trans('Some wording', [], 'Admin.Catalog.Feature');\n\n// dynamic content can be injected using placeholders & replacements\n$this->trans('Some wording with %foo%', ['%foo%' => $dynamicContent], 'Admin.Catalog.Feature');\n\n// this won't work, the interpreter will ignore variables\n$wording = 'Some wording';\n$domain = 'Admin.Catalog.Feature';\n$this->trans($wording, [], $domain);\n\n// this will yield unexpected results\n$this->trans('Some '. $var . ' wording', [], 'Admin.Catalog.Feature');\n\n// dynamic behavior, like aliasing the trans() function, won't work well either\nfunction translate($wording) {\n   $this->trans($wording, [], 'Admin.Catalog.Feature');\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Hook for Document Reference in PHP\nDESCRIPTION: This code snippet demonstrates how to call the 'actionGenerateDocumentReference' hook within the PrestaShop core Order class. This hook allows modules to inject or modify the document reference associated with an order by passing the 'type' parameter as 'order'. It requires the PrestaShop Hook system to be present and is intended to be used by module developers for customizing document handling during order processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGenerateDocumentReference.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$reference = Hook::exec('actionGenerateDocumentReference', [\\n    'type' => 'order',\\n]);\n```\n\n----------------------------------------\n\nTITLE: Identifying the Return Type Value Object in PrestaShop (PHP)\nDESCRIPTION: This snippet shows the fully qualified class name for the Value Object returned by the `AddOrderStateHandler` upon successful execution of the `AddOrderStateCommand`. The `OrderStateId` uniquely identifies the newly created order state.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-state/_partials/add-order-state-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderState\\ValueObject\\OrderStateId`\n```\n\n----------------------------------------\n\nTITLE: Identifying AddProductToCartHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the handler responsible for processing the AddProductToCartCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-product-to-cart-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\AddProductToCartHandler\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCategoryForEditing Query in PrestaShop (PHP)\nDESCRIPTION: This snippet shows the namespace and purpose of the GetCategoryForEditing class which retrieves category data for editing. It accepts a category ID parameter and returns an EditableCategory object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/get-category-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Query\\GetCategoryForEditing\n```\n\n----------------------------------------\n\nTITLE: Using DeleteStateCommand in PrestaShop Core Domain\nDESCRIPTION: The DeleteStateCommand is used to delete a state in PrestaShop. It requires a state ID as a constructor parameter and is handled by the DeleteStateHandler class which implements DeleteStateHandlerInterface. The command execution returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/delete-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\DeleteStateCommand\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Request Settings in PrestaShop (PHP)\nDESCRIPTION: GetSqlRequestSettingsQuery is a class used to retrieve SQL request settings. It doesn't require any parameters and is handled by GetSqlRequestSettingsHandler which implements GetSqlRequestSettingsHandlerInterface. The query returns a SqlRequestSettings object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Query\\GetSqlRequestSettings\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\QueryHandler\\GetSqlRequestSettingsHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\QueryHandler\\GetSqlRequestSettingsHandlerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\SqlRequestSettings\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Customization XML Schema\nDESCRIPTION: The blank XML schema structure for the Customization resource in PrestaShop. This template includes fields for customization details like cart ID, product ID, quantity, and customized data including text fields and images.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/customizations.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <customization>\n    <id><![CDATA[]]></id>\n    <id_address_delivery><![CDATA[]]></id_address_delivery>\n    <id_cart><![CDATA[]]></id_cart>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <quantity><![CDATA[]]></quantity>\n    <quantity_refunded><![CDATA[]]></quantity_refunded>\n    <quantity_returned><![CDATA[]]></quantity_returned>\n    <in_cart><![CDATA[]]></in_cart>\n    <associations>\n      <customized_data_text_fields>\n        <customized_data_text_field>\n          <id_customization_field><![CDATA[]]></id_customization_field>\n          <value><![CDATA[]]></value>\n        </customized_data_text_field>\n      </customized_data_text_fields>\n      <customized_data_images>\n        <customized_data_image>\n          <id_customization_field><![CDATA[]]></id_customization_field>\n          <value><![CDATA[]]></value>\n        </customized_data_image>\n      </customized_data_images>\n    </associations>\n  </customization>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Customer Edit Handler Class Path\nDESCRIPTION: Fully qualified namespace path for the handler class that processes the edit customer command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/edit-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\EditCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Buffer Configuration\nDESCRIPTION: MySQL buffer settings to optimize memory usage for query processing. These parameters control memory allocation for various database operations, with the InnoDB buffer pool being the most significant for overall performance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nread_buffer_size\t\t\t= 2M \nread_rnd_buffer_size\t\t= 1M\njoin_buffer_size\t\t\t= 2M \nsort_buffer_size \t\t\t= 2M\ninnodb_buffer_pool_size \t= 1G\n```\n\n----------------------------------------\n\nTITLE: Referencing BulkDeleteAttributeHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the handler that processes the `BulkDeleteAttributeCommand`. This handler implements the `BulkDeleteAttributeHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attribute-group/_partials/bulk-delete-attribute-command.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Attribute\\CommandHandler\\BulkDeleteAttributeHandler\n```\n\n----------------------------------------\n\nTITLE: SQL Request Handler Class Implementation Path\nDESCRIPTION: The fully qualified namespace path to the handler class that processes the SQL request execution query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-execution-result.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\SqlManager\\QueryHandler\\GetSqlRequestExecutionResultHandler\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionAfterUpdate<FormName>FormHandler Hook in PrestaShop (PHP)\nDESCRIPTION: This code snippet shows how the actionAfterUpdate<FormName>FormHandler hook is dispatched after a form update in PrestaShop. It passes the ID of the updated entity and the form data as parameters to modules that have registered for this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAfterUpdate<FormName>FormHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionAfterUpdate' . Container::camelize($form->getName()) . 'FormHandler', [\n            'id' => $id,\n            'form_data' => &$data,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Handling AddCatalogPriceRuleCommand in PrestaShop PHP\nDESCRIPTION: The AddCatalogPriceRuleHandler class is responsible for handling the AddCatalogPriceRuleCommand. It implements the AddCatalogPriceRuleHandlerInterface and returns a CatalogPriceRuleId object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/add-catalog-price-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CatalogPriceRule\\CommandHandler\\AddCatalogPriceRuleHandler\n```\n\n----------------------------------------\n\nTITLE: Calling displayCustomerLoginFormAfter Hook in PrestaShop Template\nDESCRIPTION: Hook call used in authentication templates to display custom elements after the login form. This hook is implemented in both classic and hummingbird themes and does not return an array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCustomerLoginFormAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCustomerLoginFormAfter'}\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Stock Movement Reason in PrestaShop\nDESCRIPTION: This XML snippet provides a blank schema for the stock_movement_reason resource in PrestaShop. It includes fields for id, sign, deleted status, date added, date updated, and multilingual name entries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/stock_movement_reasons.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <stock_movement_reason>\n    <id><![CDATA[]]></id>\n    <sign><![CDATA[]]></sign>\n    <deleted><![CDATA[]]></deleted>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </stock_movement_reason>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Handler Interface\nDESCRIPTION: Interface that defines the contract for CMS page editing query handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-page-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\QueryHandler\\GetCmsPageForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Modified Return Type for State ID Getter\nDESCRIPTION: Updated return type from StateId to StateIdInterface in AbstractEditAddressCommand class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getStateId(): ?PrestaShop\\PrestaShop\\Core\\Domain\\State\\ValueObject\\StateIdInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing the actionProductOutOfStock Hook in PrestaShop Templates\nDESCRIPTION: This code shows how to call the actionProductOutOfStock hook in a Smarty template. The hook passes the product object as a parameter, enabling custom actions to be displayed when a product is out of stock.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductOutOfStock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='actionProductOutOfStock' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Design for My Account Page in Markdown\nDESCRIPTION: This snippet embeds a Figma design for the My Account page using an iframe. It provides a visual reference for the page layout and design.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/hummingbird/hooks/myaccount.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<iframe style=\"border: 1px solid rgba(0, 0, 0, 0.1);\" width=\"100%\" height=\"450\" src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHKGzVBx5p2JaFrFocGe6p0%2FHook-Cartography%3Ftype%3Ddesign%26node-id%3D128%253A15463%26mode%3Ddev\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating Backups in PrestaShop with PHP\nDESCRIPTION: The 'backup:create' command in the Update Assistant CLI creates backups of the PrestaShop store. The command requires the admin directory and can include specific parameters such as '--include-images'. It highlights dependencies on the Symfony console for structured command execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:create help\n\nbackup:create: create a PrestaShop store backup\n\nUsage: backup:create [ADMIN_DIR] \nwith [ADMIN_DIR] the PrestaShop admin directory\n--from-config-file=[config-path]: the update config file path\n--include-images=[1|0]: include, or not, images in the store backup (1 for yes, 0 for no)\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:create admin123 --include-images=1\nYour files, database, and images will be backed up.\nStarting backup...\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Handler Class Path - PHP\nDESCRIPTION: Handler class namespace that implements the edit functionality for CMS page categories.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/edit-cms-page-category-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\CommandHandler\\EditCmsPageCategoryHandler\n```\n\n----------------------------------------\n\nTITLE: Identifying the EditCartAddressCommand Class (PHP)\nDESCRIPTION: This is the fully qualified name of the command class responsible for editing a cart address. It encapsulates the necessary data (cartId, addressType) to perform the edit operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\EditCartAddressCommand`\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Data in PrestaShop\nDESCRIPTION: Method to delete configuration data for a given key. Deletes the value for all shops and throws an Exception on error.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration->remove(string $key): void\n```\n\n----------------------------------------\n\nTITLE: Deleting an Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This command object supports the deletion of a single address from the PrestaShop database. It requires the address ID as input and integrates with PrestaShop's command handling infrastructure. Proper authorization and address existence checks are responsibility of the handler or dispatcher. Expected output is confirmation of deletion or error upon failure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// DeleteAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for deleting an address\n */\nclass DeleteAddressCommand\n{\n    private $addressId;\n\n    public function __construct($addressId)\n    {\n        $this->addressId = $addressId;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Identifying the GetHookStatusHandler Class\nDESCRIPTION: Specifies the fully qualified namespace for the `GetHookStatusHandler` class, which is responsible for processing the `GetHookStatus` query. It also indicates that this handler implements the `GetHookStatusHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/hook/_partials/get-hook-status.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Hook\\QueryHandler\\GetHookStatusHandler`\n```\n\nLANGUAGE: text\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Hook\\QueryHandler\\GetHookStatusHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining Warehouse XML Schema\nDESCRIPTION: This XML snippet defines a blank schema for warehouses in the PrestaShop platform. It includes fields such as id, id_address, id_employee, id_currency, deleted, reference, name, and management_type. The associations element supports stocks, carriers, and shops, denoting complex nested hierarchies that can be linked with warehouse entries. This schema serves as a template for creating new warehouse data entries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/warehouses.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<prestashop xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n  <warehouse>\\n    <id><![CDATA[]]></id>\\n    <id_address><![CDATA[]]></id_address>\\n    <id_employee><![CDATA[]]></id_employee>\\n    <id_currency><![CDATA[]]></id_currency>\\n    <deleted><![CDATA[]]></deleted>\\n    <reference><![CDATA[]]></reference>\\n    <name><![CDATA[]]></name>\\n    <management_type><![CDATA[]]></management_type>\\n    <associations>\\n      <stocks>\\n        <stock>\\n          <id><![CDATA[]]></id>\\n        </stock>\\n      </stocks>\\n      <carriers>\\n        <carrier>\\n          <id><![CDATA[]]></id>\\n        </carrier>\\n      </carriers>\\n      <shops>\\n        <shop>\\n          <id><![CDATA[]]></id>\\n          <name><![CDATA[]]></name>\\n        </shop>\\n      </shops>\\n    </associations>\\n  </warehouse>\\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionFilterDeliveryOptionList Hook in PHP\nDESCRIPTION: This snippet defines the array structure passed as parameters to the `actionFilterDeliveryOptionList` hook. It contains a single key `delivery_option_list`, which holds the delivery options array passed by reference, allowing modifications within the hook implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFilterDeliveryOptionList.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    <?php\n    [\n        'delivery_option_list' => (array) &$delivery_option_list,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Executing the actionSubmitCustomerAddressForm Hook in PrestaShop\nDESCRIPTION: This code shows how the actionSubmitCustomerAddressForm hook is called in the core PrestaShop system. The hook passes a reference to the address object, allowing modules to modify the address data during the form submission process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSubmitCustomerAddressForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionSubmitCustomerAddressForm', ['address' => &$address])\n```\n\n----------------------------------------\n\nTITLE: Editing Order Message Command - PrestaShop - PHP\nDESCRIPTION: Defines the EditOrderMessageCommand for updating an order message in PrestaShop's Domain. Requires an integer order message ID, with optional arrays for localized names and messages. Handled by an EditOrderMessageHandler implementing the EditOrderMessageHandlerInterface. Inputs and outputs follow PrestaShop's command bus pattern; the command does not return a value (void).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-message/_partials/edit-order-message-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\OrderMessage\\Command\\EditOrderMessageCommand\n```\n\n----------------------------------------\n\nTITLE: Defining the DeleteSupplierLogoImageCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the `DeleteSupplierLogoImageCommand`. This command encapsulates the request to delete a specific supplier's logo image, identified by the `$supplierId` provided during construction.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-logo-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\DeleteSupplierLogoImageCommand`\n```\n\n----------------------------------------\n\nTITLE: Checking for New Updates using PrestaShop CLI - Text\nDESCRIPTION: This snippet illustrates how to use the `update:check-new-version` command to detect available PrestaShop updates (online and local) from the CLI. It includes command usage, a description of options, the requirement to specify the admin directory, and shows command output displaying detected update versions. The snippet assumes a PHP environment and a properly installed PrestaShop setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:check-new-version help\n\nupdate:check-new-version: list PrestaShop updates available for the store\n\nUsage: update:check-new-version [ADMIN_DIR]\nwith [ADMIN_DIR] the PrestaShop admin directory\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:check-new-version admin123\n-----------+----------+-------+---------------------------------------------------------------------------+\n| Version  | Channel  | Type  | Information                                                               |\n+----------+----------+-------+---------------------------------------------------------------------------+\n| 8.2.0    | online   | minor | https://build.prestashop-project.org/news/2024/prestashop-8-2-0-available/|\n| 9.0.0    | local    | major | Zip: 2024-10-17-develop-prestashop_9_0_0.zip                              |\n|          |          |       | Xml: prestashop_9.0.0.xml                                                 |\n| 8.1.0    | local    | patch | Zip: 8_1_0.zip                                                            |\n|          |          |       | Xml: 8.1.0-2.xml, 8.1.0.xml                                               |\n```\n\n----------------------------------------\n\nTITLE: Including GetFeatureForEditing Documentation Partial in Markdown\nDESCRIPTION: This snippet imports content describing the GetFeatureForEditing query operation from its designated partial markdown file using Hugo's include-md shortcode. It is intended to embed detailed information about how features are retrieved for editing in the PrestaShop domain-driven context. Hugo's documentation engine and the specified file's availability are required. The snippet outputs the documentation in context, with no runtime parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/get-feature-for-editing.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Executing actionObject<ClassName>AddAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionObject<ClassName>AddAfter hook is called within the ObjectModel class. It executes the hook after an object is added, passing the object itself as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>AddAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'AddAfter', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Object Duplication in PHP\nDESCRIPTION: Shows how to duplicate an ObjectModel instance using the duplicateObject method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$cms = new Cms(2); \n$duplicatedCms = $cms->duplicateObject();\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect and Build Options in YAML\nDESCRIPTION: This snippet sets up page-level redirection using the 'redirect' property and configures static site generation behavior with the '_build' options. No external dependencies are required, but it is intended for static site generators supporting frontmatter and YAML. The 'redirect' property specifies the target URL for redirection, while '_build' contains directives like 'list' (which disables list rendering) and 'showOnHomepage' (which allows homepage visibility).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/upgrade-module/upgrade-module-internal-behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirect\nredirect: https://github.com/PrestaShop/autoupgrade?tab=readme-ov-file#test-module-updates-locally\n_build:\n    list: never\n    showOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Auto-Install Docker Compose Configuration\nDESCRIPTION: Extended docker-compose.yml configuration that enables automatic installation of PrestaShop with test data. Includes additional environment variables for automatic setup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  mysql:\n    container_name: some-mysql\n    image: mysql:5.7\n    restart: unless-stopped\n    environment:\n      MYSQL_ROOT_PASSWORD: admin\n      MYSQL_DATABASE: prestashop\n    networks:\n      - prestashop_network\n  prestashop:\n    container_name: prestashop\n    image: prestashop/prestashop:latest\n    restart: unless-stopped\n    depends_on:\n      - mysql\n    ports:\n      - 8080:80\n    environment:\n      DB_SERVER: some-mysql\n      DB_NAME: prestashop\n      DB_USER: root\n      DB_PASSWD: admin\n      PS_INSTALL_AUTO: 1\n      PS_DOMAIN: localhost:8080\n    networks:\n      - prestashop_network\nnetworks:\n    prestashop_network:\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Supplier Deletion Command in PrestaShop PHP\nDESCRIPTION: This PHP class is responsible for representing the intent to delete multiple suppliers within the PrestaShop application. It accepts an array of supplier IDs as its constructor argument, which specifies the suppliers to be deleted. The command is typically dispatched to a handler (BulkDeleteSupplierHandler), which is responsible for carrying out the deletion, and it implements the BulkDeleteSupplierHandlerInterface. The command does not return any data (void return type) and primarily acts as a data transfer object within the command bus architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/bulk-delete-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\BulkDeleteSupplierCommand\n```\n\n----------------------------------------\n\nTITLE: Hook Parameters Structure for actionPaymentCCAdd\nDESCRIPTION: Defines the array structure passed to the actionPaymentCCAdd hook. The hook receives an array containing the OrderPayment object that was added.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPaymentCCAdd.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'paymentCC' => (object) OrderPayment object\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Class for EditTaxCommand in PrestaShop PHP\nDESCRIPTION: This snippet provides the fully qualified namespace and class name for the handler responsible for processing the `EditTaxCommand`. The `EditTaxHandler` is located in the PrestaShop Adapter layer and contains the business logic to execute the tax editing operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/edit-tax-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Tax\\CommandHandler\\EditTaxHandler`\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Options Hook in PrestaShop Admin\nDESCRIPTION: Renders the displayAdminProductsOptionsStepTop hook in the product options panel template. The hook receives the product ID as a parameter to contextualize the rendered content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsOptionsStepTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayAdminProductsOptionsStepTop', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAfterBodyOpeningTag Hook in PrestaShop (PHP)\nDESCRIPTION: Hook implementation that allows content injection immediately after the opening body tag in PrestaShop front office pages. Commonly used for advertisements or modal dialogs that need to be loaded first.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAfterBodyOpeningTag.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAfterBodyOpeningTag'}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionGetAlternativeSearchPanels Hook in PHP\nDESCRIPTION: This snippet illustrates the structure of the parameters array passed to the 'actionGetAlternativeSearchPanels' hook. It includes 'previous_search_panels', an array containing panels already defined, and 'bo_query', a string representing the search expression entered in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetAlternativeSearchPanels.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    <?php\n    [\n        'previous_search_panels' => (array) $searchPanels,\n        'bo_query' => (string) $searchedExpression,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining ReplyToCustomerThreadHandler Class in PHP\nDESCRIPTION: This snippet shows the handler class for the ReplyToCustomerThreadCommand. It implements the ReplyToCustomerThreadHandlerInterface and is responsible for processing the command to reply to a customer thread.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/reply-to-customer-thread-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\ReplyToCustomerThreadHandler\n```\n\n----------------------------------------\n\nTITLE: Defining CartId Value Object in PHP\nDESCRIPTION: This code snippet shows the return type of the CreateEmptyCustomerCartCommand, which is a CartId value object. This object represents the unique identifier of the newly created empty cart.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/create-empty-customer-cart-command.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\ValueObject\\CartId\n```\n\n----------------------------------------\n\nTITLE: Defining the GetTaxForEditing Query Class in PHP\nDESCRIPTION: Specifies the fully qualified class name for the GetTaxForEditing query. This query object encapsulates the request to fetch tax details required for editing within the PrestaShop Back Office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/get-tax-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tax\\Query\\GetTaxForEditing\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionAdminProductsControllerActivateAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminProductsControllerActivateAfter hook is dispatched in the ProductController. The hook is triggered after a product is activated in the back office and passes hookEventParameters to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerActivateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerActivateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateCombinationSuppliersCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for updating supplier associations for a product combination in PrestaShop. This command encapsulates the necessary data for the operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-suppliers-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationSuppliersCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining CMS Page Status Toggle Command Class - PHP\nDESCRIPTION: PrestaShop command class definition that handles toggling the status of a CMS page. Takes a CMS page ID as constructor parameter and returns void. The command is handled by ToggleCmsPageStatusHandler which implements ToggleCmsPageStatusHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/toggle-cms-page-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\ToggleCmsPageStatusCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\ToggleCmsPageStatusHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\ToggleCmsPageStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminProductsMainStepLeftColumnMiddle Hook in PrestaShop Twig Template\nDESCRIPTION: This code snippet shows how the displayAdminProductsMainStepLeftColumnMiddle hook is called within the essentials.html.twig template. It passes the product ID as a parameter to the hook, allowing modules to render content specific to the product being edited.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsMainStepLeftColumnMiddle.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsMainStepLeftColumnMiddle', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Querying Manufacturer Data for Editing in PrestaShop Core Domain\nDESCRIPTION: This query is used to retrieve manufacturer data for editing in the PrestaShop Back Office. It requires a manufacturer ID as a constructor parameter and returns an EditableManufacturer object. The query is handled by GetManufacturerForEditingHandler which implements the GetManufacturerForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/get-manufacturer-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Query\\GetManufacturerForEditing\n```\n\n----------------------------------------\n\nTITLE: Handling Search Criteria with Disabling Options in PHP\nDESCRIPTION: Provides examples of creating SearchCriteria objects with disabled sorting and pagination by setting orderWay/orderBy and offset/limit to null, respectively. Managing these parameters is essential for customizing grid behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria;\n\n// sorting, pagination and filtering are disabled with this search criteria\n$emptySearchCriteria = new SearchCriteria();\n\n// only pagination is set\n// that means sorting (and filters as it's an empty array) will be disabled for search criteria\n$emptySortingSearchCriteria = new SearchCriteria(\n    [],\n    null,\n    null,\n    2,\n    10\n);\n\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Supply Order Receipt History XML Schema\nDESCRIPTION: XML schema template for supply order receipt history records. Includes fields for order details, employee information, quantity, and timestamps. Core fields require specific data formats like unsigned integers and date formats.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/supply_order_receipt_histories.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supply_order_receipt_history>\n    <id><![CDATA[]]></id>\n    <id_supply_order_detail><![CDATA[]]></id_supply_order_detail>\n    <id_employee><![CDATA[]]></id_employee>\n    <id_supply_order_state><![CDATA[]]></id_supply_order_state>\n    <employee_firstname><![CDATA[]]></employee_firstname>\n    <employee_lastname><![CDATA[]]></employee_lastname>\n    <quantity><![CDATA[]]></quantity>\n    <date_add><![CDATA[]]></date_add>\n  </supply_order_receipt_history>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Configuring Child Theme in YAML\nDESCRIPTION: Example configuration for a child theme's theme.yml file, specifying the parent theme, theme name, display name, version, and asset handling options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/parent-child-feature.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: classic\nname: childtheme\ndisplay_name: My first child Theme\nversion: 1.0.0\nassets:\n  use_parent_assets: true\n```\n\n----------------------------------------\n\nTITLE: Using GenerateThemeMailTemplatesCommand Class in PrestaShop\nDESCRIPTION: The GenerateThemeMailTemplatesCommand class accepts theme name, language, and optional parameters to control template overwriting and output folder locations. When executed, it generates email templates for the specified theme and language.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/mail-template/_partials/generate-theme-mail-templates-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\MailTemplate\\Command\\GenerateThemeMailTemplatesCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing displayContentWrapperTop Hook in PHP\nDESCRIPTION: This code snippet shows how to call the displayContentWrapperTop hook in PrestaShop templates. The hook allows displaying additional content at the top of the content wrapper section in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayContentWrapperTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayContentWrapperTop'}\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderRepository in PHP for PrestaShop\nDESCRIPTION: Defines an OrderRepository class to handle database operations related to orders. It uses the Db class for database interactions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Repository;\n\nuse DateTimeImmutable;\nuse Db;\nuse Order as PrestaShopOrder;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\Collection\\OrderCollection;\nuse PrestaShop\\Module\\DemoViewOrderHooks\\DTO\\Order;\n\nclass OrderRepository\n{\n    private $db;\n\n    public function __construct()\n    {\n        $this->db = Db::getInstance();\n    }\n\n    // Methods to be implemented...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GetCustomerServiceSignature Handler Class in PHP\nDESCRIPTION: This snippet specifies the handler class for the GetCustomerServiceSignature query. The handler implements the GetCustomerServiceSignatureHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/get-customer-service-signature.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\QueryHandler\\GetCustomerServiceSignatureHandler\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCatalogPriceRuleCommand Class Path in PHP\nDESCRIPTION: Fully qualified namespace path for the DeleteCatalogPriceRuleCommand class used to delete catalog price rules. Takes catalogPriceRuleId as constructor parameter and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/delete-catalog-price-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Command\\DeleteCatalogPriceRuleCommand\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for actionAdminMetaAfterWriteRobotsFile Hook in PHP\nDESCRIPTION: Defines the parameter structure passed to the actionAdminMetaAfterWriteRobotsFile hook. It includes the robots.txt file data as an array and the file handle as a resource reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMetaAfterWriteRobotsFile.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'rb_data' => (array) File data,\n  'write_fd' => &(resource) File handle\n);\n```\n\n----------------------------------------\n\nTITLE: DeleteManufacturerLogoImageHandler Implementation in PHP\nDESCRIPTION: Handler class that implements the DeleteManufacturerLogoImageHandlerInterface and processes the DeleteManufacturerLogoImageCommand to remove a manufacturer's logo.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/delete-manufacturer-logo-image-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Manufacturer\\CommandHandler\\DeleteManufacturerLogoImageHandler\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for dashboardZoneThree Hook in PHP\nDESCRIPTION: Defines the parameters structure for the dashboardZoneThree hook, including date range parameters for statistics. Contains statsDateFrom and statsDateTo as nullable string parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/dashboardZoneThree.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n[\n    'date_from' => (string|null) $statsDateFrom,\n    'date_to' => (string|null) $statsDateTo,\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Value in PrestaShop\nDESCRIPTION: This snippet details how to create a product feature value for a specific feature in PrestaShop by sending a POST request to the /api/product_feature_values endpoint. The ID of the previously created feature must be provided, as well as the feature value in the specified language.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <product_feature_value>\n        <id_feature><![CDATA[{{id_feature}}]]></id_feature>\n        <value>\n            <language id=\"1\"><![CDATA[{{value}}]]></language>\n        </value>\n    </product_feature_value>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductSupplierOptionsHandler Class in PHP\nDESCRIPTION: This code snippet shows the handler class for the GetProductSupplierOptions query. It implements the GetProductSupplierOptionsHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-supplier-options.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\QueryHandler\\GetProductSupplierOptionsHandler\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Units in XML for Core Wordings\nDESCRIPTION: Example of how to add a new wording to the default translation catalogue XML file. The trans-unit element must include an id (using MD5 checksum of the text), source and target elements with identical content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-tips.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<trans-unit id=\"cf8092a0be7b972d6cee3db90bfaf923\">\n    <source>You cannot access this store from your country. We apologize for the inconvenience.</source>\n    <target>You cannot access this store from your country. We apologize for the inconvenience.</target>\n    <note></note>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAdditionalCustomerAddressFields Hook in Smarty Template\nDESCRIPTION: This code snippet shows how to call the displayAdditionalCustomerAddressFields hook within a Smarty template. The hook displays extra field values that were added in an address form using the additionalCustomerAddressFields hook. It passes the current address object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdditionalCustomerAddressFields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdditionalCustomerAddressFields' address=$address}\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for Employee Resource in PrestaShop\nDESCRIPTION: The template XML structure for creating or updating an employee record via the PrestaShop API. Contains all available fields for the Employee resource with empty CDATA sections to be populated with actual values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/employees.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <employee>\n    <id><![CDATA[]]></id>\n    <id_lang><![CDATA[]]></id_lang>\n    <last_passwd_gen><![CDATA[]]></last_passwd_gen>\n    <stats_date_from><![CDATA[]]></stats_date_from>\n    <stats_date_to><![CDATA[]]></stats_date_to>\n    <stats_compare_from><![CDATA[]]></stats_compare_from>\n    <stats_compare_to><![CDATA[]]></stats_compare_to>\n    <passwd><![CDATA[]]></passwd>\n    <lastname><![CDATA[]]></lastname>\n    <firstname><![CDATA[]]></firstname>\n    <email><![CDATA[]]></email>\n    <active><![CDATA[]]></active>\n    <id_profile><![CDATA[]]></id_profile>\n    <bo_color><![CDATA[]]></bo_color>\n    <default_tab><![CDATA[]]></default_tab>\n    <bo_theme><![CDATA[]]></bo_theme>\n    <bo_css><![CDATA[]]></bo_css>\n    <bo_width><![CDATA[]]></bo_width>\n    <bo_menu><![CDATA[]]></bo_menu>\n    <stats_compare_option><![CDATA[]]></stats_compare_option>\n    <preselect_date_range><![CDATA[]]></preselect_date_range>\n    <id_last_order><![CDATA[]]></id_last_order>\n    <id_last_customer_message><![CDATA[]]></id_last_customer_message>\n    <id_last_customer><![CDATA[]]></id_last_customer>\n    <reset_password_token><![CDATA[]]></reset_password_token>\n    <reset_password_validity><![CDATA[]]></reset_password_validity>\n    <has_enabled_gravatar><![CDATA[]]></has_enabled_gravatar>\n  </employee>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PHP Class Definition for GetCombinationSuppliers Query\nDESCRIPTION: Query class that retrieves supplier data for a product combination. Takes a combination ID as constructor parameter and returns an array of ProductSupplierForEditing objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-combination-suppliers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Query\\GetCombinationSuppliers\n```\n\n----------------------------------------\n\nTITLE: Implementing actionListMailThemes Hook in PHP\nDESCRIPTION: This PHP class extends the Module class and implements the actionListMailThemes hook. It demonstrates how to register the hook, handle its parameters, and replace an existing layout with a custom one. The code also includes installation, uninstallation, enabling, and disabling methods.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/extend-a-layout-from-module.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface;\nuse PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface;\n\nclass MyEmailThemeModule extends Module \n{\n    public function install() \n    {\n        return parent::install()\n            // This class constant contains 'actionListMailThemes'\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function uninstall() \n    {\n        return parent::uninstall()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function enable() \n    {\n        return parent::enable()\n            && $this->registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    public function disable() \n    {\n        return parent::disable()\n            && $this->unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK)\n        ;\n    }\n\n    /**\n     * @param array $hookParams\n     */\n    public function hookActionListMailThemes(array $hookParams)\n    {\n        if (!isset($hookParams['mailThemes'])) {\n            return;\n        }\n\n        /** @var ThemeCollectionInterface $themes */\n        $themes = $hookParams['mailThemes'];\n        $theme = $themes->getByName('modern');\n        if (!$theme) {\n            return;\n        }\n\n        // First parameter is the layout name, second one is the module name (empty value matches the core layouts)\n        $orderConfLayout = $theme->getLayouts()->getLayout('order_conf', '');\n        if (null === $orderConfLayout) {\n            return;\n        }\n\n        //The layout collection extends from ArrayCollection so it has more feature than it seems..\n        //It allows to REPLACE the existing layout easily\n        $orderIndex = $theme->getLayouts()->indexOf($orderConfLayout);\n        $theme->getLayouts()->offsetSet($orderIndex, new Layout(\n            $orderConfLayout->getName(),\n            __DIR__ . '/mails/layouts/order_conf.html.twig',\n            ''\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllAssociatedCombinationSuppliersHandlerInterface in PHP\nDESCRIPTION: This code snippet defines the RemoveAllAssociatedCombinationSuppliersHandlerInterface, which is implemented by the RemoveAllAssociatedCombinationSuppliersHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-combination-suppliers-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\RemoveAllAssociatedCombinationSuppliersHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Identifying Supplier Query Class in PrestaShop PHP\nDESCRIPTION: This PHP namespace identifies the `GetSupplierForViewing` query class within the PrestaShop Core Domain. This class encapsulates the request for detailed information about a specific supplier, identified by `$supplierId`, in a specific language, identified by `$languageId`. The query is intended to be processed by its corresponding handler (`GetSupplierForViewingHandler`) to retrieve a `ViewableSupplier` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/get-supplier-for-viewing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Query\\GetSupplierForViewing`\n```\n\n----------------------------------------\n\nTITLE: Specifying the Handler for UpdateCombinationSuppliersCommand in PHP\nDESCRIPTION: Identifies the handler class `UpdateCombinationSuppliersHandler` responsible for processing the `UpdateCombinationSuppliersCommand`. This class contains the business logic for associating suppliers with the specified product combination.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-suppliers-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationSuppliersHandler`\n```\n\n----------------------------------------\n\nTITLE: Executing actionPDFInvoiceRender Hook in PHP\nDESCRIPTION: This code snippet shows how the actionPDFInvoiceRender hook is executed in PrestaShop. It passes the order invoice list as a parameter to hook subscribers, allowing modules to modify or extend PDF invoice rendering.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPDFInvoiceRender.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPDFInvoiceRender', ['order_invoice_list' => $order_invoice_list])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Combination Handler Class Path\nDESCRIPTION: Fully qualified namespace path for the handler class and its interface that processes the combination update command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-from-listing-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationFromListingHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationFromListingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Checkout Process Flow\nDESCRIPTION: Flowchart showing the complete checkout process from cart to order, including all required steps and state transitions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/orders-lifecycle/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n   A(Cart)-->|checkout-personal-information-step|B(Cart: associated to Customer)\n   B-->|checkout-addresses-step|C(Cart: address added)\n   C-->|checkout-delivery-step|D(Cart: shipping method selected)\n   D-->|checkout-payment-step|E(Cart: payment method selected)\n   E-->|Submit Order|F(Order)\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminGridTableBefore Hook in Twig Template\nDESCRIPTION: Shows how the hook is called in the template file using the renderhook function. It passes the grid object along with controller and legacy_controller information from the request attributes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminGridTableBefore.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminGridTableBefore', {\n    'grid': grid,\n    'legacy_controller': app.request.attributes.get('_legacy_controller'),\n    'controller': app.request.attributes.get('_controller')\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Order Page Documentation\nDESCRIPTION: Basic markdown frontmatter and structure for the order page documentation in PrestaShop, including page metadata like title, menu title, weight and chapter designation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Order Page\nmenuTitle: Order\nweight: 1\nchapter: true\n---\n\n# Order Detail Page\n\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Sort Parameter Examples in PHP\nDESCRIPTION: Examples showing how to sort API results by specific fields and order\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/additional-list-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'customers',\n    'sort'  => '[lastname_ASC]'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'customers',\n    'sort'  => '[lastname_ASC,id_DESC]'\n];\n```\n\n----------------------------------------\n\nTITLE: Compiling PrestaShop Static Assets using Make and npm\nDESCRIPTION: Changes the current directory to the PrestaShop project root (`/path/to/prestashop`) and then executes the `make assets` command. This command initiates the build process for static front-end assets (like CSS and JavaScript) using tools like npm. Requires Node.js, npm, and Make to be installed and configured in the development environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_localhost.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/prestashop\nmake assets\n```\n\n----------------------------------------\n\nTITLE: Cloning PrestaShop repository using Git\nDESCRIPTION: Command to clone the PrestaShop repository from GitHub using Git.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/setting-up-your-local-environment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/PrestaShop/PrestaShop.git\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectUpdateAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionObjectUpdateAfter hook is called within PrestaShop. It's executed after an object is updated, passing the updated object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectUpdateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectUpdateAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Queries Structure\nDESCRIPTION: Lists the available queries for retrieving CMS page category information including breadcrumb data, editing information, listing names and parent category IDs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### CmsPageCategory Queries\n\n- GetCmsPageCategoriesForBreadcrumb\n- GetCmsPageCategoryForEditing\n- GetCmsPageCategoryNameForListing\n- GetCmsPageParentCategoryIdForRedirection\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for displayAdminCustomers Hook in PHP\nDESCRIPTION: Defines the parameter structure passed to modules when the displayAdminCustomers hook is called. Contains the customer ID as an integer parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminCustomers.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_customer' = (int) Customer ID\n);\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for displayAdminGridTableAfter Hook in PHP\nDESCRIPTION: Defines the parameter structure passed to the displayAdminGridTableAfter hook. It includes the Grid object, the current controller name, and the legacy controller identifier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminGridTableAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'grid' = Grid $grid,\n  'controller' => (string) $controller\n  'legacy_controller' => (string) $legacyController\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing actionAdminMetaBeforeWriteRobotsFile Hook Call in PHP\nDESCRIPTION: This snippet demonstrates how the hook is executed in the PrestaShop core. It passes the robots.txt content as a reference so that modules can modify the data before it's written to the file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMetaBeforeWriteRobotsFile.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAdminMetaBeforeWriteRobotsFile', [\n            'rb_data' => &$robots_content,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Identifying the ResendOrderEmailHandlerInterface in PHP\nDESCRIPTION: This snippet indicates the interface `ResendOrderEmailHandlerInterface` that the `ResendOrderEmailHandler` implements. This interface defines the contract for handling the `ResendOrderEmailCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/resend-order-email-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\ResendOrderEmailHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Setting Uninstall Confirmation Message in PHP\nDESCRIPTION: Defines a confirmation message to be displayed when a user attempts to uninstall the module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->confirmUninstall = \"Are you sure? Deleting this module will make kittens sad :(\";\n```\n\n----------------------------------------\n\nTITLE: SqlRequest Query Class Definition in PrestaShop\nDESCRIPTION: The GetSqlRequestForEditing query class retrieves SqlRequest data that can be edited. It takes a request SQL ID as its constructor parameter and returns an EditableSqlRequest object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Query\\GetSqlRequestForEditing\n```\n\n----------------------------------------\n\nTITLE: Registering Form Data Handler Service in YAML\nDESCRIPTION: Service configuration for registering the ContactFormDataHandler in PrestaShop's service container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_handler.yml\n\nprestashop.core.form.identifiable_object.data_handler.contact_form_data_handler:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\ContactFormDataHandler'\n```\n\n----------------------------------------\n\nTITLE: Matching Template Names with Controller Actions in PHP\nDESCRIPTION: This example shows how template names should match their corresponding controller action names without the 'action' suffix. It includes a CustomerController with a viewAction that renders a matching view.html.twig template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/naming-conventions/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// CustomerController.php\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController as AbstractAdminController;\n\nclass CustomerController extends AbstractAdminController\n{\n    // Our action name is \"view\", thus our\n    // template name is \"view.html.twig\".\n    public function viewAction()\n    {\n        $this->render('@PrestaShop/Admin/Sell/Customer/view.html.twig');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Delete Search Engine Command Handler Class in PHP\nDESCRIPTION: This snippet specifies the fully qualified namespace and class name for the `DeleteSearchEngineHandler` within the PrestaShop Adapter layer. This class is responsible for executing the logic to delete the search engine when the `DeleteSearchEngineCommand` is dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/delete-search-engine-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\SearchEngine\\CommandHandler\\DeleteSearchEngineHandler`\n```\n\n----------------------------------------\n\nTITLE: Specifying GetAttributeGroupList Query Return Type (PHP)\nDESCRIPTION: Indicates that the `GetAttributeGroupList` query, when processed by its handler, returns an `array`. This array contains the list of attribute groups, potentially including their associated attributes based on the constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-attribute-group-list.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n`array`\n```\n\n----------------------------------------\n\nTITLE: Implementing displayOrderConfirmation1 Hook in PrestaShop Template\nDESCRIPTION: Hook call used in order confirmation template files to display content after order confirmation. This hook is implemented in both classic and hummingbird themes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderConfirmation1.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayOrderConfirmation1'}\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete Catalog Price Rule Handler Path - PHP\nDESCRIPTION: Fully qualified namespace path for the handler class that implements the bulk deletion functionality for catalog price rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/bulk-delete-catalog-price-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CatalogPriceRule\\CommandHandler\\BulkDeleteCatalogPriceRuleHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Combinations Query Return Type\nDESCRIPTION: Return type class path for the combinations query result.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-editable-combinations-list.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\QueryResult\\CombinationListForEditing\n```\n\n----------------------------------------\n\nTITLE: Registering a Hook in PHP for PrestaShop Modules\nDESCRIPTION: This snippet shows the syntax for the Hook::registerHook() method used to subscribe a module to one or more hooks. It explains the parameters and return value of the method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/subscribing-to-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::registerHook(Module $moduleInstance, string|string[] $subscribedHooks, ?int[] $shopIds = null): bool\n```\n\n----------------------------------------\n\nTITLE: Meta Command Handler Interface\nDESCRIPTION: Interface that the AddMetaHandler implements, defining the contract for handling meta creation commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/add-meta-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\CommandHandler\\AddMetaHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Dispatching Admin Preferences Controller Hook in PHP\nDESCRIPTION: Hook dispatch call that triggers before post-processing in the PrestaShop admin preferences controller. The hook passes the current controller instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminPreferencesControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminPreferencesControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: ChangeOrderDeliveryAddressHandlerInterface Path\nDESCRIPTION: The fully qualified namespace path for the interface implemented by the ChangeOrderDeliveryAddressHandler in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/change-order-delivery-address-command.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\ChangeOrderDeliveryAddressHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Identifying the BulkDisableSupplierCommand Class in PHP\nDESCRIPTION: Specifies the fully qualified class name (FQCN) for the `BulkDisableSupplierCommand`. This command object encapsulates the data (an array of supplier IDs) needed to disable multiple suppliers. It is processed by the `BulkDisableSupplierHandler` and returns `void`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/bulk-disable-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\BulkDisableSupplierCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining a Route for Position Update Controller (YAML)\nDESCRIPTION: This YAML snippet defines a Symfony route for handling position update HTTP requests in the PrestaShop admin. It specifies the path, HTTP method, controller action, legacy controller, and input validation for parameters. This route ties front-end grid changes to back-end update logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Route definition for the controller\\nadmin_link_block_update_positions:\\n  path: /link-widget/update-positions/{hookId}\\n  methods: [POST]\\n  defaults:\\n    _controller: 'PrestaShop\\\\Module\\\\LinkList\\\\Controller\\\\Admin\\\\Improve\\\\Design\\\\LinkBlockController::updatePositionsAction'\\n    _legacy_controller: AdminLinkWidget\\n  requirements:\\n    hookId: \\\\d+\n```\n\n----------------------------------------\n\nTITLE: Cart Product Removal Handler Interface - PHP\nDESCRIPTION: Handler interface implementation for processing cart product removal commands in PrestaShop's adapter layer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/remove-product-from-cart-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\RemoveProductFromCartHandler\n```\n\n----------------------------------------\n\nTITLE: Adding Manufacturer Address Command - PrestaShop - PHP\nDESCRIPTION: Defines the AddManufacturerAddressCommand class used to encapsulate all data required to add a manufacturer address in PrestaShop. Dependencies include type-hinted parameters such as strings and integers (many nullable), and the command is normally handled by AddManufacturerAddressHandler implementing AddManufacturerAddressHandlerInterface. Important parameters include personal data, address fields, and contact details; the expected return type is an AddressId value object. Inputs are required via the constructor, with several optional fields defaulting to NULL; output is an AddressId instance on command handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/add-manufacturer-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\AddManufacturerAddressCommand\n// Adds new address\n\n// Constructor parameters:\n//  - string $lastName\n//  - string $firstName\n//  - string $address\n//  - int|null $countryId\n//  - string $city\n//  - ?int $manufacturerId = NULL\n//  - ?string $address2 = NULL\n//  - ?string $postCode = NULL\n//  - ?int $stateId = NULL\n//  - ?string $homePhone = NULL\n//  - ?string $mobilePhone = NULL\n//  - ?string $other = NULL\n//  - ?string $dni = NULL\n\n// Handler class: PrestaShop\\PrestaShop\\Adapter\\Address\\CommandHandler\\AddManufacturerAddressHandler\n//   Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Address\\CommandHandler\\AddManufacturerAddressHandlerInterface\n// Return type: PrestaShop\\PrestaShop\\Core\\Domain\\Address\\ValueObject\\AddressId\n```\n\n----------------------------------------\n\nTITLE: Defining the Delete Tax Rules Group Command Class (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command responsible for deleting a single tax rules group in PrestaShop. This class encapsulates the data needed for the deletion operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/delete-tax-rules-group-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\TaxRulesGroup\\Command\\DeleteTaxRulesGroupCommand`\n```\n\n----------------------------------------\n\nTITLE: Describing Table Structure - MySQL - SQL\nDESCRIPTION: This SQL query uses 'DESCRIBE' to display the schema of the 'ps_product' table. This helps users identify column names when preparing CSV headers for file export or manual data inspection. Requires access to the target MySQL database with read permissions. Output will list field names and types for the specified table.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DESCRIBE dbname.ps_product;\n```\n\n----------------------------------------\n\nTITLE: Implementing Uninstall Method in PrestaShop Module (PHP)\nDESCRIPTION: This snippet provides the basic and expanded implementations of the `uninstall()` method, which remove the module's configuration settings using the Configuration object. It shows how to delete data added during installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function uninstall()\n{\n    return parent::uninstall();\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function uninstall()\n{\n    return (\n        parent::uninstall() \n        && Configuration::deleteByName('MYMODULE_NAME')\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Exchange Rate Query Result in PrestaShop (PHP)\nDESCRIPTION: This code snippet shows the return type of the GetCurrencyExchangeRate query. The query returns an ExchangeRate object, which likely contains the calculated exchange rate for the requested currency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-exchange-rate.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\QueryResult\\ExchangeRate\n```\n\n----------------------------------------\n\nTITLE: Defining the Return Type for UpdateCombinationSuppliersCommand Handling in PHP\nDESCRIPTION: Specifies the return type of the handler for the `UpdateCombinationSuppliersCommand`. It returns an array of `ProductSupplierAssociation` value objects, representing the updated associations between the product combination and its suppliers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-suppliers-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\ValueObject\\ProductSupplierAssociation[]`\n```\n\n----------------------------------------\n\nTITLE: Referencing Notification Command/Query Documentation with Markdown Includes - Markdown\nDESCRIPTION: This snippet demonstrates the use of Hugo shortcodes to include external Markdown files for documenting specific command and query operations (UpdateEmployeeNotificationLastElementCommand and GetNotificationLastElements) in the Notification domain. Dependencies include a documentation build system supporting the {{% include-md %}} shortcode, which injects external Markdown fragments. The code expects referenced files to be present and accessible in the documentation project, and will not render correctly outside of a compatible documentation pipeline.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/notification/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Notification Commands\n\n#### UpdateEmployeeNotificationLastElementCommand {id=\\\"UpdateEmployeeNotificationLastElementCommand\\\"}\n\n{{%  include-md \\\"content/8/development/architecture/domain/references/notification/_partials/update-employee-notification-last-element-command.md\\\" %}}\n\n### Notification Queries\n\n#### GetNotificationLastElements {id=\\\"GetNotificationLastElements\\\"}\n\n{{%  include-md \\\"content/8/development/architecture/domain/references/notification/_partials/get-notification-last-elements.md\\\" %}}\n```\n\n----------------------------------------\n\nTITLE: Calling the displayAdminAfterHeader Hook in PrestaShop's Back Office Theme\nDESCRIPTION: This snippet shows how the displayAdminAfterHeader hook is called in the light_display_layout.tpl template file. This hook allows modules to display content right after the header section in the PrestaShop back office interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminAfterHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminAfterHeader'}\n```\n\n----------------------------------------\n\nTITLE: AddCustomerCommand Handler Class Implementation\nDESCRIPTION: Handler class path and interface implementation for processing the AddCustomerCommand, responsible for executing the customer creation logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/add-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\AddCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: Entering a Docker Container's Shell (Bash)\nDESCRIPTION: Demonstrates the `docker exec` command used to interactively access the command-line shell (`/bin/bash`) inside a running Docker container named `prestashop`. The `-ti` flags ensure an interactive TTY session is allocated. This allows users to execute commands directly within the container's environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti prestashop /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminProductsQuantitiesStepBottom Hook in Twig Template\nDESCRIPTION: This snippet shows how the hook is called within the combinations.html.twig template. The hook is rendered with the product ID parameter, allowing modules to access the current product context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsQuantitiesStepBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsQuantitiesStepBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Handling Product Cancel Hook in PrestaShop\nDESCRIPTION: Example showing how to handle the actionProductCancel hook in PrestaShop. The code demonstrates checking which cancellation action type triggered the hook using conditional logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/view-order/refunds/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function hookActionProductCancel($params)\n{\n\t// let's say you want to check what user action triggered the hook:\n\n\tif ($params['action'] === CancellationActionType::STANDARD_REFUND) {\n\t // the hook was triggered by a \"standard refund\"\n\n\t} else if ($params['action'] === CancellationActionType::RETURN_PRODUCT) {\n\t // the hook was triggered by a \"return product\"\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis Using Docker and PrestaShop Container - Bash\nDESCRIPTION: This two-part Bash sequence first launches a Docker container with PrestaShop code mounted, then runs the PHPStan Docker image with all needed volumes for both the module and core files. Uses _PS_ROOT_DIR_ to set PrestaShop's root context in the analysis, and --workdir to point to module directory. Requires Docker and images for PrestaShop and PHPStan.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Create a container with PrestaShop files\ndocker run -tid --rm -v ps-volume:/var/www/html --name temp-ps prestashop/prestashop\n\n# Run the PHPStan image with all the volumes available to read the module and the core files\ndocker run --rm --volumes-from temp-ps -v $PWD:/web/module -e _PS_ROOT_DIR_=/var/www/html --workdir=/web/module phpstan/phpstan analyse --configuration=/web/module/tests/phpstan/phpstan.neon\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionWatermark Hook in PHP\nDESCRIPTION: Shows how the actionWatermark hook is dispatched with image and product IDs as parameters in the ProductImageUploader class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionWatermark.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            'actionWatermark',\n            ['id_image' => $imageId->getValue(), 'id_product' => $productId]\n        )\n```\n\n----------------------------------------\n\nTITLE: Including Security Command Documentation via Markdown Includes - Markdown\nDESCRIPTION: Each snippet uses the Hugo shortcodes to include pre-authored markdown documentation for security-related domain commands in PrestaShop. These includes dynamically inject the content from the referenced markdown files, allowing the document to display up-to-date technical details for each command without duplicating text. Dependencies include the Hugo static site generator, configured to support the 'include-md' shortcode, and the referenced relative file paths within the documentation structure. Inputs are the specific file paths for each command's documentation, and the output is the rendered content of those markdown files within the documentation site. Limitations: The actual command implementation details are not shown here; they are provided via the included files at build/render time.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/bulk-delete-customer-sessions-command.md\" %}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/bulk-delete-employee-sessions-command.md\" %}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/clear-outdated-customer-session-command.md\" %}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/clear-outdated-employee-session-command.md\" %}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/delete-customer-session-command.md\" %}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/security/_partials/delete-employee-session-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring theme.yml for PrestaShop custom theme\nDESCRIPTION: YAML configuration for a custom PrestaShop theme, including name, version, and compatibility information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/setting-up-your-local-environment.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: YOUR_THEME_DIRECTORY_NAME\ndisplay_name: YOUR THEME NAME\nversion: 1.0.0\nauthor:\n  name: \"PrestaShop Team\"\n  email: \"pub@prestashop.com\"\n  url: \"https://www.prestashop-project.org\"\n \nmeta:\n  compatibility:\n      from: 8.0\n      to: ~\n```\n\n----------------------------------------\n\nTITLE: ProductExtraContentFinder Class Implementation\nDESCRIPTION: Implementation of the ProductExtraContentFinder class that extends HookFinder. This class is responsible for finding and processing modules that implement the displayProductExtraContent hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductExtraContent.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ProductExtraContentFinder extends HookFinder\n{\n    protected $hookName = 'displayProductExtraContent';\n    protected $expectedInstanceClasses = ['PrestaShop\\PrestaShop\\Core\\Product\\ProductExtraContent'];\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductDelete Hook in PrestaShop\nDESCRIPTION: This code snippet shows how the actionProductDelete hook is called within PrestaShop when a product is deleted. It passes the product ID and the product object as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductDelete', ['id_product' => (int) $this->id, 'product' => $this])\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Interface for Setting Required Address Fields (PHP)\nDESCRIPTION: Specifies the fully qualified interface name (`SetRequiredFieldsForAddressHandlerInterface`) that the `SetRequiredFieldsForAddressHandler` implements. This ensures the handler adheres to a specific contract defined for handling this type of command, promoting consistency and decoupling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/set-required-fields-for-address-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Address\\CommandHandler\\SetRequiredFieldsForAddressHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for displayOrderPreview Hook in PHP\nDESCRIPTION: Defines the parameter structure passed to the displayOrderPreview hook, which includes the order_id as an integer parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderPreview.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'order_id' => (integer) Order Id\n);\n```\n\n----------------------------------------\n\nTITLE: Base Card Twig Template for Admin Interface\nDESCRIPTION: Base Twig template defining a reusable card component structure with header and body sections that can be extended by other templates. It sets up the translation domain for the module's admin interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% trans_default_domain 'Module.Demovieworderhooks.Admin' %}\n\n<div class=\"card\">\n  <div class=\"card-header\">\n    <h3 class=\"card-header-title\">\n      {% block card_title %}\n      {% endblock %}\n    </h3>\n  </div>\n\n  <div class=\"card-body\">\n    {% block card_body %}\n    {% endblock %}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dispatching ActionAdminThemesControllerUpdateoptionsAfter Hook in PHP\nDESCRIPTION: This code snippet shows how the actionAdminThemesControllerUpdateoptionsAfter hook is dispatched in PrestaShop. It passes parameters to the hook, allowing modules to react after theme options are updated in the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminThemesControllerUpdateoptionsAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionAdminThemesControllerUpdate_optionsAfter')\n```\n\n----------------------------------------\n\nTITLE: Invoking the displayAdminStatsGraphEngine Hook in PHP\nDESCRIPTION: This code demonstrates how the displayAdminStatsGraphEngine hook is called within the core PrestaShop system. It uses call_user_func to execute the hookGraphEngine method of the render object, passing parameters and a drawer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminStatsGraphEngine.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn call_user_func([$render, 'hookGraphEngine'], $params, $drawer);\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Data in PrestaShop\nDESCRIPTION: Demonstrates how to set a cookie key-value pair using the Cookie component in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$cookie = $this->context->cookie;\n$cookie->mycookie = 'myvalue';\n```\n\n----------------------------------------\n\nTITLE: Including EditFeatureCommand Documentation Partial in Markdown\nDESCRIPTION: This markdown snippet incorporates the EditFeatureCommand documentation from its respective partial using Hugo's include-md shortcode. Its purpose is to provide detailed technical documentation on editing feature entities in the PrestaShop Feature domain directly within this overview file. Requires Hugo’s documentation toolchain and the existence of the target partial markdown file; output is incorporated inline.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/edit-feature-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayDashboardTop Hook in PHP\nDESCRIPTION: Hook implementation for displaying content at the top of the PrestaShop dashboard. This hook is called from the page header toolbar template and allows modules to inject content into the dashboard's top area.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayDashboardTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayDashboardTop'}\n```\n\n----------------------------------------\n\nTITLE: Calling DisplayNav1 Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayNav1 hook in a PrestaShop theme template. The hook is used to display navigation elements in the header section of the storefront.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayNav1.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayNav1'}\n```\n\n----------------------------------------\n\nTITLE: Defining CreditSlipId Value Object in PHP\nDESCRIPTION: This snippet shows the return type of the GetCreditSlipIdsByDateRange query, which is an array of CreditSlipId value objects. These objects represent unique identifiers for credit slips.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/credit-slip/_partials/get-credit-slip-ids-by-date-range.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CreditSlip\\ValueObject\\CreditSlipId[]\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminOrderTabLink Hook in Order View Template\nDESCRIPTION: This Twig code shows how the displayAdminOrderTabLink hook is called in the details.html.twig template. It passes the order ID to the hook and assigns the rendered content to a variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderTabLink.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set displayAdminOrderTabLink = renderhook('displayAdminOrderTabLink', {'id_order': orderForViewing.id}) %}\n```\n\n----------------------------------------\n\nTITLE: Complete Free Shipping Test Scenario with Existing Steps\nDESCRIPTION: A complete Behat test scenario for testing free shipping functionality using existing step definitions. This demonstrates how to reuse existing steps to build a complete test case with proper setup and validation steps.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n  Scenario: With free shipping voucher, there is no shipping fees\n    # Start with an empty cart\n    Given I have an empty default cart\n    # We need a product\n    And there is a product in the catalog named \"product1\" with a price of 50.0 and 1000 items in stock\n    # We define the standard PrestaShop localisation tree: zone > country > state > address\n    And there is a zone named \"North America\"\n    And there is a country named \"country1\" and iso code \"US\" in zone \"North America\"\n    And there is a state named \"state1\" with iso code \"TEST-1\" in country \"country1\" and zone \"North America\"\n    And there is an address named \"address1\" with postcode \"1\" in state \"state1\"\n    # We need a carrier with shipping fees\n    Given there is a carrier named \"carrier1\"\n    And carrier \"carrier1\" applies shipping fees of 5.0 in zone \"North America\" for price between 0 and 150\n    # Create the voucher\n    Given there is a cart rule named \"free4behat\" that applies no discount with priority 4, quantity of 1000 and quantity per user 1000\n    And cart rule \"free4behat\" offers free shipping\n    And cart rule \"free4behat\" has a discount code \"free4behat\"\n    When I add 1 items of product \"product1\" in my cart\n    # 57 because product = 50 € + 5 € (carrier shipping fees) + 2 € (default carrier handling cost)\n    Then my cart total should be 57.0 tax included\n    When I use the discount \"free4behat\"\n    Then my cart total should be 50.0 tax included\n```\n\n----------------------------------------\n\nTITLE: Hooking PDF Generation with Custom Properties - PrestaShop - PHP\nDESCRIPTION: This PHP snippet illustrates how to use the `hookDisplayPDFInvoice` in a module to add custom properties (e.g., `is_birthday`) to the invoice template data for use within PDF generation. The example method checks if today matches the customer's birthday, setting a boolean flag accessible in the Smarty template. It assumes the PrestaShop module context and requires registering the PDF hook. The sample private method for birthday calculation is intentionally naive; refinements for production use are advised.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function hookDisplayPDFInvoice($hookArgs)\n{\n    $customer = $this->context->customer;\n    $hookArgs['object']->is_birthday = $this->isBirthday($customer->birthday);\n}\n\n// Naive implementation: don't do that.\nprivate function isBirthDay(string $customerBirthday)\n{\n    return date('y-m-d') == $customerBirthday;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Data Structure in XML\nDESCRIPTION: Example of the XML response structure when requesting image data from the PrestaShop API. Shows both image types and available images for a resource.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <image_types>\n        <image_type id=\"5\" name=\"large_default\" xlink:href=\"http://example.com/api/image_types/5\"/>\n        <image_type id=\"3\" name=\"medium_default\" xlink:href=\"http://example.com/api/image_types/3\"/>\n        <image_type id=\"2\" name=\"small_default\" xlink:href=\"http://example.com/api/image_types/2\"/>\n    </image_types>\n    <images>\n        <image id=\"2\" xlink:href=\"http://example.com/api/images/manufacturers/2\"/>\n        <image id=\"1\" xlink:href=\"http://example.com/api/images/manufacturers/1\"/>\n    </images>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Integration Tests in PrestaShop\nDESCRIPTION: Executes the PHPUnit integration test suite using a Composer command. This command uses a specific PHPUnit configuration for integration tests.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-execute-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer integration-tests\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composer Autoloader for Production\nDESCRIPTION: Command to optimize Composer's autoloader by generating a class map, which improves class loading performance in production. This command builds a static map of all classes, removing the need for runtime file system lookups.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncomposer dump-autoload --optimize --no-dev --classmap-authoritative\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Route Naming Pattern Example\nDESCRIPTION: Shows the required naming pattern format for PrestaShop Back Office routes and controllers using the pattern 'admin_{resources}_{action}'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-linter-naming-convention.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nadmin_{resources}_{action}\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAdminLoginControllerSetMedia Hook in PrestaShop\nDESCRIPTION: This code snippet demonstrates how the actionAdminLoginControllerSetMedia hook is called in the AdminLoginController. It passes the controller instance as a parameter to allow modules to modify or add media to the admin login page header.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerSetMedia.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminLoginControllerSetMedia',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: EditRootCategoryCommand Handler Implementation\nDESCRIPTION: The handler class for EditRootCategoryCommand that implements the EditRootCategoryHandlerInterface. This handler processes the command and performs the actual root category editing operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/edit-root-category-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Category\\CommandHandler\\EditRootCategoryHandler\n```\n\n----------------------------------------\n\nTITLE: Invoking displayContactLeftColumn Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to call the displayContactLeftColumn hook in a PrestaShop theme template. The hook is used to display new elements in the left-hand column of the contact page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayContactLeftColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayContactLeftColumn'}\n```\n\n----------------------------------------\n\nTITLE: Sample XML Response from PrestaShop API Customer Listing\nDESCRIPTION: This XML example shows the structure of the response returned by the PrestaShop API when listing customers. It contains a list of customer elements with their IDs and individual resource URLs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/listing-resources.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <customers>\n        <customer id=\"1\" xlink:href=\"http://example.com/api/customers/1\"/>\n        <customer id=\"2\" xlink:href=\"http://example.com/api/customers/2\"/>\n    </customers>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for actionAdminProductsListingResultsModifier Hook in PHP\nDESCRIPTION: Defines the structure of parameters passed to the actionAdminProductsListingResultsModifier hook. It includes the PrestaShop version, a reference to the products PDOStatement, and the total number of products.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsListingResultsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  '_ps_version' => (string) PrestaShop version,\n  'products' => &(PDOStatement),\n  'total' => (int),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ProductSupplierOptions Return Type in PHP\nDESCRIPTION: This code snippet shows the return type of the GetProductSupplierOptions query. It represents the structure of the product supplier options data returned by the query handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-supplier-options.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\QueryResult\\ProductSupplierOptions\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete Catalog Price Rule Command Path - PHP\nDESCRIPTION: Fully qualified namespace path for the bulk deletion command class that handles catalog price rules deletion in batch.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/bulk-delete-catalog-price-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Command\\BulkDeleteCatalogPriceRuleCommand\n```\n\n----------------------------------------\n\nTITLE: Route Configuration Example in PHP\nDESCRIPTION: Example of a route configuration array showing the structure with rule, keywords, controller, and params\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n  'rule' => 'myrule/{id}/{slug}',\n  'keywords' => [\n    'id' => [\n      'regexp' => '[0-9]*',\n      'param' => 'id'\n    ],\n    'slug' => [\n      'regexp' => '.*',\n      'param' => 'slug'\n    ]\n  ],\n  'controller' => 'myrulecontroller',\n  'params' => [\n    'fc' => 'module',\n    'module' => 'mymodulename'\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: GetCategoriesTree Return Type in PrestaShop PHP\nDESCRIPTION: The return type for the GetCategoriesTree query, which is an array of CategoryForTree objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/get-categories-tree.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\QueryResult\\CategoryForTree[]\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Combinations Handler Class Path\nDESCRIPTION: Handler class implementation path that processes the combinations list query with its interface implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-editable-combinations-list.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\QueryHandler\\GetEditableCombinationsListHandler\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Docker Port\nDESCRIPTION: Command to display MySQL container port information\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps mysql\n```\n\n----------------------------------------\n\nTITLE: Feature Value ID Value Object in PrestaShop\nDESCRIPTION: The FeatureValueId class is a value object returned by the AddFeatureValueHandler after successfully creating a new feature value. It encapsulates the ID of the newly created feature value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/add-feature-value-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Feature\\ValueObject\\FeatureValueId\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for GetLastEmptyCustomerCart Query in PHP\nDESCRIPTION: This snippet specifies the return type of the GetLastEmptyCustomerCart query, which is a CartId value object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-last-empty-customer-cart.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\ValueObject\\CartId\n```\n\n----------------------------------------\n\nTITLE: GetProductImage Query Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the GetProductImage query class that retrieves product image data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-image.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Query\\GetProductImage\n```\n\n----------------------------------------\n\nTITLE: GetCartRuleForEditing Interface Path - PHP\nDESCRIPTION: Interface that defines the contract for handling the GetCartRuleForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/get-cart-rule-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\QueryHandler\\GetCartRuleForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Handler Class Implementation Path - PrestaShop Command Handler\nDESCRIPTION: Defines the handler class path that implements the command handler interface for setting combination default suppliers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-combination-default-supplier-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\SetCombinationDefaultSupplierHandler\n```\n\n----------------------------------------\n\nTITLE: Specifying Void Return Type for Command Handler (PHP)\nDESCRIPTION: This indicates the return type of the `UploadLogosCommand` handler. A `void` return type signifies that the handler does not return any value upon successful execution of the logo upload operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/upload-logos-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminProductsShippingStepBottom Hook in Twig Template\nDESCRIPTION: This snippet shows how the hook is called from the form_shipping.html.twig template. It passes the product ID as a parameter to modules that implement this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsShippingStepBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminProductsShippingStepBottom', { 'id_product': id_product }) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional CSS Classes in PHP\nDESCRIPTION: Provides an example PHP array `$body_classes` where keys are potential CSS class names and values are booleans indicating whether the class should be included. This structure is intended as input for the `classnames` Smarty modifier.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $body_classes = [\n    \"lang-fr\" => true,\n    \"rtl\" => false,\n    \"country-FR\" => true,\n    \"currency-EUR\" => true,\n    \"layout-full-width\" => true,\n    \"page-index\" => true,\n  ];\n```\n\n----------------------------------------\n\nTITLE: Executing actionNewsletterRegistrationAfter Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionNewsletterRegistrationAfter hook is executed in the ps_emailsubscription module. It passes the hook name, email, action, and error as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionNewsletterRegistrationAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n    'actionNewsletterRegistrationAfter',\n    [\n        'hookName' => $hookName,\n        'email' => $_POST['email'],\n        'action' => $_POST['action'],\n        'error' => &$this->error,\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Exiting MySQL Command Line Client\nDESCRIPTION: Disconnects from the MySQL server and exits the command-line client interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> EXIT;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Page Object Method in JavaScript\nDESCRIPTION: Example of a page object method that retrieves the order status from a select element. This method follows the Page Object Model pattern by returning data without containing assertions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/ui-tests/how-to-create-your-own-ui-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n   * Get order status\n   * @param page {Page} Browser tab\n   * @return {Promise<string>}\n   */\n  async getOrderStatus(page) {\n    return this.getTextContent(page, `${this.orderStatusesSelect} option[selected='selected']`, false);\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductCancel Hook in PrestaShop\nDESCRIPTION: This code shows how the actionProductCancel hook is called when a product is cancelled in an order. It provides order details, product information, and cancellation data to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductCancel.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductCancel', ['order' => $order, 'id_order_detail' => (int) $orderDetailId, 'cancel_quantity' => $productRefund['quantity'], 'action' => CancellationActionType::STANDARD_REFUND], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Reference to ClearOutdatedEmployeeSessionHandler Class in PrestaShop\nDESCRIPTION: Fully qualified class name for the handler that processes the clear employee sessions command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/clear-outdated-employee-session-command.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Security\\CommandHandler\\ClearOutdatedEmployeeSessionHandler`\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks to Database During Upgrade\nDESCRIPTION: SQL commands for adding new hooks to existing PrestaShop installations during version upgrades. These INSERT statements add hook definitions to the ps_hook table.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/register-new-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO `PREFIX_hook` (`name`, `title`, `description`) VALUES\n  ('displayAdministrationPageForm', 'Manage Administration Page form fields', 'This hook adds, update or remove fields of the Administration Page form'),\n  ('actionMaintenancePageFormSave', 'Processing Maintenance page form', 'This hook is called when the Maintenance Page form is processed');\n```\n\n----------------------------------------\n\nTITLE: Executing the ActionObject<ClassName>UpdateAfter Hook in PHP\nDESCRIPTION: This code snippet shows how the actionObject<ClassName>UpdateAfter hook is called within the ObjectModel class after an object update operation. The hook name is dynamically generated using the object's fully qualified class name and passes the current object instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObject<ClassName>UpdateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObject' . $this->getFullyQualifiedName() . 'UpdateAfter', ['object' => $this]);\n```\n\n----------------------------------------\n\nTITLE: Calling displayNotFound Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayNotFound hook in a PrestaShop theme template. The hook is used to display content when a page is not found.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayNotFound.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayNotFound'}\n```\n\n----------------------------------------\n\nTITLE: PHP Module Hook Reference\nDESCRIPTION: Hook used to delegate product searching to modules by accepting a ProductSearchQuery parameter\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/faceted-search/inside-faceted-search-module.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nproductSearchProvider\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminControllerSetMedia Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminControllerSetMedia hook is dispatched in the core PrestaShop code. It is called without any parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminControllerSetMedia.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionAdminControllerSetMedia')\n```\n\n----------------------------------------\n\nTITLE: Defining productId Parameter for Command Constructor in PHP\nDESCRIPTION: Declares the `$productId` integer parameter required by the `UpdateProductStockAvailableCommand` constructor. This parameter identifies the specific product whose stock information needs to be updated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $productId`\n```\n\n----------------------------------------\n\nTITLE: Implementing displayFooterAfter Hook in PrestaShop Template\nDESCRIPTION: Hook call to display additional content after the footer section in PrestaShop themes. Used in both Classic and Hummingbird themes to extend footer functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFooterAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayFooterAfter'}\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for EditOrderAddressCommand Handler in PHP\nDESCRIPTION: Specifies the return type of the handler for the `EditOrderAddressCommand`. Upon successful execution, the handler returns a `PrestaShop\\PrestaShop\\Core\\Domain\\Address\\ValueObject\\AddressId` value object, representing the ID of the newly created or updated address.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-order-address-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Address\\ValueObject\\AddressId`\n```\n\n----------------------------------------\n\nTITLE: Custom Admin Directory Configuration\nDESCRIPTION: Environment variables configuration for customizing admin and install directory names for security purposes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPS_FOLDER_ADMIN: admin4577\nPS_FOLDER_INSTALL: install4577\n```\n\n----------------------------------------\n\nTITLE: Basic HelperOptions Declaration in PHP for PrestaShop Configuration\nDESCRIPTION: A basic example of a HelperOptions declaration with two configuration fields: a boolean option and a text field. It demonstrates the minimal required structure for creating a functional configuration form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->fields_options = array(\n    'general' => array(\n        'title' => $this->l('Parameters'),\n        'fields' => array(\n            'PS_MYMODULE_OPTION1' => array(\n                'title' => $this->l('Choose one'),\n                'desc' => $this->l('Choose between Yes and No.'),\n                'cast' => 'boolval',\n                'type' => 'bool'\n            ),\n            'PS_MYMODULE_OPTION2' => array(\n                'title' => $this->l('Add some text'),\n                'desc' => $this->l('This is where you can add some text'),\n                'cast' => 'strval',\n                'type' => 'text',\n                'size' => '10'\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for GetEmployeeEmailById Query Handler in PHP\nDESCRIPTION: This snippet defines the interface that the GetEmployeeEmailById query handler must implement. It ensures consistency in the handler's implementation across the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-email-by-id.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\QueryHandler\\GetEmployeeEmailByIdHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Handler Implementation for Shop Search Query\nDESCRIPTION: Specifies the handler class that processes the SearchShops query. The handler implements the SearchShopsHandlerInterface from PrestaShop's Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/search-shops.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Shop\\QueryHandler\\SearchShopsHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing displayOrderPreview Hook in Twig Template\nDESCRIPTION: Shows how to call the displayOrderPreview hook from within a Twig template, passing the order ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderPreview.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayOrderPreview', {'order_id': orderId}) }}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Cart Carrier Update Handler\nDESCRIPTION: The interface that the UpdateCartCarrierHandler implements to ensure proper command handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/update-cart-carrier-command.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Cart\\CommandHandler\\UpdateCartCarrierHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDuplicateAfter Hook in ProductController\nDESCRIPTION: This snippet shows how the actionAdminDuplicateAfter hook is dispatched in the ProductController. The hook is called with parameters passed through hookEventParameters object, allowing modules to perform actions after an item is duplicated in the admin interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDuplicateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDuplicateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Using GetDatabaseTablesList Query in PrestaShop\nDESCRIPTION: The GetDatabaseTablesList Query is used to retrieve all database tables from the PrestaShop database. It doesn't require any constructor parameters and returns a DatabaseTablesList object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-database-tables-list.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Query\\GetDatabaseTablesList\n```\n\n----------------------------------------\n\nTITLE: Defining the BulkDeleteStateCommand Class Reference in PrestaShop PHP\nDESCRIPTION: This documentation outlines the `PrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\BulkDeleteStateCommand`. Its purpose is to encapsulate the data needed for bulk deletion of states. The command takes an array of state IDs (`$stateIds`) via its constructor. It is processed by the `PrestaShop\\PrestaShop\\Adapter\\State\\CommandHandler\\BulkDeleteStateHandler`, which implements `BulkDeleteStateHandlerInterface`. The command execution does not return any value (`void`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/bulk-delete-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\BulkDeleteStateCommand`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$array $stateIds`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\State\\CommandHandler\\BulkDeleteStateHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\State\\CommandHandler\\BulkDeleteStateHandlerInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Restoring from Backups in PrestaShop with PHP\nDESCRIPTION: The 'backup:restore' command restores the PrestaShop store from a specified backup file. It uses Symfony Console facilitating an interactive mode for user-friendly selection and restoration process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:restore help\n\nbackup:restore: restore the store to a previous state from a backup file\n\nUsage: backup:restore [ADMIN_DIR][BACKUP_NAME]\nwith [ADMIN_DIR][BACKUP_NAME] the PrestaShop admin directory and the name of the backup file you want to restore\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:restore admin123 autoupgrade_save_8.1.6_15/07/2024_8:00\nThe restoration of your store is complete\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:restore admin123\nPlease select your backup:\n\t[0] Date: 12/19/24 10:48:43, Version: 8.1.5, File name: V8.1.5_20241219-104843-XXX\n\t[1] Date: 12/19/24 09:44:50, Version: 8.1.5, File name: V8.1.5_20241219-094450-XXX\n\t[2] Exit the process\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for PrestaShop Address Resource\nDESCRIPTION: XML template for the Address resource in PrestaShop. This schema defines the structure for address data that can be used in API operations. It includes all possible fields for an address record, with empty CDATA sections ready to be populated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/addresses.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <address>\n    <id><![CDATA[]]></id>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_manufacturer><![CDATA[]]></id_manufacturer>\n    <id_supplier><![CDATA[]]></id_supplier>\n    <id_warehouse><![CDATA[]]></id_warehouse>\n    <id_country><![CDATA[]]></id_country>\n    <id_state><![CDATA[]]></id_state>\n    <alias><![CDATA[]]></alias>\n    <company><![CDATA[]]></company>\n    <lastname><![CDATA[]]></lastname>\n    <firstname><![CDATA[]]></firstname>\n    <vat_number><![CDATA[]]></vat_number>\n    <address1><![CDATA[]]></address1>\n    <address2><![CDATA[]]></address2>\n    <postcode><![CDATA[]]></postcode>\n    <city><![CDATA[]]></city>\n    <other><![CDATA[]]></other>\n    <phone><![CDATA[]]></phone>\n    <phone_mobile><![CDATA[]]></phone_mobile>\n    <dni><![CDATA[]]></dni>\n    <deleted><![CDATA[]]></deleted>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n  </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockAvailableCommand Class in PHP\nDESCRIPTION: This snippet defines the UpdateCombinationStockAvailableCommand class in the PrestaShop core domain. It takes a combination ID and shop constraint as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-available-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\UpdateCombinationStockAvailableCommand\n```\n\n----------------------------------------\n\nTITLE: View Order Page File Paths\nDESCRIPTION: Core file paths for the Order View page implementation including templates, controllers, and domain services.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/view-order/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nadmin-dev/themes/new-theme/js/pages/order/view\nsrc/PrestaShopBundle/Controller/Admin/Sell/Order/OrderController.php\nsrc/Core/Domain/Order\nsrc/Adapter/Order\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Build for PrestaShop (JavaScript)\nDESCRIPTION: Customizes the Vue.js build process using `vue.config.js`. It disables HTML generation, sets up asset resolution aliases, prevents CSS extraction into separate files, enables the runtime compiler, disables source maps and filename hashing for production, and configures the output directory (`outputDir`) and public path (`publicPath`) to place compiled assets into the PrestaShop module's `views/` folder. Requires the `path` module. The `publicPath` needs to be updated with the specific module name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  chainWebpack: (config) => {\n    // Stop generating the HTML page\n    config.plugins.delete('html');\n    config.plugins.delete('preload');\n    config.plugins.delete('prefetch');\n\n    // Allow resolving images in the subfolder src/assets/ \n    config.resolve.alias.set('@', path.resolve(__dirname, 'src'));\n  },\n  css: {\n    extract: false,\n  },\n  runtimeCompiler: true,\n  productionSourceMap: false,\n  filenameHashing: false,\n  // These rules allow the files to be compiled and stored in the proper folder\n  outputDir: '../views/',\n  assetsDir: '',\n  // ⚠️ Change this line with your module name\n  publicPath: '../modules/<module_name>/views/',\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Product Images Across Shops in PrestaShop\nDESCRIPTION: Query class that retrieves a collection of product images associated with different shops. Takes a product ID as input and returns a ShopProductImagesCollection. The query is handled by GetShopProductImagesHandler which implements GetShopProductImagesHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-shop-product-images.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Query\\GetShopProductImages\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Image\\QueryHandler\\GetShopProductImagesHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryHandler\\GetShopProductImagesHandlerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryResult\\Shop\\ShopProductImagesCollection\n```\n\n----------------------------------------\n\nTITLE: Sample UI Test Scenario\nDESCRIPTION: This snippet outlines a typical UI test scenario for PrestaShop. It demonstrates logging in to the Back Office, navigating to the Catalog page, and performing filter operations on the Categories table. This simulates user actions to verify application behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-guidelines/ui-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBO - Catalog - Categories : Filter and quick edit Categories table\n    ✔ should login in BO\n    ✔ should go to 'Catalog > Categories' page\n    ✔ should reset all filters and get number of Categories in BO\n    Filter Categories table\n      ✔ should filter by id_category '9'\n      ✔ should reset all filters\n      ✔ should filter by name 'Accessories'\n      ✔ should reset all filters\n      ✔ should filter by description 'Items and accessories for your desk'\n      ✔ should reset all filters\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Configuration Logic using PHP for PrestaShop Modules\nDESCRIPTION: PHP code defining a class (`ConfigurationScript`) that implements the `ModuleComplexConfigurationInterface`. This interface requires a `run` method, which receives the module instance and parameters defined in the YAML file, allowing for complex configuration logic beyond simple value changes, SQL execution, or file copying. The class name must match the filename.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShop\\PrestaShop\\Adapter\\Module\\Configuration\\ModuleComplexConfigurationInterface;\n\nclass ConfigurationScript implements ModuleComplexConfigurationInterface\n{\n    public function run(ModuleInterface $module, array $params)\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying the Handler Class for ToggleStateStatusCommand in PrestaShop PHP\nDESCRIPTION: This snippet identifies the handler class responsible for processing the `ToggleStateStatusCommand`. The `ToggleStateStatusHandler`, located in the Adapter layer, contains the logic to actually perform the state status toggle based on the provided state ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/toggle-state-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\State\\CommandHandler\\ToggleStateStatusHandler`\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for GetProductFeatureValues Query in PHP for PrestaShop\nDESCRIPTION: This code snippet specifies the handler class for the GetProductFeatureValues query. The handler implements the GetProductFeatureValuesHandlerInterface and is responsible for processing the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-feature-values.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\FeatureValue\\QueryHandler\\GetProductFeatureValuesHandler\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\QueryHandler\\GetProductFeatureValuesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: GetCartRuleForEditing Return Type - PHP\nDESCRIPTION: Return type class that contains the editable cart rule data structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/get-cart-rule-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\QueryResult\\EditableCartRule\n```\n\n----------------------------------------\n\nTITLE: Executing Hooks in PrestaShop PHP\nDESCRIPTION: This code snippet demonstrates how to execute the 'filterManufacturerContent' hook in PrestaShop's ManufacturerController. The 'Hook::exec' method is used to trigger the hook with the filtered content as its parameter. This function allows for modular expansion of content filtering without modifying the core source code directly. Key parameters include 'filtered_content', which contains the data to be filtered, and 'chain', set to true for executing all eligible hooks in sequence.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/filterManufacturerContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'filterManufacturerContent',\n            ['filtered_content' => $manufacturerVar['description']],\n            $id_module = null,\n            $array_return = false,\n            $check_exceptions = true,\n            $use_push = false,\n            $id_shop = null,\n            $chain = true\n        )\n```\n\n----------------------------------------\n\nTITLE: Database Table Restoration in Feature File\nDESCRIPTION: Shows how to restore specific database tables after modifying product data in a test scenario\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\n@add\nFeature: Add basic product from Back Office (BO)\n  As a BO user\n  I need to be able to add new product with basic information from the BO\n\n  Scenario: I modify stuff in product tables I clean them afterwards\n     ...\n     Then I restore tables \"product,product_attributes\"\n```\n\n----------------------------------------\n\nTITLE: PrestaShop SpecificPrice Return Type\nDESCRIPTION: The return type of the AddSpecificPriceCommand handler is a SpecificPriceId value object that represents the ID of the newly created specific price.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/specific-price/_partials/add-specific-price-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SpecificPrice\\ValueObject\\SpecificPriceId\n```\n\n----------------------------------------\n\nTITLE: Rendering Product SEO Hook in PrestaShop Twig Template\nDESCRIPTION: Hook call to display additional content at the bottom of the product SEO tab in the admin interface. Takes the product ID as a parameter to contextualize the displayed content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsSeoStepBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayAdminProductsSeoStepBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Running All PHPUnit Test Suites in PrestaShop\nDESCRIPTION: Executes all PHPUnit test suites, including both integration and unit tests, using a single Composer command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-execute-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test-all\n```\n\n----------------------------------------\n\nTITLE: Executing displayCustomerAccountFormTop Hook in PrestaShop\nDESCRIPTION: Shows the implementation of the displayCustomerAccountFormTop hook execution in the RegistrationController. This hook allows displaying custom content above the customer account creation form in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCustomerAccountFormTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayCustomerAccountFormTop')\n```\n\n----------------------------------------\n\nTITLE: Executing actionListModules Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet shows how the `actionListModules` hook is called within PrestaShop using the `hookManager`. The `exec` method triggers all modules registered to this hook. The results (expected to be arrays of module information) are collected, and `array_values` ensures a consistently indexed array, handling potential null results with the null coalescing operator (`?? []`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionListModules.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n$modulesFromHook = $this->hookManager->exec('actionListModules', [], null, true);\n$modulesFromHook = array_values($modulesFromHook ?? []);\n```\n```\n\n----------------------------------------\n\nTITLE: Primary Key and Unique Index Updates with diff\nDESCRIPTION: Documents changes to primary keys and unique keys, highlighting potential import failures if new constraints are not met.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-  PRIMARY KEY (`id_feature`,`id_product`),\n+  PRIMARY KEY (`id_feature`,`id_product`,`id_feature_value`),\n```\n\nLANGUAGE: diff\nCODE:\n```\n+  UNIQUE KEY `name_UNIQUE` (`name`),\n```\n\n----------------------------------------\n\nTITLE: PHP Filter Class Reference\nDESCRIPTION: Core filter class used to represent a single product filter without logical operators\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/faceted-search/inside-faceted-search-module.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Product\\Search\\Filter\n```\n\n----------------------------------------\n\nTITLE: Executing Customer Account Update Hook Using Hook::exec in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet shows the use of the Hook::exec static method to trigger the 'actionCustomerAccountUpdate' hook, passing the currently updated customer object in an associative array. The call enables PrestaShop modules and extensions to react after a customer updates their profile successfully. Requires PrestaShop's Hook class and a properly initialized $customer variable; outputs depend on registered module listeners. This snippet is central to enabling extensibility for customer account update events.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerAccountUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCustomerAccountUpdate', [\n                'customer' => $customer,\n            ])\n```\n\n----------------------------------------\n\nTITLE: Executing the actionProductAttributeUpdate Hook in PHP\nDESCRIPTION: This code snippet shows how the actionProductAttributeUpdate hook is called from within the Product.php class. It passes the product attribute ID as a parameter to any registered hook handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductAttributeUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductAttributeUpdate', ['id_product_attribute' => (int) $id_product_attribute])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Combinations Query Class Path\nDESCRIPTION: Full namespace path for the GetEditableCombinationsList query class that retrieves product combinations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-editable-combinations-list.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Query\\GetEditableCombinationsList\n```\n\n----------------------------------------\n\nTITLE: Rendering Symfony Form with Twig Template\nDESCRIPTION: Basic example showing how to render a complete Symfony form using Twig template functions. Uses form_start(), form_widget(), and form_end() to output the entire form structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/form-theme/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/default/new.html.twig #}\n{{ form_start(form) }}\n{{ form_widget(form) }}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminProductsMainStepLeftColumnBottom Hook in Product Page Template\nDESCRIPTION: This snippet shows how the hook is called within the product page template. It renders the hook and passes the product ID as a parameter, allowing modules to access the current product context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsMainStepLeftColumnBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayAdminProductsMainStepLeftColumnBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionAdminInternationalLocalizationControllerPostProcess<HookName>Before Hook in PHP\nDESCRIPTION: This code snippet shows how the hook is dispatched within the LocalizationController. The hook name includes a dynamic part (<HookName>) that is replaced with the specific action being processed, allowing modules to target specific controller actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminInternationalLocalizationControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminInternationalLocalizationControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAfterTitleTag Hook in PrestaShop\nDESCRIPTION: Hook call to add content after the HTML title tag in PrestaShop themes. Used in both classic and hummingbird themes to inject custom content following the page title element.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAfterTitleTag.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAfterTitleTag'}\n```\n\n----------------------------------------\n\nTITLE: Executing Module Commands in PrestaShop - Bash\nDESCRIPTION: This snippet provides the command line interface for managing PrestaShop modules, allowing actions like install and configure. It requires PHP and PrestaShop's console tool. Key arguments include action and module name. Expected commands follow the format `php bin/console prestashop:module <action> <module name>`. Applicable to PrestaShop version 1.7.2 onwards, with a different command for earlier versions using `php app/console`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/resources.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module install paypal\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module configure <module name> [<YML file path>]\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionDispatcherAfter Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how the `actionDispatcherAfter` hook is triggered within the PrestaShop core using the `dispatchWithParameters` method. It's called at the end of the main dispatch process, passing parameters like `controller_type`, `controller_class`, and `is_module` to any modules listening to this hook. This allows modules to execute custom code after the controller action has been dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDispatcherAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\ndispatchWithParameters(self::DISPATCHER_AFTER_ACTION, [\n                'controller_type' => $requestAttributes->get('controller_type'),\n                'controller_class' => $requestAttributes->get('controller_name'),\n                'is_module' => 0,\n            ])\n```\n```\n\n----------------------------------------\n\nTITLE: Executing ActionOnImageResizeAfter Hook in PHP\nDESCRIPTION: This snippet shows how the actionOnImageResizeAfter hook is called in PrestaShop's core. It is executed after an image resize operation, passing the destination file and file type as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOnImageResizeAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOnImageResizeAfter', ['dst_file' => $destinationFile, 'file_type' => $fileType])\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Form Hook in Twig Template\nDESCRIPTION: Hook call to display additional fields in the feature form, passing the feature ID as a parameter to the hook handler. This hook is rendered within the feature form template in the PrestaShop back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFeatureForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayFeatureForm', {'id_feature': featureId}) }}\n```\n\n----------------------------------------\n\nTITLE: Executing actionDeliveryPriceByPrice Hook in PHP\nDESCRIPTION: This PHP snippet shows the execution of the 'actionDeliveryPriceByPrice' hook using the static 'exec' method of the Hook class. It passes an associative array with the current carrier ID ('id_carrier'), the order total ('order_total'), and the relevant zone ID ('id_zone') to any registered module listeners.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionDeliveryPriceByPrice.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec('actionDeliveryPriceByPrice', ['id_carrier' => $id_carrier, 'order_total' => $order_total, 'id_zone' => $id_zone])\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Dynamic Admin Action Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet demonstrates the execution of a dynamic PrestaShop action hook named `actionAdmin<Action>After`. The actual hook name depends on the value of `$this->action` (e.g., 'Save', 'Delete'), resulting in hooks like `actionAdminSaveAfter` or `actionAdminDeleteAfter`. It uses the static `Hook::exec` method to trigger the hook, passing an associative array containing the controller instance (`$this`) and the return value of the completed action (`$return`) as parameters to any hooked modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdmin<Action>After.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nHook::exec('actionAdmin' . ucfirst($this->action) . 'After', ['controller' => $this, 'return' => $return]);\n```\n```\n\n----------------------------------------\n\nTITLE: Using displayAdminForm Hook in PrestaShop Back Office Forms\nDESCRIPTION: This code snippet shows how to call the displayAdminForm hook within a form template. The hook passes the current fieldset as a parameter to any modules that might be listening for this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminForm' fieldset=$f}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Tax Resource XML Schema\nDESCRIPTION: Blank XML schema template for tax resource in PrestaShop. The schema includes fields for tax ID, rate, active status, deletion status, and multilingual name properties.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/taxes.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <tax>\n    <id><![CDATA[]]></id>\n    <rate><![CDATA[]]></rate>\n    <active><![CDATA[]]></active>\n    <deleted><![CDATA[]]></deleted>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </tax>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Updating Order Return State with PrestaShop Command - PHP\nDESCRIPTION: This code snippet demonstrates the declaration and intended usage of the UpdateOrderReturnStateCommand in PrestaShop. It requires two integer constructor parameters: $orderReturnId (the ID of the return to update) and $orderReturnStateId (the new state ID to apply). The command is handled by UpdateOrderReturnStateHandler, which must implement the UpdateOrderReturnStateHandlerInterface, and expects no return value (void). Proper instantiation and use requires adherence to the PrestaShop Command/Handler architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return/_partials/update-order-return-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\OrderReturn\\\\Command\\\\UpdateOrderReturnStateCommand\n// Updates order returns state.\n//\n// Constructor parameters:\n//   - int $orderReturnId\n//   - int $orderReturnStateId\n// Handler class:\n//   - PrestaShop\\\\PrestaShop\\\\Adapter\\\\OrderReturn\\\\CommandHandler\\\\UpdateOrderReturnStateHandler\n//   - Implements: PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\OrderReturn\\\\CommandHandler\\\\UpdateOrderReturnStateHandlerInterface\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Presenting Order Signature in PrestaShop (PHP)\nDESCRIPTION: This snippet retrieves an order signature from a repository, presents it using a presenter, and renders it using a Twig template. It's designed to be used as a hook in the PrestaShop order view page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$signatureRepository = $this->get(\n    'prestashop.module.demovieworderhooks.repository.order_signature_repository'\n);\n\n/** @var OrderSignaturePresenter $signaturePresenter */\n$signaturePresenter = $this->get(\n    'prestashop.module.demovieworderhooks.presenter.order_signature_presenter'\n);\n\n$signature = $signatureRepository->findOneByOrderId($params['id_order']);\n\nif (!$signature) {\n    return '';\n}\n\nreturn $this->render($this->getModuleTemplatePath() . 'customer_signature.html.twig', [\n    'signature' => $signaturePresenter->present($signature, (int) $this->context->language->id),\n]);\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Modernization Example\nDESCRIPTION: Demonstrates the transition from XHTML-style tags to HTML5 syntax, showing how to update self-closing tags and use semantic HTML5 elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<br /> → <br>\n<nav>\n<section>\n```\n\n----------------------------------------\n\nTITLE: Multi-store and Multi-language Configuration in PHP\nDESCRIPTION: Demonstrates configuration and usage of ObjectModel with both multi-store and multi-language support.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic static $definition = [\n    ...\n    'multilang_shop' => true,\n    ...\n```\n\nLANGUAGE: php\nCODE:\n```\n$targetShopId = 2;\nShop::setContext(Shop::CONTEXT_SHOP, $targetShopId);\n\n$category = new Category(1, null, $targetShopId);\n$category->additional_description[1] = \"Additional description for shop #2\";\n$category->additional_description[2] = \"Description additionelle pour le shop #2\";\n$category->save();\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Query Path\nDESCRIPTION: Namespace path for the CMS page editing query class that retrieves page data for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-page-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Query\\GetCmsPageForEditing\n```\n\n----------------------------------------\n\nTITLE: Currency Exchange Rate Query Handler in PrestaShop (PHP)\nDESCRIPTION: This code snippet shows the handler class for the GetCurrencyExchangeRate query. The handler implements the GetCurrencyExchangeRateHandlerInterface and is responsible for processing the query and returning the exchange rate.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-exchange-rate.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\QueryHandler\\GetCurrencyExchangeRateHandler\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom PrestaShop Console Command\nDESCRIPTION: Example command to run the custom 'your-module:export' command previously defined and registered. This demonstrates how custom commands, once registered as services with the 'console.command' tag, are invoked via the PrestaShop console.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console your-module:export\n```\n\n----------------------------------------\n\nTITLE: Specifying SendCartToCustomerHandler Class in PHP\nDESCRIPTION: This snippet specifies the handler class for the SendCartToCustomerCommand. It implements the SendCartToCustomerHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/send-cart-to-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\SendCartToCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Hook for Carrier Update in PHP\nDESCRIPTION: This snippet demonstrates the execution of the 'actionCarrierUpdate' hook in a PrestaShop controller. It requires PrestaShop to be set up and operational. The function is called with key parameters such as the 'id_carrier', which is the ID of the current carrier, and 'carrier', which represents the new carrier object. This is essential for updating carrier information within the admin backend.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCarrierUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionCarrierUpdate', [\n                                    'id_carrier' => (int) $current_carrier->id,\n                                    'carrier' => $new_carrier,\n                                ])\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerCarts Query Class in PHP for PrestaShop\nDESCRIPTION: This code snippet defines the GetCustomerCarts query class in PrestaShop's Core Domain. It is used to retrieve summarized customer carts and requires a customerId as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-carts.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerCarts\n```\n\n----------------------------------------\n\nTITLE: Including EditWebserviceKeyCommand Documentation with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode is part of the PrestaShop documentation infrastructure. It embeds the Markdown file found at the given path, expected to hold the documentation details for the `EditWebserviceKeyCommand` related to the Webservice domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/webservice/index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/webservice/_partials/edit-webservice-key-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Implementing displayContentWrapperBottom Hook in PrestaShop\nDESCRIPTION: This code snippet shows how to implement the displayContentWrapperBottom hook in PrestaShop templates. The hook is used to display additional content at the bottom of the content wrapper section. It is implemented across multiple layout templates in the Classic theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayContentWrapperBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayContentWrapperBottom'}\n```\n\n----------------------------------------\n\nTITLE: Adding SubmittableDeltaQuantityType to Form\nDESCRIPTION: The code snippet demonstrates how to add the SubmittableDeltaQuantityType to a form using the builder pattern in a PrestaShop environment. It is part of the PrestaShopBundle\\Form\\Admin\\Type namespace. The snippet requires the SubmittableDeltaQuantityType as a dependency and is intended for use with forms that need delta quantity input and synchronization.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/submittable-delta-quantity-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('delta_quantity', SubmittableDeltaQuantityType::class)\n```\n\n----------------------------------------\n\nTITLE: Defining BulkDisableCmsPageCategoryCommand Class in PHP\nDESCRIPTION: This class is used to create a command for disabling multiple CMS category pages. It takes an array of CMS page category IDs as a constructor parameter. The command is handled by BulkDisableCmsPageCategoryHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/bulk-disable-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\BulkDisableCmsPageCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Using BulkDisableCategoriesCommand in PrestaShop Core\nDESCRIPTION: The BulkDisableCategoriesCommand class accepts an array of category IDs and is handled by BulkUpdateCategoriesStatusHandler. The command is processed by a handler that implements BulkUpdateCategoriesStatusHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/bulk-disable-categories-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\BulkDisableCategoriesCommand\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for GetProductFeatureValues Query in PHP for PrestaShop\nDESCRIPTION: This code snippet defines the return type for the GetProductFeatureValues query. It returns an array of ProductFeatureValue objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-feature-values.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\QueryResult\\ProductFeatureValue[]\n```\n\n----------------------------------------\n\nTITLE: DeleteCmsPageCategoryHandlerInterface Path\nDESCRIPTION: Interface path that defines the contract for CMS page category deletion handlers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/delete-cms-page-category-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\CommandHandler\\DeleteCmsPageCategoryHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: GetMetaForEditing Handler Implementation Path\nDESCRIPTION: The handler class that processes the GetMetaForEditing query and implements the GetMetaForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/get-meta-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Meta\\QueryHandler\\GetMetaForEditingHandler\n```\n\n----------------------------------------\n\nTITLE: Return Type for GetCartForOrderCreation Query\nDESCRIPTION: The object returned by the query handler containing the cart information needed for order creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-order-creation.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\QueryResult\\CartForOrderCreation\n```\n\n----------------------------------------\n\nTITLE: Defining BulkDeleteEmployeeHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the BulkDeleteEmployeeHandler implements. It defines the contract for handling bulk delete operations for employees in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/bulk-delete-employee-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\CommandHandler\\BulkDeleteEmployeeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: GetReferenceCurrency Return Type Path\nDESCRIPTION: The return type class for the GetReferenceCurrency query which contains the reference currency data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-reference-currency.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\QueryResult\\ReferenceCurrency\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAdminEndContent Hook in PrestaShop Admin Template\nDESCRIPTION: This snippet shows how the displayAdminEndContent hook is called in the PrestaShop admin template. The hook allows developers to inject content at the end of the main content area in the back office, just before the footer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminEndContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminEndContent'}\n```\n\n----------------------------------------\n\nTITLE: SmartyDev Debug Output Example\nDESCRIPTION: Sample HTML output showing template debugging information when SmartyDev is enabled in developer mode.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n[...]\n      <a href=\"http://prestashop.ps/en/\" class=\"dropdown-item\">English</a>\n    </li>\n  </ul>\n</div>\n<!-- end /var/www/html/PrestaShop/themes/classic/modules/ps_languageselector/ps_languageselector.tpl -->\n\n<!-- begin /var/www/html/PrestaShop/themes/classic/modules/ps_customersignin/ps_customersignin.tpl -->\n<div class=\"user-info\">\n  <a class=\"logout hidden-sm-down\" href=\"http://prestashop.ps/en/?mylogout=\" rel=\"nofollow\">\n    <i class=\"material-icons\">&#xE7FF;</i>\n    Sign out\n  </a>\n  <a class=\"account\" href=\"http://prestashop.ps/en/my-account\" title=\"View my customer account\" rel=\"nofollow\" >\n    <i class=\"material-icons hidden-md-up logged\">&#xE7FF;</i>\n    <span class=\"hidden-sm-down\">Julien Bourdeau</span>\n  </a>\n</div>\n\n<!-- end /var/www/html/PrestaShop/themes/classic/modules/ps_customersignin/ps_customersignin.tpl -->\n\n<!-- begin /var/www/html/PrestaShop/themes/classic/modules/ps_shoppingcart/ps_shoppingcart.tpl -->\n<div class=\"blockcart cart-preview \" data-refresh-url=\"http://prestashop.ps/en/module/ps_shoppingcart/ajax\">\n  <div class=\"header\">\n    <i class=\"material-icons shopping-cart\">shopping_cart</i>\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Prices for Products in PrestaShop API\nDESCRIPTION: This example demonstrates how to retrieve the price for a specific combination of a product, including tax, using the PrestaShop API. The query includes the 'price' parameter with custom options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/specific-price.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n/api/products/2?price[my_price][use_tax]=1&price[my_price][product_attribute]=25\n```\n\n----------------------------------------\n\nTITLE: Hugo Page Links in Markdown\nDESCRIPTION: Internal documentation links using Hugo shortcode syntax for related pages about keeping PrestaShop up-to-date.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- {{< page-link \"8/basics/keeping-up-to-date/update\" >}}\n- {{< page-link \"8/basics/keeping-up-to-date/backup\" >}}\n- {{< page-link \"8/basics/keeping-up-to-date/migration\" >}}\n```\n\n----------------------------------------\n\nTITLE: Introducing translation domain usage in PrestaShop code\nDESCRIPTION: An example showing how translation strings are identified in PrestaShop code using the trans() function followed by a translation domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-domains.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nStrings are easily recognizable in PrestaShop's code because it is always introduced by `trans(` and followed by a translation domain.\n```\n\n----------------------------------------\n\nTITLE: Hook Execution in PaymentModule.php for actionValidateOrderAfter in PHP\nDESCRIPTION: Shows how the actionValidateOrderAfter hook is executed in the core code, passing context objects including cart, order, customer, currency, and order status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionValidateOrderAfter.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionValidateOrderAfter',\n            [\n                'cart' => $this->context->cart,\n                'order' => $order ?? null,\n                'orders' => $order_list,\n                'customer' => $this->context->customer,\n                'currency' => $this->context->currency,\n                'orderStatus' => new OrderState(isset($order) ? $order->current_state : null),\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: PHP Handler Class for GetCombinationSuppliers Query\nDESCRIPTION: Handler class that implements the logic for processing the GetCombinationSuppliers query. Implements GetCombinationSuppliersHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-combination-suppliers.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\QueryHandler\\GetCombinationSuppliersHandler\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Server via Command Line\nDESCRIPTION: Connects to the MySQL server using the specified username (`adminusername`). The user will be prompted for the password (`-p`). This command requires the MySQL client to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mysql -u adminusername -p\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for actionShopDataDuplication Hook in PHP\nDESCRIPTION: Defines the parameter structure for the shop data duplication hook. Contains old and new shop IDs as integers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionShopDataDuplication.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    <?php\n    array(\n      'old_id_shop' => (int) Old shop ID,\n      'new_id_shop' => (int) New shop ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Email Hook - PHP\nDESCRIPTION: This snippet demonstrates how the 'actionEmailAddBeforeContent' hook is triggered within PrestaShop's Mail.php class using the Hook::exec() method. It provides references to the email HTML and text templates (by reference for modification), as well as the template name and language ID as parameters. To utilize this hook, ensure you have PrestaShop's core Hook API available; hooked functions can modify template variables before the final render. Inputs include an associative array with template data and language context, and modifications can alter outgoing email content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionEmailAddBeforeContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionEmailAddBeforeContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            )\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation in Order View Template - Twig\nDESCRIPTION: Shows how the displayAdminOrderSide hook is rendered in the order view template. The hook is called with the order ID from the orderForViewing object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderSide.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrderSide', {'id_order': orderForViewing.id}) }}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with Coverage in Docker for PrestaShop\nDESCRIPTION: This command demonstrates how to run PHPUnit tests with code coverage in a Docker environment for PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-execute-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec -e XDEBUG_MODE=coverage prestashop_container vendor/bin/phpunit --coverage-text -c tests/Unit/phpunit.xml tests/Unit/PrestaShopBundle/Command/ConfigCommandTest.php\n```\n\n----------------------------------------\n\nTITLE: Implementing displayPaymentByBinaries Hook in PrestaShop Templates\nDESCRIPTION: This code snippet shows how to call the displayPaymentByBinaries hook in a Smarty template. The hook is used in checkout payment templates to display payment forms generated by binary files during the checkout process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPaymentByBinaries.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayPaymentByBinaries'}\n```\n\n----------------------------------------\n\nTITLE: Executing displayFeaturePostProcess Hook in PHP\nDESCRIPTION: Hook execution code that runs after processing features in the admin panel. The hook passes a reference to error array allowing modifications to the error collection during post-processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFeaturePostProcess.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'displayFeaturePostProcess',\n                ['errors' => &$this->errors]\n            )\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters Structure for displayAdminOrder Hook in PHP\nDESCRIPTION: Shows the parameter structure passed to the displayAdminOrder hook. The hook receives an array containing the order ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n 'id_order' = (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching the actionAdminInternationalGeolocationControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This snippet shows how the hook is called in the GeolocationController. The hook is triggered before form processing and passes the controller instance as a parameter to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminInternationalGeolocationControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminInternationalGeolocationControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Checking Composer Version in Command Line\nDESCRIPTION: Command to verify Composer is installed and check its version number.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer --version\n```\n\n----------------------------------------\n\nTITLE: Joining and Filtering PrestaShopCollection in PHP\nDESCRIPTION: Shows how to join associated entities to a PrestaShopCollection and filter based on the joined entity. This example joins the manufacturer table and filters products by manufacturer name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$productCollection = (new PrestaShopCollection('Product'))\n    ->join('manufacturer')\n    ->where('manufacturer.name', '=', 'Manufacturer AAA');\n```\n\n----------------------------------------\n\nTITLE: Displaying Hook Content in PrestaShop PDF Templates\nDESCRIPTION: Code that includes the HOOK_DISPLAY_PDF content in PrestaShop PDF templates. It creates a table row that spans 12 columns and displays the hook content when it's available.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayPDF<Template>.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<!-- Hook -->\n{if isset($HOOK_DISPLAY_PDF)}\n    <tr>\n        <td colspan=\"12\" height=\"30\">&nbsp;</td>\n    </tr>\n\n    <tr>\n        <td colspan=\"12\">\n            {$HOOK_DISPLAY_PDF}\n        </td>\n    </tr>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameter for DeleteSupplierCommand in PHP\nDESCRIPTION: This snippet specifies the single constructor parameter required by the `DeleteSupplierCommand`. The parameter `$supplierId` is an integer (`int`) and is used to identify the specific supplier that needs to be deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$int $supplierId\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Theme Enable Command Usage\nDESCRIPTION: Command syntax for enabling a PrestaShop theme via CLI. The command requires a 'theme' argument specifying which theme to enable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-theme-enable.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nprestashop:theme:enable\n```\n\n----------------------------------------\n\nTITLE: Updating Category Images Using cURL\nDESCRIPTION: PHP example using cURL to update an existing category image through the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/image-management.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// DON'T FORGET to add the ps_method parameter\n$urlImage = 'http://example.com/api/images/categories/2/?ps_method=PUT';\n$key  = 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT';\n\n//Here you set the path to the image you need to upload\n$image_path = '/path/to/the/image.jpg';\n$image_mime = 'image/jpg';\n\n$args['image'] = new CurlFile($image_path, $image_mime);\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_HEADER, 1);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLINFO_HEADER_OUT, 1);\ncurl_setopt($ch, CURLOPT_URL, $urlImage);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_USERPWD, $key.':');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $args);\n$result = curl_exec($ch);\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n\nif (200 == $httpCode) {\n    echo 'Category image was successfully updated.';\n}\n```\n\n----------------------------------------\n\nTITLE: Executing overrideLayoutTemplate Hook in PrestaShop Front Controller - PHP\nDESCRIPTION: This snippet demonstrates how to execute the \"overrideLayoutTemplate\" hook using the Hook::exec method in PrestaShop. It requires PrestaShop's core library as a dependency. The key parameters include 'default_layout', 'entity', 'locale', 'controller', and 'content_only', which are used to determine the layout context. The function does not return a value but triggers a series of actions associated with the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/overrideLayoutTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec(\n            'overrideLayoutTemplate',\n            [\n                'default_layout' => $layout,\n                'entity' => $entity,\n                'locale' => $this->context->language->locale,\n                'controller' => $this,\n                'content_only' => $content_only,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Search Handler Class Definition\nDESCRIPTION: Handler class that implements the SearchProductsHandlerInterface to process product search queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-products.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\QueryHandler\\SearchProductsHandler\n```\n\n----------------------------------------\n\nTITLE: Example PrestaShop Module config.xml File (XML)\nDESCRIPTION: Provides an example structure for the `config.xml` file within a PrestaShop module. This file caches key module properties (like name, version, author, description, configuration status, instance requirement, and country limitations) to optimize performance in module listings. It is automatically generated by PrestaShop upon installation if it doesn't exist but can be included in releases to enable immediate execution of upgrade scripts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-file-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<module>\n    <name>mymodule</name>\n    <displayName><![CDATA[My module]]></displayName>\n    <version><![CDATA[1.0]]></version>\n    <description><![CDATA[Description of my module.]]></description>\n    <author><![CDATA[Author name]]></author>\n    <tab><![CDATA[front_office_features]]></tab>\n    <confirmUninstall>Are you sure you want to uninstall?</confirmUninstall>\n    <is_configurable>0</is_configurable>\n    <need_instance>0</need_instance>\n    <limited_countries></limited_countries>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Tar Archive of PrestaShop Files\nDESCRIPTION: Command to create a compressed tar archive of PrestaShop installation directory on Linux servers. Used for efficient backup of file system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/backup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -czf <file_name>.tar <folder_to_save>\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -czf backup.tar /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Calling displayCheckoutSubtotalDetails Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayCheckoutSubtotalDetails hook in a PHP template file. It passes the $subtotal variable to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCheckoutSubtotalDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCheckoutSubtotalDetails' subtotal=$subtotal}\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for GetCatalogPriceRuleForEditing Query in PHP\nDESCRIPTION: This code snippet specifies the handler class for the GetCatalogPriceRuleForEditing query. The handler implements the GetCatalogPriceRuleForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/get-catalog-price-rule-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CatalogPriceRule\\QueryHandler\\GetCatalogPriceRuleForEditingHandler\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\QueryHandler\\GetCatalogPriceRuleForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Iframe Payment Scenario (Mermaid)\nDESCRIPTION: Mermaid sequence diagram illustrating the workflow for an Iframe payment method. PrestaShop uses the `$additionalInformation` parameter to display an HTML iframe containing the PSP's form. The customer interacts with the form within the iframe on the checkout page. PrestaShop creates the order and returns a confirmation page. A server-to-server webhook is typically used for payment status updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/payment/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Customer->>PrestaShop instance: Select an Embedded payment method\n    PrestaShop instance->>PrestaShop instance: Uses $additionalInformation parameter to display an HTML Iframe\n    Customer->>External Payment service provider (PSP): Submits the PSP form within the Iframe in the PrestaShop checkout page\n    External Payment service provider (PSP)-->>External Payment service provider (PSP): Handles payment form\n    PrestaShop instance-->>PrestaShop instance: Creates the Order\n    PrestaShop instance->>Customer: Returns a confirmation page\n    External Payment service provider (PSP)-->>PrestaShop instance: Usually send a webhook to the Store to give Server to server information about the payment\n    PrestaShop instance-->>PrestaShop instance: Updates payment status / order status\n```\n\n----------------------------------------\n\nTITLE: Specifying the Return Type for DeleteSearchEngineHandler in PHP\nDESCRIPTION: This indicates that the handler for the `DeleteSearchEngineCommand` does not return any value upon successful execution. Its purpose is purely side-effect based (deleting the search engine).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/delete-search-engine-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Declaring Form Handler Service in YAML\nDESCRIPTION: YAML configuration for declaring a Form Handler service in PrestaShop, specifying the form factory, hook dispatcher, data provider, form type, and other parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/settings-forms.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprestashop.adapter.administration.general.form_handler:\n    class: 'PrestaShop\\PrestaShop\\Core\\Form\\Handler'\n    arguments:\n        - '@form.factory'\n        - '@prestashop.core.hook.dispatcher'\n        - '@prestashop.adapter.administration.general.form_provider'\n        - 'PrestaShopBundle\\Form\\Admin\\Configure\\AdvancedParameters\\Administration\\GeneralType'\n        - 'AdministrationPageGeneral'\n        - 'general'\n```\n\n----------------------------------------\n\nTITLE: URL Structure for Modern Controllers\nDESCRIPTION: URL pattern used by modern controllers to fetch help content from help.prestashop.com. Contains language code, documentation context, and version number parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/back-office-help-sidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhelp.prestashop.com/<language code>/doc/<help context>?version=<version number>\n```\n\n----------------------------------------\n\nTITLE: DeleteCmsPageCategoryCommand Class Path\nDESCRIPTION: Fully qualified namespace path for the DeleteCmsPageCategoryCommand class that handles CMS page category deletion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/delete-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\DeleteCmsPageCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Including AddFeatureCommand Documentation Partial in Markdown\nDESCRIPTION: This markdown code snippet includes the content of the AddFeatureCommand documentation partial, facilitating modular documentation. It leverages Hugo’s include-md shortcode to import content from a specific file path. The partial describes the implementation and usage of the AddFeatureCommand within PrestaShop's domain-driven architecture. There are no external programming code dependencies, but it requires the Hugo static site generator and the file to exist at the referenced path. No parameters are passed; the output is directly embedded markdown content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/add-feature-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Handler Interface Path\nDESCRIPTION: Interface path that defines the contract for handling country required fields queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/country/_partials/get-country-required-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Country\\QueryHandler\\GetCountryRequiredFieldsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Displaying Controller Comparison Table in HTML\nDESCRIPTION: This HTML table compares different types of controllers in PrestaShop, categorizing them by family, subsystem, type, and base controller class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th align=\"center\">Family</th>\n<th align=\"center\">Subsystem</th>\n<th align=\"center\">Type</th>\n<th>Base controller class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\" rowspan=\"2\">FO</td>\n<td align=\"center\" rowspan=\"2\">Legacy</td>\n<td align=\"center\">Native</td>\n<td><code>FrontController</code></td>\n</tr>\n<tr>\n<td align=\"center\">Module</td>\n<td><code>ModuleFrontController</code> (based on <code>FrontController</code>)</td>\n</tr>\n<tr>\n<td align=\"center\" rowspan=\"5\">BO</td>\n<td align=\"center\" rowspan=\"2\">Legacy</td>\n<td align=\"center\">Native</td>\n<td><code>AdminController</code></td>\n</tr>\n<tr>\n<td align=\"center\">Module</td>\n<td><code>ModuleAdminController</code> (based on <code>AdminController</code>)</td>\n</tr>\n<tr>\n<td align=\"center\" rowspan=\"3\">Symfony</td>\n<td align=\"center\">Native</td>\n<td><code>FrameworkBundleAdminController</code></td>\n</tr>\n<tr>\n<td align=\"center\">Native (BO API)</td>\n<td><code>ApiController</code></td>\n</tr>\n<tr>\n<td align=\"center\">Module</td>\n<td><code>FrameworkBundleAdminController</code></td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Tags in Behat Test\nDESCRIPTION: Example of using cache clearing hooks in a Behat feature file for product testing. Shows how to tag features for cache management before and after execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\n@clear-cache-before-feature\n@clear-cache-after-feature\nFeature: Add basic product from Back Office (BO)\n  As a BO user\n  I need to be able to add new product with basic information from the BO\n\n```\n\n----------------------------------------\n\nTITLE: Hook Parameters Structure in PHP\nDESCRIPTION: Defines the parameter structure for the actionAdminProductsListingFieldsModifier hook, including version info and SQL query components that can be modified.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsListingFieldsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  '_ps_version' => (string) PrestaShop version,\n  'sql_select' => &(array),\n  'sql_table' => &(array),\n  'sql_where' => &(array),\n  'sql_order' => &(array),\n  'sql_limit' => &(string),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAdminView Hook in PrestaShop Template\nDESCRIPTION: Basic hook implementation for displaying content in the PrestaShop admin view template. This hook allows modules to inject content into the admin view interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminView.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminView'}\n```\n\n----------------------------------------\n\nTITLE: Linking a Symfony Route to a Legacy Tab System (YAML, PS 1.7.5+)\nDESCRIPTION: Demonstrates how to link a Symfony route (defined in `routes.yml`) to the legacy PrestaShop tab system for display in the back-office menu, a feature available since PrestaShop 1.7.5. This requires adding the `_legacy_controller` (referencing a legacy controller name, potentially a dummy one) and `_legacy_link` (matching the `class_name` used in the corresponding `$tabs` array entry) parameters to the route's `defaults` section. This allows the Symfony controller to be accessible via a menu item configured through the `$tabs` property.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/routes.yml\nyour_route_name:\n    path: your-module/demo\n    methods: [GET]\n    defaults:\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\n      _legacy_controller: AdminGamification # Should match the class_name used in $tabs\n      _legacy_link: AdminGamification # Should match the class_name used in $tabs\n```\n\n----------------------------------------\n\nTITLE: Specifying DeleteAttributeCommand Handler\nDESCRIPTION: Identifies the handler class `DeleteAttributeHandler` responsible for processing the `DeleteAttributeCommand`. It also notes that this handler implements the `DeleteAttributeHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attribute-group/_partials/delete-attribute-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Attribute\\CommandHandler\\DeleteAttributeHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\AttributeGroup\\Attribute\\CommandHandler\\DeleteAttributeHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Executing the actionClearCache Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how the `actionClearCache` hook is executed within the PrestaShop core, likely within the `classes/Tools.php` file. It uses the static `exec` method of the `Hook` class to trigger any modules or functions registered to this specific action hook. This execution happens when Smarty's cache clearing process is initiated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionClearCache.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionClearCache')\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Deployment Page\nDESCRIPTION: YAML frontmatter configuration for a documentation page about deployment, setting the title, weight for ordering, and homepage visibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/deployment/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Deployment\nweight: 40\nshowOnHomepage: true\n---\n\n# Deployment\n\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Category Query Structure Documentation\nDESCRIPTION: Documentation layout for category-related queries including retrieving category trees, editing information, and status checks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Category Queries\n\n#### GetCategoriesTree\n#### GetCategoryForEditing\n#### GetCategoryIsEnabled\n```\n\n----------------------------------------\n\nTITLE: Implementing displayCartExtraProductActions Hook in PrestaShop\nDESCRIPTION: Hook implementation that adds extra action buttons to product lines in the shopping cart. The hook accepts a product parameter containing the current product's data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCartExtraProductActions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCartExtraProductActions' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Hook Execution in OrderPayment Class\nDESCRIPTION: Shows how the actionPaymentCCAdd hook is called from within the OrderPayment class. The hook is executed with the current instance passed as the paymentCC parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPaymentCCAdd.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPaymentCCAdd', ['paymentCC' => $this])\n```\n\n----------------------------------------\n\nTITLE: Product Form Types and Commands Table Structure\nDESCRIPTION: Table showing the relationship between form types, fields and their corresponding CQRS commands for product management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Form type                | Field      | Description                                              | CQRS Command                                           |\n|:-------------------------|:-----------|:---------------------------------------------------------|:-------------------------------------------------------|\n| **BasicInformationType** | `basic` | Contains the basic product information of the Product | `AddProductCommand` and `UpdateBasicInformationCommand` |\n| **DescriptionType** | `description`    | Contains the description of the Product | `UpdateDescriptionCommand` |\n| **ShortcutType** | `shortcut`    | Contains shortcut for prices and quantity of the Product | `UpdatePricesCommand`, `UpdateStockCommand` and `UpdateOptionsCommand` |\n| **RelationshipsType**    | `relationships` | Contains relationships of the product | N/A |\n| **ShortcutType**         | `shortcuts`     | Contains shortcut fields editable in other sub forms but accessible in first tab easily | N/A |\n| **TypeaheadProductPackCollectionType** | `pack_items` | List of products (for Pack of product) | `AddProductToPackCommand` `UpdateProductPackCommand` `RemoveProductFromPachCommand` |\n| **ProductCategoriesType** | `product_categories` | Manage product categories | N/A |\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderCollection in PHP for PrestaShop\nDESCRIPTION: Creates an OrderCollection class extending AbstractTypedCollection to manage collections of Order DTOs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace PrestaShop\\Module\\DemoViewOrderHooks\\Collection;\n\nuse PrestaShop\\Module\\DemoViewOrderHooks\\DTO\\Order;\nuse PrestaShop\\PrestaShop\\Core\\Data\\AbstractTypedCollection;\n\nfinal class OrderCollection extends AbstractTypedCollection\n{\n    protected function getType()\n    {\n        return Order::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Dispatch Implementation in PHP\nDESCRIPTION: Shows how the displaybackOfficeEmployeeMenu hook is dispatched with the menu links collection parameter in the core system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBackOfficeEmployeeMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n            'displaybackOfficeEmployeeMenu',\n            [\n                'links' => $menuLinksCollections,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Calling a Widget via Hook in PHP\nDESCRIPTION: Code example showing how to trigger a widget from PHP using the Hook::exec method. This represents the traditional hook approach to widget usage.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/widgets.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nHook::exec($hook_name)\n```\n\n----------------------------------------\n\nTITLE: Parameters Definition for displayAdminOrderSideBottom Hook in PHP\nDESCRIPTION: Defines the parameter structure for the displayAdminOrderSideBottom hook, which includes the order ID as an integer parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderSideBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Running PrestaShop Behat Tests\nDESCRIPTION: Command to run Behat tests using the appropriate configuration file. A test database must be generated before running this command using 'composer create-test-db'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# from the PrestaShop root folder\nphp -d date.timezone=UTC ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml\n```\n\n----------------------------------------\n\nTITLE: Rendering legacy_block_kpi hook in PrestaShop Twig Template - PHP\nDESCRIPTION: This PHP code is embedded within a Twig template to render the 'legacy_block_kpi' hook in PrestaShop's back office product catalog page. It utilizes the renderhook function, passing the hook name and controller context via the 'kpi_controller' parameter, which is set to 'AdminProductsController'. This enables external modules or extensions to inject KPI (Key Performance Indicator) blocks dynamically at this location in the product catalog admin UI. Inputs include the hook name and a context array; output is the rendered HTML from hooked modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/legacyblockkpi.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('legacy_block_kpi', {'kpi_controller': 'AdminProductsController'}) }}\n```\n\n----------------------------------------\n\nTITLE: Calling Hook in Smarty Template\nDESCRIPTION: Shows how to call a custom hook from within a Smarty template using the hook helper function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/hooks/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{hook h='MyCustomHook'}\n```\n\n----------------------------------------\n\nTITLE: Implementing the displayAdminOrderMain Hook in Twig Template\nDESCRIPTION: Example of how the hook is called in a Twig template, passing the order ID as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderMain.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrderMain', {'id_order': orderForViewing.id}) }}\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: Demonstrates the usage of the hook `actionFeatureValueDelete` in PrestaShop for executing actions upon the deletion of a feature value. Relies on the PrestaShop Hook class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFeatureValueDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionFeatureValueDelete', ['id_feature_value' => $this->id])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Order State XML Schema Template\nDESCRIPTION: A blank XML schema template for the Order State resource in PrestaShop. This structure can be used for creating or updating order states through the PrestaShop API, with support for multilingual fields like name and template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_states.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_state>\n    <id><![CDATA[]]></id>\n    <unremovable><![CDATA[]]></unremovable>\n    <delivery><![CDATA[]]></delivery>\n    <hidden><![CDATA[]]></hidden>\n    <send_email><![CDATA[]]></send_email>\n    <module_name><![CDATA[]]></module_name>\n    <invoice><![CDATA[]]></invoice>\n    <color><![CDATA[]]></color>\n    <logable><![CDATA[]]></logable>\n    <shipped><![CDATA[]]></shipped>\n    <paid><![CDATA[]]></paid>\n    <pdf_delivery><![CDATA[]]></pdf_delivery>\n    <pdf_invoice><![CDATA[]]></pdf_invoice>\n    <deleted><![CDATA[]]></deleted>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <template>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </template>\n  </order_state>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Combination Images Removal Command Definition\nDESCRIPTION: Command class responsible for removing all images associated with a product combination. Takes a combination ID as constructor parameter and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-combination-images-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\RemoveAllCombinationImagesCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\RemoveAllCombinationImagesHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\RemoveAllCombinationImagesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Executing Dashboard Data Hook in PrestaShop\nDESCRIPTION: Hook execution for dashboard data retrieval in PrestaShop's back office. The hook accepts parameters, module ID, and returns an array of data from modules implementing this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/dashboardData.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('dashboardData', $params, $id_module, true)\n```\n\n----------------------------------------\n\nTITLE: Specifying the Interface Implemented by UpdateProductPricesHandler in PHP\nDESCRIPTION: Defines the fully qualified interface name (`UpdateProductPricesHandlerInterface`) that the `UpdateProductPricesHandler` class implements. This ensures the handler adheres to the contract defined within the Core domain for handling product price updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-prices-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductPricesHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Defining GetEmployeeForEditing Query Class in PHP\nDESCRIPTION: This code snippet defines the GetEmployeeForEditing query class in the PrestaShop core domain. It is used to retrieve employee information for editing purposes. The query takes an employee ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Query\\GetEmployeeForEditing\n```\n\n----------------------------------------\n\nTITLE: Disabling core.js Loading in YAML\nDESCRIPTION: This snippet demonstrates how to disable the loading of core.js file in a custom theme, allowing for a custom implementation of the core JavaScript functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntheme_settings:\n    core_scripts: false\n```\n\n----------------------------------------\n\nTITLE: Instantiating PrestaShopCollection with Language ID in PHP\nDESCRIPTION: Shows how to create a PrestaShopCollection with a specific language ID. This is useful when working with multi-language fields to set the context language for querying and filtering.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShopCollection;\n\n$idLang = 1;\n$productCollection = new PrestaShopCollection('Product', $idLang);\n```\n\n----------------------------------------\n\nTITLE: Executing the actionProductSearchAfter Hook in PrestaShop\nDESCRIPTION: This code snippet demonstrates how the actionProductSearchAfter hook is called after a product search is completed. It passes the $searchVariables parameter which contains the already filtered search variables.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductSearchAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductSearchAfter', $searchVariables)\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCustomerOrdersHandlerInterface Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetCustomerOrdersHandlerInterface` interface. The `GetCustomerOrdersHandler` class implements this interface, ensuring adherence to a specific contract for handling the customer orders query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-orders.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler\\GetCustomerOrdersHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Copying Multiple Local Files via YAML Configuration for PrestaShop Modules\nDESCRIPTION: Shows how multiple file copy operations can be defined within the `files` section of the YAML configuration file. Each entry specifies a `source` and `dest` path relative to the configuration file and module root, respectively.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n    - source: \"../source/file1.txt\"\n      dest: \"docs/file1.txt\"\n    - source: \"../source/file2.txt\"\n      dest: \"docs/file2.txt\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Values in YAML for PrestaShop Modules\nDESCRIPTION: YAML snippet showing how to delete a specific configuration key (`PAYPAL_ONBOARDING`) from the PrestaShop `Configuration` table using the `configuration.delete` section within the module's self-configuration file. Multiple keys can be listed for deletion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n    delete:\n        - \"PAYPAL_ONBOARDING\"\n```\n\n----------------------------------------\n\nTITLE: Example Module Implementation of displayProductExtraContent\nDESCRIPTION: Example code showing how a module should return data for this hook. It creates a new ProductExtraContent object with a title and content to be displayed in the product page tab.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductExtraContent.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn (new PrestaShop\\PrestaShop\\Core\\Product\\ProductExtraContent())\n    ->setTitle('example field')\n    ->setContent('example content')\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Return Type Path\nDESCRIPTION: Fully qualified namespace path for the value object returned by the query handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-parent-category-id-for-redirection.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\ValueObject\\CmsPageCategoryId\n```\n\n----------------------------------------\n\nTITLE: Blank Order XML Schema Template for PrestaShop API\nDESCRIPTION: This XML template provides the structure for creating or updating orders via the PrestaShop API. It includes all available fields such as IDs for customer, cart, addresses, payment details, pricing information, and associated order rows with product details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/orders.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order>\n    <id><![CDATA[]]></id>\n    <id_address_delivery><![CDATA[]]></id_address_delivery>\n    <id_address_invoice><![CDATA[]]></id_address_invoice>\n    <id_cart><![CDATA[]]></id_cart>\n    <id_currency><![CDATA[]]></id_currency>\n    <id_lang><![CDATA[]]></id_lang>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <current_state><![CDATA[]]></current_state>\n    <module><![CDATA[]]></module>\n    <invoice_number><![CDATA[]]></invoice_number>\n    <invoice_date><![CDATA[]]></invoice_date>\n    <delivery_number><![CDATA[]]></delivery_number>\n    <delivery_date><![CDATA[]]></delivery_date>\n    <valid><![CDATA[]]></valid>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <shipping_number><![CDATA[]]></shipping_number>\n    <note><![CDATA[]]></note>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_shop><![CDATA[]]></id_shop>\n    <secure_key><![CDATA[]]></secure_key>\n    <payment><![CDATA[]]></payment>\n    <recyclable><![CDATA[]]></recyclable>\n    <gift><![CDATA[]]></gift>\n    <gift_message><![CDATA[]]></gift_message>\n    <mobile_theme><![CDATA[]]></mobile_theme>\n    <total_discounts><![CDATA[]]></total_discounts>\n    <total_discounts_tax_incl><![CDATA[]]></total_discounts_tax_incl>\n    <total_discounts_tax_excl><![CDATA[]]></total_discounts_tax_excl>\n    <total_paid><![CDATA[]]></total_paid>\n    <total_paid_tax_incl><![CDATA[]]></total_paid_tax_incl>\n    <total_paid_tax_excl><![CDATA[]]></total_paid_tax_excl>\n    <total_paid_real><![CDATA[]]></total_paid_real>\n    <total_products><![CDATA[]]></total_products>\n    <total_products_wt><![CDATA[]]></total_products_wt>\n    <total_shipping><![CDATA[]]></total_shipping>\n    <total_shipping_tax_incl><![CDATA[]]></total_shipping_tax_incl>\n    <total_shipping_tax_excl><![CDATA[]]></total_shipping_tax_excl>\n    <carrier_tax_rate><![CDATA[]]></carrier_tax_rate>\n    <total_wrapping><![CDATA[]]></total_wrapping>\n    <total_wrapping_tax_incl><![CDATA[]]></total_wrapping_tax_incl>\n    <total_wrapping_tax_excl><![CDATA[]]></total_wrapping_tax_excl>\n    <round_mode><![CDATA[]]></round_mode>\n    <round_type><![CDATA[]]></round_type>\n    <conversion_rate><![CDATA[]]></conversion_rate>\n    <reference><![CDATA[]]></reference>\n    <associations>\n      <order_rows>\n        <order_row>\n          <id><![CDATA[]]></id>\n          <product_id><![CDATA[]]></product_id>\n          <product_attribute_id><![CDATA[]]></product_attribute_id>\n          <product_quantity><![CDATA[]]></product_quantity>\n          <product_name><![CDATA[]]></product_name>\n          <product_reference><![CDATA[]]></product_reference>\n          <product_ean13><![CDATA[]]></product_ean13>\n          <product_isbn><![CDATA[]]></product_isbn>\n          <product_upc><![CDATA[]]></product_upc>\n          <product_price><![CDATA[]]></product_price>\n          <id_customization><![CDATA[]]></id_customization>\n          <unit_price_tax_incl><![CDATA[]]></unit_price_tax_incl>\n          <unit_price_tax_excl><![CDATA[]]></unit_price_tax_excl>\n        </order_row>\n      </order_rows>\n    </associations>\n  </order>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Legacy Smarty Template Example\nDESCRIPTION: Example of a legacy template using Smarty syntax to display employee avatar and name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/templating-with-twig.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"employee_avatar_small\">\n    <img class=\"img\" alt=\"\" src=\"{$employee_image}\" />\n</span>\n{$employee_name}\n```\n\n----------------------------------------\n\nTITLE: PHP Interface for GetCombinationSuppliers Handler\nDESCRIPTION: Interface that defines the contract for handling GetCombinationSuppliers queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-combination-suppliers.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\QueryHandler\\GetCombinationSuppliersHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining CMS Page Category Edit Command Class Path - PHP\nDESCRIPTION: Full namespace path for the EditCmsPageCategoryCommand class that handles CMS page category editing functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/edit-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\EditCmsPageCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Referencing BulkDeleteCartRuleHandler Implementation in PrestaShop\nDESCRIPTION: The fully qualified namespace of the handler class that processes the bulk deletion command. This handler implements the BulkDeleteCartRuleHandlerInterface defined in the Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/bulk-delete-cart-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CartRule\\CommandHandler\\BulkDeleteCartRuleHandler\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Combination Hook in Twig Template\nDESCRIPTION: Example of how the displayAdminProductsCombinationBottom hook is rendered in the product combination form template. The hook passes the product ID and product attribute ID as parameters to modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsCombinationBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayAdminProductsCombinationBottom', { 'id_product': form.vars.value.id_product, 'id_product_attribute': form.vars.value.id_product_attribute }) }}\n```\n\n----------------------------------------\n\nTITLE: Referencing BulkDeleteCartRuleCommand Class in PrestaShop Core Domain\nDESCRIPTION: The fully qualified namespace of the command class used for bulk deletion of cart rules. This command accepts an array of cart rule IDs and returns void when executed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/bulk-delete-cart-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Command\\BulkDeleteCartRuleCommand\n```\n\n----------------------------------------\n\nTITLE: Customer Deletion Command Class Path\nDESCRIPTION: The fully qualified namespace path for the customer deletion command class in PrestaShop core domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/delete-customer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Command\\DeleteCustomerCommand\n```\n\n----------------------------------------\n\nTITLE: Defining GetLastEmptyCustomerCartHandlerInterface in PHP\nDESCRIPTION: This snippet defines the interface that the GetLastEmptyCustomerCartHandler implements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-last-empty-customer-cart.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\QueryHandler\\GetLastEmptyCustomerCartHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Watching Assets for Development\nDESCRIPTION: Command to enable Webpack's watch mode for development, which automatically recompiles assets when changes are detected.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/compile-assets.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Configuring PrestaShop Module Version Compatibility in PHP\nDESCRIPTION: Example code showing how to define module compatibility with PrestaShop versions using the ps_versions_compliancy property. This configuration specifies minimum and maximum compatible PrestaShop versions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-guidelines/project-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->ps_versions_compliancy = array(\n    'min' => '1.7.0.0',\n    'max' => _PS_VERSION_,\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning PrestaShop Repository\nDESCRIPTION: Command to clone the forked PrestaShop repository to local machine. Replace 'preston' with your GitHub username.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/preston/PrestaShop.git\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for PrestaShop Attachment Resource\nDESCRIPTION: The XML schema template for creating or updating attachment resources in PrestaShop. It includes all available fields such as id, file information, multilingual name and description, and product associations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/attachments.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <attachment>\n    <id><![CDATA[]]></id>\n    <file><![CDATA[]]></file>\n    <file_name><![CDATA[]]></file_name>\n    <file_size><![CDATA[]]></file_size>\n    <mime><![CDATA[]]></mime>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n    <associations>\n      <products>\n        <product>\n          <id><![CDATA[]]></id>\n        </product>\n      </products>\n    </associations>\n  </attachment>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Identifying UpdateCategoryPositionCommand Class in PrestaShop (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for updating category positions within the PrestaShop Core Domain. This command encapsulates the data needed for the update operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/update-category-position-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\UpdateCategoryPositionCommand`\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Page Header in Markdown\nDESCRIPTION: Front matter configuration for a product page documentation in Hugo markdown format. Defines the page title, menu title, weight for ordering, and chapter status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Product Page\nmenuTitle: Product\nweight: 1\nchapter: true\n---\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDuplicateBefore Hook in PHP\nDESCRIPTION: This code snippet shows how the actionAdminDuplicateBefore hook is dispatched in PrestaShop's ProductController. It uses the dispatchWithParameters method to trigger the hook with specific parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDuplicateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDuplicateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Namespace Definition for PrestaShop CustomMoneyType\nDESCRIPTION: The namespace declaration for the CustomMoneyType class which extends Symfony's native MoneyType for PrestaShop-specific currency handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/custom-money-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShopBundle\\Form\\Admin\\Type\n```\n\n----------------------------------------\n\nTITLE: Module Template Path Helper Method in PHP\nDESCRIPTION: Utility method for the module class that returns the path to the module's template directory. This is used when rendering templates to ensure consistent path formatting.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n     * Get path to this module's template directory\n     */\n    private function getModuleTemplatePath(): string\n    {\n        return sprintf('@Modules/%s/views/templates/admin/', $this->name);\n    }\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Command Path Reference\nDESCRIPTION: Full namespace path for the SetGlobalSpecificPricePriorityCommand class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-global-specific-price-priority-command.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\Command\\SetGlobalSpecificPricePriorityCommand\n```\n\n----------------------------------------\n\nTITLE: TypeScript Loader Configuration for Webpack\nDESCRIPTION: Example configuration for a TypeScript loader in a bundler like Webpack. This is necessary when importing TypeScript files from the PrestaShop core.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/import-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test: /\\.ts?$/,\n  use: 'ts-loader',\n  exclude: /node_modules/,\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Parameters Definition in PHP\nDESCRIPTION: Defines the parameters passed to the displayAdminThemesListAfter hook, including the current theme name as a string parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminThemesListAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n'current_theme_name' => (string) Name of the currently used theme\n);\n```\n\n----------------------------------------\n\nTITLE: Required Configuration Keys in theme.yml for PrestaShop Theme\nDESCRIPTION: This snippet lists the essential configuration keys that must be present in the config/theme.yml file for a PrestaShop theme to be considered valid. It includes basic theme information like name and version, author details, compatibility information, available layouts, and required image type definitions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/distribution/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname\ndisplay_name\nversion\nauthor.name\nmeta.compatibility.from\nmeta.available_layouts\nglobal_settings.image_types.cart_default\nglobal_settings.image_types.small_default\nglobal_settings.image_types.medium_default\nglobal_settings.image_types.large_default\nglobal_settings.image_types.home_default\nglobal_settings.image_types.category_default\ntheme_settings.default_layout\n```\n\n----------------------------------------\n\nTITLE: Calling DisplayFooterBefore Hook in PHP\nDESCRIPTION: This snippet shows how to call the displayFooterBefore hook in a PHP template file. It is typically used in the footer section of PrestaShop themes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFooterBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayFooterBefore'}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit for Unit Testing - Bash\nDESCRIPTION: Installs PHPUnit using Composer as a development dependency for use in unit testing PrestaShop modules. It will match the maximum compatible version available for the project's PHP version range. Composer should be installed prior to running this command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpunit/phpunit\n```\n\n----------------------------------------\n\nTITLE: Using BulkChangeOrderStatusCommand Class in PrestaShop\nDESCRIPTION: The BulkChangeOrderStatusCommand is used to change statuses for multiple orders at once. It requires an array of order IDs and the new order status ID as constructor parameters, and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/bulk-change-order-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\BulkChangeOrderStatusCommand`\n_Changes status for given orders._\n\n| Command details            |    |\n| -------------------------- | -- |\n| **Constructor parameters** | <ul> <li>`$array $orderIds`</li>  <li>`$int $newOrderStatusId`</li> </ul> |\n| **Handler class**          | `PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\BulkChangeOrderStatusHandler`  <p> Implements: </p> <ul>  <li>`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\BulkChangeOrderStatusHandlerInterface`</li>  |\n| **Return type** |  `void`  |\n```\n\n----------------------------------------\n\nTITLE: Calling displayContactContent Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayContactContent hook in a PrestaShop theme template. The hook is used to display new elements in the content wrapper of the contact page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayContactContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayContactContent'}\n```\n\n----------------------------------------\n\nTITLE: Adding a Language to available_languages.json\nDESCRIPTION: Example of adding a language entry to the available_languages.json file in the PrestaShop/TranslationFiles repository. The key is the locale of the language, and the value is the display name of the language for the back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/localization-packs.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"da-DK\": \"Danish (Denmark)\"\n```\n\n----------------------------------------\n\nTITLE: Batch Object Deletion in PHP\nDESCRIPTION: Demonstrates how to delete multiple ObjectModel instances at once.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$cmsIdsToDelete = [1, 2, 3, 8, 10];\n(new Cms())->deleteSelection($cmsIdsToDelete);\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Shop Search Handler\nDESCRIPTION: Defines the interface that the SearchShopsHandler implements, following PrestaShop's pattern of separating interfaces from implementations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/search-shops.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Shop\\QueryHandler\\SearchShopsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying Void Return Type in PHP\nDESCRIPTION: Indicates that the `ToggleStoreStatusCommand` handler method does not return any value upon successful execution. Its primary function is to perform the side effect of changing the store's status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/toggle-store-status-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Specifying SQL Scripts for Execution in YAML for PrestaShop Modules\nDESCRIPTION: YAML configuration example demonstrating how to execute SQL statements contained within a specified `.sql` file (`myscript.sql`). The path is relative to the location of the YAML configuration file. Multiple SQL files can be listed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsql:\n    - \"myscript.sql\"\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop Mail Generation Command\nDESCRIPTION: This command is used to generate mail templates for a specified theme in PrestaShop. It requires a theme and locale, with optional parameters for output folders and an overwrite option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-mail-generate.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `prestashop:mail:generate`\n\n## Informations\n\n* Path: `src/PrestaShopBundle/Command/GenerateMailTemplatesCommand.php`\n* Arguments:\n  * `theme`: Theme to use for mail templates\n  * `locale`: Locale to use for the templates\n  * `coreOutputFolder`: Output folder to export core templates (__(optional)__)\n  * `modulesOutputFolder`: Output folder to export modules templates (by default same as core) (__(optional)__)\n* Options:\n  * `--overwrite`, `-o`: Overwrite existing templates (false, by default)\n\n## Description\n\nThis command aims to generate mail templates for a specified theme.\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for actionAdminOrdersTrackingNumberUpdate Hook in PHP\nDESCRIPTION: Defines the parameter structure passed to the hook, including order, customer, and carrier objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminOrdersTrackingNumberUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'order' => (Order),\n  'customer' => (Customer),\n  'carrier' => (Carrier)\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Product Images with Shop Constraint in PrestaShop (PHP)\nDESCRIPTION: This PHP code defines a query object for retrieving all images associated with a given product within a specified shop constraint context, following PrestaShop's CQRS architecture. The constructor requires a product ID (integer) and a ShopConstraint value object to specify the shop scope. The query is handled by the GetProductImagesHandler class, and should return an array of ProductImage domain result objects; it requires PrestaShop's core domain libraries and adherence to the query/handler pattern. Inputs are the product ID and the shop constraint; outputs are ProductImage entities.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-images.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Query\\GetProductImages\n// _Get list of Images associated to a Product in terms of ShopConstraint_\n\n// Query details:\n// Constructor parameters:\n//   int $productId\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\ValueObject\\ShopConstraint $shopConstraint\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Product\\Image\\QueryHandler\\GetProductImagesHandler\n//   Implements:\n//     PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryHandler\\GetProductImagesHandlerInterface\n// Return type:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryResult\\ProductImage[]\n\n```\n\n----------------------------------------\n\nTITLE: Listing Resources in PrestaShop API\nDESCRIPTION: Example of the XML response when listing address resources. The response includes resource IDs and links to access individual address details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <addresses>\n        <address id=\"2\" xlink:href=\"http://example.com/api/addresses/2\"/>\n        <address id=\"3\" xlink:href=\"http://example.com/api/addresses/3\"/>\n        <address id=\"1\" xlink:href=\"http://example.com/api/addresses/1\"/>\n        <address id=\"4\" xlink:href=\"http://example.com/api/addresses/4\"/>\n    </addresses>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for Translation System Comparison Table\nDESCRIPTION: CSS styles for the comparison table, defining colors and layouts for support indicators and examples.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/comparison.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.support-yes, .example-yes {\n  background-color: #8ce48c;\n  text-align: center;\n}\n.support-no, .example-no {\n  background-color: #e89b9b;\n}\n.example-yes, .example-no {\n  display: inline-block;\n  width: 1.1rem; \n  height: 1.1rem;\n  margin-bottom: -2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing displayShoppingCartFooter Hook in PrestaShop Templates (PHP)\nDESCRIPTION: This snippet shows how to call the displayShoppingCartFooter hook in a Smarty template. The hook allows modules to display custom content in the shopping cart footer area of the checkout process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayShoppingCartFooter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayShoppingCartFooter'}\n```\n\n----------------------------------------\n\nTITLE: Referencing BulkDeleteAttributeCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for handling bulk deletion of attributes in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/attribute-group/_partials/bulk-delete-attribute-command.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\AttributeGroup\\Attribute\\Command\\BulkDeleteAttributeCommand\n```\n\n----------------------------------------\n\nTITLE: AddUnofficialCurrencyHandler Class Definition in PHP\nDESCRIPTION: This is the handler class for the AddUnofficialCurrencyCommand. It implements the AddUnofficialCurrencyHandlerInterface and is responsible for processing the command to add an unofficial currency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/add-unofficial-currency-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\AddUnofficialCurrencyHandler\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Command to install required NPM packages for asset compilation in PrestaShop subprojects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/compile-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cart Creation and Customer Association Flow\nDESCRIPTION: Flowchart showing the cart creation process and customer association logic in the front office, including the PS_CART_FOLLOWING setting behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/orders-lifecycle/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A(Guest with empty Cart)-->|Add item to Cart|B{{Cart creation}}-->C(Cart)-->|Login|D{{Associate Cart to Customer}}-->F\n   A-->|Login|G{PS_CART_FOLLOWING<br>and<br>has non ordered Cart}-->|No|E{{Cart will be created later when a product is added}}\n   G-->|Yes|F(Cart: Associated to Customer)\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer in PrestaShop\nDESCRIPTION: Command to run PHP CS Fixer to ensure code complies with PrestaShop's coding standards\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/coding-standards/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp ./vendor/bin/php-cs-fixer fix\n```\n\n----------------------------------------\n\nTITLE: Specifying the DeleteCartRuleCommand Return Type (PHP)\nDESCRIPTION: Indicates that the execution of the `DeleteCartRuleCommand` by its handler does not return any value. The operation is performed, but no result is explicitly returned upon completion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/delete-cart-rule-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Specifying DeleteCustomerThreadHandler Class in PHP\nDESCRIPTION: The DeleteCustomerThreadHandler class is responsible for handling the DeleteCustomerThreadCommand. It implements the DeleteCustomerThreadHandlerInterface, which is part of PrestaShop's Core Domain for CustomerService.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/delete-customer-thread-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\DeleteCustomerThreadHandler\n```\n\n----------------------------------------\n\nTITLE: Specifying the Order ID Parameter for GetOrderPreview Query in PHP\nDESCRIPTION: Defines the required constructor parameter for the GetOrderPreview query. It takes an integer (`$int`) representing the unique identifier (`$orderId`) of the order for which a preview is requested.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/get-order-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$int $orderId\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Class and Interface for UpdateCombinationDetailsCommand (PHP)\nDESCRIPTION: Specifies the handler class (`UpdateCombinationDetailsHandler`) responsible for processing the `UpdateCombinationDetailsCommand`. This handler, located in the Adapter layer, implements the `UpdateCombinationDetailsHandlerInterface` defined in the Core Domain, ensuring adherence to the required contract for handling this command. The command handler returns `void`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-details-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationDetailsHandler`\n```\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationDetailsHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Identifying AddProductToCartCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for adding a product to the cart within the PrestaShop Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-product-to-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\AddProductToCartCommand\n```\n\n----------------------------------------\n\nTITLE: ShortcutType Fields Structure\nDESCRIPTION: Table defining the fields, types and commands for product shortcuts management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Field type                       | Description            | CQRS Commands |\n|:-------|:---------------------------------|:-----------------------|---------------|\n| `price` | `MoneyType` | Product price (tax excluded) | `UpdatePricesCommand` |\n| `price_ttc` | `MoneyType` | Product price (tax included) | |\n| `quantity` | `NumberType` | Product stock quantity | |\n| `id_tax_rules_group` | `ChoiceType` | **One** of the *TaxRulesGroup* entity | `UpdateStockCommand` |\n| `reference` | `TextType` | Product reference | `UpdateOptionsCommand` |\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked PrestaShop Repository using Git\nDESCRIPTION: Clones the user's forked PrestaShop repository from GitHub to their local machine. This command requires Git to be installed and assumes the user has already forked the main PrestaShop repository on GitHub. Replace 'preston' with the actual GitHub username. The repository should be cloned into the web server's document root directory (e.g., htdocs, www).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_localhost.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/preston/PrestaShop.git\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for PrestaShop Image Type\nDESCRIPTION: This XML snippet provides a blank schema for the image_type entity in PrestaShop. It includes all the properties of an image type, such as id, name, dimensions, and associated entity types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/image_types.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <image_type>\n    <id><![CDATA[]]></id>\n    <name><![CDATA[]]></name>\n    <width><![CDATA[]]></width>\n    <height><![CDATA[]]></height>\n    <categories><![CDATA[]]></categories>\n    <products><![CDATA[]]></products>\n    <manufacturers><![CDATA[]]></manufacturers>\n    <suppliers><![CDATA[]]></suppliers>\n    <stores><![CDATA[]]></stores>\n  </image_type>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining the Query Return Type (PHP)\nDESCRIPTION: Specifies the expected return type for the `GetCustomerOrders` query. The handler will return an array of `OrderSummary` objects, each representing a summarized view of a customer's order.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/get-customer-orders.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\OrderSummary[]`\n```\n\n----------------------------------------\n\nTITLE: Linting PHP Files Using Bash\nDESCRIPTION: The first code snippet demonstrates how to perform a syntax check on PHP files using a bash command. It iteratively runs PHP's built-in linter on all PHP files in a directory, excluding certain directories like 'vendor' and 'tests'. Dependencies include a Linux bash shell and a compatible version of PHP. It outputs whether syntax errors are detected or not.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/basic-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ php -l  <file>\\n        Syntax check only (lint)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"find . -type f -name '*.php' ! -path \\\"./vendor/*\\\" ! -path \\\"./tests/*\\\" -exec php -l -n {} \\; | (! grep -v \\\"No syntax errors detected\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure for Tips Page\nDESCRIPTION: Basic Markdown structure for the tips and tricks page including the main heading and a Hugo shortcode to display child pages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Tips & tricks\n\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Defining EditCatalogPriceRuleHandlerInterface in PHP\nDESCRIPTION: This code snippet defines the EditCatalogPriceRuleHandlerInterface, which is implemented by the EditCatalogPriceRuleHandler class. This interface defines the contract for handling EditCatalogPriceRuleCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/edit-catalog-price-rule-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\CommandHandler\\EditCatalogPriceRuleHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing displayAddressSelectorBottom Hook in PrestaShop Template\nDESCRIPTION: Hook call placed in the checkout address template to display content at the bottom of the address selector. Used in the front office since PrestaShop 8.1.0.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAddressSelectorBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAddressSelectorBottom'}\n```\n\n----------------------------------------\n\nTITLE: Adding Smoke Tests to FrameworkBundleAdminControllerTest in PHP\nDESCRIPTION: This code snippet demonstrates how to add a new smoke test entry to the Data Provider of the FrameworkBundleAdminControllerTest class. It includes the class definition, namespace, and the getDataProvider method where new test entries are added.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/unit.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Integration\\PrestaShopBundle\\Controller\\Admin;\n// ...\n/**\n * @group demo\n *\n * To execute these tests: use \"./vendor/bin/phpunit -c tests/Integration/phpunit.xml tests/Integration/PrestaShopBundle/Controller/Admin/FrameworkBundleAdminControllerTest.php\" command.\n */\nclass FrameworkBundleAdminControllerTest extends WebTestCase\n{\n    // [...]\n\n    public function getDataProvider()\n    {\n        return [\n            'symfony_route_of_page' => ['Page title', 'symfony_route_of_page'],\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GetCategoriesTree Handler Interface in PrestaShop PHP\nDESCRIPTION: The interface that must be implemented by handlers that process the GetCategoriesTree query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/get-categories-tree.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\QueryHandler\\GetCategoriesTreeHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue.js Project (Shell)\nDESCRIPTION: Uses the Vue CLI to create a new Vue.js project within a folder named `_dev`. This folder is intended to hold the Vue application's source code during development within the PrestaShop module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vue create _dev\n```\n\n----------------------------------------\n\nTITLE: PrestaShop SpecificPrice Handler Interface\nDESCRIPTION: The interface that defines the contract for handling AddSpecificPriceCommand objects. Any handler for adding specific prices must implement this interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/specific-price/_partials/add-specific-price-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SpecificPrice\\CommandHandler\\AddSpecificPriceHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining the Upload Logos Command Class in PrestaShop (PHP)\nDESCRIPTION: This snippet shows the fully qualified class name for the command used to initiate the logo upload process within the PrestaShop Core domain. This class encapsulates the data required for the upload operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/upload-logos-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Shop\\Command\\UploadLogosCommand`\n```\n\n----------------------------------------\n\nTITLE: Module Repository Cache Methods Update\nDESCRIPTION: Changes to clearCache and getCacheKey methods in ModuleRepository including new parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function clearCache(bool $allShops = false)\nprotected function getCacheKey(?int $shopId = null)\n```\n\n----------------------------------------\n\nTITLE: Rendering displayDashboardToolbarIcons Hook in Twig Template\nDESCRIPTION: This snippet shows how the displayDashboardToolbarIcons hook is rendered in a Twig template. It allows modules to add new elements to the dashboard toolbar icons list in the PrestaShop back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayDashboardToolbarIcons.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayDashboardToolbarIcons', {}) }}\n```\n\n----------------------------------------\n\nTITLE: Controller Response Type Changes\nDESCRIPTION: Updates to CustomerController action return types from RedirectResponse to JsonResponse.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function toggleStatusAction(): JsonResponse\npublic function toggleNewsletterSubscriptionAction(): JsonResponse\npublic function togglePartnerOfferSubscriptionAction(): JsonResponse\n```\n\n----------------------------------------\n\nTITLE: Executing actionAjaxDieBefore Hook in PHP\nDESCRIPTION: Hook execution code that runs before Ajax die operations. Passes the current controller instance, method name, and value as parameters to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAjaxDieBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAjaxDieBefore', ['controller' => $controller, 'method' => $method, 'value' => $value])\n```\n\n----------------------------------------\n\nTITLE: Rendering DisplaybackOfficeCategory Hook in Twig Template\nDESCRIPTION: This snippet shows how the displaybackOfficeCategory hook is called within a Twig template in the PrestaShop back office. It allows modules to inject content into the AdminCategories tab.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBackOfficeCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displaybackOfficeCategory') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Settings in YAML\nDESCRIPTION: This snippet shows how to configure theme-specific settings that can be changed through the back office interface, such as default layouts and page-specific layouts.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  global_settings:\n    theme_settings:\n      default_layout: layout-full-width\n      layouts:\n        # Specific layout for some pages\n        identity: layout-left-side-column\n        order-confirmation: layout-left-side-column\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Feature Context in PHP\nDESCRIPTION: A PHP class extending AbstractDomainFeatureContext that implements Behat test steps for order management. Shows how to handle table data and use the command bus pattern.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass OrderFeatureContext extends AbstractDomainFeatureContext\n{\n    /**\n     * @Given I add order :orderReference with the following details:\n     *\n     * @param string $orderReference\n     * @param TableNode $table\n     */\n    public function addOrderWithTheFollowingDetails(string $orderReference, TableNode $table)\n    {\n        $testCaseData = $table->getRowsHash();\n\n        $data = $this->mapAddOrderFromBackOfficeData($testCaseData);\n\n        /** @var OrderId $orderId */\n        $orderId = $this->getCommandBus()->handle(\n            new AddOrderFromBackOfficeCommand(\n                $data['cartId'],\n                $data['employeeId'],\n                $data['orderMessage'],\n                $data['paymentModuleName'],\n                $data['orderStateId']\n            )\n        );\n\n        SharedStorage::getStorage()->set($orderReference, $orderId->getValue());\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining CreateEmptyCustomerCartHandler Class in PHP\nDESCRIPTION: This code snippet shows the handler class for the CreateEmptyCustomerCartCommand. It implements the CreateEmptyCustomerCartHandlerInterface and is responsible for processing the command to create an empty cart for a customer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/create-empty-customer-cart-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\CreateEmptyCustomerCartHandler\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Function for PrestaShop 8.0.0 Security Tab Addition\nDESCRIPTION: PHP function called during the 8.0.0 update process to add a security tab. This function is referenced in the SQL update file and performs database insertions or updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/database/structure.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction ps_800_add_security_tab()\n{\n  // Code inserting or updating values in database\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an Update using PrestaShop CLI - Text\nDESCRIPTION: This snippet documents usage and options for the `update:start` command to run a PrestaShop store update from the CLI, supporting both online and local update workflows. The help output details various advanced options (config file, zips, xmls, module control, template regeneration, and step/control flags). The example illustrates typical output from an end-to-end update process. Admin access is required, and updates may be constrained by compatibility and pending prerequisites.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:start help\n\nupdate:start: launch a store update.\n\nUsage: update:start [ADMIN_DIR]\nwith [ADMIN_DIR] the PrestaShop admin directory\n--from-config-file=[config-path]: the update config file path\n--zip=[name] : sets the archive zip file for a local update\n--xml=[name] : sets the archive xml file for a local update\n--disable-non-native-modules=[1|0]: disable all modules installed after the store creation  (1 for yes, 0 for no)\n--regenerate-email-templates=[1|0]: regenerate email templates. If you've customized email templates, your changes will be lost if you activate this option  (1 for yes, 0 for no)\n--disable-all-overrides=[1|0]: overriding is a way to replace business behaviors (class files and controller files) to target only one method or as many as you need. This option disables all classes & controllers overrides, allowing you to avoid conflicts during and after updates  (1 for yes, 0 for no)\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n--action:[step]: Specify the step you want to start from (Default: UpgradeNow)\n--chain: Enables to sequence update steps\n--no-chain: Prevents chaining of update steps to keep the control\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:start admin123\nStarting update...\nDestination version: 9.0.0\nDownloading step has been skipped, upgrade process will now unzip the local archive.\nStore deactivated. Extracting files...\n...\nStore updated to 9.0.0. Congratulations! You can now reactivate your store.\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assertions in UI Tests\nDESCRIPTION: Example showing how to use Chai's expect syntax for assertions in tests. The example includes a custom error message to improve test failure reporting.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/ui-tests/how-to-create-your-own-ui-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nConst isCustomerConnected = await foLoginPage.isCustomerConnected(page);\nawait expect(isCustomerConnected, 'Customer is disconnected in FO').to.be.true;\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Translated Configuration XML Schema\nDESCRIPTION: XML schema template for translated configuration resources in PrestaShop. Includes structure for multi-language values, timestamps, configuration name, and shop identifiers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/translated_configurations.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <translated_configuration>\n    <id><![CDATA[]]></id>\n    <value>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </value>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name><![CDATA[]]></name>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_shop><![CDATA[]]></id_shop>\n  </translated_configuration>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining AddContactHandlerInterface in PHP for PrestaShop Contact Management\nDESCRIPTION: The AddContactHandlerInterface is implemented by the AddContactHandler class. It defines the contract for handling the addition of contact data in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/contact/_partials/add-contact-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Contact\\CommandHandler\\AddContactHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Additional OPCache Performance Options\nDESCRIPTION: Advanced OPCache settings for maximum performance in production environments. These options disable timestamp validation and path revalidation, which requires manual cache clearing when code changes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nopcache.validate_timestamps=0\nopcache.revalidate_path=0\n```\n\n----------------------------------------\n\nTITLE: Requiring Page Object Classes in Test Files\nDESCRIPTION: Example showing how to import page object classes into a test file. Pages are required and initialized without using the 'new' keyword.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/ui-tests/how-to-create-your-own-ui-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// For test 'Filter Customer'\nconst dashboardPage = require('@pages/BO/dashboard');\nconst customersPage = require('@pages/BO/customers');\n```\n\n----------------------------------------\n\nTITLE: Executing actionSetInvoice Hook in Order Class\nDESCRIPTION: Shows the actual implementation of the hook execution in the Order class, passing the current instance, invoice object, and payment flag as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSetInvoice.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionSetInvoice', [\n                    get_class($this) => $this,\n                    get_class($order_invoice) => $order_invoice,\n                    'use_existing_payment' => (bool) $use_existing_payment,\n                ])\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerServiceSignature Query Class in PHP\nDESCRIPTION: This snippet defines the GetCustomerServiceSignature query class in the PrestaShop Core Domain. It is used to retrieve the signature for replying in a customer thread. The query takes a language ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/get-customer-service-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Query\\GetCustomerServiceSignature\n```\n\n----------------------------------------\n\nTITLE: Generating Symfony Routes in JavaScript\nDESCRIPTION: Demonstrates how to generate Symfony route URLs from JavaScript using the `Router` component provided in the PrestaShop back office theme. It requires importing the `Router`, instantiating it, and then calling the `generate` method with the route name and an optional parameters object. The target route must be configured with `exposed: true`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Router from '@components/router';\n\nthis.router = new Router();\nconst route = this.router.generate('my_route', {parameters});\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Redirect for PrestaShop Documentation\nDESCRIPTION: YAML configuration that sets up a page redirect to the PrestaShop update documentation path. Includes build settings to exclude the page from lists and control homepage visibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/use-autoupgrade-module.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: redirect\nredirect: /8/basics/keeping-up-to-date/update/update-from-the-back-office\n_build:\n  list: never\n  showOnHomepage: true\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Delivery XML Schema Template\nDESCRIPTION: Blank XML schema template for creating or updating delivery resources in PrestaShop. Contains all available fields including carrier ID, range price ID, range weight ID, zone ID, shop ID, shop group ID, and price.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/deliveries.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <delivery>\n    <id><![CDATA[]]></id>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <id_range_price><![CDATA[]]></id_range_price>\n    <id_range_weight><![CDATA[]]></id_range_weight>\n    <id_zone><![CDATA[]]></id_zone>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <price><![CDATA[]]></price>\n  </delivery>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Languages with PrestaShop Command - PHP\nDESCRIPTION: The BulkDeleteLanguagesCommand is designed to delete specified languages from the PrestaShop platform. It requires an array of language IDs to identify which languages to remove. The command is handled by the BulkDeleteLanguagesHandler class, which implements the necessary interface to perform the deletion operation. The command does not return any value and is a part of the language management domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/bulk-delete-languages-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\BulkDeleteLanguagesCommand\n```\n\n----------------------------------------\n\nTITLE: Exporting Product Table using mysqldump - PrestaShop Database - Bash\nDESCRIPTION: This bash command uses 'mysqldump' to export the 'ps_product' table from a MySQL database to a CSV file. Options include customizing output files to enclose fields with double quotes and use a semicolon as the field separator. Requires the user to provide correct host, port, username, password, destination directory, and database/table names. The command may omit CSV headers, so users may need to add them manually and ensure directory permissions are correct.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump --host=dbhost --port=3307 --user=root --password --tab=/var/lib/mysql-files --fields-enclosed-by=\\\" --fields-terminated-by=\\; dbname ps_product\n```\n\n----------------------------------------\n\nTITLE: Querying Webservice Key Data for Editing in PrestaShop Domain (PHP)\nDESCRIPTION: Defines a query object for retrieving the information required to edit a webservice key within PrestaShop's domain layer. The constructor requires an integer representing the webservice key ID as a parameter. This query is handled by the corresponding handler class and returns an instance of EditableWebserviceKey, encapsulating all necessary editable properties for the frontend or UI layer. The request depends on PrestaShop classes and interfaces specified in the Core and Adapter namespaces.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/webservice/_partials/get-webservice-key-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Webservice\\Query\\GetWebserviceKeyForEditing\n// Constructor parameters: int $webserviceKeyId\n// Handler class: PrestaShop\\PrestaShop\\Adapter\\Webservice\\QueryHandler\\GetWebserviceKeyForEditingHandler\n// Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Webservice\\QueryHandler\\GetWebserviceKeyForEditingHandlerInterface\n// Return type: PrestaShop\\PrestaShop\\Core\\Domain\\Webservice\\QueryResult\\EditableWebserviceKey\n```\n\n----------------------------------------\n\nTITLE: Listing Cart Page Hooks in Markdown Table\nDESCRIPTION: This snippet presents a table of hooks available on the cart page, including their names and links to their respective documentation. It provides a quick reference for developers working on cart page customizations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/hummingbird/hooks/cartpage.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Hook |  |\n| --- | --- |\n| `displayShoppingCart` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayShoppingCart\">}}) |\n| `displayCartExtraProductActions` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayCartExtraProductActions\">}}) |\n| `displayReassurance` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayReassurance\">}}) |\n| `displayShoppingCartFooter` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayShoppingCartFooter\">}}) |\n| `displayCrossSellingShoppingCart` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayCrossSellingShoppingCart\">}}) |\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockAvailableHandler Class in PHP\nDESCRIPTION: This snippet defines the handler class for the UpdateCombinationStockAvailableCommand. It implements the UpdateCombinationStockAvailableHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-available-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationStockAvailableHandler\n```\n\n----------------------------------------\n\nTITLE: Identifying the DeleteCartRuleHandlerInterface (PHP)\nDESCRIPTION: Specifies the fully qualified interface name that the `DeleteCartRuleHandler` implements. This interface defines the contract or expected methods for any handler that processes the `DeleteCartRuleCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/delete-cart-rule-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\CommandHandler\\DeleteCartRuleHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: YAML Service Deprecation\nDESCRIPTION: Example of deprecating a service in YAML configuration\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/coding-standards/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    awesome.path.myclass:\n        class: 'PrestaShop\\Awesome\\Path\\MyClass'\n        deprecated: 'The \"%service_id%\" service is deprecated since 8.0 and will be removed in next major.'\n        public: true\n```\n\n----------------------------------------\n\nTITLE: Executing actionAjaxDie<Controller><Method>Before Hook (From 8.1)\nDESCRIPTION: Implementation of the hook execution from PrestaShop 8.1 onwards. The value parameter is now passed by reference, allowing modules to modify it.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAjaxDie<Controller><Method>Before.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAjaxDie' . $controller . $method . 'Before', ['value' => &$value])\n```\n\n----------------------------------------\n\nTITLE: Removing Default Values from Columns with diff\nDESCRIPTION: Illustrates the removal of default values managed by the ORM, with no change impact unless NOT NULL constraints differ.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- `position` int(10) unsigned NOT NULL DEFAULT '0',\n+ `position` int(11) NOT NULL,\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Specific Price XML Schema Template\nDESCRIPTION: Blank XML schema template for creating or updating specific prices via the PrestaShop API. Contains all available fields including shop identifiers, product details, pricing information, and validity period settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/specific_prices.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <specific_price>\n    <id><![CDATA[]]></id>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_cart><![CDATA[]]></id_cart>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <id_currency><![CDATA[]]></id_currency>\n    <id_country><![CDATA[]]></id_country>\n    <id_group><![CDATA[]]></id_group>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_specific_price_rule><![CDATA[]]></id_specific_price_rule>\n    <price><![CDATA[]]></price>\n    <from_quantity><![CDATA[]]></from_quantity>\n    <reduction><![CDATA[]]></reduction>\n    <reduction_tax><![CDATA[]]></reduction_tax>\n    <reduction_type><![CDATA[]]></reduction_type>\n    <from><![CDATA[]]></from>\n    <to><![CDATA[]]></to>\n  </specific_price>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionFrontControllerSetVariables Hook (PHP)\nDESCRIPTION: This snippet defines the structure of the parameters passed to the `actionFrontControllerSetVariables` hook. It shows an array containing a single key `templateVars`, which is a reference to an array intended to hold variables for templates and JavaScript.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFrontControllerSetVariables.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n      <?php\n      array(\n        'templateVars' => &(array)\n      );\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Function Definitions Using the funcdef Shortcode in Markdown - Markdown\nDESCRIPTION: This snippet demonstrates how to use the custom 'funcdef' shortcode within a Markdown definition list to visually render function signatures and their corresponding descriptions in PrestaShop docs. There are no external dependencies other than the documentation engine’s support for the 'funcdef' shortcode. Parameters for each function are shown in prototype form. The snippet should be placed within Markdown files that support shortcode parsing, and trailing spaces after colons are required for correct output. Inputs: function names and descriptions. Output: formatted HTML definition list in the rendered docs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/funcdef.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\\n{{%/* funcdef */%}}\\n\\n__construct($id = NULL, $id_lang = NULL)\\n: \\n    Build object.\\n\\nadd($autodate = true, $nullValues = false)\\n: \\n    Save current object to database (add or update).\\n\\n{{%/* /funcdef */%}}\\n```\n```\n\n----------------------------------------\n\nTITLE: Hook Execution for dashboardZoneThree\nDESCRIPTION: Shows the implementation of the hook execution in the controller, demonstrating how the hook is called with parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/dashboardZoneThree.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('dashboardZoneThree', $params)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hooks in Modern PrestaShop Controller\nDESCRIPTION: This code demonstrates how to dispatch a hook using the controller helper method in a modern PrestaShop controller.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$this->dispatchHook('actionAdminPerformanceControllerPostProcessBefore', array('controller' => $this));\n```\n\n----------------------------------------\n\nTITLE: PHP Handler Class Path for CMS Page Bulk Disable Command\nDESCRIPTION: Fully qualified namespace path for the handler class that processes the bulk disable command along with its interface implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-disable-cms-page-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\BulkDisableCmsPageHandler\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for GetEmployeeEmailById Query in PHP\nDESCRIPTION: This snippet specifies the return type for the GetEmployeeEmailById query. The query returns an Email value object from the PrestaShop Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/get-employee-email-by-id.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\ValueObject\\Email\n```\n\n----------------------------------------\n\nTITLE: BulkDeleteCartRuleHandlerInterface Reference in PrestaShop Core\nDESCRIPTION: The interface that defines the contract for handling bulk deletion of cart rules. The handler class implements this interface to ensure proper command processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/bulk-delete-cart-rule-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\CommandHandler\\BulkDeleteCartRuleHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attribute Groups Return Type Path\nDESCRIPTION: Fully qualified namespace path for the return type of the query, which is an array of AttributeGroup objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-attribute-groups.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\AttributeGroup\\QueryResult\\AttributeGroup[]\n```\n\n----------------------------------------\n\nTITLE: Checking out specific PrestaShop version\nDESCRIPTION: Git command to switch to a specific PrestaShop version branch (e.g., 8.1.x).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/setting-up-your-local-environment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 8.1.x\n```\n\n----------------------------------------\n\nTITLE: Executing actionAdminLoginControllerLoginBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminLoginControllerLoginBefore hook is called in PrestaShop. It is executed before the login action in the admin login controller, passing the controller instance, password, and email as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerLoginBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminLoginControllerLoginBefore',\n            [\n                'controller' => $this,\n                'password' => $passwd,\n                'email' => $email,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Select Dropdown Configuration in HelperOptions for PrestaShop\nDESCRIPTION: Example of defining a select dropdown configuration field in HelperOptions. It shows how to set up a list of options with IDs and display names for the dropdown.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperoptions.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'MY_CONFIG_KEY' => [\n    'type' => 'select',\n    'title' => $this->module->l('My config title'),\n    'validation' => 'isInt',\n    'identifier' => 'id',\n    'list' => [\n        ['id' => 'myconfigvalue1', 'name' => $this->module->l('My value 1')],\n        ['id' => 'myconfigvalue2', 'name' => $this->module->l('My value 2')],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Specifying EditOrderAddressCommand Constructor Parameters in PHP\nDESCRIPTION: Lists the required parameters for constructing an `EditOrderAddressCommand` instance: the integer order ID (`$orderId`) and the string address type (`$addressType`). The snippet shows the parameters within an HTML list context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-order-address-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<ul> <li>`$int $orderId`</li>  <li>`$string $addressType`</li> </ul>\n```\n\n----------------------------------------\n\nTITLE: Executing the actionAuthenticationBefore Hook in PrestaShop\nDESCRIPTION: Code snippet showing how the actionAuthenticationBefore hook is executed in the core PrestaShop codebase. This hook is called before customer authentication occurs, allowing developers to perform custom actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAuthenticationBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAuthenticationBefore')\n```\n\n----------------------------------------\n\nTITLE: Aligning Version Pill with Title using minver Shortcode in Markdown\nDESCRIPTION: This snippet shows how to align a version pill next to a heading (specifically an `<h4>` in the example) using the `minver` Hugo shortcode in Markdown. The alignment is achieved by adding the `title=\"true\"` parameter to the shortcode call, alongside the required `v` parameter specifying the version. This is useful for associating a feature described under a heading with its release version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/minver.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n#### Example title\n{{</* minver v=\"1.7.4\" title=\"true\"*/>}}\n```\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Caching Configuration\nDESCRIPTION: MySQL configuration parameters for query and table caching. These settings improve database performance by keeping query results and table information in memory, reducing disk access and decreasing response time.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nquery_cache_limit = 128K \nquery_cache_size = 32M\nquery_cache_type = ON\ntable_open_cache = 4000\nthread_cache_size = 80\nhost_cache_size=1000\n```\n\n----------------------------------------\n\nTITLE: Specifying Empty State Template Path in Twig for PrestaShop Grid\nDESCRIPTION: This snippet shows the directory path where custom Empty state templates should be placed in the PrestaShop project structure. The template must be named after the Grid ID and have a .html.twig extension.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/create-empty-state.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nsrc/PrestaShopBundle/Resources/views/Admin/Common/Grid/Blocks/EmptyState\n```\n\n----------------------------------------\n\nTITLE: Deleting Stores in Bulk - PrestaShop PHP\nDESCRIPTION: This snippet demonstrates the `BulkDeleteStoreCommand` in PrestaShop which is used to delete multiple stores in a batch operation. This command requires a list of store IDs to be provided as its constructor parameter. The command is handled by the `BulkDeleteStoreHandler`, which implements the `BulkDeleteStoreHandlerInterface`. No return type is expected from this operation, as it primarily performs an action with side effects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/bulk-delete-store-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Store\\Command\\BulkDeleteStoreCommand\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Store\\CommandHandler\\BulkDeleteStoreHandler\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Store\\CommandHandler\\BulkDeleteStoreHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Enable Apache Modules for PHP-FPM\nDESCRIPTION: Command to enable required Apache modules for PHP-FPM configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/httpd.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\na2enmod alias proxy proxy_fcgi\n```\n\n----------------------------------------\n\nTITLE: Installing Xdebug in Docker for PrestaShop Testing\nDESCRIPTION: These commands show how to install and enable Xdebug in a Docker container for PrestaShop testing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-execute-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec prestashop_container pecl install xdebug #prestashop_container is the container's name\ndocker compose exec prestashop_container docker-php-ext-enable xdebug #prestashop_container is the container's name\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters Structure for displayBeforeCarrier Hook - PHP\nDESCRIPTION: Defines the parameter structure passed to the displayBeforeCarrier hook, including carrier details, delivery options, pricing, and address information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBeforeCarrier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n    'carriers' => array(\n        array(\n            'name' => (string) Name,\n            'img' => (string) Image URL,\n            'delay' => (string) Delay text,\n            'price' =>  (float) Total price with tax,\n            'price_tax_exc' => (float) Total price without tax,\n            'id_carrier' => (int) intified option delivery identifier,\n            'id_module' => (int) Module ID\n    )),\n    'checked' => (int) intified selected carriers,\n    'delivery_option_list' => array(array(\n        0 => array( // First address\n            '12,' => array( // First delivery option available for this address\n                 carrier_list => array(\n                     12 => array( // First carrier for this option\n                         'instance' => Carrier Object,\n                         'logo' => <url to the carrier's logo>,\n                         'price_with_tax' => 12.4, // Example\n                         'price_without_tax' => 12.4, // Example\n                         'package_list' => array(\n                             1, // Example\n                             3, // Example\n                          ),\n                     ),\n                 ),\n                 is_best_grade => true, // Does this option have the biggest grade (quick shipping) for this shipping address\n                 is_best_price => true, // Does this option have the lower price for this shipping address\n                 unique_carrier => true, // Does this option use a unique carrier\n                 total_price_with_tax => 12.5,\n                 total_price_without_tax => 12.5,\n                 position => 5, // Average of the carrier position\n             ),\n         ),\n     )),\n     'delivery_option' => array(\n         '<id_address>' => Delivery option,\n         ...\n     )\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying the AddOrderStateHandler Class in PrestaShop (PHP)\nDESCRIPTION: This snippet identifies the handler class responsible for processing the `AddOrderStateCommand`. The `AddOrderStateHandler` implements the `AddOrderStateHandlerInterface` and contains the logic to actually create the new order state using the data provided in the command object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-state/_partials/add-order-state-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\OrderState\\CommandHandler\\AddOrderStateHandler`\n```\n\n----------------------------------------\n\nTITLE: Modern Controller Example URL\nDESCRIPTION: Example URL showing how help content is fetched for the Products admin page in French for PrestaShop version 1.7.1.2.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/back-office-help-sidebar.md#2025-04-22_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://help.prestashop.com/fr/doc/AdminProducts?version=1.7.1.2\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminSortAfter Hook in PHP\nDESCRIPTION: This code snippet shows how the actionAdminSortAfter hook is dispatched in the ProductController. The hook is triggered after an admin sorting operation and passes parameters through the $hookEventParameters variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminSortAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminSortAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Identifying the DeleteSupplierLogoImageHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the `DeleteSupplierLogoImageHandler`. This class is responsible for processing the `DeleteSupplierLogoImageCommand` and contains the logic to actually delete the supplier's logo image file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-logo-image-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Supplier\\CommandHandler\\DeleteSupplierLogoImageHandler`\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Multiple Languages via PrestaShop Domain Command (PHP)\nDESCRIPTION: Defines the BulkToggleLanguagesStatusCommand class, which is instantiated with an array of language IDs and a boolean indicating the desired status (enabled or disabled) for those languages. This command is handled by BulkToggleLanguagesStatusHandler and implements the corresponding handler interface, ensuring a decoupled and testable workflow. Inputs include an array of integers representing language IDs and a boolean for the intended status; the command does not return a value (void). Prerequisites include the relevant PrestaShop core and adapter classes as dependencies for full execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/bulk-toggle-languages-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\BulkToggleLanguagesStatusCommand\n// Enables/disables languages status\n// Constructor parameters:\n//   array $languageIds\n//   bool $expectedStatus\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\Language\\CommandHandler\\BulkToggleLanguagesStatusHandler\n// Implements:\n//   PrestaShop\\PrestaShop\\Core\\Domain\\Language\\CommandHandler\\BulkToggleLanguagesStatusHandlerInterface\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: Defining CreateEmptyCustomerCartHandlerInterface in PHP\nDESCRIPTION: This code snippet shows the interface that the CreateEmptyCustomerCartHandler implements. It defines the contract for handling the creation of empty customer carts in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/create-empty-customer-cart-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\CommandHandler\\CreateEmptyCustomerCartHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining ReplyToCustomerThreadCommand Class in PHP\nDESCRIPTION: This snippet shows the namespace and class name for the ReplyToCustomerThreadCommand. It is used to encapsulate the data needed to reply to a customer thread, including the thread ID and reply message.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/reply-to-customer-thread-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Command\\ReplyToCustomerThreadCommand\n```\n\n----------------------------------------\n\nTITLE: Including Child Page Content with Hugo Shortcode\nDESCRIPTION: Utilizes the built-in Hugo `children` shortcode to automatically render links or content from sub-pages located under the current page's directory. This is commonly used in chapter pages to list their sections.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for an ObjectModel Entity\nDESCRIPTION: Shows how to define the properties of an entity that corresponds to database table fields. These properties will be mapped to database columns.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Cms extends ObjectModel\n{\n    public $id_cms;\n    public $id_cms_category;\n    public $position;\n    public $active;\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Category Command Structure Documentation\nDESCRIPTION: Documentation layout for various category management commands including add, edit, delete, bulk operations and category attribute modifications.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Category Commands\n\n#### AddCategoryCommand\n#### AddRootCategoryCommand\n#### BulkDeleteCategoriesCommand\n#### BulkDisableCategoriesCommand\n#### DeleteCategoryCoverImageCommand\n#### DeleteCategoryCommand\n#### DeleteCategoryMenuThumbnailImageCommand\n#### EditCategoryCommand\n#### EditRootCategoryCommand\n#### SetCategoryIsEnabledCommand\n#### UpdateCategoryPositionCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing displayHeaderCategory Hook in PrestaShop PHP\nDESCRIPTION: This code snippet shows how to call the displayHeaderCategory hook in a PrestaShop template. The hook is used to display additional content above the product list in category and search pages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayHeaderCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h=\"displayHeaderCategory\"}\n```\n\n----------------------------------------\n\nTITLE: Executing a PHP Configuration Script via YAML for PrestaShop Modules\nDESCRIPTION: YAML configuration snippet showing how to execute a custom PHP script (`ConfigurationScript.php`) using the `php` section. The script file must contain a class implementing `ModuleComplexConfigurationInterface`, and the path is relative to the configuration file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nphp:\n    - file: \"ConfigurationScript.php\"\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for GetCatalogPriceRuleForEditing Query in PHP\nDESCRIPTION: This code snippet defines the return type for the GetCatalogPriceRuleForEditing query, which is an EditableCatalogPriceRule object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/get-catalog-price-rule-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\QueryResult\\EditableCatalogPriceRule\n```\n\n----------------------------------------\n\nTITLE: Executing PrestaShop CLI Installer\nDESCRIPTION: Command to start the PrestaShop CLI installer script from the /install or /install-dev folder.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/install-from-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp index_cli.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for PrestaShop Tips Page\nDESCRIPTION: YAML front matter configuration for a Hugo documentation page that defines metadata and display settings for a tips and tricks chapter page. Sets the page title, menu title, weight, chapter status, and homepage visibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tips & tricks\nmenuTitle: Tips & tricks\nweight: 10\nchapter: true\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Removing Columns with diff\nDESCRIPTION: Explains the process of removing a column from a database table, showcasing a situation where no additional modifications are needed unless the column data is relocated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-  `scenes` tinyint(1) NOT NULL DEFAULT '1',\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for PrestaShop Group Resource\nDESCRIPTION: This XML snippet provides a blank schema for the Group resource in PrestaShop. It includes all the fields defined in the resource table, with empty CDATA sections for each field value. The 'name' field is multilingual, represented by multiple language nodes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/groups.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <group>\n    <id><![CDATA[]]></id>\n    <reduction><![CDATA[]]></reduction>\n    <price_display_method><![CDATA[]]></price_display_method>\n    <show_prices><![CDATA[]]></show_prices>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </group>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Currency Deletion Command Class Path\nDESCRIPTION: The namespace path for the DeleteCurrencyCommand class that handles currency deletion operations\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/delete-currency-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\DeleteCurrencyCommand\n```\n\n----------------------------------------\n\nTITLE: Executing Module Configuration via CLI using Bash\nDESCRIPTION: Demonstrates the basic `prestashop:module configure` command in Bash. It takes the module name and an optional configuration file path as arguments to apply settings defined in the YAML file. If the file path is omitted, it defaults to `self_config.yml` in the module's directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module configure <modulename> <configfilepath>\n```\n\n----------------------------------------\n\nTITLE: MySQL Export Permission Error Example - mysqldump Output - TXT\nDESCRIPTION: This error message sample, typically returned by mysqldump, indicates that file export is blocked due to the MySQL server running with the '--secure-file-priv' option. Users need to verify export permissions or change directories as needed. Occurs when attempting to run SELECT INTO OUTFILE on a restricted server.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nmysqldump: Got error: 1290: The MySQL server is running with the --secure-file-priv option so it cannot execute this statement when executing 'SELECT INTO OUTFILE'\n```\n\n----------------------------------------\n\nTITLE: Defining EditCatalogPriceRuleHandler Class in PHP\nDESCRIPTION: This code snippet defines the EditCatalogPriceRuleHandler class, which implements the EditCatalogPriceRuleHandlerInterface. This handler is responsible for processing the EditCatalogPriceRuleCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/edit-catalog-price-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CatalogPriceRule\\CommandHandler\\EditCatalogPriceRuleHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Country Query Handler Path\nDESCRIPTION: Fully qualified namespace path for the handler class that implements the query processing logic for country required fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/country/_partials/get-country-required-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Country\\QueryHandler\\GetCountryRequiredFieldsHandler\n```\n\n----------------------------------------\n\nTITLE: Calling displayProductListReviews Hook in Product Templates\nDESCRIPTION: This snippet shows how to call the displayProductListReviews hook in a Smarty template file. The hook is passed the product variable from the current context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductListReviews.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayProductListReviews' product=$product}\n```\n\n----------------------------------------\n\nTITLE: CMS Page Query References\nDESCRIPTION: Query references for retrieving CMS page information and category IDs for redirection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGetCmsCategoryIdForRedirection\nGetCmsPageForEditing\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with PHP Import\nDESCRIPTION: Example of importing PHP service configuration files in YAML and the corresponding PHP configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n    - { resource: services.php }\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// yourmodule/config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $configurator) {\n\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying RefreshExchangeRatesHandler in PHP\nDESCRIPTION: This code snippet specifies the handler class for the RefreshExchangeRatesCommand. The handler is responsible for implementing the actual logic to refresh exchange rates. It implements the RefreshExchangeRatesHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/refresh-exchange-rates-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\RefreshExchangeRatesHandler\n```\n\n----------------------------------------\n\nTITLE: Dumping Routes for JavaScript Router (Shell)\nDESCRIPTION: Provides the Symfony console command required to generate the necessary route information file (`fos_js_routes.json`) used by the JavaScript `Router` component. This command needs to be run whenever route configurations (especially the 'exposed' option) are modified.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/console fos:js-routing:dump --format=json\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries for PrestaShop 8.0.0 Update\nDESCRIPTION: SQL snippet for updating the database structure when upgrading to PrestaShop 8.0.0. It includes dropping tables and calling a PHP function for additional operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/database/structure.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION sql_mode='';\nSET NAMES 'utf8mb4';\n\nDROP TABLE IF EXISTS `PREFIX_referrer`;\nDROP TABLE IF EXISTS `PREFIX_referrer_cache`;\nDROP TABLE IF EXISTS `PREFIX_referrer_shop`;\n[...]\n/* PHP:ps_800_add_security_tab(); */;\n```\n\n----------------------------------------\n\nTITLE: Executing DisplayCustomerAccountForm Hook in PHP\nDESCRIPTION: This snippet shows how the displayCustomerAccountForm hook is called in the core PrestaShop code. It allows modules to add custom content to the customer account creation form.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCustomerAccountForm.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayCustomerAccountForm')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Email Layout for Modern Theme in Twig\nDESCRIPTION: This Twig template extends the modern theme's layout and adds a custom content block for emails. It includes a title and space footer within a table structure, demonstrating how to create a custom email layout for the modern theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/add-a-layout-from-module.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# modules/my_email_theme_module/mails/layouts/custom_modern_layout.html.twig #}\n{% extends '@MailThemes/modern/components/layout.html.twig' %}\n\n{% block content %}\n  <table width=\"100%\">\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"title\">{{ 'This is an example mail template from my module for modern theme'|trans({}, 'EmailsBody', locale)|raw }}</span>\n        </font>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"space_footer\">&nbsp;</td>\n    </tr>\n  </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Checking Update Requirements using PrestaShop CLI - Text\nDESCRIPTION: These snippets show how the `update:check-requirements` command is used to validate a PrestaShop store's technical readiness for an update, optionally utilizing provided config, zip, or xml files. Examples include usage output and real command execution responses for both passing and failing requirement checks. This process requires access to the PrestaShop admin directory and may need specific update files if performing checks for local updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:check-requirements help\n\nupdate:check-requirements: check if the store is compatible with the update requirements.\n\nUsage: update:check-requirements [ADMIN_DIR]\nwith [ADMIN_DIR] the PrestaShop admin directory\n--from-config-file=[config-path]: the update config file path\n--zip=[name]: sets the archive zip file for a local update\n--xml=[name]: sets the  archive xml file for a local update\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:check-requirements admin123\nChecking requirements...\n✓ The requirements check is complete, you can update your store to this version of PrestaShop.\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console update:check-requirements admin123\nChecking requirements...\nX PHP's \"Safe mode\" needs to be disabled.\nX Maintenance mode needs to be enabled. Enable maintenance mode and add your maintenance IP in Shop parameters > General > Maintenance.\n⚠ Your current version of the module is out of date. Update now Modules > Module Manager > Updates\n```\n\n----------------------------------------\n\nTITLE: Executing a Single Command in a Docker Container (Bash)\nDESCRIPTION: Shows how to use `docker exec -i` to run a single, non-interactive command directly inside a running container named `prestashop` without starting a full shell session. This example executes the `php bin/console list` command to list available Symfony console commands within the PrestaShop application.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i prestashop php bin/console list # will execute list command from Symfony's console \n```\n\n----------------------------------------\n\nTITLE: Partial Resource Update with PATCH\nDESCRIPTION: Example of using PATCH HTTP method to partially update a resource in the PrestaShop API. This example shows how to update only the company name for an address with id=1.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <address>\n        <id><![CDATA[1]]></id>\n        <company><![CDATA[Acme Limited]]></company>\n    </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Importing PrestaShop UIKit Dist Files\nDESCRIPTION: Imports the compiled distribution CSS files for PrestaShop UIKit. This method doesn't allow access to UIKit variables outside the framework.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/uikit.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import \"~prestakit/dist/css/bootstrap-prestashop-ui-kit\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Identifiers in PrestaShop Testing Framework with JavaScript\nDESCRIPTION: This snippet demonstrates how to create unique test identifiers by combining a base context with step-specific identifiers. The base context identifies the test file while the step identifier clarifies the specific action being tested, resulting in a fully qualified identifier for tracking test results across reports.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/ui-tests/how-to-create-your-own-ui-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// From test : UI/campaigns/functional/BO/04_customers/01_customers/07_helpCard.js\nconst baseContext = 'functional_BO_customers_customers_helpCard';\n// And inside each `it`, we make a call\n// For example, in the \"Go To Customer's Page\" step we will have :\ntestContext.addContextItem(this, 'testIdentifier', 'goToCustomersPage', baseContext);\n// In the report, the final identifier will look like this: 'functional_BO_customers_customers_filterAndQuickEditCustomers_goToCustomersPage'\n```\n\n----------------------------------------\n\nTITLE: Adding Catalog Price Rule Command in PrestaShop PHP\nDESCRIPTION: The AddCatalogPriceRuleCommand class is used to add a new catalog price rule with provided data. It takes various parameters including name, currency ID, country ID, group ID, quantity, reduction type and value, shop ID, tax inclusion, and price.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/add-catalog-price-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\Command\\AddCatalogPriceRuleCommand\n```\n\n----------------------------------------\n\nTITLE: Deleting Backups using PrestaShop CLI - Text\nDESCRIPTION: This snippet demonstrates the usage and options for the `backup:delete` command to delete backup files in PrestaShop via CLI. It details mandatory arguments such as the admin directory and backup name, available output flags, and shows example executions for deleting a specific backup or interacting with a selection menu. This command relies on the PrestaShop environment configured to use the PHP console.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:delete help\n\nbackup:delete: delete a store backup file\n\nUsage: backup:delete [ADMIN_DIR] [BACKUP_NAME]\nwith [ADMIN_DIR] [BACKUP_NAME] the PrestaShop admin directory and the name of the backup file you want to delete\n--verbose: sets the verbosity level (e.g. 1 the default, 2 and 3, or you can use respective shortcuts -v, -vv and -vvv)\n--quiet: disables output and interaction\n--no-interaction: disables interaction\n--version: displays the application version\n--help: displays the command help\n--ansi|--no-ansi: whether to force of disable coloring the output\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:delete admin123 autoupgrade_save_8.1.6_15/07/2024_8:00\nThe backup file has been successfully deleted\n```\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:delete admin123\nPlease select your backup:\n\t[0] Date: 12/19/24 10:48:43, Version: 8.1.5, File name: V8.1.5_20241219-104843-XXX\n\t[1] Date: 12/19/24 09:44:50, Version: 8.1.5, File name: V8.1.5_20241219-094450-XXX\n\t[2] Exit the process\n```\n\n----------------------------------------\n\nTITLE: Apache MPM Event Configuration for High Concurrency\nDESCRIPTION: Apache mpm_event configuration optimized for handling up to 400 concurrent users with PHP-FPM. These settings control server processes, threads, and connection handling to maximize throughput while maintaining stability.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   ServerLimit             16\n   MaxClients              400\n   StartServers            3\n   ThreadLimit             64\n   ThreadsPerChild         25\n   MaxRequestWorkers       400\n   MaxConnectionsPerChild  0\n```\n\n----------------------------------------\n\nTITLE: Setting Module Internal Name in PHP\nDESCRIPTION: Sets the internal identifier (technical name) for the module. Must match the module's folder and main class file name.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/module-class/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->name = \"mymodule\";\n```\n\n----------------------------------------\n\nTITLE: Executing actionPresentCart Hook in PHP\nDESCRIPTION: This code shows how the actionPresentCart hook is called in the CartPresenter.php file. It passes the presented cart as a reference parameter, allowing hook subscribers to modify the cart data before it's displayed to the user.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentCart.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentCart',\n            ['presentedCart' => &$result]\n        )\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for PrestaShop Benchmark\nDESCRIPTION: Commands to copy generated fixtures and build a Docker image for the PrestaShop benchmark environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp -R prestashop-shop-creator/generated_data/* prestashop-performance/fixtures/\ncd prestashop-performance\ndocker build -t prestashop-bench .\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Key Existence in PrestaShop\nDESCRIPTION: Illustrates how to test if a given key exists in the Cookie component in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$cookie = $this->context->cookie;\n$cookieExists = isset($cookie->mycookie);\n```\n\n----------------------------------------\n\nTITLE: XML Schema Example for Customer Resource in Synopsis Mode\nDESCRIPTION: Example of an XML schema in synopsis mode for the customer resource, showing data type expectations and validation rules. The schema includes field attributes like required status, maximum size, and specific format validation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <customer>\n        <id_default_group></id_default_group>\n        <id_lang format=\"isUnsignedId\"></id_lang>\n        <newsletter_date_add></newsletter_date_add>\n        <ip_registration_newsletter></ip_registration_newsletter>\n        <last_passwd_gen readOnly=\"true\"></last_passwd_gen>\n        <secure_key format=\"isMd5\" readOnly=\"true\"></secure_key>\n        <deleted format=\"isBool\"></deleted>\n        <passwd required=\"true\" maxSize=\"255\" format=\"isPasswd\"></passwd>\n        <lastname required=\"true\" maxSize=\"255\" format=\"isCustomerName\"></lastname>\n        <firstname required=\"true\" maxSize=\"255\" format=\"isCustomerName\"></firstname>\n        <email required=\"true\" maxSize=\"255\" format=\"isEmail\"></email>\n        ...\n    </customer>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Referencing the DeleteSupplierLogoImageHandlerInterface (PHP)\nDESCRIPTION: Specifies the fully qualified interface name `DeleteSupplierLogoImageHandlerInterface`. This interface defines the contract that the `DeleteSupplierLogoImageHandler` must implement, ensuring it provides the necessary method(s) to handle the supplier logo deletion command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-logo-image-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\CommandHandler\\DeleteSupplierLogoImageHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Running Siege Benchmark for PrestaShop Front-Office\nDESCRIPTION: This command runs a Siege benchmark on a PrestaShop shop. It uses the URL list from a file, sets concurrent users to 1, runs for 20 seconds, and disables HTML parsing for faster execution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/front-office.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsiege -b -i -c 1 -t 20S --no-parser -f url.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Child Theme Directory Structure in Bash\nDESCRIPTION: Shows the minimal file structure required to create a child theme in PrestaShop, consisting of a configuration directory with theme.yml file and a preview image.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/parent-child-feature.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  .\n  ├── config\n  │   └── theme.yml\n  └── preview.png\n```\n\n----------------------------------------\n\nTITLE: Identifying the AddOrderStateHandler Interface in PrestaShop (PHP)\nDESCRIPTION: This snippet identifies the interface that the `AddOrderStateHandler` implements. This interface defines the contract for handling the `AddOrderStateCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-state/_partials/add-order-state-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderState\\CommandHandler\\AddOrderStateHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Dispatching Security Controller Pre-Process Hook in PHP\nDESCRIPTION: Hook dispatch call that occurs before form processing in the Admin Security Controller. Provides the controller instance as a parameter to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminSecurityControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminSecurityControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Query Class Definition\nDESCRIPTION: A query class that handles retrieving CMS category IDs for page redirections. It requires a CMS page ID as input and returns a CmsPageCategoryId value object. The class is handled by GetCmsCategoryIdForRedirectionHandler which implements GetCmsCategoryIdHandlerForRedirectionInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-category-id-for-redirection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Query\\GetCmsCategoryIdForRedirection\n```\n\n----------------------------------------\n\nTITLE: Declaring an Admin Module Controller with Symfony DI (PrestaShop - PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to declare a new Admin controller class in a PrestaShop module using Symfony Dependency Injection. The class extends FrameworkBundleAdminController, utilizes a cache service injected via the constructor, and renders a Twig template. Prerequisites include PrestaShop's Symfony integration, Doctrine, and the appropriate service mapping. The constructor expects a CacheProvider instance, and demoAction returns a rendered HTML view.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// modules/your-module/src/Controller/DemoController.php\\n\\nnamespace MyModule\\Controller;\\n\\nuse Doctrine\\Common\\Cache\\CacheProvider;\\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\\n\\nclass DemoController extends FrameworkBundleAdminController\\n{\\n    private $cache;\\n       \\n    // you can use symfony DI to inject services\\n    public function __construct(CacheProvider $cache)\\n    {\\n        $this->cache = $cache;\\n    }\\n    \\n    public function demoAction()\\n    {\\n        return $this->render('@Modules/your-module/templates/admin/demo.html.twig');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attribute Groups Query Class Path\nDESCRIPTION: Fully qualified namespace path for the GetProductAttributeGroups query class that retrieves product attributes grouped by their attribute groups.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-attribute-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\Query\\GetProductAttributeGroups\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Addresses with PrestaShop Command Object (PHP)\nDESCRIPTION: This PHP command handles the deletion of multiple addresses in a single operation for the PrestaShop Address domain. Dependencies include the PrestaShop domain command bus and identifier value objects. It expects an array of address IDs to be deleted and returns success/failure information. Limitations may include validation of address existence and permissions prior to operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// BulkDeleteAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for bulk deletion of addresses\n */\nclass BulkDeleteAddressCommand\n{\n    private $addressIds;\n\n    public function __construct(array $addressIds)\n    {\n        $this->addressIds = $addressIds;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hook Execution Example in PHP\nDESCRIPTION: Demonstrates how the actionPresentPaymentOptions hook is executed in PrestaShop, passing the payment options array by reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentPaymentOptions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentPaymentOptions',\n            ['paymentOptions' => &$paymentOptions]\n        )\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Supply Order State XML Schema\nDESCRIPTION: Blank XML schema template for supply order state data. Includes fields for delivery note, editable status, receipt state, pending receipt, enclosed status, color, and multilingual name fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/supply_order_states.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <supply_order_state>\n    <id><![CDATA[]]></id>\n    <delivery_note><![CDATA[]]></delivery_note>\n    <editable><![CDATA[]]></editable>\n    <receipt_state><![CDATA[]]></receipt_state>\n    <pending_receipt><![CDATA[]]></pending_receipt>\n    <enclosed><![CDATA[]]></enclosed>\n    <color><![CDATA[]]></color>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </supply_order_state>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Deprecated PrestaShop Core Methods\nDESCRIPTION: List of deprecated methods from PrestaShop's core classes and controllers, including deprecation versions where specified. These methods should no longer be used in new code as they have been marked for removal or have already been removed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Controller Methods\nAdminController::renderModulesList() // deprecated in 1.7.4\nAdminController::setDeprecatedMedia() // deprecated in 1.6.0\n\n// Cart Methods\nCart::addExtraCarriers() // deprecated in 1.7.6\nCart::getTaxesAverageUsed() // deprecated in 1.7.6\n\n// Category Methods\nCategory::_subTree() // deprecated in 1.7.0\nCategory::getShopID() // deprecated in 1.7.0\n\n// Core Utility Methods\nTools::array_replace() // deprecated in 1.7.4\nTools::getCldr() // deprecated in 1.7.6\nTools::jsonEncode() // deprecated in 1.7.0\n\n// Module Related Methods\nPrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager::disable_mobile() // deprecated in 1.7.3\nPrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager::enable_mobile() // deprecated in 1.7.3\n```\n\n----------------------------------------\n\nTITLE: Listing Child Pages using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode (`{{% children /%}}`) dynamically generates a list of links to the child pages located under the current 'Extension concepts' page within the site structure. It's used to automatically build navigation for the section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Running mysqldiff for Database Comparison\nDESCRIPTION: Use mysqldiff to compare the structure of two databases and output the differences. Requires user credentials and database host details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmysqldiff --server1=user:pass@host:port:socket --server2=user:pass@host:port:socket db3:db4\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for Shop Group Resource in PrestaShop\nDESCRIPTION: XML template showing the structure for shop_group resource in PrestaShop. This schema includes all available fields such as id, name, color, sharing options, and status flags that can be used in API requests and responses.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/shop_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <shop_group>\n    <id><![CDATA[]]></id>\n    <name><![CDATA[]]></name>\n    <color><![CDATA[]]></color>\n    <share_customer><![CDATA[]]></share_customer>\n    <share_order><![CDATA[]]></share_order>\n    <share_stock><![CDATA[]]></share_stock>\n    <active><![CDATA[]]></active>\n    <deleted><![CDATA[]]></deleted>\n  </shop_group>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Currency Deletion Handler Interface Path\nDESCRIPTION: The namespace path for the DeleteCurrencyHandlerInterface that defines the contract for currency deletion\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/delete-currency-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\DeleteCurrencyHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Order Invoice XML Structure for PrestaShop API\nDESCRIPTION: This XML schema represents the structure for an order invoice in PrestaShop's API. It includes fields for order details, totals, delivery information, and other invoice-related data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_invoices.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_invoice>\n    <id><![CDATA[]]></id>\n    <id_order><![CDATA[]]></id_order>\n    <number><![CDATA[]]></number>\n    <delivery_number><![CDATA[]]></delivery_number>\n    <delivery_date><![CDATA[]]></delivery_date>\n    <total_discount_tax_excl><![CDATA[]]></total_discount_tax_excl>\n    <total_discount_tax_incl><![CDATA[]]></total_discount_tax_incl>\n    <total_paid_tax_excl><![CDATA[]]></total_paid_tax_excl>\n    <total_paid_tax_incl><![CDATA[]]></total_paid_tax_incl>\n    <total_products><![CDATA[]]></total_products>\n    <total_products_wt><![CDATA[]]></total_products_wt>\n    <total_shipping_tax_excl><![CDATA[]]></total_shipping_tax_excl>\n    <total_shipping_tax_incl><![CDATA[]]></total_shipping_tax_incl>\n    <shipping_tax_computation_method><![CDATA[]]></shipping_tax_computation_method>\n    <total_wrapping_tax_excl><![CDATA[]]></total_wrapping_tax_excl>\n    <total_wrapping_tax_incl><![CDATA[]]></total_wrapping_tax_incl>\n    <shop_address><![CDATA[]]></shop_address>\n    <note><![CDATA[]]></note>\n    <date_add><![CDATA[]]></date_add>\n  </order_invoice>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Currency Query Handler Interface Path - PHP\nDESCRIPTION: Fully qualified namespace path for the GetCurrencyForEditingHandlerInterface that defines the contract for currency query handling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-currency-for-editing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\QueryHandler\\GetCurrencyForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Calling displaySearch Hook in PrestaShop Template\nDESCRIPTION: This snippet demonstrates how to call the displaySearch hook within a PrestaShop template file. It's typically used in the not-found.tpl file of the Classic theme to display search functionality when a page is not found.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displaySearch.md#2025-04-22_snippet_0\n\nLANGUAGE: smarty\nCODE:\n```\n{hook h='displaySearch'}\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Values in YAML for PrestaShop Modules\nDESCRIPTION: YAML snippet illustrating how to update (or create) a specific configuration key (`PAYPAL_SANDBOX`) with a new value (`1`) in the PrestaShop `Configuration` table using the `configuration.update` section within the module's self-configuration file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n    update:\n        PAYPAL_SANDBOX: 1\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerMessage Domain Structure\nDESCRIPTION: Markdown structure defining the CustomerMessage domain documentation, including sections for commands and queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-message/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: CustomerMessage domain\n---\n\n## CustomerMessage domain\n\n### CustomerMessage Commands\n\n#### AddOrderCustomerMessageCommand {id=\"AddOrderCustomerMessageCommand\"}\n\n{{%  include-md \"content/8/development/architecture/domain/references/customer-message/_partials/add-order-customer-message-command.md\" %}}\n\n### CustomerMessage Queries\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for DeleteCarrierCommand Handler in PrestaShop PHP\nDESCRIPTION: Indicates the return type of the handler method that processes the `DeleteCarrierCommand`. The operation does not return any value upon successful completion, hence the `void` return type.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/carrier/_partials/delete-carrier-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nvoid\n```\n\n----------------------------------------\n\nTITLE: Disabling Prepend-Autoloader in Composer Config - YAML\nDESCRIPTION: This snippet represents the Composer 'config' section (typically within composer.json), shown here in YAML for readability, that disables prepending the module's autoloader before PrestaShop core. It prevents overriding PrestaShop dependencies, preserving core stability. This should be used in the composer.json's 'config' object, especially for PrestaShop modules, and is critical for module compatibility. Input is a plain YAML (or as fragment for translation to JSON); in context, only the 'prepend-autoloader: false' part is required as a safeguard.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/composer.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    \"config\": {\n        \"prepend-autoloader\": false\n    }\n```\n\n----------------------------------------\n\nTITLE: Default Empty State Template Path in Twig for PrestaShop Grid\nDESCRIPTION: This snippet indicates the location of the default Empty state template used when a grid does not have a custom template defined. It is named _default.html.twig and resides in the EmptyState directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/create-empty-state.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nsrc/PrestaShopBundle/Resources/views/Admin/Common/Grid/Blocks/EmptyState/_default.html.twig\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Parameters Structure in Twig\nDESCRIPTION: Parameter structure definition for the displayEmptyModuleCategoryExtraMessage hook, showing the category_name parameter of type string.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayEmptyModuleCategoryExtraMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n    {\n        'category_name': (string) categoryName\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Specific UI Tests in PrestaShop using Bash\nDESCRIPTION: This snippet demonstrates how to execute specific UI tests in PrestaShop using the 'test:specific' command. It shows examples of running a single test and multiple tests within a folder, using the TEST_PATH parameter to specify the test location.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/ui-tests/how-to-execute-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To run the **Filter Products** test from sanity campaign\nTEST_PATH=\"sanity/02_productsBO/01_filterProducts\" URL_FO=\"https://domain.tld/\" npm run test:specific\n# To run all **Products BO** tests \nTEST_PATH=\"sanity/02_productsBO/*\" URL_FO=\"https://domain.tld/\" npm run test:specific\n```\n\n----------------------------------------\n\nTITLE: Detecting Database Changes with diff\nDESCRIPTION: Analyzes differences in database structure using diff, highlighting changes such as new columns, type/size alterations, and key updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- `prestashop16`.`ps_cart`\n+++ `prestashop`.`ps_cart`\n@@ -18,6 +18,7 @@\n  `allow_seperated_package` tinyint(1) unsigned NOT NULL DEFAULT '0',\n  `date_add` datetime NOT NULL,\n  `date_upd` datetime NOT NULL,\n+  `checkout_session_data` mediumtext,\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Identity - Bash\nDESCRIPTION: This Bash snippet demonstrates how to globally set your Git user name and email address. These configurations ensure that your commits are attributed correctly, which is required for PrestaShop contributors. Replace \\\"Your Name\\\" and \\\"yourname@yourcompany.com\\\" with your actual identity. No additional dependencies are necessary, but Git must be installed and accessible in your shell environment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-guidelines/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email yourname@yourcompany.com\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Coding Standards Using Composer\nDESCRIPTION: Commands to install PrestaShop-specific PHP coding standards using Composer. The snippet outlines steps for setting up PrestaShop coding standards in a project to automatically check and fix coding style issues. It requires Composer and prestashop/php-dev-tools.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/basic-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"# Install dependencies\\ncomposer require --dev prestashop/php-dev-tools\\ncomposer require --dev friendsofphp/php-cs-fixer\\n\\n# Set up configuration files\\nphp vendor/bin/prestashop-coding-standards cs-fixer:init\"\n```\n\n----------------------------------------\n\nTITLE: Identifying the DeleteCarrierCommand Class in PrestaShop PHP\nDESCRIPTION: Specifies the fully qualified namespace and class name for the command responsible for initiating the deletion of a carrier in PrestaShop. This class encapsulates the data needed for the deletion operation, specifically the carrier ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/carrier/_partials/delete-carrier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Carrier\\Command\\DeleteCarrierCommand\n```\n\n----------------------------------------\n\nTITLE: Enabling Theme with EnableThemeCommand - PrestaShop - PHP\nDESCRIPTION: This PHP class serves as a Domain Command for enabling a specified Front Office theme within the shop context in PrestaShop. The constructor requires a ThemeName value object parameter representing the theme's identifier. Command handling is delegated to EnableThemeHandler, which implements EnableThemeHandlerInterface, and the command is executed with no return value (void). This pattern requires PrestaShop Core Domain libraries and proper handler binding in the application's dependency injection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/theme/_partials/enable-theme-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Theme\\\\Command\\\\EnableThemeCommand\n// _Class EnableThemeCommand enables given Front Office theme for context's shop._\n\n// Command details\n// Constructor parameters:\n//   PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Theme\\\\ValueObject\\\\ThemeName $themeName\n// Handler class:\n//   PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Theme\\\\CommandHandler\\\\EnableThemeHandler\n//    Implements:\n//      PrestaShop\\\\PrestaShop\\\\Core\\\\Domain\\\\Theme\\\\CommandHandler\\\\EnableThemeHandlerInterface\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: Adding a New Language Entry in all_languages.json\nDESCRIPTION: Example of how to add a new language entry to the app/Resources/all_languages.json configuration file. This JSON structure includes the language name, ISO code, date formats, RTL setting, language code, and locale information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/localization-packs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"da\": {\n    \"name\": \"Dansk (Danish)\",\n    \"iso_code\": \"da\",\n    \"date_format_lite\": \"Y-m-d\",\n    \"date_format_full\": \"Y-m-d H:i:s\",\n    \"is_rtl\": \"0\",\n    \"language_code\": \"da-dk\",\n    \"locale\": \"da-DK\"\n  }\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Warehouse Product Location XML Schema\nDESCRIPTION: Blank XML schema template for warehouse product location data structure. Includes fields for product ID, product attribute ID, warehouse ID, and location reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/warehouse_product_locations.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <warehouse_product_location>\n    <id><![CDATA[]]></id>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <id_warehouse><![CDATA[]]></id_warehouse>\n    <location><![CDATA[]]></location>\n  </warehouse_product_location>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Including Notifications in Smarty Template\nDESCRIPTION: This snippet demonstrates how to include the notifications partial template in another Smarty template file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/templates/notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: smarty\nCODE:\n```\n{block name='notifications'}\n  {include file='_partials/notifications.tpl'}\n{/block}\n```\n\n----------------------------------------\n\nTITLE: Specifying GetOrderReturnStateForEditing Query Handler Class (PHP)\nDESCRIPTION: Identifies the `GetOrderReturnStateForEditingHandler` class located in the PrestaShop Adapter layer. This class is responsible for processing the `GetOrderReturnStateForEditing` query and retrieving the necessary order return state data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-return-state/_partials/get-order-return-state-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\OrderReturnState\\QueryHandler\\GetOrderReturnStateForEditingHandler`\n```\n\n----------------------------------------\n\nTITLE: Copying Shop Creator Configuration\nDESCRIPTION: Command to copy the shop creator configuration file to the appropriate directory for generating fixtures.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp shop-creator-config.yml prestashop-shop-creator/app/config/\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Widget in Twig Form Theme\nDESCRIPTION: Twig block definition for rendering date widgets in forms. Supports both single text and compound date input formats, with flexible date pattern replacement.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/form-theme/form-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{%- block date_widget -%}\n  {%- if widget == 'single_text' -%}\n    {{ block('form_widget_simple') }}\n  {%- else -%}\n    <div {{ block('widget_container_attributes') }}>\n      {{- date_pattern|replace({\n        '{{ year }}':  form_widget(form.year),\n        '{{ month }}': form_widget(form.month),\n        '{{ day }}':   form_widget(form.day),\n      })|raw -}}\n    </div>\n  {%- endif -%}\n{%- endblock date_widget -%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default IntegerMinMaxFilterType Options\nDESCRIPTION: Default configuration options for the min and max integer input fields, showing the structure of field options including placeholders and constraints.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/integer-min-max-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmin_field_options = array (\n  'attr' => array (\n    'placeholder' => $this->trans('Min', [], 'Admin.Global'),\n    'min' => 0,\n    'step' => 1,\n  ),\n)\n\nmax_field_options = array (\n  'attr' => array (\n    'placeholder' => $this->trans('Max', [], 'Admin.Global'),\n    'min' => 0,\n    'step' => 1,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying UpdateProductStockHandlerInterface in PHP\nDESCRIPTION: Specifies the fully qualified name for the `UpdateProductStockHandlerInterface`. This interface defines the contract that stock update command handlers, like `UpdateProductStockAvailableHandler`, must implement, ensuring consistent handling of stock update commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-stock-available-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Stock\\CommandHandler\\UpdateProductStockHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Adding Country Filter with ConfigurableCountryChoiceType in PrestaShop Grid\nDESCRIPTION: Example of implementing a country filter in a grid definition using ConfigurableCountryChoiceType. The filter is configured with options for required status, states containment, and translation domain settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/configurable-country-choice-type.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add(\n    (new Filter('id_country', ConfigurableCountryChoiceType::class))\n        ->setTypeOptions([\n            'required' => false,\n            'contains_states' => true,\n            'choice_translation_domain' => false,\n        ])\n        ->setAssociatedColumn('country_name')\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateInvoiceNoteCommand Class Path (PHP)\nDESCRIPTION: This snippet shows the fully qualified class name for the command used to add a note to a specific order invoice within the PrestaShop Core domain. Instantiating this command requires an integer `orderInvoiceId` and a string `note`. It is processed by the `UpdateInvoiceNoteHandler` and does not return a value (`void`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-invoice-note-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Invoice\\Command\\UpdateInvoiceNoteCommand`\n```\n\n----------------------------------------\n\nTITLE: Creating a Tip Block using Hugo Shortcode\nDESCRIPTION: Shows how to create a 'tip' notice block with the `notice` Hugo shortcode. Like other examples, comments (`/* */`) are used within the shortcode for display purposes in the documentation; remove them for actual implementation (`{{% notice tip %}} ... {{% /notice %}}`). Content placed between the tags appears in the styled tip block.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/notice.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{%/* notice tip */%}}\nEverything will be fine, trust me.\n{{%/* /notice */%}}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookie Data in PrestaShop\nDESCRIPTION: Demonstrates how to delete a key from the Cookie component in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/cookie.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$cookie = $this->context->cookie;\nunset($cookie->mycookie);\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Routes in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define routes for customer-related actions in PrestaShop. It includes routes for index, edit, and transforming a guest to a customer, following the naming conventions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/naming-conventions/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/_customer.yml\n\n_catalog:\n  resource: \"customers.yml\"\n  # route urls defined in \"customers.yml\" file will be prefixed with \"/customers\"\n  prefix: /customers/\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/customers.yml\n\nadmin_customers_index:\n  path: /\n  methods: [GET]\n  defaults:\n    _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:index\n\nadmin_customers_edit:\n  path: /{customerId}/edit\n  methods: [GET, POST]\n  defaults:\n    _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:edit\n  requirements:\n    customerId: \\d+\n\nadmin_customers_transform_guest_to_customer:\n  path: /{customerId}/transform-guest-to-customer\n  methods: [POST]\n  defaults:\n    _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:transformGuestToCustomer\n  requirements:\n    customerId: \\d+\n```\n\n----------------------------------------\n\nTITLE: Executing actionAjaxDie<Controller><Method>Before Hook (Pre-8.1)\nDESCRIPTION: Implementation of the hook execution before PrestaShop 8.1. The hook is called with the value parameter passed by value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAjaxDie<Controller><Method>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAjaxDie' . $controller . $method . 'Before', ['value' => $value])\n```\n\n----------------------------------------\n\nTITLE: Apache CGI Authentication Configuration\nDESCRIPTION: Apache configuration directives to enable API authentication. These settings allow the webserver to pass the HTTP_AUTHORIZATION header to PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-access.md#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nCGIPassAuth On\n```\n\nLANGUAGE: apache\nCODE:\n```\nSetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n```\n\n----------------------------------------\n\nTITLE: DeleteCmsPageCategoryHandler Class Path\nDESCRIPTION: Handler class path that implements the command execution for deleting CMS page categories.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/delete-cms-page-category-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\PageCategory\\CommandHandler\\DeleteCmsPageCategoryHandler\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleEmployeeStatusCommand Class in PHP\nDESCRIPTION: This snippet shows the namespace and class name for the ToggleEmployeeStatusCommand. It is used to toggle the status of an employee in the PrestaShop system. The command takes an employee ID as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/toggle-employee-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Command\\ToggleEmployeeStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Using the hookDescriptor Shortcode in PrestaShop Documentation\nDESCRIPTION: This code snippet demonstrates how to use the hookDescriptor shortcode in a documentation page to generate an HTML presentation of hook metadata. The shortcode reads from the YAML metadata in the page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% hookDescriptor %}}\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Custom PDF Module\nDESCRIPTION: The snippet outlines the file structure of a custom PDF generator module, which includes various `.tpl` template files and a main PHP script. These templates are used to override the default PDF generation process in a PrestaShop module.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmycustompdfgenerator\n├── pdf\n    ├── delivery-slip.addresses-tab.tpl\n    ├── delivery-slip.product-tab.tpl\n    ├── delivery-slip.style-tab.tpl\n    ├── delivery-slip.tpl\n    ├── footer.tpl\n    ├── header.tpl\n├── mycustompdfgenerator.php\n├── logo.png\n\n```\n\n----------------------------------------\n\nTITLE: Associating Content with PrestaShop Shop\nDESCRIPTION: Script for associating existing content with a newly created shop. It iterates through specified resources and updates their shop association while maintaining the original content.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-multishop.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once('./vendor/autoload.php');\n\n$webServiceUrl = 'http://example.com/';\n$webServiceKey = 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT';\n$webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false);\n\n$shopName = 'Additional shop';\n\n$searchedShop = $webService->get(['resource' => 'shops', 'filter[name]' => $shopName]);\n$shopId = null;\nif ($searchedShop->shops->shop->count() > 0) {\n    $shopId = (int) $searchedShop->shops->shop[0]->attributes()['id'];\n} else {\n    echo 'No shop found: ' . $shopName . PHP_EOL;\n    exit(1);\n}\n\n$copiedResources = [\n    'content_management_system',\n    'contacts',\n];\n\nforeach ($copiedResources as $resourceName) {\n    echo 'Start cloning ' . $resourceName . PHP_EOL;\n    // List all resources\n    $listXml = $webService->get(['resource' => $resourceName]);\n    $resourceNodes = $listXml->$resourceName->children();\n    foreach ($resourceNodes as $listNode) {\n        // Get single resource\n        $resourceId = (int) $listNode->attributes()['id'];\n        $resourceXml = $webService->get(['resource' => $resourceName, 'id' => $resourceId]);\n\n        try {\n            // Update resource with same content but shop ID defined\n            $updatedResource = $webService->edit(['resource' => $resourceName, 'id' => $resourceId, 'putXml' => $resourceXml->asXML(), 'id_shop' => $shopId]);\n            echo sprintf('Successfully copied resource %s[%s] to shop %s', $resourceName, $resourceId, $shopId) . PHP_EOL;\n        } catch (PrestaShopWebserviceException $e) {\n            echo sprintf('Error cloning %s[%s] to shop %s: ', $resourceName, $resourceId, $shopId) . $e->getMessage() . PHP_EOL;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attachments Command Class Path\nDESCRIPTION: Full namespace path for the command class that handles product attachment associations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-attachments-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Attachment\\Command\\SetAssociatedProductAttachmentsCommand\n```\n\n----------------------------------------\n\nTITLE: Declaring Theme Dependencies in YAML\nDESCRIPTION: This snippet shows how to declare module dependencies for a theme, ensuring that these modules are included when creating the theme zipball.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n  dependencies:\n    modules:\n      - xx_customslider\n      - xx_customproductpage\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Feature XML Schema Definition\nDESCRIPTION: XML schema template for product features in PrestaShop. Includes fields for ID, position, and multilingual name properties. Supports multiple language entries with language-specific IDs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_features.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product_feature>\n    <id><![CDATA[]]></id>\n    <position><![CDATA[]]></position>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n  </product_feature>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining BulkDeleteCurrenciesHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the BulkDeleteCurrenciesHandler implements. It defines the contract for handling bulk deletion of currencies in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/bulk-delete-currencies-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\BulkDeleteCurrenciesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Retrieving CMS Page Category Data Query Class - PHP\nDESCRIPTION: Query class for retrieving CMS page category form data. Takes a CMS page category ID as constructor parameter and returns an EditableCmsPageCategory object. Handled by GetCmsPageCategoryForEditingHandler which implements GetCmsPageCategoryForEditingHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-category-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Query\\GetCmsPageCategoryForEditing\n```\n\n----------------------------------------\n\nTITLE: Calling displayLeftColumnProduct Hook in PrestaShop Themes\nDESCRIPTION: This snippet shows how to call the displayLeftColumnProduct hook in PrestaShop theme templates. It passes the product and category objects as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayLeftColumnProduct.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayLeftColumnProduct' product=$product category=$category}\n```\n\n----------------------------------------\n\nTITLE: DescriptionType Fields Structure\nDESCRIPTION: Table defining the fields and their types for product description management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Field type                       | Description            |\n|:-------|:---------------------------------|:-----------------------|\n| `description` | `TranslateType` | Product description (localized) |\n| `description_short` | `TranslateType` | Product short description (localized) |\n```\n\n----------------------------------------\n\nTITLE: Reference to ClearOutdatedEmployeeSessionCommand Class in PrestaShop\nDESCRIPTION: Fully qualified class name for the command used to clear employee sessions in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/clear-outdated-employee-session-command.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Security\\Command\\ClearOutdatedEmployeeSessionCommand`\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Return Type\nDESCRIPTION: Return type class that contains the editable CMS page data structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-page-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\QueryResult\\EditableCmsPage\n```\n\n----------------------------------------\n\nTITLE: URL Structure for Legacy Controllers\nDESCRIPTION: URL pattern used by legacy controllers to fetch help content via the API endpoint. Contains an encoded query string with help request parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/back-office-help-sidebar.md#2025-04-22_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhelp.prestashop.com/api/?request=<url-encoded query string>\n```\n\n----------------------------------------\n\nTITLE: Basic Template Include in Smarty\nDESCRIPTION: Standard way to include a template file in Smarty, which requires overriding all included files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: smarty\nCODE:\n```\n{include file='./included-template.tpl'}\n```\n\n----------------------------------------\n\nTITLE: Executing Order Presentation Hook in PrestaShop PHP\nDESCRIPTION: Hook execution code that allows modification of order data before presentation. The hook passes a reference to orderLazyArray which contains the presented order data that can be modified by hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentOrder',\n            ['presentedOrder' => &$orderLazyArray]\n        )\n```\n\n----------------------------------------\n\nTITLE: Triggering Delegated Events in PrestaShop JavaScript\nDESCRIPTION: Demonstrates how to programmatically trigger delegated events after DOM modifications, particularly useful after AJAX calls.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/javascript-events/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst body = $('body'); // Our events are usually attached to the body\n\nconst event = jQuery.Event('click');\nevent.target = body.find('.js-theClassYouNeed');\n\nbody.trigger(event);\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect in YAML Frontmatter\nDESCRIPTION: YAML frontmatter that configures a page redirect to the PrestaShop issue sorting documentation. The frontmatter includes the layout type, redirect URL, and build configuration to exclude the page from listings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-process/how-issues-are-sorted.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/get-involved/report-issues/how-issues-are-sorted/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Product Listing Hook in PHP\nDESCRIPTION: Hook execution code that runs before presenting a product listing. It passes the presentedProduct array by reference to allow modifications to the product listing data. Located in ProductListingPresenter.php.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPresentProductListing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionPresentProductListing',\n            ['presentedProduct' => &$productListingLazyArray]\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Asset Usage in YAML\nDESCRIPTION: This snippet demonstrates how to configure the use_parent_assets setting, which determines whether the theme should use assets from its parent theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  use_parent_assets: true\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Composer on PHP 7+ Projects - Bash\nDESCRIPTION: Installs PHPStan as a development dependency using Composer for projects compatible with PHP 7.0 and above. Requires Composer to be installed and the project to meet PHPStan's PHP version requirements. No special parameters are needed; after installation, PHPStan can be used directly as a Composer binary. Output depends on Composer's progress and success of installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpstan/phpstan\n```\n\n----------------------------------------\n\nTITLE: Implementing BulkDeleteEmployeeHandler in PHP\nDESCRIPTION: This snippet shows the handler class for the BulkDeleteEmployeeCommand. It implements the BulkDeleteEmployeeHandlerInterface and is responsible for processing the bulk delete operation for employees.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/bulk-delete-employee-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Profile\\Employee\\CommandHandler\\BulkDeleteEmployeeHandler\n```\n\n----------------------------------------\n\nTITLE: Querying Product Stock Movements in PrestaShop PHP\nDESCRIPTION: This PHP snippet defines a query that returns a list of stock movements for a product. The stock movements could either be an edition from the back-office by an employee or summarize customer orders within specified ranges. It requires four parameters: product ID, shop ID, offset, and limit. The query is handled by a specific class implementing the required interface and returns an array of StockMovement objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-stock-movements.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Stock\\Query\\GetProductStockMovements\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Different Content Types in Apache\nDESCRIPTION: This configuration block sets up compression for various content types including plain text, CSS, JavaScript, XML, and SVG. It uses the AddOutputFilterByType directive to apply DEFLATE compression to specific MIME types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule deflate_module>\n  AddOutputFilterByType DEFLATE text/plain\n  AddOutputFilterByType DEFLATE text/css\n  AddOutputFilterByType DEFLATE application/json application/x-javascript  text/javascript application/javascript text/js\n  AddOutputFilterByType DEFLATE text/xml application/xml application/xml+rss text/javascript application/javascript\n  AddOutputFilterByType DEFLATE image/svg+xml\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: CurrencyId Value Object in PHP\nDESCRIPTION: This is the return type of the AddUnofficialCurrencyCommand. It represents the ID of the newly added unofficial currency.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/add-unofficial-currency-command.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\CurrencyId\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Configuration in XML\nDESCRIPTION: Example XML configuration for registering a new hook in PrestaShop's hook.xml file. Shows the required structure including hook ID, name, title and description elements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/add_hook.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<hook id=\"actionMaintenancePageFormSave\">\n  <name>actionMaintenancePageFormSave</name>\n  <title>Processing Maintenance page form</title>\n  <description>This hook is called when the Maintenance Page form is processed</description>\n</hook>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop State XML Schema Template\nDESCRIPTION: XML template showing the structure for state data in PrestaShop. Includes fields for ID, zone ID, country ID, ISO code, name, and active status. Uses CDATA sections for field values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/states.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <state>\n    <id><![CDATA[]]></id>\n    <id_zone><![CDATA[]]></id_zone>\n    <id_country><![CDATA[]]></id_country>\n    <iso_code><![CDATA[]]></iso_code>\n    <name><![CDATA[]]></name>\n    <active><![CDATA[]]></active>\n  </state>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Block using Hugo Shortcode\nDESCRIPTION: Provides the syntax for generating a 'warning' notice block using the `notice` Hugo shortcode. Note the use of comments (`/* */`) within the shortcode, presumably for documentation rendering; omit these for actual functionality (`{{% notice warning %}} ... {{% /notice %}}`). The text inside the tags is rendered within the styled warning block.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/notice.md#2025-04-22_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n{{%/* notice warning */%}}\nWatch out, danger zone!\n{{%/* /notice */%}}\n```\n\n----------------------------------------\n\nTITLE: GetReferenceCurrency Handler Interface Path\nDESCRIPTION: The interface that must be implemented by the GetReferenceCurrency query handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-reference-currency.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\QueryHandler\\GetReferenceCurrencyHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Cloning PrestaShop Performance Project Repository\nDESCRIPTION: Command to clone the GitHub repository containing the PrestaShop performance project, which is necessary for running the benchmarks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:PrestaShop/performance-project.git\n```\n\n----------------------------------------\n\nTITLE: Composing a Detailed Commit Message in Plain Text\nDESCRIPTION: This snippet demonstrates an example of a well-structured and descriptive commit message written in plain text, following best practices. It highlights the necessity of explaining both the 'what' and 'why' components rather than simply stating changes. No additional dependencies are required. Inputs are the commit message itself, and the expected output is an improved project history for better context and collaboration. There are no format limitations other than clarity and conciseness.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-guidelines/writing-a-good-commit-message.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMake Source.indexOf(ByteString) significantly faster\n\nPreviously the algorithm that did this was extremely inefficient, and\nhad worst case runtime of O(N * S * S) for N is size of the bytestring\nand S is the number of segments.\n\nThe new code runs in O(N * S). It accomplishes this by not starting\neach search at the first segment, which could occur many times when\ncalled by RealBufferedSource.\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductAttributeDelete Hook in PHP\nDESCRIPTION: This snippet shows how the actionProductAttributeDelete hook is called in the Product class when a product attribute is deleted. The hook passes the product ID and information about whether all attributes are being deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductAttributeDelete.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductAttributeDelete', ['id_product_attribute' => 0, 'id_product' => (int) $this->id, 'deleteAllAttributes' => true])\n```\n\n----------------------------------------\n\nTITLE: Setting Required Fields for Address with PrestaShop Command Object (PHP)\nDESCRIPTION: This command object specifies which fields are mandatory for addresses in PrestaShop's domain. It takes an array of required field names as input and modifies the address validation logic accordingly. Used alongside the command bus, it ensures compliance with configurable address data requirements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// SetRequiredFieldsForAddressCommand.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Command;\n\n/**\n * Command for setting required fields for addresses\n */\nclass SetRequiredFieldsForAddressCommand\n{\n    private $requiredFields;\n\n    public function __construct(array $requiredFields)\n    {\n        $this->requiredFields = $requiredFields;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Session with PrestaShop Command Class in PHP\nDESCRIPTION: This PHP code implements a command class to delete a customer session by its ID in the PrestaShop platform. The class uses a constructor with an integer session ID parameter, and is handled by the DeleteCustomerSessionHandler. The handler implements DeleteCustomerSessionHandlerInterface and the command returns void after execution. Requires PrestaShop Core Domain Security module and proper command bus infrastructure. Session ID is mandatory as input; deletion has no output except for its effect.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/delete-customer-session-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Class DeleteCustomerSessionCommand is a command to delete customer session by given id.\n// Command details:\n// - Constructor parameters: int $sessionId\n// - Handler class: PrestaShop\\PrestaShop\\Adapter\\Security\\CommandHandler\\DeleteCustomerSessionHandler\n// - Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Security\\CommandHandler\\DeleteCustomerSessionHandlerInterface\n// - Return type: void\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Installer into Main Module Class in PHP\nDESCRIPTION: This snippet shows how to integrate the `Installer` class into the main module class `DemoExtendSymfonyForm2`. It adds the standard `install()` and `uninstall()` methods required by PrestaShop modules. These methods instantiate the `Installer` class and delegate the actual installation and uninstallation tasks to its respective `install()` and `uninstall()` methods, ensuring separation of concerns. The `parent::install()` and `parent::uninstall()` calls are included to maintain standard module lifecycle behavior.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extending-sf-form-with-upload-image-field.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse PrestaShop\\Module\\DemoExtendSymfonyForm\\Install\\Installer;\n[...]\n\n    /**\n     * @return bool\n     */\n    public function install()\n    {\n        if (!parent::install()) {\n            return false;\n        }\n\n        $installer = new Installer();\n\n        return $installer->install($this);\n    }\n\n    /**\n     * @return bool\n     */\n    public function uninstall()\n    {\n        $installer = new Installer();\n\n        return $installer->uninstall() && parent::uninstall();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: DeleteManufacturerLogoImageHandlerInterface in PHP\nDESCRIPTION: Interface implemented by the handler class for the DeleteManufacturerLogoImageCommand, defining the contract for handling manufacturer logo deletion operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/delete-manufacturer-logo-image-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\CommandHandler\\DeleteManufacturerLogoImageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: List Controller Implementation in PHP\nDESCRIPTION: ModuleFrontController implementation for listing items\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass MyModuleAddingRoutesListModuleFrontController extends ModuleFrontController\n{\n    public function initContent()\n    {\n        $this->setTemplate('module:mymoduleaddingroutes/views/templates/front/list.tpl');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Feature Values Command Class Path\nDESCRIPTION: Fully qualified namespace path for the command class that sets product feature values. Takes product ID and feature values array as constructor parameters and returns an array of FeatureValueId objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-feature-values-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\FeatureValue\\Command\\SetProductFeatureValuesCommand\n```\n\n----------------------------------------\n\nTITLE: Executing a Specific Test Class with PHPUnit in PrestaShop\nDESCRIPTION: This command demonstrates how to run a single test class in PrestaShop using PHPUnit with the appropriate configuration file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/unit-tests/how-to-execute-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit -c tests/Unit/phpunit.xml tests/Unit/PrestaShopBundle/Command/ConfigCommandTest.php\n```\n\n----------------------------------------\n\nTITLE: Customer Deletion Handler Class Path\nDESCRIPTION: The fully qualified namespace path for the handler class that processes the delete customer command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/delete-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\DeleteCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: Creating a Note Block using Hugo Shortcode\nDESCRIPTION: Demonstrates the syntax for creating a 'note' notice block using the `notice` Hugo shortcode. The example uses comments (`/* */`) within the shortcode, likely for documentation purposes to prevent rendering the shortcode itself; actual usage would omit these comments (`{{% notice note %}} ... {{% /notice %}}`). The text between the opening and closing shortcode tags will be rendered inside the styled note block.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/notice.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{%/* notice note */%}}\nThis is something you may want to know.\n{{%/* /notice */%}}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Including Child Page Content with Hugo Shortcode\nDESCRIPTION: This snippet uses the Hugo `children` shortcode. Its purpose is to automatically render links or summaries of the child pages located under the current page's directory in the documentation structure. This effectively builds a table of contents or includes content from sub-sections belonging to the 'Core Development Reference' chapter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Creating Combinations via PrestaShop Webservice - XML\nDESCRIPTION: This snippet provides an XML payload template for creating a product combination in PrestaShop using the webservice API. It requires the product ID ({{id_product}}) and the ID of the product attribute value ({{id_product_attribute_value}}) as inputs, which must be retrieved or created beforehand. Key fields include ean13, mpn, reference, supplier_reference, price, and associations with product option values; when posted to the /api/combinations endpoint, this will create a new combination entity that is automatically linked to a Stock_available entity, and further images can be associated via the images API. The expected input is valid XML, and the output is the creation of a new combination resource within PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/create-product-az.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<prestashop xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n    <combination>\\n        <id_product><![CDATA[{{id_product}}]]></id_product>\\n        <ean13><![CDATA[1234567890123]]></ean13>\\n        <mpn><![CDATA[123456]]></mpn>\\n        <reference><![CDATA[demo_1]]></reference>\\n        <supplier_reference><![CDATA[mfr_1]]></supplier_reference>\\n        <price><![CDATA[10.000000]]></price>\\n        <associations>\\n            <product_option_values nodeType=\\\"product_option_value\\\" api=\\\"product_option_values\\\">\\n                <product_option_value>\\n                    <id><![CDATA[{{id_product_attribute_value}}]]></id>\\n                </product_option_value>\\n            </product_option_values>\\n        </associations>\\n    </combination>\\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Bulk Delete Handler Class Path\nDESCRIPTION: Fully qualified class path for the handler that processes the bulk deletion command\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-delete-cms-page-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\BulkDeleteCmsPageHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Suppliers XML Schema Template\nDESCRIPTION: Blank XML schema template for product suppliers in PrestaShop. Shows the structure for product supplier data including product ID, attribute ID, supplier ID, currency ID, reference, and price fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_suppliers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product_suppliers>\n    <id><![CDATA[]]></id>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <id_supplier><![CDATA[]]></id_supplier>\n    <id_currency><![CDATA[]]></id_currency>\n    <product_supplier_reference><![CDATA[]]></product_supplier_reference>\n    <product_supplier_price_te><![CDATA[]]></product_supplier_price_te>\n  </product_suppliers>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining GetCmsPageCategoriesForBreadcrumb Query Class in PHP\nDESCRIPTION: The GetCmsPageCategoriesForBreadcrumb class is responsible for providing data to display CMS page category breadcrumbs. It takes a current category ID as a constructor parameter and is handled by the GetCmsPageCategoriesForBreadcrumbHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-categories-for-breadcrumb.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Query\\GetCmsPageCategoriesForBreadcrumb\n```\n\n----------------------------------------\n\nTITLE: Executing Carrier Process Hook in PrestaShop Checkout\nDESCRIPTION: Hook execution call that triggers carrier processing during checkout. It passes the current cart object from the checkout session as a parameter to allow modifications or additional processing during carrier selection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCarrierProcess.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCarrierProcess', ['cart' => $this->getCheckoutSession()->getCart()])\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Header for Back Office Pages\nDESCRIPTION: Hugo markdown front matter configuration that defines the page title, weight for ordering, and chapter status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Back Office Pages\nweight: 1\nchapter: true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Product Categories Command Class Path\nDESCRIPTION: Fully qualified class name for the command that sets product-category associations in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-categories-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\SetAssociatedProductCategoriesCommand\n```\n\n----------------------------------------\n\nTITLE: GetProductImage Return Type Path - PHP\nDESCRIPTION: Return type class for the GetProductImage query result.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-image.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryResult\\ProductImage\n```\n\n----------------------------------------\n\nTITLE: Using mysqldiff with Additional Options\nDESCRIPTION: This command variant focuses on extracting structural changes between PrestaShop versions 1.6 and 1.7 by connecting to the same server for both versions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmysqldiff --server1=root:xxxx@127.0.0.1:3307 --changes-for=server1 --skip-table-options --force prestashop16:prestashop\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Zone Resource XML Schema\nDESCRIPTION: Blank XML schema template for the Zone resource in PrestaShop. Shows the basic structure with id, name, and active status fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/zones.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <zone>\n    <id><![CDATA[]]></id>\n    <name><![CDATA[]]></name>\n    <active><![CDATA[]]></active>\n  </zone>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for Tax Rule Group in PrestaShop\nDESCRIPTION: This XML snippet represents the blank schema for a tax rule group in PrestaShop. It includes all the fields that can be used to define a tax rule group, such as id, name, active status, deletion status, and date information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/tax_rule_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <tax_rule_group>\n    <id><![CDATA[]]></id>\n    <name><![CDATA[]]></name>\n    <active><![CDATA[]]></active>\n    <deleted><![CDATA[]]></deleted>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n  </tax_rule_group>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Configuring PrestaShop Debug Mode\nDESCRIPTION: PHP code snippet to disable debug mode in PrestaShop's configuration file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndefine('_PS_MODE_DEV_', false);\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Configuration via XML API\nDESCRIPTION: XML request to update an existing configuration in PrestaShop. This example shows how to use PUT to update the PS_MULTISHOP_FEATURE_ACTIVE configuration with ID 411 to set it to 1 (true).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <configuration>\n        <id>411</id>\n        <value>1</value>\n        <name>PS_MULTISHOP_FEATURE_ACTIVE</name>\n    </configuration>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirects with YAML Frontmatter - MarkDown\nDESCRIPTION: This code snippet configures a page for redirection using YAML frontmatter in a MarkDown (.md) file. It sets the page layout to 'redirect', provides a redirect URL, and instructs the build system not to list the page in the navigation. This approach is typical for static site generators such as Jekyll or similar tools, and requires that the site engine supports these fields. There are no parameters or user inputs; all values are hard-coded for the given page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/releasing-prestashop/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\\n# this page is redirected so it has no content\\nlayout: redirect\\nredirect: https://www.prestashop-project.org/maintainers-guide/releasing-prestashop/\\n_build:\\n  list: never\\n---\n```\n\n----------------------------------------\n\nTITLE: PHP-FPM Pool Configuration\nDESCRIPTION: Configuration for PHP-FPM pool settings including user/group permissions and socket configuration options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/httpd.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n; a pool called www\n[www]\nuser = www-data\ngroup = www-data\n\n; use a unix domain socket\nlisten = /var/run/php/php7.2-fpm.sock\n; or listen on a TCP socket\n; listen = 127.0.0.1:9000\n```\n\n----------------------------------------\n\nTITLE: Handler implementation for EditCategoryCommand\nDESCRIPTION: The handler class that processes the EditCategoryCommand. This handler implements the EditCategoryHandlerInterface and returns void after processing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/edit-category-command.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Category\\CommandHandler\\EditCategoryHandler\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Order Slip in PrestaShop\nDESCRIPTION: This XML schema represents the structure of an order slip in PrestaShop. It includes fields for customer and order IDs, financial details, dates, and associated order slip details.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/order_slip.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <order_slip>\n    <id><![CDATA[]]></id>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_order><![CDATA[]]></id_order>\n    <conversion_rate><![CDATA[]]></conversion_rate>\n    <total_products_tax_excl><![CDATA[]]></total_products_tax_excl>\n    <total_products_tax_incl><![CDATA[]]></total_products_tax_incl>\n    <total_shipping_tax_excl><![CDATA[]]></total_shipping_tax_excl>\n    <total_shipping_tax_incl><![CDATA[]]></total_shipping_tax_incl>\n    <amount><![CDATA[]]></amount>\n    <shipping_cost><![CDATA[]]></shipping_cost>\n    <shipping_cost_amount><![CDATA[]]></shipping_cost_amount>\n    <partial><![CDATA[]]></partial>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <order_slip_type><![CDATA[]]></order_slip_type>\n    <associations>\n      <order_slip_details>\n        <order_slip_detail>\n          <id><![CDATA[]]></id>\n          <id_order_detail><![CDATA[]]></id_order_detail>\n          <product_quantity><![CDATA[]]></product_quantity>\n          <amount_tax_excl><![CDATA[]]></amount_tax_excl>\n          <amount_tax_incl><![CDATA[]]></amount_tax_incl>\n        </order_slip_detail>\n      </order_slip_details>\n    </associations>\n  </order_slip>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Blank Schema for PrestaShop Stock Resource (XML)\nDESCRIPTION: Provides a template XML structure for interacting with the PrestaShop 'stock' API resource. Fill the CDATA sections with appropriate values for creating or updating stock information. Key fields include warehouse ID, product ID, product attribute ID, quantities, and price (tax excluded). Refer to the accompanying table for field details and requirements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/stocks.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <stock>\n    <id><![CDATA[]]></id>\n    <id_warehouse><![CDATA[]]></id_warehouse>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <reference><![CDATA[]]></reference>\n    <ean13><![CDATA[]]></ean13>\n    <isbn><![CDATA[]]></isbn>\n    <upc><![CDATA[]]></upc>\n    <mpn><![CDATA[]]></mpn>\n    <physical_quantity><![CDATA[]]></physical_quantity>\n    <usable_quantity><![CDATA[]]></usable_quantity>\n    <price_te><![CDATA[]]></price_te>\n  </stock>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Loading Hook Filter JavaScript in PrestaShop\nDESCRIPTION: This JavaScript snippet includes an external script for managing the hook filter functionality on the page. It allows users to search and filter the list of hooks dynamically. The script is expected to handle the input events on the filter UI component to display relevant hooks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\\\"/js/hookFilter.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: SQL Request Handler Interface Implementation\nDESCRIPTION: The interface implemented by the handler class for processing SQL request execution queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-execution-result.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\QueryHandler\\GetSqlRequestExecutionResultHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Running Behat Tests for PrestaShop\nDESCRIPTION: Command to run Behat tests for a specific scenario in PrestaShop integration testing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# from the PrestaShop root folder\nphp ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml --name=\"free shipping\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching Form Handler Hook in PHP\nDESCRIPTION: Demonstrates how the actionAfterCreate hook is dispatched with form parameters after form creation. The hook passes the form ID and form data as parameters, with form data being passed by reference.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAfterCreate<FormName>FormHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('actionAfterCreate' . Container::camelize($form->getName()) . 'FormHandler', [\n            'id' => $id,\n            'form_data' => &$data,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for PrestaShop Webservice Library\nDESCRIPTION: JSON configuration for composer.json to properly autoload the PrestaShop webservice library, which isn't PSR compliant and requires manual file inclusion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"prestashop/prestashop-webservice-lib\": \"dev-master\"\n    },\n    \"autoload\": {\n        \"files\": [\n            \"vendor/prestashop/prestashop-webservice-lib/PSWebServiceLibrary.php\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying the Interface for GetTaxForEditing Handler in PHP\nDESCRIPTION: Indicates the interface that the GetTaxForEditingHandler class implements. This interface defines the contract and expected methods for handling the GetTaxForEditing query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/get-tax-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tax\\QueryHandler\\GetTaxForEditingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Using GetShowcaseCardIsClosed Query in PrestaShop\nDESCRIPTION: This query retrieves the closed status of a showcase card. It requires an employee ID and showcase card name as constructor parameters and returns a boolean value indicating if the card is closed.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/showcase-card/_partials/get-showcase-card-is-closed.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\ShowcaseCard\\Query\\GetShowcaseCardIsClosed\n```\n\n----------------------------------------\n\nTITLE: Altering Extra Mail Template Variables via Hooks - PrestaShop - PHP\nDESCRIPTION: This example demonstrates how to register for and implement the `actionGetExtraMailTemplateVars` hook in your PrestaShop module. The code shows installing the hook and then, within the hook function, altering or adding extra template variables for emails (like setting a `{password}` variable). Usage of `dump($hookArgs)` is for debugging. This approach is intended for modules that wish to customize or extend variable data available to mail templates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// your-module/your-module.php\n\npublic function install()\n{\n    ...\n    $this->registerHook('actionGetExtraMailTemplateVars');\n}\n\npublic function hookActionGetExtraMailTemplateVars($hookArgs)\n{\n    dump($hookArgs);\n    // Adapted from PrestaShop Email Manager Module\n    $hookArgs['extra_template_vars']['{password}'] = '*******'; \n}\n\n```\n\n----------------------------------------\n\nTITLE: Class Reference for BulkToggleManufacturerStatusCommand in PrestaShop's Manufacturer Domain\nDESCRIPTION: This class provides functionality to toggle manufacturer status in bulk operations. It accepts an array of manufacturer IDs and the expected status to set them to. The command is handled by BulkToggleManufacturerStatusHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/bulk-toggle-manufacturer-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\BulkToggleManufacturerStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in PrestaShop CLI\nDESCRIPTION: Command to disable debug mode in PrestaShop from the command line.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-debug.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console prestashop:debug off\n```\n\n----------------------------------------\n\nTITLE: Grid Actions Template Structure in Twig\nDESCRIPTION: Displays the structure of Grid actions templates, including Bulk, Grid, and Row actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/customize-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nActions\n├── Bulk\n│   ├── delete_categories.html.twig\n│   ├── delete_customers.html.twig\n│   └── submit.html.twig\n├── Grid\n│   ├── link.html.twig\n│   ├── simple.html.twig\n│   └── submit.html.twig\n└── Row\n    ├── delete_category.html.twig\n    ├── delete_customer.html.twig\n    ├── link.html.twig\n    └── submit.html.twig\n```\n\n----------------------------------------\n\nTITLE: Template Translation Basic Example\nDESCRIPTION: Simple example of translating a string in a Smarty template using the {l} function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_3\n\nLANGUAGE: smarty\nCODE:\n```\n{l s='Welcome to this page!' mod='mymodule'}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCatalogPriceRuleHandler Class Path in PHP\nDESCRIPTION: Handler class implementation path that processes the delete catalog price rule command. Implements DeleteCatalogPriceRuleHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/delete-catalog-price-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CatalogPriceRule\\CommandHandler\\DeleteCatalogPriceRuleHandler\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleCurrencyStatusCommand Class in PHP\nDESCRIPTION: This snippet defines the ToggleCurrencyStatusCommand class in the PrestaShop Core Domain. It takes a currency ID as a constructor parameter and is handled by the ToggleCurrencyStatusHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/toggle-currency-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\ToggleCurrencyStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline Version Pill using minver Shortcode in Markdown\nDESCRIPTION: This snippet demonstrates the basic usage of the `minver` Hugo shortcode within a Markdown file to render a version pill inline with text. The `v` parameter specifies the version number to be displayed (e.g., '1.7.4'). This requires a Hugo environment configured with the `minver` shortcode.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/minver.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nEverything's better on {{</* minver v=\"1.7.4\" */>}}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Page Links in Hugo\nDESCRIPTION: This Hugo shortcode automatically generates a list of links pointing to the child pages of the current page within the site structure. It is commonly used in documentation or section index pages to provide navigation to subsections.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-process/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Data via XML API\nDESCRIPTION: XML response from the PrestaShop API when checking if a configuration exists by filtering on the configuration name. This example shows an empty result when the configuration doesn't exist yet.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/manage-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <configurations>\n    </configurations>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Theme in YAML\nDESCRIPTION: This snippet shows how to specify a parent theme by setting the parent key to the theme's name in the theme.yml file.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: classic\n```\n\n----------------------------------------\n\nTITLE: Identifying DeleteSupplierHandler Class in PHP\nDESCRIPTION: This snippet provides the fully qualified namespace and class name for the handler class (`DeleteSupplierHandler`) located in the PrestaShop adapter layer. This handler is responsible for executing the logic required to delete a supplier when a `DeleteSupplierCommand` is dispatched.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Supplier\\CommandHandler\\DeleteSupplierHandler\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCartRuleCommand Constructor Parameter (PHP)\nDESCRIPTION: Defines the constructor parameter for the `DeleteCartRuleCommand`. It requires an integer `$cartRuleId`, which uniquely identifies the specific cart rule targeted for deletion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/delete-cart-rule-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $cartRuleId`\n```\n\n----------------------------------------\n\nTITLE: Executing Hook in PrestaShop PHP\nDESCRIPTION: The snippet executes the 'actionCategoryUpdate' hook in a PrestaShop PHP controller when a category is modified. This hook allows developers to add custom logic and actions during the category modification process. The key parameter is 'category', which represents the modified category object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCategoryUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCategoryUpdate', ['category' => $category])\n```\n\n----------------------------------------\n\nTITLE: Setting up PrestaShop 8 Documentation Header and Children Shortcode\nDESCRIPTION: This markdown snippet defines the main heading for the PrestaShop 8 documentation and includes the children shortcode to automatically list all child pages in the documentation structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# PrestaShop 8 Documentation\n\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Including Password Policy Field in Customer Form with Twig\nDESCRIPTION: Wraps password fields in a div with class 'field-password-policy' to enable the zxcvbn password strength visualization in the customer form template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/new-password-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"field-password-policy\">\n    {form_field field=$field}\n</div>\n```\n\n----------------------------------------\n\nTITLE: GetProductImage Handler Interface Path - PHP\nDESCRIPTION: Interface implemented by the GetProductImage handler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-image.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\QueryHandler\\GetProductImageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Setting Up Internal Page Aliases with Hugo in PrestaShop Documentation\nDESCRIPTION: This YAML front matter configuration preserves URLs when moving pages within the documentation using Hugo's aliases feature. It maintains the original URL as an alias so that existing links and bookmarks continue to work.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/how/moving-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: ...\naliases:\n  - /previous-url\n---\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Tax Rule XML Schema Definition\nDESCRIPTION: XML schema template for tax rule resources in PrestaShop. Defines the structure for tax rule data including group ID, state, country, zip code ranges, tax ID, behavior and description fields. Used for API requests and responses.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/tax_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <tax_rule>\n    <id><![CDATA[]]></id>\n    <id_tax_rules_group><![CDATA[]]></id_tax_rules_group>\n    <id_state><![CDATA[]]></id_state>\n    <id_country><![CDATA[]]></id_country>\n    <zipcode_from><![CDATA[]]></zipcode_from>\n    <zipcode_to><![CDATA[]]></zipcode_to>\n    <id_tax><![CDATA[]]></id_tax>\n    <behavior><![CDATA[]]></behavior>\n    <description><![CDATA[]]></description>\n  </tax_rule>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for PrestaShop Tag Resource\nDESCRIPTION: This XML snippet provides a blank schema for the tag resource in PrestaShop. It includes the basic structure with placeholders for id, id_lang, and name fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/tags.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <tag>\n    <id><![CDATA[]]></id>\n    <id_lang><![CDATA[]]></id_lang>\n    <name><![CDATA[]]></name>\n  </tag>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Shops/Groups for Module Configuration using Bash\nDESCRIPTION: Provides examples of the `prestashop:module configure` command using the `--id_shop` or `--id_shop_group` options in Bash. This allows applying the configuration specified in the YAML file only to a particular shop or shop group identified by `<id>`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console prestashop:module configure <modulename> <configfilepath> --id_shop=<id>\nphp bin/console prestashop:module configure <modulename> <configfilepath> --id_shop_group=<id>\n```\n\n----------------------------------------\n\nTITLE: Updating Positions Using GridPositionUpdater (PHP)\nDESCRIPTION: This PHP code shows the use of the GridPositionUpdater service to execute a batch update of entity positions. It handles PositionUpdateException to manage failures, providing user feedback through flash messages. Dependencies include a valid PositionUpdate object and injection of the appropriate updating service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/position-updater/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface;\\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException;\\n\\n/** @var PositionUpdate $positionUpdate */\\n$positionUpdate = buildPositionUpdate();\\n\\n/** @var GridPositionUpdaterInterface $updater */\\n$updater = $this->get('prestashop.core.grid.position.doctrine_grid_position_updater');\\ntry {\\n    $updater->update($positionUpdate);\\n    $this->clearModuleCache();\\n    $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\\n} catch (PositionUpdateException $e) {\\n    $errors = [$e->toArray()];\\n    $this->flashErrors($errors);\\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Routing Configuration in YAML\nDESCRIPTION: YAML configuration for modern PrestaShop routing with Symfony integration. Defines routes with legacy controller mapping for permission management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nadmin_link_block_list:\n  path: /link-widget/list\n  methods: [GET]\n  defaults:\n    _controller: 'PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design\\LinkBlockController::listAction'\n    # _legacy_controller is used to manage permissions\n    _legacy_controller: AdminLinkWidget\n    # No need for _legacy_link in this case\n```\n\n----------------------------------------\n\nTITLE: Calling displayAfterProductThumbs Hook in PrestaShop Theme Template\nDESCRIPTION: This snippet demonstrates how to call the displayAfterProductThumbs hook in a PrestaShop theme template. It passes the product object as a parameter to the hook, allowing for the display of additional content below product thumbnails.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAfterProductThumbs.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAfterProductThumbs' product=$product}\n```\n\n----------------------------------------\n\nTITLE: Defining AddContactHandler Class in PHP for PrestaShop Contact Management\nDESCRIPTION: The AddContactHandler class handles the AddContactCommand. It implements the AddContactHandlerInterface and is responsible for processing the addition of contact data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/contact/_partials/add-contact-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Contact\\CommandHandler\\AddContactHandler\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Resource Using PrestaShopWebservice in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a customer resource using the PrestaShopWebservice class. It requires the PrestaShop Web Service library and authentication credentials. The script attempts to delete a customer with a specific ID and handles potential exceptions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/delete-resource.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    $webService = new PrestaShopWebservice('http://example.com/', 'ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT', false);\n\n    $id = 2;\n    $webService->delete([\n        'resource' => 'customers',\n        'id' => $id, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else\n    ]);\n    echo 'Customer with ID ' . $id . ' was successfully deleted' . PHP_EOL;\n} catch (PrestaShopWebserviceException $e) {\n    echo 'Error:' . $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllAssociatedCombinationSuppliersCommand Class in PHP\nDESCRIPTION: This code snippet defines the RemoveAllAssociatedCombinationSuppliersCommand class in the PrestaShop core domain. The class is used to remove all associated product suppliers for a given combination. It takes a combinationId as a constructor parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-combination-suppliers-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\RemoveAllAssociatedCombinationSuppliersCommand\n```\n\n----------------------------------------\n\nTITLE: Executing actionProductSave Hook in Product.php\nDESCRIPTION: This code snippet shows how the actionProductSave hook is called in the Product class. It passes the product ID and the product object as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionProductSave.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionProductSave', ['id_product' => (int) $this->id, 'product' => $this])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop API Resources XML Example\nDESCRIPTION: Example XML response showing available API resources with their endpoints and allowed HTTP methods. Shows structure for addresses, images, and products resources.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-access.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <api shopName=\"Prestashop\">\n        <addresses xlink:href=\"http://example.com/api/addresses\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            <description xlink:href=\"http://example.com/api/addresses\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            The Customer, Brand and Customer addresses</description>\n            <schema xlink:href=\"http://example.com/api/addresses?schema=blank\" type=\"blank\"/>\n            <schema xlink:href=\"http://example.com/api/addresses?schema=synopsis\" type=\"synopsis\"/>\n        </addresses>\n        <images xlink:href=\"http://example.com/api/images\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            <description xlink:href=\"http://example.com/api/images\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            The images</description>\n        </images>\n        <products xlink:href=\"http://example.com/api/products\" get=\"true\" put=\"true\" post=\"true\" patch=\"true\" delete=\"true\" head=\"true\">\n            <description xlink:href=\"http://example.com/api/products\" get=\"true\" put=\"true\" patch=\"true\" post=\"true\" delete=\"true\" head=\"true\">\n            The products</description>\n            <schema xlink:href=\"http://example.com/api/products?schema=blank\" type=\"blank\"/>\n            <schema xlink:href=\"http://example.com/api/products?schema=synopsis\" type=\"synopsis\"/>\n        </products>\n    </api>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Parsing Single Language Product Data in JSON Response\nDESCRIPTION: Example of JSON output for a product with a single language. Shows how the structure changes when only one language is present or specified, with direct string values for name and description instead of arrays.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/multilang-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"product\": {\n        \"id\": 19,\n        \"id_manufacturer\": \"1\",\n        ...\n        \"name\": \"Customizable mug\",\n        \"description\": \"<p><span style=\\\"font-size:10pt;font-style:normal;\\\"><span style=\\\"font-size:10pt;font-style:normal;\\\">Customize your mug with the text of your choice. A mood, a message, a quote... It's up to you! Maximum number of characters:</span><span style=\\\"font-size:10pt;font-style:normal;\\\"> ---</span></span></p>\",\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of the `classname` Smarty Modifier\nDESCRIPTION: Shows the resulting string after applying the `classname` modifier to the example input 'Hérè-Is_a-Clàssnåme--@#$$ˆ*(&-----'. The output is a sanitized, lowercase string suitable for CSS class names.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/smarty-extensions/_index.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n  here-is_a-classname\n```\n\n----------------------------------------\n\nTITLE: Warning Notice for Session Handling in PrestaShop\nDESCRIPTION: This snippet is a Markdown notice warning that PrestaShop does not use persistent server-side sessions, relying solely on cookies for authentication status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/users.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% notice warning %}}\nThere is no persistent server-side sessions in PrestaShop, only the Cookie carries the authentication status.\n{{% /notice %}}\n```\n\n----------------------------------------\n\nTITLE: Determining Symfony Route in PrestaShop PHP 1.7.7.0 and Above\nDESCRIPTION: In PrestaShop 1.7.7.0 or later, order pages are migrated to Symfony. This snippet fetches the Symfony route using the request stack to ascertain if the page being accessed is order creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/hook-tips.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$currentRoute = \\PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer::getInstance()\n    ->get('request_stack')\n    ->getMasterRequest()\n    ->get('_route')\n;\n\nif ('admin_orders_create' === $currentRoute) {\n    // now we know for sure, that we are in order create page\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Terminal\nDESCRIPTION: Command to verify that Node.js is properly installed on your system by checking its version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Executing Symfony Cache Clear Hook in PHP\nDESCRIPTION: The code snippet demonstrates the execution of the 'actionClearSf2Cache' hook using PrestaShop's 'Hook::exec' method. This hook is primarily called within the core of PrestaShop when the Symfony cache needs to be cleared. The implementation does not require additional dependencies and directly calls the 'exec' method. This operation is performed in the front office and is classified as a non-returning action.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionClearSf2Cache.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHook::exec('actionClearSf2Cache')\n```\n\n----------------------------------------\n\nTITLE: Order Controller Action Methods\nDESCRIPTION: Key controller method references for handling order actions like status updates, invoice generation, and address changes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/order/view-order/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nOrderController::updateStatusAction\nOrderController::generateInvoicePdfAction\nOrderController::changeCustomerAddressAction\nOrderController::addProductAction\nOrderController::deleteProductAction\nOrderController::updateProductAction\nOrderController::addCartRuleAction\nOrderController::sendMessageAction\nOrderController::setInternalNoteAction\nOrderController::updateShippingAction\nOrderController::addPaymentAction\n```\n\n----------------------------------------\n\nTITLE: Setting Product Suppliers Command Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the SetProductSuppliersCommand class that updates product suppliers in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-suppliers-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\Command\\SetProductSuppliersCommand\n```\n\n----------------------------------------\n\nTITLE: Adding PrestaShop Webservice Library to Existing Project\nDESCRIPTION: Command to add the PrestaShop webservice library as a dependency to an existing Composer project.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require prestashop/prestashop-webservice-lib\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, specifying title, weight for ordering, and homepage visibility settings.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Sample modules and how to's\nweight: 80\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Style Hugo Shortcode\nDESCRIPTION: Shows the syntax for self-closing placeholder style shortcodes that add content directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{%/* ExampleShortcode */%}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression Module in Apache httpd\nDESCRIPTION: This snippet shows how to load the deflate module in Apache httpd configuration. The deflate module is used for compressing text-based content before sending it to the client.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/httpd.md#2025-04-22_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule deflate_module modules/mod_deflate.so\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete Handler Interface Path - PHP\nDESCRIPTION: Interface path that defines the contract for bulk deletion of catalog price rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/catalog-price-rule/_partials/bulk-delete-catalog-price-rule-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CatalogPriceRule\\CommandHandler\\BulkDeleteCatalogPriceRuleHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Parameters for actionPaymentConfirmation Hook in PHP\nDESCRIPTION: Defines the parameter structure for the actionPaymentConfirmation hook. The hook receives an array containing the order ID as an integer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionPaymentConfirmation.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Translation System Support by PrestaShop Version\nDESCRIPTION: HTML table showing support for Classic and New translation systems across different PrestaShop versions, using CSS classes for visual indicators.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/comparison.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"9\" style=\"text-align:center\">Target Minimum Version</th>\n    </tr>\n    <tr class=\"h-version-titles\">\n      <th></th>\n      <th>&le;&nbsp;1.7.5</th>\n      <th>1.7.6</th>\n      <th>1.7.7</th>\n      <th>&ge;&nbsp;1.7.8</th>\n    </tr>\n  </thead>\n<tbody>\n  <tr>\n    <td>Classic system</td>\n    <td class=\"support-yes\">\n      <i class=\"fa fa-check\" aria-hidden=\"true\" title=\"Recommended system\"></i>\n      <span class=\"sr-only\">Recommended system</span>\n    </td>\n    <td class=\"support-yes\"><span class=\"sr-only\">Yes</span></td>\n    <td class=\"support-yes\"><span class=\"sr-only\">Yes</span></td>\n    <td class=\"support-yes\"><span class=\"sr-only\">Yes</span></td>\n  </tr>\n    <tr>\n    <td>New system</td>\n    <td class=\"support-no\"><span class=\"sr-only\">Not supported</span></td>\n    <td class=\"support-yes\"><span class=\"sr-only\">It depends</span> * </td>\n    <td class=\"support-yes\"><span class=\"sr-only\">It depends</span> * </td>\n    <td class=\"support-yes\">\n      <i class=\"fa fa-check\" aria-hidden=\"true\" title=\"Recommended system\"></i>\n      <span class=\"sr-only\">Recommended system</span>\n    </td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining PrestaShop Theme Export Command in Markdown\nDESCRIPTION: This snippet defines the 'prestashop:theme:export' command, specifying its file path and required argument. It also briefly describes the command's purpose of creating a zip file for theme distribution.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-theme-export.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `prestashop:theme:export`\n\n## Informations\n\n* Path: `src/PrestaShopBundle/Command/ExportThemeCommand.php`\n* Arguments:\n  * `theme`: Directory name of the theme to export\n\n## Description\n\nThis command aims to create a zip file to distribute a theme with its dependencies.\n```\n\n----------------------------------------\n\nTITLE: Initializing Composer Project with PrestaShop Webservice Library\nDESCRIPTION: Commands to initialize a new Composer project with the PrestaShop webservice library dependency. This creates a new project and installs the required library.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/prestashop-webservice-lib/setup-library.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer init --require=\"prestashop/prestashop-webservice-lib:dev-master\" -n\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Identifying the UpdateProductInOrderHandler Class in PHP\nDESCRIPTION: Specifies the fully qualified namespace and class name for the handler responsible for processing the `UpdateProductInOrderCommand`. This class contains the logic to perform the actual product update within the order, utilizing the parameters provided by the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-product-in-order-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\UpdateProductInOrderHandler\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of getAdminLink (PHP)\nDESCRIPTION: Highlights a common mistake where URL parameters are concatenated as a string to the result of `getAdminLink`. This is incorrect because the parameters will be appended to the base URL (often the index route) instead of being properly integrated into the route generation process. Correct usage involves passing parameters within the `getAdminLink` method's arguments.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/route-generation.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    $link = new Link();\n    $link->getAdminLink('AdminPaymentPreferences') . '?action=update';\n```\n\n----------------------------------------\n\nTITLE: Editing State Command Initialization - PrestaShop Domain - PHP\nDESCRIPTION: Defines the EditStateCommand class, which is designed to encapsulate data for editing a state entity within PrestaShop. This command requires a state ID integer upon instantiation and is handled by EditStateHandler, implementing the EditStateHandlerInterface. The main input is an int $stateId, with the operation returning void. The command is intended for internal domain event dispatching and will not directly expose output data. Requires PrestaShop Core Domain and Adapter layers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/edit-state-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// PrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\EditStateCommand\n// Edits state with provided data\n\n// Constructor parameters:\n//   int $stateId\n//\n// Handler class:\n//   PrestaShop\\PrestaShop\\Adapter\\State\\CommandHandler\\EditStateHandler\n//   Implements:\n//      PrestaShop\\PrestaShop\\Core\\Domain\\State\\CommandHandler\\EditStateHandlerInterface\n//\n// Return type:\n//   void\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Address Synopsis Schema XML\nDESCRIPTION: XML schema showing the address resource template with validation rules and format requirements for each field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-access.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <address>\n        <id_customer format=\"isNullOrUnsignedId\"></id_customer>\n        <id_manufacturer format=\"isNullOrUnsignedId\"></id_manufacturer>\n        <id_supplier format=\"isNullOrUnsignedId\"></id_supplier>\n        <id_warehouse format=\"isNullOrUnsignedId\"></id_warehouse>\n        <id_country required=\"true\" format=\"isUnsignedId\"></id_country>\n        <id_state format=\"isNullOrUnsignedId\"></id_state>\n        <alias required=\"true\" maxSize=\"32\" format=\"isGenericName\"></alias>\n        <company maxSize=\"255\" format=\"isGenericName\"></company>\n        <lastname required=\"true\" maxSize=\"255\" format=\"isName\"></lastname>\n        <firstname required=\"true\" maxSize=\"255\" format=\"isName\"></firstname>\n        <vat_number format=\"isGenericName\"></vat_number>\n        <address1 required=\"true\" maxSize=\"128\" format=\"isAddress\"></address1>\n        <address2 maxSize=\"128\" format=\"isAddress\"></address2>\n        <postcode maxSize=\"12\" format=\"isPostCode\"></postcode>\n        <city required=\"true\" maxSize=\"64\" format=\"isCityName\"></city>\n        <other maxSize=\"300\" format=\"isMessage\"></other>\n        <phone maxSize=\"32\" format=\"isPhoneNumber\"></phone>\n        <phone_mobile maxSize=\"32\" format=\"isPhoneNumber\"></phone_mobile>\n        <dni maxSize=\"16\" format=\"isDniLite\"></dni>\n        <deleted format=\"isBool\"></deleted>\n        <date_add format=\"isDate\"></date_add>\n        <date_upd format=\"isDate\"></date_upd>\n    </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Hard and Soft Deletion of ObjectModel Instances\nDESCRIPTION: Demonstrates both the soft delete (marking as deleted) and hard delete (removing from database) operations on an ObjectModel instance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$id = 2; // id of the object in database\n$cms = new Cms($id); \n$cms->softDelete(); // sets the deleted property to true, and triggers an update() call\n...\n$cms->delete(); // triggers a DELETE statement to the DBAL\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Core Selectors Path\nDESCRIPTION: File path for the core selectors mapping file in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/themes/_core/js/selectors.js\n```\n\n----------------------------------------\n\nTITLE: Specifying DeleteSupplierHandlerInterface in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and interface name (`DeleteSupplierHandlerInterface`) implemented by the `DeleteSupplierHandler`. This interface defines the contract and expected methods for any class handling the `DeleteSupplierCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/delete-supplier-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\CommandHandler\\DeleteSupplierHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Optimization Command\nDESCRIPTION: Command to analyze all tables in the MySQL database to optimize query performance. This performs maintenance on tables, updates statistics, and improves query execution plans for better performance.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/optimizations.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nmysqlcheck -a -A -uroot -pyour_password\n```\n\n----------------------------------------\n\nTITLE: PHP-FPM Container Configuration\nDESCRIPTION: Configuration for PHP-FPM when running in a separate container with shared volume mounting.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/httpd.md#2025-04-22_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\n    <FilesMatch .php$>\n        ProxyFCGISetEnvIf \"true\" SCRIPT_FILENAME \"/var/www/html%{reqenv:SCRIPT_NAME}\"\n        SetHandler \"proxy:fcgi://myapp-php-fpm:9000\"\n    </FilesMatch>\n```\n\n----------------------------------------\n\nTITLE: Defining an Array and Dumping it in PHP\nDESCRIPTION: A simple PHP script that initializes an empty array and uses var_dump to display its contents. This snippet is used to demonstrate syntax checking for compatibility across different PHP versions. It does not require any external dependencies and outputs the details of the initialized array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/basic-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\n$myVar = [];\\nvar_dump($myVar);\\n\"\n```\n\n----------------------------------------\n\nTITLE: GetDatabaseTablesList Query Handler Implementation\nDESCRIPTION: The handler class that processes the GetDatabaseTablesList query. It implements the GetDatabaseTablesListHandlerInterface which defines the contract for handling this query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-database-tables-list.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\SqlManager\\QueryHandler\\GetDatabaseTablesListHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing SetRelatedProductsHandler in PHP\nDESCRIPTION: This snippet shows the handler class for the SetRelatedProductsCommand. It implements the SetRelatedProductsHandlerInterface and is responsible for executing the command to set related products.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-related-products-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\SetRelatedProductsHandler\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pack Products Query Structure in PrestaShop PHP\nDESCRIPTION: Defines the query structure for retrieving products from a pack in PrestaShop. Requires packId, languageId, and shopConstraint parameters. Returns an array of PackedProductDetails objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-packed-products.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Pack\\Query\\GetPackedProducts\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePickerType in a Custom Symfony Form\nDESCRIPTION: This example demonstrates how to implement the DatePickerType field in a custom Symfony form. The code creates a form with two date fields (date_from and date_to) using the PrestaShop DatePickerType component, which provides date picker functionality without requiring additional JavaScript components.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/date-picker.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\DatePickerType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('date_from', DatePickerType::class)\n            ->add('date_to', DatePickerType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Behat Tests with Filter\nDESCRIPTION: Command to run a specific Behat test by using the '--name' filter to target a particular test scenario instead of running all available tests.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# from the PrestaShop root folder\nphp ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml --name=\"free shipping\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Page Links with Hugo ref Shortcode\nDESCRIPTION: Demonstrates how to create a link to another documentation page using Hugo's ref shortcode. The example shows linking to the Configuration page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/ref.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[This is a link to Configuration]({{</* ref \"/8/development/configuration\" */>}})\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameters for UpdateCategoryPositionCommand (PHP)\nDESCRIPTION: Lists the parameters required by the `UpdateCategoryPositionCommand` constructor. These include the category ID (`$categoryId`), parent category ID (`$parentCategoryId`), the direction of movement (`$way`), an array of current positions (`$positions`), and a boolean flag (`$foundFirst`). These parameters provide the context for the position update logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/update-category-position-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $categoryId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$int $parentCategoryId`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$int $way`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$array $positions`\n```\n\nLANGUAGE: php\nCODE:\n```\n`$bool $foundFirst`\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for PrestaShop Config Command in Bash\nDESCRIPTION: This snippet shows the output of running the help command for the prestashop:config command. It displays the command description, usage syntax, available arguments and options, and other relevant information for using the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/console prestashop:config --help\nDescription:\n  Manage your configuration via command line\n\nUsage:\n  prestashop:config [options] [--] <action> <key>\n\nArguments:\n  action                         Action to execute (Allowed actions: get / set / remove).\n  key                            Configuration key. like PS_LANG_DEFAULT\n\nOptions:\n  -l, --lang=LANG                in this language. this can be either language id or ISO 3166-2 alpha-2 (en, fr, fi...)\n  -g, --shopGroupId=SHOPGROUPID  in this shop group (if no shop group or shop options are given defaults to allShops)\n  -s, --shopId=SHOPID            in this shop (if no shop group or shop options are given defaults to allShops)\n  -h, --help                     Display this help message\n  -q, --quiet                    Do not output any message\n  -V, --version                  Display this application version\n      --ansi                     Force ANSI output\n      --no-ansi                  Disable ANSI output\n  -n, --no-interaction           Do not ask any interactive question\n  -e, --env=ENV                  The Environment name. [default: \"dev\"]\n      --no-debug                 Switches off debug mode.\n  -val, --value=VALUE            value to set\n  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Configuration Data in PrestaShop 8\nDESCRIPTION: This method checks if a configuration data set exists for a given key. Returns a boolean indicating existence.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/configuration/backward-compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nConfiguration::hasKey(string $key): bool\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Shortcodes to Display Child Pages in Markdown\nDESCRIPTION: This snippet uses the {{% children /%}} shortcode, instructing the Hugo static site generator to automatically display a list of child pages under the current chapter. It requires Hugo and a documentation site using this shortcode. The snippet takes no parameters but must be placed within a page's body, generally at the chapter or section level. It renders sub-navigation based on the site's configured content structure. Inputs and outputs depend on Hugo's content organization, and misuse in non-Hugo or non-Markdown contexts would result in unprocessed markup.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleUnRegisterHookBefore Hook in PHP\nDESCRIPTION: This code demonstrates how the actionModuleUnRegisterHookBefore hook is executed in the core PrestaShop code. The hook is triggered before a module unregisters from a hook, passing the module instance and hook name as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleUnRegisterHookBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionModuleUnRegisterHookBefore', ['object' => $module_instance, 'hook_name' => $hook_name])\n```\n\n----------------------------------------\n\nTITLE: Generating PrestaShop Dataset\nDESCRIPTION: Command to generate the initial dataset for PrestaShop using the shop creator tool.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nphp app/console.php\n```\n\n----------------------------------------\n\nTITLE: Displaying PrestaShop Core Configuration Settings Table in Markdown\nDESCRIPTION: This markdown table lists various PrestaShop core configuration settings, including their names, types, default values, and descriptions. It covers a wide range of settings from API channels to product display options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/configuration/list-of-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration name                         |  Type  | Default  | Description                                                              \n|--------------------------------------------|:------:|:--------:|--------------------------------------------------------------------------\n| ADDONS_API_MODULE_CHANNEL                  | string | \"stable\" | (Deprecated since 8.0) Addons marketplace stability channel              \n| CONF_AVERAGE_PRODUCT_MARGIN                | int    | 40       | Average gross margin percentage per sale, used to calculate profits on the Dashboard\n| PRESTASTORE_LIVE                           |        |          |\n| PS_ADVANCED_STOCK_MANAGEMENT               |        |          |\n| PS_ALIAS_FEATURE_ACTIVE                    |        |          |\n| PS_ALLOWED_COUNTRIES                       |        |          |\n| PS_ALLOW_MOBILE_DEVICE                     |        |          |\n| PS_ATTACHMENT_MAXIMUM_SIZE                 |        |          |\n| PS_ATTRIBUTE_ANCHOR_SEPARATOR              |        |          |\n| PS_ATTRIBUTE_CATEGORY_DISPLAY              |        |          |\n| PS_BACKUP_ALL                              |        |          |\n| PS_BACKUP_DROP_TABLE                       |        |          |\n| PS_BASE_DISTANCE_UNIT                      |        |          |\n| PS_BLOCK_BESTSELLERS_DISPLAY               |        |          |\n| PS_BLOCK_CART_AJAX                         |        |          |\n| PS_BLOCK_NEWPRODUCTS_DISPLAY               |        |          |\n| PS_BLOCK_SPECIALS_DISPLAY                  |        |          |\n| PS_CANONICAL_REDIRECT                      |        |          |\n| PS_CARRIER_DEFAULT                         |  int   |    1     | Default carrier Id                                     \n| PS_CARRIER_DEFAULT_ORDER                   |        |          |\n| PS_CARRIER_DEFAULT_SORT                    |        |          |\n| PS_CART_RULE_FEATURE_ACTIVE                |        |          |\n| PS_CATALOG_MODE                            |        |          |\n| PS_CATALOG_MODE_WITH_PRICES                |        |          |\n| PS_CIPHER_ALGORITHM                        |        |          |\n| PS_COMBINATION_FEATURE_ACTIVE              |        |          |\n| PS_CONDITIONS                              |        |          |\n| PS_CONDITIONS_CMS_ID                       |        |          |\n| PS_CONFIGURATION_AGREMENT                  |        |          |\n| PS_COOKIE_CHECKIP                          |        |          |\n| PS_COOKIE_LIFETIME_BO                      |        |          |\n| PS_COOKIE_LIFETIME_FO                      |        |          |\n| PS_COOKIE_SAMESITE                         |        |          |\n| PS_COUNTRY_DEFAULT                         |  int   |    8     | Shop's default country Id (chosen during install)      \n| PS_CURRENCY_DEFAULT                        |  int   |    1     | Default currency Id                                    \n| PS_CUSTOMER_BIRTHDATE                      |        |          |\n| PS_CUSTOMER_CREATION_EMAIL                 |        |          |\n| PS_CUSTOMER_GROUP                          |        |          |\n| PS_CUSTOMER_OPTIN                          |        |          |\n| PS_CUSTOMER_SERVICE_FILE_UPLOAD            |        |          |\n| PS_CUSTOMER_SERVICE_SIGNATURE              |        |          |\n| PS_CUSTOMIZATION_FEATURE_ACTIVE            |        |          |\n| PS_DASHBOARD_SIMULATION                    |        |          |\n| PS_DELIVERY_NUMBER                         |        |          |\n| PS_DELIVERY_PREFIX                         |        |          |\n| PS_DETECT_COUNTRY                          |        |          |\n| PS_DETECT_LANG                             |        |          |\n| PS_DIMENSION_UNIT                          |        |          |\n| PS_DISALLOW_HISTORY_REORDERING             |        |          |\n| PS_DISPLAY_BEST_SELLERS                    |        |          |\n| PS_DISPLAY_MANUFACTURERS                   |        |          |\n| PS_DISPLAY_PRODUCT_WEIGHT                  |        |          |\n| PS_DISPLAY_QTIES                           |        |          |\n| PS_DISPLAY_SUPPLIERS                      |        |          |\n| PS_DISP_UNAVAILABLE_ATTR                   |        |          |\n| PS_DISTANCE_UNIT                           |        |          |\n| PS_FAVICON                                 |        |          |\n| PS_FEATURE_FEATURE_ACTIVE                  |        |          |\n| PS_GEOLOCATION_BEHAVIOR                    |        |          |\n| PS_GEOLOCATION_ENABLED                     |        |          |\n| PS_GEOLOCATION_WHITELIST                   |        |          |\n| PS_GIFT_WRAPPING                           |        |          |\n| PS_GIFT_WRAPPING_PRICE                     |        |          |\n| PS_GROUP_FEATURE_ACTIVE                    |  bit   |    1     | Enable/disable customer groups                         \n| PS_GUEST_CHECKOUT_ENABLED                  |        |          |\n| PS_GUEST_GROUP                             |        |          |\n| PS_HOME_CATEGORY                           |        |          |\n| PS_IMAGE_QUALITY                           |        |          |\n| PS_IMG_UPDATE_TIME                         |        |          |\n| PS_INVCE_DELIVERY_ADDR_RULES               |        |          |\n| PS_INVCE_INVOICE_ADDR_RULES                |        |          |\n| PS_INVOICE                                 |        |          |\n| PS_INVOICE_MODEL                           |        |          |\n| PS_INVOICE_PREFIX                          |        |          |\n| PS_JPEG_QUALITY                            |        |          |\n| PS_LABEL_IN_STOCK_PRODUCTS                 |        |          |\n| PS_LABEL_OOS_PRODUCTS_BOA                  |        |          |\n| PS_LABEL_OOS_PRODUCTS_BOD                  |        |          |\n| PS_LAST_QTIES                              |        |          |\n| PS_LEGACY_IMAGES                           |        |          |\n| PS_LIMIT_UPLOAD_FILE_VALUE                 |        |          |\n| PS_LIMIT_UPLOAD_IMAGE_VALUE                |        |          |\n| PS_LOCALE_COUNTRY                          |        |          |\n| PS_LOCALE_LANGUAGE                         |        |          |\n| PS_LOGO                                    |        |          |\n| PS_LOGS_BY_EMAIL                           |        |          |\n| PS_LOGS_EMAIL_RECEIVERS                    |        |          |\n| PS_LOG_EMAILS                              |        |          |\n| PS_LOG_MODULE_PERFS_MODULO                 |        |          |\n| PS_MAIL_COLOR                              |        |          |\n| PS_MAIL_DKIM_DOMAIN                        |        |          |\n| PS_MAIL_DKIM_ENABLE                        |        |          |\n| PS_MAIL_DKIM_KEY                           |        |          |\n| PS_MAIL_DKIM_SELECTOR                      |        |          |\n| PS_MAIL_METHOD                             |        |          |\n| PS_MAIL_PASSWD                             |        |          |\n| PS_MAIL_SERVER                             |        |          |\n| PS_MAIL_SMTP_ENCRYPTION                    |        |          |\n| PS_MAIL_SMTP_PORT                          |        |          |\n| PS_MAIL_THEME                              |        |          |\n| PS_MAIL_TYPE                               |        |          |\n| PS_MAIL_USER                               |        |          |\n| PS_MAINTENANCE_TEXT                        |        |          |\n| PS_NAVIGATION_PIPE                         |        |          |\n| PS_NB_DAYS_NEW_PRODUCT                     |        |          |\n| PS_ORDER_OUT_OF_STOCK                      |        |          |\n| PS_ORDER_PRODUCTS_NB_PER_PAGE              |        |          |\n| PS_ORDER_RECALCULATE_SHIPPING              |        |          |\n| PS_ORDER_RETURN                            |        |          |\n| PS_ORDER_RETURN_NB_DAYS                    |        |          |\n| PS_OS_BANKWIRE                             |        |          |\n| PS_OS_CANCELED                             |        |          |\n| PS_OS_CHEQUE                               |        |          |\n| PS_OS_COD_VALIDATION                       |        |          |\n| PS_OS_DELIVERED                            |        |          |\n| PS_OS_ERROR                                |        |          |\n| PS_OS_OUTOFSTOCK                           |        |          |\n| PS_OS_OUTOFSTOCK_PAID                      |        |          |\n| PS_OS_OUTOFSTOCK_UNPAID                    |        |          |\n| PS_OS_PAYMENT                              |        |          |\n| PS_OS_PREPARATION                          |        |          |\n| PS_OS_REFUND                               |        |          |\n| PS_OS_SHIPPING                             |        |          |\n| PS_OS_WS_PAYMENT                           |        |          |\n| PS_PACK_FEATURE_ACTIVE                     |        |          |\n| PS_PACK_STOCK_TYPE                         |        |          |\n| PS_PASSWD_RESET_VALIDITY                   |        |          |\n| PS_PASSWD_TIME_BACK                        |        |          |\n| PS_PASSWD_TIME_FRONT                       |        |          |\n| PS_PAYMENT_LOGO_CMS_ID                     |        |          |\n| PS_PNG_QUALITY                             |        |          |\n| PS_PRICE_ROUND_MODE                        |        |          |\n| PS_PRODUCTS_ORDER_BY                       |        |          |\n| PS_PRODUCTS_ORDER_WAY                      |        |          |\n| PS_PRODUCTS_PER_PAGE                       |        |          |\n| PS_PRODUCT_PICTURE_HEIGHT                  |        |          |\n| PS_PRODUCT_PICTURE_MAX_SIZE                |        |          |\n| PS_PRODUCT_PICTURE_WIDTH                   |        |          |\n| PS_PRODUCT_SHORT_DESC_LIMIT                |        |          |\n```\n\n----------------------------------------\n\nTITLE: PrestaShop .htaccess Comment Marker\nDESCRIPTION: Identifier comment that marks where additional .htaccess rules should be placed. PrestaShop uses this comment to maintain custom rules during .htaccess regeneration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/image.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# ~~end~~ Do not remove this comment, Prestashop will keep automatically the code outside this comment when .htaccess will be generated again\n```\n\n----------------------------------------\n\nTITLE: Updating Tab Status by Class Name Command in PHP\nDESCRIPTION: This PHP class represents a command in PrestaShop's domain layer that updates a tab's status based on the class name. It utilizes constructor parameters to accept the class name and desired status. The command is handled by a specific handler class implementing the relevant interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tab/_partials/update-tab-status-by-class-name-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tab\\Command\\UpdateTabStatusByClassNameCommand\n```\n\n----------------------------------------\n\nTITLE: Show Controller Implementation in PHP\nDESCRIPTION: ModuleFrontController implementation for showing a specific item with ID and slug parameters\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyModuleAddingRoutesShowModuleFrontController extends ModuleFrontController\n{\n    public function initContent()\n    {\n        // It is just an example. Remember to always validate the input data!\n        $this->context->smarty->assign(\n            [\n              'id' => Tools::getValue('id'),\n              'slug' => Tools::getValue('slug')\n            ]\n        );\n        \n        $this->setTemplate('module:mymoduleaddingroutes/views/templates/front/show.tpl');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Rule Command - PrestaShop PHP\nDESCRIPTION: This PHP class, AddCartRuleToCartCommand, is used to add a cart rule (voucher or discount) to a specific cart in a PrestaShop environment. It requires two integer parameters on construction: the cart ID and the cart rule ID. The class is processed by AddCartRuleToCartHandler, which must implement the AddCartRuleToCartHandlerInterface and returns void. No direct output is expected from the command, but side effects occur in the cart state. Make sure the referenced handler classes and interfaces exist as dependencies.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/add-cart-rule-to-cart-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\Command\\AddCartRuleToCartCommand\n// Adds cart rule to given cart.\n```\n\n----------------------------------------\n\nTITLE: Implementing IpAddressType in PHP Form Builder\nDESCRIPTION: Shows how to add an IP address input field to a form using the IpAddressType class. This implementation extends the base form builder to include an IP address field.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/ip-address.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\IpAddressType;\n\nclass CustomType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add(\n                'my_ip',\n                IpAddressType::class\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Type Documentation Example\nDESCRIPTION: Example showing proper documentation of array types using PHPDoc annotations\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/coding-standards/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var string[] Collection of IETF language tag (eg. \"en-US\")\n */\npublic $locales;\n```\n\n----------------------------------------\n\nTITLE: Executing displayFeatureValuePostProcess Hook in PHP\nDESCRIPTION: Hook execution code that runs after processing feature values in the admin controller. Allows access to and modification of error messages through the passed errors reference parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFeatureValuePostProcess.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'displayFeatureValuePostProcess',\n                ['errors' => &$this->errors]\n            )\n```\n\n----------------------------------------\n\nTITLE: Deleting Addresses in Bulk With Domain Command - PrestaShop - PHP\nDESCRIPTION: Defines the BulkDeleteAddressCommand class for performing a bulk delete operation on addresses within PrestaShop. This command expects an array of integer address IDs as its constructor parameter and is handled by BulkDeleteAddressHandler, which implements the corresponding handler interface. The operation returns void and requires adherence to PrestaShop's command-handler infrastructure. Suitable for integrations or customizations that aim to streamline address removals in batch processes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/bulk-delete-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Address\\Command\\BulkDeleteAddressCommand\n```\n\n----------------------------------------\n\nTITLE: Using BulkToggleStateStatusCommand in PrestaShop for Bulk Status Toggle\nDESCRIPTION: This command class is used to toggle the status of multiple states at once in the PrestaShop system. It requires an expected status flag and an array of state IDs to process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/bulk-toggle-state-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\State\\Command\\BulkToggleStateStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Database for PrestaShop\nDESCRIPTION: Creates a new MySQL database named 'prestashop' with the `utf8mb4_general_ci` collation, which supports 4-byte UTF-8 characters. This command should be executed after connecting to the MySQL server.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> CREATE DATABASE prestashop COLLATE utf8mb4_general_ci;\n```\n\n----------------------------------------\n\nTITLE: Executing actionGetProductPropertiesAfter Hook in PHP\nDESCRIPTION: This PHP code snippet demonstrates how the 'actionGetProductPropertiesAfter' hook is executed using the static `Hook::exec` method. It passes the language ID (`id_lang`), the product data array (`$row` by reference, allowing modification), and the current context (`$context`) as parameters to any modules listening to this hook. This allows for alteration or addition of product properties after the initial retrieval.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetProductPropertiesAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionGetProductPropertiesAfter', [\n            'id_lang' => $id_lang,\n            'product' => &$row,\n            'context' => $context,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Clearing PrestaShop Cache via Console (Shell)\nDESCRIPTION: This shell command uses the PrestaShop console (`bin/console`) to clear the application cache. The `--no-warmup` flag prevents the cache from being rebuilt immediately. This command is typically run after modifying service configurations (like `services.yml`) to ensure the changes are loaded by the application.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/use-hooks-on-modern-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./bin/console cache:clear --no-warmup\n```\n\n----------------------------------------\n\nTITLE: Executing actionObjectAttributeGroupAddBefore Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionObjectAttributeGroupAddBefore hook is called in PrestaShop. It is executed before an attribute group is added, allowing for custom actions or modifications.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionObjectAttributeGroupAddBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionObjectAttributeGroupAddBefore')\n```\n\n----------------------------------------\n\nTITLE: Bulk Toggling Carrier Status in PrestaShop Domain (PHP)\nDESCRIPTION: Defines the BulkToggleCarrierStatusCommand class for toggling the status of multiple carriers in PrestaShop. Its constructor requires an array of carrier IDs and a boolean specifying the desired status, and it is handled by BulkToggleCarrierStatusHandler, implementing BulkToggleCarrierStatusHandlerInterface. This command does not return a value (void), and usage presupposes understanding of PrestaShop's Command-Handler pattern and PHP array/boolean data types.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/carrier/_partials/bulk-toggle-carrier-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Carrier\\Command\\BulkToggleCarrierStatusCommand\n// _Bulk toggles carrier status_\n\n// **Constructor parameters**\n//   - $array $carrierIds\n//   - $bool $expectedStatus\n\n// **Handler class**\n//   - PrestaShop\\PrestaShop\\Adapter\\Carrier\\CommandHandler\\BulkToggleCarrierStatusHandler\n//   - Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Carrier\\CommandHandler\\BulkToggleCarrierStatusHandlerInterface\n\n// **Return type**\n//   - void\n```\n\n----------------------------------------\n\nTITLE: Enum Type Changes with diff\nDESCRIPTION: Enumerates changes in the enum column for redirection types, important for adapting CSV data from PrestaShop 1.6 to 1.7.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- `redirect_type` enum('','404','301','302') NOT NULL DEFAULT '',\n- `id_product_redirected` int(10) unsigned NOT NULL DEFAULT '0',\n+ `redirect_type` enum('','404','301-product','302-product','301-category','302-category') NOT NULL DEFAULT '',\n+ `id_type_redirected` int(10) unsigned NOT NULL DEFAULT '0',\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect for Documentation Page in YAML\nDESCRIPTION: This code snippet configures a documentation page to perform a redirect using YAML front-matter. It specifies that the page should use the 'redirect' layout and provides the URL to which users will be redirected. The '_build' section with 'list: never' excludes this page from certain build operations, such as automatic listing. This is typically used in static site generators to manage page behavior without rendering content. No dependencies or parameters other than the URL are required, and usage is limited to documentation or static website configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/release-a-native-PS-module.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/maintainers-guide/release-a-native-PS-module/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: SQL Request Execution Result Return Type\nDESCRIPTION: The return type class for the SQL request execution query, which contains the execution results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-execution-result.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\SqlRequestExecutionResult\n```\n\n----------------------------------------\n\nTITLE: Running Gatling Benchmark Scenario\nDESCRIPTION: Docker command to run a Gatling benchmark scenario with specific parameters such as user count, customer count, and test duration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n\t\t-v $dir/results:/opt/gatling/results \\\n\t\t-e JAVA_OPTS=\"-DusersCount=500\n\t\t\t-DcustomersCount=20\n\t\t\t-DadminsCount=0\n\t\t\t-DrampDurationInSeconds=900\n\t\t\t-DhttpBaseUrlFO=http://shop2.stack1.prestashop.net\n\t\t\t-DhttpBaseUrlBO=http://shop2.stack1.prestashop.net/ps-admin\n\t\t\t-DadminUser=demo@prestashop.com\n\t\t\t-DadminPassword=prestashop\" \\\n\t\t--add-host=sandbox.prestashop.com:192.168.0.4 \\\n\t\tprestashop/performance-gatling \\\n\t\t-s LoadSimulation\n```\n\n----------------------------------------\n\nTITLE: Building Assets with Webpack\nDESCRIPTION: Command to compile assets using Webpack for production deployment.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/compile-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Sample Job Run Link\nDESCRIPTION: This snippet provides a template for what a job run link looks like. The link is generated after running tests and should be posted in the PR comments for reviewers to access the test results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribution-guidelines/ui-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/.../ga.tests.ui.pr/actions/runs/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect for Documentation Page - Jekyll - YAML\nDESCRIPTION: This YAML snippet defines a Jekyll documentation page that immediately redirects to another URL. The 'layout' key is set to 'redirect' to activate the redirect mechanism, and the 'redirect' key provides the target URL. The '_build' section prevents this page from appearing in certain navigation lists. No content or executable code is included; it is intended to be consumed by static site generators supporting such front-matter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/releasing-prestashop/release-publicly.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# this page is redirected so it has no content\\nlayout: redirect\\nredirect: https://www.prestashop-project.org/maintainers-guide/releasing-prestashop/release-publicly/\\n_build:\\n  list: never\\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version in Command Line\nDESCRIPTION: Command to verify Git is installed and check its version number.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Defining GetSpecificPriceForEditing Query Class in PHP\nDESCRIPTION: This code snippet defines the GetSpecificPriceForEditing query class in the PrestaShop core domain. It takes a specific price ID as a constructor parameter and is used to fetch specific price information for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-specific-price-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\Query\\GetSpecificPriceForEditing\n```\n\n----------------------------------------\n\nTITLE: Flushing MySQL Privileges\nDESCRIPTION: Reloads the grant tables in MySQL, ensuring that any newly created users or privilege changes take effect immediately without needing to restart the server. This command should be executed after granting privileges.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> FLUSH PRIVILEGES;\n```\n\n----------------------------------------\n\nTITLE: Invoking displayCrossSellingShoppingCart Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayCrossSellingShoppingCart hook within a PrestaShop theme template. The hook is used to display cross-selling items in the shopping cart.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayCrossSellingShoppingCart.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayCrossSellingShoppingCart'}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Bulk Delete Handler Interface Path\nDESCRIPTION: Interface implemented by the bulk deletion handler\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-delete-cms-page-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\BulkDeleteCmsPageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Parameters Structure for actionGetAdminOrderButtons - PrestaShop PHP\nDESCRIPTION: This PHP snippet outlines the array structure used to pass parameters to the 'actionGetAdminOrderButtons' hook in PrestaShop. It requires a Symfony OrderController instance, an integer order ID, and an ActionsBarButtonsCollection for custom admin order view buttons. Inputs are expected to be provided as an associative array, allowing modules to retrieve and interact with UI action buttons, with the main limitation being that all expected array keys must be present.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionGetAdminOrderButtons.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\narray(\\n   'controller' => (OrderController) Symfony controller,\\n   'id_order' => (int) Order ID,\\n   'actions_bar_buttons_collection' => (ActionsBarButtonsCollection) Collection of ActionsBarButtonInterface\\n);\n```\n\n----------------------------------------\n\nTITLE: Executing the 'actionEmailSendBefore' Hook with Modifiable Email Data in PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates how the PrestaShop core executes the 'actionEmailSendBefore' hook before sending an email, passing all relevant parameters by reference. Hook listeners can intercept this execution to filter or alter the email's language, template, subject, variables, recipients, attachments, and various other metadata, or even to prevent the sending. The key dependency is the PrestaShop framework (PHP), and the Hook::exec method; hook implementations must ensure parameters are properly handled. Expected input is an array of email parameters (all passed by reference), output may include modifications to these items or logic to halt the email dispatch.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionEmailSendBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionEmailSendBefore',\n            [\n                'idLang' => &$idLang,\n                'template' => &$template,\n                'subject' => &$subject,\n                'templateVars' => &$templateVars,\n                'to' => &$to,\n                'toName' => &$toName,\n                'from' => &$from,\n                'fromName' => &$fromName,\n                'fileAttachment' => &$fileAttachment,\n                'mode_smtp' => &$mode_smtp,\n                'templatePath' => &$templatePath,\n                'die' => &$die,\n                'idShop' => &$idShop,\n                'bcc' => &$bcc,\n                'replyTo' => &$replyTo,\n            ],\n            null,\n            true\n        )\n```\n\n----------------------------------------\n\nTITLE: Dynamic Hook Name Generation for PDF Templates - PrestaShop - PHP\nDESCRIPTION: This snippet outlines how PrestaShop dynamically determines hook names for PDF templates by extracting the template name from the class name and constructing the hook string. The code is a reference from the abstract `HTMLTemplate` class, showing the use of built-in string functions to derive context-specific hook names (e.g., for invoice PDFs). It's an internal Core process and does not require direct integration, but it informs module developers about hook naming conventions for customizations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/pdf.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// l. 160\n$template = ucfirst(str_replace('HTMLTemplate', '', get_class($this)));\n$hook_name = 'displayPDF' . $template;\n\n```\n\n----------------------------------------\n\nTITLE: MySQL Volume Persistence Configuration\nDESCRIPTION: Docker Compose configuration for persisting MySQL data using volumes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmysql:\n    container_name: some-mysql\n    volumes:\n      - dbdata:/var/lib/mysql\n...\nvolumes:\n  dbdata:\n```\n\n----------------------------------------\n\nTITLE: Example Behat Scenario for Free Shipping\nDESCRIPTION: A sample Behat test scenario that validates the behavior of a free shipping voucher in a cart. This example shows how the test is expressed in human-readable gherkin syntax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n  Scenario: With free shipping voucher, there is no shipping fees\n    Given on my shop, there is only 1 carrier which can ship my products\n    And his shipping fees of 5.0 euros in zone \"US\" for product whose price ranges between 0 and 150 euros\n    Given I start with an empty default cart\n    And I add a standard product into my cart, the price of the product is 50.0 euros\n    Then my cart price is currently 55 euros\n    When I use a cart rule with code \"free4behat\" that provides free shipping\n    Then my cart price is now 50 euros !\n```\n\n----------------------------------------\n\nTITLE: Identifying the DeleteCartRuleHandler Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name of the handler responsible for processing the `DeleteCartRuleCommand`. This class contains the logic to execute the actual deletion of the cart rule based on the provided `cartRuleId`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/delete-cart-rule-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\CartRule\\CommandHandler\\DeleteCartRuleHandler`\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Configuration for Mailcatcher in PrestaShop using Bash\nDESCRIPTION: This snippet demonstrates how to use the prestashop:config command to set SMTP settings for using Mailcatcher. It shows setting the mail server and SMTP port using the 'set' action and '--value' option.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-config.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/console prestashop:config set PS_MAIL_SERVER --value \"my-mailcatcher-container-name\"\nPS_MAIL_SERVER=\"my-mailcatcher-container-name\"\n$ bin/console prestashop:config set PS_MAIL_SMTP_PORT --value 1025\nPS_MAIL_SMTP_PORT=\"1025\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminShopParametersMetaControllerPostProcess<HookName>Before Hook in PHP\nDESCRIPTION: This code snippet shows how the actionAdminShopParametersMetaControllerPostProcess<HookName>Before hook is dispatched in the MetaController. The hook includes a dynamic part (<HookName>) and passes the controller instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShopParametersMetaControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminShopParametersMetaControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logging Completely in Nginx\nDESCRIPTION: This snippet shows how to completely disable access logging for a server block in Nginx. This can be used if access logging is not required for the PrestaShop installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/webservers/nginx.md#2025-04-22_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n    access_log off\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutOfStockType Constants in PHP\nDESCRIPTION: Constants defining the possible behaviors when a product is out of stock in PrestaShop. Options include not available (0), available (1), or using default configuration (2).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/stock.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Stock\\ValueObject\\OutOfStockType;\n\nOutOfStockType::OUT_OF_STOCK_NOT_AVAILABLE = 0; // Not available when out of stock\nOutOfStockType::OUT_OF_STOCK_AVAILABLE = 1; // Available when out of stock\nOutOfStockType::OUT_OF_STOCK_DEFAULT = 2; // Use default configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirection using Front Matter (YAML)\nDESCRIPTION: This Front Matter block configures a web page to automatically redirect users to a specified URL (`https://www.prestashop-project.org/code-of-conduct/`). It uses the `redirect` layout and specifies the target URL. The `_build: list: never` directive prevents this page from being listed in generated site indices or navigation. It assumes a static site generator environment that supports these Front Matter keys.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/code-of-conduct.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/code-of-conduct/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the DeleteCartRuleCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command responsible for initiating the deletion of a cart rule in PrestaShop. This command encapsulates the data required for the deletion operation, specifically the cart rule ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/delete-cart-rule-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Command\\DeleteCartRuleCommand`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Interface Implemented by EditTaxHandler in PrestaShop PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and interface name (`EditTaxHandlerInterface`) that the `EditTaxHandler` class implements. This ensures that the handler conforms to the contract defined in the Core domain for handling tax edit commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/edit-tax-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Tax\\CommandHandler\\EditTaxHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Using Array Literals for Translation Detection in PHP\nDESCRIPTION: Example of using array literals to declare translatable wordings. This approach doesn't translate the text at runtime but makes the strings discoverable by the translation extractor tool.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/internationalization/translation/translation-tips.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n[\n    'key' => 'This is a sample text',\n    'domain' => 'Admin.Some.Feature',\n    'parameters' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Pack Products Query Handler Implementation in PrestaShop PHP\nDESCRIPTION: Handler class implementation that processes the GetPackedProducts query. Implements the GetPackedProductsHandlerInterface to handle pack product retrieval operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-packed-products.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Pack\\QueryHandler\\GetPackedProductsHandler\n```\n\n----------------------------------------\n\nTITLE: Using EditRootCategoryCommand Class in PrestaShop\nDESCRIPTION: The EditRootCategoryCommand class is used to edit the Home category in PrestaShop. It accepts a category ID parameter in its constructor and is handled by the EditRootCategoryHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/edit-root-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\EditRootCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Deactivation Hook in PrestaShop\nDESCRIPTION: Hook dispatch call made before product deactivation in the Admin Product Controller. The hook is triggered with parameters related to the product being deactivated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDeactivateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllAssociatedProductCategoriesHandlerInterface in PHP\nDESCRIPTION: This snippet defines the RemoveAllAssociatedProductCategoriesHandlerInterface, which is implemented by the RemoveAllAssociatedProductCategoriesHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-product-categories-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\RemoveAllAssociatedProductCategoriesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Cloning PrestaShop Flashlight Repository in Bash\nDESCRIPTION: Command to clone the PrestaShop Flashlight Git repository to your local machine using SSH.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/prestashop-flashlight.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:PrestaShop/prestashop-flashlight.git\n```\n\n----------------------------------------\n\nTITLE: PHP Class Path for CMS Page Bulk Disable Command\nDESCRIPTION: Fully qualified namespace path for the command class that handles bulk disabling of CMS pages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-disable-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\BulkDisableCmsPageCommand\n```\n\n----------------------------------------\n\nTITLE: Referencing PrestaShop Configuration Table in Markdown\nDESCRIPTION: This snippet shows the reference to the ps_configuration table where PrestaShop stores its default configuration settings after installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/configuration/list-of-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`ps_configuration`\n```\n\n----------------------------------------\n\nTITLE: Theme Development Volume Binding\nDESCRIPTION: Docker Compose configuration for binding local theme directory for development.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprestashop:\n    container_name: prestashop\n    ...\n    volumes:\n      - type: bind\n        source: ./themes/mytheme\n        target: /var/www/html/themes/mytheme\n```\n\n----------------------------------------\n\nTITLE: Including Child Pages in PrestaShop Documentation using Hugo Shortcode\nDESCRIPTION: A Hugo shortcode directive that includes all child pages under the current section in the documentation structure. This is commonly used in documentation sites to automatically generate a table of contents or list of subsections.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Hugo Children Shortcode\nDESCRIPTION: Shortcode that automatically lists all child pages under the current section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children /%}}\n```\n\n----------------------------------------\n\nTITLE: Running PrestaShop Docker Container for Benchmarking\nDESCRIPTION: Docker command to run the PrestaShop container with specific environment variables and port mapping for benchmarking purposes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n-e FIXTURE_FOLDER=fixtures\\\n\t-e PS_DOMAIN=localhost:8080\\\n\t-e PS_FOLDER_ADMIN=admin1234\\\n\t-e PS_ERASE_DB=1 \\\n\t-e PS_CANONICAL_REDIRECT_DISABLE=1 \\\n\t-e DB_SERVER=host.docker.internal\\\n\t -e DB_PORT=3306\\\n\t-e DB_NAME=prestashop_bench \\\n\t-e DB_USER=prestashop_bench \\\n\t-e DB_PASSWD=prestashop_bench \\\n\t-p 8080:80 \\\n\tprestashop-bench\n```\n\n----------------------------------------\n\nTITLE: Adding custom field to SEO tab (Pre-8.1.0)\nDESCRIPTION: Example of adding a custom field to the SEO tab in PrestaShop versions before 8.1.0 using the displayAdminProductsSeoStepBottom hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/extend-product-page.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\nclass DemoOldHooks extends Module\n{\n  public function __construct()\n  {\n    // [...]\n  }\n\n  /**\n   * @return bool\n   */\n  public function install()\n  {\n      return parent::install() && $this->registerHook(['displayAdminProductsSeoStepBottom']);\n  }\n\n  public function hookDisplayAdminProductsSeoStepBottom($params)\n  {\n    $productId = $params['id_product'];\n    $formFactory = $this->get('form.factory');\n    $twig = $this->get('twig');\n\n    $product = new Product($productId);\n\n    $form = $formFactory\n      ->createNamedBuilder('seo_special_field', TextType::class, \"\")\n      ->getForm();\n\n    $template = '@Modules/demooldhooks/views/templates/seo_special_field.html.twig';\n\n    return $twig->render($template, [\n      'seo_special_field' => $form->createView()\n    ]);\n  }\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>SEO Special field</h3>\n{{ form_widget(seo_special_field) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Data Retrieval with CQRS Query\nDESCRIPTION: Complete implementation of ContactFormDataProvider showing how to use CQRS Query to retrieve contact data.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider;\n\nuse PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\DTO\\EditableContact;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Exception\\ContactException;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Query\\GetContactForEditing;\n\nfinal class ContactFormDataProvider implements FormDataProviderInterface\n{\n    /**\n     * @var CommandBusInterface\n     */\n    private $queryBus;\n\n    /**\n     * @param CommandBusInterface $queryBus\n     */\n    public function __construct(CommandBusInterface $queryBus)\n    {\n        $this->queryBus = $queryBus;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @throws ContactException\n     */\n    public function getData($contactId)\n    {\n        /** @var EditableContact $editableContact */\n        $editableContact = $this->queryBus->handle(new GetContactForEditing($contactId));\n\n        return [\n            'title' => $editableContact->getLocalisedTitles(),\n            'email' => $editableContact->getEmail(),\n            'is_messages_saving_enabled' => $editableContact->isMessagesSavingEnabled(),\n            'description' => $editableContact->getLocalisedDescription(),\n            'shop_association' => $editableContact->getShopAssociation(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PrestaShop dependencies with Composer\nDESCRIPTION: Command to install PrestaShop dependencies using Composer package manager.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/setting-up-your-local-environment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Executing gSitemapAppendUrls Hook in PrestaShop's Google Sitemap Module\nDESCRIPTION: This code snippet shows how the gSitemapAppendUrls hook is called in the Google Sitemap module. It executes the hook with the current language as a parameter and expects an array return from modules that implement this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/gSitemapAppendUrls.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(self::HOOK_ADD_URLS, array(\n            'lang' => $lang,\n        ), null, true)\n```\n\n----------------------------------------\n\nTITLE: Using Tag Style Hugo Shortcode\nDESCRIPTION: Demonstrates how to use tag-style shortcodes that surround content in Hugo. These shortcodes are processed before the Markdown parser.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{%/* ExampleShortcode */%}} My custom content goes here {{%/* /ExampleShortcode */%}}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllAssociatedProductCategoriesCommand Class in PHP\nDESCRIPTION: This snippet defines the RemoveAllAssociatedProductCategoriesCommand class in the PrestaShop core domain. It takes a product ID and a shop constraint as constructor parameters and is handled by the RemoveAllAssociatedProductCategoriesHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-product-categories-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\RemoveAllAssociatedProductCategoriesCommand\n```\n\n----------------------------------------\n\nTITLE: Adding Details Row Action in HelperList PHP\nDESCRIPTION: Demonstrates how to add a 'Details' action to each row in HelperList, useful for showing additional information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/helpers/helperlist.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->addRowAction('details');\n```\n\n----------------------------------------\n\nTITLE: Dispatching ActionAdminShopParametersProductPreferencesControllerPostProcess Hook in PHP\nDESCRIPTION: This code demonstrates how the hook is called in the ProductPreferencesController. The hook accepts a controller reference as parameter and is triggered before post-processing operations in the product preferences section.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShopParametersProductPreferencesControllerPostProcess<HookName>Before.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook(\n            'actionAdminShopParametersProductPreferencesControllerPostProcess' . $hookName . 'Before',\n            ['controller' => $this]\n        )\n```\n\n----------------------------------------\n\nTITLE: GetProductImage Handler Class Path - PHP\nDESCRIPTION: Fully qualified namespace path for the handler class that processes the GetProductImage query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-image.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Image\\QueryHandler\\GetProductImageHandler\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation Example in PHP\nDESCRIPTION: Shows how the hook is executed in PrestaShop core, demonstrating the passing of SQL query components as reference parameters for modification.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsListingFieldsModifier.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAdminProductsListingFieldsModifier', [\n            '_ps_version' => AppKernel::VERSION,\n            'sql_select' => &$sqlSelect,\n            'sql_table' => &$sqlTable,\n            'sql_where' => &$sqlWhere,\n            'sql_group_by' => &$sqlGroupBy,\n            'sql_order' => &$sqlOrder,\n            'sql_limit' => &$sqlLimit,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Module Development Volume Binding\nDESCRIPTION: Docker Compose configuration for binding local module directory for development.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprestashop:\n    container_name: prestashop\n    ...\n    volumes:\n      - type: bind\n        source: ./modules/test_module\n        target: /var/www/html/modules/test_module\n```\n\n----------------------------------------\n\nTITLE: Defining Page Redirection and Build Behavior in YAML\nDESCRIPTION: This YAML front matter block sets up a redirect for the current page. The `layout: redirect` key indicates the page's function is solely redirection. The `redirect:` key specifies the target URL. The `_build: list: never` directive instructs the build system (likely Jekyll or a similar static site generator) not to include this page in any generated lists or navigation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/reviewing-pull-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/maintainers-guide/reviewing-pull-requests/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CLI Installation with Custom Parameters\nDESCRIPTION: Example of a PrestaShop CLI installation command with recommended custom parameters for domain, database, prefix, email, and password.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/install-from-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp index_cli.php \n    --domain=example.com \n    --db_server=sql.example.com \n    --db_name=myshop\n    --db_user=root \n    --db_password=123456789 \n    --prefix=myshop_\n    --email=me@example.com\n    --password=mystrongpassword\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form Data Handler with CommandBus\nDESCRIPTION: PHP class showing basic CommandBus injection in ContactFormDataHandler constructor.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler;\n\nuse PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface;\n\nfinal class ContactFormDataHandler implements FormDataHandlerInterface\n{\n    /**\n     * @var CommandBusInterface\n     */\n    private $commandBus;\n\n    /**\n     * @param CommandBusInterface $commandBus\n     */\n    public function __construct(CommandBusInterface $commandBus)\n    {\n        $this->commandBus = $commandBus;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata with YAML Front Matter in Hugo\nDESCRIPTION: YAML front matter block used at the beginning of a Markdown file to configure page-specific settings for the Hugo static site generator. It defines metadata such as the page title, menu title, sorting weight (`weight`), chapter status (`chapter`), and homepage visibility (`showOnHomepage`).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: How to improve the documentation\nmenuTitle: Improve the documentation\nweight: 40\nchapter: true\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Module Directory Structure\nDESCRIPTION: Shows the default directory structure of a PrestaShop module with CSS, JavaScript, and template files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── css\n│   ├── external-lib.css\n│   └── style.css\n├── js\n│   └── app.js\n├── moduledemo.php\n└── views\n    └── templates\n        └── front\n            ├── included-template.tpl\n            └── moduledemo.tpl\n\n5 directories, 6 files\n```\n\n----------------------------------------\n\nTITLE: Defining Language Editing Command Class in PrestaShop Domain\nDESCRIPTION: This code references the EditLanguageCommand class that handles language editing operations. It accepts a language ID as a constructor parameter and is processed by the EditLanguageHandler which implements the EditLanguageHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/edit-language-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\EditLanguageCommand\n```\n\n----------------------------------------\n\nTITLE: Defining BulkDeleteEmployeeCommand Class in PHP\nDESCRIPTION: This snippet defines the BulkDeleteEmployeeCommand class in the PrestaShop core domain. It takes an array of employee IDs as a constructor parameter and is handled by the BulkDeleteEmployeeHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/employee/_partials/bulk-delete-employee-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Employee\\Command\\BulkDeleteEmployeeCommand\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminDeleteBefore Hook in ProductController\nDESCRIPTION: This code snippet shows how the actionAdminDeleteBefore hook is dispatched with parameters in the ProductController. The hook is triggered before an admin deletion operation and passes the relevant parameters through the $hookEventParameters variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminDeleteBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminDeleteBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Global PrestaShop Settings in YAML\nDESCRIPTION: This snippet shows how to configure PrestaShop settings that will be changed when the theme is enabled, including system configuration variables.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  global_settings:\n    configuration:\n      PS_QUICK_VIEW: false\n      NEW_PRODUCTS_NBR: 4\n      PS_PNG_QUALITY: 8\n```\n\n----------------------------------------\n\nTITLE: Updating npm to Latest Version\nDESCRIPTION: Command to update npm to the latest version by installing it as a global package. This ensures you have the most recent features and fixes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install npm -g\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Design for Cart Page in Markdown\nDESCRIPTION: This snippet shows how to embed a Figma design for the cart page using an iframe in Markdown. It provides a visual reference for the cart page layout and design.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/hummingbird/hooks/cartpage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<iframe style=\"border: 1px solid rgba(0, 0, 0, 0.1);\" width=\"100%\" height=\"450\" src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHKGzVBx5p2JaFrFocGe6p0%2FHook-Cartography%3Ftype%3Ddesign%26node-id%3D128%253A15450%26mode%3Ddev\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect using YAML Front Matter\nDESCRIPTION: This YAML front matter configures a page redirect. The `layout: redirect` key indicates the page's purpose, and the `redirect:` key specifies the target URL ('https://www.prestashop-project.org/maintainers-guide/processes/'). The `_build: list: never` setting likely prevents this page from appearing in generated lists or sitemaps. This configuration requires a compatible static site generator or build system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/processes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/maintainers-guide/processes/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect via YAML Front Matter\nDESCRIPTION: This YAML Front Matter block configures the current page to redirect to a specified URL ('https://www.prestashop-project.org/get-involved/report-issues/'). It uses the 'redirect' layout, prevents the page from being listed during the build (`_build: list: never`), and sets 'showOnHomepage' to true, likely influencing internal site structure or link generation before the redirect takes effect. This configuration is typically processed by a static site generator.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-reporting-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/get-involved/report-issues/\n_build:\n  list: never\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect with YAML Front Matter\nDESCRIPTION: This YAML front matter block defines metadata for a documentation page. It sets the page title to 'Security policy', specifies the layout as 'redirect', and provides the target URL 'https://www.prestashop-project.org/security/security-policy/' to which the user should be redirected. This configuration is typically used by static site generators to handle page redirects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/security-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\ntitle: Security policy\nlayout: redirect\nredirect: https://www.prestashop-project.org/security/security-policy/\n---\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteSqlRequestCommand Structure in PHP\nDESCRIPTION: The DeleteSqlRequestCommand class is used to delete a SqlRequest by a given ID. It takes a SqlRequestId value object as a constructor parameter and is handled by the DeleteSqlRequestHandler class which implements DeleteSqlRequestHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/delete-sql-request-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Command\\DeleteSqlRequestCommand\n```\n\n----------------------------------------\n\nTITLE: Styling PrestaShop Module Content with CSS\nDESCRIPTION: This CSS snippet provides basic styling for the module's content displayed in the front office. It targets the paragraph within the module's block.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/displaying-content-in-front-office.md#2025-04-22_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\ndiv#mymodule_block_home p {\n    font-size: 150%;\n    font-style:italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionAdminMetaBeforeWriteRobotsFile Hook in PHP\nDESCRIPTION: This code snippet shows the parameter structure passed to the actionAdminMetaBeforeWriteRobotsFile hook. It includes a reference to the robots.txt file data that can be modified by hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMetaBeforeWriteRobotsFile.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'rb_data' => &(array) File data\n);\n```\n\n----------------------------------------\n\nTITLE: RemoveCombinationCommand Class Reference - PHP\nDESCRIPTION: Command class for removing product combinations in PrestaShop. Takes a combinationId parameter and returns void. Handled by RemoveCombinationCommandHandler which implements RemoveCombinationCommandHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-combination-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\RemoveCombinationCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\RemoveCombinationCommandHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\RemoveCombinationCommandHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Hook Execution for actionAdminProductsListingResultsModifier in PHP\nDESCRIPTION: Shows how the actionAdminProductsListingResultsModifier hook is called in the core PrestaShop files. It passes the PrestaShop version, a reference to the products, and the total count as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsListingResultsModifier.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAdminProductsListingResultsModifier', [\n            '_ps_version' => AppKernel::VERSION,\n            'products' => &$products,\n            'total' => $total,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Implementing ChangePasswordType in PHP Form Builder\nDESCRIPTION: PHP example showing how to add ChangePasswordType to a custom Symfony form type. This creates the basic form structure for password changing functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/change-password.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n    \nuse PrestaShopBundle\\Form\\Admin\\Type\\ChangePasswordType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('change_password', ChangePasswordType::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionOrderStatusUpdate Hook in PHP\nDESCRIPTION: This snippet shows the structure of the parameters passed to the actionOrderStatusUpdate hook. It includes the new and old order statuses as OrderState objects, and the order ID as an integer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderStatusUpdate.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'newOrderStatus' => (object) OrderState,\n  'oldOrderStatus' => (object) OrderState,\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleRegisterHookAfter Hook in PrestaShop\nDESCRIPTION: This snippet shows how the actionModuleRegisterHookAfter hook is called after a module registers a hook. It passes the module instance and hook name as parameters to the hook execution function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleRegisterHookAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                'actionModuleRegisterHookAfter',\n                [\n                    'object' => $module_instance,\n                    'hook_name' => $hook_name,\n                ]\n            )\n```\n\n----------------------------------------\n\nTITLE: Integer Column Size Update with diff\nDESCRIPTION: Highlights size change in integer columns, essential for understanding structural evolution without data impact.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- `id_attribute_group` int(10) unsigned NOT NULL,\n+ `id_attribute_group` int(11) NOT NULL,\n```\n\n----------------------------------------\n\nTITLE: Managing Module Activation in YAML\nDESCRIPTION: This snippet demonstrates how to configure modules to be enabled, disabled, or reset when the theme is activated.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/theme-yml.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  global_settings:\n    modules:\n      to_enable:\n        # All modules below are enabled when\n        # the theme is enabled (and installed if needed).\n        # They are disabled when the theme is disabled.\n        - my-custom-module\n        - yippeeslider\n      to_disable:\n        # All modules below are disabled when the theme is enabled.\n        # They are re-enabled when the theme is disabled.\n        - homeslider\n        - blockwishlist\n      to_reset:\n        # All modules below are reset when the theme is enabled.\n        - blockreassurance\n        - blockwishlist\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference Definitions\nDESCRIPTION: Markdown link references for the Update Assistant module and Migration documentation pages using Hugo shortcode syntax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1]: {{< relref \"/8/basics/keeping-up-to-date/update\" >}}\n[2]: {{< relref \"/8/basics/keeping-up-to-date/migration\" >}}\n```\n\n----------------------------------------\n\nTITLE: Registering Assets in a Front Controller Module in PrestaShop\nDESCRIPTION: Shows how to extend the setMedia() method in a front controller to register CSS and JavaScript files on specific pages. The example demonstrates registering assets only for the product page with configuration options like priority, media type, and version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/asset-management/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function setMedia()\n{\n    parent::setMedia();\n\n    if ('product' === $this->php_self) {\n        $this->registerStylesheet(\n            'module-modulename-style',\n            'modules/'.$this->module->name.'/css/modulename.css',\n            [\n              'media' => 'all',\n              'priority' => 200,\n              'version' => 'release-2021-11'\n            ]\n        );\n\n        $this->registerJavascript(\n            'module-modulename-simple-lib',\n            'modules/'.$this->module->name.'/js/lib/simple-lib.js',\n            [\n              'priority' => 200,\n              'attributes' => 'async',\n              'version' => 'release-2021-11'\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveAllFeatureValuesFromProductHandler Class in PHP\nDESCRIPTION: This snippet defines the handler class for the RemoveAllFeatureValuesFromProductCommand. It implements the RemoveAllFeatureValuesFromProductHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-feature-values-from-product-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\FeatureValue\\CommandHandler\\RemoveAllFeatureValuesFromProductHandler\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan via Globally-Installed Composer on PHP 5.x Environment - Bash\nDESCRIPTION: Runs PHPStan using a global Composer installation in environments restricted to PHP 5.x. The _PS_ROOT_DIR_ variable informs the process of PrestaShop's root location. Multiple possible paths to Composer's global vendor bin are shown. PHPStan and PrestaShop must be available at the specified paths.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/advanced-checks.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n_PS_ROOT_DIR_=/var/www/html ~/.config/composer/vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon\n```\n\nLANGUAGE: bash\nCODE:\n```\n_PS_ROOT_DIR_=/var/www/html ~/.composer/vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for displayAdminOrderMain Hook in PHP\nDESCRIPTION: Array of parameters passed to the displayAdminOrderMain hook, containing the order ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderMain.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_order' => (int) Order ID\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Order Message Command with Handler (PrestaShop, PHP)\nDESCRIPTION: This code documents the `AddOrderMessageCommand` class in PrestaShop, used for creating a new order message within the system. The constructor requires two parameters: `$localizedName` and `$localizedMessage`, both expected to be arrays containing localized values. The command is processed by the `AddOrderMessageHandler` class, which implements the associated handler interface. Upon execution, it returns an `OrderMessageId` value object representing the newly created message. Integration with PrestaShop's Domain and Adapter layers is required; no implementation or instantiation code is shown.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-message/_partials/add-order-message-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderMessage\\Command\\AddOrderMessageCommand`\n```\n\n----------------------------------------\n\nTITLE: Executing actionOutputHTMLBefore Hook in PHP\nDESCRIPTION: This snippet shows how the 'actionOutputHTMLBefore' hook is called in PrestaShop. It passes the HTML content as a reference, allowing modules to modify the entire page output before it's rendered.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOutputHTMLBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOutputHTMLBefore', ['html' => &$html])\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules with YML in PrestaShop - YAML\nDESCRIPTION: This YAML configuration snippet is used to apply data configurations to PrestaShop modules. Dependencies include having a module with a `self_config.yml` file. Users can specify SQL scripts, file operations, and execute PHP code for complex configurations. File paths for configuration are specified in YAML format, supporting updates, deletions, and the execution of SQL and PHP files.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/testing/resources.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# This file is an example of data configuration which can be applied to a module\n\n# Data to be updated in Configuration table\nconfiguration:\n    update:\n        # Option 1: having a pair key/value\n        PAYPAL_SANDBOX: 1\n        PAYPAL_API_CARD: 0\n        # Option 2: use \"value\" subkey. Will allow to use additional keys later\n        PAYPAL_SANDBOX:\n            value: 1\n            multilang: false\n    delete:\n        - \"PAYPAL_ONBOARDING\"\n\n# SQL files to execute\nsql:\n    - file: \"path/to/file1.sql\"\n    - \"path/to/file2.sql\"\n    - \"sql/default-config.sql\"\n\n# File to copy from local disk or website\nfiles:\n    - source: \"/path/to/source/file.txt\"\n      dest: \"/module/path/docs/file.txt\"\n\n    - source: \"https://www.domain.wow/uri/of/file\"\n      dest: \"/module/path/docs/another_file.txt\"\n\n# Fox complex configuration data, allow PHP code to be executed\nphp:\n    - file: \"path/to/file.php\"\n      params:\n        - myParam1: 1\n        - oneArrayParam:\n            - \"value1\"\n            - \"value2\"\n            - withSpecificKey: \"value3\"\n\n```\n\n----------------------------------------\n\nTITLE: Executing a Hook After Customer Logout in PrestaShop PHP\nDESCRIPTION: The snippet demonstrates the use of the 'actionCustomerLogoutAfter' hook in PrestaShop. This hook is executed after a customer logs out and allows developers to insert their custom code at this point. It requires the 'PrestaShop' core with the presence of the 'Hook::exec' method, which triggers the hook, passing the customer object as an argument.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerLogoutAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCustomerLogoutAfter', ['customer' => $this])\n```\n\n----------------------------------------\n\nTITLE: Defining the Return Type for GetTaxForEditing Query in PHP\nDESCRIPTION: Specifies the class name of the object returned by the GetTaxForEditing query handler. The EditableTax object contains the tax data formatted and structured specifically for use in editing forms.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/get-tax-for-editing.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Tax\\QueryResult\\EditableTax\n```\n\n----------------------------------------\n\nTITLE: Calling displayAdminListBefore Hook in PrestaShop Template\nDESCRIPTION: Hook implementation in the list header template of PrestaShop's back office. This hook allows displaying content before the admin list view.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminListBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayAdminListBefore'}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Query Handler Implementation\nDESCRIPTION: The handler class responsible for processing the CMS category ID query. It implements the GetCmsCategoryIdHandlerForRedirectionInterface to ensure proper handling of the redirection logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/get-cms-category-id-for-redirection.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\QueryHandler\\GetCmsCategoryIdForRedirectionHandler\n```\n\n----------------------------------------\n\nTITLE: Translating with Placeholders in Smarty Templates – PrestaShop – Smarty\nDESCRIPTION: Illustrates the use of the {l} Smarty tag with the 'sprintf' parameter to interpolate values in translatable strings. The 'sprintf' array replaces placeholders like %username% with runtime values, ensuring the dynamic content is localized. Recommended for cases where variable injection is needed within translation strings; depends on PrestaShop's Smarty integration and the translation mechanism.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/new-system.md#2025-04-22_snippet_6\n\nLANGUAGE: smarty\nCODE:\n```\n{l s='Hello %username%!' sprintf=['%username%' => 'John'] d='Modules.Mymodule.Somefile'}\n```\n\n----------------------------------------\n\nTITLE: Toggling Zone Status in Bulk with PrestaShop Domain Command - PHP\nDESCRIPTION: Defines the BulkToggleZoneStatusCommand in PHP to toggle the status of multiple zones at once in PrestaShop. Requires two constructor parameters: a boolean $expectedStatus indicating the status (enabled/disabled) to set, and an array $zoneIds identifying the zones to update. The command is handled by BulkToggleZoneStatusHandler implementing the respective interface, and returns void. Intended for use with PrestaShop's command–handler DDD architecture.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/zone/_partials/bulk-toggle-zone-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Zone\\Command\\BulkToggleZoneStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Product Categories Handler Class Path\nDESCRIPTION: Fully qualified class name for the handler that processes product category associations, implementing the corresponding interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-categories-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\SetAssociatedProductCategoriesHandler\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminActivateBefore Hook in PrestaShop (PHP)\nDESCRIPTION: This code snippet demonstrates how the 'actionAdminActivateBefore' hook is triggered within the PrestaShop core, specifically in the ProductController. It uses the `dispatchWithParameters` method to execute any functions attached to this hook, passing `$hookEventParameters` which likely contain context about the activation event.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminActivateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminActivateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Hook Execution for actionAdminMetaAfterWriteRobotsFile in PHP\nDESCRIPTION: Shows how the actionAdminMetaAfterWriteRobotsFile hook is executed in the core code. It passes the robots content and a reference to the file handle to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminMetaAfterWriteRobotsFile.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionAdminMetaAfterWriteRobotsFile', [\n            'rb_data' => $robots_content,\n            'write_fd' => &$write_fd,\n        ])\n```\n\n----------------------------------------\n\nTITLE: Using ToggleLanguageStatusCommand in PrestaShop\nDESCRIPTION: The ToggleLanguageStatusCommand accepts a language ID and the expected status (enabled/disabled) to toggle a language's status. It is handled by ToggleLanguageStatusHandler which implements the ToggleLanguageStatusHandlerInterface and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/language/_partials/toggle-language-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Language\\Command\\ToggleLanguageStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionOrderSlipAdd Hook in PHP\nDESCRIPTION: This code snippet defines the structure of the parameters passed to the actionOrderSlipAdd hook. It includes the order object, a list of order slip details, and a list of quantities for each order detail.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderSlipAdd.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'order' => Order,\n  'productList' => array(\n    (int) order detail ID 1 => Order Slip Detail 1,\n    (int) order detail ID 2 => Order Slip Detail 2,\n    ...,\n    (int) order detail ID n => Order Slip Detail n\n  ),\n  'qtyList' => array(\n    (int) order detail ID 1 => (int) quantity 1,\n    (int) order detail ID 2 => (int) quantity 2,\n    ...,\n    (int) order detail ID n => (int) quantity n \n  )\n);\n```\n\n----------------------------------------\n\nTITLE: GetMetaForEditing Query Return Type\nDESCRIPTION: The return type of the GetMetaForEditing query, which is an EditableMeta object containing the meta data for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/meta/_partials/get-meta-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Meta\\QueryResult\\EditableMeta\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for DisplayOrderDetail Hook in PHP\nDESCRIPTION: Defines the parameters passed to the displayOrderDetail hook, which includes the Order object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n  'order' => (object) Order object\n);\n```\n\n----------------------------------------\n\nTITLE: Defining GetCartForViewingHandlerInterface in PHP\nDESCRIPTION: This snippet defines the interface that the GetCartForViewing query handler must implement. It ensures that the handler provides the necessary methods to process the query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-viewing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\QueryHandler\\GetCartForViewingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Invoking displayFooterCategory Hook in PHP\nDESCRIPTION: This snippet shows how to call the displayFooterCategory hook in a PrestaShop template. The hook is used to add new blocks under the products listing in a category or search page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayFooterCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h=\"displayFooterCategory\"}\n```\n\n----------------------------------------\n\nTITLE: Executing actionBeforeAjaxDie Hook in PrestaShop Controller\nDESCRIPTION: This code executes the actionBeforeAjaxDie hook with dynamic controller and method names. The hook receives the value parameter in its arguments array and is called before Ajax operations terminate.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionBeforeAjaxDie<Controller><Method>.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionBeforeAjaxDie' . $controller . $method, ['value' => $value])\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in YAML for PrestaShop Module\nDESCRIPTION: YAML configuration defining services for the DemoViewOrderHooks module. It includes parameter definition and service declarations with their dependencies using Symfony's dependency injection container.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  signatureImgDirectory: 'signatures/'\n\nservices:\n  prestashop.module.demovieworderhooks:\n    class: DemoViewOrderHooks\n    factory: [Module, getInstanceByName]\n    arguments:\n      - 'demovieworderhooks'\n\n  prestashop.module.demovieworderhooks.repository.order_repository:\n    class: PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderRepository\n\n  prestashop.module.demovieworderhooks.repository.order_signature_repository:\n    class: PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository\n    factory: ['@doctrine.orm.default_entity_manager', getRepository]\n    arguments:\n      - PrestaShop\\Module\\DemoViewOrderHooks\\Entity\\OrderSignature\n\n  prestashop.module.demovieworderhooks.presenter.order_signature_presenter:\n    class: PrestaShop\\Module\\DemoViewOrderHooks\\Presenter\\OrderSignaturePresenter\n    arguments:\n      - '@=service(\"prestashop.module.demovieworderhooks\").getPathUri() ~ parameter(\"signatureImgDirectory\")'\n```\n\n----------------------------------------\n\nTITLE: Defining KPI Row Factory Service in PrestaShop - YAML\nDESCRIPTION: This YAML snippet defines a KPI row factory service in PrestaShop, used to create and manage KPI rows on admin pages. It lists the required class and its dependencies, such as enabled languages and main country information. The service accepts multiple arguments to configure the KPI components.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/kpi-blocks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprestashop.core.kpi_row.factory.translations_page:\\n    class: PrestaShop\\PrestaShop\\Core\\Kpi\\Row\\KpiRowFactory\\n    arguments:\\n        - '@prestashop.adapter.kpi.enabled_languages'\\n        - '@prestashop.adapter.kpi.main_country'\\n        - '@prestashop.adapter.kpi.translations'\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attachments Handler Class Path\nDESCRIPTION: Full namespace path for the handler class that implements the attachment command functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-attachments-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Attachment\\CommandHandler\\SetAssociatedProductAttachmentsHandler\n```\n\n----------------------------------------\n\nTITLE: Rendering the DisplayAdminProductsOptionsStepBottom Hook in PrestaShop Templates\nDESCRIPTION: This snippet shows how the displayAdminProductsOptionsStepBottom hook is called within the product options panel template. It passes the product ID as a parameter to any modules that use this hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminProductsOptionsStepBottom.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{{ renderhook('displayAdminProductsOptionsStepBottom', { 'id_product': productId }) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminOrderCreateExtraButtons Hook in Twig Template\nDESCRIPTION: This snippet shows how the displayAdminOrderCreateExtraButtons hook is rendered in the order creation page template. It allows modules to add custom buttons to the order creation interface in the PrestaShop back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderCreateExtraButtons.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminOrderCreateExtraButtons') }}\n```\n\n----------------------------------------\n\nTITLE: Defining the ChangeOrderDeliveryAddressCommand Path in PrestaShop\nDESCRIPTION: The fully qualified namespace path for the command that changes the delivery address for an order in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/change-order-delivery-address-command.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\ChangeOrderDeliveryAddressCommand`\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionSetInvoice Hook in PHP\nDESCRIPTION: Defines the parameter structure for the actionSetInvoice hook, including Order object, OrderInvoice object, and a boolean flag for existing payment usage.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSetInvoice.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'Order' => order object,\n  'OrderInvoice' => order invoice object,\n  'use_existing_payment' => (bool)\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering the displayAdminOrderTop Hook in Twig Template\nDESCRIPTION: This snippet shows how the displayAdminOrderTop hook is rendered in the Order view template. It passes the order ID to the hook and stores the rendered content in a Twig variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderTop.md#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set displayAdminOrderTopHookContent = renderhook('displayAdminOrderTop', {'id_order': orderForViewing.id}) %}\n```\n\n----------------------------------------\n\nTITLE: Query Definition for Shop Search in PrestaShop Core Domain\nDESCRIPTION: Defines the SearchShops query class in PrestaShop's Core Domain, which is responsible for getting shops based on a given search term. It requires a string parameter and returns an array of results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/shop/_partials/search-shops.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Shop\\Query\\SearchShops\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for GetCartForViewing Query in PHP\nDESCRIPTION: This snippet defines the return type for the GetCartForViewing query. The query returns a CartView object, which contains the formatted cart information for display in the Back Office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/get-cart-for-viewing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Cart\\QueryResult\\CartView\n```\n\n----------------------------------------\n\nTITLE: Including GetWebserviceKeyForEditing Documentation with Hugo Shortcode\nDESCRIPTION: Utilized by the PrestaShop documentation build process, this Hugo shortcode includes content from a specific Markdown file. The referenced file likely contains the documentation for the `GetWebserviceKeyForEditing` query within the Webservice domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/webservice/index.md#2025-04-22_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/webservice/_partials/get-webservice-key-for-editing.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Specifying the Command Handler Return Type (PHP)\nDESCRIPTION: Indicates that the handler for the `IssueStandardRefundCommand` does not return any value (`void`) upon successful execution. Its purpose is to perform the refund action as a side effect.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-standard-refund-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nvoid\n```\n\n----------------------------------------\n\nTITLE: Rendering KPI Row with Twig - Twig\nDESCRIPTION: This Twig snippet shows how to render a KPI row in PrestaShop using the renderKpiRow method. The method takes a previously assigned KPI row and displays it within a template block. It relies on a controller call for rendering and can be used in Admin module controllers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/kpi-blocks.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block translations_kpis_row %}\\n    <div class=\"row\">\\n        {{ render(controller(\\n            'PrestaShopBundle:Admin\\\\Common:renderKpiRow',\\n            { 'kpiRow': kpiRow }\\n        )) }}\\n    </div>\\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Dispatching the `action<DefinitionId>GridDataModifier` Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet shows the dispatch call for the `action<DefinitionId>GridDataModifier` hook using PrestaShop's hook dispatcher (`$this->hookDispatcher`). The hook name is dynamically constructed by prefixing 'action' to the camelized grid definition ID (`Container::camelize($definition->getId())`). The grid data (`$data`) is passed by reference (`&`) allowing hooked functions to modify it directly.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<DefinitionId>GridDataModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n$this->hookDispatcher->dispatchWithParameters('action' . Container::camelize($definition->getId()) . 'GridDataModifier', [\n    'data' => &$data,\n]);\n```\n```\n\n----------------------------------------\n\nTITLE: Handler Interface Path - PrestaShop Command Handler Interface\nDESCRIPTION: Defines the interface path that the handler class implements for setting combination default suppliers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-combination-default-supplier-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\SetCombinationDefaultSupplierHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Rendering displayAdminOrderTabContent Hook in PrestaShop Order View\nDESCRIPTION: Code snippet showing how the displayAdminOrderTabContent hook is rendered in the order details template. The hook accepts the order ID as a parameter and can be used to add custom content to the order view tab.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminOrderTabContent.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{% set displayAdminOrderTabContent = renderhook('displayAdminOrderTabContent', {'id_order': orderForViewing.id}) %}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Activation Hook in PrestaShop\nDESCRIPTION: Hook dispatch implementation that triggers before a product is activated in the PrestaShop admin interface. The hook passes parameters through the $hookEventParameters variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerActivateBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerActivateBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Section Links with Hugo relref Shortcode\nDESCRIPTION: Shows how to create an internal link to a specific section within the current page using Hugo's relref shortcode. The example links to a section called 'cross-links'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/ref.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[This is a link to the first title]({{</* relref \"#cross-links\" */>}})\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Deletion Hook in PrestaShop\nDESCRIPTION: Hook dispatch implementation that triggers after a product is deleted in the admin panel. The hook passes parameters through $hookEventParameters for event subscribers to process post-deletion actions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDeleteAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDeleteAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameter for DeleteSpecificPriceCommand in PrestaShop PHP\nDESCRIPTION: This snippet specifies the single constructor parameter required by `DeleteSpecificPriceCommand`. It requires an integer `$specificPriceId` which uniquely identifies the specific price record to be deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-specific-price-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $specificPriceId`\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayBanner Hook in PrestaShop Template\nDESCRIPTION: Hook implementation for displaying banners at the top of pages in PrestaShop front office. This hook is used in header.tpl files of both Classic and Hummingbird themes and doesn't return an array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBanner.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayBanner'}\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelatedProductsHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the SetRelatedProductsHandler implements. It defines the contract for handlers that can process the SetRelatedProductsCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-related-products-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\SetRelatedProductsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Including AddWebserviceKeyCommand Documentation with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode is used within the PrestaShop documentation build system. It includes the Markdown content located at the specified path, which presumably contains the detailed documentation for the `AddWebserviceKeyCommand` used in the Webservice domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/webservice/index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/webservice/_partials/add-webservice-key-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Including EditFeatureValueCommand Documentation Partial in Markdown\nDESCRIPTION: This code snippet utilizes Hugo’s include-md shortcode to embed the EditFeatureValueCommand documentation section from a specified partial file. It maintains the modularity of documentation for the PrestaShop Feature domain by separating documentation into logical components. Dependencies include Hugo and the existence of the referenced markdown file; no parameters are required, and the snippet outputs the partial's content in place.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/edit-feature-value-command.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring PrestaShop Shop Generator\nDESCRIPTION: Example configuration for the PrestaShop shop generator, showing default values for various entities in the shop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCreating the \"app/config/config.yml\" file\nSome parameters are missing. Please provide them.\nshop_id (1): \ncustomers (100): \nmanufacturers (100): \nsuppliers (10): \naddresses (100): \naliases (100): \ncategories (100): \nwarehouses (2): \ncarriers (3): \nspecific_prices (100): \nattribute_groups (10): \nproducts (100): \nattributes (10): \ncarts (1000): \ncart_rules (100): \ncustomizations (10): \nfeatures (100): \nfeature_values (5): \norders (10): \nguests (10): \norder_histories (6): \nrange_prices (100): \nrange_weights (100): \nproduct_attributes (5): \nimages (100): \norder_messages (100): \ndeliveries (100): \nconnections (1000): \nproduct_suppliers (10): \norder_carriers (2): \norder_details (10): \nfeature_products (5): \nstores (100): \nprofiles (10): \nstock_availables (1): \nlangs ([fr_FR, en_US]): \n```\n\n----------------------------------------\n\nTITLE: Dispatching 'actionAdminAdminWebserviceControllerPostProcessBefore' Hook in PrestaShop Controller (PHP)\nDESCRIPTION: Demonstrates the invocation of the 'actionAdminAdminWebserviceControllerPostProcessBefore' hook in a PrestaShop admin webservice controller. This PHP snippet enables module developers to insert custom logic before the controller's post-processing, using the hook dispatching pattern. It requires PrestaShop's hook system, assumes the controller context is available, and passes the controller instance as a parameter in the array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminAdminWebserviceControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminAdminWebserviceControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Setting Product Images Command Class Path in PHP\nDESCRIPTION: Full namespace path for the command class that handles setting product images across all shops. Takes a product ID as constructor parameter and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-images-for-all-shop-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Image\\Command\\SetProductImagesForAllShopCommand\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for actionUpdateQuantity Hook in PHP\nDESCRIPTION: Defines the structure of the parameter array passed to the actionUpdateQuantity hook. It includes product ID, product attribute ID, and the new quantity value.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionUpdateQuantity.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_product' => (int) Product ID,\n  'id_product_attribute' => (int) Product attribute ID,\n  'quantity' => (int) New product quantity\n);\n```\n\n----------------------------------------\n\nTITLE: Starting a MySQL Container with Docker Run (Bash)\nDESCRIPTION: Provides the `docker run` command to start a MySQL container. It uses the `mysql:5.7` image, names the container `some-mysql`, connects it to the previously created `prestashop-net` network, sets the `MYSQL_ROOT_PASSWORD` environment variable to 'admin', and runs the container in detached mode (`-d`). The `-ti` flags are typically for interactive sessions but are included here as shown in the source; `-d` makes it run in the background.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/environments/docker.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -ti --name some-mysql --network prestashop-net -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7\n```\n\n----------------------------------------\n\nTITLE: Querying State Data for Editing - PrestaShop CQRS - PHP\nDESCRIPTION: Defines a query object for retrieving a state entity by its identifier for editing in the back office. The class requires an integer representing the state ID upon instantiation. It is processed by the GetStateForEditingHandler, which implements the GetStateForEditingHandlerInterface, and it returns an EditableState result object. This is part of the Command Query Responsibility Segregation (CQRS) architecture and requires the corresponding PrestaShop core and adapter classes to function.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/get-state-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\State\\Query\\GetStateForEditing\n```\n\n----------------------------------------\n\nTITLE: Invoking displayNav2 Hook in PHP\nDESCRIPTION: This snippet shows how to call the displayNav2 hook in a PrestaShop theme template. The hook is used to display navigation elements in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayNav2.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayNav2'}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Bulk Action Class in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom bulk action class (ExportBulkAction) by extending AbstractBulkAction and defining its type and options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-bulk-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/mymodule/src/Grid/Action/Bulk\n\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\AbstractBulkAction;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n// It extends AbstractBulkAction,\n// but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\BulkActionInterface \n// if for some reason you want to avoid using abstract class\nfinal class ExportBulkAction extends AbstractBulkAction\n{\n    public function getType()\n    {\n        return 'export';\n    }\n\n    protected function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver\n            ->setDefaults([\n                // fictional action implemented by module to export only selected customers\n                'submit_route' => 'admin_my_module_customers_bulk_export',\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hooks in PrestaShop Customer Class - PHP\nDESCRIPTION: This snippet demonstrates how to execute a hook named 'actionCustomerLogoutBefore' in PrestaShop. It passes an associative array containing the current customer instance. This is typically used to perform additional actions or cleanup tasks immediately before a customer logs out. The only dependency here is the PrestaShop framework itself.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCustomerLogoutBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCustomerLogoutBefore', ['customer' => $this])\n```\n\n----------------------------------------\n\nTITLE: Defining Core Hooks in XML Configuration\nDESCRIPTION: XML structure used in PrestaShop's hook.xml file to register Core hooks. Each hook has a unique id, name, title, and description which helps in documentation and UI display.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/register-new-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<entity_hook>\n  <fields id=\"name\">\n    <field name=\"name\"/>\n    <field name=\"title\"/>\n    <field name=\"description\"/>\n  </fields>\n  <entities>\n    <hook id=\"actionMaintenancePageFormSave\">\n      <name>actionMaintenancePageFormSave</name>\n      <title>Processing Maintenance page form</title>\n      <description>This hook is called when the Maintenance Page form is processed</description>\n    </hook>\n    <hook id=\"...\">\n      ...\n    </hook>\n  </entities>\n</entity_hook>\n</xml>\n```\n\n----------------------------------------\n\nTITLE: Query Handler Interface Definition\nDESCRIPTION: Interface that defines the contract for handling CMS page category name queries in the PrestaShop system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-category-name-for-listing.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\QueryHandler\\GetCmsPageCategoryNameForListingHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Identifying the SetTaxRulesGroupStatusHandler Class (PHP)\nDESCRIPTION: Reference to the `SetTaxRulesGroupStatusHandler` class, which is responsible for processing the `SetTaxRulesGroupStatusCommand`. This handler contains the logic to update the tax rules group status in the system and implements the `ToggleTaxRulesGroupStatusHandlerInterface`. It expects an instance of `SetTaxRulesGroupStatusCommand` to execute.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/set-tax-rules-group-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\TaxRulesGroup\\CommandHandler\\SetTaxRulesGroupStatusHandler`\n```\n\n----------------------------------------\n\nTITLE: Defining the GetAttributeGroupList Query Class Path (PHP)\nDESCRIPTION: Specifies the fully qualified namespace for the `GetAttributeGroupList` query class within the PrestaShop Core Domain. This class represents the query used to request a list of attribute groups.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-attribute-group-list.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\AttributeGroup\\Query\\GetAttributeGroupList`\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Actions from a Module in PHP\nDESCRIPTION: This code shows how to add a custom bulk action (Subscribe newsletter) to an existing grid (Customer grid) from a PrestaShop module using a hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-bulk-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// modules/mymodule/mymodule.php\n\nclass MyModule extends Module\n{\n    // ...\n\n    /**\n     * Use hook to add Bulk action for subscribing multiple customers to newsletter\n     */\n    public function hookActionCustomerGridDefinitionModifier(array $params)\n    {\n        // $params['definition'] is instance of \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition\n        $params['definition']->getBulkActions()->add(\n                (new SubmitBulkAction('subscribe_newsletter'))\n                    ->setName('Subscribe newsletter')\n                    ->setOptions([\n                        // in most cases submit action should be implemented by module\n                        'submit_route' => 'admin_my_module_customers_bulk_subscribe_newsletter',\n                    ]) \n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Product Suppliers Handler Interface - PHP\nDESCRIPTION: Interface that defines the contract for handling product supplier updates in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-suppliers-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\CommandHandler\\SetProductSuppliersHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for actionWatermark Hook in PHP\nDESCRIPTION: Defines the parameter structure for the actionWatermark hook, including image ID and product ID as integers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionWatermark.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'id_image' => (int) Image ID,\n  'id_product' => (int) Product ID\n);\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Feature Values XML Schema\nDESCRIPTION: This XML schema represents the structure for product feature values in PrestaShop. It includes fields for ID, feature ID, custom flag, and multilingual value entries. The schema supports multiple languages as shown by the language nodes with different IDs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_feature_values.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product_feature_value>\n    <id><![CDATA[]]></id>\n    <id_feature><![CDATA[]]></id_feature>\n    <custom><![CDATA[]]></custom>\n    <value>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </value>\n  </product_feature_value>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Handler Class (PHP)\nDESCRIPTION: This is the fully qualified name of the handler class responsible for executing the logic associated with the `EditCartAddressCommand`. It processes the command data to perform the address editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/edit-cart-address-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Address\\CommandHandler\\EditCartAddressHandler`\n```\n\n----------------------------------------\n\nTITLE: Hiding Header Row in CSV Export in PHP\nDESCRIPTION: Shows how to disable the header row in the CSV export using the setIncludeHeaderRow method, available from PrestaShop 8.0.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/export/csv-response.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn (new CsvResponse())\n    ->setHeadersData($headersData)\n    ->setData($lines)\n    ->setIncludedHeaderRow(false);\n```\n\n----------------------------------------\n\nTITLE: Product Feature Values Handler Class Path\nDESCRIPTION: Handler class implementation path that processes the SetProductFeatureValuesCommand and implements the corresponding handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-feature-values-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\FeatureValue\\CommandHandler\\SetProductFeatureValuesHandler\n```\n\n----------------------------------------\n\nTITLE: Initializing Tax Manager Hook Call - PHP\nDESCRIPTION: Example of how the Tax Manager hook is called within PrestaShop. The hook accepts an address parameter and additional type parameters for tax calculation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionTaxManager.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$tax_manager = $module_instance->hookTaxManager([\n    'address' => $address,\n    'params' => $type,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining the Return Type for ToggleStateStatusCommand Handler in PrestaShop PHP\nDESCRIPTION: This snippet specifies the return type of the handler method that processes the `ToggleStateStatusCommand`. The `void` return type indicates that the handler executes the status toggle operation but does not return any specific value upon successful completion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/toggle-state-status-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Defining the BulkEnableSupplierCommand Class Namespace in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the `BulkEnableSupplierCommand` in PrestaShop. This command class is part of the Core Domain layer and encapsulates the data (an array of supplier IDs) required to enable multiple suppliers in bulk. It is designed to be processed by the `BulkEnableSupplierHandler`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/supplier/_partials/bulk-enable-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Supplier\\Command\\BulkEnableSupplierCommand`\n```\n\n----------------------------------------\n\nTITLE: GetReferenceCurrency Handler Class Path\nDESCRIPTION: The handler class responsible for processing the GetReferenceCurrency query and implementing the handler interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/get-reference-currency.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\QueryHandler\\GetReferenceCurrencyHandler\n```\n\n----------------------------------------\n\nTITLE: Defining the Constructor Parameter for BulkDeleteSearchEngineCommand (PHP)\nDESCRIPTION: Specifies the constructor parameter `$searchEngineIds` for the `BulkDeleteSearchEngineCommand`. This parameter is expected to be an array containing the unique identifiers of the search engines targeted for deletion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/bulk-delete-search-engine-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$array $searchEngineIds`\n```\n\n----------------------------------------\n\nTITLE: Rendering Extra Content in Product Template\nDESCRIPTION: Smarty template code that renders the extra content provided by modules through the hook. It creates Bootstrap tabs using the content and attributes provided by the modules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayProductExtraContent.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{foreach from=$product.extraContent item=extra key=extraKey}\n    <div class=\"tab-pane fade in {$extra.attr.class}\" id=\"extra-{$extraKey}\" role=\"tabpanel\" {foreach $extra.attr as $key => $val} {$key}=\"{$val}\"{/foreach}>\n        {$extra.content nofilter}\n    </div>\n{/foreach}\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Language Resource XML Schema Template\nDESCRIPTION: A blank XML schema template for the Language resource in PrestaShop. This schema includes all possible fields that can be configured for a language entity, including id, name, ISO code, locale, language code, active status, RTL support, and date formatting options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/languages.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <language>\n    <id><![CDATA[]]></id>\n    <name><![CDATA[]]></name>\n    <iso_code><![CDATA[]]></iso_code>\n    <locale><![CDATA[]]></locale>\n    <language_code><![CDATA[]]></language_code>\n    <active><![CDATA[]]></active>\n    <is_rtl><![CDATA[]]></is_rtl>\n    <date_format_lite><![CDATA[]]></date_format_lite>\n    <date_format_full><![CDATA[]]></date_format_full>\n  </language>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Command Path Definition - PrestaShop Command Class\nDESCRIPTION: Defines the fully qualified namespace path for the command class that sets default supplier for product combinations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-combination-default-supplier-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\Command\\SetCombinationDefaultSupplierCommand\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for Stock_available Resource in PrestaShop\nDESCRIPTION: This XML schema represents the structure for the Stock_available resource in PrestaShop. It includes fields for product ID, product attribute ID, shop information, quantity, stock dependency settings, out-of-stock handling, and location information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/stock_availables.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <stock_available>\n    <id><![CDATA[]]></id>\n    <id_product><![CDATA[]]></id_product>\n    <id_product_attribute><![CDATA[]]></id_product_attribute>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <quantity><![CDATA[]]></quantity>\n    <depends_on_stock><![CDATA[]]></depends_on_stock>\n    <out_of_stock><![CDATA[]]></out_of_stock>\n    <location><![CDATA[]]></location>\n  </stock_available>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Updated Constructor Parameters for Employee Commands\nDESCRIPTION: Changes to AddEmployeeCommand constructor to include password validation parameters and required gravatar flag.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/core-updates/8.0.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(int $minLength, int $maxLength, int $minScore, bool $hasEnabledGravatar)\n```\n\n----------------------------------------\n\nTITLE: Executing displayMaintenance Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the displayMaintenance hook is called in the PrestaShop core. It uses the Hook::exec method to execute the hook with an empty array as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayMaintenance.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayMaintenance', [])\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateProductsPositionsCommand Class (PHP)\nDESCRIPTION: Specifies the fully qualified name of the command class responsible for initiating the update of product positions within a specific category in PrestaShop. It takes an array of positions (`$positions`) and a category ID (`$categoryId`) as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-products-positions-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductsPositionsCommand`\n```\n\n----------------------------------------\n\nTITLE: PrestaShop CMS Page Bulk Delete Command Class Path\nDESCRIPTION: Fully qualified class path for the command that handles bulk deletion of CMS pages\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-delete-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\BulkDeleteCmsPageCommand\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Interface for Category Position Update (PHP)\nDESCRIPTION: Specifies the fully qualified interface name (`UpdateCategoryPositionHandlerInterface`) that the `UpdateCategoryPositionHandler` implements. This interface defines the contract for handling category position updates within the PrestaShop Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/update-category-position-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Category\\CommandHandler\\UpdateCategoryPositionHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Implementing CountryChoiceType in a Custom Form Type in PHP\nDESCRIPTION: Example showing how to add a country selection field to a custom form type in PrestaShop. The example demonstrates adding the CountryChoiceType to a form builder within a custom form type class that extends Symfony's AbstractType.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/country-choice.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n\nuse PrestaShopBundle\\Form\\Admin\\Type\\CountryChoiceType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {        \n        $builder->add('country', CountryChoiceType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating External Redirects with Hugo for PrestaShop Documentation\nDESCRIPTION: This YAML front matter configuration creates a redirect from a documentation page to an external URL. It uses Hugo's redirect layout and build configuration to ensure the page redirects properly while excluding it from content lists.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/how/moving-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirect\nredirect: https://www.newsite.org/new_location\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Reference to ClearOutdatedEmployeeSessionHandlerInterface in PrestaShop\nDESCRIPTION: Fully qualified interface name that is implemented by the handler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/clear-outdated-employee-session-command.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Security\\CommandHandler\\ClearOutdatedEmployeeSessionHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Using EditCategoryCommand class in PrestaShop\nDESCRIPTION: The EditCategoryCommand class is used for editing existing categories in PrestaShop. It requires a category ID as a constructor parameter and is handled by EditCategoryHandler which implements the EditCategoryHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/edit-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\EditCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Guest Resource XML Schema\nDESCRIPTION: A blank XML schema template for the Guest resource in PrestaShop. This schema includes all available fields such as customer ID, browser information, screen details, plugin support, and language preferences.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/guests.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <guest>\n    <id><![CDATA[]]></id>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_operating_system><![CDATA[]]></id_operating_system>\n    <id_web_browser><![CDATA[]]></id_web_browser>\n    <javascript><![CDATA[]]></javascript>\n    <screen_resolution_x><![CDATA[]]></screen_resolution_x>\n    <screen_resolution_y><![CDATA[]]></screen_resolution_y>\n    <screen_color><![CDATA[]]></screen_color>\n    <sun_java><![CDATA[]]></sun_java>\n    <adobe_flash><![CDATA[]]></adobe_flash>\n    <adobe_director><![CDATA[]]></adobe_director>\n    <apple_quicktime><![CDATA[]]></apple_quicktime>\n    <real_player><![CDATA[]]></real_player>\n    <windows_media><![CDATA[]]></windows_media>\n    <accept_language><![CDATA[]]></accept_language>\n    <mobile_theme><![CDATA[]]></mobile_theme>\n  </guest>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Customer Bulk Delete Handler Implementation\nDESCRIPTION: Handler class that implements the bulk delete customer functionality through BulkDeleteCustomerHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/bulk-delete-customer-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Customer\\CommandHandler\\BulkDeleteCustomerHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Address Blank Schema XML\nDESCRIPTION: XML schema showing the blank template for creating an address resource. Contains all available fields without validation rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/testing-access.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <address>\n        <id></id>\n        <id_customer></id_customer>\n        <id_manufacturer></id_manufacturer>\n        <id_supplier></id_supplier>\n        <id_warehouse></id_warehouse>\n        <id_country></id_country>\n        <id_state></id_state>\n        <alias></alias>\n        <company></company>\n        <lastname></lastname>\n        <firstname></firstname>\n        <vat_number></vat_number>\n        <address1></address1>\n        <address2></address2>\n        <postcode></postcode>\n        <city></city>\n        <other></other>\n        <phone></phone>\n        <phone_mobile></phone_mobile>\n        <dni></dni>\n        <deleted></deleted>\n        <date_add></date_add>\n        <date_upd></date_upd>\n    </address>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Classic Theme Selectors Path\nDESCRIPTION: File path for the classic theme selectors mapping file in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/themes/classic/_dev/js/selectors.js\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Symfony Route for a Module Controller (YAML)\nDESCRIPTION: Example of a basic Symfony route definition within a PrestaShop module's `config/routes.yml` file. It specifies the internal route name (`your_route_name`), the URL path (`your-module/demo`), allowed HTTP methods (`GET`), and maps it to the controller action `MyModule\\Controller\\DemoController::demoAction` using the `_controller` default parameter. This route itself does not automatically create a menu link.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/controllers/admin-controllers/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# modules/your-module/config/routes.yml\nyour_route_name:\n    path: your-module/demo\n    methods: [GET]\n    defaults:\n      _controller: 'MyModule\\Controller\\DemoController::demoAction'\n```\n\n----------------------------------------\n\nTITLE: EditRootCategoryHandler Interface\nDESCRIPTION: The interface that the EditRootCategoryHandler class implements, defining the contract for handling root category edit commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/edit-root-category-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\CommandHandler\\EditRootCategoryHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for Category Position Update Command (PHP)\nDESCRIPTION: Indicates that the command handler for updating category positions does not return any value (`void`). This implies the operation modifies the system's state directly rather than returning a result.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/update-category-position-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler for UpdateCategoryPositionCommand (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the handler (`UpdateCategoryPositionHandler`) responsible for processing the `UpdateCategoryPositionCommand`. This class resides in the Adapter layer and contains the actual logic for updating the category position.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/update-category-position-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Category\\CommandHandler\\UpdateCategoryPositionHandler`\n```\n\n----------------------------------------\n\nTITLE: Accessing Command Help with Symfony in PHP\nDESCRIPTION: The 'help' command provides documentation for specific options in the Update Assistant CLI. This showcases built-in functionality from the Symfony Console component to assist users with understanding different command options.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/update/update-from-the-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ php bin/console backup:list help [command]\n```\n\n----------------------------------------\n\nTITLE: Filtering PrestaShopCollection with Where Method in PHP\nDESCRIPTION: Demonstrates how to use the where() method to filter a PrestaShopCollection. This example shows filtering for on-sale products and products with references starting with 'REF-'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$productCollection = new PrestaShopCollection('Product');\n$productCollection->where('on_sale', '=', true); // find products on sale\n\n$productCollection = new PrestaShopCollection('Product');\n$productCollection->where('reference', 'LIKE', 'REF-%'); // find products with reference beginning by \"REF-\"\n```\n\n----------------------------------------\n\nTITLE: Specifying the Return Type for BulkDeleteSearchEngineHandler (PHP)\nDESCRIPTION: Defines the return type of the handler for the `BulkDeleteSearchEngineCommand` as `void`. This indicates that the command execution, when handled, does not produce or return any specific value upon successful completion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/bulk-delete-search-engine-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n`void`\n```\n\n----------------------------------------\n\nTITLE: Using BulkDeleteCategoriesCommand in PrestaShop for bulk category deletion\nDESCRIPTION: The BulkDeleteCategoriesCommand class is part of PrestaShop's core domain and is used for deleting multiple categories at once. It requires an array of category IDs and a deletion mode string as constructor parameters, and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/bulk-delete-categories-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\BulkDeleteCategoriesCommand\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flow Diagram for FormHandler\nDESCRIPTION: Visualization of the FormHandler hook flow showing the sequence of hooks during create and update operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mermaid\">\ngraph TD\n    subgraph \"Update\"\n        BA(actionBeforeUpdate<strong>FormName</strong>FormHandler) --> BB(IdentifiableObject updated)\n        BB --> BC(actionAfterUpdate<strong>FormName</strong>FormHandler)\n    end  \n    subgraph \"Create\"\n        A(actionBeforeCreate<strong>FormName</strong>FormHandler) --> B(IdentifiableObject created)\n        B --> C(actionAfterCreate<strong>FormName</strong>FormHandler)\n    end\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing MaterialChoiceTableType in PHP Form Type\nDESCRIPTION: Shows how to implement the MaterialChoiceTableType in a custom Symfony form type class. The example demonstrates adding a form field named 'group_access' using MaterialChoiceTableType.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/types-reference/material-choice-table.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// path/to/your/CustomType.php\n    \nuse PrestaShopBundle\\Form\\Admin\\Type\\MaterialChoiceTableType;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('group_access', MaterialChoiceTableType::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PrestaShop Secure Key - PHP\nDESCRIPTION: PHP code snippet demonstrating how to generate the secure key required for currency rate update authentication. The key is created by combining the shop's cookie key and shop name using MD5 hashing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$secureKey = md5(_COOKIE_KEY_ . Configuration::get('PS_SHOP_NAME'));\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateInvoiceNoteHandler Interface Path (PHP)\nDESCRIPTION: This snippet shows the fully qualified interface name that the `UpdateInvoiceNoteHandler` must implement. This ensures the handler adheres to a specific contract for handling the `UpdateInvoiceNoteCommand`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/update-invoice-note-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Invoice\\CommandHandler\\UpdateInvoiceNoteHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Interface for State Status Toggling in PrestaShop PHP\nDESCRIPTION: This snippet shows the interface that the `ToggleStateStatusHandler` implements. This interface (`ToggleStateStatusHandlerInterface`), part of the Core Domain layer, defines the contract for handlers that process the state status toggle command, ensuring consistency and adherence to domain rules.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/state/_partials/toggle-state-status-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\State\\CommandHandler\\ToggleStateStatusHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Implementing SetProductTagsHandler Class in PHP\nDESCRIPTION: This snippet shows the handler class for SetProductTagsCommand. It implements the UpdateProductTagsHandlerInterface and is responsible for processing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-tags-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\SetProductTagsHandler\n```\n\n----------------------------------------\n\nTITLE: Legacy Module Override Structure (PrestaShop 1.6)\nDESCRIPTION: Shows the more complex directory structure required for module overrides in PrestaShop 1.6.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/overriding-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── css\n│   └── modules\n│       └── css\n│           ├── external-lib.css\n│           └── style.css\n├── js\n│   └── modules\n│       └── js\n│           └── app.js\n└── modules\n    └── views\n        └── templates\n            └── front\n                ├── included-template.tpl\n                └── moduledemo.tpl\n\n10 directories, 5 files\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Query Handler Interface Path\nDESCRIPTION: Fully qualified namespace path for the interface that defines the contract for the query handler.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/get-cms-page-parent-category-id-for-redirection.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\QueryHandler\\GetCmsPageParentCategoryIdForRedirectionHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Limit Parameter Examples in PHP\nDESCRIPTION: Examples demonstrating how to limit the number of results and implement pagination\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/tutorials/advanced-use/additional-list-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'states',\n    'limit'  => '5'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$opt = [\n    'resource' => 'states',\n    'limit'  => '9,5'\n];\n```\n\n----------------------------------------\n\nTITLE: Using BulkDeleteProfileCommand in PrestaShop Core Domain (PHP)\nDESCRIPTION: The BulkDeleteProfileCommand class is used to bulk delete profiles by their IDs. It takes an array of profile IDs as a constructor parameter and is handled by the BulkDeleteProfileHandler which implements BulkDeleteProfileHandlerInterface. The command returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/profile/_partials/bulk-delete-profile-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Profile\\Command\\BulkDeleteProfileCommand\n```\n\n----------------------------------------\n\nTITLE: CMS Page Category Handler Interface Path - PHP\nDESCRIPTION: Interface definition path that the handler class implements for CMS page category editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/edit-cms-page-category-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\CommandHandler\\EditCmsPageCategoryHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Builder Service in YAML\nDESCRIPTION: YAML configuration for declaring a Form Builder service for the contact form, specifying the Form Type and Form Data Provider.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nprestashop.core.form.identifiable_object.builder.contact_form_builder:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Builder\\FormBuilder'\n  factory: 'prestashop.core.form.builder.form_builder_factory:create'\n  arguments:\n    - 'PrestaShopBundle\\Form\\Admin\\Configure\\ShopParameters\\Contact\\ContactType'\n    - '@prestashop.core.form.identifiable_object.data_provider.contact_form_data_provider'\n```\n\n----------------------------------------\n\nTITLE: List Template in HTML\nDESCRIPTION: Simple template for listing view\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>List template</h1>\n```\n\n----------------------------------------\n\nTITLE: Executing actionOrderStatusPostUpdate Hook in PrestaShop Core\nDESCRIPTION: This snippet shows how the actionOrderStatusPostUpdate hook is called in the PrestaShop core. It passes the new and old order statuses, the order ID, and sets various execution parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionOrderStatusPostUpdate.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionOrderStatusPostUpdate', [\n            'newOrderStatus' => $new_os,\n            'oldOrderStatus' => $old_os,\n            'id_order' => (int) $order->id,\n        ], null, false, true, false, $order->id_shop)\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleCmsPageCategoryStatusCommand Class in PHP\nDESCRIPTION: This snippet defines the ToggleCmsPageCategoryStatusCommand class, which is used to toggle the status of CMS page categories. It requires a CMS page category ID as a constructor parameter and is handled by the ToggleCmsPageCategoryStatusHandler class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/toggle-cms-page-category-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\ToggleCmsPageCategoryStatusCommand\n```\n\n----------------------------------------\n\nTITLE: ProductCategoriesType Fields Structure\nDESCRIPTION: Table defining the fields, types and commands for product categories management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Field type                       | Description            | CQRS Commands |\n|:-------|:---------------------------------|:-----------------------|---------------|\n| `categories` | `ChoiceCategoriesTreeType` | List of associated categories | `UpdateProductCategoriesCommand` |\n| `id_category_default` | `ChoiceType` | **One** of the `Category` as default | `UpdateProductDefaultCategoryCommand` |\n| `new_category` | `SimpleCategory` | Sub form to add and associate a new *Category* entity | `AddCategoryCommand` |\n```\n\n----------------------------------------\n\nTITLE: Ordering and Grouping PrestaShopCollection in PHP\nDESCRIPTION: Demonstrates how to order and group a PrestaShopCollection. The first example orders products by reference in descending order, while the second groups products by supplier ID.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/prestashopcollection.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$productCollection = (new PrestaShopCollection('Product'))\n    ->orderBy('reference', 'desc');\n\n$productCollection = (new PrestaShopCollection('Product'))\n    ->groupBy('id_supplier');\n```\n\n----------------------------------------\n\nTITLE: Command Class Definition - PrestaShop Customer Service\nDESCRIPTION: PHP class definition for bulk deleting customer service threads. Takes an array of customerThreadIds as constructor parameter and returns void. Handled by BulkDeleteCustomerThreadHandler which implements BulkDeleteCustomerThreadHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer-service/_partials/bulk-delete-customer-thread-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\Command\\BulkDeleteCustomerThreadCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\BulkDeleteCustomerThreadHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CustomerService\\CommandHandler\\BulkDeleteCustomerThreadHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Using EditManufacturerCommand in PrestaShop Core Domain\nDESCRIPTION: The EditManufacturerCommand class is responsible for editing manufacturer data. It requires a manufacturer ID as a constructor parameter and is handled by the EditManufacturerHandler which implements the EditManufacturerHandlerInterface. The command returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/manufacturer/_partials/edit-manufacturer-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Manufacturer\\Command\\EditManufacturerCommand\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI Globally (Shell)\nDESCRIPTION: Installs the Vue.js Command Line Interface tool globally using npm. This is a prerequisite for creating and managing Vue.js projects via the command line.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g @vue/cli\n```\n\n----------------------------------------\n\nTITLE: Declaring the storeId Constructor Parameter in PHP\nDESCRIPTION: Defines the `$storeId` integer parameter required by the `ToggleStoreStatusCommand` constructor. This parameter identifies the specific store whose status needs to be toggled.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/store/_partials/toggle-store-status-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $storeId`\n```\n\n----------------------------------------\n\nTITLE: Product Categories Handler Interface Path\nDESCRIPTION: Interface that must be implemented by the handler class for setting product category associations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-associated-product-categories-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\SetAssociatedProductCategoriesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Including GetFeatureValueForEditing Documentation Partial in Markdown\nDESCRIPTION: This code snippet includes the GetFeatureValueForEditing query documentation via Hugo's include-md syntax, promoting documentation modularity for the Feature Value domain. It provides technical detail for retrieving feature values in preparation for editing, referencing its own partial. Hugo static site generator is required; the snippet includes no parameters, with the referenced file displayed in context.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/index.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{{%  include-md \"content/8/development/architecture/domain/references/feature/_partials/get-feature-value-for-editing.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack Globally\nDESCRIPTION: Command to install Webpack globally using npm. This makes Webpack available as a command-line tool for bundling and optimizing theme assets.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install webpack -g\n```\n\n----------------------------------------\n\nTITLE: Defining BulkEnableCmsPageCategoryCommand Class in PHP\nDESCRIPTION: This class is used for enabling multiple CMS category pages. It takes an array of CMS page category IDs as a constructor parameter. The command is handled by BulkEnableCmsPageCategoryHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page-category/_partials/bulk-enable-cms-page-category-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPageCategory\\Command\\BulkEnableCmsPageCategoryCommand\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Orders in PrestaShop Core\nDESCRIPTION: The AddProductToOrderCommand is used to add a product to an existing order. It requires the order ID, product ID, combination ID, product prices (with and without tax), and product quantity.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/add-product-to-order-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\Product\\Command\\AddProductToOrderCommand\n```\n\n----------------------------------------\n\nTITLE: Executing actionAdminLoginControllerForgotAfter Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionAdminLoginControllerForgotAfter hook is executed in the AdminLoginController. It is called after the initialization of the forgot action in the login controller, passing the controller instance and employee object as parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerForgotAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n                    'actionAdminLoginControllerForgotAfter',\n                    [\n                        'controller' => $this,\n                        'employee' => $employee,\n                    ]\n                )\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Form Data Handler Service in YAML\nDESCRIPTION: YAML configuration for injecting CommandBus into the ContactFormDataHandler service.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CQRS-usage-in-forms.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_handler.yml\n\nprestashop.core.form.identifiable_object.data_handler.contact_form_data_handler:\n  class: 'PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\ContactFormDataHandler'\n  arguments:\n    - '@prestashop.core.command_bus'\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Template for Custom Bulk Action\nDESCRIPTION: This Twig template defines the HTML structure for rendering a custom bulk action button in the PrestaShop admin grid interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-bulk-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Bulk/export.html.twig #}\n\n{# This button should be used with SubmitBulkActionExtension grid extension in Javascript #}\n\n<button id=\"{{ '%s_grid_bulk_action_%s'|format(grid.id, action.id) }}\"\n        class=\"dropdown-item js-bulk-action-submit-btn\"\n        type=\"button\"\n        data-form-url=\"{{ path(action.options.submit_route) }}\"\n        data-form-method=\"GET\"\n>\n  {{ action.name }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Executing Hook for Category Creation in PrestaShop\nDESCRIPTION: This PHP snippet demonstrates the execution of the 'actionCategoryAdd' hook when a category is created. It requires the PrestaShop framework and involves passing an associative array with a 'category' key referencing the current instance. No prior exceptions or chaining are needed for this operation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCategoryAdd.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCategoryAdd', ['category' => $this])\n```\n\n----------------------------------------\n\nTITLE: Using UpdateProductTypeCommand in PrestaShop\nDESCRIPTION: The UpdateProductTypeCommand accepts a product ID and product type string as constructor parameters. It's handled by the UpdateProductTypeHandler class which implements the UpdateProductTypeHandlerInterface. The command execution returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-product-type-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\UpdateProductTypeCommand\n```\n\n----------------------------------------\n\nTITLE: Dispatching Product Sort Hook in PrestaShop Admin Controller\nDESCRIPTION: Hook dispatch call used before product sorting in the admin product controller. Takes hookEventParameters as an argument to pass contextual data to hook subscribers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerSortBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerSortBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Single Hook in PrestaShop Module Installation\nDESCRIPTION: This example demonstrates how a PrestaShop module subscribes to the 'registerGDPRConsent' hook during the installation process using the registerHook() method.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/hook/subscribing-to-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Somemodule extends Module\n{\n    public function install()\n    {\n        return (\n            parent::install() \n            && $this->registerHook('registerGDPRConsent') // <-- shorthand to Hook::registerHook()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Store Configuration with PrestaShop Data\nDESCRIPTION: Example of accessing PrestaShop data in Vue.js store configuration using window object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/templating/vuejs/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { yourModule } = window;\nconst { keyA, keyB } = yourModule;\n\nexport default {\n    state: {\n        keyA,\n        keyB,\n        yourModule\n    },\n    getters: {\n        keyA: (state) => state.keyA,\n        keyB: (state) => state.keyB,\n        yourModule: (state) => state.yourModule,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Parameter for EditTaxCommand in PrestaShop PHP\nDESCRIPTION: This snippet specifies the constructor parameter required by the `EditTaxCommand`. It mandates an integer `$taxId`, which serves to identify the specific tax record that needs to be modified.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/edit-tax-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $taxId`\n```\n\n----------------------------------------\n\nTITLE: Identifying the Interface Implemented by UpdateCombinationSuppliersHandler in PHP\nDESCRIPTION: Specifies the interface `UpdateCombinationSuppliersHandlerInterface` that the `UpdateCombinationSuppliersHandler` implements. This ensures the handler adheres to a defined contract for handling the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-suppliers-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationSuppliersHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: BasicInformationType Fields Structure\nDESCRIPTION: Table defining the fields and their types for basic product information management.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/page-reference/back-office/product/form/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Field type                       | Description            |\n|:-------|:---------------------------------|:-----------------------|\n| `type_product` | `ChoiceType` | Type of product: Standard, virtual or Pack of Product |\n| `name` | `TranslateType` | Product name (localized) |\n```\n\n----------------------------------------\n\nTITLE: Executing displaybackOfficeTop Hook in PrestaShop\nDESCRIPTION: Core hook execution for displaying content when hovering over admin panel tabs. The hook is called from AdminController.php and doesn't return an array or handle exceptions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBackOfficeTop.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displaybackOfficeTop')\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for RTL CSS Files in PrestaShop\nDESCRIPTION: Demonstrates the naming convention for RTL versions of CSS files in PrestaShop. The RTL version is created by adding '_rtl' to the end of the original filename.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/rtl.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n| Original name | RTL version name\n|---------------|----------\n|`theme.css`    | `theme_rtl.css`\n|`theme-custom.css` | `theme-custom_rtl.css`\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteCategoryMenuThumbnailImageCommand Class in PHP\nDESCRIPTION: This code snippet defines the DeleteCategoryMenuThumbnailImageCommand class in the PrestaShop Core Domain. It takes a category ID and a menu thumbnail ID as constructor parameters. The command is handled by DeleteCategoryMenuThumbnailImageHandler and returns void.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/delete-category-menu-thumbnail-image-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\Command\\DeleteCategoryMenuThumbnailImageCommand\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL secure_file_priv Directory - MySQL - SQL\nDESCRIPTION: This SQL query checks the value of the 'secure_file_priv' system variable to determine the allowed directory for exporting files from MySQL. Useful when encountering export permission errors related to OUTFILE operations. Requires administrative access on the MySQL server. Outputs the directory path allowed for file exports or an empty result if no restrictions are set.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SHOW VARIABLES LIKE \"secure_file_priv\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Form Action Change in YAML\nDESCRIPTION: YAML configuration for using the FilterFormFactoryFormActionDecorator to change the form action. This approach is simpler and only requires specifying the search route.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/work-with-search-form/custom-form-factory.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# your-module/config/services.yml\n    # Define form factory decorator\n    prestashop.core.grid.filter.credit_slip_form_factory:\n        class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\FilterFormFactoryFormActionDecorator'\n        arguments:\n            - '@prestashop.core.grid.filter.form_factory'\n            - '@router'\n            - 'admin_credit_slips_search' # You just need to specify your search route\n\n    # Use the decorator in the grid factory instead of the default one\n    prestashop.core.grid.factory.credit_slip:\n        class: 'PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory'\n        arguments:\n            - '@prestashop.core.grid.definition.factory.credit_slip'\n            - '@prestashop.core.grid.data.factory.credit_slip_decorator'\n            - '@prestashop.core.grid.filter.credit_slip_form_factory'\n            - '@prestashop.core.hook.dispatcher'\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack in Bash\nDESCRIPTION: Command to start the Docker Compose stack that will run the PrestaShop Flashlight instance and related services.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/advanced/prestashop-flashlight.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Defining PrestaShop Translation Duplicate Finder Command Path\nDESCRIPTION: Specifies the file path for the CheckTranslationDuplicatesCommand class, which implements the functionality to find duplicate translations in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-translation-find-duplicates.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nsrc/PrestaShopBundle/Command/CheckTranslationDuplicatesCommand.php\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ObjectModel Extension Class\nDESCRIPTION: Example of creating a new class that extends the ObjectModel class in PrestaShop. This is the first step in implementing a new entity that will be managed by the legacy ORM system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/database/objectmodel.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Cms extends ObjectModel\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Activating PrestaShop UI Kit Form Theme\nDESCRIPTION: Code snippet showing how to enable the PrestaShop UI Kit Form Theme in Twig templates. This is required until it becomes the default theme.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/form/form-theme/form-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% form_theme form '@PrestaShop/Admin/TwigTemplateForm/prestashop_ui_kit_base.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Generated Behat Step Definition in PHP\nDESCRIPTION: Initial PHP code snippet generated by Behat for the new step definition. It includes a placeholder implementation throwing a PendingException.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/testing/integration-tests/how-to-create-your-own-behat-tests.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Given the carrier :arg1 has no handling costs\n */\npublic function theCarrierHasNoHandlingCosts($arg1)\n{\n    throw new PendingException();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MultistoreConfigField Component in JavaScript\nDESCRIPTION: This JavaScript code initializes the MultistoreConfigField component, which is necessary for frontend functionality of multistore configuration fields.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/multistore/configuration-forms/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.prestashop.component.initComponents(\n    [\n        'MultistoreConfigField',\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying the Tax ID Parameter for GetTaxForEditing Query in PHP\nDESCRIPTION: Defines the constructor parameter for the GetTaxForEditing query. It requires an integer representing the unique identifier (`taxId`) of the tax record to be retrieved for editing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax/_partials/get-tax-for-editing.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$int $taxId\n```\n\n----------------------------------------\n\nTITLE: Removing Product Tags Command Class Path\nDESCRIPTION: Fully qualified namespace path for the command class that handles removal of all product tags.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-product-tags-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Command\\RemoveAllProductTagsCommand\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Migration Guide Page\nDESCRIPTION: YAML front matter block defining metadata for the migration guide page, including title, menu title, chapter status, weight, and summary.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: How to migrate Back Office pages to Symfony\nmenuTitle: Migration guide\nchapter: true\nweight: 40\nsummary: \"The guide we use to migrate pages to Symfony\"\n---\n```\n\n----------------------------------------\n\nTITLE: Executing displayBeforeCarrier Hook - PHP\nDESCRIPTION: Shows how the displayBeforeCarrier hook is executed in the code, passing the current cart object from the checkout session.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBeforeCarrier.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('displayBeforeCarrier', ['cart' => $this->getCheckoutSession()->getCart()])\n```\n\n----------------------------------------\n\nTITLE: Building Custom Gatling Docker Image\nDESCRIPTION: Command to build a customized Gatling Docker image for running benchmark scenarios.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t prestashop-bench-gatling .\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Manufacturer Blank XML Schema\nDESCRIPTION: This XML schema represents the structure for a manufacturer in PrestaShop. It includes fields for manufacturer details such as ID, active status, name, dates, multilingual descriptions, meta information, and associated addresses.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/manufacturers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <manufacturer>\n    <id><![CDATA[]]></id>\n    <active><![CDATA[]]></active>\n    <name><![CDATA[]]></name>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </description>\n    <short_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </short_description>\n    <meta_title>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_title>\n    <meta_description>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_description>\n    <meta_keywords>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </meta_keywords>\n    <associations>\n      <addresses>\n        <address>\n          <id><![CDATA[]]></id>\n        </address>\n      </addresses>\n    </associations>\n  </manufacturer>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Parameters Converter for Action Detection in PrestaShop PHP\nDESCRIPTION: Introduced in PrestaShop 1.7.7.0, the LegacyParametersConverter helps bridge legacy and new Symfony routing by converting and linking parameters. This snippet shows how to retrieve the controller action parameter which should coincide with legacy parameters when correctly configured.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/tips-and-tricks/hook-tips.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$action = Tools::getValue('action');\n```\n\n----------------------------------------\n\nTITLE: Invoking DisplayContactRightColumn Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to call the displayContactRightColumn hook in a PrestaShop theme template. It allows for adding custom content to the right column of the contact page.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayContactRightColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayContactRightColumn'}\n```\n\n----------------------------------------\n\nTITLE: Identifying the BulkDeleteSearchEngineHandlerInterface (PHP)\nDESCRIPTION: Specifies the fully qualified namespace and interface name for the `BulkDeleteSearchEngineHandlerInterface`. This interface, located in the Core Domain, defines the contract that any handler processing the `BulkDeleteSearchEngineCommand` must implement, ensuring consistent handling logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/bulk-delete-search-engine-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\CommandHandler\\BulkDeleteSearchEngineHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: PHP Return Type for GetCombinationSuppliers Query\nDESCRIPTION: Return type definition specifying an array of ProductSupplierForEditing objects.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-combination-suppliers.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\QueryResult\\ProductSupplierForEditing[]\n```\n\n----------------------------------------\n\nTITLE: Specifying Handler Class for UpdateCombinationPricesCommand in PHP\nDESCRIPTION: This snippet specifies the handler class for the UpdateCombinationPricesCommand. The handler implements the UpdateCombinationPricesHandlerInterface and is responsible for processing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-prices-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationPricesHandler\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Combination\\CommandHandler\\UpdateCombinationPricesHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying the Tax Rules Group ID Parameter (PHP)\nDESCRIPTION: Defines the constructor parameter for the `DeleteTaxRulesGroupCommand`. It requires an integer `$taxRulesGroupId` which identifies the specific tax rules group to be deleted.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/delete-tax-rules-group-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`$int $taxRulesGroupId`\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductSupplierOptionsHandlerInterface in PHP\nDESCRIPTION: This code snippet shows the interface implemented by the GetProductSupplierOptionsHandler. It defines the contract for handling the GetProductSupplierOptions query.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-supplier-options.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\Supplier\\QueryHandler\\GetProductSupplierOptionsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Price Priority Command Class Path - PHP\nDESCRIPTION: Fully qualified class path for the command that sets specific price priorities for a product. Takes product ID and priorities array as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-specific-price-priority-for-product-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\Command\\SetSpecificPricePriorityForProductCommand\n```\n\n----------------------------------------\n\nTITLE: Defining Blank XML Schema for Price Range in PrestaShop\nDESCRIPTION: This XML snippet provides a blank schema for the price_range resource in PrestaShop. It includes fields for id, id_carrier, delimiter1, and delimiter2. This structure is used for creating or updating price range data via the PrestaShop API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/price_ranges.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <price_range>\n    <id><![CDATA[]]></id>\n    <id_carrier><![CDATA[]]></id_carrier>\n    <delimiter1><![CDATA[]]></delimiter1>\n    <delimiter2><![CDATA[]]></delimiter2>\n  </price_range>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Show Template in HTML\nDESCRIPTION: Template for showing item details with dynamic ID and slug values\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/moduleRoutes.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Show template</h1>\nId: {$id}\nSlug: {$slug}\n```\n\n----------------------------------------\n\nTITLE: Template Structure Example\nDESCRIPTION: Shows the recommended file path structure for template partials in PrestaShop themes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/guidelines.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/_partials/\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Utilities\nDESCRIPTION: The snippet demonstrates the command to install the MySQL Utilities package necessary for using mysqldiff on Ubuntu. MySQL client must be installed prior to this.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napt install mysql-utilities\n```\n\n----------------------------------------\n\nTITLE: Calling DisplayLeftColumn Hook in PHP\nDESCRIPTION: This snippet demonstrates how to call the displayLeftColumn hook in a PrestaShop theme template. The hook is used to display new elements in the left-hand column of a page in the front office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayLeftColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayLeftColumn'}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCombinationStockHandler Class in PHP\nDESCRIPTION: This snippet defines the handler class for the UpdateCombinationStockCommand. It implements the UpdateCombinationStockHandlerInterface and is responsible for processing the command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/update-combination-stock-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\UpdateCombinationStockHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop SQL Request Execution Result Query Class Path\nDESCRIPTION: The fully qualified namespace path to the GetSqlRequestExecutionResult query class in PrestaShop's Core Domain.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-sql-request-execution-result.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\Query\\GetSqlRequestExecutionResult\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Handler Implementation Path\nDESCRIPTION: Full namespace path for the command handler class and its interface implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-global-specific-price-priority-command.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\SpecificPrice\\CommandHandler\\SetGlobalSpecificPricePriorityHandler\n```\n\nLANGUAGE: markdown\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\CommandHandler\\SetGlobalSpecificPricePriorityHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirection and Visibility with YAML Front Matter\nDESCRIPTION: This YAML snippet defines front matter for a documentation page. The `layout: redirect` specifies a redirect layout, `redirect:` provides the target URL, `_build: list: never` likely prevents the page from appearing in generated lists, and `showOnHomepage: true` might indicate its inclusion on the homepage (possibly as a link before redirecting). This configuration is typically used by static site generators.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-by-testing-pull-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/maintainers-guide/test-pr-and-branches/\n_build:\n  list: never\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing GetCreditSlipIdsByDateRangeHandler in PHP\nDESCRIPTION: This snippet shows the handler class for the GetCreditSlipIdsByDateRange query. It implements the GetCreditSlipIdsByDateRangeHandlerInterface and processes the query to retrieve credit slip IDs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/credit-slip/_partials/get-credit-slip-ids-by-date-range.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CreditSlip\\QueryHandler\\GetCreditSlipIdsByDateRangeHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveAllAssociatedCombinationSuppliersHandler in PHP\nDESCRIPTION: This code snippet shows the implementation of the RemoveAllAssociatedCombinationSuppliersHandler class. It handles the RemoveAllAssociatedCombinationSuppliersCommand and implements the RemoveAllAssociatedCombinationSuppliersHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/remove-all-associated-combination-suppliers-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\CommandHandler\\RemoveAllAssociatedCombinationSuppliersHandler\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Customer XML Schema Template\nDESCRIPTION: A blank XML schema template for the Customer resource in PrestaShop. This template includes all available fields with empty CDATA sections to be populated when creating or updating customer records via the API.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/customers.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <customer>\n    <id><![CDATA[]]></id>\n    <id_default_group><![CDATA[]]></id_default_group>\n    <id_lang><![CDATA[]]></id_lang>\n    <newsletter_date_add><![CDATA[]]></newsletter_date_add>\n    <ip_registration_newsletter><![CDATA[]]></ip_registration_newsletter>\n    <last_passwd_gen><![CDATA[]]></last_passwd_gen>\n    <secure_key><![CDATA[]]></secure_key>\n    <deleted><![CDATA[]]></deleted>\n    <passwd><![CDATA[]]></passwd>\n    <lastname><![CDATA[]]></lastname>\n    <firstname><![CDATA[]]></firstname>\n    <email><![CDATA[]]></email>\n    <id_gender><![CDATA[]]></id_gender>\n    <birthday><![CDATA[]]></birthday>\n    <newsletter><![CDATA[]]></newsletter>\n    <optin><![CDATA[]]></optin>\n    <website><![CDATA[]]></website>\n    <company><![CDATA[]]></company>\n    <siret><![CDATA[]]></siret>\n    <ape><![CDATA[]]></ape>\n    <outstanding_allow_amount><![CDATA[]]></outstanding_allow_amount>\n    <show_public_prices><![CDATA[]]></show_public_prices>\n    <id_risk><![CDATA[]]></id_risk>\n    <max_payment_days><![CDATA[]]></max_payment_days>\n    <active><![CDATA[]]></active>\n    <note><![CDATA[]]></note>\n    <is_guest><![CDATA[]]></is_guest>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <reset_password_token><![CDATA[]]></reset_password_token>\n    <reset_password_validity><![CDATA[]]></reset_password_validity>\n    <associations>\n      <groups>\n        <group>\n          <id><![CDATA[]]></id>\n        </group>\n      </groups>\n    </associations>\n  </customer>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Including Compiled JavaScript in Twig Template\nDESCRIPTION: This Twig snippet shows how to include the compiled JavaScript file for the tax page in the template.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% block javascripts %}\n  {{ parent() }}\n  \n  ## Adding script tag with path to compiled js file\n  <script src=\"{{ asset('themes/new-theme/public/tax.bundle.js') }}\"></script>\n  <script src=\"{{ asset('themes/default/js/bundle/pagination.js') }}\"></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminProductsControllerDuplicateAfter Hook in PHP\nDESCRIPTION: This snippet shows how the hook is dispatched in the ProductController after a product duplication operation. The hook is triggered with parameters passed in the $hookEventParameters variable.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminProductsControllerDuplicateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Executing actionModuleUninstallAfter Hook in PHP\nDESCRIPTION: This code snippet demonstrates how the actionModuleUninstallAfter hook is executed in PrestaShop. It's called after a module is uninstalled and passes the current module object as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionModuleUninstallAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionModuleUninstallAfter', ['object' => $this])\n```\n\n----------------------------------------\n\nTITLE: Importing PrestaShop UIKit Source Files\nDESCRIPTION: Imports the source SCSS files for PrestaShop UIKit. This method requires rebuilding the UIKit within your styling architecture but provides access to all UIKit variables.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/uikit.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import \"~prestakit/scss/application\";\n```\n\n----------------------------------------\n\nTITLE: Executing Checkout Rendering Hook in PrestaShop with PHP\nDESCRIPTION: The snippet demonstrates the execution of the 'actionCheckoutRender' hook, which is called to modify the checkout process in PrestaShop. This PHP code utilizes PrestaShop's Hook execution mechanism and passes in a checkout process by reference. The key parameter 'checkoutProcess' must be modified indirectly within the implemented hook functions. This code snippet should be integrated within the OrderController.php to effectively render custom checkout processes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionCheckoutRender.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec('actionCheckoutRender', ['checkoutProcess' => &$this->checkoutProcess])\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block defines metadata for the documentation page. It sets the main title, menu title, display weight (order), preceding text/number, indicates it's a chapter entry, specifies visibility on the homepage, and assigns an icon. This metadata is likely processed by a static site generator like Hugo.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Core Development Reference\nmenuTitle: \"Core Reference\"\nweight: 2\npre: \"<b>2. </b>\"\nchapter: true\nshowOnHomepage: true\nicon: 'images/icons/core-reference.svg'\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Installation Success Messages\nDESCRIPTION: Example output showing successful PrestaShop installation in Docker environment\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nprestashop-git | \\n* Installing PrestaShop, this may take a while ...\nprestashop-git | -- Installation successful! --\nprestashop-git | \\n* Almost ! Starting web server now\\n\n```\n\n----------------------------------------\n\nTITLE: Defining AddRootCategoryHandlerInterface in PHP for PrestaShop\nDESCRIPTION: This interface is implemented by the AddRootCategoryHandler class. It defines the contract for handling the addition of root categories in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/add-root-category-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Category\\CommandHandler\\AddRootCategoryHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: AddCustomerCommand Return Type Definition\nDESCRIPTION: Return type specification for the AddCustomerCommand, which returns a CustomerId value object after successful customer creation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/customer/_partials/add-customer-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Customer\\ValueObject\\CustomerId\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Shop XML Schema Definition\nDESCRIPTION: Blank XML schema template for the Shop resource showing all available fields including id, shop group, category, activity status, deletion status, name, color, and theme name. The schema uses CDATA sections for field values and follows the PrestaShop XML structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/shops.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <shop>\n    <id><![CDATA[]]></id>\n    <id_shop_group><![CDATA[]]></id_shop_group>\n    <id_category><![CDATA[]]></id_category>\n    <active><![CDATA[]]></active>\n    <deleted><![CDATA[]]></deleted>\n    <name><![CDATA[]]></name>\n    <color><![CDATA[]]></color>\n    <theme_name><![CDATA[]]></theme_name>\n  </shop>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Referencing PrestaShop Legacy Link Command Path\nDESCRIPTION: Specifies the file system path to the PrestaShop Legacy Link Linter Command implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/console/prestashop-linter-legacy-link.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsrc/PrestaShopBundle/Command/LegacyLinkLinterCommand.php\n```\n\n----------------------------------------\n\nTITLE: Modern Twig Translation Example\nDESCRIPTION: Equivalent translation implementation using Twig syntax.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/templating-with-twig.md#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Before activating the webservice, you must be sure to: '|trans({}, 'Admin.Advparameters.Help') }}\n```\n\n----------------------------------------\n\nTITLE: Editing CMS Page Command Structure in PrestaShop\nDESCRIPTION: Command class definition for editing CMS pages in PrestaShop. Takes a CMS page ID as constructor parameter and returns void. The command is handled by EditCmsPageHandler which implements EditCmsPageHandlerInterface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/edit-cms-page-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\Command\\EditCmsPageCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\CMS\\Page\\CommandHandler\\EditCmsPageHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\EditCmsPageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Installing Composer on Unix Systems\nDESCRIPTION: Commands to download and install Composer on macOS and Linux systems.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Handling in Controller Actions\nDESCRIPTION: Controller implementation showing both create and edit actions using the form handler pattern.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/forms/CRUD-forms.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function createAction(Request $request)\n{\n    $contactFormBuilder = $this->get('prestashop.core.form.identifiable_object.builder.contact_form_builder');\n    $contactForm = $contactFormBuilder->getForm();\n    \n    $contactForm->handleRequest($request);\n\n    $contactFormHandler = $this->get('prestashop.core.form.identifiable_object.handler.contact_form_handler');\n    $result = $contactFormHandler->handle($contactForm);\n\n    if (null !== $result->getIdentifiableObjectId()) {\n        $this->addFlash('success', $this->trans('Successful creation.', 'Admin.Notifications.Success'));\n\n        return $this->redirectToRoute('admin_contacts_index');\n    }\n    \n    return $this->render('@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/create.html.twig', [\n        'contactForm' => $contactForm->createView(),\n    ]);\n}\n\npublic function editAction($contactId, Request $request)\n{\n    $contactFormBuilder = $this->get('prestashop.core.form.identifiable_object.builder.contact_form_builder');\n    // we use getFormFor() instead of getForm() since we now have an id\n    $contactForm = $contactFormBuilder->getFormFor($contactId);\n\n    $contactForm->handleRequest($request);\n\n    $contactFormHandler = $this->get('prestashop.core.form.identifiable_object.handler.contact_form_handler');\n    // we use handleFor() instead of handle() since we now have an id\n    $result = $contactFormHandler->handleFor($contactId, $contactForm);\n\n    if ($result->isSubmitted() && $result->isValid()) {\n        $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\n\n        return $this->redirectToRoute('admin_contacts_index');\n    }\n\n    return $this->render('@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/edit.html.twig', [\n        'contactForm' => $contactForm->createView(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, specifying the title, chapter status, and homepage visibility.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/distribution/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Distribution\nchapter: true\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Class for Setting Required Address Fields (PHP)\nDESCRIPTION: Specifies the fully qualified class name for the command handler (`SetRequiredFieldsForAddressHandler`) that processes the `SetRequiredFieldsForAddressCommand`. This handler contains the logic to actually apply the required fields configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/set-required-fields-for-address-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Address\\CommandHandler\\SetRequiredFieldsForAddressHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveCartRuleFromCartHandler in PHP\nDESCRIPTION: This code snippet shows the handler class for the RemoveCartRuleFromCartCommand. It implements the RemoveCartRuleFromCartHandlerInterface and is responsible for executing the command to remove a cart rule from a cart.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart/_partials/remove-cart-rule-from-cart-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Cart\\CommandHandler\\RemoveCartRuleFromCartHandler\n```\n\n----------------------------------------\n\nTITLE: Defining ContactId Value Object in PHP for PrestaShop Contact Management\nDESCRIPTION: The ContactId class is a value object representing the unique identifier of a contact in PrestaShop. It is returned by the AddContactHandler after successfully adding a new contact.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/contact/_partials/add-contact-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Contact\\ValueObject\\ContactId\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminSortBefore hook in ProductController\nDESCRIPTION: This code snippet shows how the actionAdminSortBefore hook is dispatched with parameters in the ProductController. The hook is triggered before admin sorting operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminSortBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminSortBefore',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Defining the SetTaxRulesGroupStatusCommand Class (PHP)\nDESCRIPTION: Reference to the `SetTaxRulesGroupStatusCommand` class, which represents a command object used to modify the status (enable/disable) of a specific tax rules group identified by its ID. It requires the group ID (`$taxRulesGroupId`) and the desired status (`$expectedStatus`) as constructor parameters.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/tax-rules-group/_partials/set-tax-rules-group-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\TaxRulesGroup\\Command\\SetTaxRulesGroupStatusCommand`\n```\n\n----------------------------------------\n\nTITLE: Dispatching action<LegacyControllerName>ListingResultsModifier Hook in PrestaShop (PHP)\nDESCRIPTION: This PHP snippet demonstrates how the `action<LegacyControllerName>ListingResultsModifier` hook is dispatched using the `dispatchWithParameters` method in PrestaShop. The hook name is dynamically generated using the legacy controller name. It passes references to the listing data (`list`) and total count (`list_total`) from `$helperListConfiguration`, enabling modules to modify these values.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/action<LegacyControllerName>ListingResultsModifier.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters('action' . $helperListConfiguration->legacyControllerName . 'ListingResultsModifier', [\n            'list' => &$helperListConfiguration->list,\n            'list_total' => &$helperListConfiguration->listTotal,\n        ])\n```\n\n----------------------------------------\n\nTITLE: CMS Page Command References\nDESCRIPTION: A collection of command references for managing CMS pages including add, delete, bulk operations, and status toggling.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAddCmsPageCommand\nBulkDeleteCmsPageCommand\nBulkDisableCmsPageCommand\nBulkEnableCmsPageCommand\nDeleteCmsPageCommand\nEditCmsPageCommand\nToggleCmsPageStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Module Translation in PHP Main Class\nDESCRIPTION: Example of using the l() method to translate strings in a module's main class that extends the Module class.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass mymodule extends Module\n{\n    public function __construct()\n    {\n        $this->displayName = $this->l('My module');\n        $this->description = $this->l('Description of my module.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Delete Search Engine Command Handler Interface in PHP\nDESCRIPTION: This snippet shows the fully qualified namespace and class name for the `DeleteSearchEngineHandlerInterface`. The `DeleteSearchEngineHandler` must implement this interface, ensuring adherence to a specific contract for handling the delete command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/search-engine/_partials/delete-search-engine-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\SearchEngine\\CommandHandler\\DeleteSearchEngineHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Parameters Definition for displaybackOfficeEmployeeMenu Hook in PHP\nDESCRIPTION: Defines the parameter structure for the displaybackOfficeEmployeeMenu hook, which includes a menuLinksCollections parameter of type ActionsBarButtonsCollection.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayBackOfficeEmployeeMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    [\n        'links' => (ActionsBarButtonsCollection) $menuLinksCollections,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Value Handler in PrestaShop\nDESCRIPTION: The AddFeatureValueHandler class handles the AddFeatureValueCommand and implements the AddFeatureValueHandlerInterface. It processes the command to add new feature values to the system.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/feature/_partials/add-feature-value-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Feature\\CommandHandler\\AddFeatureValueHandler\n```\n\n----------------------------------------\n\nTITLE: Complex Template Translation Example\nDESCRIPTION: Complete example of a module template file showing various translation implementations including conditional statements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/creation/module-translation/classic-system.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<li>\n  <a href=\"{$base_dir}modules/mymodule/mymodule_page.php\" title=\"{l s='Click this link' mod='mymodule'}\">{l s='Click me!' mod='mymodule'}</a>\n</li>\n<!-- Block mymodule -->\n<div id=\"mymodule_block_left\" class=\"block\">\n  <h4>{l s='Welcome!' mod='mymodule'}</h4>\n  <div class=\"block_content\">\n    <p>{l s='Hello,' mod='mymodule'}\n       {if isset($my_module_name) && $my_module_name}\n           {$my_module_name}\n       {else}\n           {l s='World' mod='mymodule'}\n       {/if}\n       !\n    </p>\n    <ul>\n      <li><a href=\"{$my_module_link}\"  title=\"{l s='Click this link' mod='mymodule'}\">{l s='Click me!' mod='mymodule'}</a></li>\n    </ul>\n  </div>\n</div>\n<!-- /Block mymodule -->\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch Changes to GitHub\nDESCRIPTION: Command to push a local feature branch to GitHub remote repository. This example shows pushing a branch named 'add-emoticons-support'.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/create-pull-request.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit push origin add-emoticons-support\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Extensions in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import and add various grid extensions to enhance functionality.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/tutorials/extend-grid-with-javascript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Grid from '@components/grid/grid';\n### import extension\nimport SortingExtension from '@components/grid/extension/sorting-extension';\n\nconst {$} = window;\n\n$(() => {\n  const taxGrid = new Grid('tax');\n  ### add extension to grid\n  taxGrid.addExtension(new SortingExtension());\n});\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Query Result Path\nDESCRIPTION: Return type class path that encapsulates the country required fields data structure.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/country/_partials/get-country-required-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Country\\QueryResult\\CountryRequiredFields\n```\n\n----------------------------------------\n\nTITLE: Copying Generated Fixtures to PrestaShop Installation\nDESCRIPTION: Command to copy the generated fixture data to the PrestaShop installation directory before shop installation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/back-office.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp -R generated_data/* [prestashop]/install/fixtures/fashion/\n```\n\n----------------------------------------\n\nTITLE: Displaying My Account Hooks Table in Markdown\nDESCRIPTION: This snippet creates a table listing the hooks relevant to the My Account page, including their names and links to their respective documentation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/hummingbird/hooks/myaccount.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Hook |  |\n| --- | --- |\n| `displayCustomerAccount` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayCustomerAccount\">}}) |\n| `displayOrderDetail` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayOrderDetail\">}}) |\n| `displayAdditionalCustomerAddressFields` | [Documentation]({{< relref \"/8/modules/concepts/hooks/list-of-hooks/displayAdditionalCustomerAddressFields\">}}) |\n```\n\n----------------------------------------\n\nTITLE: Currency Update Cron Job Configuration - Bash\nDESCRIPTION: Cron job configuration for scheduling automated currency rate updates. This command executes a curl request to the PrestaShop currency update endpoint at 6:00 AM daily.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/pricing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0 6 * * * curl \"https://myshop.com/admin_9282/cron_currency_rates.php?secure_key={my_secure_key}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Back Office Token Protection in Nginx Configuration\nDESCRIPTION: This Nginx configuration snippet shows how to disable the back office token protection in PrestaShop using an HTTP header. This can be useful for development or testing purposes when working with Nginx servers.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/configuration/configuring-prestashop.md#2025-04-22_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nadd_header _TOKEN_ disabled;\n```\n\n----------------------------------------\n\nTITLE: Identifying Hooks on Legacy Pages in PHP\nDESCRIPTION: This snippet modifies the Hook class to log hook names to a file, allowing developers to identify which hooks are called on legacy pages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfile_put_contents('hooks.txt', PHP_EOL. $hook_name, FILE_APPEND | LOCK_EX);\n```\n\n----------------------------------------\n\nTITLE: GetDatabaseTablesList Query Handler Interface\nDESCRIPTION: The interface that defines the contract for handling the GetDatabaseTablesList query. Any class that handles this query must implement this interface.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/sql-management/_partials/get-database-tables-list.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\SqlManagement\\QueryHandler\\GetDatabaseTablesListHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Binding a Parameter for a Specific Service with Manual Tagging - YAML\nDESCRIPTION: Provides a more granular binding for only one service (Collection), returning the tagged services just for its constructor. Useful when different bindings are needed for different classes. Maintains explicit control by naming the service and specifying both bind and class/tag. Requires knowledge of YAML syntax and PrestaShop service registration flow.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/services/_index.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test_module.instance_of.manually_tagged_collection:\n    class: TestModule\\InstanceofConditionals\\Collection\\Collection\n    public: true\n    bind:\n      $elements: !tagged test_module.instance_of.manually_tagged\n  \n  TestModule\\InstanceofConditionals\\Collection\\Element:\n    class: TestModule\\InstanceofConditionals\\Collection\\Element\n    tags: [ test_module.instance_of.manually_tagged ]\n```\n\n----------------------------------------\n\nTITLE: Starting PrestaShop Docker Environment\nDESCRIPTION: Commands to navigate to PrestaShop directory and start the Docker environment\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/contribute_using_docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd PrestaShop\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Example Module Implementing actionFilterDeliveryOptionList Hook in PHP\nDESCRIPTION: This example demonstrates a PrestaShop module (`MyCarrierConditionDisablerModule`) implementing the `hookActionFilterDeliveryOptionList` method (note the potential typo in the example code's method name `hookActionCustomFilterDeliveryOptionList`). The module registers for the hook during installation and accesses the delivery options list within the hook method to potentially filter carriers based on conditions, such as disabling express delivery on weekends (Saturdays or Sundays).\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionFilterDeliveryOptionList.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyCarrierConditionDisablerModule extends Module \n{\n        \n    public function install()\n    {\n        return parent::install() && $this->registerHook('actionFilterDeliveryOptionList');\n    }\n\n    public function hookActionCustomFilterDeliveryOptionList($params)\n    {\n        $deliveryOptionList = $params['delivery_option_list'];\n        \n        if(0 == date('w') || 6 == date('w')){ // sundays or saturdays\n            // find carrier in $deliveryOptionList, and remove it\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Cart Rule Status in Bulk – PrestaShop Domain Command – PHP\nDESCRIPTION: Documents the signature and relation of the BulkToggleCartRuleStatusCommand, which is used to set the enabled or disabled status for multiple cart rules at once. Requires PrestaShop core classes, principally the BulkToggleCartRuleStatusCommand and its related handler (BulkToggleCartRuleStatusHandler), as well as an array of cart rule IDs and a boolean indicating the desired status. The command is handled via a specific handler class implementing the corresponding interface, and does not return a value. Limitations include depending on PrestaShop's Command-Handler CQRS architecture and correctness of input IDs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/bulk-toggle-cart-rule-status-command.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\Command\\BulkToggleCartRuleStatusCommand\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing PrestaShop Shop Creator\nDESCRIPTION: Commands to clone the PrestaShop shop creator repository and install its dependencies using Composer.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/scale/benchmark/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/PrestaShop/prestashop-shop-creator\ncd prestashop-shop-creator\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductTagsHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface implemented by the SetProductTagsHandler class. It defines the contract for handlers that update product tags.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/set-product-tags-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\CommandHandler\\UpdateProductTagsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Identifying the ResendOrderEmailHandler Class in PHP\nDESCRIPTION: This snippet specifies the fully qualified namespace and class name for the `ResendOrderEmailHandler`. This handler class is responsible for processing the `ResendOrderEmailCommand` and executing the logic to resend the order email. It implements the `ResendOrderEmailHandlerInterface`.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/resend-order-email-command.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\ResendOrderEmailHandler`\n```\n\n----------------------------------------\n\nTITLE: Passing Simple Parameters to PHP Scripts via YAML for PrestaShop Modules\nDESCRIPTION: YAML configuration demonstrating how to pass parameters to a PHP script specified in the `php` section. This example passes a parameter named `myParam1` with the value `1` to the `run` method of the `ConfigurationScript.php` script as part of the `$params` array.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nphp:\n    - file: \"ConfigurationScript.php\"\n      params:\n        - myParam1: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing EditOrderMessageHandler - PrestaShop Adapter - PHP\nDESCRIPTION: Specifies the class responsible for handling the EditOrderMessageCommand in PrestaShop. EditOrderMessageHandler must implement EditOrderMessageHandlerInterface and process the command according to domain-driven design. Dependencies include implementation of the Handler class and adherence to PrestaShop's command bus standards. This handler directly receives and applies command attributes; no value is returned.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-message/_partials/edit-order-message-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\OrderMessage\\CommandHandler\\EditOrderMessageHandler\n// Implements:\n// PrestaShop\\PrestaShop\\Core\\Domain\\OrderMessage\\CommandHandler\\EditOrderMessageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Column Size Update with diff\nDESCRIPTION: Shows changes where a column's size is increased without affecting the data, allowing more text before truncation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/keeping-up-to-date/migration.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- `lastname` varchar(32) NOT NULL,\n+ `lastname` varchar(255) NOT NULL,\n```\n\n----------------------------------------\n\nTITLE: Copying Local Files via YAML Configuration for PrestaShop Modules\nDESCRIPTION: YAML snippet illustrating how to copy a file using the `files` section. It specifies a `source` path (relative to the config file) and a `dest` path (relative to the module's root directory) for the file copy operation during module configuration.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n    - source: \"../source/file.txt\"\n      dest: \"docs/file.txt\"\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Employee Sessions Command with Handler – PrestaShop (PHP)\nDESCRIPTION: This snippet demonstrates the declaration and usage context of the BulkDeleteEmployeeSessionsCommand PHP class in PrestaShop, facilitating the deletion of multiple employee session records at once. It leverages a command/handler architectural pattern, requiring an array of session IDs as a constructor parameter and delegating execution to a dedicated handler implementing the BulkDeleteEmployeeSessionsHandlerInterface. The command is intended for administrative use, returns void, and requires integrating with PrestaShop core classes for security operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/security/_partials/bulk-delete-employee-sessions-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Security\\Command\\BulkDeleteEmployeeSessionsCommand\n// Deletes employees sessions in bulk action\n\n// Constructor parameters:\n//    array $sessionIds\n\n// Handler class:\n//    PrestaShop\\PrestaShop\\Adapter\\Security\\CommandHandler\\BulkDeleteEmployeeSessionsHandler\n//    Implements: PrestaShop\\PrestaShop\\Core\\Domain\\Security\\CommandHandler\\BulkDeleteEmployeeSessionsHandlerInterface\n\n// Return type: void\n```\n\n----------------------------------------\n\nTITLE: Executing displayOverrideTemplate Hook (PrestaShop ≥8.1)\nDESCRIPTION: Updated hook execution for overriding template in PrestaShop 8.1 and later. Adds an 'entity' parameter while maintaining other parameters from previous versions.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOverrideTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n  'displayOverrideTemplate',\n  [\n    'controller' => $this,\n    'template_file' => $template,\n    'entity' => $params['entity'],\n    'id' => $params['id'],\n    'locale' => $locale,\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying Handler Interface for Specific Price Deletion in PrestaShop PHP\nDESCRIPTION: This snippet shows the interface `DeleteSpecificPriceHandlerInterface` implemented by the `DeleteSpecificPriceHandler`. This ensures the handler adheres to a specific contract defined within the core domain for deleting specific prices.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/delete-specific-price-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\CommandHandler\\DeleteSpecificPriceHandlerInterface`\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for FAQ Page\nDESCRIPTION: Markdown formatted documentation explaining the FAQ structure and content about PrestaShop's open source project issue management process.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/faq/open-source-project.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Open Source Project FAQ\n---\n\n# Open Source Project FAQ\n\nThis section covers frequently asked questions about the Open Source Project.\n\n## Why is issue X still not fixed after so long?\n\nNot having an issue fixed immediately (or in a fixed timeframe) does not mean that it won't be fixed, or that maintainers don't care. It doesn't mean that the issue is NOT important either. It just means that other issues have been considered, for whatever reason, _more_ important, so they were (or are being) tackled first. There's an immense amount of work to be done (over 1,900 open issues at the time of writing, and growing!), and tasks take time.\n\nDeveloper time is limited, so if the amount of issues opened in a certain timeframe exceeds the amount of issues that can be processed using the available developer time, tasks will simply pile up. This is common to ALL projects. Due to the number of pending issues, sometimes they may get lost in the pile and be forgotten about, so it's not a bad idea to ping us there from time to time to remind us about it, even if it's been a long while.\n\nBut here's the upside: PrestaShop is an open source, community project. If you find that any issue is critical for you, and it's important to have it fixed as soon as possible, then you can _invest_ into having it done. You can hire a developer to fix it, or if you are a developer yourself, you can try doing it on your own. The most important thing is to share that fix with everyone by [submitting a Pull Request][contribute-pr] – that's what the open source spirit is all about.\n\n[contribute-pr]: {{< ref \"/8/contribute/contribute-pull-requests/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Executing ActionAdminControllerInitBefore Hook in PHP\nDESCRIPTION: This snippet shows how the 'actionAdminControllerInitBefore' hook is called in the AdminController class. It passes the current controller instance as a parameter to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminControllerInitBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminControllerInitBefore',\n            [\n                'controller' => $this,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminLogsControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This snippet shows how the actionAdminLogsControllerPostProcessBefore hook is dispatched in the LogsController. The hook passes the controller instance as a parameter to allow modules to interact with or modify controller behavior before post-processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLogsControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminLogsControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from URLs via YAML Configuration for PrestaShop Modules\nDESCRIPTION: YAML example demonstrating how to download a file from a URL using the `files` section. It specifies the `source` URL and the `dest` path (relative to the module's root directory) where the downloaded content will be saved.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/configure-with-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n    - source: \"https://www.prestashop-project.org\"\n      dest: \"webpage.html\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring ImageColumn in PHP\nDESCRIPTION: This PHP code demonstrates creating an instance of `ImageColumn` with the identifier 'flag', assigning it a display name ('Flag'), and configuring its options. The `src_field` option is set to 'flag', indicating that the image source URL or path will be retrieved from the 'flag' field of the data row. Finally, the configured column is added to a `ColumnCollection`. This snippet requires the `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ImageColumn` and `PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection` classes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/components/grid/columns-reference/image.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ImageColumn;\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection;\n\n$imageColumn = new ImageColumn('flag');\n$imageColumn->setName('Flag');\n$imageColumn->setOptions([\n     'src_field' => 'flag',\n]);\n\n$columns = new ColumnCollection();\n$columns->add($imageColumn);\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderProductHandlerInterface in PrestaShop Order Domain\nDESCRIPTION: This defines the interface that the CancelOrderProductHandler implements, ensuring consistent implementation of order product cancellation logic.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/cancel-order-product-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\CancelOrderProductHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Specifying the Return Type for the Set Required Fields Command Handler (PHP)\nDESCRIPTION: Indicates the return type of the handler method that processes the `SetRequiredFieldsForAddressCommand`. A `void` return type signifies that the handler performs an action (setting required fields) but does not return any specific value upon successful completion.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/_partials/set-required-fields-for-address-command.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nvoid\n```\n\n----------------------------------------\n\nTITLE: PHP Interface Path for CMS Page Bulk Disable Handler\nDESCRIPTION: Fully qualified namespace path for the interface that the bulk disable handler implements.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cms-page/_partials/bulk-disable-cms-page-command.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CmsPage\\CommandHandler\\BulkDisableCmsPageHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Callout Block with Shortcodes in Markdown\nDESCRIPTION: This snippet shows how to define a callout block using shortcode syntax in Markdown, specifically for platforms such as Hugo or systems that support mustache-style shortcodes. The code demonstrates wrapping important text and a header within custom callout tags, and explains that headers inside such blocks are excluded from the document's table of contents. There are no additional dependencies beyond Markdown and shortcode support; inputs are custom content, and outputs are visually distinct highlighted blocks.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/callout.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```markdown\\n{{%/* callout */%}}\\n#### This is a callout\\n\\nThis is a very important block of text. Also, notice how the title doesn't appear in the table of contents.\\n{{%/* /callout */%}} \\n```\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Attribute Groups Handler Class Path\nDESCRIPTION: Fully qualified namespace path for the handler class that implements the query processing logic, along with its interface implementation.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-product-attribute-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Product\\AttributeGroup\\QueryHandler\\GetProductAttributeGroupsHandler\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with PrestaShop Main Repository\nDESCRIPTION: Series of git commands to synchronize a fork with the original PrestaShop repository. This includes adding the upstream remote, fetching changes, rebasing on the develop branch, and force pushing updates.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/contribute-pull-requests/create-pull-request.md#2025-04-22_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit remote add ps https://github.com/PrestaShop/PrestaShop.git\ngit fetch ps\ngit rebase -i ps/develop\ngit push -f origin develop\n```\n\n----------------------------------------\n\nTITLE: XML Schema for PrestaShop Customer Thread Resource\nDESCRIPTION: This XML snippet represents the blank schema template for a customer thread resource in PrestaShop. It includes all possible fields such as language ID, shop ID, customer ID, order ID, product ID, contact ID, email, token, status, dates, and associations with customer messages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/customer_threads.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <customer_thread>\n    <id><![CDATA[]]></id>\n    <id_lang><![CDATA[]]></id_lang>\n    <id_shop><![CDATA[]]></id_shop>\n    <id_customer><![CDATA[]]></id_customer>\n    <id_order><![CDATA[]]></id_order>\n    <id_product><![CDATA[]]></id_product>\n    <id_contact><![CDATA[]]></id_contact>\n    <email><![CDATA[]]></email>\n    <token><![CDATA[]]></token>\n    <status><![CDATA[]]></status>\n    <date_add><![CDATA[]]></date_add>\n    <date_upd><![CDATA[]]></date_upd>\n    <associations>\n      <customer_messages>\n        <customer_message>\n          <id><![CDATA[]]></id>\n        </customer_message>\n      </customer_messages>\n    </associations>\n  </customer_thread>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Table Restoration Implementation in PHP\nDESCRIPTION: PHP implementation of the table restoration functionality in CommonFeatureContext\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/migration-guide/testing/behat.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass CommonFeatureContext extends AbstractPrestaShopFeatureContext {\n    /**\n     * @Given I restore tables :tableNames\n     *\n     * @param string $tableNames\n     */\n    public function restoreTables(string $tableNames): void\n    {\n        $tables = explode(',', $tableNames);\n        DatabaseDump::restoreTables($tables);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Module Template Path in PrestaShop (PHP)\nDESCRIPTION: This method generates the path to the module's template directory. It uses the module's name to construct the path following PrestaShop's convention for module template locations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/sample-modules/order-pages-new-hooks/signature-widget.md#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Get path to this module's template directory\n */\nprivate function getModuleTemplatePath(): string\n{\n    return sprintf('@Modules/%s/views/templates/admin/', $this->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Handler Interface Implemented (PHP)\nDESCRIPTION: Specifies the fully qualified interface name (`IssueStandardRefundHandlerInterface`) that the `IssueStandardRefundHandler` class implements. This ensures adherence to a defined contract for handling standard refund commands.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/issue-standard-refund-command.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Order\\CommandHandler\\IssueStandardRefundHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Creating a Customizable Email Layout in Twig\nDESCRIPTION: Example of a customizable email layout template in Twig, extending the modern theme layout and including placeholders for custom content and messages.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/mail-templates/apply-transformation-from-module.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# modules/my_email_theme_module/mails/layout/customizable_modern_layout.html.twig #}\n{% extends '@MailThemes/modern/components/layout.html.twig' %}\n\n{% block content %}\n  <table width=\"100%\">\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"title\">{{ 'This is an example mail template from my module for modern theme'|trans({}, 'EmailsBody', locale)|raw }}</span>\n        </font>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" class=\"titleblock\">\n        <font size=\"2\" face=\"{{ languageDefaultFont }}Open-sans, sans-serif\" color=\"#555454\">\n          <span class=\"subtitle\">{{ customMessage }}</span>\n        </font>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"space_footer\">&nbsp;</td>\n    </tr>\n  </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Shop Restriction in PrestaShop\nDESCRIPTION: Example of SQL query that retrieves visitor connections data with proper shop restrictions using Shop::addSqlRestriction().\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/multistore.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_add, COUNT(`date_add`) as total\n FROM `' . _DB_PREFIX_ . 'connections`\n WHERE 1 ' . Shop::addSqlRestriction();\n```\n\n----------------------------------------\n\nTITLE: Handler Class Path for ChangeOrderDeliveryAddressCommand\nDESCRIPTION: The fully qualified namespace path for the handler class that processes the ChangeOrderDeliveryAddressCommand in PrestaShop.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order/_partials/change-order-delivery-address-command.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`PrestaShop\\PrestaShop\\Adapter\\Order\\CommandHandler\\ChangeOrderDeliveryAddressHandler`\n```\n\n----------------------------------------\n\nTITLE: Checking npm Version in Terminal\nDESCRIPTION: Command to verify that npm is properly installed and to check its current version.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/getting-started/tools-for-theme-designers.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect and Build Options in YAML Front Matter\nDESCRIPTION: This YAML front matter block configures the page to act as a redirect. The 'layout: redirect' line likely triggers redirection logic in the site generator (e.g., Jekyll). The 'redirect' key specifies the target URL. The '_build: list: never' directive instructs the build system to exclude this page from generated lists or navigation menus.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/project/maintainers-guide/license.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# this page is redirected so it has no content\nlayout: redirect\nredirect: https://www.prestashop-project.org/maintainers-guide/license/\n_build:\n  list: never\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type for GetSpecificPriceForEditing Query in PHP\nDESCRIPTION: This code snippet specifies the return type for the GetSpecificPriceForEditing query. The query returns a SpecificPriceForEditing object containing the retrieved specific price information.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/get-specific-price-for-editing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\SpecificPrice\\QueryResult\\SpecificPriceForEditing\n```\n\n----------------------------------------\n\nTITLE: Executing actionAdminLoginControllerForgotBefore Hook in PHP\nDESCRIPTION: This snippet demonstrates how the actionAdminLoginControllerForgotBefore hook is called in the AdminLoginController. It passes the controller instance and email as parameters to the hook.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminLoginControllerForgotBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHook::exec(\n            'actionAdminLoginControllerForgotBefore',\n            [\n                'controller' => $this,\n                'email' => $email,\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Identifying the PrestaShop GetOrderStateForEditing Query Class in PHP\nDESCRIPTION: This PHP snippet specifies the fully qualified namespace and class name for the `GetOrderStateForEditing` query. This query is designed to fetch order state details suitable for editing. It requires an integer `$orderStateId` upon construction and is processed by the `PrestaShop\\PrestaShop\\Adapter\\OrderState\\QueryHandler\\GetOrderStateForEditingHandler` to return a `PrestaShop\\PrestaShop\\Core\\Domain\\OrderState\\QueryResult\\EditableOrderState` object.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/order-state/_partials/get-order-state-for-editing.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`PrestaShop\\PrestaShop\\Core\\Domain\\OrderState\\Query\\GetOrderStateForEditing`\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Currency Exchange Rate Automation Command Class\nDESCRIPTION: Class that manages the automation of currency exchange rate updates. When enabled, it creates a CronJob record with a URL pointing to an execution script. When disabled, it removes the CronJob record. Takes a boolean parameter to control the exchange rate status.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/toggle-exchange-rate-automatization-command.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\Command\\ToggleExchangeRateAutomatizationCommand\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\ToggleExchangeRateAutomatizationHandler\n```\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\ToggleExchangeRateAutomatizationHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter for Chapter Page\nDESCRIPTION: This snippet shows YAML front matter used by the Hugo static site generator. It defines metadata for the documentation page: 'title' sets the page title, 'weight' influences ordering, 'chapter: true' designates it as a chapter landing page, and 'showOnHomepage: true' makes it visible on the homepage.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Extension concepts\nweight: 20\nchapter: true\nshowOnHomepage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleCartRuleStatusHandlerInterface in PHP\nDESCRIPTION: This code snippet shows the interface that the ToggleCartRuleStatusHandler implements. It defines the contract for handling the toggle cart rule status command.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/cart-rule/_partials/toggle-cart-rule-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\CartRule\\CommandHandler\\ToggleCartRuleStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing BulkDeleteCurrenciesHandler in PHP\nDESCRIPTION: This snippet shows the handler class for the BulkDeleteCurrenciesCommand. It implements the BulkDeleteCurrenciesHandlerInterface and is responsible for executing the bulk deletion of currencies.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/bulk-delete-currencies-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Currency\\CommandHandler\\BulkDeleteCurrenciesHandler\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleCurrencyStatusHandlerInterface in PHP\nDESCRIPTION: This snippet shows the interface that the ToggleCurrencyStatusHandler implements. It defines the contract for handling the ToggleCurrencyStatusCommand.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/currency/_partials/toggle-currency-status-command.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Currency\\CommandHandler\\ToggleCurrencyStatusHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Dispatching PrestaShop Shipping Preferences Hook in PHP\nDESCRIPTION: Code snippet showing how the actionAdminShippingPreferencesControllerPostProcessBefore hook is dispatched. This hook is called before processing any form in the Admin Shipping Preferences controller and passes the controller instance as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminShippingPreferencesControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminShippingPreferencesControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: PrestaShop Product Search Handler Interface\nDESCRIPTION: Interface that defines the contract for handling product search queries.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/product/_partials/search-products.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPrestaShop\\PrestaShop\\Core\\Domain\\Product\\QueryHandler\\SearchProductsHandlerInterface\n```\n\n----------------------------------------\n\nTITLE: Querying Manufacturer Address for Editing with PrestaShop Query Object (PHP)\nDESCRIPTION: This query retrieves address details for a manufacturer, enabling update operations within PrestaShop. It takes the manufacturer address ID and outputs address data or raises an error if the address does not exist. The query object integrates with PrestaShop's query bus.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/address/index.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// GetManufacturerAddressForEditing.php\n\nnamespace PrestaShop\\Core\\Domain\\Address\\Query;\n\n/**\n * Query for retrieving manufacturer address for editing\n */\nclass GetManufacturerAddressForEditing\n{\n    private $addressId;\n\n    public function __construct($addressId)\n    {\n        $this->addressId = $addressId;\n    }\n    // ...getters and logic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing AddRootCategoryHandler in PHP for PrestaShop\nDESCRIPTION: This is the handler class for the AddRootCategoryCommand. It implements the AddRootCategoryHandlerInterface and is responsible for executing the logic to add a root category.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/development/architecture/domain/references/category/_partials/add-root-category-command.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPrestaShop\\PrestaShop\\Adapter\\Category\\CommandHandler\\AddRootCategoryHandler\n```\n\n----------------------------------------\n\nTITLE: Parameters Structure for actionSearch Hook in PHP\nDESCRIPTION: Defines the structure of parameters passed to the actionSearch hook. It includes the search query expression and the total number of search results.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionSearch.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\narray(\n  'expr' => (string) Search query,\n  'total' => (int) Amount of search results\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Hook Event with Parameters in PrestaShop PHP\nDESCRIPTION: This PHP snippet demonstrates how to dispatch the 'actionAdminActivateAfter' hook along with a set of event parameters, typically from within the ProductController in PrestaShop version 8.x. The function 'dispatchWithParameters' is used as the core mechanism for emitting this event, enabling modules and internal code to execute logic after an admin activation action. Required dependencies may include PrestaShop's core event system and access to defined hook parameters; expected inputs are a hook name and parameter array, and the main output is the triggering of the relevant hook listeners. The snippet should be placed where product activation events occur in the admin back office.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminActivateAfter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchWithParameters(\n                        'actionAdminActivateAfter',\n                        $hookEventParameters\n                    )\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode with Parameters\nDESCRIPTION: Demonstrates how to pass parameters to Hugo shortcodes using key-value pairs.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/contribute/documentation/shortcodes/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{%/* ExampleShortcode param1=\"value1\" params2=\"value2\" */%}}\n```\n\n----------------------------------------\n\nTITLE: Hook Implementation in Twig Template\nDESCRIPTION: Shows how the displayAdminThemesListAfter hook is rendered in the theme management template, passing the current theme's name as a parameter.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayAdminThemesListAfter.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ renderhook('displayAdminThemesListAfter', { 'current_theme_name': currentlyUsedTheme.get('name') }) }}\n```\n\n----------------------------------------\n\nTITLE: Blank XML Schema for Product Option Resource in PrestaShop\nDESCRIPTION: A template XML structure for the Product_option resource. This schema includes all available fields such as id, is_color_group, group_type, position, name (with language support), public_name, and associations to product_option_values. It can be used as a starting point for API operations.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/webservice/resources/product_options.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <product_option>\n    <id><![CDATA[]]></id>\n    <is_color_group><![CDATA[]]></is_color_group>\n    <group_type><![CDATA[]]></group_type>\n    <position><![CDATA[]]></position>\n    <name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </name>\n    <public_name>\n      <language id=\"1\"><![CDATA[]]></language>\n      <language id=\"2\"><![CDATA[]]></language>\n    </public_name>\n    <associations>\n      <product_option_values>\n        <product_option_value>\n          <id><![CDATA[]]></id>\n        </product_option_value>\n      </product_option_values>\n    </associations>\n  </product_option>\n</prestashop>\n```\n\n----------------------------------------\n\nTITLE: Calling displayOrderConfirmation2 Hook in PHP Template\nDESCRIPTION: This code snippet shows how to invoke the displayOrderConfirmation2 hook within a PrestaShop template file. The hook is used in the order confirmation page and is implemented in both classic and hummingbird themes.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/displayOrderConfirmation2.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{hook h='displayOrderConfirmation2'}\n```\n\n----------------------------------------\n\nTITLE: Dispatching actionAdminInternationalLocalizationControllerPostProcessBefore Hook in PHP\nDESCRIPTION: This code snippet shows how the hook is called within the LocalizationController. It passes the controller instance as a parameter, allowing modules to interact with the controller before form processing.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/modules/concepts/hooks/list-of-hooks/actionAdminInternationalLocalizationControllerPostProcessBefore.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndispatchHook('actionAdminInternationalLocalizationControllerPostProcessBefore', ['controller' => $this])\n```\n\n----------------------------------------\n\nTITLE: Creating Missing Log Directories\nDESCRIPTION: Creates the `log` and `var/logs` directories if they do not exist. This is often necessary before setting permissions, as `chmod` requires the directories to be present. This command should be run from the PrestaShop root directory.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/basics/installation/_index.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir log var/logs\n```\n\n----------------------------------------\n\nTITLE: Extending Parent Product Listing Template in Smarty\nDESCRIPTION: Shows how to extend the product-list.tpl template in a child theme using Smarty template inheritance, allowing customization of specific blocks while inheriting the rest.\nSOURCE: https://github.com/prestashop/docs/blob/8.x/themes/reference/template-inheritance/parent-child-feature.md#2025-04-22_snippet_2\n\nLANGUAGE: smarty\nCODE:\n```\n  {extends file='catalog/listing/product-list.tpl'}\n```"
  }
]