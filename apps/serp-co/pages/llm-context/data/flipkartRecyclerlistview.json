[
  {
    "owner": "flipkart",
    "repo": "recyclerlistview",
    "content": "TITLE: Initializing DataProvider with rowHasChanged\nDESCRIPTION: This code snippet demonstrates how to initialize a DataProvider with a `rowHasChanged` method. This method is crucial for RLV to detect data changes efficiently and avoid unnecessary re-renders.  It compares two rows (r1 and r2) and returns true if they are different, indicating that a re-render is required.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/performance/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.state = {\n    dataProvider: new DataProvider((r1, r2)=> {\n        //This is the important part\n        return r1 !== r2;\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using StickyContainer with RecyclerListView (JavaScript)\nDESCRIPTION: This snippet demonstrates how to wrap a RecyclerListView with StickyContainer to enable sticky headers and footers. It includes props for specifying sticky header and footer indices, overriding the row renderer, and applying window correction.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n    return (\n        <StickyContainer stickyHeaderIndices={[3, 7, 10]}\n            stickyFooterIndices={[3, 7, 10]}\n            overrideRowRenderer={this._overrideRowRenderer}\n            applyWindowCorrection={this._applyWindowCorrection} // pass the function containing window correctional logic to StickyContainer\n        >\n            <RecyclerListView layoutProvider={this.layoutProvider}\n                ref={this._setRef}\n                dataProvider={this.dataProvider}\n                rowRenderer={this._rowRenderer}\n                showsVerticalScrollIndicator={false}\n            />\n        </StickyContainer>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sticky RecyclerListView Component (React Native)\nDESCRIPTION: This snippet renders the StickyContainer component, which wraps the RecyclerListView. It specifies the indices for sticky headers and footers using the stickyHeaderIndices and stickyFooterIndices props. The overrideRowRenderer prop is set to the _overrideRowRenderer function to customize the appearance of sticky elements. The RecyclerListView is configured with the layoutProvider, dataProvider, and rowRenderer.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/sample/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    render() {\n        return (\n            <StickyContainer stickyHeaderIndices={[3, 7, 10]}\n                             stickyFooterIndices={[3, 7, 10]}\n                             overrideRowRenderer={this._overrideRowRenderer}>\n                <RecyclerListView layoutProvider={this.layoutProvider}\n                                  ref={this._setRef}\n                                  dataProvider={this.dataProvider} rowRenderer={this._rowRenderer} showsVerticalScrollIndicator={false}/>\n            </StickyContainer>\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Using extendedState correctly with RecyclerListView\nDESCRIPTION: This code demonstrates the correct way to use `extendedState` with RecyclerListView.  The `extendedState` should be an object that is only updated when a re-render is intended. Avoid creating a new object on every render, as this will cause unnecessary RLV updates.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/performance/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.state = {\n    extendedState: {\n        ids: [] //array of ids\n    }\n}\n\n//CORRECT\n<RecyclerListView extendedState={this.state.extendedState}/>\n\n//INCORRECT\n<RecyclerListView extendedState={{ ids: []}}/>\n```\n\n----------------------------------------\n\nTITLE: RecyclerListView Component Definition in React Native\nDESCRIPTION: This code defines a React Native component, RecycleTestComponent, that uses RecyclerListView to render a scrollable list. It initializes a DataProvider to manage data changes and a LayoutProvider to define item layouts based on index. The component also includes a rowRenderer function to render individual list items based on their type.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/samplecode/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/***\n Use this component inside your React Native Application.\n A scrollable list with different item type\n */\nimport React, { Component } from \"react\";\nimport { View, Text, Dimensions } from \"react-native\";\nimport { RecyclerListView, DataProvider, LayoutProvider } from \"recyclerlistview\";\n\nconst ViewTypes = {\n    FULL: 0,\n    HALF_LEFT: 1,\n    HALF_RIGHT: 2\n};\n\nlet containerCount = 0;\n\nclass CellContainer extends React.Component {\n    constructor(args) {\n        super(args);\n        this._containerId = containerCount++;\n    }\n    render() {\n        return <View {...this.props}>{this.props.children}<Text>Cell Id: {this._containerId}</Text></View>;\n    }\n}\n\n/***\n * To test out just copy this component and render in you root component\n */\nexport default class RecycleTestComponent extends React.Component {\n    constructor(args) {\n        super(args);\n\n        let { width } = Dimensions.get(\"window\");\n\n        //Create the data provider and provide method which takes in two rows of data and return if those two are different or not.\n        //THIS IS VERY IMPORTANT, FORGET PERFORMANCE IF THIS IS MESSED UP\n        let dataProvider = new DataProvider((r1, r2) => {\n            return r1 !== r2;\n        });\n\n        //Create the layout provider\n        //First method: Given an index return the type of item e.g ListItemType1, ListItemType2 in case you have variety of items in your list/grid\n        //Second: Given a type and object set the exact height and width for that type on given object, if you're using non deterministic rendering provide close estimates\n        //If you need data based check you can access your data provider here\n        //You'll need data in most cases, we don't provide it by default to enable things like data virtualization in the future\n        //NOTE: For complex lists LayoutProvider will also be complex it would then make sense to move it to a different file\n        this._layoutProvider = new LayoutProvider(\n            index => {\n                if (index % 3 === 0) {\n                    return ViewTypes.FULL;\n                } else if (index % 3 === 1) {\n                    return ViewTypes.HALF_LEFT;\n                } else {\n                    return ViewTypes.HALF_RIGHT;\n                }\n            },\n            (type, dim) => {\n                switch (type) {\n                    case ViewTypes.HALF_LEFT:\n                        dim.width = width / 2;\n                        dim.height = 160;\n                        break;\n                    case ViewTypes.HALF_RIGHT:\n                        dim.width = width / 2;\n                        dim.height = 160;\n                        break;\n                    case ViewTypes.FULL:\n                        dim.width = width;\n                        dim.height = 140;\n                        break;\n                    default:\n                        dim.width = 0;\n                        dim.height = 0;\n                }\n            }\n        );\n\n        this._rowRenderer = this._rowRenderer.bind(this);\n\n        //Since component should always render once data has changed, make data provider part of the state\n        this.state = {\n            dataProvider: dataProvider.cloneWithRows(this._generateArray(300))\n        };\n    }\n\n    _generateArray(n) {\n        let arr = new Array(n);\n        for (let i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        return arr;\n    }\n\n    //Given type and data return the view component\n    _rowRenderer(type, data) {\n        //You can return any view here, CellContainer has no special significance\n        switch (type) {\n            case ViewTypes.HALF_LEFT:\n                return (\n                    <CellContainer style={styles.containerGridLeft}>\n                        <Text>Data: {data}</Text>\n                    </CellContainer>\n                );\n            case ViewTypes.HALF_RIGHT:\n                return (\n                    <CellContainer style={styles.containerGridRight}>\n                        <Text>Data: {data}</Text>\n                    </CellContainer>\n                );\n            case ViewTypes.FULL:\n                return (\n                    <CellContainer style={styles.container}>\n                        <Text>Data: {data}</Text>\n                    </CellContainer>\n                );\n            default:\n                return null;\n        }\n    }\n\n    render() {\n        return <RecyclerListView layoutProvider={this._layoutProvider} dataProvider={this.state.dataProvider} rowRenderer={this._rowRenderer} />;\n    }\n}\nconst styles = {\n    container: {\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        flex: 1,\n        backgroundColor: \"#00a1f1\"\n    },\n    containerGridLeft: {\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        flex: 1,\n        backgroundColor: \"#ffbb00\"\n    },\n    containerGridRight: {\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        flex: 1,\n        backgroundColor: \"#7cbb00\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing StickySample Component in React Native\nDESCRIPTION: This snippet initializes the StickySample React component. It sets up the data, DataProvider, and LayoutProvider required for the RecyclerListView. The constructor also binds the _setRef method. The data array is used to populate the list.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/sample/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {View, Text} from 'react-native';\nimport {RecyclerListView, DataProvider, LayoutProvider} from 'recyclerlistview';\nimport StickyContainer from 'recyclerlistview/sticky';\nexport default class StickySample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this._setRef = this._setRef.bind(this);\n\n        this._recyclerRef = null;\n        this.data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11];\n        this.dataProvider = new DataProvider((r1, r2) => {\n            return r1 !== r2;\n        });\n        this.dataProvider = this.dataProvider.cloneWithRows(this.data);\n        this.layoutProvider = new LayoutProvider(\n            index => {\n                return index;\n            },\n            (type, dimension) => {\n                dimension.height = 100;\n                dimension.width = 360;\n            }\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Overriding Row Renderer for Sticky Elements (React Native)\nDESCRIPTION: The _overrideRowRenderer function allows customizing the appearance of sticky header and footer elements. It takes the row type, data, and index as input. In this example, it overrides the appearance of the sticky element at index 7, changing its background color and text. Other sticky indices will use the default _rowRenderer.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/sample/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    /**\n     * This method is called whenever a view has to be stuck as a header or footer.\n     * Override the views for whichever sticky view requires changes.\n     * Eg. This can be used to add shadows etc. to the views once they stick.\n     */\n    _overrideRowRenderer = (type, data, index) => {\n        const view = this._rowRenderer(type, data, index);\n        switch(index) {\n            case 7: // Only overriding sticky index 7, sticky indices 3 and 10 will remain as they are.\n                const color = \"cyan\";\n                return (\n                    <View style={{height: 100, backgroundColor: color, alignItems: 'center', justifyContent: 'center'}}>\n                        <Text style={{fontSize: 32}}>Overridden sticky</Text>\n                    </View>\n                );\n                break;\n        }\n        return view;\n    };\n```\n\n----------------------------------------\n\nTITLE: Row Renderer without shouldComponentUpdate\nDESCRIPTION: This code shows a rowRenderer implementation. If you're using regular render cycle, such as if the first row shifts by `1px` all of them need to be moved, then each component should have a valid `shouldComponentUpdate` defined in its implementation.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/performance/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrowRenderer(type, data) => {\n    return <MyComponent content={data}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Rows in RecyclerListView (React Native)\nDESCRIPTION: This function, _rowRenderer, defines how each row in the RecyclerListView is rendered. It takes the row type, data, and index as input and returns a View component with a background color determined by the index. The text within the view displays the index of the row.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/sample/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    _rowRenderer = (type, data, index) => {\n        let color = 'grey';\n        switch(index%6) {\n            case 0:\n                color = \"purple\";\n                break;\n            case 1:\n                color = \"green\";\n                break;\n            case 2:\n                color = \"blue\";\n                break;\n            case 3:\n                color = \"red\";\n                break;\n            case 4:\n                color = \"yellow\";\n                break;\n            case 5:\n                color = \"orange\";\n                break;\n        }\n        return (\n            <View style={{height: 100, backgroundColor: color, alignItems: 'center', justifyContent: 'center'}}>\n                <Text style={{fontSize: 32}}>{index}</Text>\n            </View>\n        );\n    };\n```\n\n----------------------------------------\n\nTITLE: Applying Window Correction (JavaScript)\nDESCRIPTION: This snippet shows how to use `applyWindowCorrection` to adjust the visible window bounds of the RecyclerListView dynamically. It takes current X and Y offsets, along with a WindowCorrection object, allowing to shift the top and bottom sticky widgets.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n  * this method is invoked upon scrolling the recyclerlistview, and provides current X offset, Y offset and WindowCorrection object.\n  * WindowCorrection has 3 params that can be used to change the perceived viewability of items present.\n  * \n  * The value of startCorrection and endCorrection is provided to StickyContainer upon scroll.\n  * current offset can be used to dynamically calculate the correctional offset to be provided.\n  * \n  * @param {current X offset value} offsetX \n  * @param {current Y offset value} offsetY \n  * @param {*} windowCorrection \n  */\n_applyWindowCorrection(offset, offsetY, windowCorrection) {\n    // Provide a positive value to startCorrection to shift the Top Sticky widget downwards.\n    windowCorrection.startCorrection = -20; \n\n    // Provide a positive value to endCorrection to shift the Bottom Sticky widget upwards.\n    windowCorrection.endCorrection = 20;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RecyclerListView with ScrollView Props in Typescript\nDESCRIPTION: This code snippet demonstrates how to use RecyclerListView with inherited ScrollView props in a Typescript environment.  It shows how to pass ScrollView props like `refreshControl` within the `scrollViewProps` prop of the RecyclerListView component.  This approach is necessary for Typescript to correctly handle inherited ScrollView properties.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RecyclerListView\n  rowRenderer={this.rowRenderer}\n  dataProvider={queue}\n  layoutProvider={this.layoutProvider}\n  onScroll={this.checkRefetch}\n  renderFooter={this.renderFooter}\n  scrollViewProps={{\n    refreshControl: (\n      <RefreshControl\n        refreshing={loading}\n        onRefresh={async () => {\n          this.setState({ loading: true });\n          analytics.logEvent('Event_Stagg_pull_to_refresh');\n          await refetchQueue();\n          this.setState({ loading: false });\n        }}\n      />\n    )\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting RecyclerListView Reference (React Native)\nDESCRIPTION: This function, _setRef, is used to store a reference to the RecyclerListView component.  This allows direct manipulation of the RecyclerListView instance if needed.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/sample/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    _setRef(recycler) {\n        this._recyclerRef = recycler;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting RecyclerListView Ref (JavaScript)\nDESCRIPTION: This snippet demonstrates how to properly set a ref to a RecyclerListView component using a function, which is required when using StickyContainer. The ref is used to access the RecyclerListView instance.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/docs/guides/sticky/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<RecyclerListView ref={this._setRef}/>\n\n_setRef(recycler) {\n    this._recyclerRef = recycler;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RecyclerListView with npm\nDESCRIPTION: This command installs the RecyclerListView package from npm. It is a necessary first step to use the component in a React Native or web project.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save recyclerlistview\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Version of RecyclerListView with npm\nDESCRIPTION: This command installs the beta version of the RecyclerListView package. Use this if you want to try out the latest features and bug fixes before they are released to the stable version. Be aware that beta versions may contain bugs.\nSOURCE: https://github.com/flipkart/recyclerlistview/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save recyclerlistview@beta\n```"
  }
]