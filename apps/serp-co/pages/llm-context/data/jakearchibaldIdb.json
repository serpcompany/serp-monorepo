[
  {
    "owner": "jakearchibald",
    "repo": "idb",
    "content": "TITLE: Creating an Article Store with IDB and Async Iterators in JavaScript\nDESCRIPTION: Demonstrates how to create a more complex store for articles, including object store creation, index creation, adding single and multiple items, retrieving data, and updating multiple records using async iterators.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDB } from 'idb/with-async-ittr.js';\n\nasync function demo() {\n  const db = await openDB('Articles', 1, {\n    upgrade(db) {\n      // Create a store of objects\n      const store = db.createObjectStore('articles', {\n        // The 'id' property of the object will be the key.\n        keyPath: 'id',\n        // If it isn't explicitly set, create a value by auto incrementing.\n        autoIncrement: true,\n      });\n      // Create an index on the 'date' property of the objects.\n      store.createIndex('date', 'date');\n    },\n  });\n\n  // Add an article:\n  await db.add('articles', {\n    title: 'Article 1',\n    date: new Date('2019-01-01'),\n    body: '…',\n  });\n\n  // Add multiple articles in one transaction:\n  {\n    const tx = db.transaction('articles', 'readwrite');\n    await Promise.all([\n      tx.store.add({\n        title: 'Article 2',\n        date: new Date('2019-01-01'),\n        body: '…',\n      }),\n      tx.store.add({\n        title: 'Article 3',\n        date: new Date('2019-01-02'),\n        body: '…',\n      }),\n      tx.done,\n    ]);\n  }\n\n  // Get all the articles in date order:\n  console.log(await db.getAllFromIndex('articles', 'date'));\n\n  // Add 'And, happy new year!' to all articles on 2019-01-01:\n  {\n    const tx = db.transaction('articles', 'readwrite');\n    const index = tx.store.index('date');\n\n    for await (const cursor of index.iterate(new Date('2019-01-01'))) {\n      const article = { ...cursor.value };\n      article.body += ' And, happy new year!';\n      cursor.update(article);\n    }\n\n    await tx.done;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Key-Value Store with IDB in JavaScript\nDESCRIPTION: Shows how to create a simple key-value store using IDB, similar to localStorage but asynchronous. Includes functions for getting, setting, deleting, clearing, and retrieving all keys.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDB } from 'idb';\n\nconst dbPromise = openDB('keyval-store', 1, {\n  upgrade(db) {\n    db.createObjectStore('keyval');\n  },\n});\n\nexport async function get(key) {\n  return (await dbPromise).get('keyval', key);\n}\nexport async function set(key, val) {\n  return (await dbPromise).put('keyval', val, key);\n}\nexport async function del(key) {\n  return (await dbPromise).delete('keyval', key);\n}\nexport async function clear() {\n  return (await dbPromise).clear('keyval');\n}\nexport async function keys() {\n  return (await dbPromise).getAllKeys('keyval');\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with IDB for Strongly Typed Databases\nDESCRIPTION: Explains how to use TypeScript with IDB to create strongly typed databases. Includes examples of defining database schemas, upgrading databases, and handling type conflicts during upgrades.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openDB, DBSchema } from 'idb';\n\ninterface MyDB extends DBSchema {\n  'favourite-number': {\n    key: string;\n    value: number;\n  };\n  products: {\n    value: {\n      name: string;\n      price: number;\n      productCode: string;\n    };\n    key: string;\n    indexes: { 'by-price': number };\n  };\n}\n\nasync function demo() {\n  const db = await openDB<MyDB>('my-db', 1, {\n    upgrade(db) {\n      db.createObjectStore('favourite-number');\n\n      const productStore = db.createObjectStore('products', {\n        keyPath: 'productCode',\n      });\n      productStore.createIndex('by-price', 'price');\n    },\n  });\n\n  // This works\n  await db.put('favourite-number', 7, 'Jen');\n  // This fails at compile time, as the 'favourite-number' store expects a number.\n  await db.put('favourite-number', 'Twelve', 'Jake');\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openDB, DBSchema, IDBPDatabase } from 'idb';\n\ninterface MyDBV1 extends DBSchema {\n  'favourite-number': { key: string; value: number };\n}\n\ninterface MyDBV2 extends DBSchema {\n  'fave-num': { key: string; value: number };\n}\n\nconst db = await openDB<MyDBV2>('my-db', 2, {\n  async upgrade(db, oldVersion) {\n    // Cast a reference of the database to the old schema.\n    const v1Db = db as unknown as IDBPDatabase<MyDBV1>;\n\n    if (oldVersion < 1) {\n      v1Db.createObjectStore('favourite-number');\n    }\n    if (oldVersion < 2) {\n      const store = v1Db.createObjectStore('favourite-number');\n      store.name = 'fave-num';\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over IndexedDB Stores with Async Iterators in JavaScript\nDESCRIPTION: Demonstrates how to use async iterators to iterate over IndexedDB stores, indexes, and cursors. Shows basic iteration and cursor advancement techniques.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction(storeName);\n\nfor await (const cursor of tx.store) {\n  // …\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction(storeName);\n\nfor await (const cursor of tx.store) {\n  console.log(cursor.value);\n  // Skip the next item\n  cursor.advance(2);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst index = db.transaction('books').store.index('author');\n\nfor await (const cursor of index.iterate('Douglas Adams')) {\n  console.log(cursor.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a database with the openDB function\nDESCRIPTION: Example showing the openDB function with various callback options including upgrade, blocked, blocking, and terminated handlers.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await openDB(name, version, {\n  upgrade(db, oldVersion, newVersion, transaction, event) {\n    // …\n  },\n  blocked(currentVersion, blockedVersion, event) {\n    // …\n  },\n  blocking(currentVersion, blockedVersion, event) {\n    // …\n  },\n  terminated() {\n    // …\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Database shortcuts for object store operations\nDESCRIPTION: Examples showing the convenience methods for common database operations that automatically handle transaction creation.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a value from a store:\nconst value = await db.get(storeName, key);\n// Set a value in a store:\nawait db.put(storeName, value, key);\n```\n\n----------------------------------------\n\nTITLE: Basic object store operations with promises\nDESCRIPTION: Example showing how the library converts IDBRequest objects into promises for easier database operations.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = db.transaction(storeName).objectStore(storeName);\nconst value = await store.get(key);\n```\n\n----------------------------------------\n\nTITLE: Transaction handling with successful operations\nDESCRIPTION: Example of a valid transaction lifecycle where operations are properly chained with await.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction('keyval', 'readwrite');\nconst store = tx.objectStore('keyval');\nconst val = (await store.get('counter')) || 0;\nawait store.put(val + 1, 'counter');\nawait tx.done;\n```\n\n----------------------------------------\n\nTITLE: Transaction completion with the done promise\nDESCRIPTION: Example showing how to use the done promise to await transaction completion along with individual operations.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction(storeName, 'readwrite');\nawait Promise.all([\n  tx.store.put('bar', 'foo'),\n  tx.store.put('world', 'hello'),\n  tx.done,\n]);\n```\n\n----------------------------------------\n\nTITLE: Transaction handling with potential closure issues\nDESCRIPTION: Example showing a common error case where a transaction auto-closes due to awaiting external operations between database operations.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction('keyval', 'readwrite');\nconst store = tx.objectStore('keyval');\nconst val = (await store.get('counter')) || 0;\n// This is where things go wrong:\nconst newVal = await fetch('/increment?val=' + val);\n// And this throws an error:\nawait store.put(newVal, 'counter');\nawait tx.done;\n```\n\n----------------------------------------\n\nTITLE: Database shortcuts for index operations\nDESCRIPTION: Example showing how to use the convenience methods for retrieving data from an index.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a value from an index:\nconst value = await db.getFromIndex(storeName, indexName, key);\n```\n\n----------------------------------------\n\nTITLE: Enhanced cursor iteration with promises\nDESCRIPTION: Example showing the simplified cursor iteration pattern using the enhanced cursor methods that return promises.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet cursor = await db.transaction(storeName).store.openCursor();\n\nwhile (cursor) {\n  console.log(cursor.key, cursor.value);\n  cursor = await cursor.continue();\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a database with the deleteDB function\nDESCRIPTION: Example showing how to delete a database using the deleteDB function with a blocked handler option.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait deleteDB(name, {\n  blocked() {\n    // …\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening a Database in IDB 4.x (JavaScript)\nDESCRIPTION: Shows the new method of opening a database using the 'openDB' function in IDB version 4.x. It illustrates the changes in function name, signature, and the use of an options object with an upgrade method.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDB } from 'idb';\n\nopenDB('db-name', 1, {\n  upgrade(db, oldVersion, newVersion, transaction) {\n    console.log(oldVersion);\n    console.log(transaction);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction store shortcut property\nDESCRIPTION: Example showing the convenience property for accessing a store in single-store transactions.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = db.transaction('whatever');\nconst store = tx.store;\n```\n\n----------------------------------------\n\nTITLE: Wrapping plain IndexedDB objects\nDESCRIPTION: Using the wrap function to enhance a plain IndexedDB object with the features provided by the idb library.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapped = wrap(unwrapped);\n```\n\n----------------------------------------\n\nTITLE: Unwrapping enhanced IndexedDB objects\nDESCRIPTION: Using the unwrap function to convert an enhanced IndexedDB object back to its plain native equivalent.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwrapped = unwrap(wrapped);\n```\n\n----------------------------------------\n\nTITLE: Importing IDB Functions in 3.x (JavaScript)\nDESCRIPTION: Illustrates the new way of importing and using IDB functions in version 3.x. It shows how to import specific functions and use them directly.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDb, deleteDb } from 'idb';\nopenDb(…);\ndeleteDb(…);\n```\n\n----------------------------------------\n\nTITLE: Opening a Database in IDB 3.x (JavaScript)\nDESCRIPTION: Demonstrates the old method of opening a database using the 'openDb' function in IDB version 3.x. It shows how to specify the database name, version, and an upgrade callback.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDb } from 'idb';\n\nopenDb('db-name', 1, (upgradeDb) => {\n  console.log(upgradeDb.oldVersion);\n  console.log(upgradeDb.transaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing IDB Functions in 2.x (JavaScript)\nDESCRIPTION: Demonstrates the old way of importing and using IDB functions in version 2.x. It shows how to import the entire library and use its methods.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport idb from 'idb';\nidb.open(…);\nidb.delete(…);\n```\n\n----------------------------------------\n\nTITLE: Importing idb in a module environment\nDESCRIPTION: Example of importing the idb library in a JavaScript module environment like webpack or Rollup.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openDB, deleteDB, wrap, unwrap } from 'idb';\n\nasync function doDatabaseStuff() {\n  const db = await openDB(…);\n}\n```\n\n----------------------------------------\n\nTITLE: Using idb via ES modules in the browser\nDESCRIPTION: Example of importing idb directly in the browser using the ES modules approach via jsdelivr CDN.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { openDB, deleteDB, wrap, unwrap } from 'https://cdn.jsdelivr.net/npm/idb@8/+esm';\n\n  async function doDatabaseStuff() {\n    const db = await openDB(…);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using idb via UMD script in the browser\nDESCRIPTION: Example of including idb in a browser using an external script reference that creates a global idb object.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/idb@8/build/umd.js\"></script>\n<script>\n  async function doDatabaseStuff() {\n    const db = await idb.openDB(…);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing idb via npm\nDESCRIPTION: Command to install the idb package using npm package manager.\nSOURCE: https://github.com/jakearchibald/idb/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install idb\n```"
  }
]