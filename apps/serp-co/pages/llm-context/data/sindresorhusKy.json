[
  {
    "owner": "sindresorhus",
    "repo": "ky",
    "content": "TITLE: Basic Ky Usage with POST Request and JSON Response\nDESCRIPTION: Demonstrates how to make a POST request with JSON data and handle the JSON response using Ky's simplified API.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst json = await ky.post('https://example.com', {json: {foo: true}}).json();\n\nconsole.log(json);\n//=> {data: 'ðŸ¦„'}\n```\n\n----------------------------------------\n\nTITLE: Basic API Usage with JSON Response\nDESCRIPTION: Shows how to use Ky to make a GET request and directly parse the JSON response in a single chain.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst user = await ky('/api/user').json();\n\nconsole.log(user);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTPError in Ky\nDESCRIPTION: Demonstrates how to handle HTTPError in Ky, including accessing the response body when an error occurs.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n\tawait ky('https://example.com').json();\n} catch (error) {\n\tif (error.name === 'HTTPError') {\n\t\tconst errorJson = await error.response.json();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Ky Instance with Custom Defaults\nDESCRIPTION: Shows how to create a new Ky instance with custom defaults using ky.extend(), including header manipulation and hook modifications.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst url = 'https://sindresorhus.com';\n\nconst original = ky.create({\n\theaders: {\n\t\trainbow: 'rainbow',\n\t\tunicorn: 'unicorn'\n\t},\n\thooks: {\n\t\tbeforeRequest: [ () => console.log('before 1') ],\n\t\tafterResponse: [ () => console.log('after 1') ],\n\t},\n});\n\nconst extended = original.extend({\n\theaders: {\n\t\trainbow: undefined\n\t},\n\thooks: {\n\t\tbeforeRequest: undefined,\n\t\tafterResponse: [ () => console.log('after 2') ],\n\t}\n});\n\nconst response = await extended(url).json();\n//=> after 1\n//=> after 2\n\nconsole.log('rainbow' in response);\n//=> false\n\nconsole.log('unicorn' in response);\n//=> true\n```\n\n----------------------------------------\n\nTITLE: Creating New Ky Instance with Complete New Defaults\nDESCRIPTION: Demonstrates how to create a new Ky instance with entirely new defaults using ky.create(), useful for API clients with specific configurations.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\n// On https://my-site.com\n\nconst api = ky.create({prefixUrl: 'https://example.com/api'});\n\nconst response = await api.get('users/123');\n//=> 'https://example.com/api/users/123'\n\nconst response = await api.get('/status', {prefixUrl: ''});\n//=> 'https://my-site.com/status'\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Settings in Ky\nDESCRIPTION: Example showing how to configure retry behavior with custom limits, methods, status codes, and backoff settings.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst json = await ky('https://example.com', {\n\tretry: {\n\t\tlimit: 10,\n\t\tmethods: ['get'],\n\t\tstatusCodes: [413],\n\t\tbackoffLimit: 3000\n\t}\n}).json();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with Type Parameters\nDESCRIPTION: Demonstrates how to use TypeScript with Ky, including generic type parameters to provide type safety for JSON responses.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport ky from 'ky';\n\n// user1 is unknown\nconst user1 = await ky('/api/users/1').json();\n// user2 is a User\nconst user2 = await ky<User>('/api/users/2').json();\n// user3 is a User\nconst user3 = await ky('/api/users/3').json<User>();\n\nconsole.log([user1, user2, user3]);\n```\n\n----------------------------------------\n\nTITLE: Request Cancellation in Ky using AbortController\nDESCRIPTION: Shows how to use AbortController for request cancellation in Ky, allowing for timeout-based cancellation of requests.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst controller = new AbortController();\nconst {signal} = controller;\n\nsetTimeout(() => {\n\tcontroller.abort();\n}, 5000);\n\ntry {\n\tconsole.log(await ky(url, {signal}).text());\n} catch (error) {\n\tif (error.name === 'AbortError') {\n\t\tconsole.log('Fetch aborted');\n\t} else {\n\t\tconsole.error('Fetch error:', error);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeRequest Hook in Ky\nDESCRIPTION: Demonstrates how to use the beforeRequest hook to modify request headers before sending.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst api = ky.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\trequest => {\n\t\t\t\trequest.headers.set('X-Requested-With', 'ky');\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await api.get('https://example.com/api/users');\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeRetry Hook in Ky\nDESCRIPTION: Shows how to use the beforeRetry hook to modify requests before retry attempts, including token refresh logic.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\tasync ({request, options, error, retryCount}) => {\n\t\t\t\tconst token = await ky('https://example.com/refresh-token');\n\t\t\t\trequest.headers.set('Authorization', `token ${token}`);\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data with Ky\nDESCRIPTION: Shows how to send form data using Ky, including both multipart/form-data and application/x-www-form-urlencoded formats.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\n// `multipart/form-data`\nconst formData = new FormData();\nformData.append('food', 'fries');\nformData.append('drink', 'icetea');\n\nconst response = await ky.post(url, {body: formData});\n\n// `application/x-www-form-urlencoded`\nconst searchParams = new URLSearchParams();\nsearchParams.set('food', 'fries');\nsearchParams.set('drink', 'icetea');\n\nconst response = await ky.post(url, {body: searchParams});\n```\n\n----------------------------------------\n\nTITLE: Using prefixUrl Option with Ky\nDESCRIPTION: Examples of using the prefixUrl option to prepend a base URL to requests, useful for API endpoints or creating specialized Ky instances.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\n// On https://example.com\n\nconst response = await ky('unicorn', {prefixUrl: '/api'});\n//=> 'https://example.com/api/unicorn'\n\nconst response2 = await ky('unicorn', {prefixUrl: 'https://cats.com'});\n//=> 'https://cats.com/unicorn'\n```\n\n----------------------------------------\n\nTITLE: Implementing afterResponse Hook in Ky\nDESCRIPTION: Shows how to use afterResponse hook for response modification and conditional retry logic.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(_request, _options, response) => {\n\t\t\t\t// You could do something with the response, for example, logging.\n\t\t\t\tlog(response);\n\n\t\t\t\t// Or return a `Response` instance to overwrite the response.\n\t\t\t\treturn new Response('A different response', {status: 200});\n\t\t\t},\n\n\t\t\t// Or retry with a fresh token on a 403 error\n\t\t\tasync (request, options, response) => {\n\t\t\t\tif (response.status === 403) {\n\t\t\t\t\t// Get a fresh token\n\t\t\t\t\tconst token = await ky('https://example.com/token').text();\n\n\t\t\t\t\t// Retry with the token\n\t\t\t\t\trequest.headers.set('Authorization', `token ${token}`);\n\n\t\t\t\t\treturn ky(request);\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeError Hook in Ky\nDESCRIPTION: Example of using beforeError hook to customize error handling and modify error messages.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nawait ky('https://example.com', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n\t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${response.status})`;\n\t\t\t\t}\n\n\t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with Custom Function in Ky\nDESCRIPTION: Demonstrates how to use a custom JSON parsing function with Ky, such as using the 'bourne' package to protect against prototype pollution.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\nimport bourne from '@hapijs/bourne';\n\nconst json = await ky('https://example.com', {\n\tparseJson: text => bourne(text)\n}).json();\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Stringification in Ky\nDESCRIPTION: Shows how to use a custom JSON stringification function with Ky, including an example of transforming date fields using Luxon.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\nimport {DateTime} from 'luxon';\n\nconst json = await ky('https://example.com', {\n\tstringifyJson: data => JSON.stringify(data, (key, value) => {\n\t\tif (key.endsWith('_at')) {\n\t\t\treturn DateTime.fromISO(value).toSeconds();\n\t\t}\n\n\t\treturn value;\n\t})\n}).json();\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Progress Tracking in Ky\nDESCRIPTION: Example showing how to track upload progress using the onUploadProgress callback.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst response = await ky.post('https://example.com/upload', {\n\tbody: largeFile,\n\tonUploadProgress: (progress, chunk) => {\n\t\t// Example output:\n\t\t// `0% - 0 of 1271 bytes`\n\t\t// `100% - 1271 of 1271 bytes`\n\t\tconsole.log(`${progress.percent * 100}% - ${progress.transferredBytes} of ${progress.totalBytes} bytes`);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Download Progress Tracking in Ky\nDESCRIPTION: Example showing how to track download progress using the onDownloadProgress callback.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\tonDownloadProgress: (progress, chunk) => {\n\t\t// Example output:\n\t\t// `0% - 0 of 1271 bytes`\n\t\t// `100% - 1271 of 1271 bytes`\n\t\tconsole.log(`${progress.percent * 100}% - ${progress.transferredBytes} of ${progress.totalBytes} bytes`);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Content-Type Header in Ky\nDESCRIPTION: Demonstrates how to set a custom Content-Type header in Ky requests, useful for APIs requiring non-standard content types.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst json = await ky.post('https://example.com', {\n\theaders: {\n\t\t'content-type': 'application/json'\n\t},\n\tjson: {\n\t\tfoo: true\n\t},\n}).json();\n\nconsole.log(json);\n//=> {data: 'ðŸ¦„'}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fetch Implementation in Ky\nDESCRIPTION: Demonstrates how to use a custom fetch implementation with Ky, such as 'isomorphic-unfetch' for server-side rendering compatibility.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\nimport fetch from 'isomorphic-unfetch';\n\nconst json = await ky('https://example.com', {fetch}).json();\n```\n\n----------------------------------------\n\nTITLE: Equivalent fetch Implementation Without Ky\nDESCRIPTION: Demonstrates how the same POST request would be implemented using native fetch API, highlighting Ky's simplifications.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass HTTPError extends Error {}\n\nconst response = await fetch('https://example.com', {\n\tmethod: 'POST',\n\tbody: JSON.stringify({foo: true}),\n\theaders: {\n\t\t'content-type': 'application/json'\n\t}\n});\n\nif (!response.ok) {\n\tthrow new HTTPError(`Fetch error: ${response.statusText}`);\n}\n\nconst json = await response.json();\n\nconsole.log(json);\n//=> {data: 'ðŸ¦„'}\n```\n\n----------------------------------------\n\nTITLE: Using ky.stop Symbol in beforeRetry Hook\nDESCRIPTION: Shows how to use the ky.stop Symbol in a beforeRetry hook to stop retries, useful for preventing retries in certain conditions.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'ky';\n\nconst options = {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\tasync ({request, options, error, retryCount}) => {\n\t\t\t\tconst shouldStopRetry = await ky('https://example.com/api');\n\t\t\t\tif (shouldStopRetry) {\n\t\t\t\t\treturn ky.stop;\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n};\n\n// Note that response will be `undefined` in case `ky.stop` is returned.\nconst response = await ky.post('https://example.com', options);\n\n// Using `.text()` or other body methods is not supported.\nconst text = await ky('https://example.com', options).text();\n```\n\n----------------------------------------\n\nTITLE: Using Ky in Browser without Bundler\nDESCRIPTION: Demonstrates how to use Ky directly in a browser environment without a bundler, using ES modules.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport ky from 'https://unpkg.com/ky/distribution/index.js';\n\nconst json = await ky('https://jsonplaceholder.typicode.com/todos/1').json();\n\nconsole.log(json.title);\n//=> 'delectus aut autem'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Ky in Deno\nDESCRIPTION: Example of importing Ky in a Deno environment using the ESM.sh CDN.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ky from 'https://esm.sh/ky';\n```\n\n----------------------------------------\n\nTITLE: Installing Ky via npm\nDESCRIPTION: Command to install the Ky package using npm package manager.\nSOURCE: https://github.com/sindresorhus/ky/blob/main/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ky\n```"
  }
]