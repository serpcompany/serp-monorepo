[
  {
    "owner": "video-dev",
    "repo": "hls.js",
    "content": "TITLE: Embedding HLS.js in HTML with MSE Prioritization\nDESCRIPTION: HTML and JavaScript code to embed HLS.js in a web page, prioritizing MSE playback over native browser support.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n<!-- Or if you want the latest version from the main branch -->\n<!-- <script src=\"https://cdn.jsdelivr.net/npm/hls.js@canary\"></script> -->\n<video id=\"video\"></video>\n<script>\n  var video = document.getElementById('video');\n  var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n  if (Hls.isSupported()) {\n    var hls = new Hls();\n    hls.loadSource(videoSrc);\n    hls.attachMedia(video);\n  }\n  // HLS.js is not supported on platforms that do not have Media Source\n  // Extensions (MSE) enabled.\n  //\n  // When the browser has built-in HLS support (check using `canPlayType`),\n  // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video\n  // element through the `src` property. This is using the built-in support\n  // of the plain video element, without using HLS.js.\n  else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n    video.src = videoSrc;\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding HLS.js with Native HLS Support Prioritization\nDESCRIPTION: HTML and JavaScript code to embed HLS.js in a web page, prioritizing native browser HLS support over HLS.js MSE playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n<!-- Or if you want the latest version from the main branch -->\n<!-- <script src=\"https://cdn.jsdelivr.net/npm/hls.js@canary\"></script> -->\n<video id=\"video\"></video>\n<script>\n  var video = document.getElementById('video');\n  var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n  //\n  // First check for native browser HLS support\n  //\n  if (video.canPlayType('application/vnd.apple.mpegurl')) {\n    video.src = videoSrc;\n    //\n    // If no native HLS support, check if HLS.js is supported\n    //\n  } else if (Hls.isSupported()) {\n    var hls = new Hls();\n    hls.loadSource(videoSrc);\n    hls.attachMedia(video);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Instantiating HLS.js and Binding to Video Element\nDESCRIPTION: Shows how to create an HLS.js instance and bind it to a video element in HTML and JavaScript.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n\n<video id=\"video\"></video>\n<script>\n  if (Hls.isSupported()) {\n    var video = document.getElementById('video');\n    var hls = new Hls();\n    hls.attachMedia(video);\n    hls.on(Hls.Events.MEDIA_ATTACHED, function () {\n      console.log('video and hls.js are now bound together !');\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hls Class in TypeScript\nDESCRIPTION: This class implements the main HLS functionality, including methods for attaching media, managing audio/video tracks, and controlling playback. It also includes various getter and setter methods for HLS-related properties.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Hls implements HlsEventEmitter {\n    constructor(userConfig?: Partial<HlsConfig>);\n    // ... (many methods and properties omitted for brevity)\n    get autoLevelEnabled(): boolean;\n    get bandwidthEstimate(): number;\n    set bandwidthEstimate(abrEwmaDefaultEstimate: number);\n    get bufferedToEnd(): boolean;\n    get bufferingEnabled(): boolean;\n    // ... (more methods and properties)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseSegment Class in TypeScript for HLS.js\nDESCRIPTION: The BaseSegment class represents a segment of HLS content. It provides methods and properties for handling byte ranges, element streams, segment statistics, and URL management. The class enables manipulating media segments in the HLS.js library.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"BaseSegment\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class BaseSegment {\n    constructor(base: Base | string);\n    // Warning: (ae-forgotten-export) The symbol \"Base\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    readonly base: Base;\n    // (undocumented)\n    get baseurl(): string;\n    // (undocumented)\n    get byteRange(): [number, number] | [];\n    // (undocumented)\n    get byteRangeEndOffset(): number | undefined;\n    // (undocumented)\n    get byteRangeStartOffset(): number | undefined;\n    // (undocumented)\n    clearElementaryStreamInfo(): void;\n    // (undocumented)\n    get elementaryStreams(): ElementaryStreams;\n    set elementaryStreams(value: ElementaryStreams);\n    // (undocumented)\n    get hasStats(): boolean;\n    // (undocumented)\n    get hasStreams(): boolean;\n    // (undocumented)\n    relurl?: string;\n    // (undocumented)\n    setByteRange(value: string, previous?: BaseSegment): void;\n    // (undocumented)\n    get stats(): LoadStats;\n    set stats(value: LoadStats);\n    // (undocumented)\n    get url(): string;\n    set url(value: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading HLS Manifest and Attaching to Video Element\nDESCRIPTION: Demonstrates how to load an HLS manifest URL and attach it to a video element using HLS.js.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n\n<video id=\"video\"></video>\n<script>\n  if (Hls.isSupported()) {\n    var video = document.getElementById('video');\n    var hls = new Hls();\n    hls.on(Hls.Events.MEDIA_ATTACHED, function () {\n      console.log('video and hls.js are now bound together !');\n    });\n    hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {\n      console.log(\n        'manifest loaded, found ' + data.levels.length + ' quality level'\n      );\n    });\n    hls.loadSource('http://my.streamURL.com/playlist.m3u8');\n    hls.attachMedia(video);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Error Recovery with MediaError in HLS.js\nDESCRIPTION: Sample code demonstrating how to recover from media errors in HLS.js by attaching error event listeners to both the HLS instance and video element, then calling recovery methods when errors occur.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// First, create the Player instance\nvar video = document.getElementById('video');\nif (Hls.isSupported()) {\n  var hls = new Hls();\n  hls.loadSource('http://your-url.com/playlist.m3u8');\n  hls.attachMedia(video);\n\n  // From video element (optional)\n  video.addEventListener('error', function(evt) {\n    var mediaError = evt.currentTarget.error;\n    if(mediaError.code === MediaError.MEDIA_ERR_DECODE) {\n      /* fatal media error detected, try to recover */\n      console.error(\"fatal media error detected, try to recover\");\n      hls.recoverMediaError();\n    }\n  });\n\n  // From the Hls instance\n  hls.on(Hls.Events.ERROR, function (event, data) {\n    if (data.fatal) {\n      switch(data.type) {\n      case Hls.ErrorTypes.MEDIA_ERROR:\n        console.error(\"fatal media error encountered, try to recover\");\n        hls.recoverMediaError();\n        break;\n      case Hls.ErrorTypes.NETWORK_ERROR:\n        // handle network error\n        break;\n      default:\n        // cannot recover\n        hls.destroy();\n        break;\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HLS Configuration Type in TypeScript\nDESCRIPTION: Type definition for HlsConfig which contains all configurable options for the HLS.js library. It includes settings for debugging, workers, media loading, controllers, and various playback features including low latency mode.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HlsConfig = {\n    debug: boolean | ILogger;\n    enableWorker: boolean;\n    workerPath: null | string;\n    enableSoftwareAES: boolean;\n    minAutoBitrate: number;\n    ignoreDevicePixelRatio: boolean;\n    maxDevicePixelRatio: number;\n    preferManagedMediaSource: boolean;\n    timelineOffset?: number;\n    ignorePlaylistParsingErrors: boolean;\n    loader: {\n        new (confg: HlsConfig): Loader<LoaderContext>;\n    };\n    fLoader?: FragmentLoaderConstructor;\n    pLoader?: PlaylistLoaderConstructor;\n    fetchSetup?: (context: LoaderContext, initParams: any) => Promise<Request> | Request;\n    xhrSetup?: (xhr: XMLHttpRequest, url: string) => Promise<void> | void;\n    audioStreamController?: typeof AudioStreamController;\n    audioTrackController?: typeof AudioTrackController;\n    subtitleStreamController?: typeof SubtitleStreamController;\n    subtitleTrackController?: typeof SubtitleTrackController;\n    timelineController?: typeof TimelineController;\n    emeController?: typeof EMEController;\n    cmcd?: CMCDControllerConfig;\n    cmcdController?: typeof CMCDController;\n    contentSteeringController?: typeof ContentSteeringController;\n    interstitialsController?: typeof InterstitialsController;\n    enableInterstitialPlayback: boolean;\n    interstitialAppendInPlace: boolean;\n    interstitialLiveLookAhead: number;\n    assetPlayerId?: string;\n    useMediaCapabilities: boolean;\n    abrController: typeof AbrController;\n    bufferController: typeof BufferController;\n    capLevelController: typeof CapLevelController;\n    errorController: typeof ErrorController;\n    fpsController: typeof FPSController;\n    progressive: boolean;\n    lowLatencyMode: boolean;\n    primarySessionId?: string;\n} & ABRControllerConfig & BufferControllerConfig & CapLevelControllerConfig & EMEControllerConfig & FPSControllerConfig & GapControllerConfig & LevelControllerConfig & MP4RemuxerConfig & StreamControllerConfig & SelectionPreferences & LatencyControllerConfig & MetadataControllerConfig & TimelineControllerConfig & TSDemuxerConfig & HlsLoadPolicies & FragmentLoaderConfig & PlaylistLoaderConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining HlsAssetPlayer Class in TypeScript\nDESCRIPTION: This class represents an HLS asset player, which manages playback of specific assets within an HLS stream. It includes methods for attaching media, managing buffering, and controlling playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class HlsAssetPlayer {\n    constructor(HlsPlayerClass: typeof Hls, userConfig: Partial<HlsConfig>, interstitial: InterstitialEvent, assetItem: InterstitialAssetItem);\n    // ... (methods and properties omitted for brevity)\n    get assetId(): InterstitialAssetId;\n    readonly assetItem: InterstitialAssetItem;\n    attachMedia(data: HTMLMediaElement | MediaAttachingData): void;\n    // ... (more methods and properties)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Time Offset in HLS.js Playback\nDESCRIPTION: JavaScript code to account for time offset in HLS transcoded videos and ensure correct time reporting.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet tOffset = 0;\nconst getAppendedOffset = (eventName, { frag }) => {\n  if (frag.type === 'main' && frag.sn !== 'initSegment' && frag.elementaryStreams.video) {\n    const { start, startDTS, startPTS, maxStartPTS, elementaryStreams } = frag;\n    tOffset = elementaryStreams.video.startPTS - start;\n    hls.off(Hls.Events.BUFFER_APPENDED, getAppendedOffset);\n    console.log('video timestamp offset:', tOffset, { start, startDTS, startPTS, maxStartPTS, elementaryStreams });\n  }\n}\nhls.on(Hls.Events.BUFFER_APPENDED, getAppendedOffset);\n// and account for this offset, for example like this:\nconst video = document.querySelector('video');\nvideo.addEventListener('timeupdate', () => setTime(Math.max(0, video.currentTime - tOffset))\nconst seek = (t) => video.currentTime = t + tOffset;\nconst getDuration = () => video.duration - tOffset;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Loader in JavaScript for HLS.js\nDESCRIPTION: This snippet demonstrates how to create a custom loader function for HLS.js. It includes methods for loading content, aborting requests, and destroying the loader context. The loader handles various parameters and callbacks for successful loading, progress tracking, error handling, and timeout management.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar customLoader = function () {\n  this.load = function (context, config, callbacks) {};\n\n  this.abort = function () {};\n\n  this.destroy = function () {};\n};\n```\n\n----------------------------------------\n\nTITLE: HLS Events Enum Definition in TypeScript\nDESCRIPTION: Comprehensive enum of all HLS.js events including media loading, buffer management, fragment processing, and subtitle handling.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Events {\n    ASSET_LIST_LOADED = \"hlsAssetListLoaded\",\n    ASSET_LIST_LOADING = \"hlsAssetListLoading\",\n    AUDIO_TRACK_LOADED = \"hlsAudioTrackLoaded\",\n    // ...additional events\n    SUBTITLE_TRACKS_UPDATED = \"hlsSubtitleTracksUpdated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HLS.js with Custom Options\nDESCRIPTION: Shows how to create an HLS.js instance with custom configuration options, including various playback and network settings.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  autoStartLoad: true,\n  startPosition: -1,\n  debug: false,\n  capLevelOnFPSDrop: false,\n  capLevelToPlayerSize: false,\n  defaultAudioCodec: undefined,\n  initialLiveManifestSize: 1,\n  maxBufferLength: 30,\n  maxMaxBufferLength: 600,\n  backBufferLength: Infinity,\n  frontBufferFlushThreshold: Infinity,\n  maxBufferSize: 60 * 1000 * 1000,\n  maxBufferHole: 0.1,\n  highBufferWatchdogPeriod: 2,\n  nudgeOffset: 0.1,\n  nudgeMaxRetry: 3,\n  maxFragLookUpTolerance: 0.25,\n  liveSyncDurationCount: 3,\n  liveSyncOnStallIncrease: 1,\n  liveMaxLatencyDurationCount: Infinity,\n  liveDurationInfinity: false,\n  preferManagedMediaSource: false,\n  enableWorker: true,\n  enableSoftwareAES: true,\n  fragLoadPolicy: {\n    default: {\n      maxTimeToFirstByteMs: 9000,\n      maxLoadTimeMs: 100000,\n      timeoutRetry: {\n        maxNumRetry: 2,\n        retryDelayMs: 0,\n        maxRetryDelayMs: 0,\n      },\n      errorRetry: {\n        maxNumRetry: 5,\n        retryDelayMs: 3000,\n        maxRetryDelayMs: 15000,\n        backoff: 'linear',\n      },\n    },\n  },\n  startLevel: undefined,\n  audioPreference: {\n    characteristics: 'public.accessibility.describes-video',\n  },\n  subtitlePreference: {\n    lang: 'en-US',\n  },\n  startFragPrefetch: false,\n  testBandwidth: true,\n  progressive: false,\n  lowLatencyMode: true,\n  fpsDroppedMonitoringPeriod: 5000,\n  fpsDroppedMonitoringThreshold: 0.2,\n  appendErrorMaxRetry: 3,\n  loader: customLoader,\n  fLoader: customFragmentLoader,\n  pLoader: customPlaylistLoader,\n  xhrSetup: XMLHttpRequestSetupCallback,\n  fetchSetup: FetchSetupCallback,\n  abrController: AbrController,\n  bufferController: BufferController,\n  capLevelController: CapLevelController,\n  fpsController: FPSController,\n  timelineController: TimelineController,\n  enableDateRangeMetadataCues: true,\n  enableMetadataCues: true,\n  enableID3MetadataCues: true,\n  enableWebVTT: true,\n  enableIMSC1: true,\n  enableCEA708Captions: true,\n  stretchShortVideoTrack: false,\n  maxAudioFramesDrift: 1,\n  forceKeyFrameOnDiscontinuity: true,\n  abrEwmaFastLive: 3.0,\n  abrEwmaSlowLive: 9.0,\n  abrEwmaFastVoD: 3.0,\n  abrEwmaSlowVoD: 9.0,\n  abrEwmaDefaultEstimate: 500000,\n  abrEwmaDefaultEstimateMax: 5000000,\n  abrBandWidthFactor: 0.95,\n  abrBandWidthUpFactor: 0.7,\n  abrMaxWithRealBitrate: false,\n  maxStarvationDelay: 4,\n  maxLoadingDelay: 4,\n  minAutoBitrate: 0,\n  emeEnabled: false,\n  licenseXhrSetup: undefined,\n  drmSystems: {},\n  drmSystemOptions: {},\n  requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess,\n  cmcd: {\n    sessionId: uuid(),\n    contentId: hash(contentURL),\n    useHeaders: false,\n  },\n};\n\nvar hls = new Hls(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing InterstitialEvent Class in TypeScript\nDESCRIPTION: A comprehensive class representing an interstitial event. It manages properties like append behavior, asset lists, durations, playback restrictions, and timeline positioning. Contains methods for finding assets, checking playback limits, and managing event states.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InterstitialEvent {\n    constructor(dateRange: DateRange, base: BaseData);\n    // (undocumented)\n    get appendInPlace(): boolean;\n    set appendInPlace(value: boolean);\n    // (undocumented)\n    appendInPlaceStarted?: boolean;\n    // (undocumented)\n    assetList: InterstitialAssetItem[];\n    // (undocumented)\n    get assetListLoaded(): boolean;\n    // (undocumented)\n    assetListLoader?: Loader<LoaderContext>;\n    // (undocumented)\n    assetListResponse: AssetListJSON | null;\n    // (undocumented)\n    get assetListUrl(): string | undefined;\n    // (undocumented)\n    get assetUrl(): string | undefined;\n    // (undocumented)\n    get baseUrl(): string;\n    // (undocumented)\n    get contentMayVary(): boolean;\n    // (undocumented)\n    get cue(): DateRangeCue;\n    // (undocumented)\n    cumulativeDuration: number;\n    // (undocumented)\n    dateRange: DateRange;\n    // (undocumented)\n    get duration(): number;\n    set duration(value: number);\n    // (undocumented)\n    error?: Error;\n    // (undocumented)\n    findAssetIndex(asset: InterstitialAssetItem): number;\n    // (undocumented)\n    hasPlayed: boolean;\n    // (undocumented)\n    get identifier(): InterstitialId;\n    // (undocumented)\n    isAssetPastPlayoutLimit(assetIndex: number): boolean;\n    // (undocumented)\n    playoutLimit: number;\n    // (undocumented)\n    reset(): void;\n    // (undocumented)\n    resetOnResume?: boolean;\n    // (undocumented)\n    restrictions: PlaybackRestrictions;\n    // (undocumented)\n    resumeAnchor?: MediaFragmentRef;\n    // (undocumented)\n    resumeOffset: number;\n    // (undocumented)\n    get resumeTime(): number;\n    // (undocumented)\n    get resumptionOffset(): number;\n    // (undocumented)\n    setDateRange(dateRange: DateRange): void;\n    // (undocumented)\n    snapOptions: SnapOptions;\n    // (undocumented)\n    get startDate(): Date;\n    // (undocumented)\n    get startIsAligned(): boolean;\n    // (undocumented)\n    get startOffset(): number;\n    // (undocumented)\n    get startTime(): number;\n    // (undocumented)\n    get supplementsPrimary(): boolean;\n    // (undocumented)\n    get timelineOccupancy(): TimelineOccupancy;\n    // (undocumented)\n    get timelineStart(): number;\n    set timelineStart(value: number);\n    // (undocumented)\n    toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseStreamController Class in TypeScript for HLS.js\nDESCRIPTION: The BaseStreamController class extends TaskLoop and implements NetworkComponentAPI. It handles fragment loading, buffering, and playback management. This class manages the core streaming functionality of HLS.js, including buffer management and media segment loading.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"BaseStreamController\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class BaseStreamController extends TaskLoop implements NetworkComponentAPI {\n    constructor(hls: Hls, fragmentTracker: FragmentTracker, keyLoader: KeyLoader, logPrefix: string, playlistType: PlaylistLevelType);\n    // (undocumented)\n    protected afterBufferFlushed(media: Bufferable, bufferType: SourceBufferName, playlistType: PlaylistLevelType): void;\n    // (undocumented)\n    protected alignPlaylists(details: LevelDetails, previousDetails: LevelDetails | undefined, switchDetails: LevelDetails | undefined): number;\n    // (undocumented)\n    protected bitrateTest: boolean;\n    // (undocumented)\n    protected bufferFragmentData(data: RemuxedTrack, frag: Fragment, part: Part | null, chunkMeta: ChunkMetadata, noBacktracking?: boolean): void;\n    // (undocumented)\n    protected buffering: boolean;\n    // (undocumented)\n    get bufferingEnabled(): boolean;\n    // (undocumented)\n    protected checkLiveUpdate(details: LevelDetails): void;\n    // (undocumented)\n    protected clearTrackerIfNeeded(frag: Fragment): void;\n    // (undocumented)\n    protected config: HlsConfig;\n    // (undocumented)\n    protected decrypter: Decrypter;\n    // (undocumented)\n    protected _doFragLoad(frag: Fragment, level: Level, targetBufferTime?: number | null, progressCallback?: FragmentLoadProgressCallback): Promise<PartsLoadedData | FragLoadedData | null>;\n    // (undocumented)\n    protected doTick(): void;\n    // (undocumented)\n    protected filterReplacedPrimary(frag: MediaFragment | null, details: LevelDetails | undefined): MediaFragment | null;\n    // (undocumented)\n    protected flushBufferGap(frag: Fragment): void;\n    // (undocumented)\n    protected flushMainBuffer(startOffset: number, endOffset: number, type?: SourceBufferName | null): void;\n    // (undocumented)\n    protected fragBufferedComplete(frag: Fragment, part: Part | null): void;\n    // (undocumented)\n    protected fragContextChanged(frag: Fragment | null): boolean;\n    // (undocumented)\n    protected fragCurrent: Fragment | null;\n    // (undocumented)\n    protected fragmentLoader: FragmentLoader;\n    // (undocumented)\n    protected fragmentTracker: FragmentTracker;\n    // (undocumented)\n    protected fragPrevious: MediaFragment | null;\n    // (undocumented)\n    protected getAppendedFrag(position: number, playlistType?: PlaylistLevelType): Fragment | null;\n    // (undocumented)\n    protected getCurrentContext(chunkMeta: ChunkMetadata): {\n        frag: MediaFragment;\n        part: Part | null;\n        level: Level;\n    } | null;\n    // (undocumented)\n    protected getFragmentAtPosition(bufferEnd: number, end: number, levelDetails: LevelDetails): MediaFragment | null;\n    // (undocumented)\n    protected getFwdBufferInfo(bufferable: Bufferable | null, type: PlaylistLevelType): BufferInfo | null;\n    // (undocumented)\n    protected getFwdBufferInfoAtPos(bufferable: Bufferable | null, pos: number, type: PlaylistLevelType, maxBufferHole: number): BufferInfo | null;\n    // (undocumented)\n    protected getInitialLiveFragment(levelDetails: LevelDetails, fragments: MediaFragment[]): MediaFragment | null;\n    // (undocumented)\n    getLevelDetails(): LevelDetails | undefined;\n    // (undocumented)\n    protected getLoadPosition(): number;\n    // (undocumented)\n    protected getMaxBufferLength(levelBitrate?: number): number;\n    // (undocumented)\n    protected getNextFragment(pos: number, levelDetails: LevelDetails): Fragment | null;\n    // (undocumented)\n    protected getNextFragmentLoopLoading(frag: Fragment, levelDetails: LevelDetails, bufferInfo: BufferInfo, playlistType: PlaylistLevelType, maxBufLen: number): Fragment | null;\n    // (undocumented)\n    getNextPart(partList: Part[], frag: Fragment, targetBufferTime: number): number;\n    // (undocumented)\n    protected _handleFragmentLoadComplete(fragLoadedEndData: PartsLoadedData): void;\n    // (undocumented)\n    protected _handleFragmentLoadProgress(frag: PartsLoadedData | FragLoadedData): void;\n    // (undocumented)\n    protected _handleTransmuxerFlush(chunkMeta: ChunkMetadata): void;\n    // (undocumented)\n    protected hls: Hls;\n    // (undocumented)\n    get inFlightFrag(): InFlightData;\n    // (undocumented)\n    protected initPTS: RationalTimestamp[];\n    // (undocumented)\n    protected isLoopLoading(frag: Fragment, targetBufferTime: number): boolean;\n    // (undocumented)\n    protected keyLoader: KeyLoader;\n    // (undocumented)\n    protected lastCurrentTime: number;\n    // (undocumented)\n    protected levelLastLoaded: Level | null;\n    // (undocumented)\n    protected levels: Array<Level> | null;\n    // (undocumented)\n    protected loadFragment(frag: MediaFragment, level: Level, targetBufferTime: number): void;\n    // (undocumented)\n    protected loadingParts: boolean;\n    // (undocumented)\n    protected _loadInitSegment(fragment: Fragment, level: Level): void;\n    // (undocumented)\n    mapToInitFragWhenRequired(frag: Fragment | null): typeof frag;\n    // (undocumented)\n    protected media: HTMLMediaElement | null;\n    // (undocumented)\n    protected mediaBuffer: Bufferable | null;\n    // (undocumented)\n    protected nextLoadPosition: number;\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n```\n\n----------------------------------------\n\nTITLE: Defining HLS Event Emitter Interface in TypeScript\nDESCRIPTION: Interface definition for HlsEventEmitter which provides methods for event handling in the HLS.js library. This interface includes methods for emitting events, managing listeners, and handling event subscriptions.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HlsEventEmitter {\n    // (undocumented)\n    emit<E extends keyof HlsListeners>(event: E, name: E, eventObject: Parameters<HlsListeners[E]>[1]): boolean;\n    // (undocumented)\n    listenerCount<E extends keyof HlsListeners>(event: E): number;\n    // (undocumented)\n    listeners<E extends keyof HlsListeners>(event: E): HlsListeners[E][];\n    // (undocumented)\n    off<E extends keyof HlsListeners, Context = undefined>(event: E, listener?: HlsListeners[E], context?: Context, once?: boolean): void;\n    // (undocumented)\n    on<E extends keyof HlsListeners, Context = undefined>(event: E, listener: HlsListeners[E], context?: Context): void;\n    // (undocumented)\n    once<E extends keyof HlsListeners, Context = undefined>(event: E, listener: HlsListeners[E], context?: Context): void;\n    // (undocumented)\n    removeAllListeners<E extends keyof HlsListeners>(event?: E): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HLS.js Errors in JavaScript\nDESCRIPTION: Shows how to handle errors in HLS.js by listening to the ERROR event and checking error types and details.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhls.on(Hls.Events.ERROR, function (event, data) {\n  var errorType = data.type;\n  var errorDetails = data.details;\n  var errorFatal = data.fatal;\n\n  switch (data.details) {\n    case Hls.ErrorDetails.FRAG_LOAD_ERROR:\n      // ....\n      break;\n    default:\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining LevelKey Class for HLS Decryption in TypeScript\nDESCRIPTION: Definition of the LevelKey class that implements the DecryptData interface. This class handles encryption keys for HLS content, supporting various encryption methods and formats. It includes methods for retrieving decryption data and checking compatibility.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nexport class LevelKey implements DecryptData {\n    constructor(method: string, uri: string, format: string, formatversions?: number[], iv?: Uint8Array<ArrayBuffer> | null);\n    // (undocumented)\n    static clearKeyUriToKeyIdMap(): void;\n    // (undocumented)\n    readonly encrypted: boolean;\n    // (undocumented)\n    getDecryptData(sn: number | 'initSegment'): LevelKey | null;\n    // (undocumented)\n    readonly isCommonEncryption: boolean;\n    // (undocumented)\n    isSupported(): boolean;\n    // (undocumented)\n    iv: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    key: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    readonly keyFormat: string;\n    // (undocumented)\n    readonly keyFormatVersions: number[];\n    // (undocumented)\n    keyId: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    readonly method: string;\n    // (undocumented)\n    pssh: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    readonly uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbrController Class in TypeScript\nDESCRIPTION: Controller class that implements the AbrComponentAPI interface. It manages adaptive bitrate streaming functionality with methods for fragment loading, error handling, and bandwidth estimation.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AbrController extends Logger implements AbrComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    bwEstimator: EwmaBandWidthEstimator;\n    // (undocumented)\n    clearTimer(): void;\n    // (undocumented)\n    protected deriveNextAutoLevel(nextLevel: number): number;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    get firstAutoLevel(): number;\n    // (undocumented)\n    get forcedAutoLevel(): number;\n    // (undocumented)\n    protected hls: Hls;\n    // (undocumented)\n    get nextAutoLevel(): number;\n    set nextAutoLevel(nextLevel: number);\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    protected onFragBuffered(event: Events.FRAG_BUFFERED, data: FragBufferedData): void;\n    // (undocumented)\n    protected onFragLoaded(event: Events.FRAG_LOADED, { frag, part }: FragLoadedData): void;\n    // (undocumented)\n    protected onFragLoading(event: Events.FRAG_LOADING, data: FragLoadingData): void;\n    // (undocumented)\n    protected onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData): void;\n    // (undocumented)\n    protected onLevelSwitching(event: Events.LEVEL_SWITCHING, data: LevelSwitchingData): void;\n    // (undocumented)\n    protected onManifestLoading(event: Events.MANIFEST_LOADING, data: ManifestLoadingData): void;\n    // (undocumented)\n    protected registerListeners(): void;\n    // (undocumented)\n    resetEstimator(abrEwmaDefaultEstimate?: number): void;\n    // (undocumented)\n    protected unregisterListeners(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Fragment Loader in JavaScript for HLS.js\nDESCRIPTION: This code snippet shows how to define a custom fragment loader function for HLS.js. It allows for manipulation of the fragment loading process, overwriting the default loader.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar customFragmentLoader = function () {\n  // See `loader` for details.\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HLS Event Listeners Interface in TypeScript\nDESCRIPTION: Interface definition for HlsListeners which maps event types to their corresponding handler functions. This includes events for asset loading, audio track management, buffering, error handling, and fragment processing.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HlsListeners {\n    // (undocumented)\n    [Events.ASSET_LIST_LOADED]: (event: Events.ASSET_LIST_LOADED, data: AssetListLoadedData) => void;\n    // (undocumented)\n    [Events.ASSET_LIST_LOADING]: (event: Events.ASSET_LIST_LOADING, data: AssetListLoadingData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACK_LOADED]: (event: Events.AUDIO_TRACK_LOADED, data: AudioTrackLoadedData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACK_LOADING]: (event: Events.AUDIO_TRACK_LOADING, data: TrackLoadingData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACKS_UPDATED]: (event: Events.AUDIO_TRACKS_UPDATED, data: AudioTracksUpdatedData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACK_SWITCHED]: (event: Events.AUDIO_TRACK_SWITCHED, data: AudioTrackSwitchedData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACK_SWITCHING]: (event: Events.AUDIO_TRACK_SWITCHING, data: AudioTrackSwitchingData) => void;\n    // (undocumented)\n    [Events.AUDIO_TRACK_UPDATED]: (event: Events.AUDIO_TRACK_UPDATED, data: AudioTrackUpdatedData) => void;\n    // (undocumented)\n    [Events.BACK_BUFFER_REACHED]: (event: Events.BACK_BUFFER_REACHED, data: BackBufferData) => void;\n    // (undocumented)\n    [Events.BUFFER_APPENDED]: (event: Events.BUFFER_APPENDED, data: BufferAppendedData) => void;\n    // (undocumented)\n    [Events.BUFFER_APPENDING]: (event: Events.BUFFER_APPENDING, data: BufferAppendingData) => void;\n    // (undocumented)\n    [Events.BUFFER_CODECS]: (event: Events.BUFFER_CODECS, data: BufferCodecsData) => void;\n    // (undocumented)\n    [Events.BUFFER_CREATED]: (event: Events.BUFFER_CREATED, data: BufferCreatedData) => void;\n    // (undocumented)\n    [Events.BUFFERED_TO_END]: (event: Events.BUFFERED_TO_END) => void;\n    // (undocumented)\n    [Events.BUFFER_EOS]: (event: Events.BUFFER_EOS, data: BufferEOSData) => void;\n    // (undocumented)\n    [Events.BUFFER_FLUSHED]: (event: Events.BUFFER_FLUSHED, data: BufferFlushedData) => void;\n    // (undocumented)\n    [Events.BUFFER_FLUSHING]: (event: Events.BUFFER_FLUSHING, data: BufferFlushingData) => void;\n    // (undocumented)\n    [Events.BUFFER_RESET]: (event: Events.BUFFER_RESET) => void;\n    // (undocumented)\n    [Events.CUES_PARSED]: (event: Events.CUES_PARSED, data: CuesParsedData) => void;\n    // (undocumented)\n    [Events.DESTROYING]: (event: Events.DESTROYING) => void;\n    // (undocumented)\n    [Events.ERROR]: (event: Events.ERROR, data: ErrorData) => void;\n    // (undocumented)\n    [Events.EVENT_CUE_ENTER]: (event: Events.EVENT_CUE_ENTER, data: {}) => void;\n    // (undocumented)\n    [Events.FPS_DROP]: (event: Events.FPS_DROP, data: FPSDropData) => void;\n    // (undocumented)\n    [Events.FPS_DROP_LEVEL_CAPPING]: (event: Events.FPS_DROP_LEVEL_CAPPING, data: FPSDropLevelCappingData) => void;\n    // (undocumented)\n    [Events.FRAG_BUFFERED]: (event: Events.FRAG_BUFFERED, data: FragBufferedData) => void;\n    // (undocumented)\n    [Events.FRAG_CHANGED]: (event: Events.FRAG_CHANGED, data: FragChangedData) => void;\n    // (undocumented)\n    [Events.FRAG_DECRYPTED]: (event: Events.FRAG_DECRYPTED, data: FragDecryptedData) => void;\n    // (undocumented)\n    [Events.FRAG_LOADED]: (event: Events.FRAG_LOADED, data: FragLoadedData) => void;\n    // (undocumented)\n    [Events.FRAG_LOAD_EMERGENCY_ABORTED]: (event: Events.FRAG_LOAD_EMERGENCY_ABORTED, data: FragLoadEmergencyAbortedData) => void;\n    // (undocumented)\n    [Events.FRAG_LOADING]: (event: Events.FRAG_LOADING, data: FragLoadingData) => void;\n    // (undocumented)\n    [Events.FRAG_PARSED]: (event: Events.FRAG_PARSED, data: FragParsedData) => void;\n    // (undocumented)\n    [Events.FRAG_PARSING_INIT_SEGMENT]: (event: Events.FRAG_PARSING_INIT_SEGMENT, data: FragParsingInitSegmentData) => void;\n    // (undocumented)\n    [Events.FRAG_PARSING_METADATA]: (event: Events.FRAG_PARSING_METADATA, data: FragParsingMetadataData) => void;\n    // (undocumented)\n    [Events.FRAG_PARSING_USERDATA]: (event: Events.FRAG_PARSING_USERDATA, data: FragParsingUserdataData) => void;\n    // (undocumented)\n    [Events.INIT_PTS_FOUND]: (event: Events.INIT_PTS_FOUND, data: InitPTSFoundData) => void;\n    // (undocumented)\n    [Events.INTERSTITIAL_ASSET_ENDED]: (event: Events.INTERSTITIAL_ASSET_ENDED, data: InterstitialAssetEndedData) => void;\n    // (undocumented)\n    [Events.INTERSTITIAL_ASSET_ERROR]: (event: Events.INTERSTITIAL_ASSET_ERROR, data: InterstitialAssetErrorData) => void;\n    // (undocumented)\n    [Events.INTERSTITIAL_ASSET_PLAYER_CREATED]: (event: Events.INTERSTITIAL_ASSET_PLAYER_CREATED, data: InterstitialAssetPlayerCreatedData) => void;\n    // (undocumented)\n    [Events.INTERSTITIAL_ASSET_STARTED]: (event: Events.INTERSTITIAL_ASSET_STARTED, data: InterstitialAssetStartedData) => void;\n    // (undocumented)\n    [Events.INTERSTITIAL_ENDED]: (event: Events.INTERSTITIAL_ENDED, data: InterstitialEndedData) => void;\n    // (undocumented)\n    [Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY]: (event: Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY, data: InterstitialsBufferedToBoundaryData) => void;\n    // (undocumented)\n    [Events.INTERSTITIALS_PRIMARY_RESUMED]: (event: Events.INTERSTITIALS_PRIMARY_RESUMED, data: InterstitialsPrimaryResumed) => void;\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BufferController Class in TypeScript for HLS.js\nDESCRIPTION: This class extends Logger and implements ComponentAPI. It manages media buffering operations, including creating, appending, and flushing buffers for HLS playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BufferController extends Logger implements ComponentAPI {\n    constructor(hls: Hls, fragmentTracker: FragmentTracker);\n    // (undocumented)\n    get bufferedToEnd(): boolean;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    hasSourceTypes(): boolean;\n    // (undocumented)\n    get sourceBufferTracks(): BaseTrackSet;\n    // (undocumented)\n    transferMedia(): AttachMediaSourceData | null;\n}\n```\n\n----------------------------------------\n\nTITLE: LevelDetails Object Structure in HLS.js\nDESCRIPTION: Defines the structure of a LevelDetails object containing information about a parsed level playlist, including duration, fragments, and playlist type.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  version: 3,\n  type: 'VOD', // null if EXT-X-PLAYLIST-TYPE not present\n  startSN: 0,\n  endSN: 50,\n  totalduration: 510,\n  targetduration: 10,\n  fragments: Array(51),\n  live: false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fragment Class in TypeScript for HLS.js\nDESCRIPTION: Class representing a media fragment in HLS playback. Extends BaseSegment and provides methods for managing fragment state, encryption, timing, and loading processes.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Fragment\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Fragment extends BaseSegment {\n    constructor(type: PlaylistLevelType, base: Base | string);\n    // (undocumented)\n    abortRequests(): void;\n    // (undocumented)\n    addStart(value: number): void;\n    // (undocumented)\n    get bitrate(): number | null;\n    set bitrate(value: number);\n    // (undocumented)\n    bitrateTest: boolean;\n    // (undocumented)\n    get byteLength(): number | null;\n    // (undocumented)\n    cc: number;\n    // (undocumented)\n    data?: Uint8Array;\n    // (undocumented)\n    get decryptdata(): LevelKey | null;\n    // (undocumented)\n    deltaPTS?: number;\n    // (undocumented)\n    duration: number;\n    // (undocumented)\n    get encrypted(): boolean;\n    // (undocumented)\n    get end(): number;\n    // (undocumented)\n    endDTS?: number;\n    // (undocumented)\n    endList?: boolean;\n    // (undocumented)\n    get endProgramDateTime(): number | null;\n    // (undocumented)\n    endPTS?: number;\n    // (undocumented)\n    gap?: boolean;\n    // (undocumented)\n    initSegment: Fragment | null;\n    // (undocumented)\n    keyLoader: Loader<KeyLoaderContext> | null;\n    // (undocumented)\n    level: number;\n    // (undocumented)\n    levelkeys?: {\n        [key: string]: LevelKey;\n    };\n    // (undocumented)\n    loader: Loader<FragmentLoaderContext> | null;\n    // (undocumented)\n    maxStartPTS?: number;\n    // (undocumented)\n    minEndPTS?: number;\n    // (undocumented)\n    playlistOffset: number;\n    // (undocumented)\n    get programDateTime(): number | null;\n    set programDateTime(value: number | null);\n    // (undocumented)\n    rawProgramDateTime: string | null;\n    // (undocumented)\n    get ref(): MediaFragmentRef | null;\n    // (undocumented)\n    setDuration(value: number): void;\n    // (undocumented)\n    setElementaryStreamInfo(type: ElementaryStreamTypes, startPTS: number, endPTS: number, startDTS: number, endDTS: number, partial?: boolean): void;\n    // (undocumented)\n    setKeyFormat(keyFormat: KeySystemFormats): void;\n    // (undocumented)\n    setStart(value: number): void;\n    // (undocumented)\n    sn: number | 'initSegment';\n    // (undocumented)\n    start: number;\n    // (undocumented)\n    startDTS?: number;\n    // (undocumented)\n    startPTS?: number;\n    // (undocumented)\n    tagList: Array<string[]>;\n    // (undocumented)\n    title: string | null;\n    // (undocumented)\n    readonly type: PlaylistLevelType;\n    // (undocumented)\n    urlId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Requests in HLS.js\nDESCRIPTION: Example of using the fetchSetup configuration option to customize HTTP requests in HLS.js. This snippet shows how to always send cookies with requests, even for cross-origin calls.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  fetchSetup: function (context, initParams) {\n    // Always send cookies, even for cross-origin calls.\n    initParams.credentials = 'include';\n    return new Request(context.url, initParams);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Definitions for HLS.js Configuration and APIs\nDESCRIPTION: Various TypeScript interface and type definitions used throughout the HLS.js library, including configuration options for controllers, data structures for encrypted content, and component APIs for the player.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CapLevelControllerConfig = {\n    capLevelToPlayerSize: boolean;\n};\n\nexport interface CodecsParsed {\n    // (undocumented)\n    audioCodec?: string;\n    // (undocumented)\n    textCodec?: string;\n    // (undocumented)\n    unknownCodecs?: string[];\n    // (undocumented)\n    videoCodec?: string;\n}\n\nexport interface ComponentAPI {\n    // (undocumented)\n    destroy(): void;\n}\n\nexport type ContentSteeringOptions = {\n    uri: string;\n    pathwayId: string;\n};\n\nexport interface CuesInterface {\n    // (undocumented)\n    newCue(track: TextTrack | null, startTime: number, endTime: number, captionScreen: CaptionScreen): VTTCue[];\n}\n\nexport interface CuesParsedData {\n    // (undocumented)\n    cues: any;\n    // (undocumented)\n    track: string;\n    // (undocumented)\n    type: 'captions' | 'subtitles';\n}\n\nexport type DateRangeCue = {\n    pre: boolean;\n    post: boolean;\n    once: boolean;\n};\n\nexport interface DecryptData {\n    // (undocumented)\n    encrypted: boolean;\n    // (undocumented)\n    isCommonEncryption: boolean;\n    // (undocumented)\n    iv: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    key: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    keyFormat: string;\n    // (undocumented)\n    keyFormatVersions: number[];\n    // (undocumented)\n    keyId: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    method: string;\n    // (undocumented)\n    pssh: Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    uri: string;\n}\n\nexport type CMCDControllerConfig = {\n    sessionId?: string;\n    contentId?: string;\n    useHeaders?: boolean;\n    includeKeys?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AudioStreamController Class in TypeScript\nDESCRIPTION: Controller class that extends BaseStreamController for handling audio stream loading and playback in HLS. It manages fragment loading, error handling, and initialization timestamp synchronization.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AudioStreamController extends BaseStreamController implements NetworkComponentAPI {\n    constructor(hls: Hls, fragmentTracker: FragmentTracker, keyLoader: KeyLoader);\n    // (undocumented)\n    clearWaitingFragment(): void;\n    // (undocumented)\n    doTick(): void;\n    // (undocumented)\n    protected _handleFragmentLoadComplete(fragLoadedData: FragLoadedData): void;\n    // (undocumented)\n    _handleFragmentLoadProgress(data: FragLoadedData): void;\n    // (undocumented)\n    protected loadFragment(frag: Fragment, track: Level, targetBufferTime: number): void;\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    protected onHandlerDestroying(): void;\n    // (undocumented)\n    onInitPtsFound(event: Events.INIT_PTS_FOUND, { frag, id, initPTS, timescale }: InitPTSFoundData): void;\n    // (undocumented)\n    protected onManifestLoading(): void;\n    // (undocumented)\n    protected onMediaDetaching(event: Events.MEDIA_DETACHING, data: MediaDetachingData): void;\n    // (undocumented)\n    protected onTickEnd(): void;\n    // (undocumented)\n    protected registerListeners(): void;\n    // (undocumented)\n    protected resetLoadingState(): void;\n    // (undocumented)\n    startLoad(startPosition: number, skipSeekToStartPosition?: boolean): void;\n    // (undocumented)\n    protected unregisterListeners(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ABRControllerConfig Type in TypeScript\nDESCRIPTION: Type definition for ABR controller configuration with parameters for EWMA (Exponentially Weighted Moving Average) settings, bandwidth factors, and streaming delay configurations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ABRControllerConfig = {\n    abrEwmaFastLive: number;\n    abrEwmaSlowLive: number;\n    abrEwmaFastVoD: number;\n    abrEwmaSlowVoD: number;\n    abrEwmaDefaultEstimate: number;\n    abrEwmaDefaultEstimateMax: number;\n    abrBandWidthFactor: number;\n    abrBandWidthUpFactor: number;\n    abrMaxWithRealBitrate: boolean;\n    maxStarvationDelay: number;\n    maxLoadingDelay: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Buffer Control Method Declarations in TypeScript HLS.js\nDESCRIPTION: Method declarations for controlling media buffering in HLS.js. These methods allow pausing and resuming the buffering process during playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\npauseBuffering(): void;\n// (undocumented)\nresumeBuffering(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining LevelDetails Class for HLS.js Playlist Information\nDESCRIPTION: The LevelDetails class stores detailed information about an HLS playlist level. It manages fragment lists, discontinuities, encryption information, and timing data used for accurate playback and synchronization.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nexport class LevelDetails {\n    constructor(baseUrl: string);\n    // (undocumented)\n    advanced: boolean;\n    // (undocumented)\n    advancedDateTime?: number;\n    // (undocumented)\n    get age(): number;\n    // (undocumented)\n    ageHeader: number;\n    // (undocumented)\n    alignedSliding: boolean;\n    // (undocumented)\n    appliedTimelineOffset?: number;\n    // (undocumented)\n    averagetargetduration?: number;\n    // (undocumented)\n    canBlockReload: boolean;\n    // (undocumented)\n    canSkipDateRanges: boolean;\n    // (undocumented)\n    canSkipUntil: number;\n    // (undocumented)\n    dateRanges: Record<string, DateRange>;\n    // (undocumented)\n    dateRangeTagCount: number;\n    // (undocumented)\n    deltaUpdateFailed?: boolean;\n    // (undocumented)\n    get drift(): number;\n    // (undocumented)\n    driftEnd: number;\n    // (undocumented)\n    driftEndTime: number;\n    // (undocumented)\n    driftStart: number;\n    // (undocumented)\n    driftStartTime: number;\n    // (undocumented)\n    get edge(): number;\n    // (undocumented)\n    encryptedFragments: Fragment[];\n    // (undocumented)\n    endCC: number;\n    // (undocumented)\n    endSN: number;\n    // (undocumented)\n    get expired(): boolean;\n    // (undocumented)\n    get fragmentEnd(): number;\n    // (undocumented)\n    fragmentHint?: MediaFragment;\n    // (undocumented)\n    fragments: MediaFragment[];\n    // (undocumented)\n    get fragmentStart(): number;\n    // (undocumented)\n    get hasProgramDateTime(): boolean;\n    // (undocumented)\n    hasVariableRefs: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AudioTrackController Class in TypeScript\nDESCRIPTION: Controller class that extends BasePlaylistController for managing audio tracks in HLS playback. It handles track loading, selection, and provides methods for accessing available audio tracks and their options.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AudioTrackController extends BasePlaylistController {\n    constructor(hls: Hls);\n    // (undocumented)\n    get allAudioTracks(): MediaPlaylist[];\n    // (undocumented)\n    get audioTrack(): number;\n    set audioTrack(newId: number);\n    // (undocumented)\n    get audioTracks(): MediaPlaylist[];\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    protected loadingPlaylist(audioTrack: MediaPlaylist, hlsUrlParameters: HlsUrlParameters | undefined): void;\n    // (undocumented)\n    protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters): void;\n    // (undocumented)\n    protected onAudioTrackLoaded(event: Events.AUDIO_TRACK_LOADED, data: AudioTrackLoadedData): void;\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    protected onLevelLoading(event: Events.LEVEL_LOADING, data: LevelLoadingData): void;\n    // (undocumented)\n    protected onLevelSwitching(event: Events.LEVEL_SWITCHING, data: LevelSwitchingData): void;\n    // (undocumented)\n    protected onManifestLoading(): void;\n    // (undocumented)\n    protected onManifestParsed(event: Events.MANIFEST_PARSED, data: ManifestParsedData): void;\n    // (undocumented)\n    setAudioOption(audioOption: MediaPlaylist | AudioSelectionOption | undefined): MediaPlaylist | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderCallbacks Interface in TypeScript\nDESCRIPTION: Interface for callback functions used by HLS.js loaders. Includes callbacks for success, error, timeout, progress, and abort events to handle network request lifecycle.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoaderCallbacks<T extends LoaderContext> {\n    // (undocumented)\n    onAbort?: LoaderOnAbort<T>;\n    // (undocumented)\n    onError: LoaderOnError<T>;\n    // (undocumented)\n    onProgress?: LoaderOnProgress<T>;\n    // (undocumented)\n    onSuccess: LoaderOnSuccess<T>;\n    // (undocumented)\n    onTimeout: LoaderOnTimeout<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Utility and Media Management Method Declarations in TypeScript HLS.js\nDESCRIPTION: Method and property declarations for media management in HLS.js. Includes string representation, track management, and media source transfer functionality.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string;\n// (undocumented)\ntracks: Partial<BufferCodecsData> | null;\n// (undocumented)\ntransferMedia(): AttachMediaSourceData | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Level Class for HLS.js Quality Levels\nDESCRIPTION: The Level class represents a quality level in HLS streaming. It contains metadata about the level including bitrate, codecs, resolution, and references to audio/subtitle groups. It also tracks loading errors and provides various accessor methods.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Level {\n    constructor(data: LevelParsed | MediaPlaylist);\n    // (undocumented)\n    addFallback(): void;\n    // (undocumented)\n    addGroupId(type: string, groupId: string | undefined): void;\n    // (undocumented)\n    get attrs(): LevelAttributes;\n    // (undocumented)\n    readonly _attrs: LevelAttributes[];\n    // (undocumented)\n    readonly audioCodec: string | undefined;\n    // (undocumented)\n    get audioGroupId(): string | undefined;\n    // (undocumented)\n    get audioGroupIds(): (string | undefined)[] | undefined;\n    // (undocumented)\n    get audioGroups(): (string | undefined)[] | undefined;\n    // (undocumented)\n    get averageBitrate(): number;\n    // (undocumented)\n    readonly bitrate: number;\n    // (undocumented)\n    get codecs(): string;\n    // (undocumented)\n    readonly codecSet: string;\n    // (undocumented)\n    details?: LevelDetails;\n    // (undocumented)\n    fragmentError: number;\n    // (undocumented)\n    readonly frameRate: number;\n    // (undocumented)\n    hasAudioGroup(groupId: string | undefined): boolean;\n    // (undocumented)\n    hasSubtitleGroup(groupId: string | undefined): boolean;\n    // (undocumented)\n    readonly height: number;\n    // (undocumented)\n    readonly id: number;\n    // (undocumented)\n    loaded?: {\n        bytes: number;\n        duration: number;\n    };\n    // (undocumented)\n    loadError: number;\n    // (undocumented)\n    get maxBitrate(): number;\n    // (undocumented)\n    readonly name: string;\n    // (undocumented)\n    get pathwayId(): string;\n    // (undocumented)\n    realBitrate: number;\n    // (undocumented)\n    get score(): number;\n    // (undocumented)\n    get subtitleGroups(): (string | undefined)[] | undefined;\n    // (undocumented)\n    readonly supplemental: CodecsParsed | undefined;\n    // (undocumented)\n    supportedPromise?: Promise<MediaDecodingInfo>;\n    // (undocumented)\n    supportedResult?: MediaDecodingInfo;\n    // (undocumented)\n    get textGroupId(): string | undefined;\n    // (undocumented)\n    get textGroupIds(): (string | undefined)[] | undefined;\n    // (undocumented)\n    get uri(): string;\n    // (undocumented)\n    readonly url: string[];\n    // (undocumented)\n    get urlId(): number;\n    set urlId(value: number);\n    // (undocumented)\n    readonly videoCodec: string | undefined;\n    // (undocumented)\n    get videoRange(): VideoRange;\n    // (undocumented)\n    readonly width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Loader with Custom Playlist Processing in JavaScript for HLS.js\nDESCRIPTION: This snippet shows how to extend the default loader in HLS.js with a custom playlist processing function. It overrides the load method to apply special processing to manifest-type contexts.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction process(playlist) {\n  return playlist;\n}\n\nclass pLoader extends Hls.DefaultConfig.loader {\n  constructor(config) {\n    super(config);\n    var load = this.load.bind(this);\n    this.load = function (context, config, callbacks) {\n      if (context.type == 'manifest') {\n        var onSuccess = callbacks.onSuccess;\n        callbacks.onSuccess = function (response, stats, context) {\n          response.data = process(response.data);\n          onSuccess(response, stats, context);\n        };\n      }\n      load(context, config, callbacks);\n    };\n  }\n}\n\nvar hls = new Hls({\n  pLoader: pLoader,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fatal Error Recovery in HLS.js\nDESCRIPTION: Demonstrates how to implement error recovery for fatal errors in HLS.js, including media and network errors.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nhls.on(Hls.Events.ERROR, function (event, data) {\n  if (data.fatal) {\n    switch (data.type) {\n      case Hls.ErrorTypes.MEDIA_ERROR:\n        console.log('fatal media error encountered, try to recover');\n        hls.recoverMediaError();\n        break;\n      case Hls.ErrorTypes.NETWORK_ERROR:\n        console.error('fatal network error encountered', data);\n        // All retries and media options have been exhausted.\n        // Immediately trying to restart loading could cause loop loading.\n        // Consider modifying loading policies to best fit your asset and network\n        // conditions (manifestLoadPolicy, playlistLoadPolicy, fragLoadPolicy).\n        break;\n      default:\n        // cannot recover\n        hls.destroy();\n        break;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadPolicy Options in HLS.js\nDESCRIPTION: Default LoadPolicy configurations for different asset types in HLS.js including manifest, playlist, fragment, key, certificate, steering manifest and interstitial asset loading. Each policy defines timeout settings and retry strategies.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmanifestLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: Infinity,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: {\n      maxNumRetry: 2,\n      retryDelayMs: 0,\n      maxRetryDelayMs: 0,\n    },\n    errorRetry: {\n      maxNumRetry: 1,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 8000,\n    },\n  },\n},\nplaylistLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 10000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: {\n      maxNumRetry: 2,\n      retryDelayMs: 0,\n      maxRetryDelayMs: 0,\n    },\n    errorRetry: {\n      maxNumRetry: 2,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 8000,\n    },\n  },\n},\nfragLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 10000,\n    maxLoadTimeMs: 120000,\n    timeoutRetry: {\n      maxNumRetry: 4,\n      retryDelayMs: 0,\n      maxRetryDelayMs: 0,\n    },\n    errorRetry: {\n      maxNumRetry: 6,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 8000,\n    },\n  },\n},\nkeyLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 8000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: {\n      maxNumRetry: 1,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 20000,\n      backoff: 'linear',\n    },\n    errorRetry: {\n      maxNumRetry: 8,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 20000,\n      backoff: 'linear',\n    },\n  },\n},\ncertLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 8000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: null,\n    errorRetry: null,\n  },\n},\nsteeringManifestLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 10000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: {\n      maxNumRetry: 2,\n      retryDelayMs: 0,\n      maxRetryDelayMs: 0,\n    },\n    errorRetry: {\n      maxNumRetry: 1,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 8000,\n    },\n  },\n},\ninterstitialAssetListLoadPolicy: {\n  default: {\n    maxTimeToFirstByteMs: 10000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: {\n      maxNumRetry: 0,\n      retryDelayMs: 0,\n      maxRetryDelayMs: 0,\n    },\n    errorRetry: {\n      maxNumRetry: 0,\n      retryDelayMs: 1000,\n      maxRetryDelayMs: 8000,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StreamController Class in TypeScript\nDESCRIPTION: This class extends BaseStreamController and implements NetworkComponentAPI. It provides methods for managing the streaming process, including fragment loading, buffer management, and level switching.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_163\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StreamController extends BaseStreamController implements NetworkComponentAPI {\n    constructor(hls: Hls, fragmentTracker: FragmentTracker, keyLoader: KeyLoader);\n    get currentFrag(): Fragment | null;\n    get currentLevel(): number;\n    get currentProgramDateTime(): Date | null;\n    protected doTick(): void;\n    protected flushMainBuffer(startOffset: number, endOffset: number): void;\n    get forceStartLoad(): boolean;\n    getMainFwdBufferInfo(): BufferInfo | null;\n    protected _handleFragmentLoadProgress(data: FragLoadedData): void;\n    get hasEnoughToStart(): boolean;\n    immediateLevelSwitch(): void;\n    protected loadFragment(frag: Fragment, level: Level, targetBufferTime: number): void;\n    get maxBufferLength(): number;\n    get nextBufferedFrag(): MediaFragment | null;\n    get nextLevel(): number;\n    nextLevelSwitch(): void;\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    protected onHandlerDestroying(): void;\n    protected onManifestLoading(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyLoader Class for HLS.js Encryption in TypeScript\nDESCRIPTION: The KeyLoader class is responsible for loading decryption keys for encrypted HLS content. It supports multiple key systems including ClearKey, FairPlay, PlayReady, and Widevine, with methods for HTTP and EME-based key loading.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nexport class KeyLoader implements ComponentAPI {\n    constructor(config: HlsConfig);\n    // (undocumented)\n    abort(type?: PlaylistLevelType): void;\n    // (undocumented)\n    createKeyLoadError(frag: Fragment, details: ErrorDetails | undefined, error: Error, networkDetails?: any, response?: {\n        url: string;\n        data: undefined;\n        code: number;\n        text: string;\n    }): LoadError;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    detach(): void;\n    // (undocumented)\n    emeController: EMEController | null;\n    // (undocumented)\n    keyUriToKeyInfo: {\n        [keyuri: string]: KeyLoaderInfo;\n    };\n    // (undocumented)\n    load(frag: Fragment): Promise<KeyLoadedData>;\n    // (undocumented)\n    loadClear(loadingFrag: Fragment, encryptedFragments: Fragment[]): void | Promise<void>;\n    // (undocumented)\n    loadInternal(frag: Fragment, keySystemFormat?: KeySystemFormats): Promise<KeyLoadedData>;\n    // (undocumented)\n    loadKeyEME(keyInfo: KeyLoaderInfo, frag: Fragment): Promise<KeyLoadedData>;\n    // (undocumented)\n    loadKeyHTTP(keyInfo: KeyLoaderInfo, frag: Fragment): Promise<KeyLoadedData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Types Enum Definition in TypeScript\nDESCRIPTION: Defines the main error type categories for HLS.js including key system, media, mux, network and other errors.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ErrorTypes {\n    KEY_SYSTEM_ERROR = \"keySystemError\",\n    MEDIA_ERROR = \"mediaError\",\n    MUX_ERROR = \"muxError\",\n    NETWORK_ERROR = \"networkError\",\n    OTHER_ERROR = \"otherError\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HLS.js Loader with ES6 Class in JavaScript\nDESCRIPTION: This snippet shows how to extend the HLS.js loader using an ES6 class. It demonstrates adding custom behavior before calling the parent loader's load method.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hls from 'hls.js';\n\nlet myHls = new Hls({\n  pLoader: class CustomLoader extends Hls.DefaultConfig.loader {\n    load(context, config, callbacks) {\n      let { type, url } = context;\n\n      // Custom behavior\n\n      super.load(context, config, callbacks);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining EME Controller Class in TypeScript\nDESCRIPTION: Class declaration for the Encrypted Media Extensions controller in hls.js, which handles DRM operations including key loading and key system selection.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EMEController extends Logger implements ComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    static CDMCleanupPromise: Promise<void> | void;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    loadKey(data: KeyLoadedData): Promise<MediaKeySessionContext>;\n    // (undocumented)\n    selectKeySystemFormat(frag: Fragment): Promise<KeySystemFormats>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FragmentLoader Class in TypeScript for HLS.js\nDESCRIPTION: Class for loading HLS fragments. Provides methods to load fragments and parts, handle progress callbacks, and manage loading state.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentLoader\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class FragmentLoader {\n    constructor(config: HlsConfig);\n    // (undocumented)\n    abort(): void;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    load(frag: Fragment, onProgress?: FragmentLoadProgressCallback): Promise<FragLoadedData>;\n    // (undocumented)\n    loadPart(frag: Fragment, part: Part, onProgress: FragmentLoadProgressCallback): Promise<FragLoadedData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Loader Interface in TypeScript\nDESCRIPTION: Generic interface for content loaders that handle network requests in HLS.js. Includes methods for loading, aborting, and destroying resources, along with optional caching and header functionality.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Loader<T extends LoaderContext> {\n    // (undocumented)\n    abort(): void;\n    // (undocumented)\n    context: T | null;\n    // (undocumented)\n    destroy(): void;\n    getCacheAge?: () => number | null;\n    // (undocumented)\n    getResponseHeader?: (name: string) => string | null;\n    // (undocumented)\n    load(context: T, config: LoaderConfiguration, callbacks: LoaderCallbacks<T>): void;\n    // (undocumented)\n    stats: LoaderStats;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DRM System Configuration Types in TypeScript\nDESCRIPTION: Type definition for DRM system configuration in hls.js. Specifies license URLs and optional server certificate URLs, as well as methods for generating license requests.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DRMSystemConfiguration = {\n    licenseUrl: string;\n    serverCertificateUrl?: string;\n    generateRequest?: (this: Hls, initDataType: string, initData: ArrayBuffer | null, keyContext: MediaKeySessionContext) => {\n        initDataType: string;\n        initData: ArrayBuffer | null;\n    } | undefined | never;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FragLoadedData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data after a fragment has been loaded. Contains the fragment reference, network details, part information, and the loaded payload as ArrayBuffer.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragLoadedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragLoadedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    networkDetails: unknown;\n    // (undocumented)\n    part: Part | null;\n    // (undocumented)\n    payload: ArrayBuffer;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Decrypter Class for Media Decryption\nDESCRIPTION: The Decrypter class provides methods for decrypting protected media content, supporting both software and hardware-based AES decryption. It handles initialization vectors, keys, and different AES modes for secure media playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Decrypter {\n    constructor(config: HlsConfig, { removePKCS7Padding }?: {\n        removePKCS7Padding?: boolean | undefined;\n    });\n    // (undocumented)\n    decrypt(data: Uint8Array | ArrayBuffer, key: ArrayBuffer, iv: ArrayBuffer, aesMode: DecrypterAesMode): Promise<ArrayBuffer>;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    flush(): Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    isSync(): boolean;\n    // (undocumented)\n    reset(): void;\n    // (undocumented)\n    softwareDecrypt(data: Uint8Array, key: ArrayBuffer, iv: ArrayBuffer, aesMode: DecrypterAesMode): ArrayBuffer | null;\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in HLS.js (JavaScript)\nDESCRIPTION: Demonstrates how to subscribe, unsubscribe, and register one-time event handlers in HLS.js. The example shows registering a handler for the LEVEL_LOADED event that captures the total duration of a level.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onLevelLoaded(event, data) {\n  var level_duration = data.details.totalduration;\n}\n// subscribe event\nhls.on(Hls.Events.LEVEL_LOADED, onLevelLoaded);\n// unsubscribe event\nhls.off(Hls.Events.LEVEL_LOADED, onLevelLoaded);\n// subscribe for a single event call only\nhls.once(Hls.Events.LEVEL_LOADED, onLevelLoaded);\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsManager Interface in TypeScript\nDESCRIPTION: Interface for the manager that coordinates interstitial content. It tracks buffering/playing assets, indices, schedule items, player instances, and provides a skip function.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialsManager {\n    // (undocumented)\n    bufferingAsset: InterstitialAssetItem | null;\n    // (undocumented)\n    bufferingIndex: number;\n    // (undocumented)\n    bufferingItem: InterstitialScheduleItem | null;\n    // (undocumented)\n    events: InterstitialEvent[];\n    // (undocumented)\n    integrated: PlayheadTimes;\n    // (undocumented)\n    interstitialPlayer: InterstitialPlayer | null;\n    // (undocumented)\n    playerQueue: HlsAssetPlayer[];\n    // (undocumented)\n    playingAsset: InterstitialAssetItem | null;\n    // (undocumented)\n    playingIndex: number;\n    // (undocumented)\n    playingItem: InterstitialScheduleItem | null;\n    // (undocumented)\n    primary: PlayheadTimes;\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n    // (undocumented)\n    skip: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Level Object Structure in HLS.js\nDESCRIPTION: Defines the structure of a Level object that represents a quality level in HLS streaming. Contains information about bitrate, codecs, dimensions, and stream URLs.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  audioCodec: \"mp4a.40.2\"\n  audioGroupIds: <string[]> | undefined,\n  bitrate: 3000000,\n  codecSet: \"avc1,mp4a\",\n  details: <LevelDetails> | undefined\n  fragmentError: 0,\n  frameRate: 30,\n  height: 720,\n  loadError: 0\n  name: \"720p\",\n  realBitrate: 0,\n  supportedPromise: undefined,\n  supportedResult: {supported: true, configurations: <MediaDecodingConfiguration[]>, decodingInfoResults: <MediaCapabilitiesDecodingInfo[]>}\n  textGroupIds: <string[]> | undefined,\n  unknownCodecs: [],\n  url: [ \"http://levelURL.com\", \"http://levelURLfailover.com\" ],\n  videoCodec: \"avc1.66.30\",\n  width: 1280,\n  attrs: <AttrList>,\n  audioGroupId: undefined,\n  averageBitrate: 2962000,\n  codecs: \"avc1.66.30,mp4a.40.2\",\n  maxBitrate: 3000000,\n  pathwayId: \".\",\n  score: 0,\n  textGroupId: \"subs\",\n  uri: \"http://levelURL.com\",\n  urlId: 0,\n  videoRange: \"SDR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaKeySessionContext Interface in TypeScript\nDESCRIPTION: Interface for DRM-related context with properties for key systems, media keys, sessions, and event handlers related to the Encrypted Media Extensions (EME) API.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaKeySessionContext\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface MediaKeySessionContext {\n    // (undocumented)\n    decryptdata: LevelKey;\n    // (undocumented)\n    keyStatus: MediaKeyStatus;\n    // (undocumented)\n    keySystem: KeySystems;\n    // (undocumented)\n    licenseXhr?: XMLHttpRequest;\n    // (undocumented)\n    mediaKeys: MediaKeys;\n    // (undocumented)\n    mediaKeysSession: MediaKeySession;\n    // (undocumented)\n    _onkeystatuseschange?: (this: MediaKeySession, ev: Event) => any;\n    // (undocumented)\n    _onmessage?: (this: MediaKeySession, ev: MediaKeyMessageEvent) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: FPS Controller Class Definition\nDESCRIPTION: Class for monitoring and controlling video playback frame rate, including dropped frame detection and level capping.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FPSController implements ComponentAPI {\n    constructor(hls: Hls);\n    checkFPS(video: HTMLVideoElement, decodedFrames: number, droppedFrames: number): void;\n    checkFPSInterval(): void;\n    destroy(): void;\n    protected onMediaAttaching(event: Events.MEDIA_ATTACHING, data: MediaAttachingData): void;\n    protected registerListeners(): void;\n    setStreamController(streamController: StreamController): void;\n    protected unregisterListeners(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BasePlaylistController Class in TypeScript for HLS.js\nDESCRIPTION: The BasePlaylistController class extends Logger and implements NetworkComponentAPI. It handles playlist loading, checking if playlists should be loaded, scheduling loading, and managing the loading state for HLS playlists.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"BasePlaylistController\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class BasePlaylistController extends Logger implements NetworkComponentAPI {\n    constructor(hls: Hls, logPrefix: string);\n    // (undocumented)\n    protected canLoad: boolean;\n    // (undocumented)\n    protected checkRetry(errorEvent: ErrorData): boolean;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    protected getUrlWithDirectives(uri: string, hlsUrlParameters: HlsUrlParameters | undefined): string;\n    // (undocumented)\n    protected hls: Hls;\n    // (undocumented)\n    protected loadingPlaylist(playlist: Level | MediaPlaylist, hlsUrlParameters?: HlsUrlParameters): void;\n    // (undocumented)\n    protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters): void;\n    // (undocumented)\n    protected playlistLoaded(index: number, data: LevelLoadedData | AudioTrackLoadedData | TrackLoadedData, previousDetails?: LevelDetails): void;\n    // (undocumented)\n    protected scheduleLoading(levelOrTrack: Level | MediaPlaylist, deliveryDirectives?: HlsUrlParameters, updatedDetails?: LevelDetails): void;\n    // (undocumented)\n    protected shouldLoadPlaylist(playlist: Level | MediaPlaylist | null | undefined): playlist is Level | MediaPlaylist;\n    // (undocumented)\n    startLoad(): void;\n    // (undocumented)\n    stopLoad(): void;\n    // (undocumented)\n    protected switchParams(playlistUri: string, previous: LevelDetails | undefined, current: LevelDetails | undefined): HlsUrlParameters | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StreamControllerConfig Type in TypeScript for HLS.js\nDESCRIPTION: Defines the configuration interface for StreamController with properties for controlling stream behavior such as buffer sizes, autostart settings, and fragment prefetching. This type provides configuration options for the main stream controller component.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StreamControllerConfig = {\n    autoStartLoad: boolean;\n    startPosition: number;\n    defaultAudioCodec?: string;\n    initialLiveManifestSize: number;\n    maxBufferLength: number;\n    maxBufferSize: number;\n    maxBufferHole: number;\n    maxFragLookUpTolerance: number;\n    maxMaxBufferLength: number;\n    startFragPrefetch: boolean;\n    testBandwidth: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleStreamController Class in TypeScript for HLS.js\nDESCRIPTION: Implements a controller for subtitle streams that extends BaseStreamController. This class handles subtitle fragment loading, media buffer management, and event handling for subtitle tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_168\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SubtitleStreamController extends BaseStreamController implements NetworkComponentAPI {\n    constructor(hls: Hls, fragmentTracker: FragmentTracker, keyLoader: KeyLoader);\n    // (undocumented)\n    doTick(): void;\n    // (undocumented)\n    _handleFragmentLoadComplete(fragLoadedData: FragLoadedData): void;\n    // (undocumented)\n    protected loadFragment(frag: Fragment, level: Level, targetBufferTime: number): void;\n    // (undocumented)\n    get mediaBufferTimeRanges(): Bufferable;\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    protected onHandlerDestroying(): void;\n    // (undocumented)\n    protected onManifestLoading(): void;\n    // (undocumented)\n    protected onMediaDetaching(event: Events.MEDIA_DETACHING, data: MediaDetachingData): void;\n    // (undocumented)\n    protected registerListeners(): void;\n    // (undocumented)\n    startLoad(startPosition: number, skipSeekToStartPosition?: boolean): void;\n    // (undocumented)\n    protected unregisterListeners(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsManager Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the InterstitialsManager which handles interstitial events and playback. Includes properties for schedule management, playhead control, and asset tracking.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterstitialsManager {\n  schedule: InterstitialScheduleItem[]; // An array of primary and event items with start and end times representing the scheduled program\n  integrated: PlayheadTimes; // playhead mapping and control that applies the X-TIMELINE-OCCUPIES attribute to each event item\n  primary: PlayheadTimes; // playhead mapping and control based on the primary content\n\n  interstitialPlayer: InterstitialPlayer | null; // interface for interstitial playback state\n\n  bufferingAsset: InterstitialAssetItem | null; // The Interstitial asset currently being streamed\n  bufferingItem: InterstitialScheduleItem | null; // The primary item or event item currently being streamed\n  bufferingIndex: number; // The index of `bufferingItem` in the `schedule` array\n\n  playingAsset: InterstitialAssetItem | null; // The Interstitial asset currently being streamed\n  playingItem: InterstitialScheduleItem | null; // The primary item or event item currently being played\n  playingIndex: number; // The index of `playingItem` in the `schedule` array\n\n  events: InterstitialEvent[]; // An array of Interstitials (events) parsed from the latest media playlist update\n  playerQueue: HlsAssetPlayer[]; // And array of child Hls instances created to preload and stream Interstitial asset content\n\n  skip: () => void; // A method for skipping the currently playing event item, provided it is not jump restricted\n}\n\ntype PlayheadTimes = {\n  bufferedEnd: number; // The buffer end time relative to the playhead in the scheduled program\n  currentTime: number; // (get/set) The current playhead time in the scheduled program\n  duration: number; // The time at the end of the scheduled program\n  seekableStart: number; // The earliest available time where media is available (maps to the start of the first segment in primary media playlists)\n};\n\ninterface InterstitialPlayer {\n  currentTime: number; // (get/set) The current playhead time within the interstitial break (no-op prior to playback)\n  duration: number; // the playout duration of the interstitial break\n  assetPlayers: (HlsAssetPlayer | null)[]; // The asset players assigned to the break asset list\n  playingIndex: number; // The index of the currently playing asset (or -1 prior to playback)\n  scheduleItem: InterstitialScheduleEventItem | null; // The interstitial schedule item for the break\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentSteeringController for Adaptive Streaming\nDESCRIPTION: The ContentSteeringController extends Logger and implements NetworkComponentAPI to manage content steering functionality, allowing for dynamic pathway selection and filtering of parsed levels based on server-provided steering information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ContentSteeringController extends Logger implements NetworkComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    clearTimeout(): void;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    filterParsedLevels(levels: Level[]): Level[];\n    // (undocumented)\n    get pathwayPriority(): string[] | null;\n    set pathwayPriority(pathwayPriority: string[]);\n    // (undocumented)\n    pathways(): string[];\n    // (undocumented)\n    removeLevel(levelToRemove: Level): void;\n    // (undocumented)\n    startLoad(): void;\n    // (undocumented)\n    stopLoad(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transmuxer Interface Class in TypeScript\nDESCRIPTION: Class definition for handling media transmuxing operations with methods for pushing data, flushing, and managing transmuxer lifecycle.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_182\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TransmuxerInterface {\n    constructor(hls: Hls, id: PlaylistLevelType, onTransmuxComplete: (transmuxResult: TransmuxerResult) => void, onFlush: (chunkMeta: ChunkMetadata) => void);\n    error: Error | null;\n    destroy(): void;\n    flush(chunkMeta: ChunkMetadata): void;\n    push(data: ArrayBuffer, initSegmentData: Uint8Array | undefined, audioCodec: string | undefined, videoCodec: string | undefined, frag: MediaFragment, part: Part | null, duration: number, accurateTimeOffset: boolean, chunkMeta: ChunkMetadata, defaultInitPTS?: RationalTimestamp): void;\n    reset(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EME Controller Configuration Type in TypeScript\nDESCRIPTION: Type definition for EME controller configuration, including license request handling, callbacks, and DRM system configurations to support protected content playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EMEControllerConfig = {\n    licenseXhrSetup?: (this: Hls, xhr: XMLHttpRequest, url: string, keyContext: MediaKeySessionContext, licenseChallenge: Uint8Array) => void | Uint8Array | Promise<Uint8Array | void>;\n    licenseResponseCallback?: (this: Hls, xhr: XMLHttpRequest, url: string, keyContext: MediaKeySessionContext) => ArrayBuffer;\n    emeEnabled: boolean;\n    widevineLicenseUrl?: string;\n    drmSystems: DRMSystemsConfiguration;\n    drmSystemOptions: DRMSystemOptions;\n    requestMediaKeySystemAccessFunc: MediaKeyFunc | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleTrackController Class in TypeScript for HLS.js\nDESCRIPTION: Implements a controller for subtitle tracks that extends BasePlaylistController. This class manages subtitle track selection, loading, and event handling for subtitle tracks in the HLS stream.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_169\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SubtitleTrackController extends BasePlaylistController {\n    constructor(hls: Hls);\n    // (undocumented)\n    get allSubtitleTracks(): MediaPlaylist[];\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    protected loadingPlaylist(currentTrack: MediaPlaylist, hlsUrlParameters: HlsUrlParameters | undefined): void;\n    // (undocumented)\n    protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters): void;\n    // (undocumented)\n    protected onError(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    protected onLevelLoading(event: Events.LEVEL_LOADING, data: LevelLoadingData): void;\n    // (undocumented)\n    protected onLevelSwitching(event: Events.LEVEL_SWITCHING, data: LevelSwitchingData): void;\n    // (undocumented)\n    protected onManifestLoading(): void;\n    // (undocumented)\n    protected onManifestParsed(event: Events.MANIFEST_PARSED, data: ManifestParsedData): void;\n    // (undocumented)\n    protected onMediaAttached(event: Events.MEDIA_ATTACHED, data: MediaAttachedData): void;\n    // (undocumented)\n    protected onMediaDetaching(event: Events.MEDIA_DETACHING, data: MediaDetachingData): void;\n    // (undocumented)\n    protected onSubtitleTrackLoaded(event: Events.SUBTITLE_TRACK_LOADED, data: TrackLoadedData): void;\n    // (undocumented)\n    setSubtitleOption(subtitleOption: MediaPlaylist | SubtitleSelectionOption | undefined): MediaPlaylist | null;\n    // (undocumented)\n    get subtitleDisplay(): boolean;\n    set subtitleDisplay(value: boolean);\n    get subtitleTrack(): number;\n    set subtitleTrack(newId: number);\n    get subtitleTracks(): MediaPlaylist[];\n}\n```\n\n----------------------------------------\n\nTITLE: HLS Skip Enum and URL Parameters\nDESCRIPTION: Enum and class definition for HLS skip directives and URL parameter handling for HLS manifest requests.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum HlsSkip {\n    No = \"\",\n    v2 = \"v2\",\n    Yes = \"YES\"\n}\n\nexport class HlsUrlParameters {\n    constructor(msn?: number, part?: number, skip?: HlsSkip);\n    addDirectives(uri: string): string | never;\n    msn?: number;\n    part?: number;\n    skip?: HlsSkip;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CapLevelController Class in TypeScript for HLS.js\nDESCRIPTION: This class implements ComponentAPI and manages the maximum quality level based on player dimensions. It includes methods for detecting player size and determining the appropriate quality level.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CapLevelController implements ComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    get contentScaleFactor(): number;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    detectPlayerSize(): void;\n    // (undocumented)\n    getDimensions(): {\n        width: number;\n        height: number;\n    };\n    // (undocumented)\n    getMaxLevel(capLevelIndex: number): number;\n    // (undocumented)\n    static getMaxLevelByMediaSize(levels: Array<Level>, width: number, height: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using startLoad API with HLS.js\nDESCRIPTION: Example showing explicit API call to start loading fragments when autoStartLoad is disabled.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhls.startLoad(startPosition=-1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhls.startLoad(startPosition)\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkComponentAPI Interface in TypeScript\nDESCRIPTION: Interface for network components with methods to control loading and buffering operations for media.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_150\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"NetworkComponentAPI\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface NetworkComponentAPI extends ComponentAPI {\n    // (undocumented)\n    pauseBuffering?(): void;\n    // (undocumented)\n    resumeBuffering?(): void;\n    // (undocumented)\n    startLoad(startPosition: number, skipSeekToStartPosition?: boolean): void;\n    // (undocumented)\n    stopLoad(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaPlaylist Interface in TypeScript\nDESCRIPTION: Comprehensive interface for HLS media playlists with properties for codec information, metadata, attributes, and stream characteristics.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaPlaylist\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface MediaPlaylist {\n    // (undocumented)\n    assocLang?: string;\n    // (undocumented)\n    attrs: MediaAttributes;\n    // (undocumented)\n    audioCodec?: string;\n    // (undocumented)\n    autoselect: boolean;\n    // (undocumented)\n    bitrate: number;\n    // (undocumented)\n    channels?: string;\n    // (undocumented)\n    characteristics?: string;\n    // (undocumented)\n    default: boolean;\n    // (undocumented)\n    details?: LevelDetails;\n    // (undocumented)\n    forced: boolean;\n    // (undocumented)\n    groupId: string;\n    // (undocumented)\n    height?: number;\n    // (undocumented)\n    id: number;\n    // (undocumented)\n    instreamId?: string;\n    // (undocumented)\n    lang?: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    textCodec?: string;\n    // (undocumented)\n    type: MediaPlaylistType | 'main';\n    // (undocumented)\n    unknownCodecs?: string[];\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    videoCodec?: string;\n    // (undocumented)\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM Systems in JavaScript\nDESCRIPTION: Demonstrates how to define license settings for different DRM key systems in HLS.js. This configuration includes specifying license URLs and server certificate URLs for various DRM providers.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndrmSystems: {\n  'com.apple.fps': {\n    licenseUrl: 'https://your-fps-license-server/path',\n    serverCertificateUrl: 'https://your-fps-license-server/certificate/path',\n  },\n  'com.widevine.alpha': {\n    licenseUrl: 'https://your-widevine-license-server/path'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimelineController Class in TypeScript for HLS.js\nDESCRIPTION: Implements a controller for handling caption timelines that implements ComponentAPI. This class manages captions tracks, creates and adds cues, and handles buffer flushing events.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TimelineController implements ComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    addCues(trackName: string, startTime: number, endTime: number, screen: CaptionScreen, cueRanges: Array<[number, number]>): void;\n    // (undocumented)\n    createCaptionsTrack(trackName: string): void;\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    onBufferFlushing(event: Events.BUFFER_FLUSHING, { startOffset, endOffset, endOffsetSubtitles, type }: BufferFlushingData): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InterstitialsController Class in TypeScript\nDESCRIPTION: A controller class extending Logger and implementing NetworkComponentAPI. Manages interstitial content playback, provides methods for pausing/resuming buffering, and starting/stopping content loading.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InterstitialsController extends Logger implements NetworkComponentAPI {\n    constructor(hls: Hls, HlsPlayerClass: typeof Hls);\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    get interstitialsManager(): InterstitialsManager | null;\n    // (undocumented)\n    pauseBuffering(): void;\n    // (undocumented)\n    resumeBuffering(): void;\n    // (undocumented)\n    startLoad(): void;\n    // (undocumented)\n    stopLoad(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderConfiguration Interface in TypeScript\nDESCRIPTION: Interface for HLS.js loader configuration. Contains the modern loadPolicy property and several deprecated properties for backward compatibility with older versions.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoaderConfiguration {\n    // (undocumented)\n    highWaterMark?: number;\n    // (undocumented)\n    loadPolicy: LoaderConfig;\n    // @deprecated (undocumented)\n    maxRetry: number;\n    // @deprecated (undocumented)\n    maxRetryDelay: number;\n    // @deprecated (undocumented)\n    retryDelay: number;\n    // @deprecated (undocumented)\n    timeout: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Controller Class in TypeScript\nDESCRIPTION: Class declaration for the Error Controller that handles error processing and reporting in hls.js, including load lifecycle management.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ErrorController extends Logger implements NetworkComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    destroy(): void;\n    // (undocumented)\n    onErrorOut(event: Events.ERROR, data: ErrorData): void;\n    // (undocumented)\n    startLoad(startPosition: number): void;\n    // (undocumented)\n    stopLoad(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkErrorAction Enum in TypeScript\nDESCRIPTION: Enumeration of possible actions to take when network errors occur, with options for retrying, sending callbacks, or altering playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_151\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"NetworkErrorAction\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const enum NetworkErrorAction {\n    // (undocumented)\n    DoNothing = 0,\n    // (undocumented)\n    InsertDiscontinuity = 4,// Reserved for future use\n    // (undocumented)\n    RemoveAlternatePermanently = 3,\n    // (undocumented)\n    RetryRequest = 5,// Reserved for future use\n    // (undocumented)\n    SendAlternateToPenaltyBox = 2,// Reserved for future use\n    // (undocumented)\n    SendEndCallback = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskLoop Class in TypeScript for HLS.js\nDESCRIPTION: Implements a task loop system that extends Logger, providing scheduling capabilities for recurring tasks. This class manages timed operations and provides methods for setting intervals, immediate execution, and cleanup.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_174\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TaskLoop extends Logger {\n    constructor(label: string, logger: ILogger);\n    // (undocumented)\n    clearInterval(): boolean;\n    // (undocumented)\n    clearNextTick(): boolean;\n    // (undocumented)\n    destroy(): void;\n    protected doTick(): void;\n    // (undocumented)\n    hasInterval(): boolean;\n    // (undocumented)\n    hasNextTick(): boolean;\n    // (undocumented)\n    protected onHandlerDestroyed(): void;\n    // (undocumented)\n    protected onHandlerDestroying(): void;\n    // (undocumented)\n    setInterval(millis: number): boolean;\n    tick(): void;\n    // (undocumented)\n    tickImmediate(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedMultivariantPlaylist Type in TypeScript\nDESCRIPTION: Type representing a parsed HLS multivariant playlist with properties for levels, errors, session data, and content steering options.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"ParsedMultivariantPlaylist\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type ParsedMultivariantPlaylist = {\n    contentSteering: ContentSteeringOptions | null;\n    levels: LevelParsed[];\n    playlistParsingError: Error | null;\n    sessionData: Record<string, AttrList> | null;\n    sessionKeys: LevelKey[] | null;\n    startTimeOffset: number | null;\n    variableList: VariableMap | null;\n    hasVariableRefs: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderOnSuccess Type in TypeScript\nDESCRIPTION: Defines a type for a loader success callback function. It takes a loader response, stats, context, and network details as parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoaderOnSuccess<T extends LoaderContext> = (response: LoaderResponse, stats: LoaderStats, context: T, networkDetails: any) => void;\n```\n\n----------------------------------------\n\nTITLE: HLS Event Handler Type Definitions\nDESCRIPTION: TypeScript interface defining event handler types for various HLS.js events like media loading/unloading, manifest handling, and subtitle track management.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n[Events.INTERSTITIAL_STARTED]: (event: Events.INTERSTITIAL_STARTED, data: InterstitialStartedData) => void;\n[Events.INTERSTITIALS_UPDATED]: (event: Events.INTERSTITIALS_UPDATED, data: InterstitialsUpdatedData) => void;\n[Events.KEY_LOADED]: (event: Events.KEY_LOADED, data: KeyLoadedData) => void;\n// ... additional event handlers\n```\n\n----------------------------------------\n\nTITLE: Defining HLS Performance Timing Interface in TypeScript\nDESCRIPTION: Interface definition for HlsChunkPerformanceTiming that extends HlsPerformanceTiming. This interface tracks execution timing of chunks during HLS media processing.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HlsChunkPerformanceTiming extends HlsPerformanceTiming {\n    // (undocumented)\n    executeEnd: number;\n    // (undocumented)\n    executeStart: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AttrList Class for HLS Attribute Parsing in TypeScript\nDESCRIPTION: Class for parsing and handling attributes in HLS manifest files. It includes methods for extracting various data types like integers, floats, resolution values, and enumerated strings from attributes.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AttrList {\n    constructor(attrs: string | Record<string, any>, parsed?: Pick<ParsedMultivariantPlaylist | LevelDetails, 'variableList' | 'hasVariableRefs' | 'playlistParsingError'>);\n    // (undocumented)\n    [key: string]: any;\n    // (undocumented)\n    bool(attrName: string): boolean;\n    // (undocumented)\n    get clientAttrs(): string[];\n    // (undocumented)\n    decimalFloatingPoint(attrName: string): number;\n    // (undocumented)\n    decimalInteger(attrName: string): number;\n    // (undocumented)\n    decimalResolution(attrName: string): {\n        width: number;\n        height: number;\n    } | undefined;\n    // (undocumented)\n    enumeratedString(attrName: string): string | undefined;\n    // (undocumented)\n    enumeratedStringList<T extends {\n        [key: string]: boolean;\n    }>(attrName: string, dict: T): {\n        [key in keyof T]: boolean;\n    };\n    // (undocumented)\n    hexadecimalInteger(attrName: string): Uint8Array<ArrayBuffer> | null;\n    // (undocumented)\n    hexadecimalIntegerAsNumber(attrName: string): number;\n    // (undocumented)\n    optionalFloat(attrName: string, defaultValue: number): number;\n    // (undocumented)\n    static parseAttrList(input: string, parsed?: Pick<ParsedMultivariantPlaylist | LevelDetails, 'variableList' | 'hasVariableRefs' | 'playlistParsingError'>): Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building HLS.js Distribution Files\nDESCRIPTION: Commands for building different distribution flavors of HLS.js. Includes options for production builds, debug-mode artifacts, and watching for changes during development.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ci\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --env dist # replace \"dist\" by other configuration name, see above ^\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderStats Interface in TypeScript\nDESCRIPTION: Defines an interface for loader statistics, including various timing and performance metrics.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LoaderStats {\n    // (undocumented)\n    aborted: boolean;\n    // (undocumented)\n    buffering: HlsProgressivePerformanceTiming;\n    // (undocumented)\n    bwEstimate: number;\n    // (undocumented)\n    chunkCount: number;\n    // (undocumented)\n    loaded: number;\n    // (undocumented)\n    loading: HlsProgressivePerformanceTiming;\n    // (undocumented)\n    parsing: HlsPerformanceTiming;\n    // (undocumented)\n    retry: number;\n    // (undocumented)\n    total: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderConfig Type in TypeScript\nDESCRIPTION: Type definition for loader configuration in HLS.js. Specifies timeout values and retry policies for both timeout and error scenarios.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LoaderConfig = {\n    maxTimeToFirstByteMs: number;\n    maxLoadTimeMs: number;\n    timeoutRetry: RetryConfig | null;\n    errorRetry: RetryConfig | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Media Key System Access in JavaScript\nDESCRIPTION: Shows how to customize the requestMediaKeySystemAccess function in HLS.js. This example demonstrates mapping a key system access request from a supported value to a custom one.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar hls new Hls({\n  requestMediaKeySystemAccessFunc: (keySystem, supportedConfigurations) => {\n    if (keySystem === 'com.microsoft.playready') {\n      keySystem = 'com.microsoft.playready.recommendation';\n    }\n    return navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ChunkMetadata Class for Media Chunk Information\nDESCRIPTION: The ChunkMetadata class tracks information about individual media chunks in the HLS stream, including their level, sequence number, size, and performance timing data for buffering and transmuxing operations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ChunkMetadata {\n    constructor(level: number, sn: number, id: number, size?: number, part?: number, partial?: boolean);\n    // (undocumented)\n    readonly buffering: {\n        [key in SourceBufferName]: HlsChunkPerformanceTiming;\n    };\n    // (undocumented)\n    readonly id: number;\n    // (undocumented)\n    readonly level: number;\n    // (undocumented)\n    readonly part: number;\n    // (undocumented)\n    readonly partial: boolean;\n    // (undocumented)\n    readonly size: number;\n    // (undocumented)\n    readonly sn: number;\n    // (undocumented)\n    readonly transmuxing: HlsChunkPerformanceTiming;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Tracks Interfaces in TypeScript for HLS.js\nDESCRIPTION: A set of TypeScript interfaces for audio track data in HLS.js, including AudioTracksUpdatedData, AudioTrackSwitchedData, AudioTrackSwitchingData, and AudioTrackUpdatedData. These interfaces provide type definitions for audio track related events and data structures.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AudioTracksUpdatedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface AudioTracksUpdatedData {\n    // (undocumented)\n    audioTracks: MediaPlaylist[];\n}\n\n// Warning: (ae-missing-release-tag) \"AudioTrackSwitchedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface AudioTrackSwitchedData extends MediaPlaylist {\n}\n\n// Warning: (ae-missing-release-tag) \"AudioTrackSwitchingData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface AudioTrackSwitchingData extends MediaPlaylist {\n}\n\n// Warning: (ae-missing-release-tag) \"AudioTrackUpdatedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface AudioTrackUpdatedData {\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    groupId: string;\n    // (undocumented)\n    id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoadPolicy Type in TypeScript\nDESCRIPTION: Defines a type for load policy configuration, containing a default loader configuration.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoadPolicy = {\n    default: LoaderConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing FragmentTracker Class in TypeScript for HLS.js\nDESCRIPTION: Class for tracking fragment state throughout the loading and playback process. Implements ComponentAPI and provides methods to manage and query fragment states.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentTracker\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class FragmentTracker implements ComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    destroy(): void;\n    detectEvictedFragments(elementaryStream: SourceBufferName, timeRange: TimeRanges, playlistType: PlaylistLevelType, appendedPart?: Part | null, removeAppending?: boolean): void;\n    detectPartialFragments(data: FragBufferedData): void;\n    // (undocumented)\n    fragBuffered(frag: MediaFragment, force?: true): void;\n    getAppendedFrag(position: number, levelType: PlaylistLevelType): Fragment | Part | null;\n    getBufferedFrag(position: number, levelType: PlaylistLevelType): MediaFragment | null;\n    // (undocumented)\n    getFragAtPos(position: number, levelType: PlaylistLevelType, buffered?: boolean): MediaFragment | null;\n    getPartialFragment(time: number): MediaFragment | null;\n    // (undocumented)\n    getState(fragment: Fragment): FragmentState;\n    // (undocumented)\n    hasFragments(type?: PlaylistLevelType): boolean;\n    // (undocumented)\n    hasParts(type: PlaylistLevelType): boolean;\n    // (undocumented)\n    isEndListAppended(type: PlaylistLevelType): boolean;\n    // (undocumented)\n    removeAllFragments(): void;\n    // (undocumented)\n    removeFragment(fragment: Fragment): void;\n    // (undocumented)\n    removeFragmentsInRange(start: number, end: number, playlistType: PlaylistLevelType, withGapOnly?: boolean, unbufferedOnly?: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaKeyFunc Type in TypeScript\nDESCRIPTION: Type definition for a function that handles media key operations, taking a key system and supported configurations as parameters and returning a Promise of MediaKeySystemAccess.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaKeyFunc\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type MediaKeyFunc = (keySystem: KeySystems, supportedConfigurations: MediaKeySystemConfiguration[]) => Promise<MediaKeySystemAccess>;\n```\n\n----------------------------------------\n\nTITLE: Defining Error Details Enum in TypeScript\nDESCRIPTION: Extensive enum defining all possible error detail codes in hls.js, covering various categories including buffer issues, fragment loading, DRM, and key system errors.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ErrorDetails {\n    // (undocumented)\n    ASSET_LIST_LOAD_ERROR = \"assetListLoadError\",\n    // (undocumented)\n    ASSET_LIST_LOAD_TIMEOUT = \"assetListLoadTimeout\",\n    // (undocumented)\n    ASSET_LIST_PARSING_ERROR = \"assetListParsingError\",\n    // (undocumented)\n    ATTACH_MEDIA_ERROR = \"attachMediaError\",\n    // (undocumented)\n    AUDIO_TRACK_LOAD_ERROR = \"audioTrackLoadError\",\n    // (undocumented)\n    AUDIO_TRACK_LOAD_TIMEOUT = \"audioTrackLoadTimeOut\",\n    // (undocumented)\n    BUFFER_ADD_CODEC_ERROR = \"bufferAddCodecError\",\n    // (undocumented)\n    BUFFER_APPEND_ERROR = \"bufferAppendError\",\n    // (undocumented)\n    BUFFER_APPENDING_ERROR = \"bufferAppendingError\",\n    // (undocumented)\n    BUFFER_FULL_ERROR = \"bufferFullError\",\n    // (undocumented)\n    BUFFER_INCOMPATIBLE_CODECS_ERROR = \"bufferIncompatibleCodecsError\",\n    // (undocumented)\n    BUFFER_NUDGE_ON_STALL = \"bufferNudgeOnStall\",\n    // (undocumented)\n    BUFFER_SEEK_OVER_HOLE = \"bufferSeekOverHole\",\n    // (undocumented)\n    BUFFER_STALLED_ERROR = \"bufferStalledError\",\n    // (undocumented)\n    FRAG_DECRYPT_ERROR = \"fragDecryptError\",\n    // (undocumented)\n    FRAG_GAP = \"fragGap\",\n    // (undocumented)\n    FRAG_LOAD_ERROR = \"fragLoadError\",\n    // (undocumented)\n    FRAG_LOAD_TIMEOUT = \"fragLoadTimeOut\",\n    // (undocumented)\n    FRAG_PARSING_ERROR = \"fragParsingError\",\n    // (undocumented)\n    INTERNAL_ABORTED = \"aborted\",\n    // (undocumented)\n    INTERNAL_EXCEPTION = \"internalException\",\n    // (undocumented)\n    INTERSTITIAL_ASSET_ITEM_ERROR = \"interstitialAssetItemError\",\n    // (undocumented)\n    KEY_LOAD_ERROR = \"keyLoadError\",\n    // (undocumented)\n    KEY_LOAD_TIMEOUT = \"keyLoadTimeOut\",\n    // (undocumented)\n    KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR = \"keySystemDestroyCloseSessionError\",\n    // (undocumented)\n    KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR = \"keySystemDestroyMediaKeysError\",\n    // (undocumented)\n    KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR = \"keySystemDestroyRemoveSessionError\",\n    // (undocumented)\n    KEY_SYSTEM_LICENSE_REQUEST_FAILED = \"keySystemLicenseRequestFailed\",\n    // (undocumented)\n    KEY_SYSTEM_NO_ACCESS = \"keySystemNoAccess\",\n    // (undocumented)\n    KEY_SYSTEM_NO_CONFIGURED_LICENSE = \"keySystemNoConfiguredLicense\",\n    // (undocumented)\n    KEY_SYSTEM_NO_KEYS = \"keySystemNoKeys\",\n    // (undocumented)\n    KEY_SYSTEM_NO_SESSION = \"keySystemNoSession\",\n    // (undocumented)\n    KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = \"keySystemServerCertificateRequestFailed\",\n    // (undocumented)\n    KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = \"keySystemServerCertificateUpdateFailed\",\n    // (undocumented)\n    KEY_SYSTEM_SESSION_UPDATE_FAILED = \"keySystemSessionUpdateFailed\",\n    // (undocumented)\n    KEY_SYSTEM_STATUS_INTERNAL_ERROR = \"keySystemStatusInternalError\",\n    // (undocumented)\n    KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = \"keySystemStatusOutputRestricted\",\n    // (undocumented)\n    LEVEL_EMPTY_ERROR = \"levelEmptyError\",\n    // (undocumented)\n    LEVEL_LOAD_ERROR = \"levelLoadError\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Object Structure in HLS.js\nDESCRIPTION: Defines the structure of a Fragment object containing information about an individual media fragment including duration, sequence number, and URL.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  duration: 10,\n  level: 3,\n  cc: 0\n  sn: 35,\n  start: 30,\n  url: 'http://fragURL.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Source Attachment Type in TypeScript\nDESCRIPTION: Type definition for data related to attaching a media source to an HTML media element, including the media element, MediaSource object, and track set information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AttachMediaSourceData = {\n    media: HTMLMediaElement;\n    mediaSource: MediaSource | null;\n    tracks: SourceBufferTrackSet;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Track Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for a media track that extends BaseTrack, adding buffer and initialization segment properties. This interface represents a playable media track with its associated buffer and initialization data.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Track extends BaseTrack {\n    // (undocumented)\n    buffer?: SourceBuffer;\n    // (undocumented)\n    initSegment?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragParsingMetadataData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for metadata extracted during fragment parsing. Contains the fragment reference, level details, ID, and metadata samples array.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragParsingMetadataData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragParsingMetadataData {\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    samples: MetadataSample[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Data Interface in TypeScript\nDESCRIPTION: Comprehensive interface for error data in hls.js, containing detailed information about errors including type, details, context, and associated media objects.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ErrorData {\n    // (undocumented)\n    buffer?: number;\n    // (undocumented)\n    bufferInfo?: BufferInfo;\n    // (undocumented)\n    bytes?: number;\n    // (undocumented)\n    chunkMeta?: ChunkMetadata;\n    // (undocumented)\n    context?: PlaylistLoaderContext;\n    // (undocumented)\n    details: ErrorDetails;\n    // @deprecated (undocumented)\n    err?: {\n        message: string;\n    };\n    // (undocumented)\n    error: Error;\n    // (undocumented)\n    errorAction?: IErrorAction;\n    // (undocumented)\n    event?: keyof HlsListeners | 'demuxerWorker';\n    // (undocumented)\n    fatal: boolean;\n    // (undocumented)\n    frag?: Fragment;\n    // (undocumented)\n    interstitial?: InterstitialEvent;\n    // (undocumented)\n    level?: number | undefined;\n    // (undocumented)\n    levelRetry?: boolean;\n    // (undocumented)\n    loader?: Loader<LoaderContext>;\n    // (undocumented)\n    mimeType?: string;\n    // (undocumented)\n    networkDetails?: any;\n    // (undocumented)\n    parent?: PlaylistLevelType;\n    // (undocumented)\n    part?: Part | null;\n    // (undocumented)\n    reason?: string;\n    // (undocumented)\n    response?: LoaderResponse;\n    // (undocumented)\n    sourceBufferName?: SourceBufferName;\n    // (undocumented)\n    stalled?: {\n        start: number;\n    };\n    // (undocumented)\n    stats?: LoaderStats;\n    // (undocumented)\n    type: ErrorTypes;\n    // (undocumented)\n    url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelLoadedData Interface in TypeScript\nDESCRIPTION: Interface definition for data related to HLS level loading events. Contains information about the loaded level details, statistics, delivery directives, and network details.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelLoadedData {\n    // (undocumented)\n    deliveryDirectives: HlsUrlParameters | null;\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    id: number;\n    // (undocumented)\n    level: number;\n    // (undocumented)\n    levelInfo: Level;\n    // (undocumented)\n    networkDetails: any;\n    // (undocumented)\n    stats: LoaderStats;\n    // (undocumented)\n    withoutMultiVariant?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Track Set Interface in TypeScript\nDESCRIPTION: Interface for managing different types of media tracks including audio, video, and combined audiovideo tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_181\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TrackSet {\n    audio?: Track;\n    audiovideo?: Track;\n    video?: Track;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License XHR Setup in JavaScript\nDESCRIPTION: Demonstrates how to set up a pre-processor function for modifying license requests in HLS.js. This function can modify the license request URL, headers, and payload based on various conditions and the current key-session.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  licenseXhrSetup: function (xhr, url, keyContext, licenseChallenge) {\n    let payload = licenseChallenge;\n\n    // Send cookies with request\n    xhr.withCredentials = true;\n\n    // Call open to change the method (default is POST), modify the url, or set request headers\n    xhr.open('POST', url, true);\n\n    // call xhr.setRequestHeader after xhr.open otherwise licenseXhrSetup will throw and be called a second time after HLS.js call xhr.open\n    if (keyContext.keySystem === 'com.apple.fps') {\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      payload = JSON.stringify({\n        keyData: base64Encode(keyContext.decryptdata?.keyId),\n        licenseChallenge: base64Encode(licenseChallenge),\n      });\n    } else {\n      xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n    }\n\n    // Return the desired payload or a Promise<Uint8Array>.\n    // Not returning a value, or returning `undefined` or` Promise<void>` will result in the `licenseChallenge` being used.\n    return fetchDRMToken(this.authData).then((result) => {\n      xhr.setRequestHeader('token', token);\n      return payload;\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataControllerConfig Type in TypeScript\nDESCRIPTION: Configuration options for metadata handling, with flags to enable different types of metadata cues and KLV metadata.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MetadataControllerConfig\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type MetadataControllerConfig = {\n    enableDateRangeMetadataCues: boolean;\n    enableEmsgMetadataCues: boolean;\n    enableEmsgKLVMetadata: boolean;\n    enableID3MetadataCues: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DRM System Options Types in TypeScript\nDESCRIPTION: Type definition for DRM system options in hls.js, specifying robustness levels, encryption schemes, and other EME (Encrypted Media Extensions) related configurations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DRMSystemOptions = {\n    audioRobustness?: string;\n    videoRobustness?: string;\n    audioEncryptionScheme?: string | null;\n    videoEncryptionScheme?: string | null;\n    persistentState?: MediaKeysRequirement;\n    distinctiveIdentifier?: MediaKeysRequirement;\n    sessionTypes?: string[];\n    sessionType?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LevelSwitchingData Interface in TypeScript\nDESCRIPTION: Comprehensive interface for HLS level switching events. Contains detailed information about the target level including bitrate, dimensions, codecs, URLs, and error statistics to facilitate quality switching decisions.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelSwitchingData {\n    // (undocumented)\n    attrs: LevelAttributes;\n    // (undocumented)\n    audioCodec: string | undefined;\n    // (undocumented)\n    audioGroupIds: (string | undefined)[] | undefined;\n    // (undocumented)\n    audioGroups: (string | undefined)[] | undefined;\n    // (undocumented)\n    averageBitrate: number;\n    // (undocumented)\n    bitrate: number;\n    // (undocumented)\n    codecSet: string;\n    // (undocumented)\n    details: LevelDetails | undefined;\n    // (undocumented)\n    fragmentError: number;\n    // (undocumented)\n    height: number;\n    // (undocumented)\n    id: number;\n    // (undocumented)\n    level: number;\n    // (undocumented)\n    loaded: {\n        bytes: number;\n        duration: number;\n    } | undefined;\n    // (undocumented)\n    loadError: number;\n    // (undocumented)\n    maxBitrate: number;\n    // (undocumented)\n    name: string | undefined;\n    // (undocumented)\n    realBitrate: number;\n    // (undocumented)\n    subtitleGroups: (string | undefined)[] | undefined;\n    // (undocumented)\n    textGroupIds: (string | undefined)[] | undefined;\n    // (undocumented)\n    uri: string;\n    // (undocumented)\n    url: string[];\n    // (undocumented)\n    urlId: 0;\n    // (undocumented)\n    videoCodec: string | undefined;\n    // (undocumented)\n    width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelLoadingData Interface in TypeScript\nDESCRIPTION: Interface defining the data structure for HLS level loading events. Includes identifiers, level information, pathway information, and URL details needed for level loading operations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelLoadingData {\n    // (undocumented)\n    deliveryDirectives: HlsUrlParameters | null;\n    // (undocumented)\n    id: number;\n    // (undocumented)\n    level: number;\n    // (undocumented)\n    levelInfo: Level;\n    // (undocumented)\n    pathwayId: string | undefined;\n    // (undocumented)\n    url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Timeline and Buffer Property Definitions in TypeScript HLS.js\nDESCRIPTION: Property getter and setter declarations for timeline offset, remaining buffer, and start offset values in HLS.js. These properties are used to manage media timing and buffer status.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nget remaining(): number;\n// (undocumented)\nget startOffset(): number;\n// (undocumented)\nget timelineOffset(): number;\nset timelineOffset(value: number);\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataSchema Enum in TypeScript\nDESCRIPTION: Enumeration of supported metadata schema formats including ID3, date range, EMSG, and KLV binary formats.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MetadataSchema\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport enum MetadataSchema {\n    // (undocumented)\n    audioId3 = \"org.id3\",\n    // (undocumented)\n    dateRange = \"com.apple.quicktime.HLS\",\n    // (undocumented)\n    emsg = \"https://aomedia.org/emsg/ID3\",\n    // (undocumented)\n    misbklv = \"urn:misb:KLV:bin:1910.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DRM Systems Configuration Type in TypeScript\nDESCRIPTION: Type definition that creates a mapping from key systems to their respective DRM configurations, allowing for different configurations per DRM system.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DRMSystemsConfiguration = Partial<Record<KeySystems, DRMSystemConfiguration>>;\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsUpdatedData Interface in TypeScript\nDESCRIPTION: Defines the structure of data emitted with the INTERSTITIALS_UPDATED event, including events, schedule, durations, and removed IDs.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterstitialsUpdatedData {\n  events: InterstitialEvent[];\n  schedule: InterstitialScheduleItem[];\n  durations: InterstitialScheduleDurations;\n  removedIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentLoaderContext Interface in TypeScript for HLS.js\nDESCRIPTION: Interface extending LoaderContext for fragment loading. Contains the fragment reference, part information, and optional IV reset flag for decryption.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentLoaderContext\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragmentLoaderContext extends LoaderContext {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    part: Part | null;\n    // (undocumented)\n    resetIV?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManifestLoadedData Interface in TypeScript\nDESCRIPTION: Defines an interface for data loaded from a manifest, including various playlist and metadata properties.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ManifestLoadedData {\n    // (undocumented)\n    audioTracks: MediaPlaylist[];\n    // (undocumented)\n    captions?: MediaPlaylist[];\n    // (undocumented)\n    contentSteering: ContentSteeringOptions | null;\n    // (undocumented)\n    levels: LevelParsed[];\n    // (undocumented)\n    networkDetails: any;\n    // (undocumented)\n    sessionData: Record<string, AttrList> | null;\n    // (undocumented)\n    sessionKeys: LevelKey[] | null;\n    // (undocumented)\n    startTimeOffset: number | null;\n    // (undocumented)\n    stats: LoaderStats;\n    // (undocumented)\n    subtitles?: MediaPlaylist[];\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    variableList: VariableMap | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaDecodingInfo Type in TypeScript\nDESCRIPTION: Defines a type for media decoding information, including support status, configurations, and decoding results.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_136\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MediaDecodingInfo = {\n    supported: boolean;\n    configurations: readonly MediaDecodingConfiguration[];\n    decodingInfoResults: readonly MediaCapabilitiesDecodingInfo[];\n    error?: Error;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining KeySystem Enums for DRM in HLS.js\nDESCRIPTION: Two enums that define key system identifiers for different DRM technologies. KeySystemFormats defines format identifiers for key requests, while KeySystems defines the actual DRM system identifiers used in EME implementation.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum KeySystemFormats {\n    // (undocumented)\n    CLEARKEY = \"org.w3.clearkey\",\n    // (undocumented)\n    FAIRPLAY = \"com.apple.streamingkeydelivery\",\n    // (undocumented)\n    PLAYREADY = \"com.microsoft.playready\",\n    // (undocumented)\n    WIDEVINE = \"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum KeySystems {\n    // (undocumented)\n    CLEARKEY = \"org.w3.clearkey\",\n    // (undocumented)\n    FAIRPLAY = \"com.apple.fps\",\n    // (undocumented)\n    PLAYREADY = \"com.microsoft.playready\",\n    // (undocumented)\n    WIDEVINE = \"com.widevine.alpha\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateRange Class for EXT-X-DATERANGE Tag Support\nDESCRIPTION: The DateRange class represents an HLS EXT-X-DATERANGE tag, providing properties and methods for accessing date range attributes such as startDate, endDate, duration, and custom class information for timed metadata.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DateRange {\n    constructor(dateRangeAttr: AttrList, dateRangeWithSameId?: DateRange | undefined, tagCount?: number);\n    // (undocumented)\n    attr: AttrList;\n    // (undocumented)\n    get class(): string;\n    // (undocumented)\n    get cue(): DateRangeCue;\n    // (undocumented)\n    get duration(): number | null;\n    // (undocumented)\n    get endDate(): Date | null;\n    // (undocumented)\n    get endOnNext(): boolean;\n    // (undocumented)\n    get id(): string;\n    // (undocumented)\n    get isInterstitial(): boolean;\n    // (undocumented)\n    get isValid(): boolean;\n    // (undocumented)\n    get plannedDuration(): number | null;\n    // (undocumented)\n    get startDate(): Date;\n    // (undocumented)\n    get startTime(): number;\n    // Warning: (ae-forgotten-export) The symbol \"MediaFragmentRef\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    tagAnchor: MediaFragmentRef | null;\n    // (undocumented)\n    tagOrder: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragDecryptedData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data after a fragment has been decrypted. Contains the fragment reference, decrypted payload as ArrayBuffer, and timing statistics for the decryption process.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragDecryptedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragDecryptedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    payload: ArrayBuffer;\n    // (undocumented)\n    stats: {\n        tstart: number;\n        tdecrypt: number;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Part Class in TypeScript\nDESCRIPTION: Class representing a part of a media segment in HLS with properties for timing, positioning, and relationship to its parent fragment.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Part\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Part extends BaseSegment {\n    constructor(partAttrs: AttrList, frag: MediaFragment, base: Base | string, index: number, previous?: Part);\n    // (undocumented)\n    readonly duration: number;\n    // (undocumented)\n    get end(): number;\n    // (undocumented)\n    readonly fragment: MediaFragment;\n    // (undocumented)\n    readonly fragOffset: number;\n    // (undocumented)\n    readonly gap: boolean;\n    // (undocumented)\n    readonly independent: boolean;\n    // (undocumented)\n    readonly index: number;\n    // (undocumented)\n    get loaded(): boolean;\n    // (undocumented)\n    readonly relurl: string;\n    // (undocumented)\n    get start(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaOverrides Type in TypeScript\nDESCRIPTION: Type defining optional overrides for media playback behavior, including duration, end of stream flag, and cue removal settings.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaOverrides\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type MediaOverrides = {\n    duration?: number;\n    endOfStream?: boolean;\n    cueRemoval?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: HLS Load Policies Type Definition\nDESCRIPTION: Type definition for HLS load policies configuration specifying loading behavior for fragments, keys, certificates, playlists, manifests and other assets.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HlsLoadPolicies = {\n    fragLoadPolicy: LoadPolicy;\n    keyLoadPolicy: LoadPolicy;\n    certLoadPolicy: LoadPolicy;\n    playlistLoadPolicy: LoadPolicy;\n    manifestLoadPolicy: LoadPolicy;\n    steeringManifestLoadPolicy: LoadPolicy;\n    interstitialAssetListLoadPolicy: LoadPolicy;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CMCDController for Common Media Client Data\nDESCRIPTION: The CMCDController implements the ComponentAPI interface to handle Common Media Client Data (CMCD) implementation in HLS.js, allowing for standardized media metrics reporting between client and server.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CMCDController implements ComponentAPI {\n    constructor(hls: Hls);\n    // (undocumented)\n    destroy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Buffer-Related Interfaces in TypeScript for HLS.js\nDESCRIPTION: TypeScript interfaces for buffer-related data in HLS.js, including BackBufferData and BaseData. These interfaces provide type definitions for buffer events and base data structures used throughout the library.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"BackBufferData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface BackBufferData {\n    // (undocumented)\n    bufferEnd: number;\n}\n\n// Warning: (ae-missing-release-tag) \"BaseData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type BaseData = {\n    url: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PlayheadTimes Type in TypeScript\nDESCRIPTION: Type representing playback time information with properties for current time, buffered end time, and total duration.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"PlayheadTimes\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type PlayheadTimes = {\n    bufferedEnd: number;\n    currentTime: number;\n    duration: number;\n\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialSchedulePrimaryItem Type in TypeScript\nDESCRIPTION: Type representing a primary content item in an interstitial schedule. Contains references to next/previous events, timing information, and separate timing details for playout and integrated scenarios.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InterstitialSchedulePrimaryItem = {\n    nextEvent: InterstitialEvent | null;\n    previousEvent: InterstitialEvent | null;\n    event?: undefined;\n    start: number;\n    end: number;\n    playout: {\n        start: number;\n        end: number;\n    };\n    integrated: {\n        start: number;\n        end: number;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LevelAttributes Interface for HLS.js\nDESCRIPTION: The LevelAttributes interface extends AttrList and defines the specific HLS manifest attributes related to stream quality levels. It includes properties for bandwidth, codecs, resolution, frame rate, and various stream identifiers.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelAttributes extends AttrList {\n    // (undocumented)\n    'ALLOWED-CPC'?: string;\n    // (undocumented)\n    'AVERAGE-BANDWIDTH'?: string;\n    // (undocumented)\n    'CLOSED-CAPTIONS'?: string;\n    // (undocumented)\n    'FRAME-RATE'?: string;\n    // (undocumented)\n    'HDCP-LEVEL'?: 'TYPE-0' | 'TYPE-1' | 'NONE';\n    // (undocumented)\n    'PATHWAY-ID'?: string;\n    // (undocumented)\n    'STABLE-VARIANT-ID'?: string;\n    // (undocumented)\n    'SUPPLEMENTAL-CODECS'?: string;\n    // (undocumented)\n    'VIDEO-RANGE'?: VideoRange;\n    // (undocumented)\n    AUDIO?: string;\n    // (undocumented)\n    BANDWIDTH?: string;\n    // (undocumented)\n    CODECS?: string;\n    // (undocumented)\n    RESOLUTION?: string;\n    // (undocumented)\n    SCORE?: string;\n    // (undocumented)\n    SUBTITLES?: string;\n    // (undocumented)\n    VIDEO?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimelineControllerConfig Type in TypeScript for HLS.js\nDESCRIPTION: Defines the configuration options for the TimelineController, including settings for various caption formats and text track properties. This type provides configuration for caption handling, rendering, and language settings.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_176\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TimelineControllerConfig = {\n    cueHandler: CuesInterface;\n    enableWebVTT: boolean;\n    enableIMSC1: boolean;\n    enableCEA708Captions: boolean;\n    captionsTextTrack1Label: string;\n    captionsTextTrack1LanguageCode: string;\n    captionsTextTrack2Label: string;\n    captionsTextTrack2LanguageCode: string;\n    captionsTextTrack3Label: string;\n    captionsTextTrack3LanguageCode: string;\n    captionsTextTrack4Label: string;\n    captionsTextTrack4LanguageCode: string;\n    renderTextTracksNatively: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Elementary Stream Info Interface in TypeScript\nDESCRIPTION: Interface that represents timing information for elementary streams in HLS, including start and end presentation and decode timestamps, with optional partial flag.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ElementaryStreamInfo {\n    // (undocumented)\n    endDTS: number;\n    // (undocumented)\n    endPTS: number;\n    // (undocumented)\n    partial?: boolean;\n    // (undocumented)\n    startDTS: number;\n    // (undocumented)\n    startPTS: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentState Enum in TypeScript for HLS.js\nDESCRIPTION: Enum defining the possible states of a fragment in the loading and playback process: NOT_LOADED, PARTIAL, APPENDING, and OK.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentState\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const enum FragmentState {\n    // (undocumented)\n    APPENDING = \"APPENDING\",\n    // (undocumented)\n    NOT_LOADED = \"NOT_LOADED\",\n    // (undocumented)\n    OK = \"OK\",\n    // (undocumented)\n    PARTIAL = \"PARTIAL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialScheduleItem Union Type in TypeScript\nDESCRIPTION: A union type that can be either an InterstitialScheduleEventItem or an InterstitialSchedulePrimaryItem, representing different types of items in an interstitial schedule.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InterstitialScheduleItem = InterstitialScheduleEventItem | InterstitialSchedulePrimaryItem;\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialPlayer Interface in TypeScript\nDESCRIPTION: Interface representing a player for interstitial content. It tracks asset players, current playback time, duration, currently playing index, and the schedule item being played.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialPlayer {\n    // (undocumented)\n    assetPlayers: (HlsAssetPlayer | null)[];\n    // (undocumented)\n    currentTime: number;\n    // (undocumented)\n    duration: number;\n    // (undocumented)\n    playingIndex: number;\n    // (undocumented)\n    scheduleItem: InterstitialScheduleEventItem | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelParsed Interface in TypeScript\nDESCRIPTION: Interface extending CodecsParsed to represent parsed HLS level information. Contains attributes like bitrate, dimensions, URL, and optional supplemental codec information for HLS playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelParsed extends CodecsParsed {\n    // (undocumented)\n    attrs: LevelAttributes;\n    // (undocumented)\n    bitrate: number;\n    // (undocumented)\n    details?: LevelDetails;\n    // (undocumented)\n    height?: number;\n    // (undocumented)\n    id?: number;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    supplemental?: CodecsParsed;\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elementary Streams Record Type in TypeScript\nDESCRIPTION: Type definition that maps elementary stream types to their corresponding stream info, allowing for null values when streams aren't present.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementaryStreams = Record<ElementaryStreamTypes, ElementaryStreamInfo | null>;\n```\n\n----------------------------------------\n\nTITLE: Defining CaptionScreen Class for Closed Captions in TypeScript\nDESCRIPTION: The CaptionScreen class handles operations for manipulating closed caption text, including character insertion, cursor movement, and text formatting. It provides methods for managing caption display, cursor position, and text styling.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CaptionScreen {\n    constructor(logger: CaptionsLogger);\n    // (undocumented)\n    backSpace(): void;\n    // (undocumented)\n    clearToEndOfRow(): void;\n    // (undocumented)\n    copy(other: CaptionScreen): void;\n    // (undocumented)\n    currRow: number;\n    // (undocumented)\n    equals(other: CaptionScreen): boolean;\n    getDisplayText(asOneRow?: boolean): string;\n    // (undocumented)\n    getTextAndFormat(): Row[];\n    insertChar(char: number): void;\n    // (undocumented)\n    isEmpty(): boolean;\n    // (undocumented)\n    lastOutputScreen: CaptionScreen | null;\n    // Warning: (ae-forgotten-export) The symbol \"CaptionsLogger\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    logger: CaptionsLogger;\n    // (undocumented)\n    moveCursor(relPos: number): void;\n    // (undocumented)\n    nrRollUpRows: number | null;\n    // (undocumented)\n    reset(): void;\n    // (undocumented)\n    rollUp(): void;\n    // Warning: (ae-forgotten-export) The symbol \"Row\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    rows: Row[];\n    setBkgData(bkgData: Partial<PenStyles>): void;\n    // (undocumented)\n    setCursor(absPos: number): void;\n    // Warning: (ae-forgotten-export) The symbol \"PACData\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    setPAC(pacData: PACData): void;\n    // Warning: (ae-forgotten-export) The symbol \"PenStyles\" needs to be exported by the entry point hls.d.ts\n    //\n    // (undocumented)\n    setPen(styles: Partial<PenStyles>): void;\n    // (undocumented)\n    setRollUpRows(nrRows: number | null): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing License Response Callback in JavaScript\nDESCRIPTION: Shows how to set up a post-processor function for modifying the license response before passing it to the key-session in HLS.js. This function can handle different key systems and process the response accordingly.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  licenseResponseCallback: function (xhr, url, keyContext) {\n      const keySystem = keyContext.keySystem;\n      const response = xhr.response;\n      if (keyContext.keySystem === 'com.apple.fps') {\n        try {\n          const responseObject = JSON.parse(\n            new TextDecoder().decode(response).trim();\n          );\n          const keyResponse = responseObject['fairplay-streaming-response']['streaming-keys'][0];\n          return base64Decode(keyResponse.ckc);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      return response;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialEventWithAssetList Interface in TypeScript\nDESCRIPTION: An interface extending InterstitialEvent with a required assetListUrl property. This represents an interstitial event that includes a URL for loading its asset list.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialEventWithAssetList extends InterstitialEvent {\n    // (undocumented)\n    assetListUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelPTSUpdatedData Interface in TypeScript\nDESCRIPTION: Interface for data related to PTS (Presentation Time Stamp) updates in HLS levels. Contains information about timestamp drift, fragment details, and level information for synchronization.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelPTSUpdatedData {\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    drift: number;\n    // (undocumented)\n    end: number;\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    level: Level;\n    // (undocumented)\n    start: number;\n    // (undocumented)\n    type: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaPlaylistType Type in TypeScript\nDESCRIPTION: Type representing different playlist types in HLS, combining main playlist types and subtitle playlist types.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaPlaylistType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type MediaPlaylistType = MainPlaylistType | SubtitlePlaylistType;\n```\n\n----------------------------------------\n\nTITLE: Defining MediaFragment Interface in TypeScript\nDESCRIPTION: Interface extending the base Fragment interface with media-specific properties including a reference and sequence number.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaFragment\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface MediaFragment extends Fragment {\n    // (undocumented)\n    ref: MediaFragmentRef;\n    // (undocumented)\n    sn: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Action Flags Enum in TypeScript\nDESCRIPTION: Enum definition for flags that control error recovery actions in hls.js, such as switching to different content variants based on HDCP, host compatibility, or downgrading to SDR.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum ErrorActionFlags {\n    // (undocumented)\n    MoveAllAlternatesMatchingHDCP = 2,\n    // (undocumented)\n    MoveAllAlternatesMatchingHost = 1,\n    // (undocumented)\n    None = 0,\n    // (undocumented)\n    SwitchToSDR = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsBufferedToBoundaryData Interface in TypeScript\nDESCRIPTION: Interface for data related to buffering boundaries for interstitials. It tracks buffering and playing indices, interstitial events, and schedule items.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialsBufferedToBoundaryData {\n    // (undocumented)\n    bufferingIndex: number;\n    // (undocumented)\n    events: InterstitialEvent[];\n    // (undocumented)\n    playingIndex: number;\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialAssetPlayerCreatedData Interface in TypeScript\nDESCRIPTION: Describes the structure of data emitted when an interstitial asset player is created, including asset details, event information, and the player instance.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterstitialAssetPlayerCreatedData {\n  asset: InterstitialAssetItem;\n  assetListIndex: number;\n  assetListResponse?: AssetListJSON;\n  event: InterstitialEvent;\n  player: HlsAssetPlayer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistLevelType Enum in TypeScript\nDESCRIPTION: This enum specifies the different types of playlist levels in HLS streaming, including audio, main, and subtitle.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_162\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const enum PlaylistLevelType {\n    AUDIO = \"audio\",\n    MAIN = \"main\",\n    SUBTITLE = \"subtitle\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MP4RemuxerConfig Type in TypeScript\nDESCRIPTION: Configuration options for MP4 remuxing with settings for handling short video tracks and audio frame drift.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MP4RemuxerConfig\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type MP4RemuxerConfig = {\n    stretchShortVideoTrack: boolean;\n    maxAudioFramesDrift: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleSelectionOption Type in TypeScript for HLS.js\nDESCRIPTION: Defines the options for subtitle selection, including language, characteristics, and forced/default statuses. This type represents the metadata associated with a subtitle track that can be used for selection and display.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SubtitleSelectionOption = {\n    id?: number;\n    lang?: string;\n    assocLang?: string;\n    characteristics?: string;\n    name?: string;\n    groupId?: string;\n    default?: boolean;\n    forced?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialAssetStartedData Interface in TypeScript\nDESCRIPTION: Interface defining data related to when an interstitial asset starts playing. It includes information about the asset, its position in the list, the event, player, schedule, and schedule index.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialAssetStartedData {\n    // (undocumented)\n    asset: InterstitialAssetItem;\n    // (undocumented)\n    assetListIndex: number;\n    // (undocumented)\n    event: InterstitialEvent;\n    // (undocumented)\n    player: HlsAssetPlayer;\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n    // (undocumented)\n    scheduleIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseTrack Interface in TypeScript for HLS.js\nDESCRIPTION: This interface represents the basic structure of a media track in HLS, including properties for codec, container, and metadata information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface BaseTrack {\n    // (undocumented)\n    codec?: string;\n    // (undocumented)\n    container: string;\n    // (undocumented)\n    id: 'audio' | 'main';\n    // (undocumented)\n    levelCodec?: string;\n    // (undocumented)\n    metadata?: {\n        channelCount?: number;\n        width?: number;\n        height?: number;\n    };\n    // (undocumented)\n    pendingCodec?: string;\n    // (undocumented)\n    supplemental?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video Range and Selection Types in TypeScript\nDESCRIPTION: Type definitions for video range values and selection options including HDR preferences and codec settings.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_183\n\nLANGUAGE: typescript\nCODE:\n```\nexport const VideoRangeValues: readonly [\"SDR\", \"PQ\", \"HLG\"];\n\nexport type VideoSelectionOption = {\n    preferHDR?: boolean;\n    allowedVideoRanges?: Array<VideoRange>;\n    videoCodec?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MediaDetachingData Interface in TypeScript\nDESCRIPTION: This interface defines data associated with media detaching operations, with an optional property for transferring media sources.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface MediaDetachingData {\n    // (undocumented)\n    transferMedia?: AttachMediaSourceData | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleFragProcessedData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the data structure for processing subtitle fragments. This interface provides information about the processed fragment, including success status and any errors that occurred during processing.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubtitleFragProcessedData {\n    // (undocumented)\n    error?: Error;\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    success: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset-related Types for Interstitial Media in TypeScript\nDESCRIPTION: Types for handling asset lists in JSON format for interstitial content, including loading and loaded data interfaces for asset lists in HLS streams.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AssetListJSON = {\n    ASSETS: Array<{\n        URI: string;\n        DURATION: string;\n    }>;\n};\n\nexport interface AssetListLoadedData {\n    // (undocumented)\n    assetListResponse: AssetListJSON;\n    // (undocumented)\n    event: InterstitialEventWithAssetList;\n    // (undocumented)\n    networkDetails: any;\n}\n\nexport interface AssetListLoadingData {\n    // (undocumented)\n    event: InterstitialEventWithAssetList;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Loading Interfaces in HLS.js\nDESCRIPTION: Interfaces related to encryption key loading in HLS.js. These define the data structures for key loading operations, including contexts, information, and loading data used during the key acquisition process.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyLoadedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    keyInfo: KeyLoaderInfo;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyLoaderContext extends LoaderContext {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    keyInfo: KeyLoaderInfo;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyLoaderInfo {\n    // (undocumented)\n    decryptdata: LevelKey;\n    // (undocumented)\n    keyLoadPromise: Promise<KeyLoadedData> | null;\n    // (undocumented)\n    loader: Loader<KeyLoaderContext> | null;\n    // (undocumented)\n    mediaKeySessionContext: MediaKeySessionContext | null;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyLoadingData {\n    // (undocumented)\n    frag: Fragment;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PathwayClone Type in TypeScript\nDESCRIPTION: Type for cloning content delivery pathways with base ID, clone ID, and URI replacement information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"PathwayClone\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type PathwayClone = {\n    'BASE-ID': string;\n    ID: string;\n    'URI-REPLACEMENT': UriReplacement;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MediaEndedData Interface in TypeScript\nDESCRIPTION: Interface for data related to media ended events, containing a boolean indicating if playback was stalled.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MediaEndedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface MediaEndedData {\n    // (undocumented)\n    stalled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleTrackLoadedData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for subtitle track loaded data, extending the TrackLoadedData interface. This interface is used to represent subtitle track data when a subtitle track has been loaded.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_170\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubtitleTrackLoadedData extends TrackLoadedData {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AudioTrackLoadedData Interface in TypeScript\nDESCRIPTION: Interface that extends TrackLoadedData for representing data when an audio track is loaded in HLS playback. It serves as an event data structure for the AUDIO_TRACK_LOADED event.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AudioTrackLoadedData extends TrackLoadedData {\n}\n```\n\n----------------------------------------\n\nTITLE: HLS Error and Logging Interfaces\nDESCRIPTION: Interface definitions for error handling actions and logging functionality in HLS.js.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IErrorAction = {\n    action: NetworkErrorAction;\n    flags: ErrorActionFlags;\n    retryCount?: number;\n    retryConfig?: RetryConfig;\n    hdcpLevel?: HdcpLevel;\n    nextAutoLevel?: number;\n    resolved?: boolean;\n};\n\nexport interface ILogFunction {\n    (message?: any, ...optionalParams: any[]): void;\n}\n\nexport interface ILogger {\n    debug: ILogFunction;\n    error: ILogFunction;\n    info: ILogFunction;\n    log: ILogFunction;\n    trace: ILogFunction;\n    warn: ILogFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaybackRestrictions Type in TypeScript\nDESCRIPTION: Type defining restrictions on playback behavior, with boolean flags for skip and jump operations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"PlaybackRestrictions\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type PlaybackRestrictions = {\n    skip: boolean;\n    jump: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleTrackUpdatedData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for data passed when a specific subtitle track is updated. This interface contains detailed information about a subtitle track that has been updated.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_173\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubtitleTrackUpdatedData {\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    groupId: string;\n    // (undocumented)\n    id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleTracksUpdatedData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for data passed when subtitle tracks are updated. This interface provides a list of available subtitle tracks when the subtitle track list is updated.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_171\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubtitleTracksUpdatedData {\n    // (undocumented)\n    subtitleTracks: MediaPlaylist[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TrackLoadedData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for data passed when a track is loaded. This interface contains details about the loaded track, including its ID, group, and delivery directives.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TrackLoadedData {\n    // (undocumented)\n    deliveryDirectives: HlsUrlParameters | null;\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    groupId: string;\n    // (undocumented)\n    id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Audio-related Types in TypeScript\nDESCRIPTION: Type definitions for audio playlists and selection options in HLS, including language and codec preferences, group identifiers, and channel information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AudioPlaylistType = 'AUDIO';\n\nexport type AudioSelectionOption = {\n    lang?: string;\n    assocLang?: string;\n    characteristics?: string;\n    channels?: string;\n    name?: string;\n    audioCodec?: string;\n    groupId?: string;\n    default?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NonNativeTextTracksData Interface in TypeScript\nDESCRIPTION: Interface containing an array of non-native text tracks for management by the player.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_153\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"NonNativeTextTracksData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface NonNativeTextTracksData {\n    // (undocumented)\n    tracks: Array<NonNativeTextTrack>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PartsLoadedData Interface in TypeScript\nDESCRIPTION: Interface for data related to loaded parts of a fragment, with references to the fragment and part objects.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"PartsLoadedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface PartsLoadedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    part: Part | null;\n    // (undocumented)\n    partsLoaded?: FragLoadedData[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentLoadProgressCallback Type in TypeScript for HLS.js\nDESCRIPTION: Type definition for the callback function used to track fragment loading progress. Accepts either FragLoadedData or PartsLoadedData as a parameter.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentLoadProgressCallback\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type FragmentLoadProgressCallback = (result: FragLoadedData | PartsLoadedData) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Track Loading Data Interface in TypeScript\nDESCRIPTION: Interface for handling track loading data including delivery directives, group ID, track ID and media playlist information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_180\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TrackLoadingData {\n    deliveryDirectives: HlsUrlParameters | null;\n    groupId: string;\n    id: number;\n    track: MediaPlaylist;\n    url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentLoaderConstructor Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for the constructor of a fragment loader. Defines that the constructor should accept an HLS configuration and return a Loader instance with FragmentLoaderContext.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentLoaderConstructor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragmentLoaderConstructor {\n    // (undocumented)\n    new (confg: HlsConfig): Loader<FragmentLoaderContext>;\n}\n```\n\n----------------------------------------\n\nTITLE: EWMA Bandwidth Estimator Class Definition\nDESCRIPTION: Class implementing exponentially weighted moving average bandwidth estimation for adaptive streaming.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EwmaBandWidthEstimator {\n    constructor(slow: number, fast: number, defaultEstimate: number, defaultTTFB?: number);\n    canEstimate(): boolean;\n    get defaultEstimate(): number;\n    destroy(): void;\n    getEstimate(): number;\n    getEstimateTTFB(): number;\n    sample(durationMs: number, numBytes: number): void;\n    sampleTTFB(ttfb: number): void;\n    update(slow: number, fast: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManifestLoadingData Interface in TypeScript\nDESCRIPTION: Defines a simple interface for manifest loading data, containing only a URL property.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ManifestLoadingData {\n    // (undocumented)\n    url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderOnAbort Type in TypeScript\nDESCRIPTION: Defines a type for a loader abort callback function. It takes loader stats, context, and network details as parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_117\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoaderOnAbort<T extends LoaderContext> = (stats: LoaderStats, context: T, networkDetails: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining FragChangedData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface that represents the data structure when a fragment changes during HLS playback. Contains a reference to the current Fragment object.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragChangedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragChangedData {\n    // (undocumented)\n    frag: Fragment;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoadError Class in TypeScript\nDESCRIPTION: Defines a custom error class for load failures, extending the built-in Error class and including a data property of type FragLoadFailResult.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class LoadError extends Error {\n    constructor(data: FragLoadFailResult);\n    // (undocumented)\n    readonly data: FragLoadFailResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XMLHttpRequest Setup in JavaScript for HLS.js\nDESCRIPTION: This code snippet demonstrates how to configure the xhrSetup option in HLS.js. It shows an example of setting the withCredentials property to true for all XMLHttpRequest instances used by the loader.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  xhrSetup: function (xhr, url) {\n    xhr.withCredentials = true; // do send cookies\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedTrack Interface in TypeScript\nDESCRIPTION: Interface extending the base track with an optional initialization segment for parsed media tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"ParsedTrack\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface ParsedTrack extends BaseTrack {\n    // (undocumented)\n    initSegment?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManifestParsedData Interface in TypeScript\nDESCRIPTION: Defines an interface for parsed manifest data, including information about audio, video, levels, and tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ManifestParsedData {\n    // (undocumented)\n    altAudio: boolean;\n    // (undocumented)\n    audio: boolean;\n    // (undocumented)\n    audioTracks: MediaPlaylist[];\n    // (undocumented)\n    firstLevel: number;\n    // (undocumented)\n    levels: Level[];\n    // (undocumented)\n    sessionData: Record<string, AttrList> | null;\n    // (undocumented)\n    sessionKeys: LevelKey[] | null;\n    // (undocumented)\n    stats: LoaderStats;\n    // (undocumented)\n    subtitleTracks: MediaPlaylist[];\n    // (undocumented)\n    video: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragParsedData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data after a fragment has been parsed. Contains the fragment reference and part information.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragParsedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragParsedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    part: Part | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Types for HLS.js Controllers\nDESCRIPTION: Configuration type definitions for the LatencyController and LevelController in HLS.js. These define the options available to control live streaming latency and level selection during playback.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LatencyControllerConfig = {\n    liveSyncDurationCount: number;\n    liveMaxLatencyDurationCount: number;\n    liveSyncDuration?: number;\n    liveMaxLatencyDuration?: number;\n    maxLiveSyncPlaybackRate: number;\n    liveSyncOnStallIncrease: number;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LevelControllerConfig = {\n    startLevel?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Fragment Lookup Example with Tolerance in HLS.js\nDESCRIPTION: Example data structure illustrating how maxFragLookUpTolerance affects fragment selection when buffered.end is near the boundary between fragments.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbuffered.end = 9.991\nfrag[0] : [0,10]\nfrag[1] : [10,20]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfrag[0] : [-0.2,9.8]\nfrag[1] : [9.8,19.8]\n```\n\n----------------------------------------\n\nTITLE: Defining LoadStats Class in TypeScript\nDESCRIPTION: Defines a class implementing the LoaderStats interface, providing concrete properties for loader statistics.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class LoadStats implements LoaderStats {\n    // (undocumented)\n    aborted: boolean;\n    // (undocumented)\n    buffering: HlsProgressivePerformanceTiming;\n    // (undocumented)\n    bwEstimate: number;\n    // (undocumented)\n    chunkCount: number;\n    // (undocumented)\n    loaded: number;\n    // (undocumented)\n    loading: HlsProgressivePerformanceTiming;\n    // (undocumented)\n    parsing: HlsPerformanceTiming;\n    // (undocumented)\n    retry: number;\n    // (undocumented)\n    total: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelSwitchedData Interface in TypeScript\nDESCRIPTION: Simple interface for level switch events in HLS playback. Contains just the level number indicating which quality level was switched to.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelSwitchedData {\n    // (undocumented)\n    level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragParsingInitSegmentData Interface in TypeScript for HLS.js\nDESCRIPTION: Empty interface for data related to the parsing of initialization segments. Used as an event data structure in the HLS.js event system.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragParsingInitSegmentData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragParsingInitSegmentData {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderOnError Type in TypeScript\nDESCRIPTION: Defines a type for a loader error callback function. It takes an error object, context, network details, and loader stats as parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_118\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoaderOnError<T extends LoaderContext> = (error: {\n    code: number;\n    text: string;\n}, context: T, networkDetails: any, stats: LoaderStats) => void;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Watched Position of Primary Content in JavaScript\nDESCRIPTION: Simple JavaScript example demonstrating how to get the last watched position in the primary content through the interstitialsManager's primary timeline property.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst primaryLastWatched = hls.interstitialsManager.primary.currentTime;\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderResponse Interface in TypeScript\nDESCRIPTION: Defines an interface for the loader response structure, including optional code, data, text, and a required URL.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LoaderResponse {\n    // (undocumented)\n    code?: number;\n    // (undocumented)\n    data?: string | ArrayBuffer | Object;\n    // (undocumented)\n    text?: string;\n    // (undocumented)\n    url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialEndedData Interface in TypeScript\nDESCRIPTION: Interface for data related to when an interstitial event ends. It contains references to the event, schedule, and the index in the schedule.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialEndedData {\n    // (undocumented)\n    event: InterstitialEvent;\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n    // (undocumented)\n    scheduleIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragLoadingData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data when a fragment is being loaded. Contains the fragment reference, optional part information, and the target buffer time.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragLoadingData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragLoadingData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    part?: Part;\n    // (undocumented)\n    targetBufferTime: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelUpdatedData Interface in TypeScript\nDESCRIPTION: Simple interface for level update events in HLS playback. Contains the level number and detailed information about the updated level.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelUpdatedData {\n    // (undocumented)\n    details: LevelDetails;\n    // (undocumented)\n    level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Time Remaining in Interstitial Break using JavaScript\nDESCRIPTION: JavaScript example showing how to determine the time remaining in the current interstitial break by accessing the interstitialPlayer object from the interstitialsManager.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst interstitialPlayer = hls.interstitialsManager.interstitialPlayer;\n// Is the interstitialPlayer playing an asset?\nif (interstitialPlayer && interstitialPlayer.playingIndex > -1) {\n  const timeRemaining = Math.ceil(\n    interstitialPlayer.duration - interstitialPlayer.currentTime,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderOnProgress Type in TypeScript\nDESCRIPTION: Defines a type for a loader progress callback function. It takes loader stats, context, data, and network details as parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_119\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoaderOnProgress<T extends LoaderContext> = (stats: LoaderStats, context: T, data: string | ArrayBuffer, networkDetails: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsPrimaryResumed Interface in TypeScript\nDESCRIPTION: Interface for data related to when primary content playback is resumed after interstitial content. Includes the schedule and schedule index.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialsPrimaryResumed {\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n    // (undocumented)\n    scheduleIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragLoadFailResult Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data when a fragment load has failed. Extends ErrorData and includes fragment reference, network details, part information, and response data if available.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragLoadFailResult\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragLoadFailResult extends ErrorData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    networkDetails: any;\n    // (undocumented)\n    part?: Part;\n    // (undocumented)\n    response?: {\n        data: any;\n        code: number;\n        text: string;\n        url: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NonNativeTextTrack Interface in TypeScript\nDESCRIPTION: Interface for text tracks not handled by the browser's native implementation, with properties for subtitles and closed captions.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_152\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"NonNativeTextTrack\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface NonNativeTextTrack {\n    // (undocumented)\n    closedCaptions?: MediaPlaylist;\n    // (undocumented)\n    default: boolean;\n    // (undocumented)\n    _id?: string;\n    // (undocumented)\n    kind: string;\n    // (undocumented)\n    label: any;\n    // (undocumented)\n    subtitleTrack?: MediaPlaylist;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Integrated Timeline Position and Ranges in JavaScript\nDESCRIPTION: JavaScript example showing how to access the current integrated timeline position and map the schedule items to create an array of timeline ranges with their start and end times.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentTime = hls.interstitialsManager.integrated.currentTime;\nconst timelineRanges = hls.interstitialsManager.schedule.map((item) => {\n  return {\n    interstitial: item.event,\n    start: item.integrated.start,\n    end: item.integrated.end,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialScheduleEventItem Type in TypeScript\nDESCRIPTION: Type representing a schedule item for an interstitial event. It includes the event reference, start/end times, and separate timing information for playout and integrated scenarios.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InterstitialScheduleEventItem = {\n    event: InterstitialEvent;\n    start: number;\n    end: number;\n    playout: {\n        start: number;\n        end: number;\n    };\n    integrated: {\n        start: number;\n        end: number;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Flight Fragment State in HLS.js\nDESCRIPTION: Example showing the object structure returned by hls.inFlightFragments getter method, which provides information about the current state and in-flight fragments for each streaming controller.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  main: {\n    frag: <Fragment Object>,\n    state: \"FRAG_LOADING\"\n  },\n  audio: {\n    frag: <Fragment Object>,\n    state: \"PARSED\"\n  },\n  subtitle: {\n    frag: null,\n    state: \"IDLE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragLoadEmergencyAbortedData Interface in TypeScript for HLS.js\nDESCRIPTION: Interface for data when a fragment load was aborted in an emergency. Contains the fragment reference, part information, and loader statistics.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragLoadEmergencyAbortedData\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface FragLoadEmergencyAbortedData {\n    // (undocumented)\n    frag: Fragment;\n    // (undocumented)\n    part: Part | null;\n    // (undocumented)\n    stats: LoaderStats;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataSample Interface in TypeScript\nDESCRIPTION: Interface for metadata samples with properties for binary data, timing information, and metadata type.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"MetadataSample\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface MetadataSample {\n    // (undocumented)\n    data: Uint8Array;\n    // (undocumented)\n    dts: number;\n    // (undocumented)\n    duration: number;\n    // (undocumented)\n    len?: number;\n    // (undocumented)\n    pts: number;\n    // (undocumented)\n    type: MetadataSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsBufferedToBoundaryData Interface in TypeScript\nDESCRIPTION: Specifies the structure of data emitted with the INTERSTITIALS_BUFFERED_TO_BOUNDARY event, including events, schedule, and buffering/playing indices.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterstitialsBufferedToBoundaryData {\n  events: InterstitialEvent[];\n  schedule: InterstitialScheduleItem[];\n  bufferingIndex: number;\n  playingIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialScheduleDurations Type in TypeScript\nDESCRIPTION: Type definition for tracking different duration categories in an interstitial schedule. Includes primary content duration, playout duration, and integrated duration.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InterstitialScheduleDurations = {\n    primary: number;\n    playout: number;\n    integrated: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BufferInfo Type in TypeScript for HLS.js\nDESCRIPTION: This type represents information about the current buffer state, including length, start and end times, and buffered ranges.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type BufferInfo = {\n    len: number;\n    start: number;\n    end: number;\n    nextStart?: number;\n    buffered?: BufferTimeRange[];\n    bufferedIndex: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitleTrackSwitchData Interface in TypeScript for HLS.js\nDESCRIPTION: Defines the interface for data passed when switching subtitle tracks. This interface contains information about the target subtitle track when a track switch is requested.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubtitleTrackSwitchData {\n    // (undocumented)\n    groupId?: string;\n    // (undocumented)\n    id: number;\n    // (undocumented)\n    name?: string;\n    // (undocumented)\n    type?: MediaPlaylistType | 'main';\n    // (undocumented)\n    url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialStartedData Interface in TypeScript\nDESCRIPTION: Interface for data related to when an interstitial event starts. Contains references to the event, schedule, and the index in the schedule.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialStartedData {\n    // (undocumented)\n    event: InterstitialEvent;\n    // (undocumented)\n    schedule: InterstitialScheduleItem[];\n    // (undocumented)\n    scheduleIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialAssetErrorData Type in TypeScript\nDESCRIPTION: Describes the structure of data emitted when an error occurs during interstitial asset playback, combining asset and event information with error details.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype InterstitialAssetErrorData = {\n  asset: InterstitialAssetItem | null;\n  assetListIndex: number;\n  event: InterstitialEvent | null;\n  schedule: InterstitialScheduleItem[] | null;\n  scheduleIndex: number;\n  player: HlsAssetPlayer | null;\n} & ErrorData;\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialAssetPlayerCreatedData Interface in TypeScript\nDESCRIPTION: Interface defining the data structure for when an interstitial asset player is created. It includes references to the asset item, its index in the asset list, optional asset list response data, the interstitial event, and the HLS asset player instance.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialAssetPlayerCreatedData {\n    // (undocumented)\n    asset: InterstitialAssetItem;\n    // (undocumented)\n    assetListIndex: number;\n    // (undocumented)\n    assetListResponse?: AssetListJSON;\n    // (undocumented)\n    event: InterstitialEvent;\n    // (undocumented)\n    player: HlsAssetPlayer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediaAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for media attributes, extending AttrList with specific properties for media configuration.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_135\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MediaAttributes extends AttrList {\n    // (undocumented)\n    'ASSOC-LANGUAGE'?: string;\n    // (undocumented)\n    'GROUP-ID': string;\n    // (undocumented)\n    'INSTREAM-ID'?: string;\n    // (undocumented)\n    'PATHWAY-ID'?: string;\n    // (undocumented)\n    'STABLE-RENDITION-ID'?: string;\n    // (undocumented)\n    AUTOSELECT?: 'YES' | 'NO';\n    // (undocumented)\n    CHANNELS?: string;\n    // (undocumented)\n    CHARACTERISTICS?: string;\n    // (undocumented)\n    DEFAULT?: 'YES' | 'NO';\n    // (undocumented)\n    FORCED?: 'YES' | 'NO';\n    // (undocumented)\n    LANGUAGE?: string;\n    // (undocumented)\n    NAME: string;\n    // (undocumented)\n    TYPE?: 'AUDIO' | 'VIDEO' | 'SUBTITLES' | 'CLOSED-CAPTIONS';\n    // (undocumented)\n    URI?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubtitlePlaylistType Type in TypeScript for HLS.js\nDESCRIPTION: Defines the possible types of subtitle playlists in HLS, with options for regular subtitles and closed captions. This type is used to differentiate between different kinds of subtitle content.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SubtitlePlaylistType = 'SUBTITLES' | 'CLOSED-CAPTIONS';\n```\n\n----------------------------------------\n\nTITLE: Executing hls.js release workflow with git commands\nDESCRIPTION: Basic git commands needed to create and push a release tag to trigger the automated release workflow. After tagging the release, pushing the commit and tag will start the GitHub action that builds and publishes the release.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/release-process.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v<major>.<minor>.<patch>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v<major>.<minor>.<patch>-<prerelease>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tag\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Code Formatting for HLS.js\nDESCRIPTION: Commands for code quality assurance in the HLS.js project. Includes options for linting with ESlint in various modes and formatting code with Prettier.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:fix\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:quiet\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prettier\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialAssetStartedData and InterstitialAssetEndedData Interfaces in TypeScript\nDESCRIPTION: Specifies the structure of data emitted when an interstitial asset starts or ends playback, including asset details, event information, and player instance.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InterstitialAssetStartedData {\n  asset: InterstitialAssetItem;\n  assetListIndex: number;\n  event: InterstitialEvent;\n  schedule: InterstitialScheduleItem[];\n  scheduleIndex: number;\n  player: HlsAssetPlayer;\n}\n\ninterface InterstitialAssetEndedData {\n  asset: InterstitialAssetItem;\n  assetListIndex: number;\n  event: InterstitialEvent;\n  schedule: InterstitialScheduleItem[];\n  scheduleIndex: number;\n  player: HlsAssetPlayer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decrypter AES Mode Enum in TypeScript\nDESCRIPTION: Enum definition for AES decryption modes used in hls.js for content decryption. Supports CBC (Cipher Block Chaining) and CTR (Counter) modes.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum DecrypterAesMode {\n    // (undocumented)\n    cbc = 0,\n    // (undocumented)\n    ctr = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderContext Interface in TypeScript\nDESCRIPTION: Interface for loader context in HLS.js. This is a partial interface definition showing the beginning of the LoaderContext interface that would contain context information for loading operations.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoaderContext {\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderOnTimeout Type in TypeScript\nDESCRIPTION: Defines a type for a loader timeout callback function. It takes loader stats, context, and network details as parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoaderOnTimeout<T extends LoaderContext> = (stats: LoaderStats, context: T, networkDetails: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveBackBufferData Interface in TypeScript\nDESCRIPTION: Deprecated interface extending BackBufferData for live streaming back buffer events. Used to represent buffer management events in live HLS streams.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveBackBufferData extends BackBufferData {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragParsingUserdataData Interface in TypeScript\nDESCRIPTION: This interface defines the structure for fragment parsing userdata, including details, fragment information, ID, and samples.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FragParsingUserdataData {\n    details: LevelDetails;\n    frag: Fragment;\n    id: string;\n    samples: UserdataSample[];\n}\n```\n\n----------------------------------------\n\nTITLE: HLS.js Media Element Transfer Function Example\nDESCRIPTION: This code snippet demonstrates the MediaAttachingData object structure returned from the transferMedia() method, which can be used to transfer HLS playback from one media element to another.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  mediaEl: <media element>,\n  isLive: <live-streaming flag>,\n  currentTime: <current time of media>,\n  duration: <duration of media>,\n  ended: <is playback ended flag>,\n  lastSeekTime: <last seek time>,\n  buffered: <buffered ranges>,\n  currentLevel: <current quality level>,\n  maxLatency: <max latency in live streaming>,\n  targetLatency: <target latency in live streaming>,\n  minAutoLevel: <lowest auto selection level>\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handler Method Declarations in TypeScript HLS.js\nDESCRIPTION: Method declarations for event handling within the HLS.js library. These methods allow subscribing to events with context specification either once or for continuous listening.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\non<E extends keyof HlsListeners, Context = undefined>(event: E, listener: HlsListeners[E], context?: Context): void;\n// (undocumented)\nonce<E extends keyof HlsListeners, Context = undefined>(event: E, listener: HlsListeners[E], context?: Context): void;\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistContextType Enum in TypeScript\nDESCRIPTION: This enum defines the different types of playlist contexts in HLS streaming, including audio tracks, levels, manifests, and subtitle tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_161\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const enum PlaylistContextType {\n    AUDIO_TRACK = \"audioTrack\",\n    LEVEL = \"level\",\n    MANIFEST = \"manifest\",\n    SUBTITLE_TRACK = \"subtitleTrack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentLoaderConfig Type in TypeScript for HLS.js\nDESCRIPTION: Deprecated type defining configuration options for the fragment loader. Includes timeout settings, retry count, retry delay, and maximum retry timeout.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"FragmentLoaderConfig\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public @deprecated (undocumented)\nexport type FragmentLoaderConfig = {\n    fragLoadingTimeOut: number;\n    fragLoadingMaxRetry: number;\n    fragLoadingRetryDelay: number;\n    fragLoadingMaxRetryTimeout: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking HLS.js Support in JavaScript\nDESCRIPTION: Shows how to check if the browser supports HLS.js using the Hls.isSupported() method.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n<script>\n  if (Hls.isSupported()) {\n    console.log('Hello HLS.js!');\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Loader for HLS.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom loader for HLS.js using the internal loader definition. It extends the default loader functionality to log when a manifest is being loaded.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nlet myHls = new Hls({\n  pLoader: function (config) {\n    let loader = new Hls.DefaultConfig.loader(config);\n\n    Object.defineProperties(this, {\n      stats: {\n        get: () => loader.stats,\n      },\n      context: {\n        get: () => loader.context,\n      },\n    });\n\n    this.abort = () => loader.abort();\n    this.destroy = () => loader.destroy();\n    this.load = (context, config, callbacks) => {\n      let { type, url } = context;\n\n      if (type === 'manifest') {\n        console.log(`Manifest ${url} will be loaded.`);\n      }\n\n      loader.load(context, config, callbacks);\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Class in TypeScript\nDESCRIPTION: Defines a Logger class implementing the ILogger interface, providing methods for different log levels.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Logger implements ILogger {\n    constructor(label: string, logger: ILogger);\n    // (undocumented)\n    debug: ILogFunction;\n    // (undocumented)\n    error: ILogFunction;\n    // (undocumented)\n    info: ILogFunction;\n    // (undocumented)\n    log: ILogFunction;\n    // (undocumented)\n    trace: ILogFunction;\n    // (undocumented)\n    warn: ILogFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LevelsUpdatedData Interface in TypeScript\nDESCRIPTION: Simple interface for handling updates to the collection of available HLS levels. Contains an array of Level objects representing all available quality levels.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LevelsUpdatedData {\n    // (undocumented)\n    levels: Array<Level>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking MSE Support with Specific Codec in JavaScript\nDESCRIPTION: Demonstrates how to check for Media Source Extensions support with a specific codec using Hls.isMSESupported() and isTypeSupported().\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (\n  Hls.isMSESupported() &&\n  Hls.getMediaSource().isTypeSupported('video/mp4;codecs=\"av01.0.01M.08\"')\n) {\n  console.log('Hello AV1 playback! AVC who?');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Playlist Loader in JavaScript for HLS.js\nDESCRIPTION: This code snippet demonstrates how to define a custom playlist loader function for HLS.js. It enables manipulation of the playlist loading process, overwriting the default loader.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar customPlaylistLoader = function () {\n  // See `loader` for details.\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MediaAttachedData Interface in TypeScript\nDESCRIPTION: Defines an interface for data related to media attachment, including the media element and optional media source.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_133\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MediaAttachedData {\n    // (undocumented)\n    media: HTMLMediaElement;\n    // (undocumented)\n    mediaSource?: MediaSource;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialsUpdatedData Interface in TypeScript\nDESCRIPTION: Interface for data related to when interstitials are updated. The interface is shown as empty in this snippet.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InterstitialsUpdatedData {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in HLS.js\nDESCRIPTION: Example showing how to enable debug logs or provide a custom logger in HLS.js configuration.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.debug = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.debug = customLogger;\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Path for hls.js 1.4+ ESM Version\nDESCRIPTION: When using the ESM version of hls.js 1.4+, you must specify the workerPath config option pointing to the hls.worker.js file included in the package to enable web workers.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/MIGRATING.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nworkerPath: \"path/to/dist/hls.worker.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining MediaAttachingData Interface in TypeScript\nDESCRIPTION: Defines an interface for data related to media attaching process, including media element, source, overrides, and tracks.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_134\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MediaAttachingData {\n    // (undocumented)\n    media: HTMLMediaElement;\n    // (undocumented)\n    mediaSource?: MediaSource | null;\n    // (undocumented)\n    overrides?: MediaOverrides;\n    // (undocumented)\n    tracks?: SourceBufferTrackSet;\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Check for HLS.js\nDESCRIPTION: Command to verify TypeScript types in the HLS.js project using npm.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run type-check\n```\n\n----------------------------------------\n\nTITLE: Playhead Nudging Calculation in HLS.js\nDESCRIPTION: Formula showing how HLS.js calculates the nudge amount to apply to media.currentTime when playback stalls.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmedia.currentTime += <number of nudge retries> * nudgeOffset\n```\n\n----------------------------------------\n\nTITLE: Setting up HLS.js Development Environment with Git and npm\nDESCRIPTION: Shell commands to clone the HLS.js repository, install dependencies, and run the development server. This setup allows developers to contribute to the project or customize the library for their own needs.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/video-dev/hls.js.git\ncd hls.js\n# After cloning or pulling from the repository, make sure all dependencies are up-to-date\nnpm install ci\n# Run dev-server for demo page (recompiles on file-watch, but doesn't write to actual dist fs artifacts)\nnpm run dev\n# After making changes run the sanity-check task to verify all checks before committing changes\nnpm run sanity-check\n```\n\n----------------------------------------\n\nTITLE: HLS Performance Timing Interfaces\nDESCRIPTION: Interfaces defining timing measurement structures for HLS performance monitoring, including basic and progressive timing data points.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HlsPerformanceTiming {\n    end: number;\n    start: number;\n}\n\nexport interface HlsProgressivePerformanceTiming extends HlsPerformanceTiming {\n    first: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests for HLS.js\nDESCRIPTION: Command to execute functional (integration) tests for the HLS.js project using npm.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:func\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for HLS.js\nDESCRIPTION: Command to execute all automated tests for the HLS.js project using npm.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for HLS.js\nDESCRIPTION: Command to run only the unit tests for the HLS.js project using npm.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Defining HdcpLevel and HdcpLevels in TypeScript\nDESCRIPTION: These types define HDCP (High-bandwidth Digital Content Protection) levels for content protection.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type HdcpLevel = (typeof HdcpLevels)[number];\n\nexport const HdcpLevels: readonly [\"NONE\", \"TYPE-0\", \"TYPE-1\", null];\n```\n\n----------------------------------------\n\nTITLE: Installing HLS.js as a Project Dependency\nDESCRIPTION: npm command to install HLS.js as a dependency in a project.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save hls.js\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Watch Mode for HLS.js\nDESCRIPTION: Command to run unit tests in watch mode for continuous testing during development of HLS.js.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:unit:watch\n```\n\n----------------------------------------\n\nTITLE: Creating version tags for hls.js releases\nDESCRIPTION: Examples of git commands for tagging releases with different version patterns. The format determines whether it will be published as a regular release with the 'latest' npm tag or a pre-release version with a custom tag.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/release-process.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.2.3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.2.3-beta\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.2.3-beta.1\n```\n\n----------------------------------------\n\nTITLE: Defining MediaDetachedData Interface in TypeScript\nDESCRIPTION: Defines an interface for data related to media detachment, including an optional transfer media property.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_137\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MediaDetachedData {\n    // (undocumented)\n    transferMedia?: AttachMediaSourceData | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HLS.js Canary Version\nDESCRIPTION: npm command to install the latest development version (canary channel) of HLS.js.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install hls.js@canary\n```\n\n----------------------------------------\n\nTITLE: Including HLS.js in HTML\nDESCRIPTION: Demonstrates how to include the HLS.js library in an HTML file using a CDN link.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/docs/API.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/hls.js@1\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining TimelineOccupancy Enum in TypeScript for HLS.js\nDESCRIPTION: Defines an enumeration for timeline occupancy types, specifying whether an element occupies a single point or a range in time. This enum is used to categorize timeline elements for proper rendering and management.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TimelineOccupancy {\n    // (undocumented)\n    Point = 0,\n    // (undocumented)\n    Range = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AbrComponentAPI Interface in TypeScript\nDESCRIPTION: Interface that extends ComponentAPI for adaptive bitrate streaming components. It includes properties for bandwidth estimation, automatic level selection, and methods for resetting estimators.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AbrComponentAPI extends ComponentAPI {\n    // (undocumented)\n    readonly bwEstimator?: EwmaBandWidthEstimator;\n    // (undocumented)\n    firstAutoLevel: number;\n    // (undocumented)\n    forcedAutoLevel: number;\n    // (undocumented)\n    nextAutoLevel: number;\n    // (undocumented)\n    resetEstimator(abrEwmaDefaultEstimate: number): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InterstitialId Type in TypeScript\nDESCRIPTION: A type alias for InterstitialId which is simply a string. Used for identifying interstitial events or segments.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InterstitialId = string;\n```\n\n----------------------------------------\n\nTITLE: Defining Elementary Stream Types Enum in TypeScript\nDESCRIPTION: Enum defining the types of elementary streams supported in HLS implementation: audio, video, and combined audio-video streams.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum ElementaryStreamTypes {\n    // (undocumented)\n    AUDIO = \"audio\",\n    // (undocumented)\n    AUDIOVIDEO = \"audiovideo\",\n    // (undocumented)\n    VIDEO = \"video\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MaxAutoLevelUpdatedData Interface in TypeScript\nDESCRIPTION: Defines an interface for data related to maximum auto level updates, including capping and HDCP levels.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MaxAutoLevelUpdatedData {\n    // (undocumented)\n    autoLevelCapping: number;\n    // (undocumented)\n    levels: Level[] | null;\n    // (undocumented)\n    maxAutoLevel: number;\n    // (undocumented)\n    maxHdcpLevel: HdcpLevel;\n    // (undocumented)\n    minAutoLevel: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GapControllerConfig Type in TypeScript\nDESCRIPTION: This type defines the configuration for the gap controller, including detection settings, watchdog period, and nudge parameters.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type GapControllerConfig = {\n    detectStallWithCurrentTimeMs: number;\n    highBufferWatchdogPeriod: number;\n    nudgeOffset: number;\n    nudgeMaxRetry: number;\n    nudgeOnVideoHole: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MainPlaylistType in TypeScript\nDESCRIPTION: Defines a type for main playlist types, including audio playlist types and 'VIDEO'.\nSOURCE: https://github.com/video-dev/hls.js/blob/master/api-extractor/report/hls.js.api.md#2025-04-22_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MainPlaylistType = AudioPlaylistType | 'VIDEO';\n```"
  }
]