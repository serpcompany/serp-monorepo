[
  {
    "owner": "shuding",
    "repo": "nextra",
    "content": "TITLE: Creating Nextra Theme Configuration\nDESCRIPTION: Theme configuration file for Nextra that customizes the appearance and behavior of the documentation site, including navigation, dark mode, footer, and metadata settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/get-started.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  project: {\n    link: 'https://github.com/shuding/nextra' // GitHub link in the navbar\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/master', // base URL for the docs repository\n  getNextSeoProps: () => ({ titleTemplate: '%s – Nextra' }),\n  navigation: true,\n  darkMode: true,\n  footer: {\n    text: `MIT ${new Date().getFullYear()} © Shu Ding.`\n  },\n  editLink: {\n    text: 'Edit this page on GitHub'\n  },\n  logo: (\n    <>\n      <svg>...</svg>\n      <span>Next.js Static Site Generator</span>\n    </>\n  ),\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"og:title\" content=\"Nextra: the next docs builder\" />\n    </>\n  ),\n  primaryHue: {\n    dark: 204,\n    light: 212\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra\nDESCRIPTION: Next.js configuration file that sets up Nextra with the blog theme and points to the theme configuration file. This is required to integrate Nextra with Next.js.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/get-started.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  theme: 'nextra-theme-blog',\n  themeConfig: './theme.config.js'\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Usage for Data Fetching in JavaScript\nDESCRIPTION: Demonstrates the fundamental API of SWR for data fetching. The `useSWR` hook is used with a key and a fetcher function to retrieve data asynchronously.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/data-fetching.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = useSWR(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data with Global Mutate in SWR (React)\nDESCRIPTION: Example showing how to broadcast a revalidation message globally using the mutate function from useSWRConfig(). This demonstrates logging out a user by clearing a cookie and triggering revalidation of user data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction App() {\n  const { mutate } = useSWRConfig()\n\n  return (\n    <div>\n      <Profile />\n      <button\n        onClick={() => {\n          // set the cookie as expired\n          document.cookie =\n            'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;'\n\n          // tell all SWRs with this key to revalidate\n          mutate('/api/user')\n        }}\n      >\n        Logout\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SWR Data Fetching in React Components\nDESCRIPTION: A JSX example of refactored components using SWR for data fetching with the useUser hook, demonstrating component independence and deduplication of requests.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// page component\nfunction Page() {\n  return (\n    <div>\n      <Navbar />\n      <Content />\n    </div>\n  )\n}\n\n// child components\nfunction Navbar() {\n  return (\n    <div>\n      ...\n      <Avatar />\n    </div>\n  )\n}\n\nfunction Content() {\n  const { user, isLoading } = useUser()\n  if (isLoading) return <Spinner />\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar() {\n  const { user, isLoading } = useUser()\n  if (isLoading) return <Spinner />\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout in Next.js with Nextra\nDESCRIPTION: Root layout configuration for a Nextra docs site using Next.js App Router. Includes setup for metadata, banner, navbar, footer, and layout components with proper HTML structure and SEO settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/start/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Footer, Layout, Navbar } from 'nextra-theme-docs'\nimport { Banner, Head } from 'nextra/components'\nimport { getPageMap } from 'nextra/page-map'\nimport 'nextra-theme-docs/style.css'\n\nexport const metadata = {\n  // Define your metadata here\n  // For more information on metadata API, see: https://nextjs.org/docs/app/building-your-application/optimizing/metadata\n}\n\nconst banner = <Banner storageKey=\"some-key\">Nextra 4.0 is released 🎉</Banner>\nconst navbar = (\n  <Navbar\n    logo={<b>Nextra</b>}\n    // ... Your additional navbar options\n  />\n)\nconst footer = <Footer>MIT {new Date().getFullYear()} © Nextra.</Footer>\n\nexport default async function RootLayout({ children }) {\n  return (\n    <html\n      // Not required, but good for SEO\n      lang=\"en\"\n      // Required to be set\n      dir=\"ltr\"\n      // Suggested by `next-themes` package https://github.com/pacocoursey/next-themes#with-app\n      suppressHydrationWarning\n    >\n      <Head\n      // ... Your additional head options\n      >\n        {/* Your additional tags should be passed as `children` of `<Head>` element */}\n      </Head>\n      <body>\n        <Layout\n          banner={banner}\n          navbar={navbar}\n          pageMap={await getPageMap()}\n          docsRepositoryBase=\"https://github.com/shuding/nextra/tree/main/docs\"\n          footer={footer}\n          // ... Your additional layout options\n        >\n          {children}\n        </Layout>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Component Implementation in MDX\nDESCRIPTION: Shows how to implement the Steps component by wrapping markdown headings (h2-h6) with the Steps component to create visual steps. Includes importing the component and basic usage example.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/steps/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Steps } from 'nextra/components'\n\n## Getting Started\n\nHere is some description.\n\n<Steps>\n### Step 1\n\nContents for step 1.\n\n### Step 2\n\nContents for step 2.\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: React Component with SWR for Data Fetching\nDESCRIPTION: This React component uses the SWR library for data fetching, demonstrating conditional rendering based on loading and error states. It also showcases syntax highlighting with line emphasis.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/mdx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation from Site Page Map in Nextra Theme Layout\nDESCRIPTION: This code snippet shows how to use the pageMap property from NextraThemeLayoutProps to generate a simple navigation list of all top-level pages in a Nextra site. It demonstrates how to filter and render different types of items in the page map.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/old.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport type { NextraThemeLayoutProps } from 'nextra'\n\nexport default function Layout({ children, pageOpts }: NextraThemeLayoutProps) {\n  const { pageMap } = pageOpts\n\n  return (\n    <div>\n      <h1>My Theme</h1>\n      {pageMap.map(item => {\n        if ('route' in item && !('children' in item)) {\n          return (\n            <Link key={item.name} href={item.route}>\n              {item.route}\n            </Link>\n          )\n        }\n      })}\n      <div style={{ border: '1px solid' }}>{children}</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra Dependencies with npm\nDESCRIPTION: Command to install the core dependencies needed for a Nextra project including React, React DOM, Next.js, and Nextra.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/get-started.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react react-dom next nextra\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra Integration\nDESCRIPTION: This snippet demonstrates how to create a Next.js configuration file (next.config.mjs) that integrates Nextra. It shows how to import and use the Nextra plugin while allowing for additional Next.js configuration options.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/components/install-nextra-theme.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  // ... Other Nextra config options\n})\n\n// You can include other Next.js configuration options here, in addition to Nextra settings:\nexport default withNextra({\n  // ... Other Next.js config options\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Nextra Theme Configuration Example with TypeScript\nDESCRIPTION: A comprehensive example showing a complete configuration for a Nextra theme. This demonstrates how multiple options work together to customize the appearance and behavior of the documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  banner: {\n    key: 'banner',\n    text: <a href=\"/docs/blog/2023-announcing\">🎉 Nextra 2 is released. Read announcement →</a>\n  },\n  chat: {\n    link: 'https://discord.com/invite/hEM84NMkRv'\n  },\n  darkMode: true,\n  direction: 'ltr',\n  docsRepositoryBase: 'https://github.com/shuding/nextra/tree/main/docs',\n  editLink: {\n    text: 'Edit this page on GitHub'\n  },\n  feedback: {\n    content: 'Question? Give us feedback →',\n    labels: 'feedback'\n  },\n  footer: {\n    text: <span>MIT {new Date().getFullYear()} © Nextra.</span>\n  },\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"og:title\" content=\"Nextra: the next docs builder\" />\n    </>\n  ),\n  i18n: [\n    { locale: 'en', text: 'English' },\n    { locale: 'zh', text: '中文' }\n  ],\n  logo: <span>My Project</span>,\n  navigation: {\n    prev: true,\n    next: true\n  },\n  primaryHue: 120,\n  primarySaturation: 50,\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  search: {\n    placeholder: 'Search documentation...'\n  },\n  sidebar: {\n    toggleButton: true,\n    defaultMenuCollapseLevel: 1\n  },\n  toc: {\n    title: \"On This Page\",\n    float: true\n  },\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – My Project'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Component Example in Nextra\nDESCRIPTION: Example implementation of a styled table using Nextra's Table component showing country and flag data. Demonstrates the use of Table.Tr, Table.Th, and Table.Td subcomponents within thead and tbody structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/table/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Table className=\"mt-6\">\n  <thead>\n    <Table.Tr>\n      <Table.Th>Country</Table.Th>\n      <Table.Th>Flag</Table.Th>\n    </Table.Tr>\n  </thead>\n  <tbody>\n    <Table.Tr>\n      <Table.Td>France</Table.Td>\n      <Table.Td>🇫🇷</Table.Td>\n    </Table.Tr>\n    <Table.Tr>\n      <Table.Td>Ukraine</Table.Td>\n      <Table.Td>🇺🇦</Table.Td>\n    </Table.Tr>\n  </tbody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Data Hook with SWR\nDESCRIPTION: A JSX snippet that creates a reusable hook for fetching user data with SWR, providing user data and loading/error states.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser(id) {\n  const { data, error } = useSWR(`/api/user/${id}`, fetcher)\n\n  return {\n    user: data,\n    isLoading: !error && !data,\n    isError: error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar Navigation Implementation\nDESCRIPTION: Implements the sidebar component for document navigation, handling docs directories and navigation structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\nimport { Steps } from 'nextra/components'\nimport OldDocs from './old.mdx'\n```\n\n----------------------------------------\n\nTITLE: Installing a Nextra Theme\nDESCRIPTION: Command to install a specific Nextra theme - in this case, the documentation theme - which provides styling and layout components for the Nextra site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/active-type-should-be-initialized-from-star/1-level/foo.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nextra-theme-docs\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Configuration Structure in JavaScript\nDESCRIPTION: The basic structure of the theme.config.js file showing essential properties for configuring the Nextra theme, including project link, title suffix, and footer text.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  projectLink: 'https://gitlab.com/librewolf-community/browser',\n  titleSuffix: ' – Nextra',\n  footerText: `MIT ${new Date().getFullYear()} © Nextra.`\n}\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Fetch API in Next.js\nDESCRIPTION: Shows how to use the Fetch API with SWR for data fetching in a Next.js application. It uses the 'unfetch' polyfill and defines a fetcher function that returns JSON data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/data-fetching.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'unfetch'\n\nconst fetcher = url => fetch(url).then(r => r.json())\n\nfunction App() {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Fetching with SWR in Next.js\nDESCRIPTION: Shows how to use GraphQL with SWR for data fetching in a Next.js application. It uses the 'graphql-request' library to make GraphQL queries and defines a fetcher function that sends requests to a GraphQL API endpoint.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/data-fetching.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request } from 'graphql-request'\n\nconst fetcher = query => request('/api/graphql', query)\n\nfunction App() {\n  const { data, error } = useSWR(\n    /* GraphQL */ `\n      {\n        Movie(title: \"Inception\") {\n          releaseDate\n          actors {\n            name\n          }\n        }\n      }\n    `,\n    fetcher\n  )\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Local Mutations with POST Request in SWR (React)\nDESCRIPTION: Example of applying local mutations to data for a faster user experience while sending an update request to the server. This demonstrates updating a username locally first, then sending a request to update it remotely.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { useSWRConfig } from 'swr'\n\nfunction Profile() {\n  const { mutate } = useSWRConfig()\n  const { data } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button\n        onClick={async () => {\n          const newName = data.name.toUpperCase()\n\n          // update the local data immediately, but disable the revalidation\n          mutate('/api/user', { ...data, name: newName }, false)\n\n          // send a request to the API to update the source\n          await requestUpdateUsername(newName)\n\n          // trigger a revalidation (refetch) to make sure our local data is correct\n          mutate('/api/user')\n        }}\n      >\n        Uppercase my name!\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Engine in Next.js Config\nDESCRIPTION: Enables and configures Nextra's built-in search functionality in the Next.js configuration file, with options to control code block indexing.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  theme: 'nextra-theme-blog',\n  themeConfig: './theme.config.js',\n  search: {\n    codeblocks: false\n  }\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Implementing FileTree Component in MDX with Nextra\nDESCRIPTION: Example of how to create a nested file tree structure using the FileTree component from Nextra. The structure includes folders that can be opened/closed and files within those folders, with the option to set folders as defaultOpen.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/filetree/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from 'nextra/components'\n\n<FileTree>\n  <FileTree.Folder name=\"content\" defaultOpen>\n    <FileTree.File name=\"_meta.js\" />\n    <FileTree.File name=\"contact.md\" />\n    <FileTree.File name=\"index.mdx\" />\n    <FileTree.Folder name=\"about\">\n      <FileTree.File name=\"_meta.js\" />\n      <FileTree.File name=\"legal.md\" />\n      <FileTree.File name=\"index.mdx\" />\n    </FileTree.Folder>\n  </FileTree.Folder>\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Next.js with Nextra\nDESCRIPTION: This snippet shows how to set up the necessary scripts in package.json for development, building, and starting a Next.js project with Nextra. It also includes an optional tip for enabling Turbopack in development mode.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/components/install-nextra-theme.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next\",\n  \"build\": \"next build\",\n  \"start\": \"next start\"\n},\n```\n\nLANGUAGE: diff\nCODE:\n```\n- \"dev\": \"next\",\n+ \"dev\": \"next --turbopack\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra usage\nDESCRIPTION: This code snippet demonstrates how to configure Next.js to use Nextra by creating a next.config.js file. It sets up the Nextra plugin with optional theme configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/1-one.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = require('nextra')({\\n  theme: 'nextra-theme-docs',\\n  themeConfig: './theme.config.jsx'\\n})\\n \\nmodule.exports = withNextra()\\n \\n// If you have other Next.js configurations, you can pass them as the parameter:\\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR with Next.js getStaticProps for Pre-rendering\nDESCRIPTION: This code demonstrates how to pre-render a page with data using Next.js getStaticProps while leveraging SWR for client-side functionality. It uses SWRConfig's fallback option to provide pre-fetched data as the initial value for SWR hooks, enabling SEO-friendly pages that can still update dynamically on the client.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/with-nextjs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  // `getStaticProps` is executed on the server side.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` will always be available as it's in `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // SWR hooks inside the `SWRConfig` boundary will use those values.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useMDXComponents Function in TypeScript for Nextra\nDESCRIPTION: This code snippet demonstrates how to implement the useMDXComponents function in a mdx-components.js file. It imports default components from a Nextra theme, then merges them with custom components. This allows for global customization of MDX components in a Nextra project.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/mdx-components-file/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMDXComponents as getThemeComponents } from 'nextra-theme-docs' // nextra-theme-blog or your custom theme\n\n// Get the default MDX components\nconst themeComponents = getThemeComponents()\n\n// Merge components\nexport function useMDXComponents(components) {\n  return {\n    ...themeComponents,\n    ...components\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Retry Logic in SWR\nDESCRIPTION: Example of how to override SWR's default exponential backoff algorithm with custom retry logic based on error status, request key, or retry count.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/error-handling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', fetcher, {\n  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n    // Never retry on 404.\n    if (error.status === 404) return\n\n    // Never retry for a specific key.\n    if (key === '/api/user') return\n\n    // Only retry up to 10 times.\n    if (retryCount >= 10) return\n\n    // Retry after 5 seconds.\n    setTimeout(() => revalidate({ retryCount }), 5000)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Fetching with SWR in JavaScript\nDESCRIPTION: This snippet demonstrates three ways to conditionally fetch data using SWR. It shows how to use null, a function returning a falsy value, or a function that may throw an error to control when data fetching occurs.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/conditional-fetching.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or return a falsy value\nconst { data } = useSWR(() => (shouldFetch ? '/api/data' : null), fetcher)\n\n// ...or throw an error when user.id is not defined\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Fetcher and Refresh Intervals with SWRConfig\nDESCRIPTION: Shows how to set up global fetcher for JSON data and refresh interval with the ability to override settings in individual hooks.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/global-configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction Dashboard() {\n  const { data: events } = useSWR('/api/events')\n  const { data: projects } = useSWR('/api/projects')\n  const { data: user } = useSWR('/api/user', { refreshInterval: 0 }) // override\n\n  // ...\n}\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        refreshInterval: 3000,\n        fetcher: (resource, init) =>\n          fetch(resource, init).then(res => res.json())\n      }}\n    >\n      <Dashboard />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Cache Provider with SWRConfig\nDESCRIPTION: Example of creating a custom cache provider using a JavaScript Map. The provider is passed to SWRConfig, making all SWR hooks inside that boundary use the custom cache implementation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction App() {\n  return (\n    <SWRConfig value={{ provider: () => new Map() }}>\n      <Page />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRInfinite with Cursor-Based Pagination\nDESCRIPTION: This code demonstrates how to implement the getKey function for cursor-based pagination with useSWRInfinite, handling the first page and subsequent pages with cursors.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst getKey = (pageIndex, previousPageData) => {\n  // reached the end\n  if (previousPageData && !previousPageData.data) return null\n\n  // first page, we don't have `previousPageData`\n  if (pageIndex === 0) return `/users?limit=10`\n\n  // add the cursor to the API endpoint\n  return `/users?cursor=${previousPageData.nextCursor}&limit=10`\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Table Component Usage Example with Import\nDESCRIPTION: Full example showing how to import and implement the Table component from Nextra, including the complete table structure with headers and data rows.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/table/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Table } from 'nextra/components'\n\n<Table>\n  <thead>\n    <Table.Tr>\n      <Table.Th>Country</Table.Th>\n      <Table.Th>Flag</Table.Th>\n    </Table.Tr>\n  </thead>\n  <tbody>\n    <Table.Tr>\n      <Table.Td>France</Table.Td>\n      <Table.Td>🇫🇷</Table.Td>\n    </Table.Tr>\n    <Table.Tr>\n      <Table.Td>Ukraine</Table.Td>\n      <Table.Td>🇺🇦</Table.Td>\n    </Table.Tr>\n  </tbody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Nextra\nDESCRIPTION: This snippet demonstrates how to start the Next.js development server using the configured scripts. It uses a placeholder syntax 'npm2yarn' to indicate compatibility with different package managers.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/components/install-nextra-theme.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing the Nextra Docs Theme Package\nDESCRIPTION: Command to install the Nextra documentation theme package which provides the styling and components for a documentation website.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i nextra-theme-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation in Nextra Theme Configuration\nDESCRIPTION: Example of how to customize the sidebar navigation in Nextra. This shows how to add a collapsible item with children pages, external links, and how to use the sidebar heading type to organize content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  sidebar: {\n    titleComponent({ title, type }) {\n      if (type === 'separator') {\n        return (\n          <div style={{ background: 'cyan', textAlign: 'center' }}>{title}</div>\n        )\n      }\n      if (title === 'About') {\n        return <>❓ {title}</>\n      }\n      return <>{title}</>\n    },\n    defaultMenuCollapseLevel: 1,\n    toggleButton: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navbar Component in Nextra\nDESCRIPTION: This code snippet demonstrates how to create a custom navbar implementation for Nextra. It shows how to configure the navbar to include a logo, text links, search functionality, and social media links.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  navbar: {\n    component: Navbar,\n    extraContent: <SomeComponent />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Usage in React Component\nDESCRIPTION: A JSX component that uses SWR to fetch user data and handles loading and error states.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user/123', fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n\n  // render data\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nextra Theme Configuration\nDESCRIPTION: Comprehensive theme configuration for a Nextra site, including repository links, navigation options, search functionality, dark mode settings, footer content, and metadata for the head section of the HTML document.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  projectLink: 'https://github.com/shuding/nextra', // GitHub link in the navbar\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/master', // base URL for the docs repository\n  titleSuffix: ' – Nextra',\n  nextLinks: true,\n  prevLinks: true,\n  search: true,\n  customSearch: null, // customizable, you can use algolia for example\n  darkMode: true,\n  footer: true,\n  footerText: `MIT ${new Date().getFullYear()} © Shu Ding.`,\n  footerEditLink: `Edit this page on GitHub`,\n  logo: (\n    <>\n      <svg>...</svg>\n      <span>Next.js Static Site Generator</span>\n    </>\n  ),\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"og:title\" content=\"Nextra: the next docs builder\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a search UI with keepPreviousData for better UX\nDESCRIPTION: This example shows how to implement a real-time search using SWR with the keepPreviousData option enabled. This approach displays previous search results while new data is loading, providing a smoother user experience.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/understanding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing global styles in Next.js root layout\nDESCRIPTION: This JSX snippet demonstrates how to import the globals.css file in the root layout file of a Next.js application to apply Tailwind CSS styles globally.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/tailwind-css/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../path/to/your/globals.css'\n\nexport default async function RootLayout({ children }) {\n  // ... Your layout logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Next Page for Better UX with useSWR\nDESCRIPTION: This example enhances the pagination UX by preloading the next page in a hidden div, leveraging SWR's caching capability so the data is already available when the user navigates to the next page.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [pageIndex, setPageIndex] = useState(0)\n\n  return (\n    <div>\n      <Page index={pageIndex} />\n      <div style={{ display: 'none' }}>\n        <Page index={pageIndex + 1} />\n      </div>\n      <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n      <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Cards Page with MDXRemote in Nextra\nDESCRIPTION: An async function that compiles MDX content and returns it wrapped in MDXRemote for rendering. This functions provides examples of card implementations.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function CardsPage() {\n  const mdx2 = `<Cards.Card\n  icon={<BoxIcon />}\n  title=\"About Nextra\"\n  href=\"/about\"\n  arrow\n/>`\n  const mdx = `\n<Cards>\n  <Cards.Card\n    icon={<WarningIcon />}\n    title=\"Callout\"\n    href=\"/docs/built-ins/callout\"\n  />\n  <Cards.Card\n    icon={<CardsIcon />}\n    title=\"Tabs\"\n    href=\"/docs/built-ins/tabs\"\n  />\n  <Cards.Card\n    icon={<OneIcon />}\n    title=\"Steps\"\n    href=\"/docs/built-ins/steps\"\n  />\n</Cards>`\n  const rawJs = await compileMdx(`\n## Grouped cards\n\n### Example\n\n${mdx}\n\n### Usage\n\nImport the \\`<Cards>\\` component to your page, which includes the \\`<Card>\\` component.\n\nThen, optionally import the icons that you want to use. To create a set of cards, follow the\nexample below where the \\`<Cards.Card>\\` component is used to create a card and the \\`<Cards>\\`\ncomponent is used to group multiple cards together.\n\n~~~mdx filename=\"MDX\"\nimport { Cards } from 'nextra/components'\nimport { CardsIcon, OneIcon, WarningIcon } from '../path/with/your/icons'\n${mdx}\n~~~\n\n## Single card\n\nA \\`<Card>\\` not wrapped in a \\`<Cards>\\` component will not be grouped with other cards. This can\nbe useful if you want to display a single card in a different format than the other cards on the\npage.\n\n### Example\n\n<br/>\n\n${mdx2}\n\n### Usage\n\n~~~mdx filename=\"MDX\"\n${mdx2}\n~~~`)\n  return <MDXRemote compiledSource={rawJs} components={{ Cards, CardsIcon, OneIcon, WarningIcon, BoxIcon }}  />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSWR Hook Usage in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for using the useSWR hook to fetch data in React applications. This hook returns an object containing the fetched data, error state, validation status, and a mutate function.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/options.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error, isValidating, mutate } = useSWR(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Using isLoading and isValidating in SWR for improved UX\nDESCRIPTION: This code demonstrates how to use SWR's isLoading and isValidating states to create a better loading experience. It shows a skeleton while initial data loads and displays a spinner during background revalidations.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/understanding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  })\n\n  // If it's still loading the initial data, there is nothing to display.\n  // We return a skeleton here.\n  if (isLoading) return <div className=\"skeleton\" />\n\n  // Otherwise, display the data and a spinner that indicates a background\n  // revalidation.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Nextra Theme Configuration with JavaScript\nDESCRIPTION: This snippet demonstrates how to export the theme configuration for use with Nextra. The configuration exports a function that returns the theme configuration object.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default themeConfig\n```\n\n----------------------------------------\n\nTITLE: Handling Returned Data from Mutate in SWR (React)\nDESCRIPTION: Example showing how to capture and handle the data returned from a mutate operation. This approach allows for error handling and accessing the updated data returned by the mutation operation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntry {\n  const user = await mutate('/api/user', updateUser(newUser))\n} catch (error) {\n  // Handle an error while updating the user here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Middleware\nDESCRIPTION: Basic structure for creating middleware in SWR. Middleware receive the SWR hook and can execute logic before and after running it.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction myMiddleware(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Before hook runs...\n\n    // Handle the next middleware, or the `useSWR` hook if this is the last one.\n    const swr = useSWRNext(key, fetcher, config)\n\n    // After hook runs...\n    return swr\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a LocalStorage-Based Persistent Cache Provider\nDESCRIPTION: A custom cache provider that synchronizes with localStorage, allowing SWR cache to persist between page reloads. It initializes from localStorage and saves back before unloading the page.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction localStorageProvider() {\n  // When initializing, we restore the data from `localStorage` into a map.\n  const map = new Map(JSON.parse(localStorage.getItem('app-cache') || '[]'))\n\n  // Before unloading the app, we write back all the data into `localStorage`.\n  window.addEventListener('beforeunload', () => {\n    const appCache = JSON.stringify(Array.from(map.entries()))\n    localStorage.setItem('app-cache', appCache)\n  })\n\n  // We still use the map for write & read for performance.\n  return map\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Middleware\nDESCRIPTION: How to apply middleware in SWR either globally through SWRConfig or locally in a specific useSWR hook.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ use: [myMiddleware] }}>\n\n// or...\n\nuseSWR(key, fetcher, { use: [myMiddleware] })\n```\n\n----------------------------------------\n\nTITLE: Implementing User Avatar with SWR in React\nDESCRIPTION: This snippet demonstrates how to use SWR for fetching user data and rendering multiple Avatar components efficiently. It showcases SWR's deduplication feature, where multiple instances of the same query only result in a single network request.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser() {\n  return useSWR('/api/user', fetcher)\n}\n\nfunction Avatar() {\n  const { data, error } = useUser()\n\n  if (error) return <Error />\n  if (!data) return <Spinner />\n\n  return <img src={data.avatar_url} />\n}\n\nfunction App() {\n  return (\n    <>\n      <Avatar />\n      <Avatar />\n      <Avatar />\n      <Avatar />\n      <Avatar />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra Dependencies with NPM\nDESCRIPTION: Command to install Next.js, React, Nextra, and Nextra Docs Theme dependencies required for setting up a Nextra documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/start/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next react react-dom nextra nextra-theme-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra for LaTeX Support\nDESCRIPTION: JavaScript configuration in next.config.mjs to enable LaTeX support in Nextra by setting the latex option to true.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/latex.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  latex: true\n})\n\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Programmatic Data Prefetching with SWR Mutate\nDESCRIPTION: Shows how to programmatically prefetch data using SWR's mutate function. This approach allows conditional prefetching of data based on user interactions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/prefetching.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from 'swr'\n\nfunction prefetch() {\n  mutate(\n    '/api/data',\n    fetch('/api/data').then(res => res.json())\n  )\n  // el segundo parametró es una Promise\n  // SWR utilizará el resultado cuando resuelva\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Nextra in Markdown\nDESCRIPTION: Shows how to import and use various components from the nextra package in Markdown files. These components include Cards, Tabs, Steps, and FileTree.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Cards } from 'nextra/components'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tab, Tabs } from 'nextra/components'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from 'nextra/components'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FileTree } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSWR with TypeScript Type Inference\nDESCRIPTION: Demonstrates how SWR infers types for the 'key' and 'fetcher' arguments in various useSWR calls. This includes string keys, object keys, and array keys with multiple arguments.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/typescript.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `key` is inferred to be `string`\nuseSWR('/api/user', key => {})\nuseSWR(() => '/api/user', key => {})\n\n// `key` will be inferred as { a: string; b: { c: string; d: number } }\nuseSWR({ a: '1', b: { c: '3', d: 2 } }, key => {})\nuseSWR(() => { a: '1', b: { c: '3', d: 2 } }, key => {})\n\n// `arg0` will be inferred as string.  `arg1` will be inferred as number\nuseSWR(['user', 8], (arg0, arg1) => {})\nuseSWR(() => ['user', 8], (arg0, arg1) => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Structure in _meta.js\nDESCRIPTION: This code example demonstrates how to configure the navigation structure of a Nextra site using _meta.js. It shows how to set pages as top-level navigation items and customize their appearance.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  index: {\n    title: 'Home',\n    type: 'page'\n  },\n  frameworks: {\n    title: 'Frameworks',\n    type: 'page'\n  },\n  fruits: {\n    title: 'Fruits',\n    type: 'page'\n  },\n  about: {\n    title: 'About',\n    type: 'page'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading States with SWR in React\nDESCRIPTION: Demonstrates how to use isLoading and isValidating states in SWR to create a responsive stock price display component. The example shows proper handling of loading states with skeleton UI and background revalidation spinner.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/understanding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  })\n\n  // If it's still loading the initial data, there is nothing to display.\n  // We return a skeleton here.\n  if (isLoading) return <div className=\"skeleton\" />\n\n  // Otherwise, display the data and a spinner that indicates a background\n  // revalidation.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized SWR Usage in React Component\nDESCRIPTION: This snippet demonstrates an optimized use of SWR where only the 'data' state is used. This results in fewer re-renders as SWR only updates the states that are actually used by the component, showcasing SWR's dependency collection feature.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/performance.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { data } = useSWR('/api', fetcher)\n  console.log(data)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Pagination with useSWR in React\nDESCRIPTION: This code demonstrates how to implement pagination using the useSWR hook with a page index state. The API URL includes the page index from React state, and navigation buttons update this state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [pageIndex, setPageIndex] = useState(0)\n\n  // The API URL includes the page index, which is a React state.\n  const { data } = useSWR(`/api/data?page=${pageIndex}`, fetcher)\n\n  // ... handle loading and error states\n\n  return (\n    <div>\n      {data.map(item => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n      <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n      <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Component in Next.js App Router\nDESCRIPTION: Example of using the Layout component in a Next.js app directory layout file, demonstrating how to pass configuration options as props to customize the documentation site experience.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from 'nextra-theme-docs'\n\nexport default function MyLayout({ children, ...props }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Layout\n          sidebar={{ autoCollapse: true }}\n          docsRepositoryBase=\"https://github.com/shuding/nextra/tree/main/docs\"\n        >\n          {children}\n        </Layout>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRInfinite with TypeScript\nDESCRIPTION: Demonstrates how to use useSWRInfinite with TypeScript, showing both automatic type inference and explicit type specification for the key loader function.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/typescript.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SWRInfiniteKeyLoader } from 'swr/infinite'\n\nconst getKey: SWRInfiniteKeyLoader = (index, previousPageData) => {\n  // ...\n}\n\nconst { data } = useSWRInfinite(getKey, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SWR Deduplication with Avatar Components\nDESCRIPTION: Example showing how SWR deduplicates multiple identical requests when the same hook is used across multiple components. Even with 5 Avatar components using the same data hook, only one network request is made.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/advanced/performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useUser() {\n  return useSWR('/api/user', fetcher)\n}\n\nfunction Avatar() {\n  const { data, error } = useUser()\n  if (error) return <Error />\n  if (!data) return <Spinner />\n\n  return <img src={data.avatar_url} />\n}\n\nfunction App() {\n  return (\n    <>\n      <Avatar />\n      <Avatar />\n      <Avatar />\n      <Avatar />\n      <Avatar />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Stars with Next.js Server Component in Nextra\nDESCRIPTION: This code snippet defines an asynchronous React component that fetches the number of GitHub stars for the Nextra repository at build time. It includes error handling and fallback for CI environments with rate limiting.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/ssg.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Stars() {\n  let stars = 0\n  try {\n    const response = await fetch('https://api.github.com/repos/shuding/nextra')\n    const repo = await response.json()\n    stars = repo.stargazers_count\n  } catch {\n    /* Ignore if there is an error, due rate limiting on CI */\n  }\n  return <b>{stars}</b>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval-Based Revalidation in SWR\nDESCRIPTION: Sets up automatic refetching at regular intervals using the refreshInterval option, which will only trigger when the component is visible on screen. This is useful for keeping data in sync across multiple devices or tabs.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/revalidation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/todos', fetcher, { refreshInterval: 1000 })\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Types with Generics in SWR\nDESCRIPTION: Illustrates two methods of specifying the data type in SWR: using a typed fetcher and explicitly specifying the data type as a generic parameter. Also shows how to import and use SWR configuration types.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/typescript.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 🔹 A. Use a typed fetcher:\n// `getUser` is `(endpoint: string) => User`.\nconst { data } = useSWR('/api/user', getUser)\n\n// 🔹 B. Specify the data type:\n// `fetcher` is generally returning `any`.\nconst { data } = useSWR<User>('/api/user', fetcher)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSWR } from 'swr'\nimport type { SWRConfiguration } from 'swr'\n\nconst config: SWRConfiguration = {\n  fallbackData: 'fallback',\n  revalidateOnMount: false\n  // ...\n}\n\nconst { data } = useSWR<string[]>('/api/data', fetcher, config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Fetching with SWR in JavaScript\nDESCRIPTION: Shows three approaches to conditionally fetch data using SWR: using null when a condition isn't met, returning a falsy value from a function, or throwing an error when required data isn't available.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/conditional-fetching.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...o devuelve un falsy value\nconst { data } = useSWR(() => (shouldFetch ? '/api/data' : null), fetcher)\n\n// ...o lanza un error cuando user.id no está definifo\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in Nextra\nDESCRIPTION: Illustrates how to configure multiple themes (dark and light mode) for syntax highlighting in Nextra's configuration file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnextra({\n  // ... other Nextra config options\n  mdxOptions: {\n    rehypePrettyCodeOptions: {\n      theme: {\n        dark: 'nord',\n        light: 'min-light'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Syntax Highlighting in Markdown\nDESCRIPTION: Demonstrates how to add a simple JavaScript code block in Markdown for syntax highlighting.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js\nconsole.log('hello, world')\n```\n```\n\n----------------------------------------\n\nTITLE: Using Folder-Specific _meta Files in Nextra\nDESCRIPTION: Example of using separate _meta.js files for top-level and nested folders. The top-level file sets the type and title for the fruits folder, while the nested file defines titles for its contents.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  fruits: {\n    type: 'page',\n    title: '✨ Fruits'\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  apple: '🍎 Apple',\n  banana: '🍌 BaNaNa'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to use Nextra in next.config.js\nDESCRIPTION: This code snippet demonstrates how to configure Next.js to use Nextra by modifying the next.config.js file. It imports the withNextra function and applies it to the Next.js configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/qux.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = require('nextra')({\\n  theme: 'nextra-theme-docs',\\n  themeConfig: './theme.config.jsx'\\n})\\n \\nmodule.exports = withNextra()\\n \\n// If you have other Next.js configurations, you can pass them as the parameter:\\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Fetcher with Error Handling\nDESCRIPTION: A simple example of how errors from the fetcher function are returned by the useSWR hook.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/error-handling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = url => fetch(url).then(r => r.json())\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Basic useSWR Fetcher Argument Patterns in JavaScript\nDESCRIPTION: Three equivalent ways of using the useSWR hook with a fetcher function, demonstrating how the key is passed as an argument to the fetcher by default.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/arguments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)\n```\n\n----------------------------------------\n\nTITLE: Using Array for Multiple Arguments with useSWR in JavaScript\nDESCRIPTION: The correct approach to pass multiple arguments to a fetcher function using an array as the key parameter, which ensures proper cache key association with all arguments.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/arguments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n```\n\n----------------------------------------\n\nTITLE: Using useSWRImmutable Hook for Immutable Resources\nDESCRIPTION: Demonstrates the useSWRImmutable helper hook introduced in SWR 1.0 for handling immutable resources. This prevents all types of automatic revalidations for data that won't change.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/revalidation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Component with SWR in React\nDESCRIPTION: This snippet demonstrates how to use SWR for fetching stock data with automatic revalidation. It shows how to handle loading states and display a spinner during background revalidation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/ru/docs/understanding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Stock() {\n  const { data, isLoading, isValidating } = useSWR(STOCK_API, fetcher, {\n    refreshInterval: 3000\n  })\n\n  // If it's still loading the initial data, there is nothing to display.\n  // We return a skeleton here.\n  if (isLoading) return <div className=\"skeleton\" />\n\n  // Otherwise, display the data and a spinner that indicates a background\n  // revalidation.\n  return (\n    <>\n      <div>${data}</div>\n      {isValidating ? <div className=\"spinner\" /> : null}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bound Mutate Function in SWR (React)\nDESCRIPTION: Example demonstrating the pre-bound mutate function returned by useSWR. This function is already bound to the SWR's key, making it more convenient for updating data associated with a specific resource.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, mutate } = useSWR('/api/user', fetcher)\n\n  return (\n    <div>\n      <h1>My name is {data.name}.</h1>\n      <button\n        onClick={async () => {\n          const newName = data.name.toUpperCase()\n          // send a request to the API to update the data\n          await requestUpdateUsername(newName)\n          // update the local data immediately and revalidate (refetch)\n          // NOTE: key is not required when using useSWR's mutate as it's pre-bound\n          mutate({ ...data, name: newName })\n        }}\n      >\n        Uppercase my name!\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Postbuild Script for Pagefind Search Engine in Nextra\nDESCRIPTION: This snippet demonstrates how to update the postbuild script in package.json to set up the Pagefind search engine for static exports. It adjusts the output path to match the static export directory.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/static-exports/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"postbuild\": \"pagefind --site .next/server/app --output-path out/_pagefind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Error Handling with SWRConfig\nDESCRIPTION: Configuration for global error handling that can be used to notify users through UI elements or report errors to monitoring services like Sentry.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/error-handling.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    onError: (error, key) => {\n      if (error.status !== 403 && error.status !== 404) {\n        // We can send the error to Sentry,\n        // or show a notification UI.\n      }\n    }\n  }}\n>\n  <MyApp />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Static Export in Nextra\nDESCRIPTION: This snippet shows how to update the next.config.mjs file to enable static exports in a Nextra project. It sets the output to 'export' and disables image optimization, which is required for static exports.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/static-exports/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    unoptimized: true // mandatory, otherwise won't export\n  }\n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: \"build\"\n}\nconst withNextra = nextra({\n  // ... other Nextra config options\n})\n\nexport default withNextra(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Setting Repository Base URL for Edit Links\nDESCRIPTION: Configures the base URL of the GitHub repository where the documentation is located, used for the 'Edit this Page on GitHub' buttons.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  docsRepositoryBase: 'https://github.com/shuding/nextra'\n}\n```\n\n----------------------------------------\n\nTITLE: File structure for multilingual pages in Nextra\nDESCRIPTION: Example directory structure showing how to organize internationalized content files in Nextra. Files should include locale codes in their extensions, including the default locale.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/i18n.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/pages\n  index.en.md\n  index.zh.md\n  index.de.md\n  meta.en.json\n  meta.zh.json\n  meta.de.json\n  ...\n```\n\n----------------------------------------\n\nTITLE: Dependent Data Fetching with SWR in JavaScript\nDESCRIPTION: This snippet illustrates how to fetch data that depends on the results of a previous fetch using SWR. It demonstrates parallel fetching where possible and serial fetching when required, ensuring efficient data loading.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/conditional-fetching.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects() {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n  // When passing a function, SWR will use the return\n  // value as `key`. If the function throws or returns\n  // falsy, SWR will know that some dependencies are not\n  // ready. In this case `user.id` throws when `user`\n  // isn't loaded.\n\n  if (!projects) return 'loading...'\n  return 'You have ' + projects.length + ' projects'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RSS Feed Route in Nextra Project\nDESCRIPTION: This code snippet shows how to implement a '/rss.xml' route in a Nextra project to generate an RSS feed. It uses the 'app/rss.xml/route.js' file and relies on a '/getPosts/' metadata function.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/rss/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleCode\n  example=\"blog\"\n  filePath=\"app/rss.xml/route.js\"\n  metadata=\"/getPosts/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Provider\nDESCRIPTION: Shows how to set up a custom cache provider using the new provider option in SWRConfig.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    provider: () => myCache\n  }}\n>\n  <App />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Manually Disabling All Revalidation Options in SWR\nDESCRIPTION: Shows how to manually disable all automatic revalidation options in a standard useSWR hook. This achieves the same effect as using useSWRImmutable by setting all revalidation flags to false.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/revalidation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR(key, fetcher, {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false\n})\n\n// equivalent to\nuseSWRImmutable(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Laggy Data Middleware Implementation\nDESCRIPTION: A middleware that keeps the previous result even when the key changes, until new data is loaded. Extends the SWR hook with isLagging and resetLaggy functionalities.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useRef } from 'react'\n\n// This is a SWR middleware for keeping the data even if key changes.\nfunction laggy(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Use a ref to store previous returned data.\n    const laggyDataRef = useRef()\n\n    // Actual SWR hook.\n    const swr = useSWRNext(key, fetcher, config)\n\n    useEffect(() => {\n      // Update ref if data is not undefined.\n      if (swr.data !== undefined) {\n        laggyDataRef.current = swr.data\n      }\n    }, [swr.data])\n\n    // Expose a method to clear the laggy data, if any.\n    const resetLaggy = useCallback(() => {\n      laggyDataRef.current = undefined\n    }, [])\n\n    // Fallback to previous data if the current data is undefined.\n    const dataOrLaggyData =\n      swr.data === undefined ? laggyDataRef.current : swr.data\n\n    // Is it showing previous data?\n    const isLagging =\n      swr.data === undefined && laggyDataRef.current !== undefined\n\n    // Also add a `isLagging` field to SWR.\n    return Object.assign({}, swr, {\n      data: dataOrLaggyData,\n      isLagging,\n      resetLaggy\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Metadata and Table of Contents in Nextra Theme Layout\nDESCRIPTION: This code snippet demonstrates how to create a custom theme layout in Nextra, rendering the page title, adding OpenGraph metadata, and displaying a table of contents. It uses the NextraThemeLayoutProps to access page metadata and the MDXProvider for custom MDX components.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/old.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'next/head'\nimport type { NextraThemeLayoutProps } from 'nextra'\nimport { MDXProvider } from 'nextra/mdx'\n\nexport default function Layout({ children, pageOpts }: NextraThemeLayoutProps) {\n  const { title, frontMatter } = pageOpts\n\n  return (\n    <>\n      <Head>\n        <title>{title}</title>\n        <meta name=\"og:image\" content={frontMatter.image} />\n      </Head>\n      <MDXProvider components={{ wrapper: MyWrapper }}>{children}</MDXProvider>\n    </>\n  )\n}\n\nfunction MyWrapper({ children, toc }) {\n  return (\n    <>\n      <h1>My Theme</h1>\n      Table of Contents:\n      <ul>\n        {toc.map(heading => (\n          <li key={heading.value}>{heading.value}</li>\n        ))}\n      </ul>\n      <div style={{ border: '1px solid' }}>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Middleware with TypeScript\nDESCRIPTION: Shows how to implement and type a custom SWR middleware using TypeScript. It imports necessary types from SWR to ensure type safety in the middleware implementation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/typescript.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Middleware, SWRHook } from 'swr'\n\nconst swrMiddleware: Middleware =\n  (useSWRNext: SWRHook) => (key, fetcher, config) => {\n    // ...\n    return useSWRNext(key, fetcher, config)\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing NotFoundPage Component in Next.js\nDESCRIPTION: Example implementation of a custom 404 Not Found page using the NotFoundPage component from nextra-theme-docs. Shows how to configure the component with custom content and labels for issue reporting.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/not-found/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NotFoundPage } from 'nextra-theme-docs'\n\nexport default function NotFound() {\n  return (\n    <NotFoundPage content=\"Submit an issue\" labels=\"broken-link\">\n      <h1>The page is not found</h1>\n    </NotFoundPage>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining useSWR Hooks with Multiple Arguments in JavaScript\nDESCRIPTION: Example of using the result from one useSWR hook as an argument for another, demonstrating conditional fetching based on available data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/arguments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...and then pass it as an argument to another useSWR hook\nconst { data: orders } = useSWR(\n  user ? ['/api/orders', user] : null,\n  fetchWithUser\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MDX Layout Component in React for Nextra\nDESCRIPTION: This React component customizes the MDX layout by cloning the children components and overriding the 'img' component with Nextra's Image component. It applies an 'inline' className to all images rendered through this layout.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/about/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout(props) {\n  return cloneElement(props.children, {\n    components: {\n      img: props => <Image {...props} className=\"inline\" />\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n in Next.js Config File\nDESCRIPTION: This snippet shows how to add the i18n configuration to the next.config.mjs file, specifying supported locales and the default locale.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/i18n/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  // ... other Nextra config options\n})\n\nexport default withNextra({\n  i18n: {\n    locales: ['en', 'zh', 'de'],\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Prefetching Top-Level Data with HTML Preload\nDESCRIPTION: Uses the HTML rel=\"preload\" directive to fetch data when the HTML loads, even before JavaScript starts to download. This approach is recommended for top-level data requests.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/prefetching.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\" />\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Axios in Next.js\nDESCRIPTION: Demonstrates how to use Axios with SWR for data fetching in a Next.js application. It defines a fetcher function that uses Axios to make GET requests and return the response data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/data-fetching.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\n\nconst fetcher = url => axios.get(url).then(res => res.data)\n\nfunction App() {\n  const { data, error } = useSWR('/api/data', fetcher)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with SWR Data Persistence\nDESCRIPTION: Shows how to implement a search interface using SWR with keepPreviousData option enabled. This pattern maintains previous search results while loading new data, providing a smoother user experience.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/understanding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Component with SWR in React\nDESCRIPTION: This code snippet shows how to create a search component using SWR with the keepPreviousData option. It demonstrates real-time search functionality while maintaining previous data for improved user experience.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/ru/docs/understanding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Search() {\n  const [search, setSearch] = React.useState('');\n\n  const { data, isLoading } = useSWR(`/search?q=${search}`, fetcher, {\n    keepPreviousData: true\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search...\"\n      />\n\n      <div className={isLoading ? \"loading\" : \"\"}>\n        {data?.products.map(item => <Product key={item.id} name={item.name} />)\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSWRConfig Hook\nDESCRIPTION: Demonstrates how to access global configurations using the new useSWRConfig hook.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Foo() {\n  const { refreshInterval, cache, mutate, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing initFocus with React Native AppState\nDESCRIPTION: Detailed implementation of the initFocus function using React Native's AppState to detect when the app comes to the foreground, triggering SWR revalidation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/react-native.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppState } from 'react-native'\n\n// ...\n\n<SWRConfig\n  value={{\n    provider: () => new Map(),\n    isVisible: () => { return true },\n    initFocus(callback) {\n      let appState = AppState.currentState\n\n      const onAppStateChange = (nextAppState) => {\n        /* If it's resuming from background or inactive mode to active one */\n        if (appState.match(/inactive|background/) && nextAppState === 'active') {\n          callback()\n        }\n        appState = nextAppState\n      }\n\n      // Subscribe to the app state change events\n      const subscription = AppState.addEventListener('change', onAppStateChange)\n\n      return () => {\n        subscription.remove()\n      }\n    }\n  }}\n>\n  <App>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Creating Fetcher Function for SWR\nDESCRIPTION: A JSX snippet that creates a fetcher function for SWR to wrap the native fetch API and handle JSON responses.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetcher = (...args) => fetch(...args).then(res => res.json())\n```\n\n----------------------------------------\n\nTITLE: TypeScript Twoslash Example with Todo Interface\nDESCRIPTION: Demonstration of Twoslash features including type hints, readonly properties, and method calls on strings. Shows error handling for attempting to modify a readonly property.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/twoslash/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2540\ninterface Todo {\n  title: string\n}\n\nconst todo: Readonly<Todo> = {\n  title: 'Delete inactive users'.toUpperCase()\n  //  ^?\n}\n\ntodo.title = 'Hello'\n\nNumber.parseInt('123', 10)\n//      ^|\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: HTML Preload Tag Implementation for Top-Level Data\nDESCRIPTION: Demonstrates how to preload API data using HTML link tag with rel=\"preload\" attribute. This native approach allows data fetching before JavaScript loads.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/prefetching.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/api/data\" as=\"fetch\" crossorigin=\"anonymous\" />\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Specification for useSWR in TypeScript\nDESCRIPTION: Shows how to explicitly specify types for 'key' and 'fetcher' arguments in useSWR. This is useful when automatic type inference is not sufficient or when more specific types are needed.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/typescript.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR, { Fetcher, Key } from 'swr'\n\nconst uid: Key = '<user_id>'\nconst fetcher: Fetcher<string, User> = id => getUserById(id)\n\nconst { data } = useSWR(uid, fetcher)\n// `data` will be `User | undefined`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs Component in Nextra MDX\nDESCRIPTION: Demonstrates how to import and use the Tabs component from Nextra, creating a simple tabbed interface with three options.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/tabs/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs } from 'nextra/components'\n\n<Tabs items={['pnpm', 'npm', 'yarn']}>\n  <Tabs.Tab>**pnpm**: Fast, disk space efficient package manager.</Tabs.Tab>\n  <Tabs.Tab>**npm** is a package manager for the JavaScript programming language.</Tabs.Tab>\n  <Tabs.Tab>**Yarn** is a software packaging system.</Tabs.Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating the Nextra Theme Configuration\nDESCRIPTION: Theme configuration file that customizes the blog appearance and functionality. Includes settings for footer, metadata, navigation links, and other UI elements.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/blog/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  footer: <p>MIT 2021 © Nextra.</p>,\n  head: ({ title, meta }) => (\n    <>\n      {meta.description && (\n        <meta name=\"description\" content={meta.description} />\n      )}\n      {meta.tag && <meta name=\"keywords\" content={meta.tag} />}\n      {meta.author && <meta name=\"author\" content={meta.author} />}\n    </>\n  ),\n  readMore: 'Read More →',\n  titleSuffix: null,\n  postFooter: null,\n  cusdis: {\n    appId: 'your_app_id',\n    host: 'your_host(optional)',\n    lang: 'your_lang'\n  },\n  darkMode: false,\n  navs: [\n    {\n      url: 'https://github.com/shuding/nextra',\n      name: 'Nextra'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Head with Meta Tags in JSX\nDESCRIPTION: Defines the HTML head content for documentation pages, including meta tags for SEO, social media sharing, and browser compatibility.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  head: (\n    <>\n      <meta name=\"msapplication-TileColor\" content=\"#fff\" />\n      <meta httpEquiv=\"Content-Language\" content=\"en\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@shuding_\" />\n      <meta property=\"og:title\" content=\"Nextra: the next docs builder\" />\n      <meta property=\"og:description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"apple-mobile-web-app-title\" content=\"Nextra\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global SWR Configurations with useSWRConfig Hook\nDESCRIPTION: Demonstrates how to use the useSWRConfig hook to access global configurations, mutate function, and cache within components.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/global-configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Component() {\n  const { refreshInterval, mutate, cache, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-filling SWR Cache with Existing Data\nDESCRIPTION: Shows how to pre-fill the SWR cache with existing data using the fallbackData option. This approach allows SWR to immediately return prefetched data while fetching fresh data in the background.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/prefetching.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme and Options in JavaScript\nDESCRIPTION: This snippet shows how to configure the Nextra theme and various options including logo, project link, chat link, docsRepositoryBase, and footer customization.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/hidden-route-should-have-theme-context/bar.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineDocusaurusConfig({\n  title: 'Nextra',\n  description: 'The Next.js Static Site Generator',\n  themeConfig: {\n    logo: (\n      <span>\n        <Image\n          src=\"/logo.svg\"\n          height={12}\n          width={12}\n          alt=\"Nextra logo\"\n        />\n        <span style={{ marginLeft: '.4em', fontWeight: 800 }}>\n          Nextra\n        </span>\n      </span>\n    ),\n    project: {\n      link: 'https://github.com/shuding/nextra',\n    },\n    chat: {\n      link: 'https://discord.gg/hEM84NMkRv',\n    },\n    docsRepositoryBase: 'https://github.com/shuding/nextra/tree/main/docs',\n    footer: {\n      text: (\n        <span>\n          MIT {new Date().getFullYear()} ©{' '}\n          <a href=\"https://nextra.site\" target=\"_blank\">\n            Nextra\n          </a>\n          .\n        </span>\n      )\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Next.js Image Component in MDX\nDESCRIPTION: This snippet demonstrates how to import and use the Next.js Image component in an MDX file. It shows how to display an image located at '/public/demo.png' with specified dimensions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/image.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Image from 'next/image'\n\n<Image src=\"/demo.png\" alt=\"Hello\" width={500} height={500} />\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Diagram with Mermaid\nDESCRIPTION: This Mermaid code snippet creates a graph diagram showing the flow from consumers (mobile app, web app, Node.js client) through a GraphQL API to various services (REST API, GraphQL API, SOAP API). It uses subgraphs to group related elements and demonstrates directional relationships between components.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/mermaid.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  subgraph AA [Consumers]\n    A[Mobile app];\n    B[Web app];\n    C[Node.js client];\n  end\n  subgraph BB [Services]\n    E[REST API];\n    F[GraphQL API];\n    G[SOAP API];\n  end\n  Z[GraphQL API];\n  A --> Z;\n  B --> Z;\n  C --> Z;\n  Z --> E;\n  Z --> F;\n  Z --> G;\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Language Detection Middleware\nDESCRIPTION: This snippet demonstrates how to create a middleware file for automatically detecting and redirecting users to their preferred language version of the site.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/i18n/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { locales } from 'nextra/locales'\n```\n\n----------------------------------------\n\nTITLE: Using Bleed Component in MDX\nDESCRIPTION: This snippet demonstrates how to use the Bleed component in an MDX file. It shows examples of using Bleed with Markdown syntax, full-bleed images, and embedded iframes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/bleed.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Bleed>Hey, I can use **Markdown** syntax here.</Bleed>\n\n<Bleed full>![Nextra](https://nextra.site/og.jpeg)</Bleed>\n\n<Bleed full>\n  <iframe\n    src=\"https://codesandbox.io/embed/swr-states-4une7\"\n    width=\"100%\"\n    height=\"500px\"\n    title=\"SWR-States\"\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Using useSWRImmutable for immutable resources\nDESCRIPTION: Demonstrates the use of useSWRImmutable hook for resources that never change, preventing any automatic revalidation. This is useful for static or immutable data that doesn't need refreshing.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/revalidation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Customizing Logo in JSX with Responsive Design\nDESCRIPTION: Creates a custom logo component for the top left of the documentation site, with responsive design considerations and localization support.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  logo: ({ locale }) => (\n    <>\n      <span className=\"mr-2 hidden font-extrabold md:inline\">Nextra</span>\n      <span className=\"hidden font-normal text-gray-600 md:inline\">\n        The Next Docs Builder\n      </span>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Next.js Root Layout for Nextra\nDESCRIPTION: This JSX code demonstrates how to import a global CSS file in the root layout component of a Next.js application using Nextra. The CSS is imported at the top level to ensure styles are applied across the entire application.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/custom-css/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../path/to/your/styles.css'\n\nexport default async function RootLayout({ children }) {\n  // ... Your layout logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Fetcher and Refresh Interval in SWR\nDESCRIPTION: Complete example showing how to configure a global JSON fetcher and refresh interval for all SWR hooks, with the ability to override settings in individual hooks.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/global-configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR, { SWRConfig } from 'swr'\n\nfunction Dashboard() {\n  const { data: events } = useSWR('/api/events')\n  const { data: projects } = useSWR('/api/projects')\n  const { data: user } = useSWR('/api/user', { refreshInterval: 0 }) // override\n\n  // ...\n}\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{\n        refreshInterval: 3000,\n        fetcher: (resource, init) =>\n          fetch(resource, init).then(res => res.json())\n      }}\n    >\n      <Dashboard />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Fetcher with Status Code and Error Object Handling\nDESCRIPTION: Customized fetcher function that handles non-2xx status codes and attaches additional error information to help with debugging and user feedback.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/error-handling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetcher = async url => {\n  const res = await fetch(url)\n\n  // If the status code is not in the range 200-299,\n  // we still try to parse and throw it.\n  if (!res.ok) {\n    const error = new Error('An error occurred while fetching the data.')\n    // Attach extra info to the error object.\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n}\n\n// ...\nconst { data, error } = useSWR('/api/user', fetcher)\n// error.info === {\n//   message: \"You are not authorized to access this resource.\",\n//   documentation_url: \"...\"\n// }\n// error.status === 403\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Docs Theme with Theme Object\nDESCRIPTION: Example configuration for the Nextra docs theme using a theme object in next.config.js. Demonstrates how to set up the theme with GitHub repository information, navigation options, and logo configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-without-meta-json/callout.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst theme: DocsThemeConfig = {\n  logo: <span>My Project</span>,\n  project: {\n    link: 'https://github.com/shuding/nextra',\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/master',\n  footer: {\n    text: 'Nextra Docs Template',\n  },\n}\n\nexport default theme\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Configuration File for Nextra\nDESCRIPTION: This snippet demonstrates how to create a basic theme configuration file (theme.config.jsx) for Nextra, which includes a logo and a project link.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/pagesOnly/one.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  logo: <span>My Project</span>,\\n  project: {\\n    link: 'https://github.com/shuding/nextra'\\n  }\\n  // ... other theme options\\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageZoom Component for Specific Images\nDESCRIPTION: Shows how to enable zoom for specific images when zoom is globally disabled using the ImageZoom component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/image/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { ImageZoom } from 'nextra/components'\n\n<ImageZoom src=\"/demo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing SWR Event Handlers for React Native\nDESCRIPTION: Example showing how to customize isOnline, isVisible, initFocus, and initReconnect functions for React Native environments with a custom cache provider.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/react-native.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    provider: () => new Map(),\n    isOnline() {\n      /* Customize the network state detector */\n      return true\n    },\n    isVisible() {\n      /* Customize the visibility state detector */\n      return true\n    },\n    initFocus(callback) {\n      /* Register the listener with your state provider */\n    },\n    initReconnect(callback) {\n      /* Register the listener with your state provider */\n    }\n  }}\n>\n  <App />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Accessing SWR Cache Provider in a Component\nDESCRIPTION: Example showing how to access the current cache provider and other SWR configurations including the mutate function from within a React component using the useSWRConfig hook.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Avatar() {\n  const { cache, mutate, ...extraConfig } = useSWRConfig()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component Abstraction with useSWR\nDESCRIPTION: This snippet creates a reusable Page component that encapsulates the data fetching logic for a specific page index, which can be composed in a parent component that manages pagination state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page({ index }) {\n  const { data } = useSWR(`/api/data?page=${index}`, fetcher)\n\n  // ... handle loading and error states\n\n  return data.map(item => <div key={item.id}>{item.name}</div>)\n}\n\nfunction App() {\n  const [pageIndex, setPageIndex] = useState(0)\n\n  return (\n    <div>\n      <Page index={pageIndex} />\n      <button onClick={() => setPageIndex(pageIndex - 1)}>Previous</button>\n      <button onClick={() => setPageIndex(pageIndex + 1)}>Next</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Line Numbers to JavaScript Code Block\nDESCRIPTION: Illustrates how to add line numbers to a JavaScript code block in Markdown.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```js showLineNumbers\nimport { useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Nextra Overview Page Component\nDESCRIPTION: Shows usage of the OverviewPage component with icon configuration. Passes file metadata and icon components as props.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{\n    WarningIcon: GitHubWarningIcon,\n    IdCardIcon,\n    FolderTreeIcon,\n    OneIcon,\n    TableIcon,\n    CardsIcon\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in MDX\nDESCRIPTION: Shows how to import the Callout component from nextra/components in an MDX file.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/callout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Placeholder Text with Localization\nDESCRIPTION: Defines a dynamic placeholder text for the search box that can adapt based on the user's selected locale, supporting internationalization.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  searchPlaceholder({ locale }) {\n    if (locale === 'zh-CN') return '搜索文档...'\n    return 'Search documentation...'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Blockquote Component with GitHub Alert Support in React\nDESCRIPTION: This code demonstrates how to create a custom Blockquote component that supports GitHub alert syntax using the withGitHubAlert function from Nextra. It shows how to handle different alert types and integrate with a custom callout component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/github-alert-syntax/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withGitHubAlert } from 'nextra/components'\n\nconst Blockquote = withGitHubAlert(({ type, ...props }) => {\n  return <MyCalloutComponent type={type} {...props} />\n}, MyBlockquoteComponent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Directory Base Path in Next.js Config for Nextra\nDESCRIPTION: This Next.js configuration example demonstrates how to set the contentDirBasePath option in the Nextra configuration. This option allows serving content from a different path, such as /docs or a nested path.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/content-directory/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  contentDirBasePath: '/docs' // Or even nested e.g. `/docs/advanced`\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Support in Nextra Configuration\nDESCRIPTION: Example of configuring internationalization (i18n) in Nextra. This shows how to set up locale detection, default locale, and locales definition for multi-language support.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  i18n: [\n    { locale: 'en', text: 'English' },\n    { locale: 'zh', text: '中文' },\n    { locale: 'de', text: 'Deutsch' },\n    { locale: 'ar', text: 'العربية', direction: 'rtl' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Function for MDX Path Page Rendering in Nextra\nDESCRIPTION: This async function reads the [[...mdxPath]]/page.jsx file content from examples/docs/src/app/docs, compiles it as MDX, and returns it as a React component. It's used to demonstrate the implementation of the catch-all route for the content directory.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/content-directory/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function MDXPathPage() {\n  const filename = '[[...mdxPath]]/page.jsx'\n  const rawMdx = `~~~jsx filename=\"${filename}\" showLineNumbers\n${(await fs.readFile(`../examples/docs/src/app/docs/${filename}`, 'utf8')).trimEnd()}\n~~~`\n  const rawJs = await compileMdx(rawMdx, { defaultShowCopyCode: true })\n  return <MDXRemote compiledSource={rawJs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for Next.js SSR with SWR Demo\nDESCRIPTION: JSX code to embed a CodeSandbox demonstration of SWR usage with Next.js server-side rendering. The iframe is styled with custom properties for display purposes and includes necessary permissions and sandbox attributes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/ru/examples/ssr.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-j9b2y?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Callout in MDX\nDESCRIPTION: Illustrates the usage of an error-type Callout with multiline content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/callout.mdx#2025-04-17_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"error\">\n  This is a dangerous feature that can cause everything to explode.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Layouts with the Cards Component\nDESCRIPTION: Demonstrates how to use the Cards component to create grid layouts of linked cards. Examples show cards with images, icons, titles, and links with different configurations.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards num={2}>\n  <Cards.Card arrow title=\"Documentation theme\" href=\"/docs/docs-theme/start\">\n    <>![Documentation theme](https://nextra.site/assets/docs-theme.png)</>\n  </Cards.Card>\n  <Cards.Card arrow title=\"Blog theme\" href=\"/docs/blog-theme/start\">\n    <>![Blog theme](https://nextra.site/assets/blog-theme.png)</>\n  </Cards.Card>\n</Cards>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Cards.Card icon={<CopyIcon />} title=\"Callout\" href=\"/foo\" />\n  <Cards.Card icon={<GitHubIcon />} title=\"Tabs\" href=\"/bar\" />\n  <Cards.Card icon={<MenuIcon />} title=\"Steps\" href=\"/baz\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Using _meta.global.js for Site-Wide Configuration in Nextra\nDESCRIPTION: Demonstrates how to use a single _meta.global.js file to define configuration for all pages. Folder items must include an 'items' field to define their contents.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  fruits: {\n    type: 'page',\n    title: '✨ Fruits',\n    items: {\n      apple: '🍎 Apple',\n      banana: '🍌 BaNaNa'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global SWR Configuration with useSWRConfig Hook\nDESCRIPTION: Example demonstrating how to use the useSWRConfig hook to access global configuration values, the mutate function, and the cache object.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/global-configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSWRConfig } from 'swr'\n\nfunction Component() {\n  const { refreshInterval, mutate, cache, ...restConfig } = useSWRConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Counter Component in MDX\nDESCRIPTION: Example of importing and using React components inside MDX files, demonstrating a clickable counter component with state management.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n## Hello MDX\n\nimport { useState } from 'react'\n\nexport function Counter({ children }) {\n  const [count, setCount] = useState(0)\n  return (\n    <button onClick={() => setCount(prev => prev + 1)}>\n      {children}\n      {count}\n    </button>\n  )\n}\n\n<Counter>**Clicks**: </Counter>\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Nextra Sidebar\nDESCRIPTION: Shows how to create a separator line between items in the Nextra sidebar by using a placeholder item with type 'separator'. An optional title can be added to the separator.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  '###': {\n    type: 'separator',\n    title: 'My Items' // Title is optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Playground Component Usage in MDX\nDESCRIPTION: Shows how to import and use the Playground component from Nextra to embed MDX content within an MDX document. The example demonstrates setting a source with markdown and customizing component rendering.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/playground/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Playground } from 'nextra/components'\n\n# Playground\n\nBelow is a playground component. It mixes into the rest of your MDX perfectly.\n\n<Playground\n  source=\"## Hello world\"\n  components={{ h2: props => <h2 {...props} className=\"myClass\" /> }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Code Block with Filename in MDX\nDESCRIPTION: Example demonstrating how to add a filename title to a code block using the filename meta string in MDX.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/advanced/code-highlighting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n```jsx filename=\"_app.js\"\nimport 'nextra-theme-docs/style.css'\n\nexport default function Nextra({ Component, pageProps }) {\n  const getLayout = Component.getLayout || (page => page)\n  return getLayout(<Component {...pageProps} />)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: MDX Example for Fetching GitHub Stars in Nextra\nDESCRIPTION: This MDX code snippet demonstrates how to create a server component that fetches GitHub stars for the Nextra repository and displays it inline within markdown content. It's designed to work with Next.js static rendering and Incremental Static Regeneration.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/ssg.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Stars() {\n  const response = await fetch(`https://api.github.com/repos/shuding/nextra`)\n  const repo = await response.json()\n  const stars = repo.stargazers_count || 0\n  return <b>{stars}</b>\n}\n\n> Nextra has <Stars /> stars on GitHub!\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Feedback Link with TypeScript\nDESCRIPTION: Configuration for the feedback link in a Nextra theme. This allows users to provide feedback on documentation pages, typically through a form or issue tracker.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  feedback: {\n    content: 'Question? Give us feedback →',\n    labels: 'feedback'\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme i18n with TypeScript\nDESCRIPTION: Configuration for internationalization (i18n) in a Nextra theme. This allows you to specify the default locale, supported languages, and custom translations for UI elements.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  i18n: [\n    { locale: 'en', text: 'English' },\n    { locale: 'zh', text: '中文' },\n    { locale: 'de', text: 'Deutsch' },\n    { locale: 'ar', text: 'العربية', direction: 'rtl' }\n  ],\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Page for Folder in Nextra\nDESCRIPTION: Sets up a folder with an index page by using the asIndexPage frontmatter property, which allows the folder to be expanded and display the MDX page when clicked in the sidebar.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: All Fruits\nsidebarTitle: 🍒 Fruits\nasIndexPage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Using Static Image Import in Nextra MDX\nDESCRIPTION: This snippet shows how to use the automatic static image import feature in Nextra. It uses standard Markdown syntax to display an image without needing to specify width and height manually.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/image.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n![Hello](/demo.png)\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Page Component in React for Nextra\nDESCRIPTION: This React component function generates a blog page by mapping through an array of blog post data and creating styled elements for each post. Each blog post includes a title, description, 'Read more' link, and formatted publication date.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/blog/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function BlogPage() {\n  return [\n    {\n      route:\n        'https://the-guild.dev/blog/nextra-4?utm_source=nextra.site&utm_campaign=blog_page&utm_content=blog_link',\n      title: 'Nextra 4',\n      description:\n        'App Router support, Turbopack support, compiled by React Compiler, new Rust-powered search Pagefind, RSC i18n, server/client components, smallest bundle size EVER for a Nextra-powered website, GitHub Alert Syntax, new _meta.global file and more.',\n      date: '2024-01-13'\n    },\n    {\n      route:\n        'https://the-guild.dev/blog/nextra-3?utm_source=nextra.site&utm_campaign=blog_page&utm_content=blog_link',\n      title: 'Nextra 3 – Your Favourite MDX Framework, Now on 🧪 Steroids',\n      description:\n        'MDX 3, new i18n, new _meta files with JSX support, more powerful TOC, remote MDX, better bundle size, MathJax, new code block styles, shikiji, ESM-only and more.',\n      date: '2023-12-12'\n    },\n    {\n      route:\n        'https://the-guild.dev/blog/nextra-2?utm_source=nextra.site&utm_campaign=blog_page&utm_content=blog_link',\n      title: 'Nextra 2 – Next.js Static Site Generator',\n      description:\n        'Here are what the new version of Nextra 2 Framework includes.',\n      date: '2023-01-24'\n    }\n  ].map(page => (\n    <div key={page.route} className=\"mt-12\">\n      <h3 className=\"text-2xl font-semibold\">{page.title}</h3>\n      <p className=\"my-6 leading-7 opacity-80\">\n        {page.description}{' '}\n        {page.date && <Link href={page.route}>Read more</Link>}\n      </p>\n      {page.date ? (\n        <time\n          dateTime={new Date(page.date).toISOString()}\n          className=\"text-sm opacity-50\"\n        >\n          {new Date(page.date).toLocaleDateString('en', {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric'\n          })}\n        </time>\n      ) : (\n        <span className=\"text-sm opacity-50\">Coming soon!</span>\n      )}\n    </div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Alert Syntax in Markdown\nDESCRIPTION: Shows how to use GitHub-style alert syntax in Markdown to create different types of admonitions. Examples include NOTE, TIP, IMPORTANT, WARNING, and CAUTION alerts with descriptive text.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Useful information that users should know, even when skimming content.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> [!TIP]\n>\n> Helpful advice for doing things better or more easily.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> [!IMPORTANT]\n>\n> Key information users need to know to achieve their goal.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING]\n>\n> Urgent info that needs immediate user attention to avoid problems.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> [!CAUTION]\n>\n> Advises about risks or negative outcomes of certain actions.\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Data with SWRConfig\nDESCRIPTION: Shows how to provide pre-fetched data as initial values for SWR hooks using the new fallback option.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    fallback: {\n      '/api/user': {\n        name: 'Bob'\n        // ...\n      },\n      '/api/items': {\n        // ...\n      }\n      // ...\n    }\n  }}\n>\n  <App />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Layout Component in JSX\nDESCRIPTION: A React component that enhances MDX content by providing custom components. It uses cloneElement to inject an Image component that replaces standard img tags in Markdown content.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout(props) {\n  return cloneElement(props.children, {\n    components: {\n      img: Image\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax Options\nDESCRIPTION: Example of configuring MathJax with custom macros in next.config.mjs\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = nextra({\n  latex: {\n    renderer: 'mathjax',\n    options: {\n      config: {\n        tex: {\n          macros: {\n            RR: '\\\\mathbb{R}'\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom React Component in _meta.js\nDESCRIPTION: This snippet shows how to define a custom React component for italicized text within a _meta.js file. It demonstrates using JSX elements to customize the appearance of titles in the sidebar.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Italic({ children, ...props }) {\n  return <i {...props}>{children}</i>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component in React\nDESCRIPTION: Example of implementing the Tabs component in a React JSX file. Demonstrates how to set up the component with array items and default index, and how to structure the Tabs.Tab children.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from 'nextra/components'\n\nconst items = ['1', '2', '3', '4']\nconst defaultIndex = 1\nconst Component = () => (\n  <Tabs items={items} defaultIndex={defaultIndex}>\n    <Tabs.Tab>1</Tab>\n    <Tabs.Tab>2</Tab>\n    <Tabs.Tab>3</Tab>\n    <Tabs.Tab>4</Tab>\n  </Tabs>\n)\nexport default Component\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GitHub Alert Syntax in Markdown\nDESCRIPTION: This snippet shows how to use GitHub alert syntax in Markdown files to create various types of callouts, including notes, tips, important messages, warnings, and cautions.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/github-alert-syntax/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Useful information that users should know, even when skimming content.\n\n> [!TIP]\n>\n> Helpful advice for doing things better or more easily.\n\n> [!IMPORTANT]\n>\n> Key information users need to know to achieve their goal.\n\n> [!WARNING]\n>\n> Urgent info that needs immediate user attention to avoid problems.\n\n> [!CAUTION]\n>\n> Advises about risks or negative outcomes of certain actions.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MDX Rendering with React Components\nDESCRIPTION: This async function demonstrates how to compile and render MDX content with React components using Nextra's compilation and remote rendering capabilities.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/mdx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Demo() {\n  const mdx = `import { Callout } from 'nextra/components'\n\n**Markdown With React Components**\n\n<Callout emoji=\"✅\">\n  **MDX** (the library), at its core, transforms MDX (the syntax) to JSX. It\n  receives an MDX string and outputs a _JSX string_. It does this by parsing the\n  MDX document to a syntax tree and then generates a JSX document from that\n  tree.\n</Callout>`\n  const rawJs = await compileMdx(`~~~mdx filename=\"example.mdx\"\n${mdx}\n~~~\n\nGenerates:\n\n${mdx}`)\n  return <MDXRemote compiledSource={rawJs} components={{ Callout }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Edit Link with TypeScript\nDESCRIPTION: Configuration for the \"Edit this page\" link in a Nextra theme. This allows users to contribute to documentation by editing pages directly on platforms like GitHub.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  editLink: {\n    text: 'Edit this page on GitHub'\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Functionality in Nextra\nDESCRIPTION: This snippet demonstrates how to configure the search functionality in Nextra. It shows how to enable or disable search, customize placeholder text, and add search shortcuts.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  search: {\n    component: <Input />,\n    placeholder: 'Search documentation...',\n    emptyResult: (\n      <span className=\"nx-block nx-select-none nx-p-8 nx-text-center nx-text-sm nx-text-gray-400\">\n        No results found.\n      </span>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Components in Nextra Theme\nDESCRIPTION: This snippet demonstrates how to provide custom React components to override default components in the Nextra theme. It allows for greater customization of the site's appearance and behavior.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  components: {\n    a: ({ href, children, ...props }) => {\n      return href.startsWith('/') ? (\n        <Link href={href} {...props}>\n          {children}\n        </Link>\n      ) : (\n        <a href={href} {...props}>\n          {children}\n        </a>\n      )\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Theme Settings\nDESCRIPTION: Configuration file for customizing the Nextra Blog theme, including footer content, meta tags, navigation links, and theme settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/start/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  footer: <p>MIT 2023 © Nextra.</p>,\n  head: ({ title, meta }) => (\n    <>\n      {meta.description && (\n        <meta name=\"description\" content={meta.description} />\n      )}\n      {meta.tag && <meta name=\"keywords\" content={meta.tag} />}\n      {meta.author && <meta name=\"author\" content={meta.author} />}\n    </>\n  ),\n  readMore: 'Read More →',\n  postFooter: null,\n  darkMode: false,\n  navs: [\n    {\n      url: 'https://github.com/shuding/nextra',\n      name: 'Nextra'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Playground Component with Loading Fallback\nDESCRIPTION: Demonstrates using the Playground component with a fallback element that displays while the playground is loading. This is useful for improving user experience during content rendering.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/playground/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Playground } from 'nextra/components'\n\n<Playground\n  source=\"## Hello world\"\n  components={{ h2: props => <h2 {...props} className=\"myClass\" /> }}\n  fallback={<div>Loading playground...</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Twoslash Implementation in Markdown\nDESCRIPTION: Example of implementing Twoslash functionality in a TypeScript code block within Markdown. Shows type hints, error handling, and hover functionality with a Todo interface example.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/twoslash/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts twoslash\n// @errors: 2540\ninterface Todo {\n  title: string\n}\n\nconst todo: Readonly<Todo> = {\n  title: 'Delete inactive users'.toUpperCase()\n  //  ^?\n}\n\ntodo.title = 'Hello'\n\nNumber.parseInt('123', 10)\n//      ^|\n               // Just comments, so Popup will be\n               // not behind the viewport of `<code>`\n               // element due his `position: absolute` style\n               //\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Full Layout for Pages in _meta.js\nDESCRIPTION: This snippet illustrates how to set a full layout for specific pages in a Nextra site using the _meta.js configuration. It shows how to use the 'layout' property in the theme configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  about: {\n    theme: {\n      layout: 'full'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in globals.css\nDESCRIPTION: This CSS snippet shows how to import Tailwind CSS and optionally Nextra theme styles in a globals.css file. It also includes a dark mode variant.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/tailwind-css/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n/* Optional: import Nextra theme styles */\n@import 'nextra-theme-docs/style.css'; /* or nextra-theme-blog/style.css */\n\n@variant dark (&:where(.dark *));\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Code Block in Markdown\nDESCRIPTION: This code block represents a Mermaid diagram that illustrates the relationship between consumers and services in an API ecosystem. It's used as an example in the Demo component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/mermaid/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph TD;\nsubgraph AA [Consumers]\nA[Mobile app];\nB[Web app];\nC[Node.js client];\nend\nsubgraph BB [Services]\nE[REST API];\nF[GraphQL API];\nG[SOAP API];\nend\nZ[GraphQL API];\nA --> Z;\nB --> Z;\nC --> Z;\nZ --> E;\nZ --> F;\nZ --> G;\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer Edit Link Text\nDESCRIPTION: Defines the text shown on the link that directs users to edit the current page on the repository, with support for localization.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  footerEditLink: ({ locale }) => 'Edit this page on GitHub'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Callout in MDX\nDESCRIPTION: Shows how to create a warning-type Callout with custom text content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/callout.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"warning\">This API will be deprecated soon.</Callout>\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Layout Component\nDESCRIPTION: Implements the main theme layout component that wraps MDX content and provides theme-specific styling and structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\nimport { Steps } from 'nextra/components'\nimport OldDocs from './old.mdx'\n```\n\n----------------------------------------\n\nTITLE: Creating a RegEx-Based Multiple Key Mutation Helper\nDESCRIPTION: Function to mutate multiple cache keys that match a regex pattern. It leverages the cache provider API to scan through all keys and apply mutations to those matching the provided pattern.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction useMatchMutate() {\n  const { cache, mutate } = useSWRConfig()\n  return (matcher, ...args) => {\n    if (!(cache instanceof Map)) {\n      throw new Error(\n        'matchMutate requires the cache provider to be a Map instance'\n      )\n    }\n\n    const keys = []\n\n    for (const key of cache.keys()) {\n      if (matcher.test(key)) {\n        keys.push(key)\n      }\n    }\n\n    const mutations = keys.map(key => mutate(key, ...args))\n    return Promise.all(mutations)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Folder Structure in Nextra Sidebar\nDESCRIPTION: This snippet shows how to create a folder structure in the Nextra sidebar using the _meta.json file. It demonstrates how to define folder titles, order pages, and structure nested content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"index\": \"Introduction\",\n  \"getting-started\": \"Getting Started\",\n  \"-- More\": {\n    \"type\": \"separator\",\n    \"title\": \"More\"\n  },\n  \"advanced\": \"Advanced\",\n  \"about\": {\n    \"title\": \"About\",\n    \"type\": \"page\"\n  },\n  \"contact\": {\n    \"title\": \"Contact ↗\",\n    \"type\": \"page\",\n    \"href\": \"https://twitter.com/shuding_\",\n    \"newWindow\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Playground with Properly Styled MDX Components\nDESCRIPTION: Shows how to prevent unstyled elements in the Playground by importing useMDXComponents from the mdx-components file. This approach maintains consistent styling with the rest of the document while allowing custom component overrides.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/playground/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Playground } from 'nextra/components'\nimport { useMDXComponents } from '../path/to/my/mdx-components'\n\n<Playground\n  source=\"## Hello world\"\n  components={useMDXComponents({\n    h2: props => <h2 {...props} className=\"myClass\" />\n  })}\n  fallback={<div>Loading playground...</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Component in JSX\nDESCRIPTION: Replaces the default search bar with a custom search component, such as Algolia, allowing for more advanced search capabilities.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Search from 'your-search'\n\nexport default {\n  customSearch: <Search />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Cards in Nextra\nDESCRIPTION: An example of implementing a group of three cards with icons, titles, and links using the Cards component. Each card points to different documentation pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Cards.Card\n    icon={<WarningIcon />}\n    title=\"Callout\"\n    href=\"/docs/built-ins/callout\"\n  />\n  <Cards.Card\n    icon={<CardsIcon />}\n    title=\"Tabs\"\n    href=\"/docs/built-ins/tabs\"\n  />\n  <Cards.Card\n    icon={<OneIcon />}\n    title=\"Steps\"\n    href=\"/docs/built-ins/steps\"\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Customizing Project Link in Nextra Navbar Component\nDESCRIPTION: Example of customizing the project link in the Navbar component by specifying a custom URL and icon. This replaces the default GitHub link with a GitLab repository link.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/navbar/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar\n  projectLink=\"https://gitlab.com/inkscape/inkscape\"\n  projectIcon={\n    <svg width=\"24\" height=\"24\" fill=\"currentColor\" viewBox=\"0 0 256 256\">\n      <path d=\"m231.9 169.8l-94.8 65.6a15.7 15.7 0 0 1-18.2 0l-94.8-65.6a16.1 16.1 0 0 1-6.4-17.3L45 50a12 12 0 0 1 22.9-1.1L88.5 104h79l20.6-55.1A12 12 0 0 1 211 50l27.3 102.5a16.1 16.1 0 0 1-6.4 17.3Z\" />\n    </svg>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Cache Provider Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SWR cache providers, specifying the required methods: get, set, and delete. This interface ensures custom cache implementations follow the expected contract.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Cache<Data> {\n  get(key: string): Data | undefined\n  set(key: string, value: Data): void\n  delete(key: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Next.js Production Server with Nextra\nDESCRIPTION: This snippet shows the commands to build the Next.js project and start it in production mode. It uses the 'npm2yarn' placeholder for package manager flexibility.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/components/install-nextra-theme.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Using Static Image in Markdown\nDESCRIPTION: Demonstrates the simplified Markdown syntax for images that automatically gets optimized by Next.js Image component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/image/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Hello](/demo.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Logo with TypeScript\nDESCRIPTION: Configuration for the logo display in a Nextra theme. This allows customization of the site logo that appears in the navigation bar.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  logo: (\n    <>\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"currentColor\"\n          d=\"M14.683 14.828a4.055 4.055 0 0 1-1.272.858a4.002 4.002 0 0 1-4.875-1.45l-1.658 1.119a6.063 6.063 0 0 0 1.621 1.62a5.963 5.963 0 0 0 2.148.903a6.035 6.035 0 0 0 3.542-.35a6.048 6.048 0 0 0 1.907-1.284c.272-.271.52-.571.734-.889l-1.658-1.119a4.147 4.147 0 0 1-.489.592z M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10s10-4.477 10-10S17.523 2 12 2m0 2c4.418 0 8 3.582 8 8s-3.582 8-8 8s-8-3.582-8-8s3.582-8 8-8\"\n        />\n      </svg>\n      <span style={{ marginLeft: '.4em', fontWeight: 800 }}>\n        My Cool Project\n      </span>\n    </>\n  ),\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer Text with Dynamic Content\nDESCRIPTION: Sets the text displayed on the left side of the footer, supporting dynamic content like the current year and localization.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  footerText: ({ locale }) => `MIT ${new Date().getFullYear()} © Nextra.`\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Components Implementation\nDESCRIPTION: Creates navigation components including navbar with top-level items and footer for the custom theme.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\nimport { Steps } from 'nextra/components'\nimport OldDocs from './old.mdx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Navigation Links with TypeScript\nDESCRIPTION: Configuration for navigation links in a Nextra theme. This allows you to add custom links to the navigation, such as links to API documentation or external resources.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  navigation: {\n    prev: { title: 'Home', href: '/' },\n    next: { title: 'About', href: '/about' }\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Page Metadata in JavaScript\nDESCRIPTION: Exports a metadata object that defines the sidebar title and main title for a Nextra page. Uses ES6 module syntax to export configuration values.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/title/1-meta.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  sidebarTitle: 'from sidebarTitle',\n  title: 'from title'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Card in Nextra\nDESCRIPTION: An example of implementing a standalone card with an icon, title, link, and arrow. This demonstrates how to use Cards.Card without the Cards wrapper.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards.Card\n  icon={<BoxIcon />}\n  title=\"About Nextra\"\n  href=\"/about\"\n  arrow\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Logo in Nextra Navbar Component\nDESCRIPTION: Example of customizing the logo in the Navbar component by adding an SVG icon and styled text. This allows you to replace the default Nextra logo with your own project branding.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/navbar/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar\n  logo={\n    <>\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"currentColor\"\n          d=\"M14.683 14.828a4.055 4.055 0 0 1-1.272.858a4.002 4.002 0 0 1-4.875-1.45l-1.658 1.119a6.063 6.063 0 0 0 1.621 1.62a5.963 5.963 0 0 0 2.148.903a6.035 6.035 0 0 0 3.542-.35a6.048 6.048 0 0 0 1.907-1.284c.272-.271.52-.571.734-.889l-1.658-1.119a4.147 4.147 0 0 1-.489.592z M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10s10-4.486 10-10S17.514 2 12 2zm0 2c2.953 0 5.531 1.613 6.918 4H5.082C6.469 5.613 9.047 4 12 4zm0 16c-4.411 0-8-3.589-8-8c0-.691.098-1.359.264-2H5v1a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2h2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-1h.736c.166.641.264 1.309.264 2c0 4.411-3.589 8-8 8z\"\n        />\n      </svg>\n      <span style={{ marginLeft: '.4em', fontWeight: 800 }}>\n        My Cool Project\n      </span>\n    </>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Class in C#\nDESCRIPTION: A C# class implementation of the Character type with a Name property of String type.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// type Character {\npublic class Character {\n  // name: String\n  public String Name { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Width Content with Bleed Component\nDESCRIPTION: Demonstrates how to use the Bleed component to create content that extends beyond the normal content boundaries. This example shows an image that extends to the full width of the container.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>![Mountain](/img.jpeg)</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Adding Dropdown Menus to Nextra Navbar\nDESCRIPTION: Demonstrates how to add dropdown menus to the Nextra navbar using type 'menu' and the items option. This example creates a Company menu with About and Contact Us links.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  company: {\n    title: 'Company',\n    type: 'menu',\n    items: {\n      about: {\n        title: 'About',\n        href: '/about'\n      },\n      contact: {\n        title: 'Contact Us',\n        href: 'mailto:hi@example.com'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Steps from Table of Contents\nDESCRIPTION: Demonstrates how to modify the Steps component implementation to exclude its headings from appearing in the Table of Contents by using HTML h3 elements instead of markdown syntax.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/steps/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<Steps>\n- ### Step 1\n+ {<h3>Step 1</h3>}\n\nContents for step 1.\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo Link Destination or Disabling It\nDESCRIPTION: Controls where the logo links to, either by providing a custom URL or by disabling the link functionality completely.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logoLink: '/about'\n}\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting in JSX with MDX\nDESCRIPTION: Example showing how to highlight specific lines in a JSX code block using MDX syntax. The example highlights lines 1 and 3-5 using the {1,3-5} meta string.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/advanced/code-highlighting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```jsx {1,3-5}\nimport 'nextra-theme-docs/style.css'\n\nexport default function Nextra({ Component, pageProps }) {\n  const getLayout = Component.getLayout || (page => page)\n  return getLayout(<Component {...pageProps} />)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Docsearch with TypeScript\nDESCRIPTION: Configuration for Algolia DocSearch integration in a Nextra theme. This provides advanced search capabilities to help users find content across the documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  docsRepositoryBase: 'https://github.com/shuding/nextra/tree/main/docs',\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Cascade Layers\nDESCRIPTION: CSS configuration that defines cascade layers and imports Nextra theme styles into a specific layer for controlled styling hierarchy.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/customize-the-cascade-layers/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer nextra, my-base;\n\n@import 'nextra-theme-docs/dist/style.css' layer(nextra);\n\n@layer my-base {\n  /* my base styles */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js I18n in next.config.mjs\nDESCRIPTION: Configuration for enabling internationalization in a Nextra project by setting up the supported locales in next.config.mjs. This snippet shows how to import the Nextra package and configure it with multiple language options.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/i18n.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.js'\n})\n\nexport default withNextra({\n  i18n: {\n    locales: ['en', 'zh', 'de'],\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Root Layout Implementation in Next.js\nDESCRIPTION: Creates the root layout component for the Nextra application, importing necessary theme components and wrapping them around the page content.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\nimport { Steps } from 'nextra/components'\nimport OldDocs from './old.mdx'\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting in JavaScript Code Block\nDESCRIPTION: Illustrates how to highlight specific lines in a JavaScript code block using Markdown syntax.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```js {1,4-5}\nimport { useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based API Response Example\nDESCRIPTION: This plaintext example shows the structure of a cursor-based API response, which includes both the data array and a nextCursor value for pagination.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /users?cursor=123&limit=10\n{\n  data: [\n    { name: 'Alice' },\n    { name: 'Bob' },\n    { name: 'Cathy' },\n    ...\n  ],\n  nextCursor: 456\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nextra Blog Theme\nDESCRIPTION: Command to install the required dependencies for setting up a Nextra Blog site, including Next.js, React, Nextra, and the blog theme package.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/start/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i next react react-dom nextra nextra-theme-blog\n```\n\n----------------------------------------\n\nTITLE: Setting Up Page Metadata in Nextra\nDESCRIPTION: Example of defining page metadata using frontmatter in MDX files for Nextra. Shows how to set title, description and configure the sidebar display options.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-without-meta-json/callout.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n---\ntitle: Advanced\ndescription: Advanced usage of the Nextra theme\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Options in JavaScript\nDESCRIPTION: This code snippet defines the configuration object for a Nextra project. It sets up theme options including logo, project link, chat link, and repository base. It also includes custom header components and configurations for specific pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-local-pages/one/bar.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRouter } from 'next/router'\nimport { useConfig } from 'nextra-theme-docs'\nimport { Header } from './components/Header'\n\nexport default {\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/main',\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – Nextra'\n    }\n  },\n  logo: (\n    <span>\n      <svg height=\"20\" viewBox=\"0 0 361 70\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M114.913 33.2763v28.7642h-11.57V12.9447h11.059v8.3253h.574c1.151-2.7808 2.941-4.9933 5.369-6.6377 2.471-1.6871 5.433-2.5307 8.887-2.5307 3.262 0 6.096.730744 8.503 2.19224 2.449 1.4615 4.343 3.5443 5.682 6.2485 1.382 2.6614 2.058 5.8094 2.028 9.4441v32.0439h-11.57V32.7032c0-2.9003-.764-5.1773-2.291-6.8309-1.527-1.6963-3.625-2.5435-6.292-2.5435-1.821 0-3.433.4203-4.834 1.2619-1.359.8415-2.429 2.0354-3.212 3.5815-.741 1.5462-1.111 3.3746-1.111 5.4848l-.722.0192ZM187.094 51.4811c-.297 3.1298-1.289 5.8733-2.976 8.2304-1.644 2.3144-3.858 4.1173-6.642 5.4087-2.74 1.2479-5.936 1.8718-9.588 1.8718-6.036 0-10.929-1.8909-14.677-5.6728-3.706-3.8246-5.559-9.4121-5.559-16.7636v-2.6614c0-4.5911.764-8.6198 2.291-12.0861 1.569-3.5099 3.817-6.2166 6.744-8.1212 2.97-1.9473 6.453-2.9204 10.451-2.9204 5.7 0 10.231 1.6097 13.593 4.83 3.361 3.1776 5.284 7.6264 5.767 13.3473h-11.57c-.127-2.9854-.871-5.1346-2.234-6.4464-1.32-1.3545-3.239-2.0314-5.755-2.0314-2.814 0-4.888 1.0764-6.224 3.2301-1.335 2.1101-2.017 5.4976-2.044 10.1617v3.3755c0 5.0268.652 8.6195 1.957 10.7789 1.347 2.1595 3.47 3.2389 6.371 3.2389 2.388 0 4.249-.6246 5.582-1.8729 1.376-1.292 2.143-3.3426 2.302-6.1532l11.57.0027-.003-.004ZM228.009 32.8592c-.849-1.2074-1.925-2.1182-3.227-2.7315-1.26-.657-2.748-.9851-4.466-.9851-2.984 0-5.326.9402-7.025 2.8205-1.657 1.8377-2.621 4.5264-2.891 8.066l-.021 3.9577h14.52v9.1437h-14.478v19.9093h-11.57V52.129h-6.723v-9.1437h6.723V39.399c.255-3.6742 1.164-6.9144 2.729-9.7214 1.606-2.8496 3.795-5.0628 6.568-6.6376 2.814-1.6176 6.024-2.4264 9.629-2.4264 2.449 0 4.664.2886 6.642.8659 1.979.5773 3.597 1.3545 4.855 2.3307l-1.265 9.0482v-.002ZM272.458 57.2171h-22.766l-3.866 10.8234h-12.396l22.334-55.0958h11.089l22.406 55.0958h-12.417l-3.887-10.8234h.503Zm-19.305-9.4634h15.804l-7.796-21.7372h-.212l-7.796 21.7372ZM323.471 36.0438c-1.53-.1704-2.902-.2549-4.11-.2549-4.338 0-7.265 1.4615-8.781 4.3845v31.8671h-11.57V26.0347h10.912v6.5627h.361c1.017-2.2278 2.456-3.9726 4.317-5.2354 1.861-1.3054 3.972-1.9581 6.335-1.9581 1.017 0 1.946.1064 2.791.3197l-.255 10.3202ZM358.431 62.0405c-.658.8968-1.578 1.7945-2.763 2.6932-1.185.899-2.645 1.6528-4.384 2.2611-1.738.6093-3.812.9134-6.224.9134-3.209 0-6.111-.7094-8.708-2.1281-2.598-1.4188-4.67-3.4908-6.217-6.2158-1.505-2.7686-2.291-6.1241-2.36-10.0674v-2.8754c0-4.1387.757-7.7212 2.271-10.7456 1.556-3.0244 3.7-5.3409 6.431-6.9502 2.772-1.6094 5.929-2.414 9.47-2.414 4.68 0 8.418 1.1754 11.217 3.5263 2.841 2.3081 4.572 5.7585 5.192 10.3501h-11.186c-.34-1.9922-1.096-3.4696-2.266-4.4311-1.129-.9616-2.621-1.4424-4.478-1.4424-2.642 0-4.664.9925-6.066 2.9775-1.359 1.9423-2.054 4.8549-2.087 8.7377v2.6932c0 4.139.737 7.2079 2.213 9.2066 1.518 1.9987 3.797 2.9981 6.836 2.9981 2.345 0 4.195-.5134 5.547-1.5401v-7.4981h-6.756v-8.0091h18.326v19.2959h.002Z\" fill=\"currentColor\"/>\n        <path d=\"M62.5369 0c2.7734 0 5.1175 1.97284 5.6262 4.6641l13.5197 71.2039c.6469 3.406-1.6175 6.6858-5.0622 7.3291-3.4448.6434-6.7554-1.5985-7.4016-5.0046l-2.8175-14.8506H13.3654L10.548 77.989c-.6469 3.406-3.9582 5.648-7.40237 5.0046C-.29648 82.3496-2.56058 79.07-1.91368 75.664L11.6061 4.66023C12.1148 1.96897 14.4589.00001 17.2323.00001L62.5369 0Zm-6.7324 45.6294L45.9103 17.3931h-11.205l-9.1326 28.2363h30.2218Z\" fill=\"currentColor\"/>\n      </svg>\n      <span\n        style={{\n          marginLeft: '.4em',\n          fontWeight: 800,\n          display: 'inline-block'\n        }}\n      >\n        Nextra\n      </span>\n    </span>\n  ),\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  chat: {\n    link: 'https://discord.gg/hEM84NMkRv'\n  },\n  footer: {\n    text: (\n      <span>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\">\n          Nextra\n        </a>\n        .\n      </span>\n    )\n  },\n  head: null,\n  // ... other theme options\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Full-width Image with Bleed Component\nDESCRIPTION: Uses Nextra's Bleed component to render a full-width demo image in the documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Bleed>![Nextra Example](/demo.png)</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra for HTML Table Styling in Next.js\nDESCRIPTION: This code snippet shows how to configure Nextra in a Next.js project to style HTML table elements. It uses the 'whiteListTagsStyling' option to specify which HTML tags should be replaced with MDX components for custom styling.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/table/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  whiteListTagsStyling: ['table', 'thead', 'tbody', 'tr', 'th', 'td']\n})\n\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Error Handling with ErrorBoundary in Suspense Mode\nDESCRIPTION: Shows how to handle errors when using SWR with Suspense by implementing an ErrorBoundary component. In Suspense mode, errors need to be caught with error boundaries rather than being handled within the component.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/suspense.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary fallback={<h2>Could not fetch posts.</h2>}>\n  <Suspense fallback={<h1>Loading posts...</h1>}>\n    <Profile />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Using useSWRInfinite for Index-Based Pagination\nDESCRIPTION: This example demonstrates how to use useSWRInfinite for index-based pagination, with a getKey function that determines the API endpoint for each page and handling of end-of-data conditions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// A function to get the SWR key of each page,\n// its return value will be accepted by `fetcher`.\n// If `null` is returned, the request of that page won't start.\nconst getKey = (pageIndex, previousPageData) => {\n  if (previousPageData && !previousPageData.length) return null // reached the end\n  return `/users?page=${pageIndex}&limit=10` // SWR key\n}\n\nfunction App() {\n  const { data, size, setSize } = useSWRInfinite(getKey, fetcher)\n  if (!data) return 'loading'\n\n  // We can now calculate the number of all users\n  let totalUsers = 0\n  for (let i = 0; i < data.length; i++) {\n    totalUsers += data[i].length\n  }\n\n  return (\n    <div>\n      <p>{totalUsers} users listed</p>\n      {data.map(users => {\n        // `data` is an array of each page's API response.\n        return users.map(user => <div key={user.id}>{user.name}</div>)\n      })}\n      <button onClick={() => setSize(size + 1)}>Load More</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Object as useSWR Key in JavaScript\nDESCRIPTION: Demonstrates how to pass an object directly as the key to the useSWR hook, which is then received by the fetcher function. This approach is supported in SWR 1.1.0 and later.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/arguments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Sidebar with TypeScript\nDESCRIPTION: Configuration for the sidebar in a Nextra theme. This allows customization of the sidebar behavior, such as collapsing functionality and footer content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  sidebar: {\n    toggleButton: true,\n    defaultMenuCollapseLevel: 1\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button to JavaScript Code Block\nDESCRIPTION: Shows how to add a copy button to a JavaScript code block in Markdown.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```js copy\nconsole.log('hello, world')\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Types with TypeScript\nDESCRIPTION: Example of how to implement TypeScript types for Nextra theme configuration, showing the proper way to type the theme configuration object using DocsThemeConfig interface.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/typescript/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst config: DocsThemeConfig = {\n  // Your theme configuration\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Options in JSON\nDESCRIPTION: This snippet shows how to configure various options for a Nextra theme in the nextra.config.js file. It includes settings for the logo, project link, chat link, docsRepositoryBase, and footer.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes/bar.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": \"nextra-theme-docs\",\n  \"themeConfig\": {\n    \"logo\": <React.Component>,\n    \"project\": {\n      \"link\": \"https://github.com/shuding/nextra\"\n    },\n    \"chat\": {\n      \"link\": \"https://discord.gg/hEM84NMkRv\"\n    },\n    \"docsRepositoryBase\": \"https://github.com/shuding/nextra\",\n    \"footer\": {\n      \"text\": \"Nextra Docs Template\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Markdown Lists with Mixed Formatting\nDESCRIPTION: This snippet demonstrates how to create hierarchical nested lists in Markdown with a combination of unordered lists (using hyphens) and ordered lists (using numbers). It also shows how to incorporate bold text formatting within list items.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/lists/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **foo**\n  - bar\n  - **baz**\n    - qux\n    - **qwe**\n      1. he\n      1. **be**\n         1. wo\n         1. **be** da\n            - da\n            - ba\n```\n\n----------------------------------------\n\nTITLE: Customizing Git Timestamp Display\nDESCRIPTION: Configures the component used to display the timestamp of the last commit for the current page, with localization support.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  gitTimestamp: 'Last updated on'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sponsor Button Component in MDX\nDESCRIPTION: Renders a button that links to GitHub sponsors page with specific styling and accessibility attributes.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/sponsors/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"mb-12 text-center\">\n  <Button\n    className=\"mt-3 inline-block !px-6 hover:!no-underline\"\n    variant=\"outline\"\n    href=\"https://github.com/sponsors/dimaMachina\"\n    as=\"a\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n  >\n    {'Become a Sponsor'}\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra\nDESCRIPTION: Next.js configuration file that sets up Nextra with the blog theme and points to a theme configuration file. This creates the necessary wrapper for the Nextra functionality.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  theme: 'nextra-theme-blog',\n  themeConfig: './theme.config.js'\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Migrating Component Import Changes\nDESCRIPTION: Example showing migration of component imports from nextra-theme-docs to nextra/components, removing individual Th, Tr, and Td exports in favor of Table namespace.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { Table, Th, Tr, Td } from 'nextra/components'\n+ import { Table } from 'nextra/components'\n\n// ...\n\n- <Th>\n+ <Table.Th>\n- <Tr>\n+ <Table.Tr>\n- <Td>\n+ <Table.Td>\n```\n\n----------------------------------------\n\nTITLE: Mutating Data Based on Current Values in SWR (React)\nDESCRIPTION: Example demonstrating how to update a part of your data based on the current cached value. This approach is useful when you need to modify specific items within a collection while preserving the rest.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/todos', async todos => {\n  // let's update the todo with ID `1` to be completed,\n  // this API returns the updated data\n  const updatedTodo = await fetch('/api/todos/1', {\n    method: 'PATCH',\n    body: JSON.stringify({ completed: true })\n  })\n\n  // filter the list, and return it with the updated item\n  const filteredTodos = todos.filter(todo => todo.id !== '1')\n  return [...filteredTodos, updatedTodo]\n})\n```\n\n----------------------------------------\n\nTITLE: Local Mutation Without Revalidation in SWR (React)\nDESCRIPTION: Example showing how to update data locally without revalidation and how to handle updates when the API returns updated data directly. This approach can be more efficient when the API returns the new state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/mutation.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nmutate('/api/user', newUser, false) // use `false` to mutate without revalidation\nmutate('/api/user', updateUser(newUser), false) // `updateUser` is a Promise of the request,\n// which returns the updated document\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Link in Nextra Theme\nDESCRIPTION: Sets the URL for the button in the top right corner of the documentation site, pointing to the project's repository or website.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  projectLink: 'https://gitlab.com/librewolf-community/browser'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Front Matter Hooks in Nextra\nDESCRIPTION: Example of implementing custom front matter hooks in Nextra. This shows how to use front matter data to modify component behavior based on page metadata.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – SiteName'\n    }\n  },\n  unstable_faviconGlyph: '🔥',\n  toc: {\n    component: TOC,\n    extraContent: <ExtraContent />,\n    float: true,\n    title: 'Table of Contents'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Social Links with TypeScript\nDESCRIPTION: Configuration for social media links in a Nextra theme. This allows adding links to GitHub, Discord, Twitter, or other social platforms in the navigation bar.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – SWR'\n    }\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering SWR GitHub Releases in React\nDESCRIPTION: A React component that fetches the latest SWR library releases from GitHub's API and renders them as Markdown. It processes the first five releases, formats GitHub usernames as links, and displays release dates in Spanish format.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/change-log.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Markdown from 'markdown-to-jsx'\n\nexport async function ReleasesRenderer() {\n  const releases = await fetch(\n    `https://api.github.com/repos/vercel/swr/releases`\n  ).then(res => res.json())\n  return (\n    <Markdown>\n      {releases\n        // we keep the most recent 5 releases here\n        .slice(0, 5)\n        .map(release => {\n          const body = release.body\n            .replace(/&#39;/g, \"'\")\n            .replace(\n              /@([a-zA-Z0-9_-]+)(?=(,| ))/g,\n              '<a href=\"https://github.com/$1\" target=\"_blank\" rel=\"noopener\">@$1</a>'\n            )\n          return `## <a href=\"${\n            release.html_url\n          }\" target=\"_blank\" rel=\"noopener\">${release.tag_name}</a>\nPublicado en ${new Date(release.published_at).toLocaleDateString(\n            'es'\n          )}.\\n\\n${body}`\n        })\n        .join('\\n\\n')}\n    </Markdown>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Links to Nextra Sidebar\nDESCRIPTION: Demonstrates how to add external links to the Nextra sidebar by defining an item with href property in the _meta.js file. This can be used for both external and relative internal links.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  github_link: {\n    title: 'Nextra',\n    href: 'https://github.com/shuding/nextra'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWRConfig Usage for Global Configuration\nDESCRIPTION: Demonstrates the basic structure of using SWRConfig to wrap components and provide global options for all SWR hooks.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/global-configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={options}>\n  <Component />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for MDX File Processing in Nextra\nDESCRIPTION: This code snippet imports the necessary modules for processing and displaying MDX content in Nextra, including Node.js file system promises, Nextra's MDX compiler, UI components, and the MDX Remote renderer.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/content-directory/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport { compileMdx } from 'nextra/compile'\nimport { FileTree, Steps } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Using a Single Card Component in MDX\nDESCRIPTION: MDX code example demonstrating how to use a single Cards.Card component without wrapping it in a Cards container.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Cards.Card\n  icon={<BoxIcon />}\n  title=\"About Nextra\"\n  href=\"/about\"\n  arrow\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Search in Nextra Configuration\nDESCRIPTION: JavaScript configuration snippet to disable the search functionality entirely in a Nextra project by setting search to false in next.config.mjs.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/search/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  search: false\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Markdown Component in JavaScript/JSX\nDESCRIPTION: This code snippet imports a React component named ExampleDynamicMarkdownImport from a specific file path. This component is likely responsible for dynamically importing and rendering Markdown content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/dynamic-markdown-import.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleDynamicMarkdownImport } from '@app/_components/example-dynamic-markdown-import.tsx'\n```\n\n----------------------------------------\n\nTITLE: Using the LocalStorage Cache Provider with SWRConfig\nDESCRIPTION: Example of applying the localStorage-based cache provider to a React application through SWRConfig, enabling persistent caching across page reloads.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: localStorageProvider }}>\n  <App />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Configuring interval-based revalidation in SWR\nDESCRIPTION: Sets up automatic data revalidation at regular intervals (every 1000ms) using the refreshInterval option in useSWR. This fetches updated data periodically while the component is visible on screen.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/revalidation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/todos', fetcher, { refreshInterval: 1000 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Dropdown in Nextra Theme\nDESCRIPTION: This code configures the language dropdown in the Nextra theme configuration file, specifying supported languages and their display names.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/i18n/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: [\n  { locale: 'en', name: 'English' },\n  { locale: 'zh', name: '中文' },\n  { locale: 'de', name: 'Deutsch' },\n  { locale: 'ar', name: 'العربية', direction: 'rtl' }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Base Path for Edit Links\nDESCRIPTION: Example showing how to set the docsRepositoryBase prop to specify the path to documentation files in a GitHub repository, enabling features like 'Edit this page' links.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout docsRepositoryBase=\"https://github.com/shuding/nextra/tree/main/docs\">\n  {children}\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Page Metadata in Markdown\nDESCRIPTION: This snippet demonstrates how to configure page-specific metadata in a Markdown file for Nextra. It includes settings for the title, description, and other page-level configurations.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes/bar.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Welcome to Nextra\ndescription: Nextra is a framework on top of Next.js, Contentlayer, and MDX.\n---\n\n# Welcome to Nextra\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic MDX Example with Npm2Yarn\nDESCRIPTION: Defines an async Page component that demonstrates Npm2Yarn functionality by compiling MDX content with a code block that has npm2yarn metadata, then rendering it with MDXRemote component and Tabs component support.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/npm2yarn/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function Page() {\n  const codeBlock = `\\`\\`\\`sh npm2yarn\nnpm i -D @graphql-eslint/eslint-plugin\n\\`\\`\\``\n  const rawJs = await compileMdx(`${codeBlock}\n## Usage\n~~~md filename=\"Markdown\" /npm2yarn/\n${codeBlock}\n~~~`)\n  return <MDXRemote compiledSource={rawJs} components={{ $Tabs: Tabs }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Titles and Icons in _meta.js\nDESCRIPTION: This code snippet demonstrates how to configure page titles and add icons in the _meta.js file for Nextra. It shows various ways to set titles, including using strings, JSX elements, and objects with additional properties.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GitHubIcon } from 'nextra/icons'\n\nexport default {\n  index: 'My Homepage',\n  contact: (\n    <Italic className=\"my-class\">\n      <GitHubIcon height=\"20\" />\n      Contact Us\n    </Italic>\n  ),\n  about: {\n    title: 'About Us'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Schema for Nextra Navbar\nDESCRIPTION: TypeScript type definitions for creating dropdown menus in the Nextra navbar. The MenuSchema requires a type property set to 'menu' and an items record containing menu items.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype MenuItemSchema =\n  | TitleSchema\n  | { title: TitleSchema }\n  | (LinkSchema & { type?: 'page' | 'doc' })\n  | SeparatorSchema\n\ntype MenuSchema = {\n  type: 'menu'\n  title?: TitleSchema\n  items: Record<string, MenuItemSchema>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR with SWRConfig in React Native\nDESCRIPTION: Basic example of wrapping a React Native application with SWRConfig to provide global configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/react-native.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig\n  value={{\n    // ...\n  }}\n>\n  <App>\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Image Component in MDX\nDESCRIPTION: Shows how to import and use the Next.js Image component directly in MDX files with specific dimensions.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/image/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Image from 'next/image'\n\n<Image src=\"/demo.png\" alt=\"Hello\" width={500} height={500} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Table of Contents in MDX with Nextra\nDESCRIPTION: Shows how to use the `<TOC />` component in a Nextra MDX file to display a table of contents. This component automatically generates a TOC from the headings in the content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes-test/foo.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TOC } from 'nextra-theme-docs'\n \n<TOC />\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Block Indexing in Nextra Search\nDESCRIPTION: JavaScript configuration to disable indexing of code blocks in search while keeping the main search functionality enabled in next.config.mjs.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/search/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  search: { codeblocks: false }\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Switch Labels for Localization\nDESCRIPTION: Example of customizing the theme switcher option labels for different languages or localization purposes, showing Russian language labels in this case.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout\n  themeSwitch={{\n    dark: 'Темный',\n    light: 'Светлый',\n    system: 'Системный'\n  }}\n>\n  {children}\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSG Page Component with GitHub Data Fetching\nDESCRIPTION: Async component that fetches GitHub repository data and renders it using MDX. Includes examples of both async components and functions for data fetching.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/ssg/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function SSGPage() {\n  const starsComponent = `{/* Via async components */}\nexport async function Stars() {\n  const response = await fetch('https://api.github.com/repos/shuding/nextra')\n  const repo = await response.json()\n  const stars = repo.stargazers_count\n  return <b>{stars}</b>\n}\n\n{/* Via async functions */}\nexport async function getUpdatedAt() {\n  const response = await fetch('https://api.github.com/repos/shuding/nextra')\n  const repo = await response.json()\n  const updatedAt = repo.updated_at\n  return new Date(updatedAt).toLocaleDateString()\n}\n\n<Callout emoji=\"🏆\">\n  Nextra has <Stars /> stars on GitHub!\n\n  Last repository update _{await getUpdatedAt()}_.\n</Callout>`\n  const mdx = `${starsComponent}\n\nThe number above was generated at build time via MDX server components. With\n[Incremental Static Regeneration](https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration)\nenabled, it will be kept up to date.\n\n## Example\n\nHere's the MDX code for the example above:\n\n~~~mdx filename=\"MDX\"\n${starsComponent}\n~~~\n`\n  const rawJs = await compileMdx(mdx)\n  return <MDXRemote compiledSource={rawJs} components={{ Callout }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TSDoc Component Documentation Example in MDX\nDESCRIPTION: An example of how to use the TSDoc component to generate a props table for the TSDoc component itself. It imports the necessary functions and renders a documentation table based on the component's props.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/tsdoc/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { generateDocumentation, TSDoc } from 'nextra/tsdoc'\n\n<TSDoc\n  definitions={generateDocumentation({\n    code: `\nimport type { TSDoc } from 'nextra/tsdoc'\ntype MyProps = React.ComponentProps<typeof TSDoc>\nexport default MyProps`\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Link in Nextra Navbar Component\nDESCRIPTION: Example of customizing the chat link in the Navbar component by specifying a Twitter profile URL and Twitter icon. This allows users to add social media links to the navbar.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/navbar/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar\n  chatLink=\"https://twitter.com/shuding_\"\n  chatIcon={\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 248 204\">\n      <path\n        fill=\"currentColor\"\n        d=\"M221.95 51.29c.15 2.17.15 4.34.15 6.53 0 66.73-50.8 143.69-143.69 143.69v-.04c-27.44.04-54.31-7.82-77.41-22.64 3.99.48 8 .72 12.02.73 22.74.02 44.83-7.61 62.72-21.66-21.61-.41-40.56-14.5-47.18-35.07a50.338 50.338 0 0 0 22.8-.87C27.8 117.2 10.85 96.5 10.85 72.46v-.64a50.18 50.18 0 0 0 22.92 6.32C11.58 63.31 4.74 33.79 18.14 10.71a143.333 143.333 0 0 0 104.08 52.76 50.532 50.532 0 0 1 14.61-48.25c20.34-19.12 52.33-18.14 71.45 2.19 11.31-2.23 22.15-6.38 32.07-12.26a50.69 50.69 0 0 1-22.2 27.93c10.01-1.18 19.79-3.86 29-7.95a102.594 102.594 0 0 1-25.2 26.16z\"\n      />\n    </svg>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Required Nextra Components\nDESCRIPTION: Imports necessary components for Npm2Yarn functionality, including the compileMdx function, Tabs component, and MDXRemote component from Nextra packages.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/npm2yarn/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { compileMdx } from 'nextra/compile'\nimport { Tabs } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Substring Highlighting in JavaScript Code Block\nDESCRIPTION: Demonstrates how to highlight specific substrings in a JavaScript code block using Markdown syntax.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```js /useState/\nimport { useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Project Link Icon with React Component in JSX\nDESCRIPTION: Overrides the default GitHub icon with a custom icon (Gitlab in this example) for the project link in the top right corner. Uses a React component that receives locale information.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Gitlab from '@geist-ui/react-icons/gitlab'\n\nexport default {\n  projectLinkIcon: ({ locale }) => <Gitlab />\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Syntax\nDESCRIPTION: Example of GitHub Flavored Markdown table syntax with alignment options (left, center, right) and formatting within cells.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component in MDX\nDESCRIPTION: Example of implementing the Tabs component in an MDX file with multiple language tabs. Shows how to configure tab items including disabled tabs and set a default selected tab.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['JavaScript', 'C++', {label:'C', disabled: true}, 'Python']} defaultIndex={1}>\n  <Tabs.Tab>\n    ```js filename=\"hi.js\"\n    import { useState, useEffect } from 'react';\n    ```\n  </Tabs.Tab>\n  <Tabs.Tab>\n    ```cpp filename=\"hi.cpp\"\n    #include <iostream>\n    ```\n  </Tabs.Tab>\n  <Tabs.Tab>\n    ```c filename=\"hi.c\"\n    #include <stdio.h>\n    ```\n  </Tabs.Tab>\n  <Tabs.Tab>\n    ```python filename=\"hello.py\"\n    print('Hello, world!')\n    ```\n  </Tabs.Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme and Navigation in JavaScript\nDESCRIPTION: This snippet defines the configuration for a Nextra project, including theme settings, navigation structure, and external link handling. It customizes the appearance and behavior of the documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/foo.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRouter } from 'next/router'\nimport { useConfig } from 'nextra-theme-docs'\n\nconst logo = (\n  <svg height=\"20\" viewBox=\"0 0 361 70\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M114.913 33.2763v28.7642h-11.57V12.9496h11.059v8.3416h.575c1.129-2.7485 2.93-4.9425 5.401-6.5821 2.493-1.6396 5.572-2.4595 9.237-2.4595 3.388 0 6.339.7268 8.853 2.1805 2.535 1.4328 4.496 3.4498 5.88 6.0511 1.407 2.5804 2.099 5.6242 2.078 9.1314v32.4279h-11.57V32.5285c0-3.0684-.852-5.4735-2.557-7.2152-1.683-1.7418-3.986-2.6127-6.908-2.6127-2.026 0-3.815.4203-5.369 1.2609-1.532.8406-2.727 2.0574-3.584 3.6502-.857 1.5719-1.275 3.4716-1.275 5.6646zm51.358 29.797c-3.964 0-7.456-.9008-10.476-2.7024-3.02-1.8226-5.38-4.3784-7.082-7.6674-1.701-3.3099-2.552-7.1885-2.552-11.6357 0-4.469.851-8.3476 2.552-11.6357 1.702-3.289 4.062-5.8339 7.082-7.6346 3.02-1.8226 6.512-2.7339 10.476-2.7339 3.964 0 7.456.9113 10.476 2.7339 3.02 1.8007 5.38 4.3456 7.082 7.6346 1.701 3.2881 2.552 7.1667 2.552 11.6357 0 4.4472-.851 8.3258-2.552 11.6357-1.702 3.289-4.062 5.8448-7.082 7.6674-3.02 1.8016-6.512 2.7024-10.476 2.7024zm.064-8.7938c1.979 0 3.687-.6464 5.124-1.9392 1.458-1.2928 2.578-3.0465 3.36-5.2612.781-2.2146 1.172-4.7115 1.172-7.4906 0-2.801-.391-5.3087-1.172-7.5233-.782-2.2147-1.902-3.9465-3.36-5.1956-1.437-1.271-3.145-1.9065-5.124-1.9065-2.001 0-3.741.6355-5.22 1.9065-1.458 1.2491-2.589 2.9809-3.392 5.1956-.782 2.2146-1.172 4.7223-1.172 7.5233 0 2.7791.39 5.276 1.172 7.4906.803 2.2147 1.934 3.9684 3.392 5.2612 1.479 1.2928 3.219 1.9392 5.22 1.9392zm51.017-32.8527c3.986 0 7.094 1.0793 9.322 3.2378 2.249 2.1585 3.374 5.3359 3.374 9.532v28.9056h-11.058V35.8878c0-1.9828-.532-3.5371-1.596-4.6628-1.043-1.1476-2.471-1.7214-4.283-1.7214-1.405 0-2.653.3454-3.742 1.0361-1.089.6688-1.947 1.6287-2.573 2.8795-.604 1.2291-.906 2.6998-.906 4.4123v24.209h-11.058V35.8878c0-1.9828-.532-3.5371-1.596-4.6628-1.043-1.1476-2.471-1.7214-4.283-1.7214-1.427 0-2.685.3454-3.774 1.0361-1.089.6688-1.947 1.6287-2.573 2.8795-.626 1.2291-.938 2.6998-.938 4.4123v24.209h-11.058V21.5455h10.582v6.957h.437c.734-2.3494 2.098-4.2217 4.092-5.6168 2.014-1.4169 4.336-2.1253 6.965-2.1253 2.714 0 5.081.6464 7.098 1.9392 2.038 1.2927 3.505 3.1573 4.401 5.5938h.532c.978-2.3276 2.514-4.1704 4.609-5.5283 2.116-1.3799 4.538-2.0698 7.266-2.0698zm51.624 41.6465h-10.582v-6.8047h-.437c-.712 2.3276-2.096 4.1921-4.155 5.5938-2.037 1.3799-4.473 2.0698-7.308 2.0698-3.453 0-6.416-.8842-8.889-2.6526-2.451-1.7902-4.325-4.293-5.624-7.5082-1.298-3.2153-1.948-6.936-1.948-11.1622 0-4.1812.661-7.8682 1.981-11.0608 1.341-3.1927 3.241-5.6846 5.698-7.4757 2.479-1.8128 5.41-2.7192 8.794-2.7192 2.856 0 5.292.6901 7.308 2.0703 2.037 1.3584 3.41 3.1788 4.122 5.4614h.373V1.46826h11.058V62.0763h-.391zm-19.426-8.7938c1.979 0 3.676-.6246 5.091-1.8738 1.415-1.271 2.503-2.9918 3.262-5.1627.76-2.1928 1.14-4.6845 1.14-7.4752 0-2.7907-.38-5.2824-1.14-7.4752-.759-2.1928-1.847-3.9136-3.262-5.1627-1.415-1.271-3.101-1.9065-5.059-1.9065-2.024 0-3.762.6464-5.22 1.9392-1.436 1.2928-2.535 3.0356-3.296 5.2284-.739 2.1709-1.108 4.6408-1.108 7.4097 0 2.7688.369 5.2387 1.108 7.4096.761 2.1928 1.86 3.9247 3.296 5.1956 1.458 1.2709 3.207 1.9064 5.252 1.9064z\" fill=\"currentColor\"/>\n    <path d=\"M340.87 62.0763h-11.058V29.9159c0-2.3276-.609-4.1375-1.827-5.4296-1.218-1.2928-2.845-1.9392-4.88-1.9392-1.532 0-2.888.3672-4.069 1.1016-1.181.7125-2.112 1.7433-2.795 3.0924-.661 1.3273-.991 2.924-.991 4.7902v30.545h-11.058V21.5455h10.582v7.0214h.437c.935-2.4298 2.449-4.3347 4.544-5.7147 2.116-1.38 4.559-2.0699 7.329-2.0699 2.922 0 5.434.6683 7.538 2.005 2.103 1.3366 3.72 3.1902 4.848 5.5609 1.15 2.3712 1.724 5.0993 1.724 8.1844v25.5437h-.324zm-54.43.0001c-3.322 0-6.273-.6137-8.853-1.8412-2.581-1.2273-4.598-2.9262-6.053-5.0966-1.456-2.1703-2.184-4.6844-2.184-7.5424 0-2.5366.468-4.6844 1.404-6.4435.936-1.759 2.206-3.1901 3.81-4.2934 1.605-1.1033 3.425-1.9719 5.46-2.6057 2.035-.6338 4.155-1.0976 6.362-1.3913 2.581-.3375 4.674-.6312 6.277-.8813 1.604-.2719 2.769-.6746 3.495-1.2054.748-.5305 1.122-1.3254 1.122-2.3847v-.1959c0-1.7371-.532-3.0683-1.596-3.9935-1.042-.9252-2.593-1.3878-4.652-1.3878-2.207 0-3.932.4614-5.177 1.3842-1.244.9011-2.059 2.0791-2.443 3.5342l-10.412-.3919c.532-2.8795 1.67-5.3358 3.412-7.3689 1.743-2.0549 4.006-3.6283 6.788-4.7203 2.804-1.1138 6.042-1.6706 9.713-1.6706 2.559 0 5.028.3017 7.407.9049 2.401.5814 4.539 1.4878 6.415 2.7193 1.898 1.2315 3.399 2.8142 4.503 4.7483 1.106 1.9123 1.659 4.1812 1.659 6.8065v35.4161h-10.666v-7.2511h-.34c-.661 1.4805-1.563 2.7901-2.707 3.9289-1.122 1.1388-2.484 2.0463-4.09 2.7225-1.583.6544-3.432.9816-5.545.9816zm3.089-8.3037c1.849 0 3.485-.4179 4.908-1.2538 1.423-.8359 2.545-1.9501 3.365-3.3428.819-1.4145 1.229-2.9809 1.229-4.6992v-6.0822c-.312.2501-.8.4833-1.465.6997-.642.1947-1.372.3782-2.189.5511-.818.1511-1.636.2937-2.454.4284-.819.1129-1.551.2153-2.194.3072-1.423.2066-2.707.5522-3.854 1.0368-1.124.4846-2.014 1.1387-2.667 1.9623-.632.8236-.947 1.8433-.947 3.0591 0 1.7807.66 3.1246 1.981 4.0317 1.344.8852 2.941 1.3281 4.794 1.3281l-.507 2.9736z\" fill=\"currentColor\"/>\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M30.8982 9.93838c.1686-1.60503 2.4018-2.15065 3.2915-.80457l4.796 7.25019c1.1491 1.7372.7787 4.0621-.8452 5.3146-3.2058 2.4674-8.8486 1.3587-10.9316-2.1539l-3.9295-6.63471c-.7246-1.22346.5709-2.65021 1.879-2.06962 2.0713.92169 4.5754.70475 5.7398-.89279zm-23.41447 5.48292l13.58147 4.3038 2.3089 3.8984c-4.0144 2.6982-10.8217 1.7778-15.89037-1.7084.06875-2.2532-.02656-4.4894 0-6.4938zm34.45357 12.0512l-5.3696 4.1193-4.4418-6.7179c4.0253-2.7054 10.1893-1.6107 9.8114 2.5986zm2.4555 10.0261c-4.767 3.7785-13.8783 4.0192-19.2023.5084l-10.69568-7.0573c-1.21842-.8044-1.70039-2.3727-1.16013-3.7295 3.0549-7.6765 15.55351-11.1411 24.06851-6.6262l7.4897 3.9624c1.4638.7745 2.049 2.5619 1.3041 4.0546l-1.8643 3.7257zm-14.1163 23.1001l-9.6721-14.625c8.4987-1.2609 17.8827.3648 23.3083 4.0406-3.9373 4.8115-9.1132 8.5041-13.6362 10.5844zm-12.9683-15.3289l10.0168 15.144c-5.6453.8813-10.77588-1.6689-12.68988-6.2133-.91344-2.1703-.78016-4.8333.36973-7.1103.54531-1.0827 1.37394-1.5674 2.30335-1.8204zm-2.92825-9.6049c-.73991-.4887-1.2075-1.2726-1.30988-2.1316-.08797-.7344.13734-1.4896.62375-2.0818l.14391-.1754 9.49127 6.2664-2.5555 2.3183c-2.21608-.9725-4.52745-2.6228-6.39355-4.1959zm31.90205 6.9415l2.3152 2.0534c-4.4168 4.2481-11.4125 6.6442-18.1588 6.193l14.2662-9.4249c.5327.395 1.0677.7958 1.5774 1.1785zm4.1327-1.5292c-1.0349-.8796-2.1228-1.7542-3.1219-2.4969l1.7337-2.3563 3.5345 2.3347c.5559.3672.9552.9256 1.1194 1.5672.1628.635.09 1.3097-.2039 1.8932l-.0596.1185c-.4393.7459-1.2666 1.1722-2.1365 1.1041-.3651-.0286-.699-.1517-.8657-.265v.1005zm.7982-15.2372l-2.347-.805 1.7349-2.3578c1.2419-.4543 2.6442-.1519 3.5285.834.4722.5266.7387 1.209.7496 1.9201.0108.6977-.2261 1.378-.6644 1.9114-.1866.2266-.2133.242-.4786.4143l-2.523-.9264v-.0006zm-6.0504-9.5761l-.0728-.0405c-.3218-.3775-.7434-.6628-1.221-.8218-.5797-.1927-1.2106-.1941-1.7911-.0041l-.1695.062-.7459 3.4841-2.8083-1.4865 3.3393-4.5379 5.7084 1.9562-2.2391 1.3885zm-11.462-10.02225c.516.20285.983.52715 1.3593.94355l.0445.0492 1.673 2.5282-2.8287 2.1728-1.9562-5.70871 1.7081.00036z\" fill=\"#FF0080\"/>\n  </svg>\n)\n\nexport default {\n  logo,\n  useNextSeoProps() {\n    const { asPath } = useRouter()\n    if (asPath !== '/') {\n      return {\n        titleTemplate: '%s – Nextra'\n      }\n    }\n  },\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  chat: {\n    link: 'https://discord.gg/hEM84NMkRv'\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/main/docs',\n  footer: {\n    text: (\n      <span>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Nextra\n        </a>\n        .\n      </span>\n    )\n  },\n  editLink: {\n    text: 'Edit this page on GitHub →'\n  },\n  feedback: {\n    content: 'Question? Give us feedback →',\n    labels: 'feedback'\n  },\n  sidebar: {\n    defaultMenuCollapseLevel: 1,\n    toggleButton: true\n  },\n  toc: {\n    backToTop: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Script for Server Builds in Nextra\nDESCRIPTION: Adding a postbuild script to package.json for server builds that runs Pagefind indexing after the application is built.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/search/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"postbuild\": \"pagefind --site .next/server/app --output-path public/_pagefind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Path Image Import in Markdown\nDESCRIPTION: This example demonstrates how to import an image using a relative path in Markdown. The image is referenced as the SWR logo and is located in a parent directory's public/favicon folder.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/images.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![SWR logo](../../../../public/favicon/android-chrome-192x192.png)\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote MDX Content Component in TypeScript/JSX\nDESCRIPTION: React component that reads and compiles MDX content from filesystem, using Nextra's compilation utilities. Handles file reading, MDX compilation, and content rendering with specific formatting options.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/remote/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function Example() {\n  const filename = '/graphql-eslint/[[...slug]]/page.tsx'\n  const pageContent = await fs.readFile(\n    `../examples/swr-site/app/[lang]/${filename}`,\n    'utf8'\n  )\n  const rawJs = await compileMdx(\n    `~~~jsx filename=\"app${filename}\" {27} showLineNumbers\n${pageContent\n  .replace(\n    \"lang: 'en',\\n    ...(route && { slug: route.split('/') })\",\n    \"slug: route.split('/')\"\n  )\n  .trimEnd()}\\n~~~`,\n    { defaultShowCopyCode: true }\n  )\n  return <MDXRemote compiledSource={rawJs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Function Signature Documentation in MDX\nDESCRIPTION: An example showing how to generate documentation for a function signature using the TSDoc component. It uses the flattened option to display the function's signature documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/tsdoc/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { generateDocumentation, TSDoc } from 'nextra/tsdoc'\n\n<TSDoc\n  definitions={generateDocumentation({\n    code: \"export type { generateDocumentation as default } from 'nextra/tsdoc'\",\n    flattened: true\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Links in Nextra Configuration\nDESCRIPTION: Example of configuring navigation links in Nextra. This demonstrates adding external and internal links to the navigation bar, including conditional rendering based on page path.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  navigation: {\n    prev: true,\n    next: true\n  },\n  // The links shown at the top right of the website\n  navs: [\n    // A link\n    {\n      url: 'https://github.com/shuding/nextra',\n      text: 'GitHub'\n    },\n    // A link that contains an icon\n    {\n      url: 'https://example.com',\n      text: (\n        <span>\n          🎁 <span>Example</span>\n        </span>\n      )\n    },\n    // A menu\n    {\n      text: (\n        <span>\n          🧠 <span>Menu</span>\n        </span>\n      ),\n      links: [\n        {\n          url: 'https://example.com/1',\n          text: 'Example 1'\n        },\n        {\n          url: '/2',\n          text: 'Example 2'\n        }\n      ]\n    },\n    // A menu that appears conditionally\n    {\n      match: path => path.startsWith('/docs'),\n      text: 'Documentation Menu',\n      links: [\n        {\n          url: '/docs/1',\n          text: 'Example 1'\n        },\n        {\n          url: '/docs/2',\n          text: 'Example 2'\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Info Callout in MDX\nDESCRIPTION: Shows how to use the Callout component with the 'info' type for displaying useful information.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"info\">\n  Useful information that users should know, even when skimming content.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra and Next.js via npm\nDESCRIPTION: This code snippet shows how to install Nextra and Next.js using npm. It installs the latest version of Next.js and the Nextra package along with its default theme.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/qux.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next nextra nextra-theme-docs\n```\n\n----------------------------------------\n\nTITLE: Importing Cards Component and Icons in MDX\nDESCRIPTION: This code snippet shows the import statements for using the Cards component along with various icons in a Nextra MDX file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardsIcon, OneIcon, WarningIcon, BoxIcon } from '@components/icons'\nimport { compileMdx } from 'nextra/compile'\nimport { Cards } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Implementing Mermaid Diagram Demo Component in React\nDESCRIPTION: This React component demonstrates how to compile and render a Mermaid diagram using Nextra's MDX and Mermaid components. It includes a sample Mermaid code block and usage example.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/mermaid/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function Demo() {\n  const mermaidCodeblock = `\\`\\`\\`mermaid\ngraph TD;\nsubgraph AA [Consumers]\nA[Mobile app];\nB[Web app];\nC[Node.js client];\nend\nsubgraph BB [Services]\nE[REST API];\nF[GraphQL API];\nG[SOAP API];\nend\nZ[GraphQL API];\nA --> Z;\nB --> Z;\nC --> Z;\nZ --> E;\nZ --> F;\nZ --> G;\n\\`\\`\\``\n  const rawJs = await compileMdx(`${mermaidCodeblock}\n## Usage\n~~~md filename=\"Markdown\"\n${mermaidCodeblock}\n~~~\n`)\n  return <MDXRemote compiledSource={rawJs} components={{ Mermaid }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic _meta.js Configuration for Page Titles\nDESCRIPTION: This snippet shows a simple configuration in _meta.js to set custom titles for pages in a Nextra site. It maps file names to their corresponding display titles in the navigation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  index: 'My Homepage',\n  contact: 'Contact Us',\n  about: 'About Us'\n}\n```\n\n----------------------------------------\n\nTITLE: Custom MDX Layout Component for Sponsor Cards\nDESCRIPTION: Exports a default function that customizes the MDX layout by injecting custom components for images and links. This transforms standard markdown images and links into styled Cards components with specific properties.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/sponsors/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MdxLayout(props) {\n  return cloneElement(props.children, {\n    components: {\n      img: props => (\n        <Image {...props} className=\"object-cover [aspect-ratio:12/6.3]\" />\n      ),\n      a({ children, href }) {\n        const { alt } = children.props\n        return (\n          <Cards.Card\n            href={href}\n            title={alt.replace(/ preview$/i, '')}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            arrow\n            className=\"!no-underline\"\n          >\n            {children}\n          </Cards.Card>\n        )\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the RegEx Mutation Helper in a Component\nDESCRIPTION: Example of using the custom useMatchMutate hook in a button component to revalidate all cache keys that start with '/api/'.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button() {\n  const matchMutate = useMatchMutate()\n  return (\n    <button onClick={() => matchMutate(/^\\/api\\//)}>\n      Revalidate all keys start with \"/api/\"\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Important Callout in MDX\nDESCRIPTION: Shows the usage of the Callout component with the 'important' type for key information.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"important\">\n  Key information users need to know to achieve their goal.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC Title in Nextra front matter\nDESCRIPTION: Shows how to customize the title of the table of contents in a Nextra page using YAML front matter. The toc.title property allows setting a custom heading for the TOC.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes-test/foo.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page\ntoc:\n  title: On This Page\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting Prefixed CSS File for Tailwind CSS Compatibility\nDESCRIPTION: Exports a CSS file with prefixed Tailwind CSS layers to support projects using Tailwind CSS v3 while the theme uses v4.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@layer v4-utilities\n@layer v4-base\n```\n\n----------------------------------------\n\nTITLE: Importing Complete Page in Nextra\nDESCRIPTION: This snippet demonstrates how to import an entire page from another MDX file. It imports the IndexPage component from a relative path and renders it, passing the current props.params as a parameter.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/markdown-import.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport IndexPage from '../../index.mdx'\n\n<IndexPage params={props.params} />\n```\n\n----------------------------------------\n\nTITLE: Overriding Type Display with @remarks in TypeScript\nDESCRIPTION: A TypeScript example demonstrating how to override the displayed type in documentation using the @remarks tag with backticks. This allows customizing how types appear in the generated documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/tsdoc/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype Example = {\n  /**\n   * **Foo** description.\n   * @default \"dimaMachina\"\n   * @remarks `\"not dimaMachina\"`\n   */\n  foo: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Callout as React Component\nDESCRIPTION: Demonstrates how to use the Callout component within a React functional component.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/callout.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n\nconst Component = () => {\n  return (\n    <Callout emoji=\"👾\">\n      **Space Invaders** is a 1978 shoot 'em up arcade game developed by\n      Tomohiro Nishikado.\n    </Callout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Nextra Callout Component\nDESCRIPTION: Demonstrates how to import the Callout component from Nextra and implement it with custom type and emoji parameters. The component is used to display an info message with a bomb emoji.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/app/_components/external.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n\n<Callout type=\"info\" emoji=\"💣\">\n  This `<Callout>` comes from `external.mdx`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Zoom Disable in Theme Config\nDESCRIPTION: Shows how to disable image zoom functionality globally by configuring the theme configuration file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/image/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'nextra/components'\n\nexport default {\n  // ... your other configurations\n  components: {\n    img: props => <Image {...props} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message Annotations with Twoslash\nDESCRIPTION: Example showing how to add custom log, error, warning, and annotation messages in Twoslash code blocks using special comment directives.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/twoslash/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @log: Custom log message\nconst a = 1\n// @error: Custom error message\nconst b = 1\n// @warn: Custom warning message\nconst c = 1\n// @annotate: Custom annotation message\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Nextra\nDESCRIPTION: Next.js configuration file that integrates Nextra with the blog theme. It sets up the theme and points to the theme configuration file.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/blog/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  theme: 'nextra-theme-blog',\n  themeConfig: './theme.config.js'\n})\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Rendering APIDocs Component for Search in JSX\nDESCRIPTION: A JSX component that renders API documentation for the Search component in Nextra. The APIDocs component takes a componentName prop to specify which component's documentation to display.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/search/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIDocs componentName=\"Search\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme for Documentation\nDESCRIPTION: This code snippet defines the configuration for a Nextra documentation site. It sets up the theme, navigation structure, footer content, and various other options to customize the appearance and behavior of the site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/hidden-route-should-have-theme-context/1-level/2-level/foo.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from 'next/router'\nimport { useConfig } from 'nextra-theme-docs'\nimport { Footer } from './components/Footer'\nimport Navigation from './components/Navigation'\nimport HeaderLogo from './components/HeaderLogo'\nimport { Discord, Github } from './components/Social'\n\nconst github = 'https://github.com/shuding/nextra'\n\nexport default {\n  logo: HeaderLogo,\n  project: {\n    link: github\n  },\n  chat: {\n    link: 'https://discord.gg/hEM84NMkRv'\n  },\n  docsRepositoryBase: github,\n  footer: {\n    component: Footer\n  },\n  navigation: Navigation,\n  sidebar: {\n    defaultMenuCollapseLevel: 1,\n    toggleButton: true\n  },\n  toc: {\n    float: true,\n    title: 'On This Page'\n  },\n  gitTimestamp: false,\n  darkMode: true,\n  nextThemes: {\n    defaultTheme: 'dark'\n  },\n  primaryHue: {\n    dark: 204,\n    light: 212\n  },\n  banner: {\n    key: '2.0-release',\n    text: (\n      <a href=\"https://nextra.site\" target=\"_blank\" rel=\"noreferrer\">\n        🎉 Nextra 2.0 is released. Read more →\n      </a>\n    )\n  },\n  head: (\n    <>\n      <meta name=\"msapplication-TileColor\" content=\"#ffffff\" />\n      <meta name=\"theme-color\" content=\"#ffffff\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta httpEquiv=\"Content-Language\" content=\"en\" />\n      <meta name=\"description\" content=\"Nextra: the Next.js site builder\" />\n      <meta name=\"og:description\" content=\"Nextra: the Next.js site builder\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:image\" content=\"https://nextra.vercel.app/og.png\" />\n      <meta name=\"twitter:site:domain\" content=\"nextra.vercel.app\" />\n      <meta name=\"twitter:url\" content=\"https://nextra.vercel.app\" />\n      <meta name=\"og:title\" content=\"Nextra: Next.js static site generator\" />\n      <meta name=\"og:image\" content=\"https://nextra.vercel.app/og.png\" />\n      <meta name=\"apple-mobile-web-app-title\" content=\"Nextra\" />\n      <link rel=\"icon\" href=\"/favicon.svg\" type=\"image/svg+xml\" />\n      <link rel=\"icon\" href=\"/favicon.png\" type=\"image/png\" />\n      <link\n        rel=\"icon\"\n        href=\"/favicon-dark.svg\"\n        type=\"image/svg+xml\"\n        media=\"(prefers-color-scheme: dark)\"\n      />\n      <link\n        rel=\"icon\"\n        href=\"/favicon-dark.png\"\n        type=\"image/png\"\n        media=\"(prefers-color-scheme: dark)\"\n      />\n    </>\n  ),\n  useNextSeoProps() {\n    const { asPath } = useRouter()\n    if (asPath !== '/') {\n      return {\n        titleTemplate: '%s – Nextra'\n      }\n    }\n  },\n  search: {\n    loading: 'Loading...'\n  },\n  editLink: {\n    text: 'Edit this page on GitHub →'\n  },\n  /* Disable search\n  search: {\n    component: (\n      <div>\n        <p>Search (Ctrl+K)</p>\n      </div>\n    )\n  },\n  */\n  navbar: {\n    component: (\n      <div className=\"flex gap-2 items-center\">\n        <Github />\n        <Discord />\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesetting in Nextra with _meta.js\nDESCRIPTION: Sets the typesetting style to 'article' for a more elegant article page appearance. This is done by configuring the theme property in the _meta.js file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  about: {\n    theme: {\n      typesetting: 'article'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-filling SWR Cache with Existing Data\nDESCRIPTION: Demonstrates how to pre-fill the SWR cache with existing data using the fallbackData option. This is useful for providing initial data before the actual fetch occurs.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/prefetching.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nuseSWR('/api/data', fetcher, { fallbackData: prefetchedData })\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interfaces with Tabs Component\nDESCRIPTION: Demonstrates how to use the Tabs component to organize content in multiple tabs. This example shows tabs for different package managers with descriptions of each.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs items={['pnpm', 'npm', 'yarn']}>\n  <Tabs.Tab>**pnpm**: Fast, disk space efficient package manager.</Tabs.Tab>\n  <Tabs.Tab>**npm** is a package manager for the JavaScript programming language.</Tabs.Tab>\n  <Tabs.Tab>**Yarn** is a software packaging system.</Tabs.Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Logging State Changes in SWR\nDESCRIPTION: Example demonstrating how SWR handles state changes during the data fetching lifecycle, showing all three states (data, error, isValidating) being logged.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/advanced/performance.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { data, error, isValidating } = useSWR('/api', fetcher)\n  console.log(data, error, isValidating)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Theme in _meta.js\nDESCRIPTION: This code shows how to configure the theme for specific pages using the _meta.js file in Nextra. It demonstrates disabling the sidebar for a particular page.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  about: {\n    theme: {\n      sidebar: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MDX pages for Nextra documentation\nDESCRIPTION: This code snippet demonstrates how to create MDX pages for Nextra documentation. It shows the file structure and content of an example page, including markdown syntax and React components.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/qux.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Welcome to Nextra\\n \\nHello, world!\\n \\n<CustomComponent />\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra and Next.js dependencies\nDESCRIPTION: This snippet shows how to install Nextra and its required Next.js dependencies using npm or pnpm. It includes options for documentation and blog themes.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/1-one.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nextra next react react-dom\n\n# Only for documentation theme\nnpm i nextra-theme-docs\n# Only for blog theme\nnpm i nextra-theme-blog\n```\n\n----------------------------------------\n\nTITLE: Implementing a Banner Component in Nextra with React\nDESCRIPTION: Example of how to integrate the Banner component into a Nextra layout file. The code demonstrates using the Banner component with a storageKey for managing dismissal state and including a link within the banner content.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/banner/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from 'my-nextra-theme'\nimport { Banner } from 'nextra/components'\n\nexport default function MyLayout({ children, ...props }) {\n  return (\n    <Layout>\n      <Banner storageKey=\"2.0-release\">\n        <a href=\"https://nextra.site\" target=\"_blank\">\n          🎉 Nextra 2.0 is released. Read more →\n        </a>\n      </Banner>\n      {children}\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Code Example\nDESCRIPTION: Demonstration of inline code highlighting with JavaScript language specification.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/code-highlighting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Folder Pages in Nextra\nDESCRIPTION: Sets up titles for pages within the 'fruits' folder using a nested _meta.js file that defines labels for apple and banana pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  apple: 'Apple',\n  banana: 'Banana'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and using the Bleed component in MDX with Nextra\nDESCRIPTION: Example of importing the Bleed component from Nextra and using it with different content types, including Markdown text, images, and iframes. The 'full' prop can be used to make content span the entire width.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/bleed/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Bleed } from 'nextra/components'\n\n<Bleed>Hey, I can use **Markdown** syntax here.</Bleed>\n\n<Bleed full>![Nextra](https://nextra.site/og.jpeg)</Bleed>\n\n<Bleed full>\n  <iframe\n    src=\"https://codesandbox.io/embed/swr-states-4une7\"\n    width=\"100%\"\n    height=\"500px\"\n    title=\"SWR-States\"\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Importing SWR Components with Path Imports\nDESCRIPTION: Demonstrates the new path import syntax for SWR components which enables better tree-shaking.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useSWR from 'swr'\nimport useSWRInfinite from 'swr/infinite'\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Pages in Nextra\nDESCRIPTION: Defines the titles for top-level pages including the homepage, contact page, fruits folder, and about page in the _meta.js file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  index: 'My Homepage',\n  contact: 'Contact Us',\n  fruits: 'Delicious Fruits',\n  about: 'About Us'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm/yarn\nDESCRIPTION: A shell command to install SWR and __esModule dependencies using npm or yarn.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i swr __esModule\n```\n\n----------------------------------------\n\nTITLE: Using the Callout Component in Nextra\nDESCRIPTION: Demonstrates different types of Callout components to highlight important information. The examples show default, error, info, and warning callouts, as well as customizing with emojis.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout>This is a default callout.</Callout>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"error\">This is an error callout.</Callout>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">This is an info callout. [^2]</Callout>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warning\">This is a warning callout.</Callout>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout emoji=\"🚀\">This is a callout with a custom emoji.</Callout>\n```\n\n----------------------------------------\n\nTITLE: Optimized SWR Component with Single State\nDESCRIPTION: Example showing how using only the required state (data) reduces the number of renders compared to tracking all states.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/advanced/performance.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { data } = useSWR('/api', fetcher)\n  console.log(data)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Table of Contents Placement\nDESCRIPTION: Determines if the table of contents (headings) should float on the right side of content pages or be integrated into the left navigation menu.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  floatTOC: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Styles for a Nextra Project\nDESCRIPTION: This CSS snippet shows how to define global styles for a Nextra project, including font family, padding, maximum width, and margin settings for the body element.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/custom-css/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family:\n    'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial',\n    sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Footer in Nextra Documentation Theme\nDESCRIPTION: Example of how to use the Footer component to add custom content like copyright information to a Nextra site. The component is used within the Layout component and can contain any JSX content including text and links.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/footer/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Footer, Layout } from 'nextra-theme-docs'\n\nexport default function MyLayout({ children, ...props }) {\n  return (\n    <Layout>\n      {children}\n      <Footer>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\">\n          Nextra\n        </a>\n        .\n      </Footer>\n      {children}\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExampleCode Component to Display Post Retrieval Code\nDESCRIPTION: This snippet demonstrates the usage of the ExampleCode component to display code for retrieving posts with their tags. It references a specific example file path and includes metadata filtering.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/get-posts-and-tags/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleCode\n  example=\"blog\"\n  filePath=\"app/posts/get-posts.js\"\n  metadata=\"/getPageMap/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Warning Callout in MDX\nDESCRIPTION: Illustrates the usage of the Callout component with the 'warning' type for urgent information.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"warning\">\n  Urgent info that needs immediate user attention to avoid problems.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Color with Light/Dark Mode Support (JSX)\nDESCRIPTION: Shows how to configure different primary colors for light and dark themes using the color property of the Head component with HSL values.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Head\n  color={{\n    hue: 0,\n    saturation: 0,\n    lightness: {\n      light: 50,\n      dark: 100\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Index Page Metadata Configuration\nDESCRIPTION: Exports a metadata object that specifies the asIndexPage property as true, indicating this page should be treated as an index page.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = { asIndexPage: true }\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra with npm\nDESCRIPTION: This snippet shows how to install Nextra and its dependencies using npm. It includes the core Nextra package, a theme, and Next.js.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/mix/not-specified.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nextra nextra-theme-docs next react react-dom\n```\n\n----------------------------------------\n\nTITLE: LaTeX Example in Markdown\nDESCRIPTION: Example showing how to write LaTeX expressions in Markdown using inline and block syntax\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThe **Pythagorean equation** is $a=\\sqrt{b^2 + c^2}$ and the quadratic formula:\n\n```math\nx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\n```\n```\n\n----------------------------------------\n\nTITLE: Logging SWR States in React Component\nDESCRIPTION: This code snippet shows how to log the three stateful values returned by useSWR: data, error, and isValidating. It illustrates the lifecycle of a SWR request, including initial fetching, error handling, and successful data retrieval.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/performance.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { data, error, isValidating } = useSWR('/api', fetcher)\n  console.log(data, error, isValidating)\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring language dropdown in theme.config.js\nDESCRIPTION: Configuration for the language selection dropdown in the Nextra docs theme. Includes options for language name display and RTL text direction support for languages like Arabic.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/i18n.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ni18n: [\n  { locale: 'en', text: 'English' },\n  { locale: 'zh', text: '中文' },\n  { locale: 'de', text: 'Deutsch' },\n  { locale: 'ar', text: 'العربية', direction: 'rtl' }\n]\n```\n\n----------------------------------------\n\nTITLE: SWR Code Modification Example\nDESCRIPTION: Shows a diff of code changes when modifying error handling behavior in a React component using SWR.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n-  if (error) return <div>failed to load</div>\n+  if (!data) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Nextra Footer Component Configuration\nDESCRIPTION: This snippet shows how to configure the footer component in Nextra. It includes setting the default text and customizing the footer component with additional content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  footer: {\n    text: (\n      <span>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\">\n          Nextra\n        </a>\n        .\n      </span>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Data Hook in React Component\nDESCRIPTION: A JSX component that uses the custom useUser hook to display user avatar with loading state handling.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Avatar({ id }) {\n  const { user, isLoading, isError } = useUser(id)\n\n  if (isLoading) return <Spinner />\n  if (isError) return <Error />\n  return <img src={user.avatar} />\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Custom Heading ID Syntax\nDESCRIPTION: Example of Nextra's custom heading ID syntax that allows specifying custom anchor links for headings.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Long heading about Nextra [#about-nextra]\n```\n\n----------------------------------------\n\nTITLE: Scala Hello World with Line Numbers and Highlighting\nDESCRIPTION: Example of a Scala code block that displays line numbers and highlights lines 2-4. The code shows a basic Scala Hello World program with the word 'println' highlighted.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/code-blocks/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nobject Hello {\n  def main(args: Array[String]) = {\n    println(\"hello, world\")\n  }\n}\n\nobject Hello {\n  def main(args: Array[String]) = {\n    println(\"hello, world\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Overview Page Component for Nextra Docs Theme\nDESCRIPTION: Utilizes the OverviewPage component to render the main content of the docs theme overview, passing necessary props including file path and icon components.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{\n    ChevronRightIcon,\n    BoxIcon\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Request Logger Middleware Example\nDESCRIPTION: Implementation of a simple request logger middleware that logs all fetch requests made by SWR hooks.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction logger(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Add logger to the original fetcher.\n    const extendedFetcher = (...args) => {\n      console.log('SWR Request:', key)\n      return fetcher(...args)\n    }\n\n    // Execute the hook with the new fetcher.\n    return useSWRNext(key, extendedFetcher, config)\n  }\n}\n\n// ... inside your component\nuseSWR(key, fetcher, { use: [logger] })\n```\n\n----------------------------------------\n\nTITLE: Setting up Primary Hue for Nextra Theme\nDESCRIPTION: This snippet shows how to configure the primary color hue for the Nextra theme. It allows customizing the theme's color scheme for both light and dark modes.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  primaryHue: {\n    light: 123,\n    dark: 210\n  },\n  primarySaturation: {\n    light: 100,\n    dark: 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Menu Collapse Level\nDESCRIPTION: Determines the folder level at which the navigation menu on the left is collapsed by default, helping to manage navigation depth for complex documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  defaultMenuCollapseLevel: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Importing KaTeX CSS in Layout\nDESCRIPTION: Import statement for including KaTeX CSS styles in the root layout file\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'katex/dist/katex.min.css'\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structures with FileTree Component\nDESCRIPTION: Shows how to use the FileTree component to visualize folder and file structures. The examples demonstrate nested folders, files, and the defaultOpen property to control initial display state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<FileTree>\n  <FileTree.Folder name=\"pages\" defaultOpen>\n    <FileTree.Folder name=\"fruits\" defaultOpen>\n      <FileTree.File name=\"_meta.js\" />\n      <FileTree.File name=\"apple.mdx\" />\n      <FileTree.File name=\"banana.mdx\" />\n    </FileTree.Folder>\n    <FileTree.File name=\"_meta.js\" />\n    <FileTree.File name=\"about.mdx\" />\n    <FileTree.File name=\"contact.mdx\" />\n    <FileTree.File name=\"index.mdx\" />\n  </FileTree.Folder>\n</FileTree>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FileTree>\n  <FileTree.Folder name=\"users-service\" defaultOpen>\n    <FileTree.File name=\"schema.graphql\" />\n  </FileTree.Folder>\n  <FileTree.Folder name=\"posts-service\" defaultOpen>\n    <FileTree.File name=\"schema.graphql\" />\n  </FileTree.Folder>\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: JSX App Component with Filename\nDESCRIPTION: Example of a JSX component implementation for the Nextra app wrapper, shown with a filename title '_app.js'.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/advanced/code-highlighting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'nextra-theme-docs/style.css'\n\nexport default function Nextra({ Component, pageProps }) {\n  const getLayout = Component.getLayout || (page => page)\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra with npm\nDESCRIPTION: Command to install Nextra and its dependencies using npm, including the React and Next.js packages needed to build a Nextra site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/active-type-should-be-initialized-from-star/1-level/foo.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next react react-dom nextra\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra and Next.js via npm\nDESCRIPTION: This command installs Nextra and Next.js as dependencies for a project using npm.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/pagesOnly/one.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nextra next react react-dom\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo Component in Nextra Theme\nDESCRIPTION: Example of customizing the logo component in the Nextra theme. This shows how to implement a logo with different versions for light and dark themes.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  logo: (\n    <>\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"currentColor\"\n          d=\"M14.683 14.828a4.055 4.055 0 0 1-1.272.858a4.002 4.002 0 0 1-4.875-1.45l-1.658 1.119a6.063 6.063 0 0 0 1.621 1.62a5.963 5.963 0 0 0 2.148.903a6.035 6.035 0 0 0 3.542-.35a6.048 6.048 0 0 0 1.907-1.284c.272-.271.52-.571.734-.889l-1.658-1.119a4.147 4.147 0 0 1-.489.592z M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10s10-4.477 10-10S17.523 2 12 2m0 2c4.418 0 8 3.582 8 8s-3.582 8-8 8s-8-3.582-8-8s3.582-8 8-8\"\n        />\n      </svg>\n      <span style={{ marginLeft: '.4em', fontWeight: 800 }}>\n        My Cool Project\n      </span>\n    </>\n  ),\n  logoLink: 'https://example.com',\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"og:title\" content=\"Nextra: the next docs builder\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Example with Word Highlighting\nDESCRIPTION: Shows how to use a code block with the 'text' language specified and highlighting the word 'hello'. This demonstrates displaying plain text with specific word emphasis.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/code-blocks/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Configuring Banner Content with Localization\nDESCRIPTION: Defines the content for a banner displayed at the top of documentation pages, with support for localization and dynamic content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  banner: ({ locale }) => 'Nextra 2'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Content to Table of Contents in JSX\nDESCRIPTION: Adds custom content below the table of contents on documentation pages, such as images, links, or other information.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  tocExtraContent() {\n    return <img src=\"https://placecats.com/300/200\" alt=\"\" />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Favicon Glyph (JSX)\nDESCRIPTION: Demonstrates how to set a custom favicon glyph using an emoji or character with the faviconGlyph property of the Head component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Head faviconGlyph=\"✦\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Loading with Page Component\nDESCRIPTION: This code shows how to implement infinite loading using the Page component abstraction, rendering multiple Page components in a loop based on the count state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [cnt, setCnt] = useState(1)\n\n  const pages = []\n  for (let i = 0; i < cnt; i++) {\n    pages.push(<Page index={i} key={i} />)\n  }\n\n  return (\n    <div>\n      {pages}\n      <button onClick={() => setCnt(cnt + 1)}>Load More</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Callout Component Usage\nDESCRIPTION: Shows the basic syntax for using the Callout component without specifying a type, which renders with default styling.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout>\n  `<Callout>…`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Error Callout Component\nDESCRIPTION: Demonstrates the Callout component with the 'error' type, which typically renders with red styling to indicate an error or critical information.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"error\">\n  `<Callout type=\"error\">…`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Running Nextra Development Server\nDESCRIPTION: Command to start the Next.js development server for a Nextra project, which enables local development with hot-reloading.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/active-type-should-be-initialized-from-star/1-level/foo.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx next dev\n```\n\n----------------------------------------\n\nTITLE: Using Default Callout with Emoji in MDX\nDESCRIPTION: Demonstrates how to use the Callout component with a custom emoji and markdown content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/callout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout emoji=\"👾\">\n  **Space Invaders** is a 1978 shoot 'em up arcade game developed by Tomohiro\n  Nishikado.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra with Unsupported Plugins in next.config.js\nDESCRIPTION: This example demonstrates how to configure Nextra with remark, rehype, and recma plugins in next.config.js. These plugins are not supported when using Turbopack and can only be used without Turbopack or during the build process.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/turbopack/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  mdxOptions: {\n    remarkPlugins: [myRemarkPlugin],\n    rehypePlugins: [myRehypePlugin],\n    recmaPlugins: [myRecmaPlugin]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Request Logger Output Example\nDESCRIPTION: Example output from the request logger middleware showing the SWR keys being requested.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSWR Request: /api/user1\nSWR Request: /api/user2\n```\n\n----------------------------------------\n\nTITLE: Enabling Turbopack for Next.js Development in package.json\nDESCRIPTION: This snippet shows how to modify the 'dev' script in package.json to enable Turbopack for Next.js development. It adds the '--turbopack' flag to the 'next dev' command.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/turbopack/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n-  \"dev\": \"next dev\"\n+  \"dev\": \"next dev --turbopack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Title Suffix\nDESCRIPTION: Sets the suffix that will be added to all page titles in the browser's URL bar, providing consistent branding across documentation pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  titleSuffix: '– Nextra'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Chat Options with TypeScript\nDESCRIPTION: Configuration for the chat functionality in a Nextra theme. This sets up the link for user discussions and support, commonly used to direct users to Discord or similar platforms.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  chat: {\n    link: 'https://discord.com/invite/hEM84NMkRv' // Link to your project's chat\n  }\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Built-in Icons and Components\nDESCRIPTION: Demonstrates importing various icon components from Nextra's component library and local components directory. Sets up components for use in documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CardsIcon,\n  FolderTreeIcon,\n  IdCardIcon,\n  OneIcon,\n  TableIcon\n} from '@components/icons'\nimport { GitHubWarningIcon } from 'nextra/icons'\nimport { OverviewPage } from '../../_components/overview-page'\n```\n\n----------------------------------------\n\nTITLE: Defining Links Schema for Nextra Sidebar\nDESCRIPTION: TypeScript type definition for adding links to the Nextra sidebar. The LinkSchema type requires an href property and optionally a title.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkSchema = {\n  href: string\n  title?: TitleSchema\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a theme configuration file for Nextra\nDESCRIPTION: This code snippet shows the structure of a theme configuration file for Nextra. It exports an object with various theme-related settings such as project links, logo, and navigation bar items.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/qux.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  logo: <span>My Project</span>,\\n  project: {\\n    link: 'https://github.com/shuding/nextra'\\n  },\\n  // ... other theme options\\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Component Example with Line Highlighting\nDESCRIPTION: A JSX component example showing the Nextra wrapper implementation with highlighted lines 1 and 4-5.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/advanced/code-highlighting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'nextra-theme-docs/style.css'\n\nexport default function Nextra({ Component, pageProps }) {\n  const getLayout = Component.getLayout || (page => page)\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Cards Component in MDX Documentation\nDESCRIPTION: Example MDX code showing how to import the Cards component and icons, then implement a group of cards in a documentation page.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/cards/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Cards } from 'nextra/components'\nimport { CardsIcon, OneIcon, WarningIcon } from '../path/with/your/icons'\n<Cards>\n  <Cards.Card\n    icon={<WarningIcon />}\n    title=\"Callout\"\n    href=\"/docs/built-ins/callout\"\n  />\n  <Cards.Card\n    icon={<CardsIcon />}\n    title=\"Tabs\"\n    href=\"/docs/built-ins/tabs\"\n  />\n  <Cards.Card\n    icon={<OneIcon />}\n    title=\"Steps\"\n    href=\"/docs/built-ins/steps\"\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Script for Static Exports in Nextra\nDESCRIPTION: Adding a postbuild script to package.json for static exports that runs Pagefind indexing after the application is built.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/search/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"postbuild\": \"pagefind --site .next/server/app --output-path out/_pagefind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Selection Cards in JSX\nDESCRIPTION: JSX component that creates a responsive card layout for theme selection. It displays two cards with images and links to documentation and blog themes.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards num={2}>\n  <Cards.Card arrow title=\"Documentation theme\" href=\"/docs/docs-theme/start\">\n    <>![Documentation theme screenshot](/assets/docs-theme.png)</>\n  </Cards.Card>\n  <Cards.Card arrow title=\"Blog theme\" href=\"/docs/blog-theme/start\">\n    <>![Blog theme screenshot](/assets/blog-theme.png)</>\n  </Cards.Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header ID in Markdown\nDESCRIPTION: Shows the syntax for adding a custom ID to a markdown header using square brackets. The format follows the pattern '## Header [#custom-id]' where custom-id is the desired identifier.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/custom-header-ids.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Foo [#bar]\n```\n\n----------------------------------------\n\nTITLE: Using Link Definition for Image in Markdown\nDESCRIPTION: This example demonstrates how to use a link definition to display an image in Markdown. The image is referenced as the SWR logo, and the actual path is defined separately.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/images.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![SWR logo][link-def]\n\n[link-def]: /favicon/android-chrome-192x192.png\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Components and Icons\nDESCRIPTION: Shows how to import various Nextra components and icons for use in MDX files. These imports make available the UI components that can enhance documentation pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed, Callout, Cards, FileTree, Steps, Tabs } from 'nextra/components'\nimport { CopyIcon, GitHubIcon, MenuIcon } from 'nextra/icons'\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in MDX for Nextra Documentation\nDESCRIPTION: Imports necessary icon components from nextra/icons package and a custom OverviewPage component for documentation rendering.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileIcon, FolderIcon, MdxIcon } from 'nextra/icons'\nimport { OverviewPage } from '../../_components/overview-page'\n```\n\n----------------------------------------\n\nTITLE: Setting Nextra Display Layout in Meta Configuration\nDESCRIPTION: This example demonstrates how to configure the display layout in Nextra's _meta.json. It shows how to define the display property for different content types, including full width and raw layouts.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"index\": {\n    \"title\": \"Home\",\n    \"type\": \"page\",\n    \"display\": \"hidden\"\n  },\n  \"about\": {\n    \"title\": \"About\",\n    \"type\": \"page\",\n    \"display\": \"normal\",\n    \"theme\": {\n      \"layout\": \"raw\",\n      \"typesetting\": \"article\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Page with Frontmatter in YAML\nDESCRIPTION: YAML frontmatter configuration that sets the page as an index page, defines the sidebar title as 'Built-In Components', and assigns a BoxIcon to the page.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nasIndexPage: true\nsidebarTitle: Built-In Components\nicon: BoxIcon\n---\n```\n\n----------------------------------------\n\nTITLE: FileTree Component Structure Example\nDESCRIPTION: Demonstration of how to structure a file tree hierarchy using Nextra's FileTree component, showing nested folders and files with active states.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/page-file/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FileTree>\n  <FileTree.Folder name=\"app\" open>\n    <FileTree.File name=\"layout.jsx\" />\n    <FileTree.File name=\"page.jsx\" active />\n    <FileTree.Folder name=\"docs\" open>\n      <FileTree.File name=\"page.mdx\" active />\n      <FileTree.Folder name=\"getting-started\" open>\n        <FileTree.File name=\"page.mdx\" active />\n      </FileTree.Folder>\n    </FileTree.Folder>\n  </FileTree.Folder>\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme for Next.js Documentation\nDESCRIPTION: This code exports a function that returns the configuration for Nextra theme. It sets up the logo, footer, project links, chat link, and various UI options for the documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/2024.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from 'next/router'\nimport { useConfig } from 'nextra-theme-docs'\nimport { Logo } from './components/Logo'\n\nexport default {\n  logo: <Logo />,\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  chat: {\n    link: 'https://discord.gg/hEM84NMkRv'\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra/blob/main',\n  useNextSeoProps() {\n    const { asPath } = useRouter()\n    if (asPath !== '/') {\n      return {\n        titleTemplate: '%s – Nextra'\n      }\n    }\n  },\n  footer: {\n    text: (\n      <span>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\" rel=\"noreferrer\">\n          Nextra\n        </a>\n        .\n      </span>\n    )\n  },\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta property=\"og:title\" content=\"Nextra\" />\n      <meta property=\"og:description\" content=\"The next site builder\" />\n    </>\n  ),\n  primaryHue: 197,\n  banner: {\n    key: '2.0-release',\n    text: (\n      <a href=\"https://nextra.site\" target=\"_blank\" rel=\"noreferrer\">\n        🎉 Nextra 2.0 is released. Read more →\n      </a>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Controls in Layout\nDESCRIPTION: Example configuration for the navigation prop that enables previous and next page links at the bottom of content pages, helping users navigate sequentially through documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout\n  navigation={{\n    prev: true,\n    next: true\n  }}\n>\n  {children}\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Importing useThemeConfig Hook in JavaScript\nDESCRIPTION: This snippet shows how to import the useThemeConfig hook from the nextra-theme-docs package. This hook returns values from the theme configuration and is used for dynamic project configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/api/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useThemeConfig } from 'nextra-theme-docs'\n```\n\n----------------------------------------\n\nTITLE: Package Import Path Update Example\nDESCRIPTION: Example showing the updated import path for Nextra theme components after removing individual exports.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { Table, Th, Tr, Td } from 'nextra/components'\n+ import { Table } from 'nextra/components'\n\n// ...\n\n- <Th>\n+ <Table.Th>\n- <Tr>\n+ <Table.Tr>\n- <Td>\n+ <Table.Td>\n```\n\n----------------------------------------\n\nTITLE: Defining Separator Schema for Nextra Sidebar\nDESCRIPTION: TypeScript type definition for creating separators in the Nextra sidebar. The SeparatorSchema requires a type property set to 'separator' and optionally a title.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype SeparatorSchema = {\n  type: 'separator'\n  title?: TitleSchema\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Index in Nextra Tabs Component\nDESCRIPTION: Shows how to set a default selected tab using the defaultIndex prop in the Tabs component. This example sets 'npm' as the default selected tab.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/tabs/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs } from 'nextra/components'\n\n<Tabs items={['pnpm', 'npm', 'yarn']} defaultIndex=\"1\">\n  ...\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Front Matter for Sidebar Title Customization\nDESCRIPTION: Example of using front matter in an MDX file to customize the sidebar title for a specific page, overriding the default title derivation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n---\nsidebarTitle: Getting Started 🚀\n---\n```\n\n----------------------------------------\n\nTITLE: Importing MDX-related Components in Nextra\nDESCRIPTION: This snippet shows the necessary imports for working with MDX in Nextra, including compilation, components, and remote rendering.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/mdx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compileMdx } from 'nextra/compile'\nimport { Callout } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Programmatically Prefetching Data with SWR Mutate\nDESCRIPTION: Demonstrates how to conditionally prefetch data using SWR's mutate function. This approach is useful for scenarios like preloading data when a user hovers over a link.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/prefetching.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mutate } from 'swr'\n\nfunction prefetch() {\n  mutate(\n    '/api/data',\n    fetch('/api/data').then(res => res.json())\n  )\n  // the second parameter is a Promise\n  // SWR will use the result when it resolves\n}\n```\n\n----------------------------------------\n\nTITLE: Setting float TOC display option in Nextra front matter\nDESCRIPTION: Example of how to enable the floating table of contents in a Nextra page using YAML front matter configuration. The toc.float property determines if the TOC appears as a floating element.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes-test/foo.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page\ntoc:\n  float: true\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Content with JSX in _meta.jsx\nDESCRIPTION: Example of customizing sidebar content rendering by using JSX elements in the _meta.jsx file, allowing for rich content like logos in the sidebar structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/layout/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  index: 'Intro',\n  '--': {\n    type: 'separator',\n    title: (\n      <div className=\"flex items-center gap-2\">\n        <MyLogo />\n        {children}\n      </div>\n    )\n  },\n  frameworks: 'JS Frameworks & Libs',\n  about: 'About'\n}\n```\n\n----------------------------------------\n\nTITLE: Manually disabling all automatic revalidations in SWR\nDESCRIPTION: Shows how to configure useSWR to disable all automatic revalidation options manually. This approach is equivalent to using useSWRImmutable and is useful for immutable data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/revalidation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR(key, fetcher, {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false\n})\n\n// equivalent to\nuseSWRImmutable(key, fetcher)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Next.js Link Implementation in MDX\nDESCRIPTION: Demonstrates the MDX equivalent of the Markdown link after conversion, showing the imported Next.js Link component implementation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/link/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport Link from 'next/link'\n\nClick <Link href=\"/about\">here</Link> to read more.\n```\n\n----------------------------------------\n\nTITLE: Importing useConfig Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the useConfig hook from the nextra-theme-docs package. The useConfig hook returns data from the current page context.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/api/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConfig } from 'nextra-theme-docs'\n```\n\n----------------------------------------\n\nTITLE: Info Callout Component\nDESCRIPTION: Demonstrates the Callout component with the 'info' type, which typically renders with blue styling to indicate information.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  `<Callout type=\"info\">…`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Root Layout\nDESCRIPTION: React/Next.js root layout component that imports the custom CSS file to apply the cascade layer styles application-wide.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/customize-the-cascade-layers/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../path/to/your/styles.css'\n\nexport default async function RootLayout({ children }) {\n  // ... Your layout logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Dark Mode with TypeScript\nDESCRIPTION: Configuration for dark mode settings in a Nextra theme. This controls whether dark mode is toggled automatically based on system preferences or if it should be manually controlled by the user.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  darkMode: true, // or false to disable dark mode\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bleed Component in React\nDESCRIPTION: This snippet shows how to use the Bleed component in a React component. It includes importing the component from 'nextra/components' and demonstrates its usage with Markdown syntax, full-bleed images, and embedded iframes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/bleed.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components'\n\n<Bleed>Hey, I can use **Markdown** syntax here.</Bleed>\n\n<Bleed full>\n  ![Nextra](https://nextra.site/og.jpeg)\n</Bleed>\n\n<Bleed full>\n  <iframe\n    src=\"https://codesandbox.io/embed/swr-states-4une7\"\n    width=\"100%\"\n    height=\"500px\"\n    title=\"SWR-States\"\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Details and Summary Elements\nDESCRIPTION: Shows how to use native HTML details and summary elements for collapsible content sections. The example demonstrates nested disclosure widgets.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<details>\n  <summary>Summary</summary>\n  Details\n  <details>\n    <summary>Summary 2</summary>\n    Details 2\n  </details>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme-wide TOC Settings in Nextra\nDESCRIPTION: Demonstrates how to configure global TOC settings in the Nextra theme configuration. This example shows setting the float and title options that will apply to all pages unless overridden.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes-test/foo.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  toc: {\n    float: true,\n    title: 'On This Page'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Footer Display\nDESCRIPTION: Enables or disables the display of the footer section at the bottom of documentation pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  footer: true\n}\n```\n\n----------------------------------------\n\nTITLE: Object Key Serialization Middleware\nDESCRIPTION: A middleware for older SWR versions (<1.1.0) that serializes object keys to ensure stability between renders.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction serialize(useSWRNext) {\n  return (key, fetcher, config) => {\n    // Serialize the key.\n    const serializedKey = Array.isArray(key) ? JSON.stringify(key) : key\n\n    // Pass the serialized key, and unserialize it in fetcher.\n    return useSWRNext(serializedKey, (k) => fetcher(...JSON.parse(k)), config)\n  }\n}\n\n// ...\nuseSWR(['/api/user', { id: '73' }], fetcher, { use: [serialize] })\n\n// ... or enable it globally with\n<SWRConfig value={{ use: [serialize] }}>\n```\n\n----------------------------------------\n\nTITLE: Running Build Command for Static Export in Nextra\nDESCRIPTION: This snippet shows the command to run the build process for generating static exports in a Nextra project. It uses the npm run build command, which can be adapted for other package managers.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/static-exports/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Warning Callout Component\nDESCRIPTION: Shows how to use the Callout component with the 'warning' type, which usually renders with yellow styling to indicate a warning.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warning\">\n  `<Callout type=\"warning\">…`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Updating TOC Export in Generated MDX Pages\nDESCRIPTION: Changes the export of table of contents data in generated MDX pages from a function to a constant array.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const toc = [/* your headings */]\n```\n\n----------------------------------------\n\nTITLE: Rendering Nextra Blog Theme Overview Page in JSX\nDESCRIPTION: This code snippet renders the OverviewPage component, passing in the file path from metadata and an object containing the imported icons. This component likely generates the main content for the blog theme documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{\n    ChevronRightIcon,\n    FilesIcon,\n    FileIcon,\n    TagsIcon,\n    RSSIcon\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Posts Page in Nextra using React and JSX\nDESCRIPTION: This code snippet shows the structure of a '/posts' page in a Nextra project. It includes imports for necessary components and functions, and defines the Posts component that renders the page content. The component uses getPosts and getTags functions to fetch and display post data and tags.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/posts/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getPosts, getTags } from '@/lib/posts'\nimport { PostList } from '@/components/post-list'\nimport { TagList } from '@/components/tag-list'\n\nexport default async function Posts() {\n  const posts = await getPosts()\n  const tags = await getTags()\n  return (\n    <div className=\"max-w-[90rem] mx-auto pt-4 pl-[max(env(safe-area-inset-left),1.5rem)] pr-[max(env(safe-area-inset-right),1.5rem)]\">\n      <h1 className=\"text-4xl font-bold tracking-tight\">Posts</h1>\n      <TagList tags={tags} />\n      <PostList posts={posts} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Table with GFM Syntax in MDX\nDESCRIPTION: This snippet demonstrates how to create a table using GitHub Flavored Markdown (GFM) syntax in MDX. It shows a simple table with left, center, and right-aligned columns.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/table/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n| left   | center | right |\n| :----- | :----: | ----: |\n| foo    |  bar   |   baz |\n| banana | apple  |  kiwi |\n```\n\n----------------------------------------\n\nTITLE: Creating Step-by-Step Instructions with Steps Component\nDESCRIPTION: Shows how to use the Steps component to create sequential guides with numbered steps. The examples demonstrate basic steps as well as nested steps for more complex instructions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/nextra-components/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n\n### Step 1\n\nContent for step 1.\n\n### Step 2\n\nContents for step 2.\n\n</Steps>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n  ## Test\n  Run pnpm test\n\n  <Steps>\n    ### nextra:test\n\n    ### nextra-theme-docs:test\n\n    <Steps>\n      #### more\n\n      #### more more\n\n      #### more more more\n\n    </Steps>\n\n    ### nextra-theme-blog:test\n\n  </Steps>\n\n## Lint\n\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Example of useSWRInfinite Data Structure\nDESCRIPTION: This code snippet shows the structure of the data returned by useSWRInfinite, which is an array of API responses where each item is an array of user objects.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// `data` will look like this\n[\n  [\n    { name: 'Alice', ... },\n    { name: 'Bob', ... },\n    { name: 'Cathy', ... },\n    ...\n  ],\n  [\n    { name: 'John', ... },\n    { name: 'Paul', ... },\n    { name: 'George', ... },\n    ...\n  ],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the navigation for a Nextra-based documentation site, including setting up the sidebar and organizing documentation pages.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/hidden-route-should-have-theme-context/bar.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logo: <span>My Project</span>,\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra',\n  nextThemes: {\n    defaultTheme: 'dark'\n  },\n  navbar: {\n    extraContent: (\n      <a\n        href=\"https://github.com/shuding/nextra\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Nextra\n      </a>\n    )\n  },\n  sidebar: {\n    titleComponent: ({ title, type }) => {\n      if (type === 'separator') {\n        return <span className=\"cursor-default\">{title}</span>\n      }\n      return <>{title}</>\n    },\n    defaultMenuCollapseLevel: 1,\n    toggleButton: true\n  },\n  footer: {\n    text: (\n      <div className=\"flex w-full flex-col items-center sm:items-start\">\n        <div>Built with Nextra</div>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Availability\nDESCRIPTION: Controls whether users can toggle between light and dark modes in the documentation site, enhancing readability preferences.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  darkMode: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction for Content\nDESCRIPTION: Configures the text direction (left-to-right or right-to-left) for all content in the documentation site, supporting different language requirements.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  direction: 'ltr'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nextra Development Server\nDESCRIPTION: Command to start the development server for a Nextra project. This uses the dev script specified in package.json to launch the local development environment.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/components/ready-to-go.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Error Callout in MDX\nDESCRIPTION: Demonstrates how to use the Callout component with the 'error' type to advise about risks or negative outcomes.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"error\">\n  Advises about risks or negative outcomes of certain actions.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Styling HTML with CSS\nDESCRIPTION: A simple CSS snippet that sets the background color of the HTML element to red.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Nextra Components for API Documentation\nDESCRIPTION: This snippet demonstrates how to import Nextra components and use them to create an API documentation page with dynamically generated content. It imports Cards, MDXRemote, and createIndexPage utility, then uses MDXRemote to render an index page created from a page map.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/api/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cards } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\nimport { createIndexPage } from 'nextra/page-map'\nimport { pageMap } from './[name]/page'\n\n# API\n\n<MDXRemote\n  compiledSource={await createIndexPage(pageMap)}\n  components={{\n    Cards\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in MDX\nDESCRIPTION: Shows how to import the Callout component from Nextra's components library for use in MDX files.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Implementing the BlogPage Component in a Nextra MDX Page\nDESCRIPTION: This code shows how to import and use the BlogPage component within a Nextra MDX page. It demonstrates the integration of React components with MDX content in a Nextra documentation site.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/blog/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'nextra-theme-docs'\n\n# Blog\n\n<BlogPage />\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Mode with useSWRImmutable\nDESCRIPTION: Example of using the new immutable mode hook for data that never changes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWRImmutable from 'swr/immutable'\n\n// ...\n\nuseSWRImmutable(key, fetcher, options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Configuration File for Nextra Blog\nDESCRIPTION: This snippet shows how to create a basic theme configuration file (theme.config.jsx) for Nextra with the blog theme, including a header and footer.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/pagesOnly/one.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  footer: <p>MIT 2023 © Nextra.</p>,\\n  head: ({ title, meta }) => (\n    <>\n      {meta.description && (\n        <meta name=\\\"description\\\" content={meta.description} />\n      )}\n      <meta name=\\\"og:title\\\" content={title} />\n    </>\n  ),\\n  readMore: 'Read More →'\\n  // ... other theme options\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PageMap for Remote Content in Nextra\nDESCRIPTION: Setup code for enhancing the pageMap configuration in the layout file to support sidebar and mobile navigation with remote content integration.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/remote/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPageMap } from 'nextra/page-map'\nimport { pageMap as graphqlEslintPageMap } from './graphql-eslint/[[...slug]]/page'\n\n// ...\n\nconst pageMap = [...(await getPageMap()), graphqlEslintPageMap]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Nextra Theme\nDESCRIPTION: Example of how to configure dark mode in Nextra. This shows how to specify the default theme, enable switching between light and dark modes, and add a custom toggle component.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  darkMode: true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Components for Mermaid Integration\nDESCRIPTION: This snippet imports necessary components from Nextra to compile MDX and render Mermaid diagrams.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/mermaid/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compileMdx } from 'nextra/compile'\nimport { Mermaid } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Using Callout with Custom Emoji in MDX\nDESCRIPTION: Demonstrates how to use the Callout component with a custom emoji alongside the 'info' type.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"info\" emoji=\"⭐\">\n  Nextra has 13k stars on GitHub!\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Updating MDX Version in Nextra\nDESCRIPTION: Updates Nextra to use MDX version 3, which may introduce breaking changes or new features.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- c2ad837d: update to MDX3\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata Configuration for Nextra in JavaScript\nDESCRIPTION: This code exports a metadata object that defines the sidebarTitle and title for a Nextra project. It's likely used for configuring the navigation and page title in the Nextra documentation framework.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/title/2-sidebar-title.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = {\n  sidebarTitle: 'from sidebarTitle',\n  title: 'from title'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SWR Cache Operations\nDESCRIPTION: Example showing direct operations on the SWR cache. Note that the documentation warns against directly writing to the cache as it may cause undefined behavior.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst { cache } = useSWRConfig()\n\ncache.get(key) // Get the current data for a key.\ncache.clear() // ⚠️ Clear all the cache. SWR will revalidate upon re-render.\n```\n\n----------------------------------------\n\nTITLE: Moving Utility Functions in Nextra\nDESCRIPTION: Relocates the 'removeLinks' function from 'nextra-theme-docs' to 'nextra/remove-links' for better organization.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- 6070b025: move `removeLinks` function from `nextra-theme-docs` to\n  `nextra/remove-links`\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Image in Markdown\nDESCRIPTION: This snippet shows how to display an SVG image in Markdown using a relative path. The image is referenced as the SWR logo and is located in a parent directory.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![SWR logo transparent](../../../../app/icon.svg)\n```\n\n----------------------------------------\n\nTITLE: Extending a Cache Provider with Nested SWRConfig\nDESCRIPTION: Example of how to extend a cache provider when using nested SWRConfig components. The provider function receives the parent cache provider as its first argument.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: cache => newCache }}>...</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Provider with SWRConfig\nDESCRIPTION: Shows how to provide a custom cache implementation using the provider function in SWRConfig.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/global-configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: () => new Map() }}>\n  <Dashboard />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Blockquote Component with MDX in React\nDESCRIPTION: This snippet shows how to integrate the custom Blockquote component with MDX by using the useMDXComponents function. This allows the custom component to be used for rendering blockquotes in MDX content.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/github-alert-syntax/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function useMDXComponents(components) {\n  return {\n    blockquote: Blockquote,\n    ...components\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SWRConfig Usage in React\nDESCRIPTION: Example of the basic SWRConfig syntax for providing global options to all SWR hooks within its children components.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/global-configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={options}>\n  <Component />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Setting Up the App Component with Theme Styles\nDESCRIPTION: Next.js custom App component that imports the blog theme stylesheet. This ensures the theme styling is applied throughout the application.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/blog/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'nextra-theme-blog/style.css'\n\nexport default function Nextra({ Component, pageProps }) {\n  const getLayout = Component.getLayout || (page => page)\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Search Bar with TypeScript\nDESCRIPTION: Configuration for the search functionality in a Nextra theme. This controls whether the search bar is displayed and how it behaves.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  search: {\n    placeholder: 'Search documentation...',\n    emptyResult: <span>No results found.</span>\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array of Link Objects without Language Specification\nDESCRIPTION: Example of a JavaScript code block without an explicit language specifier. The code shows an array of link objects, each containing href and label properties.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/code-blocks/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst links = [\n  { href: '/settings', label: 'Settings' },\n  { href: '/support', label: 'Support' },\n  { href: '/license', label: 'License' },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring LaTeX in Next.js Config\nDESCRIPTION: Basic configuration to enable LaTeX support in Nextra by setting the latex option in next.config.mjs\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextra from 'nextra'\n\nconst withNextra = nextra({\n  latex: true\n})\n\nexport default withNextra()\n```\n\n----------------------------------------\n\nTITLE: Updating Table Component Imports in Nextra\nDESCRIPTION: Changes how table-related components are imported and used, moving from separate imports to a nested structure under the Table component.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from 'nextra/components'\n\n<Table.Th>\n<Table.Tr>\n<Table.Td>\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component from Nextra in React\nDESCRIPTION: Imports the Tabs component from the Nextra components library for use in a React application.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/scrollbar-x.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Sponsor Display in MDX\nDESCRIPTION: Imports Button, Cards, and Image components from 'nextra/components' and cloneElement from React to be used in the sponsors page layout.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/sponsors/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Cards, Image } from 'nextra/components'\nimport { cloneElement } from 'react'\n```\n\n----------------------------------------\n\nTITLE: Rendering Overview Page Component with Icons\nDESCRIPTION: Renders the OverviewPage component with file path metadata and icon configuration for documentation display.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{ FileIcon, FolderIcon, MdxIcon }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Pages in _meta.js Configuration\nDESCRIPTION: This snippet demonstrates how to hide specific pages from the navigation using the _meta.js file in Nextra. It uses the 'display' property to control visibility.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  contact: {\n    display: 'hidden'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Options\nDESCRIPTION: Example of configuring KaTeX with custom macros in next.config.mjs\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = nextra({\n  latex: {\n    renderer: 'katex',\n    options: {\n      macros: {\n        '\\\\RR': '\\\\mathbb{R}'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Theme Styles in JavaScript\nDESCRIPTION: Example of how to import Nextra theme styles manually after a recent update that removed automatic style importing.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'nextra-theme-docs/style.css' // for docs theme\nimport 'nextra-theme-blog/style.css' // for blog theme\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality\nDESCRIPTION: Controls whether a search box should be displayed in the top right corner of the documentation site, allowing users to search through content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  search: true\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.3.0-alpha.18\nDESCRIPTION: Updates dependencies\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.18\n\n### Patch Changes\n\n- Updated dependencies [7de40fb]\n- Updated dependencies [00f4696]\n- Updated dependencies [31ddba4]\n  - nextra@4.3.0-alpha.18\n```\n\n----------------------------------------\n\nTITLE: Importing Head Component in App Layout (JSX)\nDESCRIPTION: Shows how to import and use the Head component to add static head tags in a Next.js app layout. This example adds a viewport meta tag.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from 'my-nextra-theme'\nimport { Head } from 'nextra/components'\n\nexport default function MyLayout({ children, ...props }) {\n  return (\n    <html lang=\"en\">\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      </Head>\n      <body>\n        <Layout>{children}</Layout>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Provider in SWRConfig\nDESCRIPTION: Example showing how to set up a custom cache provider using Map for SWR data caching.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/global-configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SWRConfig value={{ provider: () => new Map() }}>\n  <Dashboard />\n</SWRConfig>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Project Link with TypeScript\nDESCRIPTION: Configuration for the project link in a Nextra theme. This typically points to the GitHub repository or other source code location for the documented project.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure Next.js to use Nextra by creating a next.config.js file. It uses the withNextra function to wrap the Next.js configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/mix/not-specified.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = require('nextra')({\\n  theme: 'nextra-theme-docs',\\n  themeConfig: './theme.config.jsx'\\n})\\n \\nmodule.exports = withNextra()\\n \\n// If you have other Next.js configurations, you can pass them as the parameter:\\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Configuring Feedback Link Text\nDESCRIPTION: Sets the text for the link that guides users to provide feedback through issues or discussions on the repository, with localization support.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  feedbackLink: ({ locale }) => 'Question? Give us feedback →'\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Components Configuration in Nextra\nDESCRIPTION: Sets up MDX component customization including table of contents rendering.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/custom-theme/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\nimport { Steps } from 'nextra/components'\nimport OldDocs from './old.mdx'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering OverviewPage Component in JSX\nDESCRIPTION: JSX code that imports the OverviewPage component from a relative path and renders it with the metadata.filePath property passed as a prop. This component likely displays a listing of available built-in components.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/built-ins/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OverviewPage } from '../../../_components/overview-page'\n\n# Built-ins\n\n<OverviewPage filePath={metadata.filePath} />\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji Callout Component\nDESCRIPTION: Shows how to customize the emoji displayed in a Callout by using the emoji prop, in this case using a French flag emoji with an info type callout.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\" emoji=\"🇫🇷\">\n  `<Callout type=\"info\" emoji=\"🇫🇷\">…`\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Using Default Callout in MDX\nDESCRIPTION: Demonstrates the usage of the default Callout component without specifying a type.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/callout/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout>Helpful advice for doing things better or more easily.</Callout>\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable FAQ Section in Markdown/JSX\nDESCRIPTION: A collection of expandable detail/summary elements that provide answers to frequently asked questions about Nextra. Each section contains a question and its corresponding answer.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<details>\n  {/* prettier-ignore */}\n  <summary>Can I use Nextra with Next.js `pages` router?</summary>\nNextra 4 only works with the `app` router. Only Nextra 1/2/3 supports the\n`pages` router.\n\n</details>\n\n<details>\n  <summary>Can I use X with Nextra?</summary>\nThe answer is \"yes\" for most things. Since Nextra is just a Next.js plugin, almost all the things\nthat can be done with React can be done with Nextra. Here are some examples and guides:\n\n- [Use Tailwind CSS](/docs/guide/tailwind-css)\n- [Use custom CSS and Sass](/docs/guide/custom-css)\n- [Use custom fonts](https://nextjs.org/docs/basic-features/font-optimization)\n\n</details>\n\n<details>\n  {/* prettier-ignore */}\n  <summary>How can I add a live coding component in Nextra?</summary>\nThere are libraries like [Sandpack](https://sandpack.codesandbox.io) and\n[react-live](https://github.com/FormidableLabs/react-live) that can help you\nadd live coding components to your MDX.\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Defining Image in Markdown with Automatic Next.js Image Conversion\nDESCRIPTION: This snippet shows how to reference an image in Markdown which Nextra will automatically convert to a Next.js Image component. It includes both the Markdown image syntax and a reference to the Next.js documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Mountain](../public/img.jpeg)\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for SWR Error Handling in React\nDESCRIPTION: This code embeds a CodeSandbox example that demonstrates error handling techniques in SWR. The iframe is styled to fit the containing page with specific display parameters and security settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/error-handling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-states-4une7?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Error Handling\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme and Layout Options in JavaScript\nDESCRIPTION: This code snippet defines the configuration for a Nextra project. It sets up the theme, logo, project link, chat link, footer content, navigation bar, and various other UI and functionality options.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-with-symlinks/pages/test1.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  logo: <span>My Project</span>,\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  chat: {\n    link: 'https://discord.com',\n  },\n  docsRepositoryBase: 'https://github.com/shuding/nextra',\n  footer: {\n    text: (\n      <span>\n        MIT {new Date().getFullYear()} ©{' '}\n        <a href=\"https://nextra.site\" target=\"_blank\">\n          Nextra\n        </a>\n        .\n      </span>\n    )\n  },\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – SWR'\n    }\n  },\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta property=\"og:title\" content=\"Nextra\" />\n      <meta property=\"og:description\" content=\"The next site builder\" />\n    </>\n  ),\n  banner: {\n    key: '2.0-release',\n    text: (\n      <a href=\"https://nextra.site\" target=\"_blank\">\n        🎉 Nextra 2.0 is released. Read more →\n      </a>\n    )\n  },\n  navigation: {\n    prev: true,\n    next: true\n  },\n  editLink: {\n    text: 'Edit this page on GitHub →'\n  },\n  toc: {\n    float: true\n  },\n  sidebar: {\n    titleComponent({ title, type }) {\n      if (type === 'separator') {\n        return <span className=\"cursor-default\">{title}</span>\n      }\n      return <>{title}</>\n    },\n    defaultMenuCollapseLevel: 1,\n    toggleButton: true,\n  },\n  feedback: {\n    content: 'Question? Give us feedback →',\n    labels: 'feedback'\n  },\n  gitTimestamp: false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nextra Scripts to package.json\nDESCRIPTION: This code snippet shows how to add Nextra-specific scripts to the package.json file. These scripts are used for development, building, and starting the Nextra project.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/mix/not-specified.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"scripts\": {\\n    \"dev\": \"next dev\",\\n    \"build\": \"next build\",\\n    \"start\": \"next start\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Import Plugin\nDESCRIPTION: Configuration setup for postcss-import plugin in PostCSS config file to enable CSS imports and layer management.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/customize-the-cascade-layers/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: {\n    'postcss-import': {}\n    // ... your other PostCSS plugins (e.g., `autoprefixer`, `cssnano`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Infinite Loading with useSWR\nDESCRIPTION: This code demonstrates an incorrect approach to implement infinite loading with useSWR, where hooks are used inside a loop, violating React Hooks rules.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [cnt, setCnt] = useState(1)\n\n  const list = []\n  for (let i = 0; i < cnt; i++) {\n    // 🚨 This is wrong! Commonly, you can't use hooks inside a loop.\n    const { data } = useSWR(`/api/data?page=${i}`)\n    list.push(data)\n  }\n\n  return (\n    <div>\n      {list.map((data, i) => (\n        <div key={i}>\n          {data.map(item => (\n            <div key={item.id}>{item.name}</div>\n          ))}\n        </div>\n      ))}\n      <button onClick={() => setCnt(cnt + 1)}>Load More</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Layout for Nextra Showcase Page\nDESCRIPTION: Defines a custom layout component for the Nextra showcase page. It overrides default components with custom implementations, including image rendering and link styling.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/showcase/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function MdxLayout(props) {\n  return cloneElement(props.children, {\n    components: {\n      img: props => (\n        <Image {...props} className=\"object-cover [aspect-ratio:12/6.3]\" />\n      ),\n      a({ children, href }) {\n        const { alt } = children.props\n        return (\n          <Cards.Card\n            href={href}\n            title={alt.replace(/ preview$/i, '')}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            arrow\n            className=\"!no-underline\"\n          >\n            {children}\n          </Cards.Card>\n        )\n      },\n      p(props) {\n        return (\n          <p\n            {...props}\n            className=\"mb-16 mt-4 text-center text-lg text-gray-600 dark:text-gray-400\"\n          />\n        )\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project Chat Link\nDESCRIPTION: Defines the URL for the community chat button in the top right corner, typically linking to Discord, Slack, or other community platforms.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  projectChatLink: 'https://discord.gg/hEM84NMkRv'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Output in Markdown\nDESCRIPTION: This code snippet shows how to specify the 'export' output option in a Next.js configuration file. It's mentioned in the context of error handling for this specific configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\noutput: 'export'\n```\n\n----------------------------------------\n\nTITLE: Disabling Logo Link in Nextra Theme\nDESCRIPTION: Prevents the logo from acting as a link by setting the logoLink property to false, keeping it as a static element.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logoLink: false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Frontmatter for Page Metadata (MDX)\nDESCRIPTION: Demonstrates how to define page metadata (title and description) using Markdown frontmatter syntax in an MDX file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My description\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Example Code Component for Tag Pages\nDESCRIPTION: Shows the import statement and usage of an ExampleCode component to demonstrate tag page implementation. The component references a blog example with specific file path and metadata patterns for post and tag retrieval.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/tags/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleCode } from 'components/example-code'\n\n<ExampleCode\n  example=\"blog\"\n  filePath=\"app/tags/[tag]/page.jsx\"\n  metadata=\"/getPosts/ /getTags/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Blog Component in Nextra\nDESCRIPTION: This code imports a Blog component and renders it within a Nextra page configuration. The page is set as non-searchable, and the Blog component receives a language prop from the page parameters.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n---\nsearchable: false\n---\n\nimport { Blog } from '@app/_components/blog'\n\n# SWR Blog\n\n<Blog lang={props.params.lang} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Nextra Metadata Configuration in JavaScript\nDESCRIPTION: This code exports a metadata object with the 'asIndexPage' property set to true. This configuration is likely used by Nextra to treat the current page as an index page in the site structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-index-page-and-folder-should-be-merged/themes-test.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = { asIndexPage: true }\n```\n\n----------------------------------------\n\nTITLE: Running Nextra Example Docs in Development Mode\nDESCRIPTION: Command to start the 'examples/docs' project in development mode using PNPM. This allows for local debugging and instant re-rendering of changes.\nSOURCE: https://github.com/shuding/nextra/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-docs dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Direction with TypeScript\nDESCRIPTION: Configuration for text direction in a Nextra theme. This is particularly useful for languages that read right-to-left (RTL) like Arabic or Hebrew.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  direction: 'ltr', // or 'rtl' for right-to-left languages\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Guide Code Changes\nDESCRIPTION: Collection of code changes required for migrating from SWR 0.x to 1.0.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/blog/swr-v1.mdx#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSWRInfinite } from 'swr'\n+ import useSWRInfinite from 'swr/infinite'\n\n- import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr'\n+ import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr/infinite'\n\n- const { revalidate } = useSWR(key, fetcher, options)\n+ const { mutate } = useSWR(key, fetcher, options)\n\n- revalidate()\n+ mutate()\n\n- useSWR(key, fetcher, { initialData: ... })\n+ useSWR(key, fetcher, { fallbackData: ... })\n\n- import { mutate } from 'swr'\n+ import { useSWRConfig } from 'swr'\n```\n\n----------------------------------------\n\nTITLE: Importing React Hooks in JavaScript\nDESCRIPTION: Example of importing useState and useEffect hooks from React in a JavaScript file.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useEffect } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Customizing Project Chat Link Icon in JSX\nDESCRIPTION: Replaces the default chat icon with a custom component, such as a Discord logo, for the chat button in the top right corner.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  projectChatLinkIcon: <Discord />\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Style Import Example\nDESCRIPTION: Example showing the new manual style imports required for Nextra themes after the style.css import removal.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'nextra-theme-docs/style.css' // for docs theme\nimport 'nextra-theme-blog/style.css' // for blog theme\n```\n\n----------------------------------------\n\nTITLE: Installing Nextra Docs Theme\nDESCRIPTION: Command to install the official documentation theme for Nextra which provides the layout and styling for documentation sites.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/get-started.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nextra-theme-docs\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: Demonstrates how to import the Callout component from the Nextra components library for use in your React application.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/callout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Creating a theme configuration file for Nextra\nDESCRIPTION: This snippet shows how to create a basic theme configuration file (theme.config.jsx) for Nextra. It exports an object with various theme options like project links and navigation configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/respect-order-for-type-separator-menu-and-item-with-href/one/two/1-one.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  logo: <span>My Project</span>,\\n  project: {\\n    link: 'https://github.com/shuding/nextra'\\n  }\\n  // ... other theme options\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic C++ Include Statement\nDESCRIPTION: Demonstrates including the iostream library in C++, which is used for input and output operations.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n```\n\n----------------------------------------\n\nTITLE: Including iostream in C++\nDESCRIPTION: Example of including the iostream header in a C++ file.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n```\n\n----------------------------------------\n\nTITLE: Importing External MDX Component in Nextra\nDESCRIPTION: This snippet shows how to import an external MDX component and use it within the current file. The component is imported from a specific path and then rendered using JSX syntax.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/markdown-import.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport External from '@app/_components/external.mdx'\n\n<External />\n```\n\n----------------------------------------\n\nTITLE: Rendering OverviewPage Component with Icon Props in Nextra\nDESCRIPTION: This code snippet renders the OverviewPage component, passing the file path and an object containing various icon components as props. This is likely used to create a visual overview of advanced Nextra features.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{\n    TerminalIcon,\n    DiagramIcon,\n    TailwindIcon,\n    FormulaIcon,\n    TableIcon,\n    TypeScriptIcon,\n    CloudIcon\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding KaTeX CSS Stylesheet\nDESCRIPTION: HTML link tag to include the KaTeX CSS stylesheet from CDN for styling LaTeX expressions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/latex.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/katex/dist/katex.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for SWR Authentication Example in JSX\nDESCRIPTION: This code snippet embeds a CodeSandbox example that demonstrates authentication using SWR. The iframe is styled to fit the page and includes necessary attributes for security and functionality.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-auth-tuqtf?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Authentication\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Grammar in Nextra\nDESCRIPTION: Demonstrates how to configure custom grammar for syntax highlighting in Nextra's configuration file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BUNDLED_LANGUAGES } from 'shiki'\n\nnextra({\n  // ... other Nextra config options\n  mdxOptions: {\n    rehypePrettyCodeOptions: {\n      getHighlighter: options =>\n        getHighlighter({\n          ...options,\n          langs: [\n            ...BUNDLED_LANGUAGES,\n            // custom grammar options, see the Shiki documentation for how to provide these options\n            {\n              id: 'my-lang',\n              scopeName: 'source.my-lang',\n              aliases: ['mylang'], // Along with id, aliases will be included in the allowed names you can use when writing Markdown\n              path: '../../public/syntax/grammar.tmLanguage.json'\n            }\n          ]\n        })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring useConfig with TypeScript in Nextra\nDESCRIPTION: Shows how to use TypeScript generics with the useConfig hook to specify the type of frontmatter data.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nuseConfig<YOUR_FRONTMATTER_TYPE>\n```\n\n----------------------------------------\n\nTITLE: Exporting Nextra Configuration with withNextra\nDESCRIPTION: Shows how to use withNextra in next.config.js to configure Nextra with the docs theme. This example demonstrates the proper way to integrate Nextra with Next.js configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/folder-without-meta-json/callout.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst withNextra = require('nextra')({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.tsx',\n})\n\nmodule.exports = withNextra()\n\n// If you have other Next.js configurations, you can pass them as the parameter:\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Example Npm2Yarn Shell Command\nDESCRIPTION: Shell command with npm2yarn metadata that will be automatically converted to show both npm and yarn installation commands for the @graphql-eslint/eslint-plugin package.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/npm2yarn/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @graphql-eslint/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: JavaScript Console Logging with Filename and Line Highlighting\nDESCRIPTION: Example of a JavaScript code block with filename specification and first line highlighting. This demonstrates how to display console.log statements with proper formatting and highlighting.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/code-blocks/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('hello world')\n\nconsole.log('goodbye world')\n```\n\n----------------------------------------\n\nTITLE: Basic SWR Usage in React\nDESCRIPTION: Demonstrates the basic usage of the useSWR hook for data fetching in a React component, showing how to handle loading and error states.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filename to JavaScript Code Block\nDESCRIPTION: Demonstrates how to add a filename to a JavaScript code block in Markdown.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```js filename=\"example.js\"\nconsole.log('hello, world')\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Search Results Message with Localization\nDESCRIPTION: Defines the message displayed when search yields no results, with support for different languages through localization.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  searchResultEmpty({ locale }) {\n    if (locale === 'zh-CN') return '未查找到结果'\n    return 'No results found'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nextra Theme Configuration File\nDESCRIPTION: This snippet shows how to create a basic theme configuration file for Nextra. It exports an object with properties for customizing the theme's appearance and behavior.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/mix/not-specified.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\\n  logo: <span>My Project</span>,\\n  project: {\\n    link: 'https://github.com/shuding/nextra'\\n  }\\n  // ... other theme options\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Hooks in JavaScript\nDESCRIPTION: Shows how to import useState and useEffect hooks from React, which are commonly used alongside SWR for state management.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Setting Feedback Labels\nDESCRIPTION: Defines the label used when creating issues or discussions through the feedback mechanism, helping categorize user feedback.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  feedbackLabels: 'feedbacks'\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Frontmatter Properties in Nextra\nDESCRIPTION: Renames the frontmatter property 'sidebar_label' to 'sidebarTitle' for consistency.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- 6070b025: rename `frontmatter.sidebar_label` to `frontmatter.sidebarTitle`\n```\n\n----------------------------------------\n\nTITLE: Using Laggy Data Middleware\nDESCRIPTION: Example of how to use the laggy data middleware with a SWR hook to access the enhanced functionality.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/middleware.mdx#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { data, isLagging, resetLaggy } = useSWR(key, fetcher, { use: [laggy] })\n```\n\n----------------------------------------\n\nTITLE: Exporting Page Metadata Configuration in JavaScript\nDESCRIPTION: Exports a metadata object that configures page settings including whether it's an index page, the sidebar title, and page title.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/title/folder-with-index/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  asIndexPage: true,\n  sidebarTitle: 'from sidebarTitle',\n  title: 'from title'\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comments in Markdown\nDESCRIPTION: Demonstrates how to write HTML-style comments in pure Markdown files. This is a basic example showing the standard comment syntax that works in MD files.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/test.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- this is a comment -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Themes in Nextra\nDESCRIPTION: Shows how to configure custom themes for syntax highlighting in Nextra's configuration file.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnextra({\n  // ... other Nextra config options\n  mdxOptions: {\n    rehypePrettyCodeOptions: {\n      // VSCode theme or built-in Shiki theme, see Shiki documentation for more information\n      theme: JSON.parse(\n        readFileSync('./public/syntax/arctis_light.json', 'utf8')\n      )\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Inlined JSX Syntax Highlighting in Markdown\nDESCRIPTION: Shows how to use inlined syntax highlighting for JSX code within Markdown text.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nInlined syntax highlighting is also supported `let x = 1{:jsx}` via:\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme TOC (Table of Contents) with TypeScript\nDESCRIPTION: Configuration for the table of contents in a Nextra theme. This controls how the table of contents is displayed and what headings are included.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  toc: {\n    title: \"On This Page\",\n    float: true\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Arguments Approach with useSWR in JavaScript\nDESCRIPTION: An example showing the incorrect way to pass multiple arguments to a fetcher function, which can lead to caching issues if the token changes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/arguments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseSWR('/api/user', url => fetchWithToken(url, token))\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for Nextra Docs Theme Overview\nDESCRIPTION: Imports specific icon components from the project's components directory to be used in the overview page.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxIcon, ChevronRightIcon } from '@components/icons'\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Cards in MDX with Image Links\nDESCRIPTION: Creates a grid of three sponsor cards using the Cards component with image links to sponsor websites. Each card contains a sponsor logo with alt text and a link to their site.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/sponsors/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards num={3}>\n<>[![xyflow preview](../showcase/_logos/xyflow.jpg)](https://xyflow.com?utm_source=nextra.site&utm_campaign=nextra&utm_content=logolink)</>\n<>[![Speakeasy preview](../showcase/_logos/speakeasy.png)](https://speakeasyapi.dev/docs?utm_source=nextra.site&utm_campaign=nextra&utm_content=logolink)</>\n<>[![GraphQL Hive preview](../showcase/_logos/graphql-hive.png)](https://the-guild.dev/graphql/hive?utm_source=nextra.site&utm_campaign=nextra&utm_content=logolink)</>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon Glyph\nDESCRIPTION: Uses a single character or emoji as a favicon for the documentation site, providing a simple way to add a distinctive browser icon.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  faviconGlyph: '🐱'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Import Statement for Router Hooks\nDESCRIPTION: Code example showing how to import useRouter hook from nextra/hooks for accessing locale and defaultLocale.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from 'nextra/hooks'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Head Component with TypeScript\nDESCRIPTION: Configuration for injecting custom elements into the document head in a Nextra theme. This is useful for adding meta tags, custom styles, or scripts to the HTML head.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content=\"Nextra: the next docs builder\" />\n      <meta name=\"og:title\" content=\"Nextra: the next docs builder\" />\n    </>\n  ),\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Including stdio in C\nDESCRIPTION: Example of including the stdio.h header in a C file.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n```\n\n----------------------------------------\n\nTITLE: Updating Table Component Import Structure in Nextra\nDESCRIPTION: Shows the migration from separate table components to a namespaced approach under the Table component. Updates import statement and component usage syntax for Th, Tr, and Td components.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { Table, Th, Tr, Td } from 'nextra/components'\n+ import { Table } from 'nextra/components'\n\n// ...\n\n- <Th>\n+ <Table.Th>\n- <Tr>\n+ <Table.Tr>\n- <Td>\n+ <Table.Td>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Nextra Showcase\nDESCRIPTION: Imports necessary components from Nextra and React for building the showcase page. It includes Cards and Image components from Nextra, and the cloneElement function from React.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/showcase/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cards, Image } from 'nextra/components'\nimport { cloneElement } from 'react'\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Component in Nextra Configuration\nDESCRIPTION: Example of implementing a custom banner component in Nextra configuration. This shows how to add a site-wide banner for announcements or important messages.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/index.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  banner: {\n    key: 'banner-key',\n    text: 'Banner text'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Primary Saturation with TypeScript\nDESCRIPTION: Configuration for the color saturation in a Nextra theme. This controls the intensity of the primary color used throughout the theme.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  primarySaturation: 50, // Less saturated color\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Navigation with TypeScript\nDESCRIPTION: Configuration for the main navigation in a Nextra theme. This allows you to customize the navigation bar, including links, behavior, and appearance.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  navigation: {\n    prev: true,\n    next: true\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Turbopack Error for Non-Serializable Options\nDESCRIPTION: This snippet shows the error message displayed by Turbopack when attempting to use non-serializable options like custom plugins. It indicates that only plain JavaScript objects and values are allowed as options.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/turbopack/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nError: loader nextra/loader for match \"./{src/app,app}/**/page.{md,mdx}\" does not have serializable options.\nEnsure that options passed are plain JavaScript objects and values.\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Components for Nextra Advanced Features Overview\nDESCRIPTION: This code snippet imports various icon components from custom and Nextra sources. These icons are used to visually represent different advanced features in the Nextra documentation framework.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CloudIcon,\n  DiagramIcon,\n  FormulaIcon,\n  TableIcon,\n  TailwindIcon\n} from '@components/icons'\nimport { TerminalIcon, TypeScriptIcon } from 'nextra/icons'\nimport { OverviewPage } from '../../_components/overview-page'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra to Hide Sidebar\nDESCRIPTION: This JSON configuration demonstrates how to disable the sidebar for a specific page in Nextra documentation. The 'theme' object contains a 'sidebar' property set to false, which tells Nextra not to render the sidebar for this page.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/change-log.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"theme\": {\n  \"sidebar\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Footer with TypeScript\nDESCRIPTION: Configuration for the footer section in a Nextra theme. This allows customization of the footer content, including copyright information and additional links.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  footer: {\n    text: <span>MIT {new Date().getFullYear()} © Nextra.</span>\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Scala Hello World with Line Numbers\nDESCRIPTION: Scala example demonstrating line number display and specific line range highlighting (lines 2-4), with word highlighting for 'println'.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/code-highlighting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nobject Hello {\n  def main(args: Array[String]) = {\n    println(\"hello, world\")\n  }\n}\n\nobject Hello {\n  def main(args: Array[String]) = {\n    println(\"hello, world\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Component SEO Update\nDESCRIPTION: Making Tab component crawlable and indexable by search engines by default for better SEO.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n6ec3241c: Make the `<Tab />` component be crawlable and indexable by search engines by default\n```\n\n----------------------------------------\n\nTITLE: Plain Text with Word Highlighting\nDESCRIPTION: Simple text example with word highlighting for the term 'hello'.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/code-highlighting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeSandbox iframe for SWR Infinite Loading Demo\nDESCRIPTION: This code snippet configures an iframe that embeds a CodeSandbox demonstration of SWR's infinite loading capability. The iframe is styled for proper display and includes necessary security attributes.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/infinite-loading.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-infinite-z6r0r?file=/src/App.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Infinite Loading\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Card Component Changes\nDESCRIPTION: Removes image prop from Card component and makes icon prop optional. Image display now depends on children prop truthiness.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n2872606: remove `image` prop from `<Card>` component, image will be showed based on truthiness `children` prop now\n\nset `icon` as optional prop\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Primary Hue with TypeScript\nDESCRIPTION: Configuration for the primary color hue in a Nextra theme. This allows customization of the theme's primary color, which affects various UI elements like buttons and links.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  primaryHue: 120, // Green color\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Autolink Syntax\nDESCRIPTION: Example of GitHub Flavored Markdown autolink syntax that automatically converts URLs into clickable links.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nVisit https://nextjs.org.\n```\n\n----------------------------------------\n\nTITLE: LaTeX Expression Example\nDESCRIPTION: Example of writing a LaTeX mathematical expression using dollar sign delimiters to render the square root of a^2 + b^2.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/latex.mdx#2025-04-17_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n$\\sqrt{a^2 + b^2}$\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components for Nextra Blog Theme in JSX\nDESCRIPTION: This code snippet imports various icons from a custom components directory and the FileIcon from Nextra. It also imports an OverviewPage component, likely used to render the main content of the blog theme documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/blog-theme/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  ChevronRightIcon,\n  FilesIcon,\n  RSSIcon,\n  TagsIcon\n} from '@components/icons'\nimport { FileIcon } from 'nextra/icons'\nimport { OverviewPage } from '../../_components/overview-page'\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components for Nextra Guide Overview\nDESCRIPTION: This code imports various icon components from local and Nextra icon libraries, then sets up the Guide overview page using these icons and metadata configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  BrushIcon,\n  GlobeIcon,\n  LightningIcon,\n  PictureIcon,\n  StarsIcon\n} from '@components/icons'\nimport { InformationCircleIcon, LinkIcon, MarkdownIcon } from 'nextra/icons'\nimport { OverviewPage } from '../../_components/overview-page'\n\n# Guide\n\nThe following features are configured via the Next.js configuration and are\navailable in all themes.\n\n<OverviewPage\n  filePath={metadata.filePath}\n  icons={{\n    MarkdownIcon,\n    StarsIcon,\n    LinkIcon,\n    PictureIcon,\n    LightningIcon,\n    GlobeIcon,\n    BrushIcon,\n    InformationCircleIcon\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Meta File Export\nDESCRIPTION: Static props export for _meta files handling not found cases in static exports.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = () => ({ notFound: true })\n```\n\n----------------------------------------\n\nTITLE: Formatting Version Number in Markdown\nDESCRIPTION: Displays the version number '4.3.0-alpha.19' as a second-level heading in Markdown.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.19\n```\n\n----------------------------------------\n\nTITLE: Defining File Tree Components in JSX\nDESCRIPTION: JSX code defining FileTree components to display project structure without src directory, including app, content, and configuration files.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/src-directory/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const nextConfigPackageJson = (\n  <>\n    <FileTree.File name=\"next.config.js\" />\n    <FileTree.File name=\"package.json\" />\n  </>\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const folders = (\n  <>\n    <FileTree.Folder name=\"app\" open>\n      <FileTree.Folder name=\"[[...mdxPath]]\" open>\n        <FileTree.File name=\"page.jsx\" />\n      </FileTree.Folder>\n      <FileTree.File name=\"layout.jsx\" />\n    </FileTree.Folder>\n    <FileTree.Folder name=\"content\" open active>\n      <FileTree.File name=\"index.mdx\" active />\n    </FileTree.Folder>\n    <FileTree.File name=\"mdx-components.js\" active />\n  </>\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FileTree>\n  **Without `src` directory**\n  <FileTree.Folder name=\"your-project\" open>\n    {folders}\n    {nextConfigPackageJson}\n  </FileTree.Folder>\n</FileTree>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FileTree>\n  **With `src` directory**\n  <FileTree.Folder name=\"your-project\" open>\n    <FileTree.Folder name=\"src\" open active>\n      {folders}\n    </FileTree.Folder>\n    {nextConfigPackageJson}\n  </FileTree.Folder>\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeSandbox iFrame Embed with React JSX\nDESCRIPTION: Demonstrates how to embed a CodeSandbox project using an iframe element with custom styling properties and security attributes. The iframe is configured to display SWR basic usage demo with dark theme and specific permissions.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/full.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-p7dg6?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Basic Usage\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.3.0-alpha.15\nDESCRIPTION: Improves TSDoc comments and adds new API documentation page\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.15\n\n### Patch Changes\n\n- b2cba90: improve TSDoc comments for `getPageMap`, `generateStaticParamsFor`\n  and `importPage` functions. Add new https://nextra.site/docs/guide/api page.\n- Updated dependencies [b2cba90]\n  - nextra@4.3.0-alpha.15\n```\n\n----------------------------------------\n\nTITLE: Importing FileTree Component in MDX\nDESCRIPTION: Example of importing and using the FileTree component from Nextra to display project structure.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/page-file/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileTree } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextra Theme Layout with TypeScript\nDESCRIPTION: This snippet shows how to configure the layout of a Nextra theme, including banners, navigation bar, and footer. It demonstrates setting up social links, logo, project links and other layout components.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/first-child-route-should-return-index-as-first/blog/a.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsThemeConfig } from 'nextra-theme-docs'\n\nconst themeConfig: DocsThemeConfig = {\n  banner: {\n    key: 'banner',\n    text: <a href=\"/docs/blog/2023-announcing\">🎉 Nextra 2 is released. Read announcement →</a>\n  },\n  logo: <span>My Project</span>,\n  project: {\n    link: 'https://github.com/shuding/nextra'\n  },\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js and Nextra Components\nDESCRIPTION: Initial import statements for required Nextra and MDX components.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/ssg/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compileMdx } from 'nextra/compile'\nimport { Callout } from 'nextra/components'\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Implementing Nextra Tabs Component with Custom Items\nDESCRIPTION: Creates a tabbed interface using Nextra's Tabs component with multiple predefined items. The implementation includes two tabs with different styling, where the first tab has a red background class applied.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/scrollbar-x.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs\n  items={[\n    'name',\n    'version',\n    'private',\n    'dependencies',\n    'scripts',\n    'eslintConfig',\n    'browserslist',\n    'development',\n    'name',\n    'version',\n    'private'\n  ]}\n>\n  <Tabs.Tab className=\"bg-red-500\">dada</Tabs.Tab>\n  <Tabs.Tab>dadasd</Tabs.Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Bleed Component from Nextra\nDESCRIPTION: Imports the Bleed component from Nextra's component library, which is used for full-width image displays in the documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Bleed } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Importing MDXRemote Component in Nextra\nDESCRIPTION: Updates the import path for the MDXRemote component, which was renamed and moved to a different module.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MDXRemote } from 'nextra/mdx-remote'\n```\n\n----------------------------------------\n\nTITLE: Updating Nextra Configuration Options\nDESCRIPTION: Replaces the 'transformPageOpts' Nextra option with 'transformPageMap' for improved page map manipulation.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- 8bce16d3: replace `transformPageOpts` nextra option by `transformPageMap`\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Configuration in Nextra _meta.js\nDESCRIPTION: Shows how to use the '*' key to define fallback configuration for all items in a folder, eliminating the need to set the same options for each page individually.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/meta-file/page.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  '*': {\n    type: 'page'\n  },\n  index: 'Home',\n  frameworks: 'Frameworks',\n  fruits: 'Fruits',\n  about: 'About'\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox for Next.js SSR with SWR\nDESCRIPTION: This snippet embeds a CodeSandbox example demonstrating SWR usage in a Next.js SSR context. The iframe is styled for full-width display and includes various permissions for interactive functionality.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/ssr.mdx#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-ssr-j9b2y?file=/pages/index.js?codemirror=1&fontsize=14&theme=dark&autoresize=1&hidenavigation=1\"\n  style={{\n    width: '100%',\n    height: '100%',\n    border: 0,\n    overflow: 'hidden',\n    background: 'rgb(21, 21, 21)'\n  }}\n  title=\"SWR - Next.js SSR\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Utility Functions\nDESCRIPTION: This code snippet shows how to import utility functions from Nextra packages. These functions can be useful for custom theme development.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { normalizePages } from 'nextra/normalize-pages'\nimport { useFSRoute } from 'nextra/hooks'\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js, Nextra and React Dependencies\nDESCRIPTION: Command to install the core dependencies required for a Nextra project, including React, React DOM, Next.js, and Nextra itself.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i react react-dom next nextra\n```\n\n----------------------------------------\n\nTITLE: Setting Banner Storage Key\nDESCRIPTION: Configures the localStorage key used to control the display of the banner, allowing users to dismiss it persistently.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  bannerKey: 'Nextra-banner'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL ESLint Plugin via npm/yarn\nDESCRIPTION: Command to install the GraphQL ESLint plugin using npm, with automatic conversion for yarn users through the npm2yarn directive.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/foo.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @graphql-eslint/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Table Component Import Structure\nDESCRIPTION: Shows the migration from individual table component imports to using nested components under the Table namespace, affecting Th, Tr, and Td components.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Table, Th, Tr, Td } from 'nextra/components'\n+ import { Table } from 'nextra/components'\n\n// ...\n\n- <Th>\n+ <Table.Th>\n- <Tr>\n+ <Table.Tr>\n- <Td>\n+ <Table.Td>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for SWR Basic Usage in HTML\nDESCRIPTION: This code snippet embeds a CodeSandbox example that demonstrates the basic usage of SWR. The iframe is styled to take up most of the viewport height and full width, providing an interactive example for users to explore.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/examples/basic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/swr-basic-p7dg6?codemirror=1&fontsize=14&autoresize=1\"\n  className=\"mt-6 h-[calc(100dvh-var(--nextra-navbar-height))] w-full\"\n  title=\"SWR - Basic Usage\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Task List Syntax\nDESCRIPTION: Example of GitHub Flavored Markdown task list syntax with checkboxes for completed and pending items.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n```\n\n----------------------------------------\n\nTITLE: Adding MathJax Support to Nextra\nDESCRIPTION: Introduces MathJax support in Nextra, enabling the rendering of mathematical equations in documentation.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- 440ff42d: add MathJax support\n```\n\n----------------------------------------\n\nTITLE: Using SWR with React Suspense\nDESCRIPTION: Example showing how to integrate SWR with React Suspense by enabling the suspense option. This allows components to suspend rendering until data is available, providing a fallback UI during the loading state.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/suspense.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data } = useSWR('/api/user', fetcher, { suspense: true })\n  return <div>hello, {data.name}</div>\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Profile />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World in Python\nDESCRIPTION: Simple Python script that prints 'Hello, world!' to the console.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/tabs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello, world!')\n```\n\n----------------------------------------\n\nTITLE: Building Nextra Docs Theme Package\nDESCRIPTION: Command to build the Nextra docs theme package using PNPM.\nSOURCE: https://github.com/shuding/nextra/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter nextra-theme-docs build\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js, Nextra and React Dependencies\nDESCRIPTION: Command to install the core dependencies required for a Nextra project, including Next.js, Nextra, React, and React DOM.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/blog/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i next nextra react react-dom\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Type\nDESCRIPTION: A GraphQL schema definition for a Character type with a name field of String type.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Variable for Content Width in Nextra Theme\nDESCRIPTION: Allows configuring the content width via a CSS custom property. This enables customizing the layout width without modifying the theme code.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--nextra-content-width\n```\n\n----------------------------------------\n\nTITLE: File Tree List Item Fix\nDESCRIPTION: Fix for ensuring first list item in FileTree component follows correct parent element nesting requirements.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n2a3e3e7: Fix first list item in `<FileTree>` not within permitted parent elements\n```\n\n----------------------------------------\n\nTITLE: Traditional Data Fetching in React Component\nDESCRIPTION: A JSX example of traditional data fetching using useEffect in a top-level component and passing data through props.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// page component\n\nfunction Page() {\n  const [user, setUser] = useState(null)\n\n  // fetch data\n  useEffect(() => {\n    fetch('/api/user')\n      .then(res => res.json())\n      .then(data => setUser(data))\n  }, [])\n\n  // global loading state\n  if (!user) return <Spinner />\n\n  return (\n    <div>\n      <Navbar user={user} />\n      <Content user={user} />\n    </div>\n  )\n}\n\n// child components\n\nfunction Navbar({ user }) {\n  return (\n    <div>\n      ...\n      <Avatar user={user} />\n    </div>\n  )\n}\n\nfunction Content({ user }) {\n  return <h1>Welcome back, {user.name}</h1>\n}\n\nfunction Avatar({ user }) {\n  return <img src={user.avatar} alt={user.name} />\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output of Optimized State Changes\nDESCRIPTION: Shows the reduced number of renders when only tracking the data state in SWR.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/advanced/performance.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nundefined // => hydration / initial render\nData // => end retrying, get the data\n```\n\n----------------------------------------\n\nTITLE: Referencing @nextra/tsdoc Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @nextra/tsdoc package in a markdown file. It's used to indicate the package name for TSDoc integration with Nextra.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/tsdoc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@nextra/tsdoc`\n```\n\n----------------------------------------\n\nTITLE: Creating a First MDX Page in Nextra Content Directory\nDESCRIPTION: This example shows how to create an initial index.mdx file in the content directory, which serves as the homepage for a Nextra site. The file contains simple Markdown content with a heading and text.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/file-conventions/content-directory/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n# Welcome to Nextra\n\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Error Response Schema\nDESCRIPTION: Schema showing the error response structure for non-English content.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"non-english-content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Aligned Table in Markdown\nDESCRIPTION: Example of a markdown table with different column alignments - left, center, and right aligned columns. The table contains sample data across multiple rows and columns.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/blog/app/posts/(with-comments)/table/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Left | Center | Right | Right | Right | Right | Right | Right | Right | Right |\n| ---- | :----: | ----: | ----: | ----: | ----: | ----: | ----: | ----: | ----: |\n| ss2  |  333   |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |\n|      |  222   |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |  3232 |\n|      |   23   |       |       |       |       |       |       |       |       |\n```\n\n----------------------------------------\n\nTITLE: Installing the Nextra Blog Theme Package\nDESCRIPTION: Command to install the Nextra blog theme package which provides the styling and components for a blog-style site.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/blog/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i nextra-theme-blog\n```\n\n----------------------------------------\n\nTITLE: Using Custom Heading ID in Markdown\nDESCRIPTION: Demonstrates how to specify a custom heading ID in Markdown using square brackets syntax at the end of the heading.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n# my very long heading... [#my-custom-heading]\n```\n\n----------------------------------------\n\nTITLE: Basic C Include Statement\nDESCRIPTION: Shows how to include the stdio.h header file in C for standard input/output operations.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include <stdio.h>\n```\n\n----------------------------------------\n\nTITLE: Displaying Plaintext Code Block with Copy Button\nDESCRIPTION: A simple code block without language specification that demonstrates the 'Copy Code' button functionality. This shows how Nextra handles code blocks when no language is specified.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/code-block-without-language.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Installing KaTeX Dependencies\nDESCRIPTION: Command to install the KaTeX package via npm or yarn\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/latex/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i katex\n```\n\n----------------------------------------\n\nTITLE: JavaScript Console Output with Filename\nDESCRIPTION: Example showing JavaScript console logging with filename annotation and first line highlighting.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/code-highlighting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('hello world')\n\nconsole.log('goodbye world')\n```\n\n----------------------------------------\n\nTITLE: Console Output of SWR State Changes\nDESCRIPTION: Shows the console output from a failed initial request followed by a successful retry, demonstrating the state changes in SWR.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/advanced/performance.mdx#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nundefined undefined true  // => start fetching\nundefined Error false     // => end fetching, got an error\nundefined Error true      // => start retrying\nData undefined false      // => end retrying, get the data\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Link Example\nDESCRIPTION: Shows the basic Markdown syntax for creating a relative link that will be automatically converted to a Next.js link.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/link/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nClick [here](/about) to read more.\n```\n\n----------------------------------------\n\nTITLE: Disabling Zoom for Specific Images\nDESCRIPTION: Demonstrates how to disable zoom for specific images when zoom is globally enabled using the Image component.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/image/page.mdx#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Image } from 'nextra/components'\n\n<Image src=\"/demo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Update - 2.0.0-beta.45\nDESCRIPTION: Version number update entry marking release 2.0.0-beta.45.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-beta.45\n```\n\n----------------------------------------\n\nTITLE: JavaScript Console Log Example\nDESCRIPTION: A simple JavaScript code snippet demonstrating console output, used to showcase syntax highlighting in MDX.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/features/mdx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('hello, world')\n```\n\n----------------------------------------\n\nTITLE: Markdown Strikethrough Syntax\nDESCRIPTION: Example of GitHub Flavored Markdown strikethrough syntax using double tildes.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/markdown/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n~~removed~~\n```\n\n----------------------------------------\n\nTITLE: ANSI Highlighting in Code Block\nDESCRIPTION: Shows an example of ANSI escape code highlighting in a code block.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/syntax-highlighting/page.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ansi\nCODE:\n```\n[0m [0;32m✓[0m [0;2msrc/[0mindex[0;2m.test.ts (1)[0m\n  [0;2m Test Files [0m [0;1;32m1 passed[0;98m (1)[0m\n  [0;2m      Tests [0m [0;1;32m1 passed[0;98m (1)[0m\n  [0;2m   Start at [0m 23:32:41\n  [0;2m   Duration [0m 11ms\n  [42;1;39;0m PASS [0;32m Waiting for file changes...[0m\n         [0;2mpress [0;1mh[0;2m to show help, press [0;1mq[0;2m to quit\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra in next.config.js\nDESCRIPTION: This code snippet shows how to configure Next.js to use Nextra by creating a next.config.js file with the necessary settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/pagesOnly/one.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = require('nextra')({\\n  theme: 'nextra-theme-docs',\\n  themeConfig: './theme.config.jsx'\\n})\\n \\nmodule.exports = withNextra()\\n \\n// If you have other Next.js configurations, you can pass them as the parameter:\\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Building Nextra Core Package\nDESCRIPTION: Command to build the core Nextra package using PNPM. Also includes an additional command for watch mode development.\nSOURCE: https://github.com/shuding/nextra/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter nextra build\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name and Version in Markdown\nDESCRIPTION: Shows the package name 'nextra-theme-blog' as a top-level heading in Markdown.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# nextra-theme-blog\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Class in Python\nDESCRIPTION: A Python class implementation of the Character type with a name method that returns the private _name attribute.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/getting-started.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# type Character {\nclass Character:\n  # name: String\n  def name(self):\n    return self._name\n```\n\n----------------------------------------\n\nTITLE: Code Property Validation Schema\nDESCRIPTION: Schema showing the required structure of the JSON response object with properties for page metadata and code snippets.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page_title\": \"string\",\n  \"page_description\": \"string\",\n  \"page_summary\": \"string\",\n  \"languages\": [\"string\"],\n  \"codeSnippets\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\", \n      \"language\": \"string\",\n      \"codeList\": [{\n        \"language\": \"string\",\n        \"code\": \"string\"\n      }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Heading ID in Markdown\nDESCRIPTION: This snippet demonstrates the syntax for creating a custom heading ID in Markdown. It allows users to specify a custom anchor for long headings.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n# my very long heading... [#my-custom-heading]\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Nextra Docs Theme\nDESCRIPTION: Sets up frontmatter configurations for the Nextra Docs Theme page, including indexing and sidebar title settings.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/docs-theme/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nasIndexPage: true\nsidebarTitle: Docs Theme\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Remark Plugin to Nextra\nDESCRIPTION: Incorporates the 'remark-smartypants' plugin into Nextra for improved typography handling.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- 3644e1c2: add `remark-smartypants`\n```\n\n----------------------------------------\n\nTITLE: Installing Pagefind as a Development Dependency in Nextra\nDESCRIPTION: Command to install Pagefind, a static search library, as a development dependency in a Nextra project.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/guide/search/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D pagefind\n```\n\n----------------------------------------\n\nTITLE: Exporting Page Metadata Configuration\nDESCRIPTION: Exports a metadata object containing a title property for page configuration in Nextra framework.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/title/3-title.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: 'from title'\n}\n```\n\n----------------------------------------\n\nTITLE: Reorganizing Nextra Exports\nDESCRIPTION: Removes 'nextra/data' export and relocates 'useData' and 'RemoteContent' to different modules for better organization.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- 8efbb45c: remove `nextra/data` export, move `useData` to `nextra/hooks`,\n  `RemoteContent` to `nextra/components`\n```\n\n----------------------------------------\n\nTITLE: Excluding Page from App Router in Nextra (JSX)\nDESCRIPTION: This code snippet contains a JSX comment that instructs Nextra to not treat this file as an App Router page. This is likely used for configuration or special handling of certain pages within a Nextra project.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{/* this file should not be treated as App Router page */}\n```\n\n----------------------------------------\n\nTITLE: Simple Markdown Header\nDESCRIPTION: A level 1 header containing the text 'Two'\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/more/tree/two.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Two\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.3.0-alpha.19\nDESCRIPTION: Adds a new TSDoc prop and updates dependencies\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.19\n\n### Patch Changes\n\n- 407e0c4: feat(TSDoc): add `TSDoc.noParametersContent` prop\n- Updated dependencies [407e0c4]\n  - nextra@4.3.0-alpha.19\n```\n\n----------------------------------------\n\nTITLE: Pre-rendering with Default Data in Next.js using SWR\nDESCRIPTION: This code demonstrates how to use SWR with Next.js getStaticProps for pre-rendering. It shows how to pass pre-fetched data as initial values for SWR hooks using the fallback option of SWRConfig, which enables SEO-friendly pages while maintaining client-side data updating capabilities.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/with-nextjs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  // `getStaticProps` is executed on the server side.\n  const article = await getArticleFromAPI()\n  return {\n    props: {\n      fallback: {\n        '/api/article': article\n      }\n    }\n  }\n}\n\nfunction Article() {\n  // `data` will always be available as it's in `fallback`.\n  const { data } = useSWR('/api/article', fetcher)\n  return <h1>{data.title}</h1>\n}\n\nexport default function Page({ fallback }) {\n  // SWR hooks inside the `SWRConfig` boundary will use those values.\n  return (\n    <SWRConfig value={{ fallback }}>\n      <Article />\n    </SWRConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Beta Changes\nDESCRIPTION: Collection of patch changes and updates for Nextra project beta releases, documenting various fixes, improvements and feature additions across multiple versions.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- e4cfb83: `addPage` no longer need accept `frontMatter`\n- 94ef0b3: improve 2.0 docs\n- 8101efe: fix(nextra): use `rehype-mdx-title` to determine page title\n- 6644bd5: pass unstable_flexsearch\n- cef5546: allow headings contain links\n- 2217f9c: fix `Warning: Prop `href` did not match. Server: \"#\" Client: ...`\n- e6771ca: fix edit on github button for cases when filename named as `index`\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Heading\nDESCRIPTION: Demonstrates a simple first-level heading in Markdown format\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/more/tree/one.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# One\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Data Fetching with SWR in JavaScript\nDESCRIPTION: Demonstrates how to fetch data that depends on the results of another request using SWR. The second request only executes after the first one completes and provides the necessary dependency data.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/es/docs/conditional-fetching.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProjects() {\n  const { data: user } = useSWR('/api/user')\n  const { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n  // Al pasar una función, SWR utilizará el valor devuelto\n  // como `key`. Si la función lanza o devuelve\n  // falsy, SWR sabrá que algunas dependencias no estan\n  // ready. En este caso `user.id` lanza cuando `user`\n  // no este cargado.\n\n  if (!projects) return 'loading...'\n  return 'You have ' + projects.length + ' projects'\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.3.0-alpha.16\nDESCRIPTION: Fixes collapse behavior of sidebar\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.16\n\n### Patch Changes\n\n- b0dde33: Fix collapse behaviour of sidebar\n\n  - When a nested route item is active, clicking the parent route item should\n    not collapse the section.\n  - When the collapsible section is open, clicking the parent route item should\n    not cause it to collapse.\n  - Switching to another route should not trigger an unexpected reopening.\n  - nextra@4.3.0-alpha.16\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.3.0-alpha.17\nDESCRIPTION: Fixes phantom scroll issue when footer is disabled\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-docs/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0-alpha.17\n\n### Patch Changes\n\n- 8edc715: fix phantom scroll when footer is disabled\n  - nextra@4.3.0-alpha.17\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Update - 2.0.0-beta.44\nDESCRIPTION: Version number update entry marking release 2.0.0-beta.44 with documentation improvements and Next.js 13 updates.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-beta.44\n\n### Patch Changes\n\n- 94ef0b3: improve 2.0 docs\n- fdb2f57: update docs to use next.js 13\n- b1d7361: improve docs for 2.0\n- 74a3398: update docs for 2.0\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Update - 2.0.0-beta.43\nDESCRIPTION: Version number update entry marking release 2.0.0-beta.43 with Next.js 13 compatibility changes.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra-theme-blog/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-beta.43\n\n### Patch Changes\n\n- 59e18b0: make `nextra`/`nextra-theme-docs`/`nextra-theme-blog` be compatible\n  with next 13\n```\n\n----------------------------------------\n\nTITLE: Dynamic Metadata Generation in Catch-All Routes (JSX)\nDESCRIPTION: Demonstrates how to generate metadata dynamically in a Next.js catch-all route by importing page content and extracting metadata properties.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { importPage } from 'nextra/pages'\n\nexport async function generateMetadata(props) {\n  const { mdxPath } = await props.params\n  const { metadata } = await importPage(mdxPath)\n  return {\n    title: metadata.title || 'Nextra',\n    description: metadata.description || 'The next site builder'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Nextra Blog Theme\nDESCRIPTION: This code shows how to configure Next.js to use Nextra with the blog theme by modifying the next.config.js file.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/type-menu-should-contain-items/pagesOnly/one.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNextra = require('nextra')({\\n  theme: 'nextra-theme-blog',\\n  themeConfig: './theme.config.jsx'\\n})\\n \\nmodule.exports = withNextra()\\n \\n// If you have other Next.js configurations, you can pass them as the parameter:\\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Nextra\nDESCRIPTION: JavaScript configuration for Next.js that sets up Nextra as a plugin. This configuration exports a function that applies Nextra with a specified theme configuration.\nSOURCE: https://github.com/shuding/nextra/blob/main/packages/nextra/src/server/__tests__/fixture/page-maps/active-type-should-be-initialized-from-star/1-level/foo.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// next.config.js\nconst withNextra = require('nextra')({  \n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.jsx',\n  // optional: add `staticImage: true` to enable Nextra's auto image import\n})\n \nmodule.exports = withNextra()\n \n// If you have other Next.js configurations, you can pass them as the parameter:\n// module.exports = withNextra({ /* other next.js config */ })\n```\n\n----------------------------------------\n\nTITLE: Resetting SWR Cache Between Test Cases\nDESCRIPTION: Example of how to reset the SWR cache between test cases in a testing environment by wrapping the application with an empty Map cache provider for each test.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/cache.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('test suite', async () => {\n  it('test case', async () => {\n    render(\n      <SWRConfig value={{ provider: () => new Map() }}>\n        <App />\n      </SWRConfig>\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Navigation Arrows Display\nDESCRIPTION: Enables or disables the next and previous page arrows shown at the bottom of each documentation page, helping users navigate through sequential content.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/docs/src/content/themes/docs/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nextLinks: true,\n  prevLinks: true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Markdown Import Component in JSX/Markdown\nDESCRIPTION: This snippet demonstrates the usage of the imported ExampleDynamicMarkdownImport component within a Markdown file. It shows how to embed a React component that dynamically imports Markdown content into a Markdown document.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/dynamic-markdown-import.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleDynamicMarkdownImport />\n```\n\n----------------------------------------\n\nTITLE: Absolute Path Image Import in Markdown\nDESCRIPTION: This snippet shows how to import an image using an absolute path in Markdown. The image is referenced as the SWR logo and is located in the favicon directory.\nSOURCE: https://github.com/shuding/nextra/blob/main/examples/swr-site/content/en/docs/advanced/images.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![SWR logo](/favicon/android-chrome-192x192.png)\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata Object in MDX\nDESCRIPTION: Shows how to define page metadata by exporting a metadata object in an MDX file instead of using frontmatter syntax.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/built-ins/head/page.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nexport const metadata = {\n  title: 'My title',\n  description: 'My description'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies for Nextra\nDESCRIPTION: Command to install TypeScript and required type definition packages as development dependencies for a Nextra project.\nSOURCE: https://github.com/shuding/nextra/blob/main/docs/app/docs/advanced/typescript/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D typescript @types/react @types/node\n```"
  }
]