[
  {
    "owner": "solana-foundation",
    "repo": "anchor",
    "content": "TITLE: Implementing Token Minting CPI in Solana with Anchor (Rust)\nDESCRIPTION: Complete Anchor program module that demonstrates how to mint tokens via CPI to the Token Program. Shows the full implementation including the program module definition, mint_tokens instruction handler, and the MintTokens account validation struct.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl:{\n    token_interface::{self, Mint, MintTo, TokenAccount, TokenInterface},\n};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn mint_tokens(ctx: Context<MintTokens>, amount: u64) -> Result<()> {\n        let cpi_accounts = MintTo {\n            mint: ctx.accounts.mint.to_account_info(),\n            to: ctx.accounts.token_account.to_account_info(),\n            authority: ctx.accounts.signer.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts);\n        token_interface::mint_to(cpi_context, amount)?;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct MintTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(mut)]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(mut)]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Anchor Program Structure\nDESCRIPTION: A basic Anchor program demonstrating the usage of key macros. Contains a single initialize instruction that creates and initializes a new account with a u64 value.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"11111111111111111111111111111111\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Callee Program with Anchor in Rust\nDESCRIPTION: This Rust code defines a Solana program using the Anchor framework. The program consists of modules to initialize a counter and increment its value. Two account structs handle the proper allocation and increment of the counter. The dependencies include anchor_lang for Solana operations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\");\n\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let counter = &ctx.accounts.counter;\n        msg!(\"Counter account created! Current count: {}\", counter.count);\n        Ok(())\n    }\n\n    pub fn increment(ctx: Context<Increment>) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        msg!(\"Previous counter: {}\", counter.count);\n\n        counter.count += 1;\n        msg!(\"Counter incremented! Current count: {}\", counter.count);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n\n    #[account(\n        init,\n        payer = payer,\n        space = 8 + 8\n    )]\n    pub counter: Account<'info, Counter>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut)]\n    pub counter: Account<'info, Counter>,\n}\n\n#[account]\npub struct Counter {\n    pub count: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Anchor Program with Custom Account in Rust\nDESCRIPTION: This code snippet shows a complete Anchor program implementation with a custom account structure. It demonstrates how to initialize and use the custom account within the program instruction, including data assignment and message logging.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"11111111111111111111111111111111\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Client for Interacting with an Anchor Program\nDESCRIPTION: This TypeScript code demonstrates how to use the Anchor framework to interact with a Solana program. It includes initializing a program instance, sending a transaction with the 'initialize' instruction, and fetching account data using the program's IDL.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program, BN } from \"@coral-xyz/anchor\";\nimport { HelloAnchor } from \"../target/types/hello_anchor\";\nimport { Keypair } from \"@solana/web3.js\";\nimport assert from \"assert\";\n\ndescribe(\"hello_anchor\", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n  const wallet = provider.wallet as anchor.Wallet;\n  const program = anchor.workspace.HelloAnchor as Program<HelloAnchor>;\n\n  it(\"initialize\", async () => {\n    // Generate keypair for the new account\n    const newAccountKp = new Keypair();\n\n    // Send transaction\n    const data = new BN(42);\n    // [!code word:initialize]\n    // [!code highlight:8]\n    const transactionSignature = await program.methods\n      .initialize(data)\n      .accounts({\n        newAccount: newAccountKp.publicKey,\n        signer: wallet.publicKey,\n      })\n      .signers([newAccountKp])\n      .rpc();\n\n    // Fetch the created account\n    const newAccount = await program.account.newAccount.fetch(\n      newAccountKp.publicKey,\n    );\n\n    console.log(\"Transaction signature: \", transactionSignature);\n    console.log(\"On-chain data is:\", newAccount.data.toString());\n    assert(data.eq(newAccount.data));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Client Script for Interaction with Anchor Program in Rust\nDESCRIPTION: This Rust script demonstrates how to interact with a Solana program using the Anchor framework. It establishes a connection, generates keypairs, requests SOL airdrops, builds and sends program instructions, and fetches account data. Dependencies include anchor-client, anchor-lang, anyhow, and tokio for async operations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_client::{\n    solana_client::rpc_client::RpcClient,\n    solana_sdk::{\n        commitment_config::CommitmentConfig, native_token::LAMPORTS_PER_SOL, signature::Keypair,\n        signer::Signer, system_program,\n    },\n    Client, Cluster,\n};\nuse anchor_lang::prelude::*;\nuse std::rc::Rc;\n\ndeclare_program!(example);\nuse example::{accounts::Counter, client::accounts, client::args};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let connection = RpcClient::new_with_commitment(\n        \"http://127.0.0.1:8899\", // Local validator URL\n        CommitmentConfig::confirmed(),\n    );\n\n    // Generate Keypairs and request airdrop\n    let payer = Keypair::new();\n    let counter = Keypair::new();\n    println!(\"Generated Keypairs:\");\n    println!(\"   Payer: {}\", payer.pubkey());\n    println!(\"   Counter: {}\", counter.pubkey());\n\n    println!(\"\nRequesting 1 SOL airdrop to payer\");\n    let airdrop_signature = connection.request_airdrop(&payer.pubkey(), LAMPORTS_PER_SOL)?;\n\n    // Wait for airdrop confirmation\n    while !connection.confirm_transaction(&airdrop_signature)? {\n        std::thread::sleep(std::time::Duration::from_millis(100));\n    }\n    println!(\"   Airdrop confirmed!\");\n\n    // Create program client\n    let provider = Client::new_with_options(\n        Cluster::Localnet,\n        Rc::new(payer),\n        CommitmentConfig::confirmed(),\n    );\n    let program = provider.program(example::ID)?;\n\n    // Build and send instructions\n    println!(\"\nSend transaction with initialize and increment instructions\");\n    let initialize_ix = program\n        .request()\n        .accounts(accounts::Initialize {\n            counter: counter.pubkey(),\n            payer: program.payer(),\n            system_program: system_program::ID,\n        })\n        .args(args::Initialize)\n        .instructions()?\n        .remove(0);\n\n    let increment_ix = program\n        .request()\n        .accounts(accounts::Increment {\n            counter: counter.pubkey(),\n        })\n        .args(args::Increment)\n        .instructions()?\n        .remove(0);\n\n    let signature = program\n        .request()\n        .instruction(initialize_ix)\n        .instruction(increment_ix)\n        .signer(&counter)\n        .send()\n        .await?;\n    println!(\"   Transaction confirmed: {}\", signature);\n\n    println!(\"\nFetch counter account data\");\n    let counter_account: Counter = program.account::<Counter>(counter.pubkey()).await?;\n    println!(\"   Counter value: {}\", counter_account.count);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Example Anchor Program Client - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set up a client to interact with an Anchor program. It includes establishing a connection, creating instructions for initializing and incrementing a counter, and sending the transaction while also handling the necessary SOL funding.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Connection,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  Transaction,\n  sendAndConfirmTransaction,\n} from \"@solana/web3.js\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport type { Example } from \"./idl/example.ts\";\nimport idl from \"./idl/example.json\";\n\n// Set up a connection to the cluster\nconst connection = new Connection(\"http://127.0.0.1:8899\", \"confirmed\");\n\n// Create a Program instance using the IDL and connection\nconst program = new Program(idl as Example, {\n  connection,\n});\n\n// Generate new Keypairs for the payer and the counter account\nconst payer = Keypair.generate();\nconst counter = Keypair.generate();\n\n// Airdrop SOL to fund the payer's account for transaction fees\nconst airdropTransactionSignature = await connection.requestAirdrop(\n  payer.publicKey,\n  LAMPORTS_PER_SOL,\n);\nawait connection.confirmTransaction(airdropTransactionSignature);\n\n// Build the initialize instruction\nconst initializeInstruction = await program.methods\n  .initialize()\n  .accounts({\n    payer: payer.publicKey,\n    counter: counter.publicKey,\n  })\n  .instruction();\n\n// Build the increment instruction\nconst incrementInstruction = await program.methods\n  .increment()\n  .accounts({\n    counter: counter.publicKey,\n  })\n  .instruction();\n\n// Add both instructions to a single transaction\nconst transaction = new Transaction().add(\n  initializeInstruction,\n  incrementInstruction,\n);\n\n// Send the transaction\nconst transactionSignature = await sendAndConfirmTransaction(\n  connection,\n  transaction,\n  [payer, counter],\n);\nconsole.log(\"Transaction Signature\", transactionSignature);\n\n// Fetch the counter account\nconst counterAccount = await program.account.counter.fetch(counter.publicKey);\nconsole.log(\"Count:\", counterAccount.count);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Anchor Program with Account Validation in Rust\nDESCRIPTION: This code snippet shows a complete Anchor program implementation. It includes the program module, account initialization, and a custom account struct. The snippet demonstrates how to use account validation and access validated accounts within an instruction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"11111111111111111111111111111111\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Zero Copy Program Implementation in Rust\nDESCRIPTION: This code provides a full implementation of a Solana program using Anchor's zero-copy feature. It includes the program module, account structures, and instruction implementations for initializing and updating a zero-copy account.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"8B7XpDXjPWodpDUWDSzv4q9k73jB5WdNQXZxNBj1hqw1\");\n\n#[program]\npub mod zero_copy {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let account = &mut ctx.accounts.data_account.load_init()?;\n        account.data = [1; 10232];\n        Ok(())\n    }\n\n    pub fn update(ctx: Context<Update>) -> Result<()> {\n        let account = &mut ctx.accounts.data_account.load_mut()?;\n        account.data = [2; 10232];\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(\n        init,\n        // 10240 bytes is max space to allocate with init constraint\n        space = 8 + 10232,\n        payer = payer,\n    )]\n    pub data_account: AccountLoader<'info, Data>,\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Update<'info> {\n    #[account(mut)]\n    pub data_account: AccountLoader<'info, Data>,\n}\n\n#[account(zero_copy)]\npub struct Data {\n    // 10240 bytes - 8 bytes account discriminator\n    pub data: [u8; 10232],\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Tokens with PDA (Program)\nDESCRIPTION: This Rust code snippet defines the `transfer_tokens` function, which transfers tokens from a program-controlled token account (PDA) to a recipient. It utilizes the `TransferChecked` instruction and signs the CPI with the PDA's seeds and bump to authorize the transfer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::{\n    associated_token::AssociatedToken,\n    token_interface::{self, Mint, MintTo, TokenAccount, TokenInterface, TransferChecked},\n};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_and_mint_tokens(ctx: Context<CreateAndMintTokens>, amount: u64) -> Result<()> {\n        let signer_seeds: &[&[&[u8]]] = &[&[b\"mint\", &[ctx.bumps.mint]]];\n\n        let cpi_accounts = MintTo {\n            mint: ctx.accounts.mint.to_account_info(),\n            to: ctx.accounts.token_account.to_account_info(),\n            authority: ctx.accounts.mint.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n        token_interface::mint_to(cpi_context, amount)?;\n        Ok(())\n    }\n\n    pub fn transfer_tokens(ctx: Context<TransferTokens>) -> Result<()> {\n        let signer_seeds: &[&[&[u8]]] = &[&[b\"token\", &[ctx.bumps.sender_token_account]]];\n\n        let amount = ctx.accounts.sender_token_account.amount;\n        let decimals = ctx.accounts.mint.decimals;\n\n        let cpi_accounts = TransferChecked {\n            mint: ctx.accounts.mint.to_account_info(),\n            from: ctx.accounts.sender_token_account.to_account_info(),\n            to: ctx.accounts.recipient_token_account.to_account_info(),\n            authority: ctx.accounts.sender_token_account.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n        token_interface::transfer_checked(cpi_context, amount, decimals)?;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateAndMintTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint,\n        mint::freeze_authority = mint,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(\n        init,\n        payer = signer,\n        token::mint = mint,\n        token::authority = token_account,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        mut,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(\n        mut,\n        token::mint = mint,\n        token::authority = sender_token_account,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub sender_token_account: InterfaceAccount<'info, TokenAccount>,\n    #[account(\n        init_if_needed,\n        payer = signer,\n        associated_token::mint = mint,\n        associated_token::authority = signer,\n        associated_token::token_program = token_program,\n    )]\n    pub recipient_token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub system_program: Program<'info, System>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Program Tests in TypeScript\nDESCRIPTION: This code snippet demonstrates how to write and run tests for an Anchor program. It initializes a new account, sends a transaction, and verifies the on-chain data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"Test\", () => {\n  it(\"initialize\", async () => {\n    // Generate keypair for the new account\n    const newAccountKp = new web3.Keypair();\n\n    // Send transaction\n    const data = new BN(42);\n    const txHash = await pg.program.methods\n      .initialize(data)\n      .accounts({\n        newAccount: newAccountKp.publicKey,\n        signer: pg.wallet.publicKey,\n        systemProgram: web3.SystemProgram.programId,\n      })\n      .signers([newAccountKp])\n      .rpc();\n    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);\n\n    // Confirm transaction\n    await pg.connection.confirmTransaction(txHash);\n\n    // Fetch the created account\n    const newAccount = await pg.program.account.newAccount.fetch(\n      newAccountKp.publicKey,\n    );\n\n    console.log(\"On-chain data is:\", newAccount.data.toString());\n\n    // Check whether the data on-chain is equal to local 'data'\n    assert(data.eq(newAccount.data));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AccountLoader in Rust for Anchor\nDESCRIPTION: Demonstrates the use of AccountLoader<'info, T> type in an Anchor program. This type facilitates on-demand zero-copy deserialization.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub account: AccountLoader<'info, ZeroCopyAccountType>,\n}\n\n#[account(zero_copy)]\npub struct ZeroCopyAccountType {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Program Instance with AnchorProvider in React Frontend\nDESCRIPTION: Sets up an AnchorProvider and Program instance for a React frontend using the Solana wallet adapter. This creates the necessary connection to interact with a Solana program using a connected wallet.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Program, AnchorProvider, setProvider } from \"@coral-xyz/anchor\";\nimport { useAnchorWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport type { HelloAnchor } from \"./idlType\";\nimport idl from \"./idl.json\";\n\nconst { connection } = useConnection();\nconst wallet = useAnchorWallet();\n\n// [!code word:AnchorProvider]\n// [!code highlight:2]\nconst provider = new AnchorProvider(connection, wallet, {});\nsetProvider(provider);\n\n// [!code word:Program]\n// [!code highlight:3]\nexport const program = new Program(idl as HelloAnchor, {\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Program in Rust using Anchor\nDESCRIPTION: This Rust code demonstrates how to create a counter program using the Anchor framework. It includes functionality to initialize the counter and increment it, with access control ensuring only the designated authority can perform increments.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\nmod counter {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>, start: u64) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        counter.authority = *ctx.accounts.authority.key;\n        counter.count = start;\n        Ok(())\n    }\n\n    pub fn increment(ctx: Context<Increment>) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        counter.count += 1;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = authority, space = 48)]\n    pub counter: Account<'info, Counter>,\n    pub authority: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut, has_one = authority)]\n    pub counter: Account<'info, Counter>,\n    pub authority: Signer<'info>,\n}\n\n#[account]\npub struct Counter {\n    pub authority: Pubkey,\n    pub count: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PDAs in an Anchor Program\nDESCRIPTION: Complete program example showing how to define PDA accounts with seeds and bump constraints in an Anchor program. The program logs the PDA address when the instruction is invoked.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"BZLiJ62bzRryYp9mRobz47uA66WDgtfTXhhgM25tJyx5\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn test_instruction(ctx: Context<InstructionAccounts>) -> Result<()> {\n        msg!(\"PDA: {}\", ctx.accounts.pda_account.key());\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    // [!code word:signer]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code highlight]\n        seeds = [b\"hello_world\", signer.key().as_ref()],\n        bump,\n    )]\n    pub pda_account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens with PDA in Rust\nDESCRIPTION: This snippet implements the mint_tokens function that allows token minting using the provided amount. It establishes the necessary CPI context leveraging PDA's seeds and bumps to authorize the minting action, ultimately calling the token interface's mint_to function.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn mint_tokens(ctx: Context<MintTokens>, amount: u64) -> Result<()> {\n    // [!code word:signer_seeds]\n    // [!code highlight]\n    let signer_seeds: &[&[&[u8]]] = &[&[b\"mint\", &[ctx.bumps.mint]]];\n\n    let cpi_accounts = MintTo {\n        mint: ctx.accounts.mint.to_account_info(),\n        to: ctx.accounts.token_account.to_account_info(),\n        authority: ctx.accounts.mint.to_account_info(),\n    };\n    let cpi_program = ctx.accounts.token_program.to_account_info();\n    // [!code highlight:2]\n    let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n    token_interface::mint_to(cpi_context, amount)?;\n    Ok( ())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Anchor Program with Initialize Instruction in Rust\nDESCRIPTION: This code defines an Anchor program with an 'initialize' instruction that creates and populates a new account. It includes the required account structure and shows how to define custom account data types.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"BYFW1vhC1ohxwRbYoLbAWs86STa25i9sD5uEusVjTYNd\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    // [!code word:initialize]\n    // [!code word:Initialize]\n    // [!code highlight:5]\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data);\n        Ok(())\n    }\n}\n\n // [!code highlight:8]\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Anchor Program for Creating a Mint using Keypair\nDESCRIPTION: A complete Anchor program implementation that demonstrates creating a new mint account using a generated keypair. The program defines an instruction and an account structure with appropriate constraints.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::token_interface::{Mint, TokenInterface};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_mint(ctx: Context<CreateMint>) -> Result<()> {\n        msg!(\"Created Mint Account: {:?}\", ctx.accounts.mint.key());\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code highlight:5]\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = signer.key(),\n        mint::freeze_authority = signer.key(),\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Using InitSpace Macro for Automatic Account Space Calculation in Anchor\nDESCRIPTION: This example shows how to use the InitSpace macro to automatically calculate the required space for an account. The macro adds an INIT_SPACE constant to the structure, simplifying account initialization with nested collections.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/space.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[account]\n// [!code word:InitSpace]\n// [!code highlight]\n#[derive(InitSpace)]\npub struct ExampleAccount {\n    pub data: u64,\n    #[max_len(50)]\n    pub string_one: String,\n    #[max_len(10, 5)]\n    pub nested: Vec<Vec<u8>>,\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n    // [!code word:INIT_SPACE]\n    // [!code highlight]\n    #[account(init, payer = payer, space = 8 + ExampleAccount::INIT_SPACE)]\n    pub data: Account<'info, ExampleAccount>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Accounts in Anchor Program - Rust\nDESCRIPTION: This snippet is part of an Anchor program that provides functions for creating a mint and a token account. It demonstrates how to properly define and utilize context for creating and managing token accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::associated_token::AssociatedToken;\nuse anchor_spl::token_interface::{Mint, TokenAccount, TokenInterface};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_mint(ctx: Context<CreateMint>) -> Result<()> {\n        msg!(\"Created Mint Account: {:?}\", ctx.accounts.mint.key());\n        Ok(())\n    }\n\n    pub fn create_token_account(ctx: Context<CreateTokenAccount>) -> Result<()> {\n        msg!(\"Created Token Account: {:?}\", ctx.accounts.token_account.key());\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint.key(),\n        mint::freeze_authority = mint.key(),\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct CreateTokenAccount<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code highlight:5]\n        init_if_needed,\n        payer = signer,\n        associated_token::mint = mint,\n        associated_token::authority = signer,\n        associated_token::token_program = token_program,\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Anchor Context Type Structure\nDESCRIPTION: Definition of the Context type structure used in instruction handlers, showing available fields and their purposes.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub struct Context<'a, 'b, 'c, 'info, T: Bumps> {\n    pub program_id: &'a Pubkey,\n    pub accounts: &'b mut T,\n    pub remaining_accounts: &'c [AccountInfo<'info>],\n    pub bumps: T::Bumps,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SOL Transfer CPI in Anchor Program\nDESCRIPTION: Main program implementation showing how to perform a SOL transfer using Cross Program Invocation with Anchor framework. Includes account structure definition and transfer logic using CpiContext.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_lang::system_program::{transfer, Transfer};\n\ndeclare_id!(\"9AvUNHjxscdkiKQ8tUn12QCMXtcnbR9BVGq3ULNzFMRi\");\n\n#[program]\npub mod cpi {\n    use super::*;\n\n    pub fn sol_transfer(ctx: Context<SolTransfer>, amount: u64) -> Result<()> {\n        let from_pubkey = ctx.accounts.sender.to_account_info();\n        let to_pubkey = ctx.accounts.recipient.to_account_info();\n        let program_id = ctx.accounts.system_program.to_account_info();\n\n        let cpi_context = CpiContext::new(\n            program_id,\n            Transfer {\n                from: from_pubkey,\n                to: to_pubkey,\n            },\n        );\n        transfer(cpi_context, amount)?;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct SolTransfer<'info> {\n    #[account(mut)]\n    sender: Signer<'info>,\n    #[account(mut)]\n    recipient: SystemAccount<'info>,\n    system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PDA Token Account with Anchor\nDESCRIPTION: Anchor code snippet demonstrating how to create a Program Derived Address (PDA) token account using token::mint, token::authority, and token::token_program constraints along with seeds and bump. This approach is used for program-controlled token accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_spl::token_interface::{Mint, TokenAccount, TokenInterface};\n\n// --snip--\n\n#[derive(Accounts)]\npub struct CreateTokenAccount<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code word:seeds]\n        // [!code word:bump]\n        // [!code highlight:7]\n        init_if_needed,\n        payer = signer,\n        token::mint = mint,\n        token::authority = token_account,\n        token::token_program = token_program,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Types in Rust\nDESCRIPTION: This Rust code defines custom error types and validates that an input amount is within a specified range using the Anchor framework. The `require!` macro is used to enforce conditions, returning an error if the conditions are not met. It requires the `anchor_lang` crate and is intended to be part of a Solana program using Anchor framework.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"9oECKMeeyf1fWNPKzyrB2x1AbLjHDFjs139kEyFwBpoV\");\n\n#[program]\npub mod custom_error {\n    use super::*;\n\n    pub fn validate_amount(_ctx: Context<ValidateAmount>, amount: u64) -> Result<()> {\n        require!(amount >= 10, CustomError::AmountTooSmall);\n        require!(amount <= 100, CustomError::AmountTooLarge);\n\n        msg!(\"Amount validated successfully: {}\", amount);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct ValidateAmount {}\n\n#[error_code]\npub enum CustomError {\n    #[msg(\"Amount must be greater than or equal to 10\")]\n    AmountTooSmall,\n    #[msg(\"Amount must be less than or equal to 100\")]\n    AmountTooLarge,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Account in Solana with Rust\nDESCRIPTION: This Rust code snippet defines a Solana program using the Anchor framework to create a mint account and a token account using PDAs. The program provides two main functions: `create_mint` for mint account creation and `create_token_account` for token account creation. It requires the 'anchor_lang' and 'anchor_spl' Rust crates. Inputs are a signer and associated accounts, with outputs being the success of account creation indicated by transaction logs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::token_interface::{Mint, TokenAccount, TokenInterface};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_mint(ctx: Context<CreateMint>) -> Result<()> {\n        msg!(\"Created Mint Account: {:?}\", ctx.accounts.mint.key());\n        Ok(())\n    }\n\n    pub fn create_token_account(ctx: Context<CreateTokenAccount>) -> Result<()> {\n        msg!(\"Created Token Account: {:?}\",\n            ctx.accounts.token_account.key()\n        );\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint.key(),\n        mint::freeze_authority = mint.key(),\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct CreateTokenAccount<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code highlight:7]\n        init_if_needed,\n        payer = signer,\n        token::mint = mint,\n        token::authority = token_account,\n        token::token_program = token_program,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Solana Transfer Example with LiteSVM\nDESCRIPTION: Demonstrates how to perform a basic SOL transfer using LiteSVM, including creating keypairs, airdropping funds, and executing transactions. Shows account balance verification after transfer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse litesvm::LiteSVM;\nuse solana_message::Message;\nuse solana_pubkey::Pubkey;\nuse solana_system_interface::instruction::transfer;\nuse solana_keypair::Keypair;\nuse solana_signer::Signer;\nuse solana_transaction::Transaction;\n\nlet from_keypair = Keypair::new();\nlet from = from_keypair.pubkey();\nlet to = Pubkey::new_unique();\n\nlet mut svm = LiteSVM::new();\nsvm.airdrop(&from, 10_000).unwrap();\n\nlet instruction = transfer(&from, &to, 64);\nlet tx = Transaction::new(\n    &[&from_keypair],\n    Message::new(&[instruction], Some(&from)),\n    svm.latest_blockhash(),\n);\nlet tx_res = svm.send_transaction(tx).unwrap();\n\nlet from_account = svm.get_account(&from);\nlet to_account = svm.get_account(&to);\nassert_eq!(from_account.unwrap().lamports, 4936);\nassert_eq!(to_account.unwrap().lamports, 64);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LiteSVM } from \"litesvm\";\nimport {\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  Keypair,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\n\ntest(\"one transfer\", () => {\n  const svm = new LiteSVM();\n  const payer = new Keypair();\n  svm.airdrop(payer.publicKey, BigInt(LAMPORTS_PER_SOL));\n  const receiver = PublicKey.unique();\n  const blockhash = svm.latestBlockhash();\n  const transferLamports = 1_000_000n;\n  const ixs = [\n    SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: receiver,\n      lamports: transferLamports,\n    }),\n  ];\n  const tx = new Transaction();\n  tx.recentBlockhash = blockhash;\n  tx.add(...ixs);\n  tx.sign(payer);\n  svm.sendTransaction(tx);\n  const balanceAfter = svm.getBalance(receiver);\n  expect(balanceAfter).toBe(transferLamports);\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\nfrom solders.litesvm import LiteSVM\nfrom solders.message import Message\nfrom solders.pubkey import Pubkey\nfrom solders.system_program import transfer\nfrom solders.transaction import VersionedTransaction\n\n\ndef test_transfer() -> None:\n    receiver = Pubkey.new_unique()\n    client = LiteSVM()\n    payer = Keypair()\n    client.airdrop(payer.pubkey(), 1_000_000_000)\n    blockhash = client.latest_blockhash()\n    transfer_lamports = 1_000_000\n    ixs = [\n        transfer(\n            {\n                \"from_pubkey\": payer.pubkey(),\n                \"to_pubkey\": receiver,\n                \"lamports\": transfer_lamports,\n            }\n        )\n    ]\n    msg = Message.new_with_blockhash(ixs, payer.pubkey(), blockhash)\n    tx = VersionedTransaction(msg, [payer])\n    client.send_transaction(tx)\n    balance_after = client.get_balance(receiver)\n    assert balance_after == transfer_lamports\n```\n\n----------------------------------------\n\nTITLE: Using AccountLoader for Zero Copy Accounts in Rust\nDESCRIPTION: This snippet shows how to use the AccountLoader type to deserialize a zero-copy account. It demonstrates the syntax for including a zero-copy account in an instruction's accounts structure.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub zero_copy_account: AccountLoader<'info, Data>,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Anchor Program Structure in Rust\nDESCRIPTION: Initial Anchor program template that demonstrates the structure of a Solana program. It includes a single 'initialize' instruction that stores a u64 value in a newly created account, showing the fundamental Anchor macros and patterns.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\n// This is your program's public key and it will update\n// automatically when you build the project.\ndeclare_id!(\"11111111111111111111111111111111\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data); // Message will show up in the tx logs\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    // We must specify the space in order to initialize an account.\n    // First 8 bytes are default account discriminator,\n    // next 8 bytes come from NewAccount.data being type u64.\n    // (u64 = 64 bits unsigned integer = 8 bytes)\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct NewAccount {\n    data: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Accounts with Memory Compare - TypeScript/Anchor\nDESCRIPTION: This snippet illustrates how to use the `memcmp` option to filter account data based on specific criteria at a given byte offset. This requires knowledge of the data byte layout, particularly noting that the first 8 bytes are reserved for the account discriminator.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:memcmp]\nconst accounts = await program.account.newAccount.all([\n  {\n    // [!code highlight:4]\n    memcmp: {\n      offset: 8,\n      bytes: \"\",\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Sysvar with LiteSVM in Rust\nDESCRIPTION: This Rust code demonstrates setting the Clock sysvar within a LiteSVM environment to control the simulated blockchain's time. It loads a program, sets the clock to a future timestamp causing the transaction to fail, then rewinds the clock to allow the transaction to succeed. The example relies on the `litesvm`, `solana_clock`, `solana_instruction`, `solana_keypair`, `solana_message`, `solana_pubkey`, `solana_signer`, and `solana_transaction` crates.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nuse {\n    litesvm::LiteSVM,\n    solana_clock::Clock,\n    solana_instruction::Instruction,\n    use solana_keypair::Keypair,\n    solana_message::{Message, VersionedMessage},\n    solana_pubkey::Pubkey,\n    solana_signer::Signer,\n    solana_transaction::VersionedTransaction,\n};\n\nfn test_set_clock() {\n    let program_id = Pubkey::new_unique();\n    let mut svm = LiteSVM::new();\n    let bytes = include_bytes!(\"../../node-litesvm/program_bytes/litesvm_clock_example.so\");\n    svm.add_program(program_id, bytes);\n    let payer = Keypair::new();\n    let payer_address = payer.pubkey();\n    svm.airdrop(&payer.pubkey(), 1_000_000_000).unwrap();\n    let blockhash = svm.latest_blockhash();\n    let ixs = [Instruction {\n        program_id,\n        data: vec![],\n        accounts: vec![],\n    }];\n    let msg = Message::new_with_blockhash(&ixs, Some(&payer_address), &blockhash);\n    let versioned_msg = VersionedMessage::Legacy(msg);\n    let tx = VersionedTransaction::try_new(versioned_msg, &[&payer]).unwrap();\n    // set the time to January 1st 2000\n    let mut initial_clock = svm.get_sysvar::<Clock>();\n    initial_clock.unix_timestamp = 1735689600;\n    svm.set_sysvar::<Clock>(&initial_clock);\n    // this will fail because it's not January 1970 anymore\n    svm.send_transaction(tx).unwrap_err();\n    // so let's turn back time\n    let mut clock = svm.get_sysvar::<Clock>();\n    clock.unix_timestamp = 50;\n    svm.set_sysvar::<Clock>(&clock);\n    let ixs2 = [Instruction {\n        program_id,\n        data: vec![1], // unused, this is just to dedup the transaction\n        accounts: vec![],\n    }];\n    let msg2 = Message::new_with_blockhash(&ixs2, Some(&payer_address), &blockhash);\n    let versioned_msg2 = VersionedMessage::Legacy(msg2);\n    let tx2 = VersionedTransaction::try_new(versioned_msg2, &[&payer]).unwrap();\n    // now the transaction goes through\n    svm.send_transaction(tx2).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Using require! Macro for Concise Error Handling in Rust\nDESCRIPTION: Demonstrates the use of the require! macro for more concise error handling in Anchor programs, combining condition checking with error throwing.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn set_data(ctx: Context<SetData>, data: MyAccount) - Result<()> {\n        require!(data.data < 100, MyError::DataTooLarge);\n        ctx.accounts.my_account.set_inner(data);\n        Ok(())\n    }\n}\n\n\n#[error_code]\npub enum MyError {\n    #[msg(\"MyAccount may only hold data below 100\")]\n    DataTooLarge\n}\n```\n\n----------------------------------------\n\nTITLE: Token Minting Instruction Implementation with CPI (Rust)\nDESCRIPTION: Implementation of the mint_tokens instruction that executes a Cross Program Invocation to the Token Program. Shows how to create the MintTo struct, prepare the CPI context, and invoke the mint_to function.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub fn mint_tokens(ctx: Context<MintTokens>, amount: u64) -> Result<()> {\n    // Create the MintTo struct with the accounts required for the CPI\n    let cpi_accounts = MintTo {\n        mint: ctx.accounts.mint.to_account_info(),\n        to: ctx.accounts.token_account.to_account_info(),\n        authority: ctx.accounts.signer.to_account_info(),\n    };\n\n    // The program being invoked in the CPI\n    let cpi_program = ctx.accounts.token_program.to_account_info();\n\n    // Combine the accounts and program into a \"CpiContext\"\n    let cpi_context = CpiContext::new(cpi_program, cpi_accounts);\n\n    // Make CPI to mint_to instruction on the token program\n    token_interface::mint_to(cpi_context, amount)?;\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Solana Program Deployment with LiteSVM\nDESCRIPTION: Examples showing how to deploy and test a Solana program using LiteSVM across different languages. Demonstrates program deployment, transaction simulation, and log verification.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    litesvm::LiteSVM,\n    solana_instruction::{account_meta::AccountMeta, Instruction},\n    solana_keypair::Keypair,\n    solana_pubkey::{pubkey, Pubkey},\n    solana_message::{Message, VersionedMessage},\n    solana_signer::Signer,\n    solana_transaction::VersionedTransaction,\n};\n\nfn test_logging() {\n    let program_id = pubkey!(\"Logging111111111111111111111111111111111111\");\n    let account_meta = AccountMeta {\n        pubkey: Pubkey::new_unique(),\n        is_signer: false,\n        is_writable: true,\n    };\n    let ix = Instruction {\n        program_id,\n        accounts: vec![account_meta],\n        data: vec![5, 10, 11, 12, 13, 14],\n    };\n    let mut svm = LiteSVM::new();\n    let payer = Keypair::new();\n    let bytes = include_bytes!(\"../../node-litesvm/program_bytes/spl_example_logging.so\");\n    svm.add_program(program_id, bytes);\n    svm.airdrop(&payer.pubkey(), 1_000_000_000).unwrap();\n    let blockhash = svm.latest_blockhash();\n    let msg = Message::new_with_blockhash(&[ix], Some(&payer.pubkey()), &blockhash);\n    let tx = VersionedTransaction::try_new(VersionedMessage::Legacy(msg), &[payer]).unwrap();\n    // let's sim it first\n    let sim_res = svm.simulate_transaction(tx.clone()).unwrap();\n    let meta = svm.send_transaction(tx).unwrap();\n    assert_eq!(sim_res.meta, meta);\n    assert_eq!(meta.logs[1], \"Program log: static string\");\n    assert!(meta.compute_units_consumed < 10_000) // not being precise here in case it changes\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LiteSVM, TransactionMetadata } from \"litesvm\";\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\ntest(\"spl logging\", () => {\n  const programId = PublicKey.unique();\n  const svm = new LiteSVM();\n  svm.addProgramFromFile(programId, \"program_bytes/spl_example_logging.so\");\n  const payer = new Keypair();\n  svm.airdrop(payer.publicKey, BigInt(LAMPORTS_PER_SOL));\n  const blockhash = svm.latestBlockhash();\n  const ixs = [\n    new TransactionInstruction({\n      programId,\n      keys: [\n        { pubkey: PublicKey.unique(), isSigner: false, isWritable: false },\n      ],\n    }),\n  ];\n  const tx = new Transaction();\n  tx.recentBlockhash = blockhash;\n  tx.add(...ixs);\n  tx.sign(payer);\n  // let's sim it first\n  const simRes = svm.simulateTransaction(tx);\n  const sendRes = svm.sendTransaction(tx);\n  if (sendRes instanceof TransactionMetadata) {\n    expect(simRes.meta().logs()).toEqual(sendRes.logs());\n    expect(sendRes.logs()[1]).toBe(\"Program log: static string\");\n  } else {\n    throw new Error(\"Unexpected tx failure\");\n  }\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nfrom solders.instruction import AccountMeta, Instruction\nfrom solders.keypair import Keypair\nfrom solders.litesvm import LiteSVM\nfrom solders.message import Message\nfrom solders.pubkey import Pubkey\nfrom solders.transaction import VersionedTransaction\nfrom solders.transaction_metadata import TransactionMetadata\n\n\ndef test_logging() -> None:\n    program_id = Pubkey.from_string(\"Logging111111111111111111111111111111111111\")\n    ix = Instruction(\n        program_id,\n        bytes([5, 10, 11, 12, 13, 14]),\n        [AccountMeta(Pubkey.new_unique(), is_signer=False, is_writable=True)],\n    )\n    client = LiteSVM()\n    payer = Keypair()\n    client.add_program_from_file(\n        program_id, Path(\"tests/fixtures/spl_example_logging.so\")\n    )\n    client.airdrop(payer.pubkey(), 1_000_000_000)\n    blockhash = client.latest_blockhash()\n    msg = Message.new_with_blockhash([ix], payer.pubkey(), blockhash)\n    tx = VersionedTransaction(msg, [payer])\n    # let's sim it first\n    sim_res = client.simulate_transaction(tx)\n    meta = client.send_transaction(tx)\n    assert isinstance(meta, TransactionMetadata)\n    assert sim_res.meta() == meta\n    assert meta.logs()[1] == \"Program log: static string\"\n    assert (\n        meta.compute_units_consumed() < 10_000\n    )  # not being precise here in case it changes\n```\n\n----------------------------------------\n\nTITLE: Initializing Large Solana Account with Rust\nDESCRIPTION: This Rust module demonstrates how to initialize a Solana account larger than 10,240 bytes, using Anchor's prelude and zero-copy data structures. The example initializes an account with the maximum allowable size minus an account discriminator.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"CZgWhy3FYPFgKE5v9atSGaiQzbSB7cM38ofwX1XxeCFH\");\n\n#[program]\npub mod zero_copy_two {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let account = &mut ctx.accounts.data_account.load_init()?;\n        account.data = [1; 10_485_752];\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(zero)]\n    pub data_account: AccountLoader<'info, Data>,\n}\n\n#[account(zero_copy)]\npub struct Data {\n    // 10240 bytes - 8 bytes account discriminator\n    pub data: [u8; 10_485_752],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Counter Program with Anchor\nDESCRIPTION: An Anchor program with two instructions: 'initialize' to create a counter account and 'increment' to increase the counter value. The program demonstrates basic Anchor account structures and instruction handling.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/rust.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\");\n\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let counter = &ctx.accounts.counter;\n        msg!(\"Counter account created! Current count: {}\", counter.count);\n        Ok(())\n    }\n\n    pub fn increment(ctx: Context<Increment>) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        msg!(\"Previous counter: {}\", counter.count);\n\n        counter.count += 1;\n        msg!(\"Counter incremented! Current count: {}\", counter.count);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n\n    #[account(\n        init,\n        payer = payer,\n        space = 8 + 8\n    )]\n    pub counter: Account<'info, Counter>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut)]\n    pub counter: Account<'info, Counter>,\n}\n\n#[account]\npub struct Counter {\n    pub count: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callee Program in Rust with Anchor\nDESCRIPTION: A Solana program that implements a simple counter with initialize and increment instructions. The program serves as the target for cross-program invocations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"8HupNBr7SBhBLcBsLhbtes3tCarBm6Bvpqp5AfVjHuj8\");\n\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let counter = &ctx.accounts.counter;\n        msg!(\"Counter account created! Current count: {}\", counter.count);\n        Ok(())\n    }\n\n    pub fn increment(ctx: Context<Increment>) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        msg!(\"Previous counter: {}\", counter.count);\n\n        counter.count += 1;\n        msg!(\"Counter incremented! Current count: {}\", counter.count);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n\n    #[account(\n        init,\n        payer = payer,\n        space = 8 + 8\n    )]\n    pub counter: Account<'info, Counter>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut)]\n    pub counter: Account<'info, Counter>,\n}\n\n#[account]\npub struct Counter {\n    pub count: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mint Account with PDA in Rust\nDESCRIPTION: This snippet defines the CreateMint account structure for initializing a mint account in Anchor. It outlines the required parameters, such as the signer, mint, and associated token program, implementing necessary validations like authority and bump seed for the PDA.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        // [!code word: mint,]\n        // [!code highlight]\n        mint::authority = mint,\n        mint::freeze_authority = mint,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    // [!code word:mint]\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with the emit! Macro in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to use the emit! macro from the Anchor framework to emit events through program logs. The emit_event function emits a custom event with a message parameter, and the CustomEvent structure is defined with the #[event] attribute. This requires the anchor_lang crate and depends on encoding event data as a base64 string.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/events.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"8T7MsCZyzxboviPJg5Rc7d8iqEcDReYR2pkQKrmbg7dy\");\n\n#[program]\npub mod event {\n    use super::*;\n\n    pub fn emit_event(_ctx: Context<EmitEvent>, input: String) -> Result<()> {\n        // [!code word:emit!]\n        // [!code highlight]\n        emit!(CustomEvent { message: input });\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct EmitEvent {}\n\n// [!code highlight:4]\n#[event]\npub struct CustomEvent {\n    pub message: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Rust: Initializing Token Mint with PDA\nDESCRIPTION: Rust program defining a create_mint instruction that initializes a new token mint using a Program Derived Address (PDA). Sets up mint with 6 decimal places and self-managed authority.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::token_interface::{Mint, TokenInterface};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_mint(ctx: Context<CreateMint>) -> Result<()> {\n        msg!(\"Created Mint Account: {:?}\", ctx.accounts.mint.key());\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint.key(),\n        mint::freeze_authority = mint.key(),\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Accounts - TypeScript/Anchor\nDESCRIPTION: This snippet demonstrates fetching account data for multiple accounts by supplying an array of account addresses to the `fetchMultiple()` method. This is useful when needing to retrieve data for several accounts at once.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:fetchMultiple]\nconst accounts = await program.account.newAccount.fetchMultiple([\n  ACCOUNT_ADDRESS_ONE,\n  ACCOUNT_ADDRESS_TWO,\n]);\n```\n\n----------------------------------------\n\nTITLE: Zero Copy Client Implementation in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to interact with a zero-copy Solana program using Anchor. It includes test cases for initializing and updating a zero-copy account, showing how to send transactions and fetch account data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { ZeroCopy } from \"../target/types/zero_copy\";\n\ndescribe(\"zero-copy\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.ZeroCopy as Program<ZeroCopy>;\n  const dataAccount = anchor.web3.Keypair.generate();\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .initialize()\n      .accounts({\n        dataAccount: dataAccount.publicKey,\n      })\n      .signers([dataAccount])\n      .rpc();\n    console.log(\"Your transaction signature\", tx);\n\n    const account = await program.account.data.fetch(dataAccount.publicKey);\n    console.log(\"Account\", account);\n  });\n\n  it(\"Update!\", async () => {\n    const tx = await program.methods\n      .update()\n      .accounts({\n        dataAccount: dataAccount.publicKey,\n      })\n      .rpc();\n    console.log(\"Your transaction signature\", tx);\n\n    const account = await program.account.data.fetch(dataAccount.publicKey);\n    console.log(\"Account\", account);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Code for Creating a Mint using Anchor\nDESCRIPTION: TypeScript client implementation that interacts with the Anchor program to create a mint. It generates a keypair for the mint address, sends a transaction to create the mint, and then retrieves the mint account data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport { TOKEN_2022_PROGRAM_ID, getMint } from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const mint = anchor.web3.Keypair.generate();\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createMint()\n      .accounts({\n        mint: mint.publicKey,\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .signers([mint])\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint.publicKey,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Token Mint Client Implementation\nDESCRIPTION: TypeScript test script demonstrating how to create a token mint by invoking the Rust program. Uses Anchor's testing framework to find the PDA and interact with the token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport { TOKEN_2022_PROGRAM_ID, getMint } from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, bump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createMint()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CPI with PDA Signer in Rust using Anchor\nDESCRIPTION: This Rust code defines an Anchor program with a 'sol_transfer' instruction that performs a CPI to the System Program's transfer instruction. It demonstrates how to derive and sign for a PDA, construct a CpiContext, and execute the transfer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_lang::system_program::{transfer, Transfer};\n\ndeclare_id!(\"3455LkCS85a4aYmSeNbRrJsduNQfYRY82A7eCD3yQfyR\");\n\n#[program]\npub mod cpi {\n    use super::*;\n\n    pub fn sol_transfer(ctx: Context<SolTransfer>, amount: u64) -> Result<()> {\n        let from_pubkey = ctx.accounts.pda_account.to_account_info();\n        let to_pubkey = ctx.accounts.recipient.to_account_info();\n        let program_id = ctx.accounts.system_program.to_account_info();\n\n        let seed = to_pubkey.key();\n        let bump_seed = ctx.bumps.pda_account;\n        let signer_seeds: &[&[&[u8]]] = &[&[b\"pda\", seed.as_ref(), &[bump_seed]]];\n\n        let cpi_context = CpiContext::new(\n            program_id,\n            Transfer {\n                from: from_pubkey,\n                to: to_pubkey,\n            },\n        )\n        .with_signer(signer_seeds);\n\n        transfer(cpi_context, amount)?\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct SolTransfer<'info> {\n    #[account(\n        mut,\n        seeds = [b\"pda\", recipient.key().as_ref()],\n        bump,\n    )]\n    pda_account: SystemAccount<'info>,\n    #[account(mut)]\n    recipient: SystemAccount<'info>,\n    system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Caller Program with CPI in Rust\nDESCRIPTION: A Solana program that demonstrates how to use the declare_program!() macro to generate a CPI module and make cross-program invocations to the counter program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"GENmb1D59wqCKRwujq4PJ8461EccQ5srLHrXyXp4HMTH\");\n\ndeclare_program!(example);\nuse example::{\n    accounts::Counter,\n    cpi::{\n        self,\n        accounts::{Increment, Initialize},\n    },\n    program::Example,\n};\n\n#[program]\npub mod example_cpi {\n    use super::*;\n\n    pub fn initialize_cpi(ctx: Context<InitializeCpi>) -> Result<()> {\n        let cpi_ctx = CpiContext::new(\n            ctx.accounts.example_program.to_account_info(),\n            Initialize {\n                payer: ctx.accounts.payer.to_account_info(),\n                counter: ctx.accounts.counter.to_account_info(),\n                system_program: ctx.accounts.system_program.to_account_info(),\n            },\n        );\n\n        cpi::initialize(cpi_ctx)?\n        Ok(())\n    }\n\n    pub fn increment_cpi(ctx: Context<IncrementCpi>) -> Result<()> {\n        let cpi_ctx = CpiContext::new(\n            ctx.accounts.example_program.to_account_info(),\n            Increment {\n                counter: ctx.accounts.counter.to_account_info(),\n            },\n        );\n\n        cpi::increment(cpi_ctx)?\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct InitializeCpi<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    #[account(mut)]\n    pub counter: Signer<'info>,\n    pub system_program: Program<'info, System>,\n    pub example_program: Program<'info, Example>,\n}\n\n#[derive(Accounts)]\npub struct IncrementCpi<'info> {\n    #[account(mut)]\n    pub counter: Account<'info, Counter>,\n    pub example_program: Program<'info, Example>,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Errors with Anchor Client in TypeScript\nDESCRIPTION: This TypeScript code tests the custom errors defined in a Rust Anchor program using the Anchor client library. It validates amounts by invoking the `validateAmount` method, expecting specific errors when conditions are not met. Dependencies include the `@coral-xyz/anchor` library, and it requires a correctly configured Anchor environment and access to the compiled Anchor program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { CustomError } from \"../target/types/custom_error\";\nimport assert from \"assert\";\n\ndescribe(\"custom-error\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n  const program = anchor.workspace.CustomError as Program<CustomError>;\n\n  it(\"Successfully validates amount within range\", async () => {\n    const tx = await program.methods.validateAmount(new anchor.BN(50)).rpc();\n\n    console.log(\"Transaction signature:\", tx);\n  });\n\n  it(\"Fails with amount too small\", async () => {\n    try {\n      await program.methods.validateAmount(new anchor.BN(5)).rpc();\n\n      assert.fail(\"Expected an error to be thrown\");\n    } catch (error) {\n      assert.strictEqual(error.error.errorCode.code, \"AmountTooSmall\");\n      assert.strictEqual(\n        error.error.errorMessage,\n        \"Amount must be greater than or equal to 10\",\n      );\n    }\n  });\n\n  it(\"Fails with amount too large\", async () => {\n    try {\n      await program.methods.validateAmount(new anchor.BN(150)).rpc();\n\n      assert.fail(\"Expected an error to be thrown\");\n    } catch (error) {\n      assert.strictEqual(error.error.errorCode.code, \"AmountTooLarge\");\n      assert.strictEqual(\n        error.error.errorMessage,\n        \"Amount must be less than or equal to 100\",\n      );\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Anchor Program Example - Rust\nDESCRIPTION: This Rust snippet defines an Anchor program with two instructions: `initialize` for creating and initializing a counter, and `increment` for updating the count. It includes necessary structs and account definitions, serving as a foundational example for building further features.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\");\n\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        let counter = &ctx.accounts.counter;\n        msg!(\"Counter account created! Current count: {}\", counter.count);\n        Ok(())\n    }\n\n    pub fn increment(ctx: Context<Increment>) -> Result<()> {\n        let counter = &mut ctx.accounts.counter;\n        msg!(\"Previous counter: {}\", counter.count);\n\n        counter.count += 1;\n        msg!(\"Counter incremented! Current count: {}\", counter.count);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n\n    #[account(\n        init,\n        payer = payer,\n        space = 8 + 8\n    )]\n    pub counter: Account<'info, Counter>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut)]\n    pub counter: Account<'info, Counter>,\n}\n\n#[account]\npub struct Counter {\n    pub count: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Associated Token Account with Anchor\nDESCRIPTION: Anchor code snippet showing how to create an Associated Token Account (ATA) using the associated_token::mint, associated_token::authority, and associated_token::token_program constraints. This approach works with both Token Program and Token Extension Program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// [!code highlight:2]\nuse anchor_spl::associated_token::AssociatedToken;\nuse anchor_spl::token_interface::{Mint, TokenAccount, TokenInterface};\n\n// --snip--\n\n#[derive(Accounts)]\npub struct CreateTokenAccount<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init_if_needed,\n        payer = signer,\n        associated_token::mint = mint,\n        associated_token::authority = signer,\n        associated_token::token_program = token_program,\n    )]\n    // [!code highlight:4]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Enum with error_code Attribute in Rust\nDESCRIPTION: Demonstrates how to define a custom error enum using Anchor's error_code attribute, which automatically generates error handling boilerplate.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[error_code]\npub enum MyError {\n    #[msg(\"My custom error message\")]\n    MyCustomError,\n    #[msg(\"My second custom error message\")]\n    MySecondCustomError,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Token Account Creation - TypeScript\nDESCRIPTION: This TypeScript snippet is designed to test the creation of a token account and a mint using the Anchor framework. It demonstrates how to set up the provider, invoke the program methods, and log the transaction signatures and accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport {\n  TOKEN_2022_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  getMint,\n  getAccount,\n} from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, bump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createMint()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n\n  it(\"Create token account\", async () => {\n    const tx = await program.methods\n      .createTokenAccount()\n      .accounts({\n        mint: mint,\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n\n    console.log(\"Your transaction signature\", tx);\n\n    const associatedTokenAccount = await getAssociatedTokenAddress(\n      mint,\n      program.provider.publicKey,\n      false,\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const tokenAccount = await getAccount(\n      program.provider.connection,\n      associatedTokenAccount,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Token Account\", tokenAccount);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Anchor Client Application in Rust\nDESCRIPTION: A complete Rust client application that interacts with the counter program. The client uses the `declare_program!` macro to generate client modules, creates and initializes a counter account, increments its value, and reads the updated counter value.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/rust.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_client::\n    solana_client::rpc_client::RpcClient,\n    solana_sdk::\n        commitment_config::CommitmentConfig, native_token::LAMPORTS_PER_SOL, signature::Keypair,\n        signer::Signer, system_program,\n    },\n    Client, Cluster,\n};\nuse anchor_lang::prelude::*;\nuse std::rc::Rc;\n\ndeclare_program!(example);\nuse example::{accounts::Counter, client::accounts, client::args};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let connection = RpcClient::new_with_commitment(\n        \"http://127.0.0.1:8899\", // Local validator URL\n        CommitmentConfig::confirmed(),\n    );\n\n    // Generate Keypairs and request airdrop\n    let payer = Keypair::new();\n    let counter = Keypair::new();\n    println!(\"Generated Keypairs:\");\n    println!(\"   Payer: {}\", payer.pubkey());\n    println!(\"   Counter: {}\", counter.pubkey());\n\n    println!(\"\\nRequesting 1 SOL airdrop to payer\");\n    let airdrop_signature = connection.request_airdrop(&payer.pubkey(), LAMPORTS_PER_SOL)?;\n\n    // Wait for airdrop confirmation\n    while !connection.confirm_transaction(&airdrop_signature)? {\n        std::thread::sleep(std::time::Duration::from_millis(100));\n    }\n    println!(\"   Airdrop confirmed!\");\n\n    // Create program client\n    let provider = Client::new_with_options(\n        Cluster::Localnet,\n        Rc::new(payer),\n        CommitmentConfig::confirmed(),\n    );\n    let program = provider.program(example::ID)?;\n\n    // Build and send instructions\n    println!(\"\\nSend transaction with initialize and increment instructions\");\n    let initialize_ix = program\n        .request()\n        .accounts(accounts::Initialize {\n            counter: counter.pubkey(),\n            payer: program.payer(),\n            system_program: system_program::ID,\n        })\n        .args(args::Initialize)\n        .instructions()?\n        .remove(0);\n\n    let increment_ix = program\n        .request()\n        .accounts(accounts::Increment {\n            counter: counter.pubkey(),\n        })\n        .args(args::Increment)\n        .instructions()?\n        .remove(0);\n\n    let signature = program\n        .request()\n        .instruction(initialize_ix)\n        .instruction(increment_ix)\n        .signer(&counter)\n        .send()\n        .await?;\n    println!(\"   Transaction confirmed: {}\", signature);\n\n    println!(\"\\nFetch counter account data\");\n    let counter_account: Counter = program.account::<Counter>(counter.pubkey()).await?;\n    println!(\"   Counter value: {}\", counter_account.count);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Tokens with PDA Signature (Program)\nDESCRIPTION: This Rust code snippet shows how to create the `signer_seeds` and use `with_signer` to sign the CPI with the PDA when transferring tokens. The `signer_seeds` are derived using the `b\"token\"` seed and the bump seed, ensuring the program's authority over the token account.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub fn transfer_tokens(ctx: Context<TransferTokens>) -> Result<()> {\n    // [!code word:signer_seeds]\n    // [!code highlight]\n    let signer_seeds: &[&[&[u8]]] = &[&[b\"token\", &[ctx.bumps.sender_token_account]]];\n\n    let amount = ctx.accounts.sender_token_account.amount;\n    let decimals = ctx.accounts.mint.decimals;\n\n    let cpi_accounts = TransferChecked {\n        mint: ctx.accounts.mint.to_account_info(),\n        from: ctx.accounts.sender_token_account.to_account_info(),\n        to: ctx.accounts.recipient_token_account.to_account_info(),\n        authority: ctx.accounts.sender_token_account.to_account_info(),\n    };\n    let cpi_program = ctx.accounts.token_program.to_account_info();\n    // [!code highlight:2]\n    let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n    token_interface::transfer_checked(cpi_context, amount, decimals)?;\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Data with Anchor Client in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to fetch account data from a Solana program using the Anchor framework. It uses the program's account accessor methods which are automatically generated from the IDL file for type-safe data retrieval.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program, BN } from \"@coral-xyz/anchor\";\nimport { HelloAnchor } from \"../target/types/hello_anchor\";\nimport { Keypair } from \"@solana/web3.js\";\nimport assert from \"assert\";\n\ndescribe(\"hello_anchor\", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n  const wallet = provider.wallet as anchor.Wallet;\n  const program = anchor.workspace.HelloAnchor as Program<HelloAnchor>;\n\n  it(\"initialize\", async () => {\n    // Generate keypair for the new account\n    const newAccountKp = new Keypair();\n\n    // Send transaction\n    const data = new BN(42);\n    const transactionSignature = await program.methods\n      .initialize(data)\n      .accounts({\n        newAccount: newAccountKp.publicKey,\n        signer: wallet.publicKey,\n      })\n      .signers([newAccountKp])\n      .rpc();\n\n    // Fetch the created account\n    // [!code word:.newAccount.:1]\n    // [!code highlight:3]\n    const newAccount = await program.account.newAccount.fetch(\n      newAccountKp.publicKey,\n    );\n\n    console.log(\"Transaction signature: \", transactionSignature);\n    console.log(\"On-chain data is:\", newAccount.data.toString());\n    assert(data.eq(newAccount.data));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event CPI in Rust Solana Program\nDESCRIPTION: Define a custom event struct and use the emit_cpi!() macro to emit events during program execution with the event-cpi attribute\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/events.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"2cDQ2LxKwQ8fnFUz4LLrZ157QzBnhPNeQrTSmWcpVin1\");\n\n#[program]\npub mod event_cpi {\n    use super::*;\n\n    pub fn emit_event(ctx: Context<EmitEvent>, input: String) -> Result<()> {\n        emit_cpi!(CustomEvent { message: input });\n        Ok(())\n    }\n}\n\n#[event_cpi]\n#[derive(Accounts)]\npub struct EmitEvent {}\n\n#[event]\npub struct CustomEvent {\n    pub message: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Account Reallocation with Anchor in Rust\nDESCRIPTION: Used to reallocate program account space at the beginning of an instruction. Specifies new space, payer, and zero-initialization option.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    realloc = <space>,\n    realloc::payer = <target>,\n    realloc::zero = <bool>\n)]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Account Structure with #[account] Attribute in Rust\nDESCRIPTION: This snippet demonstrates the use of the #[account] attribute to define a custom account structure in an Anchor program. The attribute implements various traits and adds functionality like program owner assignment and data serialization.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDA with No Optional Seeds in Anchor\nDESCRIPTION: Example of implementing a PDA account with no optional seeds. The account is defined with empty seed array and requires a bump parameter.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(\n        // [!code highlight]\n        seeds = [],\n        bump,\n    )]\n    pub pda_account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Anchor Program Modules using declare_program Macro in Rust\nDESCRIPTION: The declare_program!() macro generates several Rust modules from a program's IDL, including cpi for cross-program invocations, client for building instructions, account for program state, program for program ID, constants, events, and types. This simplifies interactions with Anchor programs without additional dependencies.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndeclare_program!()\n```\n\n----------------------------------------\n\nTITLE: Building and Sending a Transaction with .rpc()\nDESCRIPTION: Demonstrates using the .rpc() method to build, sign, and send a transaction with the specified instruction. Returns a transaction signature and automatically includes the wallet from the Provider as a signer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate keypair for the new account\nconst newAccountKp = new Keypair();\n\nconst data = new BN(42);\nconst transactionSignature = await program.methods\n  .initialize(data)\n  .accounts({\n    newAccount: newAccountKp.publicKey,\n    signer: wallet.publicKey,\n    systemProgram: SystemProgram.programId,\n  })\n  .signers([newAccountKp])\n  // [!code word:rpc]\n  // [!code highlight]\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Testing Token Account Creation with TypeScript\nDESCRIPTION: This TypeScript snippet uses the Anchor framework to test the Rust program for creating Solana mint and token accounts. Dependencies include '@coral-xyz/anchor' and '@solana/spl-token' packages. The test suite initializes the program, creates accounts, and logs transaction signatures and account details. Inputs involve the Anchor provider setup and method calls, while outputs are transaction confirmations and account information logs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport {\n  TOKEN_2022_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  getMint,\n  getAccount,\n} from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, mintBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  const [token, tokenBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createMint()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n\n  it(\"Create token account\", async () => {\n    const tx = await program.methods\n      .createTokenAccount()\n      .accounts({\n        mint: mint,\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n\n    console.log(\"Your transaction signature\", tx);\n\n    const tokenAccount = await getAccount(\n      program.provider.connection,\n      token,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Token Account\", tokenAccount);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Anchor Token Interface for Mint Creation\nDESCRIPTION: Code snippet showing how to import and use the token_interface module from anchor-spl to create a mint account. The snippet defines the account structure needed for mint creation with appropriate constraints.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// [!code highlight]\nuse anchor_spl::token_interface::{Mint, TokenInterface};\n\n// --snip--\n\n#[derive(Accounts)]\npub struct CreateMint<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = signer.key(),\n        mint::freeze_authority = signer.key(),\n    )]\n    // [!code word:Mint]\n    // [!code highlight]\n    pub mint: InterfaceAccount<'info, Mint>,\n    // [!code word:TokenInterface]\n    // [!code highlight]\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Using PDAs with Anchor Client\nDESCRIPTION: Example of how the Anchor client can automatically resolve PDA addresses using the IDL. The client automatically derives PDAs without explicit address calculation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { HelloAnchor } from \"../target/types/hello_anchor\";\n\ndescribe(\"hello_anchor\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.HelloAnchor as Program<HelloAnchor>;\n\n  it(\"Is initialized!\", async () => {\n    // Account address is automatically resolved using the IDL\n    const tx = await program.methods.testInstruction().rpc();\n    console.log(\"Your transaction signature\", tx);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Token Account Validation with Anchor in Rust\nDESCRIPTION: Creates or validates token accounts with specified mint and authority. Optionally specifies a token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    token::mint = <target_account>,\n    token::authority = <target_account>\n)]\n\n#[account(\n    token::mint = <target_account>,\n    token::authority = <target_account>,\n    token::token_program = <target_account>\n)]\n```\n\n----------------------------------------\n\nTITLE: PDA-Based Mint Creation with Account Constraints\nDESCRIPTION: Example showing how to create a mint account as a Program Derived Address (PDA) using seeds and bump. This allows for deterministic mint addresses that can be derived from the same seeds at any time.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <payer>,\n    mint::decimals = <decimals>,\n    mint::authority = <authority>,\n    mint::freeze_authority = <freeze_authority>,\n    seeds = [<seeds>],\n    bump\n)]\npub mint: InterfaceAccount<'info, Mint>,\n```\n\n----------------------------------------\n\nTITLE: Invoking sol_transfer Instruction in TypeScript for Solana\nDESCRIPTION: This TypeScript code demonstrates how to invoke the 'sol_transfer' instruction of the Anchor program. It transfers SOL from the PDA account back to the wallet account via a CPI to the System Program, signed by the program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"SOL Transfer with PDA signer\", async () => {\n  const transactionSignature = await program.methods\n    .solTransfer(new BN(transferAmount))\n    .accounts({\n      pdaAccount: PDA,\n      recipient: wallet.publicKey,\n    })\n    .rpc();\n\n  console.log(\n    `\\nTransaction Signature: https://solana.fm/tx/${transactionSignature}?cluster=devnet-solana`,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Minting Functionality in TypeScript\nDESCRIPTION: This snippet tests the creation of the mint account and the minting of tokens using the Anchor framework in a TypeScript environment. It establishes connections to the Solana blockchain, initializes the minting process, and retrieves the mint and token accounts for validation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport {\n  TOKEN_2022_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  getMint,\n  getAccount,\n} from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, mintBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  const [token, tokenBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createMint()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n\n  it(\"Mint Tokens\", async () => {\n    const tx = await program.methods\n      .mintTokens(new anchor.BN(100))\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n\n    console.log(\"Your transaction signature\", tx);\n\n    const associatedTokenAccount = await getAssociatedTokenAddress(\n      mint,\n      program.provider.publicKey,\n      false,\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const tokenAccount = await getAccount(\n      program.provider.connection,\n      associatedTokenAccount,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Token Account\", tokenAccount);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Accounts Struct for Create and Mint (Program)\nDESCRIPTION: This Rust code defines the `CreateAndMintTokens` struct, which specifies the accounts required for the `create_and_mint_tokens` instruction. It uses Anchor's `#[account]` attribute to define constraints and initialize accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct CreateAndMintTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint,\n        mint::freeze_authority = mint,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(\n        init,\n        payer = signer,\n        token::mint = mint,\n        // [!code word:token_account]\n        // [!code highlight]\n        token::authority = token_account,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching All Accounts - TypeScript/Anchor\nDESCRIPTION: This snippet demonstrates how to fetch all existing accounts for a specific account type using the `all()` method from the Anchor program. It is useful for obtaining a complete list of accounts defined by the user. The context relies on the `program` object initialized with the specific account type.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:all]\nconst accounts = await program.account.newAccount.all();\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana Compute Unit Benchmark in Rust\nDESCRIPTION: Demonstrates how to set up and execute compute unit benchmarks using MolluskComputeUnitBencher for multiple instructions and accounts\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    mollusk_svm_bencher::MolluskComputeUnitBencher,\n    mollusk_svm::Mollusk,\n    /* ... */\n};\n\n// Optionally disable logging.\nsolana_logger::setup_with(\"\");\n\n/* Instruction & accounts setup ... */\n\nlet mollusk = Mollusk::new(&program_id, \"my_program\");\n\nMolluskComputeUnitBencher::new(mollusk)\n    .bench((\"bench0\", &instruction0, &accounts0))\n    .bench((\"bench1\", &instruction1, &accounts1))\n    .bench((\"bench2\", &instruction2, &accounts2))\n    .bench((\"bench3\", &instruction3, &accounts3))\n    .must_pass(true)\n    .out_dir(\"../target/benches\")\n    .execute();\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum in Rust and Its TypeScript Representation in Anchor\nDESCRIPTION: Illustrates how a Rust enum with different variant types (unit, named, and tuple) is represented in TypeScript when using Anchor. The example shows a Rust enum 'MyEnum' with three variants and their corresponding TypeScript object representations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/type-conversion.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Rust\nenum MyEnum {\n    One,\n    Two { val: u32 },\n    Three(u8, i16),\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript Representations\n// Unit variant\nconst one = { one: {} };\n\n// Named variant\nconst two = {\n  two: { val: 99 },\n};\n\n// Tuple variant\nconst three = {\n  three: [12, -34],\n};\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Anchor Program - JSON\nDESCRIPTION: This JSON snippet represents the IDL (Interface Description Language) for an Anchor program, including the program's address, metadata, instructions, accounts, and types. It serves as a foundational reference for generating client-side code and is important for ensuring compatibility.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\",\n  \"metadata\": {\n    \"name\": \"example\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"increment\",\n      \"discriminator\": [11, 18, 104, 9, 104, 174, 59, 33],\n      \"accounts\": [\n        {\n          \"name\": \"counter\",\n          \"writable\": true\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"counter\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Counter\",\n      \"discriminator\": [255, 176, 4, 245, 188, 253, 124, 25]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Counter\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"count\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Send Transaction with Instructions in Anchor\nDESCRIPTION: This Rust code snippet demonstrates sending a transaction with both initialize and increment instructions in the Anchor framework. It uses the program's request object, adds instructions, includes signers, and awaits transaction confirmation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet signature = program\n    .request()\n    .instruction(initialize_ix)\n    .instruction(increment_ix)\n    .signer(&counter)\n    .send()\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Associated Token Account Validation with Anchor in Rust\nDESCRIPTION: Creates or validates associated token accounts with specified mint and authority. Optionally specifies a token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    associated_token::mint = <target_account>,\n    associated_token::authority = <target_account>\n)]\n\n#[account(\n    associated_token::mint = <target_account>,\n    associated_token::authority = <target_account>,\n    associated_token::token_program = <target_account>\n)]\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in a TypeScript Client\nDESCRIPTION: This TypeScript snippet shows how to listen to custom events emitted by an Anchor program. The example configures the client to use a local cluster and listens for a 'customEvent', printing the event data to the console. It uses the addEventListener method from the Anchor framework in conjunction with the removeEventListener method. Dependencies include the @coral-xyz/anchor package.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/events.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { Event } from \"../target/types/event\";\n\ndescribe(\"event\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.Event as Program<Event>;\n\n  it(\"Emits custom event\", async () => {\n    // Set up listener before sending transaction\n    // [!code word:addEventListener]\n    // [!code highlight:4]\n    const listenerId = program.addEventListener(\"customEvent\", event => {\n      // Do something with the event data\n      console.log(\"Event Data:\", event);\n    });\n\n    // Message to be emitted in the event\n    const message = \"Hello, Solana!\";\n    // Send transaction\n    await program.methods.emitEvent(message).rpc();\n\n    // Remove listener\n    await program.removeEventListener(listenerId);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Token Account with Constraints - Rust\nDESCRIPTION: This snippet demonstrates the use of account constraints to create an associated token account in Solana Anchor. The account is initialized with parameters that define the payer, mint, authority, and token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <payer>,\n    associated_token::mint = <mint>,\n    associated_token::authority = <authority>,\n    associated_token::token_program = <token_program>\n)]\npub token_account: InterfaceAccount<'info, TokenAccount>,\n```\n\n----------------------------------------\n\nTITLE: Using UncheckedAccount in Rust for Anchor\nDESCRIPTION: Shows how to use UncheckedAccount<'info> type in an Anchor program. This is an explicit wrapper for AccountInfo types to emphasize that no checks are performed.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    // CHECK: No checks are performed\n    pub account: UncheckedAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Accounts for Token Transfer in Rust\nDESCRIPTION: This code snippet defines the minimum required accounts for a token transfer operation in Rust using Anchor. It includes accounts for the signer, mint, sender and recipient token accounts, and the token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    // The source token account owner\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    // The mint account specifying the type of token\n    #[account(mut)]\n    pub mint: InterfaceAccount<'info, Mint>,\n    // The source token account to transfer tokens from\n    #[account(mut)]\n    pub sender_token_account: InterfaceAccount<'info, TokenAccount>,\n    // The destination token account to receive tokens\n    #[account(mut)]\n    pub recipient_token_account: InterfaceAccount<'info, TokenAccount>,\n    // The token program that will process the transfer\n    pub token_program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Associated Token Account Address Derivation in Rust\nDESCRIPTION: Function that derives the deterministic address for an Associated Token Account (ATA) based on wallet address and token mint. This implementation shows how the Associated Token Program creates predictable addresses for token accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_associated_token_address_and_bump_seed_internal(\n    wallet_address: &Pubkey,\n    token_mint_address: &Pubkey,\n    program_id: &Pubkey,\n    token_program_id: &Pubkey,\n) -> (Pubkey, u8) {\n    Pubkey::find_program_address(\n        &[\n            &wallet_address.to_bytes(), // Owner's public key\n            &token_program_id.to_bytes(), // Token Program or Token Extension Program\n            &token_mint_address.to_bytes(), // Token mint address\n        ],\n        program_id, // Associated Token Program ID\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Accounts with Constraints in Rust\nDESCRIPTION: This code snippet demonstrates how to use account constraints in an Anchor program. It shows the initialization of a new account with specific constraints such as init, payer, and space.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDA with Multiple Seeds and Account References in Anchor\nDESCRIPTION: Example of implementing a PDA account with multiple seeds including both static ('hello_world') and dynamic (signer's public key) seeds.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code highlight]\n        seeds = [b\"hello_world\", signer.key().as_ref()],\n        bump,\n    )]\n    pub pda_account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Signers to an Instruction\nDESCRIPTION: Shows how to add additional keypairs as signers for an instruction. This is commonly used when creating new accounts where the account keypair needs to sign the transaction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:signers]\nawait program.methods\n  .instructionName(instructionData)\n  .accounts({})\n  // [!code highlight]\n  .signers([])\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Calculating Account Size for Complex Data Structures in Anchor\nDESCRIPTION: This example demonstrates how to manually calculate the required space for an account containing different data types including a Vec. Note that 8 bytes are added to the space constraint for Anchor's internal discriminator.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/space.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[account]\npub struct MyData {\n    pub val: u16,\n    pub state: GameState,\n    pub players: Vec<Pubkey> // we want to support up to 10 players\n}\n\n\nimpl MyData {\n    // [!code highlight]\n    pub const MAX_SIZE: usize = 2 + (1 + 32) + (4 + 10 * 32);\n}\n\n#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Eq)]\npub enum GameState {\n    Active,\n    Tie,\n    Won { winner: Pubkey },\n}\n\n#[derive(Accounts)]\npub struct InitializeMyData<'info> {\n    // Note that we have to add 8 to the space for the internal anchor\n    // [!code highlight]\n    #[account(init, payer = signer, space = 8 + MyData::MAX_SIZE)]\n    pub acc: Account<'info, MyData>,\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>\n}\n```\n\n----------------------------------------\n\nTITLE: Using InterfaceAccount in Rust for Anchor\nDESCRIPTION: Shows how to use InterfaceAccount<'info, T> type in an Anchor program. This account container checks ownership on deserialization.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_spl::token_interface::{Mint, TokenAccount, TokenInterface};\n\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub mint: InterfaceAccount<'info, Mint>,\n    pub token: InterfaceAccount<'info, TokenAccount>,\n    pub program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer Logic in Rust using Anchor\nDESCRIPTION: This code snippet demonstrates the implementation of token transfer logic in Rust using Anchor. It shows how to set up the TransferChecked struct, create a CpiContext, and make a CPI call to the transfer_checked instruction on the token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {\n    // Get the number of decimals for this mint\n    let decimals = ctx.accounts.mint.decimals;\n\n    // Create the TransferChecked struct with required accounts\n    let cpi_accounts = TransferChecked {\n        mint: ctx.accounts.mint.to_account_info(),\n        from: ctx.accounts.sender_token_account.to_account_info(),\n        to: ctx.accounts.recipient_token_account.to_account_info(),\n        authority: ctx.accounts.signer.to_account_info(),\n    };\n\n    // The program being invoked in the CPI\n    let cpi_program = ctx.accounts.token_program.to_account_info();\n\n     // Combine the accounts and program into a \"CpiContext\"\n    let cpi_context = CpiContext::new(cpi_program, cpi_accounts);\n\n    // Make CPI to transfer_checked instruction on token program\n    token_interface::transfer_checked(cpi_context, amount, decimals)?\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Funding PDA with SOL in TypeScript for Solana\nDESCRIPTION: This TypeScript code creates and sends a transaction to fund a Program Derived Address (PDA) with SOL. It uses the SystemProgram to create a transfer instruction from the wallet to the PDA.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Fund PDA with SOL\", async () => {\n  const transferInstruction = SystemProgram.transfer({\n    fromPubkey: wallet.publicKey,\n    toPubkey: PDA,\n    lamports: transferAmount,\n  });\n\n  const transaction = new Transaction().add(transferInstruction);\n\n  const transactionSignature = await sendAndConfirmTransaction(\n    connection,\n    transaction,\n    [wallet.payer], // signer\n  );\n\n  console.log(\n    `\\nTransaction Signature:` +\n      `https://solana.fm/tx/${transactionSignature}?cluster=devnet-solana`,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Account Constraints Example for Mint Creation\nDESCRIPTION: Example showing the account constraints needed to initialize a token mint. This includes setting the payer, decimals, mint authority, and freeze authority for the new mint account.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <payer>,\n    mint::decimals = <decimals>,\n    mint::authority = <authority>,\n    mint::freeze_authority = <freeze_authority>,\n)]\npub mint: InterfaceAccount<'info, Mint>,\n```\n\n----------------------------------------\n\nTITLE: Build Initialize Instruction in Anchor\nDESCRIPTION: Rust code for constructing the initialize instruction using the Client module. It specifies needed accounts and argument discriminators, building the required Solana transaction instruction. It requires appropriate account details and program identifiers.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Build initialize instruction\nlet initialize_ix = program\n    .request()\n    // Accounts required for initialize instruction\n    .accounts(accounts::Initialize {\n        counter: counter.pubkey(),\n        payer: program.payer(),\n        system_program: system_program::ID,\n    })\n    // Arguments for initialize instruction (discriminator)\n    .args(args::Initialize)\n    .instructions()?\n    .remove(0);\n```\n\n----------------------------------------\n\nTITLE: Building a Transaction with .transaction()\nDESCRIPTION: Shows how to use the .transaction() method to build a Transaction object with the specified instruction without sending it. This allows for manual signing and sending of the transaction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate keypair for the new account\nconst newAccountKp = new Keypair();\n\nconst data = new BN(42);\nconst transaction = await program.methods\n  .initialize(data)\n  .accounts({\n    newAccount: newAccountKp.publicKey,\n    signer: wallet.publicKey,\n    systemProgram: SystemProgram.programId,\n  })\n  // [!code word:transaction:1]\n  // [!code highlight]\n  .transaction();\n\nconst transactionSignature = await connection.sendTransaction(transaction, [\n  wallet.payer,\n  newAccountKp,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Account Type in Rust for Anchor\nDESCRIPTION: Demonstrates how to use the Account<'info, T> type in an Anchor program. This type is an account container that checks ownership on deserialization.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub account: Account<'info, CustomAccountType>,\n}\n\n#[account]\npub struct CustomAccountType {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Generated IDL JSON for an Anchor Program\nDESCRIPTION: This JSON represents the generated Interface Description Language (IDL) file for the Anchor program. It includes program metadata, instruction details, account structures, and type definitions which facilitate client interactions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"BYFW1vhC1ohxwRbYoLbAWs86STa25i9sD5uEusVjTYNd\",\n  \"metadata\": {\n    \"name\": \"hello_anchor\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      // [!code word:initialize]\n      // [!code highlight]\n      \"name\": \"initialize\",\n      // [!code word:discriminator:1]\n      // [!code highlight]\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      // [!code word:accounts:1]\n      \"accounts\": [\n        // [!code highlight:14]\n        {\n          \"name\": \"new_account\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"signer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      // [!code word:args:1]\n      \"args\": [\n        // [!code highlight:4]\n        {\n          \"name\": \"data\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"NewAccount\",\n      \"discriminator\": [176, 95, 4, 118, 91, 177, 125, 232]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"NewAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"data\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Program Type in Rust for Anchor\nDESCRIPTION: Shows how to use Program<'info, T> type in an Anchor program. This type validates that the account is the given Program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_spl::token::Token;\n\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub system_program: Program<'info, System>,\n    pub token_program: Program<'info, Token>,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Sysvar with LiteSVM in Python\nDESCRIPTION: This Python code demonstrates how to manipulate the Clock sysvar using LiteSVM for testing Solana programs. It initializes LiteSVM, loads a Solana program from a `.so` file, and then modifies the clock's `unix_timestamp` to influence the transaction's success. It utilizes `solders` library which provides Python bindings for Solana data structures and APIs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\n\nfrom solders.instruction import Instruction\nfrom solders.keypair import Keypair\nfrom solders.litesvm import LiteSVM\nfrom solders.message import Message\nfrom solders.pubkey import Pubkey\nfrom solders.transaction import VersionedTransaction\nfrom solders.transaction_metadata import FailedTransactionMetadata, TransactionMetadata\n\n\ndef test_set_clock() -> None:\n    program_id = Pubkey.new_unique()\n    client = LiteSVM()\n    client.add_program_from_file(\n        program_id, Path(\"tests/fixtures/solders_clock_example.so\")\n    )\n    payer = Keypair()\n    client.airdrop(payer.pubkey(), 1_000_000_000)\n    blockhash = client.latest_blockhash()\n    ixs = [Instruction(program_id=program_id, data=b\"\", accounts=[])]\n    msg = Message.new_with_blockhash(ixs, payer.pubkey(), blockhash)\n    tx = VersionedTransaction(msg, [payer])\n    # set the time to January 1st 2000\n    initial_clock = client.get_clock()\n    initial_clock.unix_timestamp = 1735689600\n    client.set_clock(initial_clock)\n    # this will fail because it's not January 1970 anymore\n    bad_res = client.send_transaction(tx)\n    assert isinstance(bad_res, FailedTransactionMetadata)\n    # so let's turn back time\n    clock = client.get_clock()\n    clock.unix_timestamp = 50\n    client.set_clock(clock)\n    ixs2 = [\n        Instruction(\n            program_id=program_id,\n            data=b\"foobar\",  # unused, this is just to dedup the transaction\n            accounts=[],\n        )\n    ]\n    msg2 = Message.new_with_blockhash(ixs2, payer.pubkey(), blockhash)\n    tx2 = VersionedTransaction(msg2, [payer])\n    # now the transaction goes through\n    good_res = client.send_transaction(tx2)\n    assert isinstance(good_res, TransactionMetadata)\n```\n\n----------------------------------------\n\nTITLE: Required Accounts for Token Minting in Anchor (Rust)\nDESCRIPTION: Account validation struct showing the minimum required accounts for minting tokens. Includes the mint authority (signer), mint account, destination token account, and token program interface.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/mint-tokens.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct MintTokens<'info> {\n    // The mint authority\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    // The mint account\n    #[account(mut)]\n    pub mint: InterfaceAccount<'info, Mint>,\n    // The destination token account\n    #[account(mut)]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    // The token program\n    pub token_program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Mint Tokens with PDA (Program)\nDESCRIPTION: This Rust code defines the `create_and_mint_tokens` function, which creates a new mint and token account, then mints tokens to the token account. It uses a Program Derived Address (PDA) for the mint authority and utilizes CPI to interact with the token program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::{\n    associated_token::AssociatedToken,\n    token_interface::{self, Mint, MintTo, TokenAccount, TokenInterface, TransferChecked},\n};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn create_and_mint_tokens(ctx: Context<CreateAndMintTokens>, amount: u64) -> Result<()> {\n        let signer_seeds: &[&[&[u8]]] = &[&[b\"mint\", &[ctx.bumps.mint]]];\n\n        let cpi_accounts = MintTo {\n            mint: ctx.accounts.mint.to_account_info(),\n            to: ctx.accounts.token_account.to_account_info(),\n            authority: ctx.accounts.mint.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n        token_interface::mint_to(cpi_context, amount)?;\n        Ok(())\n    }\n\n    pub fn transfer_tokens(ctx: Context<TransferTokens>) -> Result<()> {\n        let signer_seeds: &[&[&[u8]]] = &[&[b\"token\", &[ctx.bumps.sender_token_account]]];\n\n        let amount = ctx.accounts.sender_token_account.amount;\n        let decimals = ctx.accounts.mint.decimals;\n\n        let cpi_accounts = TransferChecked {\n            mint: ctx.accounts.mint.to_account_info(),\n            from: ctx.accounts.sender_token_account.to_account_info(),\n            to: ctx.accounts.recipient_token_account.to_account_info(),\n            authority: ctx.accounts.sender_token_account.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts).with_signer(signer_seeds);\n        token_interface::transfer_checked(cpi_context, amount, decimals)?;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateAndMintTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        init,\n        payer = signer,\n        mint::decimals = 6,\n        mint::authority = mint,\n        mint::freeze_authority = mint,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(\n        init,\n        payer = signer,\n        token::mint = mint,\n        token::authority = token_account,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        mut,\n        seeds = [b\"mint\"],\n        bump\n    )]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(\n        mut,\n        token::mint = mint,\n        token::authority = sender_token_account,\n        seeds = [b\"token\"],\n        bump\n    )]\n    pub sender_token_account: InterfaceAccount<'info, TokenAccount>,\n    #[account(\n        init_if_needed,\n        payer = signer,\n        associated_token::mint = mint,\n        associated_token::authority = signer,\n        associated_token::token_program = token_program,\n    )]\n    pub recipient_token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub system_program: Program<'info, System>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer via CPI in Rust using Anchor\nDESCRIPTION: This code snippet shows how to implement a token transfer function using Anchor in Rust. It demonstrates the setup of account structures and the CPI call to the token program's transfer_checked instruction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\nuse anchor_spl::token_interface::{self, TokenAccount, TokenInterface, TransferChecked};\n\ndeclare_id!(\"3pX5NKLru1UBDVckynWQxsgnJeUN3N1viy36Gk9TSn8d\");\n\n#[program]\npub mod token_example {\n    use super::*;\n\n    pub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {\n        let decimals = ctx.accounts.mint.decimals;\n\n        let cpi_accounts = TransferChecked {\n            mint: ctx.accounts.mint.to_account_info(),\n            from: ctx.accounts.sender_token_account.to_account_info(),\n            to: ctx.accounts.recipient_token_account.to_account_info(),\n            authority: ctx.accounts.signer.to_account_info(),\n        };\n        let cpi_program = ctx.accounts.token_program.to_account_info();\n        let cpi_context = CpiContext::new(cpi_program, cpi_accounts);\n        token_interface::transfer_checked(cpi_context, amount, decimals)?\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(mut)]\n    pub mint: InterfaceAccount<'info, Mint>,\n    #[account(mut)]\n    pub sender_token_account: InterfaceAccount<'info, TokenAccount>,\n    #[account(mut)]\n    pub recipient_token_account: InterfaceAccount<'info, TokenAccount>,\n    pub token_program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Account Constraint with Anchor in Rust\nDESCRIPTION: Applies a custom constraint that checks if a given expression evaluates to true. Can use a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[account(constraint = <expr>)]\n#[account(\n    constraint = <expr> @ <custom_error>\n)]\n```\n\n----------------------------------------\n\nTITLE: New Ergonomic Builder API in Program Client\nDESCRIPTION: This entry introduces the new `methods` namespace in the program client, which provides a more ergonomic API for building and invoking program methods, improving developer experience.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nAdd new `methods` namespace to the program client, introducing a more ergonomic builder API ([#1324](https://github.com/coral-xyz/anchor/pull/1324)).\n```\n\n----------------------------------------\n\nTITLE: Building Anchor Programs\nDESCRIPTION: Shows how to build Anchor programs targeting Solana's BPF runtime. It includes options for verifiable builds and passing additional arguments to the underlying 'cargo build-sbf' command.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nanchor build\n```\n\nLANGUAGE: shell\nCODE:\n```\nanchor build --verifiable\n```\n\nLANGUAGE: shell\nCODE:\n```\nanchor build -- --features my-feature\n```\n\n----------------------------------------\n\nTITLE: Account Address Validation with Anchor in Rust\nDESCRIPTION: Checks if the account key matches a specified public key. Can use a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[account(address = <expr>)]\n#[account(address = <expr> @ <custom_error>)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Sysvar in Rust for Anchor\nDESCRIPTION: Demonstrates the use of Sysvar<'info, T> type in an Anchor program. This type validates that the account is a sysvar and deserializes it.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub rent: Sysvar<'info, Rent>,\n    pub clock: Sysvar<'info, Clock>,\n}\n```\n\n----------------------------------------\n\nTITLE: Program IDL Definition for Anchor Client\nDESCRIPTION: The JSON Interface Description Language (IDL) file for the counter program. This IDL describes the program's instructions, accounts, and data structures, allowing the `declare_program!` macro to generate client modules.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/rust.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\",\n  \"metadata\": {\n    \"name\": \"example\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"increment\",\n      \"discriminator\": [11, 18, 104, 9, 104, 174, 59, 33],\n      \"accounts\": [\n        {\n          \"name\": \"counter\",\n          \"writable\": true\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"counter\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Counter\",\n      \"discriminator\": [255, 176, 4, 245, 188, 253, 124, 25]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Counter\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"count\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Account with Keypair Public Key as Address - Rust\nDESCRIPTION: This snippet illustrates how to create a token account that uses a keypair public key as its address. The associated account constraints are defined similarly to the previous example.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <payer>,\n    token::mint = <mint>,\n    token::authority = <authority>,\n    token::token_program = <token_program>\n)]\npub token_account: InterfaceAccount<'info, TokenAccount>,\n```\n\n----------------------------------------\n\nTITLE: Defining a Zero Copy Account Structure in Rust\nDESCRIPTION: This code defines a zero-copy account structure using the #[account(zero_copy)] attribute. It demonstrates how to create a Data struct with a large byte array that can be efficiently deserialized.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[account(zero_copy)]\npub struct Data {\n    // 10240 bytes - 8 bytes account discriminator\n    pub data: [u8; 10232],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a PDA Account with init Constraint in Anchor\nDESCRIPTION: Example of using the init constraint with PDA to create a new account at a PDA address. This requires specifying a payer account and the space to allocate.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    #[account(\n        // [!code word:init]\n        // [!code highlight:3]\n        init,\n        payer = signer,\n        space = 8 + 1,\n        seeds = [b\"hello_world\", signer.key().as_ref()],\n        bump,\n    )]\n    pub pda_account: Account<'info, CustomAccount>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct CustomAccount {\n    pub bump_seed: u8,\n}\n```\n\n----------------------------------------\n\nTITLE: Client Setup for Solana Account Initialization with TypeScript\nDESCRIPTION: This TypeScript code configures a client to initialize a large Solana account using Anchor. It creates necessary transactions such as account creation via the SystemProgram and initialization of account data using Anchor methods, handling the maximum account size and rent exemption.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { ZeroCopyTwo } from \"../target/types/zero_copy_two\";\n\ndescribe(\"zero-copy-two\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.ZeroCopyTwo as Program<ZeroCopyTwo>;\n  const dataAccount = anchor.web3.Keypair.generate();\n\n  it(\"Is initialized!\", async () => {\n    const space = 10_485_760; // 10MB max account size\n    const lamports =\n      await program.provider.connection.getMinimumBalanceForRentExemption(\n        space,\n      );\n\n    // [!code highlight:7]\n    const createAccountInstruction = anchor.web3.SystemProgram.createAccount({\n      fromPubkey: program.provider.publicKey,\n      newAccountPubkey: dataAccount.publicKey,\n      space,\n      lamports,\n      programId: program.programId,\n    });\n\n    // [!code highlight:6]\n    const initializeInstruction = await program.methods\n      .initialize()\n      .accounts({\n        dataAccount: dataAccount.publicKey,\n      })\n      .instruction();\n\n    const transaction = new anchor.web3.Transaction().add(\n      createAccountInstruction,\n      initializeInstruction,\n    );\n\n    const tx = await program.provider.sendAndConfirm(transaction, [\n      dataAccount,\n    ]);\n\n    console.log(\"Your transaction signature\", tx);\n\n    const account = await program.account.data.fetch(dataAccount.publicKey);\n    console.log(\"Account\", account);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Instruction Handler with Result Type in Rust\nDESCRIPTION: Demonstrates how to define a custom instruction handler that returns an Anchor-specific Result type, allowing for error handling.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn custom_instruction(ctx: Context<CustomInstruction>) -> Result<()> {\n    // --snip--\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Account Field Validation with Anchor in Rust\nDESCRIPTION: Checks if a field on the account matches the key of a target field in the Accounts struct. Can use a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    has_one = <target_account>\n)]\n\n#[account(\n    has_one = <target_account> @ <custom_error>\n)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Signer in Rust for Anchor\nDESCRIPTION: Demonstrates the use of Signer<'info> type in an Anchor program. This type validates that the account signed the transaction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub signer: Signer<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CPI Implementation with TypeScript\nDESCRIPTION: Test suite that demonstrates how to test the CPI implementation using Anchor's TypeScript client, including initialization and increment operations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { Example } from \"../target/types/example\";\nimport { ExampleCpi } from \"../target/types/example_cpi\";\nimport { Keypair } from \"@solana/web3.js\";\n\ndescribe(\"example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.Example as Program<Example>;\n  const cpiProgram = anchor.workspace.ExampleCpi as Program<ExampleCpi>;\n\n  const counterAccount = Keypair.generate();\n\n  it(\"Is initialized!\", async () => {\n    const transactionSignature = await cpiProgram.methods\n      .initializeCpi()\n      .accounts({\n        counter: counterAccount.publicKey,\n      })\n      .signers([counterAccount])\n      .rpc({ skipPreflight: true });\n\n    const accountData = await program.account.counter.fetch(\n      counterAccount.publicKey,\n    );\n\n    console.log(`Transaction Signature: ${transactionSignature}`);\n    console.log(`Count: ${accountData.count}`);\n  });\n\n  it(\"Increment\", async () => {\n    const transactionSignature = await cpiProgram.methods\n      .incrementCpi()\n      .accounts({\n        counter: counterAccount.publicKey,\n      })\n      .rpc();\n\n    const accountData = await program.account.counter.fetch(\n      counterAccount.publicKey,\n    );\n\n    console.log(`Transaction Signature: ${transactionSignature}`);\n    console.log(`Count: ${accountData.count}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative CPI Implementation using invoke_signed in Rust\nDESCRIPTION: This Rust code snippet shows an alternative implementation of the CPI using the invoke_signed function. It demonstrates how to construct the transfer instruction and invoke it with PDA signer seeds.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::solana_program::{program::invoke_signed, system_instruction};\n\npub fn sol_transfer(ctx: Context<SolTransfer>, amount: u64) -> Result<()> {\n    let from_pubkey = ctx.accounts.pda_account.to_account_info();\n    let to_pubkey = ctx.accounts.recipient.to_account_info();\n    let program_id = ctx.accounts.system_program.to_account_info();\n\n    let seed = to_pubkey.key();\n    let bump_seed = ctx.bumps.pda_account;\n\n    let signer_seeds: &[&[&[u8]]] = &[&[b\"pda\", seed.as_ref(), &[bump_seed]]];\n\n    let instruction =\n        &system_instruction::transfer(&from_pubkey.key(), &to_pubkey.key(), amount);\n\n    invoke_signed(instruction, &[from_pubkey, to_pubkey, program_id], signer_seeds)?\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Zero Copy Account in Rust\nDESCRIPTION: This snippet shows how to update an existing zero-copy account using the load_mut method. It includes the account structure for the update instruction and the implementation of the update function.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Update<'info> {\n    #[account(mut)]\n    pub data_account: AccountLoader<'info, Data>,\n}\n\npub fn update(ctx: Context<Update>) -> Result<()> {\n    let account = &mut ctx.accounts.data_account.load_mut()?;\n    account.data = [2; 10232];\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Mint Tokens (Client)\nDESCRIPTION: This TypeScript code defines a test case that invokes the `createAndMintTokens` method on the Solana program.  It sets up the accounts and parameters required to execute the instruction, and logs the transaction signature and mint account details.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport {\n  TOKEN_2022_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  getMint,\n  getAccount,\n} from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, mintBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  const [token, tokenBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createAndMintTokens(new anchor.BN(100))\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n\n  it(\"Mint Tokens\", async () => {\n    const tx = await program.methods\n      .transferTokens()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n\n    console.log(\"Your transaction signature\", tx);\n\n    const associatedTokenAccount = await getAssociatedTokenAddress(\n      mint,\n      program.provider.publicKey,\n      false,\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const recipientTokenAccount = await getAccount(\n      program.provider.connection,\n      associatedTokenAccount,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const senderTokenAccount = await getAccount(\n      program.provider.connection,\n      token,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Recipient Token Account\", recipientTokenAccount);\n    console.log(\"Sender Token Account\", senderTokenAccount);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Specify Dependencies for Rust Anchor Client\nDESCRIPTION: Defines the dependencies for running Anchor client in Rust. This includes anchor-client for interacting with Anchor programs, anchor-lang for language support, anyhow for error handling, and tokio for asynchronous execution. Dependencies are specified in the Cargo.toml format.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"rs\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nanchor-client = { version = \"0.31.0\", features = [\"async\"] }\nanchor-lang = \"0.31.0\"\nanyhow = \"1.0.93\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Anchor Program ID Declaration\nDESCRIPTION: Declaration of the program's on-chain address using the declare_id macro.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"11111111111111111111111111111111\");\n```\n\n----------------------------------------\n\nTITLE: PDA Account Validation with Anchor in Rust\nDESCRIPTION: Checks if the account is a PDA derived from the current program, seeds, and optional bump. Can specify a custom program for seed derivation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    seeds = <seeds>,\n    bump\n)]\n\n#[account(\n    seeds = <seeds>,\n    bump,\n    seeds::program = <expr>\n)]\n\n#[account(\n    seeds = <seeds>,\n    bump = <expr>\n)]\n\n#[account(\n    seeds = <seeds>,\n    bump = <expr>,\n    seeds::program = <expr>\n)]\n```\n\n----------------------------------------\n\nTITLE: Account Discriminator in Anchor IDL\nDESCRIPTION: This snippet demonstrates how an account is represented in the IDL, with special focus on the discriminator. The discriminator is generated from the first 8 bytes of the Sha256 hash combining 'account' with the account name, used to identify the account type during deserialization. While different programs with identical account names will share discriminators, Anchor ensures that account ownership is verified.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accounts\": [\n    {\n      \"name\": \"NewAccount\",\n      \"discriminator\": [176, 95, 4, 118, 91, 177, 125, 232]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Sysvar with LiteSVM in TypeScript\nDESCRIPTION: This TypeScript code shows how to manipulate the Clock sysvar using LiteSVM for testing Solana programs. It initializes LiteSVM, loads a program, and then modifies the clock's unix timestamp to influence the transaction's success. It uses `@solana/web3.js` and `litesvm` libraries. Note that the program being tested needs to be compiled and accessible via the specified path.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  FailedTransactionMetadata,\n  LiteSVM,\n  TransactionMetadata,\n} from \"litesvm\";\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\ntest(\"clock\", () => {\n  const programId = PublicKey.unique();\n  const svm = new LiteSVM();\n  svm.addProgramFromFile(programId, \"program_bytes/litesvm_clock_example.so\");\n  const payer = new Keypair();\n  svm.airdrop(payer.publicKey, BigInt(LAMPORTS_PER_SOL));\n  const blockhash = svm.latestBlockhash();\n  const ixs = [\n    new TransactionInstruction({ keys: [], programId, data: Buffer.from(\"\") }),\n  ];\n  const tx = new Transaction();\n  tx.recentBlockhash = blockhash;\n  tx.add(...ixs);\n  tx.sign(payer);\n  // set the time to January 1st 2000\n  const initialClock = svm.getClock();\n  initialClock.unixTimestamp = 1735689600n;\n  svm.setClock(initialClock);\n  // this will fail because the contract wants it to be January 1970\n  const failed = svm.sendTransaction(tx);\n  if (failed instanceof FailedTransactionMetadata) {\n    expect(failed.err().toString()).toContain(\"ProgramFailedToComplete\");\n  } else {\n    throw new Error(\"Expected transaction failure here\");\n  }\n  // so let's turn back time\n  const newClock = svm.getClock();\n  newClock.unixTimestamp = 50n;\n  svm.setClock(newClock);\n  const ixs2 = [\n    new TransactionInstruction({\n      keys: [],\n      programId,\n      data: Buffer.from(\"foobar\"), // unused, just here to dedup the tx\n    }),\n  ];\n  const tx2 = new Transaction();\n  tx2.recentBlockhash = blockhash;\n  tx2.add(...ixs2);\n  tx2.sign(payer);\n  // now the transaction goes through\n  const success = svm.sendTransaction(tx2);\n  expect(success).toBeInstanceOf(TransactionMetadata);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up USDC mint account with LiteSVM\nDESCRIPTION: This Rust code snippet sets up a USDC mint account with a specified balance using LiteSVM. It creates a `TokenAccount` struct, packs it into a byte array, and then uses `svm.set_account` to create the account in LiteSVM with the desired data and lamports.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nuse {\n    litesvm::LiteSVM,\n    solana_account::Account,\n    solana_program_option::COption,\n    solana_program_pack::Pack,\n    solana_pubkey::{pubkey, Pubkey},\n    spl_associated_token_account_client::address::get_associated_token_address,\n    spl_token::{\n        state::{Account as TokenAccount, AccountState},\n        ID as TOKEN_PROGRAM_ID,\n    },\n};\n\nfn test_infinite_usdc_mint() {\n    let owner = Pubkey::new_unique();\n    let usdc_mint = pubkey!(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n    let ata = get_associated_token_address(&owner, &usdc_mint);\n    let usdc_to_own = 1_000_000_000_000;\n    let token_acc = TokenAccount {\n        mint: usdc_mint,\n        owner: owner,\n        amount: usdc_to_own,\n        delegate: COption::None,\n        state: AccountState::Initialized,\n        is_native: COption::None,\n        delegated_amount: 0,\n        close_authority: COption::None,\n    };\n    let mut svm = LiteSVM::new();\n    let mut token_acc_bytes = [0u8; TokenAccount::LEN];\n    TokenAccount::pack(token_acc, &mut token_acc_bytes).unwrap();\n    svm.set_account(\n        ata,\n        Account {\n            lamports: 1_000_000_000,\n            data: token_acc_bytes.to_vec(),\n            owner: TOKEN_PROGRAM_ID,\n            executable: false,\n            rent_epoch: 0,\n        },\n    )\n    .unwrap();\n    let raw_account = svm.get_account(&ata).unwrap();\n    assert_eq!(\n        TokenAccount::unpack(&raw_account.data).unwrap().amount,\n        usdc_to_own\n    )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using seeds::program Constraint for Cross-Program PDAs in Anchor\nDESCRIPTION: Example of using the seeds::program constraint to specify a different program ID for PDA derivation, useful when interacting with PDAs created by another program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(\n        seeds = [b\"hello_world\"],\n        bump,\n        // [!code word:other_program]\n        // [!code highlight]\n        seeds::program = other_program.key(),\n    )]\n    pub pda_account: SystemAccount<'info>,\n    pub other_program: Program<'info, OtherProgram>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mint Structure in Solana Token Programs\nDESCRIPTION: Mint data structure that represents a token on Solana's network. This structure stores the token's global metadata including mint authority, total supply, decimals, initialization status, and freeze authority.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-mint.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Mint data.\n#[repr(C)]\n#[derive(Clone, Copy, Debug, Default, PartialEq)]\npub struct Mint {\n  /// Optional authority used to mint new tokens. The mint authority may only\n  /// be provided during mint creation. If no mint authority is present\n  /// then the mint has a fixed supply and no further tokens may be\n  /// minted.\n  pub mint_authority: COption<Pubkey>,\n  /// Total supply of tokens.\n  pub supply: u64,\n  /// Number of base 10 digits to the right of the decimal place.\n  pub decimals: u8,\n  /// Is `true` if this structure has been initialized\n  pub is_initialized: bool,\n  /// Optional authority to freeze token accounts.\n  pub freeze_authority: COption<Pubkey>,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding anchor-spl dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the anchor-spl crate as a dependency and configure the idl-build feature in the Cargo.toml file of an Anchor project.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nidl-build = [\n    \"anchor-lang/idl-build\",\n    \"anchor-spl/idl-build\",\n]\n\n[dependencies]\nanchor-lang = \"0.31.0\"\nanchor-spl = \"0.31.0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface in Rust for Anchor\nDESCRIPTION: Demonstrates the use of Interface<'info, T> type in an Anchor program. This type validates that the account is one of a set of given Programs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_spl::token_interface::TokenInterface;\n\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub program: Interface<'info, TokenInterface>,\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Account Validation with Anchor in Rust\nDESCRIPTION: Creates or validates mint accounts with specified authority and decimals. Optionally specifies a freeze authority.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    mint::authority = <target_account>,\n    mint::decimals = <expr>\n)]\n\n#[account(\n    mint::authority = <target_account>,\n    mint::decimals = <expr>,\n    mint::freeze_authority = <target_account>\n)]\n```\n\n----------------------------------------\n\nTITLE: Defining Account Structures in an Anchor Program\nDESCRIPTION: This Rust code snippet demonstrates how to define account structures in an Anchor program. It includes the use of the #[account] attribute to define a structure that will be stored on-chain in the Solana blockchain.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"BYFW1vhC1ohxwRbYoLbAWs86STa25i9sD5uEusVjTYNd\");\n\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n        ctx.accounts.new_account.data = data;\n        msg!(\"Changed data to: {}!\", data);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n// [!code word:NewAccount]\n// [!code highlight:4]\n#[account]\npub struct NewAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Instruction Name and Parameters\nDESCRIPTION: Shows how to specify an instruction name and pass parameters to the instruction. The parameters are the instruction data required by the program function.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:instructionName]\nawait program.methods\n  // [!code highlight]\n  .instructionName(instructionData1, instructionData2)\n  .accounts({})\n  .signers([])\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Bump Value for PDA in Anchor\nDESCRIPTION: Example of providing an explicit bump value from an account field, which can optimize compute unit usage by avoiding recalculation of the bump.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(\n        seeds = [b\"hello_world\"],\n        // [!code highlight]\n        bump = pda_account.bump_seed,\n    )]\n    pub pda_account: Account<'info, CustomAccount>,\n}\n\n#[account]\npub struct CustomAccount {\n    pub bump_seed: u8,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Module with Single Argument - Rust\nDESCRIPTION: This code snippet demonstrates how to initialize a Solana program module using the #[instruction(..)] attribute with a single argument. It requires the Anchor and Solana libraries, with the context and input parameters set appropriately. The input specifies a string type and is used to determine the size of the initialized account.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>, input: String) -> Result<()> {\n        // --snip--\n    }\n}\n\n#[derive(Accounts)]\n#[instruction(input: String)]\npub struct Initialize<'info> {\n    #[account(\n        init,\n        payer = signer,\n        space = 8 + 4 + input.len(),\n    )]\n    pub new_account: Account<'info, DataAccount>,\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Using AccountInfo in Rust for Anchor\nDESCRIPTION: Shows the usage of AccountInfo<'info> type in an Anchor program. This type is used for unchecked accounts, but UncheckedAccount is recommended instead.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    /// CHECK: AccountInfo is an unchecked account\n    pub unchecked_account: AccountInfo<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signer Constraint in Rust for Anchor\nDESCRIPTION: Checks if the given account signed the transaction. Can be used with a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[account(signer)]\n#[account(signer @ <custom_error>)]\n```\n\n----------------------------------------\n\nTITLE: Transfer Tokens (Client)\nDESCRIPTION: This TypeScript code defines a test case for transferring tokens. It calls the `transferTokens` method, retrieves and logs account information of both the recipient and sender token accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/transfer-tokens.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { TokenExample } from \"../target/types/token_example\";\nimport {\n  TOKEN_2022_PROGRAM_ID,\n  getAssociatedTokenAddress,\n  getMint,\n  getAccount,\n} from \"@solana/spl-token\";\n\ndescribe(\"token-example\", () => {\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.TokenExample as Program<TokenExample>;\n  const [mint, mintBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"mint\")],\n    program.programId,\n  );\n\n  const [token, tokenBump] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token\")],\n    program.programId,\n  );\n\n  it(\"Is initialized!\", async () => {\n    const tx = await program.methods\n      .createAndMintTokens(new anchor.BN(100))\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n    console.log(\"Your transaction signature\", tx);\n\n    const mintAccount = await getMint(\n      program.provider.connection,\n      mint,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Mint Account\", mintAccount);\n  });\n\n  it(\"Mint Tokens\", async () => {\n    const tx = await program.methods\n      .transferTokens()\n      .accounts({\n        tokenProgram: TOKEN_2022_PROGRAM_ID,\n      })\n      .rpc({ commitment: \"confirmed\" });\n\n    console.log(\"Your transaction signature\", tx);\n\n    const associatedTokenAccount = await getAssociatedTokenAddress(\n      mint,\n      program.provider.publicKey,\n      false,\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const recipientTokenAccount = await getAccount(\n      program.provider.connection,\n      associatedTokenAccount,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    const senderTokenAccount = await getAccount(\n      program.provider.connection,\n      token,\n      \"confirmed\",\n      TOKEN_2022_PROGRAM_ID,\n    );\n\n    console.log(\"Recipient Token Account\", recipientTokenAccount);\n    console.log(\"Sender Token Account\", senderTokenAccount);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Anchor Example Type Definition - TypeScript\nDESCRIPTION: This TypeScript snippet defines the types for an Anchor program in camelCase format. It is primarily a type helper that aligns with the IDL, facilitating the development of JavaScript/TypeScript clients by providing type information for interactions with the Anchor program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Program IDL in camelCase format in order to be used in JS/TS.\n *\n * Note that this is only a type helper and is not the actual IDL. The original\n * IDL can be found at `target/idl/example.json`.\n */\nexport type Example = {\n  address: \"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\";\n  metadata: {\n    name: \"example\";\n    version: \"0.1.0\";\n    spec: \"0.1.0\";\n    description: \"Created with Anchor\";\n  };\n  instructions: [\n    {\n      name: \"increment\";\n      discriminator: [11, 18, 104, 9, 104, 174, 59, 33];\n      accounts: [\n        {\n          name: \"counter\";\n          writable: true;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"initialize\";\n      discriminator: [175, 175, 109, 31, 13, 152, 155, 237];\n      accounts: [\n        {\n          name: \"payer\";\n          writable: true;\n          signer: true;\n        },\n        {\n          name: \"counter\";\n          writable: true;\n          signer: true;\n        },\n        {\n          name: \"systemProgram\";\n          address: \"11111111111111111111111111111111\";\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: \"counter\";\n      discriminator: [255, 176, 4, 245, 188, 253, 124, 25];\n    },\n  ];\n  types: [\n    {\n      name: \"counter\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"count\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Option<Account> in Rust for Anchor\nDESCRIPTION: Demonstrates the use of Option<Account<'info, T>> type in an Anchor program. This type is used for optional accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub account: Option<Account<'info, AccountType>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Account with PDA as Address - Rust\nDESCRIPTION: This snippet shows how to create a token account using a Program Derived Address (PDA) as its address. The constraints include a seed and a bump for address generation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <payer>,\n    token::mint = <mint>,\n    token::authority = <authority>,\n    token::token_program = <token_program>,\n    seeds = [<seeds>],\n    bump\n)]\npub token_account: InterfaceAccount<'info, TokenAccount>,\n```\n\n----------------------------------------\n\nTITLE: Processing Instruction Chains\nDESCRIPTION: Shows how to process multiple instructions in sequence using Mollusk's instruction chain functionality.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    mollusk_svm::Mollusk,\n    solana_sdk::{account::Account, pubkey::Pubkey, system_instruction},\n};\n\nlet mollusk = Mollusk::default();\n\nlet alice = Pubkey::new_unique();\nlet bob = Pubkey::new_unique();\nlet carol = Pubkey::new_unique();\nlet dave = Pubkey::new_unique();\n\nlet starting_lamports = 500_000_000;\n\nlet alice_to_bob = 100_000_000;\nlet bob_to_carol = 50_000_000;\nlet bob_to_dave = 50_000_000;\n\nmollusk.process_instruction_chain(\n    &[\n        system_instruction::transfer(&alice, &bob, alice_to_bob),\n        system_instruction::transfer(&bob, &carol, bob_to_carol),\n        system_instruction::transfer(&bob, &dave, bob_to_dave),\n    ],\n    &[\n        (alice, system_account_with_lamports(starting_lamports)),\n        (bob, system_account_with_lamports(starting_lamports)),\n        (carol, system_account_with_lamports(starting_lamports)),\n        (dave, system_account_with_lamports(starting_lamports)),\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Testing SOL Transfer CPI with TypeScript\nDESCRIPTION: Test implementation showing how to invoke the SOL transfer instruction and verify the transaction on SolanaFM explorer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"SOL Transfer Anchor\", async () => {\n  const transactionSignature = await program.methods\n    .solTransfer(new BN(transferAmount))\n    .accounts({\n      sender: sender.publicKey,\n      recipient: recipient.publicKey,\n    })\n    .rpc();\n\n  console.log(\n    `\\nTransaction Signature:` +\n      `https://solana.fm/tx/${transactionSignature}?cluster=devnet-solana`,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Token Account Structure Definition in Rust\nDESCRIPTION: The Rust structure representing a token account in Solana's Token Programs. This structure contains fields for mint, owner, token amount, delegation information, account state, and other metadata needed to track token ownership.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Account data.\n#[repr(C)]\n#[derive(Clone, Copy, Debug, Default, PartialEq)]\npub struct Account {\n    /// The mint associated with this account\n    pub mint: Pubkey,\n    /// The owner of this account.\n    pub owner: Pubkey,\n    /// The amount of tokens this account holds.\n    pub amount: u64,\n    /// If `delegate` is `Some` then `delegated_amount` represents\n    /// the amount authorized by the delegate\n    pub delegate: COption<Pubkey>,\n    /// The account's state\n    pub state: AccountState,\n    /// If `is_native.is_some`, this is a native token, and the value logs the\n    /// rent-exempt reserve. An Account is required to be rent-exempt, so\n    /// the value is used by the Processor to ensure that wrapped SOL\n    /// accounts do not drop below this threshold.\n    pub is_native: COption<u64>,\n    /// The amount delegated\n    pub delegated_amount: u64,\n    /// Optional authority to close the account.\n    pub close_authority: COption<Pubkey>,\n}\n```\n\n----------------------------------------\n\nTITLE: Install Anchor Version with Commit Hash\nDESCRIPTION: Demonstrates how to install a specific version of the anchor-cli based on a commit hash using AVM. It provides examples for full and short commit hashes.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# <VERSION>-<COMMIT>\navm install 0.30.1-cfe82aa682138f7c6c58bf7a78f48f7d63e9e466\n\n# Full commit hash\navm install cfe82aa682138f7c6c58bf7a78f48f7d63e9e466\n\n# Short commit hash\navm install cfe82aa\n```\n```\n\n----------------------------------------\n\nTITLE: Account Owner Validation with Anchor in Rust\nDESCRIPTION: Checks if the account owner matches a specified expression. Can use a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[account(owner = <expr>)]\n#[account(owner = <expr> @ <custom_error>)]\n```\n\n----------------------------------------\n\nTITLE: Building an Instruction with .instruction()\nDESCRIPTION: Demonstrates using the .instruction() method to build a TransactionInstruction object. This allows for combining multiple instructions into a single transaction manually.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate keypair for the new account\nconst newAccountKp = new Keypair();\n\nconst data = new BN(42);\nconst instruction = await program.methods\n  .initialize(data)\n  .accounts({\n    newAccount: newAccountKp.publicKey,\n    signer: wallet.publicKey,\n    systemProgram: SystemProgram.programId,\n  })\n  // [!code word:instruction:1]\n  // [!code highlight]\n  .instruction();\n\nconst transaction = new Transaction().add(instruction);\n\nconst transactionSignature = await connection.sendTransaction(transaction, [\n  wallet.payer,\n  newAccountKp,\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Program in Anchor Test File\nDESCRIPTION: Shows how to access the Program instance in an Anchor test file. This uses the workspace object provided by Anchor to simplify program access during testing.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { HelloAnchor } from \"../target/types/hello_anchor\";\n\ndescribe(\"hello_anchor\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  // [!code highlight]\n  const program = anchor.workspace.HelloAnchor as Program<HelloAnchor>;\n\n  it(\"Is initialized!\", async () => {\n    // Add your test here.\n    const tx = await program.methods.initialize().rpc();\n    console.log(\"Your transaction signature\", tx);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Deserializing Anchor Accounts\nDESCRIPTION: Demonstrates how to use the 'anchor account' command to fetch and deserialize an account using the program's IDL. It shows the syntax for specifying the program name, account type, and public key.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nanchor account <program-name>.<AccountTypeName> <account_pubkey>\n```\n\nLANGUAGE: shell\nCODE:\n```\nanchor account <program-name>.<AccountTypeName> <account_pubkey> --idl <path/to/idl.json>\n```\n\n----------------------------------------\n\nTITLE: Fetch and Deserialize Program Account Types\nDESCRIPTION: Rust code utilizes the Account module in the Anchor framework to fetch the current state of program accounts. It retrieves and deserializes account data, allowing one to access account properties like the counter count.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// Counter type from accounts module\nlet counter_account: Counter = program.account::<Counter>(counter.pubkey()).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Anchor Migration Scripts\nDESCRIPTION: Shows an example of a migration script used with the 'anchor migrate' command. This script demonstrates how to set up an Anchor provider and add custom deployment logic.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// File: migrations/deploys.js\n\nconst anchor = require(\"@coral-xyz/anchor\");\n\nmodule.exports = async function (provider) {\n  anchor.setProvider(provider);\n\n  // Add your deploy script here.\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Reallocs Argument to Accounts::try_accounts in Rust\nDESCRIPTION: This code snippet refers to the addition of a new `&mut reallocs: BTreeSet<Pubkey>` argument to the `Accounts::try_accounts` function in the Rust part of the Anchor framework. This modification likely introduces a mechanism for managing account reallocation during program execution, allowing for more efficient use of on-chain storage.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n\"- lang: Adds a new `&mut reallocs: BTreeSet<Pubkey>` argument to `Accounts::try_accounts` ([#1986](https://github.com/coral-xyz/anchor/pull/1986)).\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutable Account Constraint in Rust for Anchor\nDESCRIPTION: Checks if the given account is mutable and persists state changes. Can be used with a custom error message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[account(mut)]\n#[account(mut @ <custom_error>)]\n```\n\n----------------------------------------\n\nTITLE: Instruction Processing with Validation Checks\nDESCRIPTION: Demonstrates how to process instructions with validation checks using the Check enum, including lamport transfer verification.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    mollusk_svm::{Mollusk, result::Check},\n    solana_sdk::{\n        account::Account,\n        instruction::{AccountMeta, Instruction},\n        pubkey::Pubkey\n        system_instruction,\n        system_program,\n    },\n};\n\nlet sender = Pubkey::new_unique();\nlet recipient = Pubkey::new_unique();\n\nlet base_lamports = 100_000_000u64;\nlet transfer_amount = 42_000u64;\n\nlet instruction = system_instruction::transfer(&sender, &recipient, transfer_amount);\nlet accounts = [\n    (\n        sender,\n        Account::new(base_lamports, 0, &system_program::id()),\n    ),\n    (\n        recipient,\n        Account::new(base_lamports, 0, &system_program::id()),\n    ),\n];\nlet checks = vec![\n    Check::success(),\n    Check::compute_units(system_processor::DEFAULT_COMPUTE_UNITS),\n    Check::account(&sender)\n        .lamports(base_lamports - transfer_amount)\n        .build(),\n    Check::account(&recipient)\n        .lamports(base_lamports + transfer_amount)\n        .build(),\n];\n\nMollusk::default().process_and_validate_instruction(\n    &instruction,\n    &accounts,\n    &checks,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Program Instance with Connection Only\nDESCRIPTION: Initializes a Program instance using only a Connection to a Solana cluster without a default wallet. This allows fetching accounts or building instructions without requiring a connected wallet.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clusterApiUrl, Connection, PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport type { HelloAnchor } from \"./idlType\";\nimport idl from \"./idl.json\";\n\nconst connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// [!code word:Program]\n// [!code highlight:3]\nexport const program = new Program(idl as HelloAnchor, {\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Settings in Anchor.toml\nDESCRIPTION: Defines the wallet and cluster used for all Anchor commands. The cluster specifies the network, and the wallet path points to the keypair file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[provider]\ncluster = \"localnet\"                    # The cluster used for all commands.\nwallet = \"~/.config/solana/id.json\"     # The keypair used for all commands.\n```\n\n----------------------------------------\n\nTITLE: Deriving PDA in TypeScript for Solana Program\nDESCRIPTION: This TypeScript code snippet demonstrates how to derive a Program Derived Address (PDA) using the same seeds as specified in the Rust program. It's used to interact with the Solana program from the client side.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/cpi.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [PDA] = PublicKey.findProgramAddressSync(\n  [Buffer.from(\"pda\"), wallet.publicKey.toBuffer()],\n  program.programId,\n);\n```\n\n----------------------------------------\n\nTITLE: Instruction Chain Processing with Validation\nDESCRIPTION: Demonstrates processing multiple instructions with detailed validation checks at each step of the chain.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    mollusk_svm::{Mollusk, result::Check},\n    solana_sdk::{account::Account, pubkey::Pubkey, system_instruction},\n};\n\nlet mollusk = Mollusk::default();\n\nlet alice = Pubkey::new_unique();\nlet bob = Pubkey::new_unique();\nlet carol = Pubkey::new_unique();\nlet dave = Pubkey::new_unique();\n\nlet starting_lamports = 500_000_000;\n\nlet alice_to_bob = 100_000_000;\nlet bob_to_carol = 50_000_000;\nlet bob_to_dave = 50_000_000;\n\nmollusk.process_and_validate_instruction_chain(\n    &[\n        (\n            // 0: Alice to Bob\n            &system_instruction::transfer(&alice, &bob, alice_to_bob),\n            &[\n                Check::success(),\n                Check::account(&alice)\n                    .lamports(starting_lamports - alice_to_bob) // Alice pays\n                    .build(),\n                Check::account(&bob)\n                    .lamports(starting_lamports + alice_to_bob) // Bob receives\n                    .build(),\n                Check::account(&carol)\n                    .lamports(starting_lamports) // Unchanged\n                    .build(),\n                Check::account(&dave)\n                    .lamports(starting_lamports) // Unchanged\n                    .build(),\n            ],\n        ),\n        (\n            // 1: Bob to Carol\n            &system_instruction::transfer(&bob, &carol, bob_to_carol),\n            &[\n                Check::success(),\n                Check::account(&alice)\n                    .lamports(starting_lamports - alice_to_bob) // Unchanged\n                    .build(),\n                Check::account(&bob)\n                    .lamports(starting_lamports + alice_to_bob - bob_to_carol) // Bob pays\n                    .build(),\n                Check::account(&carol)\n                    .lamports(starting_lamports + bob_to_carol) // Carol receives\n                    .build(),\n                Check::account(&dave)\n                    .lamports(starting_lamports) // Unchanged\n                    .build(),\n            ],\n        ),\n        (\n            // 2: Bob to Dave\n            &system_instruction::transfer(&bob, &dave, bob_to_dave),\n            &[\n                Check::success(),\n                Check::account(&alice)\n                    .lamports(starting_lamports - alice_to_bob) // Unchanged\n                    .build(),\n                Check::account(&bob)\n                    .lamports(starting_lamports + alice_to_bob - bob_to_carol - bob_to_dave) // Bob pays\n                    .build(),\n                Check::account(&carol)\n                    .lamports(starting_lamports + bob_to_carol) // Unchanged\n                    .build(),\n                Check::account(&dave)\n                    .lamports(starting_lamports + bob_to_dave) // Dave receives\n                    .build(),\n            ],\n        ),\n    ],\n    &[\n        (alice, system_account_with_lamports(starting_lamports)),\n        (bob, system_account_with_lamports(starting_lamports)),\n        (carol, system_account_with_lamports(starting_lamports)),\n        (dave, system_account_with_lamports(starting_lamports)),\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining PodStateWithExtensions Struct in Rust for Token Extensions\nDESCRIPTION: This code snippet defines the PodStateWithExtensions struct, which encapsulates immutable base state data (mint or account) with possible extensions. The tlv_data field contains all extension-specific state.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/extensions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, PartialEq)]\npub struct PodStateWithExtensions<'data, S: BaseState + Pod> {\n    pub base: &'data S,\n    tlv_data: &'data [u8],\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Account Initialization with Anchor in Rust\nDESCRIPTION: Initializes an account only if it doesn't exist. Requires the init-if-needed cargo feature.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init_if_needed,\n    payer = <target_account>\n)]\n\n#[account(\n    init_if_needed,\n    payer = <target_account>,\n    space = <num_bytes>\n)]\n```\n\n----------------------------------------\n\nTITLE: Single Instruction Processing Example\nDESCRIPTION: Shows how to process a single instruction using Mollusk, including setting up program IDs, creating instructions, and handling accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse {\n    mollusk_svm::Mollusk,\n    solana_sdk::{account::Account, instruction::{AccountMeta, Instruction}, pubkey::Pubkey},\n};\n\nlet program_id = Pubkey::new_unique();\nlet key1 = Pubkey::new_unique();\nlet key2 = Pubkey::new_unique();\n\nlet instruction = Instruction::new_with_bytes(\n    program_id,\n    &[],\n    vec![\n        AccountMeta::new(key1, false),\n        AccountMeta::new_readonly(key2, false),\n    ],\n);\n\nlet accounts = vec![\n    (key1, Account::default()),\n    (key2, Account::default()),\n];\n\nlet mollusk = Mollusk::new(&program_id, \"my_program\");\n\n// Execute the instruction and get the result.\nlet result = mollusk.process_instruction(&instruction, &accounts);\n```\n\n----------------------------------------\n\nTITLE: Cargo.toml Dependencies for Anchor Client\nDESCRIPTION: The required dependencies for a Rust Anchor client application. Includes the anchor-client crate with async features enabled, anchor-lang for interacting with Anchor programs, and utility crates for error handling and async execution.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/rust.mdx#2025-04-18_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"rs\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nanchor-client = { version = \"0.31.0\", features = [\"async\"] }\nanchor-lang = \"0.31.0\"\nanyhow = \"1.0.93\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Updating Context Struct for Bump Seeds\nDESCRIPTION: This entry describes the addition of a new `bumps` argument to the `Context` struct, allowing access to bump seeds directly from the context, thus optimizing the handling of bump seed calculations in handlers.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n`Context` now has a new `bumps: BTree<String, u8>` argument, mapping account name to bump seed 'found' by the accounts context. This allows one to access bump seeds without having to pass them in from the client or recalculate them in the handler ([#1367](https://github.com/coral-xyz/anchor/pull/1367)).\n```\n\n----------------------------------------\n\nTITLE: IDL Specification for Solana Program\nDESCRIPTION: This TypeScript JSON structure provides the IDL (Interface Description Language) for the Solana program defined using the Anchor framework. It details the program's address, instructions, account structures, and metadata. This is used by clients to interact with the program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  \"address\": \"6khKp4BeJpCjBY1Eh39ybiqbfRnrn2UzWeUARjQLXYRC\",\n  \"metadata\": {\n    \"name\": \"example\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"increment\",\n      \"discriminator\": [11, 18, 104, 9, 104, 174, 59, 33],\n      \"accounts\": [\n        {\n          \"name\": \"counter\",\n          \"writable\": true\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"counter\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Counter\",\n      \"discriminator\": [255, 176, 4, 245, 188, 253, 124, 25]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Counter\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"count\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemAccount in Rust for Anchor\nDESCRIPTION: Shows how to use SystemAccount<'info> type in an Anchor program. This type validates that the account is owned by the system program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Anchor CLI via AVM (Anchor Version Manager) - Shell\nDESCRIPTION: This snippet details the commands for installing the Anchor CLI using Anchor Version Manager (AVM), along with verifying the installation and selecting a specific version.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor avm --force\n```\n\nLANGUAGE: shell\nCODE:\n```\navm --version\n```\n\nLANGUAGE: shell\nCODE:\n```\navm install latest\navm use latest\n```\n\nLANGUAGE: shell\nCODE:\n```\navm install 0.31.0\navm use 0.31.0\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Rust Test File\nDESCRIPTION: This Rust file contains a basic test for the 'initialize' instruction using the Anchor Rust client.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\n\nuse anchor_client::{\n    solana_sdk::{\n        commitment_config::CommitmentConfig, pubkey::Pubkey, signature::read_keypair_file,\n    },\n    Client, Cluster,\n};\n\n#[test]\nfn test_initialize() {\n    let program_id = \"3ynNB373Q3VAzKp7m4x238po36hjAGFXFJB4ybN2iTyg\";\n    let anchor_wallet = std::env::var(\"ANCHOR_WALLET\").unwrap();\n    let payer = read_keypair_file(&anchor_wallet).unwrap();\n\n    let client = Client::new_with_options(Cluster::Localnet, &payer, CommitmentConfig::confirmed());\n    let program_id = Pubkey::from_str(program_id).unwrap();\n    let program = client.program(program_id).unwrap();\n\n    let tx = program\n        .request()\n        .accounts(my_program::accounts::Initialize {})\n        .args(my_program::instruction::Initialize {})\n        .send()\n        .expect(\"\");\n\n    println!(\"Your transaction signature {}\", tx);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Zero Copy Account with init Constraint in Rust\nDESCRIPTION: This code demonstrates how to initialize a zero-copy account using the init constraint. It shows the account structure and the implementation of the initialize function using load_init to set initial data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(\n        init,\n        // 10240 bytes is max space to allocate with init constraint\n        space = 8 + 10232,\n        payer = payer,\n    )]\n    pub data_account: AccountLoader<'info, Data>,\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\npub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n    let account = &mut ctx.accounts.data_account.load_init()?;\n    account.data = [1; 10232];\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Account with Anchor in Rust\nDESCRIPTION: Creates and initializes an account via CPI to the system program. Requires specifying payer and space.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[account(\n    init,\n    payer = <target_account>,\n    space = <num_bytes>\n)]\n```\n\n----------------------------------------\n\nTITLE: Running a Local Validator for Solana - Shell\nDESCRIPTION: This snippet explains how to start a local validator using the Solana CLI to test and deploy programs locally.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsolana-test-validator\nsolana config set -ul\n```\n\n----------------------------------------\n\nTITLE: Program IDL Definition in JSON\nDESCRIPTION: The Interface Description Language (IDL) file that describes the program's interface, including its instructions, accounts, and types.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"8HupNBr7SBhBLcBsLhbtes3tCarBm6Bvpqp5AfVjHuj8\",\n  \"metadata\": {\n    \"name\": \"example\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"increment\",\n      \"discriminator\": [11, 18, 104, 9, 104, 174, 59, 33],\n      \"accounts\": [{\n        \"name\": \"counter\",\n        \"writable\": true\n      }],\n      \"args\": []\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"payer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"counter\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Counter\",\n      \"discriminator\": [255, 176, 4, 245, 188, 253, 124, 25]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Counter\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"count\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Types in Rust\nDESCRIPTION: This snippet illustrates the use of different account types in an Anchor program, including Account, Signer, and Program. These types help ensure that the provided accounts match the program's expectations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = signer, space = 8 + 8)]\n    pub new_account: Account<'info, NewAccount>,\n    #[account(mut)]\n    pub signer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n```\n\n----------------------------------------\n\nTITLE: Improved TypeScript Program Initialization\nDESCRIPTION: Simplifies the `Program` constructor in TypeScript by allowing easier specification of the IDL type, reducing the need for additional casting. Make sure TypeScript and Anchor's JavaScript bindings are configured.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst program = new Program<MyProgram>(idl, provider);\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency-Free Program in Rust\nDESCRIPTION: Example of using the new declare_program! macro to generate program clients from their IDL without dependencies.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ndeclare_program!(program_name);\n```\n\n----------------------------------------\n\nTITLE: Setting up USDC mint account with LiteSVM\nDESCRIPTION: This Python code snippet sets up a USDC mint account with a specified balance using LiteSVM. It constructs a `TokenAccount` object with the provided parameters, serializes it to bytes, and uses `client.set_account` to create the account within LiteSVM using the serialized data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom solders.account import Account\nfrom solders.litesvm import LiteSVM\nfrom solders.pubkey import Pubkey\nfrom solders.token import ID as TOKEN_PROGRAM_ID\nfrom solders.token.associated import get_associated_token_address\nfrom solders.token.state import TokenAccount, TokenAccountState\n\n\ndef test_infinite_usdc_mint() -> None:\n    owner = Pubkey.new_unique()\n    usdc_mint = Pubkey.from_string(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\")\n    ata = get_associated_token_address(owner, usdc_mint)\n    usdc_to_own = 1_000_000_000_000\n    token_acc = TokenAccount(\n        mint=usdc_mint,\n        owner=owner,\n        amount=usdc_to_own,\n        delegate=None,\n        state=TokenAccountState.Initialized,\n        is_native=None,\n        delegated_amount=0,\n        close_authority=None,\n    )\n    client = LiteSVM()\n    client.set_account(\n        ata,\n        Account(\n            lamports=1_000_000_000,\n            data=bytes(token_acc),\n            owner=TOKEN_PROGRAM_ID,\n            executable=False,\n        ),\n    )\n    raw_account = client.get_account(ata)\n    assert raw_account is not None\n    raw_account_data = raw_account.data\n    assert TokenAccount.from_bytes(raw_account_data).amount == usdc_to_own\n\n```\n\n----------------------------------------\n\nTITLE: Generic Struct Definition in Rust\nDESCRIPTION: This code snippet demonstrates the use of a defined type (MyStruct) as a generic argument within another struct (GenericStruct). This syntax is now supported without resulting in an error, enabling more flexible and type-safe code.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nparam: GenericStruct<MyStruct>,\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Account - TypeScript/Anchor\nDESCRIPTION: This snippet shows how to fetch data for a single account by passing the account address into the `fetch()` method of the program client. This method is essential for interacting with individual account details.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:fetch]\nconst account = await program.account.newAccount.fetch(ACCOUNT_ADDRESS);\n```\n\n----------------------------------------\n\nTITLE: Type Safe Context Bumps\nDESCRIPTION: New approach for handling bump values with type safety\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet bump = ctx.bumps.my_account;\n```\n\n----------------------------------------\n\nTITLE: Instruction Discriminator in Anchor IDL\nDESCRIPTION: This snippet showcases a representation of an instruction object in an IDL (Interface Description Language) format, including an 8-byte discriminator. The discriminator, derived from the first 8 bytes of a Sha256 hash combining 'global' with the instruction name, helps identify the specific instruction within the Anchor program. This process is handled automatically by the Anchor client.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"instructions\": [\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Build Increment Instruction in Anchor\nDESCRIPTION: Rust code to build the increment instruction via the Client module. It involves setting the necessary accounts and arguments for the program's operation. The instruction targets increasing a counter in the Solana environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n// Build increment instruction\nlet increment_ix = program\n    .request()\n    // Accounts required for increment instruction\n    .accounts(accounts::Increment {\n        counter: counter.pubkey(),\n    })\n    // Arguments for increment instruction (discriminator)\n    .args(args::Increment)\n    .instructions()?\n    .remove(0);\n```\n\n----------------------------------------\n\nTITLE: Adding Pubkeys Function to Methods Builder in TypeScript\nDESCRIPTION: This code snippet describes the addition of a `pubkeys` function to the methods builder in the TypeScript part of the Anchor framework. This function provides a convenient way to retrieve all instruction account addresses associated with a method.  This simplifies the process of managing and accessing account addresses within the Anchor framework.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Add `pubkeys` function to methods builder to get all instruction account addresses ([#1733](https://github.com/coral-xyz/anchor/pull/1733)).\"\n```\n\n----------------------------------------\n\nTITLE: Allocating Space for Account Discriminator in Rust\nDESCRIPTION: This snippet shows how to allocate space for the account discriminator when initializing an account in an Anchor program. The discriminator requires 8 bytes of space, which is included in the total space allocation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[account(init, payer = signer, space = 8 + 8)]\npub new_account: Account<'info, NewAccount>,\n```\n\n----------------------------------------\n\nTITLE: Setting up USDC mint account with LiteSVM\nDESCRIPTION: This TypeScript code snippet sets up a USDC mint account with a specified balance using LiteSVM. It creates a buffer to store token account data, encodes the account details using `AccountLayout.encode`, and then uses `svm.setAccount` to create the account in LiteSVM with the encoded data and lamports.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LiteSVM } from \"litesvm\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  getAssociatedTokenAddressSync,\n  AccountLayout,\n  ACCOUNT_SIZE,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\ntest(\"infinite usdc mint\", () => {\n  const owner = PublicKey.unique();\n  const usdcMint = new PublicKey(\n    \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  );\n  const ata = getAssociatedTokenAddressSync(usdcMint, owner, true);\n  const usdcToOwn = 1_000_000_000_000n;\n  const tokenAccData = Buffer.alloc(ACCOUNT_SIZE);\n  AccountLayout.encode(\n    {\n      mint: usdcMint,\n      owner,\n      amount: usdcToOwn,\n      delegateOption: 0,\n      delegate: PublicKey.default,\n      delegatedAmount: 0n,\n      state: 1,\n      isNativeOption: 0,\n      isNative: 0n,\n      closeAuthorityOption: 0,\n      closeAuthority: PublicKey.default,\n    },\n    tokenAccData,\n  );\n  const svm = new LiteSVM();\n  svm.setAccount(ata, {\n    lamports: 1_000_000_000,\n    data: tokenAccData,\n    owner: TOKEN_PROGRAM_ID,\n    executable: false,\n  });\n  const rawAccount = svm.getAccount(ata);\n  expect(rawAccount).not.toBeNull();\n  const rawAccountData = rawAccount?.data;\n  const decoded = AccountLayout.decode(rawAccountData);\n  expect(decoded.amount).toBe(usdcToOwn);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using pubkey! Macro in Anchor\nDESCRIPTION: Example of using the pubkey! macro to easily declare public keys in Anchor without additional dependencies.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet key = pubkey!(\"11111111111111111111111111111111\");\n```\n\n----------------------------------------\n\nTITLE: Cloning Accounts for Test Validator\nDESCRIPTION: Specifies accounts to be cloned from a source cluster to the test cluster. Automatically clones program data accounts for BPF upgradeable loader programs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[test.validator]\nurl = \"https://api.mainnet-beta.solana.com\"\n\n[[test.validator.clone]]\naddress = \"7NL2qWArf2BbEBBH1vTRZCsoNqFATTddH6h8GkVvrLpG\"\n[[test.validator.clone]]\naddress = \"2RaN5auQwMdg5efgCaVqpETBV8sacWGR8tkK4m9kjo5r\"\n[[test.validator.clone]]\naddress = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" # implicitly also clones PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT\n```\n\n----------------------------------------\n\nTITLE: Detailed IDL JSON with Account Structure and Discriminator\nDESCRIPTION: This JSON snippet shows the accounts section of an Anchor IDL file, highlighting how custom account structures are represented with their discriminators. It demonstrates how the Rust #[account] attribute translates to the IDL format.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/idl.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"BYFW1vhC1ohxwRbYoLbAWs86STa25i9sD5uEusVjTYNd\",\n  \"metadata\": {\n    \"name\": \"hello_anchor\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"new_account\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"signer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"data\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      // [!code word:discriminator]\n      // [!code word:NewAccount]\n      // [!code highlight:2]\n      \"name\": \"NewAccount\",\n      \"discriminator\": [176, 95, 4, 118, 91, 177, 125, 232]\n    }\n  ],\n  \"types\": [\n    // [!code highlight:12]\n    {\n      \"name\": \"NewAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"data\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Token Program Specification with Anchor in Rust\nDESCRIPTION: Overrides the default token program for token-related constraints.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[account(*::token_program = <target_account>)]\n```\n\n----------------------------------------\n\nTITLE: Enhanced Transaction Confirmation in TypeScript\nDESCRIPTION: Shows the enhanced confirmation process for transactions in TypeScript using optional blockhash, providing better transaction verification. Requires a compatible TypeScript setup with relevant Anchor modules.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait program.provider.sendAndConfirm(tx, signers, { blockhash: ... });\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Anchor Project - Shell\nDESCRIPTION: This snippet demonstrates how to create a new Anchor project, specifying the project name and navigating into the project directory.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nanchor init <project-name>\ncd <project-name>\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionType Enum in Rust for Token Extensions\nDESCRIPTION: This code snippet defines the ExtensionType enum, which specifies all available extensions that can be added to a token mint or token account. Each variant represents a different extension with unique functionality.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/extensions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[repr(u16)]\n#[cfg_attr(feature = \"serde-traits\", derive(Serialize, Deserialize))]\n#[cfg_attr(feature = \"serde-traits\", serde(rename_all = \"camelCase\"))]\n#[derive(Clone, Copy, Debug, PartialEq, TryFromPrimitive, IntoPrimitive)]\npub enum ExtensionType {\n    Uninitialized,\n    TransferFeeConfig,\n    TransferFeeAmount,\n    MintCloseAuthority,\n    ConfidentialTransferMint,\n    ConfidentialTransferAccount,\n    DefaultAccountState,\n    ImmutableOwner,\n    MemoTransfer,\n    NonTransferable,\n    InterestBearingConfig,\n    CpiGuard,\n    PermanentDelegate,\n    NonTransferableAccount,\n    TransferHook,\n    TransferHookAccount,\n    ConfidentialTransferFeeConfig,\n    ConfidentialTransferFeeAmount,\n    MetadataPointer,\n    TokenMetadata,\n    GroupPointer,\n    TokenGroup,\n    GroupMemberPointer,\n    TokenGroupMember,\n    ConfidentialMintBurn,\n    ScaledUiAmount,\n    Pausable,\n    PausableAccount,\n    #[cfg(test)]\n    VariableLenMintTest = u16::MAX - 2,\n    #[cfg(test)]\n    AccountPaddingTest,\n    #[cfg(test)]\n    MintPaddingTest,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Expressions as Address Constraint\nDESCRIPTION: Example of using field expressions as an address constraint, which no longer causes compile errors when generating the IDL in Anchor 0.30.1.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(address = my_account.authority)]\n    pub authority: UncheckedAccount<'info>,\n    pub my_account: Account<'info, MyAccount>,\n}\n\n#[account]\npub struct MyAccount {\n    authority: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying AnchorProvider Initialization in TypeScript\nDESCRIPTION: Illustrates the change in AnchorProvider initialization where the opts parameter is now optional, simplifying the constructor call.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- new AnchorProvider(connection, wallet, {});\n+ new AnchorProvider(connection, wallet);\n```\n\n----------------------------------------\n\nTITLE: Import Generated Modules in Rust\nDESCRIPTION: This Rust snippet illustrates how to import generated modules for program account types, accounts needed for program instructions, and instruction arguments. These modules support constructing instructions to interact with the program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse example::{\n  accounts::Counter,  // Program Account types\n  client::accounts,   // Accounts for program instructions\n  client::args,       // Arguments for program instructions\n};\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Bump Calculation for PDA in Anchor\nDESCRIPTION: Example of using the bump constraint without a specific value, which causes Anchor to automatically calculate the bump each time the instruction is invoked.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(\n        seeds = [b\"hello_world\"],\n        // [!code highlight]\n        bump,\n    )]\n    pub pda_account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Test File in TypeScript\nDESCRIPTION: This TypeScript file contains a basic test for the 'initialize' instruction of the default Anchor program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { MyProject } from \"../target/types/my_project\";\n\ndescribe(\"my-project\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.MyProject as Program<MyProject>;\n\n  it(\"Is initialized!\", async () => {\n    // Add your test here.\n    const tx = await program.methods.initialize().rpc();\n    console.log(\"Your transaction signature\", tx);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Context Bump Seeds Management\nDESCRIPTION: New Context structure with built-in bump seeds tracking for PDA derivation\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n// New Context structure\nContext<'_, '_, '_> {\n    bumps: BTree<String, u8>\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature-Based Instruction Execution in Rust\nDESCRIPTION: Illustrates the use of the `cfg` attribute to conditionally compile program instructions based on enabled features, enhancing modularity and configurability in Rust programs. Requires Rust's cfg attribute support and relevant context setup in the program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\n#[program]\nmod my_program {\n    #[cfg(feature = \"my-feature\")]\n    pub fn my_feature(ctx: Context<MyFeature>) -> Result<()> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Account Resolution in Anchor TypeScript\nDESCRIPTION: Demonstrates the change in account specification for the Anchor TypeScript library. The new approach simplifies account resolution by removing the need to manually specify resolvable accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- await program.methods\n-   .init()\n-   .accounts({\n-     pda: ...,\n-     signer: ...,\n-     systemProgram: ...,\n-   })\n-   .rpc();\n+ await program.methods.init().rpc();\n```\n\n----------------------------------------\n\nTITLE: Solana CLI Config - Shell\nDESCRIPTION: This snippet shows how to retrieve and set the current Solana CLI configuration, including the RPC URL and Keypair Path.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsolana config get\n```\n\nLANGUAGE: shell\nCODE:\n```\nsolana config set --url mainnet-beta\nsolana config set --url devnet\nsolana config set --url localhost\nsolana config set --url testnet\n```\n\nLANGUAGE: shell\nCODE:\n```\nsolana config set -um\nsolana config set -ud\nsolana config set -ul\nsolana config set -ut\n```\n\n----------------------------------------\n\nTITLE: Utilize declare_program Macro in Rust\nDESCRIPTION: This Rust code demonstrates the use of the `declare_program!()` macro to identify the program's IDL file at runtime. It simplifies the process of integrating the program by using the associated JSON file to prepare program interactions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/declare-program.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ndeclare_program!(example);  // Looks for /idls/example.json\n```\n\n----------------------------------------\n\nTITLE: Basic Instruction Processing with Mollusk\nDESCRIPTION: Demonstrates the basic usage of Mollusk's instruction processing functionality with a simple validation example.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmollusk.process_and_validate_instruction(\n    &instruction,   // <-- Instruction to test\n    &accounts,      // <-- Account states\n    &checks,        // <-- Checks to run on the instruction result\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying CpiAccount::reload in Rust\nDESCRIPTION: The `CpiAccount::reload` function in Rust is modified to directly mutate the existing struct, rather than returning a new one. This change affects how cross-program invocations update account data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n- lang: `CpiAccount::reload` mutates the existing struct instead of returning a\n  new one ([#526](https://github.com/coral-xyz/anchor/pull/526)).\n```\n\n----------------------------------------\n\nTITLE: Path-Based Program Accounts in Rust\nDESCRIPTION: Illustrates handling full paths in program account structures, fixing past limitations and allowing direct use in Rust programs. Requires proper struct and path definitions in the Rust environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Accounts)]\npub struct FullPath<'info> {\n    pub external_program: Program<'info, external::program::External>,\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Initialization with Two Arguments - Rust\nDESCRIPTION: This example shows the valid usage of initializing a module with two arguments. It ensures that both input_one and input_two are declared within the #[instruction(..)] attribute, which corresponds with the function signature. This approach is used to facilitate resource allocation and validation in a Solana Anchor program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>, input_one: String, input_two: String) -> Result<()> {\n        // --snip--\n    }\n}\n\n#[derive(Accounts)]\n#[instruction(input_one: String, input_two: String)]\npub struct Initialize<'info> {\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Type Mapping in TypeScript\nDESCRIPTION: This snippet provides improvements in type mapping for account fields in TypeScript, now supporting additional types such as `Option<T>` and `Vec<String>`, allowing for more flexible account representations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nImprove type mapping of Account fields into Typescript with additional support for `Option<T>` and `Vec<String>` types ([#1393](https://github.com/coral-xyz/anchor/pull/1393)).\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor Configuration for Devnet in TOML\nDESCRIPTION: This configuration in Anchor.toml specifies the Devnet cluster for deployment and testing.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[provider]\ncluster = \"Devnet\"\nwallet = \"~/.config/solana/id.json\"\n```\n\n----------------------------------------\n\nTITLE: Providing Accounts to an Instruction\nDESCRIPTION: Shows how to specify the accounts required by an instruction. Accounts are passed as an object where keys correspond to the account names in the program and values are the public keys of those accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:accounts]\nawait program.methods\n  .instructionName(instructionData)\n  // [!code highlight]\n  .accounts({})\n  .signers([])\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Program Account Parsing in Rust\nDESCRIPTION: Shows the use of `declare_program!` to facilitate easier parsing of program accounts, promoting robust program integration in Rust. Dependencies include the `declare_program!` macro and a Rust-based Anchor environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\ndeclare_program!(my_program);\n```\n\n----------------------------------------\n\nTITLE: Rust Installation\nDESCRIPTION: Commands to install Rust programming language and configure the environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n```\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.cargo/env\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrustc --version\n```\n\n----------------------------------------\n\nTITLE: Removing Program ID Parameter in Anchor TypeScript\nDESCRIPTION: Shows the removal of the programId parameter when initializing a new Program instance. The program ID is now expected to be stored in the IDL's address field.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- new Program(idl, programId);\n+ new Program(idl);\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM as Package Manager in Anchor.toml\nDESCRIPTION: Configuration in Anchor.toml to set NPM as the JavaScript package manager instead of the default Yarn.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\npackage_manager = \"npm\"\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Parameter to Spl.token Factory Method in TypeScript\nDESCRIPTION: This code snippet refers to the addition of a `provider` parameter to the `Spl.token` factory method within the TypeScript part of the Anchor framework. This modification allows developers to explicitly specify the provider instance to be used when creating token-related objects, enhancing control and flexibility in managing Solana program interactions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Add provider parameter to `Spl.token` factory method ([#1597](https://github.com/coral-xyz/anchor/pull/1597)).\"\n```\n\n----------------------------------------\n\nTITLE: PDA Seeds Representation in Anchor IDL\nDESCRIPTION: Example of how PDA seeds are represented in the Anchor IDL file. Static seeds are converted to byte values, and dynamic seeds are included as references to accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"BZLiJ62bzRryYp9mRobz47uA66WDgtfTXhhgM25tJyx5\",\n  \"metadata\": {\n    \"name\": \"hello_anchor\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"test_instruction\",\n      \"discriminator\": [33, 223, 61, 208, 32, 193, 201, 79],\n      \"accounts\": [\n        {\n          \"name\": \"signer\",\n          \"signer\": true\n        },\n        {\n          \"name\": \"pda_account\",\n          \"pda\": {\n            // [!code word:seeds]\n            \"seeds\": [\n              {\n                // [!code highlight:2]\n                \"kind\": \"const\",\n                \"value\": [104, 101, 108, 108, 111, 95, 119, 111, 114, 108, 100]\n              },\n              {\n                // [!code highlight:2]\n                \"kind\": \"account\",\n                \"path\": \"signer\"\n              }\n            ]\n          }\n        }\n      ],\n      \"args\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Anchor Version\nDESCRIPTION: Installs a specific version of the anchor-cli using AVM. The version can be specified using semver, 'latest', or a commit hash.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\navm install <VERSION_OR_COMMIT>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining AnchorError Struct in Rust\nDESCRIPTION: Illustrates the structure of the AnchorError struct, which contains detailed information about an error in an Anchor program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug)]\npub struct AnchorError {\n    pub error_name: String,\n    pub error_code_number: u32,\n    pub error_msg: String,\n    pub error_origin: Option<ErrorOrigin>,\n    pub compared_values: Option<ComparedValues>,\n}\n```\n\n----------------------------------------\n\nTITLE: Support for Unnamed and Unit Structs with InitSpace in Rust\nDESCRIPTION: This example adds support for unnamed and unit structs with the `InitSpace` derive macro, allowing flexible data structures in Rust programs. Ensure you have the necessary macro attributes and derive processes in place.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(InitSpace)]\npub struct Unnamed(pub u64, #[max_len(64)] pub Vec<u8>);\n\n#[derive(InitSpace)]\npub struct Unit;\n```\n\n----------------------------------------\n\nTITLE: Testing Anchor Program in Shell\nDESCRIPTION: This command runs the tests for the Anchor program, automatically starting a local Solana validator, deploying the program, and running tests.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nanchor test\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor's Result Type Alias in Rust\nDESCRIPTION: Shows the type alias for Anchor's Result, which wraps the standard Rust Result with Anchor's custom Error type.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub type Result<T> = std::result::Result<T, error::Error>;\n```\n\n----------------------------------------\n\nTITLE: Using has_one Constraint Alternative\nDESCRIPTION: Example of using the has_one constraint as an alternative to address constraint for better client-side account resolution.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    pub authority: UncheckedAccount<'info>,\n    #[account(has_one = authority)]\n    pub my_account: Account<'info, MyAccount>,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Zero Copy Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies for zero-copy deserialization in the Cargo.toml file. It includes the bytemuck crate with the min_const_generics feature and the anchor-lang dependency.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/zero-copy.mdx#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nbytemuck = { version = \"1.20.0\", features = [\"min_const_generics\"] }\nanchor-lang = \"0.31.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing AVM from GitHub Repository\nDESCRIPTION: Command to install the latest version of Anchor Version Manager (AVM) directly from GitHub repository, which enables binary installation of Anchor CLI without compiling from source.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor avm --force\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor's Error Enum in Rust\nDESCRIPTION: Illustrates the structure of Anchor's Error enum, which can be either an AnchorError or a ProgramError.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, PartialEq, Eq)]\npub enum Error {\n    AnchorError(Box<AnchorError>),\n    ProgramError(Box<ProgramErrorWithOrigin>),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDA with Single Static Seed in Anchor\nDESCRIPTION: Example of implementing a PDA account with a single static seed ('hello_world'). The static seed is provided as a byte array.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/pda.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    #[account(\n        // [!code word:b\"hello_world\"]\n        // [!code highlight]\n        seeds = [b\"hello_world\"],\n        bump,\n    )]\n    pub pda_account: SystemAccount<'info>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vesting Schedule Parameters in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up parameters for creating a vesting schedule in JavaScript. It includes setting the start and end timestamps, period count, deposit amount, and realizer.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/tests/lockup/docs/lockups.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst startTimestamp = Date.now()/1000;\nconst endTimestamp = Date.now()/1000 + 60*60*24*365;\nconst periodCount = 2;\nconst depositAmount = 100 * 10**6; // 6 decimal places.\nconst realizer = null; // No realizer in this example.\n```\n\n----------------------------------------\n\nTITLE: Defining ProgramErrorWithOrigin Struct in Rust\nDESCRIPTION: Shows the structure of the ProgramErrorWithOrigin struct, which wraps a standard Solana ProgramError with additional context.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug)]\npub struct ProgramErrorWithOrigin {\n    pub program_error: ProgramError,\n    pub error_origin: Option<ErrorOrigin>,\n    pub compared_values: Option<ComparedValues>,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Commands in Anchor.toml Scripts\nDESCRIPTION: Example of defining a script with multiple commands in the Anchor.toml file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[scripts]\ntest-all = \"cargo test && yarn run ts-mocha tests/**/*.ts\"\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Account Types in Rust\nDESCRIPTION: This code snippet outlines the removal of deprecated account types `CpiAccount`, `Loader`, and `ProgramAccount` from the Anchor framework. It is part of the effort to streamline account management in the framework. The changes are tied to version control and reflect improvements in the overall design.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n- lang: Remove deprecated account types: `CpiAccount`, `Loader` and\n  `ProgramAccount` ([#2375](https://github.com/coral-xyz/anchor/pull/2375)).\n```\n\n----------------------------------------\n\nTITLE: List Installed Anchor Versions\nDESCRIPTION: Lists the available versions of the anchor-cli installed via AVM.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\navm list\n```\n```\n\n----------------------------------------\n\nTITLE: Decoding CPI Events in TypeScript Client\nDESCRIPTION: Retrieve and decode event data from a transaction's inner instructions using Anchor's utility methods\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/events.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { EventCpi } from \"../target/types/event_cpi\";\n\ndescribe(\"event-cpi\", () => {\n  const program = anchor.workspace.EventCpi as Program<EventCpi>;\n\n  it(\"Emits custom event\", async () => {\n    const message = \"Hello, Solana!\";\n    const transactionSignature = await program.methods.emitEvent(message).rpc();\n\n    const transactionData = await program.provider.connection.getTransaction(\n      transactionSignature,\n      { commitment: \"confirmed\" }\n    );\n\n    const eventIx = transactionData.meta.innerInstructions[0].instructions[0];\n    const rawData = anchor.utils.bytes.bs58.decode(eventIx.data);\n    const base64Data = anchor.utils.bytes.base64.encode(rawData.subarray(8));\n    const event = program.coder.events.decode(base64Data);\n    console.log(event);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Validator Settings\nDESCRIPTION: Specifies options for 'solana-test-validator' used in commands like 'anchor test'. Includes settings for RPC, ledger, gossip, and faucet configuration.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[test.validator]\nurl = \"https://api.mainnet-beta.solana.com\"     # This is the url of the cluster that accounts are cloned from (See `test.validator.clone`).\nwarp_slot = 1337                                # Warp the ledger to `warp_slot` after starting the validator.\nslots_per_epoch = 5                             # Override the number of slots in an epoch.\nrpc_port = 1337                                 # Set JSON RPC on this port, and the next port for the RPC websocket.\nlimit_ledger_size = 1337                        # Keep this amount of shreds in root slots.\nledger = \"test-ledger\"                          # Set ledger location.\ngossip_port = 1337                              # Gossip port number for the validator.\ngossip_host = \"127.0.0.1\"                       # Gossip DNS name or IP address for the validator to advertise in gossip.\nfaucet_sol = 1337                               # Give the faucet address this much SOL in genesis.\nfaucet_port = 1337                              # Enable the faucet on this port.\ndynamic_port_range = \"1337 - 13337\"             # Range to use for dynamically assigned ports.\nbind_address = \"0.0.0.0\"                        # IP address to bind the validator ports.\n```\n\n----------------------------------------\n\nTITLE: Using Interface Attribute for Transfer Hooks in Rust\nDESCRIPTION: Example of using the new #[interface] attribute to override instruction discriminators for transfer hooks.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nmod my_hook_program {\n    #[interface(spl_transfer_hook_interface::initialize_extra_account_meta_list)]\n    pub fn initialize(ctx: Context<Initialize>, metas: Vec<AnchorExtraAccountMeta>) -> Result<()> {\n        /* ... */\n    }\n\n    #[interface(spl_transfer_hook_interface::execute)]\n    pub fn execute(ctx: Context<Execute>, amount: u64) -> Result<()> {\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Genesis Programs for Testing\nDESCRIPTION: Specifies programs to be loaded at genesis when starting 'solana-test-validator' for testing. Allows setting program address, binary path, and upgrade capability.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[test.genesis]]\naddress = \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\nprogram = \"dex.so\"\n\n[[test.genesis]]\naddress = \"22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD\"\nprogram = \"swap.so\"\nupgradeable = true\n```\n\n----------------------------------------\n\nTITLE: New Utility for Fetching Latest Verified Build\nDESCRIPTION: This snippet presents a registry utility added for retrieving the latest verified build of the program, facilitating easier management and updates of builds.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nAdd registry utility for fetching the latest verified build ([#1371](https://github.com/coral-xyz/anchor/pull/1371)).\n```\n\n----------------------------------------\n\nTITLE: Enabling Upgradeable Programs for Testing\nDESCRIPTION: Deploys the program-to-test using '--upgradeable-program', allowing testing of upgrade authority-restricted instructions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[test]\nupgradeable = true\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy IDLs with Anchor CLI\nDESCRIPTION: Command to convert legacy IDL files (pre-Anchor v0.30) to the new IDL format using the anchor idl convert command.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nanchor idl convert <PATH_TO_IDL_JSON>\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling in Anchor\nDESCRIPTION: This snippet outlines changes in error handling, specifically the introduction of the `error!` and `err!` macros along with modifications to the `ProgramResult` type for improved error reporting. It emphasizes new error handling conventions to ensure accurate error tracing.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nThis change will break most programs. Do the following to upgrade:\n  _ change all `ProgramResult`'s to `Result<()>`\n  _ change `#[error]` to `#[error_code]`\n  _ change all `Err(MyError::SomeError.into())` to `Err(error!(MyError::SomeError))` and all `Err(ProgramError::SomeProgramError)` to `Err(ProgramError::SomeProgramError.into())` or `Err(Error::from(ProgramError::SomeProgramError).with_source(source!()))` to provide file and line source of the error (`with_source` is most useful with `ProgramError`s. `error!` already adds source information for custom and anchor internal errors).\n  _ change all `solana_program::program::invoke()` to `solana_program::program::invoke().map_err(Into::into)` and `solana_program::program::invoke_signed()` to `solana_program::program::invoke_signed().map_err(Into::into)`\n```\n\n----------------------------------------\n\nTITLE: Starting Local Solana Validator in Shell\nDESCRIPTION: This command starts a local Solana validator for testing and development purposes.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsolana-test-validator\n```\n\n----------------------------------------\n\nTITLE: Error Propagation from Integer Conversion\nDESCRIPTION: Example of propagating integer conversion errors with the ? operator, which is now supported in Anchor 0.30.1.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet n: i32 = u32::MAX.try_into()?;\n```\n\n----------------------------------------\n\nTITLE: Executable Account Validation with Anchor in Rust\nDESCRIPTION: Checks if the account is executable (i.e., a program account).\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[account(executable)]\n```\n\n----------------------------------------\n\nTITLE: Fixing Spl-Token Coder Account Parsing in TypeScript\nDESCRIPTION: This code snippet describes a fix related to `spl-token` coder account parsing within the TypeScript part of the Anchor framework. The fix ensures that spl-token accounts are correctly parsed by the coder.  This resolves potential issues during account decoding and interaction with SPL tokens.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Fix `spl-token` coder account parsing ([#1604](https://github.com/coral-xyz/anchor/pull/1604)).\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Anchor Programs\nDESCRIPTION: Illustrates how to deploy all programs in an Anchor workspace to the configured cluster. This command generates a new program address each time it's run.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nanchor deploy\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript IDL Types\nDESCRIPTION: Command to create TypeScript IDL types with camelCase fields from an existing IDL file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nanchor idl type <PATH_TO_IDL_JSON>\n```\n\n----------------------------------------\n\nTITLE: Adding View Functions in TypeScript\nDESCRIPTION: This code snippet describes the addition of \"view functions\" in the TypeScript part of the Anchor framework. View functions allow read-only access to program state without requiring a transaction, providing a more efficient way to retrieve data from Solana programs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Add view functions ([#1695](https://github.com/coral-xyz/anchor/pull/1695)).\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Validator in Anchor.toml\nDESCRIPTION: Example of deactivating test-validator features in the Anchor.toml configuration file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[test.validator]\ndeactivate_feature = [\"GDH5TVdbTPUpRnXaRyQqiKUa7uZAbZ28Q2N9bhbKoMLm\", \"zkiTNuzBKxrCLMKehzuQeKZyLtX2yvFcEKMML8nExU8\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Fees in Anchor CLI\nDESCRIPTION: Example of using the new --priority-fee argument with Anchor CLI commands.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nanchor idl erase-authority --program-id <PROGRAM_ID> --priority-fee 9000\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Command to Request Devnet SOL in Solana Playground\nDESCRIPTION: Shell command to request an airdrop of 5 SOL to your wallet address on the Solana devnet. This provides the necessary funds for creating accounts and paying transaction fees during development.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsolana airdrop 5\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor CLI Version via avm in Rust\nDESCRIPTION: This code snippet introduces a new command, `avm update`, to the Anchor Version Manager (avm). This command simplifies the process of updating the Anchor CLI (Command Line Interface) to the latest version, ensuring developers have access to the newest features and bug fixes.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n\"- avm: New `avm update` command to update the Anchor CLI to the latest version ([#1670](https://github.com/coral-xyz/anchor/pull/1670)).\"\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Tests\nDESCRIPTION: Demonstrates how to run integration tests for Anchor programs. It includes options for using a local validator and mentions the location of program logs during test execution.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nanchor test\n```\n\nLANGUAGE: shell\nCODE:\n```\nanchor test --skip-local-validator\n```\n\n----------------------------------------\n\nTITLE: Using err! Macro for Custom Error Handling in Rust\nDESCRIPTION: Shows how to use the err! macro to throw a custom error in an Anchor program instruction handler.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\nmod hello_anchor {\n    use super::*;\n    pub fn set_data(ctx: Context<SetData>, data: MyAccount) - Result<()> {\n        if data.data = 100 {\n            return err!(MyError::DataTooLarge);\n        }\n        ctx.accounts.my_account.set_inner(data);\n        Ok(())\n    }\n}\n\n\n#[error_code]\npub enum MyError {\n    #[msg(\"MyAccount may only hold data below 100\")]\n    DataTooLarge\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn - Shell\nDESCRIPTION: This snippet describes how to install Yarn globally using npm and how to verify the installation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global yarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn --version\n```\n\n----------------------------------------\n\nTITLE: Changing EventParser#parseLogs Implementation in TypeScript\nDESCRIPTION: This code snippet refers to a breaking change that modifies the implementation of `EventParser#parseLogs` in TypeScript.  It changes the implementation from a callback function to a generator function. This change provides benefits such as improved control flow and the ability to handle large log sets more efficiently.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Change `EventParser#parseLogs` implementation to be a generator instead of callback function ([#2018](https://github.com/coral-xyz/anchor/pull/2018)).\"\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Methods Builder API\nDESCRIPTION: Shows the basic structure of the methods builder API for creating instruction calls from a program's IDL. This is used to build and execute instructions defined in the program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/clients/typescript.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:methods]\n// [!code highlight]\nawait program.methods\n  .instructionName(instructionData)\n  .accounts({})\n  .signers([])\n  .rpc();\n```\n\n----------------------------------------\n\nTITLE: Solana CLI Installation\nDESCRIPTION: Commands to install and verify Solana CLI tools installation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.anza.xyz/stable/install)\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"$HOME/.local/share/solana/install/active_release/bin:$PATH\"\n```\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=\"$HOME/.local/share/solana/install/active_release/bin:$PATH\"' >> ~/.zshrc\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.zshrc\n```\n\nLANGUAGE: shell\nCODE:\n```\nsolana --version\n```\n\nLANGUAGE: shell\nCODE:\n```\nagave-install update\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Version in Anchor.toml\nDESCRIPTION: Configuration in Anchor.toml to specify Solana version 2.1.0, which automatically handles the Agave transition if version is greater than 1.18.19.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\nsolana_version = \"2.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Exporting LangErrorCode and LangErrorMessage in TypeScript\nDESCRIPTION: This code snippet refers to exporting `LangErrorCode` and `LangErrorMessage` from the `error.ts` file within the TypeScript part of the Anchor framework. Exporting these allows developers to easily access and utilize these error-related components in their applications, enhancing error handling and debugging capabilities.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Export `LangErrorCode` and `LangErrorMessage` from `error.ts` ([#1756](https://github.com/coral-xyz/anchor/pull/1756)).\"\n```\n\n----------------------------------------\n\nTITLE: Enabling init_if_needed Feature in Cargo.toml - Toml\nDESCRIPTION: This Toml snippet is used to enable the `init-if-needed` feature in the Cargo.toml file. This feature allows token accounts to be created only if they do not already exist.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/basics/create-token-account.mdx#2025-04-18_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nanchor-lang = { version = \"0.31.0\", features = [\"init-if-needed\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Anchor Project with Mollusk Test Template\nDESCRIPTION: Command to initialize a new Anchor workspace using the Mollusk test template, which provides an alternative testing framework.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nanchor init my-program --test-template mollusk\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Signature to EventCallback in TypeScript\nDESCRIPTION: This code snippet refers to the addition of a transaction signature parameter to the `EventCallback` function in the TypeScript part of the Anchor framework.  This enhances event handling by providing access to the transaction signature associated with the event.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Add transaction signature to `EventCallback` parameters ([#1851](https://github.com/coral-xyz/anchor/pull/1851)).\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Strict Typing Loss on Builder Functions in TypeScript\nDESCRIPTION: This code snippet refers to a fix in the TypeScript part of the Anchor framework.  The fix addresses the loss of strict typing when using the `methods` namespace on builder functions. This ensures that the TypeScript compiler can accurately enforce type constraints, improving code reliability and preventing potential runtime errors.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Fix the loss of strict typing using the `methods` namespace on builder functions ([#1539](https://github.com/coral-xyz/anchor/pull/1539)).\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Client Feature in Anchor-Client\nDESCRIPTION: This code snippet shows how to enable the 'mock' feature for the Anchor client to utilize a mock RPC client for testing purposes. The 'mock' feature is specified in the features list within the TOML configuration. The 'anchor-client' version is set to '0.31.0'.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nanchor-client = { version = \"0.31.0\", features = [\"mock\"] }\n```\n\n----------------------------------------\n\nTITLE: Generating a New Solana Keypair - Shell\nDESCRIPTION: This snippet details the command to generate a new keypair for the Solana wallet required for transactions and deployments.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsolana-keygen new\n```\n\nLANGUAGE: shell\nCODE:\n```\nsolana address\n```\n\n----------------------------------------\n\nTITLE: CLI Account Flag Exposures\nDESCRIPTION: This entry details the exposure of the `solana-test-validator --account` flag within the `Anchor.toml`, allowing for more customizable test setups in the CLI.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nExpose the solana-test-validator --account flag in Anchor.toml via [[test.validator.account]] ([#1366](https://github.com/coral-xyz/anchor/pull/1366)).\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Tests with Existing Validator in Shell\nDESCRIPTION: This command runs Anchor tests against an existing local Solana validator, skipping the automatic validator startup.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nanchor test --skip-local-validator\n```\n\n----------------------------------------\n\nTITLE: Anchor CLI Version Management Tool\nDESCRIPTION: This snippet introduces `avm`, a new tool for managing anchor-cli versions, thus streamlining the version control process for CLI users.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nAdd avm, a tool for managing anchor-cli versions ([#1385](https://github.com/coral-xyz/anchor/pull/1385)).\n```\n\n----------------------------------------\n\nTITLE: Making Provider an Interface and Adding AnchorProvider Class in TypeScript\nDESCRIPTION: This code snippet highlights a breaking change in the TypeScript part of the Anchor framework. The `Provider` type is now defined as an interface, and an `AnchorProvider` class is added as its implementation.  This change likely provides a more flexible and extensible architecture for managing provider configurations within Anchor applications.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Make `Provider` an interface and adjust its signatures and add `AnchorProvider` implementor class ([#1707](https://github.com/coral-xyz/anchor/pull/1707)).\"\n```\n\n----------------------------------------\n\nTITLE: Adding `transaction` Functions to RequestBuilder in TypeScript\nDESCRIPTION: This addition of transaction functions to the `RequestBuilder` streamlines the process of building requests within the Anchor framework. It is essential for developers wanting to interact with Solana's programmable transactions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n- client: Add `transaction` functions to RequestBuilder\n  ([#1958](https://github.com/coral-xyz/anchor/pull/1958)).\n```\n\n----------------------------------------\n\nTITLE: Deploying Anchor Program in Shell\nDESCRIPTION: This command deploys the Anchor program to the cluster specified in Anchor.toml.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nanchor deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor CLI to Version 0.31.0\nDESCRIPTION: Command to update Anchor CLI to version 0.31.0 using AVM, the Anchor Version Manager.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\navm install 0.31.0\n```\n\n----------------------------------------\n\nTITLE: Disallowing Manual Setting of Program Public Keys in TypeScript\nDESCRIPTION: This code snippet specifies that manual setting of globally resolvable program public keys in `methods#accounts()` is no longer allowed in the TypeScript part of the Anchor framework. This enforces a more controlled and reliable method for managing program public keys, reducing the risk of errors and inconsistencies.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: No longer allow manual setting of globally resolvable program public keys in `methods#accounts()`. ([#1548][https://github.com/coral-xyz/anchor/pull/1548])\"\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Configuration in TOML\nDESCRIPTION: This is the default configuration in Anchor.toml, specifying the localnet cluster and other project settings.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\n\n[features]\nresolution = true\nskip-lint = false\n\n[programs.localnet]\nmy_program = \"3ynNB373Q3VAzKp7m4x238po36hjAGFXFJB4ybN2iTyg\"\n\n[registry]\nurl = \"https://api.apr.dev\"\n\n[provider]\ncluster = \"Localnet\"\nwallet = \"~/.config/solana/id.json\"\n\n[scripts]\ntest = \"yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts\"\n```\n\n----------------------------------------\n\nTITLE: Updating Solana Tools\nDESCRIPTION: Command to update Solana tools to the recommended version 1.18.8.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsolana-install init 1.18.8\n```\n\n----------------------------------------\n\nTITLE: Fixing Type Declaration in TypeScript\nDESCRIPTION: This snippet addresses a fix in the type declaration of the `Wallet` / `NodeWallet` class in TypeScript, enhancing type safety and compliance within the TypeScript ecosystem.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nFix the root type declaration of the `Wallet` / `NodeWallet` class ([#1363](https://github.com/coral-xyz/anchor/pull/1363)).\n```\n\n----------------------------------------\n\nTITLE: New SPL Metadata Functions in TypeScript\nDESCRIPTION: The added `create_metadata_accounts_v3` and `set_collection_size` wrappers enhance the metadata handling capabilities for SPL tokens. These functions are critical for developers focusing on token standards and metadata management.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n- spl: Add `create_metadata_accounts_v3` and `set_collection_size` wrappers\n  ([#2119](https://github.com/coral-xyz/anchor/pull/2119)).\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts for Anchor Commands\nDESCRIPTION: Specifies scripts that can be run with 'anchor run <script>'. The 'test' script is particularly important as it's executed by 'anchor test'.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[scripts]\ntest = \"yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts\"\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor Configuration for Mainnet in TOML\nDESCRIPTION: This configuration in Anchor.toml specifies the Mainnet cluster for deployment and testing.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[provider]\ncluster = \"Mainnet\"\nwallet = \"~/.config/solana/id.json\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling Refactoring in Anchor Lang\nDESCRIPTION: Introduction of new error handling macros and Result type in Anchor Lang, requiring significant code migration\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n// Old code\nreturn Err(MyError::SomeError.into());\n\n// New code\nreturn Err(error!(MyError::SomeError));\n```\n\n----------------------------------------\n\nTITLE: Installing Agave/Solana 2.1.0 Toolchain\nDESCRIPTION: Installation command for Solana 2.1.0 tools, which have been renamed to Agave as part of the Agave transition.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.anza.xyz/v2.1.0/install)\"\n```\n\n----------------------------------------\n\nTITLE: Adding IDL Conversion Feature to Cargo.toml\nDESCRIPTION: Dependency configuration to add the IDL conversion feature to a project, enabling conversion of legacy IDLs to the new format.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nanchor-lang-idl = { version = \"0.1.1\", features = [\"convert\"] }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Logging Update\nDESCRIPTION: This snippet details a change in the TypeScript error logging within the event parser, which now suppresses logging when a program error is encountered, reducing unnecessary noise in logs.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nRemove error logging in the event parser when log websocket encounters a program error ([#1313](https://github.com/coral-xyz/anchor/pull/1313)).\n```\n\n----------------------------------------\n\nTITLE: Creating New Anchor Project in Shell\nDESCRIPTION: This command initializes a new Anchor project named 'my-program', creating a directory with default program and test files.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nanchor init my-program\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Members in Anchor.toml\nDESCRIPTION: Example of using wildcard patterns to specify workspace members in the Anchor.toml file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"programs/*\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying Anchor CLI Installation - Shell\nDESCRIPTION: This snippet checks whether the Anchor CLI has been installed successfully by displaying the version.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nanchor --version\n```\n\n----------------------------------------\n\nTITLE: Lamport Transfer Utilities\nDESCRIPTION: Improved methods for handling lamport transfers between accounts\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nctx.accounts.from.sub_lamports(amount)?;\nctx.accounts.to.add_lamports(amount)?;\n\nlet lamports = ctx.accounts.my_account.get_lamports();\n```\n\n----------------------------------------\n\nTITLE: Building Anchor Project with Feature Flags\nDESCRIPTION: Command to build an Anchor project with specific Cargo feature flags enabled, which are now passed to the underlying IDL build command.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nanchor build -- --features my-feature\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Rust and TypeScript for Anchor\nDESCRIPTION: Demonstrates how a simple struct with a single value is defined in Rust and its corresponding TypeScript representation in Anchor. The example shows a struct 'MyStruct' with a 'val' field of type u16 in Rust, which becomes a TypeScript type with a 'val' property of type number.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/type-conversion.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Rust\nstruct MyStruct {\n    val: u16,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript\ntype MyStruct = {\n  val: number;\n};\n\n// Example\nconst instance = { val: 99 };\n```\n\n----------------------------------------\n\nTITLE: Configuring IDL Resolution Feature\nDESCRIPTION: Enables or disables account resolution support in the IDL. By default, this feature is enabled.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nresolution = true\n```\n\n----------------------------------------\n\nTITLE: Enhancing Error Messaging on Required Program Checks\nDESCRIPTION: This entry explains an improvement in error messages for cases where required programs are missing, enhancing clarity for developers debugging related issues.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nImproved error msgs when required programs are missing when using the `init` constraint([#1257](https://github.com/coral-xyz/anchor/pull/1257))\n```\n\n----------------------------------------\n\nTITLE: Toolchain Configuration in Anchor.toml\nDESCRIPTION: Configuration for specifying Anchor CLI and Solana versions in the workspace\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\nanchor_version = \"0.29.0\" # `anchor-cli` version to use\nsolana_version = \"1.17.0\" # Solana version to use\n```\n\n----------------------------------------\n\nTITLE: Building Anchor Program in Shell\nDESCRIPTION: This command builds the Anchor program, generating the compiled program at '/target/deploy/my_project.so'.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nanchor build\n```\n\n----------------------------------------\n\nTITLE: Displaying Anchor CLI Usage and Subcommands\nDESCRIPTION: Shows the main usage syntax for the Anchor CLI, including available flags and subcommands. This provides an overview of the CLI's capabilities for building and managing Anchor workspaces.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/cli.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nanchor-cli\n\nUSAGE:\n    anchor <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    account    Fetch and deserialize an account using the IDL provided\n    build      Builds the workspace\n    cluster    Cluster commands\n    deploy     Deploys each program in the workspace\n    expand     Expands the macros of a program or the workspace\n    help       Prints this message or the help of the given subcommand(s)\n    idl        Commands for interacting with interface definitions\n    init       Initializes a workspace\n    keys       Program keypair commands\n    migrate    Runs the deploy migration script\n    new        Creates a new program\n    shell      Starts a node shell with an Anchor client setup according to the local config\n    test       Runs integration tests against a localnetwork\n    upgrade    Upgrades a single program. The configured wallet must be the upgrade authority\n    verify     Verifies the on-chain bytecode matches the locally compiled artifact. Run this\n               command inside a program subdirectory, i.e., in the dir containing the program's\n               Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Traditional Method for Creating Public Keys\nDESCRIPTION: The traditional, more verbose method for creating public keys from strings using Pubkey::from_str.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nlet key = Pubkey::from_str(\"11111111111111111111111111111111\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Upgradeable Program Configuration\nDESCRIPTION: TOML configuration for enabling upgradeable programs in tests\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[test]\nupgradeable = true\n\n[[test.genesis]]\naddress = \"22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD\"\nprogram = \"swap.so\"\nupgradeable = true\n```\n\n----------------------------------------\n\nTITLE: Updating `associatedAddress` Function in TypeScript\nDESCRIPTION: This snippet refers to the update of the `associatedAddress` function to be synchronous, which helps enhance the reliability of address associations in TypeScript for the Anchor framework. It also mentions removing older synchronization functions.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- ts: Remove `createProgramAddressSync`, `findProgramAddressSync` (now available\n  in `@solana/web3.js`) and update `associatedAddress` to be synchronous\n  ([#2357](https://github.com/coral-xyz/anchor/pull/2357)).\n```\n\n----------------------------------------\n\nTITLE: Fixing Returns Serialization in IDL in Rust\nDESCRIPTION: This code snippet describes a fix in the Rust (lang) part of the Anchor framework where `returns` were incorrectly serialized as `null` instead of `undefined` in the IDL (Interface Definition Language). This correction ensures that the IDL accurately reflects the return types of program functions, preventing potential errors during client-side interaction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n\"- lang: Fix `returns` being serialized as `null` instead of `undefined` in IDL ([#1782](https://github.com/coral-xyz/anchor/pull/1782)).\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Files Program Structure\nDESCRIPTION: Example directory structure for a multi-file Anchor program\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├── constants.rs\n├── error.rs\n├── instructions\n│   ├── initialize.rs\n│   └── mod.rs\n├── lib.rs\n└── state\n    └── mod.rs\n```\n\n----------------------------------------\n\nTITLE: Deploying an Anchor Program - Shell\nDESCRIPTION: This snippet outlines the command for deploying an Anchor project to the specified cluster as defined in the Anchor.toml file.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nanchor deploy\n```\n\n----------------------------------------\n\nTITLE: Installing LiteSVM Package\nDESCRIPTION: Commands for installing LiteSVM in different programming languages. For Rust using cargo, for TypeScript/JavaScript using npm, and for Python using uv package manager.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/litesvm.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add litesvm --dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm i litesvm -D\n```\n\nLANGUAGE: shell\nCODE:\n```\nuv add solders # from solders import litesvm\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Tests Without Building IDL\nDESCRIPTION: Command to run Anchor tests without rebuilding the IDL, which is useful when API hasn't changed and saves build time.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nanchor test --no-idl\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with Anchor in Shell\nDESCRIPTION: This shell command is used to test an Anchor project by building, deploying, and running tests. When configured with `localnet` as the `cluster` in `Anchor.toml`, it automates starting a local validator, deploying the program, running tests, and stopping the validator.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nanchor test\n```\n\n----------------------------------------\n\nTITLE: Allowing Nullable Types for Option<T> Mapped Types in TypeScript\nDESCRIPTION: This code snippet describes a fix in the TypeScript part of the Anchor framework that allows nullable types for `Option<T>` mapped types. This adjustment ensures that TypeScript can accurately represent optional values, improving type safety and preventing potential errors during program execution.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Allow nullable types for `Option<T>` mapped types ([#1428](https://github.com/coral-xyz/anchor/pull/1428)).\"\n```\n\n----------------------------------------\n\nTITLE: Deprecating Program Namespaces in TypeScript\nDESCRIPTION: This code snippet marks `transaction`, `instruction`, `simulate` and `rpc` program namespaces as deprecated in TypeScript, favoring the `methods` namespace. This shift encourages a more standardized and organized approach to interacting with Solana programs within the Anchor framework.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Mark `transaction`, `instruction`, `simulate` and `rpc` program namespaces as deprecated in favor of `methods` ([#1539](https://github.com/coral-xyz/anchor/pull/1539)).\"\n```\n\n----------------------------------------\n\nTITLE: IDL Build Feature Configuration\nDESCRIPTION: Cargo.toml configuration for enabling IDL build feature\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nidl-build = [\n    \"anchor-lang/idl-build\",\n    \"anchor-spl/idl-build\",\n    \"another-program/idl-build\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor Tools via Cargo\nDESCRIPTION: Commands to update the Anchor Version Manager (avm) and Anchor CLI to version 0.30.0 using Cargo.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor --tag v0.30.0 avm --locked\n```\n\nLANGUAGE: sh\nCODE:\n```\navm install latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Anchor Project with Custom Package Manager\nDESCRIPTION: Command to initialize a new Anchor workspace with NPM as the package manager instead of the default Yarn.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nanchor init <NAME> --package-manager npm\n```\n\n----------------------------------------\n\nTITLE: Building an Anchor Program in Solana Playground\nDESCRIPTION: Terminal command to build an Anchor program in Solana Playground. This compiles the program and generates the necessary artifacts for deployment, including updating the program's ID.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuild\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Shell Completions\nDESCRIPTION: Commands to generate shell completions for Anchor and AVM in a Zsh environment. It includes a prerequisite to ensure that autoload and compinit functions are correctly configured in the `.zshrc` file. The completions are applied and the shell is restarted.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nautoload -U compinit\ncompinit -i\n```\n\nLANGUAGE: shell\nCODE:\n```\nanchor completions zsh | sudo tee /usr/local/share/zsh/site-functions/_anchor\navm completions zsh | sudo tee /usr/local/share/zsh/site-functions/_avm\nexec zsh\n```\n\n----------------------------------------\n\nTITLE: Requiring Explicit Scripts in Anchor.toml for CLI\nDESCRIPTION: The Anchor.toml configuration file now mandates an explicit `[scripts]` section defining test commands. This change ensures that test execution is clearly specified within the project configuration for the command-line interface.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n- cli: Anchor.toml now requires an explicit `[scripts]` test command\n  ([#550](https://github.com/coral-xyz/anchor/pull/550)).\n```\n\n----------------------------------------\n\nTITLE: Introducing New Program Data Constraints\nDESCRIPTION: This entry introduces the new `seeds::program` constraint for specifying the `program_id` during PDA derivation, ensuring that derived addresses are tied to the expected program context.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nAdd `seeds::program` constraint for specifying which program_id to use when deriving PDAs ([#1197](https://github.com/coral-xyz/anchor/pull/1197)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Workspace Types Directory\nDESCRIPTION: Defines a directory where the '<idl>.ts' file will be copied after running 'anchor build'. This is useful for version control of IDL files.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\ntypes = \"app/src/idl/\"\n```\n\n----------------------------------------\n\nTITLE: Installing AVM from Git Repository\nDESCRIPTION: Commands to install the Anchor Version Manager (avm) from the GitHub repository at version 0.29.0\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor --tag v0.29.0 avm --locked\n```\n\n----------------------------------------\n\nTITLE: Configuring Upgradeable Program Clones in Anchor.toml\nDESCRIPTION: Configuration for cloning upgradeable programs in Anchor.toml, which now works correctly with solana-cli >=1.18.10.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[test.validator]\nurl = \"https://api.mainnet-beta.solana.com\"\n\n[[test.validator.clone]]\naddress = \"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\"\n```\n\n----------------------------------------\n\nTITLE: Closing Solana Program in Shell\nDESCRIPTION: This command closes a Solana program, reclaiming the SOL allocated to the program account.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsolana program close 3ynNB373Q3VAzKp7m4x238po36hjAGFXFJB4ybN2iTyg --bypass-warning\n```\n\n----------------------------------------\n\nTITLE: Generating Bash Shell Completions\nDESCRIPTION: Commands to generate shell completions for Anchor and AVM in a Bash environment. It creates the necessary directories and applies completions, requiring a restart of the shell to take effect.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p $HOME/.local/share/bash-completion/completions\nanchor completions bash > $HOME/.local/share/bash-completion/completions/anchor\navm completions bash > $HOME/.local/share/bash-completion/completions/avm\nexec bash\n```\n\n----------------------------------------\n\nTITLE: Renaming of Loader Module\nDESCRIPTION: This code entry discusses the renaming of the `loader_account` module to `account_loader`, clarifying module naming conventions within the codebase.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nrename `loader_account` module to `account_loader` module ([#1279](https://github.com/coral-xyz/anchor/pull/1279))\n```\n\n----------------------------------------\n\nTITLE: Analyzing Anchor Error Response in Shell\nDESCRIPTION: This shell snippet shows an example of an error response generated by the Anchor TypeScript Client SDK when a program error occurs. It provides insights into the error structure, including error logs, error code, and messages. This information is valuable for debugging program errors within the Anchor environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/errors.mdx#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n{\n  errorLogs: [\n    'Program log: AnchorError thrown in programs/custom-error/src/lib.rs:11. Error Code: AmountTooLarge. Error Number: 6001. Error Message: Amount must be less than or equal to 100.'\n  ],\n  logs: [\n    'Program 9oECKMeeyf1fWNPKzyrB2x1AbLjHDFjs139kEyFwBpoV invoke [1]',\n    'Program log: Instruction: ValidateAmount',\n    'Program log: AnchorError thrown in programs/custom-error/src/lib.rs:11. Error Code: AmountTooLarge. Error Number: 6001. Error Message: Amount must be less than or equal to 100.',\n    'Program 9oECKMeeyf1fWNPKzyrB2x1AbLjHDFjs139kEyFwBpoV consumed 2153 of 200000 compute units',\n    'Program 9oECKMeeyf1fWNPKzyrB2x1AbLjHDFjs139kEyFwBpoV failed: custom program error: 0x1771'\n  ],\n  error: {\n    errorCode: { code: 'AmountTooLarge', number: 6001 },\n    errorMessage: 'Amount must be less than or equal to 100',\n    comparedValues: undefined,\n    origin: { file: 'programs/custom-error/src/lib.rs', line: 11 }\n  },\n  _programErrorStack: ProgramErrorStack {\n    stack: [\n      [PublicKey [PublicKey(9oECKMeeyf1fWNPKzyrB2x1AbLjHDFjs139kEyFwBpoV)]]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Program in Rust\nDESCRIPTION: This is the default Rust program created by Anchor. It includes a basic 'initialize' function that logs a greeting message.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"3ynNB373Q3VAzKp7m4x238po36hjAGFXFJB4ybN2iTyg\");\n\n#[program]\npub mod my_project {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        msg!(\"Greetings from: {:?}\", ctx.program_id);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize {}\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Members in Anchor.toml\nDESCRIPTION: Sets the relative paths to all programs in the local workspace. This is useful for non-standard Anchor programs that need to be published.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\n    \"programs/*\",\n    \"other_place/my_program\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo.toml for bytemuck dependency in Rust\nDESCRIPTION: This snippet shows how to update the `Cargo.toml` file by adding the `bytemuck` dependency. This dependency is required when using `account(zero_copy)` or `zero_copy` attributes in Anchor programs. The `bytemuck` crate provides traits for zero-copy conversions between Rust types and byte arrays.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\"bytemuck = { version = \\\"1.4.0\\\", features = [\\\"derive\\\", \\\"min_const_generics\\\"]}\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Anchor CLI Installation in Shell\nDESCRIPTION: This command checks the installed version of the Anchor CLI tool, which is essential for Solana development using the Anchor framework.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nanchor --version\n```\n\n----------------------------------------\n\nTITLE: Generating Fish Shell Completions\nDESCRIPTION: Commands to generate shell completions for Anchor and AVM in a Fish environment. The necessary directories are created, the completions are applied, and the Fish configuration file is sourced.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p $HOME/.config/fish/completions\nanchor completions fish > $HOME/.config/fish/completions/anchor.fish\navm completions fish > $HOME/.config/fish/completions/avm.fish\nsource $HOME/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Defining Space with Custom Discriminator Length in Rust\nDESCRIPTION: This snippet demonstrates how to replace a hardcoded 8-byte discriminator length with a custom discriminator length obtained from the `DISCRIMINATOR` associated constant. It is essential for programs that need a flexible space allocation strategy. Requires the `Discriminator` trait and an account with the associated constant defined.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\nspace = MyAccount::DISCRIMINATOR.len() + ...\n```\n\n----------------------------------------\n\nTITLE: Reward Distribution Pseudo-Implementation in Python\nDESCRIPTION: Pseudo-code demonstrating a naive implementation of reward distribution in a staking pool. This approach iterates through all accounts in the stake pool and distributes rewards proportionally based on stake amount, which is not feasible on Solana due to transaction size limitations and parallelism requirements.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/tests/lockup/docs/staking.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor account in stake_pool:\n  account.token_amount += total_reward * (account.stake_pool_token.amount / stake_pool_token.supply)\n```\n\n----------------------------------------\n\nTITLE: Quick Installation Command for Solana Development Tools\nDESCRIPTION: Single command to install all Solana development dependencies including Rust, Solana CLI, and Anchor CLI on Mac and Linux systems.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSfL https://solana-install.solana.workers.dev | bash\n```\n\n----------------------------------------\n\nTITLE: Anchor Version Manager Usage\nDESCRIPTION: Displays the usage instructions for the Anchor Version Manager (AVM) command-line tool, including available subcommands and options. The output shows how to use the tool and its subcommands like install, list, uninstall and use.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nAnchor version manager\n\nUSAGE:\n    avm <SUBCOMMAND>\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help         Print this message or the help of the given subcommand(s)\n    install      Install a version of Anchor\n    list         List available versions of Anchor\n    uninstall    Uninstall a version of Anchor\n    use          Use a specific version of Anchor\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Program Addresses for Localnet\nDESCRIPTION: Specifies the addresses of programs in the workspace for localnet testing. Used when loading programs at genesis with 'solana-test-validator'.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[programs.localnet]\nmy_program = \"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\"\n```\n\n----------------------------------------\n\nTITLE: Adding Float Types Support in TypeScript\nDESCRIPTION: This code snippet indicates the addition of support for float types in the TypeScript part of the Anchor framework. This enhancement allows developers to work with floating-point numbers directly within their Anchor programs, enabling a broader range of applications.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Added float types support ([#1425](https://github.com/coral-xyz/anchor/pull/1425)).\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: This command changes the current directory to the newly created project folder.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Installing Anchor CLI Directly from GitHub - Shell\nDESCRIPTION: This snippet provides the command to install a specific version of the Anchor CLI directly from GitHub without using AVM.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor --tag v0.31.0 anchor-cli\n```\n\n----------------------------------------\n\nTITLE: Stack Memory Usage Table for Anchor 0.30.1 Instructions\nDESCRIPTION: A markdown table listing various instruction types and their corresponding stack memory usage. The table covers different account types (e.g., empty, sized, unsized) and quantities (1, 2, 4, 8) for both regular and boxed accounts, as well as interface accounts, programs, signers, and system accounts.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/bench/STACK_MEMORY.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Instruction                    | Stack Memory | -   |\n| ------------------------------ | ------------ | --- |\n| account_info1                  | 144          | -   |\n| account_info2                  | 144          | -   |\n| account_info4                  | 144          | -   |\n| account_info8                  | 144          | -   |\n| account_empty_init1            | 144          | -   |\n| account_empty_init2            | 144          | -   |\n| account_empty_init4            | 192          | -   |\n| account_empty_init8            | 224          | -   |\n| account_empty1                 | 144          | -   |\n| account_empty2                 | 144          | -   |\n| account_empty4                 | 144          | -   |\n| account_empty8                 | 144          | -   |\n| account_sized_init1            | 176          | -   |\n| account_sized_init2            | 192          | -   |\n| account_sized_init4            | 224          | -   |\n| account_sized_init8            | 288          | -   |\n| account_sized1                 | 144          | -   |\n| account_sized2                 | 144          | -   |\n| account_sized4                 | 144          | -   |\n| account_sized8                 | 144          | -   |\n| account_unsized_init1          | 192          | -   |\n| account_unsized_init2          | 224          | -   |\n| account_unsized_init4          | 288          | -   |\n| account_unsized_init8          | 416          | -   |\n| account_unsized1               | 144          | -   |\n| account_unsized2               | 144          | -   |\n| account_unsized4               | 144          | -   |\n| account_unsized8               | 144          | -   |\n| boxed_account_empty_init1      | 144          | -   |\n| boxed_account_empty_init2      | 144          | -   |\n| boxed_account_empty_init4      | 192          | -   |\n| boxed_account_empty_init8      | 224          | -   |\n| boxed_account_empty1           | 144          | -   |\n| boxed_account_empty2           | 144          | -   |\n| boxed_account_empty4           | 144          | -   |\n| boxed_account_empty8           | 144          | -   |\n| boxed_account_sized_init1      | 144          | -   |\n| boxed_account_sized_init2      | 144          | -   |\n| boxed_account_sized_init4      | 192          | -   |\n| boxed_account_sized_init8      | 224          | -   |\n| boxed_account_sized1           | 144          | -   |\n| boxed_account_sized2           | 144          | -   |\n| boxed_account_sized4           | 144          | -   |\n| boxed_account_sized8           | 144          | -   |\n| boxed_account_unsized_init1    | 144          | -   |\n| boxed_account_unsized_init2    | 144          | -   |\n| boxed_account_unsized_init4    | 192          | -   |\n| boxed_account_unsized_init8    | 224          | -   |\n| boxed_account_unsized1         | 144          | -   |\n| boxed_account_unsized2         | 144          | -   |\n| boxed_account_unsized4         | 144          | -   |\n| boxed_account_unsized8         | 144          | -   |\n| boxed_interface_account_mint1  | 144          | -   |\n| boxed_interface_account_mint2  | 144          | -   |\n| boxed_interface_account_mint4  | 144          | -   |\n| boxed_interface_account_mint8  | 144          | -   |\n| boxed_interface_account_token1 | 144          | -   |\n| boxed_interface_account_token2 | 144          | -   |\n| boxed_interface_account_token4 | 144          | -   |\n| boxed_interface_account_token8 | 144          | -   |\n| interface_account_mint1        | 144          | -   |\n| interface_account_mint2        | 144          | -   |\n| interface_account_mint4        | 144          | -   |\n| interface_account_mint8        | 144          | -   |\n| interface_account_token1       | 144          | -   |\n| interface_account_token2       | 144          | -   |\n| interface_account_token4       | 144          | -   |\n| interface1                     | 144          | -   |\n| interface2                     | 144          | -   |\n| interface4                     | 144          | -   |\n| interface8                     | 144          | -   |\n| program1                       | 144          | -   |\n| program2                       | 144          | -   |\n| program4                       | 144          | -   |\n| program8                       | 144          | -   |\n| signer1                        | 144          | -   |\n| signer2                        | 144          | -   |\n| signer4                        | 144          | -   |\n| signer8                        | 144          | -   |\n| system_account1                | 144          | -   |\n| system_account2                | 144          | -   |\n| system_account4                | 144          | -   |\n| system_account8                | 144          | -   |\n| unchecked_account1             | 144          | -   |\n| unchecked_account2             | 144          | -   |\n| unchecked_account4             | 144          | -   |\n| unchecked_account8             | 144          | -   |\n```\n\n----------------------------------------\n\nTITLE: Initializing Anchor Project with Rust Test Template in Shell\nDESCRIPTION: This command creates a new Anchor project with a Rust test template instead of the default TypeScript.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/local.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nanchor init --test-template rust my-program\n```\n\n----------------------------------------\n\nTITLE: Excluding Programs from Workspace\nDESCRIPTION: Specifies programs to be excluded from the workspace, opposite of 'workspace.members'.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nexclude = [\n    \"programs/my_program\"\n]\n```\n\n----------------------------------------\n\nTITLE: Program ID Sync Command\nDESCRIPTION: Shell command to synchronize the program ID with the locally generated keypair.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/basics/program-structure.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nanchor keys sync\n```\n\n----------------------------------------\n\nTITLE: Updating JS/TS Templates to Use Program.methods Syntax\nDESCRIPTION: This code snippet signifies an update to the JavaScript/TypeScript templates in the Anchor CLI.  The templates are updated to utilize the `program.methods` syntax. This change reflects a shift in how program interactions are structured, likely providing a more organized and intuitive approach for developers.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"- cli: Update js/ts templates to use new `program.methods` syntax ([#1732](https://github.com/coral-xyz/anchor/pull/1732)).\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark in Cargo.toml\nDESCRIPTION: Shows how to configure a benchmark target in the project's Cargo.toml file to enable compute unit benchmarking\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[bench]]\nname = \"compute_units\"\nharness = false\n```\n\n----------------------------------------\n\nTITLE: Requesting an Airdrop of SOL - Shell\nDESCRIPTION: This snippet shows how to configure the Solana CLI to devnet and request an airdrop of SOL to fund the wallet.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsolana config set -ud\nsolana airdrop 2\nsolana balance\n```\n\n----------------------------------------\n\nTITLE: Deploying an Anchor Program to Solana Devnet\nDESCRIPTION: Terminal command to deploy the built Anchor program to the Solana devnet. This command uploads the program to the Solana blockchain, making it available for interaction.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndeploy\n```\n\n----------------------------------------\n\nTITLE: Confirming Solana Transaction in Shell\nDESCRIPTION: This command confirms a Solana transaction and displays verbose output, including transaction details and log messages.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsolana confirm -v [TxHash]\n```\n\n----------------------------------------\n\nTITLE: Uninstall Anchor Version\nDESCRIPTION: Uninstalls a specific version of the anchor-cli using AVM.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\navm uninstall <version>\n```\n```\n\n----------------------------------------\n\nTITLE: Updating JS/TS Template to use New AnchorProvider Class\nDESCRIPTION: This code snippet refers to an update to the JavaScript/TypeScript (js/ts) template within the Anchor command-line interface (cli). The update modifies the template to utilize the new `AnchorProvider` class. This change likely involves adapting the project structure and code to leverage the enhanced features and functionalities offered by the `AnchorProvider`.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"- cli: Update js/ts template to use new `AnchorProvider` class ([#1770](https://github.com/coral-xyz/anchor/pull/1770)).\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Nightly Rust Version for IDL Building\nDESCRIPTION: Command to override the Rust nightly version when building IDLs using the RUSTUP_TOOLCHAIN environment variable.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nRUSTUP_TOOLCHAIN=\"nightly-2024-05-09\" anchor idl build\n```\n\n----------------------------------------\n\nTITLE: Updating Anchor CLI to version 0.30.1\nDESCRIPTION: Command to update the Anchor CLI to version 0.30.1 using the Anchor Version Manager (avm).\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\navm install 0.30.1\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Program Tests in Shell\nDESCRIPTION: This command runs the test file for the Anchor program in the terminal.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntest\n```\n\n----------------------------------------\n\nTITLE: Building an Anchor Program - Shell\nDESCRIPTION: This snippet provides the command to build the Anchor project, resulting in a compiled program located in the specified directory.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nanchor build\n```\n\n----------------------------------------\n\nTITLE: Defining Unsupported Seed Expressions in Rust\nDESCRIPTION: Example of seed expressions in Rust that can't be stored in the IDL but no longer cause compile errors in Anchor 0.30.1.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct SeedMathExpr<'info> {\n    #[account(seeds = [&(my_account.data + 1).to_le_bytes()], bump)]\n    pub math_expr_account: UncheckedAccount<'info>,\n    pub my_account: Account<'info, MyAccount>,\n}\n\n#[account]\npub struct MyAccount {\n    data: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Browser Env Variable in TypeScript\nDESCRIPTION: This code snippet refers to a breaking change in the TypeScript part of the Anchor framework. The `BROWSER` environment variable used in the ts package was renamed to `ANCHOR_BROWSER`. This adjustment ensures better clarity and avoids potential conflicts with other environment variables.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"- ts: Change `BROWSER` env variable to `ANCHOR_BROWSER` ([#1233](https://github.com/coral-xyz/anchor/pull/1233)).\"\n```\n\n----------------------------------------\n\nTITLE: Zero Discriminator Validation with Anchor in Rust\nDESCRIPTION: Checks if the account discriminator is zero. Used for accounts larger than 10 Kibibyte.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[account(zero)]\n```\n\n----------------------------------------\n\nTITLE: Building Serum DEX\nDESCRIPTION: Command to navigate to the Serum DEX directory and build the BPF (Berkeley Packet Filter) version of the DEX.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/tests/swap/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd deps/serum-dex/dex/ && cargo build-bpf && cd ../../../\n```\n\n----------------------------------------\n\nTITLE: Configuring Anchor Event CPI in Cargo.toml\nDESCRIPTION: Enable the event-cpi feature in the project dependencies to support Cross Program Invocation event emission\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/features/events.mdx#2025-04-18_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nanchor-lang = { version = \"0.31.0\", features = [\"event-cpi\"] }\n```\n\n----------------------------------------\n\nTITLE: WSL Installation on Windows\nDESCRIPTION: Command to install Windows Subsystem for Linux (WSL), required for Solana development on Windows systems.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolchain Settings\nDESCRIPTION: Overrides toolchain data in the workspace, similar to 'rust-toolchain.toml'. Specifies versions for Anchor CLI, Solana tools, and JS package manager.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\nanchor_version = \"0.31.0\"    # `anchor-cli` version to use(requires `avm`)\nsolana_version = \"2.1.0\"     # Solana version to use(applies to all Solana tools)\npackage_manager = \"yarn\"     # JS package manager to use\n```\n\n----------------------------------------\n\nTITLE: Linux Dependencies Installation\nDESCRIPTION: Commands to install required system dependencies for Anchor CLI on Linux systems.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install -y \\\n    build-essential \\\n    pkg-config \\\n    libudev-dev llvm libclang-dev \\\n    protobuf-compiler libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Git Submodules for Serum DEX\nDESCRIPTION: Commands to initialize and update git submodules, required for building the Serum DEX from source.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/tests/swap/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule init\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Partial Instruction Usage with Two Inputs - Rust\nDESCRIPTION: This code snippet illustrates a partial use case where only the first of two expected inputs is used in the #[instruction(..)] attribute. While the function accepts two strings, the attribute does not list input_two, showing correct partial usage where input_two is not required elsewhere in the struct.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>, input_one: String, input_two: String) -> Result<()> {\n        // --snip--\n    }\n}\n\n#[derive(Accounts)]\n#[instruction(input_one: String)]\npub struct Initialize<'info> {\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Using Box<Account> in Rust for Anchor\nDESCRIPTION: Shows how to use Box<Account<'info, T>> type in an Anchor program. This type is used to save stack space.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Accounts)]\npub struct InstructionAccounts<'info> {\n    pub account: Box<Account<'info, AccountType>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Flexible IDL Generation with IdlBuilder in Rust\nDESCRIPTION: This snippet demonstrates a new, flexible approach to IDL generation using `IdlBuilder`, allowing for additional functionality without breaking changes. Ensure `IdlBuilder` is available in your Rust environment.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-31-0.mdx#2025-04-18_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\nlet idl = IdlBuilder::new().program_path(path).skip_lint(true).build()?;\n```\n\n----------------------------------------\n\nTITLE: Updating Solana Tools to Recommended Version\nDESCRIPTION: Command to update Solana tools to the recommended version 1.18.17 for use with Anchor 0.30.1.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-1.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsolana-install init 1.18.17\n```\n\n----------------------------------------\n\nTITLE: Uploading Accounts from JSON Files\nDESCRIPTION: Specifies accounts to be uploaded from JSON files for use in the test validator.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[[test.validator.account]]\naddress = \"Ev8WSPQsGb4wfjybqff5eZNcS3n6HaMsBkMk9suAiuM\"\nfilename = \"some_account.json\"\n\n[[test.validator.account]]\naddress = \"Ev8WSPQsGb4wfjybqff5eZNcS3n6HaMsBkMk9suAiuM\"\nfilename = \"some_other_account.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using NVM - Shell\nDESCRIPTION: This snippet outlines the installation process for Node.js using Node Version Manager (nvm), including verification of the installation.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/installation.mdx#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash\n```\n\nLANGUAGE: shell\nCODE:\n```\ncommand -v nvm\n```\n\nLANGUAGE: shell\nCODE:\n```\nnvm install node\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Invalid Instruction Configuration with Incorrect Arguments - Rust\nDESCRIPTION: An example of invalid usage of the #[instruction(..)] attribute where the specified input_two does not align with the expected input ordering in the function. This illustrates an error case where the attribute does not correctly reflect the function's parameters, leading to compilation errors.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\npub mod example {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>, input_one: String, input_two: String) -> Result<()> {\n        // --snip--\n    }\n}\n\n#[derive(Accounts)]\n#[instruction(input_two: String)]\npub struct Initialize<'info> {\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Memory Usage Table in Markdown\nDESCRIPTION: A markdown table displaying stack memory usage metrics for various Solana program instructions. The table shows instruction names and their corresponding stack memory consumption in bytes, organized by different account types and operations.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/bench/STACK_MEMORY.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Instruction                    | Stack Memory | -   |\n| ------------------------------ | ------------ | --- |\n| account_info1                  | 46           | -   |\n| account_info2                  | 80           | -   |\n| account_info4                  | 80           | -   |\n| account_info8                  | 80           | -   |\n```\n\n----------------------------------------\n\nTITLE: Type Aliases Example\nDESCRIPTION: Example of using type aliases in Anchor programs\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-29-0.mdx#2025-04-18_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub type U8Array = [u8; 8];\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn type_alias(ctx: Context<TypeAlias>, u8_array: U8Array) -> Result<()> {\n        msg!(\"{:?}\", u8_array);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct TypeAlias {}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Anchor Docs\nDESCRIPTION: Commands to start the development server for the Anchor documentation project. It provides options for using npm, pnpm, or yarn package managers. After running the server, the documentation can be accessed at http://localhost:3000.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Anchor Tests\nDESCRIPTION: Command to execute the Anchor tests for the swap program.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/tests/swap/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nanchor test\n```\n\n----------------------------------------\n\nTITLE: Displaying Performance Benchmark Results in Markdown\nDESCRIPTION: This code snippet shows a markdown table containing performance benchmark results for various Anchor instructions. It includes the instruction name, compute units used, and the percentage change in performance.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/bench/COMPUTE_UNITS.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Instruction                 | Compute Units | -                      |\n| --------------------------- | ------------- | ---------------------- |\n| accountInfo1                | 601           | 🟢 **-94 (13.53%)**    |\n| accountInfo2                | 923           | 🟢 **-112 (10.82%)**   |\n| accountInfo4                | 1,583         | 🟢 **-147 (8.50%)**    |\n| accountInfo8                | 2,975         | 🟢 **-367 (10.98%)**   |\n| accountEmptyInit1           | 5,034         | 🟢 **-518 (9.33%)**    |\n| accountEmpty1               | 652           | 🟢 **-167 (20.39%)**   |\n| accountEmptyInit2           | 9,687         | 🟢 **-734 (7.04%)**    |\n| accountEmpty2               | 1,016         | 🟢 **-259 (20.31%)**   |\n| accountEmptyInit4           | 18,501        | 🟢 **-1,302 (6.57%)**  |\n| accountEmpty4               | 1,737         | 🟢 **-440 (20.21%)**   |\n| accountEmptyInit8           | 36,169        | 🟢 **-2,440 (6.32%)**  |\n| accountEmpty8               | 3,186         | 🟢 **-804 (20.15%)**   |\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Markdown Output\nDESCRIPTION: Example of the generated markdown file showing compute unit usage and deltas for different benchmarked instructions\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/testing/mollusk.mdx#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | CUs   | Delta  |\n| ------ | ----- | ------ |\n| bench0 | 450   | --     |\n| bench1 | 579   | -129   |\n| bench2 | 1,204 | +754   |\n| bench3 | 2,811 | +2,361 |\n```\n\n----------------------------------------\n\nTITLE: Using Token Extension Constraints in Rust\nDESCRIPTION: Example of using new account constraints for Token Extensions (Token 2022) in Rust code.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/release-notes/0-30-0.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nextensions::group_pointer::authority = <EXPR>\n```\n\n----------------------------------------\n\nTITLE: Closing Solana Program in Shell\nDESCRIPTION: This command closes a Solana program and recovers the allocated SOL. It requires specifying the program ID.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/quickstart/solpg.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsolana program close [ProgramID]\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Startup Wait Time\nDESCRIPTION: Increases the time Anchor waits for 'solana-test-validator' to start up. Useful when cloning many accounts which increases validator startup time.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/anchor-toml.mdx#2025-04-18_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[test]\nstartup_wait = 10000\n```\n\n----------------------------------------\n\nTITLE: Use Specific Anchor Version\nDESCRIPTION: Selects a specific version of the anchor-cli to use with AVM. This version will be active until changed by another `avm use` command.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/avm.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\navm use <version>\n```\n```\n\n----------------------------------------\n\nTITLE: Decoding Instruction with Hex in Typescript\nDESCRIPTION: This update changes the default decoding method for instructions in Typescript to use hexadecimal representation. This affects how instruction data is interpreted and processed within the client-side code.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/updates/changelog.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\n- ts: Use `hex` by default for decoding Instruction\n  ([#547](https://github.com/coral-xyz/anchor/pull/547)).\n\n```\n\n----------------------------------------\n\nTITLE: Installing anchor-spl crate using Cargo\nDESCRIPTION: This command demonstrates how to add the anchor-spl crate to an Anchor project using the Cargo package manager.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/tokens/index.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add anchor-spl\n```\n\n----------------------------------------\n\nTITLE: Account Closure with Anchor in Rust\nDESCRIPTION: Closes the account by sending lamports to a target account and resetting data.\nSOURCE: https://github.com/solana-foundation/anchor/blob/master/docs/content/docs/references/account-constraints.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[account(close = <target_account>)]\n```"
  }
]