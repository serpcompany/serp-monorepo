[
  {
    "owner": "adrinalin4ik",
    "repo": "nestjs-graphql-tools",
    "content": "TITLE: Implementing One-to-Many Relation with GraphQL Loader in NestJS\nDESCRIPTION: Demonstrates how to use the @GraphqlLoader decorator to resolve a one-to-many relation between users and tasks, solving the N+1 problem.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => UserObjectType) \nexport class UserResolver {\n\n  @ResolveField(() => TaskObjectType)\n  @GraphqlLoader()\n  async tasks(\n    @Loader() loader: LoaderData<TaskObjectType, number>,\n    @Args('story_points') story_points: number, // custom search arg\n  ) {\n    const tasks = await getRepository(Task).find({\n      where: {\n        assignee_id: In<number>(loader.ids) // assignee_id is foreign key from Task to User table\n        story_points\n      }\n    });\n\n    return loader.helpers.mapOneToManyRelation(tasks, loader.ids, 'assignee_id'); // this helper will construct an object like { <assignee_id>: Task }. Graphql expects this shape.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving One-to-Many Relation with Data Loader in NestJS GraphQL\nDESCRIPTION: This code snippet shows how to use the @GraphqlLoader decorator to efficiently resolve a one-to-many relation between users and tasks, addressing the n+1 problem.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => UserObjectType) \nexport class UserResolver {\n\n  @ResolveField(() => TaskObjectType)\n  @GraphqlLoader()\n  async tasks(\n    @Loader() loader: LoaderData<TaskObjectType, number>,\n    @Args('story_points') story_points: number, // custom search arg\n  ) {\n    const tasks = await getRepository(Task).find({\n      where: {\n        assignee_id: In<number>(loader.ids) // assignee_id is foreign key from Task to User table\n        story_points\n      }\n    });\n\n    return loader.helpers.mapOneToManyRelation(tasks, loader.ids, 'assignee_id'); // this helper will construct an object like { <assignee_id>: Task }. Graphql expects this shape.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-One Relation with GraphQL Loader in NestJS\nDESCRIPTION: Shows how to use the @GraphqlLoader decorator to resolve a many-to-one relation between tasks and users, including filtering capabilities.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => TaskObjectType)\nexport class TaskResolver {\n\n  constructor(\n    @InjectRepository(User) public readonly userRepository: Repository<User>\n  ) {}\n\n  @ResolveField(() => UserObjectType)\n  @GraphqlLoader({\n    foreignKey: 'assignee_id' // Here we're providing foreigh key. Decorator gather all the keys from parent and provide it in loader.ids\n  })\n  async assignee(\n    @Loader() loader: LoaderData<TaskObjectType, number>,\n    @Filter(() => UserObjectType) filter: Brackets,\n  ) {\n    const qb = this.userRepository.createQueryBuilder('u')\n      .where(filter)\n      .andWhere({\n        id: In(loader.ids) // Here will be assigne_ids\n      })\n    const users = await qb.getMany();\n    return loader.helpers.mapManyToOneRelation(users, loader.ids); // This helper provide the shape {assignee_id: User}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Many-to-One Relation with Data Loader in NestJS GraphQL\nDESCRIPTION: This example demonstrates how to use the @GraphqlLoader decorator to efficiently resolve a many-to-one relation between tasks and users, including custom filtering.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => TaskObjectType)\nexport class TaskResolver {\n\n  constructor(\n    @InjectRepository(User) public readonly userRepository: Repository<User>\n  ) {}\n\n  @ResolveField(() => UserObjectType)\n  @GraphqlLoader({\n    foreignKey: 'assignee_id' // Here we're providing foreigh key. Decorator gather all the keys from parent and provide it in loader.ids\n  })\n  async assignee(\n    @Loader() loader: LoaderData<TaskObjectType, number>,\n    @Filter(() => UserObjectType) filter: Brackets,\n  ) {\n    const qb = this.userRepository.createQueryBuilder('u')\n      .where(filter)\n      .andWhere({\n        id: In(loader.ids) // Here will be assigne_ids\n      })\n    const users = await qb.getMany();\n    return loader.helpers.mapManyToOneRelation(users, loader.ids); // This helper provide the shape {assignee_id: User}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Relations in NestJS GraphQL\nDESCRIPTION: This code snippet shows how to implement polymorphic relations using the @GraphqlLoader decorator and handle different types of descriptions for tasks.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => TaskObjectType)\nexport class TaskResolver {\n  constructor(\n    @InjectRepository(Task) public readonly taskRepository: Repository<Task>,\n    @InjectRepository(Description) public readonly descriptionRepository: Repository<Description>\n  ) {}\n\n  @ResolveField(() => [DescriptionObjectType])\n  @GraphqlLoader()\n  async descriptions(\n    @Loader() loader: LoaderData<TaskObjectType, number>,\n    @SelectedUnionTypes({ \n      nestedPolymorphicResolverName: 'descriptionable',\n    }) selectedUnions: SelectedUnionTypesResult\n  ) {\n    const selectedTypes = Array.from(selectedUnions.types.keys()).map(type => { \n      switch (type) {\n        case DescriptionTextObjectType.name:\n          return DescriptionType.Text;\n        case DescriptionChecklistObjectType.name:\n          return DescriptionType.Checklist;\n      }\n    });\n\n    const qb = this.descriptionRepository.createQueryBuilder('d')\n      .andWhere({\n        task_id: In(loader.ids),\n        description_type: In(selectedTypes)\n      })\n    \n    const descriptions = await qb.getMany();\n    return loader.helpers.mapOneToManyRelation(descriptions, loader.ids, 'task_id');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Relations with GraphQL Loader in NestJS\nDESCRIPTION: Demonstrates how to use the @GraphqlLoader decorator to handle polymorphic relations, including type-specific querying and result mapping.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => DescriptionObjectType)\nexport class DescriptionResolver {\n  constructor(\n    @InjectRepository(DescriptionText) public readonly descriptionTextRepository: Repository<DescriptionText>,\n    @InjectRepository(DescriptionChecklist) public readonly descriptionChecklistRepository: Repository<DescriptionChecklist>,\n  ) {}\n  \n  @ResolveField(() => [DescriptionableUnion], { nullable: true })\n  @GraphqlLoader({ // <-- We will load description_id field of parent model to the ids and description_type field to the type\n    polymorphic: {\n      idField: 'description_id',\n      typeField: 'description_type'\n    }\n  })\n  async descriptionable(\n    @Loader() loader: PolymorphicLoaderData<[DescriptionText | DescriptionChecklist], number, DescriptionType>, // <-- It will return aggregated polymorphicTypes\n    @SelectedUnionTypes() types: SelectedUnionTypesResult // <-- It will extract from the query and return selected union types\n  ) {\n    const results = []; // <-- We need to gather all entities to the single array\n\n    for (const item of loader.polimorphicTypes) {\n      switch(item.descriminator) {\n        case DescriptionType.Text:\n          const textDescriptions = await this.descriptionTextRepository.createQueryBuilder()\n          .select(types.getFields(DescriptionTextObjectType))\n          .where({\n            id: In(item.ids)\n          })\n          .getRawMany();\n\n          results.push({ descriminator: DescriptionType.Text, entities: textDescriptions })\n\n          break;\n        case DescriptionType.Checklist:\n          const checklistDescriptions = await this.descriptionChecklistRepository.createQueryBuilder()\n          .select(types.getFields(DescriptionChecklistObjectType))\n          .where({\n            id: In(item.ids)\n          })\n          .getRawMany();\n\n          results.push({ descriminator: DescriptionType.Checklist, entities: checklistDescriptions })\n          \n          break;\n        default: break;\n      }\n    }\n    return loader.helpers.mapOneToManyPolymorphicRelation(results, loader.ids); // <-- This helper will change shape of responce to the shape which is sutable for graphql\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Polymorphic Relations in NestJS GraphQL\nDESCRIPTION: This example shows how to resolve polymorphic relations for different types of descriptions using the @GraphqlLoader decorator and custom helpers.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => DescriptionObjectType)\nexport class DescriptionResolver {\n  constructor(\n    @InjectRepository(DescriptionText) public readonly descriptionTextRepository: Repository<DescriptionText>,\n    @InjectRepository(DescriptionChecklist) public readonly descriptionChecklistRepository: Repository<DescriptionChecklist>,\n  ) {}\n  \n  @ResolveField(() => [DescriptionableUnion], { nullable: true })\n  @GraphqlLoader({\n    polymorphic: {\n      idField: 'description_id',\n      typeField: 'description_type'\n    }\n  })\n  async descriptionable(\n    @Loader() loader: PolymorphicLoaderData<[DescriptionText | DescriptionChecklist], number, DescriptionType>,\n    @SelectedUnionTypes() types: SelectedUnionTypesResult\n  ) {\n    const results = [];\n\n    for (const item of loader.polimorphicTypes) {\n      switch(item.descriminator) {\n        case DescriptionType.Text:\n          const textDescriptions = await this.descriptionTextRepository.createQueryBuilder()\n          .select(types.getFields(DescriptionTextObjectType))\n          .where({\n            id: In(item.ids)\n          })\n          .getRawMany();\n\n          results.push({ descriminator: DescriptionType.Text, entities: textDescriptions })\n\n          break;\n        case DescriptionType.Checklist:\n          const checklistDescriptions = await this.descriptionChecklistRepository.createQueryBuilder()\n          .select(types.getFields(DescriptionChecklistObjectType))\n          .where({\n            id: In(item.ids)\n          })\n          .getRawMany();\n\n          results.push({ descriminator: DescriptionType.Checklist, entities: checklistDescriptions })\n          \n          break;\n        default: break;\n      }\n    }\n    return loader.helpers.mapOneToManyPolymorphicRelation(results, loader.ids);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base DTO with Inheritance in TypeScript\nDESCRIPTION: Demonstrates how to create a base DTO class with common attributes using @InheritedModel decorator. This base class provides common fields like id and timestamps that can be inherited by other DTOs.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\n@InheritedModel() // <-- Make inheritance possible. If you not decorate object with this decorator, you will not see these properties in \"where\" and sorting statements\nexport class BaseDTO {\n  @Field(() => Int)\n  id: number;\n\n  // Timestamps\n  @Field(() => Date)\n  created_at: Date;\n\n  @Field(() => Date)\n  updated_at: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Reference Resolution in Users Resolver\nDESCRIPTION: Shows how to implement federation reference resolution in a NestJS Users resolver using @GraphqlLoader and @ResolveReference decorators.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@ResolveReference()\n@GraphqlLoader()\nasync resolveReference(\n   @Loader() loader: LoaderData<User, number>,\n) {\n const ids = loader.ids;\n const users = this.usersService.findByIds(ids);\n return loader.helpers.mapManyToOneRelation(users, loader.ids, 'id')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Resolver in Users Service\nDESCRIPTION: Shows how to implement a federation resolver using @GraphqlLoader and @ResolveReference decorators in a users service. This enables federated GraphQL queries across multiple services.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@ResolveReference()\n@GraphqlLoader()\nasync resolveReference(\n   @Loader() loader: LoaderData<User, number>,\n) {\n const ids = loader.ids;\n const users = this.usersService.findByIds(ids);\n return loader.helpers.mapManyToOneRelation(users, loader.ids, 'id')\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Filters, Sorting, and Pagination in GraphQL\nDESCRIPTION: This GraphQL query demonstrates the capabilities of the library, including filtering, sorting, and pagination of user data with nested task information.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  users(\n    where: {\n      id: { in: [1,2,3,4] }\n      task_title: { like: \"%Task%\" }\n    }\n    order_by: {email: ASC, created_at: DESC}\n    paginate: {page: 1, per_page: 10}\n  ) {\n    id\n    fname\n    lname\n    email\n    tasks(order_by: {id: ASC_NULLS_LAST}) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Filters, Sorting, and Pagination in GraphQL\nDESCRIPTION: Example GraphQL query demonstrating the library's capabilities for filtering, sorting, and paginating user data, including nested relations.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  users(\n    where: {\n      id: { in: [1,2,3,4] }\n      task_title: { like: \"%Task%\" }\n    }\n    order_by: {email: ASC, created_at: DESC}\n    paginate: {page: 1, per_page: 10}\n  ) {\n    id\n    fname\n    lname\n    email\n    tasks(order_by: {id: ASC_NULLS_LAST}) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Federation\nDESCRIPTION: Example GraphQL query demonstrating how to fetch posts with associated user data through federation.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    id\n    title\n    authorId\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Federation GraphQL Query\nDESCRIPTION: Demonstrates a federated GraphQL query that fetches posts with their associated user information across multiple services.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    id\n    title\n    authorId\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base DTO Model in TypeScript with NestJS Decorators\nDESCRIPTION: Demonstrates how to create a base DTO class with common attributes using @InheritedModel decorator. This base class includes standard fields like id and timestamps that can be inherited by other DTOs.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\n@InheritedModel() // <-- Make inheritance possible. If you not decorate object with this decorator, you will not see these properties in \"where\" and sorting statements\nexport class BaseDTO {\n  @Field(() => Int)\n  id: number;\n\n  // Timestamps\n  @Field(() => Date)\n  created_at: Date;\n\n  @Field(() => Date)\n  updated_at: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Service with FindByIds Method\nDESCRIPTION: Shows implementation of a Users service with a findByIds method to support federation queries. Includes sample user data and filtering logic.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class UsersService {\n  private users: User[] = [\n    { id: 1, name: 'John Doe' },\n    { id: 2, name: 'Richard Roe' },\n  ];\n\n  findByIds(idsList: number[]): User[] {\n    return this.users.filter((user) => idsList.some(id => Number(id) === user.id));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Service with FindByIds Method\nDESCRIPTION: Shows implementation of a Users service with a method to find users by multiple IDs, used for federation reference resolution.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class UsersService {\n  private users: User[] = [\n    { id: 1, name: 'John Doe' },\n    { id: 2, name: 'Richard Roe' },\n  ];\n\n  findByIds(idsList: number[]): User[] {\n    return this.users.filter((user) => idsList.some(id => Number(id) === user.id));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install project dependencies and start the NestJS development server.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start:dev\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database for NestJS GraphQL Tools\nDESCRIPTION: Command to create a PostgreSQL database for local development of the nestjs-graphql-tools project.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb -h localhost -U postgres nestjs_graphql_tools_development_public;\n```\n\n----------------------------------------\n\nTITLE: Database Setup Commands\nDESCRIPTION: Commands for setting up the development database and starting the development server.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb -h localhost -U postgres nestjs_graphql_tools_development_public;\n```\n\n----------------------------------------\n\nTITLE: Database Creation Command for Development\nDESCRIPTION: Command to create a PostgreSQL database for development purposes.\nSOURCE: https://github.com/adrinalin4ik/nestjs-graphql-tools/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb -h localhost -U postgres nestjs_graphql_tools_development_public;\n```"
  }
]