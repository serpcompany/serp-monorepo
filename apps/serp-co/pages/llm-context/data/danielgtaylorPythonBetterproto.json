[
  {
    "owner": "danielgtaylor",
    "repo": "python-betterproto",
    "content": "TITLE: Using Generated Protobuf Classes in Python\nDESCRIPTION: Demonstrates how to create, serialize, and deserialize Protobuf messages using the generated classes from betterproto.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from lib.hello import Greeting\n>>> test = Greeting()\n>>> test\nGreeting(message='')\n\n>>> test.message = \"Hey!\"\n>>> test\nGreeting(message=\"Hey!\")\n\n>>> serialized = bytes(test)\n>>> serialized\nb'\\n\\x04Hey!'\n\n>>> another = Greeting().parse(serialized)\n>>> another\nGreeting(message=\"Hey!\")\n\n>>> another.to_dict()\n{\"message\": \"Hey!\"}\n>>> another.to_json(indent=2)\n'{\\n  \"message\": \"Hey!\"\\n}'\n```\n\n----------------------------------------\n\nTITLE: Using Generated Protocol Buffer Classes\nDESCRIPTION: Example usage of the generated Greeting class, demonstrating instantiation, modification, and serialization\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from lib import Greeting\n\n>>> test = Greeting()\n>>> test\nGreeting(message='')\n\n>>> test.message = \"Hey!\"\n>>> test\nGreeting(message=\"Hey!\")\n\n>>> bytes(test)\nb'\\n\\x04Hey!'\n>>> Greeting().parse(serialized)\nGreeting(message=\"Hey!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async gRPC Client in Python\nDESCRIPTION: Shows how to implement an asynchronous gRPC client using betterproto-generated stubs and grpclib.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport echo\n\nfrom grpclib.client import Channel\n\n\nasync def main():\n    channel = Channel(host=\"127.0.0.1\", port=50051)\n    service = echo.EchoStub(channel)\n    response = await service.echo(echo.EchoRequest(value=\"hello\", extra_times=1))\n    print(response)\n\n    async for response in service.echo_stream(echo.EchoRequest(value=\"hello\", extra_times=1)):\n        print(response)\n\n    # don't forget to close the channel when done!\n    channel.close()\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async gRPC Server in Python\nDESCRIPTION: Demonstrates how to implement an asynchronous gRPC server using betterproto-generated base classes and grpclib.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom echo import EchoBase, EchoRequest, EchoResponse, EchoStreamResponse\nfrom grpclib.server import Server\nfrom typing import AsyncIterator\n\n\nclass EchoService(EchoBase):\n    async def echo(self, echo_request: \"EchoRequest\") -> \"EchoResponse\":\n        return EchoResponse([echo_request.value for _ in range(echo_request.extra_times)])\n\n    async def echo_stream(self, echo_request: \"EchoRequest\") -> AsyncIterator[\"EchoStreamResponse\"]:\n        for _ in range(echo_request.extra_times):\n            yield EchoStreamResponse(echo_request.value)\n\n\nasync def main():\n    server = Server([EchoService()])\n    await server.start(\"127.0.0.1\", 50051)\n    await server.wait_closed()\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Async gRPC Client Implementation\nDESCRIPTION: Example of using generated gRPC client stubs with async/await syntax\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom grpclib.client import Channel\nimport echo\n\n\nasync def main():\n    channel = Channel(host=\"127.0.0.1\", port=50051)\n    service = echo.EchoStub(channel)\n    response = await service.echo(value=\"hello\", extra_times=1)\n    print(response)\n\n    async for response in service.echo_stream(value=\"hello\", extra_times=1):\n        print(response)\n\n    # don't forget to close the channel when you're done!\n    channel.close()\n\nasyncio.run(main())  # python 3.7 only\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Server\nDESCRIPTION: Example of implementing a gRPC server by subclassing the generated base class\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom echo import EchoBase\nfrom grpclib.server import Server\nfrom typing import AsyncIterator\n\n\nclass EchoService(EchoBase):\n    async def echo(self, value: str, extra_times: int) -> \"EchoResponse\":\n        return value\n\n    async def echo_stream(\n        self, value: str, extra_times: int\n    ) -> AsyncIterator[\"EchoStreamResponse\"]:\n        for _ in range(extra_times):\n            yield value\n\n\nasync def start_server():\n    HOST = \"127.0.0.1\"\n    PORT = 1337\n    server = Server([EchoService()])\n    await server.start(HOST, PORT)\n    await server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Using Google Well-Known Types with betterproto\nDESCRIPTION: Example of working with Google's well-known types in betterproto, demonstrating timestamp and duration manipulation, type conversion, and handling of wrapper types.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/migrating.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> t = Test().from_dict({\"maybe\": True, \"ts\": \"2019-01-01T12:00:00Z\", \"duration\": \"1.200s\"})\n>>> t\nTest(maybe=True, ts=datetime.datetime(2019, 1, 1, 12, 0, tzinfo=datetime.timezone.utc), duration=datetime.timedelta(seconds=1, microseconds=200000))\n\n>>> t.ts - t.duration\ndatetime.datetime(2019, 1, 1, 11, 59, 58, 800000, tzinfo=datetime.timezone.utc)\n\n>>> t.ts.isoformat()\n'2019-01-01T12:00:00+00:00'\n\n>>> t.maybe = None\n>>> t.to_dict()\n{'ts': '2019-01-01T12:00:00Z', 'duration': '1.200s'}\n```\n\n----------------------------------------\n\nTITLE: Using Google Well-Known Types in Python with BetterProto\nDESCRIPTION: Example demonstrating how to create and manipulate a BetterProto message with Google's well-known types, showing type conversions, date arithmetic, and serialization/deserialization.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> t = Test().from_dict({\"maybe\": True, \"ts\": \"2019-01-01T12:00:00Z\", \"duration\": \"1.200s\"})\n>>> t\nTest(maybe=True, ts=datetime.datetime(2019, 1, 1, 12, 0, tzinfo=datetime.timezone.utc), duration=datetime.timedelta(seconds=1, microseconds=200000))\n\n>>> t.ts - t.duration\ndatetime.datetime(2019, 1, 1, 11, 59, 58, 800000, tzinfo=datetime.timezone.utc)\n\n>>> t.ts.isoformat()\n'2019-01-01T12:00:00+00:00'\n\n>>> t.maybe = None\n>>> t.to_dict()\n{'ts': '2019-01-01T12:00:00Z', 'duration': '1.200s'}\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Message in Python\nDESCRIPTION: Example of a generated Python class for a Protobuf message using betterproto. It demonstrates the use of dataclasses and type hints.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Greeting(betterproto.Message):\n    \"\"\"Greeting represents a message you can tell a user.\"\"\"\n\n    message: str = betterproto.string_field(1)\n```\n\n----------------------------------------\n\nTITLE: Using One-of Fields in Python with Pattern Matching\nDESCRIPTION: Demonstrates how to use pattern matching with one-of fields in Python 3.10+ using betterproto-generated classes.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntest = Test()\nmatch test:\n    case Test(on=value):\n        print(value)  # value: bool\n    case Test(count=value):\n        print(value)  # value: int\n    case Test(name=value):\n        print(value)  # value: str\n    case _:\n        print(\"No value provided\")\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Example\nDESCRIPTION: Demonstrates JSON serialization capabilities with different casing options\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass MyMessage(betterproto.Message):\n    a_long_field_name: str = betterproto.string_field(1)\n\n\n>>> test = MyMessage(a_long_field_name=\"Hello World!\")\n>>> test.to_dict(betterproto.Casing.SNAKE)\n{\"a_long_field_name\": \"Hello World!\"}\n>>> test.to_dict(betterproto.Casing.CAMEL)\n{\"aLongFieldName\": \"Hello World!\"}\n\n>>> test.to_json(indent=2)\n'{\\n  \"aLongFieldName\": \"Hello World!\"\\n}'\n\n>>> test.from_dict({\"aLongFieldName\": \"Goodbye World!\"})\n>>> test.a_long_field_name\n\"Goodbye World!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message with Google Well-Known Types in Protobuf\nDESCRIPTION: Protocol Buffer message definition showcasing the import and use of Google's well-known types including BoolValue, Timestamp, and Duration in a Test message.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/duration.proto\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"google/protobuf/wrappers.proto\";\n\nmessage Test {\n  google.protobuf.BoolValue maybe = 1;\n  google.protobuf.Timestamp ts = 2;\n  google.protobuf.Duration duration = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking One-of Fields in Python with betterproto\nDESCRIPTION: Shows how to use the betterproto.which_one_of() function to determine which field in a one-of group is set.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> test = Test()\n>>> betterproto.which_one_of(test, \"foo\")\n[\"\", None]\n\n>>> test.on = True\n>>> betterproto.which_one_of(test, \"foo\")\n[\"on\", True]\n\n# Setting one member of the group resets the others.\n>>> test.count = 57\n>>> betterproto.which_one_of(test, \"foo\")\n[\"count\", 57]\n\n# Default (zero) values also work.\n>>> test.name = \"\"\n>>> betterproto.which_one_of(test, \"foo\")\n[\"name\", \"\"]\n```\n\n----------------------------------------\n\nTITLE: Working with One-of Fields in betterproto\nDESCRIPTION: Code comparison showing how to determine which field in a one-of group was set, contrasting Google's WhichOneof() method with betterproto's which_one_of() function.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/migrating.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old way (official Google protobuf package)\n>>> message.WhichOneof(\"group\")\n\"foo\"\n\n# New way (this project)\n>>> betterproto.which_one_of(message, \"group\")\n(\"foo\", \"foo's value\")\n```\n\n----------------------------------------\n\nTITLE: Example Protocol Buffer Definition\nDESCRIPTION: Sample proto file defining a simple Greeting message with a string field\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage hello;\n\n// Greeting represents a message you can tell a user.\nmessage Greeting {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Python Code Example\nDESCRIPTION: Example of generated Python code from the proto file, showing a Message class with dataclass implementation\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# sources: example.proto\n# plugin: python-betterproto\nfrom dataclasses import dataclass\n\nimport betterproto\n\n\n@dataclass\nclass Greeting(betterproto.Message):\n    \"\"\"Greeting represents a message you can tell a user.\"\"\"\n\n    message: str = betterproto.string_field(1)\n```\n\n----------------------------------------\n\nTITLE: Determining Message Serialization in betterproto\nDESCRIPTION: Code comparison showing how to check if a message field was serialized over the wire, contrasting Google's protobuf HasField() method with betterproto's serialized_on_wire() function.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/migrating.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old way (official Google Protobuf package)\n>>> mymessage.HasField('myfield')\nTrue\n\n# New way (this project)\n>>> betterproto.serialized_on_wire(mymessage.myfield)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Proto Definition with Google Well-Known Types\nDESCRIPTION: A Protocol Buffer definition example showing the import and usage of Google's well-known types including duration, timestamp, and wrappers.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/migrating.rst#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/duration.proto\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"google/protobuf/wrappers.proto\";\n\nmessage Test {\n  google.protobuf.BoolValue maybe = 1;\n  google.protobuf.Timestamp ts = 2;\n  google.protobuf.Duration duration = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Client Code Example for BetterProto 2.0.0b5\nDESCRIPTION: Example showing how to update client code after the breaking change in 2.0.0b5 where clients no longer unpack input message fields as parameters.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Before\nresponse = await service.echo(value=\"hello\", extra_times=1)\n\n# After\nresponse = await service.echo(EchoRequest(value=\"hello\", extra_times=1))\n```\n\n----------------------------------------\n\nTITLE: Updating Server Handler Code Example for BetterProto 2.0.0b5\nDESCRIPTION: Example showing how to update server handler implementations after the breaking change in 2.0.0b5 where service stubs no longer unpack message fields as parameters.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Before\nasync def echo(self, value: str, extra_times: int) -> EchoResponse: ...\n\n# After\nasync def echo(self, echo_request: EchoRequest) -> EchoResponse:\n    # Use echo_request.value\n    # Use echo_request.extra_times\n    ...\n```\n\n----------------------------------------\n\nTITLE: Proto Definition with One-of Fields\nDESCRIPTION: A Protocol Buffer definition example demonstrating the one-of syntax, which allows only one field in a group to be set at a time.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/migrating.rst#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nmessage Test {\n  oneof foo {\n    bool on = 1;\n    int32 count = 2;\n    string name = 3;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Service Definition Example\nDESCRIPTION: Example proto file defining a gRPC service with unary and streaming endpoints\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage echo;\n\nmessage EchoRequest {\n  string value = 1;\n  // Number of extra times to echo\n  uint32 extra_times = 2;\n}\n\nmessage EchoResponse {\n  repeated string values = 1;\n}\n\nmessage EchoStreamResponse  {\n  string value = 1;\n}\n\nservice Echo {\n  rpc Echo(EchoRequest) returns (EchoResponse);\n  rpc EchoStream(EchoRequest) returns (stream EchoStreamResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Proto Files with protoc\nDESCRIPTION: Commands for compiling proto files using either direct protoc or grpcio-tools\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir hello\nprotoc -I . --python_betterproto_out=lib example.proto\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install grpcio-tools\npython -m grpc_tools.protoc -I . --python_betterproto_out=lib example.proto\n```\n\n----------------------------------------\n\nTITLE: Generating Pydantic-Based Models with BetterProto\nDESCRIPTION: Command for generating Pydantic dataclass-based models from Protocol Buffer definitions, enabling type checking for unmarshalled protobuf data.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --python_betterproto_opt=pydantic_dataclasses --python_betterproto_out=lib example.proto\n```\n\n----------------------------------------\n\nTITLE: Importing BetterProto Message Class in Python\nDESCRIPTION: Shows how to import the Message class from the betterproto module. This class is the base for all Protocol Buffer message types in betterproto.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom betterproto import Message\n```\n\n----------------------------------------\n\nTITLE: Importing BetterProto Serialization Functions in Python\nDESCRIPTION: Demonstrates importing the serialized_on_wire and which_one_of functions from betterproto. These functions are used for message serialization and oneof field handling.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom betterproto import serialized_on_wire, which_one_of\n```\n\n----------------------------------------\n\nTITLE: Importing BetterProto Enum Classes in Python\nDESCRIPTION: Shows how to import the Enum and Casing classes from betterproto. These classes are used for defining enumerations and specifying casing options in Protocol Buffers.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom betterproto import Enum, Casing\n```\n\n----------------------------------------\n\nTITLE: Installing BetterProto via pip\nDESCRIPTION: Basic installation commands for BetterProto using pip, with variations for Windows and compiler plugin installation\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/docs/quick-start.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install -U betterproto\n```\n\nLANGUAGE: sh\nCODE:\n```\npy -3 -m pip install -U betterproto\n```\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install -U \"betterproto[compiler]\"\n```\n\n----------------------------------------\n\nTITLE: Recompiling Google Well-Known Types for BetterProto\nDESCRIPTION: Command to force the compilation of Google's well-known protobuf types for use with BetterProto, specifying the INCLUDE_GOOGLE option to override the default exclusion.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nprotoc \\\n    --plugin=protoc-gen-custom=src/betterproto/plugin/main.py \\\n    --custom_opt=INCLUDE_GOOGLE \\\n    --custom_out=src/betterproto/lib \\\n    -I /usr/local/include/ \\\n    /usr/local/include/google/protobuf/*.proto\n```\n\n----------------------------------------\n\nTITLE: Protobuf Message Definition Example\nDESCRIPTION: Shows a sample protobuf message definition for the bool test case, defining a simple Test message with a boolean value field.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nmessage Test {\n    bool value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Test Data Example\nDESCRIPTION: Demonstrates a JSON test file used to validate protobuf message serialization and deserialization, providing test data with a boolean value.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Typing Imports in BetterProto\nDESCRIPTION: Command and resulting code pattern for the 'direct' typing import configuration, which imports types directly from the typing module.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --python_betterproto_opt=typing.direct --python_betterproto_out=lib example.proto\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import (\n  List,\n  Optional,\n  Union\n)\n...\nvalue: List[str] = []\nvalue2: Optional[str] = None\nvalue3: Union[str, int] = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Typing Imports in BetterProto\nDESCRIPTION: Command and resulting code pattern for the 'root' typing import configuration, which imports the typing module and accesses types directly from it.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --python_betterproto_opt=typing.root --python_betterproto_out=lib example.proto\n```\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n...\nvalue: typing.List[str] = []\nvalue2: typing.Optional[str] = None\nvalue3: typing.Union[str, int] = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Python 3.10 Style Typing in BetterProto\nDESCRIPTION: Command and resulting code pattern for the '310' typing configuration, which uses Python 3.10's type annotation syntax without importing the typing module.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --python_betterproto_opt=typing.310 --python_betterproto_out=lib example.proto\n```\n\nLANGUAGE: python\nCODE:\n```\n...\nvalue: list[str] = []\nvalue2: str | None = None\nvalue3: str | int = 1\n```\n\n----------------------------------------\n\nTITLE: Custom Python Test Example\nDESCRIPTION: Shows a custom pytest file that validates specific aspects of the generated Python class, testing the default value behavior of a boolean field.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.output_betterproto.bool.bool import Test\n\ndef test_value():\n    message = Test()\n    assert not message.value, \"Boolean is False by default\"\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite Commands\nDESCRIPTION: Provides the commands for generating Python classes from protobuf definitions and running the tests using pipenv.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npipenv run generate\npipenv run test\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Test Inputs\nDESCRIPTION: Shows the hierarchical organization of test inputs directory where each subdirectory represents an isolated test case for different data types.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninputs/\n   bool/\n   double/\n   int32/\n   ...\n```\n\n----------------------------------------\n\nTITLE: Individual Test Case Directory Structure\nDESCRIPTION: Demonstrates the file organization within each test case directory, showing the required proto file and optional JSON and Python test files.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbool/\n  bool.proto\n  bool.json     # optional\n  test_bool.py  # optional\n```\n\n----------------------------------------\n\nTITLE: Setting Up BetterProto Development Environment\nDESCRIPTION: Commands for setting up a development environment for BetterProto using Poetry to manage dependencies and virtual environments.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Get set up with the virtual env & dependencies\npoetry install -E compiler\n\n# Activate the poetry environment\npoetry shell\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting for BetterProto Development\nDESCRIPTION: Command to run the Black code formatter on BetterProto source code to ensure consistent code style before committing changes.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\npoe format\n```\n\n----------------------------------------\n\nTITLE: Running BetterProto Tests\nDESCRIPTION: Commands to generate test assets from sample .proto files and run the test suite for BetterProto.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# Generate assets from sample .proto files required by the tests\npoe generate\n# Run the tests\npoe test\n```\n\n----------------------------------------\n\nTITLE: Running Full BetterProto Test Suite with Tox\nDESCRIPTION: Command to run the complete BetterProto test suite using Tox, which matches how tests are run in continuous integration.\nSOURCE: https://github.com/danielgtaylor/python-betterproto/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npoe full-test\n```"
  }
]