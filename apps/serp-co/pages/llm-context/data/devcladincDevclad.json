[
  {
    "owner": "devclad-inc",
    "repo": "devclad",
    "content": "TITLE: Configuring Poetry for Python Dependency Management\nDESCRIPTION: Steps to set up Poetry for Python dependency management, including configuration, environment setup, dependency installation, and exporting requirements. Poetry provides a modern way to manage Python dependencies.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/CONTRIBUTING.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry config virtualenvs.in-project true\npoetry self update\npoetry env use python3.10.6\npoetry install\npoetry export --without-hashes --format=requirements.txt > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pre-commit Hooks\nDESCRIPTION: Instructions for setting up pre-commit hooks to enforce code quality standards before commits. This ensures consistent code formatting and quality across contributions.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/CONTRIBUTING.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\npre-commit run -a\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub OAuth Callback in TypeScript\nDESCRIPTION: This code snippet demonstrates how to handle the GitHub OAuth callback on the client side. It extracts the code from the URL query parameters and sends a POST request to a serverless function to complete the authentication process.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/web/readme.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { pathname } = useLocation();\nconst code = queryParams.get('code');\nconst tokenUrl = `/api${pathname}`;\nconst serverlessReq = async () => {\n\tawait axios.post(tokenUrl, { code });\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running Server using Docker Compose\nDESCRIPTION: Commands for setting up the server using Docker, which containerizes the application for consistent deployment. This approach is more resource-intensive but provides better isolation.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/CONTRIBUTING.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose build\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment with Pyenv for Server Development\nDESCRIPTION: Commands for configuring a Python development environment using pyenv to manage Python versions. This allows developers to work with the specific Python version required by the project.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/CONTRIBUTING.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.10.6\npyenv shell 3.10.6\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment with Pyenv and Poetry in Gitpod\nDESCRIPTION: Step-by-step commands to initialize Python environment in Gitpod using Pyenv and Poetry, including installing Python, activating virtual environment, and starting the Django server.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/readme.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.10.6\npyenv shell 3.10.6\npoetry env use python3.10\npoetry shell\npoetry install\npython manage.py migrate\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Client with Yarn and Vercel\nDESCRIPTION: Instructions for setting up the client side of DevClad using Yarn package manager and Vercel for local development. This includes installing dependencies and running the development server to handle serverless functions locally.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/CONTRIBUTING.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global yarn\nyarn install\nvercel dev\npre-commit run -a\n```\n\n----------------------------------------\n\nTITLE: Building and Running DevClad with Nixpacks and Docker\nDESCRIPTION: Commands for building and running the DevClad server using Nixpacks and Docker, including installation via Homebrew and container configuration.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/readme.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install railwayapp/tap/nixpacks\ncd apps/server\nnixpacks build ./ --name devclad\ndocker run -it -p 127.0.0.1:8000:8000/tcp devclad\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Go\nDESCRIPTION: This Go code snippet demonstrates how to retrieve essential configuration values from environment variables. It sets up variables for Cloudflare R2 bucket access, including account ID, bucket name, and API credentials.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/userpics/README.md#2025-04-05_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naccountId := os.Getenv(\"ACCOUNT_ID\")\nbucketName := os.Getenv(\"BUCKET_NAME\")\naccessKeyId := os.Getenv(\"API_ACCESS_KEY\")\naccessKeySecret := os.Getenv(\"API_SECRET_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Fetching and Saving Random Avatar in Python\nDESCRIPTION: This Python function fetches a random avatar from the API and saves it locally. It uses the '/api/getpic/' endpoint to get a random avatar URL, then downloads and saves the image.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/userpics/README.md#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef random_avatar():\n    name = str(uuid.uuid4())[:8]\n    with open(f\"media/avatars/{name}.png\", \"wb+\") as f:\n        url = requests.get(\"https://userpics.devclad.com/api/getpic\")\n        response = requests.get(url.text, stream=True)\n        if not response.ok:\n            raise Exception(\"Could not get avatar\")\n        for block in response.iter_content(1024):\n            if not block:\n                break\n            f.write(block)\n    return f\"avatars/{name}.png\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/landing/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Generating Internationalized Email Content with Django Template\nDESCRIPTION: This Django template generates email content with support for internationalization. It includes a greeting, a content block for custom messages, and a closing statement. The template uses the current site's name and domain in the text.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/base_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}{% autoescape off %}{% blocktrans with site_name=current_site.name %}Hello from {{ site_name }}!{% endblocktrans %}\n\n{% block content %}{% endblock %}\n\n{% blocktrans with site_name=current_site.name site_domain=current_site.domain %}Thank you for using {{ site_name }}!\n{{ site_domain }}{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Django Password Reset Email Template with i18n Support\nDESCRIPTION: Template file that generates password reset email content. Includes support for internationalization, dynamic protocol/domain insertion, and optional username reminder. Extends a base email message template and uses autoescape for security.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/password_reset_key_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktrans %}You're receiving this e-mail because you or someone else has requested a password for your user account.\nIt can be safely ignored if you did not request a password reset. Click the link below to reset your password.{% endblocktrans %}\n\n{{protocol}}://{{domain}}{{path}}\n\n{% if username %}\n\n{% blocktrans %}In case you forgot, your username is {{ username }}.{% endblocktrans %}\n\n\n{% endif %}\n{% endautoescape %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template with Account Confirmation Content in Django\nDESCRIPTION: This Django template extends a base email message template and adds content specific to account confirmation. It loads necessary template tags, displays the user's information, and provides an activation URL for the user to confirm their account registration.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/email_confirmation_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load account %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% user_display user as user_display %}{% blocktrans with site_name=current_site.name site_domain=current_site.domain %}You're receiving this e-mail because user {{ user_display }} has given your e-mail address to register an account on {{ site_domain }}.\n\nTo confirm this is correct, go to {{ activate_url }}{% endblocktrans %}{% endautoescape %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt file configures access permissions for web crawlers. It allows Googlebot and Neevabot complete access to the website while blocking all other crawlers from accessing any part of the site.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/web/public/robots.txt#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Group 1\nUser-agent: Googlebot\nAllow: /\n\n# Group 2\nUser-agent: Neevabot\nAllow: /\n\n# Group 3\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Django Template for Unknown Email Password Reset\nDESCRIPTION: Email template that extends base_message.txt and uses Django's translation system to handle password reset requests for unknown email addresses. Includes template blocks for content and autoescape control, along with translation tags for internationalization.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/unknown_account_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktrans %}You are receiving this e-mail because you or someone else has requested a\npassword for your user account. However, we do not have any record of a user\nwith email {{ email }} in our database.\n\nThis mail can be safely ignored if you did not request a password reset.\n\nIf it was you, you can sign up for an account using the link below.{% endblocktrans %}\n\n{{ signup_url }}{% endautoescape %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Generating Internationalized Password Reset Email in Django Template\nDESCRIPTION: This snippet loads internationalization support, disables auto-escaping, and defines a translatable block for the password reset email subject. It ensures the email content can be localized and properly formatted.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/password_reset_key_subject.txt#2025-04-05_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Reset E-mail{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Generating Internationalized Password Reset Email Subject in Django\nDESCRIPTION: This Django template snippet loads internationalization tags, disables auto-escaping, and uses blocktrans to allow for translation of the email subject 'Password Reset E-mail'.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/unknown_account_subject.txt#2025-04-05_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Reset E-mail{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Django Email Confirmation Template with i18n Support\nDESCRIPTION: Template code that loads translation tags and renders a email confirmation message. Uses blocktrans for translation and disables autoescaping for the translated content.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/email_confirmation_subject.txt#2025-04-05_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Please Confirm Your E-mail Address{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Including Django Email Template\nDESCRIPTION: Uses Django's template include tag to import an email confirmation message template from the account/email directory.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/email_confirmation_signup_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% include \"account/email/email_confirmation_message.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Including Email Confirmation Subject Template in Django\nDESCRIPTION: Django template directive to include the email confirmation subject template from the account/email directory path.\nSOURCE: https://github.com/DevClad-Inc/devclad/blob/main/apps/server/devclad/templates/account/email/email_confirmation_signup_subject.txt#2025-04-05_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% include \"account/email/email_confirmation_subject.txt\" %}\n```"
  }
]