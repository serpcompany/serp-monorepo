[
  {
    "owner": "flexcompute",
    "repo": "tidy3d",
    "content": "TITLE: Installing Tidy3D Python Package\nDESCRIPTION: This snippet provides installation instructions for the Tidy3D Python package using pip. It includes steps for configuring the package with an API key, which is necessary for interacting with Flexcompute's servers to run simulations. The API key must be obtained from the user's account page on the Tidy3D web interface.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"pip install --user tidy3d\\ntidy3d configure --apikey=XXX\"\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D with Trimesh Support (Bash)\nDESCRIPTION: Installs Tidy3D with the `trimesh` optional dependency group, which provides support for more complex mesh handling and manipulation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npip install \"tidy3d[trimesh]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Processing Function with Autograd in Python\nDESCRIPTION: This Python function, `post_process_fn`, is used to compute the contribution to the objective function from simulation data. It leverages utility functions for amplitude retrieval and involves calculating power at waveguides. Dependencies include `autograd` for differentiable operations. The function accepts `td.SimulationData` and returns a float, using advanced calculations like softmin weights for optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport autograd.numpy as anp\n\nimport autograd as ag\n\ndef post_process_fn(sim_data: td.SimulationData) -> float:\n    \"\"\"Function called internally to compute contribution to the objective function from the data.\"\"\"\n\n    amps = [tdi.get_amps(sim_data, monitor_name=mnt.name, direction=\"+\") for mnt in monitors_out]\n    powers = [tdi.sum_abs_squared(amp) for amp in amps]\n\n    # # or, when written in more low-level syntax\n    # amps = [sim_data[mnt.name].amps.sel(direction=\"+\") for mnt in monitors_out]\n    # powers = [anp.sum(abs(anp.array(amp.values))**2) for amp in amps]\n\n    powers = anp.array(powers)\n    softmin_weights = anp.exp(-powers) / anp.sum(anp.exp(-powerss))\n    return num_output_waveguides * anp.sum(anp.array(powers) * softmin_weights)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D Locally and Configuring API Key (Bash)\nDESCRIPTION: Installs the Tidy3D Python package for the current user using pip and then configures the API key using the `tidy3d configure` command with the key provided directly. Replace `XXX` with your actual API key.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --user tidy3d\ntidy3d configure --apikey=XXX\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D in Jupyter Notebook\nDESCRIPTION: This code snippet demonstrates how to install and configure the Tidy3D Python API in a Jupyter Notebook environment. It uses the pip command with a shell escape and imports the `tidy3d.web` module for configuration. This method is suited for environments like Google Colab.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"!pip install tidy3d\\nimport tidy3d.web as web\\nweb.configure(\\\"XXX\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tidy3D Configuration File via Command Line (Bash)\nDESCRIPTION: Creates the `.tidy3d/config` file in the user's home directory and writes the API key configuration into it using shell redirection. Replace `XXX` with your actual API key. Note the use of single and double quotes.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho 'apikey = \"XXX\"' > ~/.tidy3d/config\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Simulations for Inverse Design in Tidy3D\nDESCRIPTION: Generates multiple Tidy3D simulations, each with a different source from the right side. It also plots the permittivity distribution for each simulation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsimulations = [\n    simulation.updated_copy(sources=[src], monitors=[fld_mnt, mnt_left])\n    for src in srcs_right\n]\n\nf, axes = plt.subplots(1,3,figsize=(10,4), tight_layout=True)\nfor ax, sim in zip(axes, simulations):\n    sim.plot_eps(z=0, ax=ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining and Running a Basic Tidy3D Simulation (Python)\nDESCRIPTION: A complete Python script demonstrating a basic Tidy3D workflow. It imports necessary libraries (tidy3d, numpy), optionally configures the API key, defines simulation parameters (frequency, structure, source, monitor), creates a Simulation object, runs the simulation on the Tidy3D cloud servers using `tidy3d.web.run`, saves the data, and plots the resulting electric field ('Ey') component.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# !pip install tidy3d # if needed, install tidy3d in a notebook by uncommenting this line\n\n# import the tidy3d package and configure it with your API key\nimport numpy as np\nimport tidy3d as td\nimport tidy3d.web as web\n# web.configure(\"YOUR API KEY\") # if authentication needed, uncomment this line and paste your API key here\n\n# set up global parameters of simulation ( speed of light / wavelength in micron )\nfreq0 = td.C_0 / 0.75\n\n# create structure - a box centered at 0, 0, 0 with a size of 1.5 micron and permittivity of 2\nsquare = td.Structure(\n    geometry=td.Box(center=(0, 0, 0), size=(1.5, 1.5, 1.5)),\n    medium=td.Medium(permittivity=2.0)\n)\n\n# create source - A point dipole source with frequency freq0 on the left side of the domain\nsource = td.PointDipole(\n    center=(-1.5, 0, 0),\n    source_time=td.GaussianPulse(freq0=freq0, fwidth=freq0 / 10.0),\n    polarization=\"Ey\",\n)\n\n# create monitor - Measures electromagnetic fields within the entire domain at z=0\nmonitor = td.FieldMonitor(\n    size=(td.inf, td.inf, 0),\n    freqs=[freq0],\n    name=\"fields\",\n    colocate=True,\n)\n\n# Initialize simulation - Combine all objects together into a single specification to run\nsim = td.Simulation(\n    size=(4, 3, 3),\n    grid_spec=td.GridSpec.auto(min_steps_per_wvl=25),\n    structures=[square],\n    sources=[source],\n    monitors=[monitor],\n    run_time=120/freq0,\n)\n\nprint(f\"simulation grid is shaped {sim.grid.num_cells} for {int(np.prod(sim.grid.num_cells)/1e6)} million cells.\")\n\n# run simulation through the cloud and plot the field data computed by the solver and stored in the monitor\ndata = td.web.run(sim, task_name=\"quickstart\", path=\"data/data.hdf5\", verbose=True)\nax = data.plot_field(\"fields\", \"Ey\", z=0)\n```\n\n----------------------------------------\n\nTITLE: Computing Simulation Gradient with Autograd in Tidy3D (Python)\nDESCRIPTION: Illustrates defining a differentiable objective function using standard Tidy3D components (`td.Structure`, `td.Medium`, `td.Simulation`, `td.web.run`) and computing its gradient with respect to an input parameter (`eps`) using `autograd.grad`. It shows the basic workflow for gradient-based optimization setup.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```py\ndef objective(eps: float) -> float:\n    structure = td.Structure(\n        medium=td.Medium(permittivity=eps),\n        geometry=td.Box(...),\n    )\n\n    sim = td.Simulation(\n        structures=[structure],\n        ...\n    )\n\n    data = td.web.run(sim)\n\n    return np.sum(np.abs(data[\"mode\"].amps.sel(mode_index=0))).item()\n\n# compute derivative of objective(1.0) with respect to input\nautograd.grad(objective)(1.0)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Tidy3D in Hosted Environments (Python)\nDESCRIPTION: Installs the Tidy3D package using pip (prefixed with `!` for execution in notebook environments like Google Colab) and configures the API key programmatically using the `tidy3d.web.configure` function. Replace `XXX` with your actual API key.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!pip install tidy3d\nimport tidy3d.web as web\nweb.configure(\"XXX\")\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Tidy3D Version (Bash)\nDESCRIPTION: Installs a specific version of the Tidy3D package using pip. Replace `x.y.z` with the desired version number (e.g., `2.5.0`). This is useful for ensuring compatibility or using pre-release versions.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install tidy3d==x.y.z\n```\n\n----------------------------------------\n\nTITLE: Defining Global Parameters for Tidy3D Inverse Design in Python\nDESCRIPTION: Sets fundamental parameters for the inverse design problem. This includes the operating wavelength, number of output waveguides, waveguide dimensions (ly_wg, buffer_wg), buffer spacing, material relative permittivity (eps_mat), and the simulation resolution parameters (min_steps_per_wvl, pixel_size).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# source info\nwavelength = 1.0\n\n# waveguide parameters\nnum_output_waveguides = 3\nly_wg = 0.5 * wavelength\nbuffer_wg = 0.9 * wavelength\n\n# buffer between design region, pml, and sources\nbuffer = 1 * wavelength\n\n# relative permittivity of material\neps_mat = 4.0\n\n# resolution (for both the FDTD simulation and for the design region)\nmin_steps_per_wvl = 20\npixel_size = wavelength / min_steps_per_wvl / np.sqrt(eps_mat)\n```\n\n----------------------------------------\n\nTITLE: Importing the Material Library in Python\nDESCRIPTION: Imports the `material_library` dictionary object from the `tidy3d` package. This step is necessary to access the predefined material models within the library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from tidy3d import material_library\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D on Windows using Pip (Bash)\nDESCRIPTION: Installs the latest stable version of the Tidy3D Python library for the current user within a virtual environment on Windows systems using the pip package installer. This command is identical to the Linux/MacOS one but specified in the Windows context.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --user tidy3d\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Components in Python\nDESCRIPTION: Recommends importing only the necessary components (e.g., `just_what_I_need`) from a package (`mypackage`) instead of the entire package. This practice is encouraged within the tidy3d project to improve import speed and reduce code slowdown by avoiding unnecessary loading of the full package contents.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/recommendations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mypackage import just_what_I_need\n```\n\n----------------------------------------\n\nTITLE: Integrating Tidy3D Simulation Objective into PyTorch (Python)\nDESCRIPTION: This snippet shows how to use the `@to_torch` decorator to wrap a Tidy3D objective function (`tidy3d_objective`). The function takes parameters, uses them to set up and run a Tidy3D simulation via `tidy3d.web.run`, extracts results (flux), and returns a scalar value using `autograd.numpy`. The wrapper enables PyTorch to compute gradients of this simulation-dependent objective with respect to the input `params` tensor using `.backward()`. Requires `torch`, `autograd.numpy`, `tidy3d`, `tidy3d.web`, the `to_torch` wrapper, and a user-defined `make_sim` function.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/pytorch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport autograd.numpy as anp\n\nimport tidy3d as td\nimport tidy3d.web as web\n\nfrom tidy3d.plugins.pytorch.wrapper import to_torch\n\n@to_torch\ndef tidy3d_objective(params):\n    sim = make_sim(params)\n    sim_data = web.run(sim, task_name=\"pytorch_example\")\n    flux = sim_data[\"flux\"].flux.values\n    return anp.sum(flux)\n\nparams = torch.rand(10, requires_grad=True)\ny = tidy3d_objective(params)\ny.backward()\nprint(params.grad)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Material Variant in Python\nDESCRIPTION: Demonstrates the general syntax for retrieving a specific material model variant from the `material_library`. The first key ('mat') is the abbreviated material name (e.g., 'Ag'), and the second key ('var') is the specific variant name (e.g., 'Rakic1998BB'). The result is assigned to the `medium` variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['mat']['var']\n```\n\n----------------------------------------\n\nTITLE: Configuring Tidy3D API Key Directly (Python/Shell)\nDESCRIPTION: Configures the Tidy3D API key directly using the `--apikey` flag with the `tidy3d configure` command. Replace `XXX` with the actual API key copied from the web interface.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntidy3d configure --apikey=XXX\n```\n\n----------------------------------------\n\nTITLE: Setting Tidy3D API Key via Environment Variable (Bash)\nDESCRIPTION: Sets the Tidy3D API key using the `SIMCLOUD_APIKEY` environment variable. This method allows configuration without using the `tidy3d configure` command or a config file. Replace `XXX` with your actual API key. This command is typically run in a bash shell.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SIMCLOUD_APIKEY=\"XXX\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Si3N4 Material Models in Python\nDESCRIPTION: Examples showing how to access different Si3N4 material models from the material library including Horiba, Luke2015PMLStable, Luke2015Sellmeier, and Philipp1973Sellmeier variants.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Si3N4']['Horiba']\nmedium = material_library['Si3N4']['Luke2015PMLStable']\nmedium = material_library['Si3N4']['Luke2015Sellmeier']\nmedium = material_library['Si3N4']['Philipp1973Sellmeier']\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-Compatible Objective Function with jax.numpy (Python)\nDESCRIPTION: Defines a JAX-compatible version of the objective function for adjoint simulations in Tidy3D, demonstrating correct use of jax.numpy instead of numpy for differentiable computations. This function computes a permittivity array, runs the simulation, extracts the amplitude from monitor data, and returns the squared amplitude as the objective. All intermediate operations must use jax.numpy to preserve the computational graph for autograd. Dependencies: JAX (imported as jnp), tidy3d, Tidy3D adjoint API, correctly set up simulation monitors. Inputs are parameter vectors; outputs are scalars calculated from simulation monitors. Limitations: Incorrectly using numpy will prevent JAX autodiff.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/adjoint/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport jax.numpy as jnp\n\ndef f(p):\n    permittivity = jnp.square(p)\n    sim = make_sim(permittivity)\n    sim_data = run(sim)\n    amp = sim_data['mode'].amps.sel(direction=\"+\", f=f0, mode_index=0)\n    return jnp.square(abs(amp))\n\n```\n\n----------------------------------------\n\nTITLE: Testing Tidy3D API Configuration (Python)\nDESCRIPTION: Imports the `tidy3d.web` module (if not already imported) and calls the `web.test()` function to verify that the Tidy3D installation and API key configuration are working correctly.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport tidy3d.web as web # if needed\nweb.test()\n```\n\n----------------------------------------\n\nTITLE: Using Functions for Tidy3D Expressions in Python\nDESCRIPTION: This example demonstrates the use of mathematical functions like `Sin` and `Cos` provided by the Tidy3D expressions module to create complex expressions. The functions take metrics as input and return a new expression.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.expressions import Sin, Cos\n\nf = Sin(mode_coeff) + Cos(mode_power)\n```\n\n----------------------------------------\n\nTITLE: Defining a Differentiable Photonic Simulation Pipeline with Adjoint Tidy3D (Python)\nDESCRIPTION: Defines the expected user function structure for running differentiable photonic simulations using Tidy3D’s adjoint plugin in a JAX workflow. The function constructs a JaxSimulation, runs it through the adjoint-compatible runner, and post-processes the result for downstream use (e.g., in optimization loops). Dependencies: tidy3d, tidy3d.plugins.adjoint.web (run), JAX, proper JaxSimulation and monitor setup. Inputs are parameter vectors, and outputs are scalar/objective values. The snippet demonstrates best practice patterns for adjoint simulations in Tidy3D, and illustrates how monitor data can be accessed flexibly from returned simulation data objects.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/adjoint/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef f(p):\n\n    # make_sim returns JaxSimulation with appropriate `JaxStructures`\n    jax_sim = make_sim(p)\n\n    # run is the run imported from td.plugins.adjoint.web\n    jax_sim_data = run(jax_sim)\n\n    # postprocess initially grabs the data using\n    #      sim_data.output_data[mnt_index]\n    #   or sim_data.output_montior_data[mnt_name]\n    #   or sim_data[mnt_name]\n    return postproces(sim_data)\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D with Multiple Optional Dependencies (Bash)\nDESCRIPTION: Installs Tidy3D with multiple optional dependency groups simultaneously using pip. This example installs both the `design` plugin and `trimesh` support.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npip install \"tidy3d[design,trimesh]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Design Region in Tidy3D Invdes Plugin using Python\nDESCRIPTION: Defines the optimizable design region using the `tdi.TopologyDesignRegion`. It specifies the geometric properties (size, center), the bounds for permittivity (`eps_bounds`), the pixel size for discretization (`pixel_size`), parameter transformations (`tdi.FilterProject` for filtering and projection), and penalties (`tdi.ErosionDilationPenalty` for feature size control). This object encapsulates the definition of the structure part that will be modified during optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# transformations on the parameters that lead to the material density array (0,1)\nfilter_project = tdi.FilterProject(radius=0.120, beta=10.0)\n\n# penalties applied to the state of the material density, after these transformations are applied\npenalty = tdi.ErosionDilationPenalty(weight=0.8, length_scale=0.120)\n\ndesign_region = tdi.TopologyDesignRegion(\n        size=(lx_des, ly_des, td.inf),\n        center=(0, 0, 0),\n        eps_bounds=(1.0, eps_mat), # the minimum and maximum permittivity values in the last grid\n        transformations=[filter_project],\n        penalties=[penalty],\n        pixel_size=pixel_size,\n    )\n```\n\n----------------------------------------\n\nTITLE: Comparing JAX grad and value_and_grad for Differentiable Simulation (Python)\nDESCRIPTION: Compares the usage patterns and computational cost of jax.grad versus jax.value_and_grad for evaluating both objective and gradient in the context of Tidy3D adjoint simulations. The code demonstrates that jax.grad evaluates f(p) two times (once for value, once for gradient), whereas value_and_grad only evaluates the forward pass once, making it preferable when both value and gradient are required. Dependencies: JAX, prior definition of differentiable function f, proper parameter vector p. Expected input is p; outputs are scalar objective values and gradients.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/adjoint/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport jax\n\n# option 1: grad\ng = jax.grad(f)\nfp = f(p) # evaluates f(p)\ngp = g(p) # re-evaluates f(p) and its backwards pass in the VJP\n\n# option 2: value_and_grad\nv_and_g = jax.value_and_grad(f)\nfp, gp = v_and_g(p) # evaluates f(p) and backwards pass only once\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tidy3D in Python Code (Python)\nDESCRIPTION: Standard Python import statement used to import the Tidy3D library within a Python script or IDE, typically aliased as `td` for convenience.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport tidy3d as td\n```\n\n----------------------------------------\n\nTITLE: Creating a DesignSpace from Parameters and Method in Python\nDESCRIPTION: Combines previously defined parameters and method into a DesignSpace object, which manages the sampling and coordinates the evaluation of the target function. 'parameters' expects a list of parameter objects, while 'method' specifies the sampling or optimization technique.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndesign_space = tdd.DesignSpace(parameters=[param_n, param_r], method=method)\n```\n\n----------------------------------------\n\nTITLE: Setting SIMCLOUD_API_KEY in Environment - Bash\nDESCRIPTION: Sets the SIMCLOUD_API_KEY environment variable to enable authentication for Tidy3D's cloud API. No additional dependencies are required except a valid API key. Used prior to running tidy3d commands that require authentication.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SIMCLOUD_API_KEY=\"your_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D with Optional Dependencies (Bash)\nDESCRIPTION: Shows the general syntax for installing Tidy3D along with an optional dependency group using pip. Replace `dependency_group` with the specific group name (e.g., `gdspy`, `trimesh`, `vtk`).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install \"tidy3d[dependency_group]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Base Simulation Components in Tidy3D using Python\nDESCRIPTION: Constructs the static (non-optimizable) parts of the Tidy3D simulation. It defines the input waveguide (`waveguide_in`), calculates the center positions for the output waveguides, creates the output waveguides (`waveguides_out`) and corresponding mode monitors (`monitors_out`) iteratively. It also defines the mode source (`source`) and a field monitor (`fld_mnt`) for visualization. Finally, it assembles all these components into a `td.Simulation` object, specifying simulation size, grid, boundary conditions, run time, structures, sources, and monitors.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwaveguide_in = td.Structure(\n    geometry=td.Box(\n        size=(Lx, ly_wg, td.inf),\n        center=(-Lx + 2 * buffer, 0, 0),\n    ),\n    medium=medium,\n)\n\ny_max_wg_centers = ly_des / 2 - buffer_wg / 2 - ly_wg / 2\nwg_y_centers_out = np.linspace(-y_max_wg_centers, y_max_wg_centers, num_output_waveguides)\n\n# put a waveguide and mode monitor at each of the outputs\nwaveguides_out = []\nmonitors_out = []\nfor i, wg_y_center in enumerate(wg_y_centers_out):\n\n    wg_out = td.Structure(\n        geometry=td.Box(\n            size=(Lx, ly_wg, td.inf),\n            center=(Lx - 2 * buffer, wg_y_center, 0),\n        ),\n        medium=medium,\n    )\n\n    waveguides_out.append(wg_out)\n\n    mnt_out = td.ModeMonitor(\n        size=(0, ly_wg + 1.8 * buffer_wg, td.inf),\n        center=(x_mnt, wg_y_center, 0),\n        freqs=[freq0],\n        name=output_monitor_name(i),\n        mode_spec=mode_spec,\n    )\n\n    monitors_out.append(mnt_out)\n\nsource = td.ModeSource(\n    size=(0, ly_wg + 1.8 * buffer_wg, td.inf),\n    center=(x_src, 0, 0),\n    source_time=td.GaussianPulse(freq0=freq0, fwidth=fwidth),\n    mode_index=0,\n    direction=\"+\",\n)\n\n# used to visualize fields in the plane, not for optimization\nfld_mnt = td.FieldMonitor(\n    center=(0,0,0),\n    size=(td.inf, td.inf, 0),\n    freqs=[freq0],\n    name=field_mnt_name,\n)\n\nsimulation = td.Simulation(\n    size=(Lx, Ly, 0),\n    grid_spec=grid_spec,\n    boundary_spec=td.BoundarySpec.pml(x=True, y=True, z=False),\n    run_time=run_time,\n    structures=[waveguide_in] + waveguides_out,\n    sources=[source],\n    monitors=[fld_mnt] + monitors_out,\n)\n```\n\n----------------------------------------\n\nTITLE: Running Adjoint Simulation via Web API in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.web.run` function, likely used to execute an adjoint simulation synchronously through the Tidy3D web API.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.web.run\n```\n\n----------------------------------------\n\nTITLE: Configuring tidy3d API Key via CLI - Bash\nDESCRIPTION: Runs the Tidy3D command line tool to prompt the user to enter their API key interactively. Assumes tidy3d is installed and available on the command line. Stores the API key for subsequent cloud operations.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntidy3d configure\n```\n\n----------------------------------------\n\nTITLE: Extending Tidy3D Expressions with Custom Metrics\nDESCRIPTION: Provides instructions on creating new metrics by subclassing the `Metric` base class in Tidy3D. Users must define necessary attributes and implement the `evaluate` method to enable custom metric functionality.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.expressions.metrics import Metric\n\nclass CustomMetric(Metric):\n    monitor_name: str\n\n    def evaluate(self, data: SimulationData) -> NumberType:\n        # Implement custom evaluation logic\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Tidy3D Configuration File Content (Bash)\nDESCRIPTION: Shows the required content format for manually creating the Tidy3D configuration file ($HOME/.tidy3d/config) on Windows if automatic configuration fails. The API key should replace 'XXX'.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napikey = \"XXX\"\n```\n\n----------------------------------------\n\nTITLE: Creating Conda/Mamba Environment for Tidy3D (Bash)\nDESCRIPTION: Creates a new Conda/Mamba virtual environment named `tidy3d_env` with Python version 3.10 installed from the conda-forge channel. This isolates the Tidy3D installation from other Python projects.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmamba create –n tidy3d_env python==3.10 -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Loading the Horiba Aluminum Nitride (AlN) Variant in Python\nDESCRIPTION: Example of loading the 'Horiba' variant for Aluminum Nitride ('AlN') from the `material_library` into the `medium` variable. This is the default variant.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AlN']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Importing Inverse Design Classes and Utilities in Python\nDESCRIPTION: This code snippet shows the import structure for various classes and utility functions in the Inverse Design plugin. It includes classes for filtering, penalties, design regions, optimization, and result handling, as well as utility functions for field manipulation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/invdes.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tidy3d.plugins.invdes import FilterProject\nfrom tidy3d.plugins.invdes import ErosionDilationPenalty\nfrom tidy3d.plugins.invdes import TopologyDesignRegion\nfrom tidy3d.plugins.invdes import InverseDesign\nfrom tidy3d.plugins.invdes import InverseDesignMulti\nfrom tidy3d.plugins.invdes import InverseDesignResult\nfrom tidy3d.plugins.invdes import AdamOptimizer\nfrom tidy3d.plugins.invdes.utils import get_amps\nfrom tidy3d.plugins.invdes.utils import get_field_component\nfrom tidy3d.plugins.invdes.utils import get_intensity\nfrom tidy3d.plugins.invdes.utils import sum_array\nfrom tidy3d.plugins.invdes.utils import sum_abs_squared\nfrom tidy3d.plugins.invdes.utils import get_phase\n```\n\n----------------------------------------\n\nTITLE: Tidy3D Configuration File Content (Text)\nDESCRIPTION: Shows the required content format for the Tidy3D configuration file (`.tidy3d/config` in the user's home directory). The file should contain the API key assigned to the `apikey` variable. Replace `XXX` with your actual API key.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\napikey = \"XXX\"\n```\n\n----------------------------------------\n\nTITLE: Installing tidy3d Development Dependencies with Poetry\nDESCRIPTION: This command sequence navigates into the `tidy3d` project directory and uses `poetry` to install the package along with all specified development dependencies defined in `poetry.lock`. This ensures a reproducible development environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tidy3d/\npoetry install -E dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Calcium Fluoride (CaF2, Horiba variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Horiba' variant of the Calcium Fluoride (CaF2) material model from the `material_library`. This variant is a 1-pole, lossless model valid for the 0.26 - 1.65 µm wavelength range, based on the Horiba Lorentz Dispersion Model technical note.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['CaF2']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Tidy3D Inverse Design in Python\nDESCRIPTION: Imports essential Python libraries for the inverse design task: `matplotlib.pylab` for plotting, `numpy` for numerical operations, `tidy3d` as `td` for core Tidy3D functionalities, and the `tidy3d.plugins.invdes` plugin as `tdi` for inverse design specific tools.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pylab as plt\nimport numpy as np\n\nimport tidy3d as td\nimport tidy3d.plugins.invdes as tdi\n```\n\n----------------------------------------\n\nTITLE: Installing tidy3d-beta from test-PyPI - Bash\nDESCRIPTION: Installs the tidy3d-beta package from the test.pypi.org simple index using pip and Python 3.9. Used to verify installs from the test repository, either in general or for a specific version. Helps test packaging and dependency resolution without affecting official PyPI.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3.9 -m pip install --index-url https://test.pypi.org/simple/ tidy3d-beta\n```\n\n----------------------------------------\n\nTITLE: Accessing the Default Material Variant from Tidy3D Library in Python\nDESCRIPTION: Shows how to access the default variant of a material ('mat') from the `rf_material_library` using the `.medium` attribute. The resulting medium object is assigned to the 'medium' variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = rf_material_library['mat'].medium\n```\n\n----------------------------------------\n\nTITLE: Running Initial Simulation with Visualization in Python\nDESCRIPTION: In this snippet, `to_simulation_data` is called to generate `SimulationData`, which is then visualized by plotting the field intensity. The function `plot_field` is used to render the electric field squared in magnitude.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsim_data = design.to_simulation_data(params=params0, task_name=\"inspect\")\n\nax = sim_data.plot_field(field_mnt_name, field_name=\"E\", val=\"abs^2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Metrics with Tidy3D Expressions in Python\nDESCRIPTION: This snippet demonstrates how to initialize metric objects like `ModeAmp` and `ModePower` using the Tidy3D expressions module. These objects represent predefined metrics that can be used in creating expressions. They require a `monitor_name` and frequency (`freqs`) as inputs.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.expressions import ModeAmp, ModePower\n\n# Create a ModeAmp metric\nmode_coeff = ModeAmp(monitor_name=\"monitor1\", freqs=[1.0])\n\n# Create a ModePower metric\nmode_power = ModePower(monitor_name=\"monitor2\", freqs=[1.0])\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Tidy3D for Development - Bash\nDESCRIPTION: Clone the Tidy3D repository, set up the required Python environment, install the package locally in editable mode, and leverage built-in CLI tools for development. Assumes Python and pip are already installed, and the user has access to the desired branch. Key commands include initializing the local environment and verifying installation with the Tidy3D CLI.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flexcompute/tidy3d.git\ncd tidy3d\n# Make sure you\\'re in a branch > pre/2.6 and you can `import tidy3d` in python\npip install -e . # or whatever local installation works for you\ntidy3d develop # Read all the new development helper commands\n# tidy3d develop uninstall-dev-envrionment # in case you need to reset your environment\ntidy3d develop install-dev-environment # install all requirements that you don\\'t have and verify the exisiting ones\npoetry run tidy3d develop verify-dev-environment # reproducibly verify development envrionment\n# poetry run tidy3d develop build-docs # eg. reproducibly build documentation\n```\n\n----------------------------------------\n\nTITLE: Accessing Fused Silica Material in Python\nDESCRIPTION: Examples of accessing different variants of Fused Silica material from the material library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['FusedSilica']['ZemaxPMLStable']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['FusedSilica']['ZemaxSellmeier']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['FusedSilica']['ZemaxVisiblePMLStable']\n```\n\n----------------------------------------\n\nTITLE: Verifying Tidy3D Authentication\nDESCRIPTION: This snippet is used to verify the authentication setup for the Tidy3D Python API. The command runs a Python script to import the Tidy3D package and test the web interface configuration. A successful run indicates that the API key has been correctly configured.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"python -c \\\"import tidy3d; tidy3d.web.test()\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Standard tidy3d Frontend Tests with Poetry\nDESCRIPTION: Executes the standard frontend tests for `tidy3d` using a development utility command run via `poetry`. Requires being in the project root.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop test-base\n```\n\n----------------------------------------\n\nTITLE: Writing API Key to Config File - Bash\nDESCRIPTION: Appends the API key directly to the user's Tidy3D config file using echo and file redirection. Requires write permissions to ~/.tidy3d/config and a valid API key string. Used as a manual alternative method for configuring authentication.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 'apikey = \"your_api_key\"' > ~/.tidy3d/config\n```\n\n----------------------------------------\n\nTITLE: Listing Available Variants for a Material in Tidy3D Library (Python)\nDESCRIPTION: Prints the keys of the available variants for a specified material ('mat') within the `rf_material_library`. This helps in identifying the possible variant names (like 'design', 'process') for a given material.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> print(rf_material_library['mat'].variants.keys())\n```\n\n----------------------------------------\n\nTITLE: Importing Gradient Function from Autograd (Python)\nDESCRIPTION: Shows how to import the `autograd` library and use its `grad` function for automatic differentiation with the new Tidy3D integration. This replaces the `jax.grad` import when migrating.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport autograd\nautograd.grad(f)\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Indium Tin Oxide from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Indium Tin Oxide (ITO) from the material library. Only one variant is available: 'Horiba' (default, 1-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['ITO']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Configuring Tidy3D Interactively (Python/Shell)\nDESCRIPTION: Runs the interactive `tidy3d configure` command. This command prompts the user to paste their API key to link the Tidy3D installation with their user account.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntidy3d configure\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Simulation Optimization and Plotting Results in Tidy3D\nDESCRIPTION: Continues the optimization process from a previous history and plots the optimization results for the multi-simulation inverse design problem.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresults_multi = optimizer.continue_run_from_history()\n\nresults_multi.plot_optimization()\n```\n\n----------------------------------------\n\nTITLE: Using Poetry with an External Mamba Virtual Environment\nDESCRIPTION: These commands demonstrate how to create a virtual environment using `mamba`, activate it, and configure `poetry` to use the Python interpreter from this external environment. This allows combining `poetry`'s dependency management with a `mamba`-managed environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmamba create -n tidy3denv python==3.10 # create venv with mamba\nmamba activate tidy3denv # activate the venv\npoetry env use python # using the mamba venv python now\npoetry env info # verify the venvs used by poetry and mamba\ncd anywhere\n# you can use the python activated venv anywhere.\n```\n\n----------------------------------------\n\nTITLE: Accessing Amorphous Silicon (aSi, Horiba variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'Horiba' variant of the Amorphous Silicon (aSi) material model from the `material_library`. This variant is described as a 1-pole, lossy model valid for the 0.21 - 0.83 µm wavelength range.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['aSi']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Importing Autograd NumPy Wrapper (Python)\nDESCRIPTION: Demonstrates importing the `autograd.numpy` module as `anp`. This provides Autograd-compatible versions of NumPy functions necessary for differentiation within Autograd-traced functions, replacing `jax.numpy` in the new integration.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport autograd.numpy as anp\nanp.sum(...)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Running an Optimizer in Python\nDESCRIPTION: This snippet sets up an `AdamOptimizer` for optimizing an inverse design problem. It takes in the design object, number of steps, learning rate, and saves progress to a cache file for recovery purposes. Running the optimizer employs gradient ascent to solve the design problem.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\noptimizer = tdi.AdamOptimizer(\n    design=design,\n    num_steps=12,\n    learning_rate=0.3,\n    results_cache_fname=\"data/invdes_history.pkl\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = optimizer.run(params0, post_process_fn=post_process_fn)\n```\n\n----------------------------------------\n\nTITLE: Batch Replacement Mapping for Tidy3D CLI - JSON\nDESCRIPTION: This JSON file defines versioned mappings for the Tidy3D 'replace-in-files' CLI utility. Each top-level key is a version string, mapping to a dictionary of string replacements: the key is the target string to find, the value is the string to replace it with. This config enables consistent updates across multiple code files for specific API versions. Input: consumed by the CLI utility, Output: guides string replacements in docs or code. Constraints: all keys/values must be valid strings, and the structure must match shown example.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/documentation.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"0.18.0\\\": {\\n    \\\"tidy3d.someuniquestringa\\\": \\\"tidy3d.someuniquestring2\\\",\\n    \\\"tidy3d.someuniquestringb\\\": \\\"tidy3d.someuniquestring2\\\",\\n    \\\"tidy3d.someuniquestringc\\\": \\\"tidy3d.someuniquestring2\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Development Environment Verification with Tidy3D CLI - Bash\nDESCRIPTION: Verify that your environment matches the reproducible development environment using the Tidy3D CLI. Checks versions and presence of required tools like poetry, pipx, and pandoc. Useful after manual installations to ensure compatibility.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntidy3d develop verify-dev-environment\n```\n\n----------------------------------------\n\nTITLE: Install Poetry on Ubuntu With pipx - Bash\nDESCRIPTION: Install Poetry using pipx in Ubuntu environments. Ensures reproducible Python dependency management. Prerequisite: pipx installed and configured.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pipx install poetry\n```\n\n----------------------------------------\n\nTITLE: Loading the Horiba Aluminum Gallium Nitride (AlGaN) Variant in Python\nDESCRIPTION: Example of loading the 'Horiba' variant for Aluminum Gallium Nitride ('AlGaN') from the `material_library` into the `medium` variable. This is the default variant.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AlGaN']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, JohnsonChristy1972 variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'JohnsonChristy1972' variant of the Gold (Au) material model from the `material_library`. This variant is a 5-pole, lossy model valid for the 0.19 - 1.94 µm wavelength range, based on Johnson and Christy (1972).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['JohnsonChristy1972']\n```\n\n----------------------------------------\n\nTITLE: Executing a Design Space Run and Accessing Results in Python\nDESCRIPTION: Runs the parameter scan or optimization over the defined DesignSpace using the specified transmission function, storing results in a Result object. It demonstrates conversion of results to a DataFrame for analysis, printing sample rows, and plotting a hexbin plot to visualize outputs. Requires pandas, matplotlib.pyplot, and Tidy3D dependencies.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresults = design_space.run(transmission)\n\n# print the first 5 data points\nprint(results.to_dataframe().head())\n    r               n    output\n0   0.42            5    0.7803\n1   0.50            1    0.5513\n2   0.22            2    0.6342\n3   0.17            3    0.7534\n4   0.37            1    0.9162\n\n# plot a hexagonal bin of the results\nim = results.hexbin(x=\"r\", y=\"n\", C=\"output\")\nplt.show()\n\n```\n\n----------------------------------------\n\nTITLE: Defining Integer and Float Parameters for Design Space in Python\nDESCRIPTION: Creates two parameter objects using the Tidy3D Design plugin: one for an integer ('n'), and another for a float ('r'), each with specified spans (valid value intervals). These are required when setting up a DesignSpace to define the dimensions over which parameter scanning or optimization is performed. Inputs are parameter names and allowed ranges; outputs are Parameter objects registered for later use.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparam_n = tdd.ParameterInt(name='n', span=(0, 5))\nparam_r = tdd.ParameterFloat(name='r', span=(0.1, 0.5))\n\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Simulation Setup for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxSimulation` class, used to define and configure a Tidy3D simulation setup that is compatible with JAX for adjoint optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxSimulation\n```\n\n----------------------------------------\n\nTITLE: Listing Spatially Varying Dispersive Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet employs the `autosummary` directive to list and generate documentation for spatially varying custom dispersive medium classes (`CustomPoleResidue`, `CustomLorentz`, `CustomSellmeier`, `CustomDrude`, `CustomDebye`) within the `tidy3d` Python library. `toctree` and `template` options are set for Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.CustomPoleResidue\n   tidy3d.CustomLorentz\n   tidy3d.CustomSellmeier\n   tidy3d.CustomDrude\n   tidy3d.CustomDebye\n```\n\n----------------------------------------\n\nTITLE: Install Poetry on macOS/Windows With pipx - Bash\nDESCRIPTION: Install Poetry in user-wide scope using pipx, for both macOS and Windows platforms. Adds Poetry to the user's executable path, assuming pipx is correctly configured.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npipx install poetry\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests within Poetry Environment\nDESCRIPTION: Executes the `pytest` test runner within the `poetry` managed environment. Requires being in the project root directory where `pyproject.toml` is located.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, Olmon2012evaporated variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Olmon2012evaporated' variant of the Gold (Au) material model from the `material_library`. This variant is a 3-pole, lossy model valid for the 0.3 - 24.93 µm wavelength range, based on Olmon et al. (2012) evaporated film data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['Olmon2012evaporated']\n```\n\n----------------------------------------\n\nTITLE: Accessing FR4 'standard' Variant in Python\nDESCRIPTION: Example code accessing the 'standard' variant (default) of the FR4 material from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['FR4']['standard']\n```\n\n----------------------------------------\n\nTITLE: Mixing Positional and Keyword Arguments in Tidy3D\nDESCRIPTION: This snippet demonstrates the use of both positional and keyword arguments in evaluating expressions that include a mix of unnamed and named variables. Proper argument passing is required to avoid errors during evaluation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a mix of named and unnamed variables\nx = Variable(name=\"x\")\ny = Variable()\nexpr = x**2 + y**2\n\nresult = expr(3, y=4)  # x = 3, y = 4\n\nprint(result)  # Outputs: 25\n```\n\n----------------------------------------\n\nTITLE: Converting Design Region to Tidy3D Structure in Python\nDESCRIPTION: Demonstrates how to convert the `TopologyDesignRegion` object into a standard `td.Structure` object using a specific set of design parameters. It calls the `to_structure` method on the `design_region` instance, passing the initialized `params0` array as input.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstructure = design_region.to_structure(params0)\n```\n\n----------------------------------------\n\nTITLE: Listing Spatially Varying Non-Dispersive Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to generate a documentation entry for the spatially varying `CustomMedium` class within the `tidy3d` Python library. It specifies a `toctree` subdirectory (`_autosummary/`) and a `template` (`module.rst`) for the generated documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.CustomMedium\n```\n\n----------------------------------------\n\nTITLE: Running Batch Mode Solvers Concurrently in Python\nDESCRIPTION: Shows the function call `tidy3d.plugins.mode.web.run_batch()` used to execute a batch of `ModeSolver` objects concurrently, leveraging Tidy3D's web functionalities for parallel processing.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntidy3d.plugins.mode.web.run_batch()\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Using Poetry CLI - Bash\nDESCRIPTION: This command invokes the Tidy3D documentation build process with Poetry, assuming both Poetry and the Tidy3D development CLI are installed. 'poetry run tidy3d develop build-docs' triggers the build and outputs results to the '_docs/' directory, enabling local HTML preview. Prerequisites include installed Poetry and Tidy3D development CLI. Input: none, Output: compiled documentation in '_docs/'.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/documentation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop build-docs\n```\n\n----------------------------------------\n\nTITLE: Accessing Chromium Material in Python\nDESCRIPTION: Examples of accessing different variants of Chromium material from the material library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Cr']['Rakic1998BB']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Cr']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Accessing FR4 'lowloss' Variant in Python\nDESCRIPTION: Example code accessing the 'lowloss' variant of the FR4 material from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['FR4']['lowloss']\n```\n\n----------------------------------------\n\nTITLE: Evaluating Tidy3D Expressions with SimulationData\nDESCRIPTION: This example shows how to evaluate an expression using `SimulationData` in Tidy3D. The `evaluate` method or direct invocation of the expression object is used to obtain results from simulation data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Assume \"data\" is a SimulationData object obtained from a simulation\nresult = f.evaluate(data)\n\n# ...or just\nresult = f(data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Categorical Parameter Using ParameterAny in Python\nDESCRIPTION: Shows how to define a parameter that takes on a set of discrete string values using ParameterAny. This allows for parameter scans across categorical choices. 'name' corresponds to the parameter, and 'values' is a tuple of admissible values.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nparam_str = tdd.ParameterAny(name=\"n\", values=(\"these\", \"are\", \"values\"))\n```\n\n----------------------------------------\n\nTITLE: Converting ModeSolverData to DataFrame in Python\nDESCRIPTION: Method to convert ModeSolverData to a DataFrame for a convenient summary of various modal properties of the computed modes in the Tidy3D project.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nModeSolverData.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Accessing MoS2 Material from Library in Python\nDESCRIPTION: This snippet demonstrates how to access the 'Li2014' variant of MoS2 from the material library. This model is valid for wavelengths between 0.42 and 0.83 μm and uses a Medium2D model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['MoS2']['Li2014']\n```\n\n----------------------------------------\n\nTITLE: Recursively Updating Tidy3D Model Sub-components in Python\nDESCRIPTION: Demonstrates using the `updated_copy()` method with the `path` argument to recursively update nested components within a Tidy3D simulation object (`sim`). This example updates the `geometry` of the first structure (`structures[0]`) with a `new_size`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsim2 = sim.updated_copy(size=new_size, path=\"structures/0/geometry\")\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Pytest (Bash)\nDESCRIPTION: Runs the entire test suite located in the `tests/` directory using pytest, managed via Poetry. Pytest discovers and executes functions named `test*` within files named `test*.py`. The optional `-rA` flag provides a detailed summary report showing results for all tests (passed, failed, skipped, errors).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest -rA tests\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, Olmon2012Drude variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'Olmon2012Drude' variant of the Gold (Au) material model from the `material_library`. This variant is a 3-pole, lossy model valid for the 1.24 - 24.93 µm wavelength range, based on Olmon et al. (2012) Drude model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['Olmon2012Drude']\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO3003 'process' Variant in Python\nDESCRIPTION: Example code accessing the 'process' variant of the Rogers RO3003 material ('RO3003') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO3003']['process']\n```\n\n----------------------------------------\n\nTITLE: Using Jax-prefixed Classes from Adjoint Plugin (Python)\nDESCRIPTION: Shows the previous method for defining differentiable components using the `tidy3d.plugins.adjoint` plugin, which required importing the plugin namespace (`tda`) and using special classes prefixed with `Jax_`, like `tda.JaxStructure`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport tidy3d.plugins.adjoint as tda\ntda.JaxStructure(...)\n```\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Box Structure for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxBox` class, representing a geometric box structure compatible with JAX for use in adjoint optimization workflows.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxBox\n```\n\n----------------------------------------\n\nTITLE: Accessing PMMA Material Variants\nDESCRIPTION: Examples showing how to access different variants of PMMA material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PMMA']['Horiba']\nmedium = material_library['PMMA']['Sultanova2009']\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D Design Plugin Dependencies (Bash)\nDESCRIPTION: Installs Tidy3D along with the necessary dependencies for the `design` plugin, used for design space exploration and optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip install \"tidy3d[design]\"\n```\n\n----------------------------------------\n\nTITLE: Sample Pytest Test Functions in Python\nDESCRIPTION: Example Python code demonstrating Pytest test functions, including keyword matches used by the '-k' option.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_my_test():\n    # tested\n    pass\n\ndef test_xmy_testx():\n    # tested\n    pass\n\ndef test_test_other():\n    # not tested\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Processing Function for Multi-Simulation Optimization in Tidy3D\nDESCRIPTION: Implements a post-processing function that calculates the total power going left at the single waveguide monitor across all simulations. This function is used to compute the objective for optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef post_process_fn(batch_data: dict[str, td.SimulationData]) -> float:\n    ```Grab the power going left at the single waveguide monitor```\n    power_left = 0.0\n    for _, sim_data in batch_data.items():\n        amps = tdi.get_amps(sim_data, monitor_name=mnt_name_left, direction=\"-\")\n        power = tdi.sum_abs_squared(amps)\n\n        # # or, when written in more low-level syntax\n        # amp = sim_data[mnt_name_left].amps.sel(direction=\"-\")\n        # power = abs(anp.sum(anp.array(amp.values)))**2\n\n        power_left += power\n    return power_left\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO3010 'process' Variant in Python\nDESCRIPTION: Example code accessing the 'process' variant of the Rogers RO3010 material ('RO3010') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO3010']['process']\n```\n\n----------------------------------------\n\nTITLE: Wrapping Basic Autograd Function for PyTorch Compatibility (Python)\nDESCRIPTION: This snippet demonstrates the basic usage of the `@to_torch` decorator from `tidy3d.plugins.pytorch.wrapper`. It converts a simple function (`my_function`) defined using `autograd.numpy` into a function that can accept PyTorch tensors, perform calculations, and allow PyTorch to compute gradients via `.backward()`. Dependencies include `torch`, `autograd.numpy`, and the `to_torch` wrapper.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/pytorch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport autograd.numpy as anp\n\nfrom tidy3d.plugins.pytorch.wrapper import to_torch\n\n@to_torch\ndef my_function(x):\n    return anp.sum(anp.sin(x)**2)\n\nx = torch.rand(10, requires_grad=True)\ny = my_function(x)\ny.backward()  # backward works as expected, even though the function is defined in terms of autograd.numpy\nprint(x.grad)  # gradients are available in the input tensor\n```\n\n----------------------------------------\n\nTITLE: Accessing Simulation Plotly Visualization in Python\nDESCRIPTION: Method to generate a plotly figure showing the cross-section of a Tidy3D simulation. This visualization helps inspect the simulation geometry before running it.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nSimulation.plotly()\n```\n\n----------------------------------------\n\nTITLE: Calculating Derived Simulation Parameters in Python\nDESCRIPTION: Calculates various simulation parameters derived from the global parameters. This includes spectral information (center frequency `freq0`, frequency width `fwidth`, run time), dimensions of the design region (`ly_des`, `lx_des`), total simulation size (`Lx`, `Ly`), locations for source (`x_src`) and monitors (`x_mnt`), defines the material `td.Medium`, sets up the `td.GridSpec`, defines a helper function for naming output monitors, sets the field monitor name, and specifies the `td.ModeSpec`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# spectral information\nfreq0 = td.C_0 / wavelength\nfwidth = freq0 / 10\nrun_time = 50 / fwidth\n\n# design region size in y\nly_des = num_output_waveguides * (ly_wg + buffer_wg)\nlx_des = 4 * wavelength\n\n# simulation size\nLx = 2 * buffer + lx_des + 2 * buffer\nLy = buffer + ly_des + buffer\n\n# source and monitor locations\nx_src = -lx_des/2 - buffer\nx_mnt = -x_src\n\n# material Medium\nmedium = td.Medium(permittivity=eps_mat)\n\n# grid spec\ngrid_spec = td.GridSpec.auto(wavelength=wavelength, min_steps_per_wvl=min_steps_per_wvl)\n\n# monitor names\ndef output_monitor_name(i: int) -> str:\n    return f\"MNT_{i}\"\n\nfield_mnt_name = \"field\"\n\n# mode spec\nmode_spec = td.ModeSpec(num_modes=1)\n```\n\n----------------------------------------\n\nTITLE: Accessing PTFE Material\nDESCRIPTION: Example showing how to access PTFE (Teflon) material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PTFE']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Creating Inverse Design Objects in Python\nDESCRIPTION: This snippet demonstrates creating an `InverseDesign` object in Python using the Tidy3D framework. The object encapsulates the simulation, design region, and task name for an inverse design problem. The `output_monitor_names` parameter specifies which monitors to use, ensuring clarity by avoiding warnings during optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndesign = tdi.InverseDesign(\n    simulation=simulation,\n    design_region=design_region,\n    task_name=\"invdes\",\n    output_monitor_names=[mnt.name for mnt in monitors_out],\n)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking tidy3d Package Operations via Poetry\nDESCRIPTION: Provides the command-line instruction to run benchmarking utilities within the tidy3d project using Poetry. This command executes the `benchmark-timing-operations` script in the development environment to measure and understand where computational resources are expended during various operations, helping to optimize package performance and import speed. Requires Poetry and the tidy3d project environment to be set up.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/recommendations.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npoetry run tidy3d develop benchmark-timing-operations\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO4003C 'process' Variant in Python\nDESCRIPTION: Example code accessing the 'process' variant of the Rogers RO4003C material ('RO4003C') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO4003C']['process']\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO4350B 'design' Variant in Python\nDESCRIPTION: Example code accessing the 'design' variant (default) of the Rogers RO4350B material ('RO4350B') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO4350B']['design']\n```\n\n----------------------------------------\n\nTITLE: Applying Phase to FieldData in Python\nDESCRIPTION: Method to multiply field data by a phase in the Tidy3D project's FieldData class.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nFieldData.apply_phase(phase)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simulation-Based Transmission Function in Python\nDESCRIPTION: Defines a function 'transmission' that models the transmission of a system as a function of sphere count and radius, performing simulation and data aggregation via Tidy3D's API (pseudo-code used for brevity). Dependencies include 'make_spheres', 'td.Simulation', 'web.run', and 'np.sum'. Input arguments are integers and floats representing parameters; the function returns a float output.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef transmission(n: int, r: float) -> float:\n\t\"\"\"Transmission as a function of number of spheres and radius.\"\"\"\n\tspheres = make_spheres(num_spheres=n, radius=r)\n\tsim = td.Simulation(structures=spheres, ...)\n\tdata = web.run(sim, ...)\n\treturn np.sum(data['flux'])\n```\n\n----------------------------------------\n\nTITLE: Accessing WS2 Material Properties in Python\nDESCRIPTION: Example of accessing the Li2014 variant of WS2 material from the material library. Valid for wavelengths between 0.42-0.83 μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['WS2']['Li2014']\n```\n\n----------------------------------------\n\nTITLE: Defining Custom VJP Rules using Jax (Python)\nDESCRIPTION: This Python code snippet demonstrates how to define and register a custom vector-Jacobian-product (VJP) for a user-defined function with Jax. Here, the @custom_vjp decorator is applied to function 'f', allowing manual specification of separate forward and backward passes. The 'f_fwd' function would encode the forward computation and any saved intermediates, while a corresponding backward function (not shown) would implement the VJP rule needed by Jax's AD engine. Dependencies include 'jax' (with its 'custom_vjp' decorator) and 'jax.numpy' as 'jnp'. Key parameters are the function arguments 'x' and 'y'. Outputs and the structure of the VJP must match Jax's custom_vjp API.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/adjoint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jax import custom_vjp\n\n@custom_vjp\ndef f(x, y):\n  return jnp.sin(x) * y\n\ndef f_fwd(x, y):\n```\n\n----------------------------------------\n\nTITLE: Splitting Simulation Processing into Pre/Post Functions in Python\nDESCRIPTION: Illustrates functional separation for pre-processing (simulation initialization), post-processing (data aggregation), and a wrapper function for cleaner parameter sweep integration. This structure aids in parallelization via Batch objects in the Design plugin. Dependencies are similar to those in the unsplit version.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef pre(n: int, r:float) -> td.Simulation:\n\tspheres = make_spheres(num_spheres=n, radius=r)\n\tsim = td.Simulation(structures=spheres, ...)\n\ndef post(data: td.SimulationData) -> float:\n\treturn np.sum(data['flux'])\n\ndef transmission_split(n: int, r: float) -> float:\n\t\"\"\"Transmission as a function of number of spheres and radius.\"\"\"\n\tsim = pre(n=n, r=r)\n\tdata = web.run(sim, ...)\n\treturn post(data=data)\n```\n\n----------------------------------------\n\nTITLE: Loading the Horiba Alumina (Al2O3) Variant in Python\nDESCRIPTION: Example of loading the 'Horiba' variant for Alumina ('Al2O3') from the `material_library` into the `medium` variable. This variant is marked as the default.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Al2O3']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Accessing Cellulose (Sultanova2009 variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Sultanova2009' variant of the Cellulose material model from the `material_library`. This variant is a 1-pole, lossless model valid for the 0.44 - 1.05 µm wavelength range, based on Sultanova et al. (2009).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Cellulose']['Sultanova2009']\n```\n\n----------------------------------------\n\nTITLE: Plotting Optimization History in Python\nDESCRIPTION: The method `plot_optimization` from the `InverseDesignResult` object is employed to visualize the entire optimization process, including both the penalized and post-processed contributions.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresult.plot_optimization()\n_ = plt.gca().set_title('optimization history')\n```\n\n----------------------------------------\n\nTITLE: Exporting GDSII in Tidy3D Python\nDESCRIPTION: Functions to export GDSII format from Simulation, Structure, and Geometry classes in the Tidy3D project.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nto_gds_file, to_gds, to_gdspy, and to_gdstk\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Data Array in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxDataArray` class, likely an extension or wrapper around data arrays (like numpy arrays or xarray DataArrays) to ensure JAX compatibility for adjoint operations.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxDataArray\n```\n\n----------------------------------------\n\nTITLE: Listing Medium Perturbation Classes using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to generate documentation links for medium perturbation classes (`PerturbationMedium`, `PerturbationPoleResidue`) within the `tidy3d` Python library. It specifies `toctree` and `template` settings for Sphinx documentation generation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.PerturbationMedium\n   tidy3d.PerturbationPoleResidue\n```\n\n----------------------------------------\n\nTITLE: Defining and Running Simulation Function in Python\nDESCRIPTION: The pseudo-code defines a function `f(p)` representing a simulation using Tidy3D and Jax. It showcases the sequence of simulation creation, execution, and post-processing. The function is a conceptual outline meant for integrating with the adjoint plugin to compute gradients efficiently.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/adjoint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef f(p):\n    sim = make_sim(p)\n    sim_data = run(sim)\n    return postproces(sim_data)\n```\n\n----------------------------------------\n\nTITLE: Defining Monte Carlo Sampling Method for Parameter Scan in Python\nDESCRIPTION: Instantiates a Monte Carlo sampling method where 'num_points' determines the number of random samples to be drawn in the parameter space. Useful for stochastic exploration of the design space as opposed to exhaustive or grid-based scans. Outputs a method object for later use in constructing a DesignSpace.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmethod = tdd.MethodMonteCarlo(num_points=20)\n```\n\n----------------------------------------\n\nTITLE: Accessing Beryllium (Be, Rakic1998BB variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Rakic1998BB' variant of the Beryllium (Be) material model from the `material_library`. This variant is a 4-pole, lossy model valid for the 0.25 - 61.99 µm wavelength range, based on Rakic et al. (1998) BB model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Be']['Rakic1998BB']\n```\n\n----------------------------------------\n\nTITLE: Accessing Gallium Arsenide Material in Python\nDESCRIPTION: Examples of accessing different variants of Gallium Arsenide material from the material library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['GaAs']['Palik_Lossless']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['GaAs']['Palik_Lossy']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['GaAs']['Skauli2003']\n```\n\n----------------------------------------\n\nTITLE: Combining Metrics with Operators in Tidy3D\nDESCRIPTION: The code snippet shows how to use arithmetic operators to combine metric objects into a single expression in Tidy3D. The expression `f` is created using metrics and standard operators like subtraction and division.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define an objective function using metrics\nf = abs(mode_coeff) - mode_power / 2\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Material Variant from Tidy3D Library in Python\nDESCRIPTION: Demonstrates the general syntax for accessing a specific material model variant from the `rf_material_library`. Replace 'mat' with the abbreviated material name (e.g., 'RO3010') and 'var' with the specific variant name (e.g., 'design'). The result is assigned to the 'medium' variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = rf_material_library['mat']['var']\n```\n\n----------------------------------------\n\nTITLE: Running Adjoint Simulation Asynchronously via Web API in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.web.run_async` function, likely used to execute an adjoint simulation asynchronously through the Tidy3D web API.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.web.run_async\n```\n\n----------------------------------------\n\nTITLE: Listing General Spatially Varying Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to list the general, spatially varying `CustomAnisotropicMedium` class from the `tidy3d` Python library. This medium type can be dispersive or non-dispersive. It sets the `toctree` and `template` options for Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.CustomAnisotropicMedium\n```\n\n----------------------------------------\n\nTITLE: Accessing Material Variant Details in Python\nDESCRIPTION: Demonstrates how to access detailed information about a specific variant ('var') of a material ('mat'). This retrieves the underlying material model object, references, and potentially tabulated data associated with that variant.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> material_library['mat'].variants['var']\n```\n\n----------------------------------------\n\nTITLE: Install pandoc on Windows - Bash\nDESCRIPTION: Install pandoc version 2.9 on Windows using the Chocolatey package manager. Requires Chocolatey to be installed and configured in the system.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nchoco install pandoc --version=\"2.9\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, RakicLorentzDrude1998 variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'RakicLorentzDrude1998' variant of the Gold (Au) material model from the `material_library`. This variant is a 7-pole, lossy model valid for the 0.25 - 6.2 µm wavelength range, based on Rakic et al. (1998).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Importing JAX NumPy Wrapper (Python)\nDESCRIPTION: Demonstrates importing the `jax.numpy` module as `jnp`. This provides JAX-compatible versions of NumPy functions required for differentiation within JAX-traced functions, used with the older `adjoint` plugin.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport jax.numpy as jnp\njnp.sum(...)\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Pd Material from Library in Python\nDESCRIPTION: These snippets show how to access two different variants of Pd from the material library: 'JohnsonChristy1972' (default) and 'RakicLorentzDrude1998'. Both models use multi-pole, lossy representations for different wavelength ranges.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Pd']['JohnsonChristy1972']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Pd']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Importing Gradient Function from JAX (Python)\nDESCRIPTION: Shows the standard way to import the `jax` library and use its `grad` function for automatic differentiation, typically used with the older `tidy3d.plugins.adjoint` plugin.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport jax\njax.grad(f)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Nonlinear Medium Specification Classes using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet utilizes the `autosummary` directive to document classes used for adding nonlinear optical properties to existing mediums (`NonlinearSpec`, `NonlinearSusceptibility`, `KerrNonlinearity`, `TwoPhotonAbsorption`) in the `tidy3d` Python library. It sets `toctree` and `template` for Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.NonlinearSpec\n   tidy3d.NonlinearSusceptibility\n   tidy3d.KerrNonlinearity\n   tidy3d.TwoPhotonAbsorption\n```\n\n----------------------------------------\n\nTITLE: Listing Available Variants for a Material in Python\nDESCRIPTION: Shows how to print the names (keys) of all available variants for a specific material ('mat') using the `.variants.keys()` method. This helps in discovering the different models provided for a material.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> print(material_library['mat'].variants.keys())\n```\n\n----------------------------------------\n\nTITLE: Committing Changes Across tidy3d and Notebooks Submodule\nDESCRIPTION: Performs a git commit that includes changes in both the main `tidy3d` repository and its notebooks submodule. Ensure you are on the desired branches in both repositories before running. Replace `<your message>` with the commit message.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntidy3d develop commit <your message>\n```\n\n----------------------------------------\n\nTITLE: Accessing N-BK7 Glass (BK7, Zemax variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Zemax' variant of the N-BK7 Borosilicate Glass material model from the `material_library`. This variant is a 3-pole, lossless model valid for the 0.3 - 2.5 µm wavelength range, based on the SCHOTT Zemax catalog.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['BK7']['Zemax']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Polygonal Slab Structure for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxPolySlab` class, representing a polygonal slab structure compatible with JAX for use in adjoint optimization workflows.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxPolySlab\n```\n\n----------------------------------------\n\nTITLE: Robust Objective Function using `.data` with Autograd (Python)\nDESCRIPTION: Presents a recommended approach for complex objective functions where the underlying NumPy data is extracted from Tidy3D `DataArray` objects using the `.data` attribute *before* applying numerical operations (using `autograd.numpy` or `anp`). This avoids potential compatibility issues and ensures the operations are performed on standard arrays, returning a NumPy float compatible with autograd.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```py\ndef objective(params: np.ndarray) -> float:\n    sim = make_simulation(params)\n    sim_data = td.web.run(sim)\n\n    fields = sim_data[\"field_monitor\"]\n\n    # extract the data from the DataArray\n    Ex = fields.Ex.data\n    Ey = fields.Ey.data\n    Ez = fields.Ez.data\n\n    # we can now use these just like regular numpy arrays\n    intensity = anp.abs(Ex) ** 2 + anp.abs(Ey) ** 2 + anp.abs(Ez) ** 2  # sim_data.get_intensity(\"field_monitor\") would also work of course\n    norm_intensity = anp.linalg.norm(intensity)\n\n    return norm_intensity  # no .item() needed\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Ni Material from Library in Python\nDESCRIPTION: These snippets demonstrate how to access two different variants of Ni from the material library: 'JohnsonChristy1972' (default) and 'RakicLorentzDrude1998'. Both models use multi-pole, lossy representations for different wavelength ranges.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ni']['JohnsonChristy1972']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ni']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Using Standard Tidy3D Classes with Autograd (Python)\nDESCRIPTION: Illustrates the new, simplified approach where standard Tidy3D components (like `td.Structure`) are imported directly from the main `tidy3d` library (`td`) and used within differentiable functions, eliminating the need for special `Jax_` prefixed classes.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```py\nimport tidy3d as td\ntd.Structure(...)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Abstract Medium Base Classes using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to list abstract base classes related to mediums (`AbstractPerturbationMedium`, `NonlinearModel`) within the `tidy3d.components.medium` namespace of the `tidy3d` Python library. It specifies a `toctree` for the generated documentation links.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n\n   tidy3d.components.medium.AbstractPerturbationMedium\n   tidy3d.components.medium.NonlinearModel\n```\n\n----------------------------------------\n\nTITLE: Accessing SiO2 Material Models in Python\nDESCRIPTION: Examples showing how to access different SiO2 material models including Horiba, Palik_Lossless, and Palik_Lossy variants with different wavelength ranges.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['SiO2']['Horiba']\nmedium = material_library['SiO2']['Palik_Lossless']\nmedium = material_library['SiO2']['Palik_Lossy']\n```\n\n----------------------------------------\n\nTITLE: Updating and Rebasing Feature Branch onto Base Branch in Bash\nDESCRIPTION: This set of commands updates the local 'pre/x.x' branch from the remote, switches back to the feature branch 'my_name/new_feature', and initiates an interactive rebase (`rebase -i`) of the feature branch onto the updated 'pre/x.x' branch. This process allows squashing or editing commits for a cleaner history before merging.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/flow.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout pre/x.x\ngit pull origin pre/x.x\ngit checkout my_name/new_feature\ngit rebase -i pre/x.x\n```\n\n----------------------------------------\n\nTITLE: Accessing Aminoacid (Horiba variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'Horiba' variant of the Aminoacid material model from the `material_library`. This variant is described as a 1-pole, lossless model valid for the 0.25 - 0.83 µm wavelength range.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Aminoacid']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Medium Definition for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxMedium` class, representing a base medium definition compatible with JAX for adjoint simulations.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxMedium\n```\n\n----------------------------------------\n\nTITLE: Continuing an Optimization Run in Python\nDESCRIPTION: Here, an optimization run is continued from a previous state using `Optimizer.continue_run`. The code snippet shows updating optimizer parameters and continuing the optimization process seamlessly.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# change some optimization parameters, if desired, set new number of steps\noptimizer = optimizer.updated_copy(num_steps=3, learning_rate=0.1)\n\n# continue the run, passing in the latest result\nresult = optimizer.continue_run(result=result)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Default Material Variant in Python\nDESCRIPTION: Illustrates accessing the default variant for a given material ('mat') using the `.medium` attribute as a shortcut. This avoids needing to know the specific name of the default variant.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['mat'].medium\n```\n\n----------------------------------------\n\nTITLE: Importing the Tidy3D RF Material Library in Python\nDESCRIPTION: Imports the `rf_material_library` dictionary from the `tidy3d.plugins.microwave` module. This library contains pre-defined dispersive models for various RF materials.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from tidy3d.plugins.microwave import rf_material_library\n```\n\n----------------------------------------\n\nTITLE: Thermal Perturbation Classes Reference\nDESCRIPTION: Classes for defining thermal perturbation models including linear and custom heat perturbation specifications.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/mediums.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntidy3d.LinearHeatPerturbation\ntidy3d.CustomHeatPerturbation\n```\n\n----------------------------------------\n\nTITLE: Extracting Scalar Objective from DataArray for Autograd (Python)\nDESCRIPTION: Provides an example objective function demonstrating how to process `SimulationData`. It highlights the necessity of converting the final `DataArray` result (e.g., `mode_power`) into a scalar Python float using methods like `.sel()` followed by `.item()` or `.sum().item()` to ensure compatibility with `autograd`'s differentiation functions, which require real scalar outputs.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/autograd/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```py\ndef objective(params: np.ndarray) -> float:\n    sim = make_simulation(params)\n    sim_data = td.web.run(sim)\n\n    amps = sim_data[\"mode_monitor\"].amps\n    mode_power = np.abs(amps)**2  # mode_power is still a DataArray!\n\n    # either select out a specific value\n    objective_value = mode_power.sel(mode_index=0, f=freq0)\n    # or, for example, sum over all frequencies\n    objective_value = mode_power.sel(mode_index=0).sum()\n\n    # just make sure that whatever you return is scalar and a numeric type by extracting the scalar value with item()\n    return objective_value.item()  # alternatively, for single-element arrays: flux.data or flux.values (deprecated)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding click Dependency Using Poetry - Bash\nDESCRIPTION: Instructs Poetry to add click as a required dependency in the project. Updates pyproject.toml and poetry.lock, resolving import errors for modules that require click. Should be executed in the project root where Poetry is initialized.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry add click\n```\n\n----------------------------------------\n\nTITLE: Accessing Platinum Material Variants\nDESCRIPTION: Examples showing how to access different variants of Platinum material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Pt']['RakicLorentzDrude1998']\nmedium = material_library['Pt']['Werner2009']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Custom Medium Definition in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxCustomMedium` class, allowing definition of custom medium properties compatible with JAX for adjoint optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxCustomMedium\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Tidy3D Expressions\nDESCRIPTION: The snippet shows how to serialize an expression into a file and then deserialize it back into an expression object using the Tidy3D expressions module. This provides persistence for expressions, allowing them to be stored and retrieved when needed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Serialize the metric to a file\nf.to_file(\"metric_expression.hdf5\")\n\n# Deserialize the metric from a file\nfrom tidy3d.plugins.expressions import Expression\nloaded_expr = Expression.from_file(\"metric_expression.hdf5\")\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Aluminum (Al) Variants in Python\nDESCRIPTION: Shows examples of loading the available variants for Aluminum ('Al') from the `material_library`. Each line loads a different model (Rakic1995, RakicLorentzDrude1998) into the `medium` variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Al']['Rakic1995']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Al']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, Olmon2012crystal variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'Olmon2012crystal' variant of the Gold (Au) material model from the `material_library`. This variant is a 3-pole, lossy model valid for the 0.3 - 24.93 µm wavelength range, based on Olmon et al. (2012) crystal data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['Olmon2012crystal']\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Code Coverage Report with Pytest (Bash)\nDESCRIPTION: Runs pytest on the `tests` directory, gathers coverage data for the `tidy3d` package (`--cov=tidy3d`), and generates an interactive HTML report (`--cov-report=html`) in the `htmlcov/` directory. The subsequent `open` command typically opens the `index.html` file in a web browser for easier visualization of coverage results.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest tests --cov-report=html --cov=tidy3d\nopen htmlcov/index.html\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Simulation Data Container in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxSimulationData` class, designed to hold simulation results in a JAX-compatible format for post-processing or use in adjoint optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxSimulationData\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Permittivity Dataset in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxPermittivityDataset` class, representing a dataset of permittivity values compatible with JAX, likely used for defining or optimizing materials.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxPermittivityDataset\n```\n\n----------------------------------------\n\nTITLE: Accessing PET Material from Library in Python\nDESCRIPTION: This snippet demonstrates how to access the 'Horiba' variant of PET from the material library. The Horiba model is valid for wavelengths between 0.39 and 0.83 μm and uses a 1-pole, lossless model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PET']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Structure Definition for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxStructure` class, likely a base class or container for geometric structures compatible with JAX within the adjoint plugin.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxStructure\n```\n\n----------------------------------------\n\nTITLE: Accessing Optimization History Data in Python\nDESCRIPTION: This snippet shows how to access and print relevant data from an optimization run's history, such as penalty history and the last objective function value, using `InverseDesignResult` methods.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nhistory_keys = result.keys\nhistory_penalty = result.history.get('penalty')\nlast_objective = result.get_last(\"objective_fn_val\")\n\nprint(f\"result contains '.history' for: {tuple(history_keys)}\")\nprint(f\"penalty history: {history_penalty}\")\nprint(f\"last objective function value: {last_objective}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Gold (Au, Olmon2012stripped variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'Olmon2012stripped' variant of the Gold (Au) material model from the `material_library`. This variant is a 3-pole, lossy model valid for the 0.3 - 24.93 µm wavelength range, based on Olmon et al. (2012) template-stripped data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Au']['Olmon2012stripped']\n```\n\n----------------------------------------\n\nTITLE: Accessing Lithium Niobate from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Lithium Niobate (LiNbO3) from the material library. Only one variant is available: 'Zelmon1997' (default), which is an anisotropic medium. The optical axis parameter specifies the direction (0/1/2 for x/y/z).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['LiNbO3']['Zelmon1997'](optical axis) # 'optical axis' can take value 0/1/2 for x/y/z axis.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for EME Simulation\nDESCRIPTION: ReStructuredText directive for generating documentation for the EMESimulation class in tidy3d package. Uses autosummary to automatically create module documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/eme/simulation.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nSimulation\n-----------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.EMESimulation\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Complex Polygonal Slab Structure in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxComplexPolySlab` class, likely a JAX-compatible polygonal slab structure supporting complex geometries or properties for adjoint optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxComplexPolySlab\n```\n\n----------------------------------------\n\nTITLE: Binary Projector Utility for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.utils.filter.BinaryProjector` class, likely used to project continuous optimization variables towards binary values (0 or 1), common in topology optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.utils.filter.BinaryProjector\n```\n\n----------------------------------------\n\nTITLE: Accessing MoSe2 Material from Library in Python\nDESCRIPTION: This snippet shows how to access the 'Li2014' variant of MoSe2 from the material library. This model is valid for wavelengths between 0.42 and 0.83 μm and uses a Medium2D model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['MoSe2']['Li2014']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Mode Data Container in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxModeData` class, used to store electromagnetic mode data in a JAX-compatible format within the adjoint plugin.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxModeData\n```\n\n----------------------------------------\n\nTITLE: Setting Up Adam Optimizer for Multi-Simulation Inverse Design in Tidy3D\nDESCRIPTION: Configures an Adam optimizer for the multi-simulation inverse design problem, specifying learning rate, number of steps, and a file to cache results.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\noptimizer = tdi.AdamOptimizer(\n    design=design_multi,\n    results_cache_fname=\"data/invdes_history.pkl\",\n    learning_rate=0.3,\n    num_steps=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Hafnium Oxide from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Hafnium Oxide (HfO2) from the material library. Only one variant is available: 'Horiba' (default, 1-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['HfO2']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Accessing YAG Material Properties in Python\nDESCRIPTION: Example of accessing the Zelmon1998 variant of YAG material from the material library. Valid for wavelengths between 0.4-5.0 μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['YAG']['Zelmon1998']\n```\n\n----------------------------------------\n\nTITLE: Loading the Horiba Aluminum Oxide (AlxOy) Variant in Python\nDESCRIPTION: Example of loading the 'Horiba' variant for Aluminum Oxide ('AlxOy') from the `material_library` into the `medium` variable. This is the default variant.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AlxOy']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: JAX-Compatible Anisotropic Medium Definition in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.JaxAnisotropicMedium` class, representing an anisotropic medium compatible with JAX for adjoint optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.JaxAnisotropicMedium\n```\n\n----------------------------------------\n\nTITLE: Importing ResonanceFinder Plugin from Tidy3D\nDESCRIPTION: Example of importing the ResonanceFinder class from the tidy3d.plugins.resonance module. This plugin is used to identify and analyze resonant modes in optical structures.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/resonance.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\n\nResonance Finder\n----------------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.plugins.resonance.ResonanceFinder\n```\n\n----------------------------------------\n\nTITLE: Accessing Y2O3 Material Properties in Python\nDESCRIPTION: Examples of accessing both Horiba and Nigara1968 variants of Y2O3 material from the material library. Horiba variant is valid for 0.31-0.8 μm, Nigara1968 for 0.25-9.6 μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Y2O3']['Horiba']\n\nmedium = material_library['Y2O3']['Nigara1968']\n```\n\n----------------------------------------\n\nTITLE: Conic Filter Utility for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.utils.filter.ConicFilter` class, providing a conic filtering method, often used in topology optimization to regularize designs.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.utils.filter.ConicFilter\n```\n\n----------------------------------------\n\nTITLE: Importing the Tidy3D Design Plugin in Python\nDESCRIPTION: This snippet imports the Tidy3D Design plugin as the namespace 'tdd', enabling access to parameter, method, design space, and result classes for parameter scanning and optimization. It is a prerequisite to using any functionality described in further examples, and should be placed at the top of any script that leverages Tidy3D's design tools.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/design/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tidy3d.plugins.design as tdd\n```\n\n----------------------------------------\n\nTITLE: Accessing Indium Phosphide from the Tidy3D Material Library\nDESCRIPTION: Shows how to access different variants of Indium Phosphide (InP) from the material library. Three variants are available: 'Palik_Lossless' (1-pole low loss model), 'Palik_Lossy' (5-pole lossy model), and 'Pettit1965' (default, 2-pole lossless model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['InP']['Palik_Lossless']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['InP']['Palik_Lossy']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['InP']['Pettit1965']\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO4003C 'design' Variant in Python\nDESCRIPTION: Example code accessing the 'design' variant (default) of the Rogers RO4003C material ('RO4003C') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO4003C']['design']\n```\n\n----------------------------------------\n\nTITLE: Accessing MgF2 Material from Library in Python\nDESCRIPTION: This snippet demonstrates how to access the 'Horiba' variant of MgF2 from the material library. The Horiba model is valid for wavelengths between 0.33 and 1.55 μm and uses a 1-pole, lossless model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['MgF2']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Radius Penalty Utility for Adjoint Optimization in Python\nDESCRIPTION: Reference to the `tidy3d.plugins.adjoint.utils.penalty.RadiusPenalty` class, providing a penalty function related to feature size or curvature radius, used to enforce manufacturing constraints in optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/adjoint.rst#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ntidy3d.plugins.adjoint.utils.penalty.RadiusPenalty\n```\n\n----------------------------------------\n\nTITLE: Accessing Material Variant Details in Tidy3D Library (Python)\nDESCRIPTION: Retrieves the details object for a specific material variant ('var') of a material ('mat') from the `rf_material_library`. This object contains information like the material model parameters and references.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> rf_material_library['mat'].variants['var']\n```\n\n----------------------------------------\n\nTITLE: Calculating Polarization Fraction in Python\nDESCRIPTION: Properties to compute polarization fraction of modes using two different definitions in the Tidy3D project's ModeSolverData class.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nModeSolverData.pol_fraction and ModeSolverData.pol_fraction_waveguide\n```\n\n----------------------------------------\n\nTITLE: Creating Selmeier Model from Dispersion Data in Python\nDESCRIPTION: Static method to quickly create a single-pole Selmeier fit for lossless weakly dispersive materials based on existing dispersion data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nSelmeier.from_dispersion()\n```\n\n----------------------------------------\n\nTITLE: Listing Spatially Uniform Dispersive Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet utilizes the `autosummary` directive to generate documentation entries for spatially uniform dispersive medium model classes (`PoleResidue`, `Lorentz`, `Sellmeier`, `Drude`, `Debye`) available in the `tidy3d` Python library. It defines the `toctree` location and the `template` file for generating the documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.PoleResidue\n   tidy3d.Lorentz\n   tidy3d.Sellmeier\n   tidy3d.Drude\n   tidy3d.Debye\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO3010 'design' Variant in Python\nDESCRIPTION: Example code showing how to load the 'design' variant of the Rogers RO3010 laminate material from the `rf_material_library`. The retrieved medium object is assigned to the `Rogers3010` variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Rogers3010 = rf_material_library['RO3010']['design']\n```\n\n----------------------------------------\n\nTITLE: Accessing MgO Material from Library in Python\nDESCRIPTION: This snippet shows how to access the 'StephensMalitson1952' variant of MgO from the material library. This model is valid for wavelengths between 0.36 and 5.4 μm and uses a 2-pole, low loss model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['MgO']['StephensMalitson1952']\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Feature Branch in Bash\nDESCRIPTION: This command creates a new Git branch named 'myusername/cool-feature' based on the current branch (expected to be 'pre/x.x' after the previous step) and immediately switches the working directory to this new branch. It follows a naming convention prefixing the branch with the user's GitHub username.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/flow.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b myusername/cool-feature\n```\n\n----------------------------------------\n\nTITLE: Loading the Rakic1998BB Silver Variant in Python\nDESCRIPTION: Loads the specific material model for Silver ('Ag') corresponding to the 'Rakic1998BB' variant, based on data from A. D. Rakic et al. (1998). The resulting `silver` object represents this medium and can be used in simulations.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> silver = material_library['Ag']['Rakic1998BB']\n```\n\n----------------------------------------\n\nTITLE: Creating PoleResidue from LO-TO Form in Python\nDESCRIPTION: Method to create a PoleResidue object from LO-TO (Longitudinal Optical-Transverse Optical) form in the Tidy3D project.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nPoleResidue.from_lo_to\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometry Intersections in Python\nDESCRIPTION: Method to calculate intersections of a Geometry object with any plane, not limited to axis-aligned ones, in the Tidy3D project.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nGeometry.intersections_tilted_plane\n```\n\n----------------------------------------\n\nTITLE: Listing Lossy Metal Parameters using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to list and generate documentation for classes related to lossy metal parameters in the `tidy3d` Python library: `SurfaceImpedanceFitterParam`, `HammerstadSurfaceRoughness`, and `HuraySurfaceRoughness`. It configures the `toctree` and `template` options for the Sphinx documentation generator.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.SurfaceImpedanceFitterParam\n   tidy3d.HammerstadSurfaceRoughness\n   tidy3d.HuraySurfaceRoughness\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple PolySlab Objects from GDS File in Python\nDESCRIPTION: Method to import polygons from a GDS file layer and create a list of PolySlab objects. This method allows optional specification of a single data type.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nPolyslab.from_gds\n```\n\n----------------------------------------\n\nTITLE: Including External RST File for Microwave Output Data\nDESCRIPTION: This RST directive includes the content of an external RST file specifically for microwave output data documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/microwave/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /api/microwave/output_data.rst\n```\n\n----------------------------------------\n\nTITLE: Accessing Silicon Material in Python\nDESCRIPTION: Examples of accessing different variants of Silicon material from the material library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['Green2008']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['Green2008_Lossless']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['Li1993_293K']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['Palik_Lossless']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['Palik_Lossy']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['cSi']['SalzbergVilla1957']\n```\n\n----------------------------------------\n\nTITLE: Accessing Arlon AD255C 'process' Variant in Python\nDESCRIPTION: Example code accessing the 'process' variant of the Arlon AD255C material ('AD255C') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AD255C']['process']\n```\n\n----------------------------------------\n\nTITLE: Selecting JaxDataArray Data by Nearest Value in Python\nDESCRIPTION: Illustrates how to perform data selection on a `JaxDataArray` object using the nearest value method. The `sel` method is used with `method=\"nearest\"` to find the data point closest to the specified coordinate values.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nJaxDataArray.sel(..., method=\"nearest\")\n```\n\n----------------------------------------\n\nTITLE: Using Differentiable Vertices in Calculations (Penalty Example) in Python\nDESCRIPTION: Example demonstrating how to use the JAX-traced vertices (accessed via the `_jax` suffix attribute like `polyslab.vertices_jax`) within an objective function or penalty calculation when using the adjoint plugin.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nradius_penalty.evaluate(polyslab.vertices_jax)\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Tidy3D Version (Bash)\nDESCRIPTION: Installs the latest stable version of the Tidy3D package from PyPI using the pip package installer.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install tidy3d\n```\n\n----------------------------------------\n\nTITLE: Summarizing Tidy3D Source Classes with Autosummary - reStructuredText\nDESCRIPTION: This reStructuredText snippet uses Sphinx directives to generate autosummary tables for core Tidy3D source classes such as PointDipole, UniformCurrentSource, PlaneWave, and others. Dependencies include Sphinx, the autosummary extension, and a properly configured Python path to the tidy3d module. The directives automatically generate documentation stubs for classes, which are then linked in the generated HTML, allowing users to explore class-level documentation within the Tidy3D framework.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/sources.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.PointDipole\\n   tidy3d.UniformCurrentSource\\n   tidy3d.PlaneWave\\n   tidy3d.ModeSource\\n   tidy3d.GaussianBeam\\n   tidy3d.AstigmaticGaussianBeam\\n   tidy3d.CustomFieldSource\\n   tidy3d.CustomCurrentSource\\n   tidy3d.TFSF\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpixel Averaging: Heuristic PEC Staircasing (Old False Behavior) in Python\nDESCRIPTION: Shows how to configure subpixel averaging using `SubpixelSpec` to replicate the behavior of `subpixel=False` for PEC materials from Tidy3D versions prior to 2.7.0. This uses `HeuristicPECStaircasing()`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsubpixel=SubpixelSpec(pec=HeuristicPECStaircasing())\n```\n\n----------------------------------------\n\nTITLE: Check Poetry Version and Commands - Bash\nDESCRIPTION: Verify poetry installation by printing its version and available commands. Ensures poetry is correctly available in the user's PATH after installation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry --version\npoetry # prints all commands\n```\n\n----------------------------------------\n\nTITLE: Accessing Germanium Material from the Tidy3D Material Library\nDESCRIPTION: Shows how to access different variants of Germanium (Ge) from the material library. Three variants are available: 'Icenogle1976' (default, 2-pole lossless model), 'Palik_Lossless' (1-pole low loss model), and 'Palik_Lossy' (5-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ge']['Icenogle1976']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ge']['Palik_Lossless']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ge']['Palik_Lossy']\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Silver (Ag) Variants in Python\nDESCRIPTION: Provides examples of loading different defined variants for Silver ('Ag') from the `material_library`. Each line assigns a specific Silver model (JohnsonChristy1972, Rakic1998BB, RakicLorentzDrude1998, Yang2015Drude) to the `medium` variable, allowing selection based on desired properties or reference data.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Ag']['JohnsonChristy1972']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Ag']['Rakic1998BB']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Ag']['RakicLorentzDrude1998']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Ag']['Yang2015Drude']\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpixel Averaging: Disabling (Old Behavior) in Python\nDESCRIPTION: Represents the behavior of `subpixel=False` in Tidy3D versions prior to 2.7.0, which implemented staircasing for all materials except PEC. This setting now applies direct staircasing to all materials.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsubpixel=False\n```\n\n----------------------------------------\n\nTITLE: Tidy3D Metrics as Variables\nDESCRIPTION: Metrics, such as `ModeAmp` and `ModePower`, are subclasses of `Variable`. This snippet illustrates how metrics can be used similarly to variables within expressions, allowing simulation data to be evaluated against them.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Define two named metrics\nmode_coeff1 = ModeAmp(name=\"mode_coeff1\", monitor_name=\"monitor1\", freqs=[1.0])\nmode_power1 = ModePower(name=\"mode_power1\", monitor_name=\"monitor2\", freqs=[1.0])\n\n# Create an expression using the metrics\nexpr = mode_coeff1 + mode_power1\n\n# Assume \"data1\" and \"data2\" are SimulationData objects obtained from different simulations\nresult = expr(mode_coeff1=data1, mode_power1=data2)\n```\n\n----------------------------------------\n\nTITLE: Defining Module References for Beam Profiles in RST\nDESCRIPTION: RST documentation structure defining the current module and autosummary configuration for tidy3d beam profile classes. Lists three beam profile types: PlaneWaveBeamProfile, GaussianBeamProfile, and AstigmaticGaussianBeamProfile.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/analytic_beams.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nAnalytic Beams\n==============\n\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n    tidy3d.PlaneWaveBeamProfile\n    tidy3d.GaussianBeamProfile\n    tidy3d.AstigmaticGaussianBeamProfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpixel Averaging: Default PEC Conformal Meshing in Python\nDESCRIPTION: Illustrates the default subpixel averaging configuration in Tidy3D version 2.7.0 and later, using `SubpixelSpec` with `PECConformal()`. This enables more accurate conformal meshing methods near PEC structures.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsubpixel=SubpixelSpec(pec=PECConformal())\n```\n\n----------------------------------------\n\nTITLE: Install Tidy3D Package in Development Poetry Environment - Bash\nDESCRIPTION: Install all Tidy3D dependencies and extras required for development using poetry. The '-E dev' flag ensures development requirements are included. Assumes poetry is installed and the terminal session is in the project root.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npoetry install -E dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Water from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Water (H2O) from the material library. Only one variant is available: 'Horiba' (default, 1-pole lossless model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['H2O']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Accessing Copper Material in Python\nDESCRIPTION: Examples of accessing different variants of Copper material from the material library.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Cu']['JohnsonChristy1972']\n```\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Cu']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Converting Lumerical Scripts using tidy3d convert Command (Deprecated Location)\nDESCRIPTION: Mentions the `tidy3d convert` command-line utility used for converting Lumerical `.lsf` files to Tidy3D Python scripts. Note: This tool has been moved to a separate repository.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ntidy3d convert\n```\n\n----------------------------------------\n\nTITLE: Initializing Parameters for Simulation in Python\nDESCRIPTION: This snippet initializes parameters for a simulation by setting all entries in the `params0` array to 0.5, providing a balanced starting point for optimizations.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nparams0 = 0.5 * np.ones_like(params0)\n```\n\n----------------------------------------\n\nTITLE: Applying Symmetry to SimulationData in Python\nDESCRIPTION: This method applies symmetry to a specific MonitorDataType within a SimulationData instance. The method requires as input a MonitorDataType object, computes the expanded grid for the relevant monitor, and returns a new MonitorDataType object with symmetry applied. This is used for consistent transformations without mutating the original SimulationData state, supporting workflow reproducibility.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef apply_symmetry(self, monitor_data: MonitorDataType) -> MonitorDataType:\n\n```\n\n----------------------------------------\n\nTITLE: Summarizing Output Data Types with Sphinx autosummary - reStructuredText\nDESCRIPTION: This snippet uses Sphinx reStructuredText directives to automatically generate summary documentation for the AntennaMetricsData class in the tidy3d Python module. It leverages the autosummary extension and a custom template, with output files organized in a dedicated _autosummary directory. Key parameters include the toctree location and template override. Inputs are Python classes/modules; output is rendered HTML or LaTeX documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/microwave/output_data.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: ../_autosummary/\\n   :template: module.rst\\n\\n   tidy3d.AntennaMetricsData\n```\n\n----------------------------------------\n\nTITLE: Accessing PEI Material from Library in Python\nDESCRIPTION: This snippet demonstrates how to access the 'Horiba' variant of PEI from the material library. The Horiba model is valid for wavelengths between 0.26 and 1.65 μm and uses a 1-pole, lossless model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PEI']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Switching Branch with Git\nDESCRIPTION: This snippet demonstrates how to switch to a different branch using Git. This is the first step in setting up a separate environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_virtual_environments.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout branch\n```\n\n----------------------------------------\n\nTITLE: Accessing Hexamethyldisilazane from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Hexamethyldisilazane (HMDS) from the material library. Only one variant is available: 'Horiba' (default, 1-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['HMDS']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Accessing Germanium Oxide from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Germanium Oxide (GeOx) from the material library. Only one variant is available: 'Horiba' (default, 1-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['GeOx']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Tidy3D Expressions in Python\nDESCRIPTION: The snippets illustrate how to use unnamed and named variables in expressions. Variables can serve as placeholders, allowing values to be supplied during expression evaluation, enabling parameterization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/expressions/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.expressions import Variable\n\n# Create an unnamed variable\nx = Variable()\n\n# Use the variable in an expression\nexpr = x**2 + 2 * x + 1\n\n# Evaluate the expression with a positional argument\nresult = expr(3)\n\nprint(result)  # Outputs: 126\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.expressions import Variable\n\n# Create named variables\nx = Variable(name=\"x\")\ny = Variable(name=\"y\")\nexpr = x**2 + y**2\n\n# Evaluate the expression with keyword arguments\nresult = expr(x=3, y=4)\n\nprint(result)  # Outputs: 25\n```\n\n----------------------------------------\n\nTITLE: Applying Symmetry to MonitorData in Python\nDESCRIPTION: This function definition provides the apply_symmetry() method for MonitorData subclasses, returning a new instance with symmetry transformations applied. Dependencies include type definitions for Symmetry, Coordinate, and Grid, and the method requires a tuple of three symmetry objects, a symmetry center, and an expanded grid. It returns a transformed MonitorData object. This approach allows stateless transformations and consistent application of simulation symmetries.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef apply_symmetry(\n    self,\n    symmetry: Tuple[Symmetry, Symmetry, Symmetry],\n    symmetry_center: Coordinate,\n    grid_expanded: Grid,\n) -> MonitorData:\n\n```\n\n----------------------------------------\n\nTITLE: Including Subcomponent Documentation in reStructuredText\nDESCRIPTION: This snippet includes the documentation for various subcomponents of the Charge module from separate files.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /api/charge/simulation.rst\n.. include:: /api/charge/mediums.rst\n.. include:: /api/charge/boundary_conditions.rst\n.. include:: /api/charge/source.rst\n.. include:: /api/charge/discretization.rst\n.. include:: /api/charge/monitor.rst\n.. include:: /api/charge/output_data.rst\n```\n\n----------------------------------------\n\nTITLE: Accessing Sapphire Material\nDESCRIPTION: Example showing how to access Sapphire material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Sapphire']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Updating Environment for Branch Changes\nDESCRIPTION: Illustrates how to update the environment's dependencies when switching to a different branch, ensuring all necessary packages are correctly installed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_virtual_environments.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install -E dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Indium Arsenide from the Tidy3D Material Library\nDESCRIPTION: Shows how to access Indium Arsenide (InAs) from the material library. Only one variant is available: 'Palik' (default, 3-pole lossy model).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['InAs']['Palik']\n```\n\n----------------------------------------\n\nTITLE: Accessing PEN Material from Library in Python\nDESCRIPTION: This snippet shows how to access the 'Horiba' variant of PEN from the material library. The Horiba model is valid for wavelengths between 0.39 and 0.83 μm and uses a 1-pole, lossless model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PEN']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Loading Optimization Results from Backup in Python\nDESCRIPTION: This code demonstrates how to load an optimization result from a backup file using `InverseDesignResult.from_file`. This ensures recovery of the optimization state if a run is interrupted.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresult = tdi.InverseDesignResult.from_file(optimizer.results_cache_fname)\n```\n\n----------------------------------------\n\nTITLE: Importing Tidy3D Microwave Plugin Classes\nDESCRIPTION: This code snippet demonstrates the import of various classes from the tidy3d.plugins.microwave module. These classes are used for microwave-related calculations and simulations in Tidy3D.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/microwave.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tidy3d.plugins.microwave import (\n    AxisAlignedPathIntegral,\n    VoltageIntegralAxisAligned,\n    CurrentIntegralAxisAligned,\n    CustomPathIntegral2D,\n    CustomVoltageIntegral2D,\n    CustomCurrentIntegral2D,\n    ImpedanceCalculator,\n    RectangularAntennaArrayCalculator,\n    LobeMeasurer\n)\n```\n\n----------------------------------------\n\nTITLE: MonitorData Normalization Method in Python\nDESCRIPTION: This function definition implements the normalize() method for a MonitorData subclass, enabling normalization of the monitor data by a provided source spectrum function. The dependency is that source_spectrum_fn is a callable accepting a float frequency and returning a complex spectrum value. The input is a function, the output is a new MonitorData object normalized as specified. This enables flexible post-processing in the tidy3d backend and supports custom normalization schemes.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef normalize(self, source_spectrum_fn: Callable[[float], complex]) -> MonitorData:\n\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D on Linux/MacOS using Pip (Bash)\nDESCRIPTION: Installs the latest stable version of the Tidy3D Python library for the current user on Linux or MacOS systems using the pip package installer. This command downloads and installs the necessary package files.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --user tidy3d\n```\n\n----------------------------------------\n\nTITLE: Accessing PVC Material\nDESCRIPTION: Example showing how to access PVC material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['PVC']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Updating Base Branch and Creating Feature Branch in Bash\nDESCRIPTION: This sequence of commands first switches to the 'pre/x.x' branch, pulls the latest changes from the remote 'origin', and then creates and switches to a new feature branch named 'my_name/new_feature'. This ensures the feature branch is based on the most up-to-date version of the target pre-release branch.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/flow.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# from the main tidy3d frontend repo\ngit checkout pre/x.x\ngit pull origin pre/x.x\ngit checkout -b my_name/new_feature\n```\n\n----------------------------------------\n\nTITLE: Accessing W Material Models in Python\nDESCRIPTION: Examples showing how to access Tungsten material models including RakicLorentzDrude1998 and Werner2009 variants.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['W']['RakicLorentzDrude1998']\nmedium = material_library['W']['Werner2009']\n```\n\n----------------------------------------\n\nTITLE: Accessing SiC Material Model in Python\nDESCRIPTION: Example showing how to access the Horiba model for Silicon Carbide from the material library, valid for wavelengths 0.31-2.07μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['SiC']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Benchmarking tidy3d Import Timing with Poetry\nDESCRIPTION: Runs a specific timing benchmark operation for `tidy3d` import using the `poetry` environment. Replace `<timing_command>` with the specific test to run; run without arguments to see available commands.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop benchmark-timing-operations -c <timing_command>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Summary with Sphinx Autosummary (reStructuredText)\nDESCRIPTION: This Sphinx directive utilizes the `autosummary` extension to create a summary table and generate individual documentation pages for the specified Python objects (`tidy3d.Simulation`, `tidy3d.RunTimeSpec`). It configures the output directory (`toctree: _autosummary/`) and the template (`template: module.rst`) for the generated pages. Requires the `sphinx.ext.autosummary` extension to be enabled.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/simulation.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.Simulation\n   tidy3d.RunTimeSpec\n```\n\n----------------------------------------\n\nTITLE: Activating Conda/Mamba Environment (Bash)\nDESCRIPTION: Activates the previously created Conda/Mamba environment named `tidy3d_env`. Subsequent commands (like `pip install tidy3d`) will operate within this isolated environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmamba activate tidy3d_env\n```\n\n----------------------------------------\n\nTITLE: Configuring Tidy3D API Key on Linux/MacOS (Bash)\nDESCRIPTION: Configures the installed Tidy3D package with the user's API key obtained from the Tidy3D web interface. Replace 'XXX' with the actual API key. This command saves the key for authenticating simulation submissions.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntidy3d configure --apikey=XXX\n```\n\n----------------------------------------\n\nTITLE: Accessing Polystyrene Material\nDESCRIPTION: Example showing how to access Polystyrene material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Polystyrene']['Sultanova2009']\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Release Documentation (reStructuredText)\nDESCRIPTION: This reStructuredText directive defines a hidden table of contents with a maximum depth of 1. It lists the component pages (`flow`, `version`, `documentation`, `notebooks`) that constitute the release process documentation, enabling structured navigation within the generated documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :hidden:\n\n    flow\n    version\n    documentation\n    notebooks\n```\n\n----------------------------------------\n\nTITLE: Accessing Arlon AD255C 'design' Variant in Python\nDESCRIPTION: Example code accessing the 'design' variant (default) of the Arlon AD255C material ('AD255C') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AD255C']['design']\n```\n\n----------------------------------------\n\nTITLE: Accessing Ti Material Models in Python\nDESCRIPTION: Examples showing how to access Titanium material models including RakicLorentzDrude1998 and Werner2009 variants.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Ti']['RakicLorentzDrude1998']\nmedium = material_library['Ti']['Werner2009']\n```\n\n----------------------------------------\n\nTITLE: Install pre-commit Hooks Using Poetry - Bash\nDESCRIPTION: Install project-specific pre-commit hooks with poetry to ensure code quality on every commit. This command sets up hooks that run before each commit operation in Git.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code with Ruff (Bash)\nDESCRIPTION: Uses the Ruff formatter via Poetry to automatically format all Python files in the current directory and subdirectories according to the project's configuration specified in `pyproject.toml`. This ensures consistent code style across the codebase.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry run ruff format .\n```\n\n----------------------------------------\n\nTITLE: Automatic Development Environment Installation with Tidy3D CLI - Bash\nDESCRIPTION: Run a single Tidy3D CLI command to automatically install and verify development environment dependencies such as pipx, poetry, and pandoc, including environment checks and requirement installations. The command is OS-dependent and prerequisites may be prompted by the tool. Assumes Tidy3D >=2.6 is installed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Automatically check and install requirements like pipx, poetry, pandoc\ntidy3d develop install-dev-environment\n```\n\n----------------------------------------\n\nTITLE: Accessing Polycarbonate Material Variants\nDESCRIPTION: Examples showing how to access different variants of Polycarbonate material from the material library\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['Polycarbonate']['Horiba']\nmedium = material_library['Polycarbonate']['Sultanova2009']\n```\n\n----------------------------------------\n\nTITLE: Building tidy3d Documentation with Poetry\nDESCRIPTION: Builds the project documentation within the reproducible `poetry` environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop build-docs\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO3003 'design' Variant in Python\nDESCRIPTION: Example code accessing the 'design' variant (default) of the Rogers RO3003 material ('RO3003') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO3003']['design']\n```\n\n----------------------------------------\n\nTITLE: Accessing WSe2 Material Properties in Python\nDESCRIPTION: Example of accessing the Li2014 variant of WSe2 material from the material library. Valid for wavelengths between 0.42-0.83 μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['WSe2']['Li2014']\n```\n\n----------------------------------------\n\nTITLE: Manually Run pre-commit Checks On All Files Using Poetry - Bash\nDESCRIPTION: Manually execute all configured pre-commit hooks against every file tracked by the repository using poetry. Useful to ensure code consistency and quality before committing.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Building tidy3d Documentation with Remote Notebooks using Poetry\nDESCRIPTION: Builds the project documentation, fetching the latest notebooks from the `develop` branch of the `tidy3d-notebooks` repository, executed within the `poetry` environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop build-docs-remote-notebooks\n```\n\n----------------------------------------\n\nTITLE: Declaring FieldTimeData MonitorData Subclass in Python\nDESCRIPTION: This Python snippet shows the declaration of the FieldTimeData class, a MonitorData subclass representing field monitor data in the time domain. It requires the FieldTimeMonitor type and several scalar field DataArray types defined elsewhere. The class stores references to the associated monitor and each of the E and H field components as DataArray instances or None. Each field corresponds to a specific spatial component and shares the naming conventions and type expectations for monitor data within tidy3d.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FieldTimeData(ElectromagneticFieldData):\n    \"\"\"Data associated with a :class:`.FieldTimeMonitor`: scalar components of E and H fields.\"\"\"\n    monitor: FieldTimeMonitor\n    Ex: ScalarFieldTimeDataArray = None\n    Ey: ScalarFieldTimeDataArray = None\n    Ez: ScalarFieldTimeDataArray = None\n    Hx: ScalarFieldTimeDataArray = None\n    Hy: ScalarFieldTimeDataArray = None\n    Hz: ScalarFieldTimeDataArray = None\n\n```\n\n----------------------------------------\n\nTITLE: Installing Tidy3D Developer Dependencies (Bash)\nDESCRIPTION: Installs Tidy3D with the `dev` dependency group. This installs all optional dependencies and plugins, intended for developers contributing to Tidy3D or needing all features.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npip install \"tidy3d[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Aluminum Arsenide (AlAs) Variants in Python\nDESCRIPTION: Demonstrates loading the available variants for Aluminum Arsenide ('AlAs') from the `material_library`. Each line loads a specific model (FernOnton1971, Horiba) into the `medium` variable.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AlAs']['FernOnton1971']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['AlAs']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown Files to RST Interactively with Poetry\nDESCRIPTION: Interactively converts all Markdown (`.md`) files in the project to reStructuredText (`.rst`) format using a development utility run via `poetry`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop convert-all-markdown-to-rst\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO3010 'design' Variant in Python (Example)\nDESCRIPTION: Example code accessing the 'design' variant (default) of the Rogers RO3010 material ('RO3010') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO3010']['design']\n```\n\n----------------------------------------\n\nTITLE: Accessing ZrO2 Material Properties in Python\nDESCRIPTION: Example of accessing the Horiba variant of ZrO2 material from the material library. Valid for wavelengths between 0.41-0.83 μm.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nmedium = material_library['ZrO2']['Horiba']\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Within Poetry Virtual Environment - Bash\nDESCRIPTION: Explains how to execute Python scripts or arbitrary shell commands within the Poetry-managed virtual environment using the poetry run subcommand. Ensures all dependencies are correctly resolved and isolated. Replace \"tidy3d_script.py\" with your specific script name.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python tidy3d_script.py\n```\n\n----------------------------------------\n\nTITLE: Running Complete tidy3d Tests (including Notebooks) with Poetry\nDESCRIPTION: Executes the complete test suite for `tidy3d`, including notebook tests, within the `poetry` environment. Requires notebooks to be downloaded beforehand.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop test-all\n```\n\n----------------------------------------\n\nTITLE: Previous Approach for Updating Tidy3D Objects\nDESCRIPTION: The previous, more verbose approach for copying a Tidy3D object with updated fields using the copy method with an update dictionary.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmed.copy(update=dict(permittivity=3.0))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources and Monitors for Multi-Simulation Optimization in Tidy3D\nDESCRIPTION: Sets up mode monitors and sources for multiple simulations in a multi-port device optimization scenario. It creates a left monitor and multiple right sources based on existing monitor positions.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmnt_name_left = \"mode\"\n\nmnt_left = td.ModeMonitor(\n    size=source.size,\n    center=source.center,\n    mode_spec=mode_spec,\n    name=mnt_name_left,\n    freqs=[freq0]\n)\n\nsrcs_right = []\n\nfor mnt in monitors_out:\n    src_right = source.updated_copy(\n        size=mnt.size,\n        center=mnt.center,\n        direction=\"-\",\n    )\n    srcs_right.append(src_right)\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests with Pytest via Poetry\nDESCRIPTION: Runs `pytest` via the `coverage` tool to measure test coverage, executed within the `poetry` environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npoetry run coverage run -m pytest\n```\n\n----------------------------------------\n\nTITLE: Accessing Rogers RO4350B 'process' Variant in Python\nDESCRIPTION: Example code accessing the 'process' variant of the Rogers RO4350B material ('RO4350B') from the material library. Note: Assumes `material_library` is an alias for the imported `rf_material_library`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/rf_material_library.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['RO4350B']['process']\n```\n\n----------------------------------------\n\nTITLE: SimulationData Renormalization Method in Python\nDESCRIPTION: This snippet implements the renormalize() method of the SimulationData class, enabling users to return a new SimulationData instance normalized to a specified index. The input is an integer normalize_index, representing the source to which the data should be normalized. The function returns an updated SimulationData object with the specified normalization applied. This is used to ensure file output matches simulation parameters and supports flexible data post-processing.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef renormalize(self, normalize_index: int) -> SimulationData:`\n\n```\n\n----------------------------------------\n\nTITLE: Setting Poetry test-pypi Token - Bash\nDESCRIPTION: Configures Poetry to use a PyPI API token for authentication with the test-pypi repository. Replace <<test.pypi TOKEN>> with an actual token value. Facilitates secure publishing to test.pypi using Poetry's credential store.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry config pypi-token.test-pypi <<test.pypi TOKEN>>\n```\n\n----------------------------------------\n\nTITLE: Executing General tidy3d Development Commands via Poetry\nDESCRIPTION: Provides a template for running various `tidy3d develop` utility commands within the `poetry` environment. Replace `<your command>` with the specific development command.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop <your command>\n```\n\n----------------------------------------\n\nTITLE: Augmented PML Profile Formula for Mode Solver\nDESCRIPTION: Defines the mathematical form `s(x) = kappa(x) + 1j * sigma(x) / (omega * EPSILON_0)` for the augmented Perfectly Matched Layer (PML) profile used in the mode solver, incorporating both `kappa` and `sigma` terms.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ns(x) = kappa(x) + 1j * sigma(x) / (omega * EPSILON_0)\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Monitor Names for Multi-Simulation in Tidy3D\nDESCRIPTION: Defines the output monitor names for each simulation to avoid unnecessary warnings during the optimization process.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\noutput_monitor_names = [[mnt_name_left], [mnt_name_left], [mnt_name_left]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tidy3D API Key on Windows using Pipx (Bash)\nDESCRIPTION: Uses pipx to run the Tidy3D configuration command on Windows. This automatically sets up the API key. Replace 'XXX' with the actual API key obtained from the Tidy3D web interface.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npipx run tidy3d configure --apikey=XXX\n```\n\n----------------------------------------\n\nTITLE: Accessing Beryllium (Be, RakicLorentzDrude1998 variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'RakicLorentzDrude1998' variant of the Beryllium (Be) material model from the `material_library`. This variant is an 8-pole, lossy model valid for the 0.25 - 61.99 µm wavelength range, based on Rakic et al. (1998) Lorentz-Drude model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Be']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpixel Averaging: Explicit Staircasing (Old True Behavior) in Python\nDESCRIPTION: Shows how to configure subpixel averaging using `SubpixelSpec` to replicate the behavior of `subpixel=True` for PEC materials from Tidy3D versions prior to 2.7.0. This uses `Staircasing()`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsubpixel=SubpixelSpec(pec=Staircasing())\n```\n\n----------------------------------------\n\nTITLE: Switching to Pre-release Branch in Bash\nDESCRIPTION: This command switches the current Git working branch to the specified pre-release branch, typically named 'pre/x.x'. This is the first step before creating a new feature branch to ensure development starts from the correct base.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/flow.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout pre/x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Poetry - Bash\nDESCRIPTION: Illustrates how to include new dependencies (such as numpy) to a project's configuration using Poetry's CLI. After running the command, the dependency is added to pyproject.toml under the appropriate section. Requires an initialized Poetry project; input argument specifies the package to install.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry add numpy\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests\nDESCRIPTION: The Bash command to run all tests contained within the 'tests' directory using Pytest, with options for formatted output.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest -rA tests\n```\n\n----------------------------------------\n\nTITLE: Generating Terminal Code Coverage Report with Pytest (Bash)\nDESCRIPTION: Executes pytest on the `tests` directory, calculates code coverage specifically for the `tidy3d` package (`--cov=tidy3d`), and prints a coverage report directly to the standard output (terminal). The `--cov-report term-missing` option highlights the lines of code that were not covered by the tests.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest tests --cov-report term-missing --cov=tidy3d\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Tidy3D Version (Bash)\nDESCRIPTION: Executes a short Python script via the command line to import the Tidy3D package and print its installed version (`__version__` attribute). This verifies the installation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/install.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import tidy3d as td; print(td.__version__)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Chromium (Cr, Rakic1998BB variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the default 'Rakic1998BB' variant of the Chromium (Cr) material model from the `material_library`. This variant is a 3-pole, lossy model valid for the 0.25 - 62.0 µm wavelength range, based on Rakic et al. (1998) BB model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Cr']['Rakic1998BB']\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Vertices Directly in Python\nDESCRIPTION: Illustrates an alternative approach for differentiation where vertices generated directly by a parameterization function (e.g., `make_vertices(params)`) are used in the objective function, bypassing the need to access the `_jax` attribute.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmake_vertices(params)\n```\n\n----------------------------------------\n\nTITLE: Bulk Replacing Strings in Files via Tidy3D CLI - Bash\nDESCRIPTION: This command runs the 'replace-in-files' utility, part of the Tidy3D CLI suite, to perform batch replacements in source or documentation files. It processes a directory per a version-specific mapping stored in a JSON file and supports a dry-run mode. Dependencies: Poetry, Tidy3D CLI, properly formatted JSON mapping file. Key parameters are '-d' (directory), '-j' (JSON mapping), '-v' (version), and '--dry-run'. Input: paths and options specified, Output: reports what would be changed (if dry-run).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/documentation.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop replace-in-files -d ./ -j ./docs/versions/test_replace_in_files.json -v 0.18.0 --dry-run True\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry Shell - Bash\nDESCRIPTION: Describes how to start a new shell session with the project's Poetry virtual environment activated. Any commands run inside this session use dependencies defined in pyproject.toml. Exit the session by typing \"exit\".\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry shell\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Files with Pytest\nDESCRIPTION: Use Pytest to run tests specifically within the 'tests/test_specific.py' file, including options for formatted output.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest -rA tests/test_specific.py\n```\n\n----------------------------------------\n\nTITLE: Migrating Documentation Versions via Bash Command\nDESCRIPTION: Demonstrates how to initiate migration between documentation versions by running a specific Bash command from the root directory of the repository. Intended for project maintainers, this command utilizes Bash to activate the process that converts docstrings according to versioned dictionaries. Users should ensure they are in the repository's root folder and have all necessary Bash and project-specific dependencies installed before executing the command.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/versions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n     \n```\n\n----------------------------------------\n\nTITLE: Accessing Chromium (Cr, RakicLorentzDrude1998 variant) in tidy3d Material Library (Python)\nDESCRIPTION: Retrieves the 'RakicLorentzDrude1998' variant of the Chromium (Cr) material model from the `material_library`. This variant is an 8-pole, lossy model valid for the 0.25 - 61.99 µm wavelength range, based on Rakic et al. (1998) Lorentz-Drude model.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/material_library.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> medium = material_library['Cr']['RakicLorentzDrude1998']\n```\n\n----------------------------------------\n\nTITLE: Formula for Adjoint Simulation Run Time Calculation\nDESCRIPTION: Describes the formula used to determine the run time for the adjoint simulation. It's calculated based on the forward simulation run time (`sim_fwd.run_time`) and the adjoint source width (`fwdith_adj`), with a constant factor `c=10`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nsim_fwd.run_time + c / fwdith_adj\n```\n\n----------------------------------------\n\nTITLE: Importing Entire Package in Python (Discouraged Example)\nDESCRIPTION: Illustrates the discouraged practice of importing an entire package (`mypackage`). The surrounding text explains that this method can slow down code execution because it loads all contents of the package, even if only specific parts are required. This is contrasted with the preferred method of importing only necessary components.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/recommendations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport mypackage\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Python Package with Poetry - Bash\nDESCRIPTION: Covers the workflow for building and uploading a Poetry-managed Python package to PyPI. The build step compiles the package; the publish step uploads it. Requires pre-configuration of publishing credentials and settings as per Poetry documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry build\n\npoetry publish\n```\n\n----------------------------------------\n\nTITLE: Install pipx on Ubuntu - Bash\nDESCRIPTION: Install pipx via the system Python on Ubuntu 22.04, ensuring pipx user-local accessibility. Requires Python 3. Key commands include installing pipx and updating the user path.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Testing with Pytest in a Specific Directory\nDESCRIPTION: This command runs tests in files within a specified directory called 'dir', looking for any files named with the pattern 'test*.py'.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest dir\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Tidy3D Material Library Using Sphinx and Jinja2\nDESCRIPTION: This template automates the documentation generation for a material library module in the Tidy3D project. It imports the module being documented and conditionally renders a list of functions available in that module using Jinja2 templating syntax.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/_templates/material_functions.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n.. automodule:: {{ fullname }}\n\n   {% block functions %}\n   {% if functions %}\n   {{ objname }}\n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest Coverage Plugin (Bash)\nDESCRIPTION: Installs the `pytest-cov` package using pip. This package is a prerequisite for generating code coverage reports with pytest, allowing developers to measure how much of their codebase is executed by the test suite.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-cov\n```\n\n----------------------------------------\n\nTITLE: Creating Surface Monitors from Volume Monitors in Tidy3D\nDESCRIPTION: Method to split volume field monitors into their constituent surface monitors, enabling more targeted field data collection at boundaries.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nFieldMonitor.surface()\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Conda Environment\nDESCRIPTION: The snippet details the steps to create a new conda environment with a specified Python version and poetry package, and then activate it. This ensures that each branch has an isolated environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_virtual_environments.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n branch_env python=3.11 poetry\nconda activate branch_env\npoetry env use system\npoetry env info\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Keyword Matches\nDESCRIPTION: Run specific tests in the 'tests/test_specific.py' file by matching the '-k' option against test function names.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest -rA tests/test_specific.py -k my_test\n```\n\n----------------------------------------\n\nTITLE: Checking and Fixing Python Code Style with Ruff (Bash)\nDESCRIPTION: Executes Ruff via Poetry to check for style issues and other potential problems within the `tidy3d` directory. The `--fix` flag automatically corrects many common warnings based on the rules defined in `pyproject.toml`. This helps maintain code quality and adherence to standards like PEP8.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/code_quality_principles.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run ruff check tidy3d --fix\n```\n\n----------------------------------------\n\nTITLE: Defining 3D Coordinate Tuple - Python\nDESCRIPTION: This snippet defines a 3D coordinate using a tuple of three float values. It is a type definition meant to be used across various components in Tidy3D simulations. Requires `typing.Tuple` and represents a point in 3D space.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCoordinate = Tuple[float, float, float]\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest Coverage\nDESCRIPTION: Install the 'pytest-cov' plugin to measure test coverage, showing which lines of code are covered during tests.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-cov\n```\n\n----------------------------------------\n\nTITLE: Summarizing Tidy3D Source Time Dependence Classes - reStructuredText\nDESCRIPTION: This snippet documents time-dependent source profiles in Tidy3D by generating autosummaries for GaussianPulse, ContinuousWave, and CustomSourceTime. Sphinx with autosummary and module.rst as a template is required, as are importable tidy3d Python classes. The output helps users identify available source temporal profiles in the Tidy3D framework and quickly navigate to full API docs.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/sources.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.GaussianPulse\\n   tidy3d.ContinuousWave\\n   tidy3d.CustomSourceTime\n```\n\n----------------------------------------\n\nTITLE: Summarizing Geometry Classes with Autosummary in Tidy3D (reStructuredText)\nDESCRIPTION: This code block uses Sphinx's '.. autosummary::' directive to list key geometry classes from the tidy3d Python module, including Box, Sphere, Cylinder, PolySlab, TriangleMesh, GeometryGroup, ClipOperation, and Transformed. It references templates and outputs to organize generated documentation in the _autosummary tree. No Python code execution occurs; this snippet is used for documentation configuration only. Dependencies include Sphinx and the tidy3d module. Inputs are the tidy3d class names, and the output is generated API documentation pages.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/geometry.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.Box\\n   tidy3d.Sphere\\n   tidy3d.Cylinder\\n   tidy3d.PolySlab\\n   tidy3d.TriangleMesh\\n   tidy3d.GeometryGroup\\n   tidy3d.ClipOperation\\n   tidy3d.Transformed\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Shows how to install project dependencies using Poetry, including optional development dependencies, and set up pre-commit hooks. This is crucial for maintaining consistent project states across different environments.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_virtual_environments.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install -E dev\npoetry run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Updating Codebase Docstrings with Poetry\nDESCRIPTION: Runs a development utility via `poetry` to update and replace docstrings throughout the `tidy3d` codebase, typically used when migrating between versions or standardizing documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry run tidy3d develop replace-in-files\n```\n\n----------------------------------------\n\nTITLE: Example Test Code using Pytest\nDESCRIPTION: An example of a minimal Pytest test file in Python, demonstrating function definitions and test assertions.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# gets evaluated first\nmy_two = 2.0\nmy_three = add_one(my_two)\n\ndef add_one(x):\n    # calls this function\n    return x+1\n\ndef test_one_plus_three():\n    # pytests runs this \"test\", passes test if no Exceptions\n    assert 1.0 + my_three == 4.0, \"addition failed\"\n\ndef something_else():\n    # doesnt get called ever\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Design Parameters for Topology Optimization in Python\nDESCRIPTION: Initializes the design parameters array for the previously defined `TopologyDesignRegion`. It uses the `params_random` property to create an array with random values between 0 and 1, applies a simple symmetric initialization by averaging it with its flipped version, and prints the shape of the resulting parameter array (`params0`).\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nparams0 = design_region.params_random\nparams0 += np.fliplr(params0)\nparams0 /= 2\nprint(params0.shape)\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests with Pytest\nDESCRIPTION: Command to run tests and measure coverage in the 'tidy3d' module with results printed to STDOUT.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest tests --cov-report term-missing --cov=tidy3d\n```\n\n----------------------------------------\n\nTITLE: Listing General Spatially Uniform Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet lists general, spatially uniform medium classes (`AnisotropicMedium`, `Medium2D`) from the `tidy3d` Python library using the `autosummary` directive. These mediums can be either dispersive or non-dispersive. `toctree` and `template` directives are specified for Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.AnisotropicMedium\n   tidy3d.Medium2D\n```\n\n----------------------------------------\n\nTITLE: Summarizing Transformation Classes with Autosummary in Tidy3D (reStructuredText)\nDESCRIPTION: This Sphinx autosummary directive lists transformation-related classes from tidy3d, specifically the RotationAroundAxis class. It specifies the output and template for summary documentation, mirroring the approach used for geometry classes. This configuration block is intended for use with Sphinx to build API docs. No code is executed; all class names should exist in the tidy3d module.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/geometry.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.RotationAroundAxis\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Tidy3D Configuration File via Command Line (Bash)\nDESCRIPTION: Creates the Tidy3D configuration file ($HOME/.tidy3d/config) and writes the API key into it using a command line echo command on Windows. Replace 'XXX' with the actual API key. Note the use of single and double quotes.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho 'apikey = \"XXX\"' > ~/.tidy3d/config\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Repository for test.PyPI - Bash\nDESCRIPTION: Configures Poetry to recognize the test-PyPI repository under the alias 'test-pypi'. Required before publishing or uploading package builds to this alternate index. Poetry must be installed and initialized in the project.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry config repositories.test-pypi https://test.pypi.org/legacy/\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry Lockfile\nDESCRIPTION: Updates the `poetry.lock` file based on changes made to dependencies in the `pyproject.toml` file. Run this command after modifying dependencies, followed by `poetry install`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/usage.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npoetry lock\n```\n\n----------------------------------------\n\nTITLE: Creating InverseDesignMulti Object for Multi-Simulation Optimization in Tidy3D\nDESCRIPTION: Initializes an InverseDesignMulti object that combines multiple simulations, a design region, and a post-processing function for inverse design optimization.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndesign_multi = tdi.InverseDesignMulti(\n    design_region=design_region,\n    simulations=simulations,\n    post_process_fn=post_process_fn,\n    task_name=\"invdes_multi\",\n    output_monitor_names=output_monitor_names,\n)\n```\n\n----------------------------------------\n\nTITLE: Output Coverage Results in HTML\nDESCRIPTION: Generate HTML formatted test coverage results for the 'tidy3d' module using Pytest.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tests/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest tests --cov-report=html --cov=tidy3d\nopen htmlcov/index.html\n```\n\n----------------------------------------\n\nTITLE: Listing Multi-Physics Medium Classes using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet employs the `autosummary` directive to generate documentation for multi-physics medium classes (`MultiPhysicsMedium`) located in the `tidy3d.components.material.multi_physics` namespace of the `tidy3d` Python library. It configures a `toctree` for Sphinx documentation generation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n\n   tidy3d.components.material.multi_physics.MultiPhysicsMedium\n```\n\n----------------------------------------\n\nTITLE: Summarizing Tidy3D Angled Plane Wave Specification Classes - reStructuredText\nDESCRIPTION: This snippet documents classes related to angled plane wave specifications, specifically tidy3d.FixedInPlaneK and tidy3d.FixedAngle, using the Sphinx autosummary directive. This requires Sphinx and the tidy3d Python module to be importable. It specifies how Tidy3D manages plane wave source orientation configuration, aiding advanced simulation setup documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/sources.rst#2025-04-22_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.FixedInPlaneK\\n   tidy3d.FixedAngle\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure with RST Directives\nDESCRIPTION: This snippet uses reStructuredText (RST) directives to structure the development guide. The `toctree` directive creates a table of contents with a maximum depth of 2, listing the main sections. The `include` directives incorporate content from separate RST files located in the specified paths, effectively building the complete guide from modular components.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    introduction/index\n    installation\n    usage\n    recommendations\n    release/index\n\n.. include:: /development/introduction/index.rst\n.. include:: /development/installation.rst\n.. include:: /development/usage.rst\n.. include:: /development/recommendations.rst\n.. include:: /development/release/index.rst\n```\n\n----------------------------------------\n\nTITLE: Skip pre-commit Hook Check On Commit - Bash\nDESCRIPTION: Commit code with Git while bypassing pre-commit hooks using '--no-verify'. Use this only in exceptional circumstances where hook checks are intentionally skipped.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --no-verify\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Rebased Feature Branch in Bash\nDESCRIPTION: This command force pushes (`-f`) the local feature branch 'my_name/new_feature' to the remote repository 'origin'. Force pushing is required after rebasing because the branch's commit history has been rewritten. This should be done carefully, typically after confirming the rebase is correct and before submitting or updating a pull request.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/flow.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin my_name/new_feature\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to test-PyPI with Build - Bash\nDESCRIPTION: Publish the current Poetry-managed package to the test-pypi repository, forcing a build prior to publishing. Relies on prior configuration of the repository alias and authentication token. Ensures that the package is uploaded for testing.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish --build -r test-pypi\n```\n\n----------------------------------------\n\nTITLE: Initializing Poetry in Existing Project - Bash\nDESCRIPTION: Shows how to add Poetry configuration to an existing project directory. This command interactively generates a pyproject.toml file and sets up initial project metadata. Requires Poetry to be installed and should be run from the target project root directory.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry init\n```\n\n----------------------------------------\n\nTITLE: Listing Boundary Placement Interfaces with Sphinx (reStructuredText)\nDESCRIPTION: This snippet lists structure and simulation boundary interfaces in tidy3d via the '.. autosummary::' Sphinx directive. Sphinx's autosummary and the toctree configuration are required dependencies. The snippet names classes such as StructureStructureInterface and SimulationBoundary for which documentation will be automatically built and linked under the specified location. Inputs are the class names, outputs are summary and detail documentation pages integrated into the Sphinx API docs. Intended for inclusion in tidy3d reStructuredText documentation files.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/boundary_conditions.rst#2025-04-22_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: ../_autosummary/\\n   :template: module.rst\\n\\n   tidy3d.StructureStructureInterface\\n   tidy3d.StructureBoundary\\n   tidy3d.MediumMediumInterface\\n   tidy3d.StructureSimulationBoundary\\n   tidy3d.SimulationBoundary\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Spatially Uniform Non-Dispersive Mediums using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet uses the `autosummary` directive to generate documentation entries for spatially uniform, non-dispersive medium classes in the `tidy3d` Python library (`Medium`, `LossyMetalMedium`, `PECMedium`, `FullyAnisotropicMedium`). It specifies a `toctree` for navigation and a `template` for rendering the individual documentation pages.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n   :template: module.rst\n\n   tidy3d.Medium\n   tidy3d.LossyMetalMedium\n   tidy3d.PECMedium\n   tidy3d.FullyAnisotropicMedium\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path for Design Space Exploration in RST\nDESCRIPTION: This RST directive sets the current module path for the documentation, pointing to the tidy3d package.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/design.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n```\n\n----------------------------------------\n\nTITLE: Install pandoc on Ubuntu - Bash\nDESCRIPTION: Update system package lists and install pandoc on Ubuntu using apt. Requires root privileges via sudo. Ensures pandoc is available for local documentation builds.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install pandoc\n```\n\n----------------------------------------\n\nTITLE: Uninstalling tidy3d-beta - Bash\nDESCRIPTION: Uninstalls tidy3d-beta from the current environment using pip and Python 3.9. Often used before or after testing installs from alternate repositories to avoid conflicts. Requires tidy3d-beta to be currently installed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython3.9 -m pip uninstall tidy3d-beta\n```\n\n----------------------------------------\n\nTITLE: Install pipx on macOS - Bash\nDESCRIPTION: Install pipx using homebrew on macOS, followed by ensuring the executable path is correctly set. Requires Homebrew. Ensures pipx is available in the shell environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pipx\npipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Material Thermal Classes Reference\nDESCRIPTION: Core thermal material classes including FluidMedium and SolidMedium for defining material thermal properties, along with their respective specification classes FluidSpec and SolidSpec.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/mediums.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntidy3d.FluidMedium\ntidy3d.SolidMedium\ntidy3d.FluidSpec\ntidy3d.SolidSpec\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autosummary for tidy3d Monitors (reStructuredText)\nDESCRIPTION: This snippet uses Sphinx directives in reStructuredText format. It sets the current Python module to 'tidy3d' using '.. currentmodule::'. Then, it employs '.. autosummary::' to automatically generate documentation summaries for the specified classes/modules (here, 'tidy3d.TemperatureMonitor'). The ':toctree:' option indicates the directory ('../_autosummary/') where generated stub files will be placed, and ':template:' specifies the template ('module.rst') to use for these files.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/monitor.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nMonitors\n----------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.TemperatureMonitor\n```\n\n----------------------------------------\n\nTITLE: Including README in Design Space Exploration Documentation\nDESCRIPTION: This RST directive includes the README file for the design plugin in the documentation tree.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/design.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n    ../../../tidy3d/plugins/design/README\n```\n\n----------------------------------------\n\nTITLE: Installing Local Development Dependencies - Bash\nDESCRIPTION: Installs local package and its development dependencies in editable mode. Used as a prerequisite step before testing installation from test.pypi.org to ensure required dependencies like pyroots are pre-installed. A clean Python environment and project-local setup are assumed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3.9 -m pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Install pandoc on macOS - Bash\nDESCRIPTION: Install a specific version of pandoc using Homebrew on macOS. The version pin guarantees compatibility with the package tooling.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pandoc@2.9\n```\n\n----------------------------------------\n\nTITLE: Install Tidy3D With Selected Extras Via pip - Bash\nDESCRIPTION: Install Tidy3D with optional dependency groups (such as dev, docs, web, jax) directly using pip. Each command activates a specific set of extras as defined in pyproject.toml. These commands should be run inside a suitable Python virtual environment.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip install tidy3d[dev]\npip install tidy3d[docs]\npip install tidy3d[web]\n...\npip install tidy3d[jax]\n```\n\n----------------------------------------\n\nTITLE: Testing tidy3d Imports After Installation - Python\nDESCRIPTION: Tests whether tidy3d and its components can be imported in Python after installation. Checks if modules from both the base package and plugins (such as ModeSolver) are accessible. Used to verify successful installs and basic integration.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport tidy3d as td; import tidy3d.web as web; from tidy3d.plugins.mode import ModeSolver\n```\n\n----------------------------------------\n\nTITLE: Referencing EMEModeSweep Class in tidy3d Python\nDESCRIPTION: This line references the `EMEModeSweep` class within the `tidy3d` Python library. Listed under a Sphinx `autosummary` directive, it serves as an entry point in the documentation index for functionalities related to EigenMode Expansion (EME) mode sweeps.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/eme/sweep.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntidy3d.EMEModeSweep\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple of Non-Negative Integers - Python\nDESCRIPTION: This defines a tuple of non-negative integers using `pydantic`'s nonNegativeInt type. It provides a structure for representing a series of non-negative indices, which can be used in various Tidy3D components. Requires `pydantic` for nonNegativeInt.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIndices = Tuple[pydantic.nonNegativeInt, ...]\n```\n\n----------------------------------------\n\nTITLE: Referencing EMELengthSweep Class in tidy3d Python\nDESCRIPTION: This line references the `EMELengthSweep` class from the `tidy3d` Python library. It appears within a Sphinx `autosummary` directive, indicating its inclusion in an automatically generated summary table or list related to propagation sweep functionalities, specifically for sweeps over the length of an EigenMode Expansion (EME) section.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/eme/sweep.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntidy3d.EMELengthSweep\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Summary for Design Space Exploration Classes\nDESCRIPTION: This RST autosummary directive generates documentation for various classes in the design space exploration module, including parameters, methods, and design space management.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/design.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.plugins.design.parameter.Parameter\n   tidy3d.plugins.design.ParameterFloat\n   tidy3d.plugins.design.ParameterInt\n   tidy3d.plugins.design.ParameterAny\n   tidy3d.plugins.design.method.Method\n   tidy3d.plugins.design.MethodGrid\n   tidy3d.plugins.design.MethodMonteCarlo\n   tidy3d.plugins.design.MethodBayOpt\n   tidy3d.plugins.design.MethodGenAlg\n   tidy3d.plugins.design.MethodParticleSwarm\n   tidy3d.plugins.design.DesignSpace\n   tidy3d.plugins.design.Result\n```\n\n----------------------------------------\n\nTITLE: Install pipx on Windows - Bash\nDESCRIPTION: Install pipx using scoop on Windows and update the shell path. Prerequisite: scoop is installed and configured. Provides the most common installation workflow for pipx on Windows.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nscoop install pipx\npipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpixel Averaging: Enabling (Old Behavior) in Python\nDESCRIPTION: Represents the behavior of `subpixel=True` in Tidy3D versions prior to 2.7.0.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsubpixel=True\n```\n\n----------------------------------------\n\nTITLE: Specifying Grid Modules in Tidy3D using reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText to document grid specification modules in Tidy3D. It sets up autosummary directives to generate documentation for UniformUnstructuredGrid and DistanceUnstructuredGrid modules.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/discretization.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nGrid Specification\n--------------------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.UniformUnstructuredGrid\n   tidy3d.DistanceUnstructuredGrid\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Plugin Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Tidy3D plugins, including a hidden table of contents and multiple include directives for plugin documentation files.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    ./mode_solver\n    ./dispersion\n    ./polyslab\n    ./smatrix\n    ./resonance\n    ./autograd\n    ./adjoint\n    ./invdes\n    ./design\n    ./waveguide\n    ./microwave\n\n\n.. include:: /api/plugins/mode_solver.rst\n.. include:: /api/plugins/dispersion.rst\n.. include:: /api/plugins/polyslab.rst\n.. include:: /api/plugins/smatrix.rst\n.. include:: /api/plugins/resonance.rst\n.. include:: /api/plugins/autograd.rst\n.. include:: /api/plugins/adjoint.rst\n.. include:: /api/plugins/invdes.rst\n.. include:: /api/plugins/design.rst\n.. include:: /api/plugins/waveguide.rst\n.. include:: /api/plugins/microwave.rst\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autosummary Directives for Boundary Placement\nDESCRIPTION: RST directive block defining automatic documentation generation for boundary placement types including structure interfaces and simulation boundaries.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/boundary_conditions.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.StructureStructureInterface\n   tidy3d.StructureBoundary\n   tidy3d.MediumMediumInterface\n   tidy3d.StructureSimulationBoundary\n   tidy3d.SimulationBoundary\n```\n\n----------------------------------------\n\nTITLE: Including Packages in pyproject.toml - TOML\nDESCRIPTION: Specifies which package directories to include in the distribution build of tidy3d-beta in pyproject.toml. Required for correct packaging, especially when not all subpackages are imported at the top level. Must be placed in the [tool.poetry] section of the TOML configuration.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\npackages = [\n    { include = \"tidy3d\" },\n    { include = \"tidy3d/web\" },\n    { include = \"tidy3d/plugins\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Pipx on Windows (Bash)\nDESCRIPTION: Installs the 'pipx' package on Windows using pip. Pipx is required for the recommended method of configuring the Tidy3D API key automatically on Windows systems.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pipx\n```\n\n----------------------------------------\n\nTITLE: Accessing Differentiable PolySlab Vertices in Python\nDESCRIPTION: Shows the new attribute name (`vertices_jax`) used to access the JAX-traced vertices of a `JaxPolySlab` object for differentiation purposes in Tidy3D 2.7.0+. The original `vertices` attribute no longer stores derivative information.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nJaxPolySlab.vertices_jax\n```\n\n----------------------------------------\n\nTITLE: Importing Tidy3D Monitor Classes in RST Documentation\nDESCRIPTION: RST directive to import and document various steady-state monitor classes from the Tidy3D package. The directive links to the module documentation and lists four different monitor types that track steady-state simulation properties.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/monitor.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nMonitors\n----------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.SteadyVoltageMonitor\n   tidy3d.SteadyPotentialMonitor\n   tidy3d.SteadyFreeCarrierMonitor\n   tidy3d.SteadyCapacitanceMonitor\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Microwave Documentation in RST\nDESCRIPTION: This RST code snippet defines a hidden table of contents for the microwave documentation, specifically including a reference to output data documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/microwave/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    output_data\n```\n\n----------------------------------------\n\nTITLE: Defining Tidy3D Simulation Module Documentation Structure in RST\nDESCRIPTION: This RST code defines the documentation structure for Tidy3D's simulation modules, specifically listing HeatSimulation and HeatChargeSimulation classes with autosummary directives to generate detailed module documentation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/simulation.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nSimulation\n-----------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.HeatSimulation\n   tidy3d.HeatChargeSimulation\n```\n\n----------------------------------------\n\nTITLE: Error Output: Missing Dependency ('click') - Python\nDESCRIPTION: Shows the traceback produced when attempting to import tidy3d.web and its CLI modules without the click dependency installed. Demonstrates the necessity of click for proper module loading. Used as context for dependency troubleshooting in packaging.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n[11:04:02] INFO     Using client version: 1.8.0                                                                                                                                              __init__.py:112\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/local/lib/python3.9/site-packages/tidy3d/web/__init__.py\", line 8, in <module>\n    from .cli import tidy3d_cli\n  File \"/usr/local/lib/python3.9/site-packages/tidy3d/web/cli/__init__.py\", line 4, in <module>\n    from .app import tidy3d_cli\n  File \"/usr/local/lib/python3.9/site-packages/tidy3d/web/cli/app.py\", line 7, in <module>\n    import click\nModuleNotFoundError: No module named 'click'\n```\n\n----------------------------------------\n\nTITLE: Executing Tidy3D Docs Build Command via Poetry using Shell\nDESCRIPTION: This shell command leverages `poetry run` to execute the custom `tidy3d develop build-docs-from-remote-notebooks` script. It pulls the latest changes from the remote `tidy3d-notebooks` repository (linked via submodule) into the local `tidy3d/notebooks` directory and then triggers the documentation build process. Assumes `poetry` is installed and the project's development environment and custom commands are correctly configured.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/notebooks.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry run tidy3d develop build-docs-from-remote-notebooks\n```\n\n----------------------------------------\n\nTITLE: Geometry Transformations in Tidy3D Python\nDESCRIPTION: Methods to create transformed copies of any geometry in the Tidy3D project, including translation, scaling, and rotation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nGeometry.translated, Geometry.scaled, and Geometry.rotated\n```\n\n----------------------------------------\n\nTITLE: Defining Tidy3D's Thermal Sources Documentation Structure in RST\nDESCRIPTION: This RST code defines the structure for Tidy3D's thermal sources documentation. It sets the current module to 'tidy3d' and creates an autosummary section for the HeatFromElectricSource module.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/source.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nThermal Sources\n-----------------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.HeatFromElectricSource\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents and Module Includes\nDESCRIPTION: This code configures a hidden table of contents structure using reStructuredText and includes all the module documentation files. It defines the navigation hierarchy for the API documentation and incorporates all component documentation using the include directive.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    simulation\n    boundary_conditions\n    geometry\n    mediums\n    material_library\n    rf_material_library\n    structures\n    sources\n    analytic_beams\n    monitors\n    mode\n    field_projector\n    lumped_elements\n    discretization\n    subpixel_averaging\n    output_data\n    scene\n    logging\n    submit_simulations\n    heat/index\n    charge/index\n    eme/index\n    microwave/index\n    plugins/index\n    spice\n    constants\n    abstract_base\n    abstract_models\n\n.. include:: /api/simulation.rst\n.. include:: /api/boundary_conditions.rst\n.. include:: /api/geometry.rst\n.. include:: /api/mediums.rst\n.. include:: /api/structures.rst\n.. include:: /api/sources.rst\n.. include:: /api/analytic_beams.rst\n.. include:: /api/monitors.rst\n.. include:: /api/mode.rst\n.. include:: /api/field_projector.rst\n.. include:: /api/lumped_elements.rst\n.. include:: /api/discretization.rst\n.. include:: /api/subpixel_averaging.rst\n.. include:: /api/output_data.rst\n.. include:: /api/scene.rst\n.. include:: /api/logging.rst\n.. include:: /api/submit_simulations.rst\n.. include:: /api/heat/index.rst\n.. include:: /api/charge/index.rst\n.. include:: /api/eme/index.rst\n.. include:: /api/microwave/index.rst\n.. include:: /api/plugins/index.rst\n.. include:: /api/constants.rst\n.. include:: /api/abstract_base.rst\n.. include:: /api/abstract_models.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Charge Module in reStructuredText\nDESCRIPTION: This snippet creates a hidden table of contents for the Charge module documentation, listing various subcomponents as separate pages.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    simulation\n    mediums\n    boundary_conditions\n    source\n    discretization\n    monitor\n    output_data\n```\n\n----------------------------------------\n\nTITLE: Initializing New Project with Poetry - Bash\nDESCRIPTION: Demonstrates how to create a new Python project preconfigured with Poetry for dependency and environment management. Running this command will generate a new folder structure and a pyproject.toml file. No prerequisites beyond having Poetry installed; the project folder will be named according to the argument provided.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/understanding_poetry.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry new poetry-demo\n```\n\n----------------------------------------\n\nTITLE: Listing Time Modulation Specification Classes using Sphinx autosummary (rst)\nDESCRIPTION: This reStructuredText snippet lists classes related to time modulation specifications (`ModulationSpec`, `SpaceTimeModulation`, `ContinuousWaveTimeModulation`, `SpaceModulation`) in the `tidy3d` Python library via the `autosummary` directive. These specifications can be added to existing mediums. Only the `toctree` option is specified here for Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/mediums.rst#2025-04-22_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary/\n\n   tidy3d.ModulationSpec\n   tidy3d.SpaceTimeModulation\n   tidy3d.ContinuousWaveTimeModulation\n   tidy3d.SpaceModulation\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoClass Template with Jinja2 for Class Documentation\nDESCRIPTION: A Sphinx documentation template that uses Jinja2 templating to format class documentation. It displays class attributes and methods in separate sections, filters out inherited members, and includes a special section for inherited common usage.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/_templates/module.rst#2025-04-22_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n:html_theme.sidebar_secondary.remove:\n{{ fullname | escape | underline}}\n\n.. autoclass:: {{ fullname }}\n   :members:\n   :show-inheritance:\n   :undoc-members:\n   :member-order: bysource\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree:\n      {% for item in attributes %}\n      {% if item not in inherited_members %}\n        {{ item }}\n      {% endif %}\n      {%- endfor %}\n      {% endif %}\n      {% endblock %}\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: Methods\n\n   .. autosummary::\n       :toctree:\n       {% for item in methods %}\n          {% if item not in inherited_members %}\n            {{ item }}\n          {% endif %}\n       {%- endfor %}\n       {% endif %}\n       {% endblock %}\n\n\n   .. rubric:: Inherited Common Usage\n\n   .. include:: ../_custom_autosummary/{{ fullname }}.rst\n```\n\n----------------------------------------\n\nTITLE: Generating Material Library Documentation with Jinja2 Templates in Sphinx\nDESCRIPTION: This template configures Sphinx's autosummary extension to document material classes in the Tidy3D project. It automatically lists all available material classes and applies the 'material_class.rst' template to each one, organizing them in a separate directory named after the module.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/_templates/materials.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\nMaterial library\n{{ underline }}\n\n.. automodule:: {{ fullname }}\n\n   {% block classes %}\n   {% if classes %}\n\n   .. autosummary::\n      :toctree: {{ objname }}\n      :template: material_class.rst\n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in Sphinx (reStructuredText)\nDESCRIPTION: This reStructuredText directive sets the current Python module namespace to `tidy3d` for the Sphinx documentation build process. Subsequent directives like `autosummary` or `autoclass` will resolve relative references within this module.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/simulation.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Directory Structure in Plaintext\nDESCRIPTION: This snippet outlines the directory structure of the `tidy3d` project. It includes directories for documentation, tests, scripts, and source code, as well as essential files for Python packaging and environment management. This structure is compliant with recommended guidelines for Python projects.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/introduction/project_structure.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocs/\n    # sphinx rst files\n    ...\n    notebooks/\n        # Git submodule repository\n        # Checks out github.com/flexcompute/tidy3d-notebooks\n    faq/\n        # Git submodule repository\n        # Checks out github.com/flexcompute/tidy3d-faq\ntests/\n    # pytest source and docs\n    # pytest notebooks\nscripts/\n    # useful handy scripts\ntidy3d/\n    # python source code\n...\npyproject.toml # python packaging\npoetry.lock # environment management\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Tidy3D Output Data\nDESCRIPTION: Restructured Text (RST) documentation defining the structure and organization of Tidy3D's output data classes and types. Includes sections for simulation data, monitor data, unstructured data classes, and individual datasets.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/output_data.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nOutput Data\n-------------\n\n\nSimulation Data\n^^^^^^^^^^^^^^^^^^^^\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.HeatChargeSimulationData\n\n\nMonitor Data\n^^^^^^^^^^^^\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.SteadyVoltageData\n   tidy3d.SteadyPotentialData\n   tidy3d.SteadyFreeCarrierData\n   tidy3d.SteadyCapacitanceData\n\n\nUnstructured Data Classes\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.TriangularGridDataset\n   tidy3d.TetrahedralGridDataset\n\n\nIndividual Datasets\n^^^^^^^^^^^^^^^^^^^\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.PointDataArray\n   tidy3d.CellDataArray\n   tidy3d.IndexedDataArray\n```\n\n----------------------------------------\n\nTITLE: Including Release Process Documentation Files (reStructuredText)\nDESCRIPTION: These reStructuredText `include` directives incorporate the content of four separate `.rst` files into the current document. This modular approach allows different aspects of the release process (flow, versioning, documentation handling, and notebook management) to be maintained in dedicated files located under `/development/release/`.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/development/release/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /development/release/flow.rst\n.. include:: /development/release/version.rst\n.. include:: /development/release/documentation.rst\n.. include:: /development/release/notebooks.rst\n```\n\n----------------------------------------\n\nTITLE: Exporting Simulation to GDS Format in Python\nDESCRIPTION: The snippet displays how to export the last simulation results to a GDS file using the `sim_last` object. The `to_gds_file` function accepts parameters like filename and frequency for the export process.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/plugins/invdes/README.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsim_last.to_gds_file(\n    fname=\"./misc/inv_des_demo.gds\",\n    z=0,\n    frequency=freq0,\n    permittivity_threshold=2.5\n)\n```\n\n----------------------------------------\n\nTITLE: Summarizing tidy3d Monitor Classes (reStructuredText)\nDESCRIPTION: This snippet uses Sphinx's autosummary directive to generate API reference tables for multiple tidy3d monitor classes, such as FieldMonitor and FluxTimeMonitor. The documentation references are auto-generated, requiring Sphinx, tidy3d, and the documented classes to exist and be importable. Inputs include the class list, which is displayed as summarized documentation with navigation links; the output appears as auto-generated summary tables within the documentation build. This approach ensures the documentation stays synchronized with the codebase, but is only effective within Sphinx-based documentation workflows.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/monitors.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.FieldMonitor\\n   tidy3d.FieldTimeMonitor\\n   tidy3d.FluxMonitor\\n   tidy3d.FluxTimeMonitor\\n   tidy3d.ModeMonitor\\n   tidy3d.ModeSolverMonitor\\n   tidy3d.PermittivityMonitor\\n   tidy3d.FieldProjectionCartesianMonitor\\n   tidy3d.FieldProjectionAngleMonitor\\n   tidy3d.FieldProjectionKSpaceMonitor\\n   tidy3d.DiffractionMonitor\\n   tidy3d.DirectivityMonitor\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText `toctree` directive, commonly used with Sphinx, to define a table of contents for the documentation. The `:maxdepth: 1` option limits the depth of the TOC included, and `:hidden:` prevents this specific TOC from being rendered visibly on the page itself, while still using it for navigation structure (like sidebars). It lists the files `fdtd101`, `fdtd_workshop`, and `inversedesign` to be included in the navigation.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/lectures/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :hidden:\n\n    fdtd101\n    fdtd_workshop\n    inversedesign\n```\n\n----------------------------------------\n\nTITLE: Time Convention Used in Tidy3D\nDESCRIPTION: Specifies the complex exponential time convention `exp(-1j * omega * t)` used throughout Tidy3D, which impacts the sign convention for quantities like PML loss.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nexp(-1j * omega * t)\n```\n\n----------------------------------------\n\nTITLE: Summarizing tidy3d ApodizationSpec Class (reStructuredText)\nDESCRIPTION: This snippet summarizes the tidy3d.ApodizationSpec class using Sphinx autosummary directives to produce API reference navigation for apodization specification objects. Prerequisites include an operational Sphinx build environment, tidy3d installed, and this class available in the codebase. The input class is tidily displayed within the generated documentation, but the output is only visible within a built Sphinx site. This ensures that the ApodizationSpec is discoverable alongside monitor classes for tidy3d users.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/monitors.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: _autosummary/\\n   :template: module.rst\\n\\n   tidy3d.ApodizationSpec\n```\n\n----------------------------------------\n\nTITLE: Using updated_copy Method for Tidy3D Objects\nDESCRIPTION: Example of the new .updated_copy() method that provides a more convenient shortcut to copy a Tidy3D object with updated field values.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmed.updated_copy(permittivity=3.0)\n```\n\n----------------------------------------\n\nTITLE: Including External Content in reStructuredText\nDESCRIPTION: These snippets use the reStructuredText `include` directive to incorporate the content of other `.rst` files directly into the current document at the location of the directive. This is a common pattern for modularizing documentation, allowing different sections (in this case, lectures) to be maintained in separate files. The paths specify the files relative to the documentation source directory.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/lectures/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /lectures/fdtd101.rst\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /lectures/fdtd_workshop.rst\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /lectures/inversedesign.rst\n```\n\n----------------------------------------\n\nTITLE: Listing Boundary Condition Specifications with Sphinx (reStructuredText)\nDESCRIPTION: This snippet uses the Sphinx '.. autosummary::' directive to enumerate specification classes in tidy3d, facilitating automatic API documentation generation. Dependencies include Sphinx with support for autosummary and a configured toctree. The parameters tidy3d.HeatBoundarySpec and tidy3d.HeatChargeBoundarySpec identify the classes to be documented, and the toctree/path settings control documentation output structure. The input is a list of classes, and the output is structured documentation pages for each, under the specified toctree. The snippet must appear within a .rst file processed by Sphinx.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/boundary_conditions.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: ../_autosummary/\\n   :template: module.rst\\n\\n   tidy3d.HeatBoundarySpec\\n   tidy3d.HeatChargeBoundarySpec\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Boundary Condition Types with Sphinx (reStructuredText)\nDESCRIPTION: This code block documents types of thermal boundary conditions within tidy3d using the '.. autosummary::' Sphinx directive for automatic summary generation. It is dependent on Sphinx autosummary functionality and a valid toctree setting. The classes tidy3d.TemperatureBC, tidy3d.ConvectionBC, and tidy3d.HeatFluxBC are referenced for documentation. The inputs are fully-qualified class names, and its output integrates generated summary documentation into the given toctree. Intended to reside in a Sphinx-reStructuredText documentation file.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/heat/boundary_conditions.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\\n   :toctree: ../_autosummary/\\n   :template: module.rst\\n\\n   tidy3d.TemperatureBC\\n   tidy3d.ConvectionBC\\n   tidy3d.HeatFluxBC\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control in robots.txt\nDESCRIPTION: This robots.txt configuration instructs all web crawlers to avoid indexing the /notebooks/ directory. The comment indicates this is a hidden version of the directory that should not be publicly indexed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/_static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n\nDisallow: /notebooks/ # Hidden version\n```\n\n----------------------------------------\n\nTITLE: Tidy3D Mode Solver Module Documentation\nDESCRIPTION: RST documentation defining the current module as tidy3d and listing the mode solver components that will be documented using autosummary directives.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/plugins/mode_solver.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tidy3d\n\nMode Solver\n-----------\n\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.plugins.mode.ModeSolver\n   tidy3d.plugins.mode.ModeSolverData\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autosummary Directives for Boundary Specs\nDESCRIPTION: RST directive block defining automatic documentation generation for heat-related boundary condition specifications.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/boundary_conditions.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.HeatBoundarySpec\n   tidy3d.HeatChargeBoundarySpec\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autosummary Directives for Boundary Types\nDESCRIPTION: RST directive block defining automatic documentation generation for voltage, current and insulating boundary condition types.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/charge/boundary_conditions.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../_autosummary/\n   :template: module.rst\n\n   tidy3d.VoltageBC\n   tidy3d.CurrentBC\n   tidy3d.InsulatingBC\n```\n\n----------------------------------------\n\nTITLE: Importing Abstract Base Models in Tidy3D\nDESCRIPTION: This code snippet shows the import statements for various abstract base classes in the Tidy3D project. These classes serve as the foundation for different components of the simulation framework.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/docs/api/abstract_base.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tidy3d.components.base_sim.data.sim_data import AbstractSimulationData\nfrom tidy3d.components.base_sim.monitor import AbstractMonitor\nfrom tidy3d.components.base_sim.simulation import AbstractSimulation\nfrom tidy3d.components.base_sim.source import AbstractSource\nfrom tidy3d.components.data.dataset import AbstractFieldDataset\nfrom tidy3d.components.data.monitor_data import AbstractFieldProjectionData\nfrom tidy3d.components.parameter_perturbation import AbstractPerturbation\nfrom tidy3d.components.medium import AbstractCustomMedium, AbstractMedium\nfrom tidy3d.components.simulation import AbstractYeeGridSimulation\nfrom tidy3d.components.structure import AbstractStructure\nfrom tidy3d.components.time import AbstractTimeDependence\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Field DataArray Subclass in Python\nDESCRIPTION: This snippet illustrates how to define a DataArray subclass, ScalarFieldTimeDataArray, which represents spatial field data in the time domain. It requires xarray (as DataArray inherits from xarray.DataArray), and defines the expected dimensions and attributes using the __slots__ and _data_attrs class variables. The expected input is a multi-dimensional array along with coordinate mappings for x, y, z, and t. This provides strong type expectations for tidy3d data, and the class is used as a template for field-like arrays.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/components/data/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ScalarFieldTimeDataArray(DataArray):\n    \"\"\"Spatial distribution in the time-domain.\"\"\"\n    __slots__ = (\"x\", \"y\", \"z\", \"t\")\n    _data_attrs = {\"long_name\": \"field value\"}\n\n```\n\n----------------------------------------\n\nTITLE: Installing tidy3d-beta Version 1.8.0 from test-PyPI - Bash\nDESCRIPTION: Attempts to install a specific version (1.8.0) of tidy3d-beta from test.pypi.org. Useful for testing new builds or reproducing issues related to dependency availability with exact versions. Requires all dependencies to be available on test.pypi.org or pre-installed.\nSOURCE: https://github.com/flexcompute/tidy3d/blob/develop/tidy3d/web/cli/readme.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3.9 -m pip install --index-url https://test.pypi.org/simple/ tidy3d-beta==1.8.0\n```"
  }
]