[
  {
    "owner": "mswjs",
    "repo": "msw",
    "content": "TITLE: Setting up MSW in a Browser Environment\nDESCRIPTION: Example of how to set up and use MSW in a browser environment. The code imports the necessary functions, defines a request handler, and starts the worker to begin intercepting requests.\nSOURCE: https://github.com/mswjs/msw/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Import the library.\nimport { http, HttpResponse } from 'msw'\nimport { setupWorker } from 'msw/browser'\n\n// 2. Describe network behavior with request handlers.\nconst worker = setupWorker(\n  http.get('https://github.com/octocat', ({ request, params, cookies }) => {\n    return HttpResponse.json(\n      {\n        message: 'Mocked response',\n      },\n      {\n        status: 202,\n        statusText: 'Mocked status',\n      },\n    )\n  }),\n)\n\n// 3. Start mocking by starting the Service Worker.\nawait worker.start()\n```\n\n----------------------------------------\n\nTITLE: Using MSW with Express in Node.js\nDESCRIPTION: Demonstrates how to integrate MSW with an Express server in Node.js. This example shows how to use server.boundary() to scope request interception to a specific closure, allowing mock API responses for external services.\nSOURCE: https://github.com/mswjs/msw/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport { http, HttpResponse } from 'msw'\nimport { setupServer } from 'msw/node'\n\nconst app = express()\nconst server = setupServer()\n\napp.get(\n  '/checkout/session',\n  server.boundary((req, res) => {\n    // Describe the network for this Express route.\n    server.use(\n      http.get(\n        'https://api.stripe.com/v1/checkout/sessions/:id',\n        ({ params }) => {\n          return HttpResponse.json({\n            id: params.id,\n            mode: 'payment',\n            status: 'open',\n          })\n        },\n      ),\n    )\n\n    // Continue with processing the checkout session.\n    handleSession(req, res)\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MSW Browser Integration Test Mocks\nDESCRIPTION: Example of setting up MSW request handlers for browser integration tests, demonstrating how to mock a GET request to a books endpoint.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// test/browser/example.mocks.ts\nimport { http, HttpResponse } from 'msw'\nimport { setupWorker } from 'msw/browser'\n\nconst worker = setupWorker(\n  http.get('/books', () => {\n    return HttpResponse.json([\n      {\n        id: 'ea42ffcb-e729-4dd5-bfac-7a5b645cb1da',\n        title: 'The Lord of the Rings',\n        publishedAt: -486867600,\n      },\n    ])\n  }),\n)\n\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Writing an MSW Node.js Integration Test\nDESCRIPTION: Example of setting up and testing MSW in a Node.js environment, demonstrating how to intercept and mock a GET request.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// test/node/example.test.ts\nimport { http, HttpResponse } from 'msw'\nimport { setupServer } from 'msw/node'\n\nconst server = setupServer(\n  http.get('/books', () => {\n    return HttpResponse.json([\n      {\n        id: 'ea42ffcb-e729-4dd5-bfac-7a5b645cb1da',\n        title: 'The Lord of the Rings',\n        publishedAt: -486867600,\n      },\n    ])\n  }),\n)\n\nbeforeAll(() => server.listen())\n\nafterAll(() => server.close())\n\ntest('returns a mocked response', async () => {\n  const res = await fetch('/books')\n\n  expect(await res.json()).toEqual([\n    {\n      id: 'ea42ffcb-e729-4dd5-bfac-7a5b645cb1da',\n      title: 'The Lord of the Rings',\n      publishedAt: -486867600,\n    },\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Writing an MSW Browser Integration Test\nDESCRIPTION: Example of a Playwright test that loads an MSW example, makes a request, and verifies the mocked response.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// test/browser/example.test.ts\nimport * as path from 'path'\nimport { test, expect } from './playwright.extend'\n\ntest('returns a mocked response', async ({ loadExample, fetch }) => {\n  // Compile the given usage example on runtime.\n  await loadExample(require.resolve('./example.mocks.ts'))\n\n  // Perform the \"GET /books\" request in the browser.\n  const res = await fetch('/books')\n\n  // Assert the returned response body.\n  expect(await res.json()).toEqual([\n    {\n      id: 'ea42ffcb-e729-4dd5-bfac-7a5b645cb1da',\n      title: 'The Lord of the Rings',\n      publishedAt: -486867600,\n    },\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: File Structure Example for MSW Integration Tests\nDESCRIPTION: Demonstrates the naming convention and file organization for MSW integration tests. Each test consists of a mocks file (*.mocks.ts) containing the example code to test, and a test file (*.test.ts) containing the Vitest test suite.\nSOURCE: https://github.com/mswjs/msw/blob/main/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*.mocks.ts\n*.test.ts\n```\n\n----------------------------------------\n\nTITLE: Writing a TypeScript Unit Test for MSW\nDESCRIPTION: Example of a TypeScript unit test that verifies the functionality of a multiply function.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/utils/multiply.test.ts\nimport { multiply } from './multiply'\n\ntest('multiplies two given numbers', () => {\n  expect(multiply(2, 3)).toEqual(6)\n})\n```\n\n----------------------------------------\n\nTITLE: Running MSW Browser Integration Tests\nDESCRIPTION: Commands to run browser integration tests using Playwright, either all tests or a specific test file.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:browser\n```\n\n----------------------------------------\n\nTITLE: Running MSW Unit Tests\nDESCRIPTION: Commands to run unit tests in the MSW project, either all tests or a specific test file.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test:unit src/utils/multiply.test.ts\n```\n\n----------------------------------------\n\nTITLE: Running All MSW Node.js Tests\nDESCRIPTION: Command to run all Node.js integration tests in the MSW project.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:node\n```\n\n----------------------------------------\n\nTITLE: Installing MSW Development Dependencies\nDESCRIPTION: Commands to clone and set up the MSW development environment using PNPM package manager.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd msw\n$ pnpm install\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Git Workflow for MSW Contributions\nDESCRIPTION: A series of Git commands demonstrating the recommended workflow for contributing to MSW, from creating a feature branch to pushing changes.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Checkout the default branch and ensure it's up-to-date\n$ git checkout main\n$ git pull --rebase\n\n# Create a feature branch\n$ git checkout -b feature/graphql-subscriptions\n\n# Commit the changes\n$ git add .\n$ git commit\n# Follow the interactive prompt to compose a commit message\n\n# Push\n$ git push -u origin feature/graphql-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Running a Single MSW Browser Test\nDESCRIPTION: Command to run a specific browser integration test file.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:browser ./test/browser/example.test.ts\n```\n\n----------------------------------------\n\nTITLE: Running a Single MSW Node.js Test\nDESCRIPTION: Command to run a specific Node.js integration test file.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:node ./test/node/example.test.ts\n```\n\n----------------------------------------\n\nTITLE: Running All MSW Unit Tests\nDESCRIPTION: Command to run all unit tests in the MSW project.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test:unit\n```\n\n----------------------------------------\n\nTITLE: Building the MSW Library\nDESCRIPTION: Command to build the MSW library from source code.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Nightly Validation Workflow in GitHub Actions\nDESCRIPTION: A reference to a GitHub Actions workflow file that validates MSW against nightly TypeScript releases. This automated job ensures early detection and resolution of compatibility issues.\nSOURCE: https://github.com/mswjs/msw/blob/main/decisions/typescript-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n../.github/workflows/typescript-nightly.yml\n```\n\n----------------------------------------\n\nTITLE: Building the MSW Library (Repeated)\nDESCRIPTION: Command to build the MSW library from source code, repeated from earlier in the document.\nSOURCE: https://github.com/mswjs/msw/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Displaying Bronze Sponsors with HTML Table in Markdown\nDESCRIPTION: An HTML table embedded in Markdown that displays the logos and links of bronze sponsors for the MSW project, including Materialize, Trigger.dev, and Vital.\nSOURCE: https://github.com/mswjs/msw/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td>\n      <a href=\"https://materialize.com/\" target=\"_blank\">\n        <img src=\"media/sponsors/materialize.svg\" alt=\"Materialize\" height=\"64\" />\n      </a>\n    </td>\n    <td>\n      <a href=\"https://trigger.dev/\" target=\"_blank\">\n        <img src=\"media/sponsors/trigger-dev.png\" alt=\"Trigger.dev\" height=\"64\" />\n      </a>\n    </td>\n    <td>\n      <a href=\"https://vital.io/\" target=\"_blank\">\n        <img src=\"media/sponsors/vital.svg\" alt=\"Vital\" width=\"64\" />\n      </a>\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Displaying Awards and Mentions with HTML Table in Markdown\nDESCRIPTION: An HTML table embedded in Markdown that showcases awards and mentions received by MSW, including Technology Radar's 'Solution Worth Pursuing' and Open Source Awards' 'The Most Exciting Use of Technology'.\nSOURCE: https://github.com/mswjs/msw/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr valign=\"middle\">\n    <td width=\"124\">\n      <img src=\"https://raw.githubusercontent.com/mswjs/msw/main/media/tech-radar.png\" width=\"124\" alt=\"Technology Radar\">\n    </td>\n    <td>\n      <h4>Solution Worth Pursuing</h4>\n      <p><em><a href=\"https://www.thoughtworks.com/radar/languages-and-frameworks/mock-service-worker\">Technology Radar</a> (2020–2021)</em></p>\n    </td>\n  </tr>\n  <tr>\n    <td width=\"124\">\n      <img src=\"https://raw.githubusercontent.com/mswjs/msw/main/media/os-awards.png\" width=\"124\" alt=\"Open Source Awards 2020\">\n    </td>\n    <td>\n      <h4>The Most Exciting Use of Technology</h4>\n      <p><em><a href=\"https://osawards.com/javascript/2020\">Open Source Awards</a> (2020)</em></p>\n    </td>\n  </tr>\n</table>\n```"
  }
]