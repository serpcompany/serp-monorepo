[
  {
    "owner": "desarrollosur",
    "repo": "odoo17docs",
    "content": "TITLE: Creating Records in Odoo\nDESCRIPTION: Demonstrates how to create a new record in a model using the create method, specifying field values for the new record and receiving its database identifier\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'res.partner', 'create', [{'name': \"New Partner\"}])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'res.partner', 'create', [{name: \"New Partner\"}])\n```\n\nLANGUAGE: php\nCODE:\n```\n$id = $models->execute_kw($db, $uid, $password, 'res.partner', 'create', array(array('name'=>\"New Partner\")))\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(db, uid, password, \"res.partner\", \"create\", asList(new HashMap() {{ put(\"name\", \"New Partner\"); }})))\n```\n\nLANGUAGE: go\nCODE:\n```\nmodels.Call(\"execute_kw\", []any{db, uid, password, \"res.partner\", \"create\", []map[string]string{{\"name\": \"New Partner\"}}, &id})\n```\n\n----------------------------------------\n\nTITLE: Field Access and Mapping in Python Recordsets\nDESCRIPTION: Shows different ways to access field values in Odoo recordsets, including attribute access, dictionary-style access, and using mapped() for non-relational fields on multiple records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Accessing field values directly\n>>> record.name\nExample Name\n>>> record.company_id.name\nCompany Name\n>>> record.name = \"Bob\"\n>>> field = \"name\"\n>>> record[field]\nBob\n\n# For non-relational fields on multiple records\ntotal_qty = sum(self.mapped('qty'))\n```\n\n----------------------------------------\n\nTITLE: Unsafe Public Method Example in Odoo\nDESCRIPTION: This snippet illustrates a potential security vulnerability in Odoo where a public method's arguments are not trusted. ACL verification only occurs during CRUD operations. The method is public, meaning it can be called via an RPC call, so its arguments cannot be trusted, which can lead to security issues.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# this method is public and its arguments can not be trusted\ndef action_done(self):\n    if self.state == \\\"draft\\\" and self.user_has_groups('base.manager'):\n        self._set_state(\\\"done\\\")\n\n# this method is private and can only be called from other python methods\ndef _set_state(self, new_state):\n    self.sudo().write({\\\"state\\\": new_state})\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Unescaped Content with QWeb in JavaScript\nDESCRIPTION: This snippet demonstrates an insecure way of rendering user-provided content using t-raw in QWeb templates, which can lead to XSS vulnerabilities.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb.render('insecure_template', {\n    info_message: \"You have an <strong>important</strong> notification\",\n})\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div t-name=\"insecure_template\">\n    <div id=\"information-bar\"><t t-raw=\"info_message\" /></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Owl Component in Javascript\nDESCRIPTION: This snippet demonstrates how to define a simple Owl component in Odoo using Javascript. It shows how to import hooks and tags from the `owl` library, define a component class with a state and a method to increment a value. It also showcases how to define the template directly in the Javascript code using the `xml` helper.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useState } = owl.hooks;\n    const { xml } = owl.tags;\n\n    class MyComponent extends Component {\n        setup() {\n            this.state = useState({ value: 1 });\n        }\n\n        increment() {\n            this.state.value++;\n        }\n    }\n    MyComponent.template = xml\n        `<div t-on-click=\"increment\">\n            <t t-esc=\"state.value\">\n        </div>`;\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Tests via Command Line\nDESCRIPTION: Demonstrates various command-line options for running Odoo tests, including enabling tests, specifying test files, and filtering test tags\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/unit_tests.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin -h\n$ odoo-bin -i account --test-enable\n$ odoo-bin --test-file=addons/account/tests/test_account_move_entry.py\n$ odoo-bin --test-tags=/account:TestAccountMove.test_custom_currency_on_account_1\n```\n\n----------------------------------------\n\nTITLE: Defining a Related Field in Odoo\nDESCRIPTION: This example illustrates how to define a related (proxy) field in Odoo.  The `related` parameter specifies the sequence of relational fields to traverse to get the value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnickname = fields.Char(related='user_id.partner_id.name', store=True)\n```\n\n----------------------------------------\n\nTITLE: Search View Definition in Odoo XML\nDESCRIPTION: Basic search view configuration allowing search on name and inventor fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <field name=\"name\"/>\n    <field name=\"inventor_id\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Implementing Company-Dependent Fields in Python\nDESCRIPTION: Demonstrates how to create company-dependent fields in an Odoo model with computed fields that respond to company context changes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/company.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass Record(models.Model):\n    _name = 'record.public'\n\n    info = fields.Text()\n    company_info = fields.Text(company_dependent=True)\n    display_info = fields.Text(string='Infos', compute='_compute_display_info')\n\n    @api.depends_context('company')\n    def _compute_display_info(self):\n        for record in self:\n            record.display_info = record.info + record.company_info\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Odoo Widget\nDESCRIPTION: Creates a basic HomePage widget by extending the base Odoo Widget class with a start method for initialization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        console.log(\"pet store home page loaded\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Escaping and Sanitizing HTML Content in Python\nDESCRIPTION: This snippet demonstrates the difference between escaping and sanitizing HTML content, and how to properly use these techniques to ensure security.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from odoo.tools import html_escape, html_sanitize\n>>> data = \"<R&D>\" # `data` is some TEXT coming from somewhere\n\n# Escaping turns it into CODE, good!\n>>> code = html_escape(data)\n>>> code\nMarkup('&lt;R&amp;D&gt;')\n\n# Now you can mix it with other code...\n>>> self.website_description = Markup(\"<strong>%s</strong>\") % code\n\n# Sanitizing without escaping is BROKEN: data is corrupted!\n>>> html_sanitize(data)\nMarkup('')\n\n# Sanitizing *after* escaping is OK!\n>>> html_sanitize(code)\nMarkup('<p>&lt;R&amp;D&gt;</p>')\n\n>>> code = \"<p class='text-warning'>Important Information</p>\"\n# this will remove the style, which may break features\n# but is necessary if the source is untrusted\n>>> html_sanitize(code, strip_classes=True)\nMarkup('<p>Important Information</p>')\n```\n\n----------------------------------------\n\nTITLE: Starting an Odoo Tour from a Python Test\nDESCRIPTION: This Python code snippet demonstrates how to start a tour from a Python test case in Odoo. It inherits from `odoo.tests.HTTPCase` and uses the `start_tour` method to initiate the tour. It takes the URL, tour name, and login credentials as arguments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef test_your_test(self):\n    # Optional Setup\n    self.start_tour(\"/web\", 'your_module.your_tour_name', login=\"admin\")\n    # Optional verifications\n```\n\n----------------------------------------\n\nTITLE: Subclassing Kanban View in Odoo - JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the existing kanban view in Odoo by subclassing the KanbanController, defining a new template, and registering it in the view registry.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { KanbanController } from \"@web/views/kanban/kanban_controller\";\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\nimport { registry } from \"@web/core/registry\";\n\n// the controller usually contains the Layout and the renderer.\nclass CustomKanbanController extends KanbanController {\n    // Your logic here, override or insert new methods...\n    // if you override setup(), don't forget to call super.setup()\n}\n\nCustomKanbanController.template = \"my_module.CustomKanbanView\";\n\nexport const customKanbanView = {\n    ...kanbanView, // contains the default Renderer/Controller/Model\n    Controller: CustomKanbanController,\n};\n\n// Register it to the views registry\nregistry.category(\"views\").add(\"custom_kanban\", customKanbanView);\n```\n\n----------------------------------------\n\nTITLE: Safe Evaluation of User-Provided Content in Python\nDESCRIPTION: This snippet shows the dangers of using eval() for parsing user-provided content and suggests safer alternatives like safe_eval() and literal_eval().\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# very bad\ndomain = eval(self.filter_domain)\nreturn self.search(domain)\n\n# better but still not recommended\nfrom odoo.tools import safe_eval\ndomain = safe_eval(self.filter_domain)\nreturn self.search(domain)\n\n# good\nfrom ast import literal_eval\ndomain = literal_eval(self.filter_domain)\nreturn self.search(domain)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model in Odoo\nDESCRIPTION: This snippet demonstrates how to define a model in Odoo using Python. It shows how to inherit from `models.Model`, define the `_name` attribute, and declare a character field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields\nclass AModel(models.Model):\n    _name = 'a.model.name'\n\n    field1 = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritance in Odoo Models - Python\nDESCRIPTION: This code snippet demonstrates how to define two models in Odoo where one model inherits from another. The example illustrates the use of the _inherit attribute to extend functionality while retaining original characteristics.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Inheritance0(models.Model):\n    _name = 'inheritance.0'\n    _description = 'Inheritance Zero'\n\n    name = fields.Char()\n\n    def call(self):\n        return self.check(\"model 0\")\n\n    def check(self, s):\n        return \"This is {} record {}\".format(s, self.name)\n\nclass Inheritance1(models.Model):\n    _name = 'inheritance.1'\n    _inherit = 'inheritance.0'\n    _description = 'Inheritance One'\n\n    def call(self):\n        return self.check(\"model 1\")\n\na = env['inheritance.0'].create({'name': 'A'})\nb = env['inheritance.1'].create({'name': 'B'})\na.call()\nb.call()\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Domain Filters\nDESCRIPTION: Demonstrates how to use domains within Odoo models to filter records based on specified conditions, using operators like AND, OR, and NOT for complex query logic.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n[('product_type', '=', 'service'), ('unit_price', '>', 1000)]\n```\n\nLANGUAGE: python\nCODE:\n```\n['|',\\n    ('product_type', '=', 'service'),\\n    '!', '&',\\n        ('unit_price', '>=', 1000),\\n        ('unit_price', '<', 2000)]\n```\n\n----------------------------------------\n\nTITLE: Catching Specific Errors in JavaScript with try/catch\nDESCRIPTION: This code snippet illustrates how to catch specific errors in JavaScript using try/catch blocks. It emphasizes the importance of checking the error type with instanceof and keeping the try block concise to prevent catching unrelated errors.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet someVal;\ntry {\n  someVal = someFunction();\n  // do not start working with someVal here.\n} catch (e) {\n  if (!(e instanceof MyError)) {\n    throw e;\n  }\n  someVal = null;\n}\n// start working with someVal here\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Odoo\nDESCRIPTION: Complete Nginx configuration for SSL termination, proxy settings, and websocket handling for Odoo deployment\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\n#odoo server\nupstream odoo {\n  server 127.0.0.1:8069;\n}\nupstream odoochat {\n  server 127.0.0.1:8072;\n}\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  ''      close;\n}\n\n# http -> https\nserver {\n  listen 80;\n  server_name odoo.mycompany.com;\n  rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n  listen 443 ssl;\n  server_name odoo.mycompany.com;\n  proxy_read_timeout 720s;\n  proxy_connect_timeout 720s;\n  proxy_send_timeout 720s;\n\n  # SSL parameters\n  ssl_certificate /etc/ssl/nginx/server.crt;\n  ssl_certificate_key /etc/ssl/nginx/server.key;\n  ssl_session_timeout 30m;\n  ssl_protocols TLSv1.2;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  # log\n  access_log /var/log/nginx/odoo.access.log;\n  error_log /var/log/nginx/odoo.error.log;\n\n  # Redirect websocket requests to odoo gevent port\n  location /websocket {\n    proxy_pass http://odoochat;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8\n  }\n\n  # Redirect requests to odoo backend server\n  location / {\n    # Add Headers for odoo proxy mode\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_redirect off;\n    proxy_pass http://odoo;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8\n  }\n\n  # common gzip\n  gzip_types text/css text/scss text/plain text/xml application/xml application/json application/javascript;\n  gzip on;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Model Fields in Odoo\nDESCRIPTION: Demonstrates how to retrieve specific fields from a model using execute_kw method, limiting the returned data to selected attributes like name, country, and comment\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {'fields': ['name', 'country_id', 'comment']})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {fields: %w(name country_id comment)})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'read', array($ids), array('fields'=>array('name', 'country_id', 'comment')))\n```\n\nLANGUAGE: java\nCODE:\n```\nasList((Object[])models.execute(\"execute_kw\", asList(db, uid, password, \"res.partner\", \"read\", asList(ids), new HashMap() {{ put(\"fields\", asList(\"name\", \"country_id\", \"comment\")); }})))\n```\n\nLANGUAGE: go\nCODE:\n```\nmodels.Call(\"execute_kw\", []any{db, uid, password, \"res.partner\", \"read\", ids, map[string][]string{\"fields\": {\"name\", \"country_id\", \"comment\"}}}, &recordFields)\n```\n\n----------------------------------------\n\nTITLE: Basic Coordinates Widget Implementation in JavaScript\nDESCRIPTION: This JavaScript code extends the Odoo form widget to create a custom widget that displays a map based on latitude and longitude fields. It listens for changes in the coordinate fields and updates the map accordingly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetCoordinates = instance.web.form.FormWidget.extend({\n    start: function() {\n        this._super();\n        this.field_manager.on(\"field_changed:provider_latitude\", this, this.display_map);\n        this.field_manager.on(\"field_changed:provider_longitude\", this, this.display_map);\n        this.display_map();\n    },\n    display_map: function() {\n        this.$el.html(QWeb.render(\"WidgetCoordinates\", {\n            \"latitude\": this.field_manager.get_field_value(\"provider_latitude\") || 0,\n            \"longitude\": this.field_manager.get_field_value(\"provider_longitude\") || 0,\n        }));\n    }\n});\n\ninstance.web.form.custom_widgets.add('coordinates', 'instance.oepetstore.WidgetCoordinates');\n```\n\n----------------------------------------\n\nTITLE: Expressing Dependencies in Computed Fields\nDESCRIPTION: Illustrates the use of the @api.depends decorator in Odoo which declares dependencies for computed fields. This ensures fields are updated when their dependent fields change.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields, api\\n\\nclass ComputedModel(models.Model):\\n    _name = 'test.computed'\\n\\n    name = fields.Char(compute='_compute_name')\\n    value = fields.Integer()\\n\\n    @api.depends('value')\\n    def _compute_name(self):\\n        for record in self:\\n            record.name = \"Record with value %s\" % record.value\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Classes in Odoo\nDESCRIPTION: This snippet demonstrates how to define a new class in Odoo using the 'extend' method of 'instance.web.Class'. It shows class creation, instantiation, and method definition, with an example of the 'say_hello' method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyClass = instance.web.Class.extend({\n    say_hello: function() {\n        console.log(\"hello\");\n    },\n});\n\nvar my_object = new MyClass();\nmy_object.say_hello();\n// print \"hello\" in the console\n```\n\n----------------------------------------\n\nTITLE: Delegation in Odoo Models - Python\nDESCRIPTION: This code snippet demonstrates how to use delegation in Odoo models. It defines a Laptop model that delegates fields from Screen and Keyboard models, showcasing how to set up relationships between them.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Screen(models.Model):\n    _name = 'delegation.screen'\n    _description = 'Screen'\n\n    size = fields.Float(string='Screen Size in inches')\n\nclass Keyboard(models.Model):\n    _name = 'delegation.keyboard'\n    _description = 'Keyboard'\n\n    layout = fields.Char(string='Layout')\n\nclass Laptop(models.Model):\n    _name = 'delegation.laptop'\n    _description = 'Laptop'\n\n    _inherits = {\n        'delegation.screen': 'screen_id',\n        'delegation.keyboard': 'keyboard_id',\n    }\n\n    name = fields.Char(string='Name')\n    maker = fields.Char(string='Maker')\n\n    screen_id = fields.Many2one('delegation.screen', required=True, ondelete=\"cascade\")\n    keyboard_id = fields.Many2one('delegation.keyboard', required=True, ondelete=\"cascade\")\n\nrecord = env['delegation.laptop'].create({\n    'screen_id': env['delegation.screen'].create({'size': 13.0}).id,\n    'keyboard_id': env['delegation.keyboard'].create({'layout': 'QWERTY'}).id,\n})\nrecord.size\nrecord.layout\n```\n\n----------------------------------------\n\nTITLE: Adding demonstration data to Odoo modules using XML\nDESCRIPTION: Definition of data records for Odoo models using XML files, typically loaded during module installation or updates. These records populate the database with initial or demonstration data, defined by model and field names.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n\n    <record model=\"{model name}\" id=\"{record identifier}\">\n        <field name=\"{a field name}\">{a value}</field>\n    </record>\n\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action with Python Code\nDESCRIPTION: This snippet illustrates the definition of a server action in Odoo that executes a piece of Python code when triggered. It includes context for when the action is called and demonstrates conditional logic for further actions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.actions.server\" id=\"print_instance\">\n    <field name=\"name\">Res Partner Server Action</field>\n    <field name=\"model_id\" ref=\"model_res_partner\" />\n    <field name=\"state\">code</field>\n    <field name=\"code\">\n        raise Warning(record.name)\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Field in Odoo\nDESCRIPTION: This example demonstrates how to define a computed field in Odoo.  The `compute` parameter specifies the method to compute the field's value, and `@api.depends` declares the dependencies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api\ntotal = fields.Float(compute='_compute_total')\n\n@api.depends('value', 'tax')\ndef _compute_total(self):\n    for record in self:\n        record.total = record.value + record.value * record.tax\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Value with a Function in Odoo\nDESCRIPTION: This code snippet showcases how to define a default value for a field using a function in Odoo.  The function `_default_name` is called to compute the default value. Lambda is used to reference the method on self.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef _default_name(self):\n    return self.get_value()\n\nname = fields.Char(default=lambda self: self._default_name())\n```\n\n----------------------------------------\n\nTITLE: Writing a QUnit Test Case in JavaScript\nDESCRIPTION: Demonstrates how to write a basic QUnit test case for an Odoo addon. This test checks the result of a utility function against an expected value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test(\"some test case that we want to test\", function (assert) {\n    assert.expect(1);\n\n    var result = utils.myFunction(someArgument);\n    assert.strictEqual(result, expectedResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Translation Functions in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _t function to translate text in the user interface. It wraps a string that needs to be translated.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$el.text(_t(\"Hello user!\"));\n```\n\n----------------------------------------\n\nTITLE: Inserting Content After a Node - Odoo XML\nDESCRIPTION: This code snippet shows how to use `position=\"after\"` to insert content after the matched node's parent.  The provided XML snippet is inserted as a sibling, following the element matched by the XPath expression.  It requires the correct XPath expression to locate the target node.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//field[@name='x_field']\\\" position=\\\"after\\\">\\n    <field name=\\\"x_other_field\\\"/>\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Actions and Views for Courses in Odoo\nDESCRIPTION: This XML snippet defines an action and associated views (search, list, form) for the 'academy.courses' model in Odoo.  It includes a menu item to access the courses. It allows to create, search and display courses.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"action_academy_courses\\\" model=\\\"ir.actions.act_window\\\">\\n    <field name=\\\"name\\\">Academy courses</field>\\n    <field name=\\\"res_model\\\">academy.courses</field>\\n</record>\\n<record id=\\\"academy_course_search\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy courses: search</field>\\n    <field name=\\\"model\\\">academy.courses</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <search>\\n            <field name=\\\"name\\\"/>\\n            <field name=\\\"teacher_id\\\"/>\\n        </search>\\n    </field>\\n</record>\\n<record id=\\\"academy_course_list\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy courses: list</field>\\n    <field name=\\\"model\\\">academy.courses</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <tree string=\\\"Courses\\\">\\n            <field name=\\\"name\\\"/>\\n            <field name=\\\"teacher_id\\\"/>\\n        </tree>\\n    </field>\\n</record>\\n<record id=\\\"academy_course_form\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy courses: form</field>\\n    <field name=\\\"model\\\">academy.courses</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <form>\\n            <sheet>\\n                <field name=\\\"name\\\"/>\\n                <field name=\\\"teacher_id\\\"/>\\n            </sheet>\\n        </form>\\n    </field>\\n</record>\\n\\n<menuitem sequence=\\\"0\\\" id=\\\"menu_academy\\\" name=\\\"Academy\\\"/>\\n<menuitem id=\\\"menu_academy_content\\\" parent=\\\"menu_academy\\\"\\n            name=\\\"Academy Content\\\"/>\\n<menuitem id=\\\"menu_academy_content_courses\\\"\\n            parent=\\\"menu_academy_content\\\"\\n            action=\\\"action_academy_courses\\\"/>\\n<menuitem id=\\\"menu_academy_content_teachers\\\"\\n            parent=\\\"menu_academy_content\\\"\\n            action=\\\"action_academy_teachers\\\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Install and At-Install Test Cases in Odoo\nDESCRIPTION: Demonstrates how to create test cases with different installation tags using Python decorators, controlling when tests are executed during module installation\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/unit_tests.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests.common import TransactionCase\nfrom odoo.tests import tagged\n\n@tagged('post_install', '-at_install')\nclass PostInstallTestCase(TransactionCase):\n    def test_01(self):\n        ...\n\n@tagged('at_install')\nclass AtInstallTestCase(TransactionCase):\n    def test_01(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using OWL Slots for Generic Card Component\nDESCRIPTION: Implementation of a Card component using OWL's slot system to allow for flexible content insertion. Removes the content prop in favor of using default slots for body content, enabling the insertion of arbitrary components like Counter.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Card>\n    <Counter/>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Recordsets\nDESCRIPTION: Shows how to create empty recordsets and perform searches using the environment object\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n>>> self.env['res.partner']\nres.partner()\n>>> self.env['res.partner'].search([('is_company', '=', True), ('customer', '=', True)])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Setup Method in Owl Component (Javascript)\nDESCRIPTION: This snippet demonstrates the correct way to initialize an Owl component in Odoo. Instead of using the `constructor`, the `setup` method should be used for initialization logic. This ensures compatibility with Odoo's component lifecycle and override mechanisms.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// correct:\n    class MyComponent extends Component {\n        setup() {\n            // initialize component here\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Access Rights with execute_kw in Multiple Languages\nDESCRIPTION: This code demonstrates how to call the check_access_rights method on the res.partner model to verify read access permissions. The example shows implementation in Python, Ruby, PHP, Java, and Go, using the execute_kw function with positional and keyword arguments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmodels = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))\nmodels.execute_kw(db, uid, password, 'res.partner', 'check_access_rights', ['read'], {'raise_exception': False})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels = XMLRPC::Client.new2(\"#{url}/xmlrpc/2/object\").proxy\nmodels.execute_kw(db, uid, password, 'res.partner', 'check_access_rights', ['read'], {raise_exception: false})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models = ripcord::client(\"$url/xmlrpc/2/object\");\n$models->execute_kw($db, $uid, $password, 'res.partner', 'check_access_rights', array('read'), array('raise_exception' => false));\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal XmlRpcClient models = new XmlRpcClient() {{\n    setConfig(new XmlRpcClientConfigImpl() {{\n        setServerURL(new URL(String.format(\"%s/xmlrpc/2/object\", url)));\n    }});\n}};\nmodels.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"check_access_rights\",\n    asList(\"read\"),\n    new HashMap() {{ put(\"raise_exception\", false); }}\n));\n```\n\nLANGUAGE: go\nCODE:\n```\nmodels, err := xmlrpc.NewClient(fmt.Sprintf(\"%s/xmlrpc/2/object\", url), nil)\nif err != nil {\n    log.Fatal(err)\n}\nvar result bool\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"check_access_rights\",\n    []string{\"read\"},\n    map[string]bool{\"raise_exception\": false},\n}, &result); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Essential Module Files in Odoo\nDESCRIPTION: This snippet illustrates the creation of the essential '__init__.py' and '__manifest__.py' files for a new Odoo module. The '__init__.py' can remain empty, while the '__manifest__.py' file must define at least the module name and its dependencies. The 'base' module is the essential dependency initially needed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/02_newapp.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# /home/$USER/src/tutorials/estate/__init__.py\n# This file can remain empty for now\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# /home/$USER/src/tutorials/estate/__manifest__.py\n{\n    \"name\": \"estate\",\n    \"depends\": [\"base\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Values on a Computed Field in Odoo\nDESCRIPTION: This snippet demonstrates how to allow setting values on a computed field using the `inverse` parameter in Odoo. It specifies a method that reverses the computation and sets the relevant fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndocument = fields.Char(compute='_get_document', inverse='_set_document')\n\ndef _get_document(self):\n    for record in self:\n        with open(record.get_document_path) as f:\n            record.document = f.read()\ndef _set_document(self):\n    for record in self:\n        if not record.document: continue\n        with open(record.get_document_path()) as f:\n            f.write(record.document)\n```\n\n----------------------------------------\n\nTITLE: Native Javascript Module with Odoo Annotation\nDESCRIPTION: This code snippet shows a native JavaScript module with the *@odoo-module* annotation. This annotation tells Odoo to convert the file into an Odoo module during asset bundling. The module imports `someFunction` from `./file_b` and exports `otherFunction`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\n  /** @odoo-module **/\n  import { someFunction } from './file_b';\n\n  export function otherFunction(val) {\n      return someFunction(val + 3);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Odoo Website Default Layout Structure\nDESCRIPTION: This snippet shows the default structure of an Odoo website page, consisting of a header, main content area wrapped in a div with id \"wrap\", and a footer. The `wrapwrap` div encapsulates these elements.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<div id=\\\"wrapwrap\\\">\\n   <header/>\\n      <main>\\n         <div id=\\\"wrap\\\" class=\\\"oe_structure\\\">\\n            <!-- Page Content -->\\n         </div>\\n      </main>\\n   <footer/>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Extending CRUD Methods using Python Inheritance in Odoo\nDESCRIPTION: This Python snippet shows how to extend the CRUD methods provided by Odoo's Model class. It uses the super() function to call parent methods and introduces business logic in the create method. It demonstrates overriding methods to add constraints and business rules in a modular way.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    ...\n\n    @api.model\n    def create(self, vals):\n        # Do some business logic, modify vals...\n        ...\n        # Then call super to execute the parent method\n        return super().create(vals)\n```\n\n----------------------------------------\n\nTITLE: Multi-company Security Rules Definition\nDESCRIPTION: XML security rules for both shareable and company-restricted records in multi-company environment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/company.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Shareable Records -->\n<record model=\"ir.rule\" id=\"record_shared_company_rule\">\n    <field name=\"name\">Shared Record: multi-company</field>\n    <field name=\"model_id\" ref=\"model_record_shared\"/>\n    <field name=\"global\" eval=\"True\"/>\n    <field name=\"domain_force\">\n        ['|', ('company_id', '=', False), ('company_id', 'in', company_ids)]\n    </field>\n</record>\n\n<!-- Company-restricted Records -->\n<record model=\"ir.rule\" id=\"record_restricted_company_rule\">\n    <field name=\"name\">Restricted Record: multi-company</field>\n    <field name=\"model_id\" ref=\"model_record_restricted\"/>\n    <field name=\"global\" eval=\"True\"/>\n    <field name=\"domain_force\">\n        [('company_id', 'in', company_ids)]\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Managing Events with useBus Hook in JavaScript\nDESCRIPTION: The useBus hook is utilized to add and remove event listeners from a specific bus in a component, ensuring listeners are cleared when the component is unmounted. Requires an EventBus object and needs JavaScript environment with the Owl framework.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/hooks.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBus } from \"@web/core/utils/hooks\";\n\nclass MyComponent {\n  setup() {\n    useBus(this.env.bus, \"some-event\", event => {\n      console.log(event);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAcademy XML-RPC Session Management\nDESCRIPTION: Solution demonstrating how to list sessions and create new ones using XML-RPC. Includes functionality to search and read session data and create new sessions for courses.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/web_services.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nimport xmlrpc.client\nHOST = 'localhost'\nPORT = 8069\nDB = 'openacademy'\nUSER = 'admin'\nPASS = 'admin'\nROOT = 'http://%s:%d/xmlrpc/' % (HOST,PORT)\n\n# 1. Login\nuid = xmlrpc.client.ServerProxy(ROOT + 'common').login(DB,USER,PASS)\nprint(\"Logged in as %s (uid:%d)\" % (USER,uid))\n\ncall = functools.partial(\n    xmlrpc.client.ServerProxy(ROOT + 'object').execute,\n    DB, uid, PASS)\n\n# 2. Read the sessions\nsessions = call('openacademy.session','search_read', [], ['name','seats'])\nfor session in sessions:\n    print(\"Session %s (%s seats)\" % (session['name'], session['seats']))\n# 3.create a new session\nsession_id = call('openacademy.session', 'create', {\n    'name' : 'My session',\n    'course_id' : 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Systray Item in JavaScript\nDESCRIPTION: This example demonstrates how to add an item to the `systray` registry. It imports the registry, defines a component `MySystrayItem`, and then adds it to the `systray` category with a specified name. The systray item will then be displayed in the Odoo's systray area.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nclass MySystrayItem extends Component {\n    // some component ...\n}\n\nregistry.category(\"systray\").add(\"myAddon.myItem\", {\n    Component: MySystrayItem,\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Content Generation with markupsafe.Markup in Python\nDESCRIPTION: This snippet shows various examples of using markupsafe.Markup and escape functions to generate safe HTML content in Python, including handling of translations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_name(self, to_html=False):\n    if to_html:\n        return Markup(\"<strong>%s</strong>\") % self.name  # escape the name\n    else:\n        return self.name\n\n>>> record.name = \"<R&D>\"\n>>> escape(record.get_name())\nMarkup(\"&lt;R&amp;D&gt;\")\n>>> escape(record.get_name(True))\nMarkup(\"<strong>&lt;R&amp;D&gt;</strong>\")  # HTML is kept\n\n>>> Markup(\"<p>\") + \"Hello <R&D>\" + Markup(\"</p>\")\nMarkup('<p>Hello &lt;R&amp;D&gt;</p>')\n>>> Markup(\"%s <br/> %s\") % (\"<R&D>\", Markup(\"<p>Hello</p>\"))\nMarkup('&lt;R&amp;D&gt; <br/> <p>Hello</p>')\n>>> escape(\"<R&D>\")\nMarkup('&lt;R&amp;D&gt;')\n>>> _(\"List of Tasks on project %s: %s\",\n...     project.name,\n...     Markup(\"<ul>%s</ul>\") % Markup().join(Markup(\"<li>%s</li>\") % t.name for t in project.task_ids)\n... )\nMarkup('Liste de tâches pour le projet &lt;R&amp;D&gt;: <ul><li>First &lt;R&amp;D&gt; task</li></ul>')\n\n>>> Markup(\"<p>Foo %</p>\" % bar)  # bad, bar is not escaped\n>>> Markup(\"<p>Foo %</p>\") % bar  # good, bar is escaped if text and kept if markup\n\n>>> link = Markup(\"<a>%s</a>\") % self.name\n>>> message = \"Click %s\" % link  # bad, message is text and Markup did nothing\n>>> message = escape(\"Click %s\") % link  # good, format two markup objects together\n\n>>> Markup(f\"<p>Foo {self.bar}</p>\")  # bad, bar is inserted before escaping\n>>> Markup(\"<p>Foo {bar}</p>\").format(bar=self.bar)  # good, sorry no fstring\n\n>>> Markup(\"<p>%s</p>\") % _(\"Hello <R&D>\")\nMarkup('<p>Bonjour &lt;R&amp;D&gt;</p>')\n>>> _(\"Order %s has been confirmed\", Markup(\"<a>%s</a>\") % order.name)\nMarkup('Order <a>SO42</a> has been confirmed')\n>>> _(\"Message received from %(name)s <%(email)s>\",\n...   name=self.name,\n...   email=Markup(\"<a href='mailto:%s'>%s</a>\") % (self.email, self.email)\nMarkup('Message received from Georges &lt;<a href=mailto:george@abitbol.example>george@abitbol.example</a>&gt;')\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes - Odoo XML\nDESCRIPTION: This code demonstrates how to move nodes within a view using `position=\"move\"`. The target node to be moved is selected by an outer XPath and position, and then the `position=\"move\"` is used to move the selected node into the location defined by the outer xpath. It needs properly configured XPath expressions to function correctly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//@target\\\" position=\\\"after\\\">\\n    <xpath expr=\\\"//@node\\\" position=\\\"move\\\"/>\\n</xpath>\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"<field name=\\\"target_field\\\" position=\\\"after\\\">\\n    <field name=\\\"my_field\\\" position=\\\"move\\\"/>\\n</field>\"\n```\n\n----------------------------------------\n\nTITLE: Defining One2many Relationship in Odoo Python\nDESCRIPTION: Demonstrates setting up a One2many relationship in an Odoo model, representing an inverse relationship of a previously established Many2one link to res.partner. It uses the test_ids field to list all test models associated with a partner. Dependencies include maintaining Many2one field consistency in the comodel.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntest_ids = fields.One2many(\"test_model\", \"partner_id\", string=\"Tests\")\n```\n\n----------------------------------------\n\nTITLE: Button Definition in Odoo Form\nDESCRIPTION: Shows how to define action buttons in a form view with type, name and display options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <button type=\"object\" name=\"ACTION\" string=\"LABEL\"/>\n    <button type=\"object\" name=\"ACTION\" icon=\"FONT_AWESOME\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with Record Flushing\nDESCRIPTION: Demonstrates proper way to execute raw SQL queries while ensuring database consistency by flushing records first\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# make sure that 'partner_id' is up-to-date in database\nself.env['model'].flush_model(['partner_id'])\n\nself.env.cr.execute(SQL(\"SELECT id FROM model WHERE partner_id IN %s\", ids))\nids = [row[0] for row in self.env.cr.fetchall()]\n```\n\n----------------------------------------\n\nTITLE: Creating TagsList Component - JavaScript\nDESCRIPTION: This snippet illustrates how to implement a TagsList component in Odoo that displays a list of tags, which could be editable. It also details how to set certain properties and handle tag interactions from a parent component.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TagsList } from \"@web/core/tags_list/tags_list\";\n\nclass Parent extends Component {\n    setup() {\n        this.tags = [{\n            id: \"tag1\",\n            text: \"Earth\"\n        }, {\n            colorIndex: 1,\n            id: \"tag2\",\n            text: \"Wind\",\n            onDelete: () => {...}\n        }, {\n            colorIndex: 2,\n            id: \"tag3\",\n            text: \"Fire\",\n            onClick: () => {...},\n            onDelete: () => {...}\n        }];\n    }\n}\nParent.components = { TagsList };\nParent.template = xml`<TagsList tags=\"tags\" />`;\n```\n\n----------------------------------------\n\nTITLE: Defining a simple Odoo model in Python\nDESCRIPTION: Example of defining an Odoo model by extending 'odoo.models.Model', specifying the model's name. Requires 'odoo' Python library. This defines persistent business objects within Odoo's ORM framework.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\nclass MinimalModel(models.Model):\n    _name = 'test.model'\n```\n\n----------------------------------------\n\nTITLE: Extending BooleanField Component in Odoo\nDESCRIPTION: Creates a custom boolean field component that displays 'Late!' in red when checked. Extends the standard BooleanField component.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { registry } from \"@web/core/registry\";\nimport { BooleanField } from \"@web/views/fields/boolean/boolean_field\";\nimport { Component, xml } from \"@odoo/owl\";\n\nclass LateOrderBooleanField extends BooleanField {}\nLateOrderBooleanField.template = \"my_module.LateOrderBooleanField\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Action in XML for Odoo\nDESCRIPTION: XML code for defining a PDF report action in Odoo. The configuration includes the report name, model, type, file location, attachment settings, and binding to make it available in contextual menus.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"account_invoices\" model=\"ir.actions.report\">\n    <field name=\"name\">Invoices</field>\n    <field name=\"model\">account.invoice</field>\n    <field name=\"report_type\">qweb-pdf</field>\n    <field name=\"report_name\">account.report_invoice</field>\n    <field name=\"report_file\">account.report_invoice</field>\n    <field name=\"attachment_use\" eval=\"True\"/>\n    <field name=\"attachment\">(object.state in ('open','paid')) and\n        ('INV'+(object.number or '').replace('/','')+'.pdf')</field>\n    <field name=\"binding_model_id\" ref=\"model_account_invoice\"/>\n    <field name=\"binding_type\">report</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Model Active Record Interface and Recordset Operations in Python\nDESCRIPTION: Example showing how to iterate through a recordset and access field values. Demonstrates that iterating a recordset yields singleton records and how field values can be accessed as attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass AModel(models.Model):\n    _name = 'a.model'\n    def a_method(self):\n        # self can be anything between 0 records and all records in the\n        # database\n        self.do_operation()\n\n    def do_operation(self):\n        print(self) # => a.model(1, 2, 3, 4, 5)\n        for record in self:\n            print(record) # => a.model(1), then a.model(2), then a.model(3), ...\n```\n\n----------------------------------------\n\nTITLE: Odoo Tour Step - Adding a Product to Order Line\nDESCRIPTION: This JavaScript snippet represents a step where user adds a product. The 'trigger' property is the selector for the element to interact with, while 'extra_trigger' is an additional condition that must be met before the step is executed, ensuring the product line is added before user interacts with the product addition button.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    trigger: 'a:contains(\"Add a product\")',\n    // Extra-trigger to make sure a line is added before trying to add another one\n    extra_trigger: '.o_field_many2one[name=\"product_template_id\"] .o_external_button',\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model and Field in Python\nDESCRIPTION: This snippet demonstrates how to create a custom model, add a custom field, create a record, and read data using Python. It uses the 'execute_kw' method to interact with Odoo's XML-RPC API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    'name': \"Custom Model\",\n    'model': \"x_custom\",\n    'state': 'manual',\n}])\nmodels.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{\n    'model_id': id,\n    'name': 'x_name',\n    'ttype': 'char',\n    'state': 'manual',\n    'required': True,\n}])\nrecord_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{'x_name': \"test record\"}])\nmodels.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])\n```\n\n----------------------------------------\n\nTITLE: SQL Update with Cache Invalidation\nDESCRIPTION: Shows how to properly execute SQL UPDATE statements while maintaining cache consistency\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# make sure 'state' is up-to-date in database\nself.env['model'].flush_model(['state'])\n\nself.env.cr.execute(\"UPDATE model SET state=%s WHERE state=%s\", ['new', 'old'])\n\n# invalidate 'state' from the cache\nself.env['model'].invalidate_model(['state'])\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Odoo via XML-RPC API\nDESCRIPTION: Demonstrates how to update an existing record and retrieve the updated value using the 'write' and 'read' methods. Examples are provided in multiple programming languages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {name: \"Newer partner\"}])\n# get record name after having changed it\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [[id], ['display_name']])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {name: \"Newer partner\"}])\n# get record name after having changed it\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [[id], ['display_name']])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'write', array(array($id), array('name'=>\"Newer partner\")));\n// get record name after having changed it\n$models->execute_kw($db, $uid, $password,\n    'res.partner', 'read', array(array($id), array('display_name')));\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"write\",\n    asList(\n        asList(id),\n        new HashMap() {{ put(\"name\", \"Newer Partner\"); }}\n    )\n));\n// get record name after having changed it\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"read\",\n    asList(asList(id), asList(\"display_name\"))\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar result bool\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"write\",\n    []any{\n        []int64{id},\n        map[string]string{\"name\": \"Newer partner\"},\n    },\n}, &result); err != nil {\n    log.Fatal(err)\n}\n// get record name after having changed it\nvar record []any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"name_get\",\n    []any{\n        []int64{id},\n    },\n}, &record); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QWeb Template for Owl Counter Component\nDESCRIPTION: An XML template defining the rendering structure for the Counter component with dynamic state value and click event\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<templates xml:space=\"preserve\">\n   <t t-name=\"my_module.Counter\">\n      <p>Counter: <t t-esc=\"state.value\"/></p>\n      <button class=\"btn btn-primary\" t-on-click=\"increment\">Increment</button>\n   </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Directives in QWeb Templates\nDESCRIPTION: This QWeb snippet demonstrates how to use conditional directives, such as `t-if`, `t-elif`, and `t-else`, to control the rendering of elements based on specific conditions. The conditional expression is passed as an attribute value, and elements are rendered or omitted accordingly. Required dependencies include a compatible Odoo environment that supports QWeb templating. Expected inputs are Boolean conditions, and the output is the HTML content based on the truthiness of the conditions evaluated.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    <p t-if=\"user.birthday == today()\">Happy birthday!</p>\n    <p t-elif=\"user.login == 'root'\">Welcome master!</p>\n    <p t-else=\"\">Welcome!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Odoo Function Call in XML Data File\nDESCRIPTION: This snippet shows how to call a method on a model using the `function` tag within an Odoo XML data file. It demonstrates the use of `eval` to provide parameters to the method and `ref` to reference external identifiers.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\n    <odoo>\n        <data noupdate=\"1\">\n            <record id=\"partner_1\" model=\"res.partner\">\n                <field name=\"name\">Odude</field>\n            </record>\n\n            <function model=\"res.partner\" name=\"send_inscription_notice\"\n                eval=\"[[ref('partner_1'), ref('partner_2')]]\"/>\n\n            <function model=\"res.users\" name=\"send_vip_inscription_notice\">\n                <function eval=\"[[('vip','=',True)]]\" model=\"res.partner\" name=\"search\"/>\n            </function>\n        </data>\n\n        <record id=\"model_form_view\" model=\"ir.ui.view\">\n            ...\n        </record>\n    </odoo>\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Date/Datetimes from External Sources in Odoo\nDESCRIPTION: This snippet demonstrates how to parse date/datetimes coming from external sources using the `to_date` method of the `fields.Date` class.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfields.Date.to_date(self._context.get('date_from'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Write Field in JavaScript\nDESCRIPTION: Implementation of a FieldChar2 class that extends AbstractField to create an editable text field. Handles both read-only and read-write modes with appropriate display and event handling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.FieldChar2 = instance.web.form.AbstractField.extend({\n    init: function() {\n        this._super.apply(this, arguments);\n        this.set(\"value\", \"\");\n    },\n    start: function() {\n        this.on(\"change:effective_readonly\", this, function() {\n            this.display_field();\n            this.render_value();\n        });\n        this.display_field();\n        return this._super();\n    },\n    display_field: function() {\n        var self = this;\n        this.$el.html(QWeb.render(\"FieldChar2\", {widget: this}));\n        if (! this.get(\"effective_readonly\")) {\n            this.$(\"input\").change(function() {\n                self.internal_set_value(self.$(\"input\").val());\n            });\n        }\n    },\n    render_value: function() {\n        if (this.get(\"effective_readonly\")) {\n            this.$el.text(this.get(\"value\"));\n        } else {\n            this.$(\"input\").val(this.get(\"value\"));\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: QWeb JavaScript Debugging Directives\nDESCRIPTION: Demonstrates debugging directives in QWeb JavaScript: t-log for logging values, t-debug for setting breakpoints, and t-js for executing custom JavaScript during template rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"foo\" t-value=\"42\"/>\n<t t-log=\"foo\"/>\n\n<t t-if=\"a_test\">\n    <t t-debug=\"\"/>\n</t>\n\n<t t-set=\"foo\" t-value=\"42\"/>\n<t t-js=\"ctx\">\n    console.log(\"Foo is\", ctx.foo);\n</t>\n```\n\n----------------------------------------\n\nTITLE: Combining View Components in Odoo - JavaScript\nDESCRIPTION: This snippet integrates all previously created components (controller, model, renderer, and arch parser) into a cohesive view definition and registers it within the views registry.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { registry } from \"@web/core/registry\";\nimport { BeautifulController } from \"./beautiful_controller\";\nimport { BeautifulArchParser } from \"./beautiful_arch_parser\";\nimport { BeautifulModel } from \"./beautiful_model\";\nimport { BeautifulRenderer } from \"./beautiful_renderer\";\n\nexport const beautifulView = {\n    type: \"beautiful\",\n    display_name: \"Beautiful\",\n    icon: \"fa fa-picture-o\", // the icon that will be displayed in the Layout panel\n    multiRecord: true,\n    Controller: BeautifulController,\n    ArchParser: BeautifulArchParser,\n    Model: BeautifulModel,\n    Renderer: BeautifulRenderer,\n\n    props(genericProps, view) {\n        const { ArchParser } = view;\n        const { arch } = genericProps;\n        const archInfo = new ArchParser().parse(arch);\n\n        return {\n            ...genericProps,\n            Model: view.Model,\n            Renderer: view.Renderer,\n            archInfo,\n        };\n    },\n};\n\nregistry.category(\"views\").add(\"beautifulView\", beautifulView);\n```\n\n----------------------------------------\n\nTITLE: Setting up Odoo Module Test Directory Structure\nDESCRIPTION: Demonstrates the required folder structure for organizing test files in an Odoo module, showing the proper placement of test files and initialization modules.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/unit_tests.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nestate\n├── models\n│   ├── *.py\n│   └── __init__.py\n├── tests\n│   ├── test_*.py\n│   └── __init__.py\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Optimizing Batch Operations in Odoo Python\nDESCRIPTION: Examples of optimizing batch operations in Odoo, including using _read_group for efficient counting, batching record creation, and proper record browsing for prefetching.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _compute_count(self):\n    domain = [('related_id', 'in', self.ids)]\n    counts_data = other_model._read_group(domain, ['related_id'], ['__count'])\n    mapped_data = dict(counts_data)\n    for record in self:\n        record.count = mapped_data.get(record, 0)\n\ncreate_values = []\nfor name in ['foo', 'bar']:\n    create_values.append({'name': name})\nrecords = model.create(create_values)\n\nrecords = model.browse(record_ids)\nfor record in records:\n    record.foo  # One query is executed for the entire recordset.\n```\n\n----------------------------------------\n\nTITLE: Customizing Sale Order Form View and Adding Property Creation Action\nDESCRIPTION: XML configuration that modifies the sale order form view buttons and adds a server action to create property records when confirming sales orders.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"view_sale_order_form\" model=\"ir.ui.view\">\n    <field name=\"name\">sale.order.form.inherit.estate</field>\n    <field name=\"model\">sale.order</field>\n    <field name=\"inherit_id\" ref=\"sale.view_order_form\" />\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"//button[@name='action_confirm'][@type='object']\" position=\"attributes\">\n            <attribute name=\"type\">action</attribute>\n            <attribute name=\"name\">estate.action_x_estate_property_create_from_sale_order</attribute>\n        </xpath>\n        <xpath expr=\"//button[@name='action_confirm'][@type='object']\" position=\"attributes\">\n            <attribute name=\"type\">action</attribute>\n            <attribute name=\"name\">estate.action_x_estate_property_create_from_sale_order</attribute>\n        </xpath>\n    </field>\n</record>\n\n<record id=\"action_x_estate_property_create_from_sale_order\" model=\"ir.actions.server\">\n    <field name=\"name\">Confirm and create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"state\">code</field>\n    <field name=\"code\"><![CDATA[\nfor order in records:\n    order.action_confirm()\n    property_type = env['x_estate.property.type'].sudo().search([('x_name', '=', 'Other')], limit=1)\n    property = env['x_estate.property'].sudo().create({\n        'x_name': order.name,\n        'x_expected_price': 0,\n        'x_selling_price': 0,\n        'x_sale_order_id': order.id,\n        'x_property_type_id': property_type.id,\n    })\n    ]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Handling in Business Expense Model\nDESCRIPTION: Override of message_new method to process incoming emails and create expense records based on email subject and content. Extracts price using regex and finds partner by email address.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef message_new(self, msg, custom_values=None):\n    name = msg_dict.get('subject', 'New Expense')\n    amount_pattern = '(\\d+(\\.\\d*)?|\\.\\d+)'\n    expense_price = re.findall(amount_pattern, name)\n    price = expense_price and float(expense_price[-1][0]) or 1.0\n    partner = self.env['res.partner'].search([('email', 'ilike', email_address)],\n                                             limit=1)\n    defaults = {\n        'name': name,\n        'amount': price,\n        'partner_id': partner.id\n    }\n    defaults.update(custom_values or {})\n    res = super(BusinessExpense, self).message_new(msg, custom_values=defaults)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Event Listeners\nDESCRIPTION: Implementation of event listening and handling for IoT device updates, showing both JavaScript callback setup and Python event triggering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\niot_device.add_listener(this._onValueChange.bind(this));\n\n_onValueChange: function (result) {\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.event_manager import event_manager\n\nclass DriverName(Driver):\n    connection_type = 'ConnectionType'\n\n    def methodName(self):\n        self.data = {\n            'value': 0.5,\n            ...\n        }\n        event_manager.device_changed(self)\n```\n\n----------------------------------------\n\nTITLE: Basic Odoo Module Directory Structure\nDESCRIPTION: Demonstrates the standard directory layout for an Odoo module, including models, data, initialization, and manifest files\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/01_architecture.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodule\n├── models\n│   ├── *.py\n│   └── __init__.py\n├── data\n│   └── *.xml\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Pager in Odoo View with JavaScript\nDESCRIPTION: The usePager hook is designed to render a pager for a control panel within an Odoo view, adjusting configurations in env.config. It requires Owl's state management via useState and a function returning pager props. Must be used in an environment with Owl and defined state properties: offset, limit, and total.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/hooks.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePager } from \"@web/search/pager_hook\";\n\nclass CustomView {\n  setup() {\n    const state = owl.hooks.useState({\n      offset: 0,\n      limit: 80,\n      total: 50,\n    });\n    usePager(() => {\n      return {\n        offset: this.state.offset,\n        limit: this.state.limit,\n        total: this.state.total,\n        onUpdate: (newState) => {\n          Object.assign(this.state, newState);\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Odoo Query Method for Model Data\nDESCRIPTION: This code shows how to use the query() method to fetch records from a model with filtering and limits as a more readable alternative to combining search and read.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.query(['name', 'login', 'user_email', 'signature'])\n     .filter([['active', '=', true], ['company_id', '=', main_company]])\n     .limit(15)\n     .all().then(function (users) {\n    // do work with users records\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggleable Card Content\nDESCRIPTION: Enhancement to the Card component adding toggle functionality for showing/hiding content. Uses component state management and conditional rendering with t-if directive.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Card>\n    <t-if t-value=\"state.isOpen\">\n        <div class=\"card-content\">\n            <slot/>\n        </div>\n    </t-if>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Profiling with specified collectors in Odoo using Profiler\nDESCRIPTION: This code snippet illustrates how to profile a section of code with specific collectors using the `Profiler` context manager in Odoo. It enables both the `sql` collector and a `PeriodicCollector` with an interval of 0.1 seconds. This allows for targeted profiling of SQL queries and periodic stack traces.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"with Profiler(collectors=['sql', PeriodicCollector(interval=0.1)]):\n    do_stuff()\"\n```\n\n----------------------------------------\n\nTITLE: Applying Python Constraints in Odoo\nDESCRIPTION: Shows how to define Python constraints in Odoo models using the @api.constrains decorator to automatically enforce business rules such as maximum age limits.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.exceptions import ValidationError\\n\\n@api.constrains('age')\\ndef _check_something(self):\\n    for record in self:\\n        if record.age > 20:\\n            raise ValidationError(\"Your record is too old: %s\" % record.age)\\n    # all records passed the test, don't return anything\n```\n\n----------------------------------------\n\nTITLE: Tracking Changes in Odoo Fields with Python\nDESCRIPTION: This Python snippet illustrates how to enable change tracking on fields within an Odoo model. By setting the 'tracking' attribute to 'True', changes to fields like 'name' and 'partner_id' in the 'BusinessTrip' model are logged in the model's chatter system. The outcome is a system that logs field changes, with no extra technical prerequisites.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread']\n    _description = 'Business Trip'\n\n    name = fields.Char(tracking=True)\n    partner_id = fields.Many2one('res.partner', 'Responsible',\n                                 tracking=True)\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n```\n\n----------------------------------------\n\nTITLE: Customizing SelectMenu Appearance - JavaScript\nDESCRIPTION: This snippet shows how to customize the appearance of the SelectMenu component by adding extra content and a custom template for choices, enhancing its visual appeal and functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.template = owl.tags.xml`\n    <SelectMenu\n        choices=\"choices\"\n        groups=\"groups\"\n        value=\"'value_2'\"\n    >\n        Make a choice!\n        <t t-set-slot=\"choice\" t-slot-scope=\"choice\">\n            <span class=\"coolClass\" t-esc=\"'👉 ' + choice.data.label + ' 👈'\" />\n        </t>\n    </SelectMenu>\n`;\n```\n\n----------------------------------------\n\nTITLE: Complete Search View with Multiple Filter Types\nDESCRIPTION: A comprehensive example showing how to define different types of filters including custom name filters, user-specific filters, and category grouping in a search view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <filter string=\"My Custom Name\" domain=\"[('name', 'ilike', 'AAA')]\"/>\n    <filter string=\"My orders\" domain=\"[('user_id', '=', uid)]\"/>\n    <filter string=\"Category\" context=\"{'group_by': 'category_id'}\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Working with Domains in JavaScript\nDESCRIPTION: Shows examples of creating and using Domain objects in JavaScript. Domains represent sets of records matching specified conditions and can be manipulated programmatically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnew Domain([[\"a\", \"=\", 3]]).contains({ a: 3 }) // true\n\nconst domain = new Domain([\"&\", \"&\", [\"a\", \"=\", 1], [\"b\", \"=\", 2], [\"c\", \"=\", 3]]);\ndomain.contains({ a: 1, b: 2, c: 3 }); // true\ndomain.contains({ a: -1, b: 2, c: 3 }); // false\n\n// next expression returns [\"|\", (\"a\", \"=\", 1), (\"b\", \"<=\", 3)]\nDomain.or([[\"a\", \"=\", 1]], \"[('b', '<=', 3)]\"]).toString();\n```\n\n----------------------------------------\n\nTITLE: Iterating with QWeb Foreach Directive\nDESCRIPTION: This snippet shows the use of `t-foreach` and `t-as` directives to iterate over a collection and render elements for each item. The `t-foreach` directive specifies the collection, and `t-as` determines the current item name within the loop. When iterating over arrays, lists, or mappings, QWeb provides additional variables for indices, size, etc. that are available within the loop's scope. The expected input is a collection, and the output is repeated HTML content for each item.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"[1, 2, 3]\" t-as=\"i\">\n    <p><t t-out=\"i\"/></p>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Thread Subtype Tracking in Python for Odoo\nDESCRIPTION: This Python code defines a BusinessTrip model that inherits from mail.thread. It implements the _track_subtype method to trigger a specific subtype notification when the state changes to 'confirmed'.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread']\n    _description = 'Business Trip'\n\n    name = fields.Char(tracking=True)\n    partner_id = fields.Many2one('res.partner', 'Responsible',\n                                 tracking=True)\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n    state = fields.Selection([('draft', 'New'), ('confirmed', 'Confirmed')],\n                             tracking=True)\n\n    def _track_subtype(self, init_values):\n        # init_values contains the modified fields' values before the changes\n        #\n        # the applied values can be accessed on the record as they are already\n        # in cache\n        self.ensure_one()\n        if 'state' in init_values and self.state == 'confirmed':\n            return self.env.ref('my_module.mt_state_change')\n        return super(BusinessTrip, self)._track_subtype(init_values)\n```\n\n----------------------------------------\n\nTITLE: Default Company Configuration in Odoo Model\nDESCRIPTION: Example of setting up default company configuration in an Odoo model with required company field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/company.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass Record(models.Model):\n    _name = 'record.restricted'\n    _check_company_auto = True\n\n    company_id = fields.Many2one(\n        'res.company', required=True, default=lambda self: self.env.company\n    )\n    other_record_id = fields.Many2one('other.record', check_company=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Alias for Business Trip Module in Python\nDESCRIPTION: Example implementation of mail.alias.mixin to create expenses via email in a business trip module. Shows how to override required methods _get_alias_model_name and _get_alias_values to configure the alias behavior.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread', 'mail.alias.mixin']\n    _description = 'Business Trip'\n\n    name = fields.Char(tracking=True)\n    partner_id = fields.Many2one('res.partner', 'Responsible',\n                                 tracking=True)\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n    state = fields.Selection([('draft', 'New'), ('confirmed', 'Confirmed')],\n                             tracking=True)\n    expense_ids = fields.One2many('business.expense', 'trip_id', 'Expenses')\n    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete=\"restrict\",\n                               required=True)\n\n    def _get_alias_model_name(self, vals):\n    \"\"\" Specify the model that will get created when the alias receives a message \"\"\"\n        return 'business.expense'\n\n    def _get_alias_values(self):\n    \"\"\" Specify some default values that will be set in the alias at its creation \"\"\"\n        values = super(BusinessTrip, self)._get_alias_values()\n        # alias_defaults holds a dictionary that will be written\n        # to all records created by this alias\n        #\n        # in this case, we want all expense records sent to a trip alias\n        # to be linked to the corresponding business trip\n        values['alias_defaults'] = {'trip_id': self.id}\n        # we only want followers of the trip to be able to post expenses\n        # by default\n        values['alias_contact'] = 'followers'\n        return values\n\nclass BusinessExpense(models.Model):\n    _name = 'business.expense'\n    _inherit = ['mail.thread']\n    _description = 'Business Expense'\n\n    name = fields.Char()\n    amount = fields.Float('Amount')\n    trip_id = fields.Many2one('business.trip', 'Business Trip')\n    partner_id = fields.Many2one('res.partner', 'Created by')\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Multiple Selection Support - JavaScript\nDESCRIPTION: This snippet provides an example of how to use the SelectMenu component with multiple selection capability, highlighting the requirement for the value props to be an Array that contains selected values.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.template = owl.tags.xml`\n    <SelectMenu\n        choices=\"choices\"\n    >\n        <span class=\"select_menu_test\">Select something</span>\n        <t t-set-slot=\"bottomArea\" t-slot-scope=\"select\">\n            <div t-if=\"select.data.searchValue\">\n                <button class=\"btn text-primary\" t-on-click=\"() => this.onCreate(select.data.searchValue)\">\n                    Create this article \"<i t-esc=\"select.data.searchValue\" />\"\n                </button>\n            </div>\n        </t>\n    </SelectMenu>\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Templates with Context\nDESCRIPTION: Core method for rendering a loaded template to a String with an optional context object that provides variables for template rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.render(template[, context])\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Template with Data - JavaScript\nDESCRIPTION: This snippet shows how to explicitly call QWeb.render with a template name and data object, rendering the template with the provided data. The output result demonstrates how 'name' is utilized in the template to display a personalized message.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb.render(\"HomePageTemplate\", {name: \"Klaus\"});\n```\n\n----------------------------------------\n\nTITLE: Extending Odoo Models in Python\nDESCRIPTION: This snippet shows how to extend existing models in Odoo by using the _inherit attribute without specifying _name. It adds new fields to the existing model functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass Extension0(models.Model):\n    _name = 'extension.0'\n    _description = 'Extension zero'\n\n    name = fields.Char(default=\"A\")\n\nclass Extension1(models.Model):\n    _inherit = 'extension.0'\n\n    description = fields.Char(default=\"Extended\")\n\nrecord = env['extension.0'].create({})\nrecord.read()[0]\n```\n\n----------------------------------------\n\nTITLE: Profiling a block of code in Odoo using Profiler context manager\nDESCRIPTION: This code snippet demonstrates how to use the `Profiler` context manager in Odoo to profile a specific block of code. It captures the execution time and related data of the `do_stuff()` function. No specific collectors are specified, so it will use the default collectors (SQL and Periodic).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"with Profiler():\n    do_stuff()\"\n```\n\n----------------------------------------\n\nTITLE: SQL Update with Modified Field Notification\nDESCRIPTION: Demonstrates SQL UPDATE with RETURNING clause and proper notification of modified fields to the framework\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# make sure 'state' is up-to-date in database\nself.env['model'].flush_model(['state'])\n\n# use the RETURNING clause to retrieve which rows have changed\nself.env.cr.execute(\"UPDATE model SET state=%s WHERE state=%s RETURNING id\", ['new', 'old'])\nids = [row[0] for row in self.env.cr.fetchall()]\n\n# invalidate the cache, and notify the update to the framework\nrecords = self.env['model'].browse(ids)\nrecords.invalidate_recordset(['state'])\nrecords.modified(['state'])\n```\n\n----------------------------------------\n\nTITLE: Declaring menus and actions in Odoo with XML\nDESCRIPTION: XML declaration for actions and menus in Odoo, creating UI elements that invoke specific actions within the application. Requires the actions to be declared prior to their menus in the XML sequence.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.actions.act_window\" id=\"action_list_ideas\">\n    <field name=\"name\">Ideas</field>\n    <field name=\"res_model\">idea.idea</field>\n    <field name=\"view_mode\">tree,form</field>\n</record>\n<menuitem id=\"menu_ideas\" parent=\"menu_root\" name=\"Ideas\" sequence=\"10\"\n          action=\"action_list_ideas\"/>\n```\n\n----------------------------------------\n\nTITLE: Plain Javascript IIFE Example\nDESCRIPTION: This code snippet demonstrates the use of an Immediately Invoked Function Expression (IIFE) in plain JavaScript files within Odoo. It helps to avoid leaking local variables to the global scope by encapsulating the code within a function that is immediately executed. This is advised when writing plain Javascript files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n  (function () {\n    // some code here\n    let a = 1;\n    console.log(a);\n  })();\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Service in Odoo\nDESCRIPTION: This snippet registers a simple notification service using Odoo's service registry. It periodically displays a notification every 5 seconds, utilizing the 'notification' service dependency.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    }\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Powerbox with Custom Commands in JavaScript\nDESCRIPTION: This snippet illustrates how to open the Powerbox with a custom command and category by calling the `open` method on the Powerbox instance. It provides an example of including a custom 'Document' command in a 'Documentation' category.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/odoo_editor.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.odooEditor.powerbox.open(\n    [{\n        name: _t('Document'),\n        category: _t('Documentation'),\n        description: _t(\"Add this text to your mailing's documentation\"),\n        fontawesome: 'fa-book',\n        priority: 1, // This is the only command in its category anyway.\n    }],\n    [{\n        name: _t('Documentation'),\n        priority: 300,\n    }]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Greetings Widget\nDESCRIPTION: Implements a new GreetingsWidget that displays a welcome message.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.GreetingsWidget = instance.Widget.extend({\n    start: function() {\n        this.$el.append(\"<div>We are so happy to see you again in this menu!</div>\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Record Cache and Prefetching Examples in Python\nDESCRIPTION: Demonstrates how Odoo's ORM prefetches fields to optimize database queries. Shows examples of how the cache mechanism works with both direct fields and relational fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Basic field caching\nrecord.name             # first access reads value from database\nrecord.name             # second access gets value from cache\n\n# Prefetching multiple fields across a recordset\nfor partner in partners:\n    print partner.name          # first pass prefetches 'name' and 'lang'\n                                # (and other fields) on all 'partners'\n    print partner.lang\n\n# Prefetching secondary records\ncountries = set()\nfor partner in partners:\n    country = partner.country_id        # first pass prefetches all partners\n    countries.add(country.name)         # first pass prefetches all countries\n```\n\n----------------------------------------\n\nTITLE: Modifying Controller Authentication with Route Decorator\nDESCRIPTION: Shows how to change authentication requirements for a controller method by redefining the route decorator, in this case changing from public to user authentication.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/http.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Restrict(MyController):\n    @route(auth='user')\n    def handler(self):\n        return super(Restrict, self).handler()\n```\n\n----------------------------------------\n\nTITLE: Safe Field Value Retrieval using Record Indexing\nDESCRIPTION: Demonstrates a safer method of dynamically retrieving a record's field value using record indexing, which provides more controlled access to record attributes\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# better retrieval of a field value\\ndef _get_state_value(self, res_id, state_field):\\n    record = self.sudo().browse(res_id)\\n    return record[state_field]\n```\n\n----------------------------------------\n\nTITLE: Defining a Field with a Label in Odoo\nDESCRIPTION: This code snippet shows how to define a field with a custom label in Odoo. The `string` parameter is used to override the default capitalized version of the field name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfield2 = fields.Integer(string=\"Field Label\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Gallery View Object in Odoo\nDESCRIPTION: This JavaScript code defines a gallery view object in Odoo by specifying its type, display name, icon, and controller. It is registered under the view category for Odoo's view system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nimport { MyController } from \"./my_controller\";\n\nexport const myView = {\n      type: \"my_view\",\n      display_name: \"MyView\",\n      icon: \"oi oi-view-list\",\n      multiRecord: true,\n      Controller: MyController,\n};\n\nregistry.category(\"views\").add(\"my_controller\", myView);\n```\n\n----------------------------------------\n\nTITLE: Using assertQueryCount in Odoo Python Tests\nDESCRIPTION: Demonstrates how to use the assertQueryCount method to verify and limit the number of SQL queries executed during a test operation. This method helps ensure optimal database performance by enforcing query count limits.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertQueryCount(11):\n    do_something()\n```\n\n----------------------------------------\n\nTITLE: Using Orm Service in Components - JavaScript\nDESCRIPTION: This snippet shows how to use the orm service in Odoo components using the `useService` hook, which ensures method safety by avoiding calls after a component's destruction. The method `getActivityModelViewID` demonstrates calling a model method through the orm service.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass SomeComponent extends Component {\n    setup() {\n        this.orm = useService(\"orm\");\n    }\n    // ...\n    getActivityModelViewID(model) {\n        return this.orm.call(model, \"get_activity_view_id\", this.params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Fields in Odoo Models\nDESCRIPTION: This snippet shows how to define a computed field in Odoo and the necessary Python method to compute its value. The example illustrates setting a random integer as the name field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport random\\nfrom odoo import models, fields, api\\n\\nclass ComputedModel(models.Model):\\n    _name = 'test.computed'\\n\\n    name = fields.Char(compute='_compute_name')\\n\\n    def _compute_name(self):\\n        for record in self:\\n            record.name = str(random.randint(1, 1e6))\n```\n\n----------------------------------------\n\nTITLE: Relative Import in Native Javascript Module\nDESCRIPTION: This code snippet shows how to use relative imports in native Javascript modules within the same Odoo addon. It demonstrates importing `something` from a sibling file `./file_a`. The `@odoo-module` annotation is required to indicate that this is a module to be converted by Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\n  /** @odoo-module **/\n  import {something} from `./file_a`\n\n```\n\n----------------------------------------\n\nTITLE: Equivalent Search and Read Implementation\nDESCRIPTION: This snippet shows the equivalent implementation using explicit search and read calls instead of the query helper, demonstrating why the query method is more concise.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.call('search', [['active', '=', true], ['company_id', '=', main_company]], {limit: 15})\n    .then(function (ids) {\n        return model.call('read', [ids, ['name', 'login', 'user_email', 'signature']]);\n    })\n    .then(function (users) {\n        // do work with users records\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Models in Odoo via XML-RPC API\nDESCRIPTION: Demonstrates how to create a custom model using the 'ir.model' object and retrieve its fields. This example shows the process across multiple programming languages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    'name': \"Custom Model\",\n    'model': \"x_custom_model\",\n    'state': 'manual',\n}])\nmodels.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {'attributes': ['string', 'help', 'type']})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(\n    'name' => \"Custom Model\",\n    'model' => 'x_custom_model',\n    'state' => 'manual'\n)));\n$models->execute_kw($db, $uid, $password, 'x_custom_model', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')));\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    name: \"Custom Model\",\n    model: 'x_custom_model',\n    state: 'manual'\n}])\nfields = models.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {attributes: %w(string help type)})\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"name\", \"Custom Model\");\n            put(\"model\", \"x_custom_model\");\n            put(\"state\", \"manual\");\n        }})\n));\nfinal Object fields = models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom_model\", \"fields_get\",\n        emptyList(),\n        new HashMap<String, Object> () {{\n            put(\"attributes\", asList(\n                    \"string\",\n                    \"help\",\n                    \"type\"));\n        }}\n));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar id int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model\", \"create\",\n    []map[string]string{\n        {\n            \"name\":  \"Custom Model\",\n            \"model\": \"x_custom_model\",\n            \"state\": \"manual\",\n        },\n    },\n}, &id); err != nil {\n    log.Fatal(err)\n}\nrecordFields := map[string]string{}\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom_model\", \"fields_get\",\n    []any{},\n    map[string][]string{\n        \"attributes\": {\"string\", \"help\", \"type\"},\n    },\n}, &recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Odoo - Python\nDESCRIPTION: This Python snippet authenticates with an Odoo instance using the provided database name, username, and password.  It uses the xmlrpc.client library to call the 'authenticate' method and returns the user ID (uid).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nuid = common.authenticate(db, username, password, {})\n```\n\n----------------------------------------\n\nTITLE: Inheriting mail.thread Model for Chatter Functionality in Odoo\nDESCRIPTION: This Python snippet demonstrates how to inherit the 'mail.thread' model in Odoo to add Chatter functionality (discussions and notifications) to the 'academy.courses' model.  The courses model also presents the basic fields and the many2one to the teacher model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n\"class Courses(models.Model):\\n    _name = 'academy.courses'\\n    _inherit = 'mail.thread'\\n\\n    name = fields.Char()\\n    teacher_id = fields.Many2one('academy.teachers', string=\\\"Teacher\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Connection - Ruby\nDESCRIPTION: This snippet demonstrates how to configure the connection parameters to an Odoo instance using Ruby.  The URL, database name, username, and password must be replaced with the correct Odoo instance details.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nurl = <insert server URL>\ndb = <insert database name>\nusername = \"admin\"\npassword = <insert password for your admin user (default: admin)>\n```\n\n----------------------------------------\n\nTITLE: Basic Form View Structure in Odoo XML\nDESCRIPTION: Demonstrates the basic structure of a form view in Odoo with the root 'form' element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL View Using BaseModel.init()\nDESCRIPTION: Implementation of the init() method to create or replace a SQL view. Uses tools.drop_view_if_exists to handle existing views and executes a CREATE VIEW query.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/create_reports.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef init(self):\n    tools.drop_view_if_exists(self.env.cr, self._table)\n    self.env.cr.execute(\"\"\"CREATE or REPLACE VIEW %s as (\n                         SELECT\n                            %s\n                         FROM\n                            %s\n      )\"\"\" % (self._table, self._select(), self._from()))\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Multi-Processing Server in INI File\nDESCRIPTION: Configures Odoo server with 8 workers, memory limits, request timeouts, and cron threads for a system with 4 CPUs and 60 concurrent users. This optimizes server performance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[options]\nlimit_memory_hard = 1677721600\nlimit_memory_soft = 629145600\nlimit_request = 8192\nlimit_time_cpu = 600\nlimit_time_real = 1200\nmax_cron_threads = 1\nworkers = 8\n```\n\n----------------------------------------\n\nTITLE: Defining Rewards in JavaScript\nDESCRIPTION: This JavaScript code snippet defines a list of rewards within an Odoo Clicker Game. Each reward is an object that includes a description, an apply function to modify the game state, and optional minLevel and maxLevel properties to determine availability based on the user's level. The apply method receives the game state as an argument, enabling dynamic game modifications through rewards.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const rewards = [\n   {\n      description: \"Get 1 click bot\",\n      apply(clicker) {\n            clicker.increment(1);\n      },\n      maxLevel: 3,\n   },\n   {\n      description: \"Get 10 click bot\",\n      apply(clicker) {\n            clicker.increment(10);\n      },\n      minLevel: 3,\n      maxLevel: 4,\n   },\n   {\n      description: \"Increase bot power!\",\n      apply(clicker) {\n            clicker.multipler += 1;\n      },\n      minLevel: 3,\n   },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners with Error Handling in JavaScript\nDESCRIPTION: This snippet demonstrates how to properly manage event listeners in JavaScript when dealing with potential exceptions in functions. It shows the use of a try-finally block to ensure that the event listener is removed regardless of whether the function executes successfully or throws an error.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neventTarget.addEventListener(\"event\", handler);\ntry {\n  someFunction();\n} finally {\n  eventTarget.removeEventListener(\"event\", handler);\n}\n```\n\n----------------------------------------\n\nTITLE: When to Throw Errors in JavaScript\nDESCRIPTION: This section outlines scenarios where throwing errors is the best approach, such as handling generic errors, preconditions, or during deep recursive calls. It encourages thoughtful consideration of how to handle different error types.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Example code is not presented, but conditions for throwing an error are explained thoroughly.\n```\n\n----------------------------------------\n\nTITLE: Basic Python Test Case Structure in Odoo\nDESCRIPTION: Demonstrates the standard structure for creating a test case in Odoo using TransactionCase. Shows how to create a record, perform an action, and assert expected results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TestModelA(TransactionCase):\n    def test_some_action(self):\n        record = self.env['model.a'].create({'field': 'value'})\n        record.some_action()\n        self.assertEqual(\n            record.field,\n            expected_field_value)\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentProvider Class in Python for Odoo Payment Module\nDESCRIPTION: This snippet defines the PaymentProvider class within the Odoo payment module. It includes several auto-documented methods related to payment provider functionality, such as computing feature support fields, getting compatible providers, and handling tokenization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/payment/payment_provider.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass PaymentProvider():\n\n   def _compute_feature_support_fields(self):\n       pass\n\n   def _compute_view_configuration_fields(self):\n       pass\n\n   def _get_compatible_providers(self):\n       pass\n\n   def _get_redirect_form_view(self):\n       pass\n\n   def _get_validation_amount(self):\n       pass\n\n   def _get_validation_currency(self):\n       pass\n\n   def _is_tokenization_required(self):\n       pass\n\n   def _should_build_inline_form(self):\n       pass\n\n   def _get_removal_values(self):\n       pass\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal QWeb Report Template in XML\nDESCRIPTION: Illustrates the structure of a minimal QWeb template used in Odoo for generating reports. The template iterates over 'docs' records, displaying an object's name. The ID attribute must align with the report declaration in the system. Dependencies include Odoo's report and template actions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"report_invoice\">\n    <t t-call=\"web.html_container\">\n        <t t-foreach=\"docs\" t-as=\"o\">\n            <t t-call=\"web.external_layout\">\n                <div class=\"page\">\n                    <h2>Report title</h2>\n                    <p>This object\\'s name is <span t-field=\"o.name\"/></p>\n                </div>\n            </t>\n        </t>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining an SQL Constraint in Odoo\nDESCRIPTION: This snippet outlines how to define SQL constraints in an Odoo model. It specifies the necessary format for the constraints, which includes the constraint name, SQL definition, and an error message. This approach helps maintain data integrity by enforcing business rules directly at the database level.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/10_constraints.rst#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nERROR rd-demo odoo.schema: Table 'estate_property_offer': unable to add constraint 'estate_property_offer_check_price' as CHECK(price > 0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Orm Service in Odoo - JavaScript\nDESCRIPTION: This snippet implements the orm service in Odoo, which helps interact with business objects on the server. It utilizes a registry to add the service, which includes methods like read, write, and unlink. Dependencies include importing the registry from '@web/core/registry'.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nexport const OrmService = {\n    start() {\n        return {\n            read(...) { ... },\n            write(...) { ... },\n            unlink(...) { ... },\n            ...\n        }\n    },\n};\nregistry.category(\"services\").add(\"orm\", OrmService);\n```\n\n----------------------------------------\n\nTITLE: Registering a Service in JavaScript\nDESCRIPTION: This code snippet shows how to register a service within the 'services' registry. It defines a `myService` object with `dependencies` and a `start` method, then adds this service to the `services` category of the root registry with the key \"myService\".\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [...],\n    start(env, deps) {\n        // some code here\n    }\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Calling Python Model Methods Using Orm Service - JavaScript\nDESCRIPTION: This snippet demonstrates how to call a method on a Python model using the orm service in JavaScript within Odoo. The `call` function is used to execute methods on specified models with given arguments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn this.orm.call(\"some.model\", \"some_method\", [some, args]);\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Password with Python Console Command\nDESCRIPTION: This snippet demonstrates how to generate a secure, pseudorandom password for Odoo configuration using Python. The command utilizes the 'os' and 'base64' libraries to create a 32-character base64 encoded password, enhancing the security of sensitive information like database passwords.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -c 'import base64, os; print(base64.b64encode(os.urandom(24)))'\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET and POST Requests with the HTTP Service in JavaScript\nDESCRIPTION: Example demonstrating how to use the HTTP service to make GET and POST requests to external endpoints. The service handles the request and returns the response data in the specified format.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpService = useService(\"http\");\nconst data = await httpService.get(\"https://something.com/posts/1\");\n// ...\nawait httpService.post(\"https://something.com/posts/1\", { title: \"new title\", content: \"new content\" });\n```\n\n----------------------------------------\n\nTITLE: Full Name Import in Native Javascript Module\nDESCRIPTION: This code snippet demonstrates how to import a module from a different Odoo addon by using its full name. It shows importing `something` from `@web/file_a`. The `@odoo-module` annotation is required to indicate that this is a module to be converted by Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\n  /** @odoo-module **/\n  import {something} from `@web/file_a`\n\n```\n\n----------------------------------------\n\nTITLE: Adding Demonstration Data in Odoo\nDESCRIPTION: This XML code adds demonstration data to the 'academy.teachers' model in Odoo. It creates three records, each representing a teacher with a specific name.  Demo data are only loaded when the database is created with demonstration data enabled or when explicitly loaded during module installation/update with demo data.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n\"<odoo>\n\n    <record id=\\\"padilla\\\" model=\\\"academy.teachers\\\">\n        <field name=\\\"name\\\">Diana Padilla</field>\n    </record>\n    <record id=\\\"carroll\\\" model=\\\"academy.teachers\\\">\n        <field name=\\\"name\\\">Jody Carroll</field>\n    </record>\n    <record id=\\\"vaughn\\\" model=\\\"academy.teachers\\\">\n        <field name=\\\"name\\\">Lester Vaughn</field>\n    </record>\n\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Workflow Buttons to Odoo List View Header\nDESCRIPTION: Demonstrates how to add workflow buttons to the list view header. Buttons in the header can be set to display always or only when records are selected.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n    <header>\n        <BUTTONS/>\n    </header>\n    ...\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Transformed Odoo Module Example\nDESCRIPTION: This code snippet illustrates how Odoo transforms a native JavaScript module with the *@odoo-module* annotation into an Odoo module. It wraps the module content within `odoo.define` and updates the import/export statements to use the Odoo module system. The module imports someFunction from '@web/file_b' and exports otherFunction.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\n   odoo.define('@web/file_a', function (require) {\n   'use strict';\n   let __exports = {};\n\n   const { someFunction } = require(\"@web/file_b\");\n\n   __exports.otherFunction = function otherFunction(val) {\n       return someFunction(val + 3);\n   };\n\n   return __exports;\n   )};\n\n```\n\n----------------------------------------\n\nTITLE: Todo List State Initialization\nDESCRIPTION: Example of initializing todo list state with a single hardcoded todo item.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// in TodoList\nthis.todos = useState([{ id: 3, description: \"buy milk\", isCompleted: false }]);\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Example - JavaScript\nDESCRIPTION: Shows how to create a custom hook to simplify the usage of the clicker service. This reduces boilerplate code by encapsulating the `useService` and `useState` calls into a single, reusable function.  It improves code readability and maintainability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.clicker = useClicker();\n```\n\n----------------------------------------\n\nTITLE: Adding Owl Component to Assets Bundle in Python\nDESCRIPTION: This Python snippet illustrates adding the Owl component files to the web.assets_frontend bundle in the module manifest. This enables the component's availability on portal and website pages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/frontend_owl_components.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\\n    # ...\\n    'assets': {\\n        'web.assets_frontend': [\\n            'your_module/static/src/portal_component/**/*',\\n        ],\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Types in Odoo XML Views\nDESCRIPTION: This snippet demonstrates how to define buttons with different types in Odoo views. It shows an 'object' type button that calls a method on the view's model and an 'action' type button that loads and executes an ir.actions record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/button_attribute_type.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"action_create_new\" string=\"Create document\"/>\n<button type=\"action\" name=\"addon.action_create_view\" string=\"Create and Edit\"/>\n```\n\n----------------------------------------\n\nTITLE: Computing Multiple Fields Simultaneously in Odoo\nDESCRIPTION: This code shows how to compute multiple fields at the same time using the same method in Odoo. Just assign the same compute method to all relevant fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndiscount_value = fields.Float(compute='_apply_discount')\ntotal = fields.Float(compute='_apply_discount')\n\n@api.depends('value', 'discount')\ndef _apply_discount(self):\n    for record in self:\n        # compute actual discount from discount percentage\n        discount = record.value * record.discount\n        record.discount_value = discount\n        record.total = record.value - discount\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Search Method in Multiple Languages\nDESCRIPTION: This code demonstrates how to use pagination with the search method to retrieve a subset of records. The example uses offset and limit parameters to control which records are returned from the query results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]], {'offset': 10, 'limit': 5})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]], {offset: 10, limit: 5})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))), array('offset'=>10, 'limit'=>5));\n```\n\nLANGUAGE: java\nCODE:\n```\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search\",\n    asList(asList(\n        asList(\"is_company\", \"=\", true))),\n    new HashMap() {{ put(\"offset\", 10); put(\"limit\", 5); }}\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar records []int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search\",\n    []any{[]any{\n        []any{\"is_company\", \"=\", true},\n    }},\n    map[string]int64{\"offset\": 10, \"limit\":  5},\n}, &records); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Widget Implementation\nDESCRIPTION: Implementation of a multiplication widget that monitors and displays the product of two integer fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetMultiplication = instance.web.form.FormWidget.extend({\n    start: function() {\n        this._super();\n        this.field_manager.on(\"field_changed:integer_a\", this, this.display_result);\n        this.field_manager.on(\"field_changed:integer_b\", this, this.display_result);\n        this.display_result();\n    },\n    display_result: function() {\n        var result = this.field_manager.get_field_value(\"integer_a\") *\n                     this.field_manager.get_field_value(\"integer_b\");\n        this.$el.text(\"a*b = \" + result);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Translatable QWeb Templates in XML\nDESCRIPTION: Presents methods for defining translatable report templates, allowing reports to render in a partner's language by leveraging external template calls and language parameters. It requires the context rebrowsing for translatable fields in models and operates within Odoo's template rendering framework.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Main template -->\n<template id=\"report_saleorder\">\n    <t t-call=\"web.html_container\">\n        <t t-foreach=\"docs\" t-as=\"doc\">\n            <t t-call=\"sale.report_saleorder_document\" t-lang=\"doc.partner_id.lang\"/>\n        </t>\n    </t>\n</template>\n\n<!-- Translatable template -->\n<template id=\"report_saleorder_document\">\n    <!-- Re-browse of the record with the partner lang -->\n    <t t-set=\"doc\" t-value=\"doc.with_context(lang=doc.partner_id.lang)\" />\n    <t t-call=\"web.external_layout\">\n        <div class=\"page\">\n            <div class=\"oe_structure\"/>\n            <div class=\"row\">\n                <div class=\"col-6\">\n                    <strong t-if=\"doc.partner_shipping_id == doc.partner_invoice_id\">Invoice and shipping address:</strong>\n                    <strong t-if=\"doc.partner_shipping_id != doc.partner_invoice_id\">Invoice address:</strong>\n                    <div t-field=\"doc.partner_invoice_id\" t-options=\"{&quot;no_marker&quot;: True}\"/>\n                <...>\n            <div class=\"oe_structure\"/>\n        </div>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph View in Odoo Studio\nDESCRIPTION: Documentation for Graph view configuration including chart types, dimensions, measurements and sorting options. Used for data visualization in bar, line or pie charts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/views.rst#2025-04-18_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe :guilabel:`Graph` :icon:`fa-area-chart` view is used to showcase data from records in a bar,\nline, or pie chart.\n\n- To change the default chart, select :guilabel:`Bar`, :guilabel:`Line`, or :guilabel:`Pie` under\n  :guilabel:`Type`.\n- To choose a default data dimension (category), select a field under :guilabel:`First dimension`\n  and, if needed, another under :guilabel:`Second dimension`.\n```\n\n----------------------------------------\n\nTITLE: Form: Example Footer with Save, Action, and Discard Buttons\nDESCRIPTION: This example shows a concrete implementation of the `<footer>` element, containing 'Save', 'Feature action', and 'Discard' buttons. It uses special attributes like `special=\"save\"` and CSS classes like `btn-primary` to define specific button behaviors and styling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<footer>\n    <button string=\"Save\" special=\"save\"/>\n    <button string=\"Feature action\" type=\"object\" name=\"my_action\" class=\"btn-primary\"/>\n    <button string=\"Discard\" special=\"cancel\"/>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Connection - Go\nDESCRIPTION: This snippet demonstrates how to configure the connection parameters to an Odoo instance using Go.  The URL, database name, username, and password must be replaced with the correct Odoo instance details.  It declares global variables for these parameters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\n           url = <insert server URL>\n           db = <insert database name>\n           username = \"admin\"\n           password = <insert password for your admin user (default: admin)>\n       )\n```\n\n----------------------------------------\n\nTITLE: View Inheritance Example in Odoo XML\nDESCRIPTION: Demonstrates view inheritance by extending an existing view to add a new field after the description field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"idea_category_list2\" model=\"ir.ui.view\">\n    <field name=\"name\">id.category.list2</field>\n    <field name=\"model\">idea.category</field>\n    <field name=\"inherit_id\" ref=\"id_category_list\"/>\n    <field name=\"arch\" type=\"xml\">\n        <!-- find field description and add the field\n             idea_ids after it -->\n        <xpath expr=\"//field[@name='description']\" position=\"after\">\n          <field name=\"idea_ids\" string=\"Number of ideas\"/>\n        </xpath>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: No-Update XML Records in Odoo\nDESCRIPTION: Example of creating records with noupdate flag to prevent updates during module upgrades.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<odoo noupdate=\"1\">\n  <record id=\"id1\" model=\"model\">\n    <field name=\"fieldA\" eval=\"True\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: View Inheritance and Extension using XML in Odoo\nDESCRIPTION: This XML snippet shows how to extend an existing view in Odoo using the view inheritance mechanism. The inherit_id attribute references the parent view, and xpath elements are used to insert new fields into specific locations of the parent view's structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-18_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<record id=\"inherited_model_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">inherited.model.form.inherit.test</field>\n    <field name=\"model\">inherited.model</field>\n    <field name=\"inherit_id\" ref=\"inherited.inherited_model_view_form\"/>\n    <field name=\"arch\" type=\"xml\">\n        <!-- find field description and add the field\n             new_field after it -->\n        <xpath expr=\"//field[@name='description']\" position=\"after\">\n          <field name=\"new_field\"/>\n        </xpath>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Classes with include() in Odoo Web Framework\nDESCRIPTION: This snippet demonstrates how to directly modify an existing class using the include() method, which alters the class in-place rather than creating a new one. It shows how this._super() calls the original implementation of a method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar TestClass = instance.web.Class.extend({\n    testMethod: function() {\n        return \"hello\";\n    },\n});\n\nTestClass.include({\n    testMethod: function() {\n        return this._super() + \" world\";\n    },\n});\n\nconsole.log(new TestClass().testMethod());\n// will print \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Wizard Action in XML for Odoo\nDESCRIPTION: XML code for defining a wizard action that launches a form in a dialog. The action includes configuration for the target model, view mode, and binding to a specific model for contextual access.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"launch_the_wizard\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Launch the Wizard</field>\n    <field name=\"res_model\">wizard.model.name</field>\n    <field name=\"view_mode\">form</field>\n    <field name=\"target\">new</field>\n    <field name=\"binding_model_id\" ref=\"model_context_model_ref\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Searching on a Computed Field in Odoo\nDESCRIPTION: This example illustrates how to enable searching on a computed field in Odoo. The `search` parameter specifies a method that returns a domain equivalent to the search condition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nupper_name = field.Char(compute='_compute_upper', search='_search_upper')\n\ndef _search_upper(self, operator, value):\n    if operator == 'like':\n        operator = 'ilike'\n    return [('name', operator, value)]\n```\n\n----------------------------------------\n\nTITLE: Defining SQL View Model in Odoo Python\nDESCRIPTION: Creates a basic SQL view model structure with required attributes like _name, _description, _rec_name, and _auto. The _auto=False indicates this is a database view rather than a stored table.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/create_reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\n\nclass ModuleReport(models.Model):\n    _name = 'module.report'\n    _description = \"Module Report\"\n    _rec_name = 'module_field'\n    _auto = False\n```\n\n----------------------------------------\n\nTITLE: Defining a Hierarchical Menu Structure for Odoo\nDESCRIPTION: This XML snippet defines a three-level menu structure that connects the root, first level, and action menus. Each `menuitem` links to the corresponding action providing a clear structure for navigating the app.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem id=\"test_menu_root\" name=\"Test\">\n    <menuitem id=\"test_first_level_menu\" name=\"First Level\">\n        <menuitem id=\"test_model_menu_action\" action=\"test_model_action\"/>\n    </menuitem>\n</menuitem>\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in Odoo Upgrade Script (Python)\nDESCRIPTION: This upgrade script example demonstrates how to execute a SQL query to update partner names by appending an exclamation mark. It uses the database cursor directly and logs the number of updated records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n_logger = logging.getLogger(__name__)\n\n\ndef migrate(cr, version):\n    cr.execute(\"UPDATE res_partner SET name = name || '!'\")\n    _logger.info(\"Updated %s partners\", cr.rowcount)\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Field Values in Sale Orders - Odoo - Python\nDESCRIPTION: This snippet demonstrates how to update custom field values in `sale_order` using an SQL query via a Python function. It ensures that the field values from `sale_subscription` are appropriately copied to `sale_order` before an upgrade. This script is intended to be part of an upgrade process, hence runs directly on the database via cursor `cr`. Python and SQL knowledge are required, and the `cr` object is a database cursor provided by the Odoo ORM.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/upgrade_custom_db.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n            def migrate(cr, version):\n               cr.execute(\n                  \"\"\"\n                  UPDATE sale_order so\n                     SET custom_field = ss.custom_field\n                    FROM sale_subscription ss\n                   WHERE ss.new_sale_order_id = so.id\n                  \"\"\"\n               )\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Groups in Python for Odoo\nDESCRIPTION: This Python code extends the BusinessTrip model to customize notification groups. It adds a new group for Trip Managers with a custom action button to cancel the trip.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread', 'mail.alias.mixin']\n    _description = 'Business Trip'\n\n    # Pevious code goes here\n\n    def action_cancel(self):\n        self.write({'state': 'draft'})\n\n    def _notify_get_groups(self, message, groups):\n        \"\"\" Handle Trip Manager recipients that can cancel the trip at the last\n        minute and kill all the fun. \"\"\"\n        groups = super(BusinessTrip, self)._notify_get_groups(message, groups)\n\n        self.ensure_one()\n        if self.state == 'confirmed':\n            app_action = self._notify_get_action_link('method',\n                                method='action_cancel')\n            trip_actions = [{'url': app_action, 'title': _('Cancel')}]\n\n        new_group = (\n            'group_trip_manager',\n            lambda partner: bool(partner.user_ids) and\n            any(user.has_group('business.group_trip_manager')\n            for user in partner.user_ids),\n            {\n                'actions': trip_actions,\n            })\n\n        return [new_group] + groups\n```\n\n----------------------------------------\n\nTITLE: Basic Field Element in Form View\nDESCRIPTION: Shows how to include a field element in a form view to display and edit a field value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"FIELD_NAME\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Job in Odoo\nDESCRIPTION: Illustrates how to set up a cron job (automated action) in Odoo. This example shows calling a method on a model at regular intervals.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodel.<method_name>()\n```\n\n----------------------------------------\n\nTITLE: Embedding Barcodes in QWeb Reports Using HTML\nDESCRIPTION: Demonstrates how to embed barcode images in reports using QWeb syntax. The snippet shows HTML syntax combined with dynamic source attributes for generating QR codes or barcodes with specified dimensions and values.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img t-att-src=\"'/report/barcode/QR/%s' % 'My text in qr code'\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<img t-att-src=\"'/report/barcode/?\n    barcode_type=%s&amp;value=%s&amp;width=%s&amp;height=%s'%('QR', 'text', 200, 200)\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Many2one Relationship in Odoo Python\nDESCRIPTION: This example demonstrates defining a Many2one relationship in an Odoo model. It links the test model to the res.partner model, highlighting how to access related data. The field partner_id establishes a single link to res.partner, typically used for dropdown selections in form views. Dependencies include the Odoo fields module and a running Odoo instance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npartner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n```\n\n----------------------------------------\n\nTITLE: Using an Owl Component in XML Template\nDESCRIPTION: This XML snippet details how to add an <owl-component> tag to an Odoo XML template page using xpath. This is necessary to mount the Owl component on the correct location on the page.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/frontend_owl_components.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<odoo>\\n    <template id=\\\"your_module.portal_my_home\\\" inherit_id=\\\"portal.portal_my_home\\\">\\n        <xpath expr=\\\"//*[hasclass('o_portal_my_home')]\\\" position=\\\"before\\\">\\n            <owl-component name=\\\"your_module.YourComponent\\\" />\\n        </xpath>\\n    </template>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Using the invisible Attribute in Odoo XML Views\nDESCRIPTION: This example demonstrates how to use the 'invisible' attribute in Odoo XML view definitions. It shows different use cases including simple boolean values and complex Python expressions that reference other fields, including parent fields. The invisible attribute controls whether elements are visible or hidden based on evaluated conditions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/generic_attribute_invisible.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" invisible=\"True\"/> <!-- necessary to evaluate invisible attribute of 'fname_b' field -->\n<field name=\"fname_b\" invisible=\"fname_c != 3 and fname_a == parent.fname_d\"/>\n<group invisible=\"fname_c != 4\">\n    <field name=\"fname_c\"/>\n    <field name=\"fname_d\"/>\n<group>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Module Manifest\nDESCRIPTION: This code snippet shows an example of a module manifest file in Odoo. It demonstrates the basic structure of the manifest, including key fields like name, version, depends, author, category, description, data, and demo. The manifest is used to declare the module's metadata and define its dependencies and data files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/module.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n{\n    'name': \\\"A Module\\\",\n    'version': '1.0',\n    'depends': ['base'],\n    'author': \\\"Author Name\\\",\n    'category': 'Category',\n    'description': \\\"\"\"\n    Description text\n    \"\"\",\n    # data files always loaded at installation\n    'data': [\n        'views/mymodule_view.xml',\n    ],\n    # data files containing optionally loaded demonstration data\n    'demo': [\n        'demo/demo_data.xml',\n    ],\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding a One2many Relation to the Teachers Model in Odoo\nDESCRIPTION: This Python snippet adds a One2many field ('course_ids') to the 'academy.teachers' model, creating an inverse relationship with the 'academy.courses' model.  It also presents the courses model which now has a many2one relationship to the teachers model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"class Teachers(models.Model):\\n    _name = 'academy.teachers'\\n\\n    name = fields.Char()\\n    biography = fields.Html()\\n\\n    course_ids = fields.One2many('academy.courses', 'teacher_id', string=\\\"Courses\\\")\\n\\nclass Courses(models.Model):\\n    _name = 'academy.courses'\\n\\n    name = fields.Char()\\n    teacher_id = fields.Many2one('academy.teachers', string=\\\"Teacher\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Inside a Node - Odoo XML\nDESCRIPTION: This code snippet demonstrates how to use `position=\"inside\"` to append content to the end of a matched node.  This inserts the specified XML within the targeted element. It requires Odoo's view inheritance mechanism to be properly configured.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<notebook position=\\\"inside\\\">\\n    <page string=\\\"New feature\\\">\\n        ...\\n    </page\\\">\\n</notebook>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared State Service\nDESCRIPTION: A service that maintains a simple shared state with getter and setter methods\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst sharedStateService = {\n    start(env) {\n        let state = {};\n        return {\n            getValue(key) {\n                return state[key];\n            },\n            setValue(key, value) {\n                state[key] = value;\n            },\n        };\n    },\n};\n\nregistry.category(\"services\").add(\"shared_state\", sharedStateService);\n```\n\n----------------------------------------\n\nTITLE: CheckBox Component Usage in XML\nDESCRIPTION: This snippet shows how to use the `CheckBox` component in an XML template. The component takes `value` and `disabled` props, and emits a `t-on-change` event when the checkbox is toggled. The text between the opening and closing tags becomes the label next to the checkbox.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n  <CheckBox value=\"boolean\" disabled=\"boolean\" t-on-change=\"onValueChange\">\n    Some Text\n  </CheckBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Readonly Attribute in Odoo XML\nDESCRIPTION: Demonstrates how to set a field as read-only using static and dynamic conditions in Odoo view definitions. The readonly attribute can be a simple boolean or a complex Python expression that evaluates field or parent field conditions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/field_attribute_readonly.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" readonly=\"True\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_b\" readonly=\"name_a in [fname_b, parent.fname_d]\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Connection - Python\nDESCRIPTION: This snippet shows how to configure the connection parameters (URL, database, username, password) to an Odoo instance using Python. Replace the placeholder values with your actual Odoo server details.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl = <insert server URL>\ndb = <insert database name>\nusername = 'admin'\npassword = <insert password for your admin user (default: admin)>\n```\n\n----------------------------------------\n\nTITLE: Managing XML View Inheritance\nDESCRIPTION: This code snippet demonstrates the use of XML expressions to manage view inheritance in Odoo, specifically inserting fields in specific positions relative to existing fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//field[@name='description']\" position=\"after\">\\n    <field name=\"idea_ids\" />\\n</xpath>\\n\\n<field name=\"description\" position=\"after\">\\n    <field name=\"idea_ids\" />\\n</field>\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to an Existing Model in Odoo using Inheritance\nDESCRIPTION: This Python snippet adds a new field to an existing model using Odoo's first inheritance mechanism. The _inherit attribute specifies the existing model to be extended, and new fields are defined using Odoo's field types. This approach enables modular extension of models.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom odoo import fields, models\n\nclass InheritedModel(models.Model):\n    _inherit = \"inherited.model\"\n\n    new_field = fields.Char(string=\"New Field\")\n```\n\n----------------------------------------\n\nTITLE: Accessing the Environment in Owl Components\nDESCRIPTION: This JavaScript snippet illustrates how to access the environment within an Owl component to utilize Odoo's translation functionality, which makes it easy to translate strings dynamically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst someString = this.env._t('some text');\n```\n\n----------------------------------------\n\nTITLE: Odoo XML Data File with noupdate Flag\nDESCRIPTION: This snippet demonstrates how to use the `noupdate` flag in Odoo XML data files to control whether data is loaded only during module installation or also during updates. This is useful for data that should only be initialized once, such as default configurations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\n        <odoo>\n            <data noupdate=\"1\">\n                <!-- Only loaded when installing the module (odoo-bin -i module) -->\n                <operation/>\n            </data>\n\n            <!-- (Re)Loaded at install and update (odoo-bin -i/-u) -->\n            <operation/>\n        </odoo>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller in Odoo - JavaScript\nDESCRIPTION: This code snippet illustrates how to create a new controller in Odoo to coordinate between various components of a view, making the model reactive.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { Layout } from \"@web/search/layout\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { Component, onWillStart, useState } from \"@odoo/owl\";\n\nexport class BeautifulController extends Component {\n    setup() {\n        this.orm = useService(\"orm\");\n\n        // The controller create the model and make it reactive so whenever this.model is\n        // accessed and edited then it'll cause a rerendering\n        this.model = useState(\n            new this.props.Model(\n                this.orm,\n                this.props.resModel,\n                this.props.fields,\n                this.props.archInfo,\n                this.props.domain\n            )\n        );\n\n        onWillStart(async () => {\n            await this.model.load();\n        });\n    }\n}\n\nBeautifulController.template = \"my_module.View\";\nBeautifulController.components = { Layout };\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Method for an Odoo Model\nDESCRIPTION: This Python snippet shows how to define a public method in an Odoo model.  The method is designed to be called from the user interface through an action button. It iterates through the selected records (``self``) and modifies the `name` field of each record.  The method returns ``True`` as required for public methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestAction(models.Model):\n    _name = \"test.action\"\n\n    name = fields.Char()\n\n    def action_do_something(self):\n        for record in self:\n            record.name = \"Something\"\n        return True\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited View Structure in XML\nDESCRIPTION: This snippet shows the structure for creating an inherited view in Odoo. It includes fields for specifying the parent view, inheritance mode, and XPath expressions for modifying the parent view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"ADDON.MODEL_view_TYPE\" model=\"ir.ui.view\">\n    <field name=\"model\">MODEL</field>\n    <field name=\"inherit_id\" ref=\"VIEW_REFERENCE\"/>\n    <field name=\"mode\">MODE</field>\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"XPATH\" position=\"POSITION\">\n            <CONTENT/>\n        </xpath>\n        <NODE ATTRIBUTES=\"VALUES\" position=\"POSITION\">\n            <CONTENT/>\n        </NODE>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Patching JavaScript Class\nDESCRIPTION: Shows how to patch methods in a JavaScript class using the patch function for both static and prototype methods. Includes limitations of patching constructors and the workaround for it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  static myStaticFn() {...}\n  myPrototypeFn() {...}\n}\n\n// this will patch static properties!!!\npatch(MyClass, {\n  myStaticFn() {...},\n});\n\n// this is probably the usual case: patching a class method\npatch(MyClass.prototype, {\n  myPrototypeFn() {...},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  constructor() {\n    this.setup();\n  }\n  setup() {\n    this.number = 1;\n  }\n}\n\npatch(MyClass.prototype, {\n  setup() {\n    super.setup(...arguments);\n    this.doubleNumber = this.number * 2;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding to a Registry in JavaScript\nDESCRIPTION: This code demonstrates how to create a new registry and add a key-value pair to it. It uses the `Registry` class from `@web/core/registry` to instantiate a registry, adds a \"hello\" key with the value \"odoo\", and then logs the retrieved value to the console.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Registry } from \"@web/core/registry\";\n\nconst myRegistry = new Registry();\n\nmyRegistry.add(\"hello\", \"odoo\");\n\nconsole.log(myRegistry.get(\"hello\"));\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates using HttpRequest in Odoo Controllers\nDESCRIPTION: Shows how to render QWeb templates in Odoo HTTP controllers using the HttpRequest.render method. This helper method simplifies template rendering with context values during HTTP requests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = http.request.render('my-template', {\n    'context_value': 42\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Declaration in Odoo\nDESCRIPTION: This JavaScript snippet shows how to declare a module in Odoo by assigning a function to the global 'odoo' variable. The module function receives two parameters: an instance of the Odoo web client and a local namespace for defining accessible objects and variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.oepetstore = function(instance, local) {\n    var _t = instance.web._t,\n        _lt = instance.web._lt;\n    var QWeb = instance.web.qweb;\n\n    local.HomePage = instance.Widget.extend({\n        start: function() {\n            console.log(\"pet store home page loaded\");\n        },\n    });\n\n    instance.web.client_actions.add(\n        'petstore.homepage', 'instance.oepetstore.HomePage');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with XML Commands in Odoo\nDESCRIPTION: Example of creating and linking related records using Command.create() and Command.link() in Odoo XML record definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"related_ids\" eval=\"[\n        Command.create({\n            'name': 'My name',\n        }),\n        Command.create({\n            'name': 'Your name',\n        }),\n        Command.link(ref('model.xml_id')),\n    ]\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Create Buttons to Odoo List View\nDESCRIPTION: Shows how to add inline create buttons to a list view using the control and create elements. This is useful for One2many or Many2many fields to customize record creation options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n   <control>\n       <create string=\"LABEL\"/>\n       <BUTTONS/>\n    </control>\n    ...\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Implementing IoT Driver Class\nDESCRIPTION: Example of implementing a Driver class for a specific device type, including initialization and device support detection.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.driver import Driver\n\nclass DriverName(Driver):\n    connection_type = 'ConnectionType'\n\n    def __init__(self, identifier, device):\n        super(NewDriver, self).__init__(identifier, device)\n        self.device_type = 'DeviceType'\n        self.device_connection = 'DeviceConnection'\n        self.device_name = 'DeviceName'\n\n    @classmethod\n    def supported(cls, device):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Basic Kanban View Structure with QWeb\nDESCRIPTION: This code defines a basic Kanban view structure using QWeb templates. The `<kanban>` element is the root, containing `<templates>` which hold the `kanban-box` template. This template defines the structure of each card in the Kanban view, including a clickable div and a field for the record's name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/14_qwebintro.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n    <templates>\n        <t t-name=\"kanban-box\">\n            <div class=\"oe_kanban_global_click\">\n                <field name=\"name\"/>\n            </div>\n        </t>\n    </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: JavaScript loadAssets Function Definition\nDESCRIPTION: Function to load JavaScript and CSS assets asynchronously. The function accepts an object specifying arrays of JavaScript library URLs (jsLibs) and CSS library URLs (cssLibs) to load.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nloadAssets(assets)\n```\n\n----------------------------------------\n\nTITLE: Patching a Component in Odoo\nDESCRIPTION: Illustrates how to patch a component class in Odoo by applying patch to its prototype, emphasizing the structure and execution through the setup method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npatch(MyComponent.prototype, {\n  setup() {\n    useMyHook();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using column_invisible Attribute in Odoo XML Views\nDESCRIPTION: Demonstrates how to use the column_invisible attribute to conditionally hide entire columns in Odoo views. The attribute accepts Python expressions that evaluate to a boolean, and it affects the visibility of an entire column without requiring subtree values for evaluation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/generic_attribute_column_invisible.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"product_is_late\" column_invisible=\"parent.has_late_products == False\"/>\n<button type=\"object\" name=\"action_confirm\" column_invisible=\"context.get('hide_confirm')\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Promises with Error Handling in JavaScript\nDESCRIPTION: This snippet shows how to handle errors in Promises correctly. It highlights the need to keep catch clauses close to the Promise to avoid unintended error swallowing and demonstrates the appropriate usage of instanceof checks.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsomeFunction().then((someVal) => {\n  // work with someVal\n}).catch((e) => {\n  if (!(e instanceof MyError)) {\n    throw e;\n  }\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Pet Store Homepage with Toys List\nDESCRIPTION: Complete implementation of HomePage widget with PetToysList and MessageOfTheDay components, including data fetching and rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.oepetstore = function(instance, local) {\n    var _t = instance.web._t,\n        _lt = instance.web._lt;\n    var QWeb = instance.web.qweb;\n\n    local.HomePage = instance.Widget.extend({\n        template: \"HomePage\",\n        start: function () {\n            return Promise.all([\n                new local.PetToysList(this).appendTo(this.$('.oe_petstore_homepage_left')),\n                new local.MessageOfTheDay(this).appendTo(this.$('.oe_petstore_homepage_right'))\n            ]);\n        }\n    });\n    instance.web.client_actions.add('petstore.homepage', 'instance.oepetstore.HomePage');\n\n    local.MessageOfTheDay = instance.Widget.extend({\n        template: 'MessageOfTheDay',\n        start: function () {\n            var self = this;\n            return new instance.web.Model('oepetstore.message_of_the_day')\n                .query([\"message\"])\n                .order_by('-create_date', '-id')\n                .first()\n                .then(function (result) {\n                    self.$(\".oe_mywidget_message_of_the_day\").text(result.message);\n                });\n        }\n    });\n\n    local.PetToysList = instance.Widget.extend({\n        template: 'PetToysList',\n        start: function () {\n            var self = this;\n            return new instance.web.Model('product.product')\n                .query(['name', 'image'])\n                .filter([['categ_id.name', '=', \"Pet Toys\"]])\n                .limit(5)\n                .all()\n                .then(function (results) {\n                    _(results).each(function (item) {\n                        self.$el.append(QWeb.render('PetToy', {item: item}));\n                    });\n                });\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subclasses in Odoo JavaScript\nDESCRIPTION: This JavaScript example illustrates how to create a subclass from an existing class using the 'extend' method. It covers method overriding and introduces '_super()' for calling overridden methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySpanishClass = MyClass.extend({\n    say_hello: function() {\n        this._super();\n        console.log(\"translation in Spanish: hola\", this.name);\n    },\n});\n\nvar my_object = new MySpanishClass(\"Bob\");\nmy_object.say_hello();\n// print \"hello Bob \\n translation in Spanish: hola Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Conditional Action with Next Action Specification\nDESCRIPTION: This snippet provides an example of a server action that defines a variable 'action' to be returned to the client. It shows how to structure the action based on specific conditions related to the record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.actions.server\" id=\"print_instance\">\n    <field name=\"name\">Res Partner Server Action</field>\n    <field name=\"model_id\" ref=\"model_res_partner\" />\n    <field name=\"state\">code</field>\n    <field name=\"code\">\n        if record.some_condition():\n            action = {\n                \"type\": \"ir.actions.act_window\",\n                \"view_mode\": \"form\",\n                \"res_model\": record._name,\n                \"res_id\": record.id,\n            }\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Reducing Algorithmic Complexity in Odoo Python\nDESCRIPTION: Examples of reducing algorithmic complexity in Odoo code by preparing input data and using appropriate data structures.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmapped_result = {result['id']: result['foo'] for result in results}\nfor record in self:\n    record.foo = mapped_result.get(record.id)\n\ninvalid_ids = set(invalid_ids)\nfor record in self:\n    if record.id in invalid_ids:\n        ...\n\ninvalid_ids = self.search(domain)\nfor record in self - invalid_ids:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom QWeb Report Contexts in Python\nDESCRIPTION: Provides a Python model example for injecting custom values into QWeb report contexts by overriding '_get_report_values'. Useful for expanding the report data scope with arbitrary items from different models. Dependencies include the Odoo model framework.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, models\n\nclass ParticularReport(models.AbstractModel):\n    _name = 'report.module.report_name'\n\n    def _get_report_values(self, docids, data=None):\n        # get the report action back as we will need its data\n        report = self.env['ir.actions.report']._get_report_from_name('module.report_name')\n        # get the records selected for this rendering of the report\n        obj = self.env[report.model].browse(docids)\n        # return a custom rendering context\n        return {\n            'lines': docids.get_lines()\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Onchange Method in Odoo\nDESCRIPTION: Demonstrates how to use the @api.onchange decorator to update form fields in Odoo when other fields change, providing dynamic behavior without database persistence.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- content of form view -->\\n<field name=\"amount\"/>\\n<field name=\"unit_price\"/>\\n<field name=\"price\" readonly=\"1\"/>\n```\n\nLANGUAGE: python\nCODE:\n```\n# onchange handler\\n@api.onchange('amount', 'unit_price')\\ndef _onchange_price(self):\\n    # set auto-changing field\\n    self.price = self.amount * self.unit_price\\n    # Can optionally return a warning and domains\\n    return {\\n        'warning': {\\n            'title': \"Something bad happened\",\\n            'message': \"It was very bad indeed\",\\n        }\\n    }\n```\n\n----------------------------------------\n\nTITLE: Fail2ban Odoo Login Jail Configuration\nDESCRIPTION: Fail2ban jail configuration that blocks IPs for 15 minutes after 10 failed login attempts within 1 minute on HTTP/HTTPS ports.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[odoo-login]\nenabled = true\nport = http,https\nbantime = 900  ; 15 min ban\nmaxretry = 10  ; if 10 attempts\nfindtime = 60  ; within 1 min\nlogpath = /var/log/odoo.log\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Multi-level Dropdown Menu in Owl\nDESCRIPTION: Implementation of a recursive dropdown menu that can handle arbitrary levels of nested menu items using template recursion.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"addon.MainTemplate\">\n  <div>\n    <t t-call=\"addon.RecursiveDropdown\">\n      <t t-set=\"name\" t-value=\"'Main Menu'\" />\n      <t t-set=\"items\" t-value=\"state.menuItems\" />\n    </t>\n  </div>\n</t>\n\n<t t-name=\"addon.RecursiveDropdown\">\n  <Dropdown>\n    <t t-set-slot=\"toggler\"><t t-esc=\"name\"/></t>\n      <t t-foreach=\"items\" t-as=\"item\" t-key=\"item.id\">\n        <t t-if=\"!item.childrenTree.length\">\n          <DropdownItem onSelected=\"() => this.onItemSelected(item)\" t-esc=\"item.name\"/>\n        </t>\n        <t t-else=\"\" t-call=\"addon.RecursiveDropdown\">\n          <t t-set=\"name\" t-value=\"item.name\" />\n          <t t-set=\"items\" t-value=\"item.childrenTree\" />\n        </t>\n      </t>\n    </t>\n  </Dropdown>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining a Gallery View with XML Attributes\nDESCRIPTION: This XML snippet illustrates how to define a gallery view with custom attributes, such as image field and tooltip fields, facilitating additional functionality for users interacting with the view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n <gallery image_field=\"some_field\" tooltip_field=\"some_other_field\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting User Group Access Restrictions in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to restrict a field's visibility using the 'groups' attribute. The field will only be visible to users in the 'base.group_no_one' group and explicitly hidden from users in the 'base.group_multi_company' group. The exclamation mark prefix acts as a negation operator.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/generic_attribute_groups.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"FIELD_NAME\" groups=\"base.group_no_one,!base.group_multi_company\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing XML-RPC Client in Python for Odoo\nDESCRIPTION: Example showing how to connect to Odoo via XML-RPC to authenticate and create a note. Uses the xmlrpc.client library to handle remote procedure calls.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/web_services.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\n\nroot = 'http://%s:%d/xmlrpc/' % (HOST, PORT)\n\nuid = xmlrpc.client.ServerProxy(root + 'common').login(DB, USER, PASS)\nprint(\"Logged in as %s (uid: %d)\" % (USER, uid))\n\n# Create a new note\nsock = xmlrpc.client.ServerProxy(root + 'object')\nargs = {\n    'color' : 8,\n    'memo' : 'This is a note',\n    'create_uid': uid,\n}\nnote_id = sock.execute(DB, uid, PASS, 'note.note', 'create', args)\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Odoo\nDESCRIPTION: Shows how to update existing records using the write method, allowing simultaneous updates to multiple records with the same field values\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {'name': \"Newer partner\"}])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model and Field in Ruby\nDESCRIPTION: This snippet illustrates how to create a custom model, add a custom field, create a record, and read data using Ruby. It uses the 'execute_kw' method to interact with Odoo's XML-RPC API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    name: \"Custom Model\",\n    model: \"x_custom\",\n    state: 'manual'\n}])\nmodels.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{\n    model_id: id,\n    name: \"x_name\",\n    ttype: \"char\",\n    state: \"manual\",\n    required: true\n}])\nrecord_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{x_name: \"test record\"}])\nmodels.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])\n```\n\n----------------------------------------\n\nTITLE: Odoo XML Data File Structure\nDESCRIPTION: This snippet shows the basic structure of an Odoo XML data file, including the root `odoo` element and the placement of operation elements within it. This structure is essential for defining data records, UI elements, security rules, and other module configurations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!-- the root elements of the data file -->\n    <odoo>\n        <operation/>\n        ...\n    </odoo>\n\n```\n\n----------------------------------------\n\nTITLE: Calling Sub-Templates in QWeb\nDESCRIPTION: The `t-call` directive facilitates calling other QWeb templates within a parent template to avoid duplication and to provide named template parts. The snippet shows how sub-templates can be called with execution context and can utilize variables defined in the enclosing context. Any required content can be set within the `t-call` body, accessible through the special variable `0` in the sub-template. A prerequisite is defining sub-templates beforehand within the Odoo application.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"other-template\">\n    <em>content</em>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Client Action in JavaScript\nDESCRIPTION: Demonstrates how to create and register a custom client action in the Odoo web client using the action registry\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nclass MyClientAction extends Component { ... }\nregistry.category(\"actions\").add(\"my-custom-action\", ClientAction);\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Definition with Dependencies\nDESCRIPTION: This code snippet illustrates how to define an Odoo module with explicit dependencies. It shows how to specify a list of module names as the second argument to `odoo.define`, ensuring that the module is loaded only after its dependencies are available.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n\n    odoo.define('module.Something', ['module.A', 'module.B'], function (require) {\n        \"use strict\";\n\n        var A = require('module.A');\n        var B = require('module.B');\n\n        // some code\n    });\n\n```\n\n----------------------------------------\n\nTITLE: Creating a new Odoo module with Odoo-bin\nDESCRIPTION: Using 'odoo-bin scaffold' command to set up a new Odoo module directory, complete with standard files. Requires Odoo to be installed and configured properly. This helps in initializing a structured directory for module development with necessary placeholder files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin scaffold <module name> <where to put it>\n```\n\n----------------------------------------\n\nTITLE: Defining a Client Action Template in XML\nDESCRIPTION: This XML snippet creates a template for the client action, which is referenced by the corresponding JavaScript component. The template is defined using the 't' tag and contains a simple 'Hello world' message, which can be customized further as required.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_client_action.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"awesome_tshirt.clientaction\">\n        Hello world\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Field Component\nDESCRIPTION: This code snippet registers a custom field component named MyFieldChar with the field registry. It demonstrates how to add components to specific categories within Odoo's extensible architecture.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"./core/registry\";\n\nclass MyFieldChar extends owl.Component {\n    // some code\n}\n\nregistry.category(\"fields\").add(\"my_field_char\", MyFieldChar);\n```\n\n----------------------------------------\n\nTITLE: Creating and Importing Database in Bash\nDESCRIPTION: This snippet demonstrates how to create a database and import data from an SQL dump file in Odoo. Prerequisites include having PostgreSQL installed and configured, along with the necessary permissions to create and access databases.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/setup.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb <database_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\npsql <database_name> < dump.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\npsql \\c <database_name>\nupdate res_users set login='admin', password='admin' where id=2;\n```\n\nLANGUAGE: bash\nCODE:\n```\npsql <database-name>\nupdate res_users set top_secret='' where id=2;\n```\n\n----------------------------------------\n\nTITLE: Button with Confirmation Dialog\nDESCRIPTION: Button implementation with confirmation message before action execution.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"action_destroye_gate\" string=\"Send the goa'uld\" type=\"object\" confirm=\"Do you confirm the action?\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Notebook Pages with Props in Owl JavaScript\nDESCRIPTION: Implementation of notebook pages using component props and templates, demonstrating a programmatic approach to page creation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notebook } from \"@web/core/notebook/notebook\";\n\nclass MyTemplateComponent extends owl.Component {\n  static template = owl.tags.xml`\n    <h1 t-esc=\"props.title\" />\n    <p t-esc=\"props.text\" />\n  `;\n}\n\nclass MyComponent extends owl.Component {\n  get pages() {\n    return [\n      {\n        Component: MyTemplateComponent,\n        title: \"Page 1\",\n        props: {\n          title: \"My First Page\",\n          text: \"This page is not visible\",\n        },\n      },\n      {\n        Component: MyTemplateComponent,\n        id: \"page_2\",\n        title: \"Page 2\",\n        props: {\n          title: \"My second page\",\n          text: \"You're at the right place!\",\n        },\n      },\n    ]\n  }\n}\nMyComponent.template = owl.tags.xml`\n  <Notebook defaultPage=\"'page_2'\" pages=\"pages\" />\n`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Database Info - PHP\nDESCRIPTION: This PHP snippet retrieves information for a test database from demo.odoo.com using the Ripcord library.  It requires the Ripcord library and XML-RPC support to be enabled in PHP. The retrieved information includes the URL, database name, username, and password for accessing the test database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('ripcord.php');\n$info = ripcord::client('https://demo.odoo.com/start')->start();\nlist($url, $db, $username, $password) = array($info['host'], $info['database'], $info['user'], $info['password']);\n```\n\n----------------------------------------\n\nTITLE: Loading QWeb Templates\nDESCRIPTION: Method for loading template files into the QWeb instance. Accepts templates as XML strings, URLs, or DOM nodes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.add_template(templates)\n```\n\n----------------------------------------\n\nTITLE: Component Reference Example\nDESCRIPTION: Shows how to use refs in Owl components to access DOM elements after mounting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetup() {\n   this.myRef = useRef('some_name');\n   onMounted(() => {\n      console.log(this.myRef.el);\n   });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Text Field Component\nDESCRIPTION: Registers the custom text field component in the fields registry.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"fields\").add(\"my_text_field\", MyTextField);\n```\n\n----------------------------------------\n\nTITLE: Arch Parser in Odoo - JavaScript\nDESCRIPTION: This code creates an arch parser in Odoo, designed to interpret the arch view and provide necessary data to the view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { XMLParser } from \"@web/core/utils/xml\";\n\nexport class BeautifulArchParser extends XMLParser {\n    parse(arch) {\n        const xmlDoc = this.parseXML(arch);\n        const fieldFromTheArch = xmlDoc.getAttribute(\"fieldFromTheArch\");\n        return {\n            fieldFromTheArch,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-level Dropdown Implementation with t-call in Owl XML\nDESCRIPTION: Example of nested dropdowns implemented using t-call to create a file menu with submenus for New and Save As options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"addon.Dropdown.File\">\n  <Dropdown>\n    <t t-set-slot=\"toggler\">File</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-open')\">Open</DropdownItem>\n    <t t-call=\"addon.Dropdown.File.New\"/>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-save')\">Save</DropdownItem>\n    <t t-call=\"addon.Dropdown.File.Save.As\"/>\n  </Dropdown>\n</t>\n\n<t t-name=\"addon.Dropdown.File.New\">\n  <Dropdown>\n    <t t-set-slot=\"toggler\">New</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-document')\">Document</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-spreadsheet')\">Spreadsheet</DropdownItem>\n  </Dropdown>\n</t>\n\n<t t-name=\"addon.Dropdown.File.Save.As\">\n  <Dropdown>\n    <t t-set-slot=\"toggler\">Save as...</t>\n  </Dropdown>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Odoo Computed Field Implementation (Python)\nDESCRIPTION: This Python code demonstrates how to implement a computed field in Odoo. The `_compute_description` method is decorated with `@api.depends` to specify the dependencies of the field. The method computes the value of the `description` field based on the `name` field of the related `partner_id`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n...\n\npartner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\ndescription = fields.Char(compute=\"_compute_description\")\n\n@api.depends(\"partner_id.name\")\ndef _compute_description(self):\n    for record in self:\n        record.description = record.partner_id.name\n```\n\n----------------------------------------\n\nTITLE: Creating Drag-and-Drop Areas in Odoo Websites\nDESCRIPTION: This XML snippet defines a drag-and-drop area on Odoo websites, allowing users to customize page layout by dropping predefined blocks or snippets. This utilizes Odoo structure classes to achieve modular design. There are no specific dependencies, but Odoo development knowledge is required.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n\n<div id=\"oe_structure_layout_01\" class=\"oe_structure\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Values in Translatable Strings\nDESCRIPTION: This example shows the recommended way to inject user-provided values into translatable strings using _.str.sprintf with named arguments after the translation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$el.text(_.str.sprintf(\n    _t(\"Hello, %(user)s!\"), {\n    user: \"Ed\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Logging in Odoo Server Actions\nDESCRIPTION: Demonstrates how to use the logging function available in the evaluation context of server actions. This function allows recording debug information in the ir.logging table.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlog(message, level='info')\n```\n\n----------------------------------------\n\nTITLE: Defining the 'create' attribute in Odoo XML views\nDESCRIPTION: The 'create' attribute controls whether users can create new records through a particular view. When set to False, it disables the creation functionality, preventing users from adding new records. By default, this attribute is set to True, allowing record creation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_create.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attribute:: create\n   :noindex:\n\n   Disable/enable record creation on the view.\n\n   :requirement: Optional\n   :type: bool\n   :default: `True`\n```\n\n----------------------------------------\n\nTITLE: Defining Owl Component with External Template in Javascript\nDESCRIPTION: This snippet illustrates how to define an Owl component using an external XML template file. It shows how to define the component class and assign a template name to the `template` property. This template name corresponds to the name defined in the XML file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useState } = owl.hooks;\n\n    class MyComponent extends Component {\n        ...\n    }\n    MyComponent.template = 'myaddon.MyComponent';\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Odoo model\nDESCRIPTION: This code snippet demonstrates the minimal definition of an Odoo model. It inherits from `models.Model` and defines the `_name` attribute, which is required to create a corresponding database table. This example creates a table named `test_model`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n```\n\n----------------------------------------\n\nTITLE: Registering an Owl Component in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create and register an Owl component in the public_components registry. Dependencies include the Odoo Owl framework and the components registration system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/frontend_owl_components.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\\nimport { Component } from \\\"@odoo/owl\\\";\\nimport { registry } from \\\"@web/core/registry\\\"\\n\\nexport class YourComponent extends Component {\\n    static template = \\\"your_module.YourComponent\\\";\\n    static props = {};\\n}\\n\\nregistry.category(\\\"public_components\\\").add(\\\"your_module.YourComponent\\\", YourComponent);\n```\n\n----------------------------------------\n\nTITLE: Adding a Main Component to the Registry in JavaScript\nDESCRIPTION: This example demonstrates how to add a component to the `main_components` registry.  It accesses the `main_components` category of the root registry and then adds a component named \"LoadingIndicator\" along with its component class. This allows the web client to render the component.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"main_components\").add(\"LoadingIndicator\", {\n  Component: LoadingIndicator,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Notification with the Notification Service in JavaScript\nDESCRIPTION: Basic example of displaying a notification using the notification service. It shows how to add a simple text notification to the user interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst notificationService = useService(\"notification\");\nnotificationService.add(\"I'm a very simple notification\");\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Visibility in Odoo Form View (XML)\nDESCRIPTION: This XML snippet demonstrates how to conditionally hide a field in an Odoo form view based on the value of another field. The `invisible` attribute is used with a Python expression to control the visibility of the `description` field based on the `is_partner` field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"description\" invisible=\"not is_partner\"/>\n    <field name=\"is_partner\" invisible=\"True\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Renderer in Odoo - JavaScript\nDESCRIPTION: This snippet implements a renderer in Odoo, which is responsible for generating a visual representation of the data within the view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"@odoo/owl\";\nexport class BeautifulRenderer extends Component {}\n\nBeautifulRenderer.template = \"my_module.Renderer\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Odoo Test Cases\nDESCRIPTION: Example of implementing test cases in Odoo using TransactionCase. Shows setup of test environment, test method structure, and assertion patterns including error handling. Uses post-install testing decorator.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/unit_tests.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import UserError\nfrom odoo.tests import tagged\n\n# The CI will run these tests after all the modules are installed,\n# not right after installing the one defining it.\n@tagged('post_install', '-at_install')\nclass EstateTestCase(TransactionCase):\n\n    @classmethod\n    def setUpClass(cls):\n        # add env on cls and many other things\n        super(EstateTestCase, cls).setUpClass()\n\n        # create the data for each tests. By doing it in the setUpClass instead\n        # of in a setUp or in each test case, we reduce the testing time and\n        # the duplication of code.\n        cls.properties = cls.env['estate.property'].create([...])\n\n    def test_creation_area(self):\n        \"\"\"Test that the total_area is computed like it should.\"\"\"\n        self.properties.living_area = 20\n        self.assertRecordValues(self.properties, [\n           {'name': ..., 'total_area': ...},\n           {'name': ..., 'total_area': ...},\n        ])\n\n\n    def test_action_sell(self):\n        \"\"\"Test that everything behaves like it should when selling a property.\"\"\"\n        self.properties.action_sold()\n        self.assertRecordValues(self.properties, [\n           {'name': ..., 'state': ...},\n           {'name': ..., 'state': ...},\n        ])\n\n        with self.assertRaises(UserError):\n            self.properties.forbidden_action_on_sold_property()\n```\n\n----------------------------------------\n\nTITLE: Adding a User Menu Item in JavaScript\nDESCRIPTION: This code demonstrates how to add a custom item to the user menu registry.  It adds an item that, when clicked, executes an action (in this case, opening action ID 3) using the `action_manager` service. The item's description, callback, and visibility (hide) are dynamically determined.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nregistry.category(\"user_menuitems\").add(\"my item\", (env) => {\n    return {\n        description: env._t(\"Technical Settings\"),\n        callback: () => { env.services.action_manager.doAction(3); },\n        hide: (Math.random() < 0.5),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Palettes in SCSS\nDESCRIPTION: This snippet defines custom color palettes in SCSS using the `$o-color-palettes` map. It merges the new palettes with the existing ones, allowing you to define custom color schemes for your website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n\"$o-color-palettes: map-merge($o-color-palettes,\\n   (\\n      'airproof': (\\n         'o-cc1-bg':                     'o-color-5',\\n         'o-cc5-bg':                     'o-color-1',\\n      ),\\n    )\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Templates for Homepage Components\nDESCRIPTION: XML templates defining the structure for the HomePage and MessageOfTheDay widgets with preserved spacing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePage\">\n        <div class=\"oe_petstore_homepage\">\n        </div>\n    </t>\n    <t t-name=\"MessageOfTheDay\">\n        <div class=\"oe_petstore_motd\">\n            <p class=\"oe_mywidget_message_of_the_day\"></p>\n        </div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Color Field Implementation\nDESCRIPTION: Complete implementation of a custom color field widget that displays and allows editing of color values, including read-only and read-write modes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.FieldColor = instance.web.form.AbstractField.extend({\n    events: {\n        'change input': function (e) {\n            if (!this.get('effective_readonly')) {\n                this.internal_set_value($(e.currentTarget).val());\n            }\n        }\n    },\n    init: function() {\n        this._super.apply(this, arguments);\n        this.set(\"value\", \"\");\n    },\n    start: function() {\n        this.on(\"change:effective_readonly\", this, function() {\n            this.display_field();\n            this.render_value();\n        });\n        this.display_field();\n        return this._super();\n    },\n    display_field: function() {\n        this.$el.html(QWeb.render(\"FieldColor\", {widget: this}));\n    },\n    render_value: function() {\n        if (this.get(\"effective_readonly\")) {\n            this.$(\".oe_field_color_content\").css(\"background-color\", this.get(\"value\") || \"#FFFFFF\");\n        } else {\n            this.$(\"input\").val(this.get(\"value\") || \"#FFFFFF\");\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: XML Data Declaration Example\nDESCRIPTION: This XML snippet shows the structure for creating records in Odoo using XML. It demonstrates how to define the fields and their respective values for a model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"field_a\">valueA1</field>\n    <field name=\"field_b\">valueB1</field>\n  </record>\n\n  <record id=\"id2\" model=\"tutorial.example\">\n    <field name=\"field_a\">valueA2</field>\n    <field name=\"field_b\">valueB2</field>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Filter Elements in Odoo Search Views\nDESCRIPTION: Example showing how to define various field elements in a search view. It demonstrates custom field names, invisible fields, and custom filter domains for search functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <field name=\"name\" string=\"My Custom Name\"/>\n    <field name=\"amount\"/>\n    <field name=\"company_id\" invisible=\"1\"/>\n    <field name=\"currency_id\"/>\n    <field name=\"ref\" filter_domain=\"[('name', 'like', self)]\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: QWeb Template Inheritance with t-inherit and XPath\nDESCRIPTION: Demonstrates primary and extension inheritance modes in QWeb templates. Primary inheritance creates a new child template while extension inheritance alters the parent template in-place.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"child.template\" t-inherit=\"base.template\" t-inherit-mode=\"primary\">\n    <xpath expr=\"//ul\" position=\"inside\">\n        <li>new element</li>\n    </xpath>\n</t>\n\n<t t-inherit=\"base.template\" t-inherit-mode=\"extension\">\n    <xpath expr=\"//tr[1]\" position=\"after\">\n        <tr><td>new cell</td></tr>\n    </xpath>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Adding a Sepia Effect with the Effect Service in JavaScript\nDESCRIPTION: Example of using the effect service to apply a sepia visual effect. The service must first be accessed with useService and then the add method is called with the effect type.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst effectService = useService(\"effect\");\neffectService.add({ type: \"sepia\" });\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Odoo Model in Controller\nDESCRIPTION: This Python code retrieves records from the 'academy.teachers' model using a search query and passes them to a QWeb template for rendering.  The `http.request.env` provides access to the Odoo environment, and the `search([])` method retrieves all records of the model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"class Academy(http.Controller):\n\n    @http.route('/academy/academy/', auth='public')\n    def index(self, **kw):\n        Teachers = http.request.env['academy.teachers']\n        return http.request.render('academy.index', {\n            'teachers': Teachers.search([])\n        })\"\n```\n\n----------------------------------------\n\nTITLE: Creating Form View with Groups and Notebooks in Odoo XML\nDESCRIPTION: Complex form view structure using groups, separators, notebooks and fields with various attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<form string=\"Idea form\">\n    <group colspan=\"4\">\n        <group colspan=\"2\" col=\"2\">\n            <separator string=\"General stuff\" colspan=\"2\"/>\n            <field name=\"name\"/>\n            <field name=\"inventor_id\"/>\n        </group>\n\n        <group colspan=\"2\" col=\"2\">\n            <separator string=\"Dates\" colspan=\"2\"/>\n            <field name=\"active\"/>\n            <field name=\"invent_date\" readonly=\"1\"/>\n        </group>\n\n        <notebook colspan=\"4\">\n            <page string=\"Description\">\n                <field name=\"description\" nolabel=\"1\"/>\n            </page>\n        </notebook>\n\n        <field name=\"state\"/>\n    </group>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing IoT Interface Class\nDESCRIPTION: Example of implementing an Interface class to detect and manage connected devices of a specific type. The get_devices method returns information about detected devices.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.interface import Interface\n\nclass InterfaceName(Interface):\n    connection_type = 'ConnectionType'\n\n    def get_devices(self):\n        return {\n            'device_identifier_1': {...},\n            ...\n        }\n```\n\n----------------------------------------\n\nTITLE: Generating TSConfig File for Odoo JavaScript Development\nDESCRIPTION: Command to generate a tsconfig.json file for enhanced JavaScript/TypeScript development in Odoo. The command takes relative paths to addon directories as arguments and outputs the configuration to a tsconfig.json file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ community/odoo-bin tsconfig --addons-path community/addons,community/odoo/addons,enterprise > tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Declaring fields in an Odoo model\nDESCRIPTION: Example of declaring fields within an Odoo model using the 'fields' module. Requires 'odoo' Python module. Fields specify data attributes that the model will store, each with potential UI elements.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields\n\nclass LessMinimalModel(models.Model):\n    _name = 'test.model2'\n\n    name = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Using the Browser Object in JavaScript\nDESCRIPTION: Shows how to use the browser object to access browser APIs like setTimeout in a way that can be easily mocked for testing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { browser } from \"@web/core/browser/browser\";\n\n// somewhere in code\nbrowser.setTimeout(someFunction, 1000);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Odoo - PHP\nDESCRIPTION: This PHP snippet authenticates with an Odoo instance using the provided database name, username, and password. It uses the Ripcord library to call the 'authenticate' method and returns the user ID (uid).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$uid = $common->authenticate($db, $username, $password, array());\n```\n\n----------------------------------------\n\nTITLE: Dynamic Background Color in Products Widget Template - XML\nDESCRIPTION: This XML snippet defines a QWeb template for a ProductsWidget, which iterates over a list of products and applies a dynamic background color to each product's display box based on the widget context.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"ProductsWidget\">\n        <div>\n            <t t-foreach=\"widget.products\" t-as=\"product\">\n                <span class=\"oe_products_item\"\n                      t-attf-style=\"background-color: {{ widget.color }};\">\n                    <t t-esc=\"product\"/>\n                </span>\n                <br/>\n            </t>\n        </div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Visibility in Debug Mode - XML\nDESCRIPTION: This XML snippet demonstrates how to target a specific user group to show a field only in debug mode, using the 'base.group_no_one' group. This is useful for displaying elements conditionally based on the debug status.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" groups=\"base.group_no_one\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Courses Odoo Model\nDESCRIPTION: Defines a new model 'academy.courses' in Odoo, inheriting from 'product.template' and 'mail.thread'. This model represents courses with basic attributes like 'name' and 'teacher_id'. Odoo's framework automatically handles dependencies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass Courses(models.Model):\n    _name = 'academy.courses'\n    _inherit = ['mail.thread', 'product.template']\n\n    name = fields.Char()\n    teacher_id = fields.Many2one('academy.teachers', string=\"Teacher\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications Using Notification Service - JavaScript\nDESCRIPTION: This snippet details how to display notifications using the notification service in JavaScript. It shows how to add notifications with different options like title and message, using the translation function `_t` for localization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// note that we call _t on the text to make sure it is properly translated.\nthis.notification.add({\n    title: _t(\"Success\"),\n    message: _t(\"Your signature request has been sent.\")\n});\nthis.notification.add({\n    title: _t(\"Error\"),\n    message: _t(\"Filter name is required.\"),\n    type: \"danger\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to access session data that was serialized on the page load. By importing the session from '@web/session', developers can read server-injected values without additional network requests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { session } from \"@web/session\"\nconst myValue = session.some_key;\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Constraint in Odoo\nDESCRIPTION: This snippet demonstrates how to implement a Python constraint using a decorator in Odoo. The method checks a condition (end date not being in the past) and raises a validation error if the condition is violated. This allows for complex business logic that cannot be easily enforced with SQL constraints alone.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/10_constraints.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom odoo.exceptions import ValidationError\n\n    @api.constrains('date_end')\n    def _check_date_end(self):\n        for record in self:\n            if record.date_end < fields.Date.today():\n                raise ValidationError(\"The end date cannot be set in the past\")\n        # all records passed the test, don't return anything\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript and CSS Assets in Odoo 17\nDESCRIPTION: Example of using the loadAssets function to load JavaScript libraries. This code demonstrates the format for specifying assets to be loaded.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\njsLibs: [\"/web/static/lib/stacktracejs/stacktrace.js\"]\n```\n\n----------------------------------------\n\nTITLE: QUnit JavaScript Test Example\nDESCRIPTION: Illustrates a basic QUnit test for JavaScript utility functions in Odoo, demonstrating how to define a test module and write test cases with assertions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('py_utils');\n\nQUnit.test('simple arithmetic', function (assert) {\n    assert.expect(2);\n\n    var result = pyUtils.py_eval(\"1 + 2\");\n    assert.strictEqual(result, 3, \"should properly evaluate sum\");\n    result = pyUtils.py_eval(\"42 % 5\");\n    assert.strictEqual(result, 2, \"should properly evaluate modulo operator\");\n});\n```\n\n----------------------------------------\n\nTITLE: Relational Field with Subviews Example\nDESCRIPTION: Shows how to define specific subviews (tree and form) for a relational field to control how related records are displayed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"children_ids\">\n   <tree>\n      <field name=\"name\"/>\n   </tree>\n   <form>\n      <field name=\"id\"/>\n      <field name=\"name\"/>\n   </form>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Displaying Graphical Effects with Effect Service\nDESCRIPTION: Illustrates how to use the 'effect' service to display a rainbow man graphical effect with a customizable message to inform the user of notable events.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst effectService = useService(\"effect\");\neffectService.add({\n  type: \"rainbow_man\", // can be omitted, default type is already \"rainbow_man\"\n  message: \"Boom! Team record for the past 30 days.\"\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-company Form View Definition\nDESCRIPTION: XML view definition showing how to properly display company field based on user access rights.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/company.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.ui.view\" id=\"record_form_view\">\n    <field name=\"name\">record.restricted.form</field>\n    <field name=\"model\">record.restricted</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <group>\n                    <group>\n                        <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n                        <field name=\"other_record_id\"/>\n                    </group>\n                </group>\n            </sheet>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Cohort View in Odoo XML\nDESCRIPTION: A basic example of a cohort view implementation in Odoo, showing the minimal required attributes: string (title), date_start (beginning date field), and date_stop (end date field). The interval is set to \"month\".\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<cohort string=\"Subscription\" date_start=\"date_start\" date_stop=\"date\" interval=\"month\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timesheet Pivot View\nDESCRIPTION: Example of defining a timesheet pivot view with employee grouping, monthly date intervals, and float time widget for unit amounts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_52\n\nLANGUAGE: xml\nCODE:\n```\n<pivot string=\"Timesheet\">\n    <field name=\"employee_id\" type=\"row\"/>\n    <field name=\"date\" interval=\"month\" type=\"col\"/>\n    <field name=\"unit_amount\" type=\"measure\" widget=\"float_time\"/>\n</pivot>\n```\n\n----------------------------------------\n\nTITLE: Using webSearchRead to Load Data in Gallery View\nDESCRIPTION: This JavaScript snippet uses the webSearchRead function from the ORM service to fetch records corresponding to a specified domain in the gallery view, ensuring that the image field is correctly loaded with the necessary context.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { length, records } = this.orm.webSearchRead(this.resModel, domain, {\n   specification: {\n        [this.fieldToFetch]: {},\n        [this.secondFieldToFetch]: {},\n    },\n    context: {\n        bin_size: true,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Super Method Calls in JavaScript\nDESCRIPTION: This snippet explains how to handle asynchronous super method calls in JavaScript using Odoo. It distinguishes between broken and correct implementations of '_super' in asynchronous handlers, ensuring proper method chaining.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// broken, will generate an error\nsay_hello: function () {\n    setTimeout(function () {\n        this._super();\n    }.bind(this), 0);\n}\n\n// correct\nsay_hello: function () {\n    // don't forget .bind()\n    var _super = this._super.bind(this);\n    setTimeout(function () {\n        _super();\n    }.bind(this), 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Event Bus in JavaScript\nDESCRIPTION: Demonstrates how to use the event bus (env.bus) to coordinate different parts of the system without tight coupling. Shows subscribing to a global event.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// for example, in some service code:\nenv.bus.on(\"WEB_CLIENT_READY\", null, doSomething);\n```\n\n----------------------------------------\n\nTITLE: Adding Related Field to Property Offer Model\nDESCRIPTION: Defines a property_type_id field in estate.property.offer as a related stored field linked to property_id.property_type_id.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nproperty_type_id = fields.Many2one('estate.property.type', related='property_id.property_type_id', store=True)\n```\n\n----------------------------------------\n\nTITLE: Improved Utility Class Organization\nDESCRIPTION: Shows better organization of utility classes with proper formatting and conditional class application.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<myComponent\n   t-att-class=\"{\n      o_myComponent_disabled: props.readonly,\n      o_myComponent_active: props.active\n   }\"\n   class=\"myComponent card position-absolute d-flex d-lg-block border px-3 px-lg-2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-closing Notification in JavaScript\nDESCRIPTION: Example showing how to create a notification that automatically closes after a specified time. It returns a close function that can be called to dismiss the notification.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst notificationService = useService(\"notification\");\nconst close = notificationService.add(\"I will be quickly closed\");\nsetTimeout(close, 1000);\n```\n\n----------------------------------------\n\nTITLE: Integrating Messaging in Odoo Models with Python\nDESCRIPTION: This snippet shows how to enhance an Odoo model with messaging capabilities by inheriting the 'mail.thread' model in Python. It aims to facilitate message exchange in models such as 'BusinessTrip' by introducing fields that handle messaging-related information. No additional dependencies are noted, and the expected outcome is a model prepared for messaging interactions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread']\n    _description = 'Business Trip'\n\n    name = fields.Char()\n    partner_id = fields.Many2one('res.partner', 'Responsible')\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n```\n\n----------------------------------------\n\nTITLE: Hook for Current Time State Management\nDESCRIPTION: This snippet provides an example of a reusable hook in Odoo that manages the current time state, updating every second. It demonstrates integration with the component lifecycle using Owl.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useCurrentTime() {\n    const state = useState({ now: new Date() });\n    const update = () => state.now = new Date();\n    let timer;\n    onWillStart(() => timer = setInterval(update, 1000));\n    onWillUnmount(() => clearInterval(timer));\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Search Expression in XML Record\nDESCRIPTION: This XML snippet illustrates how to use a search expression in an Odoo record, allowing for dynamic queries on related records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"account.move.line\">\n    <field name=\"account_id\" search=\"[\n      ('user_type_id', '=', ref('account.data_account_type_direct_costs')),\n      ('company_id', '=', obj().env.company.id)]\n    \"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Initializing Owl Counter Component in JavaScript\nDESCRIPTION: A simple Owl component demonstrating state management and event handling with a counter that can be incremented\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\n\nimport { Component, useState } from \"@odoo/owl\";\n\nexport class Counter extends Component {\n    static template = \"my_module.Counter\";\n\n    setup() {\n        this.state = useState({ value: 0 });\n    }\n\n    increment() {\n        this.state.value++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Action Component in JavaScript\nDESCRIPTION: This JavaScript snippet defines a component for the client action using the OWL framework in Odoo. It imports necessary modules, registers the component under the defined tag, and sets its template. The class structure allows for easy customization of the client action's behavior.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_client_action.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\n\nimport { Component } from  \"@odoo/owl\";\n\nclass MyClientAction extends Component {}\nMyClientAction.template = \"my_module.clientaction\";\n\n// remember the tag name we put in the first step\nregistry.category(\"actions\").add(\"my_module.MyClientAction\", MyClientAction);\n```\n\n----------------------------------------\n\nTITLE: Accounting Reports Module Manifest File\nDESCRIPTION: This is a basic __manifest__.py file for an accounting reports module in Odoo. It defines the module's name, category, version, license, dependencies, data files, and auto-install setting. The module depends on the l10n_XX module (localization) and the account_reports module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/accounting_localization.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"COUNTRY - Accounting Reports\",\n    \"category\": \"Accounting/Localizations/Reporting\",\n    \"version\": \"1.0.0\",\n    \"license\": \"OEEL-1\",\n    \"depends\": [\n        \"l10n_XX\", \"account_reports\"\n    ],\n    \"data\": [\n        \"data/balance_sheet.xml\",\n        \"data/profit_and_loss.xml\",\n    ],\n    \"auto_install\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Odoo Related Field Definition (Python)\nDESCRIPTION: This Python code demonstrates the definition of a related field in an Odoo model. The `related` attribute of the `fields.Char` field is used to automatically populate the `description` field with the value of the `name` field from the related `res.partner` record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n...\n\npartner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\ndescription = fields.Char(related=\"partner_id.name\")\n```\n\n----------------------------------------\n\nTITLE: Adding Field Filters to Odoo Search View\nDESCRIPTION: Shows how to add field-based filters to a search view. Fields generate domains that are combined with AND operators when searching.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <field name=\"FIELD_NAME\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Odoo JavaScript Module\nDESCRIPTION: Example of an asynchronous Odoo module implementation that returns a Promise. The module system waits for the promise to resolve before registering the module, making it useful for modules that need to fetch data before initialization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define('module.Something', function (require) {\n    \"use strict\";\n\n    var ajax = require('web.ajax');\n\n    return ajax.rpc(...).then(function (result) {\n        // some code here\n        return something;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Asset Bundles in Odoo Manifest\nDESCRIPTION: This snippet demonstrates how to declare asset bundles within an Odoo module's manifest file. It provides the structure for including different asset types such as 'xml', 'js', 'css', and 'scss' files into named bundles. The key functionality here includes listing file paths for various asset types within the 'assets' key of a module's '__manifest__.py'.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n    'web.assets_backend': [\n        'web/static/src/xml/**/*',\n    ],\n    'web.assets_common': [\n        'web/static/lib/bootstrap/**/*',\n        'web/static/src/js/boot.js',\n        'web/static/src/js/webclient.js',\n        'web/static/src/xml/webclient.xml',\n    ],\n    'web.qunit_suite_tests': [\n        'web/static/src/js/webclient_tests.js',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: HomePageTemplate QWeb Template - XML\nDESCRIPTION: This XML snippet defines a QWeb template named 'HomePageTemplate'. It utilizes the t-esc directive to safely escape the 'name' variable that is passed as context, allowing for dynamic content to be rendered securely.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"HomePageTemplate\">\n    <div>Hello <t t-esc=\"name\"/></div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Description in Odoo XML Template\nDESCRIPTION: This XML snippet shows how to define the meta description for a page in an Odoo website.  It utilizes the `t-set` directive to set the `meta_description` variable, influencing how the page is summarized in search engine results.  Accurate meta descriptions are vital for SEO.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"meta_description\">This is the description of the page that will appear on Search\nEngines.</t>\n```\n\n----------------------------------------\n\nTITLE: Appending Files to Asset Bundles\nDESCRIPTION: Illustrates the 'append' operation which is the default action when adding files to an asset bundle. This snippet appends JavaScript files that match the given glob pattern to the 'web.assets_common' bundle.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    'my_addon/static/src/js/**/*',\n]\n```\n\n----------------------------------------\n\nTITLE: Direct Siblings Dropdown Implementation in Owl XML\nDESCRIPTION: Example of multiple sibling dropdowns (File, Edit, About) that interact with each other. When one dropdown is opened with a click, others will open on hover.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n  <Dropdown>\n    <t t-set-slot=\"toggler\">File</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-open')\">Open</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-document')\">New Document</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-spreadsheet')\">New Spreadsheet</DropdownItem>\n  </Dropdown>\n  <Dropdown>\n    <t t-set-slot=\"toggler\">Edit</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('edit-undo')\">Undo</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('edit-redo')\">Redo</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('edit-find')\">Search</DropdownItem>\n  </Dropdown>\n  <Dropdown>\n    <t t-set-slot=\"toggler\">About</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('about-help')\">Help</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('about-update')\">Check update</DropdownItem>\n  </Dropdown>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form View Test with Odoo Test Utils\nDESCRIPTION: Shows how to use Odoo's test utilities to create and test a form view. This example checks for the presence of a specific element in the rendered form.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('simple group rendering', function (assert) {\n    assert.expect(1);\n\n    var form = testUtils.createView({\n        View: FormView,\n        model: 'partner',\n        data: this.data,\n        arch: '<form string=\"Partners\">' +\n                '<group>' +\n                    '<field name=\"foo\"/>' +\n                '</group>' +\n            '</form>',\n        res_id: 1,\n    });\n\n    assert.containsOnce(form, 'table.o_inner_group');\n\n    form.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Naive Bayes Probability Model for Predictive Lead Scoring\nDESCRIPTION: This snippet shows the mathematical formula for the naive Bayes probability model used by Odoo's predictive lead scoring. It breaks down the equation and explains the meaning of each term in the context of lead scoring. The model calculates the probability of a successful lead based on various factors and historical data.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/sales/crm/track_leads/lead_scoring.rst#2025-04-18_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\".. math::\n   \\begin{equation}\n   P(A | B) = \\frac{P(A) \\times P(B | A)}{P(B)}\n   \\end{equation}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo Web Controller\nDESCRIPTION: Demonstrates how to create a simple web controller using the Odoo HTTP framework with a route decorator. Shows basic controller creation with public authentication.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/http.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyController(odoo.http.Controller):\n    @route('/some_url', auth='public')\n    def handler(self):\n        return stuff()\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Action in Odoo\nDESCRIPTION: Demonstrates how to define a client action in Odoo using JSON configuration. This example shows setting up the Point of Sale interface as a client action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"type\": \"ir.actions.client\",\n    \"tag\": \"pos.ui\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Image URLs for Gallery View\nDESCRIPTION: This JavaScript snippet demonstrates how to create a URL for retrieving images from a record in Odoo by using the URL helper function, ensuring proper linking to images stored in the database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { url } from \"@web/core/utils/urls\";\nconst url = url(\"/web/image\", {\n    model: resModel,\n    id: image_id,\n    field: imageField,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Owl Component Template in XML\nDESCRIPTION: This snippet demonstrates how to define the template for an Owl component in an XML file. It shows the basic structure of an Odoo XML template file, including the root `<templates>` element and the `<t t-name>` directive to define the template name. The template uses Odoo's QWeb syntax to define the component's structure and behavior.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <templates xml:space=\"preserve\">\n\n    <t t-name=\"myaddon.MyComponent\">\n      <div t-on-click=\"increment\">\n        <t t-esc=\"state.value\"/>\n      </div>\n    </t>\n\n    </templates>\n```\n\n----------------------------------------\n\nTITLE: Inserting Files Before Specific Assets\nDESCRIPTION: Shows how to use the 'before' directive to insert a file immediately before a specified target file in an asset bundle. This precise control allows developers to manage dependencies between assets effectively.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('before', 'web/static/src/css/bootstrap_overridden.scss', 'my_addon/static/src/css/bootstrap_overridden.scss'),\n]\n```\n\n----------------------------------------\n\nTITLE: Focusing Element with Owl Hook in JavaScript\nDESCRIPTION: The useAutofocus hook is used to automatically focus an element in a component as soon as it appears in the DOM, given it has not been displayed before. Dependencies include the Owl framework and the component's template must reference the element by a t-ref attribute.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/hooks.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAutofocus } from \"@web/core/utils/hooks\";\n\nclass Comp {\n  setup() {\n    this.inputRef = useAutofocus();\n  }\n  static template = \"Comp\";\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"Comp\">\n  <input t-ref=\"autofocus\" type=\"text\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Translatable String with t-attf- in XML\nDESCRIPTION: This code snippet demonstrates how to create a translatable string using `t-attf-` in an XML context. The `t-attf-` directive allows embedding expressions within the attribute value, making it translatable by Odoo's translation system.  It is more recommended than `t-att-` when possible.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<div t-attf-title=\\\"Hello #{user.name}\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Styling We-Button with Icon and Title in XML for Odoo Website Theme\nDESCRIPTION: Shows how to style a we-button with an icon, title, and custom data attribute for positioning.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<we-button\n   class=\"fa fa-fw fa-angle-double-right\"\n   title=\"Move to last\"\n   data-position=\"last\" />\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with SCSS Fallbacks\nDESCRIPTION: Demonstrates proper implementation of CSS variables with SCSS fallbacks for component styling and contextual adaptations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_33\n\nLANGUAGE: scss\nCODE:\n```\n.o_MyComponent {\n   color: var(--MyComponent-color, #313131);\n}\n\n.o_MyDashboard {\n   --MyComponent-color: #017e84;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Client Action in XML\nDESCRIPTION: This XML snippet defines a client action within the Odoo framework. It sets the action's ID, name, and the associated tag for the JavaScript component. The 'ir.actions.client' model is used to store the client action metadata.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_client_action.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.actions.client\" id=\"my_client_action\">\n          <field name=\"name\">My Client Action</field>\n          <field name=\"tag\">my_module.MyClientAction</field>\n      </record>\n```\n\n----------------------------------------\n\nTITLE: Clicker Model Reactive Extension - JavaScript\nDESCRIPTION: Illustrates extending a `ClickerModel` with the `Reactive` class for creating reactive data models. The `Reactive` class wraps the model into a reactive proxy allowing updates to propagate and trigger UI re-renders automatically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nYou can extends the ClickerModel with the `Reactive` class from\n:file:`@web/core/utils/reactive`. The `Reactive` class wrap the model into a reactive proxy.\n```\n\n----------------------------------------\n\nTITLE: Accessing Odoo Environment Properties\nDESCRIPTION: Demonstrates accessing various properties and methods of the Odoo environment object including user ID, user record, and cursor\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n>>> records.env\n<Environment object ...>\n>>> records.env.uid\n3\n>>> records.env.user\nres.user(3)\n>>> records.env.cr\n<Cursor object ...>\n```\n\n----------------------------------------\n\nTITLE: Creating a Model in Odoo - JavaScript\nDESCRIPTION: This snippet establishes a model in Odoo that retrieves and manages data necessary for the view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { KeepLast } from \"@web/core/utils/concurrency\";\n\nexport class BeautifulModel {\n    constructor(orm, resModel, fields, archInfo, domain) {\n        this.orm = orm;\n        this.resModel = resModel;\n        // We can access arch information parsed by the beautiful arch parser\n        const { fieldFromTheArch } = archInfo;\n        this.fieldFromTheArch = fieldFromTheArch;\n        this.fields = fields;\n        this.domain = domain;\n        this.keepLast = new KeepLast();\n    }\n\n    async load() {\n        // The keeplast protect against concurrency call\n        const { length, records } = await this.keepLast.add(\n            this.orm.webSearchRead(this.resModel, this.domain, [this.fieldsFromTheArch], {})\n        );\n        this.records = records;\n        this.recordsLength = length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Odoo-dev Console\nDESCRIPTION: Adds a Git remote configuration for pushing changes to the shared odoo-dev fork, ensuring contributions aren't pushed on the main repository. Requires internal access if pushing to odoo-dev.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd /tutorials\n$ git remote add dev git@github.com:odoo-dev/tutorials.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic QWeb Template in Odoo\nDESCRIPTION: This XML code defines a QWeb template named 'index' within the 'academy' module.  It iterates through a list of 'teachers' passed in the template context and displays each teacher's name in a paragraph. It assumes that the template file is properly registered in the `__manifest__.py` file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<odoo>\n\n    <template id=\\\"index\\\">\n        <title>Academy</title>\n        <t t-foreach=\\\"teachers\\\" t-as=\\\"teacher\\\">\n            <p><t t-esc=\\\"teacher\\\"/></p>\n        </t>\n    </template>\n\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Using RPC Service to Call Server Routes\nDESCRIPTION: A component method demonstrating how to use the RPC service to call a server route in the onWillStart hook\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetup() {\n    this.rpc = useService(\"rpc\");\n    onWillStart(async () => {\n        const result = await this.rpc(\"/my/controller\", {a: 1, b: 2});\n        // ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group By Filters in Odoo Search View\nDESCRIPTION: Examples showing how to add grouping options to a search view. The first filter groups by category_id, while the second groups by create_date with a week interval.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Category\" name=\"groupby_category\" context=\"{'group_by': 'category_id'}\"/>\n<filter string=\"Creation Date\" name=\"groupby_create_date\" context=\"{'group_by': 'create_date:week'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Title Service Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the title service Parts object that defines the structure of title components.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Parts {\n    [key: string]: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data via CSV File in Odoo\nDESCRIPTION: This code snippet demonstrates how to load data into Odoo using a CSV file.  It shows the structure of the CSV file, including the use of external identifiers to reference records.  The example is a list of country states, demonstrating the use of `id`, `country_id:id`, `name`, and `code` fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"id\",\"country_id:id\",\"name\",\"code\"\nstate_au_1,au,\"Australian Capital Territory\",\"ACT\"\nstate_au_2,au,\"New South Wales\",\"NSW\"\nstate_au_3,au,\"Northern Territory\",\"NT\"\nstate_au_4,au,\"Queensland\",\"QLD\"\n...\n```\n\n----------------------------------------\n\nTITLE: Supported and Unsupported Related Field Relationships in Python\nDESCRIPTION: Illustrates which types of related field relationships are supported in Odoo. Shows that One2many and Many2many fields can be related through a Many2one but cannot be chained directly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nm2o_id = fields.Many2one()\nm2m_ids = fields.Many2many()\no2m_ids = fields.One2many()\n\n# Supported\nd_ids = fields.Many2many(related=\"m2o_id.m2m_ids\")\ne_ids = fields.One2many(related=\"m2o_id.o2m_ids\")\n\n# Won't work: use a custom Many2many computed field instead\nf_ids = fields.Many2many(related=\"m2m_ids.m2m_ids\")\ng_ids = fields.One2many(related=\"o2m_ids.o2m_ids\")\n```\n\n----------------------------------------\n\nTITLE: Calling Server Model Methods from JavaScript\nDESCRIPTION: This widget demonstrates how to call a method on an Odoo model from JavaScript using the Model class and its call() method. It creates a model instance and calls a specific method with context.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        var self = this;\n        var model = new instance.web.Model(\"oepetstore.message_of_the_day\");\n        model.call(\"my_method\", {context: new instance.web.CompoundContext()}).then(function(result) {\n            self.$el.append(\"<div>Hello \" + result[\"hello\"] + \"</div>\");\n            // will show \"Hello world\" to the user\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Deleting Cookies in Odoo\nDESCRIPTION: Demonstrates the usage of the 'cookie' service to manipulate browser cookies, including setting and deleting cookies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncookieService.setCookie(\"hello\", \"odoo\");\n```\n\n----------------------------------------\n\nTITLE: Adding External Links to Odoo Menu\nDESCRIPTION: This XML snippet demonstrates how to add a link to an external website in an Odoo menu. The `url` field is set to the external website's URL. When a user clicks this menu item, they will be redirected to the specified external website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\".\" model=\"website.menu\">\n    <field name=\"url\">https://www.odoo.com</field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Form: Displaying Dialog Buttons in Footer\nDESCRIPTION: This XML snippet illustrates the usage of the `<footer>` element in an Odoo form to display buttons at the end of dialogs. The footer is typically placed after the `<sheet>` element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        ...\n    </sheet>\n    <footer>\n        <BUTTONS/>\n    </footer>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Fetching Parsing Result of Documents using JSON-RPC2 in JavaScript\nDESCRIPTION: This example demonstrates fetching the parsing results for documents processed by Odoo's Extract API through JSON-RPC2. Essential parameters include version, document_token, and account_token. Returned response provides status and results indicating parsing outcomes including full text annotation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"version\": int,\n        \"document_token\": int,\n        \"account_token\": string,\n    },\n    \"id\": string,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Courses Model with a Many2one Relation in Odoo\nDESCRIPTION: This Python snippet defines the 'academy.courses' model in Odoo, including a Many2one field ('teacher_id') that establishes a relationship with the 'academy.teachers' model. This allows each course to be linked to a single teacher.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"class Courses(models.Model):\\n    _name = 'academy.courses'\\n\\n    name = fields.Char()\\n    teacher_id = fields.Many2one('academy.teachers', string=\\\"Teacher\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining Generic View Structure in XML\nDESCRIPTION: This snippet demonstrates the basic structure for defining a view record in Odoo. It includes placeholders for the view ID, name, model, and type-specific content.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"ADDON.MODEL_view_TYPE\" model=\"ir.ui.view\">\n  <field name=\"name\">NAME</field>\n  <field name=\"model\">MODEL</field>\n  <field name=\"arch\" type=\"xml\">\n    <VIEW_TYPE>\n      <views/>\n    </VIEW_TYPE>\n  </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Vulnerability Example in Odoo\nDESCRIPTION: This snippet demonstrates a SQL injection vulnerability in Odoo when constructing SQL queries by concatenating strings. It shows an unsafe way of building a query by joining a list of IDs directly into the SQL string, which can allow an attacker to inject malicious SQL code. The corrected version uses parameterized queries to avoid this.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# the following is very bad:\n#   - it's a SQL injection vulnerability\n#   - it's unreadable\n#   - it's not your job to format the list of ids\nself.env.cr.execute('SELECT distinct child_id FROM account_account_consol_rel ' +\n           'WHERE parent_id IN ('+','.join(map(str, ids))+')')\n\n# better\nself.env.cr.execute('SELECT DISTINCT child_id '\\\\\n           'FROM account_account_consol_rel '\\\\\n           'WHERE parent_id IN %s',\n           (tuple(ids),))\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Fonts in Odoo Theme\nDESCRIPTION: This snippet showcases how to integrate Google Fonts into an Odoo theme. It defines the font family, specifies the URL for the desired Google Font, and sets the base font size.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n   $o-theme-font-configs: (\n      'Poppins': (\n         'family':                         ('Poppins', sans-serif),\n         'url':                            'Poppins:400,500',\n         'properties' : (\n            'base': (\n               'font-size-base':           1rem,\n            ),\n         ),\n      ),\n   );\n```\n\n----------------------------------------\n\nTITLE: Handling Translations in JavaScript\nDESCRIPTION: This code snippet explains the process of marking strings for translation in Odoo's front-end using the special function `_t`. It supports static strings necessary for generating PO files, with placeholders for dynamic parts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _t } from \"@web/core/l10n/translation\";\n\nclass SomeComponent extends Component {\n    static exampleString = _t(\"this should be translated\");\n    ...\n    someMethod() {\n        const str = _t(\"some text\");\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _t } from \"@web/core/l10n/translation\";\nconst str = _t(\"Hello %s, you have %s unread messages.\", user.name, unreadCount);\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Rights for Models in Odoo\nDESCRIPTION: This CSV snippet defines access rights for the 'academy.teachers' and 'academy.courses' models in Odoo. It grants read access to all users but restricts write, create, and unlink operations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_24\n\nLANGUAGE: csv\nCODE:\n```\n\"id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\\naccess_academy_teachers,access_academy_teachers,model_academy_teachers,,1,0,0,0\\naccess_academy_courses,access_academy_courses,model_academy_courses,,1,0,0,0\"\n```\n\n----------------------------------------\n\nTITLE: Declaring JavaScript Assets in Odoo Manifest\nDESCRIPTION: Python code for declaring JavaScript assets in the module's manifest file. This adds a custom JS file to the web.assets_frontend bundle for website interactivity.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web.assets_frontend': [\n      'website_airproof/static/src/js/theme.js',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Including Logo Component in Custom Header XML\nDESCRIPTION: Adds the website logo component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_brand\">\n   <t t-set=\"_link_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Python Multiple Return Points Example\nDESCRIPTION: This Python snippet shows that multiple return points in a function are okay, when they simplify the code.  This often makes the code more readable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# a bit complex and with a redundant temp variable\ndef axes(self, axis):\n    axes = []\n    if type(axis) == type([]):\n        axes.extend(axis)\n    else:\n        axes.append(axis)\n    return axes\n\n # clearer\ndef axes(self, axis):\n    if type(axis) == type([]):\n        return list(axis) # clone the axis\n    else:\n        return [axis] # single-element list\n```\n\n----------------------------------------\n\nTITLE: Handling `error` events on elements in JavaScript\nDESCRIPTION: This snippet shows how to handle `error` events on elements like `<script>` in JavaScript. It adds event listeners for both `error` and `load` events on the script element and uses a Promise to handle asynchronous loading, resolving on load and rejecting on error. This ensures errors during script loading are caught and handled appropriately.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scriptEl = document.createElement(\"script\");\nscriptEl.src = \"https://example.com/third_party_script.js\";\nreturn new Promise((resolve, reject) => {\n  scriptEl.addEventListener(\"error\", reject);\n  scriptEl.addEventListener(\"load\", resolve);\n  document.head.append(scriptEl);\n});\n```\n\n----------------------------------------\n\nTITLE: Odoo Tour Step - Triggering a Menu Item\nDESCRIPTION: This JavaScript code represents a step within an Odoo tour, designed to trigger a specific menu item. The `trigger` property specifies the CSS selector for the menu item, and the optional `edition` property can differentiate steps for community or enterprise editions.  When the defined menu item is found, it will be triggered (clicked) to navigate to the next view defined by the menu action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    trigger: '.o_app[data-menu-xmlid=\"your_module.maybe_your_module_menu_root\"]',\n    edition: 'community'  // Optional\n}, {\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Rating Mixin in Odoo Python\nDESCRIPTION: Example of implementing the rating.mixin in a custom model to enable customer rating functionality. The mixin provides rating support with automatic partner linking and chatter history integration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Models):\n    _name = 'my_module.my_model'\n    _inherit = ['rating.mixin', 'mail.thread']\n\n    user_id = fields.Many2one('res.users', 'Responsible')\n    partner_id = fields.Many2one('res.partner', 'Customer')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Kanban View in Odoo - XML\nDESCRIPTION: This snippet shows how to use the custom kanban view by specifying the js_class attribute in the kanban definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<kanban js_class=\"custom_kanban\">\n    <templates>\n        <t t-name=\"kanban-box\">\n            <!--Your comment-->\n        </t>\n    </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Configuring Thumbnails in Gantt View with XML\nDESCRIPTION: This code snippet demonstrates how to configure the thumbnails attribute in a Gantt view to display user avatars. The example shows how to display thumbnails for user_id field by referencing the image_128 field from the related model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_54\n\nLANGUAGE: xml\nCODE:\n```\n<gantt\n   date_start=\"date_start\"\n   date_stop=\"date_stop\"\n   thumbnails=\"{'user_id': 'image_128'}\"\n >\n </gantt>\n```\n\n----------------------------------------\n\nTITLE: Direct Controller Call Using Rpc Service - JavaScript\nDESCRIPTION: This snippet shows how to make a direct call to a server controller using the rpc service in Odoo. It involves sending parameters to a specified route using a network request, referred to as RPC in the context of Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn this.rpc(\"/some/route/\", {\n    some: param,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Website Support in Odoo Controller\nDESCRIPTION: This Python code modifies the controller's route to include the `website=True` flag. This flag enables website-related features for the controller, such as default styling and theming. It requires the 'website' module to be installed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"class Academy(http.Controller):\n\n     @http.route('/academy/academy/', auth='public', website=True)\n     def index(self, **kw):\n         Teachers = http.request.env['academy.teachers']\n         return http.request.render('academy.index', {\n             'teachers': Teachers.search([])\n         })\"\n```\n\n----------------------------------------\n\nTITLE: Registering a New Graphical Effect in Odoo\nDESCRIPTION: Demonstrates how to add a new graphical effect 'sepia' to the Odoo effects registry, which modulates the page's appearance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\nconst { Component, tags } = owl;\n\nclass SepiaEffect extends Component {}\nSepiaEffect.template = tags.xml`\n    <div style=\"\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        background: rgba(124,87,0, 0.4);\n    \"></div>\n`;\n\nexport function sepiaEffectProvider(env, params = {}) {\n    return {\n        Component: SepiaEffect,\n    };\n}\n\nconst effectRegistry = registry.category(\"effects\");\n```\n\n----------------------------------------\n\nTITLE: Using ir.qweb's _render and render Methods for View-based Template Rendering\nDESCRIPTION: Documents the _render and render methods on ir.qweb model for more direct QWeb template rendering. _render uses database-stored templates while render doesn't require database access.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# _render method signature\n_render(id[, values])\n\n# render method signature\nrender(template_name, values, load, **options)\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-company Security Rule in Odoo XML\nDESCRIPTION: This snippet details the XML structure needed to define a multi-company security rule in Odoo. The rule checks if a record's company_id is among the companies the current user has access to, ensuring that users can only manage records within their accessible companies. Key fields include `company_id` for specifying the record's company and `company_ids` which lists the companies accessible to the user.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/restrict_data_access.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.rule\" id=\"hr_appraisal_plan_comp_rule\">\\n    <field name=\"name\">Appraisal Plan multi-company</field>\\n    <field name=\"model_id\" ref=\"model_hr_appraisal_plan\"/>\\n    <field name=\"domain_force\">[\\n        '|', ('company_id', '=', False),\\n             ('company_id', 'in', company_ids)\\n    ]</field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Lazy Translation Implementation\nDESCRIPTION: Example of using lazy translation lookup for error messages that should be evaluated at runtime\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/translations.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nERROR_MESSAGE = {\n  'access_error': _lt('Access Error'),\n  'missing_error': _lt('Missing Record'),\n}\n\nclass Record(models.Model):\n\n  def _raise_error(self, code):\n    # translation lookup executed at error rendering\n    raise UserError(ERROR_MESSAGE[code])\n```\n\n----------------------------------------\n\nTITLE: Define a translatable string with t-set\nDESCRIPTION: This snippet demonstrates how to define a translatable string using the `t-set` directive in XML. This creates a variable named \"title\" with the value \"Foo\", which is marked for translation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<t t-set=\\\"title\\\">Foo</t>\"\n```\n\n----------------------------------------\n\nTITLE: Defining New Page Templates in Odoo Manifest (Python)\nDESCRIPTION: This Python snippet illustrates how to define new page templates in the `__manifest__.py` file of an Odoo module. The `new_page_templates` key specifies the templates available when creating a new page. It defines the structure and sections that will be included in the page template.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{\n   'name': 'Airproof Theme',\n   'description': '...',n   'category': 'Website/Theme',\n   'version': '17.0.0',\n   'author': '...',n   'license': '...',n   'depends': ['website'],\n   'data': [\n      # ...\n   ],\n   'assets': {\n      # ...\n   },\n   'new_page_templates': {\n      'airproof': {\n         'faq': ['s_airproof_text_block_h1', 's_title', 's_faq_collapse', 's_call_to_action']\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global SCSS Variables in Odoo Theme\nDESCRIPTION: This snippet showcases how to define global SCSS variables within the `primary_variables.scss` file for an Odoo theme.  These variables are part of `$o-website-values-palettes` map and allow customization of templates, colors, fonts, and buttons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n   $o-website-values-palettes: (\n      (\n         // Templates\n         // Colors\n         // Fonts\n         // Buttons\n         // ...\n      ),\n   );\n```\n\n----------------------------------------\n\nTITLE: Supported Export Object Syntax\nDESCRIPTION: This code snippet shows the supported syntax for exporting objects in Odoo native modules. It highlights how to export multiple variables or re-export variables from another file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\n      // supported\n      export {\n        a as b,\n        c,\n        d,\n      }\n\n      export {\n        a\n      } from \"./file_a\"\n\n```\n\n----------------------------------------\n\nTITLE: Executing Device Actions\nDESCRIPTION: Examples of executing actions on IoT devices from both JavaScript and Python sides.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\niot_device.action(data);\n```\n\nLANGUAGE: python\nCODE:\n```\ndef action(self, data):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Patching Object in Odoo\nDESCRIPTION: This snippet demonstrates patching a simple object by importing and utilizing the patch function from @web/core/utils/patch. It modifies the object's method and highlights the usage of the super keyword for functionality inheritance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { patch } from \"@web/core/utils/patch\";\n\nconst object = {\n  field: \"a field\",\n  fn() {\n    // do something\n  },\n};\n\npatch(object, {\n  fn() {\n    // do things\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\npatch(object, {\n  fn() {\n    super.fn(...arguments);\n    // do other things\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QWeb Cache and No-Cache Directives in XML Templates\nDESCRIPTION: This example shows how t-cache and t-nocache directives work in QWeb templates. The counter variable is manipulated differently in cached and non-cached sections, resulting in different values throughout the rendered output.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"counter\" t-value=\"counter * 10\"/>\n<header t-nocache=\"\">\n    <t t-set=\"counter\" t-value=\"counter + 5\"/>\n    (views: <t t-out=\"counter\"/>)\n</header>\n<article t-cache=\"record\">\n    <title><t t-out=\"record.name\"/> <i t-nocache=\"\">(views: <t t-out=\"counter\"/>)</i></titlle>\n    <content t-out=\"record.description\"/>\n</article>\n<footer>(views: <t t-out=\"counter\"/>)</footer>\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Relation in Odoo XML\nDESCRIPTION: Example of creating a many-to-one relationship field to link with res.partner model. Demonstrates field attributes including model reference, name, description, and relation type.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\"field_real_estate_property_partner_id\" model=\"ir.model.fields\">\n        <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n        <field name=\"name\">x_partner_id</field>\n        <field name=\"field_description\">Customer</field>\n        <field name=\"ttype\">many2one</field>\n        <field name=\"relation\">res.partner</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Extendable Logic in Python for Odoo\nDESCRIPTION: Demonstrates how to structure code for better extensibility in Odoo modules. It shows progressively better approaches to implementing business logic that can be easily extended by submodules.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# do not do this\n# modifying the domain or criteria implies overriding whole method\ndef action(self):\n    ...  # long method\n    partners = self.env['res.partner'].search(complex_domain)\n    emails = partners.filtered(lambda r: arbitrary_criteria).mapped('email')\n\n# better but do not do this either\n# modifying the logic forces to duplicate some parts of the code\ndef action(self):\n    ...\n    partners = self._get_partners()\n    emails = partners._get_emails()\n\n# better\n# minimum override\ndef action(self):\n    ...\n    partners = self.env['res.partner'].search(self._get_partner_domain())\n    emails = partners.filtered(lambda r: r._filter_partners()).mapped('email')\n```\n\n----------------------------------------\n\nTITLE: QWeb Caching with Primitive Values Example\nDESCRIPTION: Demonstrates how to use t-nocache-* directive to cache primitive values that can be reused in templates. This allows dynamic content to be partially cached while maintaining specific values for later rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<section t-cache=\"records\">\n    <article t-foreach=\"records\" t-as=\"record\">\n        <header>\n            <title t-field=\"record.get_method_title()\"/>\n        </header>\n        <footer t-nocache=\"This part has a dynamic counter and must be rendered all the time.\"\n                t-nocache-cached_value=\"record.get_base_counter()\">\n            <span t-out=\"counter + cached_value\"/>\n        </footer>\n    </article>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Prepending Files to Asset Bundles\nDESCRIPTION: Demonstrates how to prepend a file to a bundle, placing it before all others. The 'prepend' operation is useful for managing CSS files and ensuring certain files are loaded first.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('prepend', 'my_addon/static/src/css/bootstrap_overridden.scss'),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Many2one Field with No Create Options\nDESCRIPTION: Demonstrates setting options to disable record creation and opening for a many2one field, typically used for controlled relationship fields\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"currency_id\" options=\"{'no_create': true, 'no_open': true}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Attribute in Odoo 17 View Definition\nDESCRIPTION: The 'sample' attribute determines if a view should display fake sample records when no actual records exist. These sample records use heuristics based on field names and models (e.g., display_name for res.users shows people names, email fields follow firstname.lastname@sample.demo pattern). Sample data is non-interactive and discarded after any user action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_sample.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attribute:: sample\n   :noindex:\n\n   Whether the view should be populated with a set of sample records if none are found for the\n   current model.\n\n   These fake records have heuristics for certain field names/models. For example, a field\n   `display_name` on the model `res.users` will be populated with sample people names, while an\n   `email` field will be in the form `firstname.lastname@sample.demo`.\n\n   The user is unable to interact with these data, and they will be discarded as soon as an action\n   is performed (record created, column added, etc.).\n\n   :requirement: Optional\n   :type: bool\n   :default: `False`\n```\n\n----------------------------------------\n\nTITLE: Python Use Dict Setdefault\nDESCRIPTION: This Python snippet demonstrates the use of `dict.setdefault` for simplifying code that conditionally appends to a list within a dictionary. Using `setdefault` makes the code more concise and readable, improving maintainability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# longer.. harder to read\nvalues = {}\nfor element in iterable:\n    if element not in values:\n        values[element] = []\n    values[element].append(other_value)\n\n# better.. use dict.setdefault method\nvalues = {}\nfor element in iterable:\n    values.setdefault(element, []).append(other_value)\n```\n\n----------------------------------------\n\nTITLE: Returning an Object or Array for Error Handling in JavaScript\nDESCRIPTION: Demonstrates how to return an object or a two-element array from a function to handle potential errors effectively. This technique provides a clear way to manage return values and errors without using exceptions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { val: someVal, err } = someFunction();\nif (err) {\n  return;\n}\n// do something with someVal as it is known to be valid\n```\n\n----------------------------------------\n\nTITLE: Python Expression Examples in Odoo Views\nDESCRIPTION: Shows how to use Python expressions in field attributes to control behavior based on conditions. Includes examples of readonly and invisible attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"field_a\" readonly=\"True\"/>\n<field name=\"field_b\" invisible=\"context.get('show_me') and field_a == 4\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Action\nDESCRIPTION: This snippet demonstrates how to create a URL action in Odoo that opens a specified web address. It provides options for how the URL should be opened in relation to the current window.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ir.actions.act_url\",\n    \"url\": \"https://odoo.com\",\n    \"target\": \"self\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo JavaScript Module with Dependencies\nDESCRIPTION: Example of defining a JavaScript module in Odoo with explicit dependencies. The module is named 'module.Something' and depends on 'web.ajax'. The function returns a value that becomes available to other modules requiring it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define('module.Something', ['web.ajax'], function (require) {\n    \"use strict\";\n\n    var ajax = require('web.ajax');\n\n    // some code here\n    return something;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BEM-style CSS Variables\nDESCRIPTION: Example of using BEM convention for CSS variables in a Kanban component, showing how to adapt styling contextually within different views.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_32\n\nLANGUAGE: scss\nCODE:\n```\n.o_kanban_record {\n   --KanbanRecord-width: value;\n   --KanbanRecord__picture-border: value;\n   --KanbanRecord__picture-border--active: value;\n}\n\n.o_form_view {\n   --KanbanRecord-width: another-value;\n   --KanbanRecord__picture-border: another-value;\n   --KanbanRecord__picture-border--active: another-value;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Customer Filtering JavaScript Snippet\nDESCRIPTION: Creates a dynamic filter for customers in the search model with a custom identifier\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.env.searchModel.createNewFilters([{\n  description: partner_name,\n  domain: [[\"partner_id\", \"=\", partner_id]],\n  isFromAwesomeKanban: true\n}])\n```\n\n----------------------------------------\n\nTITLE: HTML-Style Form View in Odoo XML\nDESCRIPTION: Form view using HTML elements for flexible layouts, including header with buttons and statusbar.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<form string=\"Idea Form\">\n    <header>\n        <button string=\"Confirm\" type=\"object\" name=\"action_confirm\"\n                invisible=\"state != 'draft'\" class=\"oe_highlight\" />\n        <button string=\"Mark as done\" type=\"object\" name=\"action_done\"\n                invisible=\"state != 'confirmed'\" class=\"oe_highlight\"/>\n        <button string=\"Reset to draft\" type=\"object\" name=\"action_draft\"\n                invisible=\"state not in ['confirmed', 'done']\" />\n        <field name=\"state\" widget=\"statusbar\"/>\n    </header>\n    <sheet>\n        <div class=\"oe_title\">\n            <label for=\"name\" class=\"oe_edit_only\" string=\"Idea Name\" />\n            <h1><field name=\"name\" /></h1>\n        </div>\n        <separator string=\"General\" colspan=\"2\" />\n        <group colspan=\"2\" col=\"2\">\n            <field name=\"description\" placeholder=\"Idea description...\" />\n        </group>\n    </sheet>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Many2many Relationship in Odoo Python\nDESCRIPTION: This snippet shows how to define a Many2many relationship in an Odoo model, linking it with the account.tax model. The field named tax_ids signifies multiple associations with account.tax records, typically visualized as selectable tags. Dependencies include the Odoo fields module and proper model registration in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntax_ids = fields.Many2many(\"account.tax\", string=\"Taxes\")\n```\n\n----------------------------------------\n\nTITLE: Setting Header Overlay in Odoo\nDESCRIPTION: This XML snippet demonstrates how to enable the header overlay feature in Odoo, making the header background transparent.  It sets the `header_overlay` field to `True` using the `eval` attribute. This enhances the visual appearance of the website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"header_overlay\" eval=\"True\"/>\n```\n\n----------------------------------------\n\nTITLE: Field with Context Attribute Example\nDESCRIPTION: Demonstrates how to pass context values when fetching or creating related records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" context=\"{\n    'TYPE_view_ref': 'ADDON.MODEL_view_TYPE',\n    'group_by': 'FIELD_NAME',\n    'default_FIELD_NAME': ANY,\n    'search_default_FIELD_NAME': True,\n    'OTHER_BUSINESS_KEY': ANY,\n  }\"/>\n```\n\n----------------------------------------\n\nTITLE: Minimal Property Offers Report Template\nDESCRIPTION: This XML snippet defines a minimal QWeb template for generating a property offers report in Odoo.  It iterates through a recordset of properties and displays their name, expected price, and a table of offers. The template uses Odoo's QWeb directives (t-foreach, t-as, t-field) to dynamically generate the report content based on the data passed to it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/pdf_reports.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <odoo>\n        <template id=\"report_property_offers\">\n            <t t-foreach=\"docs\" t-as=\"property\">\n                <t t-call=\"web.html_container\">\n                    <t t-call=\"web.external_layout\">\n                        <div class=\"page\">\n                            <h2>\n                                <span t-field=\"property.name\"/>\n                            </h2>\n                            <div>\n                                <strong>Expected Price: </strong>\n                                <span t-field=\"property.expected_price\"/>\n                            </div>\n                            <table class=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th>Price</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <t t-set=\"offers\" t-value=\"property.mapped('offer_ids')\"/>\n                                    <tr t-foreach=\"offers\" t-as=\"offer\">\n                                        <td>\n                                            <span t-field=\"offer.price\"/>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </t>\n                </t>\n            </t>\n        </template>\n    </odoo>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Field Component\nDESCRIPTION: Defines a new text field component that displays text in red color. Includes props configuration and change handler.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport { standardFieldProps } from \"@web/views/fields/standard_field_props\";\nimport { Component, xml } from \"@odoo/owl\";\nimport { registry } from \"@web/core/registry\";\n\nexport class MyTextField extends Component {\n\n    /**\n    * @param {boolean} newValue\n    */\n    onChange(newValue) {\n        this.props.update(newValue);\n    }\n}\n\nMyTextField.template = xml`\n    <input t-att-id=\"props.id\" class=\"text-danger\" t-att-value=\"props.value\" onChange.bind=\"onChange\" />\n`;\nMyTextField.props = {\n    ...standardFieldProps,\n};\nMyTextField.supportedTypes = [\"char\"];\n```\n\n----------------------------------------\n\nTITLE: Enhanced Coordinates Widget with Geolocation in JavaScript\nDESCRIPTION: This enhanced version of the widget adds a button to get the user's current location using the JavaScript Geolocation API. It handles readonly mode by hiding the button when appropriate and updates the form fields with the obtained coordinates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetCoordinates = instance.web.form.FormWidget.extend({\n    events: {\n        'click button': function () {\n            navigator.geolocation.getCurrentPosition(\n                this.proxy('received_position'));\n        }\n    },\n    start: function() {\n        var sup = this._super();\n        this.field_manager.on(\"field_changed:provider_latitude\", this, this.display_map);\n        this.field_manager.on(\"field_changed:provider_longitude\", this, this.display_map);\n        this.on(\"change:effective_readonly\", this, this.display_map);\n        this.display_map();\n        return sup;\n    },\n    display_map: function() {\n        this.$el.html(QWeb.render(\"WidgetCoordinates\", {\n            \"latitude\": this.field_manager.get_field_value(\"provider_latitude\") || 0,\n            \"longitude\": this.field_manager.get_field_value(\"provider_longitude\") || 0,\n        }));\n        this.$(\"button\").toggle(! this.get(\"effective_readonly\"));\n    },\n    received_position: function(obj) {\n        this.field_manager.set_values({\n            \"provider_latitude\": obj.coords.latitude,\n            \"provider_longitude\": obj.coords.longitude,\n        });\n    },\n});\n\ninstance.web.form.custom_widgets.add('coordinates', 'instance.oepetstore.WidgetCoordinates');\n```\n\n----------------------------------------\n\nTITLE: Form: Defining Header with Buttons and Status\nDESCRIPTION: This XML snippet demonstrates how to use the `<header>` element in an Odoo form to display workflow buttons and a status widget.  It's typically used in conjunction with the `<sheet>` element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <header>\n        <BUTTONS/>\n    </header>\n    <sheet>\n        ...\n    </sheet>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining QWeb Templates in JavaScript\nDESCRIPTION: Shows how to define QWeb templates in JavaScript files using the t-name directive. Templates must be defined as direct children of the document root element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<templates>\n    <t t-name=\"template-name\">\n        <!-- template code -->\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Elements in Odoo List View XML\nDESCRIPTION: Demonstrates how to add action buttons to a list view using the button element. Buttons can trigger object methods or edit actions, and can display text labels or icons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n    <button type=\"object\" name=\"ACTION\" string=\"LABEL\"/>\n    <button type=\"object\" name=\"ACTION\" icon=\"FONT_AWESOME\"/>\n</tree>\n```\n\n----------------------------------------\n\nTITLE: SCSS Switching Colors Mapping (References)\nDESCRIPTION: This SCSS snippet demonstrates how to switch colors using references to the color palette. The `change-shape-colors-mapping` function is used to replace color 4 with color 3 and color 5 with color 1. This facilitates easy color scheme adjustments using the predefined color palette.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n    $o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: 1));\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Page Content with XPath in Odoo\nDESCRIPTION: This XML snippet shows how to replace the default content of a page using XPath in Odoo. It inherits from the `http_routing.404` template and replaces the content of the element with the id `wrap`.  This provides a way to customize default pages without directly modifying their original templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"404\" inherit_id=\"http_routing.404\">\n    <xpath expr=\"//*[@id='wrap']\" position=\"replace\">\n        <t t-set=\"additional_title\" t-value=\"'404 - Not found'\"/>\n\n        <div id=\"wrap\" class=\"oe_structure\">\n            <!-- Content -->\n        </div>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Activating Spell Check with useSpellCheck in JavaScript\nDESCRIPTION: The useSpellCheck hook manages the spellcheck feature on HTML inputs and textareas by toggling it on focus and removing it on blur for enhanced readability. Owl framework is required, and the element must be referenced with a t-ref or have a contenteditable attribute for spellcheck to activate.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/hooks.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSpellCheck } from \"@web/core/utils/hooks\";\n\nclass Comp {\n  setup() {\n    this.simpleRef = useSpellCheck();\n    this.customRef = useSpellCheck({ refName: \"custom\" });\n    this.nodeRef = useSpellCheck({ refName: \"container\" });\n  }\n  static template = \"Comp\";\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"Comp\">\n  <input t-ref=\"spellcheck\" type=\"text\"/>\n  <textarea t-ref=\"custom\"/>\n  <div t-ref=\"container\">\n    <input type=\"text\" spellcheck=\"false\"/>\n    <div contenteditable=\"true\"/>\n  </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Creating Application Mount Script\nDESCRIPTION: JavaScript code to mount the Owl application, configuring the environment and services.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\nimport { whenReady } from \"@odoo/owl\";\nimport { mountComponent } from \"@web/env\";\nimport { Root } from \"./root\";\n\nwhenReady(() => mountComponent(Root, document.body));\n```\n\n----------------------------------------\n\nTITLE: Configuring Map View with Partner Field and Routing in XML\nDESCRIPTION: This code snippet shows how to define a Map view in Odoo with partner reference, default ordering, and routing enabled. It also demonstrates hiding the name field and displaying a custom partner field in the pin's popup.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\n<map res_partner=\"partner_id\" default_order=\"date_begin\" routing=\"1\" hide_name=\"1\">\n    <field name=\"partner_id\" string=\"Customer Name\"/>\n</map>\n```\n\n----------------------------------------\n\nTITLE: Including Menu Component in Custom Header XML\nDESCRIPTION: Adds the website menu component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"website.menu_id.child_id\" t-as=\"submenu\">\n   <t t-call=\"website.submenu\">\n      <t t-set=\"item_class\" t-valuef=\"nav-item\"/>\n      <t t-set=\"link_class\" t-valuef=\"nav-link\"/>\n   </t>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Linking Custom JavaScript Methods to XML Options in Odoo Website Theme\nDESCRIPTION: Shows how to link custom JavaScript methods to XML options using the data-js attribute and calling custom methods on options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"s_airproof_snippet_options\" inherit_id=\"website.snippet_options\" name=\"Airproof - Snippets Options\">\n   <xpath expr=\".\" position=\"inside\">\n      <div data-selector=\".s_airproof_snippet\" data-js=\"airproofSnippet\">\n         <we-checkbox data-custom-method-name=\"\" />\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Replacing Files in Asset Bundles\nDESCRIPTION: Illustrates how to replace one file with another in an asset bundle using the 'replace' directive. This operation is useful for updating or overriding existing assets while maintaining the load order.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('replace', 'web/static/src/js/boot.js', 'my_addon/static/src/js/boot.js'),\n]\n```\n\n----------------------------------------\n\nTITLE: Computed Field with Inverse Function\nDESCRIPTION: Demonstrates how to create a computed field that allows setting its value through an inverse method, enabling two-way value manipulation\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestComputed(models.Model):\n    _name = \"test.computed\"\n\n    total = fields.Float(compute=\"_compute_total\", inverse=\"_inverse_total\")\n    amount = fields.Float()\n\n    @api.depends(\"amount\")\n    def _compute_total(self):\n        for record in self:\n            record.total = 2.0 * record.amount\n\n    def _inverse_total(self):\n        for record in self:\n            record.amount = record.total / 2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Paper Format for Odoo Reports in XML\nDESCRIPTION: Explains the attributes available in the 'report.paperformat' configuration, detailing page sizes, orientation, and margins for custom report outputs. Useful for defining specific output characteristics for PDF generation in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"paperformat_frenchcheck\" model=\"report.paperformat\">\n    <field name=\"name\">French Bank Check</field>\n    <field name=\"default\" eval=\"True\"/>\n    <field name=\"format\">custom</field>\n    <field name=\"page_height\">80</field>\n    <field name=\"page_width\">175</field>\n    <field name=\"orientation\">Portrait</field>\n    <field name=\"margin_top\">3</field>\n    <field name=\"margin_bottom\">3</field>\n    <field name=\"margin_left\">3</field>\n    <field name=\"margin_right\">3</field>\n    <field name=\"header_line\" eval=\"False\"/>\n    <field name=\"header_spacing\">3</field>\n    <field name=\"dpi\">80</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining Migrate Function for Odoo Upgrade Script in Python\nDESCRIPTION: This snippet shows the basic structure of the migrate function required in Odoo upgrade scripts. It takes a database cursor and version as parameters, allowing for database operations and version-specific logic.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef migrate(cr, version):\n   :param cr: current database cursor\n   :type cr: :class:`~odoo.sql_db.Cursor`\n   :param str version: installed version of the module\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Components with ActionSwiper Using XPath (XML)\nDESCRIPTION: This snippet demonstrates how to extend an existing component with the `ActionSwiper` using XPath expressions in an XML template. It shows how to insert the `ActionSwiper` after an element with a specific class and move the original element inside the `ActionSwiper`. This allows adding swipe functionality to existing elements without duplicating their templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n  <xpath expr=\"//*[hasclass('o_Message')]\" position=\"after\">\n    <ActionSwiper\n      onRightSwipe=\"messaging.device.isMobile and messageView.message.isNeedaction ?\n        {\n          action: () => messageView.message.markAsRead(),\n          icon: 'fa-check-circle',\n          bgColor: 'bg-success',\n        } : undefined\"\n    />\n  </xpath>\n  <xpath expr=\"//ActionSwiper\" position=\"inside\">\n    <xpath expr=\"//*[hasclass('o_Message')]\" position=\"move\"/>\n  </xpath>\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Total Area Field in Odoo XML\nDESCRIPTION: Demonstrates how to define a computed field that calculates total area by summing living_area and garden_area fields. Includes field dependencies and compute logic in a sandboxed Python environment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"field_real_estate_property_total_area\" model=\"ir.model.fields\">\n        <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n        <field name=\"name\">x_total_area</field>\n        <field name=\"field_description\">Total Area</field>\n        <field name=\"ttype\">float</field>\n        <field name=\"depends\">x_living_area,x_garden_area</field>\n        <field name=\"compute\"><![CDATA[\nfor property in self:\n    property['x_total_area'] = property.x_living_area + property.x_garden_area\n        ]]>\n        </field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Boolean Field Component\nDESCRIPTION: Registers the custom boolean field component in the fields registry for use in views.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"fields\").add(\"late_boolean\", LateOrderBooleanField);\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Tour file to Odoo assets\nDESCRIPTION: This code snippet demonstrates how to include a JavaScript tour file in the Odoo web assets. It defines the 'web.assets_tests' asset bundle and adds the path to the JavaScript tour file to be included in the test assets. This ensures that the tour is loaded and available for testing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"assets': {\n    'web.assets_tests': [\n        'your_module/static/tests/tours/your_tour.js',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast with Odoo Mobile JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to display a toast message on a mobile device using Odoo's mobile framework. It requires the mobile app to be functional and uses the method `showToast` to display the message provided in the argument. Input parameters include a `message` object which contains the text to be shown. The toast remains visible and does not obstruct other elements.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.methods.showToast({'message': 'Message sent'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-level Dropdown Menu in Owl XML\nDESCRIPTION: Example of a nested dropdown menu structure with multiple levels of menu items. Shows how to create File menu with nested New and Save As options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Dropdown>\n  <t t-set-slot=\"toggler\">File</t>\n  <DropdownItem onSelected=\"() => this.onItemSelected('file-open')\">Open</DropdownItem>\n  <Dropdown>\n    <t t-set-slot=\"toggler\">New</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-document')\">Document</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-new-spreadsheet')\">Spreadsheet</DropdownItem>\n  </Dropdown>\n  <DropdownItem onSelected=\"() => this.onItemSelected('file-save')\">Save</DropdownItem>\n  <Dropdown>\n    <t t-set-slot=\"toggler\">Save as...</t>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-save-as-csv')\">CSV</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-save-as-pdf')\">PDF</DropdownItem>\n  </Dropdown>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Products (Courses) in Odoo\nDESCRIPTION: This XML snippet creates demonstration product templates (courses) in Odoo, using the 'product.template' model. It sets various attributes such as name, teacher, category, website publishing status, list price, and product type (service).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"course0\\\" model=\\\"product.template\\\">\\n    <field name=\\\"name\\\">Course 0</field>\\n    <field name=\\\"teacher_id\\\" ref=\\\"padilla\\\"/>\\n    <field name=\\\"public_categ_ids\\\" eval=\\\"[(4, ref('academy.category_courses'), False)]\\\"/>\\n    <field name=\\\"website_published\\\">True</field>\\n    <field name=\\\"list_price\\\" type=\\\"float\\\">0</field>\\n    <field name=\\\"type\\\">service</field>\\n</record>\\n<record id=\\\"course1\\\" model=\\\"product.template\\\">\\n    <field name=\\\"name\\\">Course 1</field>\\n    <field name=\\\"teacher_id\\\" ref=\\\"padilla\\\"/>\\n    <field name=\\\"public_categ_ids\\\" eval=\\\"[(4, ref('academy.category_courses'), False)]\\\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Documenting AccountGroup Model in Odoo using Sphinx\nDESCRIPTION: This snippet uses Sphinx's automodel directive to generate documentation for the AccountGroup model in Odoo's accounting module. It includes documentation for specific fields such as parent_id, name, code_prefix_start, and code_prefix_end.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_group.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_account.AccountGroup\n    :main:\n\n    .. autofield:: parent_id\n    .. autofield:: name\n    .. autofield:: code_prefix_start\n    .. autofield:: code_prefix_end\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Service\nDESCRIPTION: This snippet details how to create a simple notification service that displays notifications every 5 seconds. It demonstrates the usage of the registry for declaring a service in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"./core/registry\";\n\nconst serviceRegistry = registry.category(\"services\");\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    }\n};\n\nserviceRegistry.add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Evaluating Python Expressions in JavaScript\nDESCRIPTION: Demonstrates using the evaluateExpr function from the Python interpreter to evaluate Python expressions in JavaScript. This is used for evaluating view modifiers written in Python.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { evaluateExpr } from \"@web/core/py_js/py\";\n\nevaluateExpr(\"1 + 2*{'a': 1}.get('b', 54) + v\", { v: 33 }); // returns 142\n```\n\n----------------------------------------\n\nTITLE: Form: Grouping Fields with \"group\" element\nDESCRIPTION: This XML snippet demonstrates how to group fields within an Odoo form view using the `<group>` element. The `string` attribute defines the title of each group, allowing for hierarchical organization of form elements.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <group string=\"Title 1\">\n        <group string=\"Title 1.1\">...</group>\n        <newline/>\n        <group string=\"Title 1.2\">...</group>\n        <group string=\"Title 1.3\">...</group>\n    </group>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Module in Odoo\nDESCRIPTION: This command uses Odoo's scaffolding tool to create a basic module named 'Academy' within a directory called 'my-modules'.  It assumes that 'odoo-bin' is accessible from the current directory. The module directory can be existing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ ./odoo-bin scaffold Academy my-modules\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Bundle in Python\nDESCRIPTION: Python dictionary defining the assets bundle in the module manifest, including required dependencies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    'assets': {\n        'your_module.assets_standalone_app': [\n            ('include', 'web._assets_helpers'),\n            'web/static/src/scss/pre_variables.scss',\n            'web/static/lib/bootstrap/scss/_variables.scss',\n            ('include', 'web._assets_bootstrap'),\n            ('include', 'web._assets_core'),\n            'your_module/static/src/standalone_app/**/*',\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to Backend View\nDESCRIPTION: This snippet shows how to add a custom field to a backend view using XPath. It inherits the existing view, targets a specific field (`blog_id`), and inserts the custom field (`x_post_category`) before it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"view_blog_post_form_category\\\" model=\\\"ir.ui.view\\\">\\n   <field name=\\\"name\\\">view_blog_post_form_category</field>\\n   <field name=\\\"model\\\">blog.post</field>\\n   <field name=\\\"inherit_id\\\" ref=\\\"website_blog.view_blog_post_form\\\"/>\\n   <field name=\\\"arch\\\" type=\\\"xml\\\">\\n      <xpath expr=\\\"//field[@name='blog_id']\\\" position=\\\"before\\\">\\n         <field name=\\\"x_post_category\\\" string=\\\" ...\\\" placeholder=\\\" ...\\\"/>\\n      </xpath>\\n   </field>\\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Defining the l10n Module Manifest File in Odoo\nDESCRIPTION: This snippet defines the ``__manifest__.py`` file for an Odoo accounting localization module. It specifies the module's name, version, category, license, dependencies, data files, and demo data files, essential for the module's installation and functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/accounting_localization.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"COUNTRY - Accounting\",\n    \"version\": \"1.0.0\",\n    \"category\": \"Accounting/Localizations/Account Charts\",\n    \"license\": \"LGPL-3\",\n    \"depends\": [\n        \"account\",\n    ],\n    \"data\": [\n        \"data/other_data.xml\",\n        \"views/xxxmodel_views.xml\",\n    ],\n    \"demo\": [\n        \"demo/demo_company.xml\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Field in Frontend Template\nDESCRIPTION: This snippet shows how to display the value of a custom field in a frontend template using the `t-field` directive. It accesses the field value using `blog_post.x_post_category`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n\"<h1 t-field=\\\"blog_post.x_post_category\\\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Related Field with Custom Dependencies in Python\nDESCRIPTION: Demonstrates how to specify precise field dependencies for a related field to control when it gets recomputed. This example creates a 'nickname' field that's only recomputed when the partner_id changes, not when the name changes on the partner.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nnickname = fields.Char(\n    related='partner_id.name', store=True,\n    depends=['partner_id'])\n# The nickname will only be recomputed when the partner_id\n# is modified, not when the name is modified on the partner.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model and Field in Java\nDESCRIPTION: This snippet demonstrates how to create a custom model, add a custom field, create a record, and read data using Java. It uses the 'execute' method to interact with Odoo's XML-RPC API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nfinal Integer id = (Integer)models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"name\", \"Custom Model\");\n            put(\"model\", \"x_custom\");\n            put(\"state\", \"manual\");\n        }})\n));\nmodels.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model.fields\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"model_id\", id);\n            put(\"name\", \"x_name\");\n            put(\"ttype\", \"char\");\n            put(\"state\", \"manual\");\n            put(\"required\", true);\n        }})\n));\nfinal Integer record_id = (Integer)models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"x_name\", \"test record\");\n        }})\n));\n\nclient.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom\", \"read\",\n        asList(asList(record_id))\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Group Headers in Odoo List View XML\nDESCRIPTION: Shows how to use the groupby element to define group headers with buttons and fields when grouping records on Many2one fields. Fields inside groupby are used for modifiers but not displayed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n    ...\n    <groupby name=\"FIELD_NAME\">\n        <BUTTONS/>\n        <FIELDS/>\n    </groupby>\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Posts Dynamic Snippet Section in XML\nDESCRIPTION: Base structure for a blog posts dynamic snippet section. Contains configuration for number of records, blog ID filtering, and template key reference.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<section\n      data-snippet=\"s_blog_posts\"\n      data-name=\"Blog Posts\"\n      class=\"s_blog_post_airproof s_dynamic_snippet_blog_posts s_blog_posts_effect_marley s_dynamic pb32 o_cc o_cc2 o_dynamic_empty\"\n      data-template-key=\"website_airproof.dynamic_filter_template_blog_post_airproof\"\n      data-filter-by-blog-id=\"-1\"\n      data-number-of-records=\"3\"\n      data-number-of-elements=\"3\"\n   >\n      <div class=\"container o_not_editable\">\n         <div class=\"css_non_editable_mode_hidden\">\n               <div class=\"missing_option_warning alert alert-info rounded-0 fade show d-none d-print-none\">\n                  Your Dynamic Snippet will be displayed here... This message is displayed because you did not provided both a filter and a template to use.<br/>\n               </div>\n         </div>\n         <div class=\"dynamic_snippet_template\"/>\n      </div>\n   </section>\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Template Definition in XML\nDESCRIPTION: Template structure for blog posts dynamic content with foreach loop for records rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_blog_post_airproof\" name=\"...\">\n            <div t-foreach=\"records\" t-as=\"data\" class=\"s_blog_posts_post\">\n               <t t-set=\"record\" t-value=\"data['_record']\"/>\n               <!-- Content -->\n            </div>\n         </template>\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Property List Server Action in Python\nDESCRIPTION: Creates a server action that generates an HTML list of properties using Odoo's request object and environment\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhtml = '<html><body><h1>Properties</h1><ul>'\n    for property in request.env['x_estate.property'].search([]):\n        html += f'<li>{property.x_name}</li>'\n    html += '</ul></body></html>'\n    response = request.make_response(html)\n```\n\n----------------------------------------\n\nTITLE: Color Decoration on Odoo Tree View (XML)\nDESCRIPTION: This XML snippet demonstrates how to apply color decorations to records in an Odoo tree (list) view based on a condition. The `decoration-success` attribute is used to display records in green when the `is_partner` field is True. The `is_partner` field is also present in the view, but is hidden.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<tree decoration-success=\"is_partner==True\">\n    <field name=\"name\"/>\n    <field name=\"is_partner\" invisible=\"1\"/>\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Ordering Systray Items Using Sequence in JavaScript\nDESCRIPTION: This snippet shows how to add a systray item with a specific sequence number, influencing its order in the systray menu. Lower sequence numbers appear on the right, and higher numbers on the left.  The default sequence is 50.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = {\n    Component: MySystrayItem\n};\nregistry.category(\"systray\").add(\"myaddon.some_description\", item, { sequence: 43 });\n```\n\n----------------------------------------\n\nTITLE: Vibrating Device with Odoo Mobile JavaScript\nDESCRIPTION: This snippet shows how to make the mobile device vibrate using the `vibrate` method in the Odoo mobile framework. The `duration` parameter specifies how long the device should vibrate, given in milliseconds. The mobile app is a prerequisite for executing this JavaScript method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.methods.vibrate({'duration': 100});\n```\n\n----------------------------------------\n\nTITLE: Rating Email Template Definition in Odoo XML\nDESCRIPTION: XML template definition for sending rating request emails to customers. The template includes rating links and uses the rating access token system for secure customer feedback collection.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"rating_my_model_email_template\" model=\"mail.template\">\n            <field name=\"name\">My Model: Rating Request</field>\n            <field name=\"email_from\">${object.rating_get_rated_partner_id().email or '' | safe}</field>\n            <field name=\"subject\">Service Rating Request</field>\n            <field name=\"model_id\" ref=\"my_module.model_my_model\"/>\n            <field name=\"partner_to\" >${object.rating_get_partner_id().id}</field>\n            <field name=\"auto_delete\" eval=\"True\"/>\n            <field name=\"body_html\"><![CDATA[\n% set access_token = object.rating_get_access_token()\n<p>Hi,</p>\n<p>How satsified are you?</p>\n<ul>\n    <li><a href=\"/rate/${access_token}/5\">Satisfied</a></li>\n    <li><a href=\"/rate/${access_token}/3\">Okay</a></li>\n    <li><a href=\"/rate/${access_token}/1\">Dissatisfied</a></li>\n</ul>\n]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Accessing User Context in a Component\nDESCRIPTION: This code snippet shows how to access the user context within a component, which contains various properties related to the currently logged-in user, such as language and timezone.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends Component {\n    setup() {\n        const user = useService(\"user\");\n        console.log(user.context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Assets Dynamically in JavaScript\nDESCRIPTION: This snippet exemplifies how to leverage Odoo's dynamic loading framework to conditionally load assets using JavaScript. These helper functions, located in the '@web/core/assets' file, allow developers to optimize performance by loading libraries only when they are needed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait loadAssets({\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean Field Template XML\nDESCRIPTION: Template definition for the custom boolean field that adds a 'Late!' text when the field is checked.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"my_module.LateOrderBooleanField\" t-inherit=\"web.BooleanField\">\n        <xpath expr=\"//CheckBox\" position=\"after\">\n              <span t-if=\"props.value\" class=\"text-danger\"> Late! </span>\n        </xpath>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Enhanced QWeb Template with Geolocation Button\nDESCRIPTION: This updated XML template includes a button that allows users to get their current coordinates using the browser's geolocation API. The button will be shown or hidden based on the form's readonly state.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"WidgetCoordinates\">\n    <iframe width=\"400\" height=\"300\"\n        t-attf-src=\"https://maps.google.com/?ie=UTF8&amp;ll={{latitude}},{{longitude}}&amp;output=embed\">\n    </iframe>\n    <button>Get My Current Coordinate</button>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Modifying Powerbox Commands and Categories in JavaScript\nDESCRIPTION: This snippet demonstrates how to override the `_getPowerboxOptions` method in the `mass_mailing` module to add custom commands and categories to the Powerbox in Odoo's editor. It includes using the `_t` function to ensure translations are handled properly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/odoo_editor.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_getPowerboxOptions: function () {\n    const options = this._super();\n    // (existing code before the return statement)\n    options.categories.push({\n        name: _t('Documentation'),\n        priority: 300,\n    });\n    options.commands.push({\n        name: _t('Document'),\n        category: _t('Documentation'),\n        description: _t(\"Add this text to your mailing's documentation\"),\n        fontawesome: 'fa-book',\n        priority: 1, // This is the only command in its category anyway.\n    });\n    return options;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to a Form View in Odoo\nDESCRIPTION: This XML snippet demonstrates how to add a button to the header of a form view in Odoo. The button is linked to a Python method using the `type=\"object\"` attribute and the `name` attribute, which specifies the name of the method to be called. The `string` attribute sets the label displayed on the button.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <header>\n        <button name=\"action_do_something\" type=\"object\" string=\"Do Something\"/>\n    </header>\n    <sheet>\n        <field name=\"name\"/>\n    </sheet>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Populating Drop Zones in Odoo Website with XML\nDESCRIPTION: This XML snippet shows how to populate a drop zone area within an Odoo website template. It replaces existing content with a structure ready to become a drop target for Odoo snippets. Requires knowledge of Odoo's templating system and XML structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n\n<template id=\"oe_structure_layout_01\" inherit_id=\"...\" name=\"...\">\n   <xpath expr=\"//*[@id='oe_structure_layout_01']\" position=\"replace\">\n      <div id=\"oe_structure_layout_01\" class=\"oe_structure oe_structure_solo\">\n         <!-- Content -->\n      </div>\n   </xpath>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Item in Odoo using XML\nDESCRIPTION: This XML snippet shows how to declare a new menu item in Odoo. It uses the `record` tag to define a `website.menu` object with properties such as name, URL, parent menu, website ID, and sequence. The `parent_id` field links the new menu item to an existing menu, specifying where the new item should be placed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\"menu_about_us\" model=\"website.menu\">\n    <field name=\"name\">About us</field>\n    <field name=\"url\">/about-us</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"website_id\">1</field>\n    <field name=\"sequence\" type=\"int\">10</field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Background Filter Customization\nDESCRIPTION: Shows how to add custom color filters and gradients to snippet backgrounds.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<section>\n    <div class=\"o_we_bg_filter\" style=\"background-color: rgba(39, 110, 114, 0.54) !important;\"/>\n    <div class=\"container\">\n        <!-- Content -->\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Creating Server Action for Refusing Offers in Odoo XML\nDESCRIPTION: Defines a server action that sets the status of all offers to 'Refused' for selected property records, with button integration in the form view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_x_estate_property_refuse_all_offers\" model=\"ir.actions.server\">\n    <field name=\"name\">Refuse all offers</field>\n    <field name=\"model_id\" ref=\"estate.model_real_estate_property\"/>\n    <field name=\"state\">code</field>\n    <field name=\"code\"><![CDATA[\nfor property in records:\n    property.x_offer_ids.write({'x_status': 'refused'})\n    ]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Field in Odoo Python\nDESCRIPTION: Example showing how to configure a Char field with the required attribute set to True. This enforces that the field cannot be empty when creating records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nname = fields.Char(required=True)\n```\n\n----------------------------------------\n\nTITLE: Settings: Declaring an Application\nDESCRIPTION: This XML snippet shows how to declare an application within a settings view using the `<app>` element.  The `string` attribute defines the application's name, and the `name` attribute specifies the technical name (module name).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n    ...\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo and Updating Module\nDESCRIPTION: This command restarts the Odoo server, specifies the addons path, selects the database 'academy', and updates the 'academy' module.  It assumes that 'odoo-bin' is accessible from the current directory. The database needs to exist.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ odoo-bin --addons-path addons,my-modules -d academy -u academy\"\n```\n\n----------------------------------------\n\nTITLE: Getting Odoo Server Version - Go\nDESCRIPTION: This Go snippet connects to the xmlrpc/2/common endpoint of an Odoo instance and retrieves the server's version using the github.com/kolo/xmlrpc library. It requires the github.com/kolo/xmlrpc library and the 'url' variable to be defined with the Odoo instance's URL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient, err := xmlrpc.NewClient(fmt.Sprintf(\"%s/xmlrpc/2/common\", url), nil)\nif err != nil {\n    log.Fatal(err)\n}\ncommon := map[string]any{}\nif err := client.Call(\"version\", nil, &common); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SPF Record for Odoo Email Server\nDESCRIPTION: TXT record configuration for SPF protocol to specify authorized email sending servers for a domain. This record allows Odoo's email servers to send emails on behalf of your domain.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/email_domain.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv=spf1 include:_spf.odoo.com ~all\n```\n\n----------------------------------------\n\nTITLE: Odoo Missing Access Rules Log Message\nDESCRIPTION: This code snippet shows the log message Odoo generates when models lack access rules. The message provides an example of how to define basic access permissions. This helps developers understand the structure required for the `ir.model.access.csv` file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nWARNING rd-demo odoo.modules.loading: The models ['estate.property'] have no access rules in module estate, consider adding some, like:\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n```\n\n----------------------------------------\n\nTITLE: Creating an Owl Component Template in XML\nDESCRIPTION: This XML snippet defines a simple Owl component template that outputs 'Hello, World!'. It is the basic step to check if the Owl setup is functioning correctly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/frontend_owl_components.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<templates xml:space=\\\"preserve\\\">\\n    <t t-name=\\\"your_module.YourComponent\\\">\\n        Hello, World!\\n    </t>\\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Declaring Images in Odoo\nDESCRIPTION: This snippet demonstrates how to declare images in Odoo for later use in the website builder's gallery. It creates a record in the 'ir.attachment' model that will be accessible in the Odoo interface. The parameters involved include 'id' for identification, 'name' for a descriptive title, and 'datas' for the image file location, which must be specified as a base64-encoded string.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"img_about_01\" model=\"ir.attachment\">\n    <field name=\"name\">About Image 01</field>\n    <field name=\"datas\" type=\"base64\" file=\"website_airproof/static/src/img/content/img_about_01.jpg\"/>\n    <field name=\"res_model\">ir.ui.view</field>\n    <field name=\"public\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: XPath Attributes Position Remove Example\nDESCRIPTION: This snippet demonstrates how to remove `x_airproof_header` from the class attribute of the header element using xpath and the `attributes` position.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//header\\\" position=\\\"attributes\\\">\\n   <attribute name=\\\"class\\\" remove=\\\"x_airproof_header\\\" />\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Declaration of assets in __manifest__.py\nDESCRIPTION: This snippet shows how to declare the primary variables SCSS file in the `assets` section of the `__manifest__.py` file.  This allows the SCSS variables to be overridden for theme customization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   'assets': {\n      'web._assets_primary_variables': [\n         'website_airproof/static/src/scss/primary_variables.scss',\n      ],\n   },\n```\n\n----------------------------------------\n\nTITLE: Creating URL Route Controller in Python\nDESCRIPTION: Controller method with dynamic URL routing using converter patterns to handle teacher URLs. Demonstrates basic routing with name parameter.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<name>/', auth='public', website=True)\ndef teacher(self, name):\n    return '<h1>{}</h1>'.format(name)\n```\n\n----------------------------------------\n\nTITLE: Reading Record Data with read Method in Multiple Languages\nDESCRIPTION: This code demonstrates how to use the read method to fetch record data after performing a search. The example first searches for company records with a limit of 1, then reads all fields of the retrieved record and counts the number of fields returned.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nids = models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]], {'limit': 1})\n[record] = models.execute_kw(db, uid, password, 'res.partner', 'read', [ids])\n# count the number of fields fetched by default\nlen(record)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nids = models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]], {limit: 1})\nrecord = models.execute_kw(db, uid, password, 'res.partner', 'read', [ids]).first\n# count the number of fields fetched by default\nrecord.length\n```\n\nLANGUAGE: php\nCODE:\n```\n$ids = $models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))), array('limit'=>1));\n$records = $models->execute_kw($db, $uid, $password, 'res.partner', 'read', array($ids));\n// count the number of fields fetched by default\ncount($records[0]);\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal List ids = asList((Object[])models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"res.partner\", \"search\",\n        asList(asList(\n            asList(\"is_company\", \"=\", true))),\n        new HashMap() {{ put(\"limit\", 1); }})));\nfinal Map record = (Map)((Object[])models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"res.partner\", \"read\",\n        asList(ids)\n    )\n))[0];\n// count the number of fields fetched by default\nrecord.size();\n```\n\nLANGUAGE: go\nCODE:\n```\nvar ids []int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search\",\n    []any{[]any{\n        []any{\"is_company\", \"=\", true},\n    }},\n    map[string]int64{\"limit\": 1},\n}, &ids); err != nil {\n    log.Fatal(err)\n}\nvar records []any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"read\",\n    ids,\n}, &records); err != nil {\n    log.Fatal(err)\n}\n// count the number of fields fetched by default\ncount := len(records)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Database Info - Ruby\nDESCRIPTION: This Ruby snippet retrieves information for a test database from demo.odoo.com using the XMLRPC::Client library.  The retrieved information includes the URL, database name, username, and password for accessing the test database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"xmlrpc/client\"\ninfo = XMLRPC::Client.new2('https://demo.odoo.com/start').call('start')\nurl, db, username, password = info['host'], info['database'], info['user'], info['password']\n```\n\n----------------------------------------\n\nTITLE: Hiding Columns on Mobile in Odoo with XML\nDESCRIPTION: This XML snippet hides a column on mobile devices using Odoo-specific and Bootstrap classes. It uses 'd-none' and 'd-lg-block' to control visibility based on device size, allowing column 1 to be visible only on larger screens. Dependencies include Odoo setup and understanding of Bootstrap grid system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n\n<section class=\"s_text_block o_cc o_cc1 o_colored_level pt16 pb16\" data-snippet=\"s_text_block\" name=\"Text\">\n   <div class=\"container s_allow_columns\">\n      <div class=\"row\">\n         <div class=\"col-12 col-lg-6 d-none d-lg-block o_snippet_mobile_invisible\">\n            Column 1\n         </div>\n         <div class=\"col-12 col-lg-6\">\n            Column 2\n         </div>\n      </div>\n   </div>\n</section>\n\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Asset Bundles\nDESCRIPTION: This snippet shows how to use the 'remove' operation to delete specific files from an asset bundle. This is helpful for ensuring that only the necessary assets are included and potential conflicts are avoided.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('remove', 'web/static/src/js/boot.js'),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Chatter to Odoo Form Views with XML\nDESCRIPTION: This snippet demonstrates the XML structure needed to integrate a chatter section into an Odoo form view. The chatter section is embedded into the form view of the 'business.trip' model, allowing users to interact with message followers and threads directly from the UI. The snippet assumes familiarity with XML and Odoo's modeling system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"business_trip_form\" model=\"ir.ui.view\">\n    <field name=\"name\">business.trip.form</field>\n    <field name=\"model\">business.trip</field>\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"Business Trip\">\n            <!-- Your usual form view goes here\n            ...\n            Then comes chatter integration -->\n            <div class=\"oe_chatter\">\n                <field name=\"message_follower_ids\" widget=\"mail_followers\"/>\n                <field name=\"message_ids\" widget=\"mail_thread\"/>\n            </div>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Implementing an IP Change Controller in Odoo\nDESCRIPTION: Example implementation of a controller that handles IP address change notifications on Odoo.sh. The controller sets up a route at '/_odoo.sh/ip-change' that receives the old and new IP addresses as parameters, logs the change, and can be extended to perform custom actions in response.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/frequent_technical_questions.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass IPChangeController(http.Controller):\n\n    @http.route('/_odoo.sh/ip-change', auth='public')\n    def ip_change(self, old=None, new=None):\n        _logger.info(\"IP address changed from %s to %s\", old, new)\n        # Then perform whatever action required for your use case, e.g., update an\n        # ir.config_parameter, send an email, contact an external firewall service's API, ...\n        return 'ok'\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Database Connection in INI File\nDESCRIPTION: Sets up Odoo to connect to a PostgreSQL server at 192.168.1.2:5432 using credentials and filters databases. This configures the database connection and access.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[options]\nadmin_passwd = mysupersecretpassword\ndb_host = 192.168.1.2\ndb_port = 5432\ndb_user = odoo\ndb_password = pwd\ndbfilter = ^mycompany.*$\n```\n\n----------------------------------------\n\nTITLE: Using markupsafe.Markup for Safe HTML Generation in Python\nDESCRIPTION: This snippet demonstrates how to use markupsafe.Markup to create safe HTML snippets by automatically escaping parameters in Python.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Markup('<em>Hello</em> ') + '<foo>'\nMarkup('<em>Hello</em> &lt;foo&gt;')\n>>> Markup('<em>Hello</em> %s') % '<foo>'\nMarkup('<em>Hello</em> &lt;foo&gt;')\n```\n\n----------------------------------------\n\nTITLE: Declaring View in Odoo - XML\nDESCRIPTION: This XML snippet demonstrates how to declare a custom view in the Odoo architecture by specifying the model and view structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"my_beautiful_view\" model=\"ir.ui.view\">\n    <field name=\"name\">my_view</field>\n    <field name=\"model\">my_model</field>\n    <field name=\"arch\" type=\"xml\">\n        <beautiful fieldFromTheArch=\"res.partner\"/>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Rating View Configuration in Odoo XML\nDESCRIPTION: XML configuration for rating views including action definition and form view inheritance to add rating statistics button. Defines the display of rating data in kanban, pivot, and graph views.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"rating_rating_action_my_model\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Customer Ratings</field>\n    <field name=\"res_model\">rating.rating</field>\n    <field name=\"view_mode\">kanban,pivot,graph</field>\n    <field name=\"domain\">[('res_model', '=', 'my_module.my_model'), ('res_id', '=', active_id), ('consumed', '=', True)]</field>\n</record>\n\n<record id=\"my_module_my_model_view_form_inherit_rating\" model=\"ir.ui.view\">\n    <field name=\"name\">my_module.my_model.view.form.inherit.rating</field>\n    <field name=\"model\">my_module.my_model</field>\n    <field name=\"inherit_id\" ref=\"my_module.my_model_view_form\"/>\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"//div[@name='button_box']\" position=\"inside\">\n            <button name=\"%(rating_rating_action_my_model)d\" type=\"action\"\n                    class=\"oe_stat_button\" icon=\"fa-smile-o\">\n                <field name=\"rating_count\" string=\"Rating\" widget=\"statinfo\"/>\n            </button>\n        </xpath>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding Server Action to Model Actions Menu in Odoo\nDESCRIPTION: XML configuration to add a server action that refuses all offers on properties. The action appears in the gear icon menu for estate.property model in list and form views.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_x_estate_property_refuse_all_offers\" model=\"ir.actions.server\">\n    <field name=\"name\">Refuse all offers</field>\n    <field name=\"model_id\" ref=\"estate.model_real_estate_property\"/>\n    <field name=\"state\">code</field>\n    <field name=\"binding_model_id\" ref=\"estate.model_real_estate_property\"/>\n    <field name=\"binding_view_types\">tree,form</field>\n    <field name=\"code\"><![CDATA[\nfor property in records:\n    property.x_offer_ids.write({'x_status': 'refused'})\n    ]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding website_sale Dependency in Odoo Manifest\nDESCRIPTION: This Python snippet updates the Odoo module's manifest file to include a dependency on the 'website_sale' module. This is necessary to integrate the academy module with Odoo's e-commerce functionality and make courses sellable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n\"'version': '0.1',\\n\\n    # any module necessary for this one to work correctly\\n    'depends': ['mail', 'website_sale'],\\n\\n    # always loaded\\n    'data': [\"\n```\n\n----------------------------------------\n\nTITLE: Using Patch with Getters and Setters\nDESCRIPTION: Demonstrates how to apply the patch function on an object utilizing getters and setters, leveraging the super keyword for inheritance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npatch(object, {\n  get number() {\n    return super.number / 2;\n  },\n  set number(value) {\n    super.number = value;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Barcodes with Odoo Mobile JavaScript\nDESCRIPTION: Provides a means to scan and capture barcode information using Odoo's `scanBarcode` method. It supports various barcode formats including EAN, UPC, QR codes, etc. The function returns the scanned `code`, and the mobile app is required for this feature.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.methods.scanBarcode().then(function(code){\n    if(code){\n        // Perform operation with the scanned code\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Parent Reference in Subviews Example\nDESCRIPTION: Demonstrates how to reference the parent record's fields when defining conditions in a subview of a relational field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"field_a\"/>\n<field name=\"x2m\">\n    <!-- sub-view -->\n    <form>\n        <field name=\"field_b\" invisible=\"parent.field_a\"/>\n    </form>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Sample Odoo Configuration File in INI Format\nDESCRIPTION: Example configuration file for Odoo showing the basic structure with database user and filter settings in the [options] section.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndb_user=odoo\ndbfilter=odoo\n```\n\n----------------------------------------\n\nTITLE: Translation Files Structure for Odoo Modules\nDESCRIPTION: A text example showing the directory structure for translation files within an Odoo module, including the template file (POT) and different language translations (PO files).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n|- idea/ # The module directory\n   |- i18n/ # Translation files\n      | - idea.pot # Translation Template (exported from Odoo)\n      | - fr.po # French translation\n      | - pt_BR.po # Brazilian Portuguese translation\n      | (...)\n```\n\n----------------------------------------\n\nTITLE: HomePage Widget Initialization and Start Method - JavaScript\nDESCRIPTION: This JavaScript snippet represents an Odoo widget extension that initializes a variable 'name' within the widget's context. The start method is defined but does not perform any operations, showcasing how to set context data when rendering a QWeb template.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    template: \"HomePageTemplate\",\n    init: function(parent) {\n        this._super(parent);\n        this.name = \"Mordecai\";\n    },\n    start: function() {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications from Python Code\nDESCRIPTION: This Python snippet illustrates how to trigger a notification display using the display_notification client action. The method constructs a dictionary with necessary parameters for the notification, ensuring messages are localized using `_`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# note that we call _(string) on the text to make sure it is properly translated.\ndef show_notification(self):\n    return {\n        'type': 'ir.actions.client',\n        'tag': 'display_notification',\n        'params': {\n            'title': _('Success'),\n            'message': _('Your signature request has been sent.'),\n            'sticky': False,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting a translatable string with t-set\nDESCRIPTION: This snippet demonstrates how to define a translatable string using the `t-set` directive in XML.  The text between the XML tags will be translatable. This allows for reuse of the translatable string in different locations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<t t-set=\\\"additional_title\\\">My Page Title Shown in the Browser Tab</t>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Execution Context for Profiling in Odoo\nDESCRIPTION: This code snippet demonstrates how to add execution context when profiling a method called multiple times in Odoo.  The `ExecutionContext` context manager allows breaking down the profiling results into multiple frames based on the current index, making analysis easier in tools like speedscope. It requires the `ExecutionContext` class to be available.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"for index in range(max_index):\n    with ExecutionContext(current_index=index):  # Identify each call in speedscope results.\n        do_stuff()\"\n```\n\n----------------------------------------\n\nTITLE: Using Action Service to Open Actions\nDESCRIPTION: A component method that uses the action service to open a configuration action\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useService } from \"@web/core/utils/hooks\";\n\nsetup() {\n    this.action = useService(\"action\");\n}\nopenSettings() {\n    this.action.doAction(\"base_setup.action_general_configuration\");\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Node - Odoo XML\nDESCRIPTION: This code shows how to use `position=\"replace\"` to replace the matched node with the provided XML content. The `$0` placeholder within the replacement content is substituted with the original matched node's XML, allowing wrapping of the original node.  An XPath expression is needed to identify the target node.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//field[@name='x_field']\\\" position=\\\"replace\\\">\\n    <div class=\\\"wrapper\\\">\\n        $0\\n    </div>\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Using Background Images in Odoo\nDESCRIPTION: This snippet describes how to set a background image for a section in an Odoo template. The image is referenced via a style attribute in the section tag, using the image ID declared earlier. This allows for dynamic background image setting based on the image's ID.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<section style=\"background-image: url('/web/image/website_airproof.img_about_01');\">\n</section>\n```\n\n----------------------------------------\n\nTITLE: Declare Font Configurations in primary_variables.scss\nDESCRIPTION: This snippet defines the font configurations for a theme in `primary_variables.scss`.  It sets the font family, optional URL (for Google Fonts), and properties like font-size using website-value-key.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n   $o-theme-font-configs: (\n      <font-name>: (\n         'family': <css font family list>,\n         'url' (optional): <related part of Google fonts URL>,\n         'properties' (optional): (\n            <font-alias>: (\n               <website-value-key>: <value>,\n               ...,\n            ),\n         ...,\n      )\n   )\n```\n\n----------------------------------------\n\nTITLE: Explicit JavaScript String Translation\nDESCRIPTION: Example of marking JavaScript strings for translation using odoo.web._t() function.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/translations.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntitle = _t(\"Bank Accounts\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Odoo Icon in HTML\nDESCRIPTION: Demonstrates how to implement an Odoo custom icon in HTML using the 'oi' class together with the specific icon class. This is the basic pattern for using any of Odoo's custom icons in the interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/icons.rst#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"oi oi-odoo\"/>\n```\n\n----------------------------------------\n\nTITLE: Deleting Default Menu Items in Odoo using XML\nDESCRIPTION: This snippet demonstrates how to remove default menu items in Odoo using XML. It targets specific menu items based on their URL and website ID, removing them from the website's menu structure. The `delete` tag with `model` and `search` attributes is used to locate and remove the specified menu entries.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<!-- Contact us -->\n<delete model=\"website.menu\" search=\"[('url','in', ['/', '/contactus']),\n('website_id', '=', 1)]\"/>\n\n<!-- Shop -->\n<delete model=\"website.menu\" search=\"[('url','in', ['/', '/shop']),\n('website_id', '=', 1)]\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Using Standard Shapes in XML\nDESCRIPTION: This XML snippet demonstrates how to add a standard background shape to a website section using the `data-oe-shape-data` attribute. The `shape` key specifies the location of the SVG file within the web_editor directory. The shape's appearance can be further customized using CSS classes such as `o_we_flip_x` and `o_we_flip_y` to flip the shape horizontally or vertically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06'}\">\n       <div class=\"o_we_shape o_web_editor_Zigs_06\"/>\n       <div class=\"container\">\n           <!-- Content -->\n        </div>\n   </section>\n```\n\n----------------------------------------\n\nTITLE: Creating We-Range Slider in XML for Odoo Website Theme\nDESCRIPTION: Shows how to create a we-range slider option for selecting image spacing classes. Each step is separated by a pipe character.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<we-range\n   string=\"Images Spacing\"\n   data-select-class=\"o_spc-none|o_spc-small|o_spc-medium|o_spc-big\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Search View Structure in Odoo XML\nDESCRIPTION: Demonstrates the basic structure of a search view in Odoo. Search views are used to filter content in other view types like list and graph views.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    ...\n</search>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom JavaScript Methods for Odoo Website Theme Options\nDESCRIPTION: Demonstrates how to create a JavaScript class with custom methods for website theme options, including both built-in and custom methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport options from 'web_editor.snippets.options';\n\nconst AirproofSnippet = options.Class.extend({\n   // Built-in method example\n   start: function() {\n      //...\n   }\n   // Custom method example\n   customMethodName: function() {\n      //...\n   }\n});\n\noptions.registry.AirproofSnippet = AirproofSnippet;\n\nexport default AirproofSnippet;\n```\n\n----------------------------------------\n\nTITLE: Defining Population Methods for Odoo Models in Python\nDESCRIPTION: Example of defining population methods and attributes for an Odoo model to enable database population. Includes _populate_sizes, _populate_dependencies, _populate_factories, and _populate methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tools import populate\n\nclass CustomModel(models.Model):\n    _inherit = \"custom.some_model\"\n    _populate_sizes = {\"small\": 100, \"medium\": 2000, \"large\": 10000}\n    _populate_dependencies = [\"custom.some_other_model\"]\n\n    def _populate_factories(self):\n        some_other_ids = self.env.registry.populated_models[\"custom.some_other_model\"]\n\n        def get_some_field(values=None, random=None, **kwargs):\n            field_1 = values['field_1']\n            if field_1 in [value2, value3]:\n                return random.choice(some_field_values)\n            return False\n\n        return [\n            (\"field_1\", populate.randomize([value1, value2, value3])),\n            (\"field_2\", populate.randomize([value_a, value_b], [0.5, 0.5])),\n            (\"some_other_id\", populate.randomize(some_other_ids)),\n            (\"some_field\", populate.compute(get_some_field, seed=\"some_field\")),\n            ('active', populate.cartesian([True, False])),\n        ]\n\n    def _populate(self, size):\n        records = super()._populate(size)\n        records.do_something()\n        return records\n```\n\n----------------------------------------\n\nTITLE: Defining Field Structure for Estate Property Offers\nDESCRIPTION: Table defining the fields, their types, attributes and possible values for the estate property offers model. Includes price, status, partner_id and property_id fields with their respective configurations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n========================= ================================ ============= =================\nField                     Type                             Attributes    Values\n========================= ================================ ============= =================\nprice                     Float\nstatus                    Selection                        no copy       Accepted, Refused\npartner_id                Many2one (``res.partner``)       required\nproperty_id               Many2one (``estate.property``)   required\n========================= ================================ ============= =================\n\n```\n\n----------------------------------------\n\nTITLE: ActionSwiper Usage in XML\nDESCRIPTION: This snippet demonstrates how to use the `ActionSwiper` component in an XML template. The component wraps a target element and enables actions to be performed when the element is swiped horizontally. The `onLeftSwipe` and `onRightSwipe` attributes define the actions to be triggered in each direction.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <ActionSwiper onLeftSwipe=\"Object\" onRightSwipe=\"Object\">\n    <SomeElement/>\n  </ActionSwiper>\n```\n\n----------------------------------------\n\nTITLE: Transformed Odoo Module with Alias\nDESCRIPTION: This code snippet shows the transformed code for an Odoo module with an alias. It demonstrates how the `odoo.define` function is used to create an alias that re-exports the default value of the aliased module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\n  odoo.define(`web.someName`, function(require) {\n      return require('@web/file_a')[Symbol.for(\"default\")];\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Model in Odoo\nDESCRIPTION: This Python code defines a simple Odoo model named 'academy.teachers' with a 'name' field. It imports necessary modules from the 'odoo' library. The model represents a database table for storing teacher information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"from odoo import models, fields, api\n\nclass Teachers(models.Model):\n    _name = 'academy.teachers'\n\n    name = fields.Char()\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Odoo Website Templates with XPath in XML\nDESCRIPTION: This XML snippet demonstrates how to use XPath to replace or modify the content structure within Odoo website templates. It inherits the Odoo layout and specifically targets a copyright footer section for customization. Dependencies include having a valid Odoo setup and access to the XML view files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n\n<template id=\"copyright\" inherit_id=\"website.layout\">\n   <xpath expr=\"//div[hasclass('o_footer_copyright')]\" position=\"replace\">\n      <div class=\"o_footer_copyright\" data-name=\"Copyright\">\n         <!-- Content -->\n      </div>\n   </xpath>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Extending the Gallery View with Dynamic Components\nDESCRIPTION: This snippet illustrates how to extend the existing Gallery Renderer in Odoo by importing the gallery view object, allowing the customization of its behavior and appearance via dynamic sub-components.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @odoo-module */\n\nimport { registry } from '@web/core/registry';\nimport { galleryView } from '@awesome_gallery/gallery_view';\nimport { GalleryRenderer } from '@awesome_gallery/gallery_renderer';\n\nexport class MyExtendedGalleryRenderer extends GalleryRenderer {\n   static template = \"my_module.MyExtendedGalleryRenderer\";\n   setup() {\n      super.setup();\n      console.log(\"my gallery renderer extension\");\n   }\n}\n\nregistry.category(\"views\").add(\"my_gallery\", {\n   ...galleryView,\n   Renderer: MyExtendedGalleryRenderer,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Chatter Fields to Course Form View in Odoo\nDESCRIPTION: This XML snippet adds the necessary fields ('message_follower_ids' and 'message_ids') to the 'academy.courses' form view to display the Chatter discussion thread at the bottom of the form. These fields enable users to follow discussions and leave messages related to specific courses.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"academy_course_form\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy courses: form</field>\\n    <field name=\\\"model\\\">academy.courses</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <form>\\n            <sheet>\\n                <field name=\\\"name\\\"/>\\n                <field name=\\\"teacher_id\\\"/>\\n            </sheet>\\n            <div class=\\\"oe_chatter\\\">\\n                <field name=\\\"message_follower_ids\\\" widget=\\\"mail_followers\\\"/>\\n                <field name=\\\"message_ids\\\" widget=\\\"mail_thread\\\"/>\\n            </div>\\n        </form>\\n    </field>\\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Product Categories Sidebar in Odoo\nDESCRIPTION: Modifies the 'Product Categories' view to be active by default, ensuring it is visible upon installation of the Academy module. This involves creating a record in 'ir.ui.view' model and setting 'active' to True.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website_sale.products_categories\" model=\"ir.ui.view\">\n    <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail Alias in XML Form View\nDESCRIPTION: XML form view configuration to expose mail alias settings in the business trip form. This allows users to configure the email alias address and permissions directly from the interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<page string=\"Emails\">\n    <group name=\"group_alias\">\n        <label for=\"alias_name\" string=\"Email Alias\"/>\n        <div name=\"alias_def\">\n            <!-- display a link while in view mode and a configurable field\n            while in edit mode -->\n            <field name=\"alias_id\" class=\"oe_read_only oe_inline\"\n                    string=\"Email Alias\" required=\"0\"/>\n            <div class=\"oe_edit_only oe_inline\" name=\"edit_alias\"\n                 style=\"display: inline;\" >\n                <field name=\"alias_name\" class=\"oe_inline\"/>\n                @\n                <field name=\"alias_domain\" class=\"oe_inline\" readonly=\"1\"/>\n            </div>\n        </div>\n        <field name=\"alias_contact\" class=\"oe_inline\"\n                string=\"Accept Emails From\"/>\n    </group>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Controller Template for Odoo - XML\nDESCRIPTION: This XML snippet defines the template structure for the BeautifulController, including Layout and props.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"my_module.View\">\n        <Layout display=\"props.display\" className=\"'h-100 overflow-auto'\">\n            <t t-component=\"props.Renderer\" records=\"model.records\" propsYouWant=\"'Hello world'\"/>\n        </Layout>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Getting Odoo Server Version - Ruby\nDESCRIPTION: This Ruby snippet connects to the xmlrpc/2/common endpoint of an Odoo instance and retrieves the server's version using the XMLRPC::Client library. It requires the 'url' variable to be defined with the Odoo instance's URL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ncommon = XMLRPC::Client.new2(\"#{url}/xmlrpc/2/common\")\ncommon.call('version')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: This snippet shows how to configure Git to identify yourself as the author of future contributions. It sets your username and email, which are essential for Git to associate your changes with your GitHub account.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"youremail@example.com\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript useAssets React Hook\nDESCRIPTION: React hook for loading assets within Odoo components, typically used in the onWillStart lifecycle method. It internally calls the loadAssets function with the provided assets configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuseAssets(assets)\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary Creation and Update\nDESCRIPTION: This Python snippet demonstrates best practices for creating and updating dictionaries in Python, specifically within the context of Odoo development. It emphasizes the use of dictionary literals for initialization and the `update()` method for modifying existing dictionaries, improving readability and efficiency.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# -- creation empty dict\nmy_dict = {}\nmy_dict2 = dict()\n\n# -- creation with values\n# bad\nmy_dict = {}\nmy_dict['foo'] = 3\nmy_dict['bar'] = 4\n# good\nmy_dict = {'foo': 3, 'bar': 4}\n\n# -- update dict\n# bad\nmy_dict['foo'] = 3\nmy_dict['bar'] = 4\nmy_dict['baz'] = 5\n# good\nmy_dict.update(foo=3, bar=4, baz=5)\nmy_dict = dict(my_dict, **my_dict2)\n```\n\n----------------------------------------\n\nTITLE: Odoo CSV Data File Example\nDESCRIPTION: This snippet shows an example of the first lines of a CSV data file used to define country states in Odoo. The first row defines the fields, including the special `id` field for external identifiers, and subsequent rows create or update records based on this structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndata/res.country.state.csv\n```\n\n----------------------------------------\n\nTITLE: Modifying Attributes - Odoo XML\nDESCRIPTION: This snippet demonstrates how to modify attributes of a matched node using `position=\"attributes\"`.  It allows adding, removing, or modifying attribute values.  It relies on nested `<attribute>` elements with `name`, `add`, `remove`, and `separator` attributes to control the modification process.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n\"<field name=\\\"x_field\\\" position=\\\"attributes\\\">\\n    <attribute name=\\\"invisible\\\">True</attribute>\\n    <attribute name=\\\"class\\\" add=\\\"mt-1 mb-1\\\" remove=\\\"mt-2 mb-2\\\" separator=\\\" \\\"/>\\n</field>\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Structure in XML - Basic Example\nDESCRIPTION: Shows the basic structure of a table in Odoo reports with header and body sections, demonstrating how to iterate over records using t-foreach.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- table root element -->\n<table>\n    <!-- thead = table header, the row with column titles -->\n    <thead>\n        <!-- table row element -->\n        <tr>\n            <!-- table header element -->\n            <th>Name</th>\n            <th>Price</th>\n        </tr>\n    </thead>\n    <!-- table body, the main content -->\n    <tbody>\n        <!-- we create a row for each subrecord with t-foreach -->\n        <tr t-foreach=\"record.some_relation_ids\" t-as=\"line\">\n            <!-- for each line, we output the name and price as table cells -->\n            <td t-out=\"line.name\"/>\n            <td t-out=\"line.price\"/>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating QWeb Template for Application\nDESCRIPTION: XML template that sets up the HTML structure and includes necessary assets and configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <template id=\"your_module.standalone_app\">&lt;!DOCTYPE html&gt;\n        <html>\n            <head>\n                <script type=\"text/javascript\">\n                    var odoo = {\n                        csrf_token: \"<t t-nocache=\\\"The csrf token must always be up to date.\\\" t-esc=\\\"request.csrf_token(None)\\\"/>\",\n                        debug: \"<t t-out=\\\"debug\\\"/>\",\n                        __session_info__: <t t-esc=\"json.dumps(session_info)\"/>,\n                    };\n                </script>\n                <t t-call-assets=\"your_module.assets_standalone_app\" />\n            </head>\n            <body/>\n        </html>\n    </template>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Connection - Java\nDESCRIPTION: This snippet demonstrates how to configure the connection parameters to an Odoo instance using Java.  The URL, database name, username, and password must be replaced with the correct Odoo instance details.  It initializes final string variables for these parameters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal String url = <insert server URL>,\n                     db = <insert database name>,\n               username = \"admin\",\n               password = <insert password for your admin user (default: admin)>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Text in Odoo XML\nDESCRIPTION: This snippet demonstrates how to set the 'string' attribute for a button in an Odoo XML view. The 'string' attribute defines the button's text when there's no icon, or serves as alt text for the icon. It's an optional attribute with an empty string as the default value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/button_attribute_string.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"action_create_new\" string=\"Create document\"/>\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Outstanding Account Method (Bank Statement Reconciliation)\nDESCRIPTION: Shows the journal entry created when reconciling the bank statement with the check payment using the Outstanding Account method. The entry moves funds from Outstanding Receipts to Bank.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/checks.rst#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------------+-------------------+----------+----------+\n| Account             | Statement Match   | Debit    | Credit   |\n+=====================+===================+==========+==========+\n| Outstanding Receipts|        X          |          | 100.00   |\n+---------------------+-------------------+----------+----------+\n| Bank                |                   | 100.00   |          |\n+---------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: SCSS Switching Colors Mapping\nDESCRIPTION: This SCSS snippet demonstrates how to switch colors in the existing color map of a shape. The `change-shape-colors-mapping` function is used to modify the color mapping of the 'Zigs/06' shape, replacing color 4 with color 3 and color 5 with a specific RGB value.  This allows for overriding default palette colors with custom ones.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n    $o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: rgb(187, 27, 152)))\n```\n\n----------------------------------------\n\nTITLE: Declaring a Theme Page in Odoo\nDESCRIPTION: This XML snippet demonstrates the declaration of a theme-specific page in Odoo.  It creates a `website.page` record, setting various fields such as name, `is_published`, key, URL, website ID, type, and architecture (arch). The `arch` field defines the page's structure using an XML template, calling `website.layout`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n   <data noupdate=\"1\">\n      <record id=\"page_about_us\" model=\"website.page\">\n            <field name=\"name\">About us</field>\n            <field name=\"is_published\" eval=\"True\"/>\n            <field name=\"key\">website_airproof.page_about_us</field>\n            <field name=\"url\">/about-us</field>\n            <field name=\"website_id\" eval=\"1\" />\n            <field name=\"type\">qweb</field>\n            <field name=\"arch\" type=\"xml\">\n               <t t-name=\"website_airproof.page_about_us\">\n                  <t t-call=\"website.layout\">\n                     <div id=\"wrap\" class=\"oe_structure\">\n                        <!-- Content -->\n                     </div>\n                  </t>\n               </t>\n            </field>\n      </record>\n   </data>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Extending HomePage Widget with QWeb Template Integration - JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the HomePage widget in Odoo to incorporate a QWeb template named 'HomePageTemplate'. The start method is defined to initialize the widget and set the name attribute. The QWeb template is rendered before the start method is invoked.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    template: \"HomePageTemplate\",\n    start: function() {\n        ...\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template from a Controller in Odoo\nDESCRIPTION: This Python code shows how to render a QWeb template named 'academy.index' from an Odoo controller. It passes a dictionary containing a list of teachers' names as the template context. The controller is part of the 'Academy' module and requires the 'odoo' library.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"class Academy(http.Controller):\n\n    @http.route('/academy/academy/', auth='public')\n    def index(self, **kw):\n        return http.request.render('academy.index', {\n            'teachers': [\\\"Diana Padilla\\\", \\\"Jody Caroll\\\", \\\"Lester Vaughn\\\"],\n        })\"\n```\n\n----------------------------------------\n\nTITLE: Todo Object Structure in JavaScript\nDESCRIPTION: Defines the structure of a todo item object with id, description and completion status.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 3, description: \"buy milk\", isCompleted: false }\n```\n\n----------------------------------------\n\nTITLE: Creating Card Component with Props\nDESCRIPTION: An example of creating a reusable Card component that accepts title and content props\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Card title=\"'my title'\" content=\"'some content'\"/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Constructor in Owl Component (Javascript)\nDESCRIPTION: This snippet demonstrates the incorrect way to initialize an Owl component in Odoo. The `constructor` should not be directly used for initialization logic. Instead, components should use the `setup` method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// incorrect. Do not do that!\n    class IncorrectComponent extends Component {\n        constructor(parent, props) {\n            // initialize component here\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Exim Mail Server for Odoo Gateway\nDESCRIPTION: Configuration snippet for Exim mail server to route all incoming emails through the Odoo mailgate script. This setup processes all incoming mail through the gateway script.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/email_gateway.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*: |/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean Field Usage in View\nDESCRIPTION: Example of how to use the custom boolean field in an Odoo view definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"somefield\" widget=\"late_boolean\"/>\n```\n\n----------------------------------------\n\nTITLE: Settings: Declaring a Block of Settings\nDESCRIPTION: This XML snippet demonstrates how to group settings together using the `<block>` element within a settings view.  The `title` attribute defines the title of the group, and the `help` attribute can provide a description.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n        ...\n        <block title=\"TITLE\">\n            ...\n        </block>\n        ...\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Hiding Price in Product View if Zero in Odoo\nDESCRIPTION: Customizes the Odoo 'product item' template to hide the price if it is zero. This is achieved by extending the existing template with a new view that uses an 'xpath' expression to conditionally display the price.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"product_item_hide_no_price\" inherit_id=\"website_sale.products_item\">\n    <xpath expr=\"//div[hasclass('product_price')]/b\" position=\"attributes\">\n        <attribute name=\"t-if\">product.price &gt; 0</attribute>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inserting Product Images in Odoo Reports Using XML\nDESCRIPTION: This snippet demonstrates how to insert a product image as an inline element using the t-field directive. The image is configured with specific options for width and CSS classes to ensure proper display. It relies on Odoo's XML templating features.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<span t-field=\"line.product_id.image_128\" t-options-widget=\"image\" t-options-width=\"64px\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pager Component in Owl XML\nDESCRIPTION: Example of using the Pager component for handling pagination with offset, limit and total count.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<Pager offset=\"0\" limit=\"80\" total=\"50\" onUpdate=\"doSomething\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Odoo Server Version - PHP\nDESCRIPTION: This PHP snippet connects to the xmlrpc/2/common endpoint of an Odoo instance and retrieves the server's version using the Ripcord library. It requires the Ripcord library and the 'url' variable to be defined with the Odoo instance's URL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$common = ripcord::client(\"$url/xmlrpc/2/common\");\n$common->version();\n```\n\n----------------------------------------\n\nTITLE: UAE Chart of Accounts Required Entries\nDESCRIPTION: Table listing essential account codes, names and types that must remain active in the UAE localization package.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_arab_emirates.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n        :header-rows: 1\n\n        * - Code\n          - Account Name\n          - Type\n        * - 102011\n          - Accounts Receivable\n          - Receivable\n        * - 102012\n          - Accounts Receivable (POS)\n          - Receivable\n        * - 201002\n          - Payables\n          - Payable\n        * - 101004\n          - Bank\n          - Bank and Cash\n        * - 105001\n          - Cash\n          - Bank and Cash\n        * - 100001\n          - Liquidity Transfer\n          - Current Assets\n        * - 101002\n          - Outstanding Receipts\n          - Current Assets\n        * - 101003\n          - Outstanding Payments\n          - Current Assets\n        * - 104041\n          - VAT Input\n          - Current Assets\n        * - 100103\n          - VAT Receivable\n          - Non-current Assets\n        * - 101001\n          - Bank Suspense Account\n          - Current Liabilities\n        * - 201017\n          - VAT Output\n          - Current Liabilities\n        * - 202001\n          - End of Service Provision\n          - Current Liabilities\n        * - 202003\n          - VAT Payable\n          - Non-current Liabilities\n        * - 999999\n          - Undistributed Profits/Losses\n          - Current Year Earnings\n        * - 400003\n          - Basic Salary\n          - Expenses\n        * - 400004\n          - Housing Allowance\n          - Expenses\n        * - 400005\n          - Transportation Allowance\n          - Expenses\n        * - 400008\n          - End of Service Indemnity\n          - Expenses\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Connection - PHP\nDESCRIPTION: This snippet demonstrates how to configure the connection parameters to an Odoo instance using PHP.  The URL, database name, username, and password must be replaced with the correct Odoo instance details.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = <insert server URL>;\n$db = <insert database name>;\n$username = \"admin\";\n$password = <insert password for your admin user (default: admin)>;\n```\n\n----------------------------------------\n\nTITLE: Creating Contact with Odoo Mobile JavaScript\nDESCRIPTION: Illustrates adding a new contact to the device with detailed contact information using Odoo's mobile JavaScript API's `addContact` method. The argument is a dictionary containing fields such as `name`, `mobile`, `email`, etc., describing the contact. The use of the mobile app is necessary.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar contact = {\n    'name': 'Michel Fletcher',\n    'mobile': '9999999999',\n    'phone': '7954856587',\n    'fax': '765898745',\n    'email': 'michel.fletcher@agrolait.example.com',\n    'website': 'http://www.agrolait.com',\n    'street': '69 rue de Namur',\n    'street2': false,\n    'country_id': [21, 'Belgium'],\n    'state_id': false,\n    'city': 'Wavre',\n    'zip': '1300',\n    'parent_id': [8, 'Agrolait'],\n    'function': 'Analyst',\n    'image': '<<BASE 64 Image Data>>'\n};\nmobile.methods.addContact(contact);\n```\n\n----------------------------------------\n\nTITLE: Integer Validation Route in Python\nDESCRIPTION: Route controller with integer validation, converts URL parameter to integer type and returns type information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<int:id>/', auth='public', website=True)\ndef teacher(self, id):\n    return '<h1>{} ({})</h1>'.format(id, type(id).__name__)\n```\n\n----------------------------------------\n\nTITLE: QWeb Template Definition\nDESCRIPTION: Defines a QWeb XML template for rendering HTML content in the HomePage widget.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePageTemplate\">\n        <div style=\"background-color: red;\">This is some simple HTML</div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: QWeb Template for PDF Report in Odoo\nDESCRIPTION: XML code for a basic QWeb template used in Odoo reports. The template loops through records (docs) and applies the external layout with a title on each page.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"web.html_container\">\n    <t t-foreach=\"docs\" t-as=\"o\">\n        <t t-call=\"web.external_layout\">\n            <div class=\"page\">\n                <h2>Report title</h2>\n            </div>\n        </t>\n    </t>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Field Template Definition in XML\nDESCRIPTION: QWeb template defining the HTML structure for the FieldChar2 widget, conditionally rendering an input field based on read-only state.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"FieldChar2\">\n    <div class=\"oe_field_char2\">\n        <t t-if=\"! widget.get('effective_readonly')\">\n            <input type=\"text\"></input>\n        </t>\n    </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Invoice Titles in XML\nDESCRIPTION: This snippet defines conditional titles for proforma invoices, quotations, and orders based on the document state. It utilizes the Odoo templating syntax to check different states and output the appropriate title. The main dependency is the Odoo framework.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<span t-if=\"env.context.get('proforma', False) or is_pro_forma\">Pro-Forma Invoice # </span>\n<span t-elif=\"doc.state in ['draft','sent']\">Quotation # </span>\n<span t-else=\"\">Order # </span>\n<span t-field=\"doc.name\">SO0000</span>\n```\n\n----------------------------------------\n\nTITLE: Illustrating l10n Module Directory Structure\nDESCRIPTION: This snippet shows the recommended file structure for an Odoo localization module. It highlights key directories like ``data``, ``views``, ``demo``, and ``models``, as well as the placement of essential files like ``__manifest__.py`` and ``__init__.py``, which dictate how the module is organized and functions within Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/accounting_localization.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nl10n_xx\n├── data\n│   ├── template\n│   │   ├── account.account-xx.csv\n│   │   ├── account.group-xx.csv\n│   │   └── account.tax.group-xx.csv\n│   └── other_data.xml\n├── views\n│   └── xxxmodel_views.xml\n├── demo\n│   └── demo_company.xml\n├── models\n│   ├── template_xx.py\n│   └── __init__.py\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Database Info - Go\nDESCRIPTION: This Go snippet retrieves information for a test database from demo.odoo.com using the github.com/kolo/xmlrpc library. The retrieved information includes the URL, database name, username, and password for accessing the test database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient, err := xmlrpc.NewClient(\"https://demo.odoo.com/start\", nil)\nif err != nil {\n    log.Fatal(err)\n}\ninfo := map[string]string{}\nclient.Call(\"start\", nil, &info)\nurl = info[\"host\"].(string)\ndb = info[\"database\"].(string)\nusername = info[\"user\"].(string)\npassword = info[\"password\"].(string)\n```\n\n----------------------------------------\n\nTITLE: Using t-cache and t-nocache in QWeb Templates\nDESCRIPTION: This example demonstrates the usage of t-cache for caching static content and t-nocache for dynamic content within a QWeb template. It shows how to keep a view counter dynamic while caching other parts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<section>\n    <article t-cache=\"record\">\n        <title><t t-out=\"record.name\"/> <i t-nocache=\"\">(views: <t t-out=\"counter\"/>)</i></titlle>\n        <content t-out=\"record.description\"/>\n    </article>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Chart of Accounts Structure Table\nDESCRIPTION: RST table showing the structure of account types organized by report categories including Balance Sheet, Profit & Loss, and Other categories.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/chart_of_accounts.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+---------------+--------------+-------------------------+\n| Report        | Category     | Account Types           |\n+===============+==============+=========================+\n| Balance Sheet | Assets       | Receivable              |\n|               |              +-------------------------+\n|               |              | Bank and Cash           |\n|               |              +-------------------------+\n|               |              | Current Assets          |\n|               |              +-------------------------+\n|               |              | Non-current Assets      |\n|               |              +-------------------------+\n|               |              | Prepayments             |\n|               |              +-------------------------+\n|               |              | Fixed Assets            |\n|               +--------------+-------------------------+\n|               | Liabilities  | Payable                 |\n|               |              +-------------------------+\n|               |              | Credit Card             |\n|               |              +-------------------------+\n|               |              | Current Liabilities     |\n|               |              +-------------------------+\n|               |              | Non-current Liabilities |\n|               +--------------+-------------------------+\n|               | Equity       | Equity                  |\n|               |              +-------------------------+\n|               |              | Current Year Earnings   |\n+---------------+--------------+-------------------------+\n| Profit & Loss | Income       | Income                  |\n|               |              +-------------------------+\n|               |              | Other Income            |\n|               +--------------+-------------------------+\n|               | Expense      | Expense                 |\n|               |              +-------------------------+\n|               |              | Depreciation            |\n|               |              +-------------------------+\n|               |              | Cost of Revenue         |\n+---------------+--------------+-------------------------+\n|Other          | Other        | Off-Balance Sheet       |\n+---------------+--------------+-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Content in Odoo\nDESCRIPTION: This snippet provides an example of embedding video content within Odoo. It illustrates how to set up a div container with attributes for the video source and expression, facilitating rich media implementation on the site.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"media_iframe_video\" data-oe-expression=\"...\">\n    <div class=\"css_editable_mode_display\">&nbsp;</div>\n    <div class=\"media_iframe_video_size\" contenteditable=\"false\">&nbsp;</div>\n    <iframe src=\"...\"\n        frameborder=\"0\"\n        contenteditable=\"false\"\n        allowfullscreen=\"allowfullscreen\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Template Groups with Custom Categories in Odoo\nDESCRIPTION: This XML snippet shows how to extend the default template groups by adding a custom 'Airproof' category. It uses inheritance to insert the new group after the existing 'custom' group.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_pages_template_groups\" inherit_id=\"website.new_pages_template_groups\" name=\"Airproof - New Page Template Groups\">\n   <xpath expr=\"//div[@id='custom']\" position=\"after\">\n      <div id=\"airproof\">Airproof</div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model and Field in PHP\nDESCRIPTION: This snippet shows how to create a custom model, add a custom field, create a record, and read data using PHP. It uses the 'execute_kw' method to interact with Odoo's XML-RPC API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$id = $models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(\n    'name' => \"Custom Model\",\n    'model' => 'x_custom',\n    'state' => 'manual'\n)));\n$models->execute_kw($db, $uid, $password, 'ir.model.fields', 'create', array(array(\n    'model_id' => $id,\n    'name' => 'x_name',\n    'ttype' => 'char',\n    'state' => 'manual',\n    'required' => true\n)));\n$record_id = $models->execute_kw($db, $uid, $password, 'x_custom', 'create', array(array('x_name' => \"test record\")));\n$models->execute_kw($db, $uid, $password, 'x_custom', 'read', array(array($record_id)));\n```\n\n----------------------------------------\n\nTITLE: Computed Field with Relational Dependency\nDESCRIPTION: Shows how to create a computed field that depends on a related model's field using dot notation for path traversal\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndescription = fields.Char(compute=\"_compute_description\")\npartner_id = fields.Many2one(\"res.partner\")\n\n@api.depends(\"partner_id.name\")\ndef _compute_description(self):\n    for record in self:\n        record.description = \"Test for partner %s\" % record.partner_id.name\n```\n\n----------------------------------------\n\nTITLE: Multi-company Consistency Check Implementation\nDESCRIPTION: Shows how to implement multi-company consistency checks using _check_company_auto and check_company attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/company.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass Record(models.Model):\n    _name = 'record.shareable'\n    _check_company_auto = True\n\n    company_id = fields.Many2one('res.company')\n    other_record_id = fields.Many2one('other.record', check_company=True)\n```\n\n----------------------------------------\n\nTITLE: Declare custom font file in __manifest__.py\nDESCRIPTION: This snippet showcases how to declare a custom font SCSS file in the `__manifest__.py` file.  This makes the custom font available for use within the website theme by adding it to frontend assets.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n   'assets': {\n      'web.assets_frontend': [\n         'website_airproof/static/src/scss/font.scss',\n      ],\n   },\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes with t-att Directive - XML\nDESCRIPTION: This XML snippet demonstrates the t-att directive to dynamically set the value of an input element's value attribute based on a JavaScript expression, allowing for interactive form components.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    Input your name:\n    <input type=\"text\" t-att-value=\"defaultName\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: XPath Example for Modifying Website Layout\nDESCRIPTION: This snippet demonstrates how to use XPath to insert content before the header of a website layout. The `xpath` element targets the `header` element using the `//header` expression and inserts the specified content before it using `position=\"before\"`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<template id=\\\"layout\\\" inherit_id=\\\"website.layout\\\" name=\\\"Welcome Message\\\">\\n   <xpath expr=\\\"//header\\\" position=\\\"before\\\">\\n      <!-- Content -->\\n   </xpath>\\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Window Action\nDESCRIPTION: This snippet demonstrates how to define a window action for Odoo, allowing the presentation of views of a model, such as 'res.partner'. It specifies the model, view types, domain, and target options for the action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ir.actions.act_window\",\n    \"res_model\": \"res.partner\",\n    \"views\": [[False, \"tree\"], [False, \"form\"]],\n    \"domain\": [[\"customer\", \"=\", true]],\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Company Logo in Odoo\nDESCRIPTION: This snippet shows how to declare a company logo as part of the Odoo website. The logo is included in the 'images.xml' file, specifying it as a base64 file. The 'logo' field is used to store the image, allowing it to be dynamically set within website templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.default_website\" model=\"website\">\n    <field name=\"logo\" type=\"base64\" file=\"website_airproof/static/src/img/content/logo.png\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Variables in QWeb\nDESCRIPTION: This snippet describes the `t-set` directive which allows setting variables within QWeb templates. The `t-value` attribute evaluates an expression whose result is stored in the designated variable. If `t-value` is absent, the node’s body is used instead. This facilitates memoizing computations and naming data for reuse. The main prerequisite is the Odoo environment that interprets QWeb syntax. The primary function is to set and later use variables within templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"foo\" t-value=\"2 + 1\"/>\n<t t-out=\"foo\"/>\n```\n\n----------------------------------------\n\nTITLE: Instantiating Building Blocks for Page Template in Odoo\nDESCRIPTION: These XML snippets demonstrate how to instantiate building blocks for a page template in Odoo. Each template inherits from a specific snippet and sets the `primary` attribute to `True`. This creates instances of the snippets for use in the page template.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_page_template_s_airproof_text_block_h1\" inherit_id=\"website_airproof.s_airproof_text_block_h1\" primary=\"True\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_page_template_airproof_faq_s_title\" inherit_id=\"website.s_title\" primary=\"True\"/>\n```\n\n----------------------------------------\n\nTITLE: Using t-call to Invoke Sub-Templates - XML\nDESCRIPTION: This XML snippet showcases the t-call directive which is used to call and render a sub-template within the existing template structure. It demonstrates how templates can inherit their rendering context.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"A\">\n    <div class=\"i-am-a\">\n        <t t-call=\"B\"/>\n    </div>\n</t>\n<t t-name=\"B\">\n    <div class=\"i-am-b\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context for Button Action in Odoo XML View\nDESCRIPTION: This snippet demonstrates how to use the context attribute in a button element to pass additional data when the button action is triggered. The context is defined as a Python expression that evaluates to a dictionary, allowing for dynamic value assignment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/button_attribute_context.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"button_confirm\" type=\"object\" context=\"{'BUSINESS_KEY': ANY}\" string=\"LABEL\"/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QWeb Template Scoping with t-cache in Python\nDESCRIPTION: This snippet illustrates how t-cache affects scoping of variables set with t-set in QWeb templates. It shows the difference in behavior between cached and non-cached sections.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    <t t-set=\"a\" t-value=\"1\"/>\n    <inside>\n        <t t-set=\"a\" t-value=\"2\"/>\n        <t t-out=\"a\"/>\n    </inside>\n    <outside t-out=\"a\"/>\n\n    <t t-set=\"b\" t-value=\"1\"/>\n    <inside t-cache=\"True\">\n        <t t-set=\"b\" t-value=\"2\"/>\n        <t t-out=\"b\"/>\n    </inside>\n    <outside t-out=\"b\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkout API URL Example\nDESCRIPTION: Example URL structure for setting up the Checkout API endpoint with a custom prefix.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/adyen.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://yourprefix-checkout-live.adyenpayments.com/checkout\n```\n\n----------------------------------------\n\nTITLE: Component Lifecycle Hook Example\nDESCRIPTION: Demonstrates using the onMounted lifecycle hook in an Owl component setup method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsetup() {\n  onMounted(() => {\n    // do something here\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ActionSwiper Example in XML\nDESCRIPTION: This snippet provides a basic example of how to use the `ActionSwiper` component with actions defined for both left and right swipes. It showcases the `action`, `icon`, and `bgColor` properties for customizing the swipe actions. The actions are permuted when using right-to-left (RTL) languages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n  <ActionSwiper\n    onRightSwipe=\"\n      {\n        action: '() => Delete item',\n        icon: 'fa-delete',\n        bgColor: 'bg-danger',\n      }\"\n    onLeftSwipe=\"\n      {\n        action: '() => Star item',\n        icon: 'fa-star',\n        bgColor: 'bg-warning',\n      }\"\n  >\n    <div>\n      Swipable item\n    </div>\n  </ActionSwiper>\n```\n\n----------------------------------------\n\nTITLE: Basic Snippet Structure in XML\nDESCRIPTION: Shows the standard wrapper structure for a main snippet container using section element with required attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"s_snippet_name\" data-name=\"...\" data-snippet=\"...\">\n    <!-- Content -->\n</section>\n```\n\n----------------------------------------\n\nTITLE: XPath Move Position Example\nDESCRIPTION: This snippet shows how to move the element with the class `.o_footer_scrolltop_wrapper` before the element with the ID attribute `footer` using xpath and `move` position.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//div[@id='footer']\\\" position=\\\"before\\\">\\n   <xpath expr=\\\"//div[@id='o_footer_scrolltop_wrapper']\\\" position=\\\"move\\\" />\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Applying a Gradient to Text in Odoo\nDESCRIPTION: This XML snippet shows how to apply a gradient to text by using a `font` tag with the `text-gradient` class and inline styles. The `linear-gradient` CSS function defines the gradient, applied as the `background-image`. The text within the font tag will display the gradient effect.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/gradients.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<h2>\n       <font class=\"text-gradient\" style=\"background-image: linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%);\">A Section Subtitle</font>\n   </h2>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Odoo - Go\nDESCRIPTION: This Go snippet authenticates with an Odoo instance using the provided database name, username, and password. It uses the github.com/kolo/xmlrpc library to call the 'authenticate' method and returns the user ID (uid).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nvar uid int64\nif err := client.Call(\"authenticate\", []any{\n    db, username, password,\n    map[string]any{},\n}, &uid); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Invoice Lines in JavaScript\nDESCRIPTION: Defines the structure for invoice lines in a JSON format. Each line includes description, quantity, subtotal, total, taxes, and unit price.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"invoice_lines\": [\n    {\n        \"description\": string,\n        \"quantity\": float,\n        \"subtotal\": float,\n        \"total\": float,\n        \"taxes\": list[float],\n        \"total\": float,\n        \"unit_price\": float\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Positioning Elements with usePosition Hook in JavaScript\nDESCRIPTION: The usePosition hook aids in positioning an HTML element relative to another, updating its position with window resize or scroll events. Uses the Owl framework and requires HTMLElement references defined by t-ref. Consider setting positioning options for flexible layout adjustments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/hooks.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePosition } from \"@web/core/position_hook\";\n\nclass MyPopover extends owl.Component {\n  setup() {\n    // Here, the reference is the target props, which is an HTMLElement\n    usePosition(this.props.target);\n  }\n}\nMyPopover.template = owl.tags.xml`\n  <div t-ref=\"popper\">\n    I am positioned through a wonderful hook!\n  </div>\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePosition } from \"@web/core/position_hook\";\n\nclass DropMenu extends owl.Component {\n  setup() {\n    const toggler = owl.useRef(\"toggler\");\n    usePosition(\n      () => toggler.el,\n      {\n        popper: \"menu\",\n        position: \"right-start\",\n        onPositioned: (el, { direction, variant }) => {\n          el.classList.add(`dm-${direction}`); // -> \"dm-top\" \"dm-right\" \"dm-bottom\" \"dm-left\"\n          el.style.backgroundColor = variant === \"middle\" ? \"red\" : \"blue\";\n        },\n      },\n    );\n  }\n}\nDropMenu.template = owl.tags.xml`\n  <button t-ref=\"toggler\">Toggle Menu</button>\n  <div t-ref=\"menu\">\n    <t t-slot=\"default\">\n      This is the menu default content.\n    </t>\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification URL Format\nDESCRIPTION: Format for configuring the webhook notification URL in Adyen.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/adyen.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/payment/adyen/notification\n```\n\n----------------------------------------\n\nTITLE: Creating Page Template with Snippet Calls in Odoo\nDESCRIPTION: This XML snippet shows the structure of a page template in Odoo, using snippet calls within a `#wrap` div.  This structure is required for website builder compatibility. This template will render all the included building block snippets\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<div id=\"wrap\">\n```\n\n----------------------------------------\n\nTITLE: Non-Translatable String with t-att- in XML\nDESCRIPTION: This code snippet demonstrates how to create a non-translatable string using `t-att-` in an XML context. The expression inside the t-att-title attribute concatenates the string \"Hello\" with the user's name, but this entire expression is not natively recognized as a translatable unit by Odoo. Hence, translating the \"Hello\" part separately isn't directly supported.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<div t-att-title=\\\"'Hello' + user.name\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model and Field in Go\nDESCRIPTION: This snippet shows how to create a custom model, add a custom field, create a record, and read data using Go. It uses the 'Call' method to interact with Odoo's XML-RPC API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nvar id int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model\", \"create\",\n    []map[string]string{\n        {\n            \"name\":  \"Custom Model\",\n            \"model\": \"x_custom\",\n            \"state\": \"manual\",\n        },\n    },\n}, &id); err != nil {\n    log.Fatal(err)\n}\nvar fieldId int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model.fields\", \"create\",\n    []map[string]any{\n        {\n            \"model_id\": id,\n            \"name\":     \"x_name\",\n            \"ttype\":    \"char\",\n            \"state\":    \"manual\",\n            \"required\": true,\n        },\n    },\n}, &fieldId); err != nil {\n    log.Fatal(err)\n}\nvar recordId int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom\", \"create\",\n    []map[string]string{\n        {\"x_name\": \"test record\"},\n    },\n}, &recordId); err != nil {\n    log.Fatal(err)\n}\nvar recordFields []map[string]any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom\", \"read\",\n    [][]int64{{recordId}},\n}, recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tax Report in Odoo\nDESCRIPTION: This snippet shows how to declare a tax report in Odoo using XML.  It defines the report's name, associates it with a generic tax report, and specifies the country for which the report is applicable.  This is crucial for generating accurate tax reports within the Odoo accounting system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/accounting_localization.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"tax_report\" model=\"account.report\">\n        <field name=\"name\">Tax Report</field>\n        <field name=\"root_report_id\" ref=\"account.generic_tax_report\"/>\n        <field name=\"country_id\" ref=\"base.XX\"/>\n    </record>\n\n    ...\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Creating a Mega Menu in Odoo with XML\nDESCRIPTION: This snippet demonstrates how to create a mega menu in Odoo using XML.  It sets the `is_mega_menu` field to `True` to enable mega menu behavior. The `mega_menu_content` field contains the HTML structure and content to be displayed within the mega menu.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\"menu_mega_menu\" model=\"website.menu\">\n    <field name=\"name\">Mega Menu</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"website_id\">1</field>\n    <field name=\"sequence\" type=\"int\">..</field>\n    <field name=\"is_mega_menu\" eval=\"True\"/>\n    <field name=\"mega_menu_classes\">...</field>\n    <field name=\"mega_menu_content\" type=\"html\">\n        <section class=\"s_mega_menu_multi_menus py-4 o_colored_level o_cc o_cc1\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">First Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Second Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Third Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Last Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Custom Test Case Tagging in Odoo\nDESCRIPTION: Shows how to use the @tagged decorator to modify test execution behavior, removing standard tag and adding a custom tag to control test selection.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests import TransactionCase, tagged\n\n@tagged('-standard', 'nice')\nclass NiceTest(TransactionCase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Nginx Static File Serving Configuration\nDESCRIPTION: Configuration for serving Odoo static files with proper security headers\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nmap $sent_http_content_type $content_type_csp {\n    default \"\";\n    ~image/ \"default-src 'none'\";\n}\n\nserver {\n    location @odoo {\n        # copy-paste the content of the / location block\n    }\n\n    # Serve static files right away\n    location ~ ^/[^/]+/static/.+$ {\n        # root and try_files both depend on your addons paths\n        root ...;\n        try_files ... @odoo;\n        expires 24h;\n        add_header Content-Security-Policy $content_type_csp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Component with Slots in Owl\nDESCRIPTION: Example showing how to create a tabbed interface using the Notebook component with slot-based page definitions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<Notebook orientation=\"'vertical'\">\n  <t t-set-slot=\"page_1\" title=\"'Page 1'\" isVisible=\"true\">\n    <h1>My First Page</h1>\n    <p>It's time to build Owl components. Did you read the documentation?</p>\n  </t>\n  <t t-set-slot=\"page_2\" title=\"'2nd page'\" isVisible=\"true\">\n    <p>Wise owl's silent flight. Through the moonlit forest deep, guides my path to code</p>\n  </t>\n</Notebook>\n```\n\n----------------------------------------\n\nTITLE: Odoo Tour Step - Adding Product in Wizard\nDESCRIPTION: This JavaScript code represents a step in an Odoo tour that adds a product within a wizard. The `trigger` specifies the element to click (add button). The `extra_trigger` ensures the step only runs when the wizard is open.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    trigger: '.js_product:has(strong:contains(Chair floor protection)) .js_add',\n    extra_trigger: '.oe_advanced_configurator_modal',  // This ensure we are in the wizard\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Report Name in Odoo\nDESCRIPTION: Shows how to set a dynamic report name using a Python expression in Odoo report actions. The record is accessible as the 'object' variable in the expression.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nattachment = \"python expression that defines the name of the report; the record is accessible as the variable 'object'\"\n```\n\n----------------------------------------\n\nTITLE: Adding Invoice Lines\nDESCRIPTION: This snippet demonstrates how to add invoice lines to the newly created invoice. Each line includes the necessary fields: name, quantity, and price_unit, and uses Odoo's Command namespace for creating One2many relationships.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/13_other_module.rst#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom odoo import Command\n\ndef inherited_action(self):\n    self.env[\"account.move\"].create(\n        {\n            \"name\": \"Test\",\n            \"invoice_line_ids\": [\n                Command.create({\n                    \"field_1\": \"value_1\",\n                    \"field_2\": \"value_2\",\n                })\n            ],\n        }\n    )\n    return super().inherited_action()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Context in XML Action Definition\nDESCRIPTION: Demonstrates how to set a default context field in an XML action definition. This context will be evaluated as an object and passed to the corresponding component.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"context\">{'search_default_customer': 1}</field>\n```\n\n----------------------------------------\n\nTITLE: Extending and Overriding an Existing Odoo Controller\nDESCRIPTION: Illustrates how to inherit from an existing controller, override methods, and use the super() method to maintain original functionality while adding custom logic.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/http.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Extension(MyController):\n    @route()\n    def handler(self):\n        do_before()\n        return super(Extension, self).handler()\n```\n\n----------------------------------------\n\nTITLE: Displaying Work Center Equipment List in reStructuredText\nDESCRIPTION: This RST code snippet shows an image of a work center's equipment list, including the file path, alignment, and alt text for accessibility.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_setup.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_setup/maintenance-setup-work-center.png\n   :align: center\n   :alt: List of equipment included in a work center.\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branches for Odoo and Enterprise Console\nDESCRIPTION: Switches branches for both odoo and enterprise repositories, ensuring both remain synchronized on the same branch. Essential for maintaining project consistency across repositories.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo\n$ git switch {BRANCH}\n\n$ cd $HOME/src/enterprise\n$ git switch {BRANCH}\n```\n\n----------------------------------------\n\nTITLE: Implementing Appearance Animation in Odoo XML\nDESCRIPTION: Demonstrates how to add a fade-in animation to a column element that triggers when the element appears in the viewport. Includes configuration for animation duration, delay and directional movement.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/animations.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"col-lg-6 o_animate o_anim_fade_in o_animate_both_scroll o_anim_from_bottom\" style=\"--wanim-intensity: 100; animation-duration: 2s; animation-delay: 1s;\">\n    <h2>A Section Subtitle</h2>\n    <p>Write one or two paragraphs describing your product or services.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Kanban View Template in Odoo - XML\nDESCRIPTION: This XML snippet defines a custom template for the kanban view by inheriting the default web.KanbanView and adding a custom element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates>\n    <t t-name=\"my_module.CustomKanbanView\" t-inherit=\"web.KanbanView\">\n        <xpath expr=\"//Layout\" position=\"before\">\n            <div>\n                Hello world !\n            </div>\n        </xpath>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Odoo\nDESCRIPTION: This Python code defines a simple controller in Odoo that handles a request to the '/academy/academy/' route. It returns a \"Hello, world\" string. The controller is part of the 'Academy' module and requires the 'odoo' library.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# -*- coding: utf-8 -*-\nfrom odoo import http\n\nclass Academy(http.Controller):\n\n    @http.route('/academy/academy/', auth='public')\n    def index(self, **kw):\n        return \\\"Hello, world\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Exclamation Marks to Contact Names in Odoo Shell\nDESCRIPTION: Python code example showing how to use the Odoo shell environment to modify all contact names by adding an exclamation mark and committing the changes to the database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: records = env[\"res.partner\"].search([])\n\nIn [2]: records\nOut[2]: res.partner(14, 26, 33, 21, 10)\n\nIn [3]: for partner in records:\n   ...:     partner.name = \"%s !\" % partner.name\n   ...: \n\nIn [4]: env.cr.commit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Selection Badge Widget in XML\nDESCRIPTION: A specialized widget for displaying selection field values as rectangular badges, supporting selection and many2one field types\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"recommended_activity_type_id\" widget=\"selection_badge\" />\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Placeholder in Odoo Email Templates\nDESCRIPTION: Example of using dynamic placeholders to reference customer information from the Sales Order model in Odoo email templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/companies/email_template.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{{ object.partner_id }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Database Info - Python\nDESCRIPTION: This Python snippet retrieves information for a test database from demo.odoo.com using the xmlrpc.client library. The retrieved information includes the URL, database name, username, and password for accessing the test database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\ninfo = xmlrpc.client.ServerProxy('https://demo.odoo.com/start').start()\nurl, db, username, password = info['host'], info['database'], info['user'], info['password']\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Panel with Domain Attribute in XML\nDESCRIPTION: Example demonstrating how to configure a search panel with domain attribute to filter records. The example shows a search panel with department_id field and manager_id field that only shows managers from the selected department.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<searchpanel>\n    <field name=\"department_id\"/>\n    <field name=\"manager_id\" select=\"multi\" domain=\"[('department_id', '=', department_id)]\"/>\n</searchpanel>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with t-if Directive - XML\nDESCRIPTION: This XML snippet demonstrates the use of the t-if directive to conditionally render blocks based on an expression. If the condition evaluates to falsy, the content will not be displayed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    <t t-if=\"true == true\">\n        true is true\n    </t>\n    <t t-if=\"true == false\">\n        true is not true\n    </t>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Image Directive for Maintenance Calendar Screenshots\nDESCRIPTION: These RST image directives insert screenshots of the Maintenance Calendar interface into the documentation, including options for alignment and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_calendar.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-new-event-popup.png\n   :align: center\n   :alt: New event creation pop-up window.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-new-request-form.png\n   :align: center\n   :alt: New maintenance request form creation.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-filled-out-form.png\n   :align: center\n   :alt: Filled-out details of maintenance request form.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-instructions-tab.png\n   :align: center\n   :alt: Instructions tab options on maintenance request form.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-favorites-popover.png\n   :align: center\n   :alt: Favorites section of filters drop-down menu.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-view-type-icons.png\n   :align: center\n   :alt: Different view type icons for maintenance calendar.\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: maintenance_calendar/maintenance-calendar-period-dropdown.png\n   :align: center\n   :alt: Calendar period drop-down menu options.\n```\n\n----------------------------------------\n\nTITLE: Protecting Specific Records with `noupdate` in Odoo\nDESCRIPTION: This XML snippet shows how to protect specific records from being overwritten during module updates in Odoo, using the `noupdate` attribute on a `<data>` tag. Only the records within the `<data noupdate=\"1\">` block will be protected.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n   <record id=\"menu_company\" model=\"website.menu\">\n      <!-- Fields -->\n   </record>\n\n   <data noupdate=\"1\">\n      <record id=\"menu_faq\" model=\"website.menu\">\n         <!-- Fields -->\n      </record>\n      <record id=\"menu_legal\" model=\"website.menu\">\n         <!-- Fields -->\n      </record>\n   </data>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Copying Partner Records with Debugger in Python\nDESCRIPTION: Method to create a copy of a Partner record with optional name override. Includes a debugger breakpoint using ipdb for debugging purposes. Returns a new Partner record with copied values and modified name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef copy(self, default=None):\n    import ipdb; ipdb.set_trace()\n    self.ensure_one()\n    chosen_name = default.get('name') if default else ''\n    new_name = chosen_name or _('%s (copy)') % self.name\n    default = dict(default or {}, name=new_name)\n    return super(Partner, self).copy(default)\n```\n\n----------------------------------------\n\nTITLE: Form: Button Box element example\nDESCRIPTION: This XML snippet provides an example of using a button box to display buttons with icons and statinfo widgets. The `<field>` element inside a `<button>` is rendered as statinfo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div name=\"button_box\">\n        <button type=\"edit\" name=\"edit\" icon=\"fa-edit\" string=\"Button1\"/>\n        <button type=\"object\" name=\"my_action\" icon=\"fa-dollar\">\n            <field name=\"total_inv\" widget=\"statinfo\" string=\"Invoices\"/>\n        </button>\n    </div>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Form Success Handling in Odoo\nDESCRIPTION: Examples of handling form submission success through page redirection or message display. Includes structure for custom success message implementation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/forms.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<form data-success-mode=\"redirect\" data-success-page=\"/contactus-thank-you\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-success-mode=\"message\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"s_website_form_end_message d-none\">\n     <div class=\"oe_structure\">\n          <section class=\"s_text_block pt64 pb64\" data-snippet=\"s_text_block\">\n               <div class=\"container\">\n                     <h2 class=\"text-center\">This is a success!</h2>\n               </div>\n          </section>\n     </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Snackbar with Action using Odoo Mobile JavaScript\nDESCRIPTION: Demonstrates how to show a snackbar with an action button using Odoo mobile JavaScript API's `showSnackBar` method. The parameters include a `message` to display and an optional `btn_text` for the action button. The function returns a boolean indicating whether the action button was clicked or if the snackbar was dismissed automatically. Requires the mobile app.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.methods.showSnackBar({'message': 'Message is deleted', 'btn_text': 'Undo'}).then(function(result){\n    if(result){\n        // Do undo operation\n    }else{\n        // Snack Bar dismissed\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Proxy Mode\nDESCRIPTION: Basic Odoo configuration setting to enable proxy mode when running behind a reverse proxy\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nproxy_mode = True\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Client Template in XML\nDESCRIPTION: This snippet shows the XML structure of the web client, which wraps essential components such as a navigation bar and main component containers. It lays the foundation for the web application's UI.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"web.WebClient\">\n        <body class=\"o_web_client\">\n            <NavBar/>\n            <ActionContainer/>\n            <MainComponentsContainer/>\n        </body>\n    </t>\n```\n\n----------------------------------------\n\nTITLE: Disabling Field Change Triggers in View\nDESCRIPTION: Example of suppressing the trigger from a specific field by adding on_change=\"0\" attribute in a view definition\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"name\" on_change=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Notification with Button in JavaScript\nDESCRIPTION: Example of creating a more complex notification with a title, success type, and an interactive button that triggers an action when clicked.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// in setup\nthis.notificationService = useService(\"notification\");\nthis.actionService = useService(\"action\");\n\n// later\nthis.notificationService.add(\"You closed a deal!\", {\n  title: \"Congrats\",\n  type: \"success\",\n  buttons: [\n      {\n          name: \"See your Commission\",\n          onClick: () => {\n              this.actionService.doAction(\"commission_action\");\n          },\n      },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Products Item CSS Styling - CSS\nDESCRIPTION: This CSS snippet defines styles for the products displayed in the widget, ensuring that each product item appears as a block element with padding, margin, border, and rounded corners.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.oe_products_item {\n    display: inline-block;\n    padding: 3px;\n    margin: 5px;\n    border: 1px solid black;\n    border-radius: 3px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Header Option in Odoo XML\nDESCRIPTION: Adds a new option for a custom header template in the Website Builder interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_footer_opt\" inherit_id=\"website.snippet_options\" name=\"Footer Template - Option\">\n   <xpath expr=\"//we-select[@data-variable='footer-template']\" position=\"inside\">\n      <we-button title=\"airproof\"\n         data-customize-website-views=\"website_airproof.footer\"\n         data-customize-website-variable=\"'airproof'\"  data-img=\"/website_airproof/static/src/img/wbuilder/template_footer_opt.svg\"/>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Label Field Layout in Odoo Form\nDESCRIPTION: Example showing the basic structure of a label and field in a form view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"FIELD_NAME\" class=\"oe_inline\"/>\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for Odoo Shell Access\nDESCRIPTION: Console command showing how to access Odoo's Python shell environment for direct interaction with the ORM.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Order in Pivot View\nDESCRIPTION: Example of setting default order in a pivot view using the default_order attribute to sort by 'foo' field in ascending order.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<pivot default_order=\"foo asc\">\n   <field name=\"foo\" type=\"measure\"/>\n</pivot>\n```\n\n----------------------------------------\n\nTITLE: Odoo Template View Definition\nDESCRIPTION: This snippet demonstrates the structure of an Odoo template view definition, including the `id`, `inherit_id`, and `name` attributes. The `inherit_id` attribute specifies the ID of the standard view being modified.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<template id=\\\"...\\\" inherit_id=\\\"...\\\" name=\\\"...\\\">\\n   <!-- Content -->\\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Extending Action Context in JavaScript\nDESCRIPTION: Shows how to programmatically extend the context of an action when executing it manually in JavaScript. The additional_context argument allows adding custom context values.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// in setup\nlet actionService = useService(\"action\");\n\n// in some event handler\nactionService.doAction(\"addon_name.something\", {\n    additional_context:{\n        default_period_id: defaultPeriodId\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Search Filter Domain in Odoo (XML)\nDESCRIPTION: This XML snippet demonstrates how to override the default search domain for a field in an Odoo search view. The `filter_domain` attribute is used to define a custom domain that searches for records where either the 'name' or 'description' field contains the user's input.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<search string=\"Test\">\n    <field name=\"description\" string=\"Name and description\"\n           filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Change Management in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for change management documentation using reStructuredText syntax. It includes three main sections: engineering change orders, ECO type, and version control.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/plm/manage_changes.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   manage_changes/engineering_change_orders\n   manage_changes/eco_type\n   manage_changes/version_control\n```\n\n----------------------------------------\n\nTITLE: Handling Database Transactions in Odoo RPC Calls\nDESCRIPTION: Illustrates the correct way to handle database transactions in Odoo RPC calls. It emphasizes the importance of not manually committing transactions and letting the framework handle it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef execute(self, db_name, uid, obj, method, *args, **kw):\n    db, pool = pooler.get_db_and_pool(db_name)\n    # create transaction cursor\n    cr = db.cursor()\n    try:\n        res = pool.execute_cr(cr, uid, obj, method, *args, **kw)\n        cr.commit() # all good, we commit\n    except Exception:\n        cr.rollback() # error, rollback everything atomically\n        raise\n    finally:\n        cr.close() # always close cursor opened manually\n    return res\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Dependencies on Windows\nDESCRIPTION: Commands to install Python dependencies for Odoo on Windows using pip, including setuptools and requirements.txt packages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_9\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> cd \\CommunityPath\nC:\\> pip install setuptools wheel\nC:\\> pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fonts in Odoo Theme\nDESCRIPTION: This snippet defines a custom font configuration for use within an Odoo theme.  It specifies the font family and assigns it properties, such as base font size, for consistent styling across the website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n   $o-theme-font-configs: (\n      'Proxima Nova': (\n         'family':                         ('Proxima Nova', sans-serif),\n         'properties' : (\n            'base': (\n               'font-size-base':           1rem,\n            ),\n         ),\n```\n\n----------------------------------------\n\nTITLE: Setting Radio Widget with Horizontal Layout\nDESCRIPTION: Radio widget configuration with horizontal layout option.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"recommended_activity_type_id\" widget=\"radio\" options=\"{'horizontal': true}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX X-Accel for Odoo Filestore\nDESCRIPTION: NGINX configuration block to enable X-Accel internal file serving for Odoo's filestore. This configuration maps the /web/filestore location to the actual filestore directory path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /web/filestore {\n    internal;\n    alias /path/to/odoo/data-dir/filestore;\n}\n```\n\n----------------------------------------\n\nTITLE: Unittest with Odoo Test Tags\nDESCRIPTION: Demonstrates how to add default tags to a unittest.TestCase to ensure it gets included in the default test suite.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom odoo.tests import tagged\n\n@tagged('standard', 'at_install')\nclass SmallTest(unittest.TestCase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Date Filters in Odoo Search View\nDESCRIPTION: Example showing how to define date-based filters in a search view. This creates a time-dependent filter for the create_date field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mega Menu Template in Odoo\nDESCRIPTION: This XML snippet defines a custom template for a mega menu in Odoo's website builder. It creates a new template named `s_mega_menu_airproof` that contains the HTML structure for the mega menu's content. This template can then be selected and used within the mega menu configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n\"<template id=\"s_mega_menu_airproof\" name=\"Airproof\" groups=\"base.group_user\">\n    <section class=\"s_mega_menu_airproof o_cc o_cc1 pt40\">\n        <!-- Content -->\n    </section>\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Defining RST Substitutions for Manufacturing Order Abbreviations\nDESCRIPTION: This RST code defines substitutions for the abbreviations 'MO' (Manufacturing Order) and 'MOs' (Manufacturing Orders) to be used throughout the document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/shop_floor/shop_floor_overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`\n```\n\n----------------------------------------\n\nTITLE: Settings: Defining a Settings View\nDESCRIPTION: This XML snippet demonstrates the structure of a settings view in Odoo, including the use of `<app>`, `<setting>`, and `<block>` elements. It includes example usages of attributes such as `string`, `name`, `help`, `documentation` and `company_specific`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<app string=\"CRM\" name=\"crm\">\n    <setting type=\"header\" string=\"Foo\">\n        <field name=\"foo\" title=\"Foo?.\"/>\n        <button name=\"nameAction\" type=\"object\" string=\"Button\"/>\n    </setting>\n    <block title=\"Title of group Bar\">\n        <setting help=\"this is bar\" documentation=\"/applications/technical/web/settings/this_is_a_test.html\">\n            <field name=\"bar\"/>\n        </setting>\n        <setting string=\"This is Big BAR\" company_specific=\"1\">\n            <field name=\"bar\"/>\n        </setting>\n    </block>\n    <block title=\"Title of group Foo\">\n        <setting string=\"Personalize setting\" help=\"this is full personalize setting\">\n            <div>This is a different setting</div>\n        </setting>\n    </block>\n</app>\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Filter with XPath Template Inheritance\nDESCRIPTION: Uses XPath to modify the existing kanban view template and add a customer list component beside the renderer\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//t[@t-component='props.Renderer']\" position=\"before\">\n  <CustomerList selectCustomer=\"selectCustomer\"/>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Kanban Controller in JavaScript\nDESCRIPTION: Extends the default KanbanController to create a custom view for CRM kanban with additional functionality\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new empty component extending KanbanController\nexport class AwesomeKanbanController extends KanbanController {\n  // Custom implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mail Message Subtype in XML for Odoo\nDESCRIPTION: This XML snippet defines a mail message subtype for a business trip confirmation. It sets up the subtype name, model, default status, and description.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"mt_state_change\" model=\"mail.message.subtype\">\n    <field name=\"name\">Trip confirmed</field>\n    <field name=\"res_model\">business.trip</field>\n    <field name=\"default\" eval=\"True\"/>\n    <field name=\"description\">Business Trip confirmed!</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining AccountTax Model in Odoo (reStructuredText)\nDESCRIPTION: This snippet defines the structure for documenting the AccountTax model in Odoo. It uses reStructuredText directives to auto-generate documentation for the model and its fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_tax.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_tax.AccountTax\n    :main:\n\n    .. autofield:: name\n    .. autofield:: type_tax_use\n    .. autofield:: tax_scope\n    .. autofield:: amount_type\n    .. autofield:: active\n    .. autofield:: children_tax_ids\n    .. autofield:: sequence\n    .. autofield:: amount\n    .. autofield:: description\n    .. autofield:: price_include\n    .. autofield:: include_base_amount\n    .. autofield:: is_base_affected\n    .. autofield:: analytic\n    .. autofield:: invoice_repartition_line_ids\n    .. autofield:: refund_repartition_line_ids\n    .. autofield:: tax_group_id\n    .. autofield:: tax_exigibility\n    .. autofield:: cash_basis_transition_account_id\n```\n\n----------------------------------------\n\nTITLE: Unsafe Field Value Retrieval using getattr\nDESCRIPTION: Demonstrates an unsafe method of dynamically retrieving a record's field value using getattr, which allows access to potentially sensitive attributes or methods\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# unsafe retrieval of a field value\\ndef _get_state_value(self, res_id, state_field):\\n    record = self.sudo().browse(res_id)\\n    return getattr(record, state_field, False)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Odoo Upgrade Utils in Python\nDESCRIPTION: Example of how to import and use the Odoo Upgrade Utils library in a Python upgrade script.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.upgrade import util\n\n\ndef migrate(cr, version):\n   # Rest of the script\n```\n\n----------------------------------------\n\nTITLE: Using Extra Colors Mapping in XML\nDESCRIPTION: This XML snippet shows how to use the extra color mapping created in the previous SCSS snippet. The `o_second_extra_shape_mapping` class is added to the shape's div element. This allows to apply the extra color variant to a specific section.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n   <section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06'}\">\n       <div class=\"o_we_shape o_web_editor_Zigs_06 o_second_extra_shape_mapping\"/>\n       <div class=\"container\">\n           <!-- Content -->\n       </div>\n   </section>\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Decoration to List View Rows in XML\nDESCRIPTION: Demonstrates how to apply conditional styling to rows in a list view using the decoration-danger attribute. The style is applied based on a Python expression.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<tree decoration-danger=\"field_qty &gt; field_limit\">\n    ...\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Opening a Menu Link in a New Window in Odoo\nDESCRIPTION: This snippet shows how to configure a menu item to open its link in a new browser tab or window. It sets the `new_window` field to `True` within the `website.menu` record. When a user clicks on this menu item, the linked page will load in a new browser window.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\".\" model=\"website.menu\">\n    <field name=\"new_window\" eval=\"True\"/>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Counting Records with search_count Method in Multiple Languages\nDESCRIPTION: This code demonstrates how to use the search_count method to count the number of records matching a specific domain filter without retrieving the actual records. This is more efficient than fetching all records and counting them.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_count', [[['is_company', '=', True]]])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_count', [[['is_company', '=', true]]])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'search_count', array(array(array('is_company', '=', true))));\n```\n\nLANGUAGE: java\nCODE:\n```\n(Integer)models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search_count\",\n    asList(asList(\n        asList(\"is_company\", \"=\", true)))\n));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar counter int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search_count\",\n    []any{[]any{\n        []any{\"is_company\", \"=\", true},\n    }},\n}, &counter); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Animation in Odoo XML\nDESCRIPTION: Shows how to add a fade-in animation to a column element that triggers based on scroll position. Includes configuration for scroll zones and animation intensity.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/animations.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"col-lg-6 o_animate o_animate_on_scroll o_animate_out o_anim_fade_in o_anim_from_right\" data-scroll-zone-start=\"50\" data-scroll-zone-end=\"100\" style=\"--wanim-intensity: 100;\">\n    <h2>A Section Subtitle</h2>\n    <p>Write one or two paragraphs describing your product or services.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Supported Import/Export Syntax\nDESCRIPTION: This code snippet demonstrates supported import/export syntax in Odoo native modules. It shows the correct ways to define and use import and export statements with proper spacing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\n    // supported\n    import X from \"xxx\";\n    export X;\n      export default X;\n        import X from \"xxx\";\n\n    /*\n     * import X ...\n     */\n\n    /*\n     * export X\n     */\n\n```\n\n----------------------------------------\n\nTITLE: Escaping Output in QWeb Templates - XML\nDESCRIPTION: This XML snippet illustrates how to use the t-esc directive to output a variable in a HTML-safe manner. It allows for dynamic content to be inserted into the rendered document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<div>Hello <t t-esc=\"name\"/></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Mandatory Days in Odoo Time Off App\nDESCRIPTION: This snippet outlines the process of creating mandatory days in Odoo's Time Off app, including setting the name, company, departments, start and end dates, and color.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/time_off.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Name`: Enter the name of the mandatory day.\n- :guilabel:`Company`: If in a multi-company database, this field is visible, and the current\n  company populates this field, by default. Using the drop-down menu, select the company the\n  mandatory day is for.\n- :guilabel:`Departments`: This column is hidden by default. First, click the\n  :icon:`oi-settings-adjust` :guilabel:`(additional options)` icon in the top-right corner, next to\n  :guilabel:`Color`, and then tick the checkbox next to :guilabel:`Departments` to reveal that\n  column.\n\n  Next, select the desired departments from the drop-down menu. Multiple departments can be\n  selected, and there is no limit to the amount of departments that can be added.\n\n  If this field is left blank, the mandatory day applies to the entire company.\n- :guilabel:`Start Date`: Using the calendar picker, select the date the mandatory day starts.\n- :guilabel:`End Date`: Using the calendar picker, select the date the mandatory day ends. If\n  creating a single mandatory day, the end date should be the same as the start date.\n- :guilabel:`Color`: If desired, select a color from the available presented options. If no color is\n  desired, select the `No color` option, represented by a white box with a red line diagonally\n  across it. The selected color appears on the main **Time Off** app dashboard, in both the calendar\n  and in the legend.\n```\n\n----------------------------------------\n\nTITLE: Python Useless Variable Example\nDESCRIPTION: This Python snippet demonstrates the avoidance of unnecessary temporary variables.  It shows when a variable assignment is redundant and how to write the code more simply.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# pointless\nschema = kw['schema']\nparams = {'schema': schema}\n# simpler\nparams = {'schema': kw['schema']}\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on MacOS\nDESCRIPTION: Command to start the Odoo server on MacOS with basic configuration including addons path and database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ python3 odoo-bin --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Creating We-Input Text Field in XML for Odoo Website Theme\nDESCRIPTION: Demonstrates how to create a we-input text field option with unit, save unit, and step attributes for entering a speed value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<we-input\n   string=\"Speed\"\n   data-unit=\"s\"\n   data-save-unit=\"ms\"\n   data-step=\"0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Odoo Reports via URL in Python\nDESCRIPTION: This snippet provides examples of how to access Odoo reports directly via URL. It shows the format for accessing both HTML and PDF versions of a report, using a Sale Order report as an example.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# HTML version\nhttp://<server-address>/report/html/sale.report_saleorder/38\n\n# PDF version\nhttp://<server-address>/report/pdf/sale.report_saleorder/38\n```\n\n----------------------------------------\n\nTITLE: Odoo Tour Step - Showing Apps Menu Item\nDESCRIPTION: This JavaScript snippet is an example step in an Odoo tour. It uses the `tour.stepUtils.showAppsMenuItem()` helper function to automatically show/open the Apps menu item as the first step of an Odoo tour. It does not require a 'trigger' because the function will automatically execute the show/open apps menu action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// First step\ntour.stepUtils.showAppsMenuItem(),\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Field Widget in Odoo XML\nDESCRIPTION: Demonstrates usage of URL widget for char fields to display clickable links with custom text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"foo\" widget=\"url\" text=\"Some URL\" />\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for CLOC with Multiple Paths\nDESCRIPTION: Console command showing how to count lines of code across multiple module paths using the CLOC feature.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -p addons/account -p addons/sale\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Update with Database Restriction\nDESCRIPTION: This bash command combines database restriction and module updating. It restricts access to '11firstdatabase' and '11seconddatabase' and updates the 'base' module on '11firstdatabase'. If '11seconddatabase' doesn't exist, it will be created and the 'base' module will be installed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --database 11firstdatabase,11seconddatabase -u base\n```\n\n----------------------------------------\n\nTITLE: Adapting Mobile Header Template in Odoo XML\nDESCRIPTION: Modifies the mobile header template to maintain consistency with the custom desktop header.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_header_mobile\" inherit_id=\"website.template_header_mobile\" name=\"Airproof - Template Header Mobile\">\n   <!-- Xpaths -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Events Template Definition in XML\nDESCRIPTION: Template for events dynamic content with timezone context setting for each record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_event_event_airproof\" name=\"...\">\n            <div t-foreach=\"records\" t-as=\"data\" class=\"s_events_event\">\n               <t t-set=\"record\" t-value=\"data['_record']._set_tz_context()\"/>\n               <!-- Content -->\n            </div>\n         </template>\n```\n\n----------------------------------------\n\nTITLE: Outlook Plugin Manifest XML Configuration\nDESCRIPTION: The manifest.xml file that needs to be downloaded and installed in Outlook to enable the Odoo plugin integration. This file contains the necessary configuration for the Outlook add-in.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/integrations/mail_plugins/outlook.rst#2025-04-18_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttps://download.odoocdn.com/plugins/outlook/manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Chatter Widget Implementation\nDESCRIPTION: Structure for adding communication and log tool (chatter) to a form view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        ...\n    </sheet>\n    <div class=\"oe_chatter\">\n        <field name=\"message_follower_ids\"/>\n        <field name=\"activity_ids\"/>\n        <field name=\"message_ids\" options=\"OPTIONS\"/>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing a controller route for banner_route in Python\nDESCRIPTION: This Python snippet demonstrates the implementation of a controller route that provides the HTML content for the banner. The controller function must return a JSON response containing an `html` key with the HTML content.  The example includes a stylesheet link within the HTML.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_banner_route.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"class MyController(odoo.http.Controller):\\n    @http.route('/module_name/hello', auth='user', type='json')\\n    def hello(self):\\n        return {\\n            'html': \\\"\\\"\\\"\\n                <div>\\n                    <link href=\\\"/module_name/static/src/css/banner.css\\\"\\n                        rel=\\\"stylesheet\\\">\\n                    <h1>hello, world</h1>\\n                </div> \\\"\\\"\\\"\\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Starting an Odoo Tour from JavaScript Console\nDESCRIPTION: This Javascript code allows starting a specific tour by its name in the JavaScript console. This is particularly useful for debugging or running tours directly from the browser's developer tools.  The odoo object gives access to Odoo's client side functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.startTour(tour_name);\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Odoo View in XML\nDESCRIPTION: Basic structure for declaring a view record in Odoo using the ir.ui.view model. Includes essential fields like name, model, priority and arch content.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.ui.view\" id=\"view_id\">\n    <field name=\"name\">view.name</field>\n    <field name=\"model\">object_name</field>\n    <field name=\"priority\" eval=\"16\"/>\n    <field name=\"arch\" type=\"xml\">\n        <!-- view content: <form>, <tree>, <graph>, ... -->\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Using Odoo Shell for Interactive Database Operations\nDESCRIPTION: Example of using the Odoo shell to interact with the database, perform searches, and modify records programmatically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin shell\n>>> partner = env['res.partner'].search([('email', '=', 'asusteK@yourcompany.example.com')], limit=1)\n>>> partner.name\n'ASUSTeK'\n>>> partner.name = 'Odoo'\n>>> env['res.partner'].search([('email', '=', 'asusteK@yourcompany.example.com')], limit=1).name\n'Odoo'\n```\n\n----------------------------------------\n\nTITLE: Starting Odoo server via command line\nDESCRIPTION: Commands to start the Odoo server from the terminal using the 'odoo-bin' script. No additional dependencies are required. It is executed in a bash shell to initialize the Odoo server, allowing it to handle client requests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nodoo-bin\n```\n\n----------------------------------------\n\nTITLE: Clearing Python Cache Console\nDESCRIPTION: Removes Python bytecode cache files to resolve certain attribute errors. This command specifically targets .pyc files for cleanup. Requires access to Python's site-packages directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/.local/lib/python3.8/site-packages/\n$ find -name '*.pyc' -type f -delete\n```\n\n----------------------------------------\n\nTITLE: Creating Website Controller via Server Action\nDESCRIPTION: XML configuration for setting up a server action that acts as a website controller, accessible at /actions/estate path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"server_action_estate_list\" model=\"ir.actions.server\">\n    <field name=\"name\">Estate List Controller</field>\n    <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n    <field name=\"website_published\">True</field>\n    <field name=\"website_path\">estate</field>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Fields in XML\nDESCRIPTION: Demonstrates defining fields for an Odoo model using XML, creating records in the ir.model.fields model. Each field definition includes attributes such as model_id (referencing the model), name (technical name), field_description (label), and ttype (field type).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\\\"field_real_estate_property_name\\\" model=\\\"ir.model.fields\\\">\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_name</field>\n        <field name=\\\"field_description\\\">Name</field>\n        <field name=\\\"ttype\\\">char</field>\n        <field name=\\\"required\\\">True</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_selling_price\\\" model=\\\"ir.model.fields\\\">\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_selling_price</field>\n        <field name=\\\"field_description\\\">Selling Price</field>\n        <field name=\\\"ttype\\\">float</field>\n        <field name=\\\"required\\\">True</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_description\\\" model=\\\"ir.model.fields\\\">\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_description</field>\n        <field name=\\\"field_description\\\">Description</field>\n        <field name=\\\"ttype\\\">html</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_postcode\\\" model=\\\"ir.model.fields\\\">\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_postcode</field>\n        <field name=\\\"field_description\\\">Postcode</field>\n        <field name=\\\"ttype\\\">char</field>\n    </record>\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tax Amount Using Python Code in Odoo\nDESCRIPTION: Example of Python code snippets used to define a custom tax calculation in Odoo. The first snippet calculates the tax amount as 10% of the unit price, while the second snippet determines if the tax should be applied.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult = price_unit * 0.10\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = true\n```\n\n----------------------------------------\n\nTITLE: Defining a model with a field\nDESCRIPTION: This code snippet defines a model with a simple `Char` field. The `name` field will be stored as a `VARCHAR` in the database. The model also includes a `_description` to provide more context.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    name = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Updating Module Manifest Data Section in Python\nDESCRIPTION: This Python snippet adds the components template XML file to the data section of the module manifest. This ensures the component is rendered properly on the website or portal pages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/frontend_owl_components.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{\\n    # ...\\n    'data': {\\n        'views/templates.xml',\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Odoo - Ruby\nDESCRIPTION: This Ruby snippet authenticates with an Odoo instance using the provided database name, username, and password. It uses the XMLRPC::Client library to call the 'authenticate' method and returns the user ID (uid).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nuid = common.call('authenticate', db, username, password, {})\n```\n\n----------------------------------------\n\nTITLE: Unsupported Import/Export Syntax\nDESCRIPTION: This code snippet shows examples of unsupported import/export syntax in Odoo native modules.  It illustrates cases where incorrect spacing or placement of comments can cause parsing issues.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\n    // not supported\n\n    var a= 1;import X from \"xxx\";\n    /*\n      import X ...\n    */\n\n```\n\n----------------------------------------\n\nTITLE: Importing Translation Functions in JavaScript\nDESCRIPTION: This snippet shows how to import the translation functions _t and _lt from the Odoo web instance for use in the current JavaScript module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar _t = instance.web._t,\n    _lt = instance.web._lt;\n```\n\n----------------------------------------\n\nTITLE: Adding Active Field in Odoo Model\nDESCRIPTION: Demonstrates how to add an active field to the estate.property model. The active field is a reserved field that controls record visibility in search results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nactive = fields.Boolean()\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories - Windows HTTPS\nDESCRIPTION: Commands to clone Odoo Community and Enterprise repositories using HTTPS on Windows systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> git clone https://github.com/odoo/odoo.git\nC:\\> git clone https://github.com/odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Wizards Naming Convention in Odoo\nDESCRIPTION: This snippet details the naming convention for wizards in Odoo, explaining the structure for transient model files and their corresponding views to maintain consistency and comprehension.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- wizard/\n    |   |-- make_plant_order.py\n    |   |-- make_plant_order_views.xml\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Net Volume (Cubic Meters)\nDESCRIPTION: This regular expression is used to identify the net volume in cubic meters. It searches for the Application Identifier (AI) `316[0-5]` followed by 6 digits. The expression helps to extract quantity data in cubic meters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_14\n\nLANGUAGE: regex\nCODE:\n```\n\"(316[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on Linux\nDESCRIPTION: Command to start the Odoo server on Linux with basic configuration including addons path and database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ python3 odoo-bin --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Styling Pet Store Message Component\nDESCRIPTION: CSS styles for the message of the day component providing margin, padding and background color.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_34\n\nLANGUAGE: css\nCODE:\n```\n.oe_petstore_motd {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Breakpoint Using ipdb Python\nDESCRIPTION: Inserts a breakpoint in Python code using ipdb to pause execution and allow inspection. Requires ipdb installed and code sections identified for breakpoints.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport ipdb; ipdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Deploy Odoo Module Using Command Line\nDESCRIPTION: Demonstrates deploying an Odoo module using the odoo-bin command-line tool. The command takes the path to the module, the Odoo instance URL, login credentials, and optionally the --force option for updating data.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ odoo-bin deploy <path_to_your_module> https://<your_odoo_instance> --login <your_login> --password <your_password>\"\n```\n\n----------------------------------------\n\nTITLE: Defining 'edit' Attribute in Odoo 17 View\nDESCRIPTION: This snippet defines the 'edit' attribute for Odoo 17 views. It controls whether record editing is enabled or disabled on the view. The attribute is optional, of boolean type, and defaults to True.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_edit.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: edit\n   :noindex:\n\n   Disable/enable record edition on the view.\n\n   :requirement: Optional\n   :type: bool\n   :default: `True`\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Before a Node - Odoo XML\nDESCRIPTION: This snippet illustrates the usage of `position=\"before\"` to insert content before the matched node's parent.  The given XML snippet is inserted as a sibling, preceding the element found using the XPath expression. It depends on the accuracy of the XPath expression.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_records.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"<field name=x_field\\\" position=\\\"before\\\">\\n    <field name=\\\"x_other_field\\\"/>\\n</field>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tools on MacOS\nDESCRIPTION: Command to install Command Line Tools on MacOS using xcode-select.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Defining a Complete List View with Multiple Fields in XML\nDESCRIPTION: Provides a more comprehensive example of a list view definition, including various field types and attributes such as invisible and custom strings.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n    <field name=\"name\" string=\"My Custom Name\"/>\n    <field name=\"amount\" sum=\"Total\"/>\n    <field name=\"company_id\" invisible=\"1\"/>\n    <field name=\"currency_id\"/>\n```\n\n----------------------------------------\n\nTITLE: Listing Records with Search Method in Multiple Languages\nDESCRIPTION: This code demonstrates how to use the search method to filter and retrieve records from the res.partner model. The example filters for company records using a domain filter with the is_company field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))));\n```\n\nLANGUAGE: java\nCODE:\n```\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search\",\n    asList(asList(\n        asList(\"is_company\", \"=\", true)))\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar records []int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search\",\n    []any{[]any{\n        []any{\"is_company\", \"=\", true},\n    }},\n}, &records); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Type Buttons in Odoo\nDESCRIPTION: This XML snippet shows how to link a button to an existing action using the `type=\"action\"` attribute.  The `name` attribute refers to the external identifier of the action to be triggered when the button is clicked. The `string` attribute defines the label displayed on the button.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"action\" name=\"%(test.test_model_action)d\" string=\"My Action\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Odoo XML File Structure\nDESCRIPTION: This snippet illustrates the basic structure of an Odoo XML file, including the XML version and encoding declaration, and the root `<odoo>` tag that encloses the Odoo-specific code. All Odoo XML configurations reside within the `<odoo>` tag.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n<odoo>\\n   ...\\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Manifest JavaScript Asset Configuration\nDESCRIPTION: Manifest file configuration to include the JavaScript tour file in the appropriate Odoo asset bundle\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"Real Estate\",\n    \"assets\": {\n        \"web.assets_backend\": [\n            \"estate/static/src/js/tour.js\",\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Quotation Table with Product Images in XML\nDESCRIPTION: This code snippet describes a table layout for displaying product details including images. It uses conditional rendering and attributes for styling. Dependencies include Odoo's XML template engine and Bootstrap for styles.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<table class=\"table table-sm o_main_table table-borderless mt-4\">\n    <thead style=\"display: table-row-group\">\n        <tr>\n            <th>Image</th>\n            <th name=\"th_description\" class=\"text-start\">Description</th>\n            <th>Product Category</th>\n            <th name=\"th_quantity\" class=\"text-end\">Quantity</th>\n            <th name=\"th_priceunit\" class=\"text-end\">Unit Price</th>\n            [...]  \n            <t t-foreach=\"lines_to_report\" t-as=\"line\">\n                <t t-set=\"current_subtotal\" t-value=\"current_subtotal + line.price_subtotal\"/>\n                <tr t-att-class=\"'bg-200 fw-bold o_line_section' if line.display_type == 'line_section' else 'fst-italic o_line_note' if line.display_type == 'line_note' else ''\">\n                    <t t-if=\"not line.display_type\">\n                       <td>\n                           <span t-field=\"line.product_template_id.image_128\"\n                                 t-options-widget=\"'image'\"\n                                 t-options-width=\"'64px'\"\n                                 t-options-class=\"'rounded-3 shadow img-thumbnail'\"\n                               />\n                       </td>\n                        <td name=\"td_name\"><span t-field=\"line.name\">Bacon Burger</span></td>\n                        <td t-out=\"line.product_id.categ_id.display_name\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Odoo XML\nDESCRIPTION: Example of setting a default value for a field using ir.default record. Shows how to set the default value of x_selling_price to 100000 for all properties.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\"default_real_estate_property_selling_price\" model=\"ir.default\">\n        <field name=\"field_id\" ref=\"estate.field_real_estate_property_selling_price\" />\n        <field name=\"json_value\">100000</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Using Website Layout in QWeb Template in Odoo\nDESCRIPTION: This XML code modifies the QWeb template to use the standard website layout provided by the 'website' module. It sets the title using `<t t-set=\\\"title\\\">` and places the content within a container element using standard Bootstrap classes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n\"<odoo>\n\n    <template id=\\\"index\\\">\n        <t t-call=\\\"website.layout\\\">\n            <t t-set=\\\"title\\\">Academy</t>\n            <div class=\\\"oe_structure\\\">\n                <div class=\\\"container\\\">\n                    <t t-foreach=\\\"teachers\\\" t-as=\\\"teacher\\\">\n                        <p><t t-esc=\\\"teacher.id\\\"/> <t t-esc=\\\"teacher.name\\\"/></p>\n                    </t>\n                </div>\n            </div>\n        </t>\n    </template>\n\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Getting Odoo Server Version - Python\nDESCRIPTION: This Python snippet connects to the xmlrpc/2/common endpoint of an Odoo instance and retrieves the server's version using the xmlrpc.client library. It requires the 'url' variable to be defined with the Odoo instance's URL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncommon = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))\ncommon.version()\n```\n\n----------------------------------------\n\nTITLE: Importing a Utility Function in Odoo\nDESCRIPTION: This snippet demonstrates how to import the memoize function from the utils of the core module in the Odoo web framework. It is used to cache function results for performance improvement.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/framework_overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memoize } from \"@web/core/utils/functions\";\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethod Class in Python for Odoo\nDESCRIPTION: This snippet defines the PaymentMethod class within the Odoo payment module. It includes two methods: _get_compatible_payment_methods for retrieving compatible payment methods, and _get_from_code for getting a payment method from its code.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/payment/payment_method.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass PaymentMethod():\n\n   def _get_compatible_payment_methods(self):\n       # Method implementation not shown\n       pass\n\n   def _get_from_code(self):\n       # Method implementation not shown\n       pass\n```\n\n----------------------------------------\n\nTITLE: Hiding Header/Footer in Odoo XML Template\nDESCRIPTION: These XML snippets show how to hide the header and/or footer of a page in Odoo using the `t-set` directive.  Setting `no_header` or `no_footer` to `true` will suppress the respective elements. This provides control over the page layout for specific needs.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"no_header\" t-value=\"true\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"no_footer\" t-value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing External Library in Odoo Model\nDESCRIPTION: Python code showing how to import and use an external library (Unidecode) in an Odoo model, including model modifications for automatic text processing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields, api\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom unidecode import unidecode\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.model\ndef create(self, values):\n    if 'name' in values:\n        values['name'] = unidecode(values['name'])\n    return super(my_module, self).create(values)\n\ndef write(self, values):\n    if 'name' in values:\n        values['name'] = unidecode(values['name'])\n    return super(my_module, self).write(values)\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Reference in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create an internal reference link in reStructuredText. It's used to link to other sections within the document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:ref:`duplicate a database <on-premise/duplicate>`\n```\n\n----------------------------------------\n\nTITLE: Defining a Product Category for Courses in Odoo\nDESCRIPTION: This XML snippet defines a new product category named 'Courses' in Odoo, using the 'product.public_category' model. This category is used to classify courses as a specific type of product within the e-commerce system.  It also sets the parent category to `website_sale.categ_others`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n\"<odoo>\\n    <record model=\\\"product.public_category\\\" id=\\\"category_courses\\\">\\n        <field name=\\\"name\\\">Courses</field>\\n        <field name=\\\"parent_id\\\" ref=\\\"website_sale.categ_others\\\"/>\\n    </record>\\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: QWeb Template for Coordinates Widget\nDESCRIPTION: This XML template is used by the coordinates widget to render the Google Maps iframe. It uses QWeb's template syntax to insert the latitude and longitude values dynamically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"WidgetCoordinates\">\n    <iframe width=\"400\" height=\"300\"\n        t-attf-src=\"https://maps.google.com/?ie=UTF8&amp;ll={{latitude}},{{longitude}}&amp;output=embed\">\n    </iframe>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Nginx HTTPS Security Header Configuration\nDESCRIPTION: HSTS header configuration for enforcing HTTPS connections\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Gradient to the Website Builder in Odoo\nDESCRIPTION: This XML snippet demonstrates how to add a custom gradient to the Website Builder's color palette using an `ir.ui.view` record. It inherits the `web_editor.colorpicker` view and adds a new gradient to the `gradients` variable using an XPath expression. This makes the custom gradient available for easy selection in the Website Builder.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/gradients.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"colorpicker\" model=\"ir.ui.view\">\n      <field name=\"key\">website_airproof.colorpicker</field>\n      <field name=\"name\">Custom Gradients</field>\n      <field name=\"type\">qweb</field>\n      <field name=\"inherit_id\" ref=\"web_editor.colorpicker\"/>\n      <field name=\"arch\" type=\"xml\">\n         <xpath expr=\"//div[@data-name='predefined_gradients']/t[@t-set='gradients']\" position=\"after\">\n            <t t-set=\"gradients\" t-value=\"gradients + ['linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)']\" />\n         </xpath>\n      </field>\n   </record>\n```\n\n----------------------------------------\n\nTITLE: psql example: describing a table\nDESCRIPTION: This text snippet shows how to use `psql` to describe the structure of the `estate_property` table. It shows the columns, their types, and constraints. Note the `id`, `create_uid`, `create_date`, `write_uid`, and `write_date` fields are automatically added by Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ psql -d rd-demo\n\nrd-demo=# \\d estate_property;\n                                                    Table \"public.estate_property\"\n            Column       |            Type             | Collation | Nullable |                   Default\n        --------------------+-----------------------------+-----------+----------+---------------------------------------------\n        id                 | integer                     |           | not null | nextval('estate_property_id_seq'::regclass)\n        create_uid         | integer                     |           |          |\n        create_date        | timestamp without time zone |           |          |\n        write_uid          | integer                     |           |          |\n        write_date         | timestamp without time zone |           |          |\n        name               | character varying           |           |          |\n        description        | text                        |           |          |\n        postcode           | character varying           |           |          |\n        date_availability  | date                        |           |          |\n        expected_price     | double precision            |           |          |\n        selling_price      | double precision            |           |          |\n        bedrooms           | integer                     |           |          |\n        living_area        | integer                     |           |          |\n        facades            | integer                     |           |          |\n        garage             | boolean                     |           |          |\n        garden             | boolean                     |           |          |\n        garden_area        | integer                     |           |          |\n        garden_orientation | character varying           |           |          |\n        Indexes:\n            \"estate_property_pkey\" PRIMARY KEY, btree (id)\n        Foreign-key constraints:\n            \"estate_property_create_uid_fkey\" FOREIGN KEY (create_uid) REFERENCES res_users(id) ON DELETE SET NULL\n            \"estate_property_write_uid_fkey\" FOREIGN KEY (write_uid) REFERENCES res_users(id) ON DELETE SET NULL\n```\n\n----------------------------------------\n\nTITLE: Declaring Frontend Assets in Odoo Manifest\nDESCRIPTION: Python code for declaring SCSS assets in the module's manifest file. This adds a custom SCSS file to the web.assets_frontend bundle for website styling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web.assets_frontend': [\n      'website_airproof/static/src/scss/theme.scss',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Install ipdb for Python Debugging Console\nDESCRIPTION: Installs ipdb, a Python library used for debugging purposes by setting breakpoints and examination during code execution. Requires Python environment and pip installed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\npip install ipdb\n```\n\n----------------------------------------\n\nTITLE: Documenting AccountReportLine Model in Odoo (reStructuredText)\nDESCRIPTION: This snippet defines the structure for documenting the AccountReportLine model in Odoo. It uses reStructuredText directives to auto-generate documentation for the model and its fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_report_line.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n===========\nReport Line\n===========\n\n.. automodel:: odoo.addons.account.models.account_report.AccountReportLine\n    :main:\n\n    .. autofield:: name\n    .. autofield:: expression_ids\n    .. autofield:: report_id\n    .. autofield:: hierarchy_level\n    .. autofield:: parent_id\n    .. autofield:: children_ids\n    .. autofield:: foldable\n    .. autofield:: print_on_new_page\n    .. autofield:: action_id\n    .. autofield:: hide_if_zero\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for IoT Handlers\nDESCRIPTION: Shows the required directory structure for organizing IoT device handlers within an Odoo module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour_module\n├── ...\n└── iot_handlers\n    ├── drivers\n    │   ├── DriverName.py\n    │   └── ...\n    │\n    └── interfaces\n        ├── InterfaceName.py\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Mega Menu Option to Website Builder in Odoo\nDESCRIPTION: This XML snippet demonstrates how to add an option for a custom mega menu template to the Odoo website builder. It inherits from `website.snippet_options` and adds a new `we-button` that allows users to select the `website_airproof.s_mega_menu_airproof` template, created in the previous step, for their mega menu. This provides a user-friendly way to incorporate custom mega menu designs.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n\"<template id=\"snippet_options\" inherit_id=\"website.snippet_options\" name=\"Airproof - Mega Menu Options\">\n    <xpath expr=\"//*[@data-name='mega_menu_template_opt']/*\" position=\"before\">\n        <t t-set=\"_label\">Airproof</t>\n        <we-button t-att-data-select-label=\"_label\"\n            data-select-template=\"website_airproof.s_mega_menu_airproof\"\n            data-img=\"/website_airproof/static/src/img/builder/header_opt.svg\"\n            t-out=\"_label\"/>\n    </xpath>\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Directory Path Changes for Finance and General Applications\nDESCRIPTION: A comprehensive list of file path migrations showing the movement of documentation files from one location to another, including reorganization of accounting, payment, and general documentation structures.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/16.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/finance\n\napplications/finance/accounting/bank/feeds/bank_statements.rst applications/finance/accounting/bank/feeds/transactions.rst            # bank_statements -> transactions\napplications/finance/accounting/bank/reconciliation_models.rst applications/finance/accounting/bank/reconciliation/reconciliation_models.rst\napplications/finance/accounting/others/analytic/usage.rst applications/finance/accounting/reporting/analytic_accounting.rst           # others/analytic/usage --> reporting/analytic_accounting\napplications/finance/accounting/others/analytic/timesheets.rst applications/finance/accounting/reporting/analytic_accounting.rst      # others/analytic/timesheets --> reporting/analytic_accounting\napplications/finance/accounting/others/analytic/purchase_expenses.rst applications/finance/accounting/reporting/analytic_accounting.rst # others/analytic/purchase_expenses --> reporting/analytic_accounting\napplications/finance/accounting/others/analytic_accounting.rst applications/finance/accounting/reporting/analytic_accounting.rst      # others/* -> reporting/*\napplications/finance/accounting/reporting/overview/tax_carryover.rst applications/finance/accounting/reporting/tax_carryover.rst      # reporting/overview/* -> reporting/*\napplications/finance/payment_acquirers.rst applications/finance/payment_providers.rst                                                 # /payment_acquirers -> /payment_providers\napplications/finance/payment_acquirers/adyen.rst applications/finance/payment_providers/adyen.rst                                     # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/alipay.rst applications/finance/payment_providers/alipay.rst                                   # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/amazon_payment_services.rst applications/finance/payment_providers/amazon_payment_services.rst # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/asiapay.rst applications/finance/payment_providers/asiapay.rst                                 # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/authorize.rst applications/finance/payment_providers/authorize.rst                             # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/buckaroo.rst applications/finance/payment_providers/buckaroo.rst                               # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/flutterwave.rst applications/finance/payment_providers/flutterwave.rst                         # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/mercado_pago.rst applications/finance/payment_providers/mercado_pago.rst                       # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/mollie.rst applications/finance/payment_providers/mollie.rst                                   # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/ogone.rst applications/finance/payment_providers/ogone.rst                                     # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/paypal.rst applications/finance/payment_providers/paypal.rst                                   # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/sips.rst applications/finance/payment_providers/sips.rst                                       # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/stripe.rst applications/finance/payment_providers/stripe.rst                                   # /payment_acquirers/* -> /payment_providers/*\napplications/finance/payment_acquirers/wire_transfer.rst applications/finance/payment_providers/wire_transfer.rst                     # /payment_acquirers/* -> /payment_providers/*\napplications/finance/spreadsheet.rst applications/productivity/spreadsheet.rst                                                        # finance/* -> productivity/*\napplications/finance/spreadsheet/insert.rst applications/productivity/spreadsheet/insert.rst                                          # finance/spreadsheet/* -> productivity/spreadsheet/*\napplications/finance/spreadsheet/templates.rst applications/productivity/spreadsheet/templates.rst                                    # finance/spreadsheet/* -> productivity/spreadsheet/*\napplications/finance/accounting/bank/cash_register.rst applications/sales/point_of_sale.rst\n\n# applications/general\n\napplications/general/search.rst applications/essentials/search.rst                        # general/* -> essentials/*\napplications/general/reporting.rst applications/essentials/reporting.rst                  # general/* -> essentials/*\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields in List View XML\nDESCRIPTION: Shows how to make fields optionally visible in a list view. The 'optional' attribute allows users to show or hide specific columns.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" optional=\"show\"/>\n<field name=\"fname_b\" optional=\"hide\"/>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Data Odoo Modules\nDESCRIPTION: Illustrates the directory structure for data modules in Odoo, which primarily utilize XML files for defining module components.  The structure includes directories for actions, models, security, and views, along with the essential __init__.py and __manifest__.py files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"estate\n├── actions\n│   └── *.xml\n├── models\n│   └── *.xml\n├── security\n│   └── ir.model.access.csv\n│   └── estate_security.xml\n├── views\n│   └── *.xml\n├── __init__.py\n└── __manifest__.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fonts to QWeb Reports in XML\nDESCRIPTION: This XML snippet shows how to inherit the web.report_assets_common template to add a custom LESS file for fonts in QWeb reports. It uses an XPath expression to insert a link to the custom LESS file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<template id=\"report_assets_common_custom_fonts\" name=\"Custom QWeb fonts\" inherit_id=\"web.report_assets_common\">\n    <xpath expr=\".\" position=\"inside\">\n        <link href=\"/your_module/static/src/less/fonts.less\" rel=\"stylesheet\" type=\"text/less\"/>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Form View for Teachers in Odoo\nDESCRIPTION: This XML snippet defines a custom form view for the 'academy.teachers' model in Odoo. It specifies the fields to be displayed in the form, including 'name' and 'biography', using the <sheet> tag for layout.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"academy_teacher_form\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy teachers: form</field>\\n    <field name=\\\"model\\\">academy.teachers</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <form>\\n            <sheet>\\n                <field name=\\\"name\\\"/>\\n                <field name=\\\"biography\\\"/>\\n            </sheet>\\n        </form>\\n    </field>\\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Using SQL Transactions in PostgreSQL for Safe Database Operations\nDESCRIPTION: Examples of using SQL transactions to safely modify database content, including a demonstration of how to rollback mistaken operations and commit proper changes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nodoo-addons-master-1=> BEGIN;\nBEGIN\nodoo-addons-master-1=> UPDATE res_users SET password = '***';\nUPDATE 457\nodoo-addons-master-1=> ROLLBACK;\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Switching Account with Odoo Mobile JavaScript\nDESCRIPTION: Shows how to switch user accounts on the device using the `switchAccount` method in Odoo's mobile JavaScript API. The method does not take parameters, and it is dependent on the functionality of the mobile app.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.methods.switchAccount();\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for Database Neutralization\nDESCRIPTION: Console command demonstrating how to neutralize an Odoo database by specifying the addons path and database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --addons-path <PATH,...>  neutralize -d <database>\n```\n\n----------------------------------------\n\nTITLE: Call a translatable string in XML\nDESCRIPTION: This snippet demonstrates how to call a previously defined translatable string within a non-translatable attribute (`t-att-title`) in XML. While the `t-att-title` itself isn't directly translatable, the variable it references (\"label\") holds translatable content.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"<div t-att-title=\\\"label\\\" />\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"<nav t-att-title=\\\"label\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Model in XML\nDESCRIPTION: Shows how to define an Odoo model using XML, creating a record in the ir.model model.  The model's name and the technical name, which must be prefixed with 'x_', are defined within the record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<odoo>\n    <record id=\\\"model_real_estate_property\\\" model=\\\"ir.model\\\">\n        <field name=\\\"name\\\">Real Estate Property</field>\n        <field name=\\\"model\\\">x_estate.property</field>\n    </record>\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice in Action Override\nDESCRIPTION: This snippet demonstrates how to create an empty 'account.move' invoice when a property is marked as sold. It retrieves necessary parameters from the 'estate.property' record to populate the invoice. The 'move_type' is specified as a 'Customer Invoice'.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/13_other_module.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nself.env[\"account.move\"].create({\n    \"partner_id\": self.partner_id,\n    \"move_type\": \"out_invoice\",\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an Odoo Tour in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to register a tour in Odoo. It imports the 'web_tour.tour' module and uses the 'register' function to define a new tour with a name, URL, and test flag. The tour is defined with a sequence of steps (currently empty) which defines the interactive flow of the tour.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\nimport tour from 'web_tour.tour';\ntour.register('rental_product_configurator_tour', {\n    url: '/web',  // Here, you can specify any other starting url\n    test: true,\n}, [\n    // Your sequence of steps\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Website Page in XML (Odoo)\nDESCRIPTION: This XML snippet defines a default website page (Home) in Odoo. It uses the `website.layout` template and sets the `pageName` variable.  The wrap div contains the actual content structure.  This demonstrates the basic structure for defining static pages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"website.homepage\" name=\"Home\">\n   <t t-call=\"website.layout\">\n      <t t-set=\"pageName\" t-value=\"'homepage'\"/>\n      <div id=\"wrap\" class=\"oe_structure oe_empty\" />\n   </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: XPath Inside Position Example\nDESCRIPTION: This snippet shows how to add an extra list element after the last child of the `<ul>` element using xpath and the `inside` position.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//ul\\\" position=\\\"inside\\\">\\n   <li>Last element of the list</li>\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Update with Database Filter and Restriction\nDESCRIPTION: This bash command combines both database filtering and restriction while updating a module. It filters databases to those starting with '11', restricts access further to '11firstdatabase' and '11seconddatabase', and then updates the 'base' module on '11firstdatabase'.  Like the previous example, '11seconddatabase' will be created if it doesn't exist.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --db-filter ^11.*$ --database 11firstdatabase,11seconddatabase -u base\n```\n\n----------------------------------------\n\nTITLE: Disabling Active Footer Template in Odoo XML\nDESCRIPTION: Deactivates the default footer template in Odoo XML configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.footer_custom\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Module Manifest CLOC Exclusion Configuration\nDESCRIPTION: Python code showing how to configure the manifest file to exclude specific files or patterns from CLOC line counting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"cloc_exclude\": [\n    \"lib/common.py\", # exclude a single file\n    \"data/*.xml\",    # exclude all XML files in a specific folder\n    \"example/**/*\",  # exclude all files in a folder hierarchy recursively\n    \"**/*.scss\",     # exclude all scss file from the module\n]\n```\n\n----------------------------------------\n\nTITLE: XPath Attributes Position Add Example\nDESCRIPTION: This snippet demonstrates how to add `x_airproof_header` to the class attribute of the header element using xpath and the `attributes` position. It uses the `separator` attribute to add a space before the added class.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//header\\\" position=\\\"attributes\\\">\\n   <attribute name=\\\"class\\\" add=\\\"x_airproof_header\\\" separator=\\\" \\\"/>\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Odoo Proprietary License Definition\nDESCRIPTION: The full text of the Odoo Proprietary License v1.0 used for Odoo Apps and website themes. Details usage rights, restrictions, and liability disclaimers.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/licenses.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOdoo Proprietary License v1.0\n\nThis software and associated files (the \"Software\") may only be used\n(executed, modified, executed after modifications) if you have purchased a\nvalid license from the authors, typically via Odoo Apps, or if you have\nreceived a written agreement from the authors of the Software (see the\nCOPYRIGHT file).\n\nYou may develop Odoo modules that use the Software as a library (typically\nby depending on it, importing it and using its resources), but without\ncopying any source code or material from the Software. You may distribute\nthose modules under the license of your choice, provided that this license\nis compatible with the terms of the Odoo Proprietary License (For example:\nLGPL, MIT, or proprietary licenses similar to this one).\n\nIt is forbidden to publish, distribute, sublicense, or sell copies of the\nSoftware or modified copies of the Software.\n\nThe above copyright notice and this permission notice must be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Teacher Model Definition in Python\nDESCRIPTION: Odoo model class defining teacher fields including name and HTML biography field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass Teachers(models.Model):\n    _name = 'academy.teachers'\n\n    name = fields.Char()\n    biography = fields.Html()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Pet Store CSS Styling\nDESCRIPTION: Complete CSS styling for the pet store homepage including layout and component styles.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n.oe_petstore_homepage {\n    display: table;\n}\n\n.oe_petstore_homepage_left {\n    display: table-cell;\n    width : 300px;\n}\n\n.oe_petstore_homepage_right {\n    display: table-cell;\n    width : 300px;\n}\n\n.oe_petstore_motd {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n\n.oe_petstore_pettoyslist {\n    padding: 5px;\n}\n\n.oe_petstore_pettoy {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database to Odoo Enterprise on Linux\nDESCRIPTION: This command updates the existing Odoo database to use Enterprise packages. It installs the web_enterprise module and stops after initialization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/community_to_enterprise.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python3 /usr/bin/odoo-bin -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image/Pattern with SCSS\nDESCRIPTION: This placeholder snippet indicates where to define CSS rules to set background images or patterns for your Odoo website using SCSS. The specific implementation details would go here.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_14\n\nLANGUAGE: scss\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Building Odoo Documentation with Make\nDESCRIPTION: Command to build the Odoo documentation locally by navigating to the root directory and using the make command. Additional commands are available through make help.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Title Parts Update Example in JavaScript\nDESCRIPTION: Example showing how to modify title parts by setting specific keys to null to remove them from the title.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsetParts({\n  action: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Module File Structure for Odoo\nDESCRIPTION: This snippet illustrates the recommended file structure for an Odoo module, showcasing how to organize models, views, controllers, and other essential directories to foster clarity and maintainability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- models/\n    |   |-- plant_nursery.py (first main model)\n    |   |-- plant_order.py (another main model)\n    |   |-- res_partner.py (inherited Odoo model)\n```\n\n----------------------------------------\n\nTITLE: Embedding a list of offers in a form\nDESCRIPTION: This XML snippet demonstrates how to embed a list of offers (``offer_ids``) directly within a form view. The offers will be displayed using the default view for the ``estate.property.offer`` model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"offer_ids\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Tree View to a One2many field\nDESCRIPTION: This XML snippet modifies the teacher form view to display the courses taught by a teacher using a One2many field with a tree view.  The tree view is editable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"academy_teacher_form\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">Academy teachers: form</field>\\n    <field name=\\\"model\\\">academy.teachers</field>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <form>\\n            <sheet>\\n                <field name=\\\"name\\\"/>\\n                <field name=\\\"biography\\\"/>\\n                <field name=\\\"course_ids\\\">\\n                    <tree Sstring=\\\"Courses\\\" editable=\\\"bottom\\\">\\n                        <field name=\\\"name\\\"/>\\n                    </tree>\\n                </field>\\n            </sheet>\\n        </form>\\n    </field>\\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Documenting AccountAccount Model in ReStructuredText for Odoo 17\nDESCRIPTION: This snippet defines the structure for documenting the AccountAccount model in Odoo 17. It uses autodoc directives to automatically generate documentation for the model and its fields from the source code.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_account.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _reference/account_account:\n\n=======\nAccount\n=======\n\n.. automodel:: odoo.addons.account.models.account_account.AccountAccount\n    :main:\n\n    .. autofield:: name\n    .. autofield:: currency_id\n    .. autofield:: code\n    .. autofield:: account_type\n    .. autofield:: reconcile\n    .. autofield:: note\n    .. autofield:: tax_ids\n    .. autofield:: tag_ids\n```\n\n----------------------------------------\n\nTITLE: Initializing Odoo JavaScript Tour\nDESCRIPTION: Configures a minimal tour for the Estate module to guide users through the application interface using Odoo's tour registry\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nregistry.category(\"web_tour.tours\").add('estate_tour', {\n    url: \"/web\",\n    sequence: 170,\n    steps: () => [{\n    trigger: '.o_app[data-menu-xmlid=\"estate.menu_root\"]',\n    content: 'Start selling your properties from this app!',\n    position: 'bottom',\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Type Stat Button XML\nDESCRIPTION: XML definition for adding a stat button to estate.property.type form view that displays offer count and links to offer action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"%(estate.property_offer_action)d\" type=\"action\" class=\"oe_stat_button\" icon=\"fa-money\">\n    <field name=\"offer_count\" widget=\"statinfo\" string=\"Offers\"/>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title with Title Service in JavaScript\nDESCRIPTION: Demonstrates how to use the title service to modify the document title by setting title parts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// in some component setup method\nconst titleService = useService(\"title\");\n\ntitleService.setParts({ odoo: \"Odoo 15\", fruit: \"Apple\" });\n```\n\n----------------------------------------\n\nTITLE: Static Files Organization in Odoo\nDESCRIPTION: This snippet outlines the organizational standards for static files within an Odoo module, focusing on the naming conventions of JS and CSS files to ensure modular integrity and maintainability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- static/\n    |   |-- img/\n    |   |   |-- my_little_kitten.png\n    |   |   |-- troll.jpg\n    |   |-- lib/\n    |   |   |-- external_lib/\n    |   |-- src/\n    |   |   |-- js/\n    |   |   |   |-- widget_a.js\n    |   |   |   |-- widget_b.js\n    |   |   |-- scss/\n    |   |   |   |-- widget_a.scss\n    |   |   |   |-- widget_b.scss\n    |   |   |-- xml/\n    |   |   |   |-- widget_a.xml\n    |   |   |   |-- widget_a.xml\n```\n\n----------------------------------------\n\nTITLE: Adding Debugger Breakpoint in Odoo.sh Code\nDESCRIPTION: Python code snippet that adds a conditional breakpoint using pdb, with a condition to ensure the debugger only activates when run from a shell.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nif sys.__stdin__.isatty():\n    import pdb; pdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Protecting Records from Overwriting in Odoo with `noupdate`\nDESCRIPTION: This XML snippet demonstrates the usage of the `noupdate` attribute in Odoo to prevent data overwriting during module updates.  When set to \"1\" on the `<odoo>` tag, all records within the file are protected. This ensures that user modifications to these records are preserved during module upgrades.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo noupdate=\"1\">\n   <record id=\"menu_company\" model=\"website.menu\">\n      <!-- Fields -->\n   </record>\n   <record id=\"menu_faq\" model=\"website.menu\">\n      <!-- Fields -->\n   </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Access Rights in Odoo CSV File\nDESCRIPTION: This code snippet demonstrates how to define access rights in Odoo using a CSV file named `ir.model.access.csv`. It shows the structure of the file, including the `id`, `name`, `model_id/id`, `group_id/id`, `perm_read`, `perm_write`, `perm_create`, and `perm_unlink` fields. The example shows how to grant read-only access to a `test_model` for the `base.group_user` group.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nid,name,model_id/id,group_id/id,perm_read,perm_write,perm_create,perm_unlink\naccess_test_model,access_test_model,model_test_model,base.group_user,1,0,0,0\n```\n\n----------------------------------------\n\nTITLE: Data Extension in XML\nDESCRIPTION: This XML snippet demonstrates how to extend existing data by adding new fields to a model from another module using its XML ID.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"field_c\">valueC1</field>\n  </record>\n\n  <record id=\"id2\" model=\"tutorial.example\">\n    <field name=\"field_c\">valueC2</field>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: XPath Replace Position Example\nDESCRIPTION: This snippet shows how to replace the first element with a class of 'breadcrumb' using xpath and the `replace` position.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//*[hasclass('breadcrumb')]\\\" position=\\\"replace\\\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Shape in XML\nDESCRIPTION: This XML snippet demonstrates how to use a custom shape within a website section.  The `data-oe-shape-data` attribute specifies the shape and allows for redefining colors using a key-value mapping. The custom shape's class name, `o_illustration_hexagons_01`, is added to the shape's `div` element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n    <section class=\"...\" data-oe-shape-data=\"{'shape': 'illustration/hexagons/01', 'colors': 'c4': '#8595A2', 'c5': 'rgba(0, 255, 0)'}\">\n        <div class=\"o_we_shape o_illustration_hexagons_01\"/>\n        <div class=\"container\">\n            <!-- Content -->\n        </div>\n    </section>\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Page Template Groups in Odoo\nDESCRIPTION: This XML snippet defines the default template groups available in Odoo's website module. These groups categorize page templates for organization in the website builder interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_page_template_groups\">\n   <div id=\"basic\">Basic</div>\n   <div id=\"about\">About</div>\n   <div id=\"landing\">Landing Pages</div>\n   <div id=\"gallery\">Gallery</div>\n   <div id=\"services\">Services</div>\n   <div id=\"pricing\">Pricing Plans</div>\n   <div id=\"team\">Team</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in JavaScript\nDESCRIPTION: Defines the Root component class that extends Owl's Component class, setting up the template and props.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\nimport { Component } from \"@odoo/owl\";\n\nexport class Root extends Component {\n    static template = \"your_module.Root\";\n    static props = {};\n}\n```\n\n----------------------------------------\n\nTITLE: Bash Auto-Completion Configuration\nDESCRIPTION: This bash script enables auto-completion for the Odoo CLI in the user's shell. It extracts available options from `./odoo-bin --help`, formats them, and adds them to the `~/.bash_completion` file, providing tab-completion functionality for `odoo-bin` commands.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"complete -W '`./odoo-bin --help | \\\n  sed -e 's/[^a-z_-]\\(-\\+[a-z0-9_-]\\+\\)/\\n\\1\\n/' | \\\n  grep -- '^-' | sort | uniq | tr '\\n' ' '`' odoo-bin\" >> ~/.bash_completion\n```\n\n----------------------------------------\n\nTITLE: Including Sign In Component in Custom Header XML\nDESCRIPTION: Adds the sign-in component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"portal.placeholder_user_sign_in\">\n   <t t-set=\"_item_class\" t-valuef=\"nav-item\"/>\n   <t t-set=\"_link_class\" t-valuef=\"nav-link\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Server on Debian/Ubuntu for Odoo\nDESCRIPTION: Command to install the PostgreSQL server on Debian/Ubuntu systems, which is required for Odoo to run properly.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install postgresql -y\n```\n\n----------------------------------------\n\nTITLE: Implementing an ArchParser for Gallery View\nDESCRIPTION: This JavaScript code demonstrates a basic structure for an ArchParser class that will extract attributes from the XML definition of a gallery view, facilitating the retrieval of view metadata.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class MyCustomArchParser {\n    parse(xmlDoc) {\n       const myAttribute = xmlDoc.getAttribute(\"my_attribute\")\n       return {\n           myAttribute,\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Field with Widget Options and Domain Example\nDESCRIPTION: Example of field configuration with widget options and domain limitations for relational fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"tag_ids\" widget=\"many2many_tags\" options=\"{'color_field': 'FIELD_NAME', 'no_quick_create': True}\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Footer Template in SCSS for Odoo Website Theme\nDESCRIPTION: Specifies the use of a custom footer template in the website theme's SCSS variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_34\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'footer-template': 'airproof',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: This snippet outlines how to install Python dependencies needed for the documentation using pip. This step is crucial to ensure all necessary packages are available for documentation tasks.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring List State Selection Widget\nDESCRIPTION: State selection widget configuration for list views with hidden label option.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"kanban_state\" widget=\"state_selection\" options=\"{'hide_label': true}\" />\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Module Deployment\nDESCRIPTION: Git commands to stage, commit and push the new module to the repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git add my_module\n$ git commit -m \"My first module\"\n$ git push https HEAD:feature-1\n\n# Or from local computer:\n$ git push -u origin feature-1\n```\n\n----------------------------------------\n\nTITLE: GST Return Filing Workflow\nDESCRIPTION: Three-step process for filing GST returns including GSTR-1 submission, GSTR-2B reconciliation, and GSTR-3 reporting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/india.rst#2025-04-18_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nGSTR-1 Process:\n1. Verify GSTR-1 report\n2. Generate spreadsheet view\n3. Push to GSTN\n4. Wait for validation\n5. Check status (Sent/Error)\n6. Mark as Filed\n\nGSTR-2B Process:\n1. Fetch GSTR-2B Summary\n2. Wait for processing\n3. Check matching status\n4. Reconcile if needed\n\nGSTR-3 Process:\n1. Verify auto-generated report\n2. Create closing entry\n3. Post tax payment details\n```\n\n----------------------------------------\n\nTITLE: Text Manipulation Functions Collection\nDESCRIPTION: A set of text processing functions for string manipulation, including character conversion, concatenation, searching, and string length operations\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/spreadsheet/functions.rst#2025-04-18_snippet_4\n\nLANGUAGE: Excel Formula\nCODE:\n```\nJOIN(delimiter, value_or_array1, [value_or_array2, ...])\n```\n\nLANGUAGE: Excel Formula\nCODE:\n```\nCONCATENATE(string1, [string2, ...])\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Upgrade Utils via Command Line\nDESCRIPTION: Instructions for installing the Odoo Upgrade Utils library by cloning the repository and configuring the Odoo server to use it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --upgrade-path=/path/to/upgrade-util/src,/path/to/other/upgrade/script/directory [...]\n```\n\n----------------------------------------\n\nTITLE: Inserting Files After Specific Assets\nDESCRIPTION: Illustrates the use of the 'after' operation to add files immediately after a specified target within an asset bundle. This is useful for managing the order of JavaScript or CSS files that depend on other files being loaded first.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('after', 'web/static/src/css/list_view.scss', 'my_addon/static/src/css/list_view.scss'),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Template in Odoo XML\nDESCRIPTION: Creates a new custom header template in Odoo XML, extending the base layout.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"header\" model=\"ir.ui.view\">\n   <field name=\"name\">Airproof Header</field>\n   <field name=\"type\">qweb</field>\n   <field name=\"key\">website_airproof.header</field>\n   <field name=\"inherit_id\" ref=\"website.layout\"/>\n   <field name=\"mode\">extension</field>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//header//nav\" position=\"replace\">\n         <!-- Static Content -->\n         <!-- Components -->\n         <!-- Editable areas -->\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Fields Metadata in Odoo\nDESCRIPTION: Shows how to retrieve detailed field metadata using fields_get method, filtering attributes to show human-readable information like labels, help text, and field types\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {'attributes': ['string', 'help', 'type']})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {attributes: %w(string help type)})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')))\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(db, uid, password, \"res.partner\", \"fields_get\", emptyList(), new HashMap() {{ put(\"attributes\", asList(\"string\", \"help\", \"type\")); }}))\n```\n\nLANGUAGE: go\nCODE:\n```\nmodels.Call(\"execute_kw\", []any{db, uid, password, \"res.partner\", \"fields_get\", []any{}, map[string][]string{\"attributes\": {\"string\", \"help\", \"type\"}}}, &recordFields)\n```\n\n----------------------------------------\n\nTITLE: SCSS Properties Order Example\nDESCRIPTION: Demonstration of proper SCSS property ordering and variable declarations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_29\n\nLANGUAGE: scss\nCODE:\n```\n.o_element {\n   $-inner-gap: $border-width + $legend-margin-bottom;\n\n   --element-margin: 1rem;\n   --element-size: 3rem;\n\n   @include o-position-absolute(1rem);\n   display: block;\n   margin: var(--element-margin);\n   width: calc(var(--element-size) + #{$-inner-gap});\n   border: 0;\n   padding: 1rem;\n   background: blue;\n   font-size: 1rem;\n   filter: blur(2px);\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Declaration Format\nDESCRIPTION: This text snippet outlines the format for declaring simple data in CSV format for Odoo modules, including extended character support and syntax highlighting tools.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nid,field_a,field_b,related_id:id\nid1,valueA1,valueB1,module.relatedid\nid2,valueA2,valueB2,module.relatedid\n\n```\n\n----------------------------------------\n\nTITLE: Styling Font Awesome Icons in Odoo\nDESCRIPTION: This code illustrates how to increase the size of Font Awesome icons by applying size modifiers (fa-2x, fa-3x, etc.) in Odoo. This enhances the visual impact of icons while keeping the implementation clean and concise.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\"fa fa-2x fa-picture-o rounded-circle\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification with Odoo Mobile JavaScript\nDESCRIPTION: Shows how to display a notification on the mobile device using the `showNotification` method within Odoo's mobile JavaScript framework. It accepts a `title` and `message` for the notification. The method assumes the presence of the mobile app for execution.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/mobile.rst#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmobile.showNotification({'title': 'Simple Notification', 'message': 'This is a test for a simple notification'});\n```\n\n----------------------------------------\n\nTITLE: Creating We-Checkbox Toggle in XML for Odoo Website Theme\nDESCRIPTION: Demonstrates how to create a we-checkbox toggle switch option for enabling a tooltip.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<we-checkbox\n   string=\"Tooltip\"\n   data-select-class=\"s_airproof_snippet_tooltip\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Result Structure for Invoice Data Extraction\nDESCRIPTION: This snippet shows the structure of a feature result, which includes the selected value, optional selected values, and a list of candidates. Each candidate has content, coordinates, and page information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"feature_name\": {\n    \"selected_value\": candidate_12,\n    \"candidates\": [candidate_12, candidate_3, candidate_4, ...]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"candidate\": [\n    {\n        \"content\": string|float,\n        \"coords\": [float, float, float, float, float],\n        \"page\": int\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to Page in Odoo XML Template\nDESCRIPTION: This XML snippet demonstrates adding a CSS class to a page using the `t-set` directive within an Odoo template. The `pageName` variable is set to a value using `t-valuef`, allowing dynamic class assignment.  This enables custom styling and layout for specific pages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"pageName\" t-valuef=\"...\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding DateTime Field to Odoo Model\nDESCRIPTION: Python code to add a new datetime field to an existing Odoo model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstart_datetime = fields.Datetime('Start time', default=lambda self: fields.Datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Performing API Document Parsing Request using JSON-RPC2 in JavaScript\nDESCRIPTION: This snippet illustrates how to make a request for digitization of a document using Odoo's Extract API via JSON-RPC2. It includes parameters like account_token, version, documents, and optional parameters such as dbuuid and webhook_url. Correct API responses include a status and document_token for successful parsing requests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"account_token\": string,\n        \"version\": int,\n        \"documents\": [string],\n        \"dbuuid\": string,\n        \"webhook_url\": string,\n        \"user_infos\": {\n            \"user_company_vat\": string,\n            \"user_company_name\": string,\n            \"user_company_country_code\": string,\n            \"user_lang\": string,\n            \"user_email\": string,\n            \"purchase_order_regex\": string,\n            \"perspective\": string,\n        },\n    },\n    \"id\": string,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Owl Component with onError Hook\nDESCRIPTION: Demonstrates how to use the onError hook in an Owl component to handle errors, remove erroring subcomponents, and report the error asynchronously.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, onError } from \"@odoo/owl\";\nclass MyComponent extends Component {\n  setup() {\n    onError((error) => {\n      // implementation of this method is left as an exercise for the reader\n      this.removeErroringSubcomponent();\n      Promise.reject(error); // create a rejected Promise without passing it anywhere\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field with Domain Attribute Example\nDESCRIPTION: Shows how to use the domain attribute to filter selectable records in relational fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" domain=\"[('fname_a', '=', parent.fname_b)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Order in Odoo XML Tree Views\nDESCRIPTION: This snippet demonstrates how to use the default_order attribute in an Odoo XML tree view to customize the sorting of records. It shows how to specify multiple fields for ordering and how to reverse the sort direction using the 'desc' modifier.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_default_order.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<tree default_order=\"sequence,name desc\">\n    ...\n</tree>\n```\n\n----------------------------------------\n\nTITLE: XPath Before Position Example\nDESCRIPTION: This snippet shows how to add a div before the `<nav>` element which is a direct child of `<header>` element using xpath and `before` position.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n\"<xpath expr=\\\"//header/nav\\\" position=\\\"before\\\">\\n   <div>Some content before the header</div>\\n</xpath>\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories - Windows SSH\nDESCRIPTION: Commands to clone Odoo Community and Enterprise repositories using SSH on Windows systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> git clone git@github.com:odoo/odoo.git\nC:\\> git clone git@github.com:odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Adding Website Dependency to Manifest in Odoo\nDESCRIPTION: This Python code snippet illustrates how to declare a dependency on the 'website' module in the `__manifest__.py` file of an Odoo module. This dependency allows the module to utilize website-related features and functionalities.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"'version': '0.1',\n\n# any module necessary for this one to work correctly\n'depends': ['website'],\n\n# always loaded\n'data': [\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new git branch\nDESCRIPTION: This command creates a new branch in your local git repository.  The name of the branch is based on the current branch name with \"-explain-pricelists\" appended. This is the first step in preparing to submit a pull request.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ git switch -c {CURRENT_BRANCH}-explain-pricelists\"\n```\n\n----------------------------------------\n\nTITLE: Defining banner_route in XML view\nDESCRIPTION: This XML snippet shows how to define the `banner_route` attribute within an Odoo tree view. The `banner_route` attribute specifies the URL to fetch the HTML content from.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_banner_route.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<tree banner_route=\\\"/module_name/hello\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository for Odoo Module Development\nDESCRIPTION: Commands to clone the Github repository and create a development branch for module development.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/src\n$ cd ~/src\n$ git clone https://github.com/odoo/odoo-addons.git\n$ cd ~/src/odoo-addons\n```\n\n----------------------------------------\n\nTITLE: Tag Expression Examples - Odoo Report Syntax\nDESCRIPTION: Examples showing how to use tag expressions in financial reports, including credit balance filtering and code prefix exclusion.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/reporting/customize.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntag(my_module.my_tag)C\n```\n\nLANGUAGE: text\nCODE:\n```\ntag(my_module.my_tag)\\(10)\n```\n\n----------------------------------------\n\nTITLE: XML Menu Definition\nDESCRIPTION: This XML snippet demonstrates defining menu items and sub-menus in Odoo using the standard menuitem structure. It showcases setting the parent menu, action, and sequence for proper placement and functionality within the Odoo interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem\n    id=\"model_name_menu_root\"\n    name=\"Main Menu\"\n    sequence=\"5\"\n/>\n<menuitem\n    id=\"model_name_menu_action\"\n    name=\"Sub Menu 1\"\n    parent=\"module_name.module_name_menu_root\"\n    action=\"model_name_action\"\n    sequence=\"10\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories - Linux SSH\nDESCRIPTION: Commands to clone Odoo Community and Enterprise repositories using SSH on Linux systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:odoo/odoo.git\n$ git clone git@github.com:odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Defining Tree View in Odoo XML\nDESCRIPTION: Simple tree/list view definition showing how to display fields in tabular format.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/backend.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<tree string=\"Idea list\">\n    <field name=\"name\"/>\n    <field name=\"inventor_id\"/>\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary File Field with Filename\nDESCRIPTION: Example of binary file widget configuration with filename attribute for saving file names.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"datas\" filename=\"datas_fname\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Stat Info Widget with Label Field\nDESCRIPTION: Configuration of statinfo widget within a button with custom label field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"%(act_payslip_lines)d\" icon=\"fa-money\" type=\"action\"><field name=\"payslip_count\" widget=\"statinfo\" string=\"Payslip\" options=\"{'label_field': 'label_tasks'}\" /></button>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database List via XML-RPC in Python\nDESCRIPTION: This code snippet demonstrates how to programmatically retrieve the list of databases displayed in the Odoo database manager using XML-RPC in Python. It uses the xmlrpc.client library to make a web service call to the 'list' method of the 'odoo.database' model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_online.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\n\nUSER = 'user@domain.tld'\nAPIKEY = 'your_apikey'\n\nroot = 'https://www.odoo.com/xmlrpc/'\nuid = xmlrpc.client.ServerProxy(root + 'common').login('openerp', USER, APIKEY)\nsock = xmlrpc.client.ServerProxy(root + 'object')\ndatabases_list = sock.execute('openerp', uid, APIKEY, 'odoo.database', 'list')\n```\n\n----------------------------------------\n\nTITLE: Attachment Preview Widget\nDESCRIPTION: Implementation of attachment preview section in a form view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        ...\n    </sheet>\n    <div class=\"o_attachment_preview\"/>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Restricting Settings Menu Visibility in Odoo XML\nDESCRIPTION: XML configuration demonstrating how to limit the visibility of elearning settings menu to system administrators\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/restrict_data_access.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem name=\"Configuration\"\n          id=\"website_slides.menu_website_slides_settings\"\n          parent=\"website_slides.website_slides_menu_root\"\n          groups=\"base.group_system\"\n          sequence=\"99\"/>\n```\n\n----------------------------------------\n\nTITLE: Account Tag Matching Expression in Odoo\nDESCRIPTION: Examples of matching accounts using tags and xmlids, showing how to reference account tags in formulas.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/reporting/customize.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntag(my_module.my_tag) + tag(42) + 10\n```\n\n----------------------------------------\n\nTITLE: Element Tag Selection Example\nDESCRIPTION: Shows how to choose appropriate HTML tags instead of adding CSS rules, using span to div conversion as an example.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nspan.element {\n   display: block;\n   /* replace <span> with <div> instead\n      to get 'display: block' by default */\n}\n```\n\n----------------------------------------\n\nTITLE: Native Javascript Module with Alias\nDESCRIPTION: This code snippet demonstrates how to define an alias for a native JavaScript module using the `@odoo-module alias=web.someName` annotation.  This creates a proxy function that maps the old name `web.someName` to the new module name. The module imports `someFunction` from `./file_b` and exports a default function.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\n  /** @odoo-module alias=web.someName**/\n  import { someFunction } from './file_b';\n\n  export default function otherFunction(val) {\n      return someFunction(val + 3);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Setting System Parameter in Odoo\nDESCRIPTION: This snippet describes how to add a system parameter `auth_oauth.authorization_header` with a value of `1` in Odoo's system parameters. This parameter is necessary to enable the OAuth authorization header. The user must first activate developer mode.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/users/azure.rst#2025-04-18_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n`auth_oauth.authorization_header` to the :guilabel:`Key` field, and set the :guilabel:`Value` to\n`1`.\n```\n\n----------------------------------------\n\nTITLE: Python Code Variables for Odoo Automated Actions\nDESCRIPTION: Available variables and utilities for writing Python code in Odoo automated actions. Provides access to environment, models, records, and helper functions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/automated_actions.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nenv  # environment on which the action is triggered\nmodel  # model of the record on which the action is triggered; is a void recordset\nrecord  # record on which the action is triggered; may be void\nrecords  # recordset of all records on which the action is triggered in multi-mode\ntime, datetime, dateutil, timezone  # Python libraries\nfloat_compare  # utility function to compare floats based on specific precision\nlog(message, level='info')  # logging function to record debug information\n_logger.info(message)  # logger to emit messages in server logs\nUserError  # exception class for raising user-facing warning messages\nCommand  # x2many commands namespace\naction = {...}  # to return an action\n```\n\n----------------------------------------\n\nTITLE: Defining Client Action Record in XML\nDESCRIPTION: Creates an XML record for a client action in the ir.actions.client model, specifying the action's name and tag\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"my_client_action\" model=\"ir.actions.client\">\n    <field name=\"name\">Some Name</field>\n    <field name=\"tag\">my-custom-action</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'string' attribute in Odoo 17 view definitions\nDESCRIPTION: Documentation for the 'string' attribute which specifies a view's title. This title is only displayed when opening an action that has no name and whose target is set to 'new', causing it to open in a dialog.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_string.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: string\n   :noindex:\n\n   The view title. It is displayed only if you open an action that has no name and whose target is\n   `new` (opening a dialog).\n\n   :requirement: Optional\n   :type: str\n   :default: `''`\n```\n\n----------------------------------------\n\nTITLE: robots.txt Disallow Example\nDESCRIPTION: This example demonstrates how to add a disallow rule to the robots.txt file, preventing search engine crawlers from accessing the `/about-us` page of your site. This snippet should be added to the robots.txt file through Odoo's website settings.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/pages/seo.rst#2025-04-18_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDisallow: /about-us\n```\n\n----------------------------------------\n\nTITLE: Installing GeoIP Database Files\nDESCRIPTION: Commands for moving downloaded GeoLite2 database files to the system's GeoIP directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/geo_ip.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv ~/Downloads/GeoLite2-City.mmdb /usr/share/GeoIP/\nmv ~/Downloads/GeoLite2-Country.mmdb /usr/share/GeoIP/\n```\n\n----------------------------------------\n\nTITLE: Documenting PaymentToken Class in Odoo 17 Python\nDESCRIPTION: Auto-generated documentation for the PaymentToken class in Odoo 17's payment module. It includes methods for token management, display name creation, and handling archiving.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/payment/payment_token.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: odoo.addons.payment.models.payment_token::PaymentToken()\n\n   .. automethod:: _get_available_tokens\n   .. automethod:: _build_display_name\n   .. automethod:: _get_specific_create_values\n   .. automethod:: _handle_archiving\n   .. automethod:: get_linked_records_info\n```\n\n----------------------------------------\n\nTITLE: Week Days Widget Configuration\nDESCRIPTION: Simple widget for displaying week days selection with checkboxes\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<widget name=\"week_days\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cohort View in Odoo Studio\nDESCRIPTION: Documentation for Cohort view setup including measure fields, intervals, modes (retention/churn) and timeline progression settings. Used for analyzing record lifecycle over time.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/views.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe :guilabel:`Cohort` :icon:`oi-view-cohort` view is used to examine the life cycle of records over\na time period. For example, it is used in the Subscriptions app to view the subscriptions' retention\nrate.\n\n- To display a measure (i.e., the aggregated value of a given field) by default on the view, select\n  a :guilabel:`Measure Field`.\n- To choose which time interval is used by default to group results, select :guilabel:`Day`,\n  :guilabel:`Week`, :guilabel:`Month`, or :guilabel:`Year` under :guilabel:`Interval`.\n```\n\n----------------------------------------\n\nTITLE: Creating a new git branch with unique name\nDESCRIPTION: This command creates another branch in your local git repository, similar to the previous one, but with a slightly different naming convention to ensure uniqueness. This branch might be used if the previous one has naming issues or conflicts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"$ git switch -c {CURRENT_BRANCH}-explain-pricelists-xyz\"\n```\n\n----------------------------------------\n\nTITLE: Including User Dropdown Component in Custom Header XML\nDESCRIPTION: Adds the user dropdown component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"portal.user_dropdown\">\n   <t t-set=\"_user_name\" t-value=\"true\"/>\n   <t t-set=\"_icon\" t-value=\"false\"/>\n   <t t-set=\"_avatar\" t-value=\"false\"/>\n   <t t-set=\"_item_class\" t-valuef=\"nav-item dropdown\"/>\n   <t t-set=\"_link_class\" t-valuef=\"nav-link\"/>\n   <t t-set=\"_dropdown_menu_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: Commands to create a new branch based on an existing branch and push it to the remote repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature-1 master\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin feature-1\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to a remote repository (dev)\nDESCRIPTION: This command pushes the current branch to the remote repository aliased as `dev`. The `-u` flag sets up tracking, so future pushes and pulls can be done without specifying the remote and branch names.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"$ git push -u dev {CURRENT_BRANCH}-explain-pricelists\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Presets in XML\nDESCRIPTION: XML configuration for website presets that activate or deactivate views. This example demonstrates how to specify presets in a dedicated 'presets.xml' file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"module.view\" model=\"ir.ui.view\">\n      <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Fail2ban Login Attack Filter Definition\nDESCRIPTION: Fail2ban filter configuration to detect failed login attempts in Odoo logs. Matches failed login entries and captures the attacker's IP address.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[Definition]\nfailregex = ^ \\d+ INFO \\S+ \\S+ Login failed for db:\\S+ login:\\S+ from <HOST>\nignoreregex =\n```\n\n----------------------------------------\n\nTITLE: Git Fetch and Rebase Console\nDESCRIPTION: Fetches updates and rebases the current branch with an optional autostash feature to handle uncommitted changes. Presumes access to remote branches and necessary permissions for rebase.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo\n$ git fetch --all --prune\n$ git rebase --autostash odoo/{BRANCH}\n\n$ cd $HOME/src/enterprise\n$ git fetch --all --prune\n$ git rebase --autostash enterprise/{BRANCH}\n```\n\n----------------------------------------\n\nTITLE: Setting Attachment Image Widget\nDESCRIPTION: Configuration of attachment_image widget for many2one fields to display images.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"displayed_image_id\" widget=\"attachment_image\" />\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Odoo Module\nDESCRIPTION: Commands to scaffold a new Odoo module using odoo-bin from either Odoo.sh editor or local installation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin scaffold my_module ~/src/user/\n\n# Or from local installation:\n$ ./odoo-bin scaffold my_module ~/src/odoo-addons/\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Network Listening in postgresql.conf\nDESCRIPTION: Sets PostgreSQL to listen on localhost and 192.168.1.2, use port 5432, and allow up to 80 connections. This configures network access to PostgreSQL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlisten_addresses = 'localhost,192.168.1.2'\nport = 5432\nmax_connections = 80\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch for Development\nDESCRIPTION: Command to create a new feature branch from master for module development.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature-1 master\n```\n\n----------------------------------------\n\nTITLE: Hotkey Button Implementation\nDESCRIPTION: Buttons with keyboard shortcuts using data-hotkey attribute.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"action_confirm\" string=\"Confirm\" data-hotkey=\"c\"/>\n<button type=\"object\" name=\"action_tear\" string=\"Tear the sheet\" data-hotkey=\"shift+k\"/>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Initialization in Odoo\nDESCRIPTION: This snippet shows how to define an initializer using the 'init' method in an Odoo JavaScript class. The initializer sets up instance variables, such as 'name', at instantiation time.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyClass = instance.web.Class.extend({\n    init: function(name) {\n        this.name = name;\n    },\n    say_hello: function() {\n        console.log(\"hello\", this.name);\n    },\n});\n\nvar my_object = new MyClass(\"Bob\");\nmy_object.say_hello();\n// print \"hello Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Form: Creating a Title Container\nDESCRIPTION: This XML snippet demonstrates how to create a container for the title field in an Odoo form using a `<div>` element with the class `oe_title`. This typically involves wrapping a `<field>` element within an `<h1>` tag.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        <div class=\"oe_title\">\n            <h1><FIELD/></h1>\n        </div>\n    </sheet>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Teacher Biography Template in XML\nDESCRIPTION: Website template for displaying teacher biography with layout inheritance and dynamic content areas.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"biography\">\n    <t t-call=\"website.layout\">\n        <t t-set=\"title\">Academy</t>\n        <div class=\"oe_structure\"/>\n        <div class=\"oe_structure\">\n            <div class=\"container\">\n                <h3><t t-esc=\"person.name\"/></h3>\n            </div>\n        </div>\n        <div class=\"oe_structure\"/>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Supported Number Format Examples in CSV Import\nDESCRIPTION: Examples of valid number formats that can be imported into Odoo, including currency symbols and negative values representations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n32.000,00\n32000,00\n32,000.00\n-32000.00\n(32000.00)\n$ 32.000,00\n(32000.00 €)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Response Structure for Invoice Data Extraction API\nDESCRIPTION: This snippet outlines the overall structure of the JSON response returned by the invoice data extraction API. It includes status information and an array of results containing extracted features.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": string,\n    \"result\": {\n        \"status\": string,\n        \"status_msg\": string,\n        \"results\": [\n            {\n                \"full_text_annotation\": string,\n                \"feature_1_name\": feature_1_result,\n                \"feature_2_name\": feature_2_result,\n                ...\n            },\n            ...\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SCSS Styling for Website Theme\nDESCRIPTION: SCSS example showing how to define custom styles for a blockquote element. It uses variables from Bootstrap and Odoo to maintain consistent styling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\nblockquote {\n  border-radius: $rounded-pill;\n  color: o-color('o-color-3');\n  font-family: o-website-value('headings-font');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server with Shell Script\nDESCRIPTION: This shell script outlines the command-line arguments required to run the Odoo server. It includes options for specifying the addons path, database filter, and which modules to install or update. The script is useful for setting up a dedicated environment for Odoo development.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/setup.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n./odoo-bin --addons-path=../enterprise,addons --db-filter=<database> -d <database> --without-demo=all -i website --dev=xml\n```\n\n----------------------------------------\n\nTITLE: Disabling eCommerce Product Categories in XML Presets\nDESCRIPTION: XML configuration to disable the display of product categories in eCommerce. This shows how to set a view's active status to False in the presets.xml file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website_sale.products_categories\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Footer Option in Odoo XML\nDESCRIPTION: Adds a new option for a custom footer template in the Website Builder interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_header_opt\" inherit_id=\"website.snippet_options\" name=\"Footer Template - Option\">\n   <xpath expr=\"//we-select[@data-variable='footer-template']\" position=\"inside\">\n      <we-button title=\"airproof\"\n         data-customize-website-views=\"website_airproof.footer\"\n         data-customize-website-variable=\"'airproof'\"\n         data-img=\"/website_airproof/static/src/img/wbuilder/template_header_opt.svg\"/>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Form: Separator element example\nDESCRIPTION: This XML snippet illustrates the usage of the separator element within a form, showcasing how to visually separate fields and groups. It uses the `string` attribute to display titles above the separators.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <group>\n        <FIELD/>\n        <separator string=\"Title 1\"/>\n        <FIELD/>\n        <group>\n            <FIELD/>\n            <separator string=\"Title 2\"/>\n            <FIELD/>\n        </group>\n        <group>\n            <FIELD/>\n            <FIELD/>\n        </group>\n    </group>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Homepage Widget in JavaScript\nDESCRIPTION: Defines a basic HomePage widget that renders a MessageOfTheDay component using Odoo's widget extension system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    template: \"HomePage\",\n    start: function() {\n        return new local.MessageOfTheDay(this).appendTo(this.$el);\n    },\n});\n\ninstance.web.client_actions.add('petstore.homepage', 'instance.oepetstore.HomePage');\n\nlocal.MessageOfTheDay = instance.Widget.extend({\n    template: \"MessageOfTheDay\",\n    start: function() {\n        var self = this;\n        return new instance.web.Model(\"oepetstore.message_of_the_day\")\n            .query([\"message\"])\n            .order_by('-create_date', '-id')\n            .first()\n            .then(function(result) {\n                self.$(\"oe_mywidget_message_of_the_day\").text(result.message);\n            });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Bin Help Menu\nDESCRIPTION: This code snippet demonstrates how to display the help menu of the Odoo command-line interface using the '-h' option. It shows various command options available for the Odoo binary.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin -h\nUsage: odoo-bin [options]\n\nOptions:\n--version             show program's version number and exit\n-h, --help            show this help message and exit\n\nCommon options:\n  [...] \n  --without-demo=WITHOUT_DEMO\n                        disable loading demo data for modules to be installed\n                        (comma-separated, use \"all\" for all modules). Requires\n                        -d and -i. Default is none\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Using Translation Methods in Odoo Python Code\nDESCRIPTION: Demonstrates the correct usage of the underscore method for string translation in Odoo. It provides examples of good and bad practices when using the translation function.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import _\n\n# good: plain strings\nerror = _('This record is locked!')\n\n# good: strings with formatting patterns included\nerror = _('Record %s cannot be modified!', record)\n\n# ok too: multi-line literal strings\nerror = _(\"\"\"This is a bad multiline example\n             about record %s!\"\"\", record)\nerror = _('Record %s cannot be modified' \\\n          'after being validated!', record)\n\n# bad: tries to translate after string formatting\n#      (pay attention to brackets!)\n# This does NOT work and messes up the translations!\nerror = _('Record %s cannot be modified!' % record)\n\n# bad: formatting outside of translation\n# This won't benefit from fallback mechanism in case of bad translation\nerror = _('Record %s cannot be modified!') % record\n\n# bad: dynamic string, string concatenation, etc are forbidden!\n# This does NOT work and messes up the translations!\nerror = _(\"'\" + que_rec['question'] + \"' \\n\")\n\n# bad: field values are automatically translated by the framework\n# This is useless and will not work the way you think:\nerror = _(\"Product %s is out of stock!\") % _(product.name)\n# and the following will of course not work as already explained:\nerror = _(\"Product %s is out of stock!\" % product.name)\n\n# Instead you can do the following and everything will be translated,\n# including the product name if its field definition has the\n# translate flag properly set:\nerror = _(\"Product %s is not available!\", product.name)\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository with Submodules\nDESCRIPTION: Command to download the Git repository with all its submodules, specifying a branch. This is meant to be run on the developer's local machine.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recurse-submodules --branch master git@github.com:odoo/odoo.git\n```\n\n----------------------------------------\n\nTITLE: Security Files Structure in Odoo\nDESCRIPTION: This snippet details the structure of security-related files in an Odoo module, including access rights, user group definitions, and record rule configurations that are crucial for module security.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- security/\n    |   |-- ir.model.access.csv\n    |   |-- plant_nursery_groups.xml\n    |   |-- plant_nursery_security.xml\n    |   |-- plant_order_security.xml\n```\n\n----------------------------------------\n\nTITLE: Exploring the Odoo.sh Directory Structure\nDESCRIPTION: Shows the directory structure of an Odoo.sh environment, including source code, data storage, and log files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── home\n│    └── odoo\n│         ├── src\n│         │    ├── odoo                Odoo Community source code\n│         │    │    └── odoo-bin       Odoo server executable\n│         │    ├── enterprise          Odoo Enterprise source code\n│         │    ├── themes              Odoo Themes source code\n│         │    └── user                Your repository branch source code\n│         ├── data\n│         │    ├── filestore           database attachments, as well as the files of binary fields\n│         │    └── sessions            visitors and users sessions\n│         └── logs\n│              ├── install.log         Database installation logs\n│              ├── odoo.log            Running server logs\n│              ├── update.log          Database updates logs\n│              └── pip.log             Python packages installation logs\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Measurement Tool Setup\nDESCRIPTION: Comprehensive RST documentation covering connection and configuration of measurement tools with Odoo IoT box, including USB and Bluetooth connectivity options, quality control point setup, and work center integration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/iot/devices/measurement_tool.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==========================\nConnect a measurement tool\n==========================\n\n.. _iot/devices/measurement-tool:\n\nWith Odoo's :abbr:`IoT (Internet of Things)` box, it is possible to connect measurement tools to the\nOdoo database for use in the *Quality app* on a quality control point/quality check, or for use in a\nwork center during the manufacturing process.\n\nFind the list of supported devices here: `Supported devices\n<https://www.odoo.com/page/iot-hardware>`_.\n```\n\n----------------------------------------\n\nTITLE: Defining the 'string' attribute for fields in Odoo 17 (RST Documentation)\nDESCRIPTION: This RST documentation snippet describes the 'string' attribute used in Odoo 17 field definitions. It specifies that the attribute sets the label of the field, is optional, accepts a string value, and defaults to the string attribute of the model's field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/field_attribute_string.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: string\n   :noindex:\n\n   The label of the field.\n\n   :requirement: Optional\n   :type: str\n   :default: The `string` attribute of the model's field\n```\n\n----------------------------------------\n\nTITLE: Installing web_enterprise Module from Source on Linux\nDESCRIPTION: This command installs the web_enterprise module when upgrading from Community to Enterprise using source code. It's executed after updating the addons path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/community_to_enterprise.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Widget\nDESCRIPTION: Extends the HomePage widget to display content by appending HTML to the widget's root element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        this.$el.append(\"<div>Hello dear Odoo user!</div>\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Files in Odoo Manifest\nDESCRIPTION: This Python snippet shows how to include different types of files in the Odoo manifest file.  It specifies the security, templates, views, and data XML files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n\"'security/ir.model.access.csv',\\n        'templates.xml',\\n        'views.xml',\\n        'data.xml',\\n    ],\\n    # only loaded in demonstration mode\\n    'demo': [\"\n```\n\n----------------------------------------\n\nTITLE: GeoIP Website Testing Template\nDESCRIPTION: XML template code for displaying the country name of the current visitor's IP address on an Odoo webpage.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/geo_ip.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<h1 class=\"text-center\" t-esc=\"request.geoip.country.name or 'geoip failure'\"/>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Ship/Deliver for Forward Location\nDESCRIPTION: This regular expression is used to identify the source location.  It searches for the Application Identifier (AI) `413` followed by 13 digits.  The expression helps to extract source location data.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n\"(413)(\\d{13})\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Length in Meters\nDESCRIPTION: This regular expression is used to identify the length in meters. It searches for the Application Identifier (AI) `311[0-5]` followed by 6 digits. The expression helps to extract length data in meters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_12\n\nLANGUAGE: regex\nCODE:\n```\n\"(311[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code in XML\nDESCRIPTION: This XML snippet defines a function call in an Odoo record, executing a specific action that pertains to the module's logic.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n  <function model=\"tutorial.example\" name=\"action_validate\">\n      <value eval=\"[ref('demo_invoice_1')]\"/>\n  </function>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Batch or Lot Number\nDESCRIPTION: This regular expression extracts the batch or lot number from a data string. It looks for the Application Identifier (AI) `10` followed by up to 20 alphanumeric characters.  The characters allowed consist of  `[!\"%-/0-9:-?A-Z_a-z]`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n\"(10)([!\\\"%-/0-9:-?A-Z_a-z]{0,20})\"\n```\n\n----------------------------------------\n\nTITLE: Odoo startup warnings example\nDESCRIPTION: This text snippet illustrates the warnings that may appear during Odoo startup if the model lacks a `_description` or access rules. These warnings indicate that the model needs further configuration to ensure proper functionality and security.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n...\nWARNING rd-demo odoo.models: The model estate.property has no _description\n...\nWARNING rd-demo odoo.modules.loading: The model estate.property has no access rules, consider adding one...\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Database Info - Java\nDESCRIPTION: This Java snippet retrieves information for a test database from demo.odoo.com using the Apache XML-RPC library. The snippet requires the Apache XML-RPC library. The retrieved information includes the URL, database name, username, and password for accessing the test database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal XmlRpcClient client = new XmlRpcClient();\n\nfinal XmlRpcClientConfigImpl start_config = new XmlRpcClientConfigImpl();\nstart_config.setServerURL(new URL(\"https://demo.odoo.com/start\"));\nfinal Map<String, String> info = (Map<String, String>)client.execute(\n    start_config, \"start\", emptyList());\n\nfinal String url = info.get(\"host\"),\n                      db = info.get(\"database\"),\n                username = info.get(\"user\"),\n                password = info.get(\"password\");\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Packaging Type\nDESCRIPTION: This regular expression is used to identify packaging type. It starts with the Application Identifier (AI) `91` followed by up to 90 alphanumeric characters. The allowed characters are `[!\"%-/0-9:-?A-Z_a-z]`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_18\n\nLANGUAGE: regex\nCODE:\n```\n\"(91)([!\\\"%-/0-9:-?A-Z_a-z]{0,90})\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Access Control in Odoo\nDESCRIPTION: This CSV code defines access control rules for the 'academy.teachers' model in Odoo. It grants read access to all users, while denying write, create, and unlink permissions.  The `model_id:id` references the `ir.model` record for the `academy.teachers` model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_9\n\nLANGUAGE: csv\nCODE:\n```\n\"id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_academy_teachers,access_academy_teachers,model_academy_teachers,,1,0,0,0\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Snippets in Odoo\nDESCRIPTION: This XML snippet shows how to override a standard snippet (`s_text_block`) in Odoo using inheritance and XPath. It replaces the container div with a modified version containing a heading.  The `primary=\"True\"` attribute is important. This allows for customization of existing building blocks.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"s_airproof_text_block_h1\" inherit_id=\"website.s_text_block\" primary=\"True\">\n   <xpath expr=\"//div[hasclass('container')]|//div[hasclass('o_container_small')]\" position=\"replace\">\n      <div class=\"container s_allow_columns\">\n            <h1 class=\"display-1\">FAQ - Help</h1>\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Linking to Page Anchors in Odoo Menu\nDESCRIPTION: This snippet shows how to link to a specific section within a page using an anchor link. The `url` field includes the page URL followed by a `#` and the anchor ID. Clicking this menu item will navigate the user to the specified section of the `about-us` page.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\".\" model=\"website.menu\">\n    <field name=\"url\">/about-us#our-team</field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Test Environment API URLs\nDESCRIPTION: URLs for testing Adyen integration in a test environment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/adyen.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://checkout-test.adyen.com\nhttps://pal-test.adyen.com/pal/servlet/Recurring\n```\n\n----------------------------------------\n\nTITLE: Creating Root Component Template in XML\nDESCRIPTION: Defines the basic XML template for the root component of the standalone Owl application.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"your_module.Root\">\n        Hello, World!\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: User Context Update in JavaScript\nDESCRIPTION: Examples of updating and removing values from the user context using the user service API.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nuserService.updateContext({ isFriend: true })\n\nuserService.removeFromContext(\"isFriend\")\n\nconst isInSalesGroup = await userService.hasGroup(\"sale.group_sales\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Background Image in SCSS for Odoo Website Theme\nDESCRIPTION: Sets the body background image and type in the website theme's SCSS variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'body-image': '/website_airproof/static/src/img/background-lines.svg',\n      'body-image-type': 'image' or 'pattern'\n   )\n);\n```\n\n----------------------------------------\n\nTITLE: Data Files Naming Convention in Odoo\nDESCRIPTION: This snippet explains how to name data files in an Odoo module, with emphasis on organizing demo and data files by purpose and main model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- data/\n    |   |-- plant_nursery_data.xml\n    |   |-- plant_nursery_demo.xml\n    |   |-- mail_data.xml\n```\n\n----------------------------------------\n\nTITLE: Adding Odoo Upgrade Utils to requirements.txt\nDESCRIPTION: Instruction for adding the Odoo Upgrade Utils library to the requirements.txt file for Odoo.sh installations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nodoo_upgrade @ git+https://github.com/odoo/upgrade-util@master\n```\n\n----------------------------------------\n\nTITLE: XML Security Group and Rule Definition\nDESCRIPTION: This XML snippet demonstrates defining security groups and rules in Odoo using the record structure. It outlines the naming conventions for group and rule IDs to ensure proper access control and data security within the Odoo application.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"module_name_group_user\" model=\"res.groups\">\n    ...\n</record>\n\n<record id=\"model_name_rule_public\" model=\"ir.rule\">\n    ...\n</record>\n\n<record id=\"model_name_rule_company\" model=\"ir.rule\">\n    ...\n</record>\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Commands for staging changes and committing them with a clear commit message. It emphasizes creating atomic commits with precise messages for better version control history.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git add .\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Printer Name Configuration Example\nDESCRIPTION: Example format pattern for printer name configuration when using ESC * command with Epson printers in Odoo IoT system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/iot/devices/printer.rst#2025-04-18_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nprinter1__IMC_LDV_SCALE50__  # Valid name with low density vertical and 50% scale\nprinter2__IMC_SCALE75__     # Valid name with 75% scale\nprinter3_IMC_SCALE100     # Invalid - missing double underscores\nprinter name__IMC__       # Invalid - contains space\n```\n\n----------------------------------------\n\nTITLE: Defining Button Tooltip in Odoo 17 XML\nDESCRIPTION: This snippet demonstrates how to use the 'help' attribute to add a tooltip message to a button in Odoo 17 XML views. The attribute sets the text that appears when hovering over the button with a mouse cursor.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/button_attribute_help.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"remove\" icon=\"fa-trash\" help=\"Revoke\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting Odoo Shell for Debugging\nDESCRIPTION: Command to start an Odoo shell for triggering code with debugger breakpoints.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin shell\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for CLOC with Path Option\nDESCRIPTION: Console command demonstrating how to count lines of code in a specific module path using the CLOC feature.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -p addons/account\n```\n\n----------------------------------------\n\nTITLE: Adding Test File to Odoo Assets XML\nDESCRIPTION: XML configuration to include a JavaScript test file in Odoo's QUnit test suite assets. This ensures the test file is loaded when running tests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <template id=\"qunit_suite_tests\" name=\"my addon tests\" inherit_id=\"web.qunit_suite_tests\">\n        <xpath expr=\"//script[last()]\" position=\"after\">\n            <script type=\"text/javascript\" src=\"/my_addon/static/tests/utils_tests.js\"/>\n        </xpath>\n    </template>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Submodule to an Odoo Project\nDESCRIPTION: This command adds a Git repository as a submodule to your project. It specifies the branch to use and the path where the submodule should be placed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/submodules.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule add -b <branch> <git@yourprovider.com>:<username/repository.git> <path>\n```\n\n----------------------------------------\n\nTITLE: Model Record Route Controller in Python\nDESCRIPTION: Controller using Odoo's model converter to fetch teacher records directly from database and render biography template.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<model(\"academy.teachers\"):teacher>/', auth='public', website=True)\ndef teacher(self, teacher):\n    return http.request.render('academy.biography', {\n        'person': teacher\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting up DKIM CNAME Record for Odoo\nDESCRIPTION: CNAME record configuration for DKIM authentication. This record enables email authentication with digital signatures and must be added to the DNS zone of the custom domain.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/email_domain.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodoo._domainkey IN CNAME odoo._domainkey.odoo.com.\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Length in Inches\nDESCRIPTION: This regular expression identifies the length in inches. It looks for the Application Identifier (AI) `321[0-5]` followed by 6 digits. The expression extracts length data represented in inches.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_15\n\nLANGUAGE: regex\nCODE:\n```\n\"(321[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Activating Header Template in Odoo XML\nDESCRIPTION: Enables a specific header template in Odoo XML configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_contact\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding Information to Session Info - Python\nDESCRIPTION: This Python snippet demonstrates how to add custom information to the session object in Odoo by overriding the `session_info` method. It involves modifying the dictionary returned by this method with additional data fetched from the database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\nfrom odoo.http import request\n\nclass IrHttp(models.AbstractModel):\n    _inherit = 'ir.http'\n\n    def session_info(self):\n        result = super(IrHttp, self).session_info()\n        result['some_key'] = get_some_value_from_db()\n        return result\n```\n\n----------------------------------------\n\nTITLE: Form: Adding Spacing with \"separator\" element\nDESCRIPTION: This XML snippet shows how to add vertical spacing between elements in an Odoo form using the `<separator>` element.  The `string` attribute can be used to display a title as a section header.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    ...\n    <separator/>\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Dependencies on MacOS\nDESCRIPTION: Commands to install Python dependencies for Odoo on MacOS using pip3, including setuptools and requirements.txt packages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ pip3 install setuptools wheel\n$ pip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Getting Odoo Server Version - Java\nDESCRIPTION: This Java snippet connects to the xmlrpc/2/common endpoint of an Odoo instance and retrieves the server's version using the Apache XML-RPC library. It requires the Apache XML-RPC library and the 'url' variable to be defined with the Odoo instance's URL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nfinal XmlRpcClientConfigImpl common_config = new XmlRpcClientConfigImpl();\ncommon_config.setServerURL(new URL(String.format(\"%s/xmlrpc/2/common\", url)));\nclient.execute(common_config, \"version\", emptyList());\n```\n\n----------------------------------------\n\nTITLE: Odoo module upgrade command\nDESCRIPTION: This console command shows how to upgrade an Odoo module using `./odoo-bin`.  The `-d` parameter specifies the database, and the `-u` parameter specifies the module to upgrade. The `--addons-path` parameter specifies the paths where Odoo can find the modules.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path=addons,../enterprise/,../tutorials/ -d rd-demo -u estate\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Proxy in JavaScript\nDESCRIPTION: Shows how to create a DeviceProxy object for communicating with an IoT device from the browser.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/connect_device.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar DeviceProxy = require('iot.DeviceProxy');\n\nvar iot_device = new DeviceProxy({\n    iot_ip: iot_ip,\n    identifier: device_identifier\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo Modules via Command Line in Odoo.sh\nDESCRIPTION: Command to update specific Odoo modules via the command line by specifying module names as comma-separated values.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin -u <comma-separated module names> --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Disabling Active Header Template in Odoo XML\nDESCRIPTION: Deactivates the default header template in Odoo XML configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_default\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Grid Items with Images\nDESCRIPTION: Shows how to add items and images to a grid layout with specific positioning.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"row o_grid_mode\" data-row-count=\"13\">\n    <div class=\"o_grid_item g-height-* g-col-lg-*\" style=\"grid-area: 2 / 1 / 7 / 8; z-index: 3;\">\n        <!-- Content -->\n    </div>\n    <div class=\"o_grid_item o_grid_item_image g-height-* g-col-lg-*\" style=\"grid-area: 1 / 6 / 9 / 13; z-index: 2;\">\n        <img src=\"...\" alt=\"...\" >\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Companies with External IDs from PostgreSQL to CSV for Odoo Import\nDESCRIPTION: SQL command to export company data from a PostgreSQL database to a CSV file with External IDs. The command selects company IDs prefixed with 'company_' as External IDs, company names, and sets 'Is a Company' to True.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n> copy (select 'company_'||id as \"External ID\",company_name as \"Name\",'True' as \"Is a Company\" from companies) TO '/tmp/company.csv' with CSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Defining AccountReport Model Fields in Python for Odoo 17\nDESCRIPTION: This snippet defines the fields for the AccountReport model in Odoo 17's account module. It includes various fields for report configuration, filtering, and display options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_report.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AccountReport(models.Model):\n    name = fields.Char()\n    line_ids = fields.One2many()\n    column_ids = fields.One2many()\n    root_report_id = fields.Many2one()\n    country_id = fields.Many2one()\n    only_tax_exigible = fields.Boolean()\n    availability_condition = fields.Char()\n    load_more_limit = fields.Integer()\n    search_bar = fields.Boolean()\n    default_opening_date_filter = fields.Char()\n    filter_multi_company = fields.Boolean()\n    filter_date_range = fields.Boolean()\n    filter_show_draft = fields.Boolean()\n    filter_unreconciled = fields.Boolean()\n    filter_unfold_all = fields.Boolean()\n    filter_period_comparison = fields.Boolean()\n    filter_growth_comparison = fields.Boolean()\n    filter_journals = fields.Boolean()\n    filter_analytic = fields.Boolean()\n    filter_hierarchy = fields.Boolean()\n    filter_account_type = fields.Boolean()\n    filter_partner = fields.Boolean()\n    filter_fiscal_position = fields.Boolean()\n```\n\n----------------------------------------\n\nTITLE: Example Data Migration Script - Python\nDESCRIPTION: Example code showing how to migrate custom fields from sale.subscription model to sale.order during Odoo 15 to 16 upgrade using SQL queries in upgrade scripts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/upgrade_custom_db.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example SQL query to migrate custom fields from sale.subscription to sale.order\n```\n\n----------------------------------------\n\nTITLE: Views File Naming in Odoo\nDESCRIPTION: This snippet provides the naming conventions for view files in Odoo, indicating how to structure backend views and template files for clarity and logical categorization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- views/\n    |   | -- plant_nursery_menus.xml (optional definition of main menus)\n    |   | -- plant_nursery_views.xml (backend views)\n    |   | -- plant_nursery_templates.xml (portal templates)\n    |   | -- plant_order_views.xml\n    |   | -- plant_order_templates.xml\n    |   | -- res_partner_views.xml\n```\n\n----------------------------------------\n\nTITLE: Standard Commit Message Structure\nDESCRIPTION: Shows the standard format for commit messages including tag, module name, short description and detailed explanation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/git_guidelines.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[TAG] module: describe your change in a short sentence (ideally < 50 chars)\n\nLong version of the change description, including the rationale for the change,\nor a summary of the feature being introduced.\n\nPlease spend a lot more time describing WHY the change is being done rather\nthan WHAT is being changed. This is usually easy to grasp by actually reading\nthe diff. WHAT should be explained only if there are technical choices\nor decision involved. In that case explain WHY this decision was taken.\n\nEnd the message with references, such as task or bug numbers, PR numbers, and\nOPW tickets, following the suggested format:\ntask-123 (related to task)\nFixes #123  (close related issue on Github)\nCloses #123  (close related PR on Github)\nopw-123 (related to ticket)\n```\n\n----------------------------------------\n\nTITLE: Adding and committing changes in Git\nDESCRIPTION: These commands add all modified files to the staging area and then commits the changes with a message.  It prepares the current changes for pushing them to remote repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"$ git add .\\n$ git commit\"\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for CLOC with Database Option\nDESCRIPTION: Console command showing how to count lines of code in installed modules using the CLOC feature with a specific database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc --addons-path=addons -d my_database\n```\n\n----------------------------------------\n\nTITLE: Defining default_group_by Attribute in Odoo 17\nDESCRIPTION: This snippet shows the documentation for the default_group_by attribute in Odoo 17. This attribute specifies the name of the field that should be used for grouping records when no explicit grouping is provided via an action or search view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_default_group_by.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attribute:: default_group_by\n   :noindex:\n\n   The name of the field on which the records should be grouped by default if no grouping is\n   specified via the action or the current :ref:`search <reference/view_architectures/search>`.\n\n   :requirement: Optional\n   :type: str\n   :default: `''`\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Best Before Date\nDESCRIPTION: This regular expression is used to identify the 'best before' date. It matches the Application Identifier (AI) `15` followed by 6 digits representing the date in YYMMDD format. The expression is used for parsing 'best before' date information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_7\n\nLANGUAGE: regex\nCODE:\n```\n\"(15)(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Adding Offer Relations to Property Type Model\nDESCRIPTION: Defines offer_ids as One2many field and offer_count as computed field in estate.property.type model to track related offers.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\noffer_ids = fields.One2many('estate.property.offer', 'property_type_id', string='Offers')\noffer_count = fields.Integer(compute='_compute_offer_count', string='Offer Count')\n```\n\n----------------------------------------\n\nTITLE: Returning null or undefined to Indicate Failure in JavaScript\nDESCRIPTION: This snippet provides an alternative to throwing errors by returning null or undefined when a function cannot complete its task. It presents a clean and straightforward way to handle failure cases without complicating the control flow.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst someVal = someFunction();\n// further\nif (someVal !== null) { /* do something */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Engineering Functions in Excel\nDESCRIPTION: This code snippet provides a list of Excel Engineering functions, including their name, arguments, and links to support articles. It helps users understand the available functions in the Engineering category.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/spreadsheet/functions.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _functions/engineering:\n\nEngineering\n===========\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - DELTA(number1, [number2])\n     - `Excel DELTA article <https://support.microsoft.com/office/delta-function-2f763672-c959-4e07-ac33-fe03220ba432>`_\n```\n\n----------------------------------------\n\nTITLE: Initializing Scoped SCSS Variables Example\nDESCRIPTION: Demonstrates proper usage of scoped SCSS variables within element blocks using the $- prefix convention. Variables are only accessible within their declared scope.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n.o_element {\n   $-inner-gap: compute-something;\n\n   margin-right: $-inner-gap;\n\n   .o_element_child {\n      margin-right: $-inner-gap * 0.5;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Footer Template in Odoo XML\nDESCRIPTION: Enables a specific footer template in Odoo XML configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_footer_links\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Field in Odoo\nDESCRIPTION: This snippet shows how to declare a custom field in Odoo by creating a record in the `ir.model.fields` model. The record defines the field's name, description, type (`ttype`), and the model it's linked to using `model_id`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\\\"x_post_category\\\" model=\\\"ir.model.fields\\\">\\n   <field name=\\\"name\\\">x_post_category</field>\\n   <field name=\\\"field_description\\\">...</field>\\n   <field name=\\\"ttype\\\">html</field>\\n   <field name=\\\"state\\\">manual</field>\\n   <field name=\\\"index\\\">0</field>\\n   <field name=\\\"model_id\\\" ref=\\\"website_blog.model_blog_post\\\"/>\\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: SCSS Shape Declaration\nDESCRIPTION: This SCSS snippet shows how a shape is declared within the `primary_variables.scss` file. It defines the shape's position, size, colors, and repeat options. The `colors` key maps the shape's colors to the default color palette.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n   'Zigs/06': ('position': bottom, 'size': 30px 100%, 'colors': (4, 5), 'repeat-x': true),\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo from Debian Package\nDESCRIPTION: Commands to install Odoo from a downloaded Debian package, handling dependencies and configuring it as a service.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# dpkg -i <path_to_installation_package> # this probably fails with missing dependencies\n# apt-get install -f # should install the missing dependencies\n# dpkg -i <path_to_installation_package>\n```\n\n----------------------------------------\n\nTITLE: XML Option for Custom Shape in Snippets\nDESCRIPTION: This XML snippet adds a custom shape to the list of shapes available in the Website Builder's snippet options. It inherits the `website.snippet_options_background_options` template and adds a new `we-button` element that triggers the custom shape.  The `data-shape` attribute specifies the shape's location, and `data-select-label` sets the button's label.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n   <template id=\"snippet_options_background_options\" inherit_id=\"website.snippet_options_background_options\" name=\"Shapes\">\n       <xpath expr=\"//*[hasclass('o_we_shape_menu')]/*[last()]\" position=\"after\">\n           <we-select-page string=\"Theme\">\n               <we-button data-shape=\"illustration/hexagons/01\" data-select-label=\"Hexagon 01\"/>\n           </we-select-page>\n       </xpath>\n   </template>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Field Default Value in Odoo\nDESCRIPTION: Shows how to configure the default value for the active field to ensure records remain visible in search results by default.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nactive = fields.Boolean(default=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Gevent Package for On-premise Odoo Instances\nDESCRIPTION: For on-premise Odoo installations running on Ubuntu (Linux) servers, the python3-gevent package is required for the Discuss module to properly handle calls and video calls.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/discuss/ice_servers.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3-gevent\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL View Using _table_query Property\nDESCRIPTION: Alternative approach using _table_query property for context-dependent views, particularly useful in multi-company and multi-currency environments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/create_reports.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef _table_query(self):\n    return 'SELECT %s FROM %s' % (self._select(), self._from())\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Element Display Example\nDESCRIPTION: Demonstrates unnecessary display property declaration for div elements, which already have block display by default.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndiv.element {\n   display: block;\n   /* not needed 99% of the time */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Field Widget with Preview Option\nDESCRIPTION: Shows how to configure an image widget with a preview image option for binary fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"image\" widget=\"image\" options=\"{'preview_image': 'image_128'}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-defined Filters in Odoo Search View\nDESCRIPTION: Code example for defining pre-defined filters in a search view. This shows the basic structure with a string label and domain attribute for filtering records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <filter string=\"LABEL\" domain=\"DOMAIN\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Profiling with query count assertion in Odoo test using self.profile\nDESCRIPTION: This code snippet shows how to profile a function within a test case in Odoo and assert the number of queries executed. It uses `self.profile()` to enable profiling and `self.assertQueryCount` to verify the query count. The profiler is called outside the `assertQueryCount` to catch queries made when exiting the context manager.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/performance.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"with self.profile():\n    with self.assertQueryCount(__system__=1211):\n        do_stuff()\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo JavaScript Module\nDESCRIPTION: JavaScript file header specifying that the file should be treated as an Odoo module. This annotation is required for Odoo to properly process the JavaScript file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Document: Malaysia Localization Guide\nDESCRIPTION: Documentation file covering Malaysian localization setup including module installation, company configuration, and MyInvois e-invoicing integration. Contains detailed instructions for registration, configuration and usage workflows.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/malaysia.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n========\nMalaysia\n========\n\n.. _MyTax: https://mytax.hasil.gov.my\n\n.. _malaysia/configuration:\n\nConfiguration\n=============\n\n.. _malaysia/configuration/modules:\n\nModules installation\n--------------------\n\n:ref:`Install <general/install>` the following modules to get all the features of the Malaysian\nlocalization:\n\n.. list-table::\n   :header-rows: 1\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`Malaysia - Accounting`\n     - `l10n_my`\n     - This module includes the default\n       :ref:`fiscal localization package <fiscal_localizations/packages>`.\n   * - :guilabel:`Malaysia - Accounting Reports`\n     - `l10n_my_reports`\n     - This module includes the accounting reports for Malaysia.\n   * - :guilabel:`Malaysia - UBL PINT`\n     - `l10n_my_ubl_pint`\n     - This module includes the features required to export invoices in PINT format.\n   * - :guilabel:`Malaysia - E-invoicing`\n     - `l10n_my_edi`\n     - This module includes the features required for integration with MyInvois under IRBM.\n```\n\n----------------------------------------\n\nTITLE: Company CSV Export Format for Odoo Import\nDESCRIPTION: Sample CSV output format showing exported company data with External IDs. The file includes External ID, Name, and Is a Company columns for three companies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nExternal ID,Name,Is a Company\ncompany_1,Bigees,True\ncompany_2,Organi,True\ncompany_3,Boum,True\n```\n\n----------------------------------------\n\nTITLE: Enabling MPS in Odoo Manufacturing Settings\nDESCRIPTION: This RST snippet shows the navigation path and settings to enable the Master Production Schedule feature in Odoo's Manufacturing app. It also describes the Time Range and Number of Columns configuration options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/workflows/use_mps.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo use the |MPS| feature, navigate to :menuselection:`Manufacturing app --> Configuration -->\nSettings`, and tick the :guilabel:`Master Production Schedule` checkbox in the :guilabel:`Planning`\nsection. Finally, click :guilabel:`Save`.\n\nAfter enabling the :guilabel:`Master Production Schedule` feature, two new fields appear under it on\nthe :guilabel:`Settings` page: :guilabel:`Time Range` and :guilabel:`Number of Columns`.\n\nThe :guilabel:`Time Range` field is used to select the period of time over which planning takes\nplace, and offers three options: :guilabel:`Monthly`, :guilabel:`Weekly`, and :guilabel:`Daily`. For\nexample, if :guilabel:`Monthly` is selected, the |MPS| plans the production requirements of products\nand components on a monthly basis.\n\nThe :guilabel:`Number of Columns` field is used to specify the quantity of the selected\n:guilabel:`Time Range` units shown on the |MPS| page. For example, if the :guilabel:`Time Range`\nfield is set to :guilabel:`Monthly`, and `12` is entered in the :guilabel:`Number of Columns` field,\nthe |MPS| shows one column for the next 12 months, starting with the current month.\n\nIf the values of the :guilabel:`Time Range` or :guilabel:`Number of Columns` fields are altered,\nclick :guilabel:`Save` again to save the changes.\n```\n\n----------------------------------------\n\nTITLE: Cloning Documentation Repository\nDESCRIPTION: This snippet describes how to clone the Odoo documentation repository from GitHub to your local machine, allowing you to make changes locally.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:odoo/documentation.git\n$ cd documentation\n```\n\n----------------------------------------\n\nTITLE: XML Inheriting Views\nDESCRIPTION: This XML snippet demonstrates how to inherit and modify existing views in Odoo. It highlights the use of the `inherit_id` field and the `.inherit.{details}` naming convention for inherited views, as well as the use of `mode=\"primary\"` for creating new primary views based on existing ones.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"model_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">model.view.form.inherit.module2</field>\n    <field name=\"inherit_id\" ref=\"module1.model_view_form\"/>\n    ...\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Network Access in pg_hba.conf\nDESCRIPTION: Allows TCP connections to PostgreSQL from localhost and the 192.168.1.x network. This enables Odoo to connect to PostgreSQL over the network.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             192.168.1.0/24          md5\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Manufacturing Workflows in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for manufacturing workflows documentation using reStructuredText syntax. It includes a title, a 'nosearch' directive, and a toctree with 'titlesonly' option listing various workflow topics.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/workflows.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n\n=========\nWorkflows\n=========\n\n.. toctree::\n   :titlesonly:\n\n   workflows/use_mps\n   workflows/work_center_time_off\n   workflows/scrap_manufacturing\n   workflows/manufacturing_backorders\n   workflows/split_merge\n   workflows/unbuild_orders\n   workflows/byproducts\n   workflows/continuous_improvement\n```\n\n----------------------------------------\n\nTITLE: Setting a default order using the _order attribute\nDESCRIPTION: This python code snippet defines a model `TestModel` with the `_order` attribute set to \"id desc\". This specifies that records of this model should be ordered by the `id` field in descending order.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n    _order = \"id desc\"\n\n    description = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Data Table for Tags\nDESCRIPTION: Demonstrates how to create a custom table to display tag information with ID and name columns using t-foreach loop.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- table root element -->\n<table class=\"table\">\n    <!-- thead = table header, the row with column titles -->\n    <thead>\n        <!-- table row element -->\n        <tr>\n            <!-- table header element -->\n            <th>ID</th>\n            <th>Name</th>\n        </tr>\n    </thead>\n    <!-- table body, the main content -->\n    <tbody>\n        <!-- we create a row for each subrecord with t-foreach -->\n        <tr t-foreach=\"doc.tag_ids\" t-as=\"tag\">\n            <!-- for each line, we output the name and price as table cells -->\n            <td t-out=\"tag.id\"/>\n            <td t-out=\"tag.name\"/>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Explicit Python String Translation\nDESCRIPTION: Example of marking Python strings for translation using odoo._() function.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/translations.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntitle = _(\"Bank Accounts\")\n```\n\n----------------------------------------\n\nTITLE: Adding Field to Odoo View XML\nDESCRIPTION: XML snippet to add the new datetime field to the form view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"start_datetime\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Widget with Placeholder\nDESCRIPTION: Selection widget configuration with placeholder text for empty selection.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"tax_id\" widget=\"selection\" placeholder=\"Select a tax\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Header Template in SCSS for Odoo Website Theme\nDESCRIPTION: Specifies the desired header template in the website theme's SCSS variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'header-template': 'Contact',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Icons in Odoo\nDESCRIPTION: This snippet shows how to implement Font Awesome icons in Odoo using the appropriate CSS classes. The example uses a span tag with the 'fa' prefix to include an icon, demonstrating simple inline icon usage suitable for web display.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\"fa fa-picture-o\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting State Selection Widget\nDESCRIPTION: Basic configuration of state_selection widget for kanban states.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"kanban_state\" widget=\"state_selection\" />\n```\n\n----------------------------------------\n\nTITLE: Conceptual Diagram of SCSS Compilation Order in Odoo\nDESCRIPTION: This code block represents a conceptual diagram of the compilation order for CSS and SCSS variables in Odoo. It shows the hierarchy and order of different asset bundles and their contents.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/scss_inheritance.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n↓ [Compilation starts]\n⏐\n↓ web.dark_mode_variables\n⏐   ├─ Primary Variables\n⏐   └─ Components Variables\n⏐\n↓ web._assets_primary_variables\n⏐   ├─ Primary Variables (enterprise)\n⏐   ├─ Components Variables (enterprise)\n⏐   ├─ Primary Variables (community)\n⏐   └─ Components Variables (community)\n⏐\n↓ web._assets_bootstrap\n⏐\n↓ web.assets_backend\n⏐   ├─ ...\n⏐   ├─ CSS variables definition\n⏐   └─ CSS variables contextual adaptations\n⏐\n● [Visual result on screen]\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Text Amount Rendering Dependency on Debian/Ubuntu\nDESCRIPTION: Command to install the num2words Python package on Debian Buster or Ubuntu 18.04 for textual amount rendering in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo pip3 install num2words\n```\n\n----------------------------------------\n\nTITLE: Removing a Patch in Odoo\nDESCRIPTION: Highlights how to use the unpatch function returned by patch to revert changes made to an object or class, commonly used in testing scenarios.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst unpatch = patch(object, { ... });\n// test stuff here\nunpatch();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margin in ZPL Labels - XML\nDESCRIPTION: This snippet demonstrates how to adjust the starting position of the text in a ZPL label to prevent text from being cut off. It modifies the x-coordinate in the `^FT` command from `^FT100,80` to `^FT0,80`. No additional dependencies are required. The primary parameter involved is the starting position defined by `^FT`. The input is the existing ZPL code, and the expected output is a label with a correctly positioned text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n^FT100,80^A0N,40,30^FD[E-COM11] Cabinet with Doors (wood: Cherry, handles: brass)^FS\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n^FT0,80^A0N,40,30^FD[E-COM11] Cabinet with Doors (wood: Cherry, handles: brass)^FS\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: Adding Git Submodule\nDESCRIPTION: Command to add a branch from another repository as a submodule. Requires repository URL and target path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule add -b master <URL> <PATH>\n```\n\n----------------------------------------\n\nTITLE: Adding Live Chat Widget Code to Website Head\nDESCRIPTION: Code snippet that needs to be added to the <head> tag of a third-party website to enable Odoo Live Chat functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat.rst#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n```\n\n----------------------------------------\n\nTITLE: QWeb Template Declaration - XML\nDESCRIPTION: This XML snippet showcases the syntax for declaring a QWeb template using the t-name directive. It defines a simple template structure that can have HTML content within it.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<templates>\n    <t t-name=\"HomePageTemplate\">\n        <div>This is some simple HTML</div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Odoo Community Repository on Fedora\nDESCRIPTION: Commands to set up the Odoo Community edition repository on Fedora, install Odoo, and configure it as a system service.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf config-manager --add-repo=https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/rpm/odoo.repo\n$ sudo dnf install -y odoo\n$ sudo systemctl enable odoo\n$ sudo systemctl start odoo\n```\n\n----------------------------------------\n\nTITLE: Example Commit Messages\nDESCRIPTION: Provides three examples of well-formatted commit messages showing different types of changes and reference formats.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/git_guidelines.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[REF] models: use `parent_path` to implement parent_store\n\nThis replaces the former modified preorder tree traversal (MPTT) with the\nfields `parent_left`/`parent_right`[...]\n\n[FIX] account: remove frenglish\n\n[...]\n\nCloses #22793\nFixes #22769\n\n[FIX] website: remove unused alert div, fixes look of input-group-btn\n\nBootstrap's CSS depends on the input-group-btn\nelement being the first/last child of its parent.\nThis was not the case because of the invisible\nand useless alert.\n```\n\n----------------------------------------\n\nTITLE: Custom Text Field Usage in View\nDESCRIPTION: Example of how to use the custom text field in an Odoo view definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_field.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"somefield\" widget=\"my_text_field\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Installation Table\nDESCRIPTION: RST table structure listing US localization modules with descriptions including technical names and features\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :widths: 25 25 50\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`United States - Accounting`\n     - `l10n_us`\n     - Base accounting module for United States localization.\n```\n\n----------------------------------------\n\nTITLE: Bank Journal Transfer Example in RST\nDESCRIPTION: Example showing the accounting entries for an internal transfer between two bank accounts, including debit and credit entries in both the source and destination journals.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/internal_transfers.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - **Account**\n     - **Debit**\n     - **Credit**\n   * - Outstanding Payments account\n     -\n     - $1,000\n   * - **Internal transfer account**\n     - **$1,000**\n     -\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - **Account**\n     - **Debit**\n     - **Credit**\n   * - Outstanding Receipts account\n     - $1,000\n     -\n   * - **Internal transfer account**\n     -\n     - **$1,000**\n```\n\n----------------------------------------\n\nTITLE: Displaying New Activity Form Image in RST\nDESCRIPTION: RST code for inserting an image of a new Activity form with all fields filled out. This snippet includes alignment and alt text for the image.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/activities.rst#2025-04-18_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: activities/new-activity.png\n   :align: center\n   :alt: A new Activity form with all the fields filled out.\n```\n\n----------------------------------------\n\nTITLE: Compressing PNG images with pngquant\nDESCRIPTION: These commands compress a PNG image using `pngquant` and then replace the original image with the compressed version. This reduces the file size of the image, which is important for performance and storage.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"$ pngquant path/to/image.png\\n$ mv path/to/image-fs8.png path/to/image.png\"\n```\n\n----------------------------------------\n\nTITLE: Live Chat Command Examples\nDESCRIPTION: Examples of various live chat commands including /help, /ticket, /search_tickets, /history, /lead, and /leave that operators can use during conversations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/responses.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/help\n/ticket\n/search_tickets\n/history\n/lead\n/leave\n```\n\n----------------------------------------\n\nTITLE: Stopping Odoo Service on Linux\nDESCRIPTION: This command stops the Odoo service on a Linux system. It's a necessary step before upgrading from Community to Enterprise version.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/community_to_enterprise.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service odoo stop\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Odoo Maintenance\nDESCRIPTION: This snippet defines the table of contents for the Odoo Maintenance documentation using reStructuredText syntax. It specifies the structure of the documentation, including subpages for adding new equipment, maintenance calendar, maintenance requests, and maintenance setup.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   maintenance/add_new_equipment\n   maintenance/maintenance_calendar\n   maintenance/maintenance_requests\n   maintenance/maintenance_setup\n```\n\n----------------------------------------\n\nTITLE: Defining 'delete' Attribute in Odoo 17 View (RST)\nDESCRIPTION: This RST code snippet defines the 'delete' attribute for Odoo 17 views. It controls whether record deletion is enabled or disabled through the Action dropdown. The attribute is optional, of boolean type, and defaults to True.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/root_attribute_delete.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: delete\n   :noindex:\n\n   Disable/enable record deletion on the view through the :guilabel:`Action` dropdown.\n\n   :requirement: Optional\n   :type: bool\n   :default: `True`\n```\n\n----------------------------------------\n\nTITLE: Including Language Selector Component in Custom Header XML\nDESCRIPTION: Adds the language selector component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_language_selector\">\n   <t t-set=\"_div_classes\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User\nDESCRIPTION: This snippet configures Git to recognize the user as the author of future contributions by setting the global user name and email. These should match the GitHub account details to ensure proper attribution of contributions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"youremail@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Percent Pie Widget\nDESCRIPTION: Basic configuration of percentpie widget for displaying statistical information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"replied_ratio\" string=\"Replied\" widget=\"percentpie\" />\n```\n\n----------------------------------------\n\nTITLE: Defining an inline list view within a form in XML\nDESCRIPTION: This XML snippet shows how to define an inline list view (tree view) for the `line_ids` field within the form view of the `test_model`.  It specifies which fields (`field_1` and `field_2`) from the related model (`test_model_line`) will be displayed in the inline list.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"description\"/>\n    <field name=\"line_ids\">\n        <tree>\n            <field name=\"field_1\"/>\n            <field name=\"field_2\"/>\n        </tree>\n    </field>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Statistical Functions Collection\nDESCRIPTION: A comprehensive set of statistical functions including averages, correlations, rankings, and standard deviations, with compatibility references to Excel\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/spreadsheet/functions.rst#2025-04-18_snippet_3\n\nLANGUAGE: Excel Formula\nCODE:\n```\nAVERAGE.WEIGHTED(values, weights, [additional_values, ...], [additional_weights, ...])\n```\n\nLANGUAGE: Excel Formula\nCODE:\n```\nGROWTH(known_data_y, [known_data_x], [new_data_x], [b])\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Tutorials Repository with Git Console\nDESCRIPTION: This console command clones the Odoo tutorials repository into your local machine, facilitating a separate repository to track tutorial-based changes without affecting main project repositories. Requires a GitHub account and pre-cloned odoo/odoo and odoo/enterprise repositories for reference.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:odoo/tutorials.git\n```\n\n----------------------------------------\n\nTITLE: Nginx Cookie Security Configuration\nDESCRIPTION: Security configuration for the session_id cookie including Secure flag and SameSite attribute\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\n# requires nginx 1.19.8\nproxy_cookie_flags session_id samesite=lax secure;\n```\n\n----------------------------------------\n\nTITLE: Frontend Translation Module Registration\nDESCRIPTION: Implementation of _get_translation_frontend_modules_name to expose module translations to the frontend\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/translations.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\n\nclass IrHttp(models.AbstractModel):\n    _inherit = 'ir.http'\n\n    @classmethod\n    def _get_translation_frontend_modules_name(cls):\n        modules = super()._get_translation_frontend_modules_name()\n        return modules + ['your_module']\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Template in SCSS for Odoo Website Theme\nDESCRIPTION: Specifies the desired footer template in the website theme's SCSS variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_31\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'footer-template': 'Links',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Module Updates\nDESCRIPTION: Series of Git commands for staging, committing, and pushing module changes to Odoo.sh or local repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/src/user/\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/src/odoo-addons/\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git add my_module\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"[ADD] my_module: add the start_datetime field to the model my_module.my_module\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git push https HEAD:feature-1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git push\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git add requirements.txt\n$ git add my_module\n$ git commit -m \"[IMP] my_module: automatically remove special chars in my_module.my_module name field\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Physical Location ID\nDESCRIPTION: This regular expression is designed to identify a physical location. It seeks the Application Identifier (AI) `414` followed by 13 digits. This expression helps identify and extract data related to specific physical locations within a data stream.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n\"(414)(\\d{13})\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring PostgreSQL Server on Fedora for Odoo\nDESCRIPTION: Series of commands to install, initialize, enable, and start the PostgreSQL server on Fedora systems for Odoo installation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install -y postgresql-server\n$ sudo postgresql-setup --initdb --unit postgresql\n$ sudo systemctl enable postgresql\n$ sudo systemctl start postgresql\n```\n\n----------------------------------------\n\nTITLE: Git Branch Merging\nDESCRIPTION: Git command for merging branches directly from workstation\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit merge\n```\n\n----------------------------------------\n\nTITLE: Semantic HTML Title Implementation\nDESCRIPTION: Shows proper implementation using semantic HTML tags and minimal custom styling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<h5 class=\"o_module_custom_title\">\n   Hello There!\n</h5>\n\n<div class=\"o_module_custom_subtitle\">\n   <b><small>I'm a subtitle.</small></b>\n</div>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.o_module_custom_title {\n   animation: 1s linear 1s mycustomAnimation;\n}\n\n.o_module_custom_subtitle {\n   animation: 2s linear 1s mycustomAnimation;\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Implementation\nDESCRIPTION: Demonstrates how to implement a grid layout system with custom rows and gaps.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"row o_grid_mode\" data-row-count=\"13\" style=\"gap: 20px 10px\">\n    <!-- Content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Widgets for Fields in Odoo XML Views\nDESCRIPTION: This snippet demonstrates how to use the 'widget' attribute to customize the rendering of fields in Odoo XML views. It shows examples for both form and tree views, including the use of 'many2many_tags', 'handle', and 'progressbar' widgets.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/field_attribute_widget.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"tag_ids\" widget=\"many2many_tags\"/>\n</form>\n<tree>\n    <field name=\"sequence\" widget=\"handle\"/>\n    <field name=\"level_progress\" widget=\"progressbar\"/>\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Configuring Buckaroo Plaza Webhook Settings in RST\nDESCRIPTION: RST formatted documentation detailing the steps to configure webhook settings in Buckaroo Plaza, including push response setup and URL configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/buckaroo.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n========\nBuckaroo\n========\n\n`Buckaroo <https://www.buckaroo.eu/>`_ is a Dutch-based company that offers several online payment\npossibilities.\n\n.. _payment_providers/buckaroo/configure_dashboard:\n\nConfiguration on Buckaroo Plaza\n===============================\n\n#. Log into `Buckaroo Plaza <https://plaza.buckaroo.nl>`_, go to :menuselection:`My Buckaroo -->\n   Websites` and select the :guilabel:`Push settings` tab.\n#. Tick the :guilabel:`Enable Push Response` check box in the :guilabel:`Delayed and Push responses`\n   section.\n#. Enter the URL of your Odoo database, followed by `/payment/buckaroo/webhook` in both the\n   :guilabel:`Push URI Success/Pending` and :guilabel:`Push URI Failure` text fields. For example:\n   `https://yourcompany.odoo.com/payment/buckaroo/webhook`.\n#. Leave the other fields as they are and click :guilabel:`Save`.\n#. In the :guilabel:`General` tab, copy the website :guilabel:`Key` (i.e., the key used to uniquely\n   identify your website with Buckaroo) and save it for later.\n#. Go to :menuselection:`Configuration --> Security --> Secret key`, enter or :guilabel:`Generate` a\n   :guilabel:`Secret key` and click :guilabel:`Save`. Save the key for later.\n\nConfiguration on Odoo\n=====================\n\n#. :ref:`Navigate to the payment provider Buckaroo <payment_providers/add_new>` and change its state\n   to :guilabel:`Enabled`.\n#. In the :guilabel:`Credentials` tab, fill the :guilabel:`Website Key` and :guilabel:`Secret Key`\n   fields with the values you saved at the step\n   :ref:`payment_providers/buckaroo/configure_dashboard`.\n#. Configure the options in the other tabs to your liking.\n\n.. seealso::\n   :doc:`../payment_providers`\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the structure and content of the accounting reports documentation page, including section headers, image references, and cross-references.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/reporting.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\nReporting\n=========\n\nOdoo includes **generic** and **dynamic** reports available for all countries, regardless of the\n:doc:`localization package <../../finance/fiscal_localizations>` installed:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Expense Report Creation Notes\nDESCRIPTION: Note block in RST format describing the conditions and restrictions for creating expense reports in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/expenses/expense_reports.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Expense reports can be created in one of three places:\n\n   #. Navigate to the main :menuselection:`Expenses app` dashboard (also accessible, via\n      :menuselection:`Expenses app --> My Expenses --> My Expenses`)\n   #. Navigate to :menuselection:`Expenses app --> My Expenses --> My Reports`\n   #. Navigate to :menuselection:`Expenses app --> Expense Reports`\n\n   In any of these views, click :guilabel:`New` to create a new expense report.\n```\n\n----------------------------------------\n\nTITLE: Accessing Make Help for Documentation Building Options\nDESCRIPTION: Command to display available make options for building the Odoo documentation, showing additional commands beyond the basic build process.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake help\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for Inter-Company Transactions\nDESCRIPTION: RST documentation structure defining settings for inter-company transactions, including images, notes, examples, and cross-references to related documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/companies.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: companies/inter-company-transactions.png\n   :align: center\n   :alt: View of the settings page emphasizing the inter company transaction field in Odoo.\n\n.. note::\n   Products **must** be configured as :guilabel:`Can be sold` and shared between the companies.\n\n.. example::\n   :guilabel:`Synchronize invoice/bills`: an invoice posted on `JS Store Belgium`, for `JS Store\n   US`, automatically creates a vendor bill, and generates a drafted purchase/sales order using the\n   selected company warehouse, when a sales/purchase order is confirmed for the selected company.\n\n.. tip::\n   Remember to test all workflows as a user *other* than the administrator.\n\n.. seealso::\n   - :doc:`Multi-company Guidelines <../../developer/howtos/company>`\n   - :doc:`../finance/accounting/get_started/multi_currency`\n\n.. toctree::\n   :titlesonly:\n\n   companies/digest_emails\n   companies/email_template\n```\n\n----------------------------------------\n\nTITLE: Domain Validation Code Removal in TypeScript\nDESCRIPTION: Code block showing the domain validation constraint that needs to be removed from login.ts file when setting up Gmail Plugin for on-premise Odoo installations. This code specifically checks for odoo.com domain restrictions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/integrations/mail_plugins/gmail.rst#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (!/^https:\\/\\/([^\\/?]*\\.)?odoo\\.com(\\/|$)/.test(validatedUrl)) {\n    return notify(\"The URL must be a subdomain of odoo.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Note Directive for Technician List Display\nDESCRIPTION: This RST note directive explains when the Technician list is displayed in the Maintenance Calendar sidebar.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_calendar.rst#2025-04-18_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   The :guilabel:`Technician` list only displays if technicians are assigned to open requests, and\n   individual technicians are only listed, if they are listed as :guilabel:`Responsible` on at least\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Net Weight/Volume (Ounces)\nDESCRIPTION: This regular expression is designed to identify the net weight or volume in ounces. It looks for the Application Identifier (AI) `357[0-5]` followed by 6 digits. This expression helps extract net weight or volume data in ounces.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_16\n\nLANGUAGE: regex\nCODE:\n```\n\"(357[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Teacher Admin Menu Configuration in XML\nDESCRIPTION: XML configuration for adding teacher management menus and actions to Odoo backend interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"action_academy_teachers\" model=\"ir.actions.act_window\">\n        <field name=\"name\">Academy teachers</field>\n        <field name=\"res_model\">academy.teachers</field>\n    </record>\n\n    <menuitem sequence=\"0\" id=\"menu_academy\" name=\"Academy\"/>\n    <menuitem id=\"menu_academy_content\" parent=\"menu_academy\"\n                name=\"Academy Content\"/>\n    <menuitem id=\"menu_academy_content_teachers\"\n                parent=\"menu_academy_content\"\n                action=\"action_academy_teachers\"/>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Systray Items - JavaScript\nDESCRIPTION: The snippet shows how to add a custom item to the systray in Odoo. It involves creating a new component and registering it in the systray registry with an optional sequence for ordering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\"\nclass MySystrayComponent extends Component {\n    ...\n}\nregistry.category(\"systray\").add(\"MySystrayComponent\", MySystrayComponent, { sequence: 1 });\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for Multi-Currency System\nDESCRIPTION: Complete documentation for Odoo's multi-currency system, covering configuration, exchange rates, accounting practices, and transaction handling across different currencies. Includes detailed sections on manual and automatic currency rate updates, exchange difference entries, and foreign currency payments.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/multi_currency.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================\nMulti-currency system\n=====================\n\nOdoo allows you to issue invoices, receive bills, and record transactions in currencies other than\nthe main currency configured for your company. You can also set up bank accounts in other currencies\nand run reports on your foreign currency activities.\n\n.. seealso::\n   - :doc:`../bank/foreign_currency`\n\n.. _multi-currency/config:\n\nConfiguration\n=============\n\n.. _multi-currency/config-main-currency:\n\nMain currency\n-------------\n\nThe **main currency** is defined by default according to the company's country. You can change it by\ngoing to :menuselection:`Accounting --> Configuration --> Settings --> Currencies` and changing the\ncurrency in the :guilabel:`Main Currency` setting.\n```\n\n----------------------------------------\n\nTITLE: Structuring Bank Statement Lines in JavaScript\nDESCRIPTION: Defines the structure for bank statement lines in a JSON format. Each line includes amount, description, and date.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/extract_api.rst#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"bank_statement_lines\": [\n    {\n        \"amount\": float,\n        \"description\": string,\n        \"date\": string,\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Dropdown Menu in Odoo\nDESCRIPTION: This snippet shows how to add individual items to a dropdown menu in Odoo. The `parent_id` field references the ID of the dropdown menu, created in the previous step, using the `ref` attribute. The other fields define the name, URL, and sequence of the item within the dropdown.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\"menu_services_item_1\" model=\"website.menu\">\n    <field name=\"name\">Item 1</field>\n    <field name=\"url\">/dropdown/item-1</field>\n    <field name=\"website_id\">1</field>\n    <field name=\"parent_id\" ref=\"website_airproof.menu_services\"/>\n    <field name=\"sequence\" type=\"int\">...</field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Loading Warning\nDESCRIPTION: This code snippet shows the warning message that appears in Odoo logs when a model does not have any access rules defined.  It indicates that no users can access the data for that model. The warning suggests adding access rules to the model definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWARNING rd-demo odoo.modules.loading: The models ['estate.property'] have no access rules...\n```\n\n----------------------------------------\n\nTITLE: Adding Product Category Column to Sales Order Table\nDESCRIPTION: Example of modifying a sales order report table to include an additional column for product category.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<table class=\"table table-sm o_main_table table-borderless mt-4\">\n    <!-- In case we want to repeat the header, remove \"display: table-row-group\" -->\n    <thead style=\"display: table-row-group\">\n        <tr>\n            <th name=\"th_description\" class=\"text-start\">Description</th>\n            <th>Product Category</th>\n            <th name=\"th_quantity\" class=\"text-end\">Quantity</th>\n            <th name=\"th_priceunit\" class=\"text-end\">Unit Price</th>\n[...]\n            <tr t-att-class=\"'bg-200 fw-bold o_line_section' if line.display_type == 'line_section' else 'fst-italic o_line_note' if line.display_type == 'line_note' else ''\">\n                <t t-if=\"not line.display_type\">\n                    <td name=\"td_name\"><span t-field=\"line.name\">Bacon Burger</span></td>\n                    <td t-out=\"line.product_id.categ_id.display_name\"/>\n                    <td name=\"td_quantity\" class=\"text-end\">\n                        <span t-field=\"line.product_uom_qty\">3</span>\n                        <span t-field=\"line.product_uom\">units</span>\n                        <span t-if=\"line.product_packaging_id\">\n```\n\n----------------------------------------\n\nTITLE: Odoo Database Restriction Example\nDESCRIPTION: This bash command demonstrates how to restrict access to only two specific databases, '11firstdatabase' and '11seconddatabase', using the `--database` option. This limits the databases that can be accessed by the Odoo instance.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --database 11firstdatabase,11seconddatabase\n```\n\n----------------------------------------\n\nTITLE: Using Defined Fonts in Odoo Theme\nDESCRIPTION: This snippet demonstrates how to use the defined font configurations within the `$o-website-values-palettes` map. It specifies the fonts to be used for various elements like general text, headings, navbar, and buttons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n   $o-website-values-palettes: (\n      (\n         'font':                             '<font-name>',\n         'headings-font':                    '<font-name>',\n         'navbar-font':                      '<font-name>',\n         'buttons-font':                     '<font-name>',\n      ),\n   );\n```\n\n----------------------------------------\n\nTITLE: Adding Many2many Tags with Color and Creation Options\nDESCRIPTION: Configures a many2many tags widget with custom color field and creation domain restrictions\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"category_id\" widget=\"many2many_tags\" options=\"{'create': [['some_other_field', '>', 24]], 'color_field': 'color'}\" />\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Dependencies - Linux\nDESCRIPTION: Command to install PostgreSQL and its client on Linux systems using apt package manager.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install postgresql postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Resizing Barcodes in ZPL Labels - XML\nDESCRIPTION: This snippet illustrates how to resize barcodes in a ZPL label by adjusting the `^BY` command parameter. Changing `^BY3` to `^BY2` shrinks the barcode size. It relies on standard ZPL commands and does not require additional dependencies. Key parameters include `^BY` which configures barcode width and height. The input is existing ZPL barcode code, and the output is a resized barcode.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^FO100,160^BY3\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^FO100,160^BY2\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: Creating SelectMenu with Choices and Groups - JavaScript\nDESCRIPTION: This snippet demonstrates how to define a SelectMenu component in Odoo, showing how to set up choices and groups for the menu. The component utilizes the owl.Component framework and the choices and groups are defined in getter methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SelectMenu } from \"@web/core/select_menu/select_menu\";\n\nclass MyComponent extends owl.Component {\n    get choices() {\n        return [\n            {\n                value: \"value_1\",\n                label: \"First value\"\n            }\n        ]\n    }\n    get groups() {\n        return [\n            {\n                label: \"Group A\",\n                choices: [\n                    {\n                        value: \"value_2\",\n                        label: \"Second value\"\n                    },\n                    {\n                        value: \"value_3\",\n                        label: \"Third value\"\n                    }\n                ]\n            },\n            {\n                label: \"Group B\",\n                choices: [\n                    {\n                        value: \"value_4\",\n                        label: \"Fourth value\"\n                    }\n                ]\n            }\n        ]\n    }\n}\nMyComponent.template = owl.tags.xml`\n    <SelectMenu\n        choices=\"choices\"\n        groups=\"groups\"\n        value=\"'value_2'\"\n    />\n`;\n```\n\n----------------------------------------\n\nTITLE: Menu Selection Path for Scheduled Actions\nDESCRIPTION: Navigation path reference for accessing scheduled actions in Odoo settings\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/create.rst#2025-04-18_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n:menuselection:`Settings --> Technical --> Automation --> Scheduled Actions`\n```\n\n----------------------------------------\n\nTITLE: Referencing CSV Column Structure in reStructuredText\nDESCRIPTION: This snippet describes the structure of a CSV file, specifically mentioning that the fourth column corresponds to the 'code' field for the 'res.country.state' model in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* the fourth column is the ``code`` field for ``res.country.state``\n```\n\n----------------------------------------\n\nTITLE: Calculating AVCO for First Product Reception Example\nDESCRIPTION: Mathematical calculation demonstrating how the average cost is computed when receiving 8 tables at $10 each, starting with zero inventory. This shows the initial application of the AVCO formula.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{0 + 8 \\times $10}{8} = \\frac{$80}{8} = $10\n```\n\n----------------------------------------\n\nTITLE: Plausible.io Configuration Parameters\nDESCRIPTION: These parameters are used to configure Odoo Online to connect to Plausible.io's servers, allowing the use of an existing Plausible.io account instead of the default Odoo-hosted instance. Setting these parameters requires developer mode to be enabled.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/reporting/analytics.rst#2025-04-18_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n`website.plausible_script`\n`https://plausible.io/js/plausible.js`\n`website.plausible_server`\n`https://plausible.io`\n```\n\n----------------------------------------\n\nTITLE: UAE Localization Module Installation List\nDESCRIPTION: Table showing the required modules for UAE localization, including accounting, payroll, and POS features.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_arab_emirates.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`United Arab Emirates - Accounting`\n     - ``l10n_ae``\n     - Default fiscal localization package.\n   * - :guilabel:`U.A.E. - Payroll`\n     - ``l10n_ae_hr_payroll``\n     - Includes all rules, calculations, and salary structures.\n   * - :guilabel:`U.A.E. - Payroll with Accounting`\n     - ``l10n_ae_hr_payroll_account``\n     - Includes all accounts related to the payroll module.\n   * - :guilabel:`United Arab Emirates - Point of Sale`\n     - ``l10n_ae_pos``\n     - Includes the UAE-compliant POS receipt.\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Git Branch for Submodule Addition\nDESCRIPTION: This command allows you to switch to the branch where you want to add a submodule.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/submodules.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout <branch>\n```\n\n----------------------------------------\n\nTITLE: Installing a Module via Command Line in Odoo.sh\nDESCRIPTION: Command to install a module (in this case 'sale') via the Odoo command line interface, with options to skip demo data and stop after initialization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -i sale --without-demo=all --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Ship to/Deliver to Global Location\nDESCRIPTION: This regular expression is used to identify a destination location.  It searches for the Application Identifier (AI) `410` followed by 13 digits.  The expression is designed to extract location data based on GS1 standards.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"(410)(\\d{13})\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Step Routes Feature\nDESCRIPTION: Shows how to activate the Multi-Step Routes feature in Odoo Inventory settings, which is required to display shipment configuration options\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_one_step.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Inventory app --> Configuration --> Settings`\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Footer Template in Odoo XML\nDESCRIPTION: Creates a new custom footer template in Odoo XML, extending the base layout.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"footer\" model=\"ir.ui.view\">\n   <field name=\"name\">Airproof Footer</field>\n   <field name=\"type\">qweb</field>\n   <field name=\"key\">website_airproof.footer</field>\n   <field name=\"inherit_id\" ref=\"website.layout\"/>\n   <field name=\"mode\">extension</field>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//div[@id='footer']\" position=\"replace\">\n         <div id=\"footer\" class=\"oe_structure oe_structure_solo\" t-ignore=\"true\" t-if=\"not no_footer\">\n            <!-- Content -->\n         </div>\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Net Volume (Liters)\nDESCRIPTION: This regular expression identifies the net volume in liters. It looks for the Application Identifier (AI) `315[0-5]` followed by 6 digits.  The expression extracts quantity data in liters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_13\n\nLANGUAGE: regex\nCODE:\n```\n\"(315[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: SVG Shape Definition\nDESCRIPTION: This XML snippet defines an SVG shape with two layers, `zigs06_top` and `zigs06_bottom`, using different colors from the Odoo default palette. The SVG uses `<use>` elements to reference these layers, creating the final shape. The `viewBox` attribute defines the coordinate system for the SVG.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\" width=\"100%\" height=\"100%\">\n        <defs>\n            <svg id=\"zigs06_top\" viewBox=\"0 0 30 30\" preserveAspectRatio=\"xMinYMin meet\" fill=\"#383E45\" width=\"100%\">\n                <path d=\"M30,7.9C22.5,7.9,22.5,20,15,20S7.5,7.9,0,7.9V0h30V7.9z\"/>\n            </svg>\n            <svg id=\"zigs06_bottom\" viewBox=\"0 0 30 30\" preserveAspectRatio=\"xMinYMax meet\" fill=\"#FFFFFF\" width=\"100%\">\n                <path d=\"M0,22.1C7.5,22.1,7.5,10,15,10s7.5,12.1,15,12.1V30H0V22.1z\"/>\n            </svg>\n        </defs>\n        <svg>\n            <use xlink:href=\"#zigs06_top\"/>\n            <use xlink:href=\"#zigs06_bottom\"/>\n        </svg>\n    </svg>\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with Odoo Shell Console\nDESCRIPTION: Python code example showing how to query user data from the Odoo database using the Odoo Shell console within the online editor.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nenv['res.users'].search_read([], ['name', 'email', 'login'])\n[{'id': 2,\n'login': 'admin',\n'name': 'Administrator',\n'email': 'admin@example.com'}]\n```\n\n----------------------------------------\n\nTITLE: Authorize.Net Statement Data Format\nDESCRIPTION: Example format of raw transaction data from Authorize.Net settlement statements that needs to be imported into the Excel template\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/authorize.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTransaction ID, Settlement Date, Transaction Type, Amount...\n```\n\n----------------------------------------\n\nTITLE: Purchasing Snailmail Credits in Odoo\nDESCRIPTION: This RST snippet provides instructions on how to purchase credits (stamps) for the Snailmail service in Odoo. It includes the navigation paths to access the purchase options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/snailmail.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo buy stamps, go to :menuselection:`Accounting --> Configuration --> Settings --> Customer\ninvoices: Snailmail`, click on :guilabel:`Buy credits`, or go to :menuselection:`Settings --> In-App\nPurchases: Odoo IAP`, and click on :guilabel:`View my Services`.\n```\n\n----------------------------------------\n\nTITLE: Documenting 'name' Attribute in Odoo 17 XML (reStructuredText)\nDESCRIPTION: This snippet defines the 'name' attribute used in Odoo 17 XML files. It specifies the method to call for 'object' type or the action to load for 'action' type. The attribute is optional, of string type, and defaults to an empty string.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/button_attribute_name.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: name\n   :noindex:\n\n   The method to call if the `type` is `object`. The :term:`XMLID <external identifier>` of the\n   action to load if the `type` is `action`, either in raw format or in `%(XMLID)d` format.\n\n   :requirement: Optional\n   :type: str\n   :default: `''`\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Selection Widget with CSS Classes\nDESCRIPTION: Example of label_selection widget with custom CSS classes for different states.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"state\" widget=\"label_selection\" options=\"{'classes': {'draft': 'default','cancel': 'default','none': 'danger',}}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Filter for Odoo in INI File\nDESCRIPTION: Sets the dbfilter option to show only databases with names beginning with 'mycompany'. This filters which databases are accessible based on the hostname.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndbfilter = ^mycompany.*$\n```\n\n----------------------------------------\n\nTITLE: Example of Importing Serial Numbers in Odoo\nDESCRIPTION: This example demonstrates how to import serial numbers into the 'Lots/Serial numbers' input field in the 'Import Lots' pop-up window, using the 'Keep current lines' option in Odoo. It shows assigning serial numbers to products on a receipt, by adding them to the list of serial numbers already existing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/product_management/product_tracking/create_sn.rst#2025-04-18_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"124\\n125\"\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure\nDESCRIPTION: RST markup defining a documentation table of contents for website configuration topics. Uses toctree directive with titlesonly option to create a clean navigation structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=============\nConfiguration\n=============\n\n.. toctree::\n   :titlesonly:\n\n   configuration/domain_names\n   configuration/address_autocomplete\n   configuration/google_search_console\n   configuration/cookies_bar\n   configuration/translate\n   configuration/multi_website\n   configuration/spam_protection\n   configuration/cdn\n```\n\n----------------------------------------\n\nTITLE: Escaping Backticks in RST Documentation\nDESCRIPTION: Demonstrates correct and incorrect ways to escape inner backticks in RST code blocks. Shows how to properly nest backtick sequences for code formatting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_20\n\nLANGUAGE: rst\nCODE:\n```\n```\\`this formatting\\````\n```\n\nLANGUAGE: rst\nCODE:\n```\n`````this formatting`````\n```\n\nLANGUAGE: rst\nCODE:\n```\n```this formatting```\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Outstanding Account Method (Initial Payment)\nDESCRIPTION: Shows the journal entry created when recording a check payment using the Outstanding Account method. The entry moves funds from Account Receivable to Outstanding Receipts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/checks.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------------+-------------------+----------+----------+\n| Account              | Statement Match   | Debit    | Credit   |\n+======================+===================+==========+==========+\n| Account Receivable   |                   |          | 100.00   |\n+----------------------+-------------------+----------+----------+\n| Outstanding Receipts |                   | 100.00   |          |\n+----------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Fonts using @font-face in SCSS\nDESCRIPTION: This snippet illustrates how to define custom fonts using the `@font-face` rule in an SCSS file. It specifies the font family, weight, style, and the source URLs for different font formats, which makes custom fonts usable in the website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n   @font-face {\n      font-family: \"My Custom Font\", Helvetica, Helvetica Neue, Arial, sans-serif;\n      font-weight: 400;\n      font-style: normal;\n      src: url('/fonts/my-custom-font.woff') format('woff'),\n           url('/fonts/my-custom-font.woff2') format('woff2');\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Time Periods for Date Filters\nDESCRIPTION: Example demonstrating how to set default time periods for date filters. This example sets 'this_year' and 'last_year' as the default periods for a creation date filter.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" default_period=\"this_year,last_year\"/>\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Import Instructions - restructuredText Documentation\nDESCRIPTION: Documentation describing the step-by-step process for importing modules into Odoo SaaS and Odoo.sh environments. Includes critical warnings about the Force init option and file size limitations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/going_live.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==========\nGoing live\n==========\n\nOnce all the web design and development work finished, it's time to deploy it on a development or\nproduction database.\n\n.. _website_themes/going_live/module_import:\n\nModule import\n=============\n\n.. _website_themes/going_live/module_import/saas:\n\nOdoo SaaS\n---------\n\nFollow these steps the first time you import a module:\n\n#. Create a ZIP file of your module.\n#. Connect to the project database.\n#. Enable the :ref:`developer mode <developer-mode>`.\n#. Go to :guilabel:`Apps`, search for `base_import_module`, and install it if necessary.\n#. Click on :guilabel:`Import Module` in the menu.\n#. Upload your ZIP file, tick :guilabel:`Force init`, and click the :guilabel:`Import App` button.\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Document Structure\nDESCRIPTION: RST markup defining abbreviations and document structure for US accounting documentation\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. |GAAP| replace:: :abbr:`GAAP (Generally Acceptable Accounting Practices)`\n.. |FASB| replace:: :abbr:`FASB (Financial Accounting Standards Board)`\n.. |SEC| replace:: :abbr:`SEC (Securities and Exchange Commission)`\n.. |COA| replace:: :abbr:`CoA (Chart of Accounts)`\n.. |AR| replace:: :abbr:`AR (Accounts Receivable)`\n.. |AP| replace:: :abbr:`AP (Accounts Payable)`\n.. |CFS| replace:: :abbr:`CFS (Cash Flow Statement)`\n.. |NACHA| replace:: :abbr:`NACHA (National Automated Clearing House Association)`\n.. |ACH| replace:: :abbr:`ACH (Automated Clearing House)`\n```\n\n----------------------------------------\n\nTITLE: Installing rtlcss on MacOS\nDESCRIPTION: Command to install rtlcss globally using npm on MacOS systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ sudo npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Upgrade Utils via pip\nDESCRIPTION: Command to install the Odoo Upgrade Utils library using pip for platforms where Odoo is not self-managed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m pip install git+https://github.com/odoo/upgrade-util@master\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Fork Console\nDESCRIPTION: Configures Git to push changes to a fork of the tutorials repository rather than the main codebase. It assumes that you have already forked the tutorials repository on GitHub. Requires appropriate fork creation on GitHub.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd /TutorialsPath\n$ git remote add dev git@github.com:<your_github_account>/tutorials.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Holiday in Odoo Time Off App\nDESCRIPTION: This snippet demonstrates how to configure a public holiday in Odoo's Time Off app, including setting the name, date, time zone, working hours, and work entry type.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/time_off.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Working Hours`: If the holiday should only apply to employees who have a specific set\n  of working hours, select the working hours from the drop-down menu. If left blank, the holiday\n  applies to all employees.\n- :guilabel:`Work Entry Type`: If using the **Payroll** app, this field defines how the :ref:`work\n  entries <payroll/work-entries>` for the holiday appear. Select the work entry type from the\n  drop-down menu.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for EPC QR Codes\nDESCRIPTION: ReStructuredText markup defining the documentation structure for EPC QR code implementation, including configuration steps, bank account setup, and invoice generation instructions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/epc_qr_code.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n============\nEPC QR codes\n============\n\n.. note::\n   This feature is only available for companies in several European countries such as Austria,\n   Belgium, Finland, Germany, and the Netherlands.\n\n.. seealso::\n   - :doc:`../bank`\n   - `Odoo Academy: QR Code on Invoices for European Customers <https://www.odoo.com/r/VuU>`_\n```\n\n----------------------------------------\n\nTITLE: Updating Module Version in Production\nDESCRIPTION: Example of module version update in manifest file to trigger automatic module updates in production environment\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Adding Data Files to the Manifest in Odoo\nDESCRIPTION: This Python code snippet shows how to declare data files (like security access control and templates) in the `__manifest__.py` file of an Odoo module. These files are loaded when the module is installed or updated, allowing initialization and configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"'data': [\n    'security/ir.model.access.csv',\n    'templates.xml',\n],\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Expiration Date\nDESCRIPTION: This regular expression is used to identify the expiration date. It searches for the Application Identifier (AI) `17` followed by 6 digits representing the date in YYMMDD format. The expression helps to extract expiration date information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_8\n\nLANGUAGE: regex\nCODE:\n```\n\"(17)(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Custom SVG Shape Definition\nDESCRIPTION: This XML snippet defines a custom SVG shape, a hexagon, using a color from the default Odoo palette.  The `polygon` element defines the shape's geometry, and the `style` attribute sets the fill color. The `width` and `height` attributes define the shape's dimensions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n   <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"86\" height=\"100\">\n       <polygon points=\"0 25, 43 0, 86 25, 86 75, 43 100, 0 75\" style=\"fill: #3AADAA;\"/>\n   </svg>\n```\n\n----------------------------------------\n\nTITLE: Lazy JavaScript Translation\nDESCRIPTION: Example of using lazy translation in JavaScript with _lt for content that should be translated when used rather than when loaded\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/translations.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar core = require('web.core');\nvar _lt = core._lt;\nvar map_title = {\n    access_error: _lt('Access Error'),\n    missing_error: _lt('Missing Record'),\n};\n```\n\n----------------------------------------\n\nTITLE: Python Propagate Context\nDESCRIPTION: This Python snippet demonstrates the use of `with_context` for propagating the context when calling methods in Odoo. It highlights how to replace the entire context or add additional values while ensuring the original context remains immutable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nrecords.with_context(new_context).do_stuff() # all the context is replaced\nrecords.with_context(**additionnal_context).do_other_stuff() # additionnal_context values override native context ones\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Enterprise Package on Linux\nDESCRIPTION: This command installs the Odoo Enterprise Debian package on a Linux system. It should replace the existing Community package.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/community_to_enterprise.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i <path_to_enterprise_deb>\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook URL Format\nDESCRIPTION: Format for the webhook endpoint URL that needs to be configured in Stripe dashboard. The URL consists of the base Odoo instance URL followed by the Stripe webhook path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/stripe.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://yourcompany.odoo.com/payment/stripe/webhook\n```\n\n----------------------------------------\n\nTITLE: psql example: describing a table with not null constraints\nDESCRIPTION: This text snippet demonstrates using `psql` to describe the structure of the `estate_property` table, focusing on the `name` and `expected_price` columns and highlighting their `not null` constraints. This is achieved by setting the `required=True` attribute in the Odoo model definition.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nrd-demo=# \\d estate_property;\n                                                    Table \"public.estate_property\"\n            Column       |            Type             | Collation | Nullable |                   Default\n        --------------------+-----------------------------+-----------+----------+---------------------------------------------\n        ...\n        name               | character varying           |           | not null |\n        ...\n        expected_price     | double precision            |           | not null |\n```\n\n----------------------------------------\n\nTITLE: Configuring Recurring API URL Example\nDESCRIPTION: Example URL structure for setting up the Recurring API endpoint with a custom prefix.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/adyen.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://yourprefix-pal-live.adyenpayments.com/pal/servlet/Recurring\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Components in RST\nDESCRIPTION: Shows how to create card components in RST for organizing related documentation links with titles, targets, tags, and descriptions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n.. cards::\n\n   .. card:: Documentation\n      :target: ../documentation\n      :tag: Step-by-step guide\n      :large:\n\n      Use this guide to acquire the tools and knowledge you need to write documentation.\n\n   .. card:: Content guidelines\n      :target: content_guidelines\n\n      List of guidelines, tips, and tricks to help you create clear and effective content.\n\n   .. card:: RST guidelines\n      :target: rst_guidelines\n\n      List of technical guidelines to observe when writing with reStructuredText.\n```\n\n----------------------------------------\n\nTITLE: Default Vendor Bill Sequence Format Example\nDESCRIPTION: Shows the default sequence format used by Odoo for vendor bills which follows the pattern BILL/year/month/incrementing-number.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/vendor_bills/sequence.rst#2025-04-18_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nBILL/2025/01/00001\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub in Odoo.sh Environment\nDESCRIPTION: Series of Git commands to stage, commit and push changes from the Odoo.sh online editor to GitHub using HTTPS authentication.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/user\ngit add\ngit commit\ngit push https HEAD:<branch>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Net Weight (kg)\nDESCRIPTION: This regular expression is designed to identify the net weight in kilograms.  It looks for the Application Identifier (AI) `310[0-5]` followed by 6 digits. The expression helps to extract net weight information in kilograms.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_11\n\nLANGUAGE: regex\nCODE:\n```\n\"(310[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Grid Table in RST\nDESCRIPTION: Demonstrates how to create a complex grid table with multiple rows and columns\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------+--------------+---------------+\n|                       | Shirts       | T-shirts      |\n+=======================+==============+===============+\n| **Available colours** | Purple       | Green         |\n|                       +--------------+---------------+\n|                       | Turquoise    | Orange        |\n+-----------------------+--------------+---------------+\n| **Sleeves length**    | Long sleeves | Short sleeves |\n+-----------------------+--------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Array Splice Operation Example\nDESCRIPTION: Example of removing an element from an array using findIndex and splice.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// find the index of the element to delete\nconst index = list.findIndex((elem) => elem.id === elemId);\nif (index >= 0) {\n      // remove the element at index from list\n      list.splice(index, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Connection Command\nDESCRIPTION: Command to establish SSH connection to a build environment. Requires build ID and domain name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nssh <build_id>@<domain>\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitutions for Abbreviations\nDESCRIPTION: This snippet defines text substitutions for common abbreviations used throughout the document, such as PO (Purchase Order), RfQ (Request for Quotation), and BoM (Bill of Materials).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/dropship_subcontracting_lead_times.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |PO| replace:: :abbr:`PO (Purchase Order)`\n.. |RfQ| replace:: :abbr:`RfQ (Request for Quotation)`\n.. |BoM| replace:: :abbr:`BoM (Bill of Materials)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database List via JSON-RPC in Python\nDESCRIPTION: This code snippet shows how to retrieve the list of databases from the Odoo database manager using JSON-RPC in Python. It defines helper functions for making JSON-RPC calls and then uses them to login and execute the 'list' method on the 'odoo.database' model.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_online.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport random\nimport urllib.request\n\nUSER = 'user@domain.tld'\nAPIKEY = 'your_apikey'\n\ndef json_rpc(url, method, params):\n    data = {\n        'jsonrpc': '2.0',\n        'method': method,\n        'params': params,\n        'id': random.randint(0, 1000000000),\n    }\n    req = urllib.request.Request(url=url, data=json.dumps(data).encode(), headers={\n        \"Content-Type\": \"application/json\",\n    })\n    reply = json.loads(urllib.request.urlopen(req).read().decode('UTF-8'))\n    if reply.get('error'):\n        raise Exception(reply['error'])\n    return reply['result']\n\ndef call(url, service, method, *args):\n    return json_rpc(url, 'call', {'service': service, 'method': method, 'args': args})\n\nurl = 'https://www.odoo.com/jsonrpc'\nuid = call(url, 'common', 'login', 'openerp', USER, APIKEY)\ndatabases_list = call(url, 'object', 'execute', 'openerp', uid, APIKEY, 'odoo.database', 'list')\n```\n\n----------------------------------------\n\nTITLE: Creating an Important Note in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create an 'important' note in reStructuredText, which is used to highlight critical information about lead times in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/dropship_subcontracting_lead_times.rst#2025-04-18_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. important::\n   Like all lead times in Odoo, lead times for subcontracted products are only an estimate, and are\n   based on how long actions are *expected* to take.\n\n   Unforeseen circumstances can impact the completion of these actions, which means that lead times\n   should not be viewed as guarantees.\n```\n\n----------------------------------------\n\nTITLE: Directory Path Mappings\nDESCRIPTION: Lists file path changes showing how documentation files are being reorganized and renamed across different modules. Includes changes in administration, accounting, HR and general application documentation structures.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/14.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# administration/install\n\nadministration/install/install.rst administration/install.rst\n\n# administration/maintain\n\nadministration/maintain/online.rst administration/maintain/odoo_online.rst\n\n# administration/upgrade\n\nadministration/upgrade/online_hosting.rst administration/upgrade.rst\nadministration/upgrade/faq.rst administration/upgrade.rst\nadministration/upgrade/odoo_online.rst administration/upgrade.rst\nadministration/upgrade/odoo_sh.rst administration/upgrade.rst\nadministration/upgrade/on_premise.rst administration/upgrade.rst\n\n# applications/accounting\n\napplications/finance/accounting/bank/feeds/bank_statements.rst content/applications/finance/accounting/bank/bank_statements.rst\napplications/finance/accounting/bank/feeds/ponto.rst applications/finance/accounting/bank/bank_synchronization/ponto.rst\napplications/finance/accounting/bank/feeds/saltedge.rst applications/finance/accounting/bank/bank_synchronization/saltedge.rst\napplications/finance/accounting/bank/misc/interbank.rst applications/finance/accounting/bank/interbank.rst\napplications/finance/accounting/fiscal_localizations.rst applications/finance/fiscal_localizations.rst\napplications/finance/accounting/fiscal_localizations/localizations/argentina.rst applications/finance/fiscal_localizations/argentina.rst\napplications/finance/accounting/fiscal_localizations/localizations/australia.rst applications/finance/fiscal_localizations/australia.rst\napplications/finance/accounting/fiscal_localizations/localizations/chile.rst applications/finance/fiscal_localizations/chile.rst\napplications/finance/accounting/fiscal_localizations/localizations/colombia.rst applications/finance/fiscal_localizations/colombia.rst\napplications/finance/accounting/fiscal_localizations/localizations/colombia_ES.rst applications/finance/fiscal_localizations/colombia.rst\napplications/finance/fiscal_localizations/colombia_ES.rst applications/finance/fiscal_localizations/colombia.rst\napplications/finance/accounting/fiscal_localizations/localizations/france.rst applications/finance/fiscal_localizations/france.rst\napplications/finance/accounting/fiscal_localizations/localizations/germany.rst applications/finance/fiscal_localizations/germany.rst\napplications/finance/accounting/fiscal_localizations/localizations/indonesia.rst applications/finance/fiscal_localizations/indonesia.rst\napplications/finance/accounting/fiscal_localizations/localizations/italy.rst applications/finance/fiscal_localizations/italy.rst\napplications/finance/accounting/fiscal_localizations/localizations/italy_IT.rst applications/finance/fiscal_localizations/italy.rst\napplications/finance/accounting/fiscal_localizations/localizations/luxembourg.rst applications/finance/fiscal_localizations/luxembourg.rst\napplications/finance/accounting/fiscal_localizations/localizations/mexico.rst applications/finance/fiscal_localizations/mexico.rst\napplications/finance/accounting/fiscal_localizations/localizations/netherlands.rst applications/finance/fiscal_localizations/netherlands.rst\napplications/finance/accounting/fiscal_localizations/localizations/peru.rst applications/finance/fiscal_localizations/peru.rst\napplications/finance/accounting/fiscal_localizations/localizations/spain.rst applications/finance/fiscal_localizations/spain.rst\napplications/finance/accounting/fiscal_localizations/localizations/switzerland.rst applications/finance/fiscal_localizations/switzerland.rst\napplications/finance/accounting/fiscal_localizations/localizations/united_kingdom.rst applications/finance/fiscal_localizations/united_kingdom.rst\napplications/finance/accounting/fiscal_localizations/overview/fiscal_localization_packages.rst applications/finance/fiscal_localizations.rst\napplications/finance/accounting/fiscal_localizations/overview/localizations_list.rst applications/finance/fiscal_localizations.rst\napplications/finance/accounting/getting_started/memento.rst applications/finance/accounting/getting_started/cheat_sheet.rst\napplications/finance/accounting/payables/supplier_bills/manage.rst applications/inventory_and_mrp/purchase/manage_deals/manage.rst\n\n# applications/general\n\napplications/general/calendars/outlook/outlook_calendar.rst applications/productivity/calendar/outlook.rst\napplications/general/calendars/google/google_calendar_credentials.rst applications/productivity/calendar/google.rst\napplications/general/users/delete_account.rst applications/general/users/odoo_account.rst\n\n# applications/hr\n\napplications/hr/payroll/configuration.rst applications/hr/payroll.rst\n```\n\n----------------------------------------\n\nTITLE: Processing Vendor Bill for Stock Receipt\nDESCRIPTION: Accounting entries when receiving a vendor bill for 8 tables at $80. Shows how the Stock Input account is used to pay the bill and record the payable amount.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Use $80 in Stock Input account to pay bill\n2. Debit Stock Input $80\n3. Credit Accounts payable $80\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Tree in RestructuredText\nDESCRIPTION: RestructuredText toctree directive listing related tax documentation pages\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   taxes/cash_basis\n   taxes/retention\n   taxes/vat_verification\n   taxes/fiscal_positions\n   taxes/avatax\n   taxes/taxcloud\n   taxes/eu_distance_selling\n   taxes/B2B_B2C\n```\n\n----------------------------------------\n\nTITLE: Debugging Odoo Tours Using Debugger Statement\nDESCRIPTION: This JavaScript code snippet shows how to insert a debugger statement within a tour step's `run` function. When the tour reaches this step, the JavaScript execution will pause, allowing developers to inspect the state and debug the tour.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrun() { debugger; }\n```\n\n----------------------------------------\n\nTITLE: Documentation File Path Migrations\nDESCRIPTION: Lists the source and destination paths for documentation files being reorganized in the Odoo 17 documentation structure. Each line shows the original file path and its new location, with comments explaining the migration pattern.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/13.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/overview/main_concepts/in_odoo.rst applications/finance/accounting.rst\napplications/finance/accounting/overview/main_concepts/memento.rst applications/finance/accounting/getting_started/memento.rst\napplications/finance/accounting/overview/getting_started/chart_of_accounts.rst applications/finance/accounting/getting_started/initial_configuration/chart_of_accounts.rst\napplications/finance/accounting/overview/getting_started/setup.rst applications/finance/accounting/getting_started/initial_configuration/setup.rst\napplications/finance/accounting/overview/process_overview/customer_invoice.rst applications/finance/accounting/getting_started/process_overview/customer_invoice.rst\napplications/finance/accounting/overview/process_overview/supplier_bill.rst applications/finance/accounting/getting_started/process_overview/supplier_bill.rst\n\napplications/finance/expense/expense.rst applications/finance/expenses.rst\n\napplications/finance/sign/overview/signature_validity.rst applications/finance/sign.rst\n\napplications/general/auth/google_spreadsheets.rst applications/sales/crm/performance/google_spreadsheets.rst\n\napplications/general/base_import.rst applications/general/export_import_data.rst\napplications/general/base_import/import_faq.rst applications/general/export_import_data.rst\napplications/general/base_import/adapt_template.rst applications/general/export_import_data.rst\n\napplications/general/developer_mode/activate.rst applications/general/developer_mode.rst\n\napplications/general/in_app_purchase/in_app_purchase.rst applications/general/in_app_purchase.rst\n\napplications/general/mobile.rst applications/general.rst\n\napplications/general/multi_companies/manage_multi_companies.rst applications/general/companies.rst\napplications/general/multi_companies.rst applications/general/users/companies.rst\n\napplications/general/odoo_basics/choose_language.rst  applications/general/users/language.rst\napplications/general/odoo_basics/export-data.rst applications/general/export_import_data.rst\napplications/general/odoo_basics/users.rst applications/general/users.rst\n\napplications/general/payment_acquirers/payment_acquirers.rst applications/finance/payment_acquirers.rst\napplications/general/payment_acquirers.rst applications/finance/payment_acquirers.rst\napplications/general/payment_acquirers/authorize.rst applications/finance/payment_acquirers/authorize.rst\napplications/general/payment_acquirers/paypal.rst applications/finance/payment_acquirers/paypal.rst\napplications/general/payment_acquirers/stripe.rst applications/finance/payment_acquirers/stripe.rst\napplications/general/payment_acquirers/wire_transfer.rst applications/finance/payment_acquirers/wire_transfer.rst\n\napplications/general/unsplash/unsplash_access_key.rst applications/websites/website/optimize/unsplash.rst\napplications/general/unsplash/unsplash_application_id.rst applications/websites/website/optimize/unsplash.rst\napplications/general/unsplash.rst applications/websites/website/optimize/unsplash.rst\n\napplications/marketing/survey/overview/create.rst applications/marketing/surveys/overview/create.rst\napplications/marketing/survey/overview/scoring.rst applications/marketing/surveys/overview/scoring.rst\napplications/marketing/survey/overview/time_random.rst applications/marketing/surveys/overview/time_random.rst\n\napplications/productivity/discuss/advanced/email_servers.rst applications/general/email_communication/email_servers.rst\napplications/productivity/discuss/advanced/email_template.rst applications/general/email_communication/email_template.rst\n\napplications/settings/users_and_features.rst applications/general.rst\n\ndeveloper/misc/api/iap.rst developer/api/iap.rst\ndeveloper/misc/api/odoo.rst developer/api/external_api.rst\ndeveloper/misc/i18n/localization.rst developer/howtos/localization.rst\ndeveloper/misc/i18n/translations.rst developer/howtos/translations.rst\ndeveloper/misc/other/cmdline.rst developer/cli.rst\ndeveloper/misc/other/guidelines.rst contributing/development/coding_guidelines.rst\ndeveloper/misc/other/iot.rst developer/iot.rst\n\nservices/support/supported_versions.rst administration/maintain/supported_versions.rst\n```\n\n----------------------------------------\n\nTITLE: GS1 Barcode Quantity Identifier\nDESCRIPTION: Specific GS1 barcode component representing the product quantity, using application identifier 3101 for weight\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_usage.rst#2025-04-18_snippet_1\n\nLANGUAGE: barcode\nCODE:\n```\n3101000521\n```\n\n----------------------------------------\n\nTITLE: Custom Asset Import Configuration\nDESCRIPTION: Configuration for custom CSS and JavaScript files used in the accounting documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:code-column:\n:custom-css: accounting.css\n:custom-js: accounts.js,chart-of-accounts.js,entries.js,misc.js,reconciliation.js\n```\n\n----------------------------------------\n\nTITLE: Updating Module Version in Manifest\nDESCRIPTION: Shows how to update the version number in the Odoo module manifest file to trigger automatic updates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.1'\n```\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.2'\n```\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.3'\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Odoo XML Template\nDESCRIPTION: This XML snippet demonstrates how to set the meta title of a page within an Odoo XML template.  It uses the `t-set` directive to define the `additional_title` variable, which will be used for the page's title.  This is important for SEO and user experience.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"additional_title\">My Page Title</t>\n```\n\n----------------------------------------\n\nTITLE: Rotating Elements in ZPL Labels - XML\nDESCRIPTION: This snippet explains the process of rotating elements within a ZPL label by modifying the first parameter of the `^BC` command. Changing `^BCN` to `^BCB` rotates the barcode 270 degrees. It uses the ZPL rotation parameters without any extra dependencies. Important parameters include the rotation definition in `^BC`. Input is the current ZPL code, and output is the rotated label element.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^BCN,100,Y,N,N\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^BCB,100,Y,N,N\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: PO File Example\nDESCRIPTION: This is an example of a PO (Portable Object) file, which is used to store translations in Odoo. The `msgid` field contains the original text, and the `msgstr` field contains the translated text. The file also contains metadata, such as the module and the location of the original text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/translations.rst#2025-04-18_snippet_5\n\nLANGUAGE: po\nCODE:\n```\n\"#. module: website_airproof\\n#: model_terms:ir.ui.view,arch_db:website_airproof.s_custom_snippet\\nmsgid \\\"...\\\"\\nmsgstr \\\"...\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt View in Odoo Studio\nDESCRIPTION: Documentation for Gantt view configuration including permissions, display options, grouping settings and time scale preferences. Used for visualizing record progress over time.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/views.rst#2025-04-18_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe :guilabel:`Gantt` :icon:`fa-tasks` view is used to forecast and examine the overall progress of\nrecords. Records are represented by a bar under a time scale.\n\n- To prevent users from creating or editing records, untick :guilabel:`Can Create` or :guilabel:`Can\n  Edit`.\n- To fill cells in gray whenever a record should not be created there (e.g., on weekends for\n  employees), tick :guilabel:`Display Unavailability`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Odoo Model Structure - Python\nDESCRIPTION: Example demonstrating the proper structure and organization of an Odoo model class, including field declarations, compute methods, constraints, and business logic.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass Event(models.Model):\n    # Private attributes\n    _name = 'event.event'\n    _description = 'Event'\n\n    # Default methods\n    def _default_name(self):\n        ...\n\n    # Fields declaration\n    name = fields.Char(string='Name', default=_default_name)\n    seats_reserved = fields.Integer(string='Reserved Seats', store=True\n        readonly=True, compute='_compute_seats')\n    seats_available = fields.Integer(string='Available Seats', store=True\n        readonly=True, compute='_compute_seats')\n    price = fields.Integer(string='Price')\n    event_type = fields.Selection(string=\"Type\", selection='_selection_type')\n\n    # compute and search fields, in the same order of fields declaration\n    @api.depends('seats_max', 'registration_ids.state', 'registration_ids.nb_register')\n    def _compute_seats(self):\n        ...\n\n    @api.model\n    def _selection_type(self):\n        return []\n\n    # Constraints and onchanges\n    @api.constrains('seats_max', 'seats_available')\n    def _check_seats_limit(self):\n        ...\n\n    @api.onchange('date_begin')\n    def _onchange_date_begin(self):\n        ...\n\n    # CRUD methods (and name_search, _search, ...) overrides\n    def create(self, values):\n        ...\n\n    # Action methods\n    def action_validate(self):\n        self.ensure_one()\n        ...\n\n    # Business methods\n    def mail_user_confirm(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Customer Delivery Accounting Entries\nDESCRIPTION: Journal entries for delivering 10 products to a customer, showing how inventory valuation is credited and accounts receivable is debited.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Credit Inventory valuation $120\n2. Debit Accounts Receivable\n```\n\n----------------------------------------\n\nTITLE: Displaying New Payslip Form in Odoo 17 (reStructuredText)\nDESCRIPTION: This snippet shows how to include an image of a new payslip form in Odoo 17 using reStructuredText syntax. It specifies the image file, alignment, and alt text for a February payslip.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/new-payslip.png\n   :align: center\n   :alt: The top fields for a new payslip all filled out for a February payslip.\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure\nDESCRIPTION: The document structure configuration in reStructuredText format, including content display settings and table of contents directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:show-content:\n:hide-page-toc:\n\n============\nContributing\n============\n\n.. toctree::\n   :titlesonly:\n\n   contributing/development\n   contributing/documentation\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tip for Odoo Fiscal Positions\nDESCRIPTION: reStructuredText tip block explaining the requirement to update fiscal positions, noting that versions 11.1 and higher don't require manual updates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/switzerland.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n    Don't forget to update your fiscal positions. If you have a version\n    11.1 (or higher), there is nothing to do. Otherwise, you will also\n    have to update your fiscal positions accordingly.\n```\n\n----------------------------------------\n\nTITLE: Form: Example Header with Button and Statusbar\nDESCRIPTION: This example shows a concrete implementation of the `<header>` element, containing a button to reset the state and a statusbar field. The statusbar is configured to be clickable and displays the 'draft' and 'posted' states.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<header>\n    <button string=\"Reset\" type=\"object\" name=\"set_draft\" invisible=\"state != 'done'\"/>\n    <field name=\"state\" widget=\"statusbar\" statusbar_visible=\"draft,posted\" options=\"{'clickable': 1}\"/>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Debuggers in Odoo.sh Container\nDESCRIPTION: Commands to install Python debuggers (pudb or ipdb) for temporary use within the current Odoo.sh build using the pip package manager.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$  pip install pudb --user\n```\n\nLANGUAGE: bash\nCODE:\n```\n$  pip install ipdb --user\n```\n\n----------------------------------------\n\nTITLE: Pushing to Remote Master\nDESCRIPTION: Git command to push changes to the master branch on the remote repository with upstream tracking.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Odoo Documentation Table of Contents\nDESCRIPTION: This snippet demonstrates how to create a table of contents in Odoo documentation using the 'toctree' directive.  The ':titlesonly:' option indicates that only the titles of the linked documents should be displayed in the table of contents.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/services/timesheets/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n\n.. toctree::\n   :titlesonly:\n\n   overview/time_off\n\n```\n\n----------------------------------------\n\nTITLE: Guiding Users through Menu Selection - text\nDESCRIPTION: This snippet illustrates the use of menuselection markup to guide users through a sequence of menus, starting with the application name. It clarifies how to document menu navigation accurately within Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTo review sales performance, go to :menuselection:`Sales --> Reporting --> Dashboard`.\n```\n\n----------------------------------------\n\nTITLE: Karma-Related Rights Table in RST\nDESCRIPTION: RST markup defining the table structure for karma-related rights and permissions\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/forum.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Functionality\n     - Description\n     - Default karma requirement\n   * - :guilabel:`Ask questions`\n     - Post questions.\n     - 3\n```\n\n----------------------------------------\n\nTITLE: External References in reStructuredText\nDESCRIPTION: These lines define external references to base64 encoding and CSV format specifications using reStructuredText syntax.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/data.rst#2025-04-18_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _base64: https://tools.ietf.org/html/rfc3548.html#section-3\n.. _csv: https://en.wikipedia.org/wiki/Comma-separated_values\n```\n\n----------------------------------------\n\nTITLE: Resequencing Invoices in Odoo\nDESCRIPTION: This section describes the restrictions and functionality of resequencing invoices in Odoo. It outlines five key points about when the feature works and its limitations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#. The feature does not work when entries are previous to a lock date.\n#. The feature does not work if the sequence is inconsistent with the month of the entry.\n#. It does not work if the sequence leads to a duplicate.\n#. The order of the invoice remains unchanged.\n#. It is useful for people who use a numbering from another software and who want to continue the\n   current year without starting over from the beginning.\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Translated Text Image\nDESCRIPTION: RST image directive for displaying the translation mode interface screenshot\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/translate.rst#2025-04-18_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: translate/translated-text.png\n  :alt: Entering the translation mode\n```\n\n----------------------------------------\n\nTITLE: Odoo Form Action Types\nDESCRIPTION: Collection of different form model names for various actions like sending email, job applications, customer creation, tickets, opportunities, and tasks.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/forms.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"mail.mail\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"hr.applicant\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"res.partner\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"helpdesk.ticket\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"crm.lead\">\n```\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"project.task\">\n```\n\n----------------------------------------\n\nTITLE: Settings: Declaring a Setting\nDESCRIPTION: This XML snippet demonstrates how to declare an individual setting using the `<setting>` element within a settings view.  The `string` attribute defines the setting's name, and the nested `<field>` element represents the setting's value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n        <block title=\"TITLE\">\n            ...\n            <setting string=\"SETTING_NAME\">\n                ...\n                <field name=\"FIELD_NAME\"/>\n                ...\n            </setting>\n            ...\n        </block>\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding an Image in reStructuredText\nDESCRIPTION: This RST code inserts an image into the document, specifying its path, alignment, and alternative text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/plm/manage_changes/version_control.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: version_control/current-version.png\n   :align: center\n   :alt: Show the current version BOM in the Misc tab.\n```\n\n----------------------------------------\n\nTITLE: SCSS/CSS Formatting Example\nDESCRIPTION: Example showing proper SCSS/CSS formatting with nested selectors and variable usage.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_28\n\nLANGUAGE: scss\nCODE:\n```\n.o_foo, .o_foo_bar, .o_baz {\n   height: $o-statusbar-height;\n\n   .o_qux {\n      height: $o-statusbar-height * 0.5;\n   }\n}\n\n.o_corge {\n   background: $o-list-footer-bg-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic List View Structure in XML\nDESCRIPTION: Shows the basic structure of a list view with a tree root element. This is the foundation for defining list views in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<tree>\n    ...\n</tree>\n```\n\n----------------------------------------\n\nTITLE: Creating Purchase Order (RfQ) in Odoo\nDESCRIPTION: Explains the process of creating a new Request for Quotation (RfQ) in the Purchase app, adding a vendor and products\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_one_step.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Purchase app --> New`\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Email Communication\nDESCRIPTION: RestructuredText documentation covering email communication configuration in Odoo, including deployment options, domain setup, and third-party integrations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==============================\nCommunication in Odoo by email\n==============================\n\nCommunication in Odoo related to records such as CRM opportunities, sales orders, invoices, ...\nhave a discussion thread called **chatter**, often displayed on the right side of the record.\n\nOn the chatter, you can send direct emails or Odoo notifications to the followers of a document\n(depending on their notification preferences), log internal notes, send WhatsApp messages or SMSes,\nand schedule activities.\n```\n\n----------------------------------------\n\nTITLE: Creating Rotating Stock Report in Odoo\nDESCRIPTION: Procedure for generating a comprehensive stock rotation report using Inventory Aging report features, including grouping and time-based column expansion\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/warehouses_storage/reporting/aging.rst#2025-04-18_snippet_1\n\nLANGUAGE: steps\nCODE:\n```\n1. Navigate to Inventory app --> Reporting --> Inventory Aging\n2. Click dropdown in Search bar\n3. Choose Product under Group By\n4. Expand Date column using plus icon\n5. Select time granularity (Year/Quarter/Month/Week/Day)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: Example of specifying external Python library dependencies in requirements.txt file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nunidecode\n```\n\n----------------------------------------\n\nTITLE: Viewing Odoo.sh Directory Structure\nDESCRIPTION: Directory tree showing the filesystem layout of Odoo.sh containers, including the location of source code, data directories, logs, and Python libraries.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── home\n│    └── odoo\n│         ├── src\n│         │    ├── odoo                Odoo Community source code\n│         │    │    └── odoo-bin       Odoo server executable\n│         │    ├── enterprise          Odoo Enterprise source code\n│         │    ├── themes              Odoo Themes source code\n│         │    └── user                Your repository branch source code\n│         ├── data\n│         │    ├── filestore           database attachments, as well as the files of binary fields\n│         │    └── sessions            visitors and users sessions\n│         └── logs\n│              ├── install.log         Database installation logs\n│              ├── odoo.log            Running server logs\n│              ├── update.log          Database updates logs\n│              └── pip.log             Python packages installation logs\n└── usr\n     ├── lib\n     │    ├── python2.7\n     │         └── dist-packages       Python 2.7 standard libraries\n     │    ├── python3\n     │         └── dist-packages       Python 3 standard libraries\n     │    └── python3.5\n     │         └── dist-packages       Python 3.5 standard libraries\n     ├── local\n     │    └── lib\n     │         ├── python2.7\n     │         │    └── dist-packages  Python 2.7 third-party libraries\n     │         └── python3.5\n     │              └── dist-packages  Python 3.5 third-party libraries\n     └── usr\n          └── bin\n               ├── python2.7           Python 2.7 executable\n               └── python3.5           Python 3.5 executable\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Packaging Date\nDESCRIPTION: This regular expression identifies the packaging date. It searches for the Application Identifier (AI) `13` followed by 6 digits representing the date in YYMMDD format.  This expression is used for extracting packaging date information from a data stream.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\n\"(13)(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Computing Average Cost in AVCO Method with Mathematical Formula\nDESCRIPTION: Mathematical formula used to calculate the average cost in the AVCO method when new products arrive. The formula takes into account the previous quantity, previous average cost, incoming quantity, and purchase price to compute the new average cost.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{(Old~Qty \\times Old~Avg~Cost) + (Incoming~Qty \\times Purchase~Price)}{Final~Qty}\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Shell in Odoo.sh Container\nDESCRIPTION: Example of connecting to the PostgreSQL database shell from within an Odoo.sh container, showing the initial connection and SSL information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodoo@odoo-addons-master-1.odoo.sh:~$ psql\npsql (9.5.2, server 9.5.11)\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nodoo-addons-master-1=>\n```\n\n----------------------------------------\n\nTITLE: Displaying 'To Pay' Payslips in Odoo 17 (reStructuredText)\nDESCRIPTION: This snippet demonstrates how to include an image of the 'To Pay' payslips page in Odoo 17 using reStructuredText syntax. It specifies the image file, alignment, and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/all-pay-slips.png\n   :align: center\n   :alt: View all payslips that need to be paid on the Payslips To Pay page.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Submitting Expense Reports\nDESCRIPTION: Documentation section explaining the process of submitting expense reports for approval in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/expenses/expense_reports.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _expenses/submit:\n\nSubmit expense reports\n======================\n\nWhen an expense report is completed, the next step is to submit the report to a manager for\napproval. To view all expense reports, navigate to :menuselection:`Expenses app --> My Expenses -->\nMy Reports`. Open the specific report from the list of expense reports.\n```\n\n----------------------------------------\n\nTITLE: Image Directive with Caption\nDESCRIPTION: reStructuredText directive for including an image with alignment and alt text\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: united_states/us-l1on-accounting-method-reporting-menu.png\n   :align: center\n   :alt: Accounting method filter menu for reports, covering accrual vs. cash basis methods.\n```\n\n----------------------------------------\n\nTITLE: Updating a Module via Command Line in Odoo.sh\nDESCRIPTION: Command to update an existing module (in this case 'sale') via the Odoo command line interface with option to stop after initialization.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -u sale --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Accessing Discuss App Navigation in RST\nDESCRIPTION: Demonstrates the navigation path to access the Discuss app for chat management\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/participate.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Discuss app`\n```\n\n----------------------------------------\n\nTITLE: IoT Box Image Download URL\nDESCRIPTION: URL for downloading the latest IoT box image to be used with balenaEtcher or similar flashing tools.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/iot/iot_advanced/updating_iot.rst#2025-04-18_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://nightly.odoo.com/master/iotbox/iotbox-latest.zip\n```\n\n----------------------------------------\n\nTITLE: Adding Equipment to Work Center Tip in reStructuredText\nDESCRIPTION: This RST code snippet provides a tip on how to add new equipment to a work center directly from the work center form, using a directive for visual emphasis.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_setup.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To add new equipment to a work center directly from the work center form, click :guilabel:`Add a\n   line` under the :guilabel:`Equipment` tab. This opens an :guilabel:`Add: Maintenance Equipment`\n   pop-up window.\n\n   From the pop-up window, select the equipment that should be added to the work center, and click\n   :guilabel:`Select`.\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Constraints\nDESCRIPTION: Defines specific versions of Python packages required for the project including Pillow for image processing, mock for testing, and sphinx-lint for documentation linting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/tests/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nPillow==9.0.1\nmock==5.0.1\nsphinx-lint==0.6.7\n```\n\n----------------------------------------\n\nTITLE: External Value Subformula Example - Odoo Report Syntax\nDESCRIPTION: Example of combining editable and rounding subformulas in external value expressions for financial reports.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/reporting/customize.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\neditable;rounding=2\n```\n\n----------------------------------------\n\nTITLE: HTML Security Error Example\nDESCRIPTION: Example of a cross-origin resource sharing (CORS) security error message that appears in the browser console when CORS is not properly configured.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/cdn.rst#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nFont from origin 'http://pulltest-xxxxx.kxcdn.com' has been blocked from loading /shop:1 by Cross-Origin Resource Sharing policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://yourdatabase.odoo.com' is therefore not allowed access.\n```\n\n----------------------------------------\n\nTITLE: Python List Comprehensions Example\nDESCRIPTION: This Python snippet shows how to use list comprehensions.  List comprehensions are a feature of Python that create lists based on existing iterable. This makes the code more readable and maintainable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# not very good\ncube = []\nfor i in res:\n    cube.append((i['id'],i['name']))\n# better\ncube = [(i['id'], i['name']) for i in res]\n```\n\n----------------------------------------\n\nTITLE: Financial Reports Table Structure in RST\nDESCRIPTION: RST table structure showing the organization of financial reports in Odoo, categorized by statement, audit, partner, and management reports.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------------+\n|               Financial reports               |\n+============+==================================+\n| Statement  | Balance sheet                    |\n|            +----------------------------------+\n|            | Profit and loss                  |\n|            +----------------------------------+\n|            | Cash flow statement              |\n|            +----------------------------------+\n|            | Tax report                       |\n|            +----------------------------------+\n|            | ES sales list                    |\n+------------+----------------------------------+\n| Audit      | General ledger                   |\n|            +----------------------------------+\n|            | Trial balance                    |\n|            +----------------------------------+\n|            | Journal report                   |\n|            +----------------------------------+\n|            | Intrastat report                 |\n|            +----------------------------------+\n|            | Check register                   |\n+------------+----------------------------------+\n| Partner    | Partner ledger                   |\n|            +----------------------------------+\n|            | Aged receivable                  |\n|            +----------------------------------+\n|            | Aged payable                     |\n+------------+----------------------------------+\n| Management | Invoice analysis                 |\n|            +----------------------------------+\n|            | Unrealized currency gains/losses |\n|            +----------------------------------+\n|            | Depreciation schedule            |\n|            +----------------------------------+\n|            | Disallowed expenses              |\n|            +----------------------------------+\n|            | Budget analysis                  |\n|            +----------------------------------+\n|            | Product margins                  |\n|            +----------------------------------+\n|            | 1099 report                      |\n+------------+----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Command Line Module Update\nDESCRIPTION: Command line switch for updating modules through CLI\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-u\n```\n\n----------------------------------------\n\nTITLE: Installing System Libraries for Python Packages - Linux\nDESCRIPTION: Command to install system libraries required for Python package compilation on Debian/Ubuntu.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install python3-pip libldap2-dev libpq-dev libsasl2-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo Database on Windows\nDESCRIPTION: This command updates the Odoo database to Enterprise version on Windows. It's run from the Odoo installation path, in the server subfolder, after installing the Enterprise version.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/community_to_enterprise.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ..\\python\\python.exe odoo-bin -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Link Git with odoo-dev\nDESCRIPTION: Snippet for connecting Git with the shared forks used by internal Odoo developers, preventing direct pushes to the repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ git remote add dev git@github.com:odoo-dev/odoo.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n\n$ cd /EnterprisePath\n$ git remote add dev git@github.com:odoo-dev/enterprise.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n```\n\n----------------------------------------\n\nTITLE: Restoring Inventory Quantity with Lot/Serial Number\nDESCRIPTION: Process for reintroducing inventory quantities while assigning lot or serial numbers\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/product_management/product_tracking/reassign.rst#2025-04-18_snippet_2\n\nLANGUAGE: inventory-steps\nCODE:\n```\n1. Click 'On Hand' smart button\n2. Click 'New' button\n3. Input lot/serial number\n4. Set on-hand quantity to original value\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User - Linux\nDESCRIPTION: Commands to create a new PostgreSQL user and database on Linux systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo -u postgres createuser -d -R -S $USER\n$ createdb $USER\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Submodule Changes\nDESCRIPTION: This command commits all changes and pushes them to the specified remote repository and branch.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/submodules.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a && git push -u <remote> <branch>\n```\n\n----------------------------------------\n\nTITLE: GS1 Barcode Format Example\nDESCRIPTION: An example of a GS1 barcode with product identifier and quantity information used in Odoo inventory operations\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_usage.rst#2025-04-18_snippet_0\n\nLANGUAGE: barcode\nCODE:\n```\n0100614141000012 3101000521\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to a remote repository (origin)\nDESCRIPTION: This command pushes the current branch to the remote repository aliased as `origin`.  This is likely used by Odoo developers pushing directly to the main repository. The `-u` flag sets up tracking.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n\"$ git push -u origin {CURRENT_BRANCH}-explain-pricelists-xyz\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Ri.Ba. File Attachment in Odoo (RST)\nDESCRIPTION: This RST code snippet shows how to include an image in the documentation that displays the Ri.Ba. file attached to a batch payment in Odoo. It uses the 'image' directive to specify the file path and alternative text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/italy.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: italy/riba-attachment.png\n   :alt: The Ri.Ba. file attached\n```\n\n----------------------------------------\n\nTITLE: Creating Expense Reports in RST Documentation\nDESCRIPTION: ReStructuredText markup for documenting the expense report creation process in Odoo, including navigation paths, field descriptions, and important notes about expense report functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/expenses/expense_reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===============\nExpense reports\n===============\n\nWhen expenses are ready to submit (such as, at the end of a business trip, or once a month), an\n*expense report* needs to be created. Open the main :menuselection:`Expenses app` dashboard, which\ndisplays the :guilabel:`My Expenses` dashboard, by default. Alternatively, navigate to\n:menuselection:`Expenses app --> My Expenses --> My Expenses`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart of Accounts Table\nDESCRIPTION: RST table structure listing predefined accounts in the US chart of accounts with their types\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\n     :header-rows: 1\n     :stub-columns: 1\n\n     * - :guilabel:`Type`\n       - :guilabel:`Account Name`\n     * - :guilabel:`Current Assets`\n       - | :guilabel:`Bank Suspense Account`\n         | :guilabel:`Outstanding Receipts`\n```\n\n----------------------------------------\n\nTITLE: Defining Business Trip Form View with Activity Widgets\nDESCRIPTION: XML form view definition that includes mail follower, activity and thread widgets for displaying chatter and activity information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"business_trip_form\" model=\"ir.ui.view\">\n    <field name=\"name\">business.trip.form</field>\n    <field name=\"model\">business.trip</field>\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"Business Trip\">\n            <!-- Your usual form view goes here -->\n            <div class=\"oe_chatter\">\n                <field name=\"message_follower_ids\" widget=\"mail_followers\"/>\n                <field name=\"activity_ids\" widget=\"mail_activity\"/>\n                <field name=\"message_ids\" widget=\"mail_thread\"/>\n            </div>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: Commands to install Python dependencies using pip from requirements.txt file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Linking Git with Forks\nDESCRIPTION: Commands for linking a local Git repository to a user's fork on GitHub. It allows pushing changes to a personal fork instead of the main repository, which is essential for contribution workflows.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ git remote add dev git@github.com:<your_github_account>/odoo.git\n$ cd /EnterprisePath\n$ git remote add dev git@github.com:<your_github_account>/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Navigating Time Off Overview in Odoo\nDESCRIPTION: This snippet explains how to use the Overview feature in Odoo's Time Off app, including changing time periods, navigating the calendar, and interpreting the color-coded schedule.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/time_off.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo change the time period displayed, click on the :guilabel:`Month` button to reveal a drop-down\nmenu. Then, select either :guilabel:`Day`, :guilabel:`Week`, or :guilabel:`Year` to present the\ncalendar in that corresponding view.\n\nTo navigate forward or backward in time, in the selected increment (:guilabel:`Month`,\n:guilabel:`Week`, etc.), click the :guilabel:`← (left arrow)` or :guilabel:`→ (right arrow)` to move\neither forward or backward in that specified amount of time.\n\nFor example, if :guilabel:`Month` is selected, the arrows adjust the view by one month.\n\nTo return to a view containing the current day, click the :guilabel:`Today` button at any time.\n```\n\n----------------------------------------\n\nTITLE: Configuring Toctree for Standard Odoo Modules in ReStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for standard Odoo modules documentation. It includes references to the account and payment module documentation files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n\n    standard_modules/account\n    standard_modules/payment\n```\n\n----------------------------------------\n\nTITLE: RST Warning Block for Template Translation\nDESCRIPTION: ReStructuredText warning block cautioning users about potential risks when modifying email template translations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/companies/email_template.rst#2025-04-18_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n.. warning::\n   Like any modification in the code, if translation changes are not done correctly (for example,\n   modifications leading to bad syntax), it can break the template, and as a result, the template\n   will appear blank.\n```\n\n----------------------------------------\n\nTITLE: Renaming File Redirect Example in RST\nDESCRIPTION: Shows a redirect rule example for when a documentation file is renamed, redirecting from guidelines.rst to rst_guidelines.rst.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/MANUAL.md#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\ncontributing/documentation/guidelines.rst contributing/documentation/rst_guidelines.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Sales Order in Odoo\nDESCRIPTION: Details the workflow for creating a new sales quotation in the Sales app, including adding a customer and products\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_one_step.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Sales app --> New`\n```\n\n----------------------------------------\n\nTITLE: Date Format Example in ISO 8601\nDESCRIPTION: Example of the correct ISO 8601 date format for importing dates into Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1981-07-24\n```\n\n----------------------------------------\n\nTITLE: Theme Module Naming Convention in Odoo\nDESCRIPTION: This snippet shows the naming convention required for an Odoo theme module's directory. The directory name must be prefixed with `website_` and include only lowercase ASCII alphanumeric characters and underscores.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"website_airproof\"\n```\n\n----------------------------------------\n\nTITLE: Default Form Structure in Odoo XML\nDESCRIPTION: Basic form template for Odoo websites with standard attributes for form submission, file uploads, and success handling. Includes standard form structure with placeholder for form fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/forms.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form\n   action=\"/website/form/\" method=\"post\"\n   enctype=\"multipart/form-data\"\n   class=\"o_mark_required\"\n   data-mark=\"*\" data-pre-fill=\"true\"\n   data-success-mode=\"redirect\"\n   data-success-page=\"/contactus-thank-you\"\n   data-model_name=\"mail.mail\">\n     <div class=\"s_website_form_rows row s_col_no_bgcolor\">\n          <div class=\"form-group s_website_form_field col-12 s_website_form_dnone\" data-name=\"Field\">\n               <!-- Form fields -->\n           </div>\n     </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Warning Block in RestructuredText for Tax Sequence Documentation\nDESCRIPTION: RestructuredText warning directive explaining tax sequence behavior and configuration instructions\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n   The order in which you add the taxes on a product line has no effect on how amounts are computed.\n   If you add taxes directly on a product line, only the tax sequence determines the order in which\n   they are applied.\n\n   To reorder the sequence, go to :menuselection:`Accounting --> Configuration --> Taxes`, and drag\n   and drop the lines with the handles next to the tax names.\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Warehouse Configuration in Odoo\nDESCRIPTION: Configure a parent virtual warehouse and link child physical warehouses to enable multi-location inventory management. This process involves setting up warehouse locations and establishing hierarchical relationships between them.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses.rst#2025-04-18_snippet_0\n\nLANGUAGE: Configuration Steps\nCODE:\n```\n1. Navigate to Inventory app --> Configuration --> Warehouses\n2. Create a virtual parent warehouse\n3. Create multiple child warehouses\n4. Link child warehouses to virtual stock location\n5. Set virtual stock location type to 'View'\n```\n\n----------------------------------------\n\nTITLE: Including Sub-Bundles in Asset Bundles\nDESCRIPTION: Demonstrates the use of the 'include' directive to add a sub-bundle to another bundle. This approach helps organize assets efficiently by reusing asset definitions across multiple bundles.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/assets.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('include', 'web._primary_variables'),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Replacement for Manufacturing Order Abbreviation\nDESCRIPTION: This RST directive defines a text replacement for the abbreviation 'MO' (Manufacturing Order) to be used throughout the document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_calendar.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n```\n\n----------------------------------------\n\nTITLE: Navigating Inventory Aging Report in Odoo\nDESCRIPTION: Steps to access and explore the Inventory Aging report interface, including default views and expansion options for detailed stock analysis\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/warehouses_storage/reporting/aging.rst#2025-04-18_snippet_0\n\nLANGUAGE: menupath\nCODE:\n```\nInventory app --> Reporting --> Inventory Aging\n```\n\n----------------------------------------\n\nTITLE: Product Return Accounting Entries\nDESCRIPTION: Detailed accounting entries for returning a product to vendor, handling price differences between purchase price and current average cost.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Debit Stock Input account $10\n2. Debit Stock Input additional $2 (Price Difference)\n3. Credit Stock Valuation $12\n\nOn vendor refund receipt:\n1. Credit Stock Input account $10\n2. Debit Accounts Payable $10\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix Mail Alias for Odoo Gateway\nDESCRIPTION: Configuration snippet for Postfix mail server to route incoming emails through the Odoo mailgate script. This should be added to the /etc/aliases file to process emails for a specific address.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/email_gateway.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nemail@address: \"|/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>\"\n```\n\n----------------------------------------\n\nTITLE: Database Shell Access\nDESCRIPTION: Command to access PostgreSQL shell in Odoo.sh environment\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npsql\n```\n\n----------------------------------------\n\nTITLE: Activating Snailmail in Odoo Accounting Configuration\nDESCRIPTION: This RST snippet shows the navigation path to activate the Snailmail feature in Odoo Accounting settings. It includes the menu selection and option to make Snailmail the default sending method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/snailmail.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nGo to :menuselection:`Accounting --> Configuration --> Settings --> Customer invoices` section to\nactivate :guilabel:`Snailmail`.\n\nTo make it a by-default feature, select :guilabel:`Send by Post` in the :guilabel:`Default Sending\nOptions` section.\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure for Contribution Types\nDESCRIPTION: A reStructuredText table defining different contribution types for Odoo, including descriptions, resources, and target audiences. The table uses list-table directive with specific formatting parameters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: 20 35 25 20\n\n   * - Contribution\n     - Description\n     - Resources\n     - Target Audience\n   * - Join the community\n     - Participate in discussions on the forums, help answer questions, and assist other members of\n       the Odoo community.\n     - * `Odoo forums <https://www.odoo.com/forum>`_\n     - Anyone interested in Odoo\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Search Console Verification in RST\nDESCRIPTION: ReStructuredText code blocks defining the structure and content for Google Search Console setup documentation, including property types and verification methods.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/google_search_console.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================\nGoogle Search Console\n=====================\n\nGoogle Search Console is a free web service provided by Google that allows website owners to\nmonitor, maintain, and troubleshoot their site's presence in Google Search results. It offers\nvaluable insights into how Google views and interacts with your site, helping you optimize its\nperformance.\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Graph Widget\nDESCRIPTION: Configuration of dashboard_graph widget with line graph type.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"dashboard_graph_data\" widget=\"dashboard_graph\" graph_type=\"line\" />\n```\n\n----------------------------------------\n\nTITLE: Forum Moderation Documentation in RST\nDESCRIPTION: ReStructuredText documentation explaining forum moderation tools, validation process, and handling flagged content\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/forum.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. _forum/moderation:\\n\\nModerate a forum\\n================\\n\\nOn the forum's front end, the sidebar's :guilabel:`Moderation tools` section gathers the essential\\nmoderator functionalities.\\n\\n.. image:: forum/moderation-tools.png\\n   :alt: Forum sidebar moderation tools\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Navigation Path for Addendas\nDESCRIPTION: Shows menu navigation path for accessing addendas and disclosures configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/uruguay.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Accounting --> Configuration --> Addendas and disclosures`\n```\n\n----------------------------------------\n\nTITLE: Installing PDF417 Generator Library for Chilean E-Invoicing\nDESCRIPTION: Command to install the pdf417gen library required for generating barcodes on Chilean electronic invoices when using Odoo SH or On-Premise installations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/chile.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pdf417gen\n```\n\n----------------------------------------\n\nTITLE: Navigating to Activity Types in RST\nDESCRIPTION: RST code for navigating to the Activity Types settings in Odoo. This snippet shows the menu path to access the Activity Types configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/activities.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Settings app --> Discuss section --> Activities setting --> Activity Types`\n```\n\n----------------------------------------\n\nTITLE: Custom GeoIP Database Path Configuration\nDESCRIPTION: Example command showing how to specify a custom path for the GeoIP city database using Odoo command line options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/geo_ip.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./odoo-bin --geoip-city-db= ~/Downloads/GeoLite2-City.mmdb\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Note Directive for Work Center Selection\nDESCRIPTION: This RST note directive provides additional information about selecting work centers when creating a maintenance request.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_calendar.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   If :guilabel:`Work Center` is selected in the :guilabel:`For` field's drop-down menu, two\n   additional fields appear on the form: :guilabel:`Work Center` and :guilabel:`Block Workcenter`.\n\n   In the :guilabel:`Work Center` field, select which work center in the warehouse this maintenance\n   request applies to.\n\n   If the :guilabel:`Block Workcenter` option's checkbox is ticked, it is not possible to plan work\n   orders, or other maintenance requests, in this work center during the time that this request is\n   being performed.\n```\n\n----------------------------------------\n\nTITLE: Field Documentation in reStructuredText\nDESCRIPTION: Documentation for various field types and widgets in Odoo Studio, written in reStructuredText format. Covers selection fields, priority fields, file fields, image fields, sign fields, and relational fields like Many2One, One2Many, Many2Many and Tags.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/fields.rst#2025-04-18_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\n- :guilabel:`Badge`: displays the value inside a rounded shape, similar to a tag. The value cannot\n  be edited on the UI, but a default value can be set.\n- :guilabel:`Badges`: displays all selectable values simultaneously inside rectangular shapes,\n  organized horizontally.\n- :guilabel:`Priority`: displays star symbols instead of values, which can be used to indicate an\n  importance or satisfaction level, for example.\n- :guilabel:`Radio`: displays all selectable values at the same time as radio buttons.\n```\n\n----------------------------------------\n\nTITLE: Cross-Reference to Equipment Addition Documentation in reStructuredText\nDESCRIPTION: This RST code snippet creates a cross-reference link to a separate document about adding new equipment, using the seealso directive for emphasis.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_setup.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   :doc:`add_new_equipment`\n```\n\n----------------------------------------\n\nTITLE: Python Avoid Clone Use\nDESCRIPTION: This Python snippet illustrates the preferred methods for creating copies of dictionaries and lists in Python within Odoo development. It demonstrates using `dict(my_dict)` and `list(old_list)` instead of `.clone()` for creating new independent copies, ensuring code compatibility and avoiding potential issues with object mutability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# bad\nnew_dict = my_dict.clone()\nnew_list = old_list.clone()\n# good\nnew_dict = dict(my_dict)\nnew_list = list(old_list)\n```\n\n----------------------------------------\n\nTITLE: E-Way Bill Stock Configuration\nDESCRIPTION: Configuration steps for setting up E-Way bill generation from receipts and delivery orders in Odoo Inventory module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/india.rst#2025-04-18_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n1. Install E-Way bill Stock module\n2. Complete E-Way bill setup\n3. Navigate to Inventory > Operations > Deliveries/Receipts\n4. Click Create E-waybill/Challan\n5. Click Generate e-Waybill or Use as Challan\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Template Structure\nDESCRIPTION: CSV template structure for importing Authorize.Net statements into Odoo, including columns for date, label, amount, and transaction details\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/authorize.rst#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nDate,Label,Amount,...\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Reconciliation Bypass Method\nDESCRIPTION: Shows the single journal entry created when recording a check payment using the Reconciliation Bypass method. The entry moves funds directly from Account Receivable to Bank.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/checks.rst#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------------+-------------------+----------+----------+\n| Account              | Statement Match   | Debit    | Credit   |\n+======================+===================+==========+==========+\n| Account Receivable   | X                 |          | 100.00   |\n+----------------------+-------------------+----------+----------+\n| Bank                 |                   | 100.00   |          |\n+----------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: Installing Optional XLS Export Dependency on Debian/Ubuntu\nDESCRIPTION: Command to install the xlwt Python package on Debian Buster or Ubuntu 18.04 for XLS export functionality in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo pip3 install xlwt\n```\n\n----------------------------------------\n\nTITLE: Configuring EU Distance Selling RST Directive\nDESCRIPTION: RestructuredText directive for configuring EU distance selling feature in Odoo's accounting module. Includes navigation paths and settings instructions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes/eu_distance_selling.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. menuselection:`Accounting --> Configuration --> Settings --> Taxes`\n```\n\n----------------------------------------\n\nTITLE: Completing a Proper SQL Transaction with WHERE Clause\nDESCRIPTION: Example of a well-formed SQL transaction that updates a specific user's password using a proper WHERE clause and concludes with a COMMIT.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nodoo-addons-master-1=> BEGIN;\nBEGIN\nodoo-addons-master-1=> UPDATE res_users SET password = '***' WHERE id = 1;\nUPDATE 1\nodoo-addons-master-1=> COMMIT;\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Syntax Highlighting\nDESCRIPTION: Demonstrates how to use code-tab markup to create tabs containing code blocks with syntax highlighting for different programming languages (C++, Python, and JavaScript).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. code-tab:: c++ Hello C++\n\n      #include <iostream>\n\n      int main() {\n          std::cout << \"Hello World\";\n          return 0;\n      }\n\n   .. code-tab:: python Hello Python\n\n      print(\"Hello World\")\n\n   .. code-tab:: javascript Hello JavaScript\n\n      console.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Mapping RST Directive\nDESCRIPTION: RestructuredText directive for refreshing tax mapping in EU distance selling configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes/eu_distance_selling.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. menuselection:`Accounting/Invoicing --> Settings --> Taxes --> EU Intra-community Distance Selling`\n```\n\n----------------------------------------\n\nTITLE: Forum Configuration Sample in RST\nDESCRIPTION: RST markup showing forum configuration options and karma settings table structure\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/forum.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Interaction\n     - Description\n     - Default karma gain\n   * - :guilabel:`Asking a question`\n     - You post a question.\n     - 2\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Using Git\nDESCRIPTION: This console command clones the Odoo petstore example module from GitHub into the current directory. It assumes Git is installed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone http://github.com/odoo/petstore\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity Types Image in RST\nDESCRIPTION: RST code for inserting an image of the Activity Types button in the Settings application. This snippet includes alignment and alt text for accessibility.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/activities.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: activities/settings-activities-types.png\n   :align: center\n   :alt: Activity Types button in the Settings application under the Discuss section.\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Invoice View\nDESCRIPTION: Displays an image showing the email with invoice view link in Customer Portal.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: online/view-invoice.png\n   :alt: Email with a link to view the invoice online on the Customer Portal.\n```\n\n----------------------------------------\n\nTITLE: Renderer Template in Odoo - XML\nDESCRIPTION: This XML snippet defines the template for the BeautifulRenderer. It includes elements for rendering props and listing records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/javascript_view.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"my_module.Renderer\">\n        <t t-esc=\"props.propsYouWant\"/>\n        <t t-foreach=\"props.records\" t-as=\"record\" t-key=\"record.id\">\n            // Show records\n        </t>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Live Chat Reports Documentation in RST\nDESCRIPTION: RST documentation content detailing Live Chat reporting features including available reports, accessing reports, viewing options, and how to save/share report filters.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=======\nReports\n=======\n\nOdoo *Live Chat* includes several reports that allow for the monitoring of operator performance and\nthe identification of trends in customer conversations.\n\nAvailable reports\n=================\n\nThe following reports are included in the *Live Chat* app:\n\n- :ref:`Sessions History <livechat/sessions-history>`\n- :ref:`Session Statistics <livechat/session-statistics>`\n- :ref:`Operator Analysis <livechat/operator-analysis>`\n```\n\n----------------------------------------\n\nTITLE: Setting Search Defaults in Python\nDESCRIPTION: Example of configuring search defaults through an action's context. It demonstrates how to search for a specific value in a field and enable a filter by default.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n{\n    'search_default_foo': 'acro',\n    'search_default_bar': 1\n}\n```\n\n----------------------------------------\n\nTITLE: RST Note Block for Document Sharing Domain Behavior\nDESCRIPTION: ReStructuredText note block explaining the domain behavior when sharing documents through the Documents application in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/companies/email_template.rst#2025-04-18_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. note::\n   A document shared using the *Documents* application will **always** use the `web.base.url` key,\n   as the document shared is not associated with any particular website. This means that the URL\n   will always be the same (the `web.base.url` key value), no matter what company it's shared from.\n   This is a known limitation.\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies Configuration\nDESCRIPTION: Lists required Python packages and their versions for documentation generation. Centers around Sphinx documentation generator and its extensions, with specific version constraints for compatibility.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocutils==0.17.0\nlibsass==0.20.1\npygments~=2.6.1\npygments-csv-lexer~=0.1\nsphinx==4.3.2\nsphinxcontrib-applehelp==1.0.4\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.1\nsphinxcontrib-serializinghtml==1.1.5\nsphinxcontrib-qthelp==1.0.3\nsphinx-tabs==3.4.5  # Compatibility with docutils==0.17.0\n```\n\n----------------------------------------\n\nTITLE: Python Code Block Example\nDESCRIPTION: Demonstrates how to create a code block with Python syntax highlighting\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    print(\"Hello world!\")\n```\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: python\n\n   def main():\n       print(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Odoo Database Filter Example\nDESCRIPTION: This bash command demonstrates how to restrict access to databases whose names start with '11' using the `--db-filter` option. The regular expression `^11.*$` ensures that only databases matching this pattern are accessible.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --db-filter ^11.*$\n```\n\n----------------------------------------\n\nTITLE: Breaking Lines Without Creating New Paragraphs in RST\nDESCRIPTION: Demonstrates how to use the vertical bar (|) symbol to break lines within a paragraph without creating a new paragraph in RST.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n| A first long line that you break in two\n  -> here <- is rendered as a single line.\n| A second line that follows a line break.\n```\n\n----------------------------------------\n\nTITLE: Applying a Standard Gradient to a Section in Odoo\nDESCRIPTION: This XML snippet demonstrates how to apply a linear gradient as a background image to a section using inline styles within the `style` attribute. The gradient is defined using the `linear-gradient` CSS function with specified colors and percentages.  The `!important` flag ensures the style is applied even with other conflicting styles.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/gradients.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"s_text_image\" data-snippet=\"s_text_image\" data-name=\"Text - Image\" style=\"background-image: linear-gradient(135deg, rgb(255, 204, 51) 0%, rgb(226, 51, 255) 100%) !important;\">\n        <!-- Content -->\n    </section>\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Finance Documentation\nDESCRIPTION: ReStructuredText markup defining the navigation structure for finance-related documentation sections including accounting, expenses, payment providers and fiscal localizations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n    finance/accounting\n    finance/expenses\n    finance/payment_providers\n    finance/fiscal_localizations\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for AccountTaxRepartitionLine Model\nDESCRIPTION: Sphinx/RST documentation structure defining the AccountTaxRepartitionLine model reference. It implements the automodel directive to document the model along with its fields using autofield directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_tax_repartition.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _reference/account_tax_repartition:\n\n================\nTax Repartitions\n================\n\n.. automodel:: odoo.addons.account.models.account_tax.AccountTaxRepartitionLine\n    :main:\n\n    .. autofield:: factor_percent\n    .. autofield:: repartition_type\n    .. autofield:: document_type\n    .. autofield:: account_id\n    .. autofield:: tax_id\n    .. autofield:: tag_ids\n    .. autofield:: use_in_tax_closing\n```\n\n----------------------------------------\n\nTITLE: Using Regular Images in XML Templates\nDESCRIPTION: This code illustrates how to reference regular images in XML templates within Odoo. It specifies the source of the image using the 'img' tag, which utilizes the image's ID provided during the declaration phase. The expected output is an HTML <img> element that displays the image on the website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<img src=\"/web/image/website_airproof.img_about_01\" alt=\"\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Tabs in RST\nDESCRIPTION: Shows how to create synchronized group tabs that remember the last selection, with examples in multiple programming languages (C++, Python, and Java).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. group-tab:: C++\n\n      C++\n\n   .. group-tab:: Python\n\n      Python\n\n   .. group-tab:: Java\n\n      Java\n\n.. tabs::\n\n   .. group-tab:: C++\n\n      .. code-block:: c++\n\n         int main(const int argc, const char **argv) {\n             return 0;\n         }\n\n   .. group-tab:: Python\n\n      .. code-block:: python\n\n         def main():\n             return\n\n   .. group-tab:: Java\n\n      .. code-block:: java\n\n         class Main {\n             public static void main(String[] args) {}\n         }\n```\n\n----------------------------------------\n\nTITLE: Legacy QWeb Template Inheritance with t-extend (Deprecated)\nDESCRIPTION: Shows the deprecated t-extend and t-jquery approach for QWeb template inheritance. This method allows various operations like append, prepend, replace, etc., on selected nodes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/qweb.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<t t-extend=\"base.template\">\n    <t t-jquery=\"ul\" t-operation=\"append\">\n        <li>new element</li>\n    </t>\n</t>\n```\n\n----------------------------------------\n\nTITLE: File Structure and Navigation\nDESCRIPTION: ReStructuredText file structure defining the documentation layout and navigation for bank synchronization features in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/bank/bank_synchronization.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   bank_synchronization/saltedge\n   bank_synchronization/ponto\n   bank_synchronization/enablebanking\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Blocks with t-if/t-else\nDESCRIPTION: Shows how to implement conditional rendering using t-if and t-else directives to show/hide content based on conditions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/pdf_reports.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- table root element -->\n<table class=\"table\" t-if=\"len(doc.tag_ids) > 0\">\n    <!-- thead = table header, the row with column titles -->\n    <thead>\n        <!-- table row element -->\n        <tr>\n            <!-- table header element -->\n            <th>ID</th>\n            <th>Name</th>\n        </tr>\n    </thead>\n    <!-- table body, the main content -->\n    <tbody>\n        <!-- we create a row for each subrecord with t-foreach -->\n        <tr t-foreach=\"doc.tag_ids\" t-as=\"tag\">\n            <!-- for each line, we output the name and price as table cells -->\n            <td t-out=\"tag.id\"/>\n            <td t-out=\"tag.name\"/>\n        </tr>\n    </tbody>\n</table>\n<div class=\"text-muted\" t-else=\"\">No tag present on this document.</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Tabs Structure in RST\nDESCRIPTION: Shows how to create tabs in RST documentation for different Odoo deployment types (Online, Odoo.sh, and On-premise).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. tab:: Odoo Online\n\n      Content dedicated to Odoo Online users.\n\n   .. tab:: Odoo.sh\n\n      Alternative for Odoo.sh users.\n\n   .. tab:: On-premise\n\n      Third version for On-premise users.\n```\n\n----------------------------------------\n\nTITLE: Canned Response Shortcut Format\nDESCRIPTION: Format for using canned responses in live chat, where shortcuts beginning with ':' are replaced with predefined responses.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/responses.rst#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n:shortcut\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Dependencies Warning Image\nDESCRIPTION: RST image directive showing the dependencies warning screenshot during uninstallation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/apps_modules.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: apps_modules/uninstall_deps.png\n   :align: center\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image of MO Card in RST Documentation\nDESCRIPTION: This RST code inserts an image of a Manufacturing Order information card from the 'All' page of the Shop Floor module, including alignment and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/shop_floor/shop_floor_overview.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: shop_floor_overview/mo-card.png\n   :align: center\n   :alt: An information card for an MO on the \"All\" page of the Shop Floor module.\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tabs Structure in RST\nDESCRIPTION: Demonstrates how to nest tabs inside one another, using celestial objects (stars and moons) as examples with multiple levels of nesting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. tab:: Stars\n\n      .. tabs::\n\n         .. tab:: The Sun\n\n            The closest star to us.\n\n         .. tab:: Proxima Centauri\n\n            The second closest star to us.\n\n         .. tab:: Polaris\n\n            The North Star.\n\n   .. tab:: Moons\n\n      .. tabs::\n\n         .. tab:: The Moon\n\n            Orbits the Earth.\n\n         .. tab:: Titan\n\n            Orbits Jupiter.\n```\n\n----------------------------------------\n\nTITLE: Displaying Other Info Tab in Odoo 17 Payslip (reStructuredText)\nDESCRIPTION: This snippet demonstrates how to include an image of the Other Info tab in an Odoo 17 payslip form using reStructuredText syntax. It specifies the image file, alignment, and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/other-info-tab.png\n   :align: center\n   :alt: The fields filled out in the other info tab.\n```\n\n----------------------------------------\n\nTITLE: Menu Selection Path in RST\nDESCRIPTION: Navigation path reference for accessing Odoo technical settings\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/create.rst#2025-04-18_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n:menuselection:`Settings --> Technical --> Outgoing Mail Servers`\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo.sh Documentation Structure in RST\nDESCRIPTION: Sets up the documentation structure using reStructuredText format with a table of contents tree directive including overview, getting started, and advanced sections. The :nosearch: directive indicates this page should be excluded from search results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=======\nOdoo.sh\n=======\n\n\n.. toctree::\n\n    odoo_sh/overview\n    odoo_sh/getting_started\n    odoo_sh/advanced\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes\nDESCRIPTION: Git command to commit all current changes in the working directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Content Tabs in RST\nDESCRIPTION: Shows how to create multiple content tabs with different sections\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. tab:: Odoo Online\n\n      Content dedicated to Odoo Online users.\n\n   .. tab:: Odoo.sh\n\n      Alternative for Odoo.sh users.\n\n   .. tab:: On-premise\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Section Headers\nDESCRIPTION: Main section headers defining the document structure for the Odoo Enterprise Agreement with version notes and document navigation markers.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/terms/enterprise.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _enterprise_agreement:\n\n======================================\nOdoo Enterprise Subscription Agreement\n======================================\n\n.. only:: html\n\n   `Download PDF <https://www.odoo.com/documentation/{CURRENT_BRANCH}/odoo_enterprise_agreement.pdf>`_\n\n.. note:: Version 10a - 2022-10-27\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Directive\nDESCRIPTION: Defines the documentation structure with a toctree directive linking to the online payment portal patch installation guide.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   online/install_portal_patch\n```\n\n----------------------------------------\n\nTITLE: Generating Numbered Lists in Documentation - text\nDESCRIPTION: This snippet highlights how to create numbered lists using reStructuredText. It describes the automatic numbering feature to make documentation clear and easy to follow.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n#. This is a numbered list.\n#. Numbering is automatic.\n```\n\n----------------------------------------\n\nTITLE: Odoo.sh Addons Path Log Example\nDESCRIPTION: Example of log output showing the addons paths used by an Odoo.sh server instance, including paths to user code, enterprise modules, themes, and core addons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n2018-02-19 10:51:39,267 4 INFO ? odoo: Odoo version {BRANCH}\n2018-02-19 10:51:39,268 4 INFO ? odoo: Using configuration file at /home/odoo/.config/odoo/odoo.conf\n2018-02-19 10:51:39,268 4 INFO ? odoo: addons paths: ['/home/odoo/data/addons/{BRANCH}', '/home/odoo/src/user', '/home/odoo/src/enterprise', '/home/odoo/src/themes', '/home/odoo/src/odoo/addons', '/home/odoo/src/odoo/odoo/addons']\n```\n\n----------------------------------------\n\nTITLE: Configuring CNAME Record Example\nDESCRIPTION: Example markup showing DNS record configuration for redirecting a domain to Odoo's hosting service using a CNAME record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/domain_names.rst#2025-04-18_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nyourdomain.com -> www.yourdomain.com (301 redirect)\nwww.yourdomain.com -> mycompany.odoo.com (CNAME record)\n```\n\n----------------------------------------\n\nTITLE: Defining AccountFiscalPosition Model Structure in RST\nDESCRIPTION: This RST code snippet defines the structure of the AccountFiscalPosition model documentation. It includes automodel and autofield directives to automatically generate documentation for the model and its fields.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_fiscal_position.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodel:: odoo.addons.account.models.partner.AccountFiscalPosition\n    :main:\n\n    .. autofield:: sequence\n    .. autofield:: name\n    .. autofield:: account_ids\n    .. autofield:: tax_ids\n    .. autofield:: note\n    .. autofield:: auto_apply\n    .. autofield:: vat_required\n    .. autofield:: country_id\n    .. autofield:: country_group_id\n    .. autofield:: state_ids\n    .. autofield:: zip_from\n    .. autofield:: zip_to\n```\n\n----------------------------------------\n\nTITLE: Accessing CRM-specific Activity Types in RST\nDESCRIPTION: RST code showing the menu path to access activity types specific to the CRM application in Odoo. This is presented as a tip for users.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/activities.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   Individual applications have a list of *Activity Types* dedicated to that application. For\n   example, to view and edit the activities available for the *CRM* application, go to\n   :menuselection:`CRM app --> Configuration --> Activity Types`.\n```\n\n----------------------------------------\n\nTITLE: Creating External Hyperlinks - text\nDESCRIPTION: This snippet explains how to create external hyperlinks using the specified format. It emphasizes proper labelling to enhance documentation clarity and navigation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nFor instance, `this is an external hyperlink to Odoo's website <https://www.odoo.com>`_.\n```\n\n----------------------------------------\n\nTITLE: List Table Configuration in RST\nDESCRIPTION: RST markup for creating a structured table showing Italian localization modules with names, technical identifiers, and descriptions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/italy.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name\n     - Technical name\n     - Description\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Serial Number\nDESCRIPTION: This regular expression is used to identify the serial number. It starts with the Application Identifier (AI) `21` followed by up to 20 alphanumeric characters. The allowed characters are `[!\"%-/0-9:-?A-Z_a-z]`.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n\"(21)([!\\\"%-/0-9:-?A-Z_a-z]{0,20})\"\n```\n\n----------------------------------------\n\nTITLE: Image Insertion in RST\nDESCRIPTION: Shows how to insert an image with alternative text using the image markup\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n.. image:: rst_guidelines/create-invoice.png\n   :alt: Create an invoice.\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Directive in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a table of contents for the documentation. The `:titlesonly:` option indicates that only the titles of the documents should be displayed in the table of contents.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/marketing/marketing_automation/campaign_templates.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   campaign_templates/double_optin\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Payment Providers\nDESCRIPTION: Includes an image showing payment provider selection interface after clicking Pay Now button.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: online/online-payment-providers.png\n   :align: center\n   :alt: Payment provider choice after having clicked on \"Pay Now\"\n```\n\n----------------------------------------\n\nTITLE: Using Icon Markup for Interface Elements - text\nDESCRIPTION: This snippet shows how to add icon class names using the icon markup in Odoo documentation. Icons are important for visually representing specific interface features.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe graph view is represented by the :icon:`fa-area-chart` :guilabel:`(area chart)` icon.\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Navigation Path\nDESCRIPTION: Shows menu navigation path for accessing document types configuration in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/uruguay.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Accounting --> Configuration --> Document Types`\n```\n\n----------------------------------------\n\nTITLE: Navigating to Product Form in Odoo Inventory\nDESCRIPTION: Steps to access product configuration for changing tracking settings in the Odoo Inventory application\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/product_management/product_tracking/reassign.rst#2025-04-18_snippet_0\n\nLANGUAGE: menu-path\nCODE:\n```\nInventory app --> Products --> Products\n```\n\n----------------------------------------\n\nTITLE: Using a Service in Odoo Component\nDESCRIPTION: This snippet demonstrates how to use a service within an Odoo component, specifically utilizing the 'rpc' service to make server requests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/services.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useService } from \"@web/core/utils/hooks\";\n\nclass MyComponent extends Component {\n  setup() {\n    const rpc = useService(\"rpc\");\n\n    onWillStart(async () => {\n      this.someValue = await rpc(...);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product to the MPS in Odoo Manufacturing\nDESCRIPTION: This RST snippet describes the process of adding a product to the Master Production Schedule in Odoo's Manufacturing app. It includes important notes on proper product configuration for replenishment through MPS.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/workflows/use_mps.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nTo use |MPS| to manage the replenishment of a product, navigate to :menuselection:`Manufacturing app\n--> Planning --> Master Production Schedule`. At the top of the |MPS| page, click :guilabel:`Add a\nProduct` to open the :guilabel:`Add a Product` pop-up window.\n\n.. important::\n   Products **must** be properly configured to be replenished through the |MPS|.\n\n   In the case of manufactured products, the *Manufacture* route must be selected in the *Routes*\n   section of the *Inventory* tab, on the product's form.\n\n   In the case of products that are purchased, the *Buy* route must be selected in the *Routes*\n   section of the *Inventory* tab, on the product's form. Additionally, a vendor and the price they\n   sell the product for must also be specified on the *Purchase* tab.\n\nOn the pop-up window, select the product to add in the :guilabel:`Product` drop-down menu. If the\nproduct is replenished through manufacturing, select the product's |BoM| in the :guilabel:`Bill of\nMaterials` field.\n\n.. note::\n   Selecting a BoM when adding a product to the |MPS| also adds any components listed on the BoM. If\n```\n\n----------------------------------------\n\nTITLE: RST Menu Navigation Path\nDESCRIPTION: ReStructuredText markup showing the menu navigation path for accessing eLearning courses in Odoo\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/elearning.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`eLearning --> Courses --> Courses`\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Payment Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax. It includes links to various payment-related topics in the Odoo 17 documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/payment.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:hide-page-toc:\n\n=======\nPayment\n=======\n\n.. toctree::\n   :titlesonly:\n\n   payment/payment_method\n   payment/payment_provider\n   payment/payment_token\n   payment/payment_transaction\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Branch\nDESCRIPTION: Git command to delete a branch from the remote repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin :master\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivot View in Odoo Studio\nDESCRIPTION: Documentation for Pivot view setup including data exploration and analysis features. Explains configuration of data grouping, measurements and record access options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/studio/views.rst#2025-04-18_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe :guilabel:`Pivot` :icon:`oi-view-pivot` view is used to explore and analyze the data contained\nin records in an interactive manner. It is especially useful to aggregate numeric data, create\ncategories, and drill down the data by expanding and collapsing different levels of data.\n\n- To access all records whose data is aggregated under a cell, tick :guilabel:`Access records from\n  cell`.\n- To divide the data into different categories, select field(s) under :guilabel:`Column grouping`,\n  :guilabel:`Row grouping - First level`, or :guilabel:`Row grouping - Second level`.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive for Odoo Database Management Documentation\nDESCRIPTION: This ReStructuredText snippet sets up the structure and metadata for the Odoo database management documentation page. It includes directives for hiding search, showing content and table of contents, and hiding the page-level table of contents.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n\n===================\nDatabase management\n===================\n\nThese guides provide instructions on how to install, maintain and upgrade Odoo databases.\n```\n\n----------------------------------------\n\nTITLE: Merge Contacts ReStructuredText Documentation\nDESCRIPTION: ReStructuredText markup for documenting the contact merging process in Odoo, including warnings, navigation instructions, and deduplication options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/contacts/merge.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==============\nMerge contacts\n==============\n\nOdoo's *Contacts* application allows user's to merge duplicate contacts, without losing any\ninformation in the process. This keeps the database organized, and prevents contacts from being\ncontacted by more than one salesperson.\n\n.. _contacts/merge-duplicate:\n\nMerge duplicate contacts\n========================\n\n.. danger::\n   Merging is an irreversible action. Do **not** merge contacts unless absolutely certain they\n   should be combined.\n\nNavigate to the :menuselection:`Contacts app`, and select the :icon:`oi-view-list`\n:guilabel:`(list)` icon. Select two or more duplicate contacts from the list, and tick the checkbox\n(on the far-left) for the contacts that should be merged. Then, click the :icon:`fa-cog`\n:guilabel:`Actions` icon, and select :guilabel:`Merge` from the resulting drop-down menu.\n\n.. image:: merge/merge-menu.png\n   :align: center\n   :alt: The merge contacts option in the Contacts application.\n\nThis opens the :guilabel:`Merge` pop-up window. From here, review the details of the contacts before\nconfirming they should be merged. If any contacts in the list should **not** be merged, click the\n:icon:`fa-times` :guilabel:`(delete)` icon at the far right of the contact.\n\n.. tip::\n   Click the individual contact to open the record for that contact, and view additional\n   information.\n\n.. image:: merge/merge-window.png\n   :align: center\n   :alt: The merge pop-up window in the Contacts application.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Version Change Notes\nDESCRIPTION: Documentation of version changes and updates to the agreement using ReStructuredText comment syntax\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/terms/enterprise.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. v6: add \"App\" definition + update pricing per-App\n.. v7: remove possibility of price change at renewal after prior notice\n.. 7.1: specify that 7% renewal increase applies to all charges, not just per-User.\n.. v8.0: adapt for \"Self-Hosting\" + \"Data Protection\" for GDPR\n.. v8a: minor wording changes, tuned User definition, + copyright guarantee\n.. v9.0: add \"Working with an Odoo Partner\" + Maintenance of [Covered] Extra Modules + simplifications\n.. v9a: clarification wrt second-level assistance for standard features\n.. v9b: clarification that maintenance is opt-out + name of `cloc` command\n.. v9c: minor wording changes, tuned User definition, + copyright guarantee\n.. v10: fall 2022 pricing change - removal of \"per app\" notions\n.. v10a: clarified wording for Section 5.1 \"(at that time)\"\n```\n\n----------------------------------------\n\nTITLE: Bypassing ORM - Direct DB Cursor Usage in Odoo\nDESCRIPTION: This code shows the wrong way of doing things by directly using the database cursor to query data, bypassing the Odoo ORM. This approach is discouraged because it circumvents ORM features such as automated translations, field invalidation, and access rights, potentially leading to insecure code and making it harder to read and maintain.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# very very wrong\nself.env.cr.execute('SELECT id FROM auction_lots WHERE auction_id in (' + ','.join(map(str, ids))+') AND state=%s AND obj_price > 0', ('draft',))\nauction_lots_ids = [x[0] for x in self.env.cr.fetchall()]\n\n# no injection, but still wrong\nself.env.cr.execute('SELECT id FROM auction_lots WHERE auction_id in %s '\\\\\n           'AND state=%s AND obj_price > 0', (tuple(ids), 'draft',))\nauction_lots_ids = [x[0] for x in self.env.cr.fetchall()]\n\n# better\nauction_lots_ids = self.search([('auction_id','in',ids), ('state','=','draft'), ('obj_price','>',0)])\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Animation in Odoo XML\nDESCRIPTION: Demonstrates how to add hover animation effects to an image element. Includes configuration for overlay effects and hover animation type.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/animations.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<img\n    src=\"...\" alt=\"...\"\n    class=\"img img-fluid o_we_custom_image o_animate_on_hover\"\n    data-hover-effect=\"overlay\"\n    data-hover-effect-color=\"rgba(0, 0, 0, 0.25)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation\nDESCRIPTION: Detailed technical documentation written in RestructuredText format covering Odoo's email server configuration, including default settings, custom domain setup, and multiple server configurations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/email_servers_outbound.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n========================\nManage outbound messages\n========================\n\n.. _email-outbound-default:\n\nSending emails with Odoo's default configuration\n================================================\n\nOn **Odoo Online** and **Odoo.sh**, sending and receiving emails works out of the box. No\nconfiguration is required.\n\nWhen a database is created, the subdomain `company-name.odoo.com` is used to send and receive\nemails. The deliverability is optimized for this subdomain as it uses Odoo's DNS configuration.\n```\n\n----------------------------------------\n\nTITLE: Example Block in RestructuredText for Belgian Tax Configuration\nDESCRIPTION: RestructuredText example directive showing Belgian environmental tax calculation setup\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. example::\n   - In Belgium, the formula to compute an environmental tax is: `(product price + environmental\n     tax) x sales tax`. Therefore, our environmental tax has to come *before* the sales tax in the\n     computation sequence.\n   - In our case, we created a 5% environmental tax (Ecotax) and put it *before* the Belgian base\n     tax of 21%.\n```\n\n----------------------------------------\n\nTITLE: Adding Video Background in Odoo\nDESCRIPTION: This code snippet illustrates how to add a video as a background element in Odoo using an XML section tag. It specifies a video source URL in a data attribute, allowing for seamless integration of video backgrounds in website sections.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/media.rst#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"o_background_video\" data-bg-video-src=\"...\"></section>\n```\n\n----------------------------------------\n\nTITLE: Installing rtlcss on Windows\nDESCRIPTION: Command to install rtlcss globally using npm on Windows systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_13\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Kanban View with Conditional Rendering using QWeb\nDESCRIPTION: This snippet enhances the Kanban view by conditionally displaying content based on the record's state. The `t-if` directive checks if the `state` field's raw value is 'new'. If true, a `<div>` element containing the text \"This is new!\" is rendered within the kanban card.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/14_qwebintro.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n    <field name=\"state\"/>\n    <templates>\n        <t t-name=\"kanban-box\">\n            <div class=\"oe_kanban_global_click\">\n                <field name=\"name\"/>\n                <div t-if=\"record.state.raw_value == 'new'\">\n                    This is new!\n                </div>\n            </div>\n        </t>\n    </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: RST Cross-Reference Link\nDESCRIPTION: A reStructuredText directive for linking to related documentation about chart of accounts\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/vendor_bills/assets.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n  * :doc:`../get_started/chart_of_accounts`\n```\n\n----------------------------------------\n\nTITLE: Calculating AVCO When Delivering Products\nDESCRIPTION: Mathematical calculation showing how the average cost remains unchanged when delivering 10 tables out of 12, despite the reduction in inventory value. This demonstrates that outbound movements don't affect the unit AVCO value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-18_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{12 \\times $12 + (-10) \\times $12}{12-10} = \\frac{24}{2} = $12\n```\n\n----------------------------------------\n\nTITLE: Indicating a File Path using file Markup - text\nDESCRIPTION: This code snippet defines how to indicate file paths or names using the file markup. Proper usage allows users to easily locate files referenced in the documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCreate redirections using the :file:`redirects.txt` file found at the root of the repository.\n```\n\n----------------------------------------\n\nTITLE: Button with Cancel Special Attribute\nDESCRIPTION: Example of a button with special cancel attribute for dialog forms.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<button special=\"cancel\" icon=\"fa-trash\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Worked Days Tab in Odoo 17 Payslip (reStructuredText)\nDESCRIPTION: This snippet demonstrates how to include an image of the Worked Days tab in an Odoo 17 payslip form using reStructuredText syntax. It specifies the image file, alignment, and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/worked-days-tab.png\n   :align: center\n   :alt: The fields filled out in the worked days and inputs tab.\n```\n\n----------------------------------------\n\nTITLE: Sales Order Configuration for Multi-Warehouse Inventory\nDESCRIPTION: Demonstrate how to create a sales order using a virtual warehouse, enabling stock fulfillment from multiple physical warehouse locations. Requires proper warehouse and location configuration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses.rst#2025-04-18_snippet_1\n\nLANGUAGE: Sales Order Steps\nCODE:\n```\n1. Create sales quotation in Sales app\n2. Add products from multiple warehouses\n3. Set warehouse to virtual parent warehouse in 'Other Info' tab\n4. Confirm sales order\n5. Verify delivery details and source locations\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Toctree Directive for Odoo Documentation\nDESCRIPTION: This snippet sets up a table of contents tree (toctree) for various Odoo administration and management topics, using the 'titlesonly' option to display only the top-level headings.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration.rst#2025-04-18_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n\n    administration/hosting\n    administration/odoo_online\n    administration/odoo_sh\n    administration/on_premise\n    administration/upgrade\n    administration/neutralized_database\n    administration/supported_versions\n    administration/mobile\n    administration/odoo_accounts\n```\n\n----------------------------------------\n\nTITLE: Creating External Hyperlink in reStructuredText\nDESCRIPTION: This snippet shows how to create an external hyperlink in reStructuredText. It's used to provide links to Odoo account pages and support tickets.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n`Odoo Account <https://accounts.odoo.com/my/subscription>`_\n```\n\n----------------------------------------\n\nTITLE: psql example: counting records in a table\nDESCRIPTION: This text snippet demonstrates how to use `psql` to connect to a database (rd-demo) and count the number of records in the `estate_property` table. It shows the expected output when the table is empty.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ psql -d rd-demo\nrd-demo=# SELECT COUNT(*) FROM estate_property;\n count\n-------\n    0\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: RST Navigation and References\nDESCRIPTION: ReStructuredText markup demonstrating internal references and navigation links for the documentation\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/elearning.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`Content <elearning/content>`, :ref:`Description <elearning/description>`,\n:ref:`Options <elearning/options>`, and :ref:`Karma <elearning/karma>`\n```\n\n----------------------------------------\n\nTITLE: Odoo Enterprise License v1.0 (French)\nDESCRIPTION: This snippet is a French translation of the Odoo Enterprise Edition License v1.0. It defines the terms and conditions under which the software can be used, modified, and distributed. It highlights permitted uses under a valid Odoo Enterprise Subscription or Partnership, while prohibiting unauthorized distribution or sublicensing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/terms/i18n/enterprise_fr.rst#2025-04-18_snippet_0\n\nLANGUAGE: French\nCODE:\n```\n\"Odoo Enterprise Edition License v1.0\n\nCe logiciel et les fichiers associés (le \\\"Logiciel\\\") ne peuvent être utilisés\n(c'est-à-dire exécutés, modifiés, ou exécutés avec des modifications) qu'avec\nun contrat Odoo Enterprise Subscription en ordre de validité, et pour le nombre\nd'utilisateurs prévus dans ce contrat.\n\nUn contrat de Partnariat avec Odoo S.A. en ordre de validité donne les mêmes\npermissions que ci-dessus, mais uniquement pour un usage restreint à un\nenvironnement de test ou de développement.\n\nVous êtes autorisé à développer des modules Odoo basés sur le Logiciel et\nà les distribuer sous la license de votre choix, pour autant que cette licence\nsoit compatible avec les conditions de la licence Odoo Enterprise Edition Licence\n(Par exemple: LGPL, MIT ou d'autres licenses propriétaires similaires à celle-ci).\n\nVous êtes autorisé à utiliser des modules Odoo publiés sous n'importe quelle\nlicence, pour autant que leur licence soit compatible avec les conditions\nde la licence Odoo Enterprise Edition License (Notamment tous les\nmodules publiés sur l'Odoo Apps Store sur odoo.com/apps).\n\nIl est interdit de publier, distribuer, accorder des sous-licences, ou vendre\ntout copie du Logiciel ou toute copie modifiée du Logiciel.\n\nToute copie du Logiciel ou d'une partie substantielle de celui-ci doit\ninclure l'avis de droit d'auteur original ainsi que le texte de la présente licence.\n\nLE LOGICIEL EST FOURNI \\\"EN L'ETAT\\\", SANS AUCUNE GARANTIE DE QUELQUE NATURE QUE\nCE SOIT, EXPRESSE OU IMPLICITE, Y COMPRIS, MAIS SANS Y ETRE LIMITE, LES\nGARANTIES IMPLICITES DE COMMERCIABILITE, DE CONFORMITE A UNE UTILISATION\nPARTICULIERE, OU DE NON INFRACTION AUX DROITS D'UN TIERS.\n\nEN AUCUN CAS LES AUTEURS OU TITULAIRES DE DROITS D'AUTEUR NE POURRONT ETRE TENUS\nPOUR RESPONSABLE A VOTRE EGARD DE RECLAMATIONS, DOMMAGES OU AUTRES RESPONSABILITES,\nEN VERTU D'UN CONTRAT, DÉLIT OU AUTREMENT, RELATIVEMENT AU LOGICIEL, A L'UTILISATION\nDU LOGICIEL, OU A TOUTE AUTRE MANIPULATION RELATIVE AU LOGICIEL.\"\n```\n\n----------------------------------------\n\nTITLE: Document Headers and References\nDESCRIPTION: RST header definition and see-also reference for the bank synchronization documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/bank/bank_synchronization.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n====================\nBank synchronization\n====================\n\n.. seealso::\n   :doc:`transactions`\n```\n\n----------------------------------------\n\nTITLE: Calculating Subcontracted Product Valuation in Odoo\nDESCRIPTION: This snippet demonstrates the equation used to calculate the total valuation of a subcontracted product in Odoo. It includes variables for component costs, manufacturing price, shipping costs, dropshipping costs, and other associated costs.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. math::\n   P = C + M + S + D + x\n```\n\n----------------------------------------\n\nTITLE: RST Document Header Declaration\nDESCRIPTION: ReStructuredText document header defining the reference tag and title for the Odoo.sh Beta Program terms document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/terms/odoo_sh_terms.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _odoo_sh_terms:\n\n====================\nOdoo.sh Beta Program\n====================\n```\n\n----------------------------------------\n\nTITLE: Using Custom Anchors for Navigation - text\nDESCRIPTION: This snippet outlines how to create custom anchors for referencing specific sections within documentation. Custom anchors enhance user navigation by allowing easy access to defined parts of a document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n.. _contributing/rst/hyperlinks-guidelines:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Seealso Directive for Odoo Version History\nDESCRIPTION: This snippet uses the 'seealso' directive to provide a link to the Odoo version history documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seealso::\n    :doc:`History of Versions <administration/supported_versions>`\n```\n\n----------------------------------------\n\nTITLE: Digest Email Computed KPI Fields Reference\nDESCRIPTION: Reference table showing the mapping between KPI labels and their corresponding computed field values in the digest email system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/companies/digest_emails.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n  'Connected Users': 'kpi_res_users_connected_value',\n  'Messages Sent': 'kpi_mail_message_total_value'\n}\n```\n\n----------------------------------------\n\nTITLE: RST Build Date Documentation Header\nDESCRIPTION: RST markup for displaying documentation build date information, including orphan page directive and search exclusion.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/last_build.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n:nosearch:\n\n===============\nLast build date\n===============\n\nThe last time the documentation was built in version |version| was on |today|.\n```\n\n----------------------------------------\n\nTITLE: File Structure Example\nDESCRIPTION: This code shows the typical directory structure for a module with PDF reports in Odoo. It includes the location of model files, report templates, security definitions, view files, and the module's manifest file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/pdf_reports.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  estate\n  ├── models\n  │   ├── *.py\n  │   └── __init__.py\n  ├── report\n  │   ├── estate_property_templates.xml\n  │   └── estate_property_reports.xml\n  ├── security\n  │   └── ir.model.access.csv\n  ├── views\n  │   └── *.xml\n  ├── __init__.py\n  └── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: User Mention Format\nDESCRIPTION: Format for mentioning users in the live chat conversation to send notifications.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/responses.rst#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n@username\n```\n\n----------------------------------------\n\nTITLE: RST Code Block - URL Structure Example\nDESCRIPTION: Example demonstrating URL structure differences between language versions of a product page in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/translate.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nhttps://www.mywebsite.com/shop/product/my-product-1\nhttps://www.mywebsite.com/fr/shop/product/mon-produit-1\n```\n\n----------------------------------------\n\nTITLE: Directory Path Mapping for Odoo Administration Files\nDESCRIPTION: Comprehensive listing of file path changes showing how administration documentation files are being reorganized between directories. Maps source paths to destination paths for installation, maintenance, and configuration files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/15.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadministration/install.rst administration/on_premise.rst\nadministration/install/deploy.rst administration/on_premise/deploy.rst\nadministration/install/email_gateway.rst administration/on_premise/email_gateway.rst\nadministration/install/online.rst administration/odoo_online.rst\nadministration/install/geo_ip.rst administration/on_premise/geo_ip.rst\nadministration/install/packages.rst administration/on_premise/packages.rst\nadministration/install/source.rst administration/on_premise/source.rst\nadministration/install/cdn.rst applications/websites/website/configuration/cdn.rst\nadministration/maintain/azure_oauth.rst applications/general/email_communication/azure_oauth.rst\nadministration/maintain/domain_names.rst applications/websites/website/configuration/domain_names.rst\nadministration/maintain/enterprise.rst administration/on_premise/community_to_enterprise.rst\nadministration/maintain/google_oauth.rst applications/general/email_communication/google_oauth.rst\nadministration/maintain/hosting_changes.rst administration/hosting.rst\nadministration/maintain/mailjet_api.rst applications/general/email_communication/mailjet_api.rst\nadministration/maintain/odoo_online.rst administration/odoo_online.rst\nadministration/maintain/on_premise.rst administration/install.rst\nadministration/maintain/supported_versions.rst administration/supported_versions.rst\nadministration/maintain/update.rst administration/on_premise/update.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Table of Contents\nDESCRIPTION: Defines the documentation structure for Odoo 17 setup using reStructuredText toctree directive, organizing setup-related documentation sections\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/setup.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n   :glob:\n\n   setup/device_troubleshooting\n   setup/hardware\n   setup/software\n```\n\n----------------------------------------\n\nTITLE: Screenshots Directory Definition\nDESCRIPTION: This specifies the location where screenshots taken during automated tests are stored, under the database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n'/tmp/odoo_tests/{db_name}/screenshots/'\n```\n\n----------------------------------------\n\nTITLE: Referencing File Path in reStructuredText\nDESCRIPTION: This snippet shows how to reference a file path in reStructuredText. It's used to mention the neutralize.sql scripts that are executed during database duplication.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:file:`neutralize.sql`\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image in reStructuredText\nDESCRIPTION: This snippet shows how to insert an image in reStructuredText, including alignment and alt text. It's used to display screenshots of Odoo's interface.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/dropship_subcontracting_lead_times.rst#2025-04-18_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: dropship_subcontracting_lead_times/delivery-lead-time.png\n   :align: center\n   :alt: The Delivery Lead Time field for a subcontractor, on the Purchase tab of a product page.\n```\n\n----------------------------------------\n\nTITLE: Merging Files Redirect Example in RST\nDESCRIPTION: Shows a redirect rule example for when multiple documentation files are merged into a single file.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/MANUAL.md#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nadministration/install/odoo_sh.rst administration/odoo_sh.rst  # Move all information related to Odoo.sh on a single page\n```\n\n----------------------------------------\n\nTITLE: Native Javascript Module with Alias and Default = 0\nDESCRIPTION: This code snippet demonstrates creating an alias which defines the values exported by the original module. It shows how to delegate more directly and follow the exact behaviour of the aliased module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\n  /** @odoo-module alias=web.someName default=0**/\n  import { someFunction } from './file_b';\n\n  export function otherFunction(val) {\n      return someFunction(val + 3);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo Essentials in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) for the Odoo essentials documentation. It lists the various topics covered in the essentials section, providing links to their respective documentation files.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n   essentials/activities\n   essentials/reporting\n   essentials/search\n   essentials/contacts\n   essentials/export_import_data\n   essentials/in_app_purchase\n   essentials/keyboard_shortcuts\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in QWeb Template in Odoo\nDESCRIPTION: This XML code modifies the QWeb template to iterate through a list of 'teachers' records and display each teacher's ID and name within paragraphs.  The teacher object must have 'id' and 'name' attributes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n\"<odoo>\n\n   <template id=\\\"index\\\">\n        <title>Academy</title>\n        <t t-foreach=\\\"teachers\\\" t-as=\\\"teacher\\\">\n            <p><t t-esc=\\\"teacher.id\\\"/> <t t-esc=\\\"teacher.name\\\"/></p>\n        </t>\n   </template>\n\n</odoo>\"\n```\n\n----------------------------------------\n\nTITLE: Changing Product Tracking Settings\nDESCRIPTION: Modifying product traceability from no tracking to lot or serial number tracking in the Inventory tab\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/product_management/product_tracking/reassign.rst#2025-04-18_snippet_1\n\nLANGUAGE: configuration-steps\nCODE:\n```\n1. Go to Inventory tab\n2. Change 'Tracking' option from 'No Tracking' to 'By Lots' or 'By Unique Serial Number'\n```\n\n----------------------------------------\n\nTITLE: RST Image Inclusion\nDESCRIPTION: RST directive for including and captioning images in the documentation with alt text for accessibility.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/italy.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: italy/company.png\n   :alt: Company information to be provided\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Changes - Support Section\nDESCRIPTION: Records the removal of user documentation file as part of forward-port of #544\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/12.0.txt#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsupport/user_doc.rst contributing/documentation/introduction_guide.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Functions in Excel\nDESCRIPTION: This snippet outlines the syntax and related articles for Excel Filter functions, including FILTER and UNIQUE. It serves users looking for advanced data filtering capabilities in Excel.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/spreadsheet/functions.rst#2025-04-18_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _functions/filter:\n\nFilter\n======\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - FILTER(range, condition1, [condition2, ...])\n     - `Excel FILTER article <https://support.microsoft.com/office/filter-function-f4f7cb66-82eb-4767-8f7c-4877ad80c759>`_\n   * - UNIQUE(range, [by_column], [exactly_once])\n     - `Excel UNIQUE article <https://support.microsoft.com/office/unique-function-c5ab87fd-30a3-4ce9-9d1a-40204fb85e1e>`_\n```\n\n----------------------------------------\n\nTITLE: People CSV Export Format with Company Relationships for Odoo Import\nDESCRIPTION: Sample CSV output format showing exported person data with External IDs and company relationships. The file includes External ID, Name, Is a Company, and Related Company/External ID columns for four people.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nExternal ID,Name,Is a Company,Related Company/External ID\nperson_1,Fabien,False,company_1\nperson_2,Laurence,False,company_1\nperson_3,Eric,False,company_2\nperson_4,Ramsy,False,company_3\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Fiscal Localizations\nDESCRIPTION: ReStructuredText (RST) documentation containing the structure and content for fiscal localization packages documentation, including headings, notes, and country list.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n====================\nFiscal localizations\n====================\n\n.. _fiscal_localizations/packages:\n\nFiscal localization packages\n============================\n\n**Fiscal Localization Packages** are country-specific modules that install pre-configured taxes,\nfiscal positions, chart of accounts, and legal statements on your database.\n```\n\n----------------------------------------\n\nTITLE: Directory structure example\nDESCRIPTION: This example demonstrates the recommended directory structure for storing media files associated with RST documents. Each RST file should have its own folder with the same name, containing all related images and media.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/content_guidelines.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n::\n\n  ├── section\n  │   └── doc_filename\n  │   │   └── screenshot-tips.gif\n  │   │   └── awesome-filename.png\n  │   └── doc_filename.rst\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Changes - Developer Section\nDESCRIPTION: Documents the removal of incorrect upgrade-related pages from two locations\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/12.0.txt#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndeveloper/misc/api/upgrade.rst administration/upgrade/process.rst\ndeveloper/webservices/upgrade.rst administration/upgrade/process.rst\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Server with Addons Path\nDESCRIPTION: This command restarts the Odoo server with the specified addons path, which includes the default 'addons' directory and the custom 'my-modules' directory. This ensures Odoo loads modules from the correct locations. The command assumes that 'odoo-bin' is accessible from the current directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ ./odoo-bin --addons-path addons,my-modules\"\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Action for Odoo\nDESCRIPTION: This snippet shows how to define a basic action for the `test_model` in Odoo using XML. The action specifies the name, linked model, and view modes available for the action.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"test_model_action\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Test action</field>\n    <field name=\"res_model\">test_model</field>\n    <field name=\"view_mode\">tree,form</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration RST Documentation\nDESCRIPTION: ReStructuredText documentation outlining the theme customization options available in Odoo's website builder, including colors, fonts, layouts, and advanced settings.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/web_design/themes.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==============\nWebsite themes\n==============\n\nOdoo offers numerous themes to shape your website's style, including its colors, fonts, and layouts.\nWhen setting up your site using the Odoo website configurator, you are prompted to select a theme\nthat aligns with your desired aesthetic. If you wish to modify the theme options later, navigate to\nthe website builder by clicking the :guilabel:`Edit` button and access the :guilabel:`Theme` tab.\n```\n\n----------------------------------------\n\nTITLE: Displaying Payslip Chatter in Odoo 17 (reStructuredText)\nDESCRIPTION: This snippet shows how to include an image of the payslip chatter in Odoo 17 using reStructuredText syntax. It specifies the image file, alignment, and alt text for the email confirmation in the chatter.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/payslip-chatter.png\n   :align: center\n   :alt: The new payslip is emailed to the employee and the email appears in the chatter.\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for Database Population\nDESCRIPTION: Console command for populating an Odoo database with test data using the populate feature.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin populate\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Accounting Documentation in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the Accounting module documentation using reStructuredText syntax. It includes various accounting-related topics such as account tags, fiscal positions, tax configurations, and reporting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n==========\nAccounting\n==========\n\n.. toctree::\n    :titlesonly:\n\n    account/account_account_tag\n    account/account_account\n    account/account_fiscal_position\n    account/account_group\n    account/account_report\n    account/account_report_line\n    account/account_tax\n    account/account_tax_repartition\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redirect Rule Pattern in RST\nDESCRIPTION: Demonstrates the basic pattern for creating a redirect rule. Each rule consists of the old file path followed by the new file path, with an optional comment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/MANUAL.md#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\npath/to/old/file.rst path/to/new/file.rst  # optional comment\n```\n\n----------------------------------------\n\nTITLE: Setting up Channel Navigation in RST\nDESCRIPTION: Shows the navigation path to access live chat channels in Odoo\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/participate.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Live Chat app --> Channels`\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Forks\nDESCRIPTION: This snippet explains how to set the Git remote to push changes to your fork of the repository instead of the main codebase. This is important for contributors who work on a personal copy of the documentation repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git remote add dev git@github.com:<your_github_account>/documentation.git\n```\n\n----------------------------------------\n\nTITLE: Updating Website Configuration Documentation Path\nDESCRIPTION: Renames recaptcha documentation file to spam_protection while keeping it in the same configuration directory\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/saas-16.2.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/websites/website/configuration/recaptcha.rst applications/websites/website/configuration/spam_protection.rst\n```\n\n----------------------------------------\n\nTITLE: Internal Data Model Reference in RST\nDESCRIPTION: References the internal data model where external identifiers are stored in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/glossary.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nir.model.data\n```\n\n----------------------------------------\n\nTITLE: Activating Debug Mode via URL Parameter\nDESCRIPTION: URL patterns for activating different debug modes in Odoo. Includes basic debug mode, assets debug mode, and test assets debug mode.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/developer_mode.rst#2025-04-18_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://example.odoo.com/web?debug=1#action=menu&cids=1\n```\n\n----------------------------------------\n\nTITLE: Mapping Inventory File Path Changes in Odoo 17\nDESCRIPTION: This snippet shows the file path changes for various inventory-related documents in Odoo 17. It includes changes to locations of files related to landed costs, cycle counts, advanced warehouse operations, picking methods, and other inventory management topics.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/16.0.txt#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/integrating_landed_costs.rst applications/inventory_and_mrp/inventory/product_management/inventory_valuation/integrating_landed_costs.rst     # /inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/* -> /inventory_and_mrp/inventory/product_management/inventory_valuation/*\napplications/inventory_and_mrp/inventory/management/inventory_adjustments/cycle_counts.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts.rst                         # /inventory_and_mrp/inventory/management/inventory_adjustments/cycle_counts -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/cycle_counts.rst                  # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/cycle_counts\napplications/inventory_and_mrp/inventory/management/misc.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse.rst                                                                    # /inventory_and_mrp/inventory/management/misc -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/management/misc/owned_stock.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock.rst                                            # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/owned_stock.rst                        # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/owned_stock\napplications/inventory_and_mrp/inventory/management/misc/batch_transfers.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers.rst                                    # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch.rst                           # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers -> /inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch\napplications/inventory_and_mrp/inventory/management/misc/wave_transfers.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers.rst                                      # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave.rst                             # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers -> inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave\napplications/inventory_and_mrp/inventory/management/misc/cluster_picking.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking.rst                                    # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/cluster.rst                         # inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking -> /inventory_and_mrp/inventory/shipping_receiving/picking_methods/cluster\napplications/inventory_and_mrp/inventory/routes.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                                        # /inventory_and_mrp/inventory/routes -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/concepts.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                               # /inventory_and_mrp/inventory/routes/concepts -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/concepts/cross_dock.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock.rst                                              # /inventory_and_mrp/inventory/routes/concepts/cross_dock -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/cross_dock.rst                          # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/cross_dock\napplications/inventory_and_mrp/inventory/routes/concepts/stock_warehouses.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses.rst                                  # /inventory_and_mrp/inventory/routes/concepts/stock_warehouses -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses.rst              # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses\napplications/inventory_and_mrp/inventory/routes/strategies.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                             # /inventory_and_mrp/inventory/routes/strategies -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/strategies/putaway.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway.rst                                                  # /inventory_and_mrp/inventory/routes/strategies/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/putaway.rst                                # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/putaway\napplications/inventory_and_mrp/inventory/routes/strategies/removal.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal.rst                                                  # /inventory_and_mrp/inventory/routes/strategies/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal.rst applications/inventory_and_mrp/inventory/shipping_receiving/removal_strategies.rst                                      # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal -> /inventory_and_mrp/inventory/shipping_receiving/removal_strategies\napplications/inventory_and_mrp/inventory/management/products/usage.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/uom.rst                                                              # /inventory_and_mrp/inventory/management/products/usage -> /inventory_and_mrp/inventory/product_management/product_replenishment/uom\napplications/inventory_and_mrp/inventory/shipping.rst applications/inventory_and_mrp/inventory/shipping_receiving.rst                                                                                                         # /inventory_and_mrp/inventory/shipping -> /inventory_and_mrp/inventory/shipping_receiving\napplications/inventory_and_mrp/inventory/shipping/setup.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst                                                                               # /inventory_and_mrp/inventory/shipping/setup -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration\napplications/inventory_and_mrp/inventory/shipping/setup/delivery_method.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/delivery_method.rst                                               # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Alignment in XML Presets\nDESCRIPTION: Example of configuring menu item horizontal alignment in the presets.xml file. This snippet shows how to activate the center alignment template for the default header.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_default_align_center\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Documentation Directory Mapping\nDESCRIPTION: File path mappings showing the reorganization of documentation files across different sections including developer references, tutorials, and application documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/17.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# developer/reference\n\ndeveloper/reference/backend/views.rst developer/reference/user_interface/view_records.rst\ndeveloper/reference/user_interface/view_architecture.rst developer/reference/user_interface/view_architectures.rst\n\n# developer/tutorials\n\ndeveloper/tutorials/getting_started.rst developer/tutorials/server_framework_101.rst\ndeveloper/tutorials/getting_started/01_architecture.rst developer/tutorials/server_framework_101/01_architecture.rst\ndeveloper/tutorials/getting_started/02_setup.rst developer/tutorials/setup_guide.rst\ndeveloper/tutorials/getting_started/03_newapp.rst developer/tutorials/server_framework_101/02_newapp.rst\ndeveloper/tutorials/getting_started/04_basicmodel.rst developer/tutorials/server_framework_101/03_basicmodel.rst\ndeveloper/tutorials/getting_started/05_securityintro.rst developer/tutorials/server_framework_101/04_securityintro.rst\ndeveloper/tutorials/getting_started/06_firstui.rst developer/tutorials/server_framework_101/05_firstui.rst\ndeveloper/tutorials/getting_started/07_basicviews.rst developer/tutorials/server_framework_101/06_basicviews.rst\ndeveloper/tutorials/getting_started/08_relations.rst developer/tutorials/server_framework_101/07_relations.rst\ndeveloper/tutorials/getting_started/09_compute_onchange.rst developer/tutorials/server_framework_101/08_compute_onchange.rst\ndeveloper/tutorials/getting_started/10_actions.rst developer/tutorials/server_framework_101/09_actions.rst\ndeveloper/tutorials/getting_started/11_constraints.rst developer/tutorials/server_framework_101/10_constraints.rst\ndeveloper/tutorials/getting_started/12_sprinkles.rst developer/tutorials/server_framework_101/11_sprinkles.rst\ndeveloper/tutorials/getting_started/13_inheritance.rst developer/tutorials/server_framework_101/12_inheritance.rst\ndeveloper/tutorials/getting_started/14_other_module.rst developer/tutorials/server_framework_101/13_other_module.rst\ndeveloper/tutorials/getting_started/15_qwebintro.rst developer/tutorials/server_framework_101/14_qwebintro.rst\ndeveloper/tutorials/getting_started/16_final_word.rst developer/tutorials/server_framework_101/15_final_word.rst\n\n# applications/general\n\napplications/general/email_communication/email_servers.rst applications/general/email_communication.rst\napplications/general/iot/config.rst applications/general/iot.rst\napplications/general/iot/config/connect.rst applications/general/iot/connect.rst\napplications/general/iot/config/pos.rst applications/sales/point_of_sale/configuration/pos_iot.rst\napplications/general/iot/config/https_certificate_iot.rst applications/general/iot/iot_advanced/https_certificate_iot.rst\napplications/general/iot/config/updating_iot.rst applications/general/iot/iot_advanced/updating_iot.rst\napplications/general/iot/config/troubleshooting.rst applications/general/iot.rst\napplications/general/iot/config/windows_iot.rst applications/general/iot/windows_iot.rst\napplications/general/iot/config/ssh_connect.rst applications/general/iot/iot_advanced/ssh_connect.rst\n\n# applications/hr\n\napplications/hr/appraisals/reporting.rst applications/hr/appraisals/appraisal_analysis.rst\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Net Volume (Cubic Feet)\nDESCRIPTION: This regular expression identifies the net volume in cubic feet. It searches for the Application Identifier (AI) `365[0-5]` followed by 6 digits.  The expression extracts quantity data in cubic feet.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_17\n\nLANGUAGE: regex\nCODE:\n```\n\"(365[0-5])(\\d{6})\"\n```\n\n----------------------------------------\n\nTITLE: Non-Semantic Custom Title Implementation\nDESCRIPTION: Demonstrates poor practice of using custom classes for titles with unnecessary styling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\"o_module_custom_title\">\n   Hello There!\n</span>\n\n<span class=\"o_module_custom_subtitle\">\n   I'm a subtitle.\n</span>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.o_module_custom_title {\n   display: block;\n   font-size: 120%;\n   font-weight: bold;\n   animation: 1s linear 1s mycustomAnimation;\n}\n\n.o_module_custom_subtitle {\n   display: block;\n   font-size: 12px;\n   font-weight: bold;\n   animation: 2s linear 1s mycustomAnimation;\n}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table Definition for UK Accounting Modules\nDESCRIPTION: List table definition showing the available UK accounting modules, their technical names, and descriptions\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_kingdom.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`UK - Accounting`\n     - `l10n_uk`\n     -  - CT600-ready chart of accounts\n        - VAT100-ready tax structure\n        - Infologic UK counties listing\n   * - :guilabel:`UK - Accounting Reports`\n     - `l10n_uk_reports`\n     -  - Accounting reports for the UK\n        - Allows sending the tax report via the MTD-VAT API to HMRC.\n   * - :guilabel:`UK BACS Payment Files`\n     - `account_bacs`\n     - Allows generating :ref:`united-kingdom/BACS-files` for bill and invoice payments\n```\n\n----------------------------------------\n\nTITLE: Highlighting Commands using command Markup - text\nDESCRIPTION: This snippet explains how to use command markup to emphasize specific commands in the documentation. Highlighting commands is essential for instructing users on system operations.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRun the command :command:`make clean html` to delete existing built files and build the documentation to HTML.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Odoo Community Repository on Debian/Ubuntu\nDESCRIPTION: Commands to set up the Odoo Community edition repository on Debian/Ubuntu, including adding the GPG key, configuring the repository source, and installing Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget -q -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg\n$ echo 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list\n$ sudo apt-get update && sudo apt-get install odoo\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Global Variables\nDESCRIPTION: Sets global git configuration variables for user email and name using git config command.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/git_guidelines.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit config --global <var> <value>\n```\n\n----------------------------------------\n\nTITLE: RST Note Directive for Wire Transfer\nDESCRIPTION: Adds a note about the default Wire Transfer payment provider configuration requirement.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   By default, \":doc:`Wire Transfer </applications/finance/payment_providers/wire_transfer>`\" is the\n   only payment provider activated, but you still have to fill out the payment details.\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branch\nDESCRIPTION: Git command to delete a branch from the local repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -D master\n```\n\n----------------------------------------\n\nTITLE: Utility Class Component Example\nDESCRIPTION: Example of verbose utility class usage in a component class declaration.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/scss_tips.rst#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<myComponent t-attf-class=\"d-flex border px-lg-2 card\n{{props.readonly ? 'o_myComponent_disabled' : ''}}\ncard d-lg-block position-absolute {{props.active ?\n'o_myComponent_active' : ''}}  myComponent px-3\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing RST Documentation Blocks\nDESCRIPTION: RST markup documentation showing menu navigation paths and UI element references for Odoo website page management\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/pages.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _website/page_type:\n\n.. note::\n   Disable :guilabel:`Add to menu` if the page should not appear in the menu.\n\n.. image:: pages/un-published_toggle.png\n   :alt: Unpublished/Published toggle\n\n.. toctree::\n   :titlesonly:\n\n   pages/menus\n   pages/seo\n```\n\n----------------------------------------\n\nTITLE: Including Call to Action Component in Custom Header XML\nDESCRIPTION: Adds the call-to-action component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_call_to_action\">\n   <t t-set=\"_div_classes\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Label Component Example in Odoo Form View\nDESCRIPTION: Shows how to manually add a label for a field using the label component when automatic labels aren't available.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div class=\"col col-md-auto\">\n        <label for=\"FIELD_NAME\" string=\"LABEL\"/>\n        <div>\n```\n\n----------------------------------------\n\nTITLE: Aged Payable Report Navigation in reST\nDESCRIPTION: Menu navigation path to access the aged payable report in Odoo's Accounting module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/vendor_bills.rst#2025-04-18_snippet_1\n\nLANGUAGE: reST\nCODE:\n```\n:menuselection:`Accounting --> Reporting --> Aged payable`\n```\n\n----------------------------------------\n\nTITLE: Creating We-Button-Group in XML for Odoo Website Theme\nDESCRIPTION: Shows how to create a we-button-group to format options as adjacent buttons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<we-button-group string=\"Before\">...</we-button-group>\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/voip/axivox/manage_users.rst#2025-04-18_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Plain Text Code Snippet Example\nDESCRIPTION: This plain text snippet demonstrates the output after using the Scrap HTML feature. It presents the converted text from HTML to plain text, including annotations for links.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/data_cleaning.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"**John Doe** Lorem ipsum dolor sit amet [1] .[1] https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Transformed Odoo Module with Alias and No Default Re-export\nDESCRIPTION: This code snippet demonstrates the transformed javascript code with alias where the alias has default = 0. It shows the use of `odoo.define` to create an alias with the original module values. It does not re-export the default value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\n  odoo.define(`web.someName`, function(require) {\n      return require('@web/file_a');\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Defining Financial Functions in Excel\nDESCRIPTION: This snippet details various Financial functions available in Excel, including ACCRINTM, AMORLINC, and others. Each function is documented with its arguments and a link to a support article, aiding financial analysis.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/spreadsheet/functions.rst#2025-04-18_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _functions/financial:\n\nFinancial\n=========\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - ACCRINTM(issue, maturity, rate, redemption, [day_count_convention])\n     - `Excel ACCRINTM article <https://support.microsoft.com/office/accrintm-function-f62f01f9-5754-4cc4-805b-0e70199328a7>`_\n   * - AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [day_count_convention])\n     - `Excel AMORLINC article <https://support.microsoft.com/office/amorlinc-function-7d417b45-f7f5-4dba-a0a5-3451a81079a8>`_\n```\n\n----------------------------------------\n\nTITLE: Documenting RST Markup for Avalara Portal Navigation\nDESCRIPTION: RST markup documentation showing the structure and formatting for the Avalara portal documentation, including section headers, images, tips, and navigation paths.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes/avatax/avalara_portal.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _avatax/portal:\n\n=======================\nAvalara (Avatax) portal\n=======================\n\n.. tip::\n   Avalara is the software developer of the tax software, *AvaTax*.\n\n.. image:: avalara_portal/avalara-portal.png\n   :align: center\n   :alt: Avalara dashboard after logging into management portal.\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories - Linux HTTPS\nDESCRIPTION: Commands to clone Odoo Community and Enterprise repositories using HTTPS on Linux systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/odoo/odoo.git\n$ git clone https://github.com/odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: URL Path Reference in RST\nDESCRIPTION: File path reference for accessing the database manager interface in Odoo\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/create.rst#2025-04-18_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n/web/database/manager\n```\n\n----------------------------------------\n\nTITLE: External Identifier Format Example in RST\nDESCRIPTION: Demonstrates the format of an external identifier reference in Odoo using the account.invoice_graph example.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/glossary.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\naccount.invoice_graph\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu in Odoo with XML\nDESCRIPTION: This XML snippet demonstrates how to create a dropdown menu in Odoo's website. The `parent_id` field points to the default main menu, making it a top-level dropdown. The `name` field sets the text displayed for the dropdown menu.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/navigation.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<record id=\"menu_services\" model=\"website.menu\">\n    <field name=\"name\">Services</field>\n    <field name=\"website_id\">1</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"sequence\" type=\"int\">...</field>\n</record>\"\n```\n\n----------------------------------------\n\nTITLE: Identifying GUI Elements using guilabel Markup - text\nDESCRIPTION: This snippet demonstrates how to use the guilabel markup to highlight text in the graphical user interface, specifically for labeling interactive elements. It's vital for enhancing user comprehension in documentation. The guilabel is not intended for general concepts.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUpdate your credentials, then click on :guilabel:`Save`.\n```\n\n----------------------------------------\n\nTITLE: Vietnamese Localization Module List Table\nDESCRIPTION: ReStructuredText table listing the core Vietnamese localization modules with their technical names and descriptions\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/vietnam.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :header-rows: 1\n\n    * - Name\n      - Technical name\n      - Description\n    * - :guilabel:`Vietnam - Accounting`\n      - `l10n_vn`\n      - This module includes the default\n        :ref:`fiscal localization package <fiscal_localizations/packages>`.\n    * - :guilabel:`Vietnam - E-invoicing`\n      - `l10n_vn_edi_viettel`\n      - This module includes the features required for integration with :ref:`SInvoice\n        <localizations/vietnam/sinvoice>`.\n```\n\n----------------------------------------\n\nTITLE: Creating We-Select Dropdown in XML for Odoo Website Theme\nDESCRIPTION: Demonstrates how to create a we-select dropdown option with a label for layout selection.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<we-select string=\"Layout\">...</we-select>\n```\n\n----------------------------------------\n\nTITLE: RST See Also Directive\nDESCRIPTION: Adds a reference link to payment providers documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n\n   - :doc:`/applications/finance/payment_providers`\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Service with Notifications\nDESCRIPTION: A service that displays a notification every 5 seconds using the notification service\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    },\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: HTML Code Snippet Example\nDESCRIPTION: This HTML code snippet demonstrates example text for the Scrap HTML feature. It contains a heading, a paragraph, and a link within a basic HTML structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/productivity/data_cleaning.rst#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<h1>John Doe</h1>\\n<p>Lorem ipsum dolor sit <a href=\\\"https://example.com\\\">amet</a>.</p>\"\n```\n\n----------------------------------------\n\nTITLE: XML Record Action Definition\nDESCRIPTION: This XML snippet demonstrates defining window actions in Odoo using the standard record structure.  It shows how to create a main action and a child list action, following the recommended naming conventions for XML IDs and names.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"model_name_action\" model=\"ir.act.window\">\n    <field name=\"name\">Model Main Action</field>\n    ...\n</record>\n\n<record id=\"model_name_action_child_list\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Model Access Children</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Unsupported Export Object Syntax\nDESCRIPTION: This code snippet shows the unsupported syntax for exporting objects in Odoo native modules. It demonstrates cases where comments within the export object definition can cause parsing errors.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n\n      // not supported\n      export {\n        a as b, // this is a comment\n        c,\n        d,\n      }\n\n      export {\n        a /* this is a comment */\n      } from \"./file_a\"\n\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Tip Block for Database Configuration\nDESCRIPTION: Documentation tip highlighting the default database configuration for production and testing modes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/peru.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   By default the databases are set to work on production, make sure to enable the testing mode\n   if needed.\n```\n\n----------------------------------------\n\nTITLE: XML Attachment for Custom Shape\nDESCRIPTION: This XML snippet defines an `ir.attachment` record for a custom shape SVG file. It specifies the name of the file, the base64 encoded data of the file, the URL where the shape will be available in the web editor, and sets the `public` field to `True` to make it editable.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n   <record id=\"shape_hexagon_01\" model=\"ir.attachment\">\n       <field name=\"name\">01.svg</field>\n       <field name=\"datas\" type=\"base64\" file=\"website_airproof/static/shapes/hexagons/01.svg\"/>\n       <field name=\"url\">/web_editor/shape/illustration/hexagons/01.svg</field>\n       <field name=\"public\" eval=\"True\"/>\n   </record>\n```\n\n----------------------------------------\n\nTITLE: Controllers File Structure in Odoo\nDESCRIPTION: This snippet describes the organization of controller files within an Odoo module, emphasizing the naming conventions and structure that aid in module clarity and functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    addons/plant_nursery/\n    |-- controllers/\n    |   |-- plant_nursery.py\n    |   |-- portal.py (inheriting portal/controllers/portal.py)\n    |   |-- main.py (deprecated, replaced by plant_nursery.py)\n```\n\n----------------------------------------\n\nTITLE: Creating We-Colorpicker in XML for Odoo Website Theme\nDESCRIPTION: Shows how to create a we-colorpicker option for selecting a color filter with various attributes for styling and targeting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<we-colorpicker\n   string=\"Color filter\"\n   data-select-style=\"true\"\n   data-css-property=\"background-color\"\n   data-color-prefix=\"bg-\"\n   data-apply-to=\".s_map_color_filter\" />\n```\n\n----------------------------------------\n\nTITLE: Ordering Default Groupby Filters in Python\nDESCRIPTION: Example showing how to define the order of default groupby filters using numeric values between 1 and 99. Lower values are applied first.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n{\n    'search_default_foo': 2,\n    'search_default_bar': 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Request for Quotation (RfQ) for Subcontracted Product in Odoo RST\nDESCRIPTION: This RST snippet outlines the process of creating a Request for Quotation (RfQ) for a subcontracted product in Odoo. It covers navigation, vendor selection, product addition, and explains how the Expected Arrival date is calculated based on the delivery lead time.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/basic_subcontracting_lead_times.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nAfter setting a delivery lead time for a product's vendor, create an |RfQ| by navigating to\n:menuselection:`Purchase app --> Orders --> Purchase Orders`, and clicking :guilabel:`New`.\n\nSpecify the subcontractor in the :guilabel:`Vendor` field. Then, add the product in the\n:guilabel:`Products` tab by clicking :guilabel:`Add a product`, selecting the product in the\n:guilabel:`Product` column, and adding a quantity in the :guilabel:`Quantity` column.\n\nOnce a product has been added, the :guilabel:`Expected Arrival` field on the |RfQ| auto-populates\nwith a date that reflects the vendor's delivery lead time, as specified on the product's page.\n\nIf the date needs to be adjusted, click on the :guilabel:`Expected Arrival` field to open a calendar\npopover, and select the desired date. Make sure not to choose a date sooner than the one that was\nauto-populated, unless the subcontractor has confirmed that they are able to deliver the product by\nthat date.\n\nFinally, click :guilabel:`Confirm Order` on the |RfQ| to turn it into a |PO|. At this point, the\nsubcontractor should begin manufacturing the subcontracted product, before delivering it to the\ncontracting company.\n```\n\n----------------------------------------\n\nTITLE: Format String Syntax Example in RST\nDESCRIPTION: Shows the syntax for format strings using double curly braces for expression evaluation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/glossary.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{{ }}\n```\n\n----------------------------------------\n\nTITLE: Updating PATH Variable on Windows\nDESCRIPTION: Instructions for updating the system's PATH variable on Windows to include the Git installation path, allowing users to access Git commands from the command line. The default installation path is typically C:\\Program Files\\Git.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/install_git.rst#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFollow the `guide to update the PATH variable on Windows <https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/>`_ with the installation path of Git (by default :file:`C:\\Program Files\\Git`).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Warning Block for Document Support\nDESCRIPTION: Documentation warning block specifying supported document types for customer invoices.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/peru.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   Currently the documents supported on customer invoices are: Invoice, Boleta, Debit Note and\n   Credit Note.\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-RPC Client in Python for Odoo\nDESCRIPTION: Example of connecting to Odoo via JSON-RPC using Python's urllib.request and json libraries. Demonstrates authentication and note creation using JSON-RPC protocol.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/web_services.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport random\nimport urllib.request\n\nHOST = 'localhost'\nPORT = 8069\nDB = 'openacademy'\nUSER = 'admin'\nPASS = 'admin'\n\ndef json_rpc(url, method, params):\n    data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": method,\n        \"params\": params,\n        \"id\": random.randint(0, 1000000000),\n    }\n    req = urllib.request.Request(url=url, data=json.dumps(data).encode(), headers={\n        \"Content-Type\":\"application/json\",\n    })\n    reply = json.loads(urllib.request.urlopen(req).read().decode('UTF-8'))\n    if reply.get(\"error\"):\n        raise Exception(reply[\"error\"])\n    return reply[\"result\"]\n\ndef call(url, service, method, *args):\n    return json_rpc(url, \"call\", {\"service\": service, \"method\": method, \"args\": args})\n\n# log in the given database\nurl = \"http://%s:%s/jsonrpc\" % (HOST, PORT)\nuid = call(url, \"common\", \"login\", DB, USER, PASS)\n\n# create a new note\nargs = {\n    'color': 8,\n    'memo': 'This is another note',\n    'create_uid': uid,\n}\nnote_id = call(url, \"object\", \"execute\", DB, uid, PASS, 'note.note', 'create', args)\n```\n\n----------------------------------------\n\nTITLE: Forum User Interaction Documentation in RST\nDESCRIPTION: ReStructuredText documentation detailing forum interaction options including posting questions, using tags, moderating content, and managing forum badges\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/forum.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _forum/post:\\n\\nPost questions\\n--------------\\n\\nTo create a new post, access the forum's front end, click :guilabel:`New Post`, and fill in the\\nfollowing:\\n\\n- :guilabel:`Title`: add the question or the topic of the post.\\n- :guilabel:`Description`: add a description for the question.\\n- :guilabel:`Tags`: add up to five :ref:`tags <forum/tags>`.\\n\\nClick :guilabel:`Post Your Question`.\n```\n\n----------------------------------------\n\nTITLE: Hiding Sections on Desktop in Odoo with XML\nDESCRIPTION: This snippet hides a specific section on desktop devices using Odoo and Bootstrap classes. It adds the class 'd-lg-none' to ensure the section remains invisible on large screens while visibility controls are managed within the Odoo Website Builder. Odoo environment and knowledge of Bootstrap for responsive design are prerequisites.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n\n<section class=\"s_text_block o_cc o_cc1 o_colored_level pt16 pb16 d-lg-none o_snippet_desktop_invisible\" data-snippet=\"s_text_block\" name=\"Text\">\n   <!-- Content -->\n</section>\n\n```\n\n----------------------------------------\n\nTITLE: Inner Content Snippet Structure\nDESCRIPTION: Demonstrates the structure for inner content snippets using div element instead of section.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"s_snippet_name\" data-name=\"...\" data-snippet=\"...\">\n    <!-- Content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vendor Bills Navigation Menu Path in reST\nDESCRIPTION: Menu navigation path to access vendor bills creation in Odoo's Accounting module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/vendor_bills.rst#2025-04-18_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n:menuselection:`Accounting --> Vendors --> Bills`\n```\n\n----------------------------------------\n\nTITLE: Referencing External Records in Odoo XML\nDESCRIPTION: Shows how to reference existing records using the ref attribute in XML field definitions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"related_id\" ref=\"module.relatedid\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: PaymentTransaction Class Methods Documentation in RST Format\nDESCRIPTION: Documentation directives for the PaymentTransaction class from the Odoo payment module. This RST (reStructuredText) defines the structure for auto-documenting the available methods in the class, including reference computation, notification handling, payment processing, and transaction state management.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/payment/payment_transaction.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:hide-page-toc:\n\n===================\nPayment Transaction\n===================\n\n.. autoclass:: odoo.addons.payment.models.payment_transaction::PaymentTransaction()\n\n   .. automethod:: _compute_reference\n   .. automethod:: _compute_reference_prefix\n   .. automethod:: _get_post_processing_values\n   .. automethod:: _get_specific_create_values\n   .. automethod:: _get_specific_processing_values\n   .. automethod:: _get_specific_rendering_values\n   .. automethod:: _get_tx_from_notification_data\n   .. automethod:: _handle_notification_data\n   .. automethod:: _process_notification_data\n   .. automethod:: _send_capture_request\n   .. automethod:: _send_payment_request\n   .. automethod:: _send_refund_request\n   .. automethod:: _send_void_request\n   .. automethod:: _set_authorized\n   .. automethod:: _set_canceled\n   .. automethod:: _set_done\n   .. automethod:: _set_error\n   .. automethod:: _set_pending\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on Windows\nDESCRIPTION: Command to start the Odoo server on Windows with database credentials, addons path and database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_16\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> cd CommunityPath/\nC:\\> python odoo-bin -r dbuser -w dbpassword --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Section in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create an example section in reStructuredText, used to provide a practical illustration of the dropship subcontracting workflow.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/dropship_subcontracting_lead_times.rst#2025-04-18_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. example::\n\n   Bike retailer *Mike's Bikes* works with a subcontractor — *Bike Friends* — to produce units of\n   their *Bicycle* product.\n\n   Mike's Bikes must purchase the required components from vendor Bike World, and have them\n   dropshipped to Bike Friends.\n\n   On average, Bike Friends takes three days to manufacture each bicycle, plus an addition two days\n   to deliver it to Mike's Bikes.\n\n   As a result, Mike's Bikes sets a delivery lead time of five days for bicycle manufactured by Bike\n   Friends: three days for manufacturing, plus two days for delivery.\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Dependencies - Linux Debian/Ubuntu\nDESCRIPTION: Commands to install required Odoo dependencies on Debian/Ubuntu systems using the debinstall script.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd odoo #CommunityPath\n$ sudo ./setup/debinstall.sh\n```\n\n----------------------------------------\n\nTITLE: Products Template Definition in XML\nDESCRIPTION: Template for product dynamic content with configuration for responsive display and fetch limits.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_product_product_airproof\" name=\"...\">\n            <t t-foreach=\"records\" t-as=\"data\" data-number-of-elements=\"4\" data-number-of-elements-sm=\"1\" data-number-of-elements-fetch=\"8\">\n               <t t-set=\"record\" t-value=\"data['_record']\"/>\n               <!-- Content -->\n            </t>\n         </template>\n```\n\n----------------------------------------\n\nTITLE: Structuring Advanced Documentation Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the structure of the Advanced section in the Odoo 17 documentation. It uses reStructuredText directives to create a table of contents that links to pages about containers, submodules, and frequent technical questions. The 'nosearch' directive prevents this index page from appearing in search results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredText\nCODE:\n```\n:nosearch:\n\n========\nAdvanced\n========\n\n.. toctree::\n   :titlesonly:\n\n   advanced/containers\n   advanced/submodules\n   advanced/frequent_technical_questions\n```\n\n----------------------------------------\n\nTITLE: Using Ref Key in XML Records\nDESCRIPTION: This XML snippet demonstrates the use of the 'ref' key to establish a relationship between records by linking to another record's XML ID.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"related_id\" ref=\"module.relatedid\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo from RPM Package on Fedora\nDESCRIPTION: Commands to install Odoo from a downloaded RPM package on Fedora and configure it as a system service.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/packages.rst#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf localinstall odoo_{CURRENT_MAJOR_BRANCH}.latest.noarch.rpm\n$ sudo systemctl enable odoo\n$ sudo systemctl start odoo\n```\n\n----------------------------------------\n\nTITLE: Document Reference in reST\nDESCRIPTION: Reference link to invoice digitization documentation in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/vendor_bills.rst#2025-04-18_snippet_2\n\nLANGUAGE: reST\nCODE:\n```\n:doc:`digitized <vendor_bills/invoice_digitization>`\n```\n\n----------------------------------------\n\nTITLE: Flipping Shapes Horizontally/Vertically in XML\nDESCRIPTION: This XML snippet showcases how to flip a standard shape horizontally and vertically. The `flip` key in the `data-oe-shape-data` JSON object accepts an array with boolean values for x and y axes.  CSS classes `o_we_flip_x` and `o_we_flip_y` are also applied to the shape's div element to visually flip the shape.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06','flip':[x,y]}\">\n       <div class=\"o_we_shape o_we_flip_x o_we_flip_y o_web_editor_Zigs_06\"/>\n       <div class=\"container\">\n           <!-- Content -->\n       </div>\n   </section>\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdomain-Based Database Filter for Odoo in INI File\nDESCRIPTION: Sets the dbfilter option to match databases to the first subdomain after 'www'. This allows mapping specific databases to subdomains.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/deploy.rst#2025-04-18_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndbfilter = ^%d$\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Controller in Python\nDESCRIPTION: Python controller class that handles the route and renders the standalone application view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/standalone_owl_application.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.http import request, route, Controller\n\nclass YourController(Controller):\n    @route(\"/your_module/standalone_app\", auth=\"public\")\n    def standalone_app(self):\n        return request.render(\n            'your_module.standalone_app',\n            {\n                'session_info': request.env['ir.http'].get_frontend_session_info(),\n            }\n        )\n```\n\n----------------------------------------\n\nTITLE: Menu Icon Reference in RST\nDESCRIPTION: Shows the syntax for referencing the messages icon in the menu bar\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/livechat/participate.rst#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:icon:`fa-comments`\n```\n\n----------------------------------------\n\nTITLE: Invalid Use of Super in JavaScript\nDESCRIPTION: Illustrates invalid constructions involving the super keyword that lead to syntax errors. The super keyword cannot be used in functions or arrow functions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: function () {\n    // Throws: \"Uncaught SyntaxError: 'super' keyword unexpected here\"\n    super.a();\n  },\n  b: () => {\n    // Throws: \"Uncaught SyntaxError: 'super' keyword unexpected here\"\n    super.b();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Commit Message Format and Tag Conventions\nDESCRIPTION: A template that demonstrates the proper format for Odoo commit messages, including the tag system that categorizes changes (ADD, IMP, FIX, REM, REF, MOV) and guidelines for writing clear descriptions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/commit_template.txt#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[TAG] application/module: describe your changes in a short sentence\n\n# If you feel that it might help a future reader to understand your commit\n# motivations, take some time to explain WHY you made these changes in a few\n# sentences. The WHAT is usually easily understood by reading the diff.\n#\n# Short description tip: structure your commit message as if it was completing\n# this sentence: \"If merged, this commit will ...\". For instance, the following\n# commit message is correct: \"[IMP] sales: compress images to save space\".\n#\n# Tag meanings:\n#\n# [ADD] = New content\n# [IMP] = Improvement\n# [FIX] = Content or RST fix\n# [REM] = Removal\n# [REF] = Refactoring (restructuring)\n# [MOV] = Move/rename\n#\n```\n\n----------------------------------------\n\nTITLE: Installing Make on Linux\nDESCRIPTION: This snippet shows the command to install 'make', a build automation tool that may be needed for certain documentation tasks, specifically on Linux systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install make -y\n```\n\n----------------------------------------\n\nTITLE: Moving File Redirect Example in RST\nDESCRIPTION: Demonstrates a redirect rule for moving a file between directories, with the developer guidelines being moved to a new location.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/MANUAL.md#2025-04-18_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\ndeveloper/misc/guidelines.rst contributing/develop/guidelines.rst  # Move all guidelines in contributing/\n```\n\n----------------------------------------\n\nTITLE: Deactivating Default Pages in Odoo\nDESCRIPTION: These XML snippets demonstrate how to deactivate default pages in Odoo by updating the `active` field of the corresponding `ir.ui.view` record. Setting `eval=\"False\"` will disable the page.  This prevents the pages from being displayed on the website.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/pages.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.homepage\" model=\"ir.ui.view\">\n    <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.contactus\" model=\"ir.ui.view\">\n    <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Python Loop Equivalent\nDESCRIPTION: This Python code demonstrates the equivalent loop structure to the QWeb's t-foreach and t-as directives used in the report template. It clarifies how QWeb iterates over a collection (offers) and assigns each item to a temporary variable (offer) for use within the loop.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/pdf_reports.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n  for offer in offers:\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Language Selector Image\nDESCRIPTION: RST image directive for displaying the language selector interface screenshot\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/website/configuration/translate.rst#2025-04-18_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: translate/language-selector.png\n   :alt: Add a language selector menu.\n```\n\n----------------------------------------\n\nTITLE: Python Iterate on Iterables\nDESCRIPTION: This Python snippet emphasizes the importance of iterating directly on iterables (e.g., dictionaries) instead of using `.keys()` which creates a temporary list. Iterating directly on the dictionary or using `.items()` for key-value pairs improves code efficiency and readability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# creates a temporary list and looks bar\nfor key in my_dict.keys():\n    \"do something...\"\n# better\nfor key in my_dict:\n    \"do something...\"\n# accessing the key,value pair\nfor key, value in my_dict.items():\n    \"do something...\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Credit Notes and Refunds\nDESCRIPTION: ReStructuredText documentation detailing the complete process of managing credit notes, debit notes, and refunds in Odoo 17. Includes menu navigation paths, step-by-step instructions, and explanations of journal entries.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/credit_notes.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n========================\nCredit notes and refunds\n========================\n\nA credit/debit note, or credit/debit memo, is a document sent to a customer to inform them that they\nhave been *credited/debited* a certain amount.\n\nSeveral use cases can lead to a credit note, such as:\n\n - a mistake in the invoice\n - a return of the goods, or a rejection of the services\n - the goods delivered are damaged\n\n.. note::\n   Issuing a credit/debit note is the only legal method for canceling, refunding, or modifying a\n   validated invoice. Make sure to **register the payment** afterward if money is being refunded to\n   the customer and/or validate the\n   :doc:`return </applications/sales/sales/products_prices/returns>` if a storable product is being\n   returned.\n```\n\n----------------------------------------\n\nTITLE: Disabling Portal Language Selector in XML Presets\nDESCRIPTION: XML configuration to disable the language selector in the website portal. This sets the portal.footer_language_selector view to inactive.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"portal.footer_language_selector\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Merging Git Branches\nDESCRIPTION: Commands to merge one branch into the current branch and push the changes to the remote repository.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/getting_started/branches.rst#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git merge staging-1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Maps in HTML\nDESCRIPTION: This snippet shows how to embed a Google Maps iframe in HTML with placeholders for latitude and longitude coordinates. These placeholders (XXX and YYY) should be replaced with actual coordinates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"400\" height=\"300\" src=\"https://maps.google.com/?ie=UTF8&amp;ll=XXX,YYY&amp;output=embed\">\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Uninstall Image\nDESCRIPTION: RST image directive defining the uninstallation menu screenshot placement.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/apps_modules.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: apps_modules/uninstall.png\n   :align: center\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure - Online Payment Providers Comparison\nDESCRIPTION: ReStructuredText table showing comparison of supported payment providers and their features including payment flow, tokenization, manual capture, refunds and express checkout capabilities.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers.rst#2025-04-18_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n   :widths: auto\n\n   * -\n     - Payment flow from\n     - :ref:`Tokenization <payment_providers/tokenization>`\n     - :ref:`Manual capture <payment_providers/manual_capture>`\n     - :ref:`Refunds <payment_providers/refunds>`\n     - :ref:`Express checkout <payment_providers/express_checkout>`\n```\n\n----------------------------------------\n\nTITLE: Running Module Tests via Command Line in Odoo.sh\nDESCRIPTION: Command to install a module with test mode enabled, configuring appropriate log level and stopping after tests complete.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/advanced/containers.rst#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -i sale --test-enable --log-level=test --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Creating We-Button Option in XML for Odoo Website Theme\nDESCRIPTION: Demonstrates how to create a we-button option inside a we-button-group to add margin top classes to an element. The data-select-class attribute specifies which class is added when selected.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/building_blocks.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<we-button-group string=\"Before\">\n   <we-button data-select-class=\"mt-0\">1</we-button>\n   <we-button data-select-class=\"mt-3\">2</we-button>\n   <we-button data-select-class=\"mt-5\">3</we-button>\n</we-button-group>\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Definition\nDESCRIPTION: This code snippet demonstrates how to define an Odoo module using the `odoo.define` function.  It shows the basic structure of a module, including the module name, a function to define the module's logic, and a return value representing the module's export.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_modules.rst#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n\n    // in file a.js\n    odoo.define('module.A', function (require) {\n        \"use strict\";\n\n        var A = ...;\n\n        return A;\n    });\n\n    // in file b.js\n    odoo.define('module.B', function (require) {\n        \"use strict\";\n\n        var A = require('module.A');\n\n        var B = ...; // something that involves A\n\n        return B;\n    });\n\n```\n\n----------------------------------------\n\nTITLE: XML New Primary Views\nDESCRIPTION: This XML snippet shows how to create a new primary view that inherits from another view.  It is important to set the `mode` attribute to `primary`.  This ensures that the new view will be treated as a base view instead of an inherited view.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"module2.model_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">model.view.form.module2</field>\n    <field name=\"inherit_id\" ref=\"module1.model_view_form\"/>\n    <field name=\"mode\">primary</field>\n    ...\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding the `mail.catchall.domain.allowed` System Parameter in Odoo\nDESCRIPTION: This snippet illustrates how to add the `mail.catchall.domain.allowed` system parameter to filter aliases and prevent false positives in the Odoo database. This involves enabling developer mode and navigating to System Parameters to create a new parameter with the key `mail.catchall.domain.allowed` and setting its value to a comma-separated list of allowed domains.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/email_servers_inbound.rst#2025-04-18_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Progress Bar Widget\nDESCRIPTION: Progress bar widget configuration with current value, max value and editability options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/javascript_reference.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"absence_of_today\" widget=\"progressbar\" options=\"{'current_value': 'absence_of_today','max_value': 'total_employee','editable': false}\" />\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for GTIN\nDESCRIPTION: This regular expression is used to identify the Global Trade Item Number (GTIN) within a data string, specifically for a trade item unit product.  It looks for the AI `02` followed by 14 digits.  The expression is used for parsing data related to product packaging.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\"(02)(\\d{14})\"\n```\n\n----------------------------------------\n\nTITLE: XML Record View Definition\nDESCRIPTION: This XML snippet demonstrates the standard record structure for defining views in Odoo.  It includes examples for form and kanban views and follows naming conventions for XML IDs and field names for clarity and maintainability.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"model_name_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">model.name.view.form</field>\n    ...\n</record>\n\n<record id=\"model_name_view_kanban\" model=\"ir.ui.view\">\n    <field name=\"name\">model.name.view.kanban</field>\n    ...\n</record>\n```\n\n----------------------------------------\n\nTITLE: XML Record Declaration in Odoo\nDESCRIPTION: This snippet provides an example of the XML structure for declaring a record in Odoo, illustrating the proper order of attributes and conventions to follow when creating XML records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"view_id\" model=\"ir.ui.view\">\n    <field name=\"name\">view.name</field>\n    <field name=\"model\">object_name</field>\n    <field name=\"priority\" eval=\"16\"/>\n    <field name=\"arch\" type=\"xml\">\n        <tree>\n            <field name=\"my_field_1\"/>\n            <field name=\"my_field_2\" string=\"My Label\" widget=\"statusbar\" statusbar_visible=\"draft,sent,progress,done\" />\n        </tree>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font-Face in LESS for QWeb Reports\nDESCRIPTION: This LESS snippet demonstrates how to define a custom @font-face and create a CSS class for using the custom font in QWeb reports. It includes an example of loading a custom font file and defining font properties.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/reports.rst#2025-04-18_snippet_6\n\nLANGUAGE: LESS\nCODE:\n```\n@font-face {\n    font-family: 'MonixBold';\n    src: local('MonixBold'), local('MonixBold'), url(/your_module/static/fonts/MonixBold-Regular.otf) format('opentype');\n}\n\n.h1-title-big {\n    font-family: MonixBold;\n    font-size: 60px;\n    color: #3399cc;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ORM in Odoo Upgrade Script with Upgrade Utils (Python)\nDESCRIPTION: This upgrade script example shows how to use the Odoo ORM and upgrade utils to update partner names. It demonstrates searching for partners and updating their names using Python logic instead of SQL.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom odoo.upgrade import util\n\n_logger = logging.getLogger(__name__)\n\n\ndef migrate(cr, version):\n    env = util.env(cr)\n\n    partners = env[\"res.partner\"].search([])\n    for partner in partners:\n        partner.name += \"!\"\n\n    _logger.info(\"Updated %s partners\", len(partners))\n```\n\n----------------------------------------\n\nTITLE: Clicker Service State Management - JavaScript\nDESCRIPTION: Illustrates creating a reactive state within a service to manage the number of clicks in the clicker game. This state is accessible and modifiable by different components, ensuring data consistency across the application.  The service provides functions to update the state.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = reactive({ clicks: 0 });\n...\nreturn {\n   state,\n   increment(inc) {\n      state.clicks += inc\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Open Client Action in Popover - JavaScript\nDESCRIPTION: Demonstrates opening a client action in a popover using the `target: \"new\"` option within the `doAction` call. This prevents the action from taking over the entire screen and allows it to be displayed within a smaller window.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   type: \"ir.actions.client\",\n   tag: \"awesome_clicker.client_action\",\n   target: \"new\",\n   name: \"Clicker\"\n}\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Apps Search Filter Image\nDESCRIPTION: RST image directive showing the location and alt text for the apps search filter screenshot.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/apps_modules.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: apps_modules/apps-search-filter.png\n   :align: center\n   :alt: Add \"Extra\" filter in Odoo Apps\n```\n\n----------------------------------------\n\nTITLE: File Download Hyperlink in RST\nDESCRIPTION: Demonstrates how to create a download link for a file within the documentation using the download markup\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nDownload this :download:`module structure template <rst_guidelines/my_module.zip>` to start building your module.\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Variable Count of Items\nDESCRIPTION: This regular expression identifies a variable count of items. It looks for the Application Identifier (AI) `30` followed by up to 8 digits. The expression helps in extracting quantity data.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_9\n\nLANGUAGE: regex\nCODE:\n```\n\"(30)(\\d{0,8})\"\n```\n\n----------------------------------------\n\nTITLE: Defining Related Country Field in Odoo XML\nDESCRIPTION: Shows how to create a related field that mirrors the country value from a related partner record through a many2one relationship.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"field_real_estate_property_country_id\" model=\"ir.model.fields\">\n        <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n        <field name=\"name\">x_country_id</field>\n        <field name=\"field_description\">Buyer's Country</field>\n        <field name=\"ttype\">many2one</field>\n        <field name=\"relation\">res.country</field>\n        <field name=\"related\">x_partner_id.country_id</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Python Imports Ordering\nDESCRIPTION: This Python snippet illustrates the recommended order for importing modules in Odoo development. The snippet shows the order of imports: external libraries, Odoo modules, and Odoo addons.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# 1 : imports of python lib\nimport base64\nimport re\nimport time\nfrom datetime import datetime\n# 2 : imports of odoo\nimport odoo\nfrom odoo import Command, _, api, fields, models # alphabetically ordered\nfrom odoo.tools.safe_eval import safe_eval as eval\n# 3 : imports from odoo addons\nfrom odoo.addons.web.controllers.main import login_redirect\nfrom odoo.addons.website.models.website import slug\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Count of Trade Items\nDESCRIPTION: This regular expression identifies the count of trade items. It searches for the Application Identifier (AI) `37` followed by up to 8 digits.  This expression is used to extract the quantity in units for containers (AI 02).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-18_snippet_10\n\nLANGUAGE: regex\nCODE:\n```\n\"(37)(\\d{0,8})\"\n```\n\n----------------------------------------\n\nTITLE: Customer Statement Table Structure\nDESCRIPTION: RST table structure showing customer statement example with debits and credits.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. rst-class:: table-sm d-c-table\n\n+-------------------------+-------------------------+-----------------------+\n|Accounts Receivable      |Debit                    |Credit                 |\n+=========================+=========================+=======================+\n|Invoice 1                |100                      |                       |\n+-------------------------+-------------------------+-----------------------+\n|Partial payment 1/2      |                         |70                     |\n+-------------------------+-------------------------+-----------------------+\n|Invoice 2                |65                       |                       |\n+-------------------------+-------------------------+-----------------------+\n|Partial payment 2/2      |                         |30                     |\n+-------------------------+-------------------------+-----------------------+\n|Payment 2                |                         |65                     |\n+-------------------------+-------------------------+-----------------------+\n|Invoice 3                |50                       |                       |\n+-------------------------+-------------------------+-----------------------+\n|                         |                         |                       |\n+-------------------------+-------------------------+-----------------------+\n|Total to pay             |50                       |                       |\n+-------------------------+-------------------------+-----------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard URLs in APS\nDESCRIPTION: Example URLs to configure in the APS dashboard for payment processing. Includes base URL, return URL, and webhook URL patterns that need to be set up.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/amazon_payment_services.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://yourcompany.odoo.com/\nhttps://yourcompany.odoo.com/payment/aps/return\nhttps://yourcompany.odoo.com/payment/aps/webhook\n```\n\n----------------------------------------\n\nTITLE: Debug Mode URL Parameters\nDESCRIPTION: Different URL parameters for controlling debug mode functionality, including activation, deactivation, and special modes for assets and tests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/developer_mode.rst#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n?debug=1    // Activate debug mode\n?debug=0    // Deactivate debug mode\n?debug=assets // Activate with assets\n?debug=tests  // Activate with tests assets\n```\n\n----------------------------------------\n\nTITLE: Python Sample Model Definition\nDESCRIPTION: This snippet defines a simple Odoo model with two fields and a sample method that returns a dictionary. It demonstrates how server-side models are structured.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass message_of_the_day(models.Model):\n    _name = \"oepetstore.message_of_the_day\"\n\n    @api.model\n    def my_method(self):\n        return {\"hello\": \"world\"}\n\n    message = fields.Text(),\n    color = fields.Char(size=20),\n```\n\n----------------------------------------\n\nTITLE: Defining AccountAccountTag Model Documentation in reStructuredText\nDESCRIPTION: This snippet defines the structure for documenting the AccountAccountTag model using Sphinx's automodel directive. It specifies the model path and lists the fields to be documented.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/standard_modules/account/account_account_tag.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_account_tag.AccountAccountTag\n    :main:\n\n    .. autofield:: name\n    .. autofield:: applicability\n    .. autofield:: color\n    .. autofield:: active\n    .. autofield:: tax_negate\n    .. autofield:: country_id\n```\n\n----------------------------------------\n\nTITLE: Creating Bulleted Lists in Documentation - text\nDESCRIPTION: This snippet illustrates how to create a bulleted list using reStructuredText markup. However, it specifies that multiline items need to be properly indented for clarity.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation/rst_guidelines.rst#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- This is a bulleted list.\n- It has two items, the second\n  item uses two lines.\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Implementation in Owl XML\nDESCRIPTION: Example of a basic Dropdown component implementation with two dropdown items. The Dropdown uses slots for the toggler button and menu items.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/owl_components.rst#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Dropdown>\n  <t t-set-slot=\"toggler\">\n    <!-- \"toggler\" slot content is rendered inside a button -->\n    Click me to toggle the dropdown menu !\n  </t>\n  <!-- \"default\" slot content is rendered inside a div -->\n  <DropdownItem onSelected=\"selectItem1\">Menu Item 1</DropdownItem>\n  <DropdownItem onSelected=\"selectItem2\">Menu Item 2</DropdownItem>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Odoo Upgrades Documentation in reStructuredText\nDESCRIPTION: A reStructuredText table of contents directive that links to documentation about upgrade scripts and utilities for Odoo 17. The page is marked with a 'nosearch' directive to exclude it from search results.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/upgrades.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n\n========\nUpgrades\n========\n\n.. toctree::\n    :titlesonly:\n\n    upgrades/upgrade_scripts\n    upgrades/upgrade_utils\n```\n\n----------------------------------------\n\nTITLE: Displaying Salary Computation Tab in Odoo 17 Payslip (reStructuredText)\nDESCRIPTION: This snippet shows how to include an image of the Salary Computation tab in an Odoo 17 payslip form using reStructuredText syntax. It specifies the image file, alignment, and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/salary-comp-tab.png\n   :align: center\n   :alt: The fields filled out in the salary computation tab.\n```\n\n----------------------------------------\n\nTITLE: Displaying Menu Navigation in RST\nDESCRIPTION: RST syntax used to display menu navigation paths and interface elements for accessing various Odoo configuration settings.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/italy.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Settings --> General Settings`\n```\n\n----------------------------------------\n\nTITLE: Including Navbar Toggler Component in Custom Header XML\nDESCRIPTION: Adds the navbar toggler component to a custom header template using QWeb directives.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.navbar_toggler\">\n   <t t-set=\"_toggler_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Google Translate API in Odoo\nDESCRIPTION: RST documentation detailing the complete setup process for Google Translate integration with Odoo, including Google API Console configuration, project creation, API library setup, and Odoo configuration steps.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/integrations/google_translate.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n================\nGoogle Translate\n================\n\n*Google Translate* can be used to translate user generated text in the Odoo chatter.\n\nGoogle API console\n==================\n\nA majority of the setup for integrating *Google Translate* into Odoo is done with the *Google API\nconsole*. Once the following processes are complete, an *API key* is created to input in Odoo.\n\n.. seealso::\n   `Google Translate setup on Google <https://cloud.google.com/translate/docs/setup>`_\n```\n\nLANGUAGE: rst\nCODE:\n```\nCreate a new project\n--------------------\n\nTo get started, go to the `Google API Console <https://console.developers.google.com>`_. Then, log\nin with a *Google Workspace* account, if there is one. If not, log in with a personal Gmail account\n(this should match the email address that has billing attached to it).\n\nNext, click :guilabel:`Create Project` on the far-right of the :guilabel:`OAuth consent screen`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Payslips Menu in Odoo 17 (reStructuredText)\nDESCRIPTION: This snippet shows how to include an image of the Payslips menu in the Odoo 17 Payroll application using reStructuredText syntax. It specifies the image file, alignment, and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/payroll/payslips.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: payslips/payslips.png\n   :align: center\n   :alt: Payslips menu selection in Payroll.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SCSS Variable Assignment in Odoo\nDESCRIPTION: This snippet shows how SCSS variables are assigned in different files and the effect of the !default flag on variable assignments. It illustrates the priority of variable assignments based on the loading order of assets.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/scss_inheritance.rst#2025-04-18_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$foo: red !default;\n```\n\nLANGUAGE: scss\nCODE:\n```\n$foo: blue !default; // -> Already defined, line ignored.\n$bar: black !default; // -> Not defined yet, value assigned.\n```\n\nLANGUAGE: scss\nCODE:\n```\n.component {\n   color: $foo; // -> 'color: red;'\n   background: $bar; // -> 'background: black;'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding State Field with Selection Values in Odoo\nDESCRIPTION: Demonstrates adding a state field with multiple selection values, required constraint, no-copy option, and default value setting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstate = fields.Selection([\n    ('new', 'New'),\n    ('offer_received', 'Offer Received'),\n    ('offer_accepted', 'Offer Accepted'),\n    ('sold', 'Sold'),\n    ('canceled', 'Canceled')\n], required=True, copy=False, default='new')\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Item Linked to an Action in Odoo\nDESCRIPTION: This snippet demonstrates how to create a menu item in Odoo that links to a previously defined action. It utilizes the `menuitem` XML tag to define an action linkage.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem id=\"test_model_menu_action\" action=\"test_model_action\"/>\n```\n\n----------------------------------------\n\nTITLE: Unsupported Number Format Examples in CSV Import\nDESCRIPTION: Examples of number formats that will cause import failures in Odoo.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nABC 32.000,00\n$ (32.000,00)\n```\n\n----------------------------------------\n\nTITLE: Creating a See Also Reference in reStructuredText\nDESCRIPTION: This RST code creates a 'see also' reference to the 'Engineering change order' section in the PLM documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/plm/manage_changes/version_control.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   :ref:`Engineering change order <plm/eco>`\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Template in SCSS for Odoo Website Theme\nDESCRIPTION: Specifies the use of a custom header template in the website theme's SCSS variables.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/layout.rst#2025-04-18_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'header-template': 'airproof',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Mail Plugins\nDESCRIPTION: RST markup defining the structure and content of the Mail Plugins documentation, including table of contents, sections for pricing, and lead generation IAP service information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/integrations/mail_plugins.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n============\nMail Plugins\n============\n\n.. toctree::\n   :titlesonly:\n\n   mail_plugins/outlook\n   mail_plugins/gmail\n\nMail Plugins are connectors that bridge your mailbox with your Odoo database. With them, you can\ninteract with your Odoo database directly from your mailbox by:\n\n- Creating leads and centralizing prospects' emails into the CRM app.\n- Generating tasks in any Odoo project.\n- Creating tickets in the Helpdesk app.\n- Searching and storing insights on your contacts.\n\nMail Plugins are available for :doc:`Outlook <mail_plugins/outlook>` and :doc:`Gmail\n<mail_plugins/gmail>`.\n\n.. _mail_plugins/pricing:\n\nPricing\n=======\n\nMail Plugins are **free** to install and use.\n\nHowever, they can provide **Lead Enrichment**, which is part of a paid service known as **Lead\nGeneration**.\n\nMail plugins allow you to test Lead Enrichment for free, whether you connect the plugins to a\ndatabase or not. After a while, the plugins ask you to buy :doc:`../../essentials/in_app_purchase`\ncredits if you would like to keep using this service.\n\n.. _mail_plugins/lead-generation:\n\nLead Generation IAP service\n---------------------------\n\nLead Enrichment uses the *Lead Generation IAP service*. Each request consumes one *Lead Generation\ncredit*.\n\nTo buy credits, go to :menuselection:`Settings --> CRM --> Lead Enrichment --> Buy credits` and\nselect a package.\n\n.. note::\n   - If you are out of credits, the only information populated when clicking on the suggested\n     company is its website link and logo.\n   - Check out the `Lead Generation IAP service Privacy Policy\n     <https://iap.odoo.com/privacy#header_3>`_.\n\n.. seealso::\n   - :doc:`../../essentials/in_app_purchase`\n   - `Odoo Tutorials: Lead Enrichment <https://www.odoo.com/r/p73>`_\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for Module Scaffolding\nDESCRIPTION: Console command showing how to create a new module skeleton using Odoo's scaffolding feature, creating the module in a specified addons directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin scaffold my_module /addons/\n```\n\n----------------------------------------\n\nTITLE: Defining Abbreviations in reStructuredText\nDESCRIPTION: This RST code defines abbreviations for BoM (Bill of Materials) and ECO (Engineering Change Order) to be used throughout the document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/plm/manage_changes/version_control.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |BOM| replace:: :abbr:`BoM (Bill of Materials)`\n.. |BOMs| replace:: :abbr:`BoMs (Bills of Materials)`\n.. |ECO| replace:: :abbr:`ECO (Engineering Change Order)`\n.. |ECOs| replace:: :abbr:`ECOs (Engineering Change Orders)`\n```\n\n----------------------------------------\n\nTITLE: Python Know Your Builtins\nDESCRIPTION: This Python snippet emphasizes the importance of understanding and utilizing Python's built-in functions for writing concise and efficient code. It highlights the redundant use of a default value with `my_dict.get('key', None)` and recommends the simpler `my_dict.get('key')` when `None` is the desired default.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nvalue = my_dict.get('key', None) # very very redundant\nvalue = my_dict.get('key') # good\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Configuration URIs\nDESCRIPTION: URI template for configuring OAuth redirect in Google API Console. Must be modified with specific database name.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/google_oauth.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourdbname.odoo.com/google_gmail/confirm\n```\n\n----------------------------------------\n\nTITLE: Removing Previous Customer Filters\nDESCRIPTION: Helper method to remove existing customer filters before adding a new one\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst customerFilters = this.env.searchModel.getSearchItems((searchItem) =>\n  searchItem.isFromAwesomeKanban\n);\n\nfor (const customerFilter of customerFilters) {\n  if (customerFilter.isActive) {\n    this.env.searchModel.toggleSearchItem(customerFilter.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Content Structure for eLearning Documentation\nDESCRIPTION: ReStructuredText markup showing documentation header and sections for Odoo eLearning documentation, including course management, content creation, and publishing workflow.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/websites/elearning.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\neLearning\n=========\n\nThe **eLearning** app allows you to easily upload content, define learning objectives, manage\nattendees, assess students' progress, and even set up rewards.\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Odoo 17 Documentation Overview\nDESCRIPTION: A reStructuredText directive that configures the table of contents (toctree) for the Odoo 17 documentation overview section. The directive uses the 'titlesonly' option and includes the introduction page.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/overview.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   overview/introduction\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for CLOC with Configuration File\nDESCRIPTION: Console command showing how to use a configuration file with the CLOC feature to count lines of code.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/cli.rst#2025-04-18_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -c config.conf -d my_database\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo 17 Reporting Modules in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents (toc) for the reporting section of Odoo 17 documentation. It uses the reStructuredText toctree directive to list three reporting modules: allocation, OEE, and production analysis.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/reporting.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   reporting/allocation\n   reporting/oee\n   reporting/production_analysis\n```\n\n----------------------------------------\n\nTITLE: Defining Extended XML Templates for Pet Store\nDESCRIPTION: Complete XML template definitions including HomePage, MessageOfTheDay, PetToysList and individual PetToy templates.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePage\">\n        <div class=\"oe_petstore_homepage\">\n            <div class=\"oe_petstore_homepage_left\"></div>\n            <div class=\"oe_petstore_homepage_right\"></div>\n        </div>\n    </t>\n    <t t-name=\"MessageOfTheDay\">\n        <div class=\"oe_petstore_motd\">\n            <p class=\"oe_mywidget_message_of_the_day\"></p>\n        </div>\n    </t>\n    <t t-name=\"PetToysList\">\n        <div class=\"oe_petstore_pettoyslist\">\n        </div>\n    </t>\n    <t t-name=\"PetToy\">\n        <div class=\"oe_petstore_pettoy\">\n            <p><t t-esc=\"item.name\"/></p>\n            <p><img t-att-src=\"'data:image/jpg;base64,'+item.image\"/></p>\n        </div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Configuring Warehouse One-Step Shipments in Odoo\nDESCRIPTION: Demonstrates how to configure warehouse settings for one-step incoming and outgoing shipments through the Odoo Inventory configuration interface\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_one_step.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Inventory app --> Configuration --> Warehouses`\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Tip Directive for Custom Filter Creation\nDESCRIPTION: This RST tip directive provides instructions on how to create a custom filter in the Maintenance Calendar.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/maintenance/maintenance_calendar.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To add a custom filter to the :guilabel:`Maintenance Calendar`, click :guilabel:`Add Custom\n   Filter`, under the :guilabel:`Filters` section of the drop-down menu. This opens an\n   :guilabel:`Add Custom Filter` pop-up window.\n\n   From this pop-up window, configure the properties of the new rule for the filter. Once ready,\n   click :guilabel:`Add`.\n```\n\n----------------------------------------\n\nTITLE: RST Version Note Declaration\nDESCRIPTION: ReStructuredText note directive indicating the version and last revision date of the document.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/terms/odoo_sh_terms.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note:: Version 1 - Last revision: October 3, 2017.\n```\n\n----------------------------------------\n\nTITLE: Setting Product Delivery Lead Time in Odoo RST\nDESCRIPTION: This RST snippet demonstrates the navigation path and steps to set a delivery lead time for a product's subcontractor in Odoo. It includes instructions for accessing the product's page, adding a subcontractor, and specifying the lead time.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/subcontracting/basic_subcontracting_lead_times.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo set a delivery lead time for a product's subcontractor, navigate to :menuselection:`Inventory app\n--> Products --> Products`, and select a subcontracted product.\n\nThen, select the :guilabel:`Purchase` tab on the product's page. If the subcontractor has not\nalready been added as a vendor, do so now by clicking :guilabel:`Add a line`, and selecting the\nsubcontractor in the :guilabel:`Vendor` column.\n\nOnce the subcontractor has been added, enter the number of days it takes them to manufacture and\ndeliver the product, in the :guilabel:`Delivery Lead Time` column.\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Changes - Contributing Section\nDESCRIPTION: Shows the flattening of documentation hierarchy by moving introduction_guide up one level\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/12.0.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncontributing/documentation/introduction_guide.rst contributing/documentation.rst\n```\n\n----------------------------------------\n\nTITLE: Accessing Time Off Reports by Type in Odoo\nDESCRIPTION: This snippet outlines how to access and interpret time off reports by type in Odoo's Time Off app, including navigating to the report and understanding the different view options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/time_off.rst#2025-04-18_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\nTo view a list of all time off, organized by time off type, navigate to :menuselection:`Time Off app\n--> Reporting --> by Type`. This shows all time off requests in a default bar chart.\n\nHover over a bar to view the :guilabel:`Duration (Days)` of that specific time off type.\n\nClick on a bar to go to a detailed list view of all the time off requests for that time off type.\n\nEach request is listed, with the following information displayed: the :guilabel:`Employee`,\n:guilabel:`Number of Days`, :guilabel:`Request Type`, :guilabel:`Start Date`, :guilabel:`End Date`,\n:guilabel:`Status`, and the :guilabel:`Description`.\n```\n\n----------------------------------------\n\nTITLE: GST API Access Configuration\nDESCRIPTION: Steps to enable API access on GST portal and configure Indian GST Service in Odoo for return filing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/india.rst#2025-04-18_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n1. Login to GST portal\n2. Go to My Profile\n3. Select Manage API Access\n4. Enable API access\n5. Set Duration (recommended 30 days)\n6. In Odoo: Go to Accounting > Configuration > Settings > Indian GST Service\n7. Enter GST Username and validate with OTP\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image in RST Documentation\nDESCRIPTION: This RST code inserts an image of the sidebar button used to toggle the operator panel in the Shop Floor module, including alignment and alt text.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing/shop_floor/shop_floor_overview.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: shop_floor_overview/sidebar-button.png\n   :align: center\n   :alt: The \"sidebar\" button, which is used to toggle the operator panel on or off.\n```\n\n----------------------------------------\n\nTITLE: Renaming Documentation Guidelines File\nDESCRIPTION: Shows the renaming of a documentation guidelines file from 'guidelines.rst' to 'rst_guidelines.rst' in the contributing/documentation directory\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/11.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncontributing/documentation/guidelines.rst contributing/documentation/rst_guidelines.rst  # guidelines --> rst_guidelines\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Pay Now Button\nDESCRIPTION: Shows an image of the Pay Now button on invoice in Customer Portal.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/payments/online.rst#2025-04-18_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: online/pay-now.png\n   :alt: \"Pay now\" button on an invoice in the Customer Portal.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in RST for Manufacturing Documentation\nDESCRIPTION: This RST code snippet defines the table of contents for the Manufacturing documentation. It includes sections for basic setup, advanced configuration, workflows, shop floor, subcontracting, and reporting.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/inventory_and_mrp/manufacturing.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   manufacturing/basic_setup\n   manufacturing/advanced_configuration\n   manufacturing/workflows\n   manufacturing/shop_floor\n   manufacturing/subcontracting\n   manufacturing/reporting\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image Block for Certificate Documentation\nDESCRIPTION: Documentation block showing how to include an image of the EDI Certificate wizard in the documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/peru.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: peru/peru-Certificate.png\n   :alt: EDI Certificate wizard.\n```\n\n----------------------------------------\n\nTITLE: Directives for Document Structure\nDESCRIPTION: reStructuredText directives used for document organization and cross-referencing\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seealso::\n   - :ref:`Create a new account <chart-of-account/create>`\n   - :doc:`../../essentials/search`\n\n.. _l10n_us/taxes:\n\nTaxes\n=====\n\n```\n\n----------------------------------------\n\nTITLE: Note Block in RestructuredText for Extra Taxes Documentation\nDESCRIPTION: RestructuredText note directive providing guidance on country-specific tax computations\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. note::\n   The method to compute these taxes varies across different countries. We recommend consulting your\n   country's regulations to understand how to calculate them for your business.\n```\n\n----------------------------------------\n\nTITLE: Important Notice Directive\nDESCRIPTION: reStructuredText directive for highlighting important information about AvaTax availability\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/fiscal_localizations/united_states.rst#2025-04-18_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. important::\n   AvaTax is available for integration with databases/companies that have locations in the United\n   States and Canada. Reference the :ref:`avatax/fiscal_country` documentation for more information.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in reStructuredText for Odoo.sh Introduction\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in a reStructuredText document. It specifies the video ID, alignment, width, and height parameters for proper display.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/odoo_sh/overview/introduction.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. youtube:: QuNsa9n9PMg\n    :align: right\n    :width: 700\n    :height: 394\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Collaboration\nDESCRIPTION: This snippet provides configuration commands for Git to ensure proper handling of line-endings and to specify a commit template for collaborative workflows.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/documentation.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global core.autocrlf input\n$ git config commit.template `pwd`/commit_template.txt\n```\n\n----------------------------------------\n\nTITLE: Wire Transfer Documentation Structure in RST\nDESCRIPTION: ReStructuredText markup showing the documentation structure for wire transfer functionality, including configuration steps, payment instructions, and related images\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/wire_transfer.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==============\nWire transfers\n==============\n\nThe **Wire transfer** payment method allows you to provide payment instructions to your customers,\nsuch as the bank details and communication. They are displayed:\n\n- at the end of the checkout process, once the customer has selected :guilabel:`Wire transfer` as a\n  payment method and clicked the :guilabel:`Pay now` button:\n\n  .. image:: wire_transfer/payment_instructions_checkout.png\n     :alt: Payment instructions at checkout\n\n- on the customer portal:\n\n  .. image:: wire_transfer/payment_instructions_portal.png\n     :alt: Payment instructions on the customer portal\n```\n\n----------------------------------------\n\nTITLE: Defining Website View Configuration in XML\nDESCRIPTION: XML configuration to activate or deactivate specific website views. This snippet shows how to configure view templates with corresponding properties such as 'active' status.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<we-button title=\"...\"\n   data-name=\"...\"\n   data-customize-website-views=\"website.template_header_default\"\n   data-customize-website-variable=\"'...'\"\n   data-img=\"...\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"...\" inherit_id=\"...\" name=\"...\" active=\"True\"/>\n<template id=\"...\" inherit_id=\"...\" name=\"...\" active=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Time Off Reports by Employee in Odoo\nDESCRIPTION: This snippet describes how to access and interpret time off reports by employee in Odoo's Time Off app, including navigating to the report and understanding the different view options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/hr/time_off.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nTo view a report of employee time off requests, navigate to :menuselection:`Time Off app -->\nReporting --> by Employee`.\n\nThe default report presents the current year's data in a list view, displaying all the employees in\nalphabetical order. Each employee's line is collapsed by default. To expand a line, click anywhere\non the line.\n\nThe view expands, and has the time off requests organized by time off type. Click anywhere on a time\noff type line to expand it, and view all the individual time off requests that fall under that type.\n\nThe information shown in the list includes: the :guilabel:`Employee` name, :guilabel:`Number of\nDays` off requested, the :guilabel:`Start Date`, :guilabel:`End Date`, :guilabel:`Status`, and\n:guilabel:`Description`.\n```\n\n----------------------------------------\n\nTITLE: Creating Image Reference in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create an image reference with alt text in reStructuredText. It's used multiple times in the document to include screenshots of error messages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: on_premise/error-message-sub-code.png\n   :alt: Database registration error message\n```\n\n----------------------------------------\n\nTITLE: Defining SCSS Mixins and Functions\nDESCRIPTION: Shows how to create SCSS mixins and functions using the o- prefix convention with optional scoped arguments. Includes examples of avatar mixin and color inversion function.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development/coding_guidelines.rst#2025-04-18_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n@mixin o-avatar($-size: 1.5em, $-radius: 100%) {\n   width: $-size;\n   height: $-size;\n   border-radius: $-radius;\n}\n\n@function o-invert-color($-color, $-amount: 100%) {\n   $-inverse: change-color($-color, $-hue: hue($-color) + 180);\n\n   @return mix($-inverse, $-color, $-amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregation to List View Fields in XML\nDESCRIPTION: Shows how to add sum and average aggregations to numeric fields in a list view. These aggregations are displayed at the bottom of the column.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"sent\" sum=\"Total\" />\n<field name=\"clicks_ratio\" avg=\"Average\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Document Header\nDESCRIPTION: ReStructuredText markup defining document reference tag and title section for CLA documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/legal/cla.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _cla:\n\n=============================\nContributor License Agreement\n=============================\n```\n\n----------------------------------------\n\nTITLE: Starting Odoo Server with Addons Path\nDESCRIPTION: This command starts the Odoo server, specifying the addons path which includes the default 'addons' directory and the custom 'my-modules' directory. This allows Odoo to find and load modules from both locations.  This command assumes that 'odoo-bin' is accessible from the current directory.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/website.rst#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"$ ./odoo-bin --addons-path addons,my-modules\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Webhook URL\nDESCRIPTION: Example URL format for configuring Razorpay webhook endpoint in Odoo. The webhook URL should be your Odoo database URL followed by the payment webhook path.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/payment_providers/razorpay.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.odoo.com/payment/razorpay/webhook\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Example command for pushing committed changes to a fork's branch on GitHub, which sets up the upstream tracking for future pushes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git push -u dev {CURRENT_BRANCH}-fix-invoices-xyz\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Changes - Administration Section\nDESCRIPTION: Records the migration of files within the administration section during doc-apocalypse (#945)\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/12.0.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadministration/odoo_sh/documentation.rst administration/odoo_sh.rst\n```\n\n----------------------------------------\n\nTITLE: Updating PATH Variable on Linux and macOS\nDESCRIPTION: Instructions for updating the system's PATH variable on Linux and macOS to include the Git installation path, allowing users to access Git commands from the command line. The default installation path is typically /usr/bin/git.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/install_git.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFollow the `guide to update the PATH variable on Linux and macOS <https://unix.stackexchange.com/a/26059>`_ with the installation path of Git (by default :file:`/usr/bin/git`).\n```\n\n----------------------------------------\n\nTITLE: Moving Finance Module Documentation Paths\nDESCRIPTION: Relocates accounting documentation from payables/pay directory to payments directory while maintaining the same filename\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/saas-16.2.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/pay/trusted_accounts.rst applications/finance/accounting/payments/trusted_accounts.rst\n```\n\n----------------------------------------\n\nTITLE: Restructuring Odoo 17 Inventory Documentation File Paths\nDESCRIPTION: This snippet contains a list of file path changes for Odoo 17 documentation, specifically for inventory and MRP modules. It shows the old file paths and their corresponding new locations, indicating a reorganization of the documentation structure.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/redirects/16.0.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/inventory_and_mrp/inventory/management/lots_serial_numbers.rst applications/inventory_and_mrp/inventory/product_management/product_tracking.rst\napplications/inventory_and_mrp/inventory/management/lots_serial_numbers/differences.rst applications/inventory_and_mrp/inventory/product_management/product_tracking/differences.rst\napplications/inventory_and_mrp/inventory/product_management/product_tracking/differences.rst applications/inventory_and_mrp/inventory/product_management/product_tracking.rst\napplications/inventory_and_mrp/inventory/management/lots_serial_numbers/serial_numbers.rst applications/inventory_and_mrp/inventory/product_management/product_tracking/serial_numbers.rst\napplications/inventory_and_mrp/inventory/management/lots_serial_numbers/lots.rst applications/inventory_and_mrp/inventory/product_management/product_tracking/lots.rst\napplications/inventory_and_mrp/inventory/management/lots_serial_numbers/expiration_dates.rst applications/inventory_and_mrp/inventory/product_management/product_tracking/expiration_dates.rst\napplications/inventory_and_mrp/inventory/management/inventory_adjustments.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/count_products.rst\napplications/inventory_and_mrp/inventory/management/inventory_adjustments/count_products.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/count_products.rst\napplications/inventory_and_mrp/inventory/management/warehouses.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management.rst\napplications/inventory_and_mrp/inventory/management/warehouses/resupply_warehouses.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/resupply_warehouses.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/resupply_warehouses.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/resupply_warehouses.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/storage_category.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/storage_category.rst\napplications/inventory_and_mrp/inventory/management/warehouses/warehouse_replenishment_transfer.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouse_replenishment_transfer.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouse_replenishment_transfer.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/warehouse_replenishment_transfer.rst\napplications/inventory_and_mrp/inventory/management/warehouses/warehouses_locations.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouses_locations.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouses_locations.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouses.rst\napplications/inventory_and_mrp/inventory/management/warehouses/create_a_second_warehouse.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/create_a_second_warehouse.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/create_a_second_warehouse.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouses.rst\napplications/inventory_and_mrp/inventory/management/warehouses/use_locations.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/use_locations.rst\napplications/inventory_and_mrp/inventory/routes/concepts/use_routes.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/use_routes.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/use_routes.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/use_routes.rst\napplications/inventory_and_mrp/inventory/management/reporting.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation.rst\napplications/inventory_and_mrp/inventory/management/reporting/inventory_valuation_config.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/inventory_valuation_config.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/inventory_valuation_config.rst applications/inventory_and_mrp/inventory/product_management/inventory_valuation/inventory_valuation_config.rst\napplications/inventory_and_mrp/inventory/management/reporting/using_inventory_valuation.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/using_inventory_valuation.rst\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/using_inventory_valuation.rst applications/inventory_and_mrp/inventory/product_management/inventory_valuation/using_inventory_valuation.rst\napplications/inventory_and_mrp/inventory/management/reporting/integrating_landed_costs.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/integrating_landed_costs.rst\n```\n\n----------------------------------------\n\nTITLE: Odoo Theme Module Declaration in __manifest__.py\nDESCRIPTION: This snippet demonstrates the declaration of an Odoo module using the __manifest__.py file. It contains essential metadata such as name, description, category, version, author, license, dependencies, data files, and assets. These attributes configure the module within the Odoo environment.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/theming.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   {\n      'name': 'Airproof Theme',\n      'description': '...',\n      'category': 'Website/Theme',\n      'version': '{BRANCH}.0',\n      'author': '...',\n      'license': '...',\n      'depends': ['website'],\n      'data': [\n         # ...\n      ],\n      'assets': {\n         # ...\n      },\n   }\n```\n\n----------------------------------------\n\nTITLE: Applying Patch to Multiple Objects\nDESCRIPTION: Explains the method for applying the same patch to multiple objects using functions to uniquely generate the extension object due to limitations with cloning extensions that utilize the super keyword.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/patching_code.rst#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj1 = {\n  method() {\n    doSomething();\n  },\n};\n\nconst obj2 = {\n  method() {\n    doThings();\n  },\n};\n\nfunction createExtensionObj() {\n  return {\n    method() {\n      super.method();\n      doCommonThings();\n    },\n  };\n}\n\npatch(obj1, createExtensionObj());\npatch(obj2, createExtensionObj());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {\n  method1() {\n    doSomething();\n  },\n  method2() {\n    doAnotherThing();\n  },\n};\n\nconst ext1 = {\n  method1() {\n    super.method1();\n    doThings();\n  },\n};\n\nconst invalid_ext2 = {\n  ...ext1, // this will not work: super will not refer to the correct object in methods coming from ext1\n  method2() {\n    super.method2();\n    doOtherThings();\n  },\n};\n\npatch(object, invalid_ext2);\nobject.method1(); // throws: Uncaught TypeError: (intermediate value).method1 is not a function\n\nconst valid_ext2 = {\n  method2() {\n    super.method2();\n    doOtherThings();\n  },\n};\n\npatch(object, ext1); // first patch base extension\npatch(object, valid_ext2); // then the new one\nobject.method1(); // works as expected\n```\n\n----------------------------------------\n\nTITLE: Handling specific error types in JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle specific error classes within a try-catch block in JavaScript. It checks if the caught error is an instance of a specific error class (MyErrorClass) and re-throws it if it's not the expected type, allowing for targeted error handling.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/error_handling.rst#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  doStuff();\n} catch (e) {\n  if (!(e instanceof MyErrorClass)) {\n    throw e; // caught an error we can't handle, rethrow\n  }\n  // handle MyErrorClass\n}\n```\n\n----------------------------------------\n\nTITLE: SCSS Styling for Custom Shape\nDESCRIPTION: This SCSS snippet defines the styles for a custom shape, merging it into the `$o-bg-shapes` map under the 'illustration' category.  It configures the shape's position, size, colors, and repeat behavior. `map-merge` is used to ensure existing styles are preserved.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n   $o-bg-shapes: map-merge($o-bg-shapes,\n       (\n           'illustration': map-merge(\n               map-get($o-bg-shapes, 'illustration') or (),\n               (\n                   'hexagons/01': ('position': center center, 'size': auto 100%, 'colors': (1), 'repeat-x': true, 'repeat-y': true),\n               ),\n           ),\n       )\n   );\n```\n\n----------------------------------------\n\nTITLE: SCSS Default Palette Definition\nDESCRIPTION: This SCSS code defines the default color palette used by Odoo's default shapes. The color palette is a map where each key represents a color reference and the value is the corresponding hexadecimal color code. This allows for easy adaptation of colors when the palette changes.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n        default_palette = {\n            '1': '#3AADAA',\n            '2': '#7C6576',\n            '3': '#F6F6F6',\n            '4': '#FFFFFF',\n            '5': '#383E45',\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Trip Model with Activity Tracking\nDESCRIPTION: Implementation of a BusinessTrip model that inherits mail.thread and mail.activity.mixin to enable activity tracking and messaging features.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread', 'mail.activity.mixin']\n    _description = 'Business Trip'\n\n    name = fields.Char()\n    # [...]\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity Types List Image in RST\nDESCRIPTION: RST code for inserting an image of the list of configured activity types. This snippet includes alignment and alt text for the image.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/activities.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: activities/activity-list.png\n   :align: center\n   :alt: The list of activity types already configured and available.\n```\n\n----------------------------------------\n\nTITLE: Accessing Odoo Database Manager URL in reStructuredText\nDESCRIPTION: This snippet demonstrates how to format a URL for accessing the Odoo database manager in reStructuredText. It's used to provide instructions for duplicating a database.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n(`<odoo-server>/web/database/manager`)\n```\n\n----------------------------------------\n\nTITLE: Restricting Team Leave Filter Access in Odoo XML\nDESCRIPTION: XML configuration showing how to restrict visibility of team leave filters to managers only in hr_leave_reports.xml\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/restrict_data_access.rst#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"team_id\" groups=\"hr_holidays.group_hr_holidays_manager\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Template\nDESCRIPTION: Demonstrates how to render a QWeb template within an Odoo widget using the QWeb.render method.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        this.$el.append(QWeb.render(\"HomePageTemplate\"));\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: SCSS Adding Extra Colors Mapping\nDESCRIPTION: This SCSS snippet demonstrates how to add an extra color variant to the shape's template while preserving the original.  The `add-extra-shape-colors-mapping` function is used to create a 'second' variant of the 'Zigs/06' shape, remapping colors 4 and 5.  This allows for maintaining original styling while adding new color options.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/howtos/website_themes/shapes.rst#2025-04-18_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n   $o-bg-shapes: add-extra-shape-colors-mapping('web_editor', 'Zigs/06', 'second', (4: 3, 5: 1));\n```\n\n----------------------------------------\n\nTITLE: Accessing Sub Registries in JavaScript\nDESCRIPTION: This snippet illustrates how to access sub-registries within the main registry using the `category` method.  It imports the root `registry` from `@web/core/registry` and then accesses the 'fields', 'services', and 'views' sub-registries, creating them if they don't already exist.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/frontend/registries.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst fieldRegistry = registry.category(\"fields\");\nconst serviceRegistry = registry.category(\"services\");\nconst viewRegistry = registry.category(\"views\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Odoo - Java\nDESCRIPTION: This Java snippet authenticates with an Odoo instance using the provided database name, username, and password. It uses the Apache XML-RPC library to call the 'authenticate' method and returns the user ID (uid).\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nint uid = (int)client.execute(common_config, \"authenticate\", asList(db, username, password, emptyMap()));\n```\n\n----------------------------------------\n\nTITLE: Defining a Specific Form Action for a Product\nDESCRIPTION: This snippet showcases how to configure a window action to open a specific product's form view in a new dialog. It includes properties for the action type, model, view, and target.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/actions.rst#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ir.actions.act_window\",\n    \"res_model\": \"product.product\",\n    \"views\": [[False, \"form\"]],\n    \"res_id\": a_product_id,\n    \"target\": \"new\",\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Lists with t-foreach Directive - XML\nDESCRIPTION: This XML snippet employs the t-foreach directive to iterate over a list named 'names' and bind each item to the variable 'name'. It showcases how to render each item dynamically.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    <t t-foreach=\"names\" t-as=\"name\">\n        <div>\n            Hello <t t-esc=\"name\"/>\n        </div>\n    </t>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Stat Button with Custom Styling in Odoo XML\nDESCRIPTION: This example shows how to create a stat button in Odoo XML with custom styling. It includes classes for button styling, icon display, and formatted text layout within the button.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/generic_attribute_class.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"ACTION\" class=\"oe_stat_button\" icon=\"FONT_AWESOME\" help=\"HELP\">\n   <div class=\"o_field_widget o_stat_info\">\n      <span class=\"o_stat_value\"><FIELD/></span>\n      <span class=\"o_stat_text\">TEXT</span>\n   </div>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Sending Invoices by Post in Odoo\nDESCRIPTION: This RST snippet describes the process of sending an invoice via Snailmail in Odoo. It includes instructions on selecting the 'Send by Post' option and emphasizes the importance of correct address information.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/snailmail.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nOpen your invoice, click on :guilabel:`Send & Print` and select :guilabel:`Send by Post`. Make sure\nyour customer's address is set correctly, including the country, before sending the letter.\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet shows how to create a table of contents in reStructuredText. It's used at the end of the document to list additional related topics.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise.rst#2025-04-18_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n   on_premise/packages\n   on_premise/source\n   on_premise/update\n   on_premise/deploy\n   on_premise/email_gateway\n   on_premise/geo_ip\n   on_premise/community_to_enterprise\n```\n\n----------------------------------------\n\nTITLE: Odoo Module Manifest Example\nDESCRIPTION: This Python code snippet provides an example of a manifest file for an Odoo module, detailing how to include master and demo data as well as dependencies.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\n{\n    \"name\": \"Real Estate\",\n    \"depends\": [\n        ...\n    ],\n    \"data\": [\n        \"security/ir.model.access.csv\",  # CSV and XML files are loaded at the same place\n        \"views/estate_property_offer_views.xml\",  # Views are data too\n        \"data/master_data.xml\",  # Split the data in multiple files depending on the model\n    ],\n    \"demo\": [\n        \"demo/demo_data.xml\",\n    ]\n    \"application\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Computed Values in XML\nDESCRIPTION: This XML snippet shows how to compute a field's value using Python expressions during the loading of the record.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"year\" eval=\"datetime.now().year+1\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Odoo via XML-RPC API\nDESCRIPTION: Shows how to delete records using the 'unlink' method and verify the deletion using the 'search' method. Examples are provided in multiple programming languages.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])\n# check if the deleted record is still in the database\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])\n# check if the deleted record is still in the database\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'unlink', array(array($id)));\n// check if the deleted record is still in the database\n$models->execute_kw(\n    $db, $uid, $password, 'res.partner', 'search', array(array(array('id', '=', $id)))\n);\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"unlink\",\n    asList(asList(id))));\n// check if the deleted record is still in the database\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search\",\n    asList(asList(asList(\"id\", \"=\", 78)))\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar result bool\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"unlink\",\n    []any{\n        []int64{id},\n    },\n}, &result); err != nil {\n    log.Fatal(err)\n}\n// check if the deleted record is still in the database\nvar record []any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search\",\n    []any{[]any{\n        []any{\"id\", \"=\", id},\n    }},\n}, &record); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: OSS Report Generation RST Directive\nDESCRIPTION: RestructuredText directive for generating OSS sales and import reports in Odoo's accounting module.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes/eu_distance_selling.rst#2025-04-18_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. menuselection:`Accounting --> Reporting --> Tax Report`\n```\n\n----------------------------------------\n\nTITLE: Exporting People with Company Relationships from PostgreSQL to CSV for Odoo Import\nDESCRIPTION: SQL command to export person data from PostgreSQL to CSV with External IDs and relationships to companies. The command creates External IDs for people and references company External IDs to maintain relationships.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/essentials/export_import_data.rst#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n> copy (select 'person_'||id as \"External ID\",person_name as \"Name\",'False' as \"Is a Company\",'company_'||company_id as \"Related Company/External ID\" from persons) TO '/tmp/person.csv' with CSV\n```\n\n----------------------------------------\n\nTITLE: Defining Record Rule in Odoo 17 XML\nDESCRIPTION: This XML snippet defines a record rule in Odoo 17.  It sets the domain force to allow access only if the current user is the owner of the record or if the record is not assigned to any user, effectively restricting access to exclusive properties.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/restrict_data_access.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"rule_id\" model=\"ir.rule\">\n    <field name=\"name\">A description of the rule's role</field>\n    <field name=\"model_id\" ref=\"model_to_manage\"/>\n    <field name=\"perm_read\" eval=\"False\"/>\n    <field name=\"groups\" eval=\"[Command.link(ref('base.group_user'))]\"/>\n    <field name=\"domain_force\">[\n        '|', ('user_id', '=', user.id),\n             ('user_id', '=', False)\n    ]</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branch\nDESCRIPTION: This snippet demonstrates creating a new branch based on the current branch for implementing changes. The branch name is prefixed by the current branch and suffixed by the user’s handle in official contributions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/contributing/development.rst#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git switch -c {CURRENT_BRANCH}-fix-invoices\n$ git switch -c {CURRENT_BRANCH}-fix-invoices-xyz\n```\n\n----------------------------------------\n\nTITLE: Configuring Automation Rule for Property Creation\nDESCRIPTION: XML configuration for creating automation rules and server actions to automatically create property records when sale orders are confirmed.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/importable_modules.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_x_estate_property_create_from_sale_order\" model=\"ir.actions.server\">\n    <field name=\"name\">Create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"state\">code</field>\n    <field name=\"code\"><![CDATA[\nfor order in records:\n    property_type = env['x_estate.property.type'].sudo().search([('x_name', '=', 'Other')], limit=1)\n    property = env['x_estate.property'].sudo().create({\n        'x_name': order.name,\n        'x_expected_price': 0,\n        'x_selling_price': 0,\n        'x_sale_order_id': order.id,\n        'x_property_type_id': property_type.id,\n    })\n    ]]></field>\n</record>\n\n<record id=\"automation_rule_x_estate_property_create_from_sale_order\" model=\"base.automation\">\n    <field name=\"name\">Create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"trigger\">on_state_set</field>\n    <field name=\"trg_selection_field_id\" ref=\"sale.selection__sale_order__state__sale\"/>\n    <field name=\"trigger_field_ids\" eval=\"[(4, ref('sale.field_sale_order__state'))]\"/>\n    <field name=\"action_server_ids\" eval=\"[(4, ref('estate.action_x_estate_property_create_from_sale_order'))]\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Computed Field in Odoo\nDESCRIPTION: Demonstrates how to create a computed field that calculates a value based on another field using the @api.depends decorator\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestComputed(models.Model):\n    _name = \"test.computed\"\n\n    total = fields.Float(compute=\"_compute_total\")\n    amount = fields.Float()\n\n    @api.depends(\"amount\")\n    def _compute_total(self):\n        for record in self:\n            record.total = 2.0 * record.amount\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Domain Expression in Odoo Accounting\nDESCRIPTION: Example of account prefix matching with arithmetic expressions, showing how to match accounts by prefix and handle credit/debit balances.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/reporting/customize.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n21D + 10\\(101, 102)C - 5\\(57)\n```\n\n----------------------------------------\n\nTITLE: Applying Field-Level Decoration in List View XML\nDESCRIPTION: Demonstrates how to apply conditional styling to specific fields in a list view. The decoration can be based on field values or other conditions.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"name\" decoration-bf=\"1\"/>\n<field name=\"quantity\" decoration-info=\"state == 'draft'\"/>\n```\n\n----------------------------------------\n\nTITLE: Computed Field with Dotted Path Dependency in Odoo\nDESCRIPTION: This snippet shows how to define a computed field with a dotted path dependency, using sub-fields in Odoo. This allows tracking dependencies on related records.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.depends('line_ids.value')\ndef _compute_total(self):\n    for record in self:\n        record.total = sum(line.value for line in record.line_ids)\n```\n\n----------------------------------------\n\nTITLE: Overriding Action in Estate Property\nDESCRIPTION: This snippet extends the 'estate.property' model in the 'estate_account' module to customize the action triggered by the 'Sold' button. The overridden method calls its super function to maintain existing functionality.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/13_other_module.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom odoo import models\n\nclass InheritedModel(models.Model):\n    _inherit = \"inherited.model\"\n\n    def inherited_action(self):\n        return super().inherited_action()\n```\n\n----------------------------------------\n\nTITLE: Journal Entry Example in Table Format\nDESCRIPTION: Sample journal entry table showing how a $1000 invoice is split into installments with different due dates using payment terms. Demonstrates account receivable entries with 30% due immediately and 70% due end of following month.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/customer_invoices/payment_terms.rst#2025-04-18_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n+----------------------+-------------+---------+---------+\n| Account              | Due date    | Debit   | Credit  |\n+======================+=============+=========+=========+\n| Account Receivable   | February 21 | 300     |         |\n+----------------------+-------------+---------+---------+\n| Account Receivable   | March 31    | 700     |         |\n+----------------------+-------------+---------+---------+\n| Product Sales        |             |         | 1000    |\n+----------------------+-------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Registering Client Action\nDESCRIPTION: Registers the HomePage widget as a client action to make it available through the menu system.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/web.rst#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninstance.web.client_actions.add(\n    'petstore.homepage', 'instance.oepetstore.HomePage');\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Tip Directive for Switching Odoo Editions\nDESCRIPTION: This snippet uses the 'tip' directive to provide information about switching from Odoo Community to Enterprise edition, with a link to the relevant documentation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration.rst#2025-04-18_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. tip::\n   :doc:`Switch from Community to Enterprise <administration/on_premise/community_to_enterprise>` at\n   any time (except for the source install).\n```\n\n----------------------------------------\n\nTITLE: Implementing Onchange in Odoo Model\nDESCRIPTION: Demonstrates how to implement an onchange decorator in an Odoo model to update name and description fields automatically when a partner is selected. Shows field definitions and onchange method implementation.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestOnchange(models.Model):\n    _name = \"test.onchange\"\n\n    name = fields.Char(string=\"Name\")\n    description = fields.Char(string=\"Description\")\n    partner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n\n    @api.onchange(\"partner_id\")\n    def _onchange_partner_id(self):\n        self.name = \"Document for %s\" % (self.partner_id.name)\n        self.description = \"Default description for %s\" % (self.partner_id.name)\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Model and One2many Relationship\nDESCRIPTION: This Python code defines two models, `TestModel` and `TestModelLine`, and establishes a One2many relationship between them using the `line_ids` field. The `TestModelLine` is linked to the `TestModel` via the `model_id` field.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    description = fields.Char()\n    line_ids = fields.One2many(\"test_model_line\", \"model_id\")\n\n\nclass TestModelLine(models.Model):\n    _name = \"test_model_line\"\n    _description = \"Test Model Line\"\n\n    model_id = fields.Many2one(\"test_model\")\n    field_1 = fields.Char()\n    field_2 = fields.Char()\n    field_3 = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Launching Odoo Server with odoo-bin Console\nDESCRIPTION: Runs the Odoo server using odoo-bin, specifying directories for addons and a database. It assumes dependencies are pre-installed and directories correctly set. Essential for local server testing.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/setup_guide.rst#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo/\n$ ./odoo-bin --addons-path=\"addons/,../enterprise/,../tutorials\" -d rd-demo\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in Odoo Reconciliation Models\nDESCRIPTION: Regular expressions can be used to search and validate data within reconciliation models. This functionality requires setting the Transaction Type to Match Regex and adding the appropriate expression pattern.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/bank/reconciliation_models.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTo use regular expressions in your reconciliation models:\\n1. Set Transaction Type to Match Regex\\n2. Add your expression pattern\\n3. Odoo will automatically retrieve matching transactions\n```\n\n----------------------------------------\n\nTITLE: Installing rtlcss on Linux\nDESCRIPTION: Command to install rtlcss globally using npm on Linux systems.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/administration/on_premise/source.rst#2025-04-18_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ sudo npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Value for a Field in Odoo\nDESCRIPTION: This example illustrates how to define a default value for a field in Odoo. It shows two ways: using a direct value or a function that returns the default value.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/orm.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nname = fields.Char(default=\"a value\")\n```\n\n----------------------------------------\n\nTITLE: Basic RestructuredText Image Directive for Tax Documentation\nDESCRIPTION: RestructuredText directive for displaying an image showing tax sequence configuration with alt text for accessibility\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/finance/accounting/taxes.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: taxes/subsequent-line.png\n   :alt: The eco-tax is taken into the basis of the 21% VAT tax\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail Loop Parameters in Odoo\nDESCRIPTION: This snippet explains how to change the default behavior for preventing infinite mailing loops in Odoo by enabling developer mode and adding two system parameters: `mail.gateway.loop.minutes` to configure the time span and `mail.gateway.loop.threshold` to configure the number of emails allowed within that time span.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/email_servers_inbound.rst#2025-04-18_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Applying Multiple Classes to a Field in Odoo XML\nDESCRIPTION: This snippet demonstrates how to apply multiple CSS classes to a field in an Odoo XML template. It uses Odoo-specific classes for inline display, left alignment, and avatar-style image rendering.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures/generic_attribute_class.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" class=\"oe_inline oe_left oe_avatar\"/>\n```\n\n----------------------------------------\n\nTITLE: SMTP Error Example from Sendgrid\nDESCRIPTION: Example of a 550 SMTP permanent delivery error message from sendgrid.com indicating an unverified sender identity issue.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/applications/general/email_communication/faq.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMail Delivery Failed\nMail delivery failed via SMTP server 'None'.\nSMTPDataError: 550\nThe from address does not match a verified Sender Identity. Mail cannot be sent until this error is resolved. Visit https://sendgrid.com/docs/for-developers/sending-email/sender-identity/ to see the Sender Identity requirements\n```\n\n----------------------------------------\n\nTITLE: Form: Creating a Button Container\nDESCRIPTION: This XML snippet demonstrates how to create a container for buttons in an Odoo form using a `<div>` element with the class `button_box`.  This allows for grouping and styling of buttons within the form.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/user_interface/view_architectures.rst#2025-04-18_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div name=\"button_box\">\n        <BUTTONS/>\n    </div>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Search and Read Records in Odoo\nDESCRIPTION: Demonstrates the search_read method to find and retrieve records matching specific criteria, with options to limit results and select specific fields\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/external_api.rst#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', True]]], {'fields': ['name', 'country_id', 'comment'], 'limit': 5})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', true]]], {fields: %w(name country_id comment), limit: 5})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'search_read', array(array(array('is_company', '=', true))), array('fields'=>array('name', 'country_id', 'comment'), 'limit'=>5))\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(db, uid, password, \"res.partner\", \"search_read\", asList(asList(asList(\"is_company\", \"=\", true))), new HashMap() {{ put(\"fields\", asList(\"name\", \"country_id\", \"comment\")); put(\"limit\", 5); }}))\n```\n\nLANGUAGE: go\nCODE:\n```\nmodels.Call(\"execute_kw\", []any{db, uid, password, \"res.partner\", \"search_read\", []any{[]any{[]any{\"is_company\", \"=\", true}}}, map[string]any{\"fields\": []string{\"name\", \"country_id\", \"comment\"}, \"limit\": 5}}, &recordFields)\n```\n\n----------------------------------------\n\nTITLE: Implementing Website SEO Metadata Mixin in Odoo Python\nDESCRIPTION: Example of implementing the website.seo.metadata mixin in a BlogPost model to add SEO-related fields for managing page metadata. The mixin adds fields for meta title, description and keywords that can be edited through the frontend Promote tool.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/mixins.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPost(models.Model):\n    _name = \"blog.post\"\n    _description = \"Blog Post\"\n    _inherit = ['website.seo.metadata', 'website.published.mixin']\n```\n\n----------------------------------------\n\nTITLE: CSV Format for Parent-Child Relationships in Odoo\nDESCRIPTION: Demonstrates CSV format for defining records with parent references using :id suffix.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/tutorials/define_module_data.rst#2025-04-18_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nid,parent_id:id,name\n\"child1\",\"module.parent\",\"Name1\"\n\"child2\",\"module.parent\",\"Name2\"\n\"child3\",\"module.parent\",\"Name3\"\n```\n\n----------------------------------------\n\nTITLE: Defining a QUnit Test Module in JavaScript\nDESCRIPTION: Creates a basic QUnit test module structure for an Odoo addon. This sets up the module and submodule for organizing related tests.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/testing.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define('my_addon.utils_tests', function (require) {\n\"use strict\";\n\nvar utils = require('my_addon.utils');\n\nQUnit.module('my_addon', {}, function () {\n\n    QUnit.module('utils');\n\n});\n});\n```\n\n----------------------------------------\n\nTITLE: Secure Content Rendering with QWeb in JavaScript and XML\nDESCRIPTION: This snippet shows a secure way to render user-provided content using t-esc in QWeb templates, preventing XSS vulnerabilities.\nSOURCE: https://github.com/desarrollosur/odoo17docs/blob/main/content/developer/reference/backend/security.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb.render('secure_template', {\n    message: \"You have an important notification on the product:\",\n    subject: product.name\n})\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div t-name=\"secure_template\">\n    <div id=\"information-bar\">\n        <div class=\"info\"><t t-esc=\"message\" /></div>\n        <div class=\"subject\"><t t-esc=\"subject\" /></div>\n    </div>\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.subject {\n    font-weight: bold;\n}\n```"
  }
]